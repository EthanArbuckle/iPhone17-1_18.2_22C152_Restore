uint64_t sd::IMSSubscriberModel::getPersonalityInfo@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2;

  v2 = *(void *)(this + 48);
  *a2 = *(void *)(this + 40);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::getPersonalityInfo(sd::IMSSubscriberController *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 14) + 80))();
}

void sd::IMSSubscriberController::sendAccessNetworkInfoUpdate_sync(sd::IMSSubscriberController *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  char v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 400))(*((void *)this + 20));
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  v4 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v3);
  if ((*(unsigned int (**)(sd::IMSSubscriberController *))(*(void *)this + 608))(this)) {
    BOOL v5 = (v2 & 1) == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    v8 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v15[0]) = 0;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I AccessNetworkInfoUpdate: On a CS call and in iWLan mode. Don't send access network info update", (uint8_t *)v15, 2u);
    }
    return;
  }
  uint64_t v23 = (*(uint64_t (**)(void))(**((void **)this + 20) + 384))(*((void *)this + 20));
  uint64_t v24 = v6;
  if ((*(uint64_t (**)(void))(**((void **)this + 20) + 400))()) {
    int v7 = 18;
  }
  else {
    int v7 = (*(uint64_t (**)(void))(**((void **)this + 20) + 512))(*((void *)this + 20));
  }
  HIDWORD(v23) = v7;
  uint64_t v10 = *((void *)this + 27);
  if (v10)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)v16 = 0u;
    long long v17 = 0u;
    memset(v15, 0, sizeof(v15));
    uint64_t v22 = 0x10100000001;
    uint64_t v11 = *((void *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(buf, "AccessNetworkInfoUpdate");
    int v12 = (*(uint64_t (**)(uint64_t, _OWORD *, uint8_t *, void))(*(void *)v11 + 680))(v11, v15, buf, 0);
    int v13 = v12;
    if (v26 < 0)
    {
      operator delete(*(void **)buf);
      if (!v13)
      {
LABEL_18:
        ims::NetworkServices::~NetworkServices((void **)v15);
        return;
      }
    }
    else if (!v12)
    {
      goto LABEL_18;
    }
    HIDWORD(v24) = sd::ipTelephonyServiceMaskToImsServiceMask((sd *)LODWORD(v16[1]));
    (*(void (**)(void, uint64_t *))(**((void **)this + 20) + 392))(*((void *)this + 20), &v23);
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v10 + 328))(v10, v15);
    v14 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v16[1];
      _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#I AccessNetworkInfoUpdate: sent request (services=%u)", buf, 8u);
    }
    goto LABEL_18;
  }
}

void sub_223AF4AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

unint64_t sd::IMSSubscriberModel::getIWLanMode(sd::IMSSubscriberModel *this)
{
  return *(unsigned __int8 *)(*((void *)this + 24) + 32) | ((unint64_t)*(unsigned int *)(*((void *)this + 24)
                                                                                                  + 36) << 32);
}

void sd::IMSSubscriberController::handleCellChanged_sync(sd::IMSSubscriberController *this)
{
  v9[209] = *(void **)MEMORY[0x263EF8340];
  bzero(v9, 0x688uLL);
  (*(void (**)(void **__return_ptr))(**((void **)this + 20) + 456))(v9);
  (*(void (**)(void))(**((void **)this + 20) + 512))(*((void *)this + 20));
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = asString();
    __int16 v7 = 2080;
    uint64_t v8 = asString();
    _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I CellChanged: DataMode = %s, RF Band Type = %s", (uint8_t *)&v5, 0x16u);
  }
  uint64_t v4 = *((void *)this + 24);
  if (!v4 || ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4) & 1) == 0)
  {
    (*(void (**)(sd::IMSSubscriberController *))(*(void *)this + 264))(this);
    (*(void (**)(sd::IMSSubscriberController *))(*(void *)this + 272))(this);
  }
  sd::RuntimeInfo::~RuntimeInfo(v9);
}

void sub_223AF4D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sd::RuntimeInfo::~RuntimeInfo((void **)va);
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sd::IMSSubscriberModel::fetchRFBandType(sd::IMSSubscriberModel *this@<X0>, void *a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  bzero(v9, 0x688uLL);
  (*(void (**)(void **__return_ptr, sd::IMSSubscriberModel *))(*(void *)this + 456))(v9, this);
  size_t v4 = (char **)MEMORY[0x263F03520];
  if (v10)
  {
    if (v10 != 1)
    {
      CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)*MEMORY[0x263F03520], 0x8000100u);
      (*(void (**)(const void **__return_ptr))(**((void **)this + 11) + 40))(&v5);
      long long v7 = 0uLL;
      uint64_t v8 = 0;
      ctu::cf::assign();
      *(_OWORD *)a2 = v7;
      a2[2] = v8;
      ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v5);
      ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v6);
      goto LABEL_6;
    }
    size_t v4 = (char **)MEMORY[0x263F03528];
  }
  std::string::basic_string[abi:ne180100]<0>(a2, *v4);
LABEL_6:
  sd::RuntimeInfo::~RuntimeInfo(v9);
}

void sub_223AF4FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&a10);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&a11);
  sd::RuntimeInfo::~RuntimeInfo(&a18);
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberModel::createUpdatedNetworkServices(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v38[209] = *(void **)MEMORY[0x263EF8340];
  memset(&v27, 0, sizeof(v27));
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v27 = *(std::string *)a3;
  }
  std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  if (!size) {
    std::string::__assign_external(&v27, "createUpdatedNetworkServices", 0x1CuLL);
  }
  bzero(v38, 0x688uLL);
  sd::DataCache::getRuntimeInfo((sd::DataCache *)v38, *(void *)(a1 + 192));
  if (a4)
  {
    int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 488))(*(void *)(a1 + 136));
    int v9 = v8;
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 192);
    int v8 = *(unsigned __int8 *)(v10 + 32);
    int v9 = *(_DWORD *)(v10 + 36);
  }
  if (v9) {
    BOOL v11 = 0;
  }
  else {
    BOOL v11 = v8 != 0;
  }
  *(_DWORD *)(a2 + 296) = sd::IMSSubscriberModel::getPreferredMediaStack((sd::IMSSubscriberModel *)a1, (sd::IMSSubscriberConfigInterface *)(v8 != 0));
  int v12 = v38;
  if (a4) {
    int v12 = (void **)((char *)v38 + 1);
  }
  *(_DWORD *)(a2 + 304) = *(unsigned __int8 *)v12;
  *(_DWORD *)(a2 + 216) = sd::imsServiceMaskToIpTelephonyServiceMask();
  std::string::operator=((std::string *)(a2 + 224), (const std::string *)(a1 + 304));
  uint64_t v13 = *(void *)(a1 + 120);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  (*(void (**)(unsigned char *__return_ptr, uint64_t, void **))(*(void *)v13 + 32))(buf, v13, __p);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + 272));
  *(_OWORD *)(a2 + 272) = *(_OWORD *)buf;
  *(void *)(a2 + 288) = *(void *)&buf[16];
  v28 = (void **)buf;
  memset(buf, 0, 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  *(unsigned char *)(a2 + 300) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 752))(a1, 9);
  *(unsigned char *)(a2 + 308) = (*(uint64_t (**)(void, void))(**(void **)(a1 + 136) + 448))(*(void *)(a1 + 136), *(unsigned int *)(*(void *)(a1 + 40) + 52));
  uint64_t v14 = sd::IMSSubscriberModel::fillNetworkAccessInfo_sync(a1, a2, (uint64_t *)&v27, v8 != 0, v9);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  v16 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = *(_DWORD *)(a2 + 304);
    uint64_t v18 = sd::asString();
    uint64_t v19 = asStringBool();
    long long v20 = *(const char **)(a2 + 272);
    if (v20 == *(const char **)(a2 + 280))
    {
      long long v20 = "-";
    }
    else if (v20[23] < 0)
    {
      long long v20 = *(const char **)v20;
    }
    uint64_t v21 = asStringBool();
    uint64_t v22 = "[overCell]";
    int v23 = *(unsigned __int8 *)(a2 + 308);
    if (!v11) {
      uint64_t v22 = "";
    }
    *(_DWORD *)buf = 67110658;
    *(_DWORD *)&buf[4] = v17;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v18;
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = v19;
    __int16 v30 = 2082;
    v31 = v20;
    __int16 v32 = 2080;
    uint64_t v33 = v21;
    __int16 v34 = 2080;
    v35 = v22;
    __int16 v36 = 1024;
    int v37 = v23;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I Updated IMS Network Services Info: appId=%d, services=%s, context=%{public}s, iface=%{public}s, iWlan=%s %s, hasLegacyRat=%d)", buf, 0x40u);
  }
  sd::RuntimeInfo::~RuntimeInfo(v38);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_223AF5424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN26SystemDeterminationManager12initWatchdogEv_block_invoke(void *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    size_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      size_t v5 = v4;
      if (a1[5])
      {
        CFStringRef v6 = *(void **)(v3 + 104);
        if (v6 != (void *)(v3 + 112))
        {
          do
          {
            uint64_t v18 = 0;
            uint64_t v19 = 0;
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v6[7] + 64))(&v18);
            int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 776))(v18);
            int v8 = (capabilities::ct *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 336))(v18);
            if (v9 == 1) {
              int v10 = 0;
            }
            else {
              int v10 = v7;
            }
            if (v10 == 1
              && (!capabilities::ct::supports5G(v8)
               || (*(unsigned int (**)(void))(*(void *)v6[7] + 632))(v6[7])))
            {
              BOOL v11 = *(NSObject **)(v3 + 40);
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
              {
                int v12 = (const char *)(v6 + 4);
                uint64_t v13 = *((unsigned __int8 *)v6 + 55);
                BOOL v14 = (v13 & 0x80u) != 0;
                if ((v13 & 0x80u) != 0) {
                  uint64_t v13 = v6[5];
                }
                if (v14) {
                  int v12 = (const char *)v6[4];
                }
                if (!v13) {
                  int v12 = "<invalid>";
                }
                *(_DWORD *)buf = 136315138;
                uint64_t v21 = v12;
                _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#E Watchdog detected that %s should be registered but we are not. Attempt to Register", buf, 0xCu);
              }
              (*(void (**)(void, const char *, uint64_t))(*(void *)v6[7] + 520))(v6[7], "WatchdogTimer", 16);
            }
            if (v19) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
            }
            uint64_t v15 = (void *)v6[1];
            if (v15)
            {
              do
              {
                v16 = v15;
                uint64_t v15 = (void *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                v16 = (void *)v6[2];
                BOOL v17 = *v16 == (void)v6;
                CFStringRef v6 = v16;
              }
              while (!v17);
            }
            CFStringRef v6 = v16;
          }
          while (v16 != (void *)(v3 + 112));
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_223AF571C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberModel::isQualifiedToRegister(sd::IMSSubscriberModel *this)
{
  int v2 = *(unsigned __int8 *)(*((void *)this + 24) + 32);
  if (((*(uint64_t (**)(void))(**((void **)this + 11) + 360))(*((void *)this + 11)) & 1) != 0
    && (uint64_t v3 = *((void *)this + 17),
        uint64_t v4 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this),
        (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v3 + 432))(v3, v4)))
  {
    uint64_t v5 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
    CFStringRef v6 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v11 = 0;
      _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I Proceeding with unprovisioned SIM.", v11, 2u);
    }
    int v7 = (char *)this + 272;
  }
  else
  {
    int v7 = (char *)this + 268;
  }
  LODWORD(result) = (*(uint64_t (**)(sd::IMSSubscriberModel *, void))(*(void *)this + 760))(this, *(unsigned int *)v7);
  int v9 = result;
  if (v2) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = result;
  }
  if (v2) {
    BOOL v10 = v9 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10) {
    return *((unsigned char *)this + 277) != 0;
  }
  return result;
}

BOOL *sd::IMSSubscriberConfig::isIMSUnprovisionedAllowed(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 32))(&cf);
  v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AF59D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sd::IMSSubscriberModel::getCurrentImsStatus(sd::IMSSubscriberModel *this)
{
  v1 = (uint64_t *)*((void *)this + 24);
  std::mutex::lock((std::mutex *)(v1 + 215));
  uint64_t v2 = *v1;
  std::mutex::unlock((std::mutex *)(v1 + 215));
  return v2;
}

BOOL sd::IMSSubscriberModel::isRegMaskSet(sd::IMSSubscriberModel *this, int a2)
{
  return (a2 & ~*((_DWORD *)this + 65)) == 0;
}

uint64_t SystemDeterminationManager::handleRegisteredNetworkInfo_sync(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  int v8 = (const ctu::OsLogLogger *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  RegisteredNetworkInfo::dumpState((RegisteredNetworkInfo *)a4, "RegisteredNetworkInfo", v8);
  (*(void (**)(void, uint64_t, unsigned int *))(**(void **)(a1 + 184) + 56))(*(void *)(a1 + 184), a3, a4);
  bzero(&v41, 0x328uLL);
  int v41 = a2;
  MEMORY[0x223CBB680](&v42, a4);
  int v9 = *(void **)(a1 + 104);
  BOOL v10 = (void *)(a1 + 112);
  if (v9 != (void *)(a1 + 112))
  {
    do
    {
      BOOL v11 = (std::__shared_weak_count *)v9[8];
      v40[0] = v9[7];
      v40[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SystemDeterminationManager::handleRegisteredNetworkInfo_sync(subscriber::SimSlot,std::vector<RegisteredNetworkInfoChange> const&,RegisteredNetworkInfo const&)::$_0::operator()<std::shared_ptr<sd::IMSSubscriberControllerInterface>>(&v41, (uint64_t)v40);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      int v12 = (void *)v9[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          int v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v9[2];
          BOOL v14 = *v13 == (void)v9;
          int v9 = v13;
        }
        while (!v14);
      }
      int v9 = v13;
    }
    while (v13 != v10);
  }
  uint64_t v16 = a1 + 128;
  uint64_t v15 = *(void **)(a1 + 128);
  BOOL v17 = (void *)(a1 + 136);
  if (v15 != (void *)(a1 + 136))
  {
    do
    {
      uint64_t v18 = (std::__shared_weak_count *)v15[8];
      v39[0] = v15[7];
      v39[1] = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SystemDeterminationManager::handleRegisteredNetworkInfo_sync(subscriber::SimSlot,std::vector<RegisteredNetworkInfoChange> const&,RegisteredNetworkInfo const&)::$_0::operator()<std::shared_ptr<sd::IMSSubscriberControllerInterface>>(&v41, (uint64_t)v39);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      uint64_t v19 = (void *)v15[1];
      if (v19)
      {
        do
        {
          long long v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          long long v20 = (void *)v15[2];
          BOOL v14 = *v20 == (void)v15;
          uint64_t v15 = v20;
        }
        while (!v14);
      }
      uint64_t v15 = v20;
    }
    while (v20 != v17);
  }
  uint64_t v21 = *(_DWORD **)a3;
  uint64_t v22 = *(_DWORD **)(a3 + 8);
  int v23 = *(_DWORD **)a3;
  if (*(_DWORD **)a3 != v22)
  {
    while (*v23)
    {
      if (++v23 == v22)
      {
        int v23 = *(_DWORD **)(a3 + 8);
        break;
      }
    }
  }
  if (v23 != v22)
  {
    SystemDeterminationManager::handleRatChanged_sync(a1, a2, *a4);
    uint64_t v21 = *(_DWORD **)a3;
    uint64_t v22 = *(_DWORD **)(a3 + 8);
  }
  uint64_t v24 = v22;
  if (v21 != v22)
  {
    uint64_t v24 = v21;
    while (*v24 != 1)
    {
      if (++v24 == v22)
      {
        uint64_t v24 = v22;
        break;
      }
    }
  }
  if (v24 != v22)
  {
    SystemDeterminationManager::handleDataModeChanged_sync((void **)a1, a2, a4[1]);
    uint64_t v21 = *(_DWORD **)a3;
    uint64_t v22 = *(_DWORD **)(a3 + 8);
  }
  if (v21 != v22)
  {
    while (2)
    {
      for (uint64_t i = 0; i != 7; ++i)
      {
        if (*v21 == dword_223B4C4F0[i])
        {
          if (v21 != v22)
          {
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v38 = 0;
            char v26 = *(std::__shared_weak_count **)(a1 + 88);
            __int16 v36 = v26;
            if (v26) {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            PersonalityIdFromSlotId();
            if (v36) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v36);
            }
            std::string v27 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, __p);
            if (v10 != v27)
            {
              v28 = v27;
              uint64_t v29 = v27[7];
              __int16 v30 = (std::__shared_weak_count *)v28[8];
              if (v30) {
                atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v29) {
                (*(void (**)(uint64_t))(*(void *)v29 + 544))(v29);
              }
              if (v30) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v30);
              }
            }
            v31 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v16, __p);
            if (v17 != v31)
            {
              __int16 v32 = v31;
              uint64_t v33 = v31[7];
              __int16 v34 = (std::__shared_weak_count *)v32[8];
              if (v34) {
                atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v33) {
                (*(void (**)(uint64_t))(*(void *)v33 + 544))(v33);
              }
              if (v34) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v34);
              }
            }
            if (SHIBYTE(v38) < 0) {
              operator delete(__p[0]);
            }
          }
          goto LABEL_63;
        }
      }
      if (++v21 != v22) {
        continue;
      }
      break;
    }
  }
LABEL_63:
  if (v51 && v50 < 0) {
    operator delete(v49);
  }
  std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v48);
  std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v47);
  std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v46);
  std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v45);
  std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v44);
  return std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v43);
}

void sub_223AF5E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  SystemDeterminationManager::handleRegisteredNetworkInfo_sync(subscriber::SimSlot,std::vector<RegisteredNetworkInfoChange> const&,RegisteredNetworkInfo const&)::$_0::~$_0((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void SystemDeterminationManager::handleRegisteredNetworkInfo_sync(subscriber::SimSlot,std::vector<RegisteredNetworkInfoChange> const&,RegisteredNetworkInfo const&)::$_0::operator()<std::shared_ptr<sd::IMSSubscriberControllerInterface>>(int *a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v7 = 0;
  int v8 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 64))(&v7);
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 64))(v7))
  {
    int v4 = *a1;
    if (v4 == (*(unsigned int (**)(uint64_t))(*(void *)v7 + 72))(v7)) {
      goto LABEL_6;
    }
  }
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 64))(&v9);
  int v5 = (*(uint64_t (**)(void *))(*(void *)v9 + 64))(v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v5 == 1)
  {
LABEL_6:
    bzero(&v9, 0x688uLL);
    (*(void (**)(void **__return_ptr))(*(void *)v7 + 456))(&v9);
    if (a1[2] != 11)
    {
      int v6 = a1[3];
      if (v6 >= 1 && v6 != 18) {
        RegisteredNetworkInfo::operator=();
      }
    }
    RegisteredNetworkInfo::operator=();
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 448))(v7, &v9);
    sd::RuntimeInfo::~RuntimeInfo(&v9);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_223AF6134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sd::IMSSubscriberController::getModel_sync@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 168);
  *a2 = *(void *)(this + 160);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void sd::RuntimeInfo::~RuntimeInfo(void **this)
{
  if (*((unsigned char *)this + 1648) && *((char *)this + 1615) < 0) {
    operator delete(this[199]);
  }
  std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 183));
  std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 165));
  std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 148));
  std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 135));
  std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 122));
  std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 110));
  if (*((unsigned char *)this + 848) && *((char *)this + 815) < 0) {
    operator delete(this[99]);
  }
  std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 83));
  std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 65));
  std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 48));
  std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 35));
  std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 22));
  std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 10));
  uint64_t v2 = this + 5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

uint64_t std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 128))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
  }
  return a1;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    CFBooleanRef v3 = **a1;
    operator delete(v3);
  }
}

void *std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  CFBooleanRef v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v5 = (void *)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      int v5 = v3;
    }
    CFBooleanRef v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  size_t v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (void *)*a1;
    size_t v3 = v2;
  }
  size_t v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v5 = v4;
  }
  if (v5 >= v3) {
    size_t v6 = v3;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (v3 == v5) {
      return 0;
    }
    if (v3 >= v5) {
      return 1;
    }
  }
  return 255;
}

uint64_t sd::IMSSubscriberModel::getPersonalityType(sd::IMSSubscriberModel *this)
{
  return *(unsigned __int8 *)(*((void *)this + 5) + 49);
}

uint64_t sd::IMSSubscriberModel::getSimSlot(sd::IMSSubscriberModel *this)
{
  return *(unsigned int *)(*((void *)this + 5) + 52);
}

uint64_t sd::IMSSubscriberModel::getRuntimeAccessInfo@<X0>(Registry **this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)&v154[16] = *MEMORY[0x263EF8340];
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
  uint64_t v117 = 0;
  long long v115 = 0u;
  memset(v116, 0, sizeof(v116));
  long long v113 = 0u;
  long long v114 = 0u;
  memset(v112, 0, sizeof(v112));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v112);
  bzero(v120, 0x688uLL);
  (*((void (**)(void **__return_ptr, Registry **))*this + 57))(v120, this);
  if (a2) {
    uint64_t v6 = 68;
  }
  else {
    uint64_t v6 = 868;
  }
  switch(*(_DWORD *)((char *)v120 + v6))
  {
    case 1:
    case 2:
      uint64_t v16 = 64;
      if (!a2) {
        uint64_t v16 = 864;
      }
      if (v121[v16 + 16])
      {
        BOOL v17 = v122;
        if (!a2) {
          BOOL v17 = v139;
        }
        unsigned __int16 v18 = *(_WORD *)v17;
        uint64_t v19 = &v122[2];
        if (!a2) {
          uint64_t v19 = &v139[2];
        }
        unsigned __int16 v20 = *(_WORD *)v19;
        if (a2) {
          uint64_t v21 = (MCC *)v121;
        }
        else {
          uint64_t v21 = (MCC *)&v138;
        }
        unsigned int IntValue = MCC::getIntValue(v21);
        uint64_t v23 = 108;
        if (a2) {
          uint64_t v23 = 8;
        }
        unsigned int v24 = MCC::getIntValue((MCC *)&v120[v23 + 7]);
        sd::IMSSubscriberModel::fillMccMnc((uint64_t *)v112, IntValue, v24);
        *(void *)&long long v110 = v18;
        *((void *)&v110 + 1) = 4;
        LOWORD(v111) = 257;
        *(void *)&long long v118 = v20;
        *((void *)&v118 + 1) = 4;
        __int16 v119 = 257;
      }
      goto LABEL_149;
    case 3:
    case 4:
    case 5:
      uint64_t v7 = 64;
      if (!a2) {
        uint64_t v7 = 864;
      }
      if (v123[v7 + 24])
      {
        int v8 = v124;
        if (!a2) {
          int v8 = v141;
        }
        unsigned __int16 v9 = *(_WORD *)v8;
        BOOL v10 = &v124[2];
        if (!a2) {
          BOOL v10 = &v141[2];
        }
        uint64_t v11 = *(unsigned int *)v10;
        if (a2) {
          int v12 = (MCC *)v123;
        }
        else {
          int v12 = (MCC *)&v140;
        }
        unsigned int v13 = MCC::getIntValue(v12);
        uint64_t v14 = 864;
        if (a2) {
          uint64_t v14 = 64;
        }
        unsigned int v15 = MCC::getIntValue((MCC *)&v121[v14 + 64]);
        sd::IMSSubscriberModel::fillMccMnc((uint64_t *)v112, v13, v15);
        *(void *)&long long v110 = v9;
        *((void *)&v110 + 1) = 4;
        LOWORD(v111) = 257;
        *(void *)&long long v118 = v11;
        *((void *)&v118 + 1) = 7;
        __int16 v119 = 257;
      }
      else
      {
        uint64_t v35 = 864;
        if (a2) {
          uint64_t v35 = 64;
        }
        if (v125[v35 + 24])
        {
          __int16 v36 = v126;
          if (!a2) {
            __int16 v36 = v143;
          }
          unsigned __int16 v37 = *(_WORD *)v36;
          uint64_t v38 = &v126[2];
          if (!a2) {
            uint64_t v38 = &v143[2];
          }
          uint64_t v39 = *(unsigned int *)v38;
          if (a2) {
            v40 = (MCC *)v125;
          }
          else {
            v40 = (MCC *)&v142;
          }
          unsigned int v41 = MCC::getIntValue(v40);
          uint64_t v42 = 864;
          if (a2) {
            uint64_t v42 = 64;
          }
          unsigned int v43 = MCC::getIntValue((MCC *)&v124[v42 + 6]);
          sd::IMSSubscriberModel::fillMccMnc((uint64_t *)v112, v41, v43);
          *(void *)&long long v110 = v37;
          *((void *)&v110 + 1) = 4;
          LOWORD(v111) = 257;
          *(void *)&long long v118 = v39;
          *((void *)&v118 + 1) = 7;
          __int16 v119 = 257;
        }
      }
      goto LABEL_149;
    case 0xA:
      uint64_t v63 = 64;
      if (!a2) {
        uint64_t v63 = 864;
      }
      if (v132[v63 + 104])
      {
        unsigned int v64 = v133[1];
        unsigned int v65 = v150[1];
        v66 = (__int16 *)v135;
        if (!a2) {
          v66 = (__int16 *)&v152;
        }
        __int16 v67 = *v66;
        v68 = &v151;
        if (a2) {
          v68 = &v134;
        }
        unsigned __int16 v69 = *(_WORD *)v68;
        if (a2) {
          v70 = v133;
        }
        else {
          v70 = v150;
        }
        *(void *)&long long v110 = *v70;
        *((void *)&v110 + 1) = 4;
        LOWORD(v111) = 257;
        if (a2) {
          uint64_t v71 = v64;
        }
        else {
          uint64_t v71 = v65;
        }
        *(void *)&long long v118 = v71;
        *((void *)&v118 + 1) = 4;
        __int16 v119 = 257;
        v108[0] = v67;
        v108[1] = 2;
        __int16 v109 = 257;
        v106[0] = v69;
        v106[1] = 4;
        __int16 v107 = 257;
      }
      goto LABEL_149;
    case 0xD:
      uint64_t v44 = 64;
      if (!a2) {
        uint64_t v44 = 864;
      }
      if (v135[v44 + 28])
      {
        uint64_t v45 = 0;
        uint64_t v46 = &v136;
        if (!a2) {
          uint64_t v46 = &v153;
        }
        long long v118 = *(_OWORD *)v46;
        uint64_t v47 = (unsigned __int8 *)&v137;
        uint64_t v48 = &v154[1];
        if (a2) {
          uint64_t v48 = (char *)&v137 + 1;
        }
        int v49 = *v48;
        if (!a2) {
          uint64_t v47 = v154;
        }
        unsigned __int8 v50 = *v47;
        if (v49) {
          unsigned __int8 v51 = v50;
        }
        else {
          unsigned __int8 v51 = 0;
        }
        uint64_t v52 = v51;
        do
        {
          *(void *)&long long v110 = *((unsigned __int8 *)&v118 + v45);
          *((void *)&v110 + 1) = 2;
          LOWORD(v111) = 257;
          ++v45;
        }
        while (v45 != 16);
        *(void *)&long long v110 = v52;
        *((void *)&v110 + 1) = 2;
        LOWORD(v111) = 257;
      }
      goto LABEL_149;
    case 0xE:
      long long v110 = 0uLL;
      ServiceMap = (std::mutex *)Registry::getServiceMap(this[7]);
      v54 = ServiceMap;
      uint64_t v55 = *(void *)(MEMORY[0x263F03600] + 8);
      if (v55 < 0)
      {
        v56 = (unsigned __int8 *)(v55 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v57 = 5381;
        do
        {
          uint64_t v55 = v57;
          unsigned int v58 = *v56++;
          uint64_t v57 = (33 * v57) ^ v58;
        }
        while (v58);
      }
      std::mutex::lock(ServiceMap);
      *(void *)&long long v118 = v55;
      v59 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v54[1].__m_.__sig, (unint64_t *)&v118);
      if (v59)
      {
        uint64_t v61 = v59[3];
        v60 = (std::__shared_weak_count *)v59[4];
        if (v60)
        {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v54);
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v60);
          char v62 = 0;
          goto LABEL_127;
        }
      }
      else
      {
        uint64_t v61 = 0;
      }
      std::mutex::unlock(v54);
      v60 = 0;
      char v62 = 1;
LABEL_127:
      v93 = (capabilities::ct *)(*(void *(**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v61 + 40))(&v110, v61, (uint64_t)this[5] + 24);
      if ((v62 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
      if ((void)v110 && capabilities::ct::supportsCellRadio(v93)) {
        int v94 = (*(uint64_t (**)(void))(*(void *)v110 + 56))(v110);
      }
      else {
        int v94 = 0;
      }
      v95 = (sd *)*((void *)&v110 + 1);
      if (*((void *)&v110 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v110 + 1));
      }
      if ((sd::IsDataConnectionImSupportedByDevice(v95) | v94) == 1)
      {
        uint64_t v96 = 64;
        if (!a2) {
          uint64_t v96 = 864;
        }
        if (v127[v96 + 56])
        {
          v97 = v128;
          if (!a2) {
            v97 = v145;
          }
          int v98 = *(_DWORD *)v97;
          v99 = v129;
          if (!a2) {
            v99 = v146;
          }
          uint64_t v100 = *(unsigned int *)v99;
          if (a2) {
            v101 = (MCC *)v127;
          }
          else {
            v101 = (MCC *)v144;
          }
          unsigned int v102 = MCC::getIntValue(v101);
          uint64_t v103 = 864;
          if (a2) {
            uint64_t v103 = 64;
          }
          unsigned int v104 = MCC::getIntValue((MCC *)&v126[v103 + 6]);
          sd::IMSSubscriberModel::fillMccMnc((uint64_t *)v112, v102, v104);
          *(void *)&long long v110 = (unsigned __int16)v98;
          *((void *)&v110 + 1) = 4;
          LOWORD(v111) = 257;
          *(void *)&long long v118 = v100;
          *((void *)&v118 + 1) = 7;
          __int16 v119 = 257;
        }
      }
      goto LABEL_149;
    case 0x10:
    case 0x11:
      long long v110 = 0uLL;
      v25 = (std::mutex *)Registry::getServiceMap(this[7]);
      char v26 = v25;
      uint64_t v27 = *(void *)(MEMORY[0x263F03600] + 8);
      if (v27 < 0)
      {
        v28 = (unsigned __int8 *)(v27 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v29 = 5381;
        do
        {
          uint64_t v27 = v29;
          unsigned int v30 = *v28++;
          uint64_t v29 = (33 * v29) ^ v30;
        }
        while (v30);
      }
      std::mutex::lock(v25);
      *(void *)&long long v118 = v27;
      v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v26[1].__m_.__sig, (unint64_t *)&v118);
      if (v31)
      {
        uint64_t v33 = v31[3];
        __int16 v32 = (std::__shared_weak_count *)v31[4];
        if (v32)
        {
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v26);
          atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          char v34 = 0;
          goto LABEL_87;
        }
      }
      else
      {
        uint64_t v33 = 0;
      }
      std::mutex::unlock(v26);
      __int16 v32 = 0;
      char v34 = 1;
LABEL_87:
      v72 = (capabilities::ct *)(*(void *(**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v33 + 40))(&v110, v33, (uint64_t)this[5] + 24);
      if ((v34 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      if ((void)v110 && capabilities::ct::supportsCellRadio(v72)) {
        int v73 = (*(uint64_t (**)(void))(*(void *)v110 + 56))(v110);
      }
      else {
        int v73 = 0;
      }
      v74 = (sd *)*((void *)&v110 + 1);
      if (*((void *)&v110 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v110 + 1));
      }
      if ((sd::IsDataConnectionImSupportedByDevice(v74) | v73) == 1)
      {
        if (a2) {
          uint64_t v75 = 82;
        }
        else {
          uint64_t v75 = 182;
        }
        if (LOBYTE(v120[v75]))
        {
          v76 = (unsigned int *)&v131;
          if (!a2) {
            v76 = (unsigned int *)&v148;
          }
          uint64_t v77 = *v76;
          v78 = (uint64_t *)v132;
          if (!a2) {
            v78 = &v149;
          }
          uint64_t v79 = *v78;
          if (a2) {
            v80 = (MCC *)&v130;
          }
          else {
            v80 = (MCC *)&v147;
          }
          unsigned int v81 = MCC::getIntValue(v80);
          uint64_t v82 = 864;
          if (a2) {
            uint64_t v82 = 64;
          }
          unsigned int v83 = MCC::getIntValue((MCC *)&v129[v82 + 32]);
          sd::IMSSubscriberModel::fillMccMnc((uint64_t *)v112, v81, v83);
          *(void *)&long long v110 = v77;
          *((void *)&v110 + 1) = 6;
          LOWORD(v111) = 257;
          *(void *)&long long v118 = v79;
          *((void *)&v118 + 1) = 9;
          __int16 v119 = 257;
        }
        if (*(_DWORD *)((char *)v120 + v6) == 16 && !LOBYTE(v120[v75]))
        {
          uint64_t v84 = 864;
          if (a2) {
            uint64_t v84 = 64;
          }
          if (v127[v84 + 56])
          {
            v85 = v128;
            if (!a2) {
              v85 = v145;
            }
            int v86 = *(_DWORD *)v85;
            v87 = v129;
            if (!a2) {
              v87 = v146;
            }
            uint64_t v88 = *(unsigned int *)v87;
            if (a2) {
              v89 = (MCC *)v127;
            }
            else {
              v89 = (MCC *)v144;
            }
            unsigned int v90 = MCC::getIntValue(v89);
            uint64_t v91 = 864;
            if (a2) {
              uint64_t v91 = 64;
            }
            unsigned int v92 = MCC::getIntValue((MCC *)&v126[v91 + 6]);
            sd::IMSSubscriberModel::fillMccMnc((uint64_t *)v112, v90, v92);
            *(void *)&long long v110 = (unsigned __int16)v86;
            *((void *)&v110 + 1) = 6;
            LOWORD(v111) = 257;
            *(void *)&long long v118 = v88;
            *((void *)&v118 + 1) = 9;
            __int16 v119 = 257;
          }
        }
      }
LABEL_149:
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v112 + 8, &v110);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v110;
      *(void *)(a3 + 16) = v111;
      sd::RuntimeInfo::~RuntimeInfo(v120);
      *(void *)&v112[0] = *MEMORY[0x263F8C2C8];
      *(void *)((char *)v112 + *(void *)(*(void *)&v112[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
      *((void *)&v112[0] + 1) = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v114) < 0) {
        operator delete(*((void **)&v113 + 1));
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x223CBBDB0](v116);
    default:
      goto LABEL_149;
  }
}

void sub_223AF7068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  sd::RuntimeInfo::~RuntimeInfo(&a57);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  if (*(char *)(v57 + 23) < 0) {
    operator delete(*(void **)v57);
  }
  _Unwind_Resume(a1);
}

uint64_t *sd::IMSSubscriberModel::fillMccMnc(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  int v6 = _is3DigitMNCWithMCC();
  uint64_t v9 = a2;
  uint64_t v10 = 3;
  __int16 v11 = 256;
  if (v6) {
    uint64_t v7 = 3;
  }
  else {
    uint64_t v7 = 2;
  }
  uint64_t v9 = a3;
  uint64_t v10 = v7;
  __int16 v11 = 256;
}

uint64_t *anonymous namespace'::operator<<(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = (int)v4;
  if (*(unsigned char *)(a2 + 17))
  {
    int v6 = (const std::ios_base *)((char *)a1 + *(void *)(v5 - 24));
    if (v6[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v6);
      uint64_t v7 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      std::ios_base::fmtflags v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 32);
      std::locale::~locale(&v14);
      v6[1].__fmtflags_ = v8;
    }
    v6[1].__fmtflags_ = 48;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
  }
  else
  {
    size_t v10 = v9 - v4;
    if (v9 < v4) {
      size_t v10 = 0;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v11, v12);
  }
  return a1;
}

void sub_223AF7390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0;
  v13[1] = 0;
  MEMORY[0x223CBBC60](v13, a1);
  if (LOBYTE(v13[0]))
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      size_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x223CBBC70](v13);
  return a1;
}

void sub_223AF74E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x223CBBC70](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x223AF74C4);
}

void sub_223AF7538(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v18 = 0;
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      unsigned int v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_223AF76C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::DataCache::getRuntimeInfo(sd::DataCache *this, uint64_t a2)
{
  unint64_t v4 = (std::mutex *)(a2 + 1720);
  std::mutex::lock((std::mutex *)(a2 + 1720));
  *(void *)this = *(void *)(a2 + 48);
  *((_DWORD *)this + 2) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    *((_OWORD *)this + 1) = *(_OWORD *)(a2 + 64);
    *((void *)this + 4) = *(void *)(a2 + 80);
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 40), *(long long **)(a2 + 88), *(long long **)(a2 + 96), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 96) - *(void *)(a2 + 88)) >> 3));
  MEMORY[0x223CBB680]((char *)this + 64, a2 + 112);
  MEMORY[0x223CBB680]((char *)this + 864, a2 + 912);
  *((void *)this + 208) = *(void *)(a2 + 1712);

  std::mutex::unlock(v4);
}

void sub_223AF77C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_223AF7880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberConfig::CopyIMSConfigValue(sd::IMSSubscriberConfig *this@<X0>, const char *a2@<X1>, const char *a3@<X2>, const char *a4@<X3>, const void *a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, std::string *a8@<X8>)
{
  v25[0] = v25;
  v25[1] = v25;
  uint64_t v26 = 0;
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v16 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, 0x8000100u);
  CFTypeRef cf = v16;
  BOOL v17 = operator new(0x18uLL);
  *BOOL v17 = 0;
  v17[1] = 0;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::SharedRef(v17 + 2, v16);
  uint64_t v18 = v25[0];
  *BOOL v17 = v25[0];
  v17[1] = v25;
  v18[1] = v17;
  v25[0] = v17;
  ++v26;
  CFStringRef v19 = CFStringCreateWithCString(v15, a3, 0x8000100u);
  CFTypeRef v20 = cf;
  CFTypeRef cf = v19;
  uint64_t v27 = v20;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&v27);
  uint64_t v21 = operator new(0x18uLL);
  *uint64_t v21 = 0;
  v21[1] = 0;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::SharedRef(v21 + 2, cf);
  uint64_t v22 = v25[0];
  *uint64_t v21 = v25[0];
  v21[1] = v25;
  v22[1] = v21;
  v25[0] = v21;
  ++v26;
  std::list<ctu::cf::CFSharedRef<__CFString const>>::list((uint64_t *)v23, (uint64_t)v25);
  sd::IMSSubscriberConfig::CopyIMSConfigValue((uint64_t)this, (uint64_t *)v23, a4, a5, a6, a7, a8);
  std::__list_imp<ctu::cf::CFSharedRef<__CFString const>>::clear(v23);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&cf);
  std::__list_imp<ctu::cf::CFSharedRef<__CFString const>>::clear(v25);
}

void sub_223AF7A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, const void *a12, const void *a13)
{
}

void sd::IMSSubscriberConfig::CopyIMSConfigValue(sd::IMSSubscriberConfig *this@<X0>, const char *a2@<X1>, const void *a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, std::string *a6@<X8>)
{
  v13[0] = v13;
  v13[1] = v13;
  void v13[2] = 0;
  std::list<ctu::cf::CFSharedRef<__CFString const>>::list((uint64_t *)v12, (uint64_t)v13);
  sd::IMSSubscriberConfig::CopyIMSConfigValue((uint64_t)this, (uint64_t *)v12, a2, a3, a4, a5, a6);
  std::__list_imp<ctu::cf::CFSharedRef<__CFString const>>::clear(v12);
  std::__list_imp<ctu::cf::CFSharedRef<__CFString const>>::clear(v13);
}

void sub_223AF7AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, const void *a12)
{
}

uint64_t *std::list<ctu::cf::CFSharedRef<__CFString const>>::list(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v5 = *(const void **)(i + 16);
    uint64_t v6 = operator new(0x18uLL);
    *uint64_t v6 = 0;
    v6[1] = 0;
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::SharedRef(v6 + 2, v5);
    uint64_t v7 = *a1;
    *uint64_t v6 = *a1;
    v6[1] = a1;
    *(void *)(v7 + 8) = v6;
    *a1 = (uint64_t)v6;
    ++a1[2];
  }
  return a1;
}

void sub_223AF7B98(_Unwind_Exception *a1)
{
  std::__list_imp<ctu::cf::CFSharedRef<__CFString const>>::clear(v1);
  _Unwind_Resume(a1);
}

void *ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::SharedRef(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void sd::IMSSubscriberConfig::CopyIMSConfigValue(uint64_t a1@<X0>, uint64_t *a2@<X1>, const char *a3@<X2>, const void *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  void (***v39)(uint8_t *__return_ptr, void, uint64_t);
  std::mutex *ServiceMap;
  std::mutex *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  unsigned int v45;
  void *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  char *v52;
  char *v53;
  void **v54;
  size_t v55;
  int v56;
  size_t v57;
  const char *v58;
  unint64_t v59;
  std::string *v60;
  void **v61;
  void **v62;
  std::string::size_type v63;
  std::string *v64;
  void *v65;
  NSObject *v66;
  std::string::size_type v67;
  void **v68;
  std::string::__raw *v69;
  void *__p[2];
  uint64_t v72;
  std::string v73;
  void *v74;
  long long v75;
  void *v76;
  char *v77;
  unint64_t v78;
  void v79[2];
  uint8_t buf[32];
  uint64_t v81;

  unsigned int v81 = *MEMORY[0x263EF8340];
  CFRetain(@"IMSConfig");
  unsigned int v13 = operator new(0x18uLL);
  *(void *)buf = 0;
  uint64_t v14 = (void *)a2[1];
  *unsigned int v13 = a2;
  v13[1] = v14;
  void v13[2] = @"IMSConfig";
  void *v14 = v13;
  uint64_t v15 = a2[2] + 1;
  a2[1] = (uint64_t)v13;
  a2[2] = v15;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)buf);
  CFStringRef v16 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], a3, 0x8000100u);
  *(void *)buf = v16;
  BOOL v17 = operator new(0x18uLL);
  v17[1] = a2;
  v17[2] = v16;
  *(void *)buf = 0;
  uint64_t v18 = *a2;
  *BOOL v17 = *a2;
  *(void *)(v18 + 8) = v17;
  *a2 = (uint64_t)v17;
  ++a2[2];
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)buf);
  v76 = 0;
  uint64_t v77 = 0;
  v78 = 0;
  CFStringRef v19 = (uint64_t *)a2[1];
  if (v19 != a2)
  {
    CFTypeRef v20 = 0;
    do
    {
      uint64_t v21 = v19[2];
      if ((unint64_t)v20 >= v78)
      {
        uint64_t v22 = (v20 - (unsigned char *)v76) >> 3;
        if ((unint64_t)(v22 + 1) >> 61) {
          std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v23 = (uint64_t)(v78 - (void)v76) >> 2;
        if (v23 <= v22 + 1) {
          unint64_t v23 = v22 + 1;
        }
        if (v78 - (unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v23;
        }
        if (v24) {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<__CFString const*>>(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = (char *)(v24 + 8 * v22);
        *(void *)uint64_t v26 = v21;
        CFTypeRef v20 = v26 + 8;
        v28 = (char *)v76;
        uint64_t v27 = v77;
        if (v77 != v76)
        {
          do
          {
            uint64_t v29 = *((void *)v27 - 1);
            v27 -= 8;
            *((void *)v26 - 1) = v29;
            v26 -= 8;
          }
          while (v27 != v28);
          uint64_t v27 = (char *)v76;
        }
        v76 = v26;
        uint64_t v77 = v20;
        v78 = v24 + 8 * v25;
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(void *)CFTypeRef v20 = v21;
        v20 += 8;
      }
      uint64_t v77 = v20;
      CFStringRef v19 = (uint64_t *)v19[1];
    }
    while (v19 != a2);
  }
  a7->__r_.__value_.__r.__words[0] = 0;
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::SharedRef(a7, a4);
  unsigned int v30 = *(Registry **)(a1 + 40);
  unsigned __int16 v69 = (std::string::__raw *)a7;
  if (*(unsigned char *)(*(void *)(a1 + 56) + 49) != 1)
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(v30);
    unsigned int v41 = ServiceMap;
    uint64_t v42 = *(void *)(MEMORY[0x263F035C8] + 8);
    if (v42 < 0)
    {
      unsigned int v43 = (unsigned __int8 *)(v42 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v44 = 5381;
      do
      {
        uint64_t v42 = v44;
        uint64_t v45 = *v43++;
        uint64_t v44 = (33 * v44) ^ v45;
      }
      while (v45);
    }
    std::mutex::lock(ServiceMap);
    *(void *)buf = v42;
    uint64_t v46 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v41[1].__m_.__sig, (unint64_t *)buf);
    if (v46)
    {
      uint64_t v48 = v46[3];
      uint64_t v47 = (std::__shared_weak_count *)v46[4];
      if (v47)
      {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v41);
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
        int v49 = 0;
        if (!v48) {
          goto LABEL_44;
        }
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v48 = 0;
    }
    std::mutex::unlock(v41);
    uint64_t v47 = 0;
    int v49 = 1;
    if (!v48)
    {
LABEL_44:
      if (v49) {
        goto LABEL_56;
      }
      unsigned __int8 v51 = v47;
      goto LABEL_55;
    }
LABEL_38:
    if (a5) {
      unsigned __int8 v50 = 2;
    }
    else {
      unsigned __int8 v50 = 1;
    }
    (*(void (**)(void **__return_ptr, uint64_t, void, uint64_t, void **, const void *, uint64_t))(*(void *)v48 + 104))(&v74, v48, *(unsigned int *)(*(void *)(a1 + 56) + 52), v50, &v76, a4, a6);
    if (&v74 != (void **)a7)
    {
      *(void *)buf = a7->__r_.__value_.__r.__words[0];
      a7->__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
      v74 = 0;
      ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)buf);
    }
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v74);
    goto LABEL_44;
  }
  v31 = (std::mutex *)Registry::getServiceMap(v30);
  __int16 v32 = v31;
  uint64_t v33 = *(void *)(MEMORY[0x263F03548] + 8);
  if (v33 < 0)
  {
    char v34 = (unsigned __int8 *)(v33 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v35 = 5381;
    do
    {
      uint64_t v33 = v35;
      unsigned int v36 = *v34++;
      uint64_t v35 = (33 * v35) ^ v36;
    }
    while (v36);
  }
  std::mutex::lock(v31);
  *(void *)buf = v33;
  unsigned __int16 v37 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v32[1].__m_.__sig, (unint64_t *)buf);
  if (!v37)
  {
    std::mutex::unlock(v32);
    goto LABEL_56;
  }
  uint64_t v39 = (void (***)(uint8_t *__return_ptr, void, uint64_t))v37[3];
  uint64_t v38 = (std::__shared_weak_count *)v37[4];
  if (v38)
  {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    std::mutex::unlock(v32);
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    if (!v39)
    {
LABEL_54:
      unsigned __int8 v51 = v38;
LABEL_55:
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      goto LABEL_56;
    }
  }
  else
  {
    std::mutex::unlock(v32);
    if (!v39) {
      goto LABEL_56;
    }
  }
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  (**v39)(buf, v39, *(void *)(a1 + 56) + 24);
  if (*(void *)buf)
  {
    (*(void (**)(std::string *__return_ptr))(**(void **)buf + 120))(&v73);
    if (&v73 != a7)
    {
      v74 = (void *)a7->__r_.__value_.__r.__words[0];
      a7->__r_.__value_.__r.__words[0] = v73.__r_.__value_.__r.__words[0];
      v73.__r_.__value_.__r.__words[0] = 0;
      ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v74);
    }
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v73.__r_.__value_.__l.__data_);
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v38) {
    goto LABEL_54;
  }
LABEL_56:
  v74 = 0;
  uint64_t v75 = 0uLL;
  uint64_t v52 = (char *)v76;
  v53 = v77;
  if (v76 == v77)
  {
    unsigned int v65 = 0;
    LOBYTE(v55) = 0;
  }
  else
  {
    v54 = 0;
    uint64_t v55 = 0;
    do
    {
      v56 = (char)v55;
      if ((v55 & 0x80u) == 0) {
        uint64_t v57 = v55;
      }
      else {
        uint64_t v57 = v75;
      }
      *(_OWORD *)&v73.__r_.__value_.__r.__words[1] = 0uLL;
      if (v57) {
        unsigned int v58 = ".";
      }
      else {
        unsigned int v58 = "";
      }
      v73.__r_.__value_.__r.__words[0] = 0;
      if (v57) {
        v59 = v57 + 1;
      }
      else {
        v59 = 0;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v73, v59);
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v60 = &v73;
      }
      else {
        v60 = (std::string *)v73.__r_.__value_.__r.__words[0];
      }
      if (v57)
      {
        if ((v55 & 0x80u) == 0) {
          uint64_t v61 = &v74;
        }
        else {
          uint64_t v61 = v54;
        }
        memmove(v60, v61, v57);
        memcpy((char *)v60 + v57, v58, v57 != 0);
      }
      v60->__r_.__value_.__s.__data_[v57 + (v57 != 0)] = 0;
      memset(buf, 0, 24);
      ctu::cf::assign();
      *(_OWORD *)__p = *(_OWORD *)buf;
      v72 = *(void *)&buf[16];
      if ((buf[23] & 0x80u) == 0) {
        char v62 = __p;
      }
      else {
        char v62 = *(void ***)buf;
      }
      if ((buf[23] & 0x80u) == 0) {
        uint64_t v63 = buf[23];
      }
      else {
        uint64_t v63 = *(void *)&buf[8];
      }
      unsigned int v64 = std::string::append(&v73, (const std::string::value_type *)v62, v63);
      unsigned int v65 = (void *)v64->__r_.__value_.__r.__words[0];
      v79[0] = v64->__r_.__value_.__l.__size_;
      *(void *)((char *)v79 + 7) = *(std::string::size_type *)((char *)&v64->__r_.__value_.__r.__words[1] + 7);
      uint64_t v55 = HIBYTE(v64->__r_.__value_.__r.__words[2]);
      v64->__r_.__value_.__r.__words[0] = 0;
      v64->__r_.__value_.__l.__size_ = 0;
      v64->__r_.__value_.__r.__words[2] = 0;
      if (v56 < 0) {
        operator delete(v54);
      }
      v74 = v65;
      *(void *)&uint64_t v75 = v79[0];
      *(void *)((char *)&v75 + 7) = *(void *)((char *)v79 + 7);
      HIBYTE(v75) = v55;
      if (SHIBYTE(v72) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      v52 += 8;
      v54 = (void **)v65;
    }
    while (v52 != v53);
  }
  v66 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(*(void *)(a1 + 56) + 52));
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v67 = v69->__words[0];
    v68 = &v74;
    if ((v55 & 0x80u) != 0) {
      v68 = (void **)v65;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v68;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v67;
    _os_log_impl(&dword_223AF3000, v66, OS_LOG_TYPE_DEFAULT, "#I %s = %@", buf, 0x16u);
    LOBYTE(v55) = HIBYTE(v75);
  }
  if ((v55 & 0x80) != 0) {
    operator delete(v74);
  }
  if (v76)
  {
    uint64_t v77 = (char *)v76;
    operator delete(v76);
  }
}

void sub_223AF82BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, const void **a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,std::__shared_weak_count *a32,int a33,__int16 a34,char a35,char a36)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(a9);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<__CFString const*>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

const void **ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(const void **a1)
{
  size_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::__list_imp<ctu::cf::CFSharedRef<__CFString const>>::clear(const void **a1)
{
  if (a1[2])
  {
    size_t v2 = (void **)*a1;
    size_t v3 = (const void **)a1[1];
    uint64_t v4 = *v3;
    v4[1] = *((void *)*a1 + 1);
    *v2[1] = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (const void **)v3[1];
        ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(v3 + 2);
        operator delete(v3);
        size_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

const void **ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(const void **a1)
{
  size_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::getLoggerForSlot(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return a1 + 32;
  }
  uint64_t v3 = a1 + 16;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < a2;
    if (v4 >= a2) {
      uint64_t v6 = (uint64_t *)v2;
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 != a1 + 16 && *(_DWORD *)(v3 + 32) <= a2) {
    return v3 + 40;
  }
  else {
    return a1 + 32;
  }
}

void *ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::SharedRef(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void non-virtual thunk to'sd::IMSSubscriberController::getIMSInterfaceList_sync(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X8>)
{
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    int64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    unsigned int v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    int64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  uint64_t v14 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  for (std::vector<std::string>::pointer i = this->__end_; i != v14; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(i[-1].__r_.__value_.__l.__data_);
    }
  }
  this->__end_ = v14;
}

void sub_223AF8940(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223AF8948(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = &v14;
  v12[3] = 1;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v14 + 1) = v9;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    BOOL v5 = __str;
    do
      std::string::operator=(this++, v5++);
    while (v5 != a2);
  }
  return this;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  BOOL v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_223AF8C28(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x223CBBDB0](v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      BOOL v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        BOOL v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  BOOL v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    BOOL v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  BOOL v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

void sd::IMSSubscriberController::sendEmergencyAccessNetworkInfoUpdate_sync(sd::IMSSubscriberController *this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  unint64_t v3 = (NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  if ((*(unsigned int (**)(sd::IMSSubscriberController *))(*(void *)this + 600))(this))
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 16) + 80))(&v17);
    if (!v17)
    {
      uint64_t v7 = *v3;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v9[0]) = 0;
        _os_log_error_impl(&dword_223AF3000, v7, OS_LOG_TYPE_ERROR, "No emergency IMS client - bailing out.", (uint8_t *)v9, 2u);
      }
      goto LABEL_12;
    }
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    memset(v9, 0, sizeof(v9));
    uint64_t v16 = 0x10100000001;
    uint64_t v4 = *((void *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(buf, "EmergencyAccessNetworkInfoUpdate");
    int v5 = (*(uint64_t (**)(uint64_t, _OWORD *, uint8_t *, uint64_t))(*(void *)v4 + 680))(v4, v9, buf, 1);
    int v6 = v5;
    if (v20 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6)
      {
LABEL_11:
        ims::NetworkServices::~NetworkServices((void **)v9);
LABEL_12:
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        return;
      }
    }
    else if (!v5)
    {
      goto LABEL_11;
    }
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 248))(v17, v9);
    uint64_t v8 = *v3;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = DWORD2(v10);
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I EmergencyAccessNetworkInfoUpdate: sent request (services=%u)", buf, 8u);
    }
    goto LABEL_11;
  }
}

void sub_223AF915C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ims::NetworkServices::~NetworkServices(&a9);
  long long v11 = *(std::__shared_weak_count **)(v9 - 72);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberController::getIMSNetworkInterface_sync@<X0>(sd::IMSSubscriberController *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 29);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 88))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void sd::IMSSubscriberController::getIMSInterfaceList_sync(void **a1@<X0>, uint64_t a2@<X1>, long long *a3@<X8>)
{
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  if (a1[29])
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *(void *)(a2 + 8);
    }
    if (v5)
    {
      *((void *)a3 + 1) = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a3, (long long *)a2);
    }
    else
    {
      ((void (*)(void **__return_ptr, void **))(*a1)[70])(__p, a1);
      unint64_t v6 = *((void *)a3 + 2);
      unint64_t v7 = *((void *)a3 + 1);
      if (v7 >= v6)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(void *)a3) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a3) >> 3);
        if (2 * v11 > v10) {
          unint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x555555555555555) {
          unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v12 = v10;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 1);
        if (v12) {
          long long v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 1), v12);
        }
        else {
          long long v13 = 0;
        }
        long long v14 = v13 + v9;
        __v.__first_ = v13;
        __v.__begin_ = v14;
        __v.__end_cap_.__value_ = &v13[v12];
        long long v15 = *(_OWORD *)__p;
        v14->__r_.__value_.__r.__words[2] = (std::string::size_type)v53;
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        __p[1] = 0;
        v53 = 0;
        __p[0] = 0;
        __v.__end_ = v14 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        uint64_t v16 = *((void *)a3 + 1);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v17 = SHIBYTE(v53);
        *((void *)a3 + 1) = v16;
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v8 = *(_OWORD *)__p;
        *(void *)(v7 + 16) = v53;
        *(_OWORD *)unint64_t v7 = v8;
        *((void *)a3 + 1) = v7 + 24;
      }
    }
    uint64_t v48 = 0;
    int v49 = 0;
    uint64_t v50 = 0;
    (*(void (**)(char **__return_ptr))(*a1[29] + 96))(&v48);
    uint64_t v18 = v48;
    if (v49 - v48 >= 1)
    {
      CFStringRef v19 = (std::string *)*((void *)a3 + 1);
      int64_t v20 = (v49 - v48) / 24;
      uint64_t v21 = *((void *)a3 + 2);
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v21 - (uint64_t)v19) >> 3)) >= v20)
      {
        if (v20 <= 0)
        {
          uint64_t v27 = &v48[24 * v20];
          v28 = &v19[v20];
          uint64_t v29 = &v19[-v20];
          uint64_t v30 = *((void *)a3 + 1);
          if (v29 < v19)
          {
            uint64_t v30 = *((void *)a3 + 1);
            do
            {
              long long v31 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
              *(void *)(v30 + 16) = *((void *)&v29->__r_.__value_.__l + 2);
              *(_OWORD *)uint64_t v30 = v31;
              v30 += 24;
              v29->__r_.__value_.__l.__size_ = 0;
              v29->__r_.__value_.__r.__words[2] = 0;
              v29->__r_.__value_.__r.__words[0] = 0;
              ++v29;
            }
            while (v29 < v19);
          }
          *((void *)a3 + 1) = v30;
          if (v19 != v28)
          {
            __int16 v32 = v19 - 1;
            uint64_t v33 = 8 * (((char *)v19 - (char *)v28) >> 3);
            do
            {
              if (SHIBYTE(v32->__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v32->__r_.__value_.__l.__data_);
              }
              char v34 = (long long *)((char *)&v19[-1] + v33);
              long long v35 = *v34;
              v32->__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[(unint64_t)v33 / 8 - 1];
              *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v35;
              --v32;
              v19->__r_.__value_.__s.__data_[v33 - 1] = 0;
              *(unsigned char *)char v34 = 0;
              v33 -= 24;
            }
            while (v33);
          }
          for (; v18 != v27; ++v19)
          {
            std::string::operator=(v19, (const std::string *)v18);
            v18 += 24;
          }
        }
        else
        {
          *((void *)a3 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)(a3 + 1), (long long *)v48, (long long *)v49, *((std::string **)a3 + 1));
        }
      }
      else
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - *(void *)a3) >> 3);
        unint64_t v23 = v22 + v20;
        if (v22 + v20 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v21 - *(void *)a3) >> 3);
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x555555555555555) {
          unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v25 = v23;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 1);
        if (v25) {
          uint64_t v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a3 + 1), v25);
        }
        else {
          uint64_t v26 = 0;
        }
        unsigned int v36 = v26 + v22;
        __v.__first_ = v26;
        __v.__begin_ = v36;
        __v.__end_ = v36;
        __v.__end_cap_.__value_ = &v26[v25];
        uint64_t v37 = 3 * v20;
        uint64_t v38 = &v36[v20];
        uint64_t v39 = 8 * v37;
        do
        {
          if (v18[23] < 0)
          {
            std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v18, *((void *)v18 + 1));
          }
          else
          {
            long long v40 = *(_OWORD *)v18;
            v36->__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
            *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v40;
          }
          ++v36;
          v18 += 24;
          v39 -= 24;
        }
        while (v39);
        __v.__end_ = v38;
        std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)(a3 + 1), (uint64_t)v19, (uint64_t)v19, *(void *)a3, *(void *)a3, (uint64_t)__v.__begin_, (uint64_t)__v.__begin_);
        __v.__begin_ = v41;
        uint64_t v42 = (std::string *)*((void *)a3 + 1);
        std::__split_buffer<std::string>::pointer end = __v.__end_;
        std::__split_buffer<std::string>::pointer v55 = __v.__end_;
        std::__split_buffer<std::string>::pointer v56 = __v.__end_;
        __p[0] = a3 + 1;
        __p[1] = &v55;
        v53 = &v56;
        if (v42 != v19)
        {
          do
          {
            long long v44 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
            end->__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v44;
            ++end;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            v19->__r_.__value_.__r.__words[0] = 0;
            ++v19;
          }
          while (v19 != v42);
          std::__split_buffer<std::string>::pointer v56 = end;
        }
        uint64_t v54 = 1;
        std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)__p);
        long long v45 = *a3;
        value = __v.__end_cap_.__value_;
        *(void *)a3 = __v.__begin_;
        *((void *)a3 + 1) = end;
        *(_OWORD *)&__v.__begin_ = v45;
        uint64_t v47 = (std::string *)*((void *)a3 + 2);
        *((void *)a3 + 2) = value;
        __v.__end_cap_.__value_ = v47;
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v45;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
      }
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
}

void sub_223AF96AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__split_buffer<std::string> *a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__pa)
{
  v18[1] = v19;
  __pa = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  __pa = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

BOOL sd::IMSSubscriberController::isEmergencyCallActive(sd::IMSSubscriberController *this)
{
  return *((unsigned char *)this + 280) && *((unsigned char *)this + 281) != 0;
}

uint64_t sd::IMSSubscriberController::isCallActive(sd::IMSSubscriberController *this)
{
  return *((unsigned __int8 *)this + 280);
}

uint64_t sd::IMSSubscriberController::isOnCsCall(sd::IMSSubscriberController *this)
{
  if (!(*(unsigned int (**)(sd::IMSSubscriberController *))(*(void *)this + 592))(this)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 18);
  (*(void (**)(void **__return_ptr))(**((void **)this + 20) + 56))(__p);
  uint64_t v3 = (*(unsigned int (**)(uint64_t, void **))(*(void *)v2 + 248))(v2, __p) ^ 1;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_223AF9834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberConfig::CopyIMSConfigValue(sd::IMSSubscriberConfig *this@<X0>, const char *a2@<X1>, const char *a3@<X2>, const void *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, std::string *a7@<X8>)
{
  v18[0] = v18;
  v18[1] = v18;
  uint64_t v19 = 0;
  CFStringRef v13 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, 0x8000100u);
  CFStringRef v17 = v13;
  long long v14 = operator new(0x18uLL);
  void *v14 = 0;
  v14[1] = 0;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::SharedRef(v14 + 2, v13);
  long long v15 = v18[0];
  void *v14 = v18[0];
  v14[1] = v18;
  v15[1] = v14;
  v18[0] = v14;
  ++v19;
  std::list<ctu::cf::CFSharedRef<__CFString const>>::list((uint64_t *)v16, (uint64_t)v18);
  sd::IMSSubscriberConfig::CopyIMSConfigValue((uint64_t)this, (uint64_t *)v16, a3, a4, a5, a6, a7);
  std::__list_imp<ctu::cf::CFSharedRef<__CFString const>>::clear(v16);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v17);
  std::__list_imp<ctu::cf::CFSharedRef<__CFString const>>::clear(v18);
}

void sub_223AF9950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  unint64_t v7 = va_arg(va2, const void *);
  std::__list_imp<ctu::cf::CFSharedRef<__CFString const>>::clear((const void **)va);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)va1);
  std::__list_imp<ctu::cf::CFSharedRef<__CFString const>>::clear((const void **)va2);
  _Unwind_Resume(a1);
}

BOOL *sd::IMSSubscriberConfig::isAPOnlyMode(sd::IMSSubscriberConfig *this, uint64_t a2)
{
  int v4 = sd::IMSSubscriberConfigInterface::APOnlyModeDefaultVal(this);
  uint64_t v5 = (void *)MEMORY[0x263EFFB40];
  if (!v4) {
    uint64_t v5 = (void *)MEMORY[0x263EFFB38];
  }
  (*(void (**)(CFTypeRef *__return_ptr, sd::IMSSubscriberConfig *, const char *, const char *, const char *, void, uint64_t, void))(*(void *)this + 48))(&cf, this, "Media", "VoiceOnAP", "EnableAPOnlyMode", *v5, a2, 0);
  uint64_t v6 = (BOOL *)cf;
  char v11 = 0;
  if (cf)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v11, v6, v8);
      uint64_t v6 = (BOOL *)(v11 != 0);
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v6;
}

void sub_223AF9A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sd::IMSSubscriberModel::fillNetworkAccessInfo_sync(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  char v11 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), v10);
  if (!a4)
  {
    v59 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 648))(&v59, a1, 0);
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    std::__split_buffer<std::string>::pointer v56 = 0;
    if (*(unsigned char *)(*(void *)(a1 + 72) + 8)
      && (sd::IMSSubscriberModel::isLazuliCarrierBased((sd::IMSSubscriberModel *)a1) & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v56, "000000000000000000000");
    }
    else
    {
      (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 656))(&v56, a1, 0);
    }
    long long v44 = *v11;
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a3 + 23) >= 0) {
        long long v45 = a3;
      }
      else {
        long long v45 = (uint64_t *)*a3;
      }
      uint64_t v46 = &v59;
      if (v61 < 0) {
        uint64_t v46 = v59;
      }
      uint64_t v47 = &v56;
      if (v58 < 0) {
        uint64_t v47 = v56;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v45;
      __int16 v63 = 2080;
      unsigned int v64 = v46;
      __int16 v65 = 2080;
      v66 = v47;
      _os_log_impl(&dword_223AF3000, v44, OS_LOG_TYPE_DEFAULT, "#I AccessNetworkInfo: %s: Cell Access Type = %s Access Info = %s", buf, 0x20u);
    }
    ims::AccessNetwork::set();
    ims::AccessNetwork::set();
    *(unsigned char *)(a2 + 120) = 0;
    *(unsigned char *)(a2 + 48) = 0;
    BOOL v48 = *(_DWORD *)(*(void *)(a1 + 192) + 916) == 16;
    *(unsigned char *)(a2 + 64) = v48;
    *(unsigned char *)(a2 + 136) = v48;
    uint64_t v49 = HIBYTE(v61);
    if (v61 < 0) {
      uint64_t v49 = v60;
    }
    uint64_t v50 = v57;
    if (v58 >= 0) {
      uint64_t v50 = HIBYTE(v58);
    }
    if (v49) {
      BOOL v51 = v50 == 0;
    }
    else {
      BOOL v51 = 1;
    }
    uint64_t v33 = !v51;
    if (SHIBYTE(v58) < 0)
    {
      operator delete(v56);
      if ((v61 & 0x8000000000000000) == 0) {
        return v33;
      }
    }
    else if ((v61 & 0x8000000000000000) == 0)
    {
      return v33;
    }
    operator delete(v59);
    return v33;
  }
  v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 648))(&v59, a1, 1);
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  std::__split_buffer<std::string>::pointer v56 = 0;
  if (*(unsigned char *)(*(void *)(a1 + 72) + 8)
    && (sd::IMSSubscriberModel::isLazuliCarrierBased((sd::IMSSubscriberModel *)a1) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v56, "000000000000000000000");
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 656))(&v56, a1, 1);
  }
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 88) + 104))(buf);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 88) + 208))(&__p);
  ims::AccessNetwork::set();
  if (v55 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(*(void **)buf);
  }
  unint64_t v12 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a3 + 23) >= 0) {
      CFStringRef v13 = a3;
    }
    else {
      CFStringRef v13 = (uint64_t *)*a3;
    }
    if (*(char *)(a2 + 23) >= 0) {
      long long v14 = (void *)a2;
    }
    else {
      long long v14 = *(void **)a2;
    }
    long long v15 = (void *)(a2 + 24);
    if (*(char *)(a2 + 47) < 0) {
      long long v15 = *(void **)(a2 + 24);
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v13;
    __int16 v63 = 2080;
    unsigned int v64 = v14;
    __int16 v65 = 2080;
    v66 = v15;
    _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I AccessNetworkInfo: %s: IWLAN Access Type = %s Access Info = %s", buf, 0x20u);
  }
  ims::AccessNetwork::set();
  uint64_t v16 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a3 + 23) >= 0) {
      CFStringRef v17 = a3;
    }
    else {
      CFStringRef v17 = (uint64_t *)*a3;
    }
    uint64_t v18 = (void *)(a2 + 168);
    if (*(char *)(a2 + 167) >= 0) {
      uint64_t v19 = (void *)(a2 + 144);
    }
    else {
      uint64_t v19 = *(void **)(a2 + 144);
    }
    if (*(char *)(a2 + 191) < 0) {
      uint64_t v18 = *(void **)(a2 + 168);
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v17;
    __int16 v63 = 2080;
    unsigned int v64 = v19;
    __int16 v65 = 2080;
    v66 = v18;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I AccessNetworkInfo: %s: IWLAN Last Access Type = %s Last Access Info = %s", buf, 0x20u);
  }
  if (a5 != 1)
  {
    if (!a5) {
      ims::AccessNetwork::set();
    }
    char v20 = 0;
    goto LABEL_37;
  }
  ims::AccessNetwork::set();
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 56));
  long long v35 = ServiceMap;
  uint64_t v36 = *(void *)(MEMORY[0x263F03590] + 8);
  if (v36 < 0)
  {
    uint64_t v37 = (unsigned __int8 *)(v36 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v38 = 5381;
    do
    {
      uint64_t v36 = v38;
      unsigned int v39 = *v37++;
      uint64_t v38 = (33 * v38) ^ v39;
    }
    while (v39);
  }
  std::mutex::lock(ServiceMap);
  *(void *)buf = v36;
  long long v40 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v35[1].__m_.__sig, (unint64_t *)buf);
  if (v40)
  {
    uint64_t v42 = v40[3];
    unsigned int v41 = (std::__shared_weak_count *)v40[4];
    if (v41)
    {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v35);
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      char v43 = 0;
      if (!v42) {
        goto LABEL_58;
      }
      goto LABEL_87;
    }
  }
  else
  {
    uint64_t v42 = 0;
  }
  std::mutex::unlock(v35);
  unsigned int v41 = 0;
  char v43 = 1;
  if (!v42)
  {
LABEL_58:
    char v20 = 0;
    if ((v43 & 1) == 0) {
      goto LABEL_88;
    }
    goto LABEL_37;
  }
LABEL_87:
  char v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v42 + 64))(v42, a1 + 40);
  if ((v43 & 1) == 0) {
LABEL_88:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
LABEL_37:
  *(unsigned char *)(a2 + 120) = v20;
  *(unsigned char *)(a2 + 48) = v20;
  uint64_t v21 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v23 = *(void **)(a2 + 72);
    uint64_t v22 = a2 + 72;
    v53 = v23;
    int v24 = *((char *)a3 + 23);
    unint64_t v25 = (uint64_t *)*a3;
    int v26 = *(char *)(v22 + 23);
    uint64_t v27 = *(void **)(v22 + 24);
    int v28 = *(char *)(v22 + 47);
    uint64_t v29 = asStringBool();
    if (v28 >= 0) {
      uint64_t v30 = (void *)(v22 + 24);
    }
    else {
      uint64_t v30 = v27;
    }
    *(_DWORD *)buf = 136315906;
    long long v31 = v53;
    if (v26 >= 0) {
      long long v31 = (void *)v22;
    }
    if (v24 >= 0) {
      __int16 v32 = a3;
    }
    else {
      __int16 v32 = v25;
    }
    *(void *)&uint8_t buf[4] = v32;
    __int16 v63 = 2080;
    unsigned int v64 = v31;
    __int16 v65 = 2080;
    v66 = v30;
    __int16 v67 = 2080;
    uint64_t v68 = v29;
    _os_log_impl(&dword_223AF3000, v21, OS_LOG_TYPE_DEFAULT, "#I AccessNetworkInfo: %s: IWLAN Camped Access Type = %s Camped Access Info = %s hotspot = %s", buf, 0x2Au);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(v56);
  }
  if (SHIBYTE(v61) < 0) {
    operator delete(v59);
  }
  return 1;
}

void sub_223AFA194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if ((v34 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sd::IMSSubscriberModel::getLastAttemptedImsStatus(sd::IMSSubscriberModel *this)
{
  return *((void *)this + 26);
}

uint64_t sd::IMSSubscriberModel::getPreferredMediaStack(sd::IMSSubscriberModel *this, sd::IMSSubscriberConfigInterface *a2)
{
  uint64_t v3 = *((void *)this + 11);
  uint64_t v4 = *((void *)this + 17);
  uint64_t v5 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 224))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 392))(v3, v6);
  return sd::IMSSubscriberConfigInterface::shouldUseAPMediaStack(a2) ^ 1;
}

void sd::IMSSubscriberModel::getRuntimeAccessType(sd::IMSSubscriberModel *this@<X0>, int a2@<W1>, std::string::size_type *a3@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  bzero(v19, 0x688uLL);
  (*(void (**)(void **__return_ptr, sd::IMSSubscriberModel *))(*(void *)this + 456))(v19, this);
  int v6 = v20;
  int v7 = v21;
  uint64_t v8 = 108;
  if (a2) {
    uint64_t v8 = 8;
  }
  int v9 = (int)v19[v8];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  std::string::basic_string[abi:ne180100]<0>(a3, "");
  if (a2) {
    int v10 = v6;
  }
  else {
    int v10 = v7;
  }
  switch(v10)
  {
    case 1:
    case 2:
      if (*((char *)a3 + 23) < 0)
      {
        a3[1] = 10;
        a3 = (std::string::size_type *)*a3;
      }
      else
      {
        *((unsigned char *)a3 + 23) = 10;
      }
      strcpy((char *)a3, "3GPP-GERAN");
      break;
    case 3:
    case 4:
    case 5:
      sd::IMSSubscriberModel::fetchRFBandType(this, &v17);
      char v11 = std::string::insert(&v17, 0, "3GPP-UTRAN-", 0xBuLL);
      goto LABEL_21;
    case 10:
      if (*((char *)a3 + 23) < 0)
      {
        a3[1] = 8;
        a3 = (std::string::size_type *)*a3;
      }
      else
      {
        *((unsigned char *)a3 + 23) = 8;
      }
      strcpy((char *)a3, "3GPP2-1X");
      break;
    case 13:
      if (*((char *)a3 + 23) < 0)
      {
        a3[1] = 13;
        a3 = (std::string::size_type *)*a3;
      }
      else
      {
        *((unsigned char *)a3 + 23) = 13;
      }
      strcpy((char *)a3, "3GPP2-1X-HRPD");
      break;
    case 14:
      sd::IMSSubscriberModel::fetchRFBandType(this, &v17);
      char v11 = std::string::insert(&v17, 0, "3GPP-E-UTRAN-", 0xDuLL);
      goto LABEL_21;
    case 16:
      sd::IMSSubscriberModel::fetchRFBandType(this, &v17);
      if (v9 == 10) {
        unint64_t v12 = "3GPP-NR-";
      }
      else {
        unint64_t v12 = "3GPP-E-UTRAN-";
      }
      if (v9 == 10) {
        std::string::size_type v13 = 8;
      }
      else {
        std::string::size_type v13 = 13;
      }
      char v11 = std::string::insert(&v17, 0, v12, v13);
      goto LABEL_21;
    case 17:
      sd::IMSSubscriberModel::fetchRFBandType(this, &v17);
      char v11 = std::string::insert(&v17, 0, "3GPP-NR-", 8uLL);
LABEL_21:
      std::string::size_type v14 = v11->__r_.__value_.__r.__words[0];
      v18[0] = v11->__r_.__value_.__l.__size_;
      *(void *)((char *)v18 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
      char v15 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)a3 + 23) < 0) {
        operator delete((void *)*a3);
      }
      std::string::size_type v16 = v18[0];
      *a3 = v14;
      a3[1] = v16;
      *(std::string::size_type *)((char *)a3 + 15) = *(void *)((char *)v18 + 7);
      *((unsigned char *)a3 + 23) = v15;
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      break;
    default:
      break;
  }
  sd::RuntimeInfo::~RuntimeInfo(v19);
}

void sub_223AFA604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v18 + 23) < 0) {
    operator delete(*(void **)v18);
  }
  sd::RuntimeInfo::~RuntimeInfo(&a18);
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberModel::getCurrentDataMode(sd::IMSSubscriberModel *this)
{
  return *(unsigned int *)(*((void *)this + 24) + 916);
}

void sd::IMSSubscriberModel::getRuntimeInfo(sd::IMSSubscriberModel *this@<X0>, sd::DataCache *a2@<X8>)
{
}

uint64_t sd::IMSSubscriberModel::isRegMaskSet(uint64_t a1, char a2)
{
  return (*(_DWORD *)(a1 + 260) >> a2) & 1;
}

BOOL sd::DCNManager::isDCNTimerPending(sd::DCNManager *this)
{
  uint64_t v1 = *((void *)this + 23);
  return v1 && *(void *)(v1 + 80) != 0;
}

void ims::NetworkServices::~NetworkServices(void **this)
{
  uint64_t v2 = this + 34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 271) < 0) {
    operator delete(this[31]);
  }
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  if (*((char *)this + 191) < 0) {
    operator delete(this[21]);
  }
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void sd::DataCache::updateRuntimeInfo(sd::DataCache *this, const sd::RuntimeInfo *a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 1720);
  std::mutex::lock((std::mutex *)((char *)this + 1720));
  int v5 = *((_DWORD *)a2 + 2);
  *((void *)this + 6) = *(void *)a2;
  *((_DWORD *)this + 14) = v5;
  std::string::operator=((std::string *)((char *)this + 64), (const std::string *)((char *)a2 + 16));
  if ((sd::DataCache *)((char *)this + 48) != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)this + 88), *((std::string **)a2 + 5), *((long long **)a2 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 6) - *((void *)a2 + 5)) >> 3));
  }
  RegisteredNetworkInfo::operator=();
  RegisteredNetworkInfo::operator=();
  *((void *)this + 214) = *((void *)a2 + 208);

  std::mutex::unlock(v4);
}

void sub_223AFA820(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

double sd::IMSSubscriberModel::updateLastAttemptedImsStatus(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 4);
  *(double *)(a1 + 212) = result;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 208) = 3;
  return result;
}

void sd::IMSSubscriberModel::updateRuntimeInfo(sd::DataCache **this, const sd::RuntimeInfo *a2)
{
}

void sd::IMSSubscriberConfig::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_223AFA97C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberConfig::IMSSubscriberConfig(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[4] = *MEMORY[0x263EF8340];
  *a1 = MEMORY[0x263F03658] + 16;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v8, (const char *)*MEMORY[0x263F03770], "5wi.mdl");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223CBB890](&v7);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v6 = *(void *)(a4 + 8);
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_223AFABF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  MEMORY[0x223CBBDF0](v5, 0x10A1C40FF1576FELL);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v2 + 3);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  MEMORY[0x223CBB890](v3);
  sd::IMSSubscriberConfigInterface::~IMSSubscriberConfigInterface(v2);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberConfig::~IMSSubscriberConfig(sd::IMSSubscriberConfig *this)
{
  *(void *)this = &unk_26D7433E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  MEMORY[0x223CBB890]((char *)this + 8);

  sd::IMSSubscriberConfigInterface::~IMSSubscriberConfigInterface(this);
}

{
  uint64_t vars8;

  sd::IMSSubscriberConfig::~IMSSubscriberConfig(this);

  JUMPOUT(0x223CBBDF0);
}

const char *sd::IMSSubscriberConfig::getName(sd::IMSSubscriberConfig *this)
{
  return "IMSSubscriberConfig";
}

void sd::IMSSubscriberConfig::updatePersonalityInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sd::IMSSubscriberConfig::getTelephonyPref(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v5 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(*(void *)(a1 + 56) + 52));
  uint64_t v6 = v5;
  *a3 = 0;
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (!v7)
  {
    os_log_t v10 = *v5;
    if (!os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v33.__r_.__value_.__l.__data_) = 0;
    char v11 = "#I TelephonyPref: with no key";
    unint64_t v12 = v10;
    uint32_t v13 = 2;
LABEL_40:
    _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v33, v13);
    return;
  }
  CFStringRef v8 = (const __CFString *)*MEMORY[0x263EFFE70];
  CFStringRef v9 = (const __CFString *)*MEMORY[0x263EFFE50];
  CFPreferencesSynchronize(@"com.apple.ipTelephony", (CFStringRef)*MEMORY[0x263EFFE70], (CFStringRef)*MEMORY[0x263EFFE50]);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v28, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v28 = __p;
  }
  CFStringRef v27 = 0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v33, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  }
  else {
    std::string v33 = v28;
  }
  CFStringRef v29 = 0;
  if (ctu::cf::convert_copy())
  {
    CFStringRef v14 = v27;
    CFStringRef v27 = v29;
    *(void *)buf = v14;
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)buf);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  CFStringRef v15 = v27;
  CFStringRef v26 = v27;
  CFStringRef v27 = 0;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v27);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  CFPropertyListRef v16 = CFPreferencesCopyValue(v15, @"com.apple.ipTelephony", v8, v9);
  *a3 = v16;
  v33.__r_.__value_.__r.__words[0] = 0;
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v33.__r_.__value_.__l.__data_);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v16) {
    std::string v17 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    std::string v17 = 0;
  }
  uint64_t v18 = *v6;
  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  if (!v17)
  {
    if (!v19) {
      return;
    }
    if (*(char *)(a2 + 23) >= 0) {
      int v24 = (const std::string::value_type *)a2;
    }
    else {
      int v24 = *(const std::string::value_type **)a2;
    }
    LODWORD(v33.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v33.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
    char v11 = "#I TelephonyPref: did not find value for key in pref file : %s";
    unint64_t v12 = v18;
    uint32_t v13 = 12;
    goto LABEL_40;
  }
  if (v19)
  {
    int v20 = *(char *)(a2 + 23);
    int v21 = *(const std::string::value_type **)a2;
    memset(&v33, 0, sizeof(v33));
    ctu::cf::assign();
    if (v20 >= 0) {
      uint64_t v22 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v22 = v21;
    }
    std::string v28 = v33;
    unint64_t v23 = &v28;
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v22;
    __int16 v31 = 2080;
    __int16 v32 = v23;
    _os_log_impl(&dword_223AF3000, v18, OS_LOG_TYPE_DEFAULT, "#I TelephonyPref: value for key in pref file \"%s\" is %s", buf, 0x16u);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
}

void sub_223AFB118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v27 - 57) < 0) {
    operator delete(*(void **)(v27 - 80));
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(v26);
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get(uint64_t a1)
{
  return *(void *)a1;
}

BOOL *sd::IMSSubscriberConfig::getTelephonyPref(uint64_t a1, uint64_t a2, BOOL *a3)
{
  CFTypeRef cf = 0;
  sd::IMSSubscriberConfig::getTelephonyPref(a1, a2, &cf);
  if (cf) {
    uint64_t v4 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFBooleanGetTypeID())
    {
      a3 = (BOOL *)cf;
      char v10 = 0;
      if (cf)
      {
        CFTypeID v6 = CFGetTypeID(cf);
        if (v6 == CFBooleanGetTypeID())
        {
          ctu::cf::assign((ctu::cf *)&v10, a3, v7);
          a3 = (BOOL *)(v10 != 0);
        }
        else
        {
          a3 = 0;
        }
      }
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return a3;
}

void sub_223AFB264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

int *sd::IMSSubscriberConfig::getTelephonyPref(uint64_t a1, uint64_t a2, int *a3)
{
  CFTypeRef cf = 0;
  sd::IMSSubscriberConfig::getTelephonyPref(a1, a2, &cf);
  if (cf) {
    uint64_t v4 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFNumberGetTypeID())
    {
      a3 = (int *)cf;
      unsigned int v10 = 0;
      if (cf)
      {
        CFTypeID v6 = CFGetTypeID(cf);
        if (v6 == CFNumberGetTypeID())
        {
          ctu::cf::assign((ctu::cf *)&v10, a3, v7);
          a3 = (int *)v10;
        }
        else
        {
          a3 = 0;
        }
      }
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return a3;
}

void sub_223AFB328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **sd::IMSSubscriberConfig::getTelephonyPref@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v16[2] = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a4, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a3;
    *(void *)(a4 + 16) = *(void *)(a3 + 16);
  }
  CFTypeRef cf = 0;
  sd::IMSSubscriberConfig::getTelephonyPref(a1, a2, &cf);
  if (cf) {
    CFNumberRef v7 = ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::get;
  }
  else {
    CFNumberRef v7 = 0;
  }
  if (v7)
  {
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 == CFStringGetTypeID())
    {
      uint64_t v14 = 0;
      long long v15 = 0uLL;
      ctu::cf::assign();
      uint64_t v9 = v14;
      v16[0] = v15;
      *(void *)((char *)v16 + 7) = *(void *)((char *)&v15 + 7);
      char v10 = HIBYTE(v15);
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      uint64_t v11 = v16[0];
      *(void *)a4 = v9;
      *(void *)(a4 + 8) = v11;
      *(void *)(a4 + 15) = *(void *)((char *)v16 + 7);
      *(unsigned char *)(a4 + 23) = v10;
    }
  }
  return ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
}

void sub_223AFB46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&a10);
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberConfig::CopyIMSConfigSIMValue(sd::IMSSubscriberConfig *this, const char *a2, const void *a3, uint64_t a4)
{
  if (a4
    || (CFNumberRef v7 = "LegacySIM",
        (*(void (**)(const void **__return_ptr, sd::IMSSubscriberConfig *, const char *, void, uint64_t, void))(*(void *)this + 32))(&v10, this, "LegacySIM", 0, a4, 0), CFTypeID v8 = v10, ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v10), !v8))
  {
    CFNumberRef v7 = "SIM";
  }
  return (*(uint64_t (**)(sd::IMSSubscriberConfig *, const char *, const char *, const void *, void, void))(*(void *)this + 40))(this, v7, a2, a3, 0, 0);
}

const void **sd::IMSSubscriberConfig::CopyIMSConfig@<X0>(Registry **this@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  CFDictionaryRef v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, 0, 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  CFTypeRef cf = 0;
  CFDictionaryRef v24 = v8;
  ServiceMap = (std::mutex *)Registry::getServiceMap(this[5]);
  char v10 = ServiceMap;
  unint64_t v11 = *(void *)(MEMORY[0x263F035C8] + 8);
  if ((v11 & 0x8000000000000000) != 0)
  {
    unint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      unint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v25 = v11;
  long long v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v10[1].__m_.__sig, &v25);
  if (v15)
  {
    uint64_t v17 = v15[3];
    uint64_t v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      char v18 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::mutex::unlock(v10);
  uint64_t v16 = 0;
  char v18 = 1;
LABEL_9:
  if (a2) {
    uint64_t v19 = 2;
  }
  else {
    uint64_t v19 = 1;
  }
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, void, uint64_t, __CFString *, CFDictionaryRef, uint64_t))(*(void *)v17 + 96))(&cf, v17, *((unsigned int *)this[7] + 13), v19, @"IMSConfig", v24, a3);
  if ((v18 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  CFTypeRef v20 = cf;
  if (cf && (CFTypeID v21 = CFGetTypeID(cf), v21 == CFDictionaryGetTypeID()))
  {
    *a4 = v20;
    CFRetain(v20);
  }
  else
  {
    *a4 = 0;
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v24);
}

void sub_223AFB764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberConfig::CopyIMSConfigInitialValue(CFTypeRef cf@<X2>, uint64_t a2@<X0>, const char ***a3@<X1>, int a4@<W3>, unsigned int a5@<W4>, std::string::size_type *a6@<X8>)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(*(void *)(a2 + 56) + 49) && (sd::IsDataConnectionImSupportedByDevice((sd *)a2) & 1) != 0)
  {
    v66 = &v66;
    __int16 v67 = (const void **)&v66;
    uint64_t v68 = 0;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)@"InitialSetupOverrides";
    CFRetain(@"InitialSetupOverrides");
    unint64_t v12 = operator new(0x18uLL);
    std::string::size_type v13 = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    unsigned int v14 = v66;
    v12[1] = &v66;
    v12[2] = v13;
    *unint64_t v12 = v14;
    v14[1] = v12;
    v66 = v12;
    ++v68;
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&buf.__r_.__value_.__l.__data_);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)@"IMSConfig";
    CFRetain(@"IMSConfig");
    long long v15 = operator new(0x18uLL);
    unsigned int v58 = a5;
    std::string::size_type v16 = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    uint64_t v17 = v66;
    v15[1] = &v66;
    v15[2] = v16;
    *long long v15 = v17;
    v17[1] = v15;
    v66 = v15;
    ++v68;
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&buf.__r_.__value_.__l.__data_);
    uint64_t v19 = *a3;
    char v18 = a3[1];
    if (*a3 != v18)
    {
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      do
      {
        buf.__r_.__value_.__r.__words[0] = 0;
        CFStringRef v21 = CFStringCreateWithCString(v20, *v19, 0x8000100u);
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
        uint64_t v22 = operator new(0x18uLL);
        *uint64_t v22 = 0;
        v22[1] = 0;
        ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::SharedRef(v22 + 2, v21);
        unint64_t v23 = v66;
        *uint64_t v22 = v66;
        v22[1] = &v66;
        v23[1] = v22;
        v66 = v22;
        ++v68;
        ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&buf.__r_.__value_.__l.__data_);
        ++v19;
      }
      while (v19 != v18);
    }
    __int16 v63 = 0;
    unsigned int v64 = 0;
    unint64_t v65 = 0;
    CFDictionaryRef v24 = v67;
    if (v67 != (const void **)&v66)
    {
      unint64_t v25 = 0;
      do
      {
        CFStringRef v26 = v24[2];
        if ((unint64_t)v25 >= v65)
        {
          uint64_t v27 = (v25 - (unsigned char *)v63) >> 3;
          if ((unint64_t)(v27 + 1) >> 61) {
            std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v28 = (uint64_t)(v65 - (void)v63) >> 2;
          if (v28 <= v27 + 1) {
            unint64_t v28 = v27 + 1;
          }
          if (v65 - (unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v29 = v28;
          }
          if (v29) {
            unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<__CFString const*>>(v29);
          }
          else {
            uint64_t v30 = 0;
          }
          __int16 v31 = (char *)(v29 + 8 * v27);
          *(void *)__int16 v31 = v26;
          unint64_t v25 = v31 + 8;
          std::string v33 = (char *)v63;
          __int16 v32 = v64;
          if (v64 != v63)
          {
            do
            {
              uint64_t v34 = *((void *)v32 - 1);
              v32 -= 8;
              *((void *)v31 - 1) = v34;
              v31 -= 8;
            }
            while (v32 != v33);
            __int16 v32 = (char *)v63;
          }
          __int16 v63 = v31;
          unsigned int v64 = v25;
          unint64_t v65 = v29 + 8 * v30;
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *(void *)unint64_t v25 = v26;
          v25 += 8;
        }
        unsigned int v64 = v25;
        CFDictionaryRef v24 = (const void **)v24[1];
      }
      while (v24 != (const void **)&v66);
    }
    *a6 = 0;
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a2 + 40));
    uint64_t v36 = ServiceMap;
    std::string::size_type v37 = *(void *)(MEMORY[0x263F035C8] + 8);
    if ((v37 & 0x8000000000000000) != 0)
    {
      uint64_t v38 = (unsigned __int8 *)(v37 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v39 = 5381;
      do
      {
        std::string::size_type v37 = v39;
        unsigned int v40 = *v38++;
        uint64_t v39 = (33 * v39) ^ v40;
      }
      while (v40);
    }
    std::mutex::lock(ServiceMap);
    buf.__r_.__value_.__r.__words[0] = v37;
    unsigned int v41 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v36[1].__m_.__sig, (unint64_t *)&buf);
    if (v41)
    {
      uint64_t v43 = v41[3];
      uint64_t v42 = (std::__shared_weak_count *)v41[4];
      if (v42)
      {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v36);
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        char v44 = 0;
LABEL_36:
        if (a4) {
          uint64_t v45 = 2;
        }
        else {
          uint64_t v45 = 1;
        }
        (*(void (**)(uint64_t, void, uint64_t, void **, CFTypeRef, void))(*(void *)v43 + 104))(v43, *(unsigned int *)(*(void *)(a2 + 56) + 52), v45, &v63, cf, v58);
        if ((v44 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v42);
        }
        std::string __p = 0;
        long long v62 = 0uLL;
        uint64_t v46 = (char *)v63;
        uint64_t v47 = v64;
        if (v63 != v64)
        {
          do
          {
            memset(&buf, 0, sizeof(buf));
            ctu::cf::assign();
            std::string v59 = buf;
            if (v62 >= 0) {
              p_p = (const std::string::value_type *)&__p;
            }
            else {
              p_p = (const std::string::value_type *)__p;
            }
            if (v62 >= 0) {
              std::string::size_type v49 = HIBYTE(v62);
            }
            else {
              std::string::size_type v49 = v62;
            }
            uint64_t v50 = std::string::insert(&v59, 0, p_p, v49);
            long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
            v60.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v51;
            v50->__r_.__value_.__l.__size_ = 0;
            v50->__r_.__value_.__r.__words[2] = 0;
            v50->__r_.__value_.__r.__words[0] = 0;
            uint64_t v52 = std::string::append(&v60, ".", 1uLL);
            v53 = (void *)v52->__r_.__value_.__r.__words[0];
            v69[0] = v52->__r_.__value_.__l.__size_;
            *(void *)((char *)v69 + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
            char v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
            v52->__r_.__value_.__l.__size_ = 0;
            v52->__r_.__value_.__r.__words[2] = 0;
            v52->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v62) < 0) {
              operator delete(__p);
            }
            std::string __p = v53;
            *(void *)&long long v62 = v69[0];
            *(void *)((char *)&v62 + 7) = *(void *)((char *)v69 + 7);
            HIBYTE(v62) = v54;
            if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v60.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v59.__r_.__value_.__l.__data_);
            }
            v46 += 8;
          }
          while (v46 != v47);
        }
        char v55 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a2 + 32) + 16))(*(void *)(a2 + 32), *(unsigned int *)(*(void *)(a2 + 56) + 52));
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          std::__split_buffer<std::string>::pointer v56 = &__p;
          if (v62 < 0) {
            std::__split_buffer<std::string>::pointer v56 = __p;
          }
          std::string::size_type v57 = *a6;
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v57;
          _os_log_impl(&dword_223AF3000, v55, OS_LOG_TYPE_DEFAULT, "#I %s = %@", (uint8_t *)&buf, 0x16u);
        }
        if (SHIBYTE(v62) < 0) {
          operator delete(__p);
        }
        if (v63)
        {
          unsigned int v64 = (char *)v63;
          operator delete(v63);
        }
        std::__list_imp<ctu::cf::CFSharedRef<__CFString const>>::clear((const void **)&v66);
        return;
      }
    }
    else
    {
      uint64_t v43 = 0;
    }
    std::mutex::unlock(v36);
    uint64_t v42 = 0;
    char v44 = 1;
    goto LABEL_36;
  }

  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::SharedRef(a6, cf);
}

void sub_223AFBD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,uint64_t a32,const void *a33)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(v33);
  if (a30) {
    operator delete(a30);
  }
  std::__list_imp<ctu::cf::CFSharedRef<__CFString const>>::clear(&a33);
  _Unwind_Resume(a1);
}

BOOL sd::IMSSubscriberConfig::isSimInfoCachingSupported(sd::IMSSubscriberConfig *this)
{
  return capabilities::ct::getBasebandBootStrategy(this) == 2;
}

BOOL *sd::IMSSubscriberConfig::isSmsOverImsInNonVoLTEModeEnabled(sd::IMSSubscriberConfig *this)
{
  CFTypeRef cf = 0;
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFBF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::isSmsOverImsInNonVoLTEModeSupportedInRoaming(sd::IMSSubscriberConfig *this)
{
  CFTypeRef cf = 0;
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFBFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::getTTYOverIMSPref(sd::IMSSubscriberConfig *this)
{
  CFTypeRef cf = 0;
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFC0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

unint64_t sd::IMSSubscriberConfig::isUSIMFallbackSupported(sd::IMSSubscriberConfig *this, uint64_t a2)
{
  sd::IMSSubscriberConfig::CopyIMSConfigSIMValue(this, "USIMFallbackSupport", (const void *)*MEMORY[0x263EFFB40], a2);
  unint64_t v2 = (unint64_t)cf;
  char v7 = 0;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v7, (BOOL *)cf, v4);
      unint64_t v2 = v7 != 0;
    }
    else
    {
      unint64_t v2 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v2;
}

void sub_223AFC170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

unint64_t sd::IMSSubscriberConfig::shouldIgnoreISIM(sd::IMSSubscriberConfig *this, uint64_t a2)
{
  sd::IMSSubscriberConfig::CopyIMSConfigSIMValue(this, "IgnoreISIM", (const void *)*MEMORY[0x263EFFB38], a2);
  unint64_t v2 = (unint64_t)cf;
  char v7 = 0;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v7, (BOOL *)cf, v4);
      unint64_t v2 = v7 != 0;
    }
    else
    {
      unint64_t v2 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v2;
}

void sub_223AFC218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **sd::IMSSubscriberConfig::getRFBandType@<X0>(sd::IMSSubscriberConfig *this@<X0>, uint64_t a2@<X8>)
{
  CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], (const char *)*MEMORY[0x263F03520], 0x8000100u);
  (*(void (**)(const void **__return_ptr, sd::IMSSubscriberConfig *, const char *, const char *, CFStringRef, void, void))(*(void *)this + 40))(&v5, this, "Signaling", "RFBandType", v6, 0, 0);
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  ctu::cf::assign();
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v5);
  return ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v6);
}

void sub_223AFC2FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&a10);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&a11);
  _Unwind_Resume(a1);
}

BOOL *sd::IMSSubscriberConfig::isXCAPSupported(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFC3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

unint64_t sd::IMSSubscriberConfig::useMDNFromCSIM(sd::IMSSubscriberConfig *this, uint64_t a2)
{
  sd::IMSSubscriberConfig::CopyIMSConfigSIMValue(this, "UseMDNFromCSIM", (const void *)*MEMORY[0x263EFFB38], a2);
  unint64_t v2 = (unint64_t)cf;
  char v7 = 0;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v7, (BOOL *)cf, v4);
      unint64_t v2 = v7 != 0;
    }
    else
    {
      unint64_t v2 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v2;
}

void sub_223AFC498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **sd::IMSSubscriberConfig::getImsDomainFromBundle@<X0>(sd::IMSSubscriberConfig *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void v13[2] = *MEMORY[0x263EF8340];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(void *)(a4 + 16) = *(void *)(a2 + 16);
  }
  double result = (const void **)(*(uint64_t (**)(sd::IMSSubscriberConfig *, uint64_t))(*(void *)a1 + 152))(a1, a3);
  if (result)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v9 = (const char *)a2;
    }
    else {
      uint64_t v9 = *(const char **)a2;
    }
    v12[0] = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], v9, 0x8000100u);
    sd::IMSSubscriberConfig::CopyIMSConfigSIMValue(a1, "CarrierDomain", v12[0], a3);
    memset(&v12[1], 0, 24);
    ctu::cf::assign();
    v13[0] = 0;
    *(void *)((char *)v13 + 7) = 0;
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    uint64_t v10 = v13[0];
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v10;
    *(void *)(a4 + 15) = *(void *)((char *)v13 + 7);
    *(unsigned char *)(a4 + 23) = 0;
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v11);
    return ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(v12);
  }
  return result;
}

void sub_223AFC618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&a9);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&a10);
  if (*(char *)(v16 + 23) < 0) {
    operator delete(*(void **)v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberConfig::getImpiFormatFromBundle(sd::IMSSubscriberConfig *this, uint64_t a2)
{
  if (!(*(unsigned int (**)(sd::IMSSubscriberConfig *))(*(void *)this + 152))(this)) {
    return 0x100000000;
  }
  CFStringRef v8 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], "imsi@3gppDomain", 0x8000100u);
  sd::IMSSubscriberConfig::CopyIMSConfigSIMValue(this, "impiFormat", v8, a2);
  long long v9 = 0uLL;
  uint64_t v10 = 0;
  ctu::cf::assign();
  memset(&__p, 0, sizeof(__p));
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v6);
  uint64_t ImsUriFormatFromString = sd::IMSSubscriberConfig::getImsUriFormatFromString(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v8);
  return ImsUriFormatFromString;
}

void sub_223AFC758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, const void *a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&a18);
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberConfig::getImsUriFormatFromString(const std::string *a1)
{
  std::string::size_type v2 = std::string::find(a1, 64, 0);
  if (!v2)
  {
    BOOL v8 = 0;
    goto LABEL_19;
  }
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string(&__p, a1, 0, v2, (std::allocator<char> *)&v14);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size != 6)
  {
    BOOL v8 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  int data = (int)p_p->__r_.__value_.__l.__data_;
  int v6 = WORD2(p_p->__r_.__value_.__r.__words[0]);
  BOOL v8 = data == 1936290669 && v6 == 28260;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_17:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_18:
  if (v2 == -1)
  {
    uint64_t v10 = 0;
    return v10 & 0x300000000 | v8;
  }
LABEL_19:
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string(&__p, a1, v2 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
  std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = 0x100000000;
  if (v9 == 13)
  {
    unint64_t v11 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v11 = &__p;
    }
    if (!(v11->__r_.__value_.__r.__words[0] ^ 0x4472656972726163 | *(std::string::size_type *)((char *)v11->__r_.__value_.__r.__words
                                                                                                + 5) ^ 0x6E69616D6F447265))
      uint64_t v10 = 0x200000000;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v10 & 0x300000000 | v8;
}

void sd::IMSSubscriberConfig::getImpuFormatArrayFromBundle(sd::IMSSubscriberConfig *this@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((*(unsigned int (**)(sd::IMSSubscriberConfig *))(*(void *)this + 152))(this))
  {
    sd::IMSSubscriberConfig::CopyIMSConfigSIMValue(this, "impuFormat", 0, a2);
    CFArrayRef v6 = (const __CFArray *)cf.__r_.__value_.__r.__words[0];
    if (cf.__r_.__value_.__r.__words[0] && (CFTypeID v7 = CFGetTypeID(cf.__r_.__value_.__l.__data_), v7 == CFArrayGetTypeID()))
    {
      ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&cf.__r_.__value_.__l.__data_);
      CFIndex Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        CFIndex v9 = Count;
        uint64_t v10 = 0;
        for (CFIndex i = 0; i != v9; ++i)
        {
          memset(&__p, 0, sizeof(__p));
          CFArrayGetValueAtIndex(v6, i);
          memset(&cf, 0, sizeof(cf));
          ctu::cf::assign();
          std::string __p = cf;
          uint64_t ImsUriFormatFromString = sd::IMSSubscriberConfig::getImsUriFormatFromString(&__p);
          uint64_t v13 = ImsUriFormatFromString;
          unint64_t v14 = (unint64_t)a3[2];
          if ((unint64_t)v10 >= v14)
          {
            long long v15 = *a3;
            uint64_t v16 = v10 - *a3;
            unint64_t v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 61) {
              std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v18 = v14 - (void)v15;
            if (v18 >> 2 > v17) {
              unint64_t v17 = v18 >> 2;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v19 = v17;
            }
            if (v19)
            {
              if (v19 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              CFAllocatorRef v20 = (char *)operator new(8 * v19);
            }
            else
            {
              CFAllocatorRef v20 = 0;
            }
            CFStringRef v21 = (uint64_t *)&v20[8 * v16];
            *CFStringRef v21 = v13;
            uint64_t v22 = v21 + 1;
            if (v10 != v15)
            {
              do
              {
                uint64_t v23 = *--v10;
                *--CFStringRef v21 = v23;
              }
              while (v10 != v15);
              uint64_t v10 = *a3;
            }
            *a3 = v21;
            a3[1] = v22;
            a3[2] = (uint64_t *)&v20[8 * v19];
            if (v10) {
              operator delete(v10);
            }
            uint64_t v10 = v22;
          }
          else
          {
            *v10++ = ImsUriFormatFromString;
          }
          a3[1] = v10;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    else
    {
      ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&cf.__r_.__value_.__l.__data_);
    }
  }
}

void sub_223AFCB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

void sd::IMSSubscriberConfig::getpCSCFSettingAddr(Registry **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  ServiceMap = (std::mutex *)Registry::getServiceMap(this[5]);
  CFTypeID v5 = ServiceMap;
  uint64_t v6 = *(void *)(MEMORY[0x263F035C0] + 8);
  if (v6 < 0)
  {
    CFTypeID v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v6;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v5[1].__m_.__sig, (unint64_t *)buf);
  if (v10)
  {
    uint64_t v12 = v10[3];
    unint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      char v13 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  unint64_t v11 = 0;
  char v13 = 1;
LABEL_9:
  char v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
  if ((v13 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if ((v14 & 1) == 0) {
    goto LABEL_24;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "pcscf");
  (*((void (**)(uint8_t *__return_ptr, Registry **, void **, uint64_t))*this + 10))(buf, this, __p, a2);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = *(_OWORD *)buf;
  *(void *)(a2 + 16) = v22;
  HIBYTE(v22) = 0;
  buf[0] = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
  int v16 = (char)v15;
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a2 + 8);
  }
  if (!v15)
  {
    if (v16 < 0) {
      operator delete(*(void **)a2);
    }
LABEL_24:
    (*((void (**)(void **__return_ptr, Registry **, const char *, const char *, __CFString *, void, void))*this
     + 5))(__p, this, "IPTelephony", "pcscf", &stru_26D745E88, 0, 0);
    memset(buf, 0, sizeof(buf));
    uint64_t v22 = 0;
    ctu::cf::assign();
    *(_OWORD *)a2 = *(_OWORD *)buf;
    *(void *)(a2 + 16) = v22;
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)__p);
    return;
  }
  unint64_t v17 = *(NSObject **)(*(uint64_t (**)(Registry *, void))(*(void *)this[4] + 16))(this[4], *((unsigned int *)this[7] + 13));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v18 = (void *)a2;
    }
    else {
      uint64_t v18 = *(void **)a2;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v18;
    _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#I PCSCF: Found proxy in the prefs. Value = %s", buf, 0xCu);
  }
}

void sub_223AFCE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void *sd::IMSSubscriberConfig::getWifiAccessTypeField@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "IEEE-802.11");
}

const void **sd::IMSSubscriberConfig::getWifiAccessInfo@<X0>(sd::IMSSubscriberConfig *this@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(const void **__return_ptr))(*(void *)this + 40))(&v4);
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  ctu::cf::assign();
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v6;
  return ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v4);
}

void sub_223AFCFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&a9);
  _Unwind_Resume(a1);
}

BOOL sd::IMSSubscriberConfig::getCBConnHelperType(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(std::locale *__return_ptr))(*(void *)this + 40))(&v10);
  v13[0].__locale_ = 0;
  v13[1].__locale_ = 0;
  uint64_t v14 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = *(_OWORD *)&v13[0].__locale_;
  uint64_t v12 = v14;
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v10.__locale_);
  MEMORY[0x223CBBD60](&v10);
  std::locale::locale(v13, &v10);
  if (v12 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  if (v12 >= 0) {
    std::string::size_type v2 = (char *)HIBYTE(v12);
  }
  else {
    std::string::size_type v2 = (char *)__p[1];
  }
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t)(v2 - 1);
    if ((unint64_t)(v2 - 1) >= 3) {
      uint64_t v4 = 3;
    }
    uint64_t v5 = v4 + 1;
    while (boost::algorithm::is_iequal::operator()<char,char>(v13, (char *)v1 + v3, &aWifi[v3]))
    {
      if (v5 == ++v3)
      {
        BOOL v6 = v3 == 4;
        CFTypeID v7 = (char *)v1 + v3;
        goto LABEL_15;
      }
    }
    BOOL v8 = 0;
  }
  else
  {
    BOOL v6 = 0;
    CFTypeID v7 = (char *)v1;
LABEL_15:
    if (v7 != &v2[(void)v1]) {
      BOOL v6 = 0;
    }
    BOOL v8 = v6;
  }
  std::locale::~locale(v13);
  std::locale::~locale(&v10);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  return v8;
}

void sub_223AFD164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&a10.__locale_);
  _Unwind_Resume(a1);
}

BOOL *sd::IMSSubscriberConfig::isImsStatusUpdateToBasebandBlocked(sd::IMSSubscriberConfig *this)
{
  if (capabilities::ct::getCarrierBundleBaseDir(this)) {
    return 0;
  }
  (*(void (**)(CFTypeRef *__return_ptr, sd::IMSSubscriberConfig *, const char *, void, void, void))(*(void *)this + 32))(&cf, this, "ImsStatusUpdateToBasebandBlocked", *MEMORY[0x263EFFB38], 0, 0);
  std::string::size_type v2 = (BOOL *)cf;
  char v7 = 0;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v7, v2, v4);
      std::string::size_type v2 = (BOOL *)(v7 != 0);
    }
    else
    {
      std::string::size_type v2 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v2;
}

void sub_223AFD280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::shouldReportImsRegistrationStart(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 32))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFD34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

int *sd::IMSSubscriberConfig::getImsRegStatusReportingTimeoutValue(sd::IMSSubscriberConfig *this)
{
  int valuePtr = 100;
  CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  (*(void (**)(CFTypeRef *__return_ptr, sd::IMSSubscriberConfig *, const char *, const char *, CFNumberRef, void, void))(*(void *)this + 40))(&cf, this, "Signaling", "RegistrationStatusReportingTimeout", v7, 0, 0);
  CFTypeID v2 = (int *)cf;
  unsigned int v9 = 0;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 == CFNumberGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v9, v2, v4);
      CFTypeID v2 = (int *)v9;
    }
    else
    {
      CFTypeID v2 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v7);
  return v2;
}

void sub_223AFD444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

unsigned int *sd::IMSSubscriberConfig::getDCNHysteresisTimeoutVal(sd::IMSSubscriberConfig *this)
{
  int valuePtr = 10;
  CFNumberRef v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  (*(void (**)(CFTypeRef *__return_ptr, sd::IMSSubscriberConfig *, const char *, const char *, const char *, CFNumberRef, void, void))(*(void *)this + 48))(&cf, this, "SMS", "DCN", "hysteresisTimeout", v7, 0, 0);
  CFTypeID v2 = (unsigned int *)cf;
  unsigned int v9 = 0;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 == CFNumberGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v9, v2, v4);
      CFTypeID v2 = (unsigned int *)v9;
    }
    else
    {
      CFTypeID v2 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v7);
  return v2;
}

void sub_223AFD554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

const void **sd::IMSSubscriberConfig::getDCNPolicyName@<X0>(sd::IMSSubscriberConfig *this@<X0>, uint64_t a2@<X8>)
{
  CFStringRef v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], "Default", 0x8000100u);
  (*(void (**)(const void **__return_ptr, sd::IMSSubscriberConfig *, const char *, const char *, const char *, CFStringRef, void, void))(*(void *)this + 48))(&v5, this, "SMS", "DCN", "Policy", v6, 0, 0);
  long long v7 = 0uLL;
  uint64_t v8 = 0;
  ctu::cf::assign();
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&v5);
  return ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v6);
}

void sub_223AFD64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&a10);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&a11);
  _Unwind_Resume(a1);
}

BOOL *sd::IMSSubscriberConfig::isDCNAllowed(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFD740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::isVoLTERequiredForVoWiFi(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 32))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFD80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::isEnableSignalingReductionSupported(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFD8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::isSignalingInCsRatBlocked(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFD9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::isIMSRegistrationBlockedWhileInEmergency(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 32))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFDA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::isIMSRedialAllowedForUndetectedEmergency(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFDB54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::shouldSuppressDisclosingSuspiciousUndetectedEmergency(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFDC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sd::IMSSubscriberConfig::getBackOffTimerValueForRA(sd::IMSSubscriberConfig *this)
{
  unsigned int valuePtr = 0;
  CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  (*(void (**)(CFTypeRef *__return_ptr, sd::IMSSubscriberConfig *, const char *, const char *, CFNumberRef, void, void))(*(void *)this + 40))(&cf, this, "Signaling", "PdpBackOffTimerforRA", v9, 0, 0);
  CFTypeID v2 = (unsigned int *)cf;
  unsigned int v11 = 0;
  if (cf && (CFTypeID v3 = CFGetTypeID(cf), v3 == CFNumberGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)&v11, v2, v4);
    unsigned int v5 = v11;
  }
  else
  {
    unsigned int v5 = 0;
  }
  unsigned int valuePtr = v5;
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  uint64_t v6 = valuePtr;
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v9);
  return v6;
}

void sub_223AFDD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberConfig::getBackOffTimerValueForiWlan(sd::IMSSubscriberConfig *this)
{
  unsigned int valuePtr = 600000;
  CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  (*(void (**)(CFTypeRef *__return_ptr, sd::IMSSubscriberConfig *, const char *, const char *, CFNumberRef, void, void))(*(void *)this + 40))(&cf, this, "Signaling", "ActivationBackoffTimerOverIWLANMilliseconds", v9, 0, 0);
  CFTypeID v2 = (unsigned int *)cf;
  unsigned int v11 = 0;
  if (cf && (CFTypeID v3 = CFGetTypeID(cf), v3 == CFNumberGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)&v11, v2, v4);
    unsigned int v5 = v11;
  }
  else
  {
    unsigned int v5 = 0;
  }
  unsigned int valuePtr = v5;
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  uint64_t v6 = valuePtr;
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v9);
  return v6;
}

void sub_223AFDE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL *sd::IMSSubscriberConfig::shouldUseT3402ForPdpBackoff(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFDF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::isCallHandoverWithoutIMSVoiceServiceSupported(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 32))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFDFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::isUnsupportedCarrier(Registry **this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  CFTypeID v2 = operator new(8uLL);
  CFTypeRef cf = 0;
  uint64_t v23 = v2;
  *CFTypeID v2 = @"ShowVolteWarningUnsupportedCarrier";
  CFDictionaryRef v24 = v2 + 1;
  unint64_t v25 = v2 + 1;
  ServiceMap = (std::mutex *)Registry::getServiceMap(this[5]);
  CFNumberRef v4 = ServiceMap;
  uint64_t v5 = *(void *)(MEMORY[0x263F035C8] + 8);
  if (v5 < 0)
  {
    char v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      uint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v5;
  CFNumberRef v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v4[1].__m_.__sig, (unint64_t *)buf);
  if (v9)
  {
    uint64_t v11 = v9[3];
    std::locale v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  std::locale v10 = 0;
  char v12 = 1;
LABEL_9:
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, void, uint64_t, void **, void, void))(*(void *)v11 + 104))(&cf, v11, *((unsigned int *)this[7] + 13), 1, &v23, *MEMORY[0x263EFFB38], 0);
  if ((v12 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)std::string __p = *(_OWORD *)buf;
  uint64_t v21 = *(void *)&buf[16];
  char v13 = (BOOL *)cf;
  buf[0] = 0;
  if (cf)
  {
    CFTypeID v14 = CFGetTypeID(cf);
    if (v14 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)buf, v13, v15);
      char v13 = (BOOL *)(buf[0] != 0);
    }
    else
    {
      char v13 = 0;
    }
  }
  int v16 = *(NSObject **)(*(uint64_t (**)(Registry *, void))(*(void *)this[4] + 16))(this[4], *((unsigned int *)this[7] + 13));
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = asStringBool();
    uint64_t v18 = __p;
    if (v21 < 0) {
      uint64_t v18 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v18;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v17;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I %{public}s = %{public}s", buf, 0x16u);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  if (v23)
  {
    CFDictionaryRef v24 = v23;
    operator delete(v23);
  }
  return v13;
}

void sub_223AFE2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, const void *a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&a16);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

BOOL *sd::IMSSubscriberConfig::isCDMALessEnabled(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFE3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::isWiFiCallingInApModeAllowed(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 32))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFE4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::isQoSRevokeEnabled(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFE584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::carrierBlocksCallsOverCS(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFE658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL *sd::IMSSubscriberConfig::isT911EMFEnabled(sd::IMSSubscriberConfig *this)
{
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)this + 40))(&cf);
  uint64_t v1 = (BOOL *)cf;
  char v6 = 0;
  if (cf)
  {
    CFTypeID v2 = CFGetTypeID(cf);
    if (v2 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v6, v1, v3);
      uint64_t v1 = (BOOL *)(v6 != 0);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v1;
}

void sub_223AFE72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sd::IMSSubscriberConfig::getImsEstablishmentTimeoutValue(sd::IMSSubscriberConfig *this)
{
  unsigned int valuePtr = 0;
  CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  (*(void (**)(CFTypeRef *__return_ptr, sd::IMSSubscriberConfig *, const char *, const char *, CFNumberRef, void, void))(*(void *)this + 40))(&cf, this, "Signaling", "TIMSEstablishmentTimeoutSeconds", v9, 0, 0);
  CFTypeID v2 = (unsigned int *)cf;
  unsigned int v11 = 0;
  if (cf && (CFTypeID v3 = CFGetTypeID(cf), v3 == CFNumberGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)&v11, v2, v4);
    unsigned int v5 = v11;
  }
  else
  {
    unsigned int v5 = 0;
  }
  unsigned int valuePtr = v5;
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  uint64_t v6 = valuePtr;
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v9);
  return v6;
}

void sub_223AFE828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberConfig::getPlmnBarringTimeoutValue(sd::IMSSubscriberConfig *this)
{
  unsigned int valuePtr = 0;
  CFNumberRef v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], kCFNumberSInt32Type, &valuePtr);
  (*(void (**)(CFTypeRef *__return_ptr, sd::IMSSubscriberConfig *, const char *, const char *, CFNumberRef, void, void))(*(void *)this + 40))(&cf, this, "Signaling", "TPLMNBarringTimeoutSeconds", v9, 0, 0);
  CFTypeID v2 = (unsigned int *)cf;
  unsigned int v11 = 0;
  if (cf && (CFTypeID v3 = CFGetTypeID(cf), v3 == CFNumberGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)&v11, v2, v4);
    unsigned int v5 = v11;
  }
  else
  {
    unsigned int v5 = 0;
  }
  unsigned int valuePtr = v5;
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  uint64_t v6 = valuePtr;
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v9);
  return v6;
}

void sub_223AFE934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sd::IMSSubscriberConfig::operatorAllowsCSCallsForInboundDomesticRoaming(Registry **this)
{
  CFTypeRef cf = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(this[5]);
  CFTypeID v3 = ServiceMap;
  unint64_t v4 = *(void *)(MEMORY[0x263F035C8] + 8);
  if ((v4 & 0x8000000000000000) != 0)
  {
    unsigned int v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v16 = v4;
  unsigned int v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v3[1].__m_.__sig, &v16);
  if (v8)
  {
    uint64_t v10 = v8[3];
    CFNumberRef v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      char v11 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v3);
  CFNumberRef v9 = 0;
  char v11 = 1;
LABEL_9:
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, void, uint64_t, __CFString *, void, uint64_t))(*(void *)v10 + 96))(&cf, v10, *((unsigned int *)this[7] + 13), 2, @"AllowCSCallsForInboundDomesticRoaming", *MEMORY[0x263EFFB38], 1);
  if ((v11 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  v13 = cf && (CFTypeID v12 = CFGetTypeID(cf), v12 == CFBooleanGetTypeID()) && CFEqual(cf, (CFTypeRef)*MEMORY[0x263EFFB40]) != 0;
  ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef(&cf);
  return v13;
}

void sub_223AFEAD4(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sd::IMSSubscriberConfig::imsPdnBringupThrottlingInterval(sd::IMSSubscriberConfig *this, unsigned int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals, memory_order_acquire) & 1) == 0)
  {
    unsigned int v5 = a2;
    int v6 = __cxa_guard_acquire(&_MergedGlobals);
    a2 = v5;
    if (v6)
    {
      v7[0] = xmmword_223B4BB78;
      v7[1] = unk_223B4BB88;
      std::vector<unsigned int>::vector[abi:ne180100](v7, 8uLL);
      __cxa_atexit((void (*)(void *))std::vector<unsigned int>::~vector[abi:ne180100], &qword_26AB7A270, &dword_223AF3000);
      __cxa_guard_release(&_MergedGlobals);
      a2 = v5;
    }
  }
  unint64_t v2 = (unint64_t)(qword_26AB7A278 - qword_26AB7A270) >> 2;
  if (v2 <= a2) {
    unsigned int v3 = v2 - 1;
  }
  else {
    unsigned int v3 = a2;
  }
  return *(unsigned int *)(qword_26AB7A270 + 4 * v3);
}

void sub_223AFEBEC(_Unwind_Exception *a1)
{
}

void *std::vector<unsigned int>::vector[abi:ne180100](void *result, unint64_t a2)
{
  qword_26AB7A270 = 0;
  qword_26AB7A278 = 0;
  qword_26AB7A280 = 0;
  if (a2)
  {
    if (a2 >> 62) {
      std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
    }
    unsigned int v3 = result;
    size_t v4 = 4 * a2;
    qword_26AB7A270 = (uint64_t)operator new(4 * a2);
    qword_26AB7A278 = qword_26AB7A270;
    uint64_t v5 = qword_26AB7A270 + 4 * a2;
    qword_26AB7A280 = v5;
    double result = memmove((void *)qword_26AB7A270, v3, v4);
    qword_26AB7A278 = v5;
  }
  return result;
}

void sub_223AFEC7C(_Unwind_Exception *exception_object)
{
  if (qword_26AB7A270)
  {
    qword_26AB7A278 = qword_26AB7A270;
    operator delete((void *)qword_26AB7A270);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<unsigned int>::~vector[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2646CEBB8, MEMORY[0x263F8C060]);
}

void sub_223AFED34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  char v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void __clang_call_terminate(void *a1)
{
}

const void **ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::vector<__CFString const*>::__throw_length_error[abi:ne180100]()
{
}

const void **ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<sd::IMSSubscriberConfig *,std::shared_ptr<sd::IMSSubscriberConfig>::__shared_ptr_default_delete<sd::IMSSubscriberConfig,sd::IMSSubscriberConfig>,std::allocator<sd::IMSSubscriberConfig>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

uint64_t std::__shared_ptr_pointer<sd::IMSSubscriberConfig *,std::shared_ptr<sd::IMSSubscriberConfig>::__shared_ptr_default_delete<sd::IMSSubscriberConfig,sd::IMSSubscriberConfig>,std::allocator<sd::IMSSubscriberConfig>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<sd::IMSSubscriberConfig *,std::shared_ptr<sd::IMSSubscriberConfig>::__shared_ptr_default_delete<sd::IMSSubscriberConfig,sd::IMSSubscriberConfig>,std::allocator<sd::IMSSubscriberConfig>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__func<anonymous namespace'::ImsLogDomainGenerator,std::allocator<anonymous namespace'::ImsLogDomainGenerator>,char const* const ()(subscriber::SimSlot)>::~__func(void *a1)
{
  *a1 = &unk_26D7436B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

{
  std::__shared_weak_count *v2;

  *a1 = &unk_26D7439E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

{
  std::__shared_weak_count *v2;

  *a1 = &unk_26D744F80;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

{
  std::__shared_weak_count *v2;

  *a1 = &unk_26D745940;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::ImsLogDomainGenerator,std::allocator<anonymous namespace'::ImsLogDomainGenerator>,char const* const ()(subscriber::SimSlot)>::~__func(void *a1)
{
  *a1 = &unk_26D7436B8;
  char v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223CBBDF0);
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *a1 = &unk_26D7439E8;
  char v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223CBBDF0);
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *a1 = &unk_26D744F80;
  char v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223CBBDF0);
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *a1 = &unk_26D745940;
  char v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223CBBDF0);
}

void *std::__function::__func<anonymous namespace'::ImsLogDomainGenerator,std::allocator<anonymous namespace'::ImsLogDomainGenerator>,char const* const ()(subscriber::SimSlot)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D7436B8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  void *result;
  uint64_t v3;
  uint64_t v4;

  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D7439E8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  void *result;
  uint64_t v3;
  uint64_t v4;

  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D744F80;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  void *result;
  uint64_t v3;
  uint64_t v4;

  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D745940;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::ImsLogDomainGenerator,std::allocator<anonymous namespace'::ImsLogDomainGenerator>,char const* const ()(subscriber::SimSlot)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D7436B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D7439E8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D744F80;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D745940;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<anonymous namespace'::ImsLogDomainGenerator,std::allocator<anonymous namespace'::ImsLogDomainGenerator>,char const* const ()(subscriber::SimSlot)>::destroy(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  char v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  char v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  char v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<anonymous namespace'::ImsLogDomainGenerator,std::allocator<anonymous namespace'::ImsLogDomainGenerator>,char const* const ()(subscriber::SimSlot)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

const char *std::__function::__func<anonymous namespace'::ImsLogDomainGenerator,std::allocator<anonymous namespace'::ImsLogDomainGenerator>,char const* const ()(subscriber::SimSlot)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    int v4 = *a2;
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = *(unsigned __int8 **)(a1 + 8);
      if (v6)
      {
        int v7 = *((_DWORD *)v6 + 1);
        if (v7 < 0)
        {
          uint64_t v10 = "5wi.cnf.x.X";
          goto LABEL_17;
        }
        int v8 = *v6;
        if (v8 == 2)
        {
          uint64_t v10 = "5wi.cnf.M";
          goto LABEL_17;
        }
        if (v8 == 1) {
          goto LABEL_12;
        }
        if (!v8)
        {
          if (v4 == 2) {
          if (v4 == 1)
          }
LABEL_12:
          uint64_t v10 = v9[v7 & 0xF];
LABEL_17:
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          return v10;
        }
      }
      uint64_t v10 = "5wi.cnf.?";
      goto LABEL_17;
    }
  }
  return "5wi.cnf.?";
}

{
  std::__shared_weak_count *v3;
  int v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  int v7;
  const char *v8;
  char **v9;

  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    int v4 = *a2;
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = *(void *)(a1 + 8);
      if (!v6) {
        goto LABEL_6;
      }
      int v7 = *(_DWORD *)(v6 + 4);
      if (v7 < 0)
      {
        int v8 = "5wi.dcn.x.X";
        goto LABEL_14;
      }
      if (*(unsigned char *)v6)
      {
LABEL_6:
        int v8 = "5wi.dcn.?";
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        return v8;
      }
      if (v4 == 1)
      {
      }
      else
      {
        if (v4 != 2) {
          goto LABEL_6;
        }
      }
      int v8 = v9[v7 & 0xF];
      goto LABEL_14;
    }
  }
  return "5wi.dcn.?";
}

{
  std::__shared_weak_count *v3;
  int v4;
  std::__shared_weak_count *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char **v11;
  char **v12;
  const char *v13;
  int v14;

  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    int v4 = *a2;
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = *(unsigned __int8 **)(a1 + 8);
      if (v6)
      {
        int v7 = *((_DWORD *)v6 + 1);
        if (v7 < 0)
        {
          BOOL v13 = "5wi.ctr.x.X";
          goto LABEL_22;
        }
        int v8 = *v6;
        if (v8 == 2)
        {
          BOOL v13 = "5wi.ctr.M";
          goto LABEL_22;
        }
        if (v8 == 1) {
          goto LABEL_14;
        }
        if (!*v6)
        {
          if (v4 == 2)
          {
            CFNumberRef v9 = v6[8];
            CFTypeID v14 = v7 & 0xF;
LABEL_19:
            if (v9) {
              CFTypeID v12 = v11;
            }
            goto LABEL_21;
          }
          if (v4 == 1)
          {
            CFNumberRef v9 = v6[8];
            uint64_t v10 = v7 & 0xF;
            goto LABEL_19;
          }
LABEL_14:
          if (!v6[8])
          {
LABEL_21:
            BOOL v13 = *v12;
            goto LABEL_22;
          }
          BOOL v13 = "5wi.lzl.ctr.T";
LABEL_22:
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          return v13;
        }
      }
      BOOL v13 = "5wi.ctr.?";
      goto LABEL_22;
    }
  }
  return "5wi.ctr.?";
}

{
  std::__shared_weak_count *v3;
  int v4;
  std::__shared_weak_count *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  char **v11;
  char **v12;
  const char *v13;
  int v14;

  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    int v4 = *a2;
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = *(unsigned __int8 **)(a1 + 8);
      if (v6)
      {
        int v7 = *((_DWORD *)v6 + 1);
        if (v7 < 0)
        {
          BOOL v13 = "5wi.mdl.x.X";
          goto LABEL_22;
        }
        int v8 = *v6;
        if (v8 == 2)
        {
          BOOL v13 = "5wi.mdl.M";
          goto LABEL_22;
        }
        if (v8 == 1) {
          goto LABEL_14;
        }
        if (!*v6)
        {
          if (v4 == 2)
          {
            CFNumberRef v9 = v6[8];
            CFTypeID v14 = v7 & 0xF;
LABEL_19:
            if (v9) {
              CFTypeID v12 = v11;
            }
            goto LABEL_21;
          }
          if (v4 == 1)
          {
            CFNumberRef v9 = v6[8];
            uint64_t v10 = v7 & 0xF;
            goto LABEL_19;
          }
LABEL_14:
          if (!v6[8])
          {
LABEL_21:
            BOOL v13 = *v12;
            goto LABEL_22;
          }
          BOOL v13 = "5wi.lzl.mdl.T";
LABEL_22:
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          return v13;
        }
      }
      BOOL v13 = "5wi.mdl.?";
      goto LABEL_22;
    }
  }
  return "5wi.mdl.?";
}

uint64_t std::__function::__func<anonymous namespace'::ImsLogDomainGenerator,std::allocator<anonymous namespace'::ImsLogDomainGenerator>,char const* const ()(subscriber::SimSlot)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::ImsLogDomainGenerator,std::allocator<anonymous namespace'::ImsLogDomainGenerator>,char const* const ()(subscriber::SimSlot)>::target_type()
{
}

{
}

{
}

{
}

void *SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::SimInstanceLoggerDefault(void *a1)
{
  *a1 = &unk_26D743748;
  detail::createOsLogLoggers();
  detail::createUnknownOsLogLogger();
  return a1;
}

void sub_223AFF260(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>>>::destroy(v2, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

uint64_t SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::~SimInstanceLoggerDefault(uint64_t a1)
{
  *(void *)a1 = &unk_26D743748;
  MEMORY[0x223CBB890](a1 + 32);
  std::__tree<std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>>>::destroy(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void SimInstanceLoggerDefault<ctu::OsLogLogger,subscriber::SimSlot,std::function<char const* const ()(subscriber::SimSlot)>>::~SimInstanceLoggerDefault(uint64_t a1)
{
  *(void *)a1 = &unk_26D743748;
  MEMORY[0x223CBB890](a1 + 32);
  std::__tree<std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>>>::destroy(a1 + 8, *(void **)(a1 + 16));

  JUMPOUT(0x223CBBDF0);
}

void std::__tree<std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,ctu::OsLogLogger>>>::destroy(a1, a2[1]);
    MEMORY[0x223CBB890](a2 + 5);
    operator delete(a2);
  }
}

void *std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL boost::algorithm::is_iequal::operator()<char,char>(const std::locale *a1, char *a2, char *a3)
{
  uint64_t v5 = *a2;
  int v6 = (std::locale::id *)MEMORY[0x263F8C108];
  int v7 = std::locale::use_facet(a1, MEMORY[0x263F8C108]);
  LODWORD(v5) = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[1].~facet)(v7, v5);
  uint64_t v8 = *a3;
  CFNumberRef v9 = std::locale::use_facet(a1, v6);
  return v5 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v9->__vftable[1].~facet)(v9, v8);
}

void sd::IMSSubscriberUtil::~IMSSubscriberUtil(sd::IMSSubscriberUtil *this)
{
}

uint64_t sd::IMSSubscriberUtil::isXlatInterface(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    return MEMORY[0x270EE89F0](a2);
  }
  else {
    return MEMORY[0x270EE89F0](*(void *)a2);
  }
}

void sd::IMSSubscriberUtil::getInterfaceIpAddresses(const void **a1@<X1>, std::vector<std::string> *a2@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  memset(&v24, 0, sizeof(v24));
  uint64_t v23 = 0;
  if (!getifaddrs(&v23))
  {
    int v4 = v23;
    if (v23)
    {
      while (1)
      {
        int v5 = *((char *)a1 + 23);
        size_t v6 = v5 >= 0 ? *((unsigned __int8 *)a1 + 23) : (size_t)a1[1];
        if (!v6 || v6 == strlen(v4->ifa_name) && (v5 >= 0 ? (int v7 = a1) : (int v7 = *a1), !memcmp(v7, v4->ifa_name, v6)))
        {
          ifa_addr = v4->ifa_addr;
          if (ifa_addr)
          {
            int sa_family = ifa_addr->sa_family;
            BOOL v10 = sa_family == 30 || sa_family == 2;
            if (v10 && (v4->ifa_flags & 9) == 1) {
              break;
            }
          }
        }
LABEL_43:
        int v4 = v4->ifa_next;
        if (!v4)
        {
          uint64_t v21 = v23;
          goto LABEL_46;
        }
      }
      memset(v22, 0, sizeof(v22));
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v22);
      if (v4->ifa_addr->sa_family != 30)
      {
        CSIPacketAddress::setIPv4Address((CSIPacketAddress *)v22);
LABEL_28:
        if ((CSIPacketAddress::isZeroIP((CSIPacketAddress *)v22) & 1) == 0
          && (CSIPacketAddress::isLinkLocal((CSIPacketAddress *)v22) & 1) == 0)
        {
          std::vector<std::string>::pointer end = v24.__end_;
          if (v24.__end_ >= v24.__end_cap_.__value_)
          {
            unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v24.__end_ - (char *)v24.__begin_) >> 3);
            unint64_t v18 = v17 + 1;
            if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v24.__end_cap_.__value_ - (char *)v24.__begin_) >> 3) > v18) {
              unint64_t v18 = 0x5555555555555556 * (((char *)v24.__end_cap_.__value_ - (char *)v24.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v24.__end_cap_.__value_ - (char *)v24.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v19 = v18;
            }
            *(void *)&v27[16] = &v24.__end_cap_;
            if (v19) {
              char v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v24.__end_cap_, v19);
            }
            else {
              char v20 = 0;
            }
            *(void *)__dst = v20;
            CFStringRef v26 = &v20[24 * v17];
            *(void *)uint64_t v27 = v26;
            *(void *)&v27[8] = &v20[24 * v19];
            CSIPacketAddress::operator std::string();
            *(void *)v27 += 24;
            std::vector<std::string>::__swap_out_circular_buffer(&v24, (std::__split_buffer<std::string> *)__dst);
            unint64_t v16 = v24.__end_;
            std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)__dst);
          }
          else
          {
            CSIPacketAddress::operator std::string();
            unint64_t v16 = end + 1;
          }
          v24.__end_ = v16;
        }
        goto LABEL_43;
      }
      int v11 = socket(30, 2, 0);
      if ((v11 & 0x80000000) == 0)
      {
        CFTypeID v12 = v4->ifa_addr;
        ifa_name = v4->ifa_name;
        uint64_t v42 = 0;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        *(_OWORD *)&v27[24] = 0u;
        strncpy(__dst, ifa_name, 0x10uLL);
        sockaddr v14 = *v12;
        *(sockaddr *)&v27[12] = *(sockaddr *)&v12->sa_data[10];
        *(sockaddr *)uint64_t v27 = v14;
        if (ioctl(v11, 0xC1206949uLL, __dst) < 0)
        {
          close(v11);
LABEL_26:
          CSIPacketAddress::setIPv6Address((CSIPacketAddress *)v22, (const unsigned __int8 *)&v4->ifa_addr->sa_data[6]);
          goto LABEL_27;
        }
        if ((v27[0] & 0x9E) == 0) {
          goto LABEL_26;
        }
      }
LABEL_27:
      close(v11);
      goto LABEL_28;
    }
    uint64_t v21 = 0;
LABEL_46:
    MEMORY[0x223CBC060](v21);
    *a2 = v24;
    a2 = &v24;
  }
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  *(void *)__dst = &v24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__dst);
}

void sub_223AFF838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__split_buffer<std::string> *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a11 = (std::__split_buffer<std::string> *)&a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberUtil::getIpFamilyFromAddrList(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  LODWORD(v4) = 0;
  do
  {
    memset(v6, 0, sizeof(v6));
    MEMORY[0x223CBB660](v6, v2);
    if (CSIPacketAddress::isIPv4((CSIPacketAddress *)v6))
    {
      uint64_t v4 = v4 | 1;
    }
    else if (CSIPacketAddress::isIPv6((CSIPacketAddress *)v6))
    {
      uint64_t v4 = v4 | 2;
    }
    else
    {
      uint64_t v4 = v4;
    }
    v2 += 24;
  }
  while (v2 != v3);
  return v4;
}

void sd::IMSSubscriberUtil::getMatchingAddressList(long long **a1@<X1>, int a2@<W2>, std::vector<std::string> *a3@<X8>)
{
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    p_end_cap = (std::allocator<std::string> *)&a3->__end_cap_;
    do
    {
      memset(v20, 0, sizeof(v20));
      MEMORY[0x223CBB660](v20, v3);
      if (a2 & CSIPacketAddress::isIPv4((CSIPacketAddress *)v20)) {
        goto LABEL_7;
      }
      int v8 = CSIPacketAddress::isIPv6((CSIPacketAddress *)v20) ^ 1;
      if ((a2 & 2) == 0) {
        LOBYTE(v8) = 1;
      }
      if ((v8 & 1) == 0)
      {
LABEL_7:
        std::vector<std::string>::pointer end = a3->__end_;
        value = a3->__end_cap_.__value_;
        if (end >= value)
        {
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a3->__begin_) >> 3);
          unint64_t v13 = v12 + 1;
          if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a3->__begin_) >> 3);
          if (2 * v14 > v13) {
            unint64_t v13 = 2 * v14;
          }
          if (v14 >= 0x555555555555555) {
            unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v15 = v13;
          }
          __v.__end_cap_.__value_ = p_end_cap;
          if (v15) {
            unint64_t v16 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v15);
          }
          else {
            unint64_t v16 = 0;
          }
          std::__split_buffer<std::string>::pointer v18 = v16 + v12;
          __v.__first_ = v16;
          __v.__begin_ = v18;
          __v.__end_ = v18;
          __v.__end_cap_.__value_ = &v16[v15];
          if (*((char *)v3 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v3, *((void *)v3 + 1));
            std::__split_buffer<std::string>::pointer v18 = __v.__end_;
          }
          else
          {
            long long v19 = *v3;
            v18->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
          }
          __v.__end_ = v18 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(a3, &__v);
          unint64_t v17 = a3->__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
        }
        else
        {
          if (*((char *)v3 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(a3->__end_, *(const std::string::value_type **)v3, *((void *)v3 + 1));
          }
          else
          {
            long long v11 = *v3;
            end->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
          }
          unint64_t v17 = end + 1;
          a3->__end_ = v17;
        }
        a3->__end_ = v17;
      }
      uint64_t v3 = (long long *)((char *)v3 + 24);
    }
    while (v3 != v4);
  }
}

void sub_223AFFAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__split_buffer<std::string> *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  a9 = (void **)v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void sd::DCNManager::create()
{
}

void sub_223AFFCB4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<sd::DCNManager> ctu::SharedSynchronizable<sd::DCNManager>::make_shared_ptr<sd::DCNManager>(sd::DCNManager*)::{lambda(sd::DCNManager*)#1}::operator() const(sd::DCNManager*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_223AFFCDC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void sd::DCNManager::DCNManager(void *a1, uint64_t a2, NSObject **a3, uint64_t a4, uint64_t a5)
{
  v11[4] = *MEMORY[0x263EF8340];
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v11, (const char *)*MEMORY[0x263F03770], "5wi.dcn");
  a1[1] = 0;
  a1[2] = 0;
  int v8 = *a3;
  a1[3] = *a3;
  if (v8) {
    dispatch_retain(v8);
  }
  a1[4] = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223CBB890](&v10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v11);
  *a1 = &unk_26D743BD8;
  a1[6] = &unk_26D743B98;
  uint64_t v9 = *(void *)(a5 + 8);
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_223AFFFC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  MEMORY[0x223CBBDF0](v5, 0x10A1C40FF1576FELL);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  MEMORY[0x223CBB890](v3);
  ctu::SharedSynchronizable<sd::DCNManager>::~SharedSynchronizable(v2);
  _Unwind_Resume(a1);
}

void sd::DCNManager::~DCNManager(sd::DCNManager *this)
{
  *(void *)this = &unk_26D7437F0;
  *((void *)this + 6) = &unk_26D743880;
  std::unique_ptr<SDTimer>::reset[abi:ne180100]((SDTimer **)this + 23, 0);
  std::__tree<DataMode>::destroy((uint64_t)this + 152, *((void **)this + 20));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  size_t v6 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  MEMORY[0x223CBB890]((char *)this + 40);
  ctu::SharedSynchronizable<sd::DCNManager>::~SharedSynchronizable((void *)this + 1);
}

{
  uint64_t vars8;

  sd::DCNManager::~DCNManager(this);

  JUMPOUT(0x223CBBDF0);
}

void non-virtual thunk to'sd::DCNManager::~DCNManager(sd::DCNManager *this)
{
}

{
  uint64_t vars8;

  sd::DCNManager::~DCNManager((sd::DCNManager *)((char *)this - 48));

  JUMPOUT(0x223CBBDF0);
}

const char *sd::DCNManager::getName(sd::DCNManager *this)
{
  return "DCNManager";
}

void sd::DCNManager::bootstrap(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void v20[3] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 128);
  *(void *)(a1 + 120) = v6;
  *(void *)(a1 + 128) = v5;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    uint64_t v6 = *(void *)(a1 + 120);
  }
  int v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 8);
    long long v11 = std::__shared_weak_count::lock(v8);
    if (v11)
    {
      uint64_t v12 = v10 + 48;
      if (!v10) {
        uint64_t v12 = 0;
      }
      *(void *)&long long v19 = v12;
      *((void *)&v19 + 1) = v11;
      (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v6 + 56))(v6, v9, &v19);
      if (*((void *)&v19 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
      }
      uint64_t v14 = *a3;
      uint64_t v13 = a3[1];
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v15 = *(std::__shared_weak_count **)(a1 + 144);
      *(void *)(a1 + 136) = v14;
      *(void *)(a1 + 144) = v13;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      sd::DCNManager::instantiateDCNPolicy((sd::DCNManager *)a1);
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 104) + 24))(*(void *)(a1 + 104))) {
        *(unsigned char *)(a1 + 192) = 1;
      }
      long long v19 = xmmword_223B4BF50;
      std::__tree<DataMode>::__assign_unique<DataMode const*>((uint64_t **)(a1 + 152), (int *)&v19, (int *)v20);
      unint64_t v16 = *(std::__shared_weak_count **)(a1 + 16);
      if (v16)
      {
        unint64_t v17 = std::__shared_weak_count::lock(v16);
        if (v17)
        {
          p_shared_weak_owners = &v17->__shared_weak_owners_;
          atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          if (*(void *)(a1 + 24)) {
            dispatch_retain(*(dispatch_object_t *)(a1 + 24));
          }
          atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
          operator new();
        }
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_223B00458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a16);
  if (v18) {
    dispatch_release(v18);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x223CBBDF0](v19, 0x1072C40B14F0B7FLL);
  if (v18) {
    dispatch_release(v18);
  }
  std::__shared_weak_count::__release_weak(v17);
  _Unwind_Resume(a1);
}

void sd::DCNManager::instantiateDCNPolicy(sd::DCNManager *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  __s1 = 0;
  size_t __n = 0;
  uint64_t v16 = 0;
  (*(void (**)(void **__return_ptr))(**((void **)this + 17) + 56))(&__s1);
  uint64_t v2 = HIBYTE(v16);
  if (v16 >= 0) {
    size_t v3 = HIBYTE(v16);
  }
  else {
    size_t v3 = __n;
  }
  if (v3 != 6) {
    goto LABEL_12;
  }
  if (v16 < 0)
  {
    if (!memcmp(__s1, "Legacy", __n)) {
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v6 = operator new(0x20uLL);
    v6[1] = 0;
    v6[2] = 0;
    *uint64_t v6 = &unk_26D743B48;
    uint64_t v7 = v6 + 3;
    int v8 = &unk_26D745220;
    goto LABEL_14;
  }
  if (HIBYTE(v16))
  {
    p_s1 = &__s1;
    uint64_t v5 = "Legacy";
    while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v5)
    {
      p_s1 = (void **)((char *)p_s1 + 1);
      ++v5;
      if (!--v2) {
        goto LABEL_13;
      }
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = &unk_26D743AF8;
  uint64_t v7 = v6 + 3;
  int v8 = &unk_26D745298;
LABEL_14:
  void v6[3] = v8;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 14);
  *((void *)this + 13) = v7;
  *((void *)this + 14) = v6;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *(NSObject **)(*(uint64_t (**)(void, void))(**((void **)this + 7) + 16))(*((void *)this + 7), *((unsigned int *)this + 16));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr))(**((void **)this + 13) + 16))(__p);
    long long v11 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    std::__split_buffer<std::string>::pointer v18 = v11;
    _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#I DCN Policy - %s", buf, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__s1);
  }
}

void sub_223B00768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sd::DCNManager::setDCNDataModes(uint64_t **this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  long long v2 = xmmword_223B4BF50;
  return std::__tree<DataMode>::__assign_unique<DataMode const*>(this + 19, (int *)&v2, &v3);
}

void sd::DCNManager::shutdown(sd::DCNManager *this)
{
  int v3 = (SDTimer **)((char *)this + 184);
  uint64_t v2 = *((void *)this + 23);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 80);
    if (v4)
    {
      *(void *)(v2 + 80) = 0;
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    std::unique_ptr<SDTimer>::reset[abi:ne180100](v3, 0);
  }
  uint64_t v5 = *((void *)this + 15);
  if (v5)
  {
    (*(void (**)(uint64_t, void))(*(void *)v5 + 64))(v5, *((unsigned int *)this + 16));
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 16);
    *((void *)this + 15) = 0;
    *((void *)this + 16) = 0;
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

SDTimer *std::unique_ptr<SDTimer>::reset[abi:ne180100](SDTimer **a1, SDTimer *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    SDTimer::~SDTimer(result);
    JUMPOUT(0x223CBBDF0);
  }
  return result;
}

uint64_t sd::DCNManager::updateSimSlot(uint64_t result, int a2)
{
  *(_DWORD *)(result + 64) = a2;
  return result;
}

BOOL sd::DCNManager::isDCNDataMode(sd::DCNManager *this)
{
  uint64_t v1 = (char *)this + 160;
  uint64_t v2 = (char *)*((void *)this + 20);
  if (!v2) {
    goto LABEL_11;
  }
  int v3 = *((_DWORD *)this + 49);
  uint64_t v4 = (char *)this + 160;
  do
  {
    int v5 = *((_DWORD *)v2 + 7);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      uint64_t v7 = (char **)v2;
    }
    else {
      uint64_t v7 = (char **)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == v1 || v3 < *((_DWORD *)v4 + 7)) {
LABEL_11:
  }
    uint64_t v4 = (char *)this + 160;
  return v4 != v1;
}

void sd::DCNManager::scheduleDCN(uint64_t a1, uint64_t *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(a1 + 64));
  if (!*(void *)(*(void *)(a1 + 184) + 80))
  {
    int v5 = (os_log_t *)v4;
    int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 48))(*(void *)(a1 + 136));
    uint64_t v7 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        int v8 = a2;
      }
      else {
        int v8 = (uint64_t *)*a2;
      }
      int v9 = 136315138;
      uint64_t v10 = v8;
      _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I Scheduling DCN - Reason [%s]", (uint8_t *)&v9, 0xCu);
      uint64_t v7 = *v5;
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 67109120;
      LODWORD(v10) = v6;
      _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I Starting DCN hysteresis timer [%u seconds]", (uint8_t *)&v9, 8u);
    }
    SDTimer::set(*(SDTimer **)(a1 + 184), v6);
  }
}

BOOL sd::DCNManager::sendDCN(sd::DCNManager *this, const sd::DCNCallInfo *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = (os_log_t *)(*(uint64_t (**)(void, void))(**((void **)this + 7) + 16))(*((void *)this + 7), *((unsigned int *)this + 16));
  if ((*(uint64_t (**)(void))(**((void **)this + 17) + 64))(*((void *)this + 17)))
  {
    if (((*(uint64_t (**)(void))(**((void **)this + 13) + 48))(*((void *)this + 13)) & 1) == 0
      && (*(unsigned int (**)(void, void))(**((void **)this + 15) + 240))(*((void *)this + 15), *((unsigned int *)this + 16)))
    {
      os_log_t v5 = *v4;
      BOOL v6 = os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (!v6) {
        return result;
      }
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      int v8 = "#I Postpone sending DCN due to an ongoing call";
      int v9 = v5;
      uint32_t v10 = 2;
LABEL_19:
      _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&__p, v10);
      return 0;
    }
    char v12 = (*(uint64_t (**)(sd::DCNManager *))(*(void *)this + 40))(this);
    char v13 = *v4;
    BOOL result = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if ((v12 & 1) == 0)
    {
      if (!result) {
        return result;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = asString();
      int v8 = "#I Postpone sending DCN as the current data mode [%s] is not a DCN data mode";
      int v9 = v13;
      uint32_t v10 = 12;
      goto LABEL_19;
    }
    if (result)
    {
      sd::DCNCallInfo::to_string(&__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      unint64_t v17 = p_p;
      _os_log_impl(&dword_223AF3000, v13, OS_LOG_TYPE_DEFAULT, "#I Sending %s", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    (*(void (**)(void, void, void, void))(**((void **)this + 15) + 192))(*((void *)this + 15), *((unsigned int *)this + 16), *(unsigned int *)a2, *((unsigned int *)a2 + 1));
    *((unsigned char *)this + 192) = 0;
    (*(void (**)(void))(**((void **)this + 17) + 24))(*((void *)this + 17));
    return 1;
  }
  else
  {
    uint64_t v11 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I Suppress sending DCN as the capability has been disabled", (uint8_t *)&__p, 2u);
    }
    BOOL result = 0;
    *((unsigned char *)this + 192) = 0;
  }
  return result;
}

void sd::DCNCallInfo::to_string(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&v14, "DCN[");
  int v3 = (const char *)sms::asString();
  size_t v4 = strlen(v3);
  os_log_t v5 = std::string::append(&v14, v3, v4);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  uint64_t v7 = std::string::append(&v15, ":", 1uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  int v9 = (const char *)sms::asString();
  size_t v10 = strlen(v9);
  uint64_t v11 = std::string::append(&v16, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  char v13 = std::string::append(&v17, "]", 1uLL);
  *a1 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_223B00F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 41) < 0) {
    operator delete(*(void **)(v28 - 64));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sd::DCNManager::cancelScheduledDCN(sd::DCNManager *this)
{
  uint64_t v2 = (os_log_t *)(*(uint64_t (**)(void, void))(**((void **)this + 7) + 16))(*((void *)this + 7), *((unsigned int *)this + 16));
  int v3 = v2;
  if (*((unsigned char *)this + 192))
  {
    size_t v4 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I Clear pending DCN", buf, 2u);
    }
    *((unsigned char *)this + 192) = 0;
  }
  uint64_t v5 = *((void *)this + 23);
  uint64_t v6 = *(void *)(v5 + 80);
  if (v6)
  {
    *(void *)(v5 + 80) = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t v7 = *v3;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v8 = 0;
      _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I Canceling scheduled DCN", v8, 2u);
    }
  }
}

void sd::DCNManager::onDCNHysteresisTimeout(sd::DCNManager *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = (os_log_t *)(*(uint64_t (**)(void, void))(**((void **)this + 7) + 16))(*((void *)this + 7), *((unsigned int *)this + 16));
  int v3 = v2;
  if (*((unsigned char *)this + 192))
  {
    if ((*(unsigned int (**)(sd::DCNManager *))(*(void *)this + 40))(this))
    {
      *(void *)uint64_t v6 = 0;
      sd::DCNManager::sendDCN(this, (const sd::DCNCallInfo *)v6);
    }
    else
    {
      uint64_t v5 = *v3;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v6 = 136315138;
        *(void *)&v6[4] = asString();
        _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I DCN Hysteresis timed out but current DataMode [%s] is not a DCN Data Mode", v6, 0xCu);
      }
    }
    *((unsigned char *)this + 192) = 0;
  }
  else
  {
    size_t v4 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I No need to send DCN. Not pending anymore.", v6, 2u);
    }
  }
}

BOOL sd::DCNManager::isC2KDevice(sd::DCNManager *this)
{
  return (*(unsigned int (**)(void, void))(**((void **)this + 15) + 336))(*((void *)this + 15), *((unsigned int *)this + 16)) == 3;
}

BOOL sd::DCNManager::inQualifiedImsMode(sd::DCNManager *this)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  char v14 = 0;
  int v13 = 0;
  char v12 = 0;
  int v11 = 0;
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 15) + 336))(*((void *)this + 15));
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 13) + 72))(*((void *)this + 13));
  (*(void (**)(void, char *, int *, char *, int *, uint64_t))(**((void **)this + 17) + 40))(*((void *)this + 17), &v14, &v13, &v12, &v11, 1);
  size_t v4 = *(NSObject **)(*(uint64_t (**)(void, void))(**((void **)this + 7) + 16))(*((void *)this + 7), *((unsigned int *)this + 16));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (v2 == 3) {
      uint64_t v5 = "Yes";
    }
    else {
      uint64_t v5 = "No";
    }
    if (v14) {
      uint64_t v6 = "Yes";
    }
    else {
      uint64_t v6 = "No";
    }
    uint64_t v7 = sd::asString();
    uint64_t v8 = sd::asString();
    *(_DWORD *)std::string buf = 136315906;
    std::string v16 = v5;
    __int16 v17 = 2080;
    uint64_t v18 = v6;
    __int16 v19 = 2080;
    uint64_t v20 = v7;
    __int16 v21 = 2080;
    uint64_t v22 = v8;
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I DCN qualifier check: C2KDevice? %s, IMS Registered? %s, ServiceMask - [%s], Qualified ServiceMask - [%s]", buf, 0x2Au);
  }
  return v2 == 3 && v14 != 0 && (v13 & v3) != 0;
}

uint64_t sd::DCNManager::handleECBMUpdate(sd::DCNManager *this, char a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  size_t v4 = *(NSObject **)(*(uint64_t (**)(void, void))(**((void **)this + 7) + 16))(*((void *)this + 7), *((unsigned int *)this + 16));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v6 = 136315394;
    *(void *)&v6[4] = asStringBool();
    __int16 v7 = 2080;
    uint64_t v8 = asStringBool();
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I ECBM Updated: %s -> %s", v6, 0x16u);
  }
  *((unsigned char *)this + 176) = a2;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 13) + 32))(*((void *)this + 13));
  if (result && *((unsigned char *)this + 177) && (a2 & 1) == 0)
  {
    *((unsigned char *)this + 177) = 0;
    *(void *)uint64_t v6 = 0x2000000000;
    return sd::DCNManager::sendDCN(this, (const sd::DCNCallInfo *)v6);
  }
  return result;
}

uint64_t non-virtual thunk to'sd::DCNManager::handleECBMUpdate(sd::DCNManager *this, char a2)
{
  return sd::DCNManager::handleECBMUpdate((sd::DCNManager *)((char *)this - 48), a2);
}

void sd::DCNManager::handleCallStart(uint64_t a1, int a2, int a3)
{
  if (sd::DCNManager::inQualifiedImsMode((sd::DCNManager *)a1)
    && a2
    && (*(unsigned int (**)(void))(**(void **)(a1 + 104) + 40))(*(void *)(a1 + 104)))
  {
    if (a3 == 10)
    {
      __p[0] = 0;
      if (sd::DCNManager::sendDCN((sd::DCNManager *)a1, (const sd::DCNCallInfo *)__p)) {
        return;
      }
      goto LABEL_8;
    }
    if (a3 == 1)
    {
LABEL_8:
      *(unsigned char *)(a1 + 192) = 1;
      std::string::basic_string[abi:ne180100]<0>(__p, "Call Start");
      sd::DCNManager::scheduleDCN(a1, (uint64_t *)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      return;
    }
    int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 32))(*(void *)(a1 + 104));
    if ((a3 & 0xFFFFFFFE) == 2 && v6)
    {
      *(unsigned char *)(a1 + 177) = 1;
      __p[0] = (void *)0x1000000000;
      sd::DCNManager::sendDCN((sd::DCNManager *)a1, (const sd::DCNCallInfo *)__p);
    }
  }
}

void sub_223B01708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::DCNManager::handleCallEnd(sd::DCNManager *this, char a2)
{
  if ((a2 & 1) == 0
    && (*(unsigned int (**)(void))(**((void **)this + 13) + 56))(*((void *)this + 13)))
  {
    *((unsigned char *)this + 192) = 1;
    std::string::basic_string[abi:ne180100]<0>(__p, "Call End");
    sd::DCNManager::scheduleDCN((uint64_t)this, (uint64_t *)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_223B017B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::DCNManager::handleImsRegistrationTerminated(sd::DCNManager *this, int a2)
{
  if (a2
    && ((*(uint64_t (**)(void, void))(**((void **)this + 15) + 240))(*((void *)this + 15), *((unsigned int *)this + 16)) & 1) == 0)
  {
    sd::DCNManager::cancelScheduledDCN(this);
  }
  else if (sd::DCNManager::inQualifiedImsMode(this) && !*((unsigned char *)this + 176))
  {
    int v3 = *(NSObject **)(*(uint64_t (**)(void, void))(**((void **)this + 7) + 16))(*((void *)this + 7), *((unsigned int *)this + 16));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I Pending DCN SMS", (uint8_t *)__p, 2u);
    }
    *((unsigned char *)this + 192) = 1;
    if ((*(unsigned int (**)(sd::DCNManager *))(*(void *)this + 40))(this))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "IMS Registration Terminated (Network Unaware)");
      sd::DCNManager::scheduleDCN((uint64_t)this, (uint64_t *)__p);
      if (v5 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_223B01930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::DCNManager::handleImsPdnInactive(sd::DCNManager *this)
{
  if (sd::DCNManager::inQualifiedImsMode(this) && !*((unsigned char *)this + 176))
  {
    *((unsigned char *)this + 192) = 1;
    if ((*(unsigned int (**)(sd::DCNManager *))(*(void *)this + 40))(this))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "IMS PDN went down");
      sd::DCNManager::scheduleDCN((uint64_t)this, (uint64_t *)__p);
      if (v3 < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_223B019E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::DCNManager::handleDataModeChanged(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 196) = a2;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1))
  {
    if (*(unsigned char *)(a1 + 192))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "Data mode changed to a DCN qualified data mode when DCN was pending");
      sd::DCNManager::scheduleDCN(a1, (uint64_t *)__p);
    }
    else
    {
      if (!(*(unsigned int (**)(void))(**(void **)(a1 + 104) + 64))(*(void *)(a1 + 104))) {
        return;
      }
      *(unsigned char *)(a1 + 192) = 1;
      std::string::basic_string[abi:ne180100]<0>(__p, "Data mode changed to a DCN qualified data mode and policy says we need to trigger DCN");
      sd::DCNManager::scheduleDCN(a1, (uint64_t *)__p);
    }
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_223B01ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sd::DCNManager::handleDCNDeliveryStatus_sync(sd::DCNManager *this, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  char v4 = *(NSObject **)(*(uint64_t (**)(void, void))(**((void **)this + 7) + 16))(*((void *)this + 7), *((unsigned int *)this + 16));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    char v5 = "failed";
    if (a2) {
      char v5 = "successful";
    }
    int v7 = 136315138;
    char v8 = v5;
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I DCN delivery %s", (uint8_t *)&v7, 0xCu);
  }
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 17) + 32))(*((void *)this + 17), a2);
}

uint64_t non-virtual thunk to'sd::DCNManager::handleDCNDeliveryStatus_sync(sd::DCNManager *this, uint64_t a2)
{
  return sd::DCNManager::handleDCNDeliveryStatus_sync((sd::DCNManager *)((char *)this - 48), a2);
}

uint64_t sd::DCNManager::handleDumpState(sd::DCNManager *this)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  int v2 = (os_log_t *)(*(uint64_t (**)(void, void))(**((void **)this + 7) + 16))(*((void *)this + 7), *((unsigned int *)this + 16));
  char v3 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "DCNManager";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "DCNManager";
    _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I 5wi.dcn:: ----------------- %s %s ==>> -------------------", buf, 0x16u);
  }
  uint64_t v43 = 0;
  long long v41 = 0u;
  memset(v42, 0, sizeof(v42));
  *(_OWORD *)long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  memset(buf, 0, sizeof(buf));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  long long __p = 0uLL;
  uint64_t v33 = 0;
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], &__p);
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)__p);
  }
  char v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"fDCNSupportedDataModes: ", 24);
  char v5 = (sd::DCNManager *)*((void *)this + 19);
  if (v5 != (sd::DCNManager *)((char *)this + 160))
  {
    do
    {
      int v6 = (const char *)asString();
      size_t v7 = strlen(v6);
      char v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)v6, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
      uint64_t v9 = (sd::DCNManager *)*((void *)v5 + 1);
      if (v9)
      {
        do
        {
          size_t v10 = v9;
          uint64_t v9 = *(sd::DCNManager **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          size_t v10 = (sd::DCNManager *)*((void *)v5 + 2);
          BOOL v11 = *(void *)v10 == (void)v5;
          char v5 = v10;
        }
        while (!v11);
      }
      char v5 = v10;
    }
    while (v10 != (sd::DCNManager *)((char *)this + 160));
  }
  std::ios_base::getloc((const std::ios_base *)&buf[*(void *)(*(void *)buf - 24)]);
  char v12 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  int v13 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], &__p);
    char v14 = v33 >= 0 ? &__p : (long long *)__p;
    *(_DWORD *)long long v34 = 136315138;
    long long v35 = v14;
    _os_log_impl(&dword_223AF3000, v13, OS_LOG_TYPE_DEFAULT, "#I 5wi.dcn:: %s", v34, 0xCu);
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)__p);
    }
  }
  long long __p = 0uLL;
  uint64_t v33 = 0;
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], &__p);
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)__p);
  }
  std::string v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  std::string v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"fDCNHysteresisTimer=", 20);
  __int16 v17 = (const char *)asStringBool();
  size_t v18 = strlen(v17);
  __int16 v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
  __int16 v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"fDCNPending=", 12);
  uint64_t v22 = (const char *)asStringBool();
  size_t v23 = strlen(v22);
  std::vector<std::string> v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
  std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(void *)(*v24 - 24)));
  unint64_t v25 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
  std::locale::~locale((std::locale *)&__p);
  std::ostream::put();
  std::ostream::flush();
  CFStringRef v26 = *v2;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], &__p);
    uint64_t v27 = v33 >= 0 ? &__p : (long long *)__p;
    *(_DWORD *)long long v34 = 136315138;
    long long v35 = v27;
    _os_log_impl(&dword_223AF3000, v26, OS_LOG_TYPE_DEFAULT, "#I 5wi.dcn:: %s", v34, 0xCu);
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)__p);
    }
  }
  uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"fDCNActivatedForECBM=", 21);
  long long v29 = (const char *)asStringBool();
  size_t v30 = strlen(v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
  *(void *)std::string buf = *MEMORY[0x263F8C2C8];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *(void *)&uint8_t buf[8] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v40) < 0) {
    operator delete(v39[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223CBBDB0](v42);
}

void sub_223B021C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223CBBDB0](a1 + 112);
  return a1;
}

void *ctu::SharedSynchronizable<sd::DCNManager>::~SharedSynchronizable(void *a1)
{
  uint64_t v2 = a1[3];
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = a1[2];
  if (v3) {
    dispatch_release(v3);
  }
  char v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    int v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void std::__shared_ptr_pointer<sd::DCNManager *,std::shared_ptr<sd::DCNManager> ctu::SharedSynchronizable<sd::DCNManager>::make_shared_ptr<sd::DCNManager>(sd::DCNManager*)::{lambda(sd::DCNManager *)#1},std::allocator<sd::DCNManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

void std::__shared_ptr_pointer<sd::DCNManager *,std::shared_ptr<sd::DCNManager> ctu::SharedSynchronizable<sd::DCNManager>::make_shared_ptr<sd::DCNManager>(sd::DCNManager*)::{lambda(sd::DCNManager *)#1},std::allocator<sd::DCNManager>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<sd::DCNManager *,std::shared_ptr<sd::DCNManager> ctu::SharedSynchronizable<sd::DCNManager>::make_shared_ptr<sd::DCNManager>(sd::DCNManager*)::{lambda(sd::DCNManager *)#1},std::allocator<sd::DCNManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<sd::DCNManager> ctu::SharedSynchronizable<sd::DCNManager>::make_shared_ptr<sd::DCNManager>(sd::DCNManager*)::{lambda(sd::DCNManager*)#1}::operator() const(sd::DCNManager*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__tree<DataMode>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<DataMode>::destroy(a1, *a2);
    std::__tree<DataMode>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C2D8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C198], MEMORY[0x263F8C0A0]);
}

void *std::__function::__func<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0,std::allocator<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D743A68;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0,std::allocator<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D743A68;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223CBBDF0);
}

void *std::__function::__func<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0,std::allocator<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D743A68;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0,std::allocator<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D743A68;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0,std::allocator<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0,std::allocator<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0,std::allocator<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      char v5 = *(sd::DCNManager **)(a1 + 8);
      if (v5) {
        sd::DCNManager::onDCNHysteresisTimeout(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_223B02A08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0,std::allocator<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0,std::allocator<sd::DCNManager::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&,std::shared_ptr<sd::DCNDelegate>)::$_0>,void ()(void)>::target_type()
{
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t **std::__tree<DataMode>::__assign_unique<DataMode const*>(uint64_t **result, int *a2, int *a3)
{
  char v5 = result;
  if (result[2])
  {
    int v6 = *result;
    size_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    _OWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      size_t v8 = (uint64_t *)v6[1];
    }
    else {
      size_t v8 = v6;
    }
    size_t v10 = result;
    BOOL v11 = v8;
    char v12 = v8;
    if (v8)
    {
      BOOL v11 = std::__tree<DataMode>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      while (a2 != a3)
      {
        std::__tree<DataMode>::__node_assign_unique(v5, a2, (uint64_t)v8);
        if (v9)
        {
          size_t v8 = v11;
          char v12 = v11;
          if (!v11)
          {
            ++a2;
            break;
          }
          BOOL v11 = std::__tree<DataMode>::_DetachedTreeCache::__detach_next((uint64_t)v11);
        }
        else
        {
          size_t v8 = v12;
        }
        ++a2;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)std::__tree<DataMode>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    uint64_t result = std::__tree<DataMode>::__emplace_unique_key_args<DataMode,DataMode const&>(v5, a2, a2);
    ++a2;
  }
  return result;
}

void sub_223B02BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<DataMode>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<DataMode>::__node_assign_unique(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t v4 = a1 + 1;
  char v5 = a1[1];
  int v6 = *a2;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        size_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v6 >= v8) {
          break;
        }
        char v5 = *v7;
        uint64_t v4 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= v6) {
        return v7;
      }
      char v5 = v7[1];
      if (!v5)
      {
        uint64_t v4 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    size_t v7 = a1 + 1;
LABEL_9:
    *(_DWORD *)(a3 + 28) = v6;
    std::__tree<DataMode>::__insert_node_at(a1, (uint64_t)v7, v4, (uint64_t *)a3);
  }
  return (uint64_t **)a3;
}

uint64_t *std::__tree<DataMode>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  char v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), char v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            char v9 = (uint64_t **)a2[2];
          }
          else
          {
            char v9 = (uint64_t **)v2[1];
            size_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *char v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), char v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *char v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void *std::__tree<DataMode>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<DataMode>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<DataMode>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<DataMode>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t **std::__tree<DataMode>::__emplace_unique_key_args<DataMode,DataMode const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  int v6 = a1 + 1;
  char v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        char v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      char v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    size_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<DataMode>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void std::__shared_ptr_emplace<sd::DCNPolicyLegacy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D743AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sd::DCNPolicyLegacy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D743AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

uint64_t std::__shared_ptr_emplace<sd::DCNPolicyLegacy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<sd::DCNPolicyDefault>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D743B48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sd::DCNPolicyDefault>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D743B48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

uint64_t std::__shared_ptr_emplace<sd::DCNPolicyDefault>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::stringbuf::str[abi:ne180100](uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 64;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v5;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;

  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void SystemDeterminationManager::ImsEmergencyAuthDelegate::handleAuthenticate(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  if (v2)
  {
    uint64_t v4 = a1[1];
    if (v4)
    {
      unint64_t v5 = (std::__shared_weak_count *)a1[3];
      uint64_t v6 = v2;
      std::string::size_type v7 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 552))(v4, &v6, a2);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void sub_223B03338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

const char *SystemDeterminationManager::getName(SystemDeterminationManager *this)
{
  return "SystemDeterminationManager";
}

void SystemDeterminationManager::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_223B0354C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void sub_223B035B8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<SystemDeterminationManager> ctu::SharedSynchronizable<SystemDeterminationManager>::make_shared_ptr<SystemDeterminationManager>(SystemDeterminationManager*)::{lambda(SystemDeterminationManager*)#1}::operator() const(SystemDeterminationManager*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_223B035E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  JUMPOUT(0x223B035B0);
}

void SystemDeterminationManager::init(SystemDeterminationManager *this)
{
  uint64_t v2 = *((void *)this + 12);
  char v3 = *((void *)this + 3);
  dispatch_object_t object = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v4 || (uint64_t v5 = *((void *)this + 1), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v5 + 48;
  if (!v5) {
    uint64_t v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  (*(void (**)(long long *__return_ptr, uint64_t, dispatch_object_t *, uint64_t *))(*(void *)v2 + 16))(&v13, v2, &object, &v10);
  long long v8 = v13;
  long long v13 = 0uLL;
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 20);
  *(_OWORD *)((char *)this + 152) = v8;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_223B0372C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SystemDeterminationManager::SystemDeterminationManager(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  *(void *)a1 = MEMORY[0x263F03630] + 16;
  uint64_t v6 = (void *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v20, (const char *)*MEMORY[0x263F03770], "5wi.sd");
  uint64_t v7 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  long long v8 = dispatch_queue_create("SystemDeterminationManager", v7);
  *uint64_t v6 = 0;
  v6[1] = 0;
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    uint64_t v9 = v8;
    dispatch_retain(v8);
    *(void *)(a1 + 32) = 0;
    dispatch_release(v9);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
  }
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223CBB890](&v17);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v20);
  *(void *)(a1 + 48) = MEMORY[0x263F03640] + 16;
  *(void *)(a1 + 56) = &unk_26D745B00;
  *(void *)(a1 + 64) = MEMORY[0x263F03660] + 16;
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  uint64_t v17 = *a2;
  size_t v18 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v19[0] = &unk_26D744450;
  v19[3] = v19;
  *(void *)(a1 + 72) = 0;
  if ((capabilities::ct::supportsGemini(v10) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 72)) {
    operator new();
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v19);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  *(void *)a1 = &unk_26D743C70;
  *(void *)(a1 + 48) = &unk_26D743F70;
  *(void *)(a1 + 56) = &unk_26D7440E0;
  *(void *)(a1 + 64) = &unk_26D744150;
  *(void *)(a1 + 80) = *a2;
  uint64_t v12 = a2[1];
  *(void *)(a1 + 88) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *a3;
  *a3 = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  char v14 = *(NSObject **)(a1 + 24);
  dispatch_object_t object = v14;
  if (v14) {
    dispatch_retain(v14);
  }
  (*(void (**)(uint64_t, dispatch_object_t *))(*(void *)v13 + 96))(v13, &object);
  if (object) {
    dispatch_release(object);
  }
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = a1 + 248;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = a1 + 272;
  *(unsigned char *)(a1 + 288) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 376) = 0;
  *(_WORD *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 418) = 0;
  *(void *)(a1 + 424) = 0;
  *(_WORD *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(void *)(a1 + 472) = 0;
  return a1;
}

void sub_223B03BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const char *anonymous namespace'::sGetLogDomainForInstance(int a1)
{
  uint64_t v1 = "5wi.sd.?";
  if (a1 == 2) {
    uint64_t v1 = "5wi.sd.2";
  }
  if (a1 == 1) {
    return "5wi.sd.1";
  }
  else {
    return v1;
  }
}

void SystemDeterminationManager::~SystemDeterminationManager(SystemDeterminationManager *this)
{
  *(void *)this = &unk_26D743C70;
  uint64_t v2 = (SystemDeterminationManager *)((char *)this + 48);
  *((void *)this + 6) = &unk_26D743F70;
  *((void *)this + 7) = &unk_26D7440E0;
  char v3 = (SystemDeterminationManager *)((char *)this + 64);
  *((void *)this + 8) = &unk_26D744150;
  if (*((char *)this + 479) < 0) {
    operator delete(*((void **)this + 57));
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 56);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 53);
  if (v5) {
    dispatch_release(v5);
  }
  std::unique_ptr<SDTimer>::reset[abi:ne180100]((SDTimer **)this + 44, 0);
  if (*((char *)this + 343) < 0) {
    operator delete(*((void **)this + 40));
  }
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }
  std::__tree<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>>>::destroy(*((void **)this + 34));
  std::__tree<DataMode>::destroy((uint64_t)this + 240, *((void **)this + 31));
  std::__tree<DataMode>::destroy((uint64_t)this + 216, *((void **)this + 28));
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v8 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::destroy(*((void **)this + 17));
  std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::destroy(*((void **)this + 14));
  uint64_t v10 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v12 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  sd::IMSSubscriberMetricsDelegate::~IMSSubscriberMetricsDelegate(v3);
  sd::IMSSubscriberEventDelegate::~IMSSubscriberEventDelegate(v2);
  MEMORY[0x223CBB890]((char *)this + 40);
  ctu::SharedSynchronizable<sd::DCNManager>::~SharedSynchronizable((void *)this + 1);

  SystemDeterminationManagerInterface::~SystemDeterminationManagerInterface(this);
}

{
  uint64_t vars8;

  SystemDeterminationManager::~SystemDeterminationManager(this);

  JUMPOUT(0x223CBBDF0);
}

void non-virtual thunk to'SystemDeterminationManager::~SystemDeterminationManager(SystemDeterminationManager *this)
{
}

{
  SystemDeterminationManager::~SystemDeterminationManager((SystemDeterminationManager *)((char *)this - 56));
}

{
  SystemDeterminationManager::~SystemDeterminationManager((SystemDeterminationManager *)((char *)this - 64));
}

{
  uint64_t vars8;

  SystemDeterminationManager::~SystemDeterminationManager((SystemDeterminationManager *)((char *)this - 48));

  JUMPOUT(0x223CBBDF0);
}

{
  uint64_t vars8;

  SystemDeterminationManager::~SystemDeterminationManager((SystemDeterminationManager *)((char *)this - 56));

  JUMPOUT(0x223CBBDF0);
}

{
  uint64_t vars8;

  SystemDeterminationManager::~SystemDeterminationManager((SystemDeterminationManager *)((char *)this - 64));

  JUMPOUT(0x223CBBDF0);
}

void SystemDeterminationManager::notifyServiceBootstrap(SystemDeterminationManager *this, const group *a2)
{
  gr_name = a2->gr_name;
  uint64_t v4 = gr_name;
  if (gr_name)
  {
    dispatch_retain((dispatch_object_t)gr_name);
    dispatch_group_enter((dispatch_group_t)gr_name);
  }
  SystemDeterminationManager::initialize((uint64_t)this, (dispatch_object_t *)&v4);
}

void sub_223B0413C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::initialize(uint64_t a1, dispatch_object_t *a2)
{
  char v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
      if (v6)
      {
        if (std::__shared_weak_count::lock(v6)) {
          operator new();
        }
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_223B04294(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::notifyServiceStart(SystemDeterminationManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    char v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
      if (v4)
      {
        if (std::__shared_weak_count::lock(v4)) {
          operator new();
        }
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

_WORD *SystemDeterminationManager::getServiceShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  char v3 = operator new(2uLL);
  *a1 = v3;
  *char v3 = 768;
  uint64_t result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void SystemDeterminationManager::notifyServiceShutdown(uint64_t a1, int a2, ServiceStage *this)
{
  dispatch_object_t object = 0;
  ServiceStage::holdOffStage((uint64_t *)&object, this);
  uint64_t v4 = object;
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
      if (v7)
      {
        if (std::__shared_weak_count::lock(v7)) {
          operator new();
        }
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_223B04578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (v10)
  {
    dispatch_group_leave(v10);
    dispatch_release(v10);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::cleanup_sync(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_223AF3000, v2, OS_LOG_TYPE_DEFAULT, "#I We are cleaning up", buf, 2u);
  }
  uint64_t v3 = *(void *)(a1 + 152);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 200);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(void **)(a1 + 104);
  uint64_t v6 = (void *)(a1 + 112);
  if (v5 != (void *)(a1 + 112))
  {
    do
    {
      (*(void (**)(void))(*(void *)v5[7] + 40))(v5[7]);
      uint64_t v7 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        long long v8 = (const char *)(v5 + 4);
        uint64_t v9 = *((unsigned __int8 *)v5 + 55);
        int v10 = (char)v9;
        if ((v9 & 0x80u) != 0) {
          uint64_t v9 = v5[5];
        }
        if (v10 < 0) {
          long long v8 = (const char *)v5[4];
        }
        if (!v9) {
          long long v8 = "<invalid>";
        }
        *(_DWORD *)std::string buf = 136315138;
        std::string v16 = v8;
        _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I Done with %s", buf, 0xCu);
      }
      uint64_t v11 = (void *)v5[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v5[2];
          BOOL v13 = *v12 == (void)v5;
          uint64_t v5 = v12;
        }
        while (!v13);
      }
      uint64_t v5 = v12;
    }
    while (v12 != v6);
  }
  std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::destroy(*(void **)(a1 + 112));
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = v6;
  char v14 = *(std::__shared_weak_count **)(a1 + 160);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void SystemDeterminationManager::getEmergencyIMSClientRef(SystemDeterminationManager *this@<X0>, void *a2@<X8>)
{
  uint64_t v5 = this;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_24getEmergencyIMSClientRefEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  void v6[3] = &__block_descriptor_tmp_184;
  v6[4] = (char *)this + 8;
  v6[5] = &v5;
  uint64_t v7 = v6;
  uint64_t v3 = (char *)this + 24;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v4 = MEMORY[0x263EF8330];
  if (*((void *)v3 + 1))
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t block = v4;
    uint64_t v9 = 0x40000000;
    int v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__110shared_ptrIN3ims15EmergencyClientEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v11 = &__block_descriptor_tmp_186;
    uint64_t v12 = a2;
    BOOL v13 = &v7;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t block = v4;
    uint64_t v9 = 0x40000000;
    int v10 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__110shared_ptrIN3ims15EmergencyClientEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v11 = &__block_descriptor_tmp_185;
    uint64_t v12 = a2;
    BOOL v13 = &v7;
    dispatch_sync(v2, &block);
  }
}

uint64_t SystemDeterminationManager::getEmergencyIMSClientRef_sync@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 168);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 16);
    uint64_t v3 = *(void *)(v2 + 24);
    *a2 = v4;
    a2[1] = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

uint64_t non-virtual thunk to'SystemDeterminationManager::getEmergencyIMSClientRef_sync@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 112);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 16);
    uint64_t v3 = *(void *)(v2 + 24);
    *a2 = v4;
    a2[1] = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void SystemDeterminationManager::getIMSClientRef(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 88);
  *(void *)std::string buf = *(void *)(a1 + 80);
  *(void *)&uint8_t buf[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v7 & 1) == 0)
  {
    BOOL v8 = PersonalityID::operator==((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 456));
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (v8)
    {
      if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
        BOOL v11 = (v10 & 0x80u) != 0;
        if ((v10 & 0x80u) != 0) {
          uint64_t v10 = *(void *)(a2 + 8);
        }
        if (v11) {
          uint64_t v12 = *(const char **)a2;
        }
        else {
          uint64_t v12 = (const char *)a2;
        }
        if (v10) {
          BOOL v13 = v12;
        }
        else {
          BOOL v13 = "<invalid>";
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v13;
        _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I IMSClient: Ignoring recently removed Personality: %s", buf, 0xCu);
      }
LABEL_57:
      *a3 = 0;
      a3[1] = 0;
      return;
    }
    if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = *(unsigned __int8 *)(a2 + 23);
      BOOL v27 = (v26 & 0x80u) != 0;
      if ((v26 & 0x80u) != 0) {
        uint64_t v26 = *(void *)(a2 + 8);
      }
      if (v27) {
        uint64_t v28 = *(const char **)a2;
      }
      else {
        uint64_t v28 = (const char *)a2;
      }
      if (v26) {
        long long v29 = v28;
      }
      else {
        long long v29 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v29;
      _os_log_error_impl(&dword_223AF3000, v9, OS_LOG_TYPE_ERROR, "IMSClient: Unknown Personality: %s", buf, 0xCu);
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 80));
    std::string v15 = ServiceMap;
    uint64_t v16 = *(void *)(MEMORY[0x263F03608] + 8);
    if (v16 < 0)
    {
      uint64_t v17 = (unsigned __int8 *)(v16 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v18 = 5381;
      do
      {
        uint64_t v16 = v18;
        unsigned int v19 = *v17++;
        uint64_t v18 = (33 * v18) ^ v19;
      }
      while (v19);
    }
    std::mutex::lock(ServiceMap);
    *(void *)std::string buf = v16;
    uint64_t v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v15[1].__m_.__sig, (unint64_t *)buf);
    if (v20)
    {
      uint64_t v22 = v20[3];
      uint64_t v21 = (std::__shared_weak_count *)v20[4];
      if (v21)
      {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v15);
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        char v23 = 0;
        if (!v22)
        {
LABEL_55:
          if ((v23 & 1) == 0) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          goto LABEL_57;
        }
LABEL_35:
        *(_OWORD *)&uint8_t buf[8] = 0u;
        uint64_t v46 = 0xB00000000000000;
        long long v45 = 0u;
        *(_OWORD *)&v47[8] = 0u;
        long long v51 = 0u;
        long long v50 = 0u;
        memset(&v48, 0, sizeof(v48));
        uint64_t v49 = 23;
        buf[23] = 9;
        qmemcpy(buf, "Telephony", 9);
        *(_DWORD *)((char *)&v45 + 7) = 2037672300;
        *(void *)&long long v45 = *(void *)"Personality";
        v47[23] = 13;
        qmemcpy(v47, "Possible race", 13);
        std::string::__assign_external(&v48, "Personality missing unexpectedly", 0x20uLL);
        v49 |= 0x17uLL;
        ABCReportInfo::ABCReportInfo(&v32, (const ABCReportInfo *)buf);
        v43[3] = 0;
        (*(void (**)(uint64_t, std::string *, void *))(*(void *)v22 + 16))(v22, &v32, v43);
        std::__function::__value_func<void ()(BOOL,std::string)>::~__value_func[abi:ne180100](v43);
        if (v40 < 0) {
          operator delete(v39);
        }
        if (v38 < 0) {
          operator delete(v37);
        }
        if (v36 < 0) {
          operator delete(v35);
        }
        if (v34 < 0) {
          operator delete(v33);
        }
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v32.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v51) < 0) {
          operator delete((void *)v50);
        }
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
        if ((v47[23] & 0x80000000) != 0) {
          operator delete(*(void **)v47);
        }
        if (SHIBYTE(v46) < 0) {
          operator delete((void *)v45);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    std::mutex::unlock(v15);
    uint64_t v21 = 0;
    char v23 = 1;
    if (!v22) {
      goto LABEL_55;
    }
    goto LABEL_35;
  }
  uint64_t v30 = a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v41[0] = MEMORY[0x263EF8330];
  v41[1] = 0x40000000;
  v41[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_15getIMSClientRefERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  v41[3] = &__block_descriptor_tmp_188;
  v41[4] = a1 + 8;
  v41[5] = &v30;
  uint64_t v42 = v41;
  std::vector<std::string> v24 = *(NSObject **)(a1 + 24);
  uint64_t v25 = MEMORY[0x263EF8330];
  if (*(void *)(a1 + 32))
  {
    *a3 = 0;
    a3[1] = 0;
    *(void *)std::string buf = v25;
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__110shared_ptrIN3ims6ClientEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    *(void *)&long long v45 = &__block_descriptor_tmp_190;
    *((void *)&v45 + 1) = a3;
    uint64_t v46 = (uint64_t)&v42;
    dispatch_async_and_wait(v24, buf);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    *(void *)std::string buf = v25;
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__110shared_ptrIN3ims6ClientEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    *(void *)&long long v45 = &__block_descriptor_tmp_189;
    *((void *)&v45 + 1) = a3;
    uint64_t v46 = (uint64_t)&v42;
    dispatch_sync(v24, buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_223B04E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  std::__function::__value_func<void ()(BOOL,std::string)>::~__value_func[abi:ne180100](&a37);
  ABCReportInfo::~ABCReportInfo(&a13);
  ABCReportInfo::~ABCReportInfo((void **)(v39 - 208));
  if ((v38 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  _Unwind_Resume(a1);
}

void ABCReportInfo::~ABCReportInfo(void **this)
{
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void SystemDeterminationManager::getLazuliClientRef(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 88);
  *(void *)&long long buf = *(void *)(a1 + 80);
  *((void *)&buf + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*((void *)&buf + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
  }
  if (v7)
  {
    uint64_t v20 = a1;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    v22[0] = MEMORY[0x263EF8330];
    v22[1] = 0x40000000;
    v22[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_18getLazuliClientRefERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
    v22[3] = &__block_descriptor_tmp_191;
    v22[4] = a1 + 8;
    v22[5] = &v20;
    char v23 = v22;
    char v14 = *(NSObject **)(a1 + 24);
    uint64_t v15 = MEMORY[0x263EF8330];
    if (*(void *)(a1 + 32))
    {
      *a3 = 0;
      a3[1] = 0;
      *(void *)&long long buf = v15;
      *((void *)&buf + 1) = 0x40000000;
      uint64_t v25 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__110shared_ptrIN3ims6ClientEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      uint64_t v26 = &__block_descriptor_tmp_190;
      BOOL v27 = a3;
      uint64_t v28 = &v23;
      dispatch_async_and_wait(v14, &buf);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      *(void *)&long long buf = v15;
      *((void *)&buf + 1) = 0x40000000;
      uint64_t v25 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__110shared_ptrIN3ims6ClientEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      uint64_t v26 = &__block_descriptor_tmp_189;
      BOOL v27 = a3;
      uint64_t v28 = &v23;
      dispatch_sync(v14, &buf);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v8 = PersonalityID::operator==((unsigned __int8 *)a2, (unsigned __int8 *)(a1 + 456));
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (v8)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
        BOOL v11 = (v10 & 0x80u) != 0;
        if ((v10 & 0x80u) != 0) {
          uint64_t v10 = *(void *)(a2 + 8);
        }
        if (v11) {
          uint64_t v12 = *(const std::string::value_type **)a2;
        }
        else {
          uint64_t v12 = (const std::string::value_type *)a2;
        }
        if (v10) {
          BOOL v13 = v12;
        }
        else {
          BOOL v13 = "<invalid>";
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v13;
        _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I LazuliClient: Ignoring recently removed Personality: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
      BOOL v17 = (v16 & 0x80u) != 0;
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = *(void *)(a2 + 8);
      }
      if (v17) {
        uint64_t v18 = *(const std::string::value_type **)a2;
      }
      else {
        uint64_t v18 = (const std::string::value_type *)a2;
      }
      if (v16) {
        unsigned int v19 = v18;
      }
      else {
        unsigned int v19 = "<invalid>";
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v19;
      _os_log_error_impl(&dword_223AF3000, v9, OS_LOG_TYPE_ERROR, "LazuliClient: Unknown Personality: %s", (uint8_t *)&buf, 0xCu);
    }
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_223B05228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void SystemDeterminationManager::getIMSConfigRef(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)&long long block = a1[10];
  *((void *)&block + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*((void *)&block + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&block + 1));
  }
  if (v7)
  {
    uint64_t v15 = a1;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 0x40000000;
    v17[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_15getIMSConfigRefERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
    v17[3] = &__block_descriptor_tmp_193;
    v17[4] = a1 + 1;
    v17[5] = &v15;
    uint64_t v18 = v17;
    uint64_t v9 = a1[3];
    uint64_t v10 = MEMORY[0x263EF8330];
    if (a1[4])
    {
      *a3 = 0;
      a3[1] = 0;
      *(void *)&long long block = v10;
      *((void *)&block + 1) = 0x40000000;
      uint64_t v20 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__110shared_ptrIKN2sd28IMSSubscriberConfigInterfaceEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      uint64_t v21 = &__block_descriptor_tmp_195;
      uint64_t v22 = a3;
      char v23 = &v18;
      dispatch_async_and_wait(v9, &block);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      *(void *)&long long block = v10;
      *((void *)&block + 1) = 0x40000000;
      uint64_t v20 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__110shared_ptrIKN2sd28IMSSubscriberConfigInterfaceEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      uint64_t v21 = &__block_descriptor_tmp_194;
      uint64_t v22 = a3;
      char v23 = &v18;
      dispatch_sync(v9, &block);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      BOOL v12 = (v11 & 0x80u) != 0;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      if (v12) {
        BOOL v13 = *(const std::string::value_type **)a2;
      }
      else {
        BOOL v13 = (const std::string::value_type *)a2;
      }
      if (v11) {
        char v14 = v13;
      }
      else {
        char v14 = "<invalid>";
      }
      LODWORD(block) = 136315138;
      *(void *)((char *)&block + 4) = v14;
      _os_log_error_impl(&dword_223AF3000, v8, OS_LOG_TYPE_ERROR, "IMSConfig: Unknown Personality: %s", (uint8_t *)&block, 0xCu);
    }
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_223B054A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void SystemDeterminationManager::handleECBMChanged_sync(SystemDeterminationManager *this, char a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = asStringBool();
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I ECBM: enabled = %s", (uint8_t *)&v5, 0xCu);
  }
  *((unsigned char *)this + 288) = a2;
}

void non-virtual thunk to'SystemDeterminationManager::handleECBMChanged_sync(SystemDeterminationManager *this, char a2)
{
}

void SystemDeterminationManager::handleEmergencyCallInProgress_sync(SystemDeterminationManager *this, int a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = asStringBool();
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I Emergency call in progress: %s", buf, 0xCu);
  }
  int v5 = (SystemDeterminationManager *)*((void *)this + 13);
  if (v5 != (SystemDeterminationManager *)((char *)this + 112))
  {
    do
    {
      uint64_t v6 = *((void *)v5 + 7);
      *(_OWORD *)long long buf = 0uLL;
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v6 + 72))(buf);
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      (*(void (**)(uint64_t *__return_ptr))(**((void **)v5 + 7) + 64))(&v15);
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 72))(v15);
      BOOL v8 = (NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 9) + 16))(*((void *)this + 9), v7);
      if (a2 && (*(unsigned int (**)(void))(**(void **)buf + 272))(*(void *)buf))
      {
        uint64_t v9 = *v8;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)char v14 = 0;
          _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I IMS Registration is blocked while Emergency call is in progress", v14, 2u);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 744))(v15, 7);
      }
      else if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v15 + 736))(v15, 7))
      {
        uint64_t v10 = *v8;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)char v14 = 0;
          _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#I IMS Registration due to Emergency call is unblocked", v14, 2u);
        }
        (*(void (**)(void, const char *, uint64_t))(**((void **)v5 + 7) + 520))(*((void *)v5 + 7), "E911", 7);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      uint64_t v11 = (SystemDeterminationManager *)*((void *)v5 + 1);
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          uint64_t v11 = *(SystemDeterminationManager **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (SystemDeterminationManager *)*((void *)v5 + 2);
          BOOL v13 = *(void *)v12 == (void)v5;
          int v5 = v12;
        }
        while (!v13);
      }
      int v5 = v12;
    }
    while (v12 != (SystemDeterminationManager *)((char *)this + 112));
  }
}

void sub_223B058C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleEmergencyCallInProgress_sync(SystemDeterminationManager *this, int a2)
{
}

void SystemDeterminationManager::handleDataLowPowerModeTransition_sync(SystemDeterminationManager *this, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315138;
    uint64_t v11 = asStringBool();
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I LPM: enabled = %s", (uint8_t *)&v10, 0xCu);
  }
  int v5 = (char *)*((void *)this + 13);
  uint64_t v6 = (char *)this + 112;
  if (v5 != v6)
  {
    do
    {
      (*(void (**)(void, uint64_t))(**((void **)v5 + 7) + 472))(*((void *)v5 + 7), a2);
      uint64_t v7 = (char *)*((void *)v5 + 1);
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (char *)*((void *)v5 + 2);
          BOOL v9 = *(void *)v8 == (void)v5;
          int v5 = v8;
        }
        while (!v9);
      }
      int v5 = v8;
    }
    while (v8 != v6);
  }
}

void non-virtual thunk to'SystemDeterminationManager::handleDataLowPowerModeTransition_sync(SystemDeterminationManager *this, uint64_t a2)
{
}

uint64_t SystemDeterminationManager::resetFatalActivationBlockers(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 80));
  uint64_t v11 = ServiceMap;
  unint64_t v12 = *(void *)(MEMORY[0x263F03578] + 8);
  if ((v12 & 0x8000000000000000) != 0)
  {
    BOOL v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      unint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v27 = v12;
  uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v11[1].__m_.__sig, &v27);
  if (v16)
  {
    uint64_t v18 = v16[3];
    BOOL v17 = (std::__shared_weak_count *)v16[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      char v19 = 0;
      if (!v18) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::mutex::unlock(v11);
  BOOL v17 = 0;
  char v19 = 1;
  if (!v18) {
    goto LABEL_15;
  }
LABEL_10:
  std::string __p = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::vector<DataContextType>::__init_with_size[abi:ne180100]<DataContextType*,DataContextType*>(&__p, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v18 + 384))(v18, a2, a3, a4, 17, &__p);
  if (__p)
  {
    uint64_t v25 = __p;
    operator delete(__p);
  }
  if (a2 == 1)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    std::vector<DataContextType>::__init_with_size[abi:ne180100]<DataContextType*,DataContextType*>(&v21, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v18 + 384))(v18, 1, a3, a4, 26, &v21);
    if (v21)
    {
      uint64_t v22 = v21;
      operator delete(v21);
    }
  }
LABEL_15:
  if ((v19 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  return SystemDeterminationManager::clearBackOff(a1);
}

void sub_223B05C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if ((v15 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SystemDeterminationManager::clearBackOff(uint64_t a1)
{
  uint64_t v9 = 0;
  int v10 = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  SystemDeterminationManager::getConnHelper_sync(a1, &__p, &v9);
  if (v8 < 0) {
    operator delete(__p);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v4 = v9;
  if (v9) {
    unsigned __int8 v1 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 72))(v9);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return (v4 != 0) & v1;
}

void sub_223B05D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  char v19 = *(std::__shared_weak_count **)(v17 - 24);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::getConnHelper_sync(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  int v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, a2);
  if ((void *)(a1 + 112) != v5)
  {
    uint64_t v7 = v5[7];
    uint64_t v6 = (std::__shared_weak_count *)v5[8];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v7 + 64))(&v10, v7);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 120))(v10) != 3)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 128))(v7);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        int v8 = 0;
        if (!v6)
        {
LABEL_10:
          if (!v8) {
            return;
          }
          goto LABEL_11;
        }
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        goto LABEL_10;
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
    int v8 = 1;
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v10) = 0;
    _os_log_error_impl(&dword_223AF3000, v9, OS_LOG_TYPE_ERROR, "no valid Current Connectivity Helper.", (uint8_t *)&v10, 2u);
  }
  *a3 = 0;
  a3[1] = 0;
}

void sub_223B05EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::handleRadioDisabled_sync(SystemDeterminationManager *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_223AF3000, v2, OS_LOG_TYPE_DEFAULT, "#I RadioDisabled", buf, 2u);
  }
  (*(void (**)(void))(**((void **)this + 23) + 32))(*((void *)this + 23));
  uint64_t v3 = (SystemDeterminationManager *)*((void *)this + 13);
  if (v3 != (SystemDeterminationManager *)((char *)this + 112))
  {
    do
    {
      *(void *)long long buf = 0;
      uint64_t v21 = 0;
      (*(void (**)(uint8_t *__return_ptr))(**((void **)v3 + 7) + 64))(buf);
      if ((unint64_t)(*(uint64_t (**)(void))(**(void **)buf + 400))() >> 32)
      {
        uint64_t v4 = *((void *)this + 5);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I RadioDisabled: Do not de-register since we are not using Cellular as transport", v18, 2u);
        }
      }
      else
      {
        (*(void (**)(void, const char *))(**((void **)v3 + 7) + 304))(*((void *)v3 + 7), "Radio Disabled");
        (*(void (**)(void, uint64_t))(**((void **)v3 + 7) + 192))(*((void *)v3 + 7), 1);
      }
      int v5 = (std::__shared_weak_count *)*((void *)this + 11);
      *(void *)uint64_t v18 = *((void *)this + 10);
      char v19 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v6 = PersonalityIDToSimSlot();
      uint64_t v7 = operator new(4uLL);
      *uint64_t v7 = 0;
      uint64_t v16 = v7 + 1;
      uint64_t v17 = v7 + 1;
      char v15 = v7;
      SystemDeterminationManager::resetFatalActivationBlockers((uint64_t)this, v6, (uint64_t)"RadioDisabled", 1, (uint64_t)&v15);
      uint64_t v16 = v7;
      operator delete(v7);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      (*(void (**)(void))(**((void **)v3 + 7) + 280))(*((void *)v3 + 7));
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      int v8 = (SystemDeterminationManager *)*((void *)v3 + 1);
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          int v8 = *(SystemDeterminationManager **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (SystemDeterminationManager *)*((void *)v3 + 2);
          BOOL v10 = *(void *)v9 == (void)v3;
          uint64_t v3 = v9;
        }
        while (!v10);
      }
      uint64_t v3 = v9;
    }
    while (v9 != (SystemDeterminationManager *)((char *)this + 112));
  }
  uint64_t v11 = (SystemDeterminationManager *)*((void *)this + 16);
  if (v11 != (SystemDeterminationManager *)((char *)this + 136))
  {
    do
    {
      *(void *)long long buf = 0;
      uint64_t v21 = 0;
      (*(void (**)(uint8_t *__return_ptr))(**((void **)v11 + 7) + 64))(buf);
      if ((unint64_t)(*(uint64_t (**)(void))(**(void **)buf + 400))() >> 32)
      {
        unint64_t v12 = *((void *)this + 5);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I RadioDisabled: Do not de-register since we are not using Cellular as transport", v18, 2u);
        }
      }
      else
      {
        (*(void (**)(void, uint64_t))(**((void **)v11 + 7) + 192))(*((void *)v11 + 7), 1);
      }
      (*(void (**)(void))(**((void **)v11 + 7) + 280))(*((void *)v11 + 7));
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      BOOL v13 = (SystemDeterminationManager *)*((void *)v11 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          BOOL v13 = *(SystemDeterminationManager **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (SystemDeterminationManager *)*((void *)v11 + 2);
          BOOL v10 = *(void *)v14 == (void)v11;
          uint64_t v11 = v14;
        }
        while (!v10);
      }
      uint64_t v11 = v14;
    }
    while (v14 != (SystemDeterminationManager *)((char *)this + 136));
  }
}

void sub_223B06358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<DataContextType>::vector[abi:ne180100](void *a1, const void *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<DataContextType>::__vallocate[abi:ne180100](a1, a3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_223B0640C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleRadioDisabled_sync(SystemDeterminationManager *this)
{
}

void SystemDeterminationManager::handleRadioEnabled_sync(SystemDeterminationManager *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v11[0] = 0;
    _os_log_impl(&dword_223AF3000, v2, OS_LOG_TYPE_DEFAULT, "#I RadioEnabled", (uint8_t *)v11, 2u);
  }
  uint64_t v3 = (SystemDeterminationManager *)*((void *)this + 13);
  if (v3 != (SystemDeterminationManager *)((char *)this + 112))
  {
    do
    {
      (*(void (**)(void))(**((void **)v3 + 7) + 288))(*((void *)v3 + 7));
      uint64_t v4 = (SystemDeterminationManager *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          int v5 = v4;
          uint64_t v4 = *(SystemDeterminationManager **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          int v5 = (SystemDeterminationManager *)*((void *)v3 + 2);
          BOOL v6 = *(void *)v5 == (void)v3;
          uint64_t v3 = v5;
        }
        while (!v6);
      }
      uint64_t v3 = v5;
    }
    while (v5 != (SystemDeterminationManager *)((char *)this + 112));
  }
  uint64_t v7 = (char *)*((void *)this + 16);
  int v8 = (char *)this + 136;
  if (v7 != v8)
  {
    do
    {
      (*(void (**)(void))(**((void **)v7 + 7) + 288))(*((void *)v7 + 7));
      uint64_t v9 = (char *)*((void *)v7 + 1);
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          uint64_t v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (char *)*((void *)v7 + 2);
          BOOL v6 = *(void *)v10 == (void)v7;
          uint64_t v7 = v10;
        }
        while (!v6);
      }
      uint64_t v7 = v10;
    }
    while (v10 != v8);
  }
}

void non-virtual thunk to'SystemDeterminationManager::handleRadioEnabled_sync(SystemDeterminationManager *this)
{
}

void SystemDeterminationManager::handleCallActive_sync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(a1 + 88);
  *(void *)long long buf = *(void *)(a1 + 80);
  *(void *)&uint8_t buf[8] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  char v11 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v11)
  {
    unint64_t v12 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, (void *)a2);
    if ((void *)(a1 + 112) == v12)
    {
      BOOL v13 = 0;
    }
    else
    {
      uint64_t v14 = v12[7];
      BOOL v13 = (std::__shared_weak_count *)v12[8];
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v14)
      {
        uint64_t v30 = 0;
        long long v31 = 0;
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v14 + 64))(&v30, v14);
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 72))(v30);
        uint64_t v16 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = asStringBool();
          uint64_t v18 = asStringBool();
          uint64_t v19 = asString();
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = v17;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v18;
          __int16 v33 = 2080;
          uint64_t v34 = v19;
          _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I CallActive: Voice Call started. VoIP: %s, CS: %s, Type: %s", buf, 0x20u);
        }
        if ((a5 & 0xFFFFFFFE) == 2) {
          *(void *)(*(void *)(a1 + 168) + 8) = v14;
        }
        if (!*(unsigned char *)(a1 + 288)) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 448))(v14, a3, a4, a5);
        }
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
LABEL_39:
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        return;
      }
    }
    uint64_t v25 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(unsigned __int8 *)(a2 + 23);
      BOOL v27 = (v26 & 0x80u) != 0;
      if ((v26 & 0x80u) != 0) {
        uint64_t v26 = *(void *)(a2 + 8);
      }
      if (v27) {
        uint64_t v28 = *(const char **)a2;
      }
      else {
        uint64_t v28 = (const char *)a2;
      }
      if (v26) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = "<invalid>";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v29;
      _os_log_impl(&dword_223AF3000, v25, OS_LOG_TYPE_DEFAULT, "#N CallActive: No instance for %s. Bailing...", buf, 0xCu);
    }
    goto LABEL_39;
  }
  uint64_t v20 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    uint64_t v21 = *(unsigned __int8 *)(a2 + 23);
    BOOL v22 = (v21 & 0x80u) != 0;
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(a2 + 8);
    }
    if (v22) {
      uint64_t v23 = *(const char **)a2;
    }
    else {
      uint64_t v23 = (const char *)a2;
    }
    if (v21) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v24;
    _os_log_error_impl(&dword_223AF3000, v20, OS_LOG_TYPE_ERROR, "CallActive: Unknown Personality: %s", buf, 0xCu);
  }
}

void sub_223B068DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void *SystemDeterminationManager::getImsController_sync@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, a2);
  if ((void *)(a1 + 112) == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = result[8];
    *a3 = result[7];
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void non-virtual thunk to'SystemDeterminationManager::handleCallActive_sync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void SystemDeterminationManager::handleCallInactive_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 88);
  *(void *)long long buf = *(void *)(a1 + 80);
  *(void *)&uint8_t buf[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v7)
  {
    int v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, (void *)a2);
    if ((void *)(a1 + 112) == v8)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v10 = v8[7];
      uint64_t v9 = (std::__shared_weak_count *)v8[8];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v10)
      {
        *(_OWORD *)long long buf = 0uLL;
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v10 + 64))(buf, v10);
        uint64_t v11 = (*(uint64_t (**)(void))(**(void **)buf + 72))(*(void *)buf);
        unint64_t v12 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v23 = 136315138;
          uint64_t v24 = asStringBool();
          _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I Voice Call ended. VoIP: %s", (uint8_t *)&v23, 0xCu);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 456))(v10, a3);
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
LABEL_35:
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        return;
      }
    }
    uint64_t v18 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(unsigned __int8 *)(a2 + 23);
      BOOL v20 = (v19 & 0x80u) != 0;
      if ((v19 & 0x80u) != 0) {
        uint64_t v19 = *(void *)(a2 + 8);
      }
      if (v20) {
        uint64_t v21 = *(const char **)a2;
      }
      else {
        uint64_t v21 = (const char *)a2;
      }
      if (v19) {
        BOOL v22 = v21;
      }
      else {
        BOOL v22 = "<invalid>";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl(&dword_223AF3000, v18, OS_LOG_TYPE_DEFAULT, "#N CallInactive: No instance for %s. Bailing...", buf, 0xCu);
    }
    goto LABEL_35;
  }
  BOOL v13 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
    BOOL v15 = (v14 & 0x80u) != 0;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(a2 + 8);
    }
    if (v15) {
      uint64_t v16 = *(const char **)a2;
    }
    else {
      uint64_t v16 = (const char *)a2;
    }
    if (v14) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_error_impl(&dword_223AF3000, v13, OS_LOG_TYPE_ERROR, "CallInactive: Unknown Personality: %s", buf, 0xCu);
  }
}

void sub_223B06C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleCallInactive_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void SystemDeterminationManager::handleSimRefresh_sync(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v4 = a4;
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v24 = a4;
  int v8 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v23 = 0;
  uint64_t v9 = *(void *)(a1 + 88);
  *(void *)long long buf = *(void *)(a1 + 80);
  *(void *)&uint8_t buf[8] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v10 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, __p);
  if ((void *)(a1 + 112) == v10)
  {
    uint64_t v11 = 0;
LABEL_15:
    uint64_t v16 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#N SimRefresh: No instance found. Bailing...", buf, 2u);
    }
    goto LABEL_19;
  }
  uint64_t v12 = v10[7];
  uint64_t v11 = (std::__shared_weak_count *)v10[8];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12) {
    goto LABEL_15;
  }
  BOOL v13 = *v8;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = subscriber::asString();
    uint64_t v15 = subscriber::asString();
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v15;
    _os_log_impl(&dword_223AF3000, v13, OS_LOG_TYPE_DEFAULT, "#I SIM refresh: stage: %s for card %s", buf, 0x16u);
    int v4 = v24;
  }
  if (v4 == 2)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 536))(v12);
LABEL_13:
    (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v12 + 520))(v12, "handleSimRefresh", 3);
    goto LABEL_19;
  }
  if (a3 == 3)
  {
    (*(void (**)(uint64_t, const char *))(*(void *)v12 + 304))(v12, "iSIM Refresh");
    (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)v12 + 528))(v12, "SimRefresh", 3, 0);
    (*(void (**)(uint64_t))(*(void *)v12 + 248))(v12);
    uint64_t v17 = operator new(8uLL);
    *uint64_t v17 = 0x100000000;
    BOOL v20 = v17 + 1;
    uint64_t v21 = v17 + 1;
    uint64_t v19 = v17;
    int v18 = SystemDeterminationManager::resetFatalActivationBlockers(a1, a2, (uint64_t)"SimRefresh", 0, (uint64_t)&v19);
    BOOL v20 = v17;
    operator delete(v17);
    if (v18) {
      goto LABEL_13;
    }
  }
LABEL_19:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
}

void sub_223B06FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  operator delete(v22);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SystemDeterminationManager::handleSimRefresh_sync(uint64_t a1, uint64_t a2, int a3, int a4)
{
}

void SystemDeterminationManager::handleSimsChanged_sync(SystemDeterminationManager *this, const BasicSimInfo *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(_DWORD *)a2;
  int v5 = (NSObject **)(*(uint64_t (**)(void, void))(**((void **)this + 9) + 16))(*((void *)this + 9), *(unsigned int *)a2);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 11);
  std::string __p = (void *)*((void *)this + 10);
  uint64_t v35 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int isValidSimSlot = subscriber::isValidSimSlot();
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (isValidSimSlot) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = 1;
  }
  std::string __p = 0;
  uint64_t v35 = 0;
  uint64_t v10 = *((void *)this + 10);
  uint64_t v9 = *((void *)this + 11);
  uint64_t v36 = 0;
  *(void *)long long buf = v10;
  *(void *)&uint8_t buf[8] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v11 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)this + 104, &__p);
  if ((void *)((char *)this + 112) == v11)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v13 = v11[7];
    uint64_t v12 = (std::__shared_weak_count *)v11[8];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v13)
    {
      uint64_t v32 = 0;
      __int16 v33 = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v13 + 64))(&v32, v13);
      int shouldClearSimInfo_sync = SystemDeterminationManager::shouldClearSimInfo_sync(this);
      uint64_t v15 = *v5;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = subscriber::asString();
        uint64_t v17 = asStringBool();
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v17;
        _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I SimsChanged: state: %s, clearSimInfo: %s", buf, 0x16u);
      }
      if (shouldClearSimInfo_sync)
      {
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v32 + 528))(buf);
        sd::UEInfo::IsimInfo::markSimPresent();
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v32 + 528))(buf);
        sd::UEInfo::DeviceInfo::clear((sd::UEInfo::DeviceInfo *)(*(void *)buf + 104));
        int v18 = *(sd **)&buf[8];
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (sd::IsDataConnectionImSupportedByDevice(v18))
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v32 + 744))(v32, 3))
          {
            (*(void (**)(uint64_t, const char *))(*(void *)v13 + 304))(v13, "SIM not present");
            (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)v13 + 528))(v13, "SimsChanged", 3, 0);
          }
          (*(void (**)(uint64_t))(*(void *)v13 + 248))(v13);
          uint64_t v19 = operator new(8uLL);
          *uint64_t v19 = 0x100000000;
          uint64_t v30 = v19 + 1;
          long long v31 = v19 + 1;
          uint64_t v29 = v19;
          int v20 = SystemDeterminationManager::resetFatalActivationBlockers((uint64_t)this, v8, (uint64_t)"SimsChanged", 0, (uint64_t)&v29);
          uint64_t v30 = v19;
          operator delete(v19);
          if (v20) {
            (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v13 + 520))(v13, "SimsChanged", 3);
          }
        }
        (*(void (**)(uint64_t))(*(void *)v13 + 536))(v13);
        uint64_t v21 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)this + 128, &__p);
        if ((void *)((char *)this + 136) != v21)
        {
          uint64_t v23 = v21[7];
          BOOL v22 = (std::__shared_weak_count *)v21[8];
          if (v22) {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v23)
          {
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = 0;
            (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v23 + 64))(buf, v23);
            (*(void (**)(uint64_t *__return_ptr))(**(void **)buf + 528))(&v27);
            sd::UEInfo::IsimInfo::markSimPresent();
            if (v28) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v28);
            }
            (*(void (**)(uint64_t *__return_ptr))(**(void **)buf + 528))(&v27);
            sd::UEInfo::DeviceInfo::clear((sd::UEInfo::DeviceInfo *)(v27 + 104));
            if (v28) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v28);
            }
            if ((*(unsigned int (**)(void, uint64_t))(**(void **)buf + 744))(*(void *)buf, 3)) {
              (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))(*(void *)v23 + 528))(v23, "SimsChanged", 3, 1);
            }
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
          }
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
        }
      }
      else
      {
        if (subscriber::isSimReady())
        {
          if ((uint64_t v26 = (capabilities::ct *)(*(uint64_t (**)(uint64_t, const BasicSimInfo *))(*(void *)v32 + 536))(v32, a2), capabilities::ct::getRadioModuleType(v26) == 2)&& ((*(uint64_t (**)(uint64_t))(*(void *)v32 + 608))(v32) & 1) != 0|| ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v32 + 752))(v32, 3) & 1) == 0)
          {
            SystemDeterminationManager::evaluateSimFiles_sync(this, (uint64_t)&__p);
          }
        }
        SystemDeterminationManager::checkBasebandAssertionIfInWiFiCallingOnlyMode_sync((uint64_t)this, &v32);
      }
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      goto LABEL_53;
    }
  }
  int v24 = *((void *)this + 5);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = subscriber::asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v25;
    _os_log_impl(&dword_223AF3000, v24, OS_LOG_TYPE_DEFAULT, "#N SimsChanged: No instance for %s. Bailing...", buf, 0xCu);
  }
LABEL_53:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(__p);
  }
}

void sub_223B07760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SystemDeterminationManager::shouldClearSimInfo_sync(SystemDeterminationManager *a1)
{
  uint64_t v2 = (capabilities::ct *)(*(uint64_t (**)(void *))(**((void **)a1 + 19) + 280))(*((void **)a1 + 19));
  if (capabilities::ct::getBasebandBootStrategy(v2) == 2
    && SystemDeterminationManager::isInWiFiCallingOnlyMode_sync(a1))
  {
    return MEMORY[0x270EE8C80](v2);
  }
  else if (subscriber::isSimPresent())
  {
    return MEMORY[0x270EE8CC0](v2);
  }
  else
  {
    return 1;
  }
}

void *SystemDeterminationManager::getLazuliController_sync@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 128, a2);
  if ((void *)(a1 + 136) == result)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v6 = result[8];
    *a3 = result[7];
    a3[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

BOOL SystemDeterminationManager::isDeviceWithBaseband_sync(SystemDeterminationManager *this)
{
  return capabilities::ct::getRadioModuleType(this) == 2;
}

uint64_t SystemDeterminationManager::evaluateSimFiles_sync(void *a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[11];
  *(void *)long long v37 = a1[10];
  *(void *)&v37[8] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  isSimPersonality = (sd *)sd::isSimPersonality();
  if (!isSimPersonality)
  {
    if (*(void *)&v37[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v37[8]);
    }
    goto LABEL_40;
  }
  char IsDataConnectionImSupportedByDevice = sd::IsDataConnectionImSupportedByDevice(isSimPersonality);
  if (*(void *)&v37[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v37[8]);
  }
  if ((IsDataConnectionImSupportedByDevice & 1) == 0)
  {
LABEL_40:
    BOOL v22 = a1[5];
    uint64_t v13 = 0;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      return v13;
    }
    *(_WORD *)long long v37 = 0;
    _os_log_impl(&dword_223AF3000, v22, OS_LOG_TYPE_DEFAULT, "#I SimFiles: Ignoring because either the personality is Thumper or the device does not support DataConnectionIM", v37, 2u);
    return 0;
  }
  uint64_t v7 = a1[11];
  *(void *)long long v37 = a1[10];
  *(void *)&v37[8] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  char v8 = isPresent();
  if (*(void *)&v37[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v37[8]);
  }
  if ((v8 & 1) == 0)
  {
    uint64_t v23 = a1[5];
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = *(unsigned __int8 *)(a2 + 23);
      BOOL v31 = (v30 & 0x80u) != 0;
      if ((v30 & 0x80u) != 0) {
        uint64_t v30 = *(void *)(a2 + 8);
      }
      if (v31) {
        uint64_t v32 = *(const char **)a2;
      }
      else {
        uint64_t v32 = (const char *)a2;
      }
      if (v30) {
        __int16 v33 = v32;
      }
      else {
        __int16 v33 = "<invalid>";
      }
      *(_DWORD *)long long v37 = 136315138;
      *(void *)&v37[4] = v33;
      _os_log_error_impl(&dword_223AF3000, v23, OS_LOG_TYPE_ERROR, "SimFiles: Unknown Personality: %s", v37, 0xCu);
    }
    return 0;
  }
  uint64_t v9 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 13), (void *)a2);
  if (a1 + 14 == v9)
  {
    uint64_t v10 = 0;
LABEL_46:
    uint64_t v25 = a1[5];
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(unsigned __int8 *)(a2 + 23);
      BOOL v27 = (v26 & 0x80u) != 0;
      if ((v26 & 0x80u) != 0) {
        uint64_t v26 = *(void *)(a2 + 8);
      }
      if (v27) {
        uint64_t v28 = *(const char **)a2;
      }
      else {
        uint64_t v28 = (const char *)a2;
      }
      if (v26) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = "<invalid>";
      }
      *(_DWORD *)long long v37 = 136315138;
      *(void *)&v37[4] = v29;
      _os_log_impl(&dword_223AF3000, v25, OS_LOG_TYPE_DEFAULT, "#N SimFiles: No instance for %s. Bailing...", v37, 0xCu);
    }
    uint64_t v13 = 0;
    goto LABEL_62;
  }
  uint64_t v11 = v9[7];
  uint64_t v10 = (std::__shared_weak_count *)v9[8];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v11) {
    goto LABEL_46;
  }
  *(_OWORD *)long long v37 = 0uLL;
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v11 + 64))(v37, v11);
  int v12 = (*(uint64_t (**)(void))(**(void **)v37 + 704))(*(void *)v37);
  if (v12)
  {
    if (v12 == 1)
    {
      uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)v37 + 736))(*(void *)v37, 3);
      if (v13)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 360))(v11);
        (*(void (**)(uint64_t))(*(void *)v11 + 248))(v11);
        uint64_t v14 = a1[11];
        *(void *)&long long buf = a1[10];
        *((void *)&buf + 1) = v14;
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = PersonalityIDToSimSlot();
        uint64_t v35 = 0x100000000;
        std::vector<DataContextType>::vector[abi:ne180100](__p, &v35, 2uLL);
        SystemDeterminationManager::resetFatalActivationBlockers((uint64_t)a1, v15, (uint64_t)"evaluateSimFiles", 0, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*((void *)&buf + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
        }
        (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v11 + 520))(v11, "evaluateSimFiles", 3);
      }
      uint64_t v16 = a1[5];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
        BOOL v18 = (v17 & 0x80u) != 0;
        if ((v17 & 0x80u) != 0) {
          uint64_t v17 = *(void *)(a2 + 8);
        }
        if (v18) {
          uint64_t v19 = *(const char **)a2;
        }
        else {
          uint64_t v19 = (const char *)a2;
        }
        if (v17) {
          int v20 = v19;
        }
        else {
          int v20 = "<invalid>";
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v20;
        _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I SimFiles: sending SIM ims_info_ready for %s", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v21 = a1[19];
      (*(void (**)(long long *__return_ptr))(**(void **)v37 + 696))(&buf);
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)v21 + 88))(v21, a2, buf);
      if (*((void *)&buf + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
      }
      goto LABEL_60;
    }
  }
  else if ((*(unsigned int (**)(void, uint64_t))(**(void **)v37 + 744))(*(void *)v37, 3))
  {
    (*(void (**)(uint64_t, const char *))(*(void *)v11 + 304))(v11, "invalid SIM files");
    (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)v11 + 528))(v11, "evaluateSimFiles", 3, 0);
    uint64_t v13 = 1;
    goto LABEL_60;
  }
  uint64_t v13 = 0;
LABEL_60:
  if (*(void *)&v37[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v37[8]);
  }
LABEL_62:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v13;
}

void sub_223B07F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SystemDeterminationManager::checkBasebandAssertionIfInWiFiCallingOnlyMode_sync(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!SystemDeterminationManager::isInWiFiCallingOnlyMode_sync((SystemDeterminationManager *)a1) || !*a2)
  {
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v11) = 136315138;
      *(void *)((char *)&v11 + 4) = CSIBOOLAsString();
      _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I WiFiCalling-only mode: %s. Releasing baseband booted assertion", (uint8_t *)&v11, 0xCu);
    }
    goto LABEL_15;
  }
  (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 528))(&v11);
  int v4 = *(_DWORD *)v11;
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  int v5 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 752))(*a2, 3);
  if ((v5 & (v4 == 1)) == 1)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 528))(&v11);
    int v5 = sd::UEInfo::IsimInfo::valid((sd::UEInfo::IsimInfo *)v11);
    if (*((void *)&v11 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  if ((*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 752))(*a2, 12)
    && (v5 & (*(unsigned int (**)(void))(*(void *)*a2 + 632))(*a2) & 1) != 0)
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v4 == 1)
    {
      if (v7)
      {
        LOWORD(v11) = 0;
        char v8 = "#I WiFiCalling-only mode: true. ISIM and device info are available. Baseband booted assertion not needed and is released";
LABEL_19:
        _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v11, 2u);
      }
    }
    else if (v7)
    {
      LOWORD(v11) = 0;
      char v8 = "#I WiFiCalling-only mode: true. ISIM is not present and device info is available. Baseband booted assertion n"
           "ot needed and is released";
      goto LABEL_19;
    }
LABEL_15:
    (*(void (**)(void))(**(void **)(a1 + 152) + 312))(*(void *)(a1 + 152));
    return 0;
  }
  (*(void (**)(void))(**(void **)(a1 + 152) + 304))(*(void *)(a1 + 152));
  return 1;
}

void sub_223B082D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleSimsChanged_sync(SystemDeterminationManager *this, const BasicSimInfo *a2)
{
}

void SystemDeterminationManager::handleAccessControlClassChanged_sync(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v5 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v20 = 0;
  *(void *)&long long buf = v7;
  *((void *)&buf + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  if (*((void *)&buf + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
  }
  char v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, __p);
  if ((void *)(a1 + 112) == v8)
  {
    uint64_t v9 = 0;
LABEL_14:
    uint64_t v13 = *v5;
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
    uint64_t v14 = subscriber::asString();
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v14;
    uint64_t v15 = "#N AccessControlClass: change reported for %s - don't have a controller for it. Bailing...";
    uint64_t v16 = v13;
    uint32_t v17 = 12;
LABEL_18:
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&buf, v17);
    goto LABEL_19;
  }
  uint64_t v10 = v8[7];
  uint64_t v9 = (std::__shared_weak_count *)v8[8];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v10) {
    goto LABEL_14;
  }
  if (a3[1] - *a3 != 2)
  {
    BOOL v18 = *v5;
    if (!os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
    LOWORD(buf) = 0;
    uint64_t v15 = "#I AccessControlClass: invalid data received";
    uint64_t v16 = v18;
    uint32_t v17 = 2;
    goto LABEL_18;
  }
  uint64_t v11 = __rev16(*(unsigned __int16 *)*a3);
  uint64_t v12 = *v5;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v11;
    _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I AccessControlClass: received data: 0x%0x", (uint8_t *)&buf, 8u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 200))(v10, v11);
LABEL_19:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
}

void sub_223B0853C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleAccessControlClassChanged_sync(uint64_t a1, uint64_t a2, char **a3)
{
}

void SystemDeterminationManager::handleIsimFilesChanged_sync(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  uint64_t v7 = *v6;
  if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = asStringBool();
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I ISIM: files ready: %s", buf, 0xCu);
  }
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v23 = 0;
  uint64_t v8 = *(void *)(a1 + 88);
  *(void *)long long buf = *(void *)(a1 + 80);
  *(void *)&uint8_t buf[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v9 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, v22);
  if ((void *)(a1 + 112) == v9)
  {
    uint64_t v12 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
  }
  else
  {
    uint64_t v10 = v9;
    uint64_t v11 = v9[7];
    uint64_t v12 = (std::__shared_weak_count *)v10[8];
    uint64_t v20 = v11;
    uint64_t v21 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v11)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v13 = (capabilities::ct *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v11 + 64))(&v18);
      if (a3)
      {
        uint64_t v34 = 0;
        long long v32 = 0u;
        *(_OWORD *)std::string __p = 0u;
        *(_OWORD *)uint64_t v30 = 0u;
        *(_OWORD *)BOOL v31 = 0u;
        *(_OWORD *)uint64_t v28 = 0u;
        long long v29 = 0u;
        memset(v27, 0, sizeof(v27));
        *(_OWORD *)long long buf = 0u;
        *(_OWORD *)uint64_t v26 = 0u;
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v18 + 64))(v18)
          && (*(unsigned int (**)(void, uint64_t, uint8_t *))(**(void **)(a1 + 152) + 328))(*(void *)(a1 + 152), a2, buf))
        {
          (*(void (**)(uint64_t, uint8_t *))(*(void *)v18 + 536))(v18, buf);
        }
        SystemDeterminationManager::evaluateIsimFiles_sync(a1, &v20);
        if (SHIBYTE(v34) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v32) < 0) {
          operator delete(v31[1]);
        }
        if (SHIBYTE(v31[0]) < 0) {
          operator delete(v30[0]);
        }
        if (SHIBYTE(v29) < 0) {
          operator delete(v28[1]);
        }
        int v24 = (void **)v27 + 1;
        std::vector<subscriber::NpAppInfo>::__destroy_vector::operator()[abi:ne180100](&v24);
        if (v26[0])
        {
          v26[1] = v26[0];
          operator delete(v26[0]);
        }
      }
      else if (capabilities::ct::getBasebandBootStrategy(v13) == 2 {
             && SystemDeterminationManager::isInWiFiCallingOnlyMode_sync((SystemDeterminationManager *)a1))
      }
      {
        uint64_t v16 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I ISIM: Not clearing ISIM info", buf, 2u);
        }
      }
      else
      {
        uint32_t v17 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#I ISIM: Clearing cached ISIM files", buf, 2u);
        }
        (*(void (**)(uint8_t *__return_ptr))(*(void *)v18 + 528))(buf);
        sd::UEInfo::IsimInfo::clear(*(sd::UEInfo::IsimInfo **)buf);
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 744))(v18, 3);
        SystemDeterminationManager::evaluateSimFiles_sync((void *)a1, (uint64_t)v22);
      }
      SystemDeterminationManager::checkBasebandAssertionIfInWiFiCallingOnlyMode_sync(a1, &v18);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      goto LABEL_39;
    }
  }
  uint64_t v14 = *v6;
  if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = subscriber::asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#N ISIM: files change reported for %s - don't have instance for it. Bailing...", buf, 0xCu);
  }
LABEL_39:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
}

void sub_223B089EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::evaluateIsimFiles_sync(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 64))(&v24);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 72))(v24);
  int v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), v4);
  uint64_t v6 = (sd *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 544))(v24);
  if (v6)
  {
    if (sd::IsDataConnectionImSupportedByDevice(v6))
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)v24 + 528))(&buf);
      if (*(void *)(buf.__r_.__value_.__r.__words[0] + 80) == *(void *)(buf.__r_.__value_.__r.__words[0] + 88))
      {
        if (buf.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
        }
      }
      else
      {
        int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v24 + 736))(v24, 10);
        if (buf.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
        }
        if (v7) {
          (*(void (**)(void, const char *, uint64_t))(*(void *)*a2 + 520))(*a2, "handleIsimFilesChanged", 10);
        }
      }
      if (((*(uint64_t (**)(uint64_t))(*(void *)v24 + 304))(v24) & 1) == 0)
      {
        (*(void (**)(void, const char *))(*(void *)*a2 + 304))(*a2, "iSIM file changed");
        (*(void (**)(void, uint64_t))(*(void *)*a2 + 192))(*a2, 1);
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v24 + 56))(&buf);
      SystemDeterminationManager::evaluateSimFiles_sync((void *)a1, (uint64_t)&buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    uint64_t v8 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I ISIM: Received XSIM file update event but files didn't change", (uint8_t *)&buf, 2u);
      uint64_t v8 = *v5;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)v24 + 528))(&buf);
      uint64_t v9 = (std::string *)(buf.__r_.__value_.__r.__words[0] + 56);
      if (*(char *)(buf.__r_.__value_.__r.__words[0] + 79) < 0) {
        uint64_t v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v26 = 136315138;
      BOOL v27 = v9;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I ISIM: Domain - %s", v26, 0xCu);
      if (buf.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
      uint64_t v8 = *v5;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)v24 + 528))(&buf);
      uint64_t v10 = (std::string *)(buf.__r_.__value_.__r.__words[0] + 8);
      if (*(char *)(buf.__r_.__value_.__r.__words[0] + 31) < 0) {
        uint64_t v10 = (std::string *)v10->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)uint64_t v26 = 136315138;
      BOOL v27 = v10;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I ISIM: Private Identity - %s", v26, 0xCu);
      if (buf.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v24 + 528))(&buf);
    std::string::size_type v11 = buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    uint64_t v12 = *(long long **)(v11 + 32);
    for (i = *(long long **)(v11 + 40); v12 != i; uint64_t v12 = (long long *)((char *)v12 + 24))
    {
      memset(&buf, 0, sizeof(buf));
      if (*((char *)v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v12, *((void *)v12 + 1));
      }
      else
      {
        long long v14 = *v12;
        buf.__r_.__value_.__r.__words[2] = *((void *)v12 + 2);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v14;
      }
      uint64_t v15 = *v5;
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v26 = 136315138;
        BOOL v27 = p_buf;
        _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I ISIM: Public Identity - %s", v26, 0xCu);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v24 + 528))(&buf);
    std::string::size_type v17 = buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    uint64_t v18 = *(long long **)(v17 + 80);
    for (j = *(long long **)(v17 + 88); v18 != j; uint64_t v18 = (long long *)((char *)v18 + 24))
    {
      memset(&buf, 0, sizeof(buf));
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v18, *((void *)v18 + 1));
      }
      else
      {
        long long v20 = *v18;
        buf.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v20;
      }
      uint64_t v21 = *v5;
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v22 = &buf;
        }
        else {
          uint64_t v22 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v26 = 136315138;
        BOOL v27 = v22;
        _os_log_impl(&dword_223AF3000, v21, OS_LOG_TYPE_DEFAULT, "#I ISIM: Proxy - %s", v26, 0xCu);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_223B090E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void BasicSimInfo::~BasicSimInfo(void **this)
{
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v3 = this + 5;
  std::vector<subscriber::NpAppInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    operator delete(v2);
  }
}

BOOL SystemDeterminationManager::isSimInfoCachingSupported(SystemDeterminationManager *this)
{
  return capabilities::ct::getBasebandBootStrategy(this) == 2;
}

uint64_t SystemDeterminationManager::isInWiFiCallingOnlyMode_sync(SystemDeterminationManager *this)
{
  if (capabilities::ct::getBasebandBootStrategy(this) != 2) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 19);
  if (!v2
    || !(*(unsigned int (**)(uint64_t))(*(void *)v2 + 216))(v2)
    || ((*(uint64_t (**)(void))(**((void **)this + 19) + 264))(*((void *)this + 19)) & 1) != 0)
  {
    return 0;
  }
  uint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 19) + 208);

  return v4();
}

void non-virtual thunk to'SystemDeterminationManager::handleIsimFilesChanged_sync(uint64_t a1, uint64_t a2, int a3)
{
}

void SystemDeterminationManager::fetchImsCredentials(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)&long long block = a1[10];
  *((void *)&block + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*((void *)&block + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&block + 1));
  }
  if (v7)
  {
    uint64_t v15 = a1;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 0x40000000;
    v17[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_19fetchImsCredentialsERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
    v17[3] = &__block_descriptor_tmp_197;
    v17[4] = a1 + 1;
    v17[5] = &v15;
    uint64_t v18 = v17;
    uint64_t v9 = a1[3];
    uint64_t v10 = MEMORY[0x263EF8330];
    if (a1[4])
    {
      *a3 = 0;
      a3[1] = 0;
      *(void *)&long long block = v10;
      *((void *)&block + 1) = 0x40000000;
      long long v20 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__110shared_ptrI10t_ims_infoEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      uint64_t v21 = &__block_descriptor_tmp_199;
      uint64_t v22 = a3;
      uint64_t v23 = &v18;
      dispatch_async_and_wait(v9, &block);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      *(void *)&long long block = v10;
      *((void *)&block + 1) = 0x40000000;
      long long v20 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__110shared_ptrI10t_ims_infoEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      uint64_t v21 = &__block_descriptor_tmp_198;
      uint64_t v22 = a3;
      uint64_t v23 = &v18;
      dispatch_sync(v9, &block);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      BOOL v12 = (v11 & 0x80u) != 0;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      if (v12) {
        uint64_t v13 = *(const std::string::value_type **)a2;
      }
      else {
        uint64_t v13 = (const std::string::value_type *)a2;
      }
      if (v11) {
        long long v14 = v13;
      }
      else {
        long long v14 = "<invalid>";
      }
      LODWORD(block) = 136315138;
      *(void *)((char *)&block + 4) = v14;
      _os_log_error_impl(&dword_223AF3000, v8, OS_LOG_TYPE_ERROR, "ImsCredentials: Unknown Personality: %s", (uint8_t *)&block, 0xCu);
    }
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_223B0952C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void SystemDeterminationManager::subscriberMccMncComputed_sync(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  char v7 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  uint64_t v8 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = (uint64_t *)*a3;
    }
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v10 = a4;
    }
    else {
      uint64_t v10 = (uint64_t *)*a4;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v10;
    _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I MCC/MNC: MCC: %s, MNC: %s", buf, 0x16u);
  }
  memset(buf, 0, sizeof(buf));
  uint64_t v11 = *(void *)(a1 + 88);
  *(void *)&long long v25 = *(void *)(a1 + 80);
  *((void *)&v25 + 1) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  if (*((void *)&v25 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
  }
  BOOL v12 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, buf);
  if ((void *)(a1 + 112) == v12)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v13 = v12;
    uint64_t v14 = v12[7];
    uint64_t v15 = (std::__shared_weak_count *)v13[8];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v14)
    {
      long long v25 = 0uLL;
      uint64_t v16 = (capabilities::ct *)(*(void *(**)(long long *__return_ptr))(*(void *)v14 + 64))(&v25);
      if (capabilities::ct::getRadioModuleType(v16) == 2
        && (*(unsigned int (**)(void, uint64_t *, uint64_t *))(*(void *)v25 + 616))(v25, a3, a4))
      {
        SystemDeterminationManager::evaluateSimFiles_sync((void *)a1, (uint64_t)buf);
      }
      std::string::size_type v17 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, buf);
      if ((void *)(a1 + 112) != v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = v17[7];
        long long v20 = (std::__shared_weak_count *)v18[8];
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v19)
        {
          uint64_t v23 = 0;
          uint64_t v24 = 0;
          uint64_t v21 = (capabilities::ct *)(*(void *(**)(uint64_t *__return_ptr))(*(void *)v19 + 64))(&v23);
          if (capabilities::ct::getRadioModuleType(v21) == 2) {
            (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v23 + 616))(v23, a3, a4);
          }
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
        }
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
      }
      SystemDeterminationManager::checkBasebandAssertionIfInWiFiCallingOnlyMode_sync(a1, &v25);
      if (*((void *)&v25 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v25 + 1));
      }
      goto LABEL_35;
    }
  }
  uint64_t v22 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v25) = 136315138;
    *(void *)((char *)&v25 + 4) = subscriber::asString();
    _os_log_impl(&dword_223AF3000, v22, OS_LOG_TYPE_DEFAULT, "#N MCC/MNC: change reported for %s - don't have instance for it. Bailing...", (uint8_t *)&v25, 0xCu);
  }
LABEL_35:
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_223B098A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::subscriberMccMncComputed_sync(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
}

void SystemDeterminationManager::handleImsDownCommand_sync(uint64_t a1, unsigned int *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  unsigned int v3 = a2[1];
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), *a2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = asStringBool();
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I bringDownIms requested: tmpImsShutdown = %s", buf, 0xCu);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  uint64_t v6 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, buf);
  if ((void *)(a1 + 112) == v6)
  {
    uint64_t v8 = 0;
    char v7 = 0;
  }
  else
  {
    uint64_t v8 = v6[7];
    char v7 = (std::__shared_weak_count *)v6[8];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v8)
  {
    if (v3 == 1)
    {
      *(_OWORD *)std::string buf = 0uLL;
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v8 + 72))(buf, v8);
      if (*(void *)buf && (*(unsigned int (**)(void))(**(void **)buf + 352))(*(void *)buf)) {
        (*(void (**)(uint64_t, const char *))(*(void *)v8 + 312))(v8, "Transport down");
      }
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
    (*(void (**)(uint64_t, void))(*(void *)v8 + 184))(v8, 0);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_223B09B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleImsDownCommand_sync(uint64_t a1, unsigned int *a2)
{
}

void SystemDeterminationManager::handleNewServingNetwork_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 88);
  v12[3] = *(void *)(a1 + 80);
  uint64_t v13 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  int v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, __p);
  if ((void *)(a1 + 112) == v5)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = v5[7];
    uint64_t v6 = (std::__shared_weak_count *)v5[8];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v15 < 0) {
    operator delete(*(void **)__p);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 256))(v7);
    uint64_t v8 = operator new(8uLL);
    void *v8 = 0x100000000;
    v12[1] = v8 + 1;
    v12[2] = v8 + 1;
    v12[0] = v8;
    int v9 = SystemDeterminationManager::resetFatalActivationBlockers(a1, a2, (uint64_t)"NewServingNetwork", 0, (uint64_t)v12);
    operator delete(v8);
    if (v9) {
      (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v7 + 520))(v7, "handleNewServingNetwork", 5);
    }
  }
  else
  {
    uint64_t v10 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a2);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = subscriber::asString();
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v11;
      _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#N New serving network reported for %s - don't have a controller for it. Bailing...", __p, 0xCu);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_223B09DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleNewServingNetwork_sync(uint64_t a1, uint64_t a2)
{
}

void SystemDeterminationManager::handleSubscriptionChanged_sync(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  unsigned int v3 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I SubscriptionChange: received indication from Baseband", buf, 2u);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  int v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, buf);
  if ((void *)(a1 + 112) == v5)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = v5[7];
    uint64_t v6 = (std::__shared_weak_count *)v5[8];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v12 < 0) {
    operator delete(*(void **)buf);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 432))(v7);
  }
  else
  {
    uint64_t v8 = *v2;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = subscriber::asString();
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#N SubscriptionChange: reported for %s - don't have a model for it. Bailing...", buf, 0xCu);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_223B0A018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleSubscriptionChanged_sync(uint64_t a1)
{
}

void SystemDeterminationManager::handleCarrierBundleChange_sync(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v31 = 0;
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)std::string buf = *(void *)(a1 + 80);
  *(void *)&uint8_t buf[8] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, v30);
  if ((void *)(a1 + 112) == v8)
  {
    uint64_t v9 = 0;
    uint64_t v28 = 0;
    long long v29 = 0;
  }
  else
  {
    uint64_t v10 = v8[7];
    uint64_t v9 = (std::__shared_weak_count *)v8[8];
    uint64_t v28 = v10;
    long long v29 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v10)
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v10 + 64))(&v26, v10);
      uint64_t v11 = *v6;
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = asString();
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I CarrierBundleChange: type=%s", buf, 0xCu);
      }
      unsigned __int8 v13 = a3 - 1;
      if ((a3 - 1) <= 1u)
      {
        (*(void (**)(uint8_t *__return_ptr))(*(void *)v26 + 528))(buf);
        sd::UEInfo::clear(*(sd::UEInfo **)buf);
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 200))(v26, 1);
        uint64_t v42 = 0;
        long long v40 = 0u;
        *(_OWORD *)std::string __p = 0u;
        *(_OWORD *)uint64_t v38 = 0u;
        *(_OWORD *)uint64_t v39 = 0u;
        *(_OWORD *)uint64_t v36 = 0u;
        long long v37 = 0u;
        memset(v35, 0, sizeof(v35));
        *(_OWORD *)std::string buf = 0u;
        *(_OWORD *)uint64_t v34 = 0u;
        if ((*(unsigned int (**)(void))(**(void **)(a1 + 152) + 328))()
          && (*(unsigned int (**)(uint64_t, uint8_t *))(*(void *)v26 + 536))(v26, buf)
          && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 368))(*(void *)(a1 + 152), a2))
        {
          (*(void (**)(uint64_t))(*(void *)v26 + 544))(v26);
        }
        if (SHIBYTE(v42) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v40) < 0) {
          operator delete(v39[1]);
        }
        if (SHIBYTE(v39[0]) < 0) {
          operator delete(v38[0]);
        }
        if (SHIBYTE(v37) < 0) {
          operator delete(v36[1]);
        }
        long long v32 = (void **)v35 + 1;
        std::vector<subscriber::NpAppInfo>::__destroy_vector::operator()[abi:ne180100](&v32);
        if (v34[0])
        {
          v34[1] = v34[0];
          operator delete(v34[0]);
        }
      }
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v26 + 88))(buf);
      char v14 = (*(uint64_t (**)(void))(**(void **)buf + 160))(*(void *)buf);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      char v15 = v14 ^ 1;
      if (v13 > 3u) {
        char v15 = 1;
      }
      if ((v15 & 1) == 0) {
        (*(void (**)(uint64_t))(*(void *)v10 + 360))(v10);
      }
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v26 + 88))(buf);
      uint64_t v16 = (*(uint64_t (**)(void))(**(void **)buf + 304))(*(void *)buf);
      int v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 112))(v10, v16);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 272))(v26);
      (*(void (**)(uint64_t))(*(void *)v26 + 712))(v26);
      if (v18 == (*(unsigned int (**)(uint64_t))(*(void *)v26 + 272))(v26))
      {
        if (!v17)
        {
LABEL_44:
          int v23 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 152) + 256))(*(void *)(a1 + 152), v30);
          SystemDeterminationManager::evaluateTTYMode(a1, &v28, v23);
          if (v13 <= 3u)
          {
            uint64_t v24 = *(void *)(a1 + 152);
            uint64_t v25 = SystemDeterminationManager::calculateBlocksCallsOverCS_sync(a1, a2, 0);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 496))(v24, a2, v25);
          }
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v19 = *v6;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(uint64_t))(*(void *)v26 + 272))(v26);
          uint64_t v20 = asStringBool();
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v20;
          _os_log_impl(&dword_223AF3000, v19, OS_LOG_TYPE_DEFAULT, "#I CarrierBundleChange: SMS over IMS in Non-VoLTE mode is %s", buf, 0xCu);
        }
      }
      (*(void (**)(uint64_t, void))(*(void *)v10 + 576))(v10, 0);
      goto LABEL_44;
    }
  }
  uint64_t v21 = *v6;
  if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = subscriber::asString();
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v22;
    _os_log_impl(&dword_223AF3000, v21, OS_LOG_TYPE_DEFAULT, "#N CarrierBundleChange: reported for %s - don't have a model for it. Bailing...", buf, 0xCu);
  }
LABEL_48:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[0]);
  }
}

void sub_223B0A784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::evaluateTTYMode(uint64_t a1, void *a2, int a3)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = asStringBool();
    _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I TTYMode: mode %s", buf, 0xCu);
  }
  if ((*(unsigned int (**)(void))(*(void *)*a2 + 616))(*a2))
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I TTYMode: is being ignored since we are on an active call", buf, 2u);
    }
  }
  else
  {
    *(_OWORD *)std::string buf = 0uLL;
    (*(void (**)(uint8_t *__return_ptr))(*(void *)*a2 + 64))(buf);
    if (a3 && !(*(unsigned int (**)(void))(**(void **)buf + 504))(*(void *)buf))
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)buf + 744))(*(void *)buf, 6))
      {
        uint64_t v8 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v9 = 0;
          _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I TTYMode: Deregister IMS due to RTT/TTY not allowed on IMS", v9, 2u);
        }
        (*(void (**)(void, const char *, uint64_t, void))(*(void *)*a2 + 528))(*a2, "TTYMode", 6, 0);
      }
    }
    else if ((*(unsigned int (**)(void, uint64_t))(**(void **)buf + 736))(*(void *)buf, 6))
    {
      (*(void (**)(void, const char *, uint64_t))(*(void *)*a2 + 520))(*a2, "TTYMode", 6);
    }
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
}

void sub_223B0AAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SystemDeterminationManager::calculateBlocksCallsOverCS_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v21 = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v18 = *(void *)(a1 + 80);
  uint64_t v19 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, __p);
  if ((void *)(a1 + 112) == v8)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v9 = v8;
    uint64_t v10 = v8[7];
    uint64_t v11 = (std::__shared_weak_count *)v9[8];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v10)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v10 + 72))(&v18);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v18 + 384))(v18, a3))
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 424))(v18))
        {
          int v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 512))(*(void *)(a1 + 152), a2);
          unsigned __int8 v13 = *v6;
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = asStringBool();
            *(_DWORD *)std::string buf = 136315138;
            uint64_t v23 = v14;
            _os_log_impl(&dword_223AF3000, v13, OS_LOG_TYPE_DEFAULT, "#I Carrier supports dialing over CS for domestic in-bound roaming. Is domestic roaming: %s ", buf, 0xCu);
          }
          uint64_t v15 = v12 ^ 1u;
        }
        else
        {
          uint64_t v15 = 1;
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      goto LABEL_22;
    }
  }
  uint64_t v16 = *v6;
  if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v18) = 0;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#N carrierBlocksCallsOverCS_sync: No instance found. Bailing...", (uint8_t *)&v18, 2u);
  }
  uint64_t v15 = 0;
LABEL_22:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

void sub_223B0ADB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleCarrierBundleChange_sync(uint64_t a1, uint64_t a2, char a3)
{
}

void SystemDeterminationManager::handleOperatorBundleChange_sync(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = (NSObject **)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 88);
  int v17 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  uint64_t v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, __p);
  if ((void *)(a1 + 112) == v8)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = v8[7];
    uint64_t v9 = (std::__shared_weak_count *)v8[8];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v11 = *v6;
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v12)
    {
      unsigned __int8 v13 = (void *)asString();
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v13;
      _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I OperatorBundleChange: type=%s", (uint8_t *)__p, 0xCu);
    }
    if (a3)
    {
      *(_OWORD *)std::string __p = 0uLL;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 64))(__p, v10);
      (*(void (**)(void *, uint64_t))(*(void *)__p[0] + 200))(__p[0], 1);
      (*(void (**)(uint64_t, void))(*(void *)v10 + 576))(v10, 0);
      uint64_t v14 = *(void *)(a1 + 152);
      uint64_t v15 = SystemDeterminationManager::calculateBlocksCallsOverCS_sync(a1, a2, 1);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 504))(v14, a2, v15);
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
    }
  }
  else if (v12)
  {
    uint64_t v16 = (void *)subscriber::asString();
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v16;
    _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#N OperatorBundleChange: reported for %s - don't have instance for it. Bailing...", (uint8_t *)__p, 0xCu);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_223B0B0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleOperatorBundleChange_sync(uint64_t a1, uint64_t a2, int a3)
{
}

void SystemDeterminationManager::handlePhoneNumberAvailable_sync(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v39 = 0;
  *(void *)std::string buf = v9;
  *(void *)&uint8_t buf[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v10 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, __p);
  uint64_t v11 = (void *)(a1 + 112);
  if ((void *)(a1 + 112) == v10)
  {
    BOOL v12 = 0;
  }
  else
  {
    uint64_t v13 = v10[7];
    BOOL v12 = (std::__shared_weak_count *)v10[8];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v13)
    {
      *(_OWORD *)std::string buf = 0uLL;
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v13 + 64))(buf, v13);
      uint64_t v14 = *(void *)buf;
      if (a4)
      {
        uint64_t v15 = (std::__shared_weak_count *)a3[1];
        uint64_t v36 = *a3;
        long long v37 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v36 = 0;
        long long v37 = 0;
      }
      int v18 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v14 + 624))(v14, &v36);
      char v19 = (sd *)v37;
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      if (sd::IsDataConnectionImSupportedByDevice(v19))
      {
        if (v18)
        {
          if ((*(unsigned int (**)(void, uint64_t))(**(void **)buf + 744))(*(void *)buf, 12))
          {
            (*(void (**)(uint64_t, const char *))(*(void *)v13 + 304))(v13, "PhoneNumber updated");
            (*(void (**)(uint64_t, const char *))(*(void *)v13 + 328))(v13, "PhoneNumber updated");
            (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)v13 + 528))(v13, "handlePhoneNumberAvailable", 12, 0);
          }
          uint64_t v20 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, __p);
          if (v11 != v20)
          {
            uint64_t v22 = v20[7];
            uint64_t v21 = (std::__shared_weak_count *)v20[8];
            if (v21) {
              atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v22)
            {
              uint64_t v34 = 0;
              uint64_t v35 = 0;
              (*(void (**)(unsigned char **__return_ptr, uint64_t))(*(void *)v22 + 64))(&v34, v22);
              uint64_t v23 = v34;
              if (a4)
              {
                uint64_t v24 = (std::__shared_weak_count *)a3[1];
                uint64_t v32 = *a3;
                __int16 v33 = v24;
                if (v24) {
                  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
              else
              {
                uint64_t v32 = 0;
                __int16 v33 = 0;
              }
              (*(void (**)(unsigned char *, uint64_t *))(*(void *)v23 + 624))(v23, &v32);
              if (v33) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v33);
              }
              if ((*(unsigned int (**)(unsigned char *, uint64_t))(*(void *)v34 + 744))(v34, 12))
              {
                (*(void (**)(uint64_t, const char *))(*(void *)v22 + 328))(v22, "PhoneNumber updated");
                (*(void (**)(uint64_t, const char *, uint64_t, void))(*(void *)v22 + 528))(v22, "handlePhoneNumberAvailable", 12, 0);
              }
              if (v35) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v35);
              }
            }
            if (v21) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            }
          }
          SystemDeterminationManager::evaluateSimFiles_sync((void *)a1, (uint64_t)__p);
        }
        (*(void (**)(unsigned char **__return_ptr))(**(void **)buf + 528))(&v34);
        if (v34[264])
        {
          int v25 = (*(uint64_t (**)(void, uint64_t))(**(void **)buf + 736))(*(void *)buf, 12);
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
          if (v25) {
            (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v13 + 520))(v13, "handlePhoneNumberAvailable", 12);
          }
        }
        else if (v35)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        uint64_t v26 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, __p);
        if (v11 != v26)
        {
          uint64_t v28 = v26[7];
          uint64_t v27 = (std::__shared_weak_count *)v26[8];
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v28)
          {
            uint64_t v34 = 0;
            uint64_t v35 = 0;
            (*(void (**)(unsigned char **__return_ptr, uint64_t))(*(void *)v28 + 64))(&v34, v28);
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v34 + 528))(&v30);
            if (*(unsigned char *)(v30 + 264))
            {
              int v29 = (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)v34 + 736))(v34, 12);
              if (v31) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v31);
              }
              if (v29) {
                (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v28 + 520))(v28, "handlePhoneNumberAvailable", 12);
              }
            }
            else if (v31)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
            }
            if (v35) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v35);
            }
          }
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
        }
      }
      SystemDeterminationManager::checkBasebandAssertionIfInWiFiCallingOnlyMode_sync(a1, buf);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      goto LABEL_63;
    }
  }
  uint64_t v16 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a2);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = subscriber::asString();
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#N Phone number availability reported for %s - don't have instance for it. Bailing...", buf, 0xCu);
  }
LABEL_63:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete(__p[0]);
  }
}

void sub_223B0B7EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handlePhoneNumberAvailable_sync(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
}

void SystemDeterminationManager::handlePersonalityAdded_sync(uint64_t a1, uint64_t a2)
{
  void (***v12)(uint64_t *__return_ptr, void, uint64_t);
  char v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  uint64_t v19;
  BOOL v20;
  const char *v21;
  const char *v22;
  NSObject *v23;
  uint64_t v24;
  BOOL v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  NSObject *v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  long long v34;
  NSObject *v35;
  uint64_t v36;
  BOOL v37;
  const char *v38;
  const char *v39;
  const char *v40;
  NSObject *v41;
  uint64_t v42;
  BOOL v43;
  const char *v44;
  const char *v45;
  std::mutex *v46;
  std::mutex *v47;
  std::string::size_type v48;
  unsigned __int8 *v49;
  uint64_t v50;
  unsigned int v51;
  void *v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  BOOL v57;
  const char *v58;
  BOOL v59;
  BOOL v60;
  NSObject *v61;
  capabilities::ct *v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  BOOL v66;
  const char *v67;
  const char *v68;
  NSObject *v69;
  uint64_t v70;
  BOOL v71;
  const char *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::string v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  void *__p;
  char v85;
  dispatch_object_t object;
  long long v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  void v90[4];
  std::string buf;
  long long v92;
  uint64_t v93;
  unsigned char v94[24];
  std::string v95;
  uint64_t v96;
  long long v97;
  long long v98;
  uint8_t v99[24];
  uint64_t v100;

  uint64_t v100 = *MEMORY[0x263EF8340];
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 80));
  int v5 = ServiceMap;
  std::string::size_type v6 = *(void *)(MEMORY[0x263F03558] + 8);
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      std::string::size_type v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  buf.__r_.__value_.__r.__words[0] = v6;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v5[1].__m_.__sig, (unint64_t *)&buf);
  if (v10)
  {
    BOOL v12 = (void (***)(uint64_t *__return_ptr, void, uint64_t))v10[3];
    uint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      uint64_t v13 = 0;
      if (!v12) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v12 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v11 = 0;
  uint64_t v13 = 1;
  if (!v12)
  {
LABEL_7:
    uint64_t v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_223AF3000, v14, OS_LOG_TYPE_ERROR, "PersonalityAdded: No PersonalityShop", (uint8_t *)&buf, 2u);
    }
    goto LABEL_148;
  }
LABEL_11:
  uint64_t v88 = 0;
  v89 = 0;
  (**v12)(&v88, v12, a2);
  if (!v88)
  {
    uint64_t v23 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
      int v25 = (v24 & 0x80u) != 0;
      if ((v24 & 0x80u) != 0) {
        uint64_t v24 = *(void *)(a2 + 8);
      }
      if (v25) {
        uint64_t v26 = *(const char **)a2;
      }
      else {
        uint64_t v26 = (const char *)a2;
      }
      if (v24) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = "<invalid>";
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
      _os_log_error_impl(&dword_223AF3000, v23, OS_LOG_TYPE_ERROR, "PersonalityAdded: Unknown Personality: %s", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_146;
  }
  if (*(unsigned char *)(v88 + 49) != 2)
  {
    *(void *)&v87 = 0;
    uint64_t v15 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, (void *)a2);
    if ((void *)(a1 + 112) == v15)
    {
      uint64_t v17 = 0;
      v87 = 0uLL;
    }
    else
    {
      uint64_t v16 = v15[7];
      uint64_t v17 = (std::__shared_weak_count *)v15[8];
      *((void *)&v87 + 1) = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v16)
      {
        int v18 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          char v19 = *(unsigned __int8 *)(a2 + 23);
          uint64_t v20 = (v19 & 0x80u) != 0;
          if ((v19 & 0x80u) != 0) {
            char v19 = *(void *)(a2 + 8);
          }
          if (v20) {
            uint64_t v21 = *(const char **)a2;
          }
          else {
            uint64_t v21 = (const char *)a2;
          }
          if (v19) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = "<invalid>";
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
          _os_log_impl(&dword_223AF3000, v18, OS_LOG_TYPE_DEFAULT, "#I PersonalityAdded: same Personality: %s added - Updating Info", (uint8_t *)&buf, 0xCu);
        }
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v16 + 64))(&buf, v16);
        (*(void (**)(std::string::size_type, uint64_t *))(*(void *)buf.__r_.__value_.__l.__data_ + 48))(buf.__r_.__value_.__r.__words[0], &v88);
        if (buf.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
        }
        (*(void (**)(uint64_t))(*(void *)v16 + 408))(v16);
LABEL_131:
        (*(void (**)(uint64_t))(*(void *)v16 + 168))(v16);
        if (!*(void *)(a1 + 168))
        {
          SystemDeterminationManager::createEmergencyIMSClient((SystemDeterminationManager *)a1);
          *(void *)(*(void *)(a1 + 168) + 8) = v16;
          unsigned int v64 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v65 = *(unsigned __int8 *)(a2 + 23);
            v66 = (v65 & 0x80u) != 0;
            if ((v65 & 0x80u) != 0) {
              unint64_t v65 = *(void *)(a2 + 8);
            }
            if (v66) {
              __int16 v67 = *(const char **)a2;
            }
            else {
              __int16 v67 = (const char *)a2;
            }
            if (v65) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = "<invalid>";
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
            _os_log_impl(&dword_223AF3000, v64, OS_LOG_TYPE_DEFAULT, "#I PersonalityAdded: Emergency client is created for: %s", (uint8_t *)&buf, 0xCu);
          }
        }
        uint64_t v69 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_223AF3000, v69, OS_LOG_TYPE_DEFAULT, "#I PersonalityAdded: done", (uint8_t *)&buf, 2u);
        }
LABEL_144:
        if (*((void *)&v87 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v87 + 1));
        }
        goto LABEL_146;
      }
    }
    uint64_t v28 = *(void *)(a1 + 96);
    int v29 = *(NSObject **)(a1 + 24);
    dispatch_object_t object = v29;
    if (v29) {
      dispatch_retain(v29);
    }
    uint64_t v30 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v30 || (v31 = *(void *)(a1 + 8), (uint64_t v32 = std::__shared_weak_count::lock(v30)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    __int16 v33 = v31 + 56;
    if (!v31) {
      __int16 v33 = 0;
    }
    *(void *)v99 = v33;
    *(void *)&v99[8] = v32;
    (*(void (**)(std::string *__return_ptr, uint64_t, dispatch_object_t *, uint8_t *, uint64_t))(*(void *)v28 + 48))(&buf, v28, &object, v99, a2);
    uint64_t v34 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
    v74 = v34;
    v87 = v34;
    if (v17)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      if (buf.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
    }
    if (*(void *)&v99[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v99[8]);
    }
    if (object) {
      dispatch_release(object);
    }
    if (!v74)
    {
      uint64_t v41 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        uint64_t v42 = *(unsigned __int8 *)(a2 + 23);
        uint64_t v43 = (v42 & 0x80u) != 0;
        if ((v42 & 0x80u) != 0) {
          uint64_t v42 = *(void *)(a2 + 8);
        }
        if (v43) {
          uint64_t v44 = *(const char **)a2;
        }
        else {
          uint64_t v44 = (const char *)a2;
        }
        if (v42) {
          long long v45 = v44;
        }
        else {
          long long v45 = "<invalid>";
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
        _os_log_error_impl(&dword_223AF3000, v41, OS_LOG_TYPE_ERROR, "PersonalityAdded: Couldn't create controller for: %s", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_144;
    }
    std::pair<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>::pair[abi:ne180100]<PersonalityID const&,std::shared_ptr<sd::IMSSubscriberControllerInterface>&,0>(&buf, (long long *)a2, (std::string::size_type *)&v87);
    std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::__emplace_unique_key_args<PersonalityID,std::pair<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>((uint64_t **)(a1 + 104), &buf, (uint64_t)&buf);
    if (*((void *)&v92 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v92 + 1));
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    uint64_t v35 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v36 = *(unsigned __int8 *)(a2 + 23);
      long long v37 = (v36 & 0x80u) != 0;
      if ((v36 & 0x80u) != 0) {
        uint64_t v36 = *(void *)(a2 + 8);
      }
      if (v37) {
        uint64_t v38 = *(const char **)a2;
      }
      else {
        uint64_t v38 = (const char *)a2;
      }
      if (v36) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = "<invalid>";
      }
      if (*(unsigned char *)(v88 + 49)) {
        long long v40 = "Thumper";
      }
      else {
        long long v40 = (const char *)subscriber::asString();
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v39;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v40;
      _os_log_impl(&dword_223AF3000, v35, OS_LOG_TYPE_DEFAULT, "#I PersonalityAdded: Bootstrapping controller: %s - %s", (uint8_t *)&buf, 0x16u);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v74 + 16))(v74, a1 + 152);
    uint64_t v46 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 80));
    uint64_t v47 = v46;
    std::string v48 = *(void *)(MEMORY[0x263F03608] + 8);
    if ((v48 & 0x8000000000000000) != 0)
    {
      uint64_t v49 = (unsigned __int8 *)(v48 & 0x7FFFFFFFFFFFFFFFLL);
      long long v50 = 5381;
      do
      {
        std::string v48 = v50;
        long long v51 = *v49++;
        long long v50 = (33 * v50) ^ v51;
      }
      while (v51);
    }
    std::mutex::lock(v46);
    buf.__r_.__value_.__r.__words[0] = v48;
    uint64_t v52 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v47[1].__m_.__sig, (unint64_t *)&buf);
    if (v52)
    {
      char v54 = v52[3];
      v53 = (std::__shared_weak_count *)v52[4];
      if (v53)
      {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v47);
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
        char v55 = 0;
        if (!v54) {
          goto LABEL_121;
        }
        goto LABEL_91;
      }
    }
    else
    {
      char v54 = 0;
    }
    std::mutex::unlock(v47);
    v53 = 0;
    char v55 = 1;
    if (!v54)
    {
LABEL_121:
      if ((v55 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      *(_OWORD *)v99 = 0uLL;
      uint64_t v16 = v87;
      long long v62 = (capabilities::ct *)(*(void *(**)(uint8_t *__return_ptr, void))(*(void *)v87 + 64))(v99, v87);
      if (capabilities::ct::getRadioModuleType(v62) == 2) {
        (*(void (**)(void))(**(void **)v99 + 608))(*(void *)v99);
      }
      (*(void (**)(uint64_t *__return_ptr))(**(void **)v99 + 88))(&v75);
      __int16 v63 = v75;
      std::string::basic_string[abi:ne180100]<0>(&buf, "CountryLookupThreshold");
      *(_DWORD *)(a1 + 360) = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)v63 + 72))(v63, &buf, 15);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (v76) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v76);
      }
      if (*(void *)&v99[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v99[8]);
      }
      goto LABEL_131;
    }
LABEL_91:
    std::__split_buffer<std::string>::pointer v56 = *(unsigned __int8 *)(a2 + 23);
    std::string::size_type v57 = (v56 & 0x80u) != 0;
    if ((v56 & 0x80u) != 0) {
      std::__split_buffer<std::string>::pointer v56 = *(void *)(a2 + 8);
    }
    if (v57) {
      unsigned int v58 = *(const char **)a2;
    }
    else {
      unsigned int v58 = (const char *)a2;
    }
    std::string v59 = v58 == "00000000000000000000";
    if (v56) {
      std::string v60 = v59;
    }
    else {
      std::string v60 = "<invalid>" == "00000000000000000000";
    }
    if (v60)
    {
      *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0u;
      v93 = 0xB00000000000000;
      unsigned int v92 = 0u;
      *(_OWORD *)&v94[8] = 0u;
      int v98 = 0u;
      v97 = 0u;
      memset(&v95, 0, sizeof(v95));
      uint64_t v96 = 23;
      *((unsigned char *)&buf.__r_.__value_.__s + 23) = 9;
      qmemcpy(&buf, "Telephony", 9);
      *(_DWORD *)((char *)&v92 + 7) = 2037672300;
      *(void *)&unsigned int v92 = *(void *)"Personality";
      v94[23] = 11;
      qmemcpy(v94, "Bogus ICCID", 11);
      std::string::__assign_external(&v95, "Personality using bogus ICCID", 0x1DuLL);
      v96 |= 0x17uLL;
      ABCReportInfo::ABCReportInfo(&v77, (const ABCReportInfo *)&buf);
      v90[3] = 0;
      (*(void (**)(uint64_t, std::string *, void *))(*(void *)v54 + 16))(v54, &v77, v90);
      std::__function::__value_func<void ()(BOOL,std::string)>::~__value_func[abi:ne180100](v90);
      if (v85 < 0) {
        operator delete(__p);
      }
      if (v83 < 0) {
        operator delete(v82);
      }
      if (v81 < 0) {
        operator delete(v80);
      }
      if (v79 < 0) {
        operator delete(v78);
      }
      if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v77.__r_.__value_.__l.__data_);
      }
      uint64_t v61 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        v70 = *(unsigned __int8 *)(a2 + 23);
        uint64_t v71 = (v70 & 0x80u) != 0;
        if ((v70 & 0x80u) != 0) {
          v70 = *(void *)(a2 + 8);
        }
        if (v71) {
          v72 = *(const char **)a2;
        }
        else {
          v72 = (const char *)a2;
        }
        if (v70) {
          int v73 = v72;
        }
        else {
          int v73 = "<invalid>";
        }
        *(_DWORD *)v99 = 136315138;
        *(void *)&v99[4] = v73;
        _os_log_error_impl(&dword_223AF3000, v61, OS_LOG_TYPE_ERROR, "PersonalityAdded: Bogus Personality: %s", v99, 0xCu);
      }
      if (SBYTE7(v98) < 0) {
        operator delete((void *)v97);
      }
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
      if ((v94[23] & 0x80000000) != 0) {
        operator delete(*(void **)v94);
      }
      if (SHIBYTE(v93) < 0) {
        operator delete((void *)v92);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_121;
  }
LABEL_146:
  if (v89) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
LABEL_148:
  if ((v13 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_223B0C3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,dispatch_object_t object,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__shared_weak_count *a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  if ((v45 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void SystemDeterminationManager::createEmergencyIMSClient(SystemDeterminationManager *this)
{
  uint64_t v2 = operator new(0x38uLL);
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = &unk_26D7446C0;
  v2[3] = &unk_26D7441B0;
  v2[4] = 0;
  v2[5] = 0;
  v2[6] = 0;
  unsigned int v3 = (std::__shared_weak_count *)*((void *)this + 22);
  *((void *)this + 21) = v2 + 3;
  *((void *)this + 22) = v2;
  if (!v3 || (std::__shared_weak_count::__release_shared[abi:ne180100](v3), *((void *)this + 21)))
  {
    uint64_t v4 = *((void *)this + 12);
    int v5 = *((void *)this + 3);
    dispatch_object_t v15 = v5;
    if (v5) {
      dispatch_retain(v5);
    }
    (*(void (**)(void **__return_ptr, uint64_t, dispatch_object_t *))(*(void *)v4 + 80))(__p, v4, &v15);
    uint64_t v6 = *((void *)this + 21);
    long long v7 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 24);
    *(_OWORD *)(v6 + 16) = v7;
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
    }
    if (v15) {
      dispatch_release(v15);
    }
    uint64_t v9 = *(void *)(*((void *)this + 21) + 16);
    std::string::basic_string[abi:ne180100]<0>(__p, "SystemDeterminationManager.e911");
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 22);
    uint64_t v11 = *((void *)this + 21);
    BOOL v12 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void **, uint64_t *, void))(*(void *)v9 + 152))(v9, __p, &v11, *((void *)this + 3));
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_223B0C68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handlePersonalityAdded_sync(uint64_t a1, uint64_t a2)
{
}

void SystemDeterminationManager::handlePersonalityEnabled_sync(uint64_t a1, uint64_t a2)
{
  void (***v12)(uint64_t *__return_ptr, void, uint64_t);
  char v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  NSObject *v18;
  uint64_t v19;
  BOOL v20;
  const char *v21;
  const char *v22;
  int v23;
  uint64_t v24;
  void *v25;
  void *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  BOOL v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  sd *v38;
  int IsDataConnectionImSupportedByDevice;
  NSObject *v40;
  uint64_t v41;
  BOOL v42;
  const char *v43;
  const char *v44;
  NSObject *v45;
  uint64_t v46;
  BOOL v47;
  const char *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  capabilities::ct *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  void *v64;
  void *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  NSObject *v72;
  std::__shared_weak_count *v73;
  void *__p;
  std::__shared_weak_count *v75;
  char v76;
  uint64_t v77;
  int v78;
  void *v79;
  void *v80;
  uint64_t v81;
  long long v82;
  void *v83[2];
  _OWORD v84[2];
  void *v85[2];
  long long v86;
  void *v87[2];
  void *v88[2];
  long long v89;
  void *v90[2];
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  char v111;
  char v112;
  uint8_t buf[16];
  _OWORD v114[6];
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  char v121;
  char v122;
  uint64_t v123;

  v123 = *MEMORY[0x263EF8340];
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 80));
  int v5 = ServiceMap;
  uint64_t v6 = *(void *)(MEMORY[0x263F03558] + 8);
  if (v6 < 0)
  {
    long long v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v6;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v5[1].__m_.__sig, (unint64_t *)buf);
  if (v10)
  {
    BOOL v12 = (void (***)(uint64_t *__return_ptr, void, uint64_t))v10[3];
    uint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      uint64_t v13 = 0;
      if (!v12) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v12 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v11 = 0;
  uint64_t v13 = 1;
  if (!v12)
  {
LABEL_7:
    char v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_223AF3000, v14, OS_LOG_TYPE_ERROR, "PersonalityEnabled: No PersonalityShop", buf, 2u);
    }
    goto LABEL_161;
  }
LABEL_11:
  uint64_t v100 = 0;
  v101 = 0;
  (**v12)(&v100, v12, a2);
  if (!v100)
  {
    long long v40 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = *(unsigned __int8 *)(a2 + 23);
      uint64_t v42 = (v41 & 0x80u) != 0;
      if ((v41 & 0x80u) != 0) {
        uint64_t v41 = *(void *)(a2 + 8);
      }
      if (v42) {
        uint64_t v43 = *(const char **)a2;
      }
      else {
        uint64_t v43 = (const char *)a2;
      }
      if (v41) {
        uint64_t v44 = v43;
      }
      else {
        uint64_t v44 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v44;
      _os_log_error_impl(&dword_223AF3000, v40, OS_LOG_TYPE_ERROR, "PersonalityEnabled: Unknown Personality: %s", buf, 0xCu);
    }
    goto LABEL_159;
  }
  if (*(unsigned char *)(v100 + 49) != 2)
  {
    dispatch_object_t v15 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, (void *)a2);
    if ((void *)(a1 + 112) == v15)
    {
      uint64_t v17 = 0;
      int v98 = 0;
      v99 = 0;
    }
    else
    {
      uint64_t v16 = v15[7];
      uint64_t v17 = (std::__shared_weak_count *)v15[8];
      int v98 = v16;
      v99 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v16)
      {
        int v18 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          char v19 = *(unsigned __int8 *)(a2 + 23);
          uint64_t v20 = (v19 & 0x80u) != 0;
          if ((v19 & 0x80u) != 0) {
            char v19 = *(void *)(a2 + 8);
          }
          if (v20) {
            uint64_t v21 = *(const char **)a2;
          }
          else {
            uint64_t v21 = (const char *)a2;
          }
          if (v19) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = "<invalid>";
          }
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v22;
          _os_log_impl(&dword_223AF3000, v18, OS_LOG_TYPE_DEFAULT, "#I PersonalityEnabled: same Personality: %s enabled - Updating Info", buf, 0xCu);
        }
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v16 + 64))(buf, v16);
        (*(void (**)(void, uint64_t *))(**(void **)buf + 48))(*(void *)buf, &v100);
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        uint64_t v23 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 256))(*(void *)(a1 + 152), a2);
        SystemDeterminationManager::evaluateTTYMode(a1, &v98, v23);
        uint64_t v24 = a1 + 128;
        int v25 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 128, (void *)a2);
        uint64_t v26 = (void *)(a1 + 136);
        if ((void *)(a1 + 136) != v25)
        {
          uint64_t v28 = v25[7];
          uint64_t v27 = (std::__shared_weak_count *)v25[8];
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v28)
          {
            int v73 = v17;
            int v29 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v30 = *(unsigned __int8 *)(a2 + 23);
              uint64_t v31 = (v30 & 0x80u) != 0;
              if ((v30 & 0x80u) != 0) {
                uint64_t v30 = *(void *)(a2 + 8);
              }
              if (v31) {
                uint64_t v32 = *(const char **)a2;
              }
              else {
                uint64_t v32 = (const char *)a2;
              }
              if (v30) {
                __int16 v33 = v32;
              }
              else {
                __int16 v33 = "<invalid>";
              }
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = v33;
              _os_log_impl(&dword_223AF3000, v29, OS_LOG_TYPE_DEFAULT, "#I PersonalityEnabled: same Personality: %s enabled - Updating Info", buf, 0xCu);
            }
            (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v28 + 64))(buf, v28);
            uint64_t v17 = v73;
            (*(void (**)(void, uint64_t *))(**(void **)buf + 48))(*(void *)buf, &v100);
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
          }
          uint64_t v26 = (void *)(a1 + 136);
          uint64_t v24 = a1 + 128;
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
        }
        uint64_t v96 = 0;
        v97 = 0;
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v16 + 64))(&v96, v16);
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v96 + 64))(v96))
        {
          int v94 = 0;
          v95 = 0;
          uint64_t v34 = *(void *)(a1 + 152);
          uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v96 + 72))(v96);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v34 + 400))(v34, v35, &v94))
          {
            uint64_t v36 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl(&dword_223AF3000, v36, OS_LOG_TYPE_DEFAULT, "#I PersonalityEnabled: Re-reading phone number", buf, 2u);
            }
            long long v37 = v96;
            unsigned int v92 = v94;
            v93 = v95;
            if (v95) {
              atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v37 + 624))(v37, &v92);
            if (v93) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v93);
            }
            uint64_t v38 = (sd *)(*(void *(**)(uint8_t *__return_ptr))(*(void *)v96 + 528))(buf);
            if (*(unsigned char *)(*(void *)buf + 264))
            {
              char IsDataConnectionImSupportedByDevice = sd::IsDataConnectionImSupportedByDevice(v38);
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
              }
              if (IsDataConnectionImSupportedByDevice) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v96 + 736))(v96, 12);
              }
            }
            else if (*(void *)&buf[8])
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
          }
          uint64_t v91 = 0;
          v89 = 0u;
          *(_OWORD *)unsigned int v90 = 0u;
          *(_OWORD *)v87 = 0u;
          *(_OWORD *)uint64_t v88 = 0u;
          *(_OWORD *)v85 = 0u;
          int v86 = 0u;
          memset(v84, 0, sizeof(v84));
          uint64_t v82 = 0u;
          *(_OWORD *)unsigned int v83 = 0u;
          long long v50 = *(void *)(a1 + 152);
          long long v51 = (*(uint64_t (**)(uint64_t))(*(void *)v96 + 72))(v96);
          if ((*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)v50 + 328))(v50, v51, &v82))
          {
            if (subscriber::isSimReady())
            {
              uint64_t v52 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl(&dword_223AF3000, v52, OS_LOG_TYPE_DEFAULT, "#I PersonalityEnabled: Re-reading SIM info", buf, 2u);
              }
              (*(void (**)(uint64_t, long long *))(*(void *)v96 + 536))(v96, &v82);
              memset(v114, 0, 32);
              *(_OWORD *)std::string buf = 0u;
              v53 = *(void *)(a1 + 152);
              char v54 = (*(uint64_t (**)(uint64_t))(*(void *)v96 + 72))(v96);
              char v55 = (capabilities::ct *)(*(uint64_t (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v53 + 376))(v53, v54, buf);
              if (v55) {
                char v55 = (capabilities::ct *)(*(uint64_t (**)(uint64_t, uint8_t *, char *))(*(void *)v96 + 616))(v96, buf, (char *)v114 + 8);
              }
              if (capabilities::ct::getRadioModuleType(v55) == 2
                && ((*(uint64_t (**)(uint64_t))(*(void *)v96 + 608))(v96) & 1) != 0
                || ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v96 + 752))(v96, 3) & 1) == 0)
              {
                SystemDeterminationManager::evaluateSimFiles_sync((void *)a1, a2);
              }
              std::__split_buffer<std::string>::pointer v56 = *(void *)(a1 + 152);
              std::string::size_type v57 = (*(uint64_t (**)(uint64_t))(*(void *)v96 + 72))(v96);
              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v56 + 368))(v56, v57)) {
                SystemDeterminationManager::evaluateIsimFiles_sync(a1, &v98);
              }
              rest::MccMncComputedInfo::~MccMncComputedInfo((void **)buf);
            }
            SystemDeterminationManager::checkBasebandAssertionIfInWiFiCallingOnlyMode_sync(a1, &v96);
          }
          bzero(buf, 0x320uLL);
          RegisteredNetworkInfo::RegisteredNetworkInfo((RegisteredNetworkInfo *)buf);
          bzero(&v102, 0x320uLL);
          unsigned int v58 = *(void *)(a1 + 152);
          std::string v59 = (*(uint64_t (**)(uint64_t))(*(void *)v96 + 72))(v96);
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v58 + 424))(&v102, v58, v59);
          uint64_t v79 = 0;
          v80 = 0;
          unsigned int v81 = 0;
          RegisteredNetworkInfo::compare((uint64_t *)&v79, (RegisteredNetworkInfo *)buf, (const RegisteredNetworkInfo *)&v102);
          std::string v60 = (*(uint64_t (**)(uint64_t))(*(void *)v96 + 72))(v96);
          (*(void (**)(uint64_t, uint64_t, void **, uint64_t *))(*(void *)a1 + 328))(a1, v60, &v79, &v102);
          uint64_t v77 = 2;
          v78 = 0;
          uint64_t v61 = *(void *)(a1 + 152);
          (*(void (**)(void **__return_ptr))(*(void *)v96 + 56))(&__p);
          long long v62 = (*(uint64_t (**)(uint64_t, void **, uint64_t *))(*(void *)v61 + 440))(v61, &__p, &v77);
          if (v76 < 0) {
            operator delete(__p);
          }
          if (v62)
          {
            std::string __p = 0;
            uint64_t v75 = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v16 + 128))(&__p, v16);
            if (__p) {
              (*(void (**)(void *, uint64_t *))(*(void *)__p + 160))(__p, &v77);
            }
            if (v75) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v75);
            }
          }
          if (v79)
          {
            v80 = v79;
            operator delete(v79);
          }
          if (v112 && v111 < 0) {
            operator delete(v110);
          }
          std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v109);
          std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v108);
          std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v107);
          std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v106);
          std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v105);
          std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v104);
          if (v122 && v121 < 0) {
            operator delete(v120);
          }
          std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v119);
          std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v118);
          std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v117);
          std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v116);
          std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v115);
          std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v114);
          if (SHIBYTE(v91) < 0) {
            operator delete(v90[0]);
          }
          if (SHIBYTE(v89) < 0) {
            operator delete(v88[1]);
          }
          if (SHIBYTE(v88[0]) < 0) {
            operator delete(v87[0]);
          }
          if (SHIBYTE(v86) < 0) {
            operator delete(v85[1]);
          }
          *(void *)std::string buf = (char *)v84 + 8;
          std::vector<subscriber::NpAppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if (v83[0])
          {
            v83[1] = v83[0];
            operator delete(v83[0]);
          }
          if (v95) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v95);
          }
        }
        memset(buf, 0, sizeof(buf));
        *(void *)&v114[0] = 0;
        (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 152) + 384))(buf);
        __int16 v63 = BYTE7(v114[0]);
        if (SBYTE7(v114[0]) < 0) {
          __int16 v63 = *(void *)&buf[8];
        }
        if (v63)
        {
          (*(void (**)(uint64_t, uint8_t *))(*(void *)v16 + 400))(v16, buf);
          unsigned int v64 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v24, (void *)a2);
          if (v26 != v64)
          {
            unint64_t v65 = v64;
            v66 = v64[7];
            __int16 v67 = (std::__shared_weak_count *)v65[8];
            if (v67) {
              atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v66) {
              (*(void (**)(uint64_t, uint8_t *))(*(void *)v66 + 400))(v66, buf);
            }
            if (v67) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v67);
            }
          }
        }
        if (SBYTE7(v114[0]) < 0) {
          operator delete(*(void **)buf);
        }
        memset(buf, 0, sizeof(buf));
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v16 + 128))(buf, v16);
        if (*(void *)buf
          && (*(unsigned int (**)(void, void))(**(void **)buf + 152))(*(void *)buf, 0))
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v96 + 736))(v96, 5);
        }
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        uint64_t v68 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v24, (void *)a2);
        if (v26 != v68)
        {
          uint64_t v69 = v68;
          v70 = v68[7];
          uint64_t v71 = (std::__shared_weak_count *)v69[8];
          if (v71) {
            atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v70)
          {
            memset(buf, 0, sizeof(buf));
            (*(void (**)(uint8_t *__return_ptr))(*(void *)v70 + 128))(buf);
            if (*(void *)buf)
            {
              if ((*(unsigned int (**)(void, void))(**(void **)buf + 152))(*(void *)buf, 0))
              {
                unsigned int v102 = 0;
                uint64_t v103 = 0;
                (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v16 + 64))(&v102, v16);
                (*(void (**)(uint64_t, uint64_t))(*(void *)v102 + 736))(v102, 5);
                if (v103) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v103);
                }
              }
            }
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
          }
          if (v71) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v71);
          }
        }
        v72 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_223AF3000, v72, OS_LOG_TYPE_DEFAULT, "#I PersonalityEnabled: done", buf, 2u);
        }
        if (v97) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v97);
        }
LABEL_157:
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        goto LABEL_159;
      }
    }
    char v45 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v46 = *(unsigned __int8 *)(a2 + 23);
      uint64_t v47 = (v46 & 0x80u) != 0;
      if ((v46 & 0x80u) != 0) {
        uint64_t v46 = *(void *)(a2 + 8);
      }
      if (v47) {
        std::string v48 = *(const char **)a2;
      }
      else {
        std::string v48 = (const char *)a2;
      }
      if (v46) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v49;
      _os_log_impl(&dword_223AF3000, v45, OS_LOG_TYPE_DEFAULT, "#I PersonalityEnabled: no controller is found for Personality: %s", buf, 0xCu);
    }
    goto LABEL_157;
  }
LABEL_159:
  if (v101) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v101);
  }
LABEL_161:
  if ((v13 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_223B0D6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,std::__shared_weak_count *a46,uint64_t a47,uint64_t a48,uint64_t a49,std::__shared_weak_count *a50,uint64_t a51,std::__shared_weak_count *a52)
{
  if (a52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a52);
  }
  if (STACK[0x478]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x478]);
  }
  if (v53) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v53);
  }
  if (a46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a46);
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (a50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a50);
  }
  if ((v55 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  _Unwind_Resume(a1);
}

void rest::MccMncComputedInfo::~MccMncComputedInfo(void **this)
{
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void RegisteredNetworkInfo::~RegisteredNetworkInfo(void **this)
{
  if (*((unsigned char *)this + 784) && *((char *)this + 751) < 0) {
    operator delete(this[91]);
  }
  std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 75));
  std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 57));
  std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 40));
  std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 27));
  std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 14));
  std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 2));
}

void non-virtual thunk to'SystemDeterminationManager::handlePersonalityEnabled_sync(uint64_t a1, uint64_t a2)
{
}

void SystemDeterminationManager::handlePersonalityRecovered_sync(void *a1, uint64_t a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    int v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 16), (void *)a2);
    if (a1 + 17 == v5)
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v7 = v5[7];
      uint64_t v6 = (std::__shared_weak_count *)v5[8];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v7)
      {
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v8 = (capabilities::ct *)(*(void *(**)(uint64_t *__return_ptr, uint64_t))(*(void *)v7 + 64))(&v21, v7);
        if (capabilities::ct::getRadioModuleType(v8) == 2) {
          (*(void (**)(uint64_t))(*(void *)v21 + 608))(v21);
        }
        (*(void (**)(uint64_t))(*(void *)v7 + 656))(v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 200))(v21, 1);
        bzero(buf, 0x320uLL);
        RegisteredNetworkInfo::RegisteredNetworkInfo((RegisteredNetworkInfo *)buf);
        bzero(v23, 0x320uLL);
        uint64_t v9 = a1[19];
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 72))(v21);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v9 + 424))(v23, v9, v10);
        std::string __p = 0;
        char v19 = 0;
        uint64_t v20 = 0;
        RegisteredNetworkInfo::compare((uint64_t *)&__p, (RegisteredNetworkInfo *)buf, (const RegisteredNetworkInfo *)v23);
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 72))(v21);
        (*(void (**)(void *, uint64_t, void **, void *))(*a1 + 328))(a1, v11, &__p, v23);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 192))(v7, 1);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 736))(v21, 3);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 752))(v21, 1) & 1) == 0) {
          (*(void (**)(uint64_t))(*(void *)v7 + 248))(v7);
        }
        (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v7 + 520))(v7, "LazuliFeature", 3);
        if (__p)
        {
          char v19 = __p;
          operator delete(__p);
        }
        if (v32 && v31 < 0) {
          operator delete(v30);
        }
        std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v29);
        std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v28);
        std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v27);
        std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v26);
        std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v25);
        std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v24);
        if (v43 && v42 < 0) {
          operator delete(v41);
        }
        std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v40);
        std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v39);
        std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v38);
        std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v37);
        std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v36);
        std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v35);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
LABEL_35:
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        return;
      }
    }
    uint64_t v13 = a1[5];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
      BOOL v15 = (v14 & 0x80u) != 0;
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(a2 + 8);
      }
      if (v15) {
        uint64_t v16 = *(const char **)a2;
      }
      else {
        uint64_t v16 = (const char *)a2;
      }
      if (v14) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v34 = v17;
      _os_log_impl(&dword_223AF3000, v13, OS_LOG_TYPE_DEFAULT, "#N PersonalityRecovered: No Lazuli controller for %s. Bailing...", buf, 0xCu);
    }
    goto LABEL_35;
  }
  BOOL v12 = a1[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v34 = "<invalid>";
    _os_log_error_impl(&dword_223AF3000, v12, OS_LOG_TYPE_ERROR, "PersonalityRecovered: Unknown Personality: %s", buf, 0xCu);
  }
}

void sub_223B0DED4(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, ...)
{
  va_start(va, a7);
  RegisteredNetworkInfo::~RegisteredNetworkInfo((void **)va);
  RegisteredNetworkInfo::~RegisteredNetworkInfo((void **)&STACK[0x350]);
  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SystemDeterminationManager::handlePersonalityRecovered_sync(uint64_t a1, uint64_t a2)
{
}

void SystemDeterminationManager::handlePersonalityRemoved_sync(std::string *a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    std::string::operator=(a1 + 19, (const std::string *)a2);
    int v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)&a1[4].__r_.__value_.__l.__size_, (void *)a2);
    if (&a1[4].__r_.__value_.__r.__words[2] == v5)
    {
      uint64_t v8 = 0;
    }
    else
    {
      uint64_t v6 = v5;
      std::string::size_type v7 = v5[7];
      uint64_t v8 = (std::__shared_weak_count *)v6[8];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v7)
      {
        (*(void (**)(std::string::size_type))(*(void *)v7 + 416))(v7);
        p_std::string::size_type size = (uint64_t **)&a1[5].__r_.__value_.__l.__size_;
        uint64_t v10 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)&a1[5].__r_.__value_.__l.__size_, (void *)a2);
        if (&a1[5].__r_.__value_.__r.__words[2] != v10)
        {
          std::string::size_type v12 = v10[7];
          uint64_t v11 = (std::__shared_weak_count *)v10[8];
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v12)
          {
            (*(void (**)(std::string::size_type))(*(void *)v12 + 416))(v12);
            if (!(*(unsigned int (**)(std::string::size_type))(*(void *)v12 + 96))(v12))
            {
              uint64_t v13 = a1[1].__r_.__value_.__r.__words[2];
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
                BOOL v15 = (v14 & 0x80u) != 0;
                if ((v14 & 0x80u) != 0) {
                  uint64_t v14 = *(void *)(a2 + 8);
                }
                if (v15) {
                  uint64_t v16 = *(const char **)a2;
                }
                else {
                  uint64_t v16 = (const char *)a2;
                }
                if (v14) {
                  uint64_t v17 = v16;
                }
                else {
                  uint64_t v17 = "<invalid>";
                }
                int v24 = 136315138;
                uint64_t v25 = v17;
                _os_log_impl(&dword_223AF3000, v13, OS_LOG_TYPE_DEFAULT, "#N PersonalityRemoved: Done with Lazuli controller shutdown, accountId=%s", (uint8_t *)&v24, 0xCu);
              }
              (*(void (**)(std::string::size_type))(*(void *)v12 + 40))(v12);
              std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::__erase_unique<PersonalityID>(p_size, (void *)a2);
            }
          }
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
        }
LABEL_39:
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        return;
      }
    }
    char v19 = a1[1].__r_.__value_.__r.__words[2];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
      BOOL v21 = (v20 & 0x80u) != 0;
      if ((v20 & 0x80u) != 0) {
        uint64_t v20 = *(void *)(a2 + 8);
      }
      if (v21) {
        uint64_t v22 = *(const char **)a2;
      }
      else {
        uint64_t v22 = (const char *)a2;
      }
      if (v20) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = "<invalid>";
      }
      int v24 = 136315138;
      uint64_t v25 = v23;
      _os_log_impl(&dword_223AF3000, v19, OS_LOG_TYPE_DEFAULT, "#N PersonalityRemoved: No controller for handlePersonalityRemoved on %s. Bailing...", (uint8_t *)&v24, 0xCu);
    }
    goto LABEL_39;
  }
  int v18 = a1[1].__r_.__value_.__r.__words[2];
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    int v24 = 136315138;
    uint64_t v25 = "<invalid>";
    _os_log_error_impl(&dword_223AF3000, v18, OS_LOG_TYPE_ERROR, "PersonalityRemoved: Unknown Personality: %s", (uint8_t *)&v24, 0xCu);
  }
}

void sub_223B0E248(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handlePersonalityRemoved_sync(uint64_t a1, uint64_t a2)
{
}

void SystemDeterminationManager::handleTTYModeChanged_sync(void *a1, uint64_t a2, int *a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)std::string buf = a1[10];
  *(void *)&uint8_t buf[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v8 = a1[5];
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
      BOOL v10 = (v9 & 0x80u) != 0;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(a2 + 8);
      }
      if (v10) {
        uint64_t v11 = *(const char **)a2;
      }
      else {
        uint64_t v11 = (const char *)a2;
      }
      if (v9) {
        std::string::size_type v12 = v11;
      }
      else {
        std::string::size_type v12 = "<invalid>";
      }
      uint64_t v13 = asStringBool();
      int v14 = *a3;
      *(_DWORD *)std::string buf = 136315650;
      if (v14 == 2) {
        BOOL v15 = "(emergency)";
      }
      else {
        BOOL v15 = "";
      }
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v13;
      __int16 v40 = 2080;
      uint64_t v41 = v15;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I TTYMode: mode changed for %s is %s %s", buf, 0x20u);
    }
    uint64_t v16 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 13), (void *)a2);
    if (a1 + 14 == v16)
    {
      uint64_t v17 = 0;
      *(void *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = 0;
    }
    else
    {
      uint64_t v18 = v16[7];
      uint64_t v17 = (std::__shared_weak_count *)v16[8];
      *(void *)std::string buf = v18;
      *(void *)&uint8_t buf[8] = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v18)
      {
        SystemDeterminationManager::evaluateTTYMode((uint64_t)a1, buf, *((unsigned __int8 *)a3 + 4));
        if (*a3 != 2) {
          goto LABEL_51;
        }
        uint64_t v19 = a1[21];
        if (v19)
        {
          uint64_t v21 = *(void *)(v19 + 16);
          uint64_t v20 = *(std::__shared_weak_count **)(v19 + 24);
          uint64_t v35 = v21;
          uint64_t v36 = v20;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v18 + 496))(v18, &v35, *((unsigned __int8 *)a3 + 4));
          if (v36) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v36);
          }
          goto LABEL_51;
        }
        uint64_t v34 = a1[5];
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
LABEL_51:
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          return;
        }
        *(_WORD *)uint64_t v37 = 0;
        char v31 = "#N TTYMode: Emergency client is not initialized. Bailing...";
        char v32 = v34;
        uint32_t v33 = 2;
LABEL_50:
        _os_log_impl(&dword_223AF3000, v32, OS_LOG_TYPE_DEFAULT, v31, v37, v33);
        goto LABEL_51;
      }
    }
    uint64_t v26 = a1[5];
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_51;
    }
    uint64_t v27 = *(unsigned __int8 *)(a2 + 23);
    BOOL v28 = (v27 & 0x80u) != 0;
    if ((v27 & 0x80u) != 0) {
      uint64_t v27 = *(void *)(a2 + 8);
    }
    if (v28) {
      uint64_t v29 = *(const char **)a2;
    }
    else {
      uint64_t v29 = (const char *)a2;
    }
    if (v27) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = "<invalid>";
    }
    *(_DWORD *)uint64_t v37 = 136315138;
    uint64_t v38 = v30;
    char v31 = "#N TTYMode: No controller for TTYModeChange on %s. Bailing...";
    char v32 = v26;
    uint32_t v33 = 12;
    goto LABEL_50;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
    BOOL v23 = (v22 & 0x80u) != 0;
    if ((v22 & 0x80u) != 0) {
      uint64_t v22 = *(void *)(a2 + 8);
    }
    if (v23) {
      int v24 = *(const char **)a2;
    }
    else {
      int v24 = (const char *)a2;
    }
    if (v22) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v25;
    _os_log_error_impl(&dword_223AF3000, v8, OS_LOG_TYPE_ERROR, "TTYMode: Unknown Personality: %s", buf, 0xCu);
  }
}

void sub_223B0E5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleTTYModeChanged_sync(uint64_t a1, uint64_t a2, int *a3)
{
}

void SystemDeterminationManager::getCountryOfOrigination(SystemDeterminationManager *this@<X0>, void *a2@<X8>)
{
  int v5 = this;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_23getCountryOfOriginationEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  void v6[3] = &__block_descriptor_tmp_201;
  v6[4] = (char *)this + 8;
  v6[5] = &v5;
  char v7 = v6;
  uint64_t v3 = (char *)this + 24;
  uint64_t v2 = *((void *)this + 3);
  uint64_t v4 = MEMORY[0x263EF8330];
  if (*((void *)v3 + 1))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t block = v4;
    uint64_t v9 = 0x40000000;
    BOOL v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v11 = &__block_descriptor_tmp_203;
    std::string::size_type v12 = a2;
    uint64_t v13 = &v7;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    uint64_t block = v4;
    uint64_t v9 = 0x40000000;
    BOOL v10 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v11 = &__block_descriptor_tmp_202;
    std::string::size_type v12 = a2;
    uint64_t v13 = &v7;
    dispatch_sync(v2, &block);
  }
}

void SystemDeterminationManager::handleRatChanged_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  int v5 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  uint64_t v6 = *v5;
  if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = asString();
    _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I RAT: %s", buf, 0xCu);
  }
  char v7 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v21 = *(void *)(a1 + 80);
  uint64_t v22 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  uint64_t v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, buf);
  if ((void *)(a1 + 112) == v8)
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = v8[7];
    uint64_t v9 = (std::__shared_weak_count *)v8[8];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v10)
  {
    *(_OWORD *)std::string buf = 0uLL;
    (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v10 + 64))(buf, v10);
    uint64_t v11 = *(void *)(a1 + 184);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)buf + 528))(&v21);
    std::string::size_type v12 = (const char *)(v21 + 328);
    if (*(char *)(v21 + 351) < 0) {
      std::string::size_type v12 = *(const char **)v12;
    }
    uint64_t v13 = atoi(v12);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)buf + 528))(&v19);
    int v14 = (const char *)(v19 + 352);
    if (*(char *)(v19 + 375) < 0) {
      int v14 = *(const char **)v14;
    }
    uint64_t v15 = atoi(v14);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 616))(v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 40))(v11, v13, v15, a3, v16);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  else
  {
    uint64_t v17 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = subscriber::asString();
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#N RAT: No instance for %s. Bailing...", buf, 0xCu);
    }
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_223B0EA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::handleDataModeChanged_sync(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v6 = (std::__shared_weak_count *)a1[11];
  uint64_t v24 = a1[10];
  uint64_t v25 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  char v7 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 13), __p);
  if (a1 + 14 == v7)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = v7[7];
    uint64_t v8 = (std::__shared_weak_count *)v7[8];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v27 < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v10 = (capabilities::ct *)v25;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v9)
  {
    if ((capabilities::ct::supports5G(v10) & 1) == 0)
    {
LABEL_31:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 440))(v9, a3);
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v9 + 64))(__p, v9);
      ((void (*)(void **, unsigned char *))(*a1)[87])(a1, __p);
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      goto LABEL_33;
    }
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v9 + 64))(&v24, v9);
    unint64_t v11 = (*(uint64_t (**)(void *))(*v24 + 336))(v24);
    uint64_t v13 = v12;
    char v14 = (*(uint64_t (**)(void *))(*v24 + 400))(v24);
    unint64_t v15 = HIDWORD(v11);
    if (v13 != 1)
    {
      if ((v14 & 1) == 0
        && v15 != a3
        && ((unsigned int (*)(void **, uint64_t))(*a1)[85])(a1, a3))
      {
        uint64_t v20 = *(NSObject **)(*(uint64_t (**)(void *, uint64_t))(*a1[9] + 16))(a1[9], a2);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = asString();
          uint64_t v22 = asString();
          *(_DWORD *)std::string __p = 136315394;
          *(void *)&__p[4] = v21;
          *(_WORD *)&unsigned char __p[12] = 2080;
          *(void *)&__p[14] = v22;
          _os_log_impl(&dword_223AF3000, v20, OS_LOG_TYPE_DEFAULT, "#I DataMode: Resetting T-IMS Establisment timer on data mode change (%s-->%s)", __p, 0x16u);
        }
        (*(void (**)(uint64_t))(*(void *)v9 + 648))(v9);
        *(_DWORD *)std::string __p = (*(uint64_t (**)(void *))(*v24 + 384))(v24);
        *(void *)&__p[8] = v23;
        *(_DWORD *)&__p[4] = a3;
        (*(void (**)(void *, unsigned char *))(*v24 + 392))(v24, __p);
      }
      goto LABEL_29;
    }
    if ((v13 & 0x100000000) != 0)
    {
      if (v14)
      {
        int v17 = 18;
      }
      else
      {
        if (v15 == a3) {
          goto LABEL_29;
        }
        int v16 = ((uint64_t (*)(void **, uint64_t))(*a1)[85])(a1, a3);
        int v17 = a3;
        if (!v16) {
          goto LABEL_29;
        }
      }
      *(_DWORD *)&__p[8] = 1;
      *(_DWORD *)&unsigned char __p[12] = HIDWORD(v13);
      *(_DWORD *)std::string __p = 0;
      *(_DWORD *)&__p[4] = v17;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 392))(v9, __p);
      ((void (*)(void **, void **, unsigned char *, void))(*a1)[86])(a1, &v24, __p, 0);
      (*(void (**)(uint64_t, unsigned char *, void))(*(void *)v9 + 224))(v9, __p, 0);
    }
LABEL_29:
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    goto LABEL_31;
  }
  uint64_t v18 = *(NSObject **)(*(uint64_t (**)(void *, uint64_t))(*a1[9] + 16))(a1[9], a2);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = subscriber::asString();
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = v19;
    _os_log_impl(&dword_223AF3000, v18, OS_LOG_TYPE_DEFAULT, "#N DataMode: No instance for %s. Bailing...", __p, 0xCu);
  }
LABEL_33:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_223B0EFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::handleQualityOfServiceEstablished_sync(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  char v7 = v6;
  if ((a3 - 1) < 3)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 88);
    std::string __p = *(void **)(a1 + 80);
    std::string v59 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    PersonalityIdFromSlotId();
    uint64_t v9 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, buf);
    if ((void *)(a1 + 112) == v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = v9[7];
      uint64_t v10 = (std::__shared_weak_count *)v9[8];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    if (SBYTE7(v66) < 0) {
      operator delete(*(void **)buf);
    }
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    if (!v11)
    {
      int v16 = *v7;
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#N QoS: got report, but no instance. Bailing...", buf, 2u);
      }
      goto LABEL_62;
    }
    uint64_t v61 = 0;
    long long v62 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v11 + 72))(&v61, v11);
    if (!v61)
    {
      char v14 = *v7;
      if (!os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_60;
      }
      *(_WORD *)std::string buf = 0;
      unint64_t v15 = "#N QoS: got report, but no config. Bailing...";
      goto LABEL_28;
    }
    unint64_t v13 = HIDWORD(a3);
    if (a3 == 3)
    {
      if ((*(unsigned int (**)(void))(*(void *)v61 + 376))()) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v11 + 216))(v11, HIDWORD(a3));
      }
      if (*(void *)(a1 + 200) && (*(unsigned int (**)(uint64_t, void))(*(void *)v61 + 392))(v61, 0)) {
        SystemDeterminationManager::removeQoSPacketFilters_sync(a1, a2, HIDWORD(a3));
      }
      char v14 = *v7;
      if (!os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_60;
      }
      *(_WORD *)std::string buf = 0;
      unint64_t v15 = "#N QoS: got removal report";
LABEL_28:
      _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 2u);
      goto LABEL_60;
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 80));
    uint64_t v18 = ServiceMap;
    uint64_t v19 = *(void *)(MEMORY[0x263F03578] + 8);
    if (v19 < 0)
    {
      uint64_t v20 = (unsigned __int8 *)(v19 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v21 = 5381;
      do
      {
        uint64_t v19 = v21;
        unsigned int v22 = *v20++;
        uint64_t v21 = (33 * v21) ^ v22;
      }
      while (v22);
    }
    std::mutex::lock(ServiceMap);
    *(void *)std::string buf = v19;
    uint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v18[1].__m_.__sig, (unint64_t *)buf);
    if (!v23)
    {
      std::mutex::unlock(v18);
      goto LABEL_60;
    }
    uint64_t v25 = v23[3];
    uint64_t v24 = (std::__shared_weak_count *)v23[4];
    if (v24)
    {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v18);
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      if (!v25)
      {
LABEL_59:
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
LABEL_60:
        if (v62) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v62);
        }
LABEL_62:
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        return;
      }
    }
    else
    {
      std::mutex::unlock(v18);
      if (!v25) {
        goto LABEL_60;
      }
    }
    long long v66 = 0u;
    long long v67 = 0u;
    *(_OWORD *)std::string buf = 0u;
    (*(void (**)(uint8_t *__return_ptr, uint64_t, unint64_t, unint64_t))(*(void *)v25 + 128))(buf, v25, a2, HIDWORD(a2));
    std::string __p = 0;
    std::string v59 = 0;
    uint64_t v60 = 0;
    (*(void (**)(void **__return_ptr, uint64_t, unint64_t, unint64_t))(*(void *)v25 + 120))(&__p, v25, a2, HIDWORD(a2));
    if ((void)v66 == *(void *)&buf[8])
    {
      uint64_t v26 = *((void *)&v67 + 1);
    }
    else
    {
      uint64_t v26 = *((void *)&v67 + 1);
      char v27 = (unint64_t *)(*(void *)&buf[8] + 8 * ((unint64_t)v67 / 0x19));
      unint64_t v28 = *v27;
      unint64_t v29 = *v27 + 160 * ((unint64_t)v67 % 0x19);
      uint64_t v30 = ((unint64_t)(*((void *)&v67 + 1) + v67) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
      unint64_t v31 = (v30 + ((unint64_t)(*((void *)&v67 + 1) + v67 - v30) >> 1)) >> 4;
      uint64_t v32 = *(void *)(*(void *)&buf[8] + 8 * v31) + 160 * (*((void *)&v67 + 1) + v67 - 25 * v31);
      if (v29 != v32)
      {
        while (*(_DWORD *)v29 != v13)
        {
          v29 += 160;
          if (v29 - v28 == 4000)
          {
            unint64_t v33 = v27[1];
            ++v27;
            unint64_t v28 = v33;
            unint64_t v29 = v33;
          }
          if (v29 == v32) {
            goto LABEL_53;
          }
        }
      }
      if (v32 != v29)
      {
        if ((!*(unsigned char *)(v29 + 80) || DataQoS::empty((DataQoS *)(v29 + 24)))
          && (!*(unsigned char *)(v29 + 144) || DataQoS::empty((DataQoS *)(v29 + 88))))
        {
          os_log_t v34 = *v7;
          if (!os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_56;
          }
          *(_WORD *)__int16 v63 = 0;
          uint64_t v35 = "#E QoS: got NULL report";
          uint64_t v36 = v34;
          goto LABEL_107;
        }
        uint64_t v39 = *v7;
        if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
        {
          int v40 = *(_DWORD *)(v29 + 8);
          *(_DWORD *)__int16 v63 = 67109120;
          *(_DWORD *)&v63[4] = v40;
          _os_log_impl(&dword_223AF3000, v39, OS_LOG_TYPE_DEFAULT, "#I QoS: report %u", v63, 8u);
        }
        {
          uint64_t v41 = *v7;
          if (!os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_74;
          }
          *(_WORD *)__int16 v63 = 0;
          uint64_t v42 = "#I QoS: Rx QCI granted";
        }
        else
        {
          uint64_t v41 = *v7;
          BOOL v44 = os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT);
          if (!v43)
          {
            if (v44)
            {
              *(_WORD *)__int16 v63 = 0;
              uint64_t v35 = "#N QoS: No correct QCI granted";
              uint64_t v36 = v41;
LABEL_107:
              uint32_t v38 = 2;
LABEL_55:
              _os_log_impl(&dword_223AF3000, v36, OS_LOG_TYPE_DEFAULT, v35, v63, v38);
            }
LABEL_56:
            if (SHIBYTE(v60) < 0) {
              operator delete(__p);
            }
            std::deque<std::pair<unsigned int,DataCellularQoSFlow>>::~deque[abi:ne180100]((uint64_t)buf);
            if (!v24) {
              goto LABEL_60;
            }
            goto LABEL_59;
          }
          if (!v44)
          {
LABEL_74:
            *(void *)__int16 v63 = 0;
            long long v64 = 0uLL;
            char v55 = 0;
            std::__split_buffer<std::string>::pointer v56 = 0;
            uint64_t v57 = 0;
            if (*(unsigned char *)(v29 + 144) && *(unsigned char *)(v29 + 136))
            {
              if (v63 != (uint8_t *)(v29 + 112)) {
                std::vector<DataIPFilter>::__assign_with_size[abi:ne180100]<DataIPFilter*,DataIPFilter*>((uint64_t *)v63, *(void *)(v29 + 112), *(void *)(v29 + 120), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v29 + 120) - *(void *)(v29 + 112)) >> 5));
              }
              if (*(void *)(a1 + 200)
                && (*(unsigned int (**)(uint64_t, void))(*(void *)v61 + 392))(v61, 0))
              {
                SystemDeterminationManager::provisionQoSPacketFilters_sync((void **)a1, a2, (uint64_t)&__p, 0, (uint64_t *)v63, *(void *)(v29 + 16), *(_DWORD *)(v29 + 8));
              }
            }
            if (*(unsigned char *)(v29 + 80) && *(unsigned char *)(v29 + 72))
            {
              if (&v55 != (uint8_t **)(v29 + 48)) {
                std::vector<DataIPFilter>::__assign_with_size[abi:ne180100]<DataIPFilter*,DataIPFilter*>((uint64_t *)&v55, *(void *)(v29 + 48), *(void *)(v29 + 56), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v29 + 56) - *(void *)(v29 + 48)) >> 5));
              }
              if (*(void *)(a1 + 200)
                && (*(unsigned int (**)(uint64_t, void))(*(void *)v61 + 392))(v61, 0))
              {
                SystemDeterminationManager::provisionQoSPacketFilters_sync((void **)a1, a2, (uint64_t)&__p, 1, (uint64_t *)&v55, *(void *)(v29 + 16), *(_DWORD *)(v29 + 8));
              }
            }
            uint64_t v45 = v64;
            uint64_t v51 = *(void *)v63;
            BOOL v46 = *(void *)v63 == (void)v64;
            if (*(void *)v63 == (void)v64) {
              uint64_t v47 = (uint64_t *)&v55;
            }
            else {
              uint64_t v47 = (uint64_t *)v63;
            }
            if (*(void *)v63 != (void)v64) {
              goto LABEL_95;
            }
            log = *v7;
            if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v52 = 0;
              _os_log_impl(&dword_223AF3000, log, OS_LOG_TYPE_DEFAULT, "#I QoS: no rx filters", v52, 2u);
            }
            if (v55 == (uint8_t *)v56)
            {
              uint64_t v49 = *v7;
              if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)uint64_t v52 = 0;
                _os_log_impl(&dword_223AF3000, v49, OS_LOG_TYPE_DEFAULT, "#I QoS: no tx filters", v52, 2u);
              }
            }
            else
            {
LABEL_95:
              *(void *)uint64_t v52 = 0;
              v53 = 0;
              uint64_t v54 = 0;
              SystemDeterminationManager::parseQoSPacketFilter_sync(a1, a2, 1, v47, (uint64_t)v52);
              if (*(void **)v52 == v53)
              {
                SystemDeterminationManager::parseQoSPacketFilter_sync(a1, a2, 0, v47, (uint64_t)v52);
                BOOL v46 = v51 != v45 && *(void *)v52 != (void)v53;
              }
              (*(void (**)(uint64_t, void, BOOL, uint8_t *))(*(void *)v11 + 208))(v11, *(unsigned int *)(v29 + 8), !v46, v52);
              if (*(void *)v52)
              {
                v53 = *(void **)v52;
                operator delete(*(void **)v52);
              }
            }
            *(void *)uint64_t v52 = &v55;
            std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
            char v55 = v63;
            std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
            goto LABEL_56;
          }
          *(_WORD *)__int16 v63 = 0;
          uint64_t v42 = "#I QoS: Tx QCI granted";
        }
        _os_log_impl(&dword_223AF3000, v41, OS_LOG_TYPE_DEFAULT, v42, v63, 2u);
        goto LABEL_74;
      }
    }
LABEL_53:
    os_log_t v37 = *v7;
    if (!os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    *(_DWORD *)__int16 v63 = 67109376;
    *(_DWORD *)&v63[4] = v13;
    LOWORD(v64) = 2048;
    *(void *)((char *)&v64 + 2) = v26;
    uint64_t v35 = "#N QoS: got report, but no flow found for %u in %lu flows. Bailing...";
    uint64_t v36 = v37;
    uint32_t v38 = 18;
    goto LABEL_55;
  }
  uint64_t v12 = *v6;
  if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#N QoS: got report of unknown type %d. Bailing...", buf, 8u);
  }
}

void sub_223B0F9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char **a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  a11 = &a15;
  std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  a15 = &a26;
  std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  if (a23 < 0) {
    operator delete(__p);
  }
  std::deque<std::pair<unsigned int,DataCellularQoSFlow>>::~deque[abi:ne180100]((uint64_t)&a30);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(a1);
}

void SystemDeterminationManager::removeQoSPacketFilters_sync(uint64_t a1, int a2, unsigned int a3)
{
  unsigned int v30 = a3;
  int v31 = a2;
  uint64_t v6 = (uint64_t **)(a1 + 264);
  char v7 = std::__tree<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>((uint64_t **)(a1 + 264), a2, &v31);
  uint64_t v10 = v7[6];
  uint64_t v8 = v7 + 6;
  uint64_t v9 = v10;
  if (!v10) {
    goto LABEL_12;
  }
  uint64_t v11 = v8;
  do
  {
    unsigned int v12 = *((_DWORD *)v9 + 8);
    BOOL v13 = v12 >= a3;
    if (v12 >= a3) {
      char v14 = (uint64_t **)v9;
    }
    else {
      char v14 = (uint64_t **)(v9 + 1);
    }
    if (v13) {
      uint64_t v11 = (uint64_t **)v9;
    }
    uint64_t v9 = *v14;
  }
  while (*v14);
  if (v11 == v8 || *((_DWORD *)v11 + 8) > a3) {
LABEL_12:
  }
    uint64_t v11 = v8;
  if (v11 != std::__tree<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(v6, a2, &v31)+ 6)
  {
    unint64_t v15 = std::__tree<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(v6, a2, &v31);
    int v16 = std::__tree<std::__value_type<unsigned int,std::vector<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v15 + 5, a3, &v30);
    int v17 = v16[5];
    uint64_t v18 = v16[6];
    while (v17 != v18)
    {
      (*(void (**)(void, uint64_t *))(**(void **)(a1 + 200) + 40))(*(void *)(a1 + 200), v17);
      v17 += 3;
    }
    uint64_t v19 = std::__tree<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(v6, a2, &v31);
    uint64_t v20 = v19[6];
    if (v20)
    {
      uint64_t v21 = v19 + 6;
      unsigned int v22 = v19[6];
      do
      {
        unsigned int v23 = *((_DWORD *)v22 + 8);
        BOOL v24 = v23 >= a3;
        if (v23 >= a3) {
          uint64_t v25 = (uint64_t **)v22;
        }
        else {
          uint64_t v25 = (uint64_t **)(v22 + 1);
        }
        if (v24) {
          uint64_t v21 = (uint64_t **)v22;
        }
        unsigned int v22 = *v25;
      }
      while (*v25);
      if (v21 != v19 + 6 && *((_DWORD *)v21 + 8) <= a3)
      {
        uint64_t v26 = v21[1];
        if (v26)
        {
          do
          {
            char v27 = v26;
            uint64_t v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
        else
        {
          unint64_t v28 = (uint64_t *)v21;
          do
          {
            char v27 = (uint64_t *)v28[2];
            BOOL v29 = *v27 == (void)v28;
            unint64_t v28 = v27;
          }
          while (!v29);
        }
        if (v19[5] == (uint64_t *)v21) {
          v19[5] = v27;
        }
        v19[7] = (uint64_t *)((char *)v19[7] - 1);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v20, (uint64_t *)v21);
        uint64_t v32 = (void **)(v21 + 5);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v32);
        operator delete(v21);
      }
    }
  }
}

BOOL anonymous namespace'::qciGranted<std::optional<DataQoS>>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    BOOL v1 = *(unsigned char *)(a1 + 4) == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1) {
    return 0;
  }
  uint64_t v4 = "NSt3__110__function6__funcIZN26SystemDeterminationManager17setVoLTEAttachAPNERKNS_10shared_ptrIN2sd27IMSSubscribe"
       "rModelInterfaceEEEE3$_0NS_9allocatorIS9_EEFvvEEE";
  if (v3) {
    uint64_t v4 = (const char *)v3;
  }
}

void SystemDeterminationManager::provisionQoSPacketFilters_sync(void **a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned int a7)
{
  unsigned int v28 = a7;
  int v29 = a2;
  uint64_t v11 = (os_log_t *)(*(uint64_t (**)(void *))(*a1[9] + 16))(a1[9]);
  uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a3 + 8);
  }
  if (v12)
  {
    uint64_t v14 = *a5;
    uint64_t v13 = a5[1];
    if (*a5 == v13)
    {
      BOOL v24 = *v11;
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_223AF3000, v24, OS_LOG_TYPE_DEFAULT, "#I QoS: no RxFilter(s) in the array", (uint8_t *)__p, 2u);
      }
    }
    else
    {
      do
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v27 = 0;
        (*(void (**)(void **__return_ptr))(*a1[25] + 32))(__p);
        unint64_t v15 = (void *)HIBYTE(v27);
        char v16 = HIBYTE(v27);
        if (v27 < 0) {
          unint64_t v15 = __p[1];
        }
        if (v15)
        {
          int v17 = std::__tree<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(a1 + 33, a2, &v29);
          uint64_t v18 = std::__tree<std::__value_type<unsigned int,std::vector<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v17 + 5, a7, &v28);
          uint64_t v19 = v18;
          uint64_t v20 = v18[6];
          if (v20 >= v18[7])
          {
            uint64_t v22 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v18 + 5, (long long *)__p);
          }
          else
          {
            if (SHIBYTE(v27) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v18[6], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              long long v21 = *(_OWORD *)__p;
              v20[2] = v27;
              *(_OWORD *)uint64_t v20 = v21;
            }
            uint64_t v22 = (uint64_t)(v20 + 3);
            v19[6] = v20 + 3;
          }
          v19[6] = (uint64_t *)v22;
          char v16 = HIBYTE(v27);
        }
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        v14 += 160;
      }
      while (v14 != v13);
    }
  }
  else
  {
    unsigned int v23 = *v11;
    if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_223AF3000, v23, OS_LOG_TYPE_ERROR, "QoS: interface name is not defined", (uint8_t *)__p, 2u);
    }
  }
}

void sub_223B0FF34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  *(void *)(v16 + 48) = v17;
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::parseQoSPacketFilter_sync(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  uint64_t v9 = *a4;
  uint64_t v10 = a4[1];
  if (v9 != v10)
  {
    while (1)
    {
      if (DataIPFilter::empty((DataIPFilter *)v9) || *(_DWORD *)(v9 + 24) != 17) {
        goto LABEL_43;
      }
      if (a3)
      {
        if (!*(unsigned char *)(v9 + 136) || !*(unsigned char *)(v9 + 124)) {
          goto LABEL_43;
        }
        uint64_t v12 = *(_WORD **)(a5 + 8);
        unint64_t v11 = *(void *)(a5 + 16);
        if ((unint64_t)v12 >= v11)
        {
          uint64_t v16 = *(_WORD **)a5;
          uint64_t v17 = (uint64_t)v12 - *(void *)a5;
          if (v17 <= -3) {
            goto LABEL_48;
          }
          uint64_t v18 = v17 >> 1;
          unint64_t v19 = v11 - (void)v16;
          if (v19 <= (v17 >> 1) + 1) {
            unint64_t v20 = v18 + 1;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v19 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v21 = v20;
          }
          if (v21)
          {
            uint64_t v21 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v21);
            uint64_t v16 = *(_WORD **)a5;
            uint64_t v12 = *(_WORD **)(a5 + 8);
          }
          else
          {
            uint64_t v22 = 0;
          }
          uint64_t v27 = (_WORD *)(v21 + 2 * v18);
          *uint64_t v27 = *(_WORD *)(v9 + 122);
          unint64_t v15 = v27 + 1;
          while (v12 != v16)
          {
            __int16 v28 = *--v12;
            *--uint64_t v27 = v28;
          }
LABEL_40:
          *(void *)a5 = v27;
          *(void *)(a5 + 8) = v15;
          *(void *)(a5 + 16) = v21 + 2 * v22;
          if (v16) {
            operator delete(v16);
          }
          goto LABEL_42;
        }
        __int16 v13 = *(_WORD *)(v9 + 122);
      }
      else
      {
        if (!*(unsigned char *)(v9 + 80) || !*(unsigned char *)(v9 + 68)) {
          goto LABEL_43;
        }
        uint64_t v12 = *(_WORD **)(a5 + 8);
        unint64_t v14 = *(void *)(a5 + 16);
        if ((unint64_t)v12 >= v14)
        {
          uint64_t v16 = *(_WORD **)a5;
          uint64_t v23 = (uint64_t)v12 - *(void *)a5;
          if (v23 <= -3) {
LABEL_48:
          }
            std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
          uint64_t v24 = v23 >> 1;
          unint64_t v25 = v14 - (void)v16;
          if (v25 <= (v23 >> 1) + 1) {
            unint64_t v26 = v24 + 1;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v21 = v26;
          }
          if (v21)
          {
            uint64_t v21 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v21);
            uint64_t v16 = *(_WORD **)a5;
            uint64_t v12 = *(_WORD **)(a5 + 8);
          }
          else
          {
            uint64_t v22 = 0;
          }
          uint64_t v27 = (_WORD *)(v21 + 2 * v24);
          *uint64_t v27 = *(_WORD *)(v9 + 66);
          unint64_t v15 = v27 + 1;
          while (v12 != v16)
          {
            __int16 v29 = *--v12;
            *--uint64_t v27 = v29;
          }
          goto LABEL_40;
        }
        __int16 v13 = *(_WORD *)(v9 + 66);
      }
      *uint64_t v12 = v13;
      unint64_t v15 = v12 + 1;
LABEL_42:
      *(void *)(a5 + 8) = v15;
LABEL_43:
      v9 += 160;
      if (v9 == v10) {
        return;
      }
    }
  }
  unsigned int v30 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v31 = 0;
    _os_log_impl(&dword_223AF3000, v30, OS_LOG_TYPE_DEFAULT, "#I QoS: no RxFilter(s) in the array", v31, 2u);
  }
}

void non-virtual thunk to'SystemDeterminationManager::handleQualityOfServiceEstablished_sync(uint64_t a1, unint64_t a2, unint64_t a3)
{
}

BOOL DataIPFilter::empty(DataIPFilter *this)
{
  BOOL result = 0;
  if (!*((_DWORD *)this + 6) && !*((_DWORD *)this + 7) && !*((unsigned char *)this + 145) && !*((unsigned char *)this + 152))
  {
    if (!*((unsigned char *)this + 80)
      || (!*((unsigned char *)this + 56)
       || (*((char *)this + 55) < 0 ? (uint64_t v2 = *((void *)this + 5)) : (uint64_t v2 = *((unsigned __int8 *)this + 55)), !v2))
      && (!*((unsigned char *)this + 68) || !*((_WORD *)this + 33)))
    {
      if (!*((unsigned char *)this + 136)) {
        return 1;
      }
      if (!*((unsigned char *)this + 112)
        || (*((char *)this + 111) < 0 ? (uint64_t v3 = *((void *)this + 12)) : (uint64_t v3 = *((unsigned __int8 *)this + 111)), !v3))
      {
        if (!*((unsigned char *)this + 124) || !*((_WORD *)this + 61)) {
          return 1;
        }
      }
    }
  }
  return result;
}

void SystemDeterminationManager::handleAppIDChanged_sync(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  char v7 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  uint64_t v8 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I AppID: ID=%d", buf, 8u);
  }
  uint64_t v9 = *(void *)(a1 + 88);
  *(void *)unint64_t v20 = *(void *)(a1 + 80);
  *(void *)&v20[8] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  uint64_t v10 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, buf);
  if ((void *)(a1 + 112) == v10)
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    uint64_t v12 = v10[7];
    unint64_t v11 = (std::__shared_weak_count *)v10[8];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v24 < 0) {
    operator delete(*(void **)buf);
  }
  if (*(void *)&v20[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v20[8]);
  }
  if (v12)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v12 + 64))(&v18, v12);
    bzero(buf, 0x688uLL);
    (*(void (**)(unsigned char *__return_ptr))(*(void *)v18 + 456))(buf);
    if (a4)
    {
      int v13 = buf[1];
      buf[1] = a3;
    }
    else
    {
      int v13 = buf[0];
      buf[0] = a3;
    }
    if (v13 != a3)
    {
      uint64_t v16 = *v7;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = "IMS";
        *(_DWORD *)unint64_t v20 = 136315650;
        if (a4) {
          uint64_t v17 = "Emergency";
        }
        *(void *)&void v20[4] = v17;
        *(_WORD *)&v20[12] = 1024;
        *(_DWORD *)&v20[14] = v13;
        __int16 v21 = 1024;
        int v22 = a3;
        _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I %s AppID: changed %d -> %d", v20, 0x18u);
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v18 + 448))(v18, buf);
    }
    sd::RuntimeInfo::~RuntimeInfo((void **)buf);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  else
  {
    unint64_t v14 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = subscriber::asString();
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#N AppID: got ID, but no instance for %s. Bailing...", buf, 0xCu);
    }
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_223B1054C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleAppIDChanged_sync(uint64_t a1, uint64_t a2, int a3, int a4)
{
}

void SystemDeterminationManager::handleRFBandTypeChanged_sync(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  char v7 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  uint64_t v8 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = asString();
    _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I RFBand: Type = %s", (uint8_t *)buf, 0xCu);
  }
  std::string __p = 0;
  uint64_t v24 = 0;
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v25 = 0;
  *(void *)&buf[0] = v10;
  *((void *)&buf[0] + 1) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  if (*((void *)&buf[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf[0] + 1));
  }
  unint64_t v11 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, &__p);
  if ((void *)(a1 + 112) == v11)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v13 = v11[7];
    uint64_t v12 = (std::__shared_weak_count *)v11[8];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v13)
    {
      uint64_t v21 = 0;
      int v22 = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v13 + 64))(&v21, v13);
      bzero(buf, 0x688uLL);
      (*(void (**)(_OWORD *__return_ptr))(*(void *)v21 + 456))(buf);
      if (v29 != a3)
      {
        int v29 = a3;
        RegisteredNetworkInfo::operator=();
        int v28 = a4;
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v21 + 448))(v21, buf);
        if (v27 == a4) {
          (*(void (**)(uint64_t))(*(void *)v13 + 544))(v13);
        }
      }
      sd::RuntimeInfo::~RuntimeInfo((void **)buf);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      goto LABEL_26;
    }
  }
  unint64_t v14 = *v7;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = HIBYTE(v25);
    if (v25 < 0) {
      uint64_t v15 = v24;
    }
    p_p = (const char *)&__p;
    if (v25 < 0) {
      p_p = (const char *)__p;
    }
    if (v15) {
      uint64_t v17 = p_p;
    }
    else {
      uint64_t v17 = "<invalid>";
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = v17;
    _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#N RFBand: got Type, but no model for %s", (uint8_t *)buf, 0xCu);
  }
LABEL_26:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v18 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 128, &__p);
  if ((void *)(a1 + 136) != v18)
  {
    uint64_t v20 = v18[7];
    unint64_t v19 = (std::__shared_weak_count *)v18[8];
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v20)
    {
      uint64_t v21 = 0;
      int v22 = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v20 + 64))(&v21, v20);
      bzero(buf, 0x688uLL);
      (*(void (**)(_OWORD *__return_ptr))(*(void *)v21 + 456))(buf);
      if (v29 != a3)
      {
        int v29 = a3;
        RegisteredNetworkInfo::operator=();
        int v28 = a4;
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v21 + 448))(v21, buf);
        if (v27 == a4) {
          (*(void (**)(uint64_t))(*(void *)v20 + 544))(v20);
        }
      }
      sd::RuntimeInfo::~RuntimeInfo((void **)buf);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(__p);
  }
}

void sub_223B10A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleRFBandTypeChanged_sync(uint64_t a1, uint64_t a2, int a3, int a4)
{
}

void SystemDeterminationManager::handlePcscfListChanged_sync(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v8 = a1[11];
  *(void *)&long long __p = a1[10];
  *((void *)&__p + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v9 = isPresent();
  if (*((void *)&__p + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
  }
  if (v9)
  {
    uint64_t v10 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 13), (void *)a2);
    if (a1 + 14 == v10)
    {
      unint64_t v11 = 0;
    }
    else
    {
      uint64_t v12 = v10[7];
      unint64_t v11 = (std::__shared_weak_count *)v10[8];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v12)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        (*(void (**)(uint64_t, uint64_t, uint64_t, long long *, void, void))(*(void *)v12 + 464))(v12, a3, a4, &__p, 0, 0);
        if (v24 < 0) {
          operator delete((void *)__p);
        }
LABEL_33:
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        return;
      }
    }
    uint64_t v18 = a1[5];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(unsigned __int8 *)(a2 + 23);
      BOOL v20 = (v19 & 0x80u) != 0;
      if ((v19 & 0x80u) != 0) {
        uint64_t v19 = *(void *)(a2 + 8);
      }
      if (v20) {
        uint64_t v21 = *(const char **)a2;
      }
      else {
        uint64_t v21 = (const char *)a2;
      }
      if (v19) {
        int v22 = v21;
      }
      else {
        int v22 = "<invalid>";
      }
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v22;
      _os_log_impl(&dword_223AF3000, v18, OS_LOG_TYPE_DEFAULT, "#N PcscfList: got list, but no controller for %s. Bailing...", (uint8_t *)&__p, 0xCu);
    }
    goto LABEL_33;
  }
  uint64_t v13 = a1[5];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
    BOOL v15 = (v14 & 0x80u) != 0;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(a2 + 8);
    }
    if (v15) {
      uint64_t v16 = *(const char **)a2;
    }
    else {
      uint64_t v16 = (const char *)a2;
    }
    if (v14) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = "<invalid>";
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v17;
    _os_log_error_impl(&dword_223AF3000, v13, OS_LOG_TYPE_ERROR, "PcscfList: Unknown Personality: %s", (uint8_t *)&__p, 0xCu);
  }
}

void sub_223B10CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handlePcscfListChanged_sync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t SystemDeterminationManager::handleAwdRegTimeFresh(uint64_t a1, void *a2)
{
  v6[0] = (*(uint64_t (**)(void))(*(void *)*a2 + 336))(*a2);
  v6[1] = v4;
  HIDWORD(v6[0]) = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 512))(*a2, v4);
  return (*(uint64_t (**)(void, void *))(**(void **)(a1 + 184) + 48))(*(void *)(a1 + 184), v6);
}

uint64_t non-virtual thunk to'SystemDeterminationManager::handleAwdRegTimeFresh(uint64_t a1, void *a2)
{
  return SystemDeterminationManager::handleAwdRegTimeFresh(a1 - 56, a2);
}

void SystemDeterminationManager::handleDeviceIdChanged_sync(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)int v31 = a1[10];
  *(void *)&v31[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*(void *)&v31[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v31[8]);
  }
  uint64_t v8 = a1[5];
  if (v7)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
      BOOL v10 = (v9 & 0x80u) != 0;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(a2 + 8);
      }
      if (v10) {
        unint64_t v11 = *(const char **)a2;
      }
      else {
        unint64_t v11 = (const char *)a2;
      }
      if (v9) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = "<invalid>";
      }
      if (*((char *)a3 + 23) >= 0) {
        uint64_t v13 = a3;
      }
      else {
        uint64_t v13 = (uint64_t *)*a3;
      }
      *(_DWORD *)int v31 = 136315394;
      *(void *)&v31[4] = v12;
      *(_WORD *)&v31[12] = 2080;
      *(void *)&v31[14] = v13;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I DeviceId: ID for %s is %s", v31, 0x16u);
    }
    uint64_t v14 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 13), (void *)a2);
    if (a1 + 14 == v14)
    {
      uint64_t v17 = 0;
    }
    else
    {
      BOOL v15 = v14;
      uint64_t v16 = v14[7];
      uint64_t v17 = (std::__shared_weak_count *)v15[8];
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v16)
      {
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 400))(v16, a3);
        uint64_t v18 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 16), (void *)a2);
        if (a1 + 17 != v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = v18[7];
          uint64_t v21 = (std::__shared_weak_count *)v19[8];
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v20) {
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v20 + 400))(v20, a3);
          }
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
        }
LABEL_51:
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        return;
      }
    }
    unint64_t v26 = a1[5];
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = *(unsigned __int8 *)(a2 + 23);
      BOOL v28 = (v27 & 0x80u) != 0;
      if ((v27 & 0x80u) != 0) {
        uint64_t v27 = *(void *)(a2 + 8);
      }
      if (v28) {
        int v29 = *(const char **)a2;
      }
      else {
        int v29 = (const char *)a2;
      }
      if (v27) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = "<invalid>";
      }
      *(_DWORD *)int v31 = 136315138;
      *(void *)&v31[4] = v30;
      _os_log_impl(&dword_223AF3000, v26, OS_LOG_TYPE_DEFAULT, "#N DeviceId: No controller for %s. Bailing...", v31, 0xCu);
    }
    goto LABEL_51;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
    BOOL v23 = (v22 & 0x80u) != 0;
    if ((v22 & 0x80u) != 0) {
      uint64_t v22 = *(void *)(a2 + 8);
    }
    if (v23) {
      char v24 = *(const char **)a2;
    }
    else {
      char v24 = (const char *)a2;
    }
    if (v22) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = "<invalid>";
    }
    *(_DWORD *)int v31 = 136315138;
    *(void *)&v31[4] = v25;
    _os_log_error_impl(&dword_223AF3000, v8, OS_LOG_TYPE_ERROR, "DeviceId: Unknown Personality: %s", v31, 0xCu);
  }
}

void sub_223B110C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleDeviceIdChanged_sync(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void SystemDeterminationManager::revokeImsClientNetworkServices(SystemDeterminationManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
      if (v4)
      {
        if (std::__shared_weak_count::lock(v4)) {
          operator new();
        }
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

uint64_t **SystemDeterminationManager::setImsDataModes(uint64_t **this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v2[0] = xmmword_223B4C4C8;
  v2[1] = unk_223B4C4D8;
  uint64_t v3 = 0x1100000010;
  return std::__tree<DataMode>::__assign_unique<DataMode const*>(this + 27, (int *)v2, (int *)&v4);
}

uint64_t **SystemDeterminationManager::setImsVoiceDataModes(uint64_t **this)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  long long v2 = xmmword_223B4C4B0;
  return std::__tree<DataMode>::__assign_unique<DataMode const*>(this + 30, (int *)&v2, &v3);
}

BOOL SystemDeterminationManager::isImsDataMode(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 224);
  uint64_t v2 = a1 + 224;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = v2;
  do
  {
    int v6 = *(_DWORD *)(v3 + 28);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 28) > a2) {
LABEL_11:
  }
    uint64_t v5 = v2;
  return v5 != v2;
}

BOOL non-virtual thunk to'SystemDeterminationManager::isImsDataMode(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v2 = a1 + 168;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = v2;
  do
  {
    int v6 = *(_DWORD *)(v3 + 28);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 28) > a2) {
LABEL_11:
  }
    uint64_t v5 = v2;
  return v5 != v2;
}

BOOL SystemDeterminationManager::isImsVoiceDataMode(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 248);
  uint64_t v2 = a1 + 248;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = v2;
  do
  {
    int v6 = *(_DWORD *)(v3 + 28);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 28) > a2) {
LABEL_11:
  }
    uint64_t v5 = v2;
  return v5 != v2;
}

BOOL non-virtual thunk to'SystemDeterminationManager::isImsVoiceDataMode(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 192);
  uint64_t v2 = a1 + 192;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = v2;
  do
  {
    int v6 = *(_DWORD *)(v3 + 28);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *(_DWORD *)(v5 + 28) > a2) {
LABEL_11:
  }
    uint64_t v5 = v2;
  return v5 != v2;
}

void SystemDeterminationManager::notifyServicesOfRegistrationState(uint64_t a1, void *a2, _DWORD *a3, int a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v8 = (capabilities::ct *)(*(uint64_t (**)(void))(*(void *)*a2 + 72))();
  if (v8 == 1 && capabilities::ct::supportsSMSIMSStack(v8))
  {
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(__p) = 0;
    BOOL v10 = "#I IMSRegistrationState: Not reporting registration state";
    unint64_t v11 = v9;
    uint32_t v12 = 2;
LABEL_21:
    _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&__p, v12);
    return;
  }
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)*a2 + 352))(*a2);
  if (a3[2] == v14)
  {
    BOOL v16 = a3[3] == v15 || v14 == 0;
    if (v16 && a3[1] == HIDWORD(v13))
    {
      BOOL v23 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      (*(void (**)(void))(*(void *)*a2 + 400))(*a2);
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = asStringBool();
      BOOL v10 = "#I IMSRegistrationState: previous state same as current, isWifi: %s";
      unint64_t v11 = v23;
      uint32_t v12 = 12;
      goto LABEL_21;
    }
  }
  char v18 = (*(uint64_t (**)(void))(*(void *)*a2 + 400))(*a2);
  unsigned int v19 = a3[3];
  if (a4) {
    uint64_t v20 = v19 & 0xFFFFFFFD;
  }
  else {
    uint64_t v20 = v19;
  }
  uint64_t v21 = *(void *)(a1 + 152);
  (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 56))(&__p);
  (*(void (**)(uint64_t, long long *, void, uint64_t, void, void))(*(void *)v21 + 120))(v21, &__p, a3[2], v20, v18 & 1, a3[1]);
  if (v25 < 0) {
    operator delete((void *)__p);
  }
  (*(void (**)(void, _DWORD *))(*(void *)*a2 + 360))(*a2, a3);
  *(void *)&long long __p = (*(uint64_t (**)(void))(*(void *)*a2 + 352))(*a2);
  *((void *)&__p + 1) = v22;
  SystemDeterminationManager::printIRStatus(a1, (unsigned int *)&__p, (uint64_t)"IMSRegistrationState: ");
}

void sub_223B11730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::printIRStatus(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = sd::asString((sd *)*a2, v6);
    int v8 = 136315906;
    uint64_t v9 = a3;
    __int16 v10 = 2080;
    uint64_t v11 = v7;
    __int16 v12 = 2080;
    uint64_t v13 = sd::asString();
    __int16 v14 = 2080;
    uint64_t v15 = sd::asString();
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I %sSTATE SNAPSHOT[%s]  - Registered: %s, Services: %s", (uint8_t *)&v8, 0x2Au);
  }
}

void non-virtual thunk to'SystemDeterminationManager::notifyServicesOfRegistrationState(uint64_t a1, void *a2, _DWORD *a3, int a4)
{
}

uint64_t SystemDeterminationManager::getApplicationId(SystemDeterminationManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  uint64_t v5 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotIdEx();
  uint64_t v3 = (*(uint64_t (**)(SystemDeterminationManager *, void **))(*(void *)this + 160))(this, &__p);
  if (v7 < 0) {
    operator delete(__p);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v3;
}

void sub_223B118E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SystemDeterminationManager::getApplicationId(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 8;
  uint64_t v7 = a1;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_16getApplicationIdERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
  v9[3] = &__block_descriptor_tmp_205;
  v9[4] = v3;
  v9[5] = &v7;
  __int16 v10 = v9;
  uint64_t v4 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    unsigned __int8 v17 = 0;
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v12 = 0x40000000;
    uint64_t v13 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFhvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    __int16 v14 = &__block_descriptor_tmp_207;
    uint64_t v15 = &v17;
    uint64_t v16 = &v10;
    dispatch_async_and_wait(v4, &block);
  }
  else
  {
    unsigned __int8 v17 = 0;
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v12 = 0x40000000;
    uint64_t v13 = ___ZN8dispatch9sync_implIRU13block_pointerFhvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    __int16 v14 = &__block_descriptor_tmp_206;
    uint64_t v15 = &v17;
    uint64_t v16 = &v10;
    dispatch_sync(v4, &block);
  }
  uint64_t v5 = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

uint64_t SystemDeterminationManager::getApplicationId_sync(void *a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[11];
  *(void *)&buf[0] = a1[10];
  *((void *)&buf[0] + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  char v5 = isPresent();
  if (*((void *)&buf[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v5)
  {
    int v6 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 13), (void *)a2);
    if (a1 + 14 == v6)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v7 = v6;
      uint64_t v8 = v6[7];
      uint64_t v9 = (std::__shared_weak_count *)v7[8];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8)
      {
        uint64_t v22 = 0;
        BOOL v23 = 0;
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 64))(&v22);
        (*(void (**)(_OWORD *__return_ptr))(*(void *)v22 + 456))(buf);
        uint64_t v10 = LOBYTE(buf[0]);
        sd::RuntimeInfo::~RuntimeInfo((void **)buf);
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
LABEL_26:
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        return v10;
      }
    }
    uint64_t v12 = a1[5];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
      BOOL v14 = (v13 & 0x80u) != 0;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(a2 + 8);
      }
      if (v14) {
        uint64_t v15 = *(const char **)a2;
      }
      else {
        uint64_t v15 = (const char *)a2;
      }
      if (v13) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = "<invalid>";
      }
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = v16;
      _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#N ApplicationId: No instance for %s. Bailing...", (uint8_t *)buf, 0xCu);
    }
    uint64_t v10 = 255;
    goto LABEL_26;
  }
  uint64_t v11 = a1[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
    BOOL v19 = (v18 & 0x80u) != 0;
    if ((v18 & 0x80u) != 0) {
      uint64_t v18 = *(void *)(a2 + 8);
    }
    if (v19) {
      uint64_t v20 = *(const char **)a2;
    }
    else {
      uint64_t v20 = (const char *)a2;
    }
    if (v18) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = "<invalid>";
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = v21;
    _os_log_error_impl(&dword_223AF3000, v11, OS_LOG_TYPE_ERROR, "ApplicationId: Unknown Personality: %s", (uint8_t *)buf, 0xCu);
  }
  return 255;
}

void sub_223B11CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::setApplicationId_sync(void *a1, uint64_t a2, char a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)&buf[0] = a1[10];
  *((void *)&buf[0] + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*((void *)&buf[0] + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (v7)
  {
    uint64_t v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 13), (void *)a2);
    if (a1 + 14 == v8)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v9 = v8;
      uint64_t v10 = v8[7];
      uint64_t v11 = (std::__shared_weak_count *)v9[8];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v10)
      {
        uint64_t v22 = 0;
        BOOL v23 = 0;
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v10 + 64))(&v22);
        bzero(buf, 0x688uLL);
        (*(void (**)(_OWORD *__return_ptr))(*(void *)v22 + 456))(buf);
        LOBYTE(buf[0]) = a3;
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v22 + 448))(v22, buf);
        sd::RuntimeInfo::~RuntimeInfo((void **)buf);
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
LABEL_33:
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        return;
      }
    }
    unsigned __int8 v17 = a1[5];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
      BOOL v19 = (v18 & 0x80u) != 0;
      if ((v18 & 0x80u) != 0) {
        uint64_t v18 = *(void *)(a2 + 8);
      }
      if (v19) {
        uint64_t v20 = *(const char **)a2;
      }
      else {
        uint64_t v20 = (const char *)a2;
      }
      if (v18) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = "<invalid>";
      }
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = v21;
      _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#N ApplicationId: No instance for %s. Bailing...", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_33;
  }
  uint64_t v12 = a1[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    BOOL v14 = (v13 & 0x80u) != 0;
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    if (v14) {
      uint64_t v15 = *(const char **)a2;
    }
    else {
      uint64_t v15 = (const char *)a2;
    }
    if (v13) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = "<invalid>";
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = v16;
    _os_log_error_impl(&dword_223AF3000, v12, OS_LOG_TYPE_ERROR, "ApplicationId: Unknown Personality: %s", (uint8_t *)buf, 0xCu);
  }
}

void sub_223B11FAC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  sd::RuntimeInfo::~RuntimeInfo((void **)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

void SystemDeterminationManager::handleVoLTEFeatureSupportChanged_sync(void *a1, uint64_t a2, int a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)std::string buf = a1[10];
  *(void *)&uint8_t buf[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v7)
  {
    uint64_t v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 13), (void *)a2);
    if (a1 + 14 == v8)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v10 = v8[7];
      uint64_t v9 = (std::__shared_weak_count *)v8[8];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v10)
      {
        uint64_t v39 = 0;
        int v40 = 0;
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v10 + 64))(&v39, v10);
        os_log_t v37 = 0;
        uint32_t v38 = 0;
        (*(void (**)(_DWORD **__return_ptr))(*(void *)v39 + 160))(&v37);
        uint64_t v11 = v37;
        uint64_t v12 = a1[5];
        if (v37)
        {
          BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          BOOL v14 = v11;
          if (v13)
          {
            uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
            BOOL v16 = (v15 & 0x80u) != 0;
            if ((v15 & 0x80u) != 0) {
              uint64_t v15 = *(void *)(a2 + 8);
            }
            if (v16) {
              unsigned __int8 v17 = *(const char **)a2;
            }
            else {
              unsigned __int8 v17 = (const char *)a2;
            }
            if (v15) {
              uint64_t v18 = v17;
            }
            else {
              uint64_t v18 = "<invalid>";
            }
            uint64_t v19 = asString();
            uint64_t v20 = asString();
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&_OWORD buf[4] = v18;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v19;
            __int16 v42 = 2080;
            uint64_t v43 = v20;
            _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I VoLTEFeatureSupport: changing for '%s': %s->%s", buf, 0x20u);
            BOOL v14 = v37;
          }
          if (*v14 == a3)
          {
            uint64_t v21 = 0;
          }
          else
          {
            if (a3) {
              BOOL v32 = *v14 == 0;
            }
            else {
              BOOL v32 = 1;
            }
            uint64_t v21 = v32;
          }
          _DWORD *v14 = a3;
        }
        else
        {
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            uint64_t v33 = *(unsigned __int8 *)(a2 + 23);
            BOOL v34 = (v33 & 0x80u) != 0;
            if ((v33 & 0x80u) != 0) {
              uint64_t v33 = *(void *)(a2 + 8);
            }
            if (v34) {
              uint64_t v35 = *(const char **)a2;
            }
            else {
              uint64_t v35 = (const char *)a2;
            }
            if (v33) {
              uint64_t v36 = v35;
            }
            else {
              uint64_t v36 = "<invalid>";
            }
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&_OWORD buf[4] = v36;
            _os_log_error_impl(&dword_223AF3000, v12, OS_LOG_TYPE_ERROR, "VoLTEFeatureSupport: ImsFeature ptr is null for %s", buf, 0xCu);
          }
          uint64_t v21 = 0;
        }
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
        if (v11) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 576))(v10, v21);
        }
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
LABEL_59:
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        return;
      }
    }
    uint64_t v27 = a1[5];
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = *(unsigned __int8 *)(a2 + 23);
      BOOL v29 = (v28 & 0x80u) != 0;
      if ((v28 & 0x80u) != 0) {
        uint64_t v28 = *(void *)(a2 + 8);
      }
      if (v29) {
        uint64_t v30 = *(const char **)a2;
      }
      else {
        uint64_t v30 = (const char *)a2;
      }
      if (v28) {
        int v31 = v30;
      }
      else {
        int v31 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&_OWORD buf[4] = v31;
      _os_log_error_impl(&dword_223AF3000, v27, OS_LOG_TYPE_ERROR, "VoLTEFeatureSupport: No instance for %s", buf, 0xCu);
    }
    goto LABEL_59;
  }
  uint64_t v22 = a1[5];
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    uint64_t v23 = *(unsigned __int8 *)(a2 + 23);
    BOOL v24 = (v23 & 0x80u) != 0;
    if ((v23 & 0x80u) != 0) {
      uint64_t v23 = *(void *)(a2 + 8);
    }
    if (v24) {
      uint64_t v25 = *(const char **)a2;
    }
    else {
      uint64_t v25 = (const char *)a2;
    }
    if (v23) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&_OWORD buf[4] = v26;
    _os_log_error_impl(&dword_223AF3000, v22, OS_LOG_TYPE_ERROR, "VoLTEFeatureSupport: Unknown Personality: %s", buf, 0xCu);
  }
}

void sub_223B123BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleVoLTEFeatureSupportChanged_sync(uint64_t a1, uint64_t a2, int a3)
{
}

void SystemDeterminationManager::handleVoNRFeatureSupportChanged_sync(void *a1, uint64_t a2, int a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)std::string buf = a1[10];
  *(void *)&uint8_t buf[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v7)
  {
    uint64_t v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 13), (void *)a2);
    if (a1 + 14 == v8)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v10 = v8[7];
      uint64_t v9 = (std::__shared_weak_count *)v8[8];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v10)
      {
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v10 + 64))(&v40, v10);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v40 + 160))(&v38);
        uint64_t v11 = v38;
        uint64_t v12 = a1[5];
        if (v38)
        {
          BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
          uint64_t v14 = v11;
          if (v13)
          {
            uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
            BOOL v16 = (v15 & 0x80u) != 0;
            if ((v15 & 0x80u) != 0) {
              uint64_t v15 = *(void *)(a2 + 8);
            }
            if (v16) {
              unsigned __int8 v17 = *(const char **)a2;
            }
            else {
              unsigned __int8 v17 = (const char *)a2;
            }
            if (v15) {
              uint64_t v18 = v17;
            }
            else {
              uint64_t v18 = "<invalid>";
            }
            uint64_t v19 = asString();
            uint64_t v20 = asString();
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&_OWORD buf[4] = v18;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v19;
            __int16 v43 = 2080;
            uint64_t v44 = v20;
            _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I VoNRFeatureSupport: changing for '%s': %s->%s", buf, 0x20u);
            uint64_t v14 = v38;
          }
          int v21 = *(_DWORD *)(v14 + 8);
          if (v21 == a3)
          {
            uint64_t v22 = 0;
          }
          else
          {
            if (a3) {
              BOOL v33 = v21 == 0;
            }
            else {
              BOOL v33 = 1;
            }
            uint64_t v22 = v33;
          }
          *(_DWORD *)(v14 + 8) = a3;
        }
        else
        {
          if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
          {
            uint64_t v34 = *(unsigned __int8 *)(a2 + 23);
            BOOL v35 = (v34 & 0x80u) != 0;
            if ((v34 & 0x80u) != 0) {
              uint64_t v34 = *(void *)(a2 + 8);
            }
            if (v35) {
              uint64_t v36 = *(const char **)a2;
            }
            else {
              uint64_t v36 = (const char *)a2;
            }
            if (v34) {
              os_log_t v37 = v36;
            }
            else {
              os_log_t v37 = "<invalid>";
            }
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&_OWORD buf[4] = v37;
            _os_log_error_impl(&dword_223AF3000, v12, OS_LOG_TYPE_ERROR, "VoNRFeatureSupport: ImsFeature ptr is null for %s", buf, 0xCu);
          }
          uint64_t v22 = 0;
        }
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        if (v11) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 576))(v10, v22);
        }
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
LABEL_59:
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        return;
      }
    }
    uint64_t v28 = a1[5];
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = *(unsigned __int8 *)(a2 + 23);
      BOOL v30 = (v29 & 0x80u) != 0;
      if ((v29 & 0x80u) != 0) {
        uint64_t v29 = *(void *)(a2 + 8);
      }
      if (v30) {
        int v31 = *(const char **)a2;
      }
      else {
        int v31 = (const char *)a2;
      }
      if (v29) {
        BOOL v32 = v31;
      }
      else {
        BOOL v32 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&_OWORD buf[4] = v32;
      _os_log_error_impl(&dword_223AF3000, v28, OS_LOG_TYPE_ERROR, "VoNRFeatureSupport: No instance for %s", buf, 0xCu);
    }
    goto LABEL_59;
  }
  uint64_t v23 = a1[5];
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
    BOOL v25 = (v24 & 0x80u) != 0;
    if ((v24 & 0x80u) != 0) {
      uint64_t v24 = *(void *)(a2 + 8);
    }
    if (v25) {
      uint64_t v26 = *(const char **)a2;
    }
    else {
      uint64_t v26 = (const char *)a2;
    }
    if (v24) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&_OWORD buf[4] = v27;
    _os_log_error_impl(&dword_223AF3000, v23, OS_LOG_TYPE_ERROR, "VoNRFeatureSupport: Unknown Personality: %s", buf, 0xCu);
  }
}

void sub_223B127DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleVoNRFeatureSupportChanged_sync(uint64_t a1, uint64_t a2, int a3)
{
}

void SystemDeterminationManager::setVoWiFiFeatureSupported_sync(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 64))(&v27);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v27 + 160))(&v25);
  uint64_t v6 = v25;
  if (*(unsigned __int8 *)(v25 + 16) == a3) {
    goto LABEL_26;
  }
  char v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr))(*(void *)v27 + 56))(__p);
    unint64_t v8 = v24;
    if ((v24 & 0x80u) == 0)
    {
      uint64_t v9 = __p;
    }
    else
    {
      unint64_t v8 = (unint64_t)__p[1];
      uint64_t v9 = (void **)__p[0];
    }
    if (v8) {
      uint64_t v10 = (const char *)v9;
    }
    else {
      uint64_t v10 = "<invalid>";
    }
    uint64_t v11 = asStringBool();
    uint64_t v12 = asStringBool();
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&_OWORD buf[4] = v10;
    __int16 v30 = 2080;
    uint64_t v31 = v11;
    __int16 v32 = 2080;
    uint64_t v33 = v12;
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I VoWiFiFeatureSupport: changing for '%s': %s->%s", buf, 0x20u);
    if ((char)v24 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = v25;
  }
  *(unsigned char *)(v6 + 16) = a3;
  if ((a3 & 1) == 0) {
    *(unsigned char *)(v6 + 17) = 0;
  }
  SystemDeterminationManager::evaluateWifiKeepAliveStatus_sync(a1, (uint64_t)a2);
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 80));
  uint64_t v14 = ServiceMap;
  uint64_t v15 = *(void *)(MEMORY[0x263F035F0] + 8);
  if (v15 < 0)
  {
    BOOL v16 = (unsigned __int8 *)(v15 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = 5381;
    do
    {
      uint64_t v15 = v17;
      unsigned int v18 = *v16++;
      uint64_t v17 = (33 * v17) ^ v18;
    }
    while (v18);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v15;
  uint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v14[1].__m_.__sig, (unint64_t *)buf);
  if (!v19)
  {
    uint64_t v21 = 0;
LABEL_22:
    std::mutex::unlock(v14);
    uint64_t v20 = 0;
    char v22 = 1;
    if (!v21) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v21 = v19[3];
  uint64_t v20 = (std::__shared_weak_count *)v19[4];
  if (!v20) {
    goto LABEL_22;
  }
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v14);
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  char v22 = 0;
  if (v21) {
LABEL_23:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 72))(v21, a3);
LABEL_24:
  if ((v22 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
LABEL_26:
  (*(void (**)(void, void))(*(void *)*a2 + 576))(*a2, 0);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_223B12B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::evaluateWifiKeepAliveStatus_sync(uint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v33 = 0;
  (*(void (**)(void **__return_ptr))(**(void **)a2 + 64))(&__p);
  if (__p && (*(unsigned int (**)(void *))(*(void *)__p + 176))(__p))
  {
    (*(void (**)(long long *__return_ptr))(*(void *)__p + 160))(&v35);
    BOOL v3 = *(unsigned char *)(v35 + 16) != 0;
    if (*((void *)&v35 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 80));
  char v5 = ServiceMap;
  uint64_t v6 = *(void *)(MEMORY[0x263F035C0] + 8);
  if (v6 < 0)
  {
    char v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  std::string __p = (void *)v6;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v5[1].__m_.__sig, (unint64_t *)&__p);
  if (v10)
  {
    uint64_t v12 = (GestaltUtilityInterface *)v10[3];
    uint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      char v13 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v11 = 0;
  char v13 = 1;
LABEL_16:
  int isWatch = GestaltUtilityInterface::isWatch(v12);
  if ((v13 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (!isWatch) {
    return;
  }
  uint64_t v15 = (_OWORD *)(a1 + 440);
  uint64_t v16 = *(void *)(a1 + 440);
  if (v3)
  {
    if (v16) {
      return;
    }
    uint64_t v17 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 80));
    unsigned int v18 = v17;
    uint64_t v19 = *(void *)(MEMORY[0x263F03590] + 8);
    if (v19 < 0)
    {
      uint64_t v20 = (unsigned __int8 *)(v19 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v21 = 5381;
      do
      {
        uint64_t v19 = v21;
        unsigned int v22 = *v20++;
        uint64_t v21 = (33 * v21) ^ v22;
      }
      while (v22);
    }
    std::mutex::lock(v17);
    std::string __p = (void *)v19;
    uint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v18[1].__m_.__sig, (unint64_t *)&__p);
    if (v23)
    {
      uint64_t v25 = v23[3];
      unsigned __int8 v24 = (std::__shared_weak_count *)v23[4];
      if (v24)
      {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v18);
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        char v26 = 0;
LABEL_34:
        std::string::basic_string[abi:ne180100]<0>(&__p, "SystemDetermination-WifiKeepAlive");
        (*(void (**)(long long *__return_ptr, uint64_t, void **, uint64_t))(*(void *)v25 + 48))(&v35, v25, &__p, 1);
        long long v30 = v35;
        long long v35 = 0uLL;
        uint64_t v31 = *(std::__shared_weak_count **)(a1 + 448);
        *uint64_t v15 = v30;
        if (v31)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          if (*((void *)&v35 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
          }
        }
        if (v34 < 0) {
          operator delete(__p);
        }
        if ((v26 & 1) == 0) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        if (*(void *)v15)
        {
          uint64_t v28 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            uint64_t v29 = "#I WifiKeepAlive: enabled. WiFiManager client created to keep WiFi up";
            goto LABEL_44;
          }
        }
        return;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    std::mutex::unlock(v18);
    unsigned __int8 v24 = 0;
    char v26 = 1;
    goto LABEL_34;
  }
  if (v16)
  {
    uint64_t v27 = *(std::__shared_weak_count **)(a1 + 448);
    *(void *)uint64_t v15 = 0;
    *(void *)(a1 + 448) = 0;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    uint64_t v28 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      uint64_t v29 = "#I WifiKeepAlive: disabled";
LABEL_44:
      _os_log_impl(&dword_223AF3000, v28, OS_LOG_TYPE_DEFAULT, v29, (uint8_t *)&__p, 2u);
    }
  }
}

void sub_223B12F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v15 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::handleVoWiFiProvChanged_sync(SystemDeterminationManager *a1, uint64_t a2, _DWORD *a3, int *a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v8 = *((void *)a1 + 11);
  *(void *)std::string buf = *((void *)a1 + 10);
  *(void *)&uint8_t buf[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v9 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v9)
  {
    uint64_t v10 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)a1 + 104, (void *)a2);
    if ((void *)((char *)a1 + 112) == v10)
    {
      char v13 = 0;
      *(_OWORD *)std::string buf = 0uLL;
    }
    else
    {
      uint64_t v11 = v10;
      uint64_t v12 = v10[7];
      char v13 = (std::__shared_weak_count *)v11[8];
      *(void *)std::string buf = v12;
      *(void *)&uint8_t buf[8] = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v12)
      {
        long long v29 = 0uLL;
        uint64_t v14 = (capabilities::ct *)(*(void *(**)(long long *__return_ptr))(*(void *)v12 + 64))(&v29);
        if (capabilities::ct::getRadioModuleType(v14) == 2) {
          (*(void (**)(void))(*(void *)v29 + 608))(v29);
        }
        char v15 = *((void *)a1 + 5);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = 136315138;
          uint64_t v28 = asString();
          _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I VoWiFiProv: New configuration Source: %s", (uint8_t *)&v27, 0xCu);
        }
        SystemDeterminationManager::setVoWiFiFeatureSupported_sync((uint64_t)a1, buf, *a4 != 0);
        if ((*(unsigned int (**)(void))(*(void *)v29 + 64))(v29) == 1)
        {
          int v16 = *a4;
          if (*a3 != *a4 && (*a3 == 2 || v16 == 2)) {
            SystemDeterminationManager::onThumperFeatureChange_sync(a1, buf, v16 == 2);
          }
        }
        SystemDeterminationManager::evaluateTelephonyStatusIfWatch_sync(a1);
        if (*((void *)&v29 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
        }
LABEL_42:
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        return;
      }
    }
    unsigned int v22 = *((void *)a1 + 5);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(unsigned __int8 *)(a2 + 23);
      BOOL v24 = (v23 & 0x80u) != 0;
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *(void *)(a2 + 8);
      }
      if (v24) {
        uint64_t v25 = *(const char **)a2;
      }
      else {
        uint64_t v25 = (const char *)a2;
      }
      if (v23) {
        char v26 = v25;
      }
      else {
        char v26 = "<invalid>";
      }
      LODWORD(v29) = 136315138;
      *(void *)((char *)&v29 + 4) = v26;
      _os_log_impl(&dword_223AF3000, v22, OS_LOG_TYPE_DEFAULT, "#N VoWiFiProv: No instance for %s. Bailing...", (uint8_t *)&v29, 0xCu);
    }
    goto LABEL_42;
  }
  uint64_t v17 = *((void *)a1 + 5);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
    BOOL v19 = (v18 & 0x80u) != 0;
    if ((v18 & 0x80u) != 0) {
      uint64_t v18 = *(void *)(a2 + 8);
    }
    if (v19) {
      uint64_t v20 = *(const char **)a2;
    }
    else {
      uint64_t v20 = (const char *)a2;
    }
    if (v18) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&_OWORD buf[4] = v21;
    _os_log_error_impl(&dword_223AF3000, v17, OS_LOG_TYPE_ERROR, "VoWiFiProv: Unknown Personality: %s", buf, 0xCu);
  }
}

void sub_223B13290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::onThumperFeatureChange_sync(void *a1, void *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[5];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    char v7 = "OFF";
    if (a3) {
      char v7 = "ON";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I ThumperFeature: is %s", (uint8_t *)&buf, 0xCu);
  }
  (*(void (**)(void, uint64_t))(*(void *)*a2 + 232))(*a2, a3);
  uint64_t v15 = 0;
  int v16 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 64))(&v15);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 120))(v15) != 3)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)*a2 + 128))(&buf);
    (*(void (**)(void))(*(void *)buf + 64))(buf);
    if (*((void *)&buf + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
    }
  }
  (*(void (**)(void))(*(void *)*a2 + 584))(*a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 736))(v15, 1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 744))(v15, 3);
  (*(void (**)(void, const char *, uint64_t, void))(*(void *)*a2 + 528))(*a2, "ThumperFeature", 3, 0);
  SystemDeterminationManager::checkBasebandAssertionIfInWiFiCallingOnlyMode_sync((uint64_t)a1, &v15);
  if (a3)
  {
    (*(void (**)(void, uint64_t))(*(void *)*a2 + 192))(*a2, 1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 736))(v15, 3);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 736))(v15, 12);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 200))(v15, 1);
    (*(void (**)(void, const char *, uint64_t))(*(void *)*a2 + 520))(*a2, "ThumperFeature", 3);
  }
  else
  {
    long long buf = 0uLL;
    uint64_t v18 = 0;
    uint64_t v8 = (std::__shared_weak_count *)a1[11];
    uint64_t v14 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    PersonalityIdFromSlotId();
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    SystemDeterminationManager::evaluateSimFiles_sync(a1, (uint64_t)&buf);
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)buf);
    }
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v15 + 528))(&buf);
  sd::UEInfo::clear((sd::UEInfo *)buf);
  if (*((void *)&buf + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
  }
  uint64_t v9 = *a2;
  (*(void (**)(long long *__return_ptr))(*(void *)v15 + 88))(&buf);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)buf + 304))(buf);
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 112))(v9, v10);
  if (*((void *)&buf + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
  }
  if (v11) {
    (*(void (**)(void, void))(*(void *)*a2 + 576))(*a2, 0);
  }
  uint64_t v12 = a1[19];
  (*(void (**)(long long *__return_ptr))(*(void *)v15 + 56))(&buf);
  int v13 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v12 + 256))(v12, &buf);
  SystemDeterminationManager::evaluateTTYMode((uint64_t)a1, a2, v13);
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)buf);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
}

void sub_223B1386C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::evaluateTelephonyStatusIfWatch_sync(SystemDeterminationManager *this)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  if (capabilities::ct::getBasebandBootStrategy(this) == 2)
  {
    uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
    uint64_t v31 = *((void *)this + 10);
    __int16 v32 = v2;
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    PersonalityIdFromSlotId();
    BOOL v3 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)this + 104, &buf);
    if ((void *)((char *)this + 112) == v3)
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v33 = 0;
      char v34 = 0;
    }
    else
    {
      uint64_t v5 = v3[7];
      uint64_t v4 = (std::__shared_weak_count *)v3[8];
      uint64_t v33 = v5;
      char v34 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    if (v37 < 0) {
      operator delete((void *)buf);
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (!v5)
    {
      uint64_t v10 = *((void *)this + 5);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#N evaluateTelephonyStatusIfWatch_sync: No controller instance. Bailing...", (uint8_t *)&buf, 2u);
      }
      goto LABEL_59;
    }
    uint64_t v31 = 0;
    __int16 v32 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v5 + 64))(&v31, v5);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v31 + 496))(v31))
    {
      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v5 + 72))(&buf, v5);
      int v7 = (*(uint64_t (**)(void))(*(void *)buf + 264))(buf);
      if (*((void *)&buf + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
      }
      if (v7)
      {
        int v8 = (*(uint64_t (**)(void))(**((void **)this + 19) + 480))(*((void *)this + 19));
        if ((((*(unsigned int (**)(void))(**((void **)this + 19) + 208))(*((void *)this + 19)) ^ 1 | v8) & 1) == 0
          && ((*(uint64_t (**)(uint64_t))(*(void *)v31 + 400))(v31) & 1) == 0)
        {
          uint64_t v9 = *((void *)this + 5);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I TelephonyStatus: Do not de-register in HPM mode", (uint8_t *)&buf, 2u);
          }
          (*(void (**)(uint64_t))(*(void *)v5 + 504))(v5);
LABEL_56:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          uint64_t v4 = v34;
LABEL_59:
          if (v4) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v4);
          }
          return;
        }
        int v11 = *((void *)this + 5);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I TelephonyStatus: Exit HPM mode", (uint8_t *)&buf, 2u);
        }
        (*(void (**)(uint64_t))(*(void *)v5 + 512))(v5);
      }
    }
    int v12 = (*(uint64_t (**)(void))(**((void **)this + 19) + 200))(*((void *)this + 19));
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v5 + 64))(&buf, v5);
    int v13 = SystemDeterminationManager::checkBasebandAssertionIfInWiFiCallingOnlyMode_sync((uint64_t)this, &buf);
    if (*((void *)&buf + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
    }
    uint64_t v14 = *((void *)this + 5);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = "NOT ";
      if (v13) {
        uint64_t v15 = "";
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v15;
      _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#I TelephonyStatus: Baseband assertion %srequired", (uint8_t *)&buf, 0xCu);
    }
    SystemDeterminationManager::evaluateTelephonyStatusHelper_sync((uint64_t)this, &v33, v12);
    uint64_t v29 = 0;
    long long v30 = 0;
    ServiceMap = (std::mutex *)Registry::getServiceMap(*((Registry **)this + 10));
    uint64_t v17 = ServiceMap;
    unint64_t v18 = *(void *)(MEMORY[0x263F03558] + 8);
    if ((v18 & 0x8000000000000000) != 0)
    {
      uint64_t v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v20 = 5381;
      do
      {
        unint64_t v18 = v20;
        unsigned int v21 = *v19++;
        uint64_t v20 = (33 * v20) ^ v21;
      }
      while (v21);
    }
    std::mutex::lock(ServiceMap);
    unint64_t v35 = v18;
    unsigned int v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v17[1].__m_.__sig, &v35);
    if (v22)
    {
      uint64_t v24 = v22[3];
      uint64_t v23 = (std::__shared_weak_count *)v22[4];
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v17);
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        char v25 = 0;
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    std::mutex::unlock(v17);
    uint64_t v23 = 0;
    char v25 = 1;
LABEL_43:
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v24 + 144))(&buf, v24);
    char v26 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)this + 104, &buf);
    if ((void *)((char *)this + 112) == v26)
    {
      int v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      long long v30 = 0;
    }
    else
    {
      uint64_t v28 = v26[7];
      int v27 = (std::__shared_weak_count *)v26[8];
      uint64_t v29 = v28;
      long long v30 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    if (v37 < 0)
    {
      operator delete((void *)buf);
      if (v25)
      {
LABEL_49:
        if (!v28)
        {
LABEL_54:
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          goto LABEL_56;
        }
LABEL_53:
        SystemDeterminationManager::evaluateTelephonyStatusHelper_sync((uint64_t)this, &v29, v12);
        goto LABEL_54;
      }
    }
    else if (v25)
    {
      goto LABEL_49;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    if (!v28) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  uint64_t v6 = *((void *)this + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I TelephonyStatus: Ignoring!", (uint8_t *)&buf, 2u);
  }
}

void sub_223B13F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleVoWiFiProvChanged_sync(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
}

void SystemDeterminationManager::handleLazuliInfoReady_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (***v14)(uint64_t *__return_ptr, void, uint64_t);
  char v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  BOOL v21;
  const char *v22;
  const char *v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  BOOL v32;
  const char *v33;
  const char *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  NSObject *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  long long v42;
  NSObject *v43;
  uint64_t v44;
  BOOL v45;
  const char *v46;
  const char *v47;
  const char *v48;
  NSObject *v49;
  uint64_t v50;
  BOOL v51;
  const char *v52;
  const char *v53;
  capabilities::ct *v54;
  std::string::size_type size;
  char v56;
  capabilities::ct *v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  BOOL v64;
  const char *v65;
  const char *v66;
  std::__shared_weak_count *v67;
  std::__shared_weak_count *v68;
  void *__p;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  dispatch_object_t object;
  long long v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint8_t v78[4];
  const char *v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  char v89;
  char v90;
  std::string buf;
  std::__shared_weak_count *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  char v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x263EF8340];
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 80));
  int v7 = ServiceMap;
  std::string::size_type v8 = *(void *)(MEMORY[0x263F03558] + 8);
  if ((v8 & 0x8000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      std::string::size_type v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  buf.__r_.__value_.__r.__words[0] = v8;
  int v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v7[1].__m_.__sig, (unint64_t *)&buf);
  if (v12)
  {
    uint64_t v14 = (void (***)(uint64_t *__return_ptr, void, uint64_t))v12[3];
    int v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      uint64_t v15 = 0;
      if (!v14) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  int v13 = 0;
  uint64_t v15 = 1;
  if (!v14)
  {
LABEL_7:
    int v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_223AF3000, v16, OS_LOG_TYPE_ERROR, "LazuliInfoReady: No PersonalityShop", (uint8_t *)&buf, 2u);
    }
    goto LABEL_144;
  }
LABEL_11:
  v76 = 0;
  uint64_t v77 = 0;
  (**v14)(&v76, v14, a2);
  if (v76)
  {
    if (*(unsigned char *)(v76 + 49) == 2)
    {
      uint64_t v17 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        goto LABEL_142;
      }
      unint64_t v18 = asString();
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v18;
      uint64_t v19 = "LazuliInfoReady: Wrong Personality type: %s";
      goto LABEL_25;
    }
    uint64_t v24 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, (void *)a2);
    if ((void *)(a1 + 112) == v24)
    {
      char v26 = 0;
    }
    else
    {
      char v25 = v24[7];
      char v26 = (std::__shared_weak_count *)v24[8];
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v25)
      {
        int v27 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 128, (void *)a2);
        if ((void *)(a1 + 136) == v27)
        {
          unint64_t v35 = 0;
          uint64_t v75 = 0uLL;
        }
        else
        {
          uint64_t v29 = v27[7];
          uint64_t v28 = (std::__shared_weak_count *)v27[8];
          *(void *)&uint64_t v75 = v29;
          *((void *)&v75 + 1) = v28;
          if (v28) {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v29)
          {
            uint64_t v68 = v28;
            goto LABEL_105;
          }
          unint64_t v35 = v28;
        }
        long long v67 = v26;
        uint64_t v36 = *(void *)(a1 + 96);
        char v37 = *(NSObject **)(a1 + 24);
        dispatch_object_t object = v37;
        if (v37) {
          dispatch_retain(v37);
        }
        uint64_t v38 = *(std::__shared_weak_count **)(a1 + 16);
        if (!v38 || (uint64_t v39 = *(void *)(a1 + 8), (v40 = std::__shared_weak_count::lock(v38)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v41 = v39 + 56;
        if (!v39) {
          uint64_t v41 = 0;
        }
        v80 = v41;
        unsigned int v81 = v40;
        (*(void (**)(std::string *__return_ptr, uint64_t, dispatch_object_t *, uint64_t *, uint64_t))(*(void *)v36 + 56))(&buf, v36, &object, &v80, a2);
        __int16 v42 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v75 = v42;
        uint64_t v68 = (std::__shared_weak_count *)*((void *)&v42 + 1);
        if (v35)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          if (buf.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
          }
        }
        char v26 = v67;
        if (v81) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v81);
        }
        uint64_t v29 = v42;
        if (object) {
          dispatch_release(object);
        }
        if (!(void)v42)
        {
          uint64_t v49 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            long long v50 = *(unsigned __int8 *)(a2 + 23);
            uint64_t v51 = (v50 & 0x80u) != 0;
            if ((v50 & 0x80u) != 0) {
              long long v50 = *(void *)(a2 + 8);
            }
            if (v51) {
              uint64_t v52 = *(const char **)a2;
            }
            else {
              uint64_t v52 = (const char *)a2;
            }
            if (v50) {
              v53 = v52;
            }
            else {
              v53 = "<invalid>";
            }
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v53;
            _os_log_error_impl(&dword_223AF3000, v49, OS_LOG_TYPE_ERROR, "LazuliInfoReady: Couldn't create lazuli controller for: %s", (uint8_t *)&buf, 0xCu);
          }
          goto LABEL_138;
        }
        std::pair<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>::pair[abi:ne180100]<PersonalityID const&,std::shared_ptr<sd::IMSSubscriberControllerInterface>&,0>(&buf, (long long *)a2, (std::string::size_type *)&v75);
        std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::__emplace_unique_key_args<PersonalityID,std::pair<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>((uint64_t **)(a1 + 128), &buf, (uint64_t)&buf);
        if (v92) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v92);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        __int16 v43 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v44 = *(unsigned __int8 *)(a2 + 23);
          uint64_t v45 = (v44 & 0x80u) != 0;
          if ((v44 & 0x80u) != 0) {
            uint64_t v44 = *(void *)(a2 + 8);
          }
          if (v45) {
            BOOL v46 = *(const char **)a2;
          }
          else {
            BOOL v46 = (const char *)a2;
          }
          if (v44) {
            uint64_t v47 = v46;
          }
          else {
            uint64_t v47 = "<invalid>";
          }
          if (*(unsigned char *)(v76 + 49)) {
            std::string v48 = "Thumper";
          }
          else {
            std::string v48 = (const char *)subscriber::asString();
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v47;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v48;
          _os_log_impl(&dword_223AF3000, v43, OS_LOG_TYPE_DEFAULT, "#I LazuliInfoReady: Bootstrapping lazuli controller: %s - %s", (uint8_t *)&buf, 0x16u);
          char v26 = v67;
        }
        (*(void (**)(void, uint64_t))(*(void *)v42 + 16))(v42, a1 + 152);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v54 = (capabilities::ct *)(*(void *(**)(std::string *__return_ptr, void))(*(void *)v42 + 64))(&buf, v42);
        if (capabilities::ct::getRadioModuleType(v54) == 2) {
          (*(void (**)(std::string::size_type))(*(void *)buf.__r_.__value_.__l.__data_ + 608))(buf.__r_.__value_.__r.__words[0]);
        }
        if (buf.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
        }
        (*(void (**)(void))(*(void *)v42 + 168))(v42);
        memset(&buf, 0, sizeof(buf));
        (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 152) + 384))(&buf);
        std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        std::__split_buffer<std::string>::pointer v56 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = buf.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          (*(void (**)(void, std::string *))(*(void *)v42 + 400))(v42, &buf);
          std::__split_buffer<std::string>::pointer v56 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        if (v56 < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(std::string *__return_ptr, void))(*(void *)v42 + 128))(&buf, v42);
        if (buf.__r_.__value_.__r.__words[0])
        {
          if ((*(unsigned int (**)(std::string::size_type, void))(*(void *)buf.__r_.__value_.__l.__data_
                                                                              + 152))(buf.__r_.__value_.__r.__words[0], 0))
          {
            v80 = 0;
            unsigned int v81 = 0;
            (*(void (**)(uint64_t *__return_ptr, void))(*(void *)v42 + 64))(&v80, v42);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v80 + 736))(v80, 5);
            if (v81) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v81);
            }
          }
        }
        if (buf.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
        }
LABEL_105:
        v72 = 0;
        int v73 = 0;
        uint64_t v57 = (capabilities::ct *)(*(void *(**)(uint64_t *__return_ptr, uint64_t))(*(void *)v29 + 64))(&v72, v29);
        if (capabilities::ct::getRadioModuleType(v57) == 2) {
          (*(void (**)(uint64_t))(*(void *)v72 + 608))(v72);
        }
        unsigned int v58 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_223AF3000, v58, OS_LOG_TYPE_DEFAULT, "#I LazuliInfoReady: Configuration change", (uint8_t *)&buf, 2u);
        }
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v29 + 128))(&buf, v29);
        if (buf.__r_.__value_.__r.__words[0]) {
          (*(void (**)(std::string::size_type, uint64_t))(*(void *)buf.__r_.__value_.__l.__data_ + 168))(buf.__r_.__value_.__r.__words[0], a3 + 120);
        }
        if (buf.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
        }
        (*(void (**)(uint64_t))(*(void *)v29 + 656))(v29);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v72 + 552))(v72, a3);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v72 + 200))(v72, 1);
        bzero(&buf, 0x320uLL);
        RegisteredNetworkInfo::RegisteredNetworkInfo((RegisteredNetworkInfo *)&buf);
        bzero(&v80, 0x320uLL);
        std::string v59 = *(void *)(a1 + 152);
        uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 72))(v72);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v59 + 424))(&v80, v59, v60);
        std::string __p = 0;
        v70 = 0;
        uint64_t v71 = 0;
        RegisteredNetworkInfo::compare((uint64_t *)&__p, (RegisteredNetworkInfo *)&buf, (const RegisteredNetworkInfo *)&v80);
        uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 72))(v72);
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t *))(*(void *)a1 + 328))(a1, v61, &__p, &v80);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 192))(v29, 1);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v72 + 736))(v72, 8);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v72 + 736))(v72, 3);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v72 + 736))(v72, 12);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v72 + 752))(v72, 1) & 1) == 0) {
          (*(void (**)(uint64_t))(*(void *)v29 + 248))(v29);
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v29 + 56))(v29))
        {
          long long v62 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v63 = *(unsigned __int8 *)(a2 + 23);
            long long v64 = (v63 & 0x80u) != 0;
            if ((v63 & 0x80u) != 0) {
              __int16 v63 = *(void *)(a2 + 8);
            }
            if (v64) {
              unint64_t v65 = *(const char **)a2;
            }
            else {
              unint64_t v65 = (const char *)a2;
            }
            if (v63) {
              long long v66 = v65;
            }
            else {
              long long v66 = "<invalid>";
            }
            *(_DWORD *)v78 = 136315138;
            uint64_t v79 = v66;
            _os_log_impl(&dword_223AF3000, v62, OS_LOG_TYPE_DEFAULT, "#N LazuliInfoReady: controller is shutting down - defer restart, accountId=%s", v78, 0xCu);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 152))(v29, 1);
        }
        else
        {
          (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v29 + 520))(v29, "LazuliFeature", 3);
        }
        if (__p)
        {
          v70 = __p;
          operator delete(__p);
        }
        if (v90 && v89 < 0) {
          operator delete(v88);
        }
        std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v87);
        std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v86);
        std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v85);
        std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v84);
        std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v83);
        std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v82);
        if (v100 && v99 < 0) {
          operator delete(v98);
        }
        std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v97);
        std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v96);
        std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v95);
        std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v94);
        std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v93);
        std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&buf.__r_.__value_.__r.__words[2]);
        if (v73) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v73);
        }
LABEL_138:
        if (v68) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v68);
        }
LABEL_140:
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        goto LABEL_142;
      }
    }
    long long v30 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(unsigned __int8 *)(a2 + 23);
      __int16 v32 = (v31 & 0x80u) != 0;
      if ((v31 & 0x80u) != 0) {
        uint64_t v31 = *(void *)(a2 + 8);
      }
      if (v32) {
        uint64_t v33 = *(const char **)a2;
      }
      else {
        uint64_t v33 = (const char *)a2;
      }
      if (v31) {
        char v34 = v33;
      }
      else {
        char v34 = "<invalid>";
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
      _os_log_impl(&dword_223AF3000, v30, OS_LOG_TYPE_DEFAULT, "#N DeviceId: No IMS controller for %s. Bailing...", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_140;
  }
  uint64_t v17 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
    goto LABEL_142;
  }
  uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
  unsigned int v21 = (v20 & 0x80u) != 0;
  if ((v20 & 0x80u) != 0) {
    uint64_t v20 = *(void *)(a2 + 8);
  }
  if (v21) {
    unsigned int v22 = *(const char **)a2;
  }
  else {
    unsigned int v22 = (const char *)a2;
  }
  if (v20) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = "<invalid>";
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
  uint64_t v19 = "LazuliInfoReady: Unknown Personality: %s";
LABEL_25:
  _os_log_error_impl(&dword_223AF3000, v17, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&buf, 0xCu);
LABEL_142:
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
LABEL_144:
  if ((v15 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_223B14D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_object_t object, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if ((v21 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SystemDeterminationManager::handleLazuliInfoReady_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void SystemDeterminationManager::handleLazuliInfoRemoved_sync(void *a1, uint64_t a2)
{
  _OWORD v35[2] = *(const void **)MEMORY[0x263EF8340];
  uint64_t v4 = a1[11];
  *(void *)long long buf = a1[10];
  *(void *)&uint8_t buf[8] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  char v5 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v5)
  {
    uint64_t v6 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 16), (void *)a2);
    if (a1 + 17 == v6)
    {
      int v7 = 0;
    }
    else
    {
      uint64_t v8 = v6[7];
      int v7 = (std::__shared_weak_count *)v6[8];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8)
      {
        uint64_t v25 = 0;
        char v26 = 0;
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v8 + 64))(&v25, v8);
        v35[0] = 0;
        *(_OWORD *)long long buf = 0u;
        *(_OWORD *)uint64_t v28 = 0u;
        long long v29 = 0u;
        *(_OWORD *)long long v30 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v32 = 0u;
        memset(v33, 0, sizeof(v33));
        int v34 = 0;
        (*(void (**)(void))(*(void *)v25 + 552))();
        ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(v35);
        v23[0] = (char *)&v33[1] + 8;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
        v23[0] = v33;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
        if (SHIBYTE(v32) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v30[0]);
        }
        if (SHIBYTE(v29) < 0) {
          operator delete(v28[1]);
        }
        if (SHIBYTE(v28[0]) < 0) {
          operator delete(*(void **)buf);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 744))(v25, 3);
        uint64_t v9 = v25;
        memset(buf, 0, sizeof(buf));
        v28[0] = 0;
        std::string::basic_string[abi:ne180100]<0>(v23, "");
        (*(void (**)(uint64_t, uint8_t *, void **, void, void))(*(void *)v9 + 600))(v9, buf, v23, 0, 0);
        if (v24 < 0) {
          operator delete(v23[0]);
        }
        v23[0] = buf;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 744))(v25, 10);
        uint64_t v10 = dispatch_group_create();
        unsigned int v11 = v10;
        dispatch_group_t group = v10;
        if (v10)
        {
          dispatch_retain(v10);
          dispatch_group_enter(v11);
        }
        (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v8 + 32))(v8, &group);
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        if (v11) {
          dispatch_release(v11);
        }
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
LABEL_50:
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        return;
      }
    }
    uint64_t v17 = a1[5];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
      BOOL v19 = (v18 & 0x80u) != 0;
      if ((v18 & 0x80u) != 0) {
        uint64_t v18 = *(void *)(a2 + 8);
      }
      if (v19) {
        uint64_t v20 = *(const char **)a2;
      }
      else {
        uint64_t v20 = (const char *)a2;
      }
      if (v18) {
        char v21 = v20;
      }
      else {
        char v21 = "<invalid>";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&_OWORD buf[4] = v21;
      _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#N LazuliInfoRemoved: No instance for %s. Bailing...", buf, 0xCu);
    }
    goto LABEL_50;
  }
  int v12 = a1[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
    BOOL v14 = (v13 & 0x80u) != 0;
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(a2 + 8);
    }
    if (v14) {
      uint64_t v15 = *(const char **)a2;
    }
    else {
      uint64_t v15 = (const char *)a2;
    }
    if (v13) {
      int v16 = v15;
    }
    else {
      int v16 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&_OWORD buf[4] = v16;
    _os_log_error_impl(&dword_223AF3000, v12, OS_LOG_TYPE_ERROR, "LazuliInfoRemoved: Unknown Personality: %s", buf, 0xCu);
  }
}

void sub_223B152B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_group_t group, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v20) {
    dispatch_release(v20);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void LazuliImsInfo::~LazuliImsInfo(LazuliImsInfo *this)
{
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)this + 19);
  uint64_t v2 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)((char *)this + 96);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void non-virtual thunk to'SystemDeterminationManager::handleLazuliInfoRemoved_sync(uint64_t a1, uint64_t a2)
{
}

uint64_t SystemDeterminationManager::handleControllerShutdown(uint64_t result, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    uint64_t v6 = v3;
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
    if (v4)
    {
      if (std::__shared_weak_count::lock(v4)) {
        operator new();
      }
    }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  return result;
}

uint64_t non-virtual thunk to'SystemDeterminationManager::handleControllerShutdown(uint64_t a1, uint64_t a2, int a3)
{
  return SystemDeterminationManager::handleControllerShutdown(a1 - 56, a2, a3);
}

void SystemDeterminationManager::setThumperPrimaryConfigured(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
      if (v4)
      {
        if (std::__shared_weak_count::lock(v4)) {
          operator new();
        }
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void SystemDeterminationManager::setVoLTEAttachAPN(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  (*(void (**)(unsigned char *__return_ptr))(**(void **)a2 + 160))(__p);
  int v4 = *(unsigned __int8 *)(*(void *)__p + 4);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  char v5 = *(std::__shared_weak_count **)(a1 + 88);
  int v27 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(unsigned char *__return_ptr))(**(void **)a2 + 56))(__p);
  uint64_t v6 = PersonalityIDToSimSlot();
  if (v30 < 0) {
    operator delete(*(void **)__p);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  int v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), v6);
  uint64_t v8 = v7;
  if (v7)
  {
    uint64_t v9 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = "enable";
      if (!v4) {
        uint64_t v10 = "disable";
      }
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "setVoLTEAttachAPN";
      *(_WORD *)&unsigned char __p[12] = 2080;
      *(void *)&__p[14] = v10;
      _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: VoLTE attach APN is supported, %s using VoLTE attach APN", __p, 0x16u);
    }
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 80));
  int v12 = ServiceMap;
  uint64_t v13 = *(void *)(MEMORY[0x263F035D8] + 8);
  if (v13 < 0)
  {
    BOOL v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v15 = 5381;
    do
    {
      uint64_t v13 = v15;
      unsigned int v16 = *v14++;
      uint64_t v15 = (33 * v15) ^ v16;
    }
    while (v16);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string __p = v13;
  uint64_t v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v12[1].__m_.__sig, (unint64_t *)__p);
  if (v17)
  {
    uint64_t v19 = v17[3];
    uint64_t v18 = (std::__shared_weak_count *)v17[4];
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v12);
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      char v20 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  std::mutex::unlock(v12);
  uint64_t v18 = 0;
  char v20 = 1;
LABEL_22:
  if (v4) {
    uint64_t v21 = 3;
  }
  else {
    uint64_t v21 = 4;
  }
  unsigned int v22 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v22 || (uint64_t v23 = *(void *)(a1 + 8), (v24 = std::__shared_weak_count::lock(v22)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v25 = v24;
  atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  char v26 = operator new(0x20uLL);
  *char v26 = &unk_26D7445B0;
  v26[1] = v8;
  v26[2] = v23;
  v26[3] = v25;
  v28[3] = v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v19 + 64))(v19, v6, v21, v28);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v28);
  if ((v20 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
}

void sub_223B159D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a11);
  if ((v21 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SystemDeterminationManager::setVoLTEAttachAPN(uint64_t a1, uint64_t a2)
{
}

uint64_t SystemDeterminationManager::getImsFeature(SystemDeterminationManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  char v5 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotIdEx();
  uint64_t v3 = (*(uint64_t (**)(SystemDeterminationManager *, void **))(*(void *)this + 216))(this, &__p);
  if (v7 < 0) {
    operator delete(__p);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v3;
}

void sub_223B15B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL SystemDeterminationManager::getImsFeature(void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[11];
  *(void *)&long long block = a1[10];
  *((void *)&block + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  char v5 = isPresent();
  if (*((void *)&block + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&block + 1));
  }
  if (v5)
  {
    BOOL v14 = a1;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 0x40000000;
    v16[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNS1_13getImsFeatureERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
    void v16[3] = &__block_descriptor_tmp_211;
    v16[4] = a1 + 1;
    v16[5] = &v14;
    uint64_t v17 = v16;
    uint64_t v8 = a1[3];
    if (a1[4])
    {
      char v18 = 0;
      *(void *)&long long block = MEMORY[0x263EF8330];
      *((void *)&block + 1) = 0x40000000;
      char v20 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
      char v21 = &__block_descriptor_tmp_213;
      unsigned int v22 = &v18;
      uint64_t v23 = &v17;
      dispatch_async_and_wait(v8, &block);
    }
    else
    {
      char v18 = 0;
      *(void *)&long long block = MEMORY[0x263EF8330];
      *((void *)&block + 1) = 0x40000000;
      char v20 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
      char v21 = &__block_descriptor_tmp_212;
      unsigned int v22 = &v18;
      uint64_t v23 = &v17;
      dispatch_sync(v8, &block);
    }
    BOOL v7 = v18 != 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      BOOL v11 = (v10 & 0x80u) != 0;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a2 + 8);
      }
      if (v11) {
        int v12 = *(const std::string::value_type **)a2;
      }
      else {
        int v12 = (const std::string::value_type *)a2;
      }
      if (v10) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = "<invalid>";
      }
      LODWORD(block) = 136315138;
      *(void *)((char *)&block + 4) = v13;
      _os_log_error_impl(&dword_223AF3000, v6, OS_LOG_TYPE_ERROR, "ImsFeature: Unknown Personality: %s", (uint8_t *)&block, 0xCu);
    }
    return 0;
  }
  return v7;
}

void sub_223B15D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

uint64_t SystemDeterminationManager::handleRegisteredNetworkInfo_sync(subscriber::SimSlot,std::vector<RegisteredNetworkInfoChange> const&,RegisteredNetworkInfo const&)::$_0::~$_0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 792) && *(char *)(a1 + 759) < 0) {
    operator delete(*(void **)(a1 + 736));
  }
  std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100](a1 + 608);
  std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100](a1 + 464);
  std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100](a1 + 328);
  std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100](a1 + 224);
  std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100](a1 + 120);
  std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100](a1 + 24);
  return a1;
}

uint64_t non-virtual thunk to'SystemDeterminationManager::handleRegisteredNetworkInfo_sync(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4)
{
  return SystemDeterminationManager::handleRegisteredNetworkInfo_sync(a1 - 48, a2, a3, a4);
}

void SystemDeterminationManager::getCellAccessTypeField(SystemDeterminationManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  uint64_t v3 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  (*(void (**)(SystemDeterminationManager *, void **))(*(void *)this + 176))(this, &__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_223B15ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::getCellAccessTypeField(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)&long long block = a1[10];
  *((void *)&block + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*((void *)&block + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&block + 1));
  }
  if (v7)
  {
    uint64_t v15 = a1;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 0x40000000;
    v17[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_22getCellAccessTypeFieldERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
    v17[3] = &__block_descriptor_tmp_214;
    v17[4] = a1 + 1;
    v17[5] = &v15;
    char v18 = v17;
    uint64_t v9 = a1[3];
    uint64_t v10 = MEMORY[0x263EF8330];
    if (a1[4])
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(void *)&long long block = v10;
      *((void *)&block + 1) = 0x40000000;
      char v20 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      char v21 = &__block_descriptor_tmp_203;
      unsigned int v22 = a3;
      uint64_t v23 = &v18;
      dispatch_async_and_wait(v9, &block);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(void *)&long long block = v10;
      *((void *)&block + 1) = 0x40000000;
      char v20 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      char v21 = &__block_descriptor_tmp_202;
      unsigned int v22 = a3;
      uint64_t v23 = &v18;
      dispatch_sync(v9, &block);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      BOOL v12 = (v11 & 0x80u) != 0;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      if (v12) {
        uint64_t v13 = *(const std::string::value_type **)a2;
      }
      else {
        uint64_t v13 = (const std::string::value_type *)a2;
      }
      if (v11) {
        BOOL v14 = v13;
      }
      else {
        BOOL v14 = "<invalid>";
      }
      LODWORD(block) = 136315138;
      *(void *)((char *)&block + 4) = v14;
      _os_log_error_impl(&dword_223AF3000, v8, OS_LOG_TYPE_ERROR, "CellAccessType: Unknown Personality: %s", (uint8_t *)&block, 0xCu);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_223B16164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void SystemDeterminationManager::getCellAccessInfo(SystemDeterminationManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  uint64_t v3 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  (*(void (**)(SystemDeterminationManager *, void **))(*(void *)this + 192))(this, &__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_223B16224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::getCellAccessInfo(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)&long long block = a1[10];
  *((void *)&block + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*((void *)&block + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&block + 1));
  }
  if (v7)
  {
    uint64_t v15 = a1;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 0x40000000;
    v17[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_17getCellAccessInfoERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
    v17[3] = &__block_descriptor_tmp_215;
    v17[4] = a1 + 1;
    v17[5] = &v15;
    char v18 = v17;
    uint64_t v9 = a1[3];
    uint64_t v10 = MEMORY[0x263EF8330];
    if (a1[4])
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(void *)&long long block = v10;
      *((void *)&block + 1) = 0x40000000;
      char v20 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      char v21 = &__block_descriptor_tmp_203;
      unsigned int v22 = a3;
      uint64_t v23 = &v18;
      dispatch_async_and_wait(v9, &block);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(void *)&long long block = v10;
      *((void *)&block + 1) = 0x40000000;
      char v20 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      char v21 = &__block_descriptor_tmp_202;
      unsigned int v22 = a3;
      uint64_t v23 = &v18;
      dispatch_sync(v9, &block);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      BOOL v12 = (v11 & 0x80u) != 0;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      if (v12) {
        uint64_t v13 = *(const std::string::value_type **)a2;
      }
      else {
        uint64_t v13 = (const std::string::value_type *)a2;
      }
      if (v11) {
        BOOL v14 = v13;
      }
      else {
        BOOL v14 = "<invalid>";
      }
      LODWORD(block) = 136315138;
      *(void *)((char *)&block + 4) = v14;
      _os_log_error_impl(&dword_223AF3000, v8, OS_LOG_TYPE_ERROR, "CellAccessInfo: Unknown Personality: %s", (uint8_t *)&block, 0xCu);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_223B164B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void SystemDeterminationManager::getWifiAccessTypeField(SystemDeterminationManager *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  uint64_t v8 = *((void *)this + 10);
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  char v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)this + 104, &__p);
  if ((void *)((char *)this + 112) == v5)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = v5[7];
    uint64_t v6 = (std::__shared_weak_count *)v5[8];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v7)
  {
    std::string __p = 0;
    uint64_t v11 = 0;
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 64))(&__p, v7);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)__p + 88))(&v8);
    (*(void (**)(uint64_t))(*(void *)v8 + 104))(v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v7)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_223B16644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::getWifiAccessInfo(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)long long buf = a1[10];
  *(void *)&uint8_t buf[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v7)
  {
    uint64_t v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 13), (void *)a2);
    if (a1 + 14 == v8)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v9 = v8;
      uint64_t v10 = v8[7];
      uint64_t v11 = (std::__shared_weak_count *)v9[8];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v10)
      {
        *(_OWORD *)long long buf = 0uLL;
        (*(void (**)(uint8_t *__return_ptr))(*(void *)v10 + 64))(buf);
        (*(void (**)(uint64_t *__return_ptr))(**(void **)buf + 88))(&v22);
        (*(void (**)(uint64_t))(*(void *)v22 + 208))(v22);
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
LABEL_28:
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        return;
      }
    }
    uint64_t v13 = a1[5];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
      BOOL v15 = (v14 & 0x80u) != 0;
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(a2 + 8);
      }
      if (v15) {
        unsigned int v16 = *(const char **)a2;
      }
      else {
        unsigned int v16 = (const char *)a2;
      }
      if (v14) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = "<invalid>";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&_OWORD buf[4] = v17;
      _os_log_impl(&dword_223AF3000, v13, OS_LOG_TYPE_DEFAULT, "#I WifiAccessInfo: No instance for %s. Bailing...", buf, 0xCu);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_28;
  }
  char v12 = a1[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
    BOOL v19 = (v18 & 0x80u) != 0;
    if ((v18 & 0x80u) != 0) {
      uint64_t v18 = *(void *)(a2 + 8);
    }
    if (v19) {
      char v20 = *(const char **)a2;
    }
    else {
      char v20 = (const char *)a2;
    }
    if (v18) {
      char v21 = v20;
    }
    else {
      char v21 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&_OWORD buf[4] = v21;
    _os_log_error_impl(&dword_223AF3000, v12, OS_LOG_TYPE_ERROR, "WifiAccessInfo: Unknown Personality: %s", buf, 0xCu);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
}

void sub_223B16910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::initWatchdog(dispatch_queue_t *this)
{
  dispatch_source_t v2 = dispatch_source_create(MEMORY[0x263EF8400], 2uLL, 0, this[3]);
  uint64_t v3 = this[53];
  this[53] = v2;
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[2];
  if (!v4 || (dispatch_queue_t v5 = this[1], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  uint64_t v9 = this[53];
  handler[0] = MEMORY[0x263EF8330];
  handler[1] = 1174405120;
  handler[2] = ___ZN26SystemDeterminationManager12initWatchdogEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_0;
  handler[4] = this;
  handler[5] = v5;
  uint64_t v13 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  dispatch_source_set_event_handler(v9, handler);
  uint64_t v10 = this[53];
  dispatch_time_t v11 = dispatch_time(0x8000000000000000, 0);
  dispatch_source_set_timer(v10, v11, 0x61C9F36800uLL, 0x3B9ACA00uLL);
  dispatch_activate(this[53]);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v7);
}

uint64_t __copy_helper_block_e8_40c51_ZTSNSt3__18weak_ptrI26SystemDeterminationManagerEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c51_ZTSNSt3__18weak_ptrI26SystemDeterminationManagerEE(uint64_t a1)
{
  BOOL v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void SystemDeterminationManager::handleSSPTransportUpdate(void *a1, uint64_t a2, char a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)long long buf = a1[10];
  *(void *)&uint8_t buf[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v7)
  {
    *(void *)long long buf = a1;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&buf[8], *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)a2;
      uint64_t v18 = *(void *)(a2 + 16);
    }
    char v19 = a3;
    uint64_t v13 = (std::__shared_weak_count *)a1[2];
    if (v13)
    {
      uint64_t v14 = (std::__shared_weak_count *)a1[1];
      BOOL v15 = std::__shared_weak_count::lock(v13);
      if (v15)
      {
        v20[0] = v14;
        v20[1] = v15;
        atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        unsigned int v16 = (std::__shared_weak_count *)a1[2];
        if (v16)
        {
          if (std::__shared_weak_count::lock(v16)) {
            operator new();
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    BOOL v10 = (v9 & 0x80u) != 0;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (v10) {
      dispatch_time_t v11 = *(const std::string::value_type **)a2;
    }
    else {
      dispatch_time_t v11 = (const std::string::value_type *)a2;
    }
    if (v9) {
      char v12 = v11;
    }
    else {
      char v12 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&_OWORD buf[4] = v12;
    _os_log_error_impl(&dword_223AF3000, v8, OS_LOG_TYPE_ERROR, "SSPTransport: Unknown Personality: %s", buf, 0xCu);
  }
}

void sub_223B16D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void SystemDeterminationManager::handleCallWaitingStatusUpdate(void *a1, uint64_t a2, char a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)long long buf = a1[10];
  *(void *)&uint8_t buf[8] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v7)
  {
    *(void *)long long buf = a1;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&buf[8], *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)a2;
      uint64_t v18 = *(void *)(a2 + 16);
    }
    char v19 = a3;
    uint64_t v13 = (std::__shared_weak_count *)a1[2];
    if (v13)
    {
      uint64_t v14 = (std::__shared_weak_count *)a1[1];
      BOOL v15 = std::__shared_weak_count::lock(v13);
      if (v15)
      {
        v20[0] = v14;
        v20[1] = v15;
        atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        unsigned int v16 = (std::__shared_weak_count *)a1[2];
        if (v16)
        {
          if (std::__shared_weak_count::lock(v16)) {
            operator new();
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    BOOL v10 = (v9 & 0x80u) != 0;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (v10) {
      dispatch_time_t v11 = *(const std::string::value_type **)a2;
    }
    else {
      dispatch_time_t v11 = (const std::string::value_type *)a2;
    }
    if (v9) {
      char v12 = v11;
    }
    else {
      char v12 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&_OWORD buf[4] = v12;
    _os_log_error_impl(&dword_223AF3000, v8, OS_LOG_TYPE_ERROR, "CallWaitingStatus: Unknown Personality: %s", buf, 0xCu);
  }
}

void sub_223B1701C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void SystemDeterminationManager::handleStateDump(capabilities::ct *a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (capabilities::ct::getRadioModuleType(a1) == 2)
  {
    uint64_t v4 = *((void *)a1 + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&_OWORD buf[4] = 10;
      _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I State dump requested. Delaying for %u seconds and then dumping CSI logs!", buf, 8u);
    }
    uint64_t v5 = *((void *)a1 + 19);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    RequestDumpStatePayload::RequestDumpStatePayload();
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 360))(v5, buf);
    if (v8 < 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_223B171C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void non-virtual thunk to'SystemDeterminationManager::handleStateDump(uint64_t a1, uint64_t a2)
{
}

void SystemDeterminationManager::publicIdentityFromImsi(SystemDeterminationManager *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  uint64_t v3 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotIdEx();
  (*(void (**)(SystemDeterminationManager *, void **))(*(void *)this + 144))(this, &__p);
  if (v5 < 0) {
    operator delete(__p);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_223B172A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::publicIdentityFromImsi(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)&long long block = a1[10];
  *((void *)&block + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*((void *)&block + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&block + 1));
  }
  if (v7)
  {
    BOOL v15 = a1;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 0x40000000;
    v17[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_22publicIdentityFromImsiERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
    v17[3] = &__block_descriptor_tmp_216;
    v17[4] = a1 + 1;
    v17[5] = &v15;
    uint64_t v18 = v17;
    uint64_t v9 = a1[3];
    uint64_t v10 = MEMORY[0x263EF8330];
    if (a1[4])
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(void *)&long long block = v10;
      *((void *)&block + 1) = 0x40000000;
      char v20 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      uint64_t v21 = &__block_descriptor_tmp_203;
      uint64_t v22 = a3;
      uint64_t v23 = &v18;
      dispatch_async_and_wait(v9, &block);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      *(void *)&long long block = v10;
      *((void *)&block + 1) = 0x40000000;
      char v20 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      uint64_t v21 = &__block_descriptor_tmp_202;
      uint64_t v22 = a3;
      uint64_t v23 = &v18;
      dispatch_sync(v9, &block);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    char v8 = a1[5];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      BOOL v12 = (v11 & 0x80u) != 0;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      if (v12) {
        uint64_t v13 = *(const std::string::value_type **)a2;
      }
      else {
        uint64_t v13 = (const std::string::value_type *)a2;
      }
      if (v11) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = "<invalid>";
      }
      LODWORD(block) = 136315138;
      *(void *)((char *)&block + 4) = v14;
      _os_log_error_impl(&dword_223AF3000, v8, OS_LOG_TYPE_ERROR, "Identity: Unknown Personality: %s", (uint8_t *)&block, 0xCu);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_223B1753C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

uint64_t SystemDeterminationManager::isCountryOfOriginationAcceptable_sync(SystemDeterminationManager *this)
{
  if (capabilities::ct::getBasebandBootStrategy(this) == 2 && *((unsigned char *)this + 433))
  {
    if (*((char *)this + 343) < 0)
    {
      if (*((void *)this + 41)) {
        return 1;
      }
    }
    else if (*((unsigned char *)this + 343))
    {
      return 1;
    }
  }
  return 0;
}

BOOL SystemDeterminationManager::sendRequestCountryOfOrigination(SystemDeterminationManager *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (SystemDeterminationManager::isCountryOfOriginationAcceptable_sync(this))
  {
    uint64_t v2 = *((void *)this + 5);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = (void *)((char *)this + 320);
      if (*((char *)this + 343) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      LODWORD(v17) = 136315138;
      *(void *)((char *)&v17 + 4) = v3;
      _os_log_impl(&dword_223AF3000, v2, OS_LOG_TYPE_DEFAULT, "#I CountryOfOrigination: Skip requesting country of origination. Using current IP based country: '%s'", (uint8_t *)&v17, 0xCu);
    }
    return 1;
  }
  if (!*((unsigned char *)this + 344))
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(*((Registry **)this + 10));
    char v5 = ServiceMap;
    uint64_t v6 = *(void *)(MEMORY[0x263F035F0] + 8);
    if (v6 < 0)
    {
      char v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v8 = 5381;
      do
      {
        uint64_t v6 = v8;
        unsigned int v9 = *v7++;
        uint64_t v8 = (33 * v8) ^ v9;
      }
      while (v9);
    }
    std::mutex::lock(ServiceMap);
    *(void *)&long long v17 = v6;
    uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v5[1].__m_.__sig, (unint64_t *)&v17);
    if (v10)
    {
      uint64_t v11 = v10[3];
      BOOL v12 = (std::__shared_weak_count *)v10[4];
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v5);
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        char v13 = 0;
        if (!v11)
        {
LABEL_13:
          uint64_t v14 = *((void *)this + 5);
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            if (v13) {
              return v11 != 0;
            }
LABEL_25:
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            return v11 != 0;
          }
          LOWORD(v17) = 0;
          _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#I CountryOfOrigination: No CountryDeterminationInterface to query for country code", (uint8_t *)&v17, 2u);
          if ((v13 & 1) == 0) {
            goto LABEL_25;
          }
          return v11 != 0;
        }
LABEL_20:
        *((unsigned char *)this + 344) = 1;
        (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v11 + 96))(&v17, v11);
        unsigned int v16 = (void **)((char *)this + 320);
        if (*((char *)this + 343) < 0) {
          operator delete(*v16);
        }
        *(_OWORD *)unsigned int v16 = v17;
        *((void *)this + 42) = v18;
        if ((v13 & 1) == 0) {
          goto LABEL_25;
        }
        return v11 != 0;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    std::mutex::unlock(v5);
    BOOL v12 = 0;
    char v13 = 1;
    if (!v11) {
      goto LABEL_13;
    }
    goto LABEL_20;
  }
  return 1;
}

void sub_223B177E0(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::requestCountryOfOrigination(SystemDeterminationManager *a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)a1 + 11);
  *(void *)long long buf = *((void *)a1 + 10);
  *(void *)&uint8_t buf[8] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  char v5 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v5)
  {
    uint64_t v6 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)a1 + 104, (void *)a2);
    if ((void *)((char *)a1 + 112) != v6)
    {
      uint64_t v8 = v6[7];
      char v7 = (std::__shared_weak_count *)v6[8];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8 && SystemDeterminationManager::sendRequestCountryOfOrigination(a1))
      {
        *(_OWORD *)long long buf = 0uLL;
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v8 + 64))(buf, v8);
        (*(void (**)(void, void))(**(void **)buf + 216))(*(void *)buf, 0);
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v9 = (std::__shared_weak_count *)*((void *)a1 + 2);
        if (v9)
        {
          uint64_t v10 = std::__shared_weak_count::lock(v9);
          if (v10)
          {
            atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
            uint64_t v11 = (std::__shared_weak_count *)*((void *)a1 + 2);
            if (v11)
            {
              if (std::__shared_weak_count::lock(v11)) {
                operator new();
              }
            }
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
  else
  {
    BOOL v12 = *((void *)a1 + 5);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
      BOOL v14 = (v13 & 0x80u) != 0;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(a2 + 8);
      }
      if (v14) {
        BOOL v15 = *(const char **)a2;
      }
      else {
        BOOL v15 = (const char *)a2;
      }
      if (v13) {
        unsigned int v16 = v15;
      }
      else {
        unsigned int v16 = "<invalid>";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&_OWORD buf[4] = v16;
      _os_log_error_impl(&dword_223AF3000, v12, OS_LOG_TYPE_ERROR, "CountryOfOrigination: Unknown Personality: %s", buf, 0xCu);
    }
  }
}

void sub_223B17ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::requestCountryOfOrigination(uint64_t a1, uint64_t a2)
{
}

void SystemDeterminationManager::handleCountryOfOrigination_timer_sync(SystemDeterminationManager *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  char v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)((char *)this + 320);
    if (*((char *)this + 343) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    LODWORD(v9) = 136315138;
    *(void *)((char *)&v9 + 4) = v3;
    _os_log_impl(&dword_223AF3000, v2, OS_LOG_TYPE_DEFAULT, "#I CountryOfOrigination: Location based country determination timer fired. Use IP based country: %s", (uint8_t *)&v9, 0xCu);
  }
  uint64_t v4 = (SystemDeterminationManager *)*((void *)this + 13);
  if (v4 != (SystemDeterminationManager *)((char *)this + 112))
  {
    do
    {
      uint64_t v5 = *((void *)v4 + 7);
      long long v9 = 0uLL;
      (*(void (**)(long long *__return_ptr))(*(void *)v5 + 64))(&v9);
      if (((*(uint64_t (**)(void))(*(void *)v9 + 224))(v9) & 1) == 0) {
        SystemDeterminationManager::handleCountryOfOrigination((uint64_t)this, (void *)v4 + 7, (uint64_t)this + 320);
      }
      if (*((void *)&v9 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
      }
      uint64_t v6 = (SystemDeterminationManager *)*((void *)v4 + 1);
      if (v6)
      {
        do
        {
          char v7 = v6;
          uint64_t v6 = *(SystemDeterminationManager **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          char v7 = (SystemDeterminationManager *)*((void *)v4 + 2);
          BOOL v8 = *(void *)v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v7;
    }
    while (v7 != (SystemDeterminationManager *)((char *)this + 112));
  }
}

void sub_223B17CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

uint64_t SystemDeterminationManager::handleCountryOfOrigination(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 352);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 80);
    if (v6)
    {
      *(void *)(v5 + 80) = 0;
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  MEMORY[0x223CBBD60](&v22);
  std::locale::locale(&v23, &v22);
  int v7 = *(char *)(a3 + 23);
  if (v7 >= 0) {
    BOOL v8 = (char *)a3;
  }
  else {
    BOOL v8 = *(char **)a3;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  int v10 = *(char *)(a1 + 319);
  if (v10 >= 0) {
    uint64_t v11 = (char *)(a1 + 296);
  }
  else {
    uint64_t v11 = *(char **)(a1 + 296);
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 319);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 304);
  }
  if (v9) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    uint64_t v15 = v12 - 1;
    uint64_t v16 = v9 - 1;
    long long v17 = v11;
    uint64_t v18 = v8;
    while (boost::algorithm::is_iequal::operator()<char,char>(&v23, v18, v17))
    {
      ++v18;
      ++v17;
      if (v16)
      {
        uint64_t v19 = v15--;
        --v16;
        if (v19) {
          continue;
        }
      }
      goto LABEL_22;
    }
    std::locale::~locale(&v23);
    std::locale::~locale(&v22);
LABEL_33:
    std::string::operator=((std::string *)(a1 + 296), (const std::string *)a3);
    goto LABEL_34;
  }
  uint64_t v18 = v8;
  long long v17 = v11;
LABEL_22:
  std::locale::~locale(&v23);
  std::locale::~locale(&v22);
  if (v18 != &v8[v9] || v17 != &v11[v12]) {
    goto LABEL_33;
  }
LABEL_34:
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 480))(*a2, a3);
  *(unsigned char *)(a1 + 344) = 0;
  return result;
}

void sub_223B17E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::locale a11, std::locale a12)
{
}

void SystemDeterminationManager::handleCountryOfOrigination_available_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v5 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v5 = *(const std::string::value_type **)a2;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I CountryOfOrigination: Country determined based on location : %s", (uint8_t *)&buf, 0xCu);
  }
  memset(&buf, 0, sizeof(buf));
  int v6 = *(char *)(a2 + 23);
  if (v6 < 0)
  {
    std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    int v6 = *(char *)(a2 + 23);
    if (v6 < 0)
    {
      if (*(void *)(a2 + 8)) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
  }
  else
  {
    std::string buf = *(std::string *)a2;
  }
  if ((_BYTE)v6) {
    goto LABEL_15;
  }
LABEL_10:
  int v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = (void *)(a1 + 320);
    if (*(char *)(a1 + 343) < 0) {
      BOOL v8 = (void *)*v8;
    }
    LODWORD(v14) = 136315138;
    *(void *)((char *)&v14 + 4) = v8;
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I CountryOfOrigination: Using IP based country : %s", (uint8_t *)&v14, 0xCu);
  }
  std::string::operator=(&buf, (const std::string *)(a1 + 320));
LABEL_15:
  uint64_t v9 = *(void **)(a1 + 104);
  if (v9 != (void *)(a1 + 112))
  {
    do
    {
      uint64_t v10 = v9[7];
      long long v14 = 0uLL;
      (*(void (**)(long long *__return_ptr))(*(void *)v10 + 64))(&v14);
      if (((*(uint64_t (**)(void))(*(void *)v14 + 224))(v14) & 1) == 0) {
        SystemDeterminationManager::handleCountryOfOrigination(a1, v9 + 7, (uint64_t)&buf);
      }
      if (*((void *)&v14 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v14 + 1));
      }
      uint64_t v11 = (void *)v9[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v9[2];
          BOOL v13 = *v12 == (void)v9;
          uint64_t v9 = v12;
        }
        while (!v13);
      }
      uint64_t v9 = v12;
    }
    while (v12 != (void *)(a1 + 112));
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_223B180E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleCountryOfOrigination_available_sync(uint64_t a1, uint64_t a2)
{
}

void SystemDeterminationManager::handleWifiAvailable_sync(SystemDeterminationManager *this, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*((unsigned __int8 *)this + 433) != a2)
  {
    uint64_t v4 = *((void *)this + 5);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&_OWORD buf[4] = asStringBool();
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = asStringBool();
      _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I WiFiAvailable: currently available=%s, new value=%s", buf, 0x16u);
    }
    *((unsigned char *)this + 433) = a2;
    if (a2)
    {
      uint64_t v5 = (SystemDeterminationManager *)*((void *)this + 13);
      if (v5 != (SystemDeterminationManager *)((char *)this + 112))
      {
        BOOL v6 = 0;
        do
        {
          *(void *)std::string buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          (*(void (**)(unsigned char *__return_ptr))(**((void **)v5 + 7) + 64))(buf);
          uint64_t v13 = 0;
          long long v14 = 0;
          (*(void (**)(uint64_t *__return_ptr))(**(void **)buf + 160))(&v13);
          BOOL v6 = v6 || *(unsigned char *)(v13 + 16) != 0;
          if (sd::ImsFeature::VoWiFi::isEnabled((sd::ImsFeature::VoWiFi *)(v13 + 16))) {
            (*(void (**)(void, const char *, uint64_t))(**((void **)v5 + 7) + 520))(*((void *)v5 + 7), "WiFiAvailable", 5);
          }
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          int v7 = (SystemDeterminationManager *)*((void *)v5 + 1);
          if (v7)
          {
            do
            {
              BOOL v8 = v7;
              int v7 = *(SystemDeterminationManager **)v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              BOOL v8 = (SystemDeterminationManager *)*((void *)v5 + 2);
              BOOL v9 = *(void *)v8 == (void)v5;
              uint64_t v5 = v8;
            }
            while (!v9);
          }
          uint64_t v5 = v8;
        }
        while (v8 != (SystemDeterminationManager *)((char *)this + 112));
        if (v6 && SystemDeterminationManager::sendRequestCountryOfOrigination(this))
        {
          uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
          if (v10)
          {
            uint64_t v11 = std::__shared_weak_count::lock(v10);
            if (v11)
            {
              atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              std::__shared_weak_count::__release_shared[abi:ne180100](v11);
              uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 2);
              if (v12)
              {
                if (std::__shared_weak_count::lock(v12)) {
                  operator new();
                }
              }
              std::__throw_bad_weak_ptr[abi:ne180100]();
            }
          }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
      }
    }
  }
}

void sub_223B1842C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleWifiAvailable_sync(SystemDeterminationManager *this, int a2)
{
}

void SystemDeterminationManager::setAddressRefId(void *a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = (std::__shared_weak_count *)a1[11];
  int v7 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotIdEx();
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*a1 + 72))(a1, &__p, a2, a3);
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_223B1852C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::setAddressRefId(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(&v19, 0, sizeof(v19));
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v19 = *(std::string *)a3;
  }
  memset(&v18, 0, sizeof(v18));
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v18 = *(std::string *)a4;
  }
  uint64_t v7 = a1[11];
  *(void *)std::string buf = a1[10];
  *(void *)&uint8_t buf[8] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  char v8 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v8)
  {
    *(void *)std::string buf = a1;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&buf[8], *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)a2;
      uint64_t v21 = *(void *)(a2 + 16);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v22, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
    }
    else {
      std::string v22 = v19;
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v18;
    }
    long long v14 = (std::__shared_weak_count *)a1[2];
    if (v14)
    {
      uint64_t v15 = (std::__shared_weak_count *)a1[1];
      uint64_t v16 = std::__shared_weak_count::lock(v14);
      if (v16)
      {
        v24[0] = v15;
        v24[1] = v16;
        atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        long long v17 = (std::__shared_weak_count *)a1[2];
        if (v17)
        {
          if (std::__shared_weak_count::lock(v17)) {
            operator new();
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v9 = a1[5];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
    BOOL v11 = (v10 & 0x80u) != 0;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    if (v11) {
      uint64_t v12 = *(const std::string::value_type **)a2;
    }
    else {
      uint64_t v12 = (const std::string::value_type *)a2;
    }
    if (v10) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&_OWORD buf[4] = v13;
    _os_log_error_impl(&dword_223AF3000, v9, OS_LOG_TYPE_ERROR, "AddressRefId: Unknown Personality: %s", buf, 0xCu);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_223B1890C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::getAddressRefId(void *a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = (std::__shared_weak_count *)a1[11];
  uint64_t v7 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotIdEx();
  (*(void (**)(void *, void **, uint64_t, uint64_t))(*a1 + 88))(a1, &__p, a2, a3);
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_223B18A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::getAddressRefId(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v8 = a1[11];
  *(void *)&long long buf = a1[10];
  *((void *)&buf + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v9 = isPresent();
  if (*((void *)&buf + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
  }
  if (v9)
  {
    uint64_t v16 = a1;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    uint64_t v18 = a3;
    uint64_t v19 = a4;
    *(void *)&long long buf = MEMORY[0x263EF8330];
    *((void *)&buf + 1) = 0x40000000;
    uint64_t v21 = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_15getAddressRefIdERK13PersonalityIDRNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESE_E3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSG__block_invoke;
    std::string v22 = &__block_descriptor_tmp_217;
    std::locale v23 = a1 + 1;
    uint64_t v24 = &v16;
    uint64_t v15 = a1[3];
    if (a1[4]) {
      dispatch_async_and_wait(v15, &buf);
    }
    else {
      dispatch_sync(v15, &buf);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v10 = a1[5];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      BOOL v12 = (v11 & 0x80u) != 0;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      if (v12) {
        uint64_t v13 = *(const std::string::value_type **)a2;
      }
      else {
        uint64_t v13 = (const std::string::value_type *)a2;
      }
      if (v11) {
        long long v14 = v13;
      }
      else {
        long long v14 = "<invalid>";
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v14;
      _os_log_error_impl(&dword_223AF3000, v10, OS_LOG_TYPE_ERROR, "AddressRefId: Unknown Personality: %s", (uint8_t *)&buf, 0xCu);
    }
  }
}

void sub_223B18C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void SystemDeterminationManager::getIMSNetworkInterface(SystemDeterminationManager *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  uint64_t v8 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  uint64_t v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)this + 104, &__p);
  if ((void *)((char *)this + 112) == v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = v5[7];
    uint64_t v7 = (std::__shared_weak_count *)v5[8];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v10 < 0) {
    operator delete(__p);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 560))(v6);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (!v6)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_223B18D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::getIMSNetworkInterface(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[11];
  *(void *)&long long v16 = a1[10];
  *((void *)&v16 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  char v7 = isPresent();
  if (*((void *)&v16 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v11 = a1[5];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      BOOL v13 = (v12 & 0x80u) != 0;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
      if (v13) {
        long long v14 = *(const char **)a2;
      }
      else {
        long long v14 = (const char *)a2;
      }
      if (v12) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = "<invalid>";
      }
      LODWORD(v16) = 136315138;
      *(void *)((char *)&v16 + 4) = v15;
      _os_log_error_impl(&dword_223AF3000, v11, OS_LOG_TYPE_ERROR, "IMSNetworkInterface: Unknown Personality: %s", (uint8_t *)&v16, 0xCu);
    }
    goto LABEL_16;
  }
  uint64_t v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(a1 + 13), (void *)a2);
  if (a1 + 14 == v8) {
    goto LABEL_16;
  }
  uint64_t v10 = v8[7];
  char v9 = (std::__shared_weak_count *)v8[8];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 560))(v10);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (!v10)
  {
LABEL_16:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_223B18F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::getIMSAlternateNetworkInterfaceNames(SystemDeterminationManager *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = 0;
  long long v16 = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 11);
  uint64_t v12 = (const std::string *)*((void *)this + 10);
  BOOL v13 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  SystemDeterminationManager::getConnHelper_sync((uint64_t)this, __p, &v15);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v5 = v15;
  if (v15)
  {
    uint64_t v12 = 0;
    BOOL v13 = 0;
    uint64_t v14 = 0;
    (*(void (**)(const std::string **__return_ptr, uint64_t))(*(void *)v15 + 96))(&v12, v15);
    uint64_t v6 = v12;
    char v7 = v13;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    if (v6 != (const std::string *)v7)
    {
      std::string::operator=(a2, v6);
      for (CFIndex i = v6 + 1; i != (const std::string *)v7; ++i)
      {
        char v18 = 1;
        LOWORD(__p[0]) = 44;
        std::string::append(a2, (const std::string::value_type *)__p, 1uLL);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        int v9 = SHIBYTE(i->__r_.__value_.__r.__words[2]);
        if (v9 >= 0) {
          uint64_t v10 = (const std::string::value_type *)i;
        }
        else {
          uint64_t v10 = (const std::string::value_type *)i->__r_.__value_.__r.__words[0];
        }
        if (v9 >= 0) {
          std::string::size_type size = HIBYTE(i->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = i->__r_.__value_.__l.__size_;
        }
        std::string::append(a2, v10, size);
      }
    }
    __p[0] = &v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (!v5)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

void sub_223B190E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 + 23) < 0) {
    operator delete(*(void **)v19);
  }
  std::string __p = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

void SystemDeterminationManager::getIMSInterfaceList(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v8 = a1[11];
  *(void *)long long buf = a1[10];
  *(void *)&uint8_t buf[8] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  char v9 = isPresent();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v9)
  {
    *(void *)long long buf = a1;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&buf[8], *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)a2;
      uint64_t v26 = *(void *)(a2 + 16);
    }
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 0x40000000;
    v17[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_19getIMSInterfaceListERK13PersonalityIDRKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSH__block_invoke;
    v17[3] = &__block_descriptor_tmp_219;
    v17[4] = a1 + 1;
    v17[5] = buf;
    char v18 = v17;
    uint64_t v11 = a1[3];
    uint64_t v12 = MEMORY[0x263EF8330];
    if (a1[4])
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t block = v12;
      uint64_t v20 = 0x40000000;
      uint64_t v21 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      std::string v22 = &__block_descriptor_tmp_221;
      std::locale v23 = a4;
      uint64_t v24 = &v18;
      dispatch_async_and_wait(v11, &block);
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t block = v12;
      uint64_t v20 = 0x40000000;
      uint64_t v21 = ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke;
      std::string v22 = &__block_descriptor_tmp_220;
      std::locale v23 = a4;
      uint64_t v24 = &v18;
      dispatch_sync(v11, &block);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete(*(void **)&buf[8]);
    }
  }
  else
  {
    uint64_t v10 = a1[5];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
      BOOL v14 = (v13 & 0x80u) != 0;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(a2 + 8);
      }
      if (v14) {
        uint64_t v15 = *(const std::string::value_type **)a2;
      }
      else {
        uint64_t v15 = (const std::string::value_type *)a2;
      }
      if (v13) {
        long long v16 = v15;
      }
      else {
        long long v16 = "<invalid>";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&_OWORD buf[4] = v16;
      _os_log_error_impl(&dword_223AF3000, v10, OS_LOG_TYPE_ERROR, "IMSInterfaceList: Unknown Personality: %s", buf, 0xCu);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_223B19410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleWRMTelephonyChange_sync(SystemDeterminationManager *this)
{
}

void non-virtual thunk to'SystemDeterminationManager::handleESIMSubscriptionChange_sync(SystemDeterminationManager *this)
{
}

void non-virtual thunk to'SystemDeterminationManager::handleBatterySaverModeChanged_sync(SystemDeterminationManager *this)
{
}

BOOL SystemDeterminationManager::isDeviceInBatterySaverMode(SystemDeterminationManager *this)
{
  uint64_t v4 = this;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_26isDeviceInBatterySaverModeEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke;
  v5[3] = &__block_descriptor_tmp_222;
  v5[4] = (char *)this + 8;
  v5[5] = &v4;
  uint64_t v6 = v5;
  char v2 = (char *)this + 24;
  BOOL v1 = *((void *)this + 3);
  if (*((void *)v2 + 1))
  {
    char v13 = 0;
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v8 = 0x40000000;
    char v9 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_213;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = 0;
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v8 = 0x40000000;
    char v9 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v10 = &__block_descriptor_tmp_212;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

BOOL SystemDeterminationManager::isIMSAudioOnAPEnabled(uint64_t a1, int a2)
{
  uint64_t v5 = a1;
  int v6 = a2;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  _OWORD v7[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_21isIMSAudioOnAPEnabledEN10subscriber7SimSlotEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke;
  v7[3] = &__block_descriptor_tmp_223;
  v7[4] = a1 + 8;
  v7[5] = &v5;
  uint64_t v8 = v7;
  uint64_t v3 = a1 + 24;
  char v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    char v15 = 0;
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v10 = 0x40000000;
    uint64_t v11 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v12 = &__block_descriptor_tmp_213;
    char v13 = &v15;
    BOOL v14 = &v8;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    char v15 = 0;
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v10 = 0x40000000;
    uint64_t v11 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    uint64_t v12 = &__block_descriptor_tmp_212;
    char v13 = &v15;
    BOOL v14 = &v8;
    dispatch_sync(v2, &block);
  }
  return v15 != 0;
}

void SystemDeterminationManager::getInHomeCountryStatus(uint64_t a1, int a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = a1;
  int v6 = a2;
  std::__function::__value_func<void ()(CTError,BOOL)>::__value_func[abi:ne180100]((uint64_t)v7, a3);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_223B19870(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void SystemDeterminationManager::getRoamingStatus(uint64_t a1, int a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t v5 = a1;
  int v6 = a2;
  std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::__value_func[abi:ne180100]((uint64_t)v7, a3);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_223B199DC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void SystemDeterminationManager::triggerKeepAliveWakeupEvent(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      char v7 = v6;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v6);
    }
    else
    {
      char v7 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    char v7 = 0;
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_223B19BF4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void SystemDeterminationManager::evaluateTelephonyStatusHelper_sync(uint64_t a1, void *a2, int a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 64))(&v7);
  int v6 = *(unsigned int (**)(void))(*(void *)v7 + 168);
  if (a3)
  {
    if (v6()) {
      (*(void (**)(void, const char *, uint64_t))(*(void *)*a2 + 520))(*a2, "TelephonyStatus", 2);
    }
  }
  else if (v6())
  {
    (*(void (**)(void, uint64_t))(*(void *)*a2 + 192))(*a2, 1);
  }
  SystemDeterminationManager::evaluateWifiKeepAliveStatus_sync(a1, (uint64_t)a2);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_223B19D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::isIMSRegistered(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1[1];
  v12[0] = a1;
  v12[1] = a2;
  v12[2] = a3;
  v12[3] = a4;
  void v12[4] = a5;
  char v13 = a6;
  char v9 = (std::__shared_weak_count *)a1[2];
  if (!v9 || (uint64_t v10 = std::__shared_weak_count::lock(v9)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v14 = v8;
  char v15 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 0x40000000;
  block[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_15isIMSRegisteredERbRN5caulk10option_setIN2sd14ImsServiceTypeEjEES4_R15DataContextTypebE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSE__block_invoke;
  block[3] = &__block_descriptor_tmp_233;
  block[4] = v7;
  block[5] = v12;
  uint64_t v11 = a1[3];
  if (a1[4]) {
    dispatch_async_and_wait(v11, block);
  }
  else {
    dispatch_sync(v11, block);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

void SystemDeterminationManager::getIMSRegistrationStatus(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v5 = a3[3];
  if (v5)
  {
    if ((void *)v5 == a3)
    {
      uint64_t v12 = v11;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v11);
      goto LABEL_9;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  uint64_t v12 = (void *)v5;
LABEL_9:
  int v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      v13[0] = v7;
      v13[1] = v8;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      char v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        if (std::__shared_weak_count::lock(v9)) {
          operator new();
        }
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_223B1A0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void SystemDeterminationManager::getIMSRegistrationTransport(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v5 = a3[3];
  if (v5)
  {
    if ((void *)v5 == a3)
    {
      uint64_t v12 = v11;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v11);
      goto LABEL_9;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  uint64_t v12 = (void *)v5;
LABEL_9:
  int v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      v13[0] = v7;
      v13[1] = v8;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      char v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        if (std::__shared_weak_count::lock(v9)) {
          operator new();
        }
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_223B1A3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL SystemDeterminationManager::useMDNFromCSIM(void *a1, uint64_t a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[11];
  *(void *)&long long block = a1[10];
  *((void *)&block + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  char v5 = isPresent();
  if (*((void *)&block + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&block + 1));
  }
  if (v5)
  {
    uint64_t v14 = a1;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 0x40000000;
    v16[2] = ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_14useMDNFromCSIMERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke;
    void v16[3] = &__block_descriptor_tmp_234;
    v16[4] = a1 + 1;
    v16[5] = &v14;
    uint64_t v17 = v16;
    uint64_t v8 = a1[3];
    if (a1[4])
    {
      char v18 = 0;
      *(void *)&long long block = MEMORY[0x263EF8330];
      *((void *)&block + 1) = 0x40000000;
      uint64_t v20 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
      uint64_t v21 = &__block_descriptor_tmp_213;
      std::string v22 = &v18;
      std::locale v23 = &v17;
      dispatch_async_and_wait(v8, &block);
    }
    else
    {
      char v18 = 0;
      *(void *)&long long block = MEMORY[0x263EF8330];
      *((void *)&block + 1) = 0x40000000;
      uint64_t v20 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
      uint64_t v21 = &__block_descriptor_tmp_212;
      std::string v22 = &v18;
      std::locale v23 = &v17;
      dispatch_sync(v8, &block);
    }
    BOOL v7 = v18 != 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    int v6 = a1[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      BOOL v11 = (v10 & 0x80u) != 0;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a2 + 8);
      }
      if (v11) {
        uint64_t v12 = *(const std::string::value_type **)a2;
      }
      else {
        uint64_t v12 = (const std::string::value_type *)a2;
      }
      if (v10) {
        char v13 = v12;
      }
      else {
        char v13 = "<invalid>";
      }
      LODWORD(block) = 136315138;
      *(void *)((char *)&block + 4) = v13;
      _os_log_error_impl(&dword_223AF3000, v6, OS_LOG_TYPE_ERROR, "MDNFromCSIM: Unknown Personality: %s", (uint8_t *)&block, 0xCu);
    }
    return 0;
  }
  return v7;
}

void sub_223B1A690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
}

void SystemDeterminationManager::submitMetric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a1 + 184);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 528))(&v14);
  uint64_t v8 = (const char *)(v14 + 328);
  if (*(char *)(v14 + 351) < 0) {
    uint64_t v8 = *(const char **)v8;
  }
  uint64_t v9 = atoi(v8);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 528))(&v12);
  uint64_t v10 = (const char *)(v12 + 352);
  if (*(char *)(v12 + 375) < 0) {
    uint64_t v10 = *(const char **)v10;
  }
  uint64_t v11 = atoi(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 64))(v7, v9, v11, a3, a4);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_223B1A7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::submitMetric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void SystemDeterminationManager::handleIsRoamingUpdate_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  if ((a3 - 6) >= 0xFFFFFFFE)
  {
    int v6 = (NSObject **)v5;
    uint64_t v7 = *(void *)(a1 + 88);
    *(void *)&long long buf = *(void *)(a1 + 80);
    *((void *)&buf + 1) = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    PersonalityIdFromSlotId();
    uint64_t v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, &__p);
    if ((void *)(a1 + 112) == v8)
    {
      uint64_t v10 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v10 = v8[7];
      uint64_t v9 = (std::__shared_weak_count *)v8[8];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    if (v16 < 0) {
      operator delete(__p);
    }
    if (*((void *)&buf + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
    }
    if (v10)
    {
      std::string __p = 0;
      char v15 = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 64))(&__p, v10);
      int v11 = (*(uint64_t (**)(void *))(*(void *)__p + 272))(__p);
      if (((*(uint64_t (**)(void *, uint64_t))(*(void *)__p + 472))(__p, a3) & 1) != 0
        && v11 != (*(unsigned int (**)(void *))(*(void *)__p + 272))(__p))
      {
        uint64_t v12 = *v6;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v13 = asStringBool();
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v13;
          _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I RoamingUpdate: SMS over IMS in Non-VoLTE mode is %s", (uint8_t *)&buf, 0xCu);
        }
        (*(void (**)(uint64_t, void))(*(void *)v10 + 576))(v10, 0);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_223B1AAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SystemDeterminationManager::handleIsRoamingUpdate_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t SystemDeterminationManager::handleDomesticRoamingUpdate_sync(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  uint64_t v4 = *(void *)(a1 + 152);
  uint64_t v5 = SystemDeterminationManager::calculateBlocksCallsOverCS_sync(a1, a2, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 496))(v4, a2, v5);
  uint64_t v6 = *(void *)(a1 + 152);
  uint64_t v7 = SystemDeterminationManager::calculateBlocksCallsOverCS_sync(a1, a2, 1);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 504);

  return v8(v6, a2, v7);
}

uint64_t non-virtual thunk to'SystemDeterminationManager::handleDomesticRoamingUpdate_sync(uint64_t a1, uint64_t a2)
{
  return SystemDeterminationManager::handleDomesticRoamingUpdate_sync(a1 - 48, a2);
}

uint64_t SystemDeterminationManager::isRoamingDefinite_sync(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  char v2 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  uint64_t v3 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, __p);
  if ((void *)(a1 + 112) == v3)
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = v3[7];
    uint64_t v4 = (std::__shared_weak_count *)v3[8];
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v5 + 64))(&v7, v5);
    bzero(__p, 0x688uLL);
    (*(void (**)(void **__return_ptr))(*(void *)v7 + 456))(__p);
    uint64_t v5 = v11 == 5;
    sd::RuntimeInfo::~RuntimeInfo(__p);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v5;
}

void sub_223B1AD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'SystemDeterminationManager::isRoamingDefinite_sync(uint64_t a1)
{
  return SystemDeterminationManager::isRoamingDefinite_sync(a1 - 64);
}

unint64_t SystemDeterminationManager::getRegistrationStatus_sync(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 88);
  uint64_t v9 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  uint64_t v3 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 104, &__p);
  if ((void *)(a1 + 112) == v3)
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = v3[7];
    uint64_t v4 = (std::__shared_weak_count *)v3[8];
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (!v5)
  {
    unint64_t v7 = 0xFFFFFFFF00000000;
    if (!v4) {
      return v7;
    }
    goto LABEL_15;
  }
  std::string __p = 0;
  int v11 = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 64))(&__p, v5);
  (*(void (**)(void *))(*(void *)__p + 336))(__p);
  uint64_t v6 = (*(uint64_t (**)(void *))(*(void *)__p + 512))(__p);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  unint64_t v7 = v6 << 32;
  if (v4) {
LABEL_15:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_223B1AF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

unint64_t non-virtual thunk to'SystemDeterminationManager::getRegistrationStatus_sync(uint64_t a1)
{
  return SystemDeterminationManager::getRegistrationStatus_sync(a1 - 64);
}

void SystemDeterminationManager::getLazuliConnHelper_sync(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(a1 + 128, a2);
  if ((void *)(a1 + 136) != v5)
  {
    uint64_t v7 = v5[7];
    uint64_t v6 = (std::__shared_weak_count *)v5[8];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7)
    {
      uint64_t v10 = 0;
      int v11 = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v7 + 64))(&v10, v7);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 120))(v10) != 3)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 128))(v7);
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        int v8 = 0;
        if (!v6)
        {
LABEL_10:
          if (!v8) {
            return;
          }
          goto LABEL_11;
        }
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        goto LABEL_10;
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
    int v8 = 1;
    if (!v6) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v10) = 0;
    _os_log_error_impl(&dword_223AF3000, v9, OS_LOG_TYPE_ERROR, "no valid Lazuli Connectivity Helper.", (uint8_t *)&v10, 2u);
  }
  *a3 = 0;
  a3[1] = 0;
}

void sub_223B1B0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void SystemDeterminationManager::handleDumpState_sync(NSObject **this)
{
  BOOL v1 = (SystemDeterminationManager *)this;
  uint64_t v86 = *MEMORY[0x263EF8340];
  char v2 = this[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&_OWORD buf[4] = "SystemDeterminationManager";
    _os_log_impl(&dword_223AF3000, v2, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: ----------------- %s ==>> -------------------", buf, 0xCu);
    char v2 = *((void *)v1 + 5);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_223AF3000, v2, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t fImsDataModes: {", buf, 2u);
  }
  uint64_t v3 = (void *)*((void *)v1 + 27);
  if (v3 != (void *)((char *)v1 + 224))
  {
    do
    {
      uint64_t v4 = *((void *)v1 + 5);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = asString();
        *(_DWORD *)long long buf = 136315138;
        *(void *)&_OWORD buf[4] = v5;
        _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t\t %s", buf, 0xCu);
      }
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != (void *)((char *)v1 + 224));
  }
  uint64_t v9 = *((void *)v1 + 5);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t }", buf, 2u);
    uint64_t v9 = *((void *)v1 + 5);
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t fImsSubscriberControllers: {", buf, 2u);
  }
  uint64_t v10 = (void *)*((void *)v1 + 13);
  if (v10 != (void *)((char *)v1 + 112))
  {
    do
    {
      int v11 = *((void *)v1 + 5);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        char v12 = (const char *)(v10 + 4);
        uint64_t v13 = *((unsigned __int8 *)v10 + 55);
        int v14 = (char)v13;
        if ((v13 & 0x80u) != 0) {
          uint64_t v13 = v10[5];
        }
        if (v14 < 0) {
          char v12 = (const char *)v10[4];
        }
        if (!v13) {
          char v12 = "<invalid>";
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&_OWORD buf[4] = v12;
        _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t PersonalityID: %s {", buf, 0xCu);
      }
      (*(void (**)(void))(*(void *)v10[7] + 48))(v10[7]);
      char v15 = *((void *)v1 + 5);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t }", buf, 2u);
      }
      char v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          char v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v10[2];
          BOOL v8 = *v17 == (void)v10;
          uint64_t v10 = v17;
        }
        while (!v8);
      }
      uint64_t v10 = v17;
    }
    while (v17 != (void *)((char *)v1 + 112));
  }
  uint64_t v18 = *((void *)v1 + 5);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_223AF3000, v18, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t }", buf, 2u);
    uint64_t v18 = *((void *)v1 + 5);
  }
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_223AF3000, v18, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t fImsLazuliControllers: {", buf, 2u);
  }
  uint64_t v19 = (void *)*((void *)v1 + 16);
  if (v19 != (void *)((char *)v1 + 136))
  {
    do
    {
      uint64_t v20 = *((void *)v1 + 5);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = (const char *)(v19 + 4);
        uint64_t v22 = *((unsigned __int8 *)v19 + 55);
        int v23 = (char)v22;
        if ((v22 & 0x80u) != 0) {
          uint64_t v22 = v19[5];
        }
        if (v23 < 0) {
          uint64_t v21 = (const char *)v19[4];
        }
        if (!v22) {
          uint64_t v21 = "<invalid>";
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&_OWORD buf[4] = v21;
        _os_log_impl(&dword_223AF3000, v20, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t PersonalityID: %s {", buf, 0xCu);
      }
      (*(void (**)(void))(*(void *)v19[7] + 48))(v19[7]);
      uint64_t v24 = *((void *)v1 + 5);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_223AF3000, v24, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t }", buf, 2u);
      }
      uint64_t v25 = (void *)v19[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (void *)v19[2];
          BOOL v8 = *v26 == (void)v19;
          uint64_t v19 = v26;
        }
        while (!v8);
      }
      uint64_t v19 = v26;
    }
    while (v26 != (void *)((char *)v1 + 136));
  }
  int v27 = *((void *)v1 + 5);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_223AF3000, v27, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t }", buf, 2u);
    int v27 = *((void *)v1 + 5);
  }
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = (void *)((char *)v1 + 320);
    if (*((char *)v1 + 343) < 0) {
      uint64_t v28 = (void *)*v28;
    }
    uint64_t v29 = asStringBool();
    uint64_t v30 = asStringBool();
    int v31 = *((_DWORD *)v1 + 90);
    *(_DWORD *)long long buf = 136315906;
    *(void *)&_OWORD buf[4] = v28;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v29;
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&unsigned char buf[24] = v30;
    LOWORD(v79) = 1024;
    *(_DWORD *)((char *)&v79 + 2) = v31;
    _os_log_impl(&dword_223AF3000, v27, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t fIPBasedCountryCode = %s, fCountryOfOriginationRequested = %s, fCountryOfOriginationTimer = %s, fCountryOfOriginationThreshold = %d", buf, 0x26u);
  }
  (*(void (**)(void))(**((void **)v1 + 23) + 24))(*((void *)v1 + 23));
  long long v32 = *((void *)v1 + 5);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = asStringBool();
    uint64_t v34 = asStringBool();
    *(_DWORD *)long long buf = 136315394;
    *(void *)&_OWORD buf[4] = v33;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v34;
    _os_log_impl(&dword_223AF3000, v32, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t fWatchdogTimer = %s, fWifiAvailable = %s", buf, 0x16u);
    long long v32 = *((void *)v1 + 5);
  }
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void))(**((void **)v1 + 19) + 320))(*((void *)v1 + 19));
    uint64_t v35 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&_OWORD buf[4] = v35;
    _os_log_impl(&dword_223AF3000, v32, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \tBaseband assertion for WiFiCalling-only mode: %s", buf, 0xCu);
  }
  uint64_t v36 = (void *)*((void *)v1 + 33);
  int v73 = (void *)((char *)v1 + 272);
  if (v36 != (void *)((char *)v1 + 272))
  {
    uint64_t v71 = *MEMORY[0x263F8C2C8];
    uint64_t v72 = *(void *)(MEMORY[0x263F8C2C8] + 24);
    char v37 = (std::locale::id *)MEMORY[0x263F8C108];
    v70 = (NSObject **)v1;
    do
    {
      uint64_t v38 = *((void *)v1 + 5);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v39 = subscriber::asString();
        *(_DWORD *)long long buf = 136315394;
        *(void *)&_OWORD buf[4] = "LLTrafficManager";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v39;
        _os_log_impl(&dword_223AF3000, v38, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: ----------------- %s %s ==>> -------------------", buf, 0x16u);
      }
      uint64_t v85 = 0;
      long long v83 = 0u;
      memset(v84, 0, sizeof(v84));
      *(_OWORD *)unsigned int v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      memset(buf, 0, sizeof(buf));
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
      long long __p = 0uLL;
      uint64_t v75 = 0;
      std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], &__p);
      if (SHIBYTE(v75) < 0) {
        operator delete((void *)__p);
      }
      uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
      uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Flow Rules: {", 13);
      std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
      __int16 v42 = std::locale::use_facet((const std::locale *)&__p, v37);
      ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
      __int16 v43 = (void *)v36[5];
      if (v43 != v36 + 6)
      {
        do
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t\tFlowId: ", 10);
          uint64_t v44 = (void *)std::ostream::operator<<();
          uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" {", 2);
          std::ios_base::getloc((const std::ios_base *)((char *)v45 + *(void *)(*v45 - 24)));
          BOOL v46 = std::locale::use_facet((const std::locale *)&__p, v37);
          ((void (*)(const std::locale::facet *, uint64_t))v46->__vftable[2].~facet_0)(v46, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
          uint64_t v48 = v43[5];
          uint64_t v47 = v43[6];
          while (v48 != v47)
          {
            uint64_t v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t\t\t", 3);
            long long v50 = (const char *)v48;
            if (*(char *)(v48 + 23) < 0) {
              long long v50 = *(const char **)v48;
            }
            size_t v51 = strlen(v50);
            uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
            std::ios_base::getloc((const std::ios_base *)((char *)v52 + *(void *)(*v52 - 24)));
            v53 = std::locale::use_facet((const std::locale *)&__p, v37);
            ((void (*)(const std::locale::facet *, uint64_t))v53->__vftable[2].~facet_0)(v53, 10);
            std::locale::~locale((std::locale *)&__p);
            std::ostream::put();
            std::ostream::flush();
            v48 += 24;
          }
          uint64_t v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t\t", 2);
          char v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"}", 1);
          std::ios_base::getloc((const std::ios_base *)((char *)v55 + *(void *)(*v55 - 24)));
          std::__split_buffer<std::string>::pointer v56 = std::locale::use_facet((const std::locale *)&__p, v37);
          ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
          std::locale::~locale((std::locale *)&__p);
          std::ostream::put();
          std::ostream::flush();
          uint64_t v57 = (void *)v43[1];
          if (v57)
          {
            do
            {
              unsigned int v58 = v57;
              uint64_t v57 = (void *)*v57;
            }
            while (v57);
          }
          else
          {
            do
            {
              unsigned int v58 = (void *)v43[2];
              BOOL v8 = *v58 == (void)v43;
              __int16 v43 = v58;
            }
            while (!v8);
          }
          __int16 v43 = v58;
        }
        while (v58 != v36 + 6);
      }
      std::string v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
      uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"}", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(void *)(*v60 - 24)));
      uint64_t v61 = std::locale::use_facet((const std::locale *)&__p, v37);
      ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
      BOOL v1 = (SystemDeterminationManager *)v70;
      long long v62 = v70[5];
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], &__p);
        uint64_t p_p = (uint64_t)&__p;
        if (v75 < 0) {
          uint64_t p_p = __p;
        }
        *(_DWORD *)v76 = 136315138;
        uint64_t v77 = p_p;
        _os_log_impl(&dword_223AF3000, v62, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: %s", v76, 0xCu);
        if (SHIBYTE(v75) < 0) {
          operator delete((void *)__p);
        }
      }
      *(void *)long long buf = v71;
      *(void *)&buf[*(void *)(v71 - 24)] = v72;
      *(void *)&uint8_t buf[8] = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v82) < 0) {
        operator delete(v81[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x223CBBDB0](v84);
      long long v64 = (void *)v36[1];
      if (v64)
      {
        do
        {
          unint64_t v65 = v64;
          long long v64 = (void *)*v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          unint64_t v65 = (void *)v36[2];
          BOOL v8 = *v65 == (void)v36;
          uint64_t v36 = v65;
        }
        while (!v8);
      }
      uint64_t v36 = v65;
    }
    while (v65 != v73);
  }
  long long v66 = *((void *)v1 + 5);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
  {
    long long v67 = (char *)v1 + 456;
    uint64_t v68 = *((unsigned __int8 *)v1 + 479);
    BOOL v69 = (v68 & 0x80u) != 0;
    if ((v68 & 0x80u) != 0) {
      uint64_t v68 = *((void *)v1 + 58);
    }
    if (v69) {
      long long v67 = (const char *)*((void *)v1 + 57);
    }
    if (!v68) {
      long long v67 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&_OWORD buf[4] = v67;
    _os_log_impl(&dword_223AF3000, v66, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: \t fLastRemoved = %s", buf, 0xCu);
    long long v66 = *((void *)v1 + 5);
  }
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&_OWORD buf[4] = "SystemDeterminationManager";
    _os_log_impl(&dword_223AF3000, v66, OS_LOG_TYPE_DEFAULT, "#I 5wi.sd:: ------------ <<== %s ------------------------", buf, 0xCu);
  }
}

void sub_223B1BEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  a30 = a15;
  *(uint64_t *)((char *)&a30 + *(void *)(a15 - 24)) = a16;
  a31 = MEMORY[0x263F8C318] + 16;
  if (a44 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223CBBDB0](a17);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SystemDeterminationManager::handleDumpState_sync(NSObject **this)
{
}

void SystemDeterminationManager::ImsEmergencyAuthDelegate::~ImsEmergencyAuthDelegate(SystemDeterminationManager::ImsEmergencyAuthDelegate *this)
{
  *(void *)this = &unk_26D7441B0;
  BOOL v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26D7441B0;
  BOOL v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223CBBDF0);
}

BOOL PersonalityID::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(vSystemDeterminationManager::handleDumpState_sync(this - 6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    int v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    int v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(vSystemDeterminationManager::handleDumpState_sync(this - 6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

void ABCReportInfo::ABCReportInfo(std::string *this, const ABCReportInfo *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((void *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((void *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  this[4].__r_.__value_.__r.__words[0] = *((void *)a2 + 12);
  int v8 = (std::string *)((char *)this + 104);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v9 = *(_OWORD *)((char *)a2 + 104);
    this[5].__r_.__value_.__r.__words[0] = *((void *)a2 + 15);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  this[5].__r_.__value_.__s.__data_[8] = *((unsigned char *)a2 + 128);
}

void sub_223B1C3BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<DataContextType>::__init_with_size[abi:ne180100]<DataContextType*,DataContextType*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = std::vector<DataContextType>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_223B1C480(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<DataContextType>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(4 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

void std::vector<subscriber::NpAppInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    long long v4 = (char *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        long long v6 = (void *)*((void *)v4 - 4);
        if (v6)
        {
          *((void *)v4 - 3) = v6;
          operator delete(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::pair<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>::pair[abi:ne180100]<PersonalityID const&,std::shared_ptr<sd::IMSSubscriberControllerInterface>&,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

BOOL DataQoS::empty(DataQoS *this)
{
  if (*((unsigned char *)this + 4) && *(_DWORD *)this
    || *((unsigned char *)this + 12) && *((_DWORD *)this + 2)
    || *((unsigned char *)this + 20) && *((_DWORD *)this + 4))
  {
    return 0;
  }
  if (!*((unsigned char *)this + 48)) {
    return 1;
  }
  uint64_t v2 = (DataIPFilter *)*((void *)this + 3);
  uint64_t v3 = (DataIPFilter *)*((void *)this + 4);
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = DataIPFilter::empty(v2);
    if (!result) {
      break;
    }
    uint64_t v2 = (DataIPFilter *)((char *)v2 + 160);
  }
  while (v2 != v3);
  return result;
}

uint64_t std::vector<DataIPFilter>::__assign_with_size[abi:ne180100]<DataIPFilter*,DataIPFilter*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *a1) >> 5) < a4)
  {
    if (v10)
    {
      std::vector<DataIPFilter>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, *a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x199999999999999) {
      goto LABEL_18;
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 5);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    unint64_t v13 = v11 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v12;
    if (v13 > 0x199999999999999) {
LABEL_18:
    }
      std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
    uint64_t v14 = 5 * v13;
    char v15 = operator new(160 * v13);
    *a1 = (uint64_t)v15;
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v15 + 32 * v14;
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DataIPFilter>,DataIPFilter*,DataIPFilter*,DataIPFilter*>(v9, a2, a3, (uint64_t)v15);
    goto LABEL_14;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1] - v10) >> 5) < a4)
  {
    uint64_t v17 = a2 + 32 * ((a1[1] - v10) >> 5);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DataIPFilter *,DataIPFilter *,DataIPFilter *>(a2, v17, v10);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DataIPFilter>,DataIPFilter*,DataIPFilter*,DataIPFilter*>(v9, v17, a3, a1[1]);
LABEL_14:
    a1[1] = result;
    return result;
  }
  uint64_t v18 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DataIPFilter *,DataIPFilter *,DataIPFilter *>(a2, a3, v10);

  return std::vector<DataIPFilter>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, v18);
}

void sub_223B1C7E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_223B1C7EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DataIPFilter>,DataIPFilter*,DataIPFilter*,DataIPFilter*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  uint64_t v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 88;
    do
    {
      long long v7 = *(_OWORD *)(v6 - 72);
      *(_OWORD *)uint64_t v4 = *(_OWORD *)(v6 - 88);
      *(_OWORD *)(v4 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v7;
      std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(v4 + 32), v6 - 56);
      std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100]((std::string *)(v4 + 88), v6);
      uint64_t v8 = v6 - 88;
      uint64_t v9 = *(void *)(v6 + 56);
      *(void *)(v4 + 150) = *(void *)(v6 + 62);
      *(void *)(v4 + 144) = v9;
      uint64_t v4 = v14 + 160;
      v14 += 160;
      v6 += 160;
    }
    while (v8 + 160 != a3);
  }
  LOBYTE(v12) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_223B1C8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v9);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<DataIPFilterEndpoint,false>::__optional_copy_base[abi:ne180100](std::string *this, uint64_t a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[2].__r_.__value_.__s.__data_[0] = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this, (long long *)a2);
    std::string::size_type v4 = *(void *)(a2 + 32);
    this[1].__r_.__value_.__s.__data_[16] = *(unsigned char *)(a2 + 40);
    this[1].__r_.__value_.__l.__size_ = v4;
    this[2].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_223B1C930(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *this, long long *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_223B1C9AC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48) && *(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(uint64_t **)(a1 + 8);
    long long v3 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    for (uint64_t i = *v3; i != v4; i -= 160)
    {
      std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](i - 72);
      std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](i - 128);
    }
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DataIPFilter *,DataIPFilter *,DataIPFilter *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      long long v6 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)a3 = *(_OWORD *)v5;
      *(_OWORD *)(a3 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v6;
      std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)(a3 + 32), (std::string *)(v5 + 32));
      std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>((std::string *)(a3 + 88), (std::string *)(v5 + 88));
      uint64_t v7 = *(void *)(v5 + 144);
      *(void *)(a3 + 150) = *(void *)(v5 + 150);
      *(void *)(a3 + 144) = v7;
      a3 += 160;
      v5 += 160;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<DataIPFilterEndpoint,false> const&>(std::string *this, std::string *__str)
{
  if (this[2].__r_.__value_.__s.__data_[0] == __str[2].__r_.__value_.__s.__data_[0])
  {
    if (this[2].__r_.__value_.__s.__data_[0])
    {
      if (this[1].__r_.__value_.__s.__data_[0] == __str[1].__r_.__value_.__s.__data_[0])
      {
        if (this[1].__r_.__value_.__s.__data_[0]) {
          std::string::operator=(this, __str);
        }
      }
      else if (this[1].__r_.__value_.__s.__data_[0])
      {
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(this->__r_.__value_.__l.__data_);
        }
        this[1].__r_.__value_.__s.__data_[0] = 0;
      }
      else
      {
        if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(this, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v5 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
          this->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
          *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
        }
        this[1].__r_.__value_.__s.__data_[0] = 1;
      }
      std::string::size_type size = __str[1].__r_.__value_.__l.__size_;
      this[1].__r_.__value_.__s.__data_[16] = __str[1].__r_.__value_.__s.__data_[16];
      this[1].__r_.__value_.__l.__size_ = size;
    }
  }
  else if (this[2].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0] && SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    this[2].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](this, (long long *)__str);
    std::string::size_type v4 = __str[1].__r_.__value_.__l.__size_;
    this[1].__r_.__value_.__s.__data_[16] = __str[1].__r_.__value_.__s.__data_[16];
    this[1].__r_.__value_.__l.__size_ = v4;
    this[2].__r_.__value_.__s.__data_[0] = 1;
  }
}

uint64_t std::vector<DataIPFilter>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 160)
  {
    std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](i - 72);
    uint64_t result = std::__optional_destruct_base<DataIPFilterEndpoint,false>::~__optional_destruct_base[abi:ne180100](i - 128);
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<DataIPFilter>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::deque<std::pair<unsigned int,DataCellularQoSFlow>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    std::string::size_type v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    std::string::size_type v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    long long v6 = &v2[v5 / 0x19];
    unint64_t v7 = (unint64_t)*v6 + 160 * (v5 % 0x19);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x19] + 160 * ((*(void *)(a1 + 40) + v5) % 0x19);
    if (v7 != v8)
    {
      do
      {
        if (*(unsigned char *)(v7 + 144) && *(unsigned char *)(v7 + 136))
        {
          uint64_t v17 = (void **)(v7 + 112);
          std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](&v17);
        }
        if (*(unsigned char *)(v7 + 80) && *(unsigned char *)(v7 + 72))
        {
          uint64_t v17 = (void **)(v7 + 48);
          std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](&v17);
        }
        v7 += 160;
        if (v7 - (void)*v6 == 4000)
        {
          unint64_t v9 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 12;
    goto LABEL_20;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 25;
LABEL_20:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    unint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_223B1CF80(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void *std::__function::__value_func<void ()(CTError,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(CTError)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__shared_ptr_pointer<SystemDeterminationManager *,std::shared_ptr<SystemDeterminationManager> ctu::SharedSynchronizable<SystemDeterminationManager>::make_shared_ptr<SystemDeterminationManager>(SystemDeterminationManager*)::{lambda(SystemDeterminationManager *)#1},std::allocator<SystemDeterminationManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

void std::__shared_ptr_pointer<SystemDeterminationManager *,std::shared_ptr<SystemDeterminationManager> ctu::SharedSynchronizable<SystemDeterminationManager>::make_shared_ptr<SystemDeterminationManager>(SystemDeterminationManager*)::{lambda(SystemDeterminationManager *)#1},std::allocator<SystemDeterminationManager>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<SystemDeterminationManager *,std::shared_ptr<SystemDeterminationManager> ctu::SharedSynchronizable<SystemDeterminationManager>::make_shared_ptr<SystemDeterminationManager>(SystemDeterminationManager*)::{lambda(SystemDeterminationManager *)#1},std::allocator<SystemDeterminationManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<SystemDeterminationManager> ctu::SharedSynchronizable<SystemDeterminationManager>::make_shared_ptr<SystemDeterminationManager>(SystemDeterminationManager*)::{lambda(SystemDeterminationManager*)#1}::operator() const(SystemDeterminationManager*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ServiceManager::FullService<SystemDeterminationManager>::~FullService(ServiceManager::Service *this)
{
  *(void *)this = &unk_26D7443D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  ServiceManager::Service::~Service(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D7443D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  ServiceManager::Service::~Service(this);

  JUMPOUT(0x223CBBDF0);
}

void *ServiceManager::FullService<SystemDeterminationManager>::getName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "SystemDeterminationManager");
}

_WORD *ServiceManager::FullService<SystemDeterminationManager>::getServiceShutdownStages@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(2uLL);
  *a1 = v2;
  *uint64_t v2 = 768;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void ServiceManager::FullService<SystemDeterminationManager>::notifyServiceBootstrap(uint64_t a1, const group *a2)
{
}

uint64_t ServiceManager::FullService<SystemDeterminationManager>::supportsMigration()
{
  return 0;
}

uint64_t ServiceManager::FullService<SystemDeterminationManager>::supportsFullService()
{
  return 1;
}

uint64_t ServiceManager::FullService<SystemDeterminationManager>::getServiceMigrationStage()
{
  return 0;
}

void ServiceManager::FullService<SystemDeterminationManager>::notifyServiceStart(uint64_t a1)
{
}

void ServiceManager::FullService<SystemDeterminationManager>::notifyServiceShutdown(uint64_t a1, int a2, ServiceStage *a3)
{
}

void std::__function::__func<char const* const (*)(subscriber::SimSlot),std::allocator<char const* const (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::~__func()
{
}

void *std::__function::__func<char const* const (*)(subscriber::SimSlot),std::allocator<char const* const (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D744450;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<char const* const (*)(subscriber::SimSlot),std::allocator<char const* const (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D744450;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<char const* const (*)(subscriber::SimSlot),std::allocator<char const* const (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::operator()(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<char const* const (*)(subscriber::SimSlot),std::allocator<char const* const (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<char const* const (*)(subscriber::SimSlot),std::allocator<char const* const (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::target_type()
{
}

void SimInstanceLoggable<SystemDeterminationManager,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
}

uint64_t SimInstanceLoggable<SystemDeterminationManager,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

void std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::destroy(*a1);
    std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<PersonalityID const,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<PersonalityID const,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__tree<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>>>::destroy(*a1);
    std::__tree<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>>>::destroy(a1[1]);
    std::__tree<std::__value_type<unsigned int,std::vector<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::string>>>>::destroy((char *)a1[6]);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<unsigned int,std::vector<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::string>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::vector<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::string>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned int,std::vector<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::string>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 40);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

uint64_t *std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    MEMORY[0x223CBBDF0](v2, 0x60C40A44E5E0CLL);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::notifyServiceStart(void)::$_0,dispatch_queue_s *::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v13 = a1;
  uint64_t v14 = v1;
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (v2)
  {
    uint64_t v3 = *v1;
    unint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      unint64_t v5 = v4;
      if (v1[1])
      {
        long long v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I Starting...", buf, 2u);
        }
        uint64_t v7 = *(void **)(v3 + 104);
        if (v7 != (void *)(v3 + 112))
        {
          do
          {
            (*(void (**)(void))(*(void *)v7[7] + 24))(v7[7]);
            unint64_t v8 = (void *)v7[1];
            if (v8)
            {
              do
              {
                unint64_t v9 = v8;
                unint64_t v8 = (void *)*v8;
              }
              while (v8);
            }
            else
            {
              do
              {
                unint64_t v9 = (void *)v7[2];
                BOOL v10 = *v9 == (void)v7;
                uint64_t v7 = v9;
              }
              while (!v10);
            }
            uint64_t v7 = v9;
          }
          while (v9 != (void *)(v3 + 112));
        }
        unint64_t v11 = (capabilities::ct *)(*(uint64_t (**)(void))(**(void **)(v3 + 152) + 24))(*(void *)(v3 + 152));
        if (capabilities::ct::shouldEnableSystemDeterminationWatchdog(v11)) {
          SystemDeterminationManager::initWatchdog((dispatch_queue_t *)v3);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  std::unique_ptr<SystemDeterminationManager::notifyServiceStart(void)::$_0,std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v14);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v13);
}

void sub_223B1D76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::unique_ptr<SystemDeterminationManager::notifyServiceStart(void)::$_0,std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SystemDeterminationManager::notifyServiceStart(void)::$_0,std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x223CBBDF0](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceShutdown(ServiceShutdownStage,ServiceStage const&)::$_0>(SystemDeterminationManager::notifyServiceShutdown(ServiceShutdownStage,ServiceStage const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::notifyServiceShutdown(ServiceShutdownStage,ServiceStage const&)::$_0,dispatch_queue_s *::default_delete<SystemDeterminationManager::notifyServiceShutdown(ServiceShutdownStage,ServiceStage const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v24 = a1;
  uint64_t v25 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)v1;
    unint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      unint64_t v5 = v4;
      if (*(void *)(v1 + 24))
      {
        long long v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&_OWORD buf[4] = asString();
          _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I We are shutting down: %s", buf, 0xCu);
        }
        uint64_t v7 = *(NSObject **)(v3 + 424);
        if (v7)
        {
          dispatch_source_cancel(v7);
          unint64_t v8 = *(NSObject **)(v3 + 424);
          *(void *)(v3 + 424) = 0;
          if (v8) {
            dispatch_release(v8);
          }
        }
        uint64_t v9 = *(void *)(v3 + 352);
        if (v9)
        {
          uint64_t v10 = *(void *)(v9 + 80);
          if (v10)
          {
            *(void *)(v9 + 80) = 0;
            (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
          }
          std::unique_ptr<SDTimer>::reset[abi:ne180100]((SDTimer **)(v3 + 352), 0);
        }
        if (*(unsigned char *)(v1 + 16))
        {
          SystemDeterminationManager::cleanup_sync(v3);
        }
        else
        {
          unint64_t v11 = *(void **)(v3 + 104);
          if (v11 != (void *)(v3 + 112))
          {
            do
            {
              uint64_t v12 = v11[7];
              uint64_t v13 = *(NSObject **)(v1 + 8);
              *(void *)long long buf = v13;
              if (v13)
              {
                dispatch_retain(v13);
                if (*(void *)buf) {
                  dispatch_group_enter(*(dispatch_group_t *)buf);
                }
              }
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v12 + 32))(v12, buf);
              if (*(void *)buf)
              {
                dispatch_group_leave(*(dispatch_group_t *)buf);
                if (*(void *)buf) {
                  dispatch_release(*(dispatch_object_t *)buf);
                }
              }
              uint64_t v14 = (void *)v11[1];
              if (v14)
              {
                do
                {
                  uint64_t v15 = v14;
                  uint64_t v14 = (void *)*v14;
                }
                while (v14);
              }
              else
              {
                do
                {
                  uint64_t v15 = (void *)v11[2];
                  BOOL v16 = *v15 == (void)v11;
                  unint64_t v11 = v15;
                }
                while (!v16);
              }
              unint64_t v11 = v15;
            }
            while (v15 != (void *)(v3 + 112));
          }
          uint64_t v17 = *(void **)(v3 + 128);
          uint64_t v18 = (void *)(v3 + 136);
          if (v17 != (void *)(v3 + 136))
          {
            do
            {
              uint64_t v19 = v17[7];
              uint64_t v20 = *(NSObject **)(v1 + 8);
              dispatch_group_t group = v20;
              if (v20)
              {
                dispatch_retain(v20);
                if (group) {
                  dispatch_group_enter(group);
                }
              }
              (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v19 + 32))(v19, &group);
              if (group)
              {
                dispatch_group_leave(group);
                if (group) {
                  dispatch_release(group);
                }
              }
              uint64_t v21 = (void *)v17[1];
              if (v21)
              {
                do
                {
                  uint64_t v22 = v21;
                  uint64_t v21 = (void *)*v21;
                }
                while (v21);
              }
              else
              {
                do
                {
                  uint64_t v22 = (void *)v17[2];
                  BOOL v16 = *v22 == (void)v17;
                  uint64_t v17 = v22;
                }
                while (!v16);
              }
              uint64_t v17 = v22;
            }
            while (v22 != v18);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  std::unique_ptr<SystemDeterminationManager::notifyServiceShutdown(ServiceShutdownStage,ServiceStage const&)::$_0,std::default_delete<SystemDeterminationManager::notifyServiceShutdown(ServiceShutdownStage,ServiceStage const&)::$_0>>::~unique_ptr[abi:ne180100](&v25);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v24);
}

void sub_223B1DAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_group_t group, dispatch_group_t a13)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  std::unique_ptr<SystemDeterminationManager::notifyServiceShutdown(ServiceShutdownStage,ServiceStage const&)::$_0,std::default_delete<SystemDeterminationManager::notifyServiceShutdown(ServiceShutdownStage,ServiceStage const&)::$_0>>::~unique_ptr[abi:ne180100](&a11);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SystemDeterminationManager::notifyServiceShutdown(ServiceShutdownStage,ServiceStage const&)::$_0,std::default_delete<SystemDeterminationManager::notifyServiceShutdown(ServiceShutdownStage,ServiceStage const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    unint64_t v4 = *(NSObject **)(v2 + 8);
    if (v4)
    {
      dispatch_group_leave(v4);
      unint64_t v5 = *(NSObject **)(v2 + 8);
      if (v5) {
        dispatch_release(v5);
      }
    }
    MEMORY[0x223CBBDF0](v2, 0x1020C40724815CCLL);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::initialize(dispatch::group_session)::$_0>(SystemDeterminationManager::initialize(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::initialize(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<SystemDeterminationManager::initialize(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v10 = a1;
  unint64_t v11 = v1;
  uint64_t v2 = (std::__shared_weak_count *)v1[3];
  if (v2)
  {
    uint64_t v3 = *v1;
    unint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      if (v1[2])
      {
        if (*(void *)(v3 + 24)) {
          dispatch_retain(*(dispatch_object_t *)(v3 + 24));
        }
        unint64_t v5 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping...", buf, 2u);
        }
        uint64_t v15 = 0x1100000010;
        *(_OWORD *)long long buf = xmmword_223B4C4C8;
        long long v14 = unk_223B4C4D8;
        std::__tree<DataMode>::__assign_unique<DataMode const*>((uint64_t **)(v3 + 216), (int *)buf, (int *)&v16);
        *(_OWORD *)long long buf = xmmword_223B4C4B0;
        std::__tree<DataMode>::__assign_unique<DataMode const*>((uint64_t **)(v3 + 240), (int *)buf, (int *)&v14);
        uint64_t v6 = *(void *)(v3 + 152);
        uint64_t v7 = v1[1];
        dispatch_group_t group = v7;
        if (v7)
        {
          dispatch_retain(v7);
          dispatch_group_enter(group);
        }
        (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v6 + 16))(v6, &group);
        if (group)
        {
          dispatch_group_leave(group);
          if (group) {
            dispatch_release(group);
          }
        }
        uint64_t v8 = v1[3];
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
        }
        operator new();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  std::unique_ptr<SystemDeterminationManager::initialize(dispatch::group_session)::$_0,std::default_delete<SystemDeterminationManager::initialize(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_223B1E040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_group_t group, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,std::__shared_weak_count *a23)
{
  if (v24) {
    dispatch_release(v24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  std::unique_ptr<SystemDeterminationManager::initialize(dispatch::group_session)::$_0,std::default_delete<SystemDeterminationManager::initialize(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SystemDeterminationManager::initialize(dispatch::group_session)::$_0,std::default_delete<SystemDeterminationManager::initialize(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    unint64_t v4 = *(NSObject **)(v2 + 8);
    if (v4)
    {
      dispatch_group_leave(v4);
      unint64_t v5 = *(NSObject **)(v2 + 8);
      if (v5) {
        dispatch_release(v5);
      }
    }
    MEMORY[0x223CBBDF0](v2, 0x20C40DC1BFBCFLL);
  }
  return a1;
}

void *std::__function::__func<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D744530;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D744530;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223CBBDF0);
}

void *std::__function::__func<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D744530;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D744530;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      unint64_t v5 = *(SystemDeterminationManager **)(a1 + 8);
      if (v5) {
        SystemDeterminationManager::handleCountryOfOrigination_timer_sync(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_223B1E3B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<SystemDeterminationManager::initialize(dispatch::group_session)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_24getEmergencyIMSClientRefEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(**(void **)(result + 40) + 168);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 16);
    uint64_t v3 = *(void *)(v2 + 24);
    *a2 = v4;
    a2[1] = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__110shared_ptrIN3ims15EmergencyClientEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__110shared_ptrIN3ims15EmergencyClientEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void *std::__function::__value_func<void ()(BOOL,std::string)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_15getIMSClientRefERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  long long v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(*v3 + 104, v3 + 1);
  if ((void *)(v4 + 112) == v5) {
    goto LABEL_9;
  }
  uint64_t v7 = v5[7];
  uint64_t v6 = (std::__shared_weak_count *)v5[8];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 104))(v7);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v7)
  {
LABEL_9:
    uint64_t v8 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *((unsigned __int8 *)v3 + 31);
      BOOL v10 = (v9 & 0x80u) != 0;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = v3[2];
      }
      if (v10) {
        unint64_t v11 = (const char *)v3[1];
      }
      else {
        unint64_t v11 = (const char *)(v3 + 1);
      }
      if (v9) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = "<invalid>";
      }
      int v13 = 136315138;
      long long v14 = v12;
      _os_log_error_impl(&dword_223AF3000, v8, OS_LOG_TYPE_ERROR, "IMSClient: No instance for %s", (uint8_t *)&v13, 0xCu);
    }
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_223B1E6F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__110shared_ptrIN3ims6ClientEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__110shared_ptrIN3ims6ClientEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_18getLazuliClientRefERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  long long v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(*v3 + 128, v3 + 1);
  if ((void *)(v4 + 136) == v5) {
    goto LABEL_9;
  }
  uint64_t v7 = v5[7];
  uint64_t v6 = (std::__shared_weak_count *)v5[8];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 104))(v7);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v7)
  {
LABEL_9:
    uint64_t v8 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *((unsigned __int8 *)v3 + 31);
      BOOL v10 = (v9 & 0x80u) != 0;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = v3[2];
      }
      if (v10) {
        unint64_t v11 = (const char *)v3[1];
      }
      else {
        unint64_t v11 = (const char *)(v3 + 1);
      }
      if (v9) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = "<invalid>";
      }
      int v13 = 136315138;
      long long v14 = v12;
      _os_log_error_impl(&dword_223AF3000, v8, OS_LOG_TYPE_ERROR, "LazuliClient: No instance for %s", (uint8_t *)&v13, 0xCu);
    }
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_223B1E930(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_15getIMSConfigRefERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  long long v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(*v3 + 104, v3 + 1);
  if ((void *)(v4 + 112) == v5) {
    goto LABEL_9;
  }
  uint64_t v7 = v5[7];
  uint64_t v6 = (std::__shared_weak_count *)v5[8];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 72))(v7);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v7)
  {
LABEL_9:
    uint64_t v8 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *((unsigned __int8 *)v3 + 31);
      BOOL v10 = (v9 & 0x80u) != 0;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = v3[2];
      }
      if (v10) {
        unint64_t v11 = (const char *)v3[1];
      }
      else {
        unint64_t v11 = (const char *)(v3 + 1);
      }
      if (v9) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = "<invalid>";
      }
      int v13 = 136315138;
      long long v14 = v12;
      _os_log_error_impl(&dword_223AF3000, v8, OS_LOG_TYPE_ERROR, "IMSConfig: No instance for %s", (uint8_t *)&v13, 0xCu);
    }
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_223B1EA9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__110shared_ptrIKN2sd28IMSSubscriberConfigInterfaceEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__110shared_ptrIKN2sd28IMSSubscriberConfigInterfaceEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_19fetchImsCredentialsERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  long long v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(*v3 + 104, v3 + 1);
  if ((void *)(v4 + 112) == v5) {
    goto LABEL_10;
  }
  uint64_t v7 = v5[7];
  uint64_t v6 = (std::__shared_weak_count *)v5[8];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v7 + 64))(&v8, v7);
    (*(void (**)(uint64_t))(*(void *)v8 + 696))(v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v7)
  {
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_223B1EC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__110shared_ptrI10t_ims_infoEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__110shared_ptrI10t_ims_infoEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::__emplace_unique_key_args<PersonalityID,std::pair<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>(uint64_t **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  long long v5 = (char *)a1[1];
  uint64_t v7 = (char **)(a1 + 1);
  uint64_t v8 = (char **)(a1 + 1);
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v8 = (char **)v5;
        BOOL v10 = v5 + 32;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void *)v5 + 4) & 0x80) == 0) {
          break;
        }
        long long v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_7;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0) {
        return;
      }
      long long v5 = v8[1];
    }
    while (v5);
    uint64_t v7 = v8 + 1;
  }
LABEL_7:
  uint64_t v15 = 0;
  unint64_t v11 = (char *)operator new(0x48uLL);
  v14[0] = v11;
  v14[1] = v6;
  uint64_t v12 = (std::string *)(v11 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v11 + SystemDeterminationManager::handleDumpState_sync(this - 6) = *(void *)(a3 + 16);
  }
  *(_OWORD *)(v11 + 5SystemDeterminationManager::handleDumpState_sync(this - 6) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  LOBYTE(v15) = 1;
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = v8;
  *uint64_t v7 = v11;
  int v13 = (uint64_t *)**a1;
  if (v13)
  {
    *a1 = v13;
    unint64_t v11 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v11);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  v14[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14);
}

void sub_223B1EE9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<PersonalityID const,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::__erase_unique<PersonalityID>(uint64_t **a1, void *a2)
{
  long long v3 = (uint64_t *)(a1 + 1);
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v6 = (uint64_t *)(a1 + 1);
    uint64_t v7 = a1[1];
    do
    {
      char v8 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, a2);
      if (v8 >= 0) {
        uint64_t v9 = (uint64_t **)v7;
      }
      else {
        uint64_t v9 = (uint64_t **)(v7 + 1);
      }
      if (v8 >= 0) {
        uint64_t v6 = v7;
      }
      uint64_t v7 = *v9;
    }
    while (*v9);
    if (v6 != v3
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v6 + 4) & 0x80) == 0)
    {
      BOOL v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          BOOL v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v6;
        do
        {
          unint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v6) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v6);
      std::__destroy_at[abi:ne180100]<std::pair<PersonalityID const,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,0>((uint64_t)(v6 + 4));
      operator delete(v6);
    }
  }
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  long long v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      long long v3 = a2;
      goto LABEL_7;
    }
    do
    {
      long long v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v3;
    *long long v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v12;
      }
      _OWORD v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    uint64_t v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        uint64_t v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        *uint64_t v20 = (uint64_t)v7;
        _OWORD v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      uint64_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    BOOL v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v12;
    }
    std::locale v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    *BOOL v13 = v12;
    *(void *)(v12 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  uint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  uint64_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *uint64_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    _OWORD v7[2] = (uint64_t)v15;
    uint64_t v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  *uint64_t v24 = v23;
LABEL_72:
  *(void *)(v23 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v24;
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_23getCountryOfOriginationEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = **(void **)(a1 + 40);
  if (*(char *)(v2 + 319) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 296), *(void *)(v2 + 304));
  }
  else
  {
    long long v3 = (long long *)(v2 + 296);
    long long v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

__n128 ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 40) + 16))(&v4);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  __n128 result = v4;
  *(void *)(v2 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v5;
  *(__n128 *)uint64_t v2 = result;
  return result;
}

__n128 ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 40) + 16))(&v4);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  __n128 result = v4;
  *(void *)(v2 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v5;
  *(__n128 *)uint64_t v2 = result;
  return result;
}

uint64_t **std::__tree<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::map<unsigned int,std::vector<std::string>>>>>::__emplace_unique_key_args<subscriber::SimSlot,std::piecewise_construct_t const&,std::tuple<subscriber::SimSlot const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[7] = 0;
    void v7[6] = 0;
    void v7[5] = (uint64_t *)(v7 + 6);
    *uint64_t v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t **std::__tree<std::__value_type<unsigned int,std::vector<std::string>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::vector<std::string>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    void v7[6] = 0;
    v7[7] = 0;
    void v7[5] = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    _OWORD v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::revokeImsClientNetworkServices(void)::$_0>(SystemDeterminationManager::revokeImsClientNetworkServices(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::revokeImsClientNetworkServices(void)::$_0,dispatch_queue_s *::default_delete<SystemDeterminationManager::revokeImsClientNetworkServices(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v12 = a1;
  uint64_t v13 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
  if (v2)
  {
    long long v3 = *(SystemDeterminationManager **)v1;
    __n128 v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(v1 + 8))
      {
        uint64_t v6 = (void *)*((void *)v3 + 13);
        if (v6 != (void *)((char *)v3 + 112))
        {
          while (1)
          {
            uint64_t v15 = 0;
            uint64_t v16 = 0;
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v6[7] + 64))(&v15);
            if (SystemDeterminationManager::isInWiFiCallingOnlyMode_sync(v3))
            {
              if ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 400))(v15)) {
                break;
              }
            }
            (*(void (**)(void, uint64_t))(*(void *)v6[7] + 192))(v6[7], 1);
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            uint64_t v7 = (void *)v6[1];
            if (v7)
            {
              do
              {
                unsigned int v8 = v7;
                uint64_t v7 = (void *)*v7;
              }
              while (v7);
            }
            else
            {
              do
              {
                unsigned int v8 = (void *)v6[2];
                BOOL v9 = *v8 == (void)v6;
                uint64_t v6 = v8;
              }
              while (!v9);
            }
            uint64_t v6 = v8;
            if (v8 == (void *)((char *)v3 + 112)) {
              goto LABEL_20;
            }
          }
          uint64_t v10 = *((void *)v3 + 5);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#I Cannot revoke IMS Network Services in WiFiCalling-only mode", buf, 2u);
          }
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
        }
      }
LABEL_20:
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  std::unique_ptr<SystemDeterminationManager::notifyServiceStart(void)::$_0,std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0>>::~unique_ptr[abi:ne180100](&v13);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v12);
}

void sub_223B1F7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  std::unique_ptr<SystemDeterminationManager::notifyServiceStart(void)::$_0,std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_16getApplicationIdERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  return SystemDeterminationManager::getApplicationId_sync(**(void ***)(a1 + 40), *(void *)(a1 + 40) + 8);
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFhvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFhvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::handleControllerShutdown(PersonalityID const&,BOOL)::$_0>(SystemDeterminationManager::handleControllerShutdown(PersonalityID const&,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::handleControllerShutdown(PersonalityID const&,BOOL)::$_0,dispatch_queue_s *::default_delete<SystemDeterminationManager::handleControllerShutdown(PersonalityID const&,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v22 = a1;
  uint64_t v23 = v1;
  uint64_t v2 = *(void *)(v1 + 24);
  long long v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(unsigned __int8 *)(v1 + 23);
    BOOL v5 = (v4 & 0x80u) != 0;
    if ((v4 & 0x80u) != 0) {
      uint64_t v4 = *(void *)(v1 + 8);
    }
    if (v5) {
      uint64_t v6 = *(const char **)v1;
    }
    else {
      uint64_t v6 = (const char *)v1;
    }
    if (v4) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v25 = v7;
    _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#N LazuliControllerShutdown: Done with Lazuli controller shutdown, accountId=%s", buf, 0xCu);
  }
  unsigned int v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v2 + 128, (void *)v1);
  if ((void *)(v2 + 136) == v8)
  {
    BOOL v9 = 0;
LABEL_28:
    uint64_t v16 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(unsigned __int8 *)(v1 + 23);
      BOOL v18 = (v17 & 0x80u) != 0;
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(v1 + 8);
      }
      if (v18) {
        uint64_t v19 = *(const char **)v1;
      }
      else {
        uint64_t v19 = (const char *)v1;
      }
      if (v17) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = "<invalid>";
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v25 = v20;
      _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#N LazuliControllerShutdown: no controller found for accountId=%s", buf, 0xCu);
    }
    goto LABEL_38;
  }
  uint64_t v10 = v8[7];
  BOOL v9 = (std::__shared_weak_count *)v8[8];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v10) {
    goto LABEL_28;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v10 + 160))(v10))
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 40))(v10);
    std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::__erase_unique<PersonalityID>((uint64_t **)(v2 + 128), (void *)v1);
    if (!v9) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  uint64_t v11 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = *(unsigned __int8 *)(v1 + 23);
    BOOL v13 = (v12 & 0x80u) != 0;
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(v1 + 8);
    }
    if (v13) {
      uint64_t v14 = *(const char **)v1;
    }
    else {
      uint64_t v14 = (const char *)v1;
    }
    if (v12) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v25 = v15;
    _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#N LazuliControllerShutdown: controller was re-enabled during shutdown - restarting, accountId=%s", buf, 0xCu);
  }
  (*(void (**)(uint64_t, void))(*(void *)v10 + 152))(v10, 0);
  (*(void (**)(uint64_t, const char *, uint64_t))(*(void *)v10 + 520))(v10, "LazuliFeature", 3);
LABEL_38:
  if (v9) {
LABEL_39:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_40:
  std::unique_ptr<SystemDeterminationManager::handleControllerShutdown(PersonalityID const&,BOOL)::$_0,std::default_delete<SystemDeterminationManager::handleControllerShutdown(PersonalityID const&,BOOL)::$_0>>::~unique_ptr[abi:ne180100](&v23);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v22);
}

void sub_223B1FB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::unique_ptr<SystemDeterminationManager::handleControllerShutdown(PersonalityID const&,BOOL)::$_0,std::default_delete<SystemDeterminationManager::handleControllerShutdown(PersonalityID const&,BOOL)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SystemDeterminationManager::handleControllerShutdown(PersonalityID const&,BOOL)::$_0,std::default_delete<SystemDeterminationManager::handleControllerShutdown(PersonalityID const&,BOOL)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x223CBBDF0](v2, 0x1032C402ED93987);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::setThumperPrimaryConfigured(subscriber::SimSlot,BOOL)::$_0>(SystemDeterminationManager::setThumperPrimaryConfigured(subscriber::SimSlot,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::setThumperPrimaryConfigured(subscriber::SimSlot,BOOL)::$_0,dispatch_queue_s *::default_delete<SystemDeterminationManager::setThumperPrimaryConfigured(subscriber::SimSlot,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  BOOL v13 = a1;
  v14[0] = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)v1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      if (*(void *)(v1 + 24))
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v3 + 88);
        v14[1] = *(void *)(v3 + 80);
        uint64_t v15 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        PersonalityIdFromSlotId();
        uint64_t v7 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v3 + 104, __p);
        if ((void *)(v3 + 112) == v7)
        {
          uint64_t v9 = 0;
          unsigned int v8 = 0;
        }
        else
        {
          uint64_t v9 = v7[7];
          unsigned int v8 = (std::__shared_weak_count *)v7[8];
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        if (v17 < 0) {
          operator delete(*(void **)__p);
        }
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        if (v9)
        {
          uint64_t v10 = **(NSObject ***)(v1 + 16);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            if (*(unsigned char *)(v1 + 12)) {
              uint64_t v11 = "Enabled";
            }
            else {
              uint64_t v11 = "Disabled";
            }
            *(_DWORD *)long long __p = 136315138;
            *(void *)&__p[4] = v11;
            _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#I ThumperFeature: is %s on Primary device", __p, 0xCu);
          }
          (*(void (**)(uint64_t, void))(*(void *)v9 + 232))(v9, *(unsigned __int8 *)(v1 + 12));
        }
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  std::unique_ptr<SystemDeterminationManager::setThumperPrimaryConfigured(subscriber::SimSlot,BOOL)::$_0,std::default_delete<SystemDeterminationManager::setThumperPrimaryConfigured(subscriber::SimSlot,BOOL)::$_0>>::~unique_ptr[abi:ne180100](v14);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v13);
}

void sub_223B1FDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::unique_ptr<SystemDeterminationManager::setThumperPrimaryConfigured(subscriber::SimSlot,BOOL)::$_0,std::default_delete<SystemDeterminationManager::setThumperPrimaryConfigured(subscriber::SimSlot,BOOL)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SystemDeterminationManager::setThumperPrimaryConfigured(subscriber::SimSlot,BOOL)::$_0,std::default_delete<SystemDeterminationManager::setThumperPrimaryConfigured(subscriber::SimSlot,BOOL)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x223CBBDF0](v2, 0x1060C4007F9CF1ALL);
  }
  return a1;
}

void *std::__function::__func<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0,std::allocator<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D7445B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0,std::allocator<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D7445B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223CBBDF0);
}

char *std::__function::__func<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0,std::allocator<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_26D7445B0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0,std::allocator<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D7445B0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0,std::allocator<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0,std::allocator<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0,std::allocator<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0>,void ()(void)>::operator()(void *a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      if (a1[2])
      {
        BOOL v5 = (os_log_t *)a1[1];
        if (v5)
        {
          uint64_t v6 = *v5;
          if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
          {
            int v7 = 136315138;
            unsigned int v8 = "operator()";
            _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: new type is pushed", (uint8_t *)&v7, 0xCu);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

uint64_t std::__function::__func<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0,std::allocator<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0,std::allocator<SystemDeterminationManager::setVoLTEAttachAPN(std::shared_ptr<sd::IMSSubscriberModelInterface> const&)::$_0>,void ()(void)>::target_type()
{
}

BOOL ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNS1_13getImsFeatureERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v2;
  uint64_t v4 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(*v2 + 104, v2 + 1);
  if ((void *)(v3 + 112) == v4) {
    return 0;
  }
  uint64_t v6 = v4[7];
  BOOL v5 = (std::__shared_weak_count *)v4[8];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v6 + 64))(&v10, v6);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v10 + 160))(&v8);
    BOOL v1 = *(unsigned char *)(v8 + 21) != 0;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v5) {
      goto LABEL_10;
    }
  }
  else if (v5)
  {
LABEL_10:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (!v6) {
    return 0;
  }
  return v1;
}

void sub_223B20234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

void ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_22getCellAccessTypeFieldERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  BOOL v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(*v3 + 104, v3 + 1);
  if ((void *)(v4 + 112) == v5)
  {
    uint64_t v8 = 0;
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_9;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v5[7];
  uint64_t v8 = (std::__shared_weak_count *)v6[8];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v7) {
    goto LABEL_8;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 64))(&v9);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 648))(v9, 1);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
LABEL_9:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_223B203C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_17getCellAccessInfoERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  BOOL v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(*v3 + 104, v3 + 1);
  if ((void *)(v4 + 112) == v5)
  {
    uint64_t v8 = 0;
LABEL_8:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    goto LABEL_9;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v5[7];
  uint64_t v8 = (std::__shared_weak_count *)v6[8];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v7) {
    goto LABEL_8;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 64))(&v9);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 656))(v9, 1);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
LABEL_9:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_223B204E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0>(SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0,dispatch_queue_s *::default_delete<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v11 = a1;
  uint64_t v12 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)v1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      if (*(void *)(v1 + 40))
      {
        uint64_t v6 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v3 + 104, (void *)(v1 + 8));
        if ((void *)(v3 + 112) != v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = v6[7];
          uint64_t v9 = (std::__shared_weak_count *)v7[8];
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v8) {
            (*(void (**)(uint64_t, void))(*(void *)v8 + 368))(v8, *(unsigned __int8 *)(v1 + 32));
          }
          if (v9) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  std::unique_ptr<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0,std::default_delete<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0>>::~unique_ptr[abi:ne180100](&v12);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v11);
}

void sub_223B205F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::unique_ptr<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0,std::default_delete<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0,std::default_delete<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    MEMORY[0x223CBBDF0](v2, 0x1032C400E5F17A0);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::handleCallWaitingStatusUpdate(PersonalityID const&,BOOL)::$_0>(SystemDeterminationManager::handleCallWaitingStatusUpdate(PersonalityID const&,BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::handleCallWaitingStatusUpdate(PersonalityID const&,BOOL)::$_0,dispatch_queue_s *::default_delete<SystemDeterminationManager::handleCallWaitingStatusUpdate(PersonalityID const&,BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v11 = a1;
  uint64_t v12 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)v1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      if (*(void *)(v1 + 40))
      {
        uint64_t v6 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v3 + 104, (void *)(v1 + 8));
        if ((void *)(v3 + 112) != v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = v6[7];
          uint64_t v9 = (std::__shared_weak_count *)v7[8];
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v8) {
            (*(void (**)(uint64_t, void))(*(void *)v8 + 384))(v8, *(unsigned __int8 *)(v1 + 32));
          }
          if (v9) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  std::unique_ptr<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0,std::default_delete<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0>>::~unique_ptr[abi:ne180100](&v12);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v11);
}

void sub_223B20764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::unique_ptr<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0,std::default_delete<SystemDeterminationManager::handleSSPTransportUpdate(PersonalityID const&,BOOL)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_22publicIdentityFromImsiERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  BOOL v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(*v3 + 104, v3 + 1);
  if ((void *)(v4 + 112) != v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = v5[7];
    uint64_t v8 = (std::__shared_weak_count *)v6[8];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7)
    {
      uint64_t v12 = 0;
      BOOL v13 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 64))(&v12);
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 64))(v12) == 1)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        goto LABEL_10;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 632))(v12))
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v12 + 528))(&v10);
        sd::UEInfo::DeviceInfo::publicIdentityFromImsi((sd::UEInfo::DeviceInfo *)(v10 + 104));
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
LABEL_10:
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        int v9 = 0;
        if (!v8)
        {
LABEL_18:
          if (!v9) {
            return;
          }
          goto LABEL_19;
        }
LABEL_17:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        goto LABEL_18;
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    int v9 = 1;
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_19:
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_223B2092C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::requestCountryOfOrigination(PersonalityID const&)::$_0>(SystemDeterminationManager::requestCountryOfOrigination(PersonalityID const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::requestCountryOfOrigination(PersonalityID const&)::$_0,dispatch_queue_s *::default_delete<SystemDeterminationManager::requestCountryOfOrigination(PersonalityID const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  int v9 = a1;
  uint64_t v10 = v1;
  uint64_t v2 = (std::__shared_weak_count *)v1[4];
  if (v2)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      if (v1[3])
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = (void *)(v3 + 320);
          if (*(char *)(v3 + 343) < 0) {
            uint64_t v7 = (void *)*v7;
          }
          *(_DWORD *)long long buf = 136315138;
          uint64_t v12 = v7;
          _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I CountryOfOrigination: Using IP based country : %s", buf, 0xCu);
        }
        SystemDeterminationManager::handleCountryOfOrigination(v3, v1 + 1, v3 + 320);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  std::unique_ptr<SystemDeterminationManager::requestCountryOfOrigination(PersonalityID const&)::$_0,std::default_delete<SystemDeterminationManager::requestCountryOfOrigination(PersonalityID const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v9);
}

void sub_223B20A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::unique_ptr<SystemDeterminationManager::requestCountryOfOrigination(PersonalityID const&)::$_0,std::default_delete<SystemDeterminationManager::requestCountryOfOrigination(PersonalityID const&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SystemDeterminationManager::requestCountryOfOrigination(PersonalityID const&)::$_0,std::default_delete<SystemDeterminationManager::requestCountryOfOrigination(PersonalityID const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    MEMORY[0x223CBBDF0](v2, 0x20C40769AC3DALL);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::handleWifiAvailable_sync(BOOL)::$_0>(SystemDeterminationManager::handleWifiAvailable_sync(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::handleWifiAvailable_sync(BOOL)::$_0,dispatch_queue_s *::default_delete<SystemDeterminationManager::handleWifiAvailable_sync(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v13 = a1;
  uint64_t v14 = v1;
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (v2)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      if (v1[1])
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = (void *)(v3 + 320);
          if (*(char *)(v3 + 343) < 0) {
            uint64_t v7 = (void *)*v7;
          }
          *(_DWORD *)long long buf = 136315138;
          uint64_t v16 = v7;
          _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I WiFiAvailable: Using IP based country : %s", buf, 0xCu);
        }
        uint64_t v8 = *(void **)(v3 + 104);
        if (v8 != (void *)(v3 + 112))
        {
          do
          {
            SystemDeterminationManager::handleCountryOfOrigination(v3, v8 + 7, v3 + 320);
            int v9 = (void *)v8[1];
            if (v9)
            {
              do
              {
                uint64_t v10 = v9;
                int v9 = (void *)*v9;
              }
              while (v9);
            }
            else
            {
              do
              {
                uint64_t v10 = (void *)v8[2];
                BOOL v11 = *v10 == (void)v8;
                uint64_t v8 = v10;
              }
              while (!v11);
            }
            uint64_t v8 = v10;
          }
          while (v10 != (void *)(v3 + 112));
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  std::unique_ptr<SystemDeterminationManager::notifyServiceStart(void)::$_0,std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v14);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v13);
}

void sub_223B20C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::unique_ptr<SystemDeterminationManager::notifyServiceStart(void)::$_0,std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::setAddressRefId(PersonalityID const&,std::string const&,std::string const&)::$_0>(SystemDeterminationManager::setAddressRefId(PersonalityID const&,std::string const&,std::string const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::setAddressRefId(PersonalityID const&,std::string const&,std::string const&)::$_0,std::default_delete<SystemDeterminationManager::setAddressRefId(PersonalityID const&,std::string const&,std::string const&)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v1 = *a1;
  BOOL v11 = a1;
  uint64_t v12 = v1;
  uint64_t v2 = (std::__shared_weak_count *)v1[11];
  if (v2)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      if (v1[10])
      {
        uint64_t v6 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v3 + 104, v1 + 1);
        if ((void *)(v3 + 112) != v6)
        {
          uint64_t v7 = v6;
          uint64_t v8 = v6[7];
          int v9 = (std::__shared_weak_count *)v7[8];
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v8)
          {
            uint64_t v13 = 0;
            uint64_t v14 = 0;
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 64))(&v13);
            (*(void (**)(uint64_t, void *, void *))(*(void *)v13 + 184))(v13, v1 + 4, v1 + 7);
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
          }
          if (v9) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  std::unique_ptr<SystemDeterminationManager::setAddressRefId(PersonalityID const&,std::string const&,std::string const&)::$_0,std::default_delete<SystemDeterminationManager::setAddressRefId(PersonalityID const&,std::string const&,std::string const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v12);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v11);
}

void sub_223B20D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  std::unique_ptr<SystemDeterminationManager::setAddressRefId(PersonalityID const&,std::string const&,std::string const&)::$_0,std::default_delete<SystemDeterminationManager::setAddressRefId(PersonalityID const&,std::string const&,std::string const&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SystemDeterminationManager::setAddressRefId(PersonalityID const&,std::string const&,std::string const&)::$_0,std::default_delete<SystemDeterminationManager::setAddressRefId(PersonalityID const&,std::string const&,std::string const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 88);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    if (*(char *)(v2 + 79) < 0) {
      operator delete(*(void **)(v2 + 56));
    }
    if (*(char *)(v2 + 55) < 0) {
      operator delete(*(void **)(v2 + 32));
    }
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    MEMORY[0x223CBBDF0](v2, 0x1032C40120D4007);
  }
  return a1;
}

void ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_15getAddressRefIdERK13PersonalityIDRNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEESE_E3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSG__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  uint64_t v3 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(*v1 + 104, v1 + 1);
  if ((void *)(v2 + 112) != v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = v3[7];
    uint64_t v6 = (std::__shared_weak_count *)v4[8];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v5)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 64))(&v7);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 192))(v7, v1[4], v1[5]);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_223B20F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_19getIMSInterfaceListERK13PersonalityIDRKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSH__block_invoke(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  memset(v10, 0, sizeof(v10));
  uint64_t v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v4 + 104, v3 + 1);
  if ((void *)(v4 + 112) == v5)
  {
    __n128 v6 = 0uLL;
    goto LABEL_6;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v5[7];
  int v9 = (std::__shared_weak_count *)v7[8];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      __n128 v6 = *(__n128 *)&v10[8];
LABEL_6:
      *(void *)a2 = 0;
      *(__n128 *)(a2 + 8) = v6;
      memset(v10, 0, sizeof(v10));
      goto LABEL_10;
    }
  }
  else
  {
    __n128 v6 = 0uLL;
    if (!v8) {
      goto LABEL_6;
    }
  }
  (*(void (**)(uint64_t, uint64_t *, __n128))(*(void *)v8 + 568))(v8, v3 + 4, v6);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
LABEL_10:
  BOOL v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
}

void sub_223B21048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void ___ZN8dispatch9sync_implIRU13block_pointerFNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v3);
  uint64_t v2 = *(std::vector<std::string> **)(a1 + 32);
  std::vector<std::string>::__vdeallocate(v2);
  *(_OWORD *)&v2->__begin_ = v3;
  v2->__end_cap_.__value_ = v4;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  uint64_t v5 = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
}

void ___ZN8dispatch19async_and_wait_implIRU13block_pointerFNSt3__16vectorINS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS6_IS8_EEEEvEEENS1_5decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS1_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v3);
  uint64_t v2 = *(std::vector<std::string> **)(a1 + 32);
  std::vector<std::string>::__vdeallocate(v2);
  *(_OWORD *)&v2->__begin_ = v3;
  v2->__end_cap_.__value_ = v4;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  uint64_t v5 = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_26isDeviceInBatterySaverModeEvE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS5__block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(**(void **)(a1 + 40) + 152);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 480))();
  }
  return result;
}

uint64_t ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_21isIMSAudioOnAPEnabledEN10subscriber7SimSlotEE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS7__block_invoke(std::__shared_weak_count *a1)
{
  shared_weak_owners = (unsigned int *)a1[1].__shared_weak_owners_;
  uint64_t v3 = *(void *)shared_weak_owners;
  if (!*(void *)(*(void *)shared_weak_owners + 152)) {
    goto LABEL_18;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 88);
  BOOL v11 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  uint64_t v5 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v3 + 104, &__p);
  if ((void *)(v3 + 112) == v5)
  {
    uint64_t v7 = 0;
    __n128 v6 = 0;
  }
  else
  {
    uint64_t v7 = v5[7];
    __n128 v6 = (std::__shared_weak_count *)v5[8];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v14 < 0) {
    operator delete(__p);
  }
  a1 = v11;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v7)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 72))(&__p, v7);
    uint64_t v8 = __p;
    uint64_t v9 = (*(uint64_t (**)(void, void))(**(void **)(v3 + 152) + 224))(*(void *)(v3 + 152), shared_weak_owners[2]);
    char v1 = (*(uint64_t (**)(void *, uint64_t))(*(void *)v8 + 392))(v8, v9);
    a1 = v13;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v6) {
      goto LABEL_16;
    }
  }
  else if (v6)
  {
LABEL_16:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v7) {
LABEL_18:
  }
    char v1 = sd::IMSSubscriberConfigInterface::APOnlyModeDefaultVal((sd::IMSSubscriberConfigInterface *)a1);
  return v1 & 1;
}

void sub_223B21318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(CTError,BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::getInHomeCountryStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL)>)::$_0>(SystemDeterminationManager::getInHomeCountryStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::getInHomeCountryStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getInHomeCountryStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  char v55 = a1;
  uint64_t v56 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(std::__shared_weak_count **)(*(void *)v1 + 88);
  *(void *)long long buf = *(void *)(*(void *)v1 + 80);
  unsigned int v58 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  uint64_t v4 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v2 + 104, &__p);
  if ((void *)(v2 + 112) == v4)
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v6 = v4[7];
    uint64_t v5 = (std::__shared_weak_count *)v4[8];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (!v6)
  {
    uint64_t v7 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v40 = subscriber::asString();
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v40;
      _os_log_error_impl(&dword_223AF3000, v7, OS_LOG_TYPE_ERROR, "Could not find IMS subscriber for slot %s while getting is in home country status", (uint8_t *)&__p, 0xCu);
    }
    std::function<void ()(CTError,BOOL)>::operator()(*(void *)(v1 + 40), 0x2D00000001, 0);
    goto LABEL_94;
  }
  char v65 = 0;
  int v64 = 0;
  char v63 = 0;
  int v62 = 0;
  (*(void (**)(uint64_t, char *, int *, char *, int *, uint64_t))(*(void *)v6 + 624))(v6, &v65, &v64, &v63, &v62, 1);
  if (v65 && v63)
  {
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v6 + 64))(&v60, v6);
    memset(&__p, 0, sizeof(__p));
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v60 + 528))(buf);
    if (*(char *)(*(void *)buf + 351) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(*(void *)buf + 328), *(void *)(*(void *)buf + 336));
    }
    else {
      std::string __p = *(std::string *)(*(void *)buf + 328);
    }
    if (v58) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v58);
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 80));
    uint64_t v9 = ServiceMap;
    uint64_t v10 = *(void *)(MEMORY[0x263F03580] + 8);
    if (v10 < 0)
    {
      BOOL v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v12 = 5381;
      do
      {
        uint64_t v10 = v12;
        unsigned int v13 = *v11++;
        uint64_t v12 = (33 * v12) ^ v13;
      }
      while (v13);
    }
    std::mutex::lock(ServiceMap);
    *(void *)long long buf = v10;
    char v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v9[1].__m_.__sig, (unint64_t *)buf);
    if (v14)
    {
      uint64_t v16 = v14[3];
      uint64_t v15 = (std::__shared_weak_count *)v14[4];
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v9);
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        char v17 = 0;
        if (!v16)
        {
LABEL_28:
          uint64_t v18 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_223AF3000, v18, OS_LOG_TYPE_ERROR, "Unable to to find IsoMccCache service while getting is in home country status", buf, 2u);
          }
          std::function<void ()(CTError,BOOL)>::operator()(*(void *)(v1 + 40), 0x2D00000001, 0);
          int v19 = 1;
          goto LABEL_77;
        }
LABEL_33:
        *(void *)long long buf = 0;
        unsigned int v58 = 0;
        uint64_t v59 = 0;
        (*(void (**)(uint8_t *__return_ptr, uint64_t, std::string *))(*(void *)v16 + 24))(buf, v16, &__p);
        if (SHIBYTE(v59) < 0)
        {
          uint64_t v20 = v58;
          if (v58)
          {
            BOOL v21 = *(uint8_t **)buf;
LABEL_38:
            uint64_t v22 = (uint8_t *)v20 + (void)v21;
            while (v21 != v22)
            {
              *BOOL v21 = __toupper((char)*v21);
              ++v21;
            }
            *(_OWORD *)long long v67 = 0uLL;
            uint64_t v68 = 0;
            uint64_t v23 = v67;
            (*(void (**)(uint8_t *__return_ptr))(*(void *)v60 + 256))(v67);
            uint64_t v24 = (std::__shared_weak_count *)HIBYTE(v68);
            size_t v25 = *(void *)&v67[8];
            if (v68 >= 0) {
              uint64_t v26 = &v67[HIBYTE(v68)];
            }
            else {
              uint64_t v26 = (uint8_t *)(*(void *)v67 + *(void *)&v67[8]);
            }
            if (v68 < 0) {
              uint64_t v23 = *(uint8_t **)v67;
            }
            if (v23 != v26)
            {
              do
              {
                *uint64_t v23 = __toupper((char)*v23);
                ++v23;
              }
              while (v23 != v26);
              uint64_t v24 = (std::__shared_weak_count *)HIBYTE(v68);
              size_t v25 = *(void *)&v67[8];
            }
            if ((char)v24 >= 0) {
              uint64_t v27 = v24;
            }
            else {
              uint64_t v27 = (std::__shared_weak_count *)v25;
            }
            uint64_t v28 = (std::__shared_weak_count *)HIBYTE(v59);
            if (v59 < 0) {
              uint64_t v28 = v58;
            }
            if (v27 == v28)
            {
              if (v59 >= 0) {
                uint64_t v29 = buf;
              }
              else {
                uint64_t v29 = *(uint8_t **)buf;
              }
              if ((v24 & 0x80) != 0)
              {
                char v38 = memcmp(*(const void **)v67, v29, v25) == 0;
              }
              else if (v24)
              {
                uint64_t v30 = (uint64_t)&v24[-1].__shared_weak_owners_ + 7;
                int v31 = v67;
                do
                {
                  int v33 = *v31++;
                  int v32 = v33;
                  int v35 = *v29++;
                  int v34 = v35;
                  BOOL v37 = v30-- != 0;
                  char v38 = v32 == v34;
                }
                while (v32 == v34 && v37);
              }
              else
              {
                char v38 = 1;
              }
            }
            else
            {
              char v38 = 0;
            }
            std::function<void ()(CTError,BOOL)>::operator()(*(void *)(v1 + 40), 0, v38);
            if (SHIBYTE(v68) < 0) {
              operator delete(*(void **)v67);
            }
            int v19 = 1;
LABEL_75:
            if (SHIBYTE(v59) < 0) {
              operator delete(*(void **)buf);
            }
LABEL_77:
            if ((v17 & 1) == 0) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v61) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v61);
            }
            if (v19) {
              goto LABEL_94;
            }
            goto LABEL_84;
          }
        }
        else
        {
          uint64_t v20 = (std::__shared_weak_count *)HIBYTE(v59);
          if (HIBYTE(v59))
          {
            BOOL v21 = buf;
            goto LABEL_38;
          }
        }
        uint64_t v39 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
        {
          uint64_t p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)long long v67 = 136315138;
          *(void *)&v67[4] = p_p;
          _os_log_error_impl(&dword_223AF3000, v39, OS_LOG_TYPE_ERROR, "Unable to infer ISO Alpha2 country code for mcc = %s, while getting is in home country status", v67, 0xCu);
        }
        int v19 = 0;
        goto LABEL_75;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    std::mutex::unlock(v9);
    uint64_t v15 = 0;
    char v17 = 1;
    if (!v16) {
      goto LABEL_28;
    }
    goto LABEL_33;
  }
LABEL_84:
  uint64_t v41 = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 80));
  __int16 v42 = v41;
  std::string::size_type v43 = *(void *)(MEMORY[0x263F03560] + 8);
  if ((v43 & 0x8000000000000000) != 0)
  {
    uint64_t v44 = (unsigned __int8 *)(v43 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v45 = 5381;
    do
    {
      std::string::size_type v43 = v45;
      unsigned int v46 = *v44++;
      uint64_t v45 = (33 * v45) ^ v46;
    }
    while (v46);
  }
  std::mutex::lock(v41);
  __p.__r_.__value_.__r.__words[0] = v43;
  uint64_t v47 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v42[1].__m_.__sig, (unint64_t *)&__p);
  if (v47)
  {
    uint64_t v49 = v47[3];
    uint64_t v48 = (std::__shared_weak_count *)v47[4];
    if (v48)
    {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v42);
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
      char v50 = 0;
      if (!v49) {
        goto LABEL_90;
      }
      goto LABEL_99;
    }
  }
  else
  {
    uint64_t v49 = 0;
  }
  std::mutex::unlock(v42);
  uint64_t v48 = 0;
  char v50 = 1;
  if (!v49)
  {
LABEL_90:
    size_t v51 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_223AF3000, v51, OS_LOG_TYPE_ERROR, "Could not find Roaming service for getting is in home country status", (uint8_t *)&__p, 2u);
    }
    std::function<void ()(CTError,BOOL)>::operator()(*(void *)(v1 + 40), 0x2D00000001, 0);
    if ((v50 & 1) == 0) {
      goto LABEL_93;
    }
    goto LABEL_94;
  }
LABEL_99:
  uint64_t v53 = *(unsigned int *)(v1 + 8);
  std::__function::__value_func<void ()(CTError,BOOL)>::__value_func[abi:ne180100]((uint64_t)&__p, v1 + 16);
  (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v49 + 32))(v49, v53, &__p);
  std::__function::__value_func<void ()(CTError,BOOL)>::~__value_func[abi:ne180100](&__p);
  if ((v50 & 1) == 0) {
LABEL_93:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
LABEL_94:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::unique_ptr<SystemDeterminationManager::getInHomeCountryStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getInHomeCountryStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v56);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v55);
}

void sub_223B21B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if ((v29 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::unique_ptr<SystemDeterminationManager::getInHomeCountryStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getInHomeCountryStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SystemDeterminationManager::getInHomeCountryStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getInHomeCountryStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<void ()(CTError,BOOL)>::~__value_func[abi:ne180100]((void *)(v2 + 16));
    MEMORY[0x223CBBDF0](v2, 0x1060C4067D9AA7CLL);
  }
  return a1;
}

uint64_t std::function<void ()(CTError,BOOL)>::operator()(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = a2;
  char v4 = a3;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, char *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x223CBBDF0);
}

uint64_t std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  char v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0>(SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v57 = a1;
  uint64_t v58 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(std::__shared_weak_count **)(*(void *)v1 + 88);
  *(void *)long long buf = *(void *)(*(void *)v1 + 80);
  uint64_t v68 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  char v4 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v2 + 104, &__p);
  if ((void *)(v2 + 112) == v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = v4[7];
    uint64_t v5 = (std::__shared_weak_count *)v4[8];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  if (!v6)
  {
    uint64_t v9 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v41 = subscriber::asString();
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v41;
      _os_log_error_impl(&dword_223AF3000, v9, OS_LOG_TYPE_ERROR, "Could not find IMS subscriber for slot %s while getRoamingStatus", (uint8_t *)&__p, 0xCu);
    }
    std::function<void ()(CTError,BOOL,BOOL)>::operator()(*(void *)(v1 + 40), 0x2D00000001, 1, 1);
    goto LABEL_96;
  }
  char v64 = 0;
  int v63 = 0;
  char v62 = 0;
  int v61 = 0;
  (*(void (**)(uint64_t, char *, int *, char *, int *, uint64_t))(*(void *)v6 + 624))(v6, &v64, &v63, &v62, &v61, 1);
  __int16 v7 = 0;
  if (!v64)
  {
    __int16 v8 = 0;
    goto LABEL_86;
  }
  __int16 v8 = 0;
  if (!v62) {
    goto LABEL_86;
  }
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v6 + 64))(&v59, v6);
  memset(&__p, 0, sizeof(__p));
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v59 + 528))(buf);
  if (*(char *)(*(void *)buf + 351) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(*(void *)buf + 328), *(void *)(*(void *)buf + 336));
  }
  else {
    std::string __p = *(std::string *)(*(void *)buf + 328);
  }
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 80));
  BOOL v11 = ServiceMap;
  uint64_t v12 = *(void *)(MEMORY[0x263F03580] + 8);
  if (v12 < 0)
  {
    unsigned int v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v12;
  uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v11[1].__m_.__sig, (unint64_t *)buf);
  if (!v16)
  {
    uint64_t v18 = 0;
LABEL_33:
    std::mutex::unlock(v11);
    char v17 = 0;
    char v19 = 1;
    if (!v18) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }
  uint64_t v18 = v16[3];
  char v17 = (std::__shared_weak_count *)v16[4];
  if (!v17) {
    goto LABEL_33;
  }
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v11);
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  char v19 = 0;
  if (!v18)
  {
LABEL_29:
    uint64_t v20 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_223AF3000, v20, OS_LOG_TYPE_ERROR, "Unable to to find IsoMccCache service while getRoamingStatus", buf, 2u);
    }
    std::function<void ()(CTError,BOOL,BOOL)>::operator()(*(void *)(v1 + 40), 0x2D00000001, 1, 1);
    __int16 v7 = 0;
    __int16 v8 = 0;
    goto LABEL_79;
  }
LABEL_34:
  *(void *)long long buf = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  (*(void (**)(uint8_t *__return_ptr, uint64_t, std::string *))(*(void *)v18 + 24))(buf, v18, &__p);
  if (SHIBYTE(v69) < 0)
  {
    BOOL v21 = v68;
    if (v68)
    {
      uint64_t v22 = *(uint8_t **)buf;
      goto LABEL_39;
    }
LABEL_68:
    uint64_t v39 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      uint64_t p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(__s1[0]) = 136315138;
      *(void **)((char *)__s1 + 4) = p_p;
      _os_log_error_impl(&dword_223AF3000, v39, OS_LOG_TYPE_ERROR, "Unable to infer ISO Alpha2 country code for mcc = %s, while getRoamingStatus", (uint8_t *)__s1, 0xCu);
    }
    __int16 v7 = 0;
    __int16 v8 = 0;
    goto LABEL_77;
  }
  BOOL v21 = (std::__shared_weak_count *)HIBYTE(v69);
  if (!HIBYTE(v69)) {
    goto LABEL_68;
  }
  uint64_t v22 = buf;
LABEL_39:
  uint64_t v23 = (uint8_t *)v21 + (void)v22;
  while (v22 != v23)
  {
    *uint64_t v22 = __toupper((char)*v22);
    ++v22;
  }
  *(_OWORD *)__s1 = 0uLL;
  uint64_t v72 = 0;
  uint64_t v24 = __s1;
  (*(void (**)(void **__return_ptr))(*(void *)v59 + 256))(__s1);
  size_t v25 = (std::__shared_weak_count *)HIBYTE(v72);
  uint64_t v26 = (std::__shared_weak_count *)__s1[1];
  if (v72 >= 0) {
    uint64_t v27 = (void **)((char *)__s1 + HIBYTE(v72));
  }
  else {
    uint64_t v27 = (void **)((char *)__s1[0] + (unint64_t)__s1[1]);
  }
  if (v72 < 0) {
    uint64_t v24 = (void **)__s1[0];
  }
  if (v24 != v27)
  {
    do
    {
      *(unsigned char *)uint64_t v24 = __toupper(*(char *)v24);
      uint64_t v24 = (void **)((char *)v24 + 1);
    }
    while (v24 != v27);
    size_t v25 = (std::__shared_weak_count *)HIBYTE(v72);
    uint64_t v26 = (std::__shared_weak_count *)__s1[1];
  }
  if ((char)v25 >= 0) {
    uint64_t v28 = v25;
  }
  else {
    uint64_t v28 = v26;
  }
  char v29 = (std::__shared_weak_count *)HIBYTE(v69);
  if (v69 < 0) {
    char v29 = v68;
  }
  if (v28 == v29)
  {
    if (v69 >= 0) {
      uint64_t v30 = buf;
    }
    else {
      uint64_t v30 = *(uint8_t **)buf;
    }
    if ((v25 & 0x80) != 0)
    {
      uint64_t v40 = __s1[0];
      __int16 v7 = memcmp(__s1[0], v30, (size_t)v26) == 0;
      goto LABEL_74;
    }
    if (!v25)
    {
      __int16 v7 = 1;
      goto LABEL_76;
    }
    uint64_t v31 = (uint64_t)&v25[-1].__shared_weak_owners_ + 7;
    int v32 = __s1;
    do
    {
      int v34 = *(unsigned __int8 *)v32;
      int v32 = (void **)((char *)v32 + 1);
      int v33 = v34;
      int v36 = *v30++;
      int v35 = v36;
      BOOL v38 = v31-- != 0;
      __int16 v7 = v33 == v35;
    }
    while (v33 == v35 && v38);
  }
  else
  {
    __int16 v7 = 0;
  }
  if ((v25 & 0x80) != 0)
  {
    uint64_t v40 = __s1[0];
LABEL_74:
    operator delete(v40);
  }
LABEL_76:
  __int16 v8 = 1;
LABEL_77:
  if (SHIBYTE(v69) < 0) {
    operator delete(*(void **)buf);
  }
LABEL_79:
  if ((v19 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  if (!v18) {
    goto LABEL_96;
  }
LABEL_86:
  __int16 v42 = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 80));
  std::string::size_type v43 = v42;
  std::string::size_type v44 = *(void *)(MEMORY[0x263F03560] + 8);
  if ((v44 & 0x8000000000000000) != 0)
  {
    uint64_t v45 = (unsigned __int8 *)(v44 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v46 = 5381;
    do
    {
      std::string::size_type v44 = v46;
      unsigned int v47 = *v45++;
      uint64_t v46 = (33 * v46) ^ v47;
    }
    while (v47);
  }
  std::mutex::lock(v42);
  __p.__r_.__value_.__r.__words[0] = v44;
  uint64_t v48 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v43[1].__m_.__sig, (unint64_t *)&__p);
  if (v48)
  {
    uint64_t v50 = v48[3];
    uint64_t v49 = (std::__shared_weak_count *)v48[4];
    if (v49)
    {
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v43);
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      char v51 = 0;
      if (!v50) {
        goto LABEL_92;
      }
      goto LABEL_101;
    }
  }
  else
  {
    uint64_t v50 = 0;
  }
  std::mutex::unlock(v43);
  uint64_t v49 = 0;
  char v51 = 1;
  if (!v50)
  {
LABEL_92:
    uint64_t v52 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_223AF3000, v52, OS_LOG_TYPE_ERROR, "Could not find Roaming service for getRoamingStatus", (uint8_t *)&__p, 2u);
    }
    std::function<void ()(CTError,BOOL,BOOL)>::operator()(*(void *)(v1 + 40), 0x2D00000001, 1, 1);
    if ((v51 & 1) == 0) {
      goto LABEL_95;
    }
    goto LABEL_96;
  }
LABEL_101:
  uint64_t v54 = *(unsigned int *)(v1 + 8);
  std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::__value_func[abi:ne180100]((uint64_t)&__p, v1 + 16);
  __int16 v66 = v7 | (v8 << 8);
  v70 = 0;
  char v55 = operator new(0x30uLL);
  *(void *)char v55 = &unk_26D744630;
  std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::__value_func[abi:ne180100]((uint64_t)(v55 + 4), (uint64_t)&__p);
  v55[20] = v66;
  v70 = v55;
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v50 + 40))(v50, v54, buf);
  std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::~__value_func[abi:ne180100](buf);
  std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::~__value_func[abi:ne180100](&__p);
  if ((v51 & 1) == 0) {
LABEL_95:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
LABEL_96:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::unique_ptr<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v58);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v57);
}

void sub_223B225E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if ((v38 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  std::unique_ptr<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::~__value_func[abi:ne180100]((void *)(v2 + 16));
    MEMORY[0x223CBBDF0](v2, 0x1060C4067D9AA7CLL);
  }
  return a1;
}

uint64_t std::function<void ()(CTError,BOOL,BOOL)>::operator()(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v7 = a2;
  char v6 = a3;
  char v5 = a4;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, char *, char *))(*(void *)a1 + 48))(a1, &v7, &v6, &v5);
}

void *std::__function::__func<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1},std::allocator<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1}>,void ()(CTError,BOOL,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_26D744630;
  std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1},std::allocator<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1}>,void ()(CTError,BOOL,BOOL)>::~__func(void *a1)
{
  *a1 = &unk_26D744630;
  std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x223CBBDF0);
}

_WORD *std::__function::__func<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1},std::allocator<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1}>,void ()(CTError,BOOL,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *(void *)uint64_t v3 = &unk_26D744630;
  std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::__value_func[abi:ne180100]((uint64_t)(v3 + 4), v2);
  v3[20] = *(_WORD *)(a1 + 40);
  return v3;
}

void sub_223B228C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1},std::allocator<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1}>,void ()(CTError,BOOL,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D744630;
  uint64_t result = std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::__value_func[abi:ne180100](a2 + 8, a1 + 8);
  *(_WORD *)(a2 + 40) = *(_WORD *)(a1 + 40);
  return result;
}

void *std::__function::__func<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1},std::allocator<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1}>,void ()(CTError,BOOL,BOOL)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1},std::allocator<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1}>,void ()(CTError,BOOL,BOOL)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(CTError,BOOL,BOOL)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1},std::allocator<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1}>,void ()(CTError,BOOL,BOOL)>::operator()(uint64_t a1, uint64_t *a2, unsigned char *a3, unsigned char *a4)
{
  uint64_t v4 = *a2;
  char v5 = *a3 == 0;
  char v6 = (unsigned char *)(a1 + 40);
  if (!*(unsigned char *)(a1 + 41)) {
    char v6 = a4;
  }
  return std::function<void ()(CTError,BOOL,BOOL)>::operator()(*(void *)(a1 + 32), v4, v5, *v6 == 0);
}

uint64_t std::__function::__func<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1},std::allocator<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1}>,void ()(CTError,BOOL,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1},std::allocator<SystemDeterminationManager::getRoamingStatus(subscriber::SimSlot,std::function<void ()(CTError,BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(CTError,BOOL,BOOL)#1}>,void ()(CTError,BOOL,BOOL)>::target_type()
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::triggerKeepAliveWakeupEvent(NetworkInterfaceType,std::function<void ()(CTError)>)::$_0>(SystemDeterminationManager::triggerKeepAliveWakeupEvent(NetworkInterfaceType,std::function<void ()(CTError)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::triggerKeepAliveWakeupEvent(NetworkInterfaceType,std::function<void ()(CTError)>)::$_0,std::default_delete<SystemDeterminationManager::triggerKeepAliveWakeupEvent(NetworkInterfaceType,std::function<void ()(CTError)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  char v17 = a1;
  uint64_t v18 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(v1 + 8);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I KeepAlive: wakeup event triggered for interface: %d", buf, 8u);
  }
  char v5 = *(void **)(v2 + 128);
  if (v5 != (void *)(v2 + 136))
  {
    do
    {
      *(void *)long long buf = 0;
      BOOL v21 = 0;
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v5[7] + 64))(buf);
      uint64_t v6 = (*(uint64_t (**)(void))(**(void **)buf + 72))(*(void *)buf);
      uint64_t v7 = (NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 72) + 16))(*(void *)(v2 + 72), v6);
      if ((unint64_t)(*(uint64_t (**)(void))(**(void **)buf + 400))(*(void *)buf) >> 32
        || *(_DWORD *)(v1 + 8) == 2)
      {
        if ((unint64_t)(*(uint64_t (**)(void))(**(void **)buf + 400))(*(void *)buf) >> 32 == 1
          && *(_DWORD *)(v1 + 8) == 2)
        {
          __int16 v8 = *v7;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)char v19 = 0;
            uint64_t v9 = v8;
            uint64_t v10 = "#I KeepAlive: event is for Cellular interface, but stack is using non-Cellular - dropping";
LABEL_13:
            _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, v10, v19, 2u);
          }
        }
        else
        {
          (*(void (**)(void))(*(void *)v5[7] + 296))(v5[7]);
        }
      }
      else
      {
        BOOL v11 = *v7;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)char v19 = 0;
          uint64_t v9 = v11;
          uint64_t v10 = "#I KeepAlive: event is not for Cellular interface, but stack is using cellular - dropping";
          goto LABEL_13;
        }
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      uint64_t v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          unsigned int v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unsigned int v13 = (void *)v5[2];
          BOOL v14 = *v13 == (void)v5;
          char v5 = v13;
        }
        while (!v14);
      }
      char v5 = v13;
    }
    while (v13 != (void *)(v2 + 136));
  }
  uint64_t v15 = *(void *)(v1 + 40);
  *(void *)long long buf = 0;
  if (!v15) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v15 + 48))(v15, buf);
  std::unique_ptr<SystemDeterminationManager::triggerKeepAliveWakeupEvent(NetworkInterfaceType,std::function<void ()(CTError)>)::$_0,std::default_delete<SystemDeterminationManager::triggerKeepAliveWakeupEvent(NetworkInterfaceType,std::function<void ()(CTError)>)::$_0>>::~unique_ptr[abi:ne180100](&v18);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v17);
}

void sub_223B22D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *std::unique_ptr<SystemDeterminationManager::triggerKeepAliveWakeupEvent(NetworkInterfaceType,std::function<void ()(CTError)>)::$_0,std::default_delete<SystemDeterminationManager::triggerKeepAliveWakeupEvent(NetworkInterfaceType,std::function<void ()(CTError)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<void ()(CTError)>::~__value_func[abi:ne180100]((void *)(v2 + 16));
    MEMORY[0x223CBBDF0](v2, 0x1020C40D64A9D5ALL);
  }
  return a1;
}

void ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_15isIMSRegisteredERbRN5caulk10option_setIN2sd14ImsServiceTypeEjEES4_R15DataContextTypebE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOSE__block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  uint64_t v3 = *(std::__shared_weak_count **)(*v1 + 88);
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  PersonalityIdFromSlotId();
  int v4 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(v2 + 104, &__p);
  if ((void *)(v2 + 112) == v4)
  {
    uint64_t v6 = 0;
    char v5 = 0;
  }
  else
  {
    uint64_t v6 = v4[7];
    char v5 = (std::__shared_weak_count *)v4[8];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v6 + 624))(v6, v1[1], v1[2], v1[3], v1[4], *((unsigned __int8 *)v1 + 40));
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_223B22E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::getIMSRegistrationStatus(PersonalityID const&,std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>)::$_0>(SystemDeterminationManager::getIMSRegistrationStatus(PersonalityID const&,std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::getIMSRegistrationStatus(PersonalityID const&,std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getIMSRegistrationStatus(PersonalityID const&,std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v24 = a1;
  uint64_t v25 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 72);
  if (v2)
  {
    uint64_t v3 = *(void **)v1;
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (!*(void *)(v1 + 64))
      {
LABEL_33:
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        goto LABEL_34;
      }
      uint64_t v6 = v3[11];
      *(void *)&long long buf = v3[10];
      *((void *)&buf + 1) = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      char v7 = isPresent();
      if (*((void *)&buf + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
      }
      if ((v7 & 1) == 0)
      {
        unsigned int v13 = v3[5];
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          uint64_t v20 = *(unsigned __int8 *)(v1 + 31);
          BOOL v21 = (v20 & 0x80u) != 0;
          if ((v20 & 0x80u) != 0) {
            uint64_t v20 = *(void *)(v1 + 16);
          }
          if (v21) {
            uint64_t v22 = *(const char **)(v1 + 8);
          }
          else {
            uint64_t v22 = (const char *)(v1 + 8);
          }
          if (v20) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = "<invalid>";
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v23;
          _os_log_error_impl(&dword_223AF3000, v13, OS_LOG_TYPE_ERROR, "IMSRegistrationStatus: Unknown Personality: %s", (uint8_t *)&buf, 0xCu);
        }
        std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>::operator()(*(void *)(v1 + 56), 0, 0);
        goto LABEL_33;
      }
      __int16 v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(v3 + 13), (void *)(v1 + 8));
      if (v3 + 14 == v8)
      {
        BOOL v11 = 0;
      }
      else
      {
        char v9 = v8;
        uint64_t v10 = v8[7];
        BOOL v11 = (std::__shared_weak_count *)v9[8];
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v10)
        {
          __int16 v27 = 0;
          LODWORD(buf) = 0;
          int v26 = 0;
          (*(void (**)(uint64_t, char *, long long *, __int16 *, int *, uint64_t))(*(void *)v10 + 624))(v10, (char *)&v27 + 1, &buf, &v27, &v26, 1);
          if (HIBYTE(v27)) {
            int v12 = buf;
          }
          else {
            int v12 = 0;
          }
          std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>::operator()(*(void *)(v1 + 56), v12, 1);
LABEL_31:
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          goto LABEL_33;
        }
      }
      BOOL v14 = v3[5];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(unsigned __int8 *)(v1 + 31);
        BOOL v16 = (v15 & 0x80u) != 0;
        if ((v15 & 0x80u) != 0) {
          uint64_t v15 = *(void *)(v1 + 16);
        }
        if (v16) {
          char v17 = *(const char **)(v1 + 8);
        }
        else {
          char v17 = (const char *)(v1 + 8);
        }
        if (v15) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = "<invalid>";
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v18;
        _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#N IMSRegistrationStatus: No instance for %s. Bailing...", (uint8_t *)&buf, 0xCu);
      }
      std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>::operator()(*(void *)(v1 + 56), 0, 0);
      goto LABEL_31;
    }
  }
LABEL_34:
  std::unique_ptr<SystemDeterminationManager::getIMSRegistrationStatus(PersonalityID const&,std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getIMSRegistrationStatus(PersonalityID const&,std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v25);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v24);
}

void sub_223B231E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::unique_ptr<SystemDeterminationManager::getIMSRegistrationStatus(PersonalityID const&,std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getIMSRegistrationStatus(PersonalityID const&,std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va1);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SystemDeterminationManager::getIMSRegistrationStatus(PersonalityID const&,std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getIMSRegistrationStatus(PersonalityID const&,std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 72);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    std::__function::__value_func<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>::~__value_func[abi:ne180100]((void *)(v2 + 32));
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    MEMORY[0x223CBBDF0](v2, 0x1072C4032BB6D35);
  }
  return a1;
}

uint64_t std::function<void ()(caulk::option_set<sd::ImsServiceType,unsigned int>,BOOL)>::operator()(uint64_t a1, int a2, char a3)
{
  int v5 = a2;
  char v4 = a3;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

void *std::__function::__value_func<void ()(DataContextType,DataContextType,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::getIMSRegistrationTransport(PersonalityID const&,std::function<void ()(DataContextType,DataContextType,BOOL)>)::$_0>(SystemDeterminationManager::getIMSRegistrationTransport(PersonalityID const&,std::function<void ()(DataContextType,DataContextType,BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<SystemDeterminationManager::getIMSRegistrationTransport(PersonalityID const&,std::function<void ()(DataContextType,DataContextType,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getIMSRegistrationTransport(PersonalityID const&,std::function<void ()(DataContextType,DataContextType,BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v23 = a1;
  uint64_t v24 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 72);
  if (v2)
  {
    uint64_t v3 = *(void **)v1;
    char v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (!*(void *)(v1 + 64))
      {
LABEL_30:
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        goto LABEL_31;
      }
      uint64_t v6 = v3[11];
      *(void *)&long long buf = v3[10];
      *((void *)&buf + 1) = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      char v7 = isPresent();
      if (*((void *)&buf + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
      }
      if ((v7 & 1) == 0)
      {
        int v12 = v3[5];
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          uint64_t v19 = *(unsigned __int8 *)(v1 + 31);
          BOOL v20 = (v19 & 0x80u) != 0;
          if ((v19 & 0x80u) != 0) {
            uint64_t v19 = *(void *)(v1 + 16);
          }
          if (v20) {
            BOOL v21 = *(const char **)(v1 + 8);
          }
          else {
            BOOL v21 = (const char *)(v1 + 8);
          }
          if (v19) {
            uint64_t v22 = v21;
          }
          else {
            uint64_t v22 = "<invalid>";
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v22;
          _os_log_error_impl(&dword_223AF3000, v12, OS_LOG_TYPE_ERROR, "IMSRegistrationTransport: Unknown Personality: %s", (uint8_t *)&buf, 0xCu);
        }
        std::function<void ()(DataContextType,DataContextType,BOOL)>::operator()(*(void *)(v1 + 56), 0, 0, 0);
        goto LABEL_30;
      }
      __int16 v8 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>((uint64_t)(v3 + 13), (void *)(v1 + 8));
      if (v3 + 14 == v8)
      {
        BOOL v11 = 0;
      }
      else
      {
        char v9 = v8;
        uint64_t v10 = v8[7];
        BOOL v11 = (std::__shared_weak_count *)v9[8];
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v10)
        {
          __int16 v26 = 0;
          LODWORD(buf) = 0;
          int v25 = 0;
          (*(void (**)(uint64_t, char *, long long *, __int16 *, int *, uint64_t))(*(void *)v10 + 624))(v10, (char *)&v26 + 1, &buf, &v26, &v25, 1);
          std::function<void ()(DataContextType,DataContextType,BOOL)>::operator()(*(void *)(v1 + 56), v25, v26, 1);
LABEL_28:
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          goto LABEL_30;
        }
      }
      unsigned int v13 = v3[5];
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(unsigned __int8 *)(v1 + 31);
        BOOL v15 = (v14 & 0x80u) != 0;
        if ((v14 & 0x80u) != 0) {
          uint64_t v14 = *(void *)(v1 + 16);
        }
        if (v15) {
          BOOL v16 = *(const char **)(v1 + 8);
        }
        else {
          BOOL v16 = (const char *)(v1 + 8);
        }
        if (v14) {
          char v17 = v16;
        }
        else {
          char v17 = "<invalid>";
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_223AF3000, v13, OS_LOG_TYPE_DEFAULT, "#N IMSRegistrationTransport: No instance for %s. Bailing...", (uint8_t *)&buf, 0xCu);
      }
      std::function<void ()(DataContextType,DataContextType,BOOL)>::operator()(*(void *)(v1 + 56), 0, 0, 0);
      goto LABEL_28;
    }
  }
LABEL_31:
  std::unique_ptr<SystemDeterminationManager::getIMSRegistrationTransport(PersonalityID const&,std::function<void ()(DataContextType,DataContextType,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getIMSRegistrationTransport(PersonalityID const&,std::function<void ()(DataContextType,DataContextType,BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v24);
  return std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v23);
}

void sub_223B2360C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::unique_ptr<SystemDeterminationManager::getIMSRegistrationTransport(PersonalityID const&,std::function<void ()(DataContextType,DataContextType,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getIMSRegistrationTransport(PersonalityID const&,std::function<void ()(DataContextType,DataContextType,BOOL)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va1);
  std::unique_ptr<void ctu::SharedSynchronizable<SystemDeterminationManager>::execute_wrapped<SystemDeterminationManager::notifyServiceStart(void)::$_0>(SystemDeterminationManager::notifyServiceStart(void)::$_0 &&)::{lambda(void)#1},std::default_delete<SystemDeterminationManager::notifyServiceStart(void)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<SystemDeterminationManager::getIMSRegistrationTransport(PersonalityID const&,std::function<void ()(DataContextType,DataContextType,BOOL)>)::$_0,std::default_delete<SystemDeterminationManager::getIMSRegistrationTransport(PersonalityID const&,std::function<void ()(DataContextType,DataContextType,BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 72);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    std::__function::__value_func<void ()(DataContextType,DataContextType,BOOL)>::~__value_func[abi:ne180100]((void *)(v2 + 32));
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    MEMORY[0x223CBBDF0](v2, 0x1072C4032BB6D35);
  }
  return a1;
}

uint64_t std::function<void ()(DataContextType,DataContextType,BOOL)>::operator()(uint64_t a1, int a2, int a3, char a4)
{
  int v7 = a2;
  int v6 = a3;
  char v5 = a4;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *, char *))(*(void *)a1 + 48))(a1, &v7, &v6, &v5);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI26SystemDeterminationManagerE20execute_wrapped_syncIZNKS1_14useMDNFromCSIMERK13PersonalityIDE3__0EEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS8__block_invoke(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 40);
  uint64_t v3 = *v2;
  char v4 = std::__tree<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::__map_value_compare<PersonalityID,std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>,std::less<PersonalityID>,true>,std::allocator<std::__value_type<PersonalityID,std::shared_ptr<sd::IMSSubscriberControllerInterface>>>>::find<PersonalityID>(*v2 + 104, v2 + 1);
  if ((void *)(v3 + 112) == v4) {
    goto LABEL_10;
  }
  uint64_t v6 = v4[7];
  char v5 = (std::__shared_weak_count *)v4[8];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v6 + 64))(&v8, v6);
    char v1 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 312))(v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v5) {
      goto LABEL_8;
    }
  }
  else if (v5)
  {
LABEL_8:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (!v6) {
LABEL_10:
  }
    char v1 = 0;
  return v1 & 1;
}

void sub_223B23810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<SystemDeterminationManager::ImsEmergencyAuthDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7446C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SystemDeterminationManager::ImsEmergencyAuthDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7446C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

uint64_t std::__shared_ptr_emplace<SystemDeterminationManager::ImsEmergencyAuthDelegate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void SDTimer::SDTimer(std::string *this, long long *a2, std::string::size_type *a3, NSObject **a4, uint64_t a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  std::string::size_type v10 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v11 = *a4;
  this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)*a4;
  if (v11) {
    dispatch_retain(v11);
  }
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[2], a5);
  this[3].__r_.__value_.__l.__size_ = 0;
}

void sub_223B23980(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(NSObject **)(v1 + 40);
  if (v3) {
    dispatch_release(v3);
  }
  char v4 = *(std::__shared_weak_count **)(v1 + 32);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void SDTimer::~SDTimer(SDTimer *this)
{
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 6);
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    dispatch_release(v3);
  }
  char v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void SDTimer::set(SDTimer *this, int a2)
{
  uint64_t v4 = *((void *)this + 10);
  if (v4)
  {
    *((void *)this + 10) = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  Registry::getTimerService(&v13, *((Registry **)this + 3));
  uint64_t v5 = v13;
  if (*((char *)this + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else {
    std::string v12 = *(std::string *)this;
  }
  uint64_t v6 = *((void *)this + 5);
  if (v6) {
    dispatch_retain(*((dispatch_object_t *)this + 5));
  }
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN7SDTimer3setEi_block_invoke;
  aBlock[3] = &__block_descriptor_tmp;
  aBlock[4] = this;
  int v7 = _Block_copy(aBlock);
  std::string v18 = v12;
  memset(&v12, 0, sizeof(v12));
  BOOL v16 = v7;
  dispatch_object_t v17 = v6;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, std::string *, uint64_t, uint64_t, void, dispatch_object_t *, const void **))(*(void *)v5 + 16))(&v15, v5, &v18, 1, 1000000 * a2, 0, &v17, &v16);
  if (v16) {
    _Block_release(v16);
  }
  if (v17) {
    dispatch_release(v17);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = v15;
  uint64_t v15 = 0;
  uint64_t v9 = *((void *)this + 10);
  *((void *)this + 10) = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    uint64_t v10 = v15;
    uint64_t v15 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_223B23C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDTimer::cancel(SDTimer *this)
{
  uint64_t v1 = *((void *)this + 10);
  if (v1)
  {
    *((void *)this + 10) = 0;
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  return v1 != 0;
}

uint64_t ___ZN7SDTimer3setEi_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 80);
  *(void *)(v1 + 80) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(v1 + 72);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 48);

  return v4();
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sd::IMSSubscriberController::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_223B23FE0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<sd::IMSSubscriberController> ctu::SharedSynchronizable<sd::IMSSubscriberController>::make_shared_ptr<sd::IMSSubscriberController>(sd::IMSSubscriberController*)::{lambda(sd::IMSSubscriberController*)#1}::operator() const(sd::IMSSubscriberController*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_223B24008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_end_catch();
  if (a9)
  {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
    if (!v9) {
      goto LABEL_3;
    }
  }
  else if (!v9)
  {
    goto LABEL_3;
  }
  dispatch_release(v9);
LABEL_3:
  _Unwind_Resume(a1);
}

unint64_t sd::IMSSubscriberController::generateNextIdentifier(sd::IMSSubscriberController *this)
{
  return atomic_fetch_add(&sd::IMSSubscriberController::generateNextIdentifier(void)::nextIdentifier, 1uLL);
}

void sd::IMSSubscriberController::IMSSubscriberController(void *a1, uint64_t a2, NSObject **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __p[4] = *(void **)MEMORY[0x263EF8340];
  *a1 = &unk_26D745B80;
  uint64_t v10 = a1 + 1;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)__p, (const char *)*MEMORY[0x263F03770], "5wi.ctr");
  *uint64_t v10 = 0;
  v10[1] = 0;
  BOOL v11 = *a3;
  a1[3] = *a3;
  if (v11) {
    dispatch_retain(v11);
  }
  a1[4] = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223CBB890](v13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)__p);
  a1[6] = MEMORY[0x263F03668] + 16;
  a1[7] = MEMORY[0x263F03648] + 16;
  a1[8] = &unk_26D744E80;
  a1[9] = &unk_26D744760;
  uint64_t v12 = *(void *)(a7 + 8);
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_223B2459C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, sd::IMSSubscriberModelDelegate *a13, sd::IMSConnHelperManagerInterface *a14, dispatch_object_t a15, dispatch_object_t object, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (object) {
    dispatch_release(object);
  }
  int v25 = (std::__shared_weak_count *)v23[21];
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  __int16 v26 = (std::__shared_weak_count *)v23[19];
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  __int16 v27 = (std::__shared_weak_count *)v23[17];
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v28 = v23[15];
  v23[15] = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = (std::__shared_weak_count *)v23[14];
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  uint64_t v30 = (std::__shared_weak_count *)v23[12];
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  uint64_t v31 = v23[10];
  v23[10] = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  sd::IMSSubscriberModelDelegate::~IMSSubscriberModelDelegate(a13);
  sd::IMSConnHelperManagerInterface::~IMSConnHelperManagerInterface(a14);
  MEMORY[0x223CBB890](a9);
  ctu::SharedSynchronizable<sd::DCNManager>::~SharedSynchronizable(a10);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberController::~IMSSubscriberController(sd::IMSSubscriberController *this)
{
  *(void *)this = &unk_26D7447C8;
  uint64_t v2 = (sd::IMSSubscriberController *)((char *)this + 48);
  *((void *)this + SystemDeterminationManager::handleDumpState_sync(this - 6) = &unk_26D744B78;
  uint64_t v3 = (sd::IMSSubscriberController *)((char *)this + 56);
  *((void *)this + 7) = &unk_26D744C40;
  *((void *)this + 8) = &unk_26D744C80;
  *((void *)this + 9) = &unk_26D744D20;
  uint64_t v4 = *((void *)this + 41);
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = *((void *)this + 41);
    if (v5) {
      dispatch_release(v5);
    }
  }
  std::unique_ptr<SDTimer>::reset[abi:ne180100]((SDTimer **)this + 34, 0);
  std::unique_ptr<SDTimer>::reset[abi:ne180100]((SDTimer **)this + 33, 0);
  std::unique_ptr<SDTimer>::reset[abi:ne180100]((SDTimer **)this + 32, 0);
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 30);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 28);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  BOOL v11 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v13 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  sd::IMSSubscriberModelDelegate::~IMSSubscriberModelDelegate(v3);
  sd::IMSConnHelperManagerInterface::~IMSConnHelperManagerInterface(v2);
  MEMORY[0x223CBB890]((char *)this + 40);
  ctu::SharedSynchronizable<sd::DCNManager>::~SharedSynchronizable((void *)this + 1);
}

{
  uint64_t vars8;

  sd::IMSSubscriberController::~IMSSubscriberController(this);

  JUMPOUT(0x223CBBDF0);
}

void non-virtual thunk to'sd::IMSSubscriberController::~IMSSubscriberController(sd::IMSSubscriberController *this)
{
}

{
  sd::IMSSubscriberController::~IMSSubscriberController((sd::IMSSubscriberController *)((char *)this - 56));
}

{
  sd::IMSSubscriberController::~IMSSubscriberController((sd::IMSSubscriberController *)((char *)this - 64));
}

{
  sd::IMSSubscriberController::~IMSSubscriberController((sd::IMSSubscriberController *)((char *)this - 72));
}

{
  uint64_t vars8;

  sd::IMSSubscriberController::~IMSSubscriberController((sd::IMSSubscriberController *)((char *)this - 48));

  JUMPOUT(0x223CBBDF0);
}

{
  uint64_t vars8;

  sd::IMSSubscriberController::~IMSSubscriberController((sd::IMSSubscriberController *)((char *)this - 56));

  JUMPOUT(0x223CBBDF0);
}

{
  uint64_t vars8;

  sd::IMSSubscriberController::~IMSSubscriberController((sd::IMSSubscriberController *)((char *)this - 64));

  JUMPOUT(0x223CBBDF0);
}

{
  uint64_t vars8;

  sd::IMSSubscriberController::~IMSSubscriberController((sd::IMSSubscriberController *)((char *)this - 72));

  JUMPOUT(0x223CBBDF0);
}

uint64_t sd::IMSSubscriberController::getIdentifier(sd::IMSSubscriberController *this)
{
  return *((void *)this + 26);
}

const char *sd::IMSSubscriberController::getName(sd::IMSSubscriberController *this)
{
  return "IMSSubscriberController";
}

void sd::IMSSubscriberController::bootstrap(uint64_t a1, uint64_t *a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = v4;
  *(void *)(a1 + 152) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  int v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 160) + 56))(__p);
    unint64_t v8 = v47;
    if ((v47 & 0x80u) == 0)
    {
      uint64_t v9 = __p;
    }
    else
    {
      unint64_t v8 = (unint64_t)__p[1];
      uint64_t v9 = (void **)__p[0];
    }
    uint64_t v10 = v8 ? (char *)v9 : "<invalid>";
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v10;
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping model: %s", (uint8_t *)&buf, 0xCu);
    if ((char)v47 < 0) {
      operator delete(__p[0]);
    }
  }
  BOOL v11 = *(std::__shared_weak_count **)(a1 + 152);
  uint64_t v12 = *(void *)(a1 + 160);
  uint64_t v44 = *(void *)(a1 + 144);
  uint64_t v45 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 16);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = std::__shared_weak_count::lock(v13);
    if (v15)
    {
      uint64_t v16 = v14 + 56;
      if (!v14) {
        uint64_t v16 = 0;
      }
      uint64_t v42 = v16;
      std::string::size_type v43 = v15;
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v12 + 16))(v12, &v44, &v42);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      v41[0] = 0;
      v41[1] = 0;
      (*(void (**)(void *__return_ptr))(**(void **)(a1 + 160) + 88))(v41);
      if (*(unsigned char *)(*(void *)(a1 + 104) + 8))
      {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 112))(*(void *)(a1 + 160), 2);
        uint64_t v17 = *(void *)(a1 + 120);
        std::string v18 = *(NSObject **)(a1 + 24);
        dispatch_object_t object = v18;
        if (v18) {
          dispatch_retain(v18);
        }
        uint64_t v19 = *(std::__shared_weak_count **)(a1 + 16);
        if (!v19 || (uint64_t v20 = *(void *)(a1 + 8), (v21 = std::__shared_weak_count::lock(v19)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v22 = v20 + 48;
        if (!v20) {
          uint64_t v22 = 0;
        }
        *(void *)&long long buf = v22;
        *((void *)&buf + 1) = v21;
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void *, dispatch_object_t *, long long *, uint64_t))(*(void *)v17 + 40))(__p, v17, 2, v41, &object, &buf, a1 + 104);
        long long v23 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v24 = *(std::__shared_weak_count **)(a1 + 240);
        *(_OWORD *)(a1 + 232) = v23;
        if (v24)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
        }
        if (*((void *)&buf + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
        }
        if (object) {
          dispatch_release(object);
        }
        uint64_t v25 = *(void *)(a1 + 232);
        if (v25) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 24))(v25, a1 + 144);
        }
      }
      else
      {
        uint64_t v26 = (*(uint64_t (**)(void))(*(void *)v41[0] + 304))(v41[0]);
        if (v26 != 3)
        {
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 112))(*(void *)(a1 + 160), v26);
          uint64_t v27 = *(void *)(a1 + 120);
          uint64_t v28 = *(NSObject **)(a1 + 24);
          dispatch_object_t v39 = v28;
          if (v28) {
            dispatch_retain(v28);
          }
          uint64_t v29 = *(std::__shared_weak_count **)(a1 + 16);
          if (!v29 || (uint64_t v30 = *(void *)(a1 + 8), (v31 = std::__shared_weak_count::lock(v29)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          uint64_t v32 = v30 + 48;
          if (!v30) {
            uint64_t v32 = 0;
          }
          *(void *)&long long buf = v32;
          *((void *)&buf + 1) = v31;
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void *, dispatch_object_t *, long long *, uint64_t))(*(void *)v27 + 40))(__p, v27, v26, v41, &v39, &buf, a1 + 104);
          long long v33 = *(_OWORD *)__p;
          __p[0] = 0;
          __p[1] = 0;
          int v34 = *(std::__shared_weak_count **)(a1 + 240);
          *(_OWORD *)(a1 + 232) = v33;
          if (v34)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v34);
            if (__p[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
            }
          }
          if (*((void *)&buf + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
          }
          if (v39) {
            dispatch_release(v39);
          }
          uint64_t v35 = *(void *)(a1 + 232);
          if (v35) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 24))(v35, a1 + 144);
          }
        }
      }
      *(unsigned char *)(a1 + 310) = (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 472))(*(void *)(a1 + 144));
      int v36 = *(std::__shared_weak_count **)(a1 + 16);
      if (v36)
      {
        BOOL v37 = std::__shared_weak_count::lock(v36);
        if (v37)
        {
          p_shared_weak_owners = &v37->__shared_weak_owners_;
          atomic_fetch_add_explicit(&v37->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
          if (*(void *)(a1 + 24)) {
            dispatch_retain(*(dispatch_object_t *)(a1 + 24));
          }
          atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
          operator new();
        }
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_223B252A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object, dispatch_object_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  long long v23 = *(std::__shared_weak_count **)(v21 - 88);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sd::IMSSubscriberController::start(sd::IMSSubscriberController *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 20) + 24))();
}

void sd::IMSSubscriberController::shutdown(uint64_t a1, NSObject **a2)
{
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 160) + 744))(*(void *)(a1 + 160), 8)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 160) + 496))(*(void *)(a1 + 160)))
  {
    uint64_t v4 = *a2;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v4);
    }
    uint64_t v5 = *(NSObject **)(a1 + 328);
    *(void *)(a1 + 328) = v4;
    if (v5)
    {
      dispatch_group_leave(v5);
      dispatch_release(v5);
    }
    (*(void (**)(uint64_t, const char *))(*(void *)a1 + 304))(a1, "Shutdown");
    sd::IMSSubscriberController::onImsRegMaskDown(a1, (uint64_t)"Shutdown", 8, 0);
  }
}

void sd::IMSSubscriberController::onImsRegMaskDown(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  uint64_t v9 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v8);
  uint64_t v10 = *v9;
  if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string __p = 136446466;
    *(void *)&__p[4] = a2;
    *(_WORD *)&unsigned char __p[12] = 2082;
    *(void *)&__p[14] = sd::asString();
    _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#I ImsRegMaskDown: %{public}s [%{public}s]", __p, 0x16u);
  }
  *(unsigned char *)(a1 + 292) = 0;
  *(_DWORD *)(a1 + 29SystemDeterminationManager::handleDumpState_sync(this - 6) = 16;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 184))(a1, a4);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 728))(a1))
  {
    if (!*(void *)(a1 + 232)) {
      return;
    }
    if (!*(unsigned char *)(*(void *)(a1 + 104) + 8))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 72))(__p, a1);
      int v11 = (*(uint64_t (**)(void))(**(void **)__p + 432))(*(void *)__p);
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (v11)
      {
        uint64_t v12 = *(void *)(a1 + 144);
        (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 56))(__p);
        (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v12 + 128))(v12, __p, 1);
        if (v22 < 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 232) + 16))(*(void *)(a1 + 232)))
    {
      int v13 = *(_DWORD *)(a1 + 248);
      uint64_t v14 = *v9;
      BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      if (v13)
      {
        if (v15)
        {
          *(_WORD *)std::string __p = 0;
          _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#I ImsRegMaskDown: Postponing IMS PDN bringup until IMS client is fully deinitialized", __p, 2u);
        }
        *(unsigned char *)(a1 + 292) = 1;
        *(_DWORD *)(a1 + 29SystemDeterminationManager::handleDumpState_sync(this - 6) = a3;
        return;
      }
      if (v15)
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#I ImsRegMaskDown: IMS is already deinitialized - attempting to acquire connection again", __p, 2u);
      }
    }
    (*(void (**)(void))(**(void **)(a1 + 232) + 48))(*(void *)(a1 + 232));
    return;
  }
  if (!*(unsigned char *)(*(void *)(a1 + 104) + 8))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 72))(__p, a1);
    int v16 = (*(uint64_t (**)(void))(**(void **)__p + 432))(*(void *)__p);
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (v16)
    {
      uint64_t v17 = *(void *)(a1 + 144);
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 56))(__p);
      (*(void (**)(uint64_t, unsigned char *, void))(*(void *)v17 + 128))(v17, __p, 0);
      if (v22 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 160) + 752))(*(void *)(a1 + 160), 9))
  {
    uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 384))(*(void *)(a1 + 160));
    *(_DWORD *)std::string __p = 0;
    *(_DWORD *)&__p[4] = HIDWORD(v18);
    *(void *)&__p[8] = 0;
    int v19 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 160) + 752))(*(void *)(a1 + 160), 1);
    (*(void (**)(uint64_t, unsigned char *, void))(*(void *)a1 + 224))(a1, __p, (v19 - 1));
  }
  else
  {
    uint64_t v20 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl(&dword_223AF3000, v20, OS_LOG_TYPE_DEFAULT, "#I IMS status update to baseband blocked. IMS PDN is not active", __p, 2u);
    }
  }
}

void sub_223B25AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::cleanup_sync(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  uint64_t v4 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I Controller cleanup", buf, 2u);
  }
  uint64_t v5 = *((void *)this + 29);
  if (v5)
  {
    (*(void (**)(uint64_t, char *))(*(void *)v5 + 32))(v5, (char *)this + 144);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 30);
    *((void *)this + 29) = 0;
    *((void *)this + 30) = 0;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  uint64_t v7 = *((void *)this + 27);
  if (v7)
  {
    uint64_t v8 = *v3;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I Removing stack delegate from IMS Client", buf, 2u);
      uint64_t v7 = *((void *)this + 27);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "IMSSubscriberController");
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v7 + 200))(v7, buf);
    if (v21 < 0) {
      operator delete(*(void **)buf);
    }
    if (*(unsigned char *)(*((void *)this + 13) + 8))
    {
      uint64_t v9 = *((void *)this + 27);
      xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v11 = v10;
      if (v10)
      {
        xpc_object_t object = v10;
      }
      else
      {
        xpc_object_t v11 = xpc_null_create();
        xpc_object_t object = v11;
        if (!v11)
        {
          xpc_object_t v12 = xpc_null_create();
          xpc_object_t v11 = 0;
          goto LABEL_19;
        }
      }
      if (MEMORY[0x223CBC1D0](v11) == MEMORY[0x263EF8708])
      {
        xpc_retain(v11);
LABEL_20:
        xpc_release(v11);
        (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v9 + 280))(v9, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        goto LABEL_21;
      }
      xpc_object_t v12 = xpc_null_create();
LABEL_19:
      xpc_object_t object = v12;
      goto LABEL_20;
    }
  }
LABEL_21:
  uint64_t v13 = *((void *)this + 24);
  if (v13)
  {
    (*(void (**)(uint64_t))(*(void *)v13 + 24))(v13);
    uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 25);
    *((void *)this + 24) = 0;
    *((void *)this + 25) = 0;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  uint64_t v15 = *((void *)this + 32);
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 80);
    if (v16)
    {
      *(void *)(v15 + 80) = 0;
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    std::unique_ptr<SDTimer>::reset[abi:ne180100]((SDTimer **)this + 32, 0);
  }
  if (*((void *)this + 18))
  {
    uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 19);
    *((void *)this + 18) = 0;
    *((void *)this + 19) = 0;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  (*(void (**)(void))(**((void **)this + 20) + 32))(*((void *)this + 20));
  uint64_t v18 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v18)
  {
    dispatch_group_leave(v18);
    dispatch_release(v18);
  }
}

void sub_223B25E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sd::IMSSubscriberController::createIMSClient_sync(sd::IMSSubscriberController *this)
{
  if (!*((void *)this + 27))
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
    uint64_t v4 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I Creating IMS client", buf, 2u);
    }
    uint64_t v5 = *((void *)this + 15);
    uint64_t v6 = *((void *)this + 3);
    dispatch_object_t object = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    (*(void (**)(uint8_t *__return_ptr))(**((void **)this + 20) + 56))(buf);
    uint64_t v7 = (*(uint64_t (**)(sd::IMSSubscriberController *))(*(void *)this + 88))(this);
    (*(void (**)(long long *__return_ptr, uint64_t, dispatch_object_t *, uint8_t *, uint64_t))(*(void *)v5 + 72))(&v21, v5, &object, buf, v7);
    long long v8 = v21;
    long long v21 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 28);
    *(_OWORD *)((char *)this + 21SystemDeterminationManager::handleDumpState_sync(this - 6) = v8;
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (*((void *)&v21 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
      }
    }
    if (v19 < 0) {
      operator delete(*(void **)buf);
    }
    if (object) {
      dispatch_release(object);
    }
    uint64_t v10 = *((void *)this + 27);
    xpc_object_t v11 = *v3;
    if (v10)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I Got a successful client", buf, 2u);
        uint64_t v10 = *((void *)this + 27);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "IMSSubscriberController");
      xpc_object_t v12 = (std::__shared_weak_count *)*((void *)this + 2);
      if (!v12 || (uint64_t v13 = *((void *)this + 1), (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v15 = v13 + 64;
      if (!v13) {
        uint64_t v15 = 0;
      }
      uint64_t v16 = v15;
      uint64_t v17 = v14;
      (*(void (**)(uint64_t, uint8_t *, uint64_t *, void))(*(void *)v10 + 152))(v10, buf, &v16, *((void *)this + 3));
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if (v19 < 0) {
        operator delete(*(void **)buf);
      }
      sd::IMSSubscriberController::handleClientReady(this);
    }
    else if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_223AF3000, v11, OS_LOG_TYPE_ERROR, "Did not get a successful client", buf, 2u);
    }
  }
}

void sub_223B26170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, dispatch_object_t object)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::handleClientReady(sd::IMSSubscriberController *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(*((void *)this + 13) + 8)) {
      uint64_t v4 = "Lazuli";
    }
    else {
      uint64_t v4 = "Telephony";
    }
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = v4;
    _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I %s client is ready", __p, 0xCu);
  }
  uint64_t v5 = *((void *)this + 27);
  if (v5)
  {
    *(_DWORD *)std::string __p = 1;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v5 + 48))(v5, __p, 1);
    (*(void (**)(void, uint64_t))(**((void **)this + 20) + 736))(*((void *)this + 20), 11);
    sd::IMSSubscriberController::onImsRegMaskUp((void **)this, (uint64_t)"ClientReady", 11);
    uint64_t v6 = *((void *)this + 18);
    if (*(unsigned char *)(*((void *)this + 13) + 8))
    {
      (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 20) + 56))(__p);
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v6 + 160))(v6, __p, 1);
    }
    else
    {
      (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 20) + 56))(__p);
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v6 + 152))(v6, __p, 1);
      if (v10 < 0) {
        operator delete(*(void **)__p);
      }
      (*(void (**)(sd::IMSSubscriberController *))(*(void *)this + 360))(this);
      (*(void (**)(sd::IMSSubscriberController *))(*(void *)this + 376))(this);
      uint64_t v7 = *((void *)this + 18);
      (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 20) + 56))(__p);
      uint64_t v8 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v7 + 256))(v7, __p);
      (*(void (**)(sd::IMSSubscriberController *, uint64_t))(*(void *)this + 488))(this, v8);
    }
    if (v10 < 0) {
      operator delete(*(void **)__p);
    }
  }
}

void sub_223B26544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::onImsRegMaskUp(void **a1, uint64_t a2, int a3)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1 + 20;
  uint64_t v7 = (*(uint64_t (**)(void *))(*a1[20] + 72))(a1[20]);
  uint64_t v8 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(*(void *)*(v6 - 10) + 16))(*(v6 - 10), v7);
  uint64_t v9 = v8;
  if (v6[21])
  {
    char v10 = *v8;
    if (!os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v11 = "#I ImsRegMaskUp: We are in the process of shutting down. Don't do anything here";
LABEL_7:
    xpc_object_t v12 = buf;
LABEL_8:
    _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, v11, v12, 2u);
    return;
  }
  if (*((_DWORD *)a1 + 62) == 3)
  {
    *((unsigned char *)a1 + 292) = 1;
    *((_DWORD *)a1 + 74) = a3;
    char v10 = *v8;
    if (!os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v11 = "#I ImsRegMaskUp: We are in the process of deregistering and bringing down the PDN. Don't do anything here";
    goto LABEL_7;
  }
  *((unsigned char *)a1 + 292) = 0;
  *((_DWORD *)a1 + 74) = 16;
  int v13 = ((uint64_t (*)(void **))(*a1)[91])(a1);
  int v14 = (*(uint64_t (**)(void))(*a1[20] + 776))();
  (*(void (**)(void))(*a1[20] + 336))();
  int v16 = v15;
  uint64_t v17 = *v9;
  if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136447234;
    *(void *)&uint8_t buf[4] = a2;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = sd::asString();
    __int16 v43 = 2080;
    uint64_t v44 = sd::asString();
    __int16 v45 = 1024;
    int v46 = v13;
    __int16 v47 = 1024;
    int v48 = v14;
    _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#I ImsRegMaskUp: %{public}s [%s]: IMSRegistered[%s] qualifiedToBringupPDN[%d] qualifiedToRegister[%d]", buf, 0x2Cu);
  }
  if (v16 == 1)
  {
    if (v14)
    {
      uint64_t v18 = *a1[20];
      if (*((unsigned char *)a1[13] + 8)) {
        unsigned int v19 = (*(uint64_t (**)(void))(v18 + 560))();
      }
      else {
        unsigned int v19 = (*(uint64_t (**)(void))(v18 + 128))();
      }
      unsigned int v24 = v19;
      uint64_t v25 = (*(uint64_t (**)(void))(*(void *)*v6 + 384))(*v6);
      unint64_t v27 = v26;
      *(void *)long long buf = v25;
      *(void *)&uint8_t buf[8] = v26;
      *(void *)uint64_t v40 = (*(uint64_t (**)(void))(*(void *)*v6 + 368))(*v6);
      uint64_t v41 = v28;
      if (v27 == 1)
      {
        unint64_t v29 = HIDWORD(v27);
        if (v24 == v29)
        {
          if (__PAIR64__(v24, 1) == v28)
          {
            uint64_t v30 = (*(uint64_t (**)(void *))(*a1[20] + 512))(a1[20]);
            if ((*(unsigned int (**)(void *, uint64_t))(*a1[16] + 16))(a1[16], v30))
            {
              *(_DWORD *)&uint8_t buf[4] = v30;
              (*(void (**)(void *, unsigned char *))(*a1[20] + 392))(a1[20], buf);
              LODWORD(v38) = 0;
              HIDWORD(v38) = v30;
              LODWORD(v39) = 1;
              HIDWORD(v39) = v24;
              ((void (*)(void **, uint64_t *))(*a1)[49])(a1, &v38);
              uint64_t v38 = (*(uint64_t (**)(void *))(*a1[20] + 368))(a1[20]);
              uint64_t v39 = v31;
              ((void (*)(void **, uint64_t *, void))(*a1)[28])(a1, &v38, 0);
            }
          }
          else
          {
            BOOL v37 = *v9;
            if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v38) = 0;
              _os_log_impl(&dword_223AF3000, v37, OS_LOG_TYPE_DEFAULT, "#I ImsRegMaskUp: No baseband update needed here as we are in the process of registration refresh", (uint8_t *)&v38, 2u);
            }
            sd::IMSSubscriberController::printIRStatus((uint64_t)a1, (unsigned int *)buf, (uint64_t)"onImsRegMaskUp: ");
            sd::IMSSubscriberController::printIRStatus((uint64_t)a1, (unsigned int *)v40, (uint64_t)"onImsRegMaskUp: ");
          }
        }
        else
        {
          int v32 = (*(uint64_t (**)(void))(*(void *)*v6 + 488))(*v6);
          if (v24 < v29) {
            int v33 = v32;
          }
          else {
            int v33 = 0;
          }
          if (v33 == 1)
          {
            int v34 = *v9;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v38) = 0;
              _os_log_impl(&dword_223AF3000, v34, OS_LOG_TYPE_DEFAULT, "#I Switching voice transport to CS immediately as voice is not supported by the network", (uint8_t *)&v38, 2u);
            }
            uint64_t v35 = a1[16];
            uint64_t v38 = 0xFFFFFFFF00000000;
            LODWORD(v39) = 1;
            HIDWORD(v39) = v24;
            (*(void (**)(void *, void *, uint64_t *, void))(*v35 + 32))(v35, v6, &v38, 0);
          }
          ((void (*)(void **, void))(*a1)[24])(a1, 0);
        }
      }
      else
      {
        char v10 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v38) = 0;
          uint64_t v11 = "#I ImsRegMaskUp: Ignore trigger to register since de-registration is in-flight and IpTelephony hasn't responded yet";
          xpc_object_t v12 = (uint8_t *)&v38;
          goto LABEL_8;
        }
      }
    }
  }
  else
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*v6 + 88))(buf);
    if (*(void *)buf && *((unsigned char *)a1 + 310) && ((*(uint64_t (**)(void))(**(void **)buf + 368))() & 1) == 0)
    {
      uint64_t v23 = *v9;
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl(&dword_223AF3000, v23, OS_LOG_TYPE_DEFAULT, "#N ImsRegMaskUp: WiFi Calling in Airplane Mode is not allowed", v40, 2u);
      }
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
    else
    {
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (v13)
      {
        if (a1[29])
        {
          ((void (*)(void **, const char *, void))(*a1)[40])(a1, "activateImsPdn", 0);
          if (!*((unsigned char *)a1[13] + 8))
          {
            ((void (*)(unsigned char *__return_ptr, void **))(*a1)[9])(buf, a1);
            int v20 = (*(uint64_t (**)(void))(**(void **)buf + 432))(*(void *)buf);
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (v20)
            {
              long long v21 = a1[18];
              (*(void (**)(unsigned char *__return_ptr))(*a1[20] + 56))(buf);
              (*(void (**)(void *, unsigned char *, uint64_t))(*v21 + 128))(v21, buf, 1);
              if (SHIBYTE(v43) < 0) {
                operator delete(*(void **)buf);
              }
            }
          }
          (*(void (**)(void *))(*a1[29] + 48))(a1[29]);
        }
      }
      else if (v14)
      {
        (*(void (**)(unsigned char *__return_ptr))(*(void *)*v6 + 56))(buf);
        if (v43 >= 0) {
          uint64_t v22 = HIBYTE(v43);
        }
        else {
          uint64_t v22 = *(void *)&buf[8];
        }
        if (SHIBYTE(v43) < 0) {
          operator delete(*(void **)buf);
        }
        if (v22)
        {
          ((void (*)(void **, void))(*a1)[22])(a1, 0);
        }
        else
        {
          int v36 = *v9;
          if (os_log_type_enabled(*v9, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl(&dword_223AF3000, v36, OS_LOG_TYPE_ERROR, "ImsRegMaskUp: PersonalityShop not ready", buf, 2u);
          }
        }
      }
    }
  }
}

void sub_223B26ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sd::IMSSubscriberController::getConfig_sync(sd::IMSSubscriberController *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 20) + 88))();
}

uint64_t sd::IMSSubscriberController::getDCNManager_sync@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 200);
  *a2 = *(void *)(this + 192);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t sd::IMSSubscriberController::getImsState(sd::IMSSubscriberController *this)
{
  return *((unsigned int *)this + 62);
}

uint64_t sd::IMSSubscriberController::getImsClientRef@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 224);
  *a2 = *(void *)(this + 216);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

BOOL sd::IMSSubscriberController::setCurrentHelperType(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  uint64_t v5 = (NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4);
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 120))(*(void *)(a1 + 160));
  uint64_t v7 = *v5;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = sd::asString();
    uint64_t v9 = sd::asString();
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 160) + 56))(&__p);
    unint64_t v10 = v30;
    uint64_t p_p = (const char *)__p;
    if ((v30 & 0x80u) == 0) {
      uint64_t p_p = (const char *)&__p;
    }
    else {
      unint64_t v10 = (unint64_t)v29;
    }
    xpc_object_t v12 = v10 ? (char *)p_p : "<invalid>";
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v9;
    __int16 v32 = 2080;
    int v33 = v12;
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I CurrentHelperType: from %s to %s for %s", buf, 0x20u);
    if ((char)v30 < 0) {
      operator delete(__p);
    }
  }
  if (v6 != a2)
  {
    uint64_t v13 = *(void *)(a1 + 232);
    if (v13)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a1 + 144);
      int v14 = *(std::__shared_weak_count **)(a1 + 240);
      *(void *)(a1 + 232) = 0;
      *(void *)(a1 + 240) = 0;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
    (*(void (**)(uint64_t))(*(void *)a1 + 672))(a1);
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 112))(*(void *)(a1 + 160), a2);
    uint64_t v15 = *(void *)(a1 + 120);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 160) + 88))(&__p);
    int v16 = *(NSObject **)(a1 + 24);
    dispatch_object_t object = v16;
    if (v16) {
      dispatch_retain(v16);
    }
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v17 || (uint64_t v18 = *(void *)(a1 + 8), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v20 = v18 + 48;
    if (!v18) {
      uint64_t v20 = 0;
    }
    uint64_t v25 = v20;
    unint64_t v26 = v19;
    (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, void **, dispatch_object_t *, uint64_t *, uint64_t))(*(void *)v15 + 40))(buf, v15, a2, &__p, &object, &v25, a1 + 104);
    long long v21 = *(_OWORD *)buf;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v22 = *(std::__shared_weak_count **)(a1 + 240);
    *(_OWORD *)(a1 + 232) = v21;
    if (v22)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
    }
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (object) {
      dispatch_release(object);
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    uint64_t v23 = *(void *)(a1 + 232);
    if (v23) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 24))(v23, a1 + 144);
    }
  }
  return v6 != a2;
}

void sub_223B27320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, dispatch_object_t object, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::setConnectivityHelper(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v3;
  *(void *)(a1 + 240) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t sd::IMSSubscriberController::getConnectivityHelper@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 240);
  *a2 = *(void *)(this + 232);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t sd::IMSSubscriberController::setPendingImsSwitchStatusNotification(uint64_t this, char a2)
{
  *(unsigned char *)(this + 300) = a2;
  return this;
}

uint64_t sd::IMSSubscriberController::getPendingImsSwitchStatusNotification(sd::IMSSubscriberController *this)
{
  return *((unsigned __int8 *)this + 300);
}

uint64_t sd::IMSSubscriberController::setPendingSimFilesUpdate(uint64_t this, char a2)
{
  *(unsigned char *)(this + 304) = a2;
  return this;
}

uint64_t sd::IMSSubscriberController::isPendingSimFilesUpdate(sd::IMSSubscriberController *this)
{
  return *((unsigned __int8 *)this + 304);
}

uint64_t sd::IMSSubscriberController::handleDataModeChanged_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  uint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    uint64_t v8 = asString();
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I DataModeChanged: %s", (uint8_t *)&v7, 0xCu);
  }
  uint64_t result = *(void *)(a1 + 192);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 88))(result, a2);
  }
  return result;
}

void sd::IMSSubscriberController::handleCallActive_sync(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  uint64_t v9 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v8);
  unint64_t v10 = *v9;
  if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)unsigned int v19 = 136315650;
    *(void *)&void v19[4] = asStringBool();
    *(_WORD *)&v19[12] = 2080;
    *(void *)&v19[14] = asStringBool();
    __int16 v20 = 2080;
    uint64_t v21 = asString();
    _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#I CallActive: Voice Call started. VoIP: %s, CS: %s, Type: %s", v19, 0x20u);
  }
  *(unsigned char *)(a1 + 280) = 1;
  *(unsigned char *)(a1 + 281) = (a4 & 0xFFFFFFFE) == 2;
  uint64_t v11 = *(void *)(a1 + 192);
  if (v11) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 64))(v11, a3, a4);
  }
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 400))(*(void *)(a1 + 160));
  if ((v12 & 1) != 0 && a3)
  {
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 88))(v19);
    char v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)v19 + 384))(*(void *)v19, 1);
    uint64_t v12 = *(void *)&v19[8];
    if (*(void *)&v19[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v19[8]);
    }
    if ((v13 & 1) == 0)
    {
      (*(void (**)(void))(**(void **)(a1 + 160) + 384))(*(void *)(a1 + 160));
      if (v14 == 1
        || ((*(void (**)(void))(**(void **)(a1 + 160) + 336))(*(void *)(a1 + 160)), v15 == 1))
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 192))(a1, 1);
      }
      uint64_t v12 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 160) + 744))(*(void *)(a1 + 160), 13);
    }
  }
  if (a2)
  {
    int v16 = *v9;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v19 = 0;
      _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I It's Voip, should set InCallImsPref!", v19, 2u);
    }
LABEL_17:
    (*(void (**)(void))(**(void **)(a1 + 160) + 144))(*(void *)(a1 + 160));
    return;
  }
  if (a3)
  {
    if (capabilities::ct::shouldSaveInCallIMSPrefForCSCall((capabilities::ct *)v12))
    {
      (*(void (**)(void))(**(void **)(a1 + 160) + 336))(*(void *)(a1 + 160));
      if (v17 == 1)
      {
        uint64_t v18 = *v9;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)unsigned int v19 = 0;
          _os_log_impl(&dword_223AF3000, v18, OS_LOG_TYPE_DEFAULT, "#I Saving in-call IMS pref for devices that require it", v19, 2u);
        }
        goto LABEL_17;
      }
    }
    (*(void (**)(void))(**(void **)(a1 + 160) + 152))(*(void *)(a1 + 160));
  }
}

void sub_223B27950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sd::IMSSubscriberController::handleCallInactive_sync(sd::IMSSubscriberController *this, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)((char *)this + 160);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  int v6 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(*(void *)*(v4 - 10) + 16))(*(v4 - 10), v5);
  int v7 = *v6;
  if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v13) = 136315138;
    *(void *)((char *)&v13 + 4) = asStringBool();
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I CallInactive: Voice Call ended. VoIP: %s", (uint8_t *)&v13, 0xCu);
  }
  *((_WORD *)this + 140) = 0;
  (*(void (**)(void))(**((void **)this + 20) + 152))(*((void *)this + 20));
  uint64_t v8 = *((void *)this + 24);
  if (v8) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 72))(v8, a2);
  }
  if (*((unsigned char *)this + 301))
  {
    *((unsigned char *)this + 301) = 0;
    if (!*((unsigned char *)this + 302)) {
      sd::IMSSubscriberController::handlePcscfUpdate(this, 0);
    }
  }
  if (((*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 752))(*v4, 13) & 1) == 0)
  {
    uint64_t v9 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I CallInactive: All calls ended. Hence, set the Mask", (uint8_t *)&v13, 2u);
    }
    (*(void (**)(void, uint64_t))(**((void **)this + 20) + 736))(*((void *)this + 20), 13);
    sd::IMSSubscriberController::onImsRegMaskUp((void **)this, (uint64_t)"CallInactive", 13);
  }
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*v4 + 488))(*v4);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 752))(*v4, 5);
    if ((result & 1) == 0)
    {
      uint64_t v11 = *v6;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v13) = 0;
        _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I CallInactive: Switching transports to CS immediately as connection is unavailable", (uint8_t *)&v13, 2u);
      }
      uint64_t v12 = *((void *)this + 16);
      long long v13 = xmmword_223B4CDA0;
      return (*(uint64_t (**)(uint64_t, void *, long long *, void))(*(void *)v12 + 32))(v12, v4, &v13, 0);
    }
  }
  return result;
}

void sd::IMSSubscriberController::handlePcscfUpdate(sd::IMSSubscriberController *this, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I PcscfUpdate: Handle proxy update", v7, 2u);
  }
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 20) + 744))(*((void *)this + 20), 10))
  {
    (*(void (**)(void))(**((void **)this + 20) + 336))(*((void *)this + 20));
    if (v6 == 1)
    {
      (*(void (**)(sd::IMSSubscriberController *, const char *))(*(void *)this + 304))(this, "ProxyUpdate");
      (*(void (**)(sd::IMSSubscriberController *, const char *))(*(void *)this + 328))(this, "ProxyUpdate");
      sd::IMSSubscriberController::onImsRegMaskDown((uint64_t)this, (uint64_t)"PcscfUpdate", 10, a2);
    }
  }
  if ((*(unsigned int (**)(void))(**((void **)this + 20) + 328))(*((void *)this + 20)))
  {
    if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 20) + 736))(*((void *)this + 20), 10))
    {
      sd::IMSSubscriberController::onImsRegMaskUp((void **)this, (uint64_t)"PcscfUpdate", 10);
    }
  }
}

void sd::IMSSubscriberController::handlePersonalityAdded_sync(sd::IMSSubscriberController *this)
{
  (*(void (**)(void))(**((void **)this + 20) + 784))(*((void *)this + 20));
  if (!*(unsigned char *)(*((void *)this + 13) + 8))
  {
    uint64_t v2 = *((void *)this + 24);
    if (v2) {
      goto LABEL_11;
    }
    uint64_t v3 = *((void *)this + 15);
    uint64_t v4 = *((void *)this + 3);
    dispatch_object_t object = v4;
    if (v4) {
      dispatch_retain(v4);
    }
    uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    (*(void (**)(void **__return_ptr, uint64_t, dispatch_object_t *, uint64_t, char *))(*(void *)v3 + 32))(__p, v3, &object, v5, (char *)this + 104);
    long long v6 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    int v7 = (std::__shared_weak_count *)*((void *)this + 25);
    *((_OWORD *)this + 12) = v6;
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      if (__p[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
      }
    }
    if (object) {
      dispatch_release(object);
    }
    uint64_t v2 = *((void *)this + 24);
    if (v2)
    {
LABEL_11:
      uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 32))(v2, v8);
      uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 2);
      if (!v9
        || (uint64_t v10 = *((void *)this + 24), v11 = *((void *)this + 1), (v12 = std::__shared_weak_count::lock(v9)) == 0))
      {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v13 = v11 + 72;
      if (!v11) {
        uint64_t v13 = 0;
      }
      uint64_t v19 = v13;
      __int16 v20 = v12;
      (*(void (**)(uint64_t, char *, uint64_t *))(*(void *)v10 + 16))(v10, (char *)this + 144, &v19);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
    }
  }
  (*(void (**)(sd::IMSSubscriberController *))(*(void *)this + 584))(this);
  uint64_t v14 = *((void *)this + 29);
  if (v14) {
    (*(void (**)(uint64_t, void))(*(void *)v14 + 40))(v14, 0);
  }
  uint64_t v15 = *((void *)this + 18);
  (*(void (**)(void **__return_ptr))(**((void **)this + 20) + 56))(__p);
  uint64_t v16 = (*(uint64_t (**)(void))(**((void **)this + 20) + 752))();
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v15 + 152))(v15, __p, v16);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
}

void sub_223B281DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::handlePersonalityRemoved_sync(sd::IMSSubscriberController *this)
{
  if (*((unsigned char *)this + 303) && *((_DWORD *)this + 62))
  {
    *((unsigned char *)this + 292) = 0;
    *((_DWORD *)this + 74) = 16;
    (*(void (**)(sd::IMSSubscriberController *, uint64_t))(*(void *)this + 184))(this, 1);
    uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    uint64_t v3 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I SubscriptionChange: Reset pending state", v8, 2u);
    }
    *((unsigned char *)this + 303) = 0;
    uint64_t v4 = *((void *)this + 18);
    uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 104))(v4, v5);
  }
  (*(void (**)(sd::IMSSubscriberController *, uint64_t))(*(void *)this + 192))(this, 1);
  (*(void (**)(void))(**((void **)this + 20) + 792))();
  (*(void (**)(sd::IMSSubscriberController *, void))(*(void *)this + 136))(this, 0);
  *((_WORD *)this + 140) = 0;
  *((unsigned char *)this + 282) = 0;
  *((unsigned char *)this + 292) = 0;
  uint64_t v6 = *((void *)this + 24);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
    int v7 = (std::__shared_weak_count *)*((void *)this + 25);
    *((void *)this + 24) = 0;
    *((void *)this + 25) = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sd::IMSSubscriberController::performNetworkUpdateIfRequired_sync(sd::IMSSubscriberController *this, int a2)
{
  if (*((unsigned char *)this + 302) && (*((unsigned char *)this + 302) = 0, !*((unsigned char *)this + 301)))
  {
    sd::IMSSubscriberController::handlePcscfUpdate(this, 1);
  }
  else if (a2)
  {
    (*(void (**)(sd::IMSSubscriberController *, void))(*(void *)this + 192))(this, 0);
  }
}

void sd::IMSSubscriberController::handleDeviceIdChanged_sync(void **a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  uint64_t v4 = *a1[20];
  if (v3)
  {
    (*(void (**)(void))(v4 + 736))();
    sd::IMSSubscriberController::onImsRegMaskUp(a1, (uint64_t)"DeviceIdChanged", 15);
  }
  else
  {
    (*(void (**)(void))(v4 + 744))();
    sd::IMSSubscriberController::onImsRegMaskDown((uint64_t)a1, (uint64_t)"DeviceIdChanged", 15, 0);
  }
}

uint64_t sd::IMSSubscriberController::handleSubscriptionChanged_sync(sd::IMSSubscriberController *this)
{
  (*(void (**)(sd::IMSSubscriberController *, const char *))(*(void *)this + 304))(this, "SubscriptionChanged");
  if ((*(unsigned int (**)(void))(**((void **)this + 20) + 104))(*((void *)this + 20)) == 2
    && (*(unsigned int (**)(void, uint64_t))(**((void **)this + 20) + 752))(*((void *)this + 20), 3))
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    uint64_t v3 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I SubscriptionChange: Set pending state", v8, 2u);
    }
    *((unsigned char *)this + 303) = 1;
    return (*(uint64_t (**)(sd::IMSSubscriberController *, uint64_t))(*(void *)this + 192))(this, 1);
  }
  else
  {
    uint64_t v5 = *((void *)this + 18);
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    int v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 104);
    return v7(v5, v6);
  }
}

void sd::IMSSubscriberController::handlePcscfListChanged_sync(uint64_t a1, long long **a2, int a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 232))
  {
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
    uint64_t v13 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v12);
    char v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 752))();
    uint64_t v15 = *v13;
    BOOL v16 = os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      unsigned int v28 = a6;
      int v27 = a3;
      if (v16)
      {
        int v17 = -1431655765 * ((unint64_t)((char *)a2[1] - (char *)*a2) >> 3);
        LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(buf.__r_.__value_.__r.__words[0]) = v17;
        _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I PcscfList: list std::string::size_type size = %d", (uint8_t *)&buf, 8u);
      }
      uint64_t v19 = *a2;
      char v18 = a2[1];
      if (v18 != *a2)
      {
        do
        {
          memset(&buf, 0, sizeof(buf));
          if (*((char *)v19 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)v19, *((void *)v19 + 1));
          }
          else
          {
            long long v20 = *v19;
            buf.__r_.__value_.__r.__words[2] = *((void *)v19 + 2);
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v20;
          }
          uint64_t v21 = *v13;
          if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
          {
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string buf = &buf;
            }
            else {
              p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)unint64_t v29 = 136315138;
            unsigned __int8 v30 = p_buf;
            _os_log_impl(&dword_223AF3000, v21, OS_LOG_TYPE_DEFAULT, "#I PcscfList: Proxy = %s", v29, 0xCu);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          uint64_t v19 = (long long *)((char *)v19 + 24);
        }
        while (v19 != v18);
      }
      if ((*(unsigned int (**)(void, long long **, uint64_t, void, void))(**(void **)(a1 + 160) + 600))(*(void *)(a1 + 160), a2, a4, a5, v28))
      {
        (*(void (**)(void))(**(void **)(a1 + 160) + 336))(*(void *)(a1 + 160));
        if (v23 == 1)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 592))(a1))
          {
            unsigned int v24 = *v13;
            if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_223AF3000, v24, OS_LOG_TYPE_DEFAULT, "#I PcscfList: Deferring Proxy update due to an active call", (uint8_t *)&buf, 2u);
            }
            *(unsigned char *)(a1 + 301) = 1;
          }
          int v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 400))(*(void *)(a1 + 160));
          if (!*(unsigned char *)(*(void *)(a1 + 104) + 8) && (((v27 != 1) ^ v25) & 1) == 0)
          {
            *(unsigned char *)(a1 + 302) = 1;
            unint64_t v26 = *v13;
            if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_223AF3000, v26, OS_LOG_TYPE_DEFAULT, "#I PcscfList: Deferring Proxy update due to context mismatch", (uint8_t *)&buf, 2u);
            }
          }
          if (!*(unsigned char *)(a1 + 301) && !*(unsigned char *)(a1 + 302)) {
            sd::IMSSubscriberController::handlePcscfUpdate((sd::IMSSubscriberController *)a1, 1);
          }
        }
        else
        {
          sd::IMSSubscriberController::handlePcscfUpdate((sd::IMSSubscriberController *)a1, 0);
        }
      }
    }
    else if (v16)
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#N PcscfList: Ignoring Proxy update while the stack is disabled", (uint8_t *)&buf, 2u);
    }
  }
}

void non-virtual thunk to'sd::IMSSubscriberController::handlePcscfListChanged_sync(uint64_t a1, long long **a2, int a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
}

void sd::IMSSubscriberController::handleImsPref_sync(uint64_t a1, unsigned int *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 232))
  {
    uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
    uint64_t v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4);
    uint64_t v6 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)char v18 = 136315650;
      *(void *)&v18[4] = asString();
      *(_WORD *)&v18[12] = 2080;
      *(void *)&v18[14] = sd::asString();
      __int16 v19 = 2080;
      uint64_t v20 = sd::asString();
      _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I IMS Pref: ct=%s, bb_mask=[%s], tech_mask=[%s]", v18, 0x20u);
    }
    uint64_t v7 = *a2;
    if ((validContextType() & 1) == 0)
    {
      unsigned int v8 = a2[2] ? 1 : 2;
      uint64_t v7 = a2[1] ? 0 : v8;
      uint64_t v9 = *v5;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = asString();
        uint64_t v11 = asString();
        *(_DWORD *)char v18 = 136315394;
        *(void *)&v18[4] = v10;
        *(_WORD *)&v18[12] = 2080;
        *(void *)&v18[14] = v11;
        _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I IMS Pref: Context type adjusted %s -> %s", v18, 0x16u);
      }
    }
    if (validContextType()) {
      BOOL v12 = a2[(int)v7 + 1] != 0;
    }
    else {
      BOOL v12 = 0;
    }
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 160) + 128))(*(void *)(a1 + 160), 2)) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = *(void *)(a1 + 232);
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 72))(v14);
      }
    }
    if ((*(unsigned int (**)(void, uint64_t, unsigned int *))(**(void **)(a1 + 160) + 136))(*(void *)(a1 + 160), v7, a2 + 1))
    {
      if (v12)
      {
        sd::IMSSubscriberController::onImsRegMaskUp((void **)a1, (uint64_t)"IMS Pref", 4);
        return;
      }
      uint64_t v15 = *(void *)(a1 + 192);
      if (!v15) {
        goto LABEL_30;
      }
      if ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15)) {
        return;
      }
      uint64_t v16 = *(void *)(a1 + 192);
      if (v16 && (*(unsigned int (**)(uint64_t))(*(void *)v16 + 40))(v16))
      {
        (*(void (**)(void))(**(void **)(a1 + 192) + 80))(*(void *)(a1 + 192));
        sd::IMSSubscriberController::onImsRegMaskDown(a1, (uint64_t)"IMS Pref", 4, 1);
      }
      else
      {
LABEL_30:
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 72))(v18, a1);
        int v17 = (*(uint64_t (**)(void))(**(void **)v18 + 296))(*(void *)v18);
        if (*(void *)&v18[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v18[8]);
        }
        if (v17) {
          sd::IMSSubscriberController::onImsRegMaskDown(a1, (uint64_t)"IMS Pref", 4, 1);
        }
        else {
          (*(void (**)(uint64_t, void))(*(void *)a1 + 192))(a1, 0);
        }
      }
    }
  }
}

void sub_223B28FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'sd::IMSSubscriberController::handleImsPref_sync(uint64_t a1, unsigned int *a2)
{
}

void sd::IMSSubscriberController::handleImsPco_sync(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  uint64_t v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4);
  uint64_t v6 = *v5;
  if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *a2;
    LODWORD(v15) = 67109120;
    HIDWORD(v15) = v7;
    _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I IMS PCO: containerId=0x%04x", (uint8_t *)&v15, 8u);
  }
  if ((__int16)*a2 == -256)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 72))(&v15, a1);
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 352))(v15);
    if (*((void *)a2 + 2) == *((void *)a2 + 1)) {
      int v9 = 0;
    }
    else {
      int v9 = v8;
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v9)
    {
      uint64_t v10 = *v5;
      BOOL v11 = os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT);
      BOOL v12 = (unsigned char *)*((void *)a2 + 1);
      if (v11)
      {
        int v13 = *v12;
        LODWORD(v15) = 67109120;
        HIDWORD(v15) = v13;
        _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#I CDMALess subscription status container found, action=%u", (uint8_t *)&v15, 8u);
        BOOL v12 = (unsigned char *)*((void *)a2 + 1);
      }
      if (*v12 == 5)
      {
        uint64_t v14 = *v5;
        if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v15) = 0;
          _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#I CDMALess subscription status 'expired' - unprovisioned registration enabled", (uint8_t *)&v15, 2u);
        }
        *(unsigned char *)(a1 + 30SystemDeterminationManager::handleDumpState_sync(this - 6) = 1;
      }
    }
  }
}

void sub_223B29228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'sd::IMSSubscriberController::handleImsPco_sync(uint64_t a1, unsigned __int16 *a2)
{
}

os_log_t *sd::IMSSubscriberController::handleHandoverStateChange_sync(sd::IMSSubscriberController *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t result = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  uint64_t v6 = *((void *)this + 27);
  if (v6)
  {
    int v7 = *result;
    if (os_log_type_enabled(*result, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = asStringBool();
      _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I IMS Handover State: %s - reporting to IMS Client", (uint8_t *)&v9, 0xCu);
      uint64_t v6 = *((void *)this + 27);
    }
    if (a2) {
      int v8 = 1024;
    }
    else {
      int v8 = 2048;
    }
    int v9 = v8;
    return (os_log_t *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v6 + 56))(v6, &v9);
  }
  return result;
}

os_log_t *non-virtual thunk to'sd::IMSSubscriberController::handleHandoverStateChange_sync(sd::IMSSubscriberController *this, int a2)
{
  return sd::IMSSubscriberController::handleHandoverStateChange_sync((sd::IMSSubscriberController *)((char *)this - 48), a2);
}

void sd::IMSSubscriberController::handleDataLowPowerModeTransition_sync(sd::IMSSubscriberController *this, int a2)
{
  uint64_t v3 = **((void **)this + 20);
  if (a2)
  {
    (*(void (**)(void))(v3 + 744))();
    uint64_t v4 = *(void (**)(sd::IMSSubscriberController *, uint64_t))(*(void *)this + 192);
    v4(this, 1);
  }
  else if ((*(unsigned int (**)(void))(v3 + 736))())
  {
    sd::IMSSubscriberController::onImsRegMaskUp((void **)this, (uint64_t)"LPM", 8);
  }
}

void sd::IMSSubscriberController::handleCountryOfOrigination_sync(void **a1, uint64_t a2)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v4 = a1 + 20;
  (*(void (**)(uint64_t *__return_ptr))(*a1[20] + 160))(&v53);
  std::string __p = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  (*(void (**)(void **__return_ptr))(**v4 + 240))(&__p);
  memset(&v49, 0, sizeof(v49));
  (*(void (**)(std::string *__return_ptr))(*a1[20] + 256))(&v49);
  uint64_t v5 = (*(uint64_t (**)(void *))(*a1[20] + 72))(a1[20]);
  __int16 v47 = (os_log_t *)(*(uint64_t (**)(void *, uint64_t))(*a1[10] + 16))(a1[10], v5);
  uint64_t v6 = *v47;
  if (os_log_type_enabled(*v47, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = &v49;
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v7 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if (*(char *)(a2 + 23) >= 0) {
      int v8 = (std::string *)a2;
    }
    else {
      int v8 = *(std::string **)a2;
    }
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v56 = (uint64_t)v7;
    __int16 v57 = 2082;
    uint64_t v58 = v8;
    _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I CountryOfOrigination: old = '%{public}s', new = '%{public}s'", buf, 0x16u);
  }
  MEMORY[0x223CBBD60](&v48);
  std::locale::locale((std::locale *)buf, &v48);
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = (char *)a2;
  }
  else {
    uint64_t v10 = *(char **)a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v12 = &v49;
  }
  else {
    BOOL v12 = (std::string *)v49.__r_.__value_.__r.__words[0];
  }
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v49.__r_.__value_.__l.__size_;
  }
  if (v11 && size)
  {
    std::string::size_type v14 = size - 1;
    uint64_t v15 = v11 - 1;
    uint64_t v16 = (char *)v12;
    uint64_t v17 = v10;
    while (boost::algorithm::is_iequal::operator()<char,char>((const std::locale *)buf, v17, v16))
    {
      ++v17;
      ++v16;
      if (v15)
      {
        std::string::size_type v18 = v14--;
        --v15;
        if (v18) {
          continue;
        }
      }
      goto LABEL_28;
    }
    std::locale::~locale((std::locale *)buf);
    std::locale::~locale(&v48);
  }
  else
  {
    uint64_t v17 = v10;
    uint64_t v16 = (char *)v12;
LABEL_28:
    std::locale::~locale((std::locale *)buf);
    std::locale::~locale(&v48);
    if (v17 == &v10[v11] && v16 == (char *)v12 + size)
    {
      int v19 = 0;
      uint64_t v20 = v47;
      goto LABEL_37;
    }
  }
  std::string::operator=(&v49, (const std::string *)a2);
  uint64_t v20 = v47;
  (*(void (**)(void *, std::string *))(*a1[20] + 248))(a1[20], &v49);
  uint64_t v21 = *v47;
  if (os_log_type_enabled(*v47, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = &v49;
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v22 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v56 = (uint64_t)v22;
    _os_log_impl(&dword_223AF3000, v21, OS_LOG_TYPE_DEFAULT, "#I CountryOfOrigination: set to '%{public}s'", buf, 0xCu);
  }
  int v19 = 1;
LABEL_37:
  int v23 = *v20;
  if (os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t p_p = &__p;
    if (v52 < 0) {
      uint64_t p_p = __p;
    }
    int v25 = &v49;
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v25 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v56 = (uint64_t)p_p;
    __int16 v57 = 2082;
    uint64_t v58 = v25;
    _os_log_impl(&dword_223AF3000, v23, OS_LOG_TYPE_DEFAULT, "#I CountryOfOrigination: fDisabledCountry is %{public}s, fCountryOfOrigination is %{public}s", buf, 0x16u);
  }
  uint64_t v26 = HIBYTE(v52);
  if (v52 < 0) {
    uint64_t v26 = v51;
  }
  if (v26)
  {
    MEMORY[0x223CBBD60](&v48);
    std::locale::locale((std::locale *)buf, &v48);
    int v27 = *(char *)(a2 + 23);
    if (v27 >= 0) {
      unsigned int v28 = (char *)a2;
    }
    else {
      unsigned int v28 = *(char **)a2;
    }
    if (v27 >= 0) {
      uint64_t v29 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v29 = *(void *)(a2 + 8);
    }
    if (v52 >= 0) {
      unsigned __int8 v30 = (char *)&__p;
    }
    else {
      unsigned __int8 v30 = (char *)__p;
    }
    if (v52 >= 0) {
      uint64_t v31 = HIBYTE(v52);
    }
    else {
      uint64_t v31 = v51;
    }
    if (v29 && v31)
    {
      uint64_t v32 = v31 - 1;
      uint64_t v33 = v29 - 1;
      uint64_t v34 = v30;
      uint64_t v35 = v28;
      while (boost::algorithm::is_iequal::operator()<char,char>((const std::locale *)buf, v35, v34))
      {
        ++v35;
        ++v34;
        if (v33)
        {
          uint64_t v36 = v32--;
          --v33;
          if (v36) {
            continue;
          }
        }
        goto LABEL_66;
      }
      std::locale::~locale((std::locale *)buf);
      std::locale::~locale(&v48);
      uint64_t v20 = v47;
    }
    else
    {
      uint64_t v35 = v28;
      uint64_t v34 = v30;
LABEL_66:
      BOOL v37 = &v28[v29];
      std::locale::~locale((std::locale *)buf);
      std::locale::~locale(&v48);
      uint64_t v20 = v47;
      if (v35 == v37 && v34 == &v30[v31])
      {
        char v38 = 1;
        goto LABEL_75;
      }
    }
  }
  BOOL v39 = (v19 | (*(unsigned int (**)(void *))(*a1[20] + 224))(a1[20]) ^ 1) != 0;
  uint64_t v40 = *v20;
  if (os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void *))(*a1[20] + 224))(a1[20]);
    uint64_t v41 = asStringBool();
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v56 = v41;
    _os_log_impl(&dword_223AF3000, v40, OS_LOG_TYPE_DEFAULT, "#I CountryOfOrigination: fCountrySetFlag set from %{public}s to true", buf, 0xCu);
  }
  (*(void (**)(void *, uint64_t))(*a1[20] + 216))(a1[20], 1);
  uint64_t v42 = v53;
  if (*(unsigned char *)(v53 + 17))
  {
    __int16 v43 = *v20;
    if (!os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
    {
      char v38 = 0;
      goto LABEL_77;
    }
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_223AF3000, v43, OS_LOG_TYPE_DEFAULT, "#I CountryOfOrigination: restoring IM service", buf, 2u);
    char v38 = 0;
LABEL_75:
    uint64_t v42 = v53;
LABEL_77:
    *(unsigned char *)(v42 + 17) = v38;
    ((void (*)(void **, void))(*a1)[72])(a1, 0);
    BOOL v39 = 1;
  }
  uint64_t v44 = *v20;
  if (os_log_type_enabled(*v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v45 = asStringBool();
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v56 = v45;
    _os_log_impl(&dword_223AF3000, v44, OS_LOG_TYPE_DEFAULT, "#I CountryOfOrigination: changed = %{public}s", buf, 0xCu);
  }
  if (v39)
  {
    (*(void (**)(void *))(*a1[20] + 336))(a1[20]);
    if (v46 == 1)
    {
      if ((*(uint64_t (**)(void *))(*a1[20] + 400))(a1[20])) {
        ((void (*)(void **, void))(*a1)[24])(a1, 0);
      }
    }
    else
    {
      sd::IMSSubscriberController::onImsRegMaskUp(a1, (uint64_t)"CountryOfOrigination", 16);
    }
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52) < 0) {
    operator delete(__p);
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
}

void sub_223B29C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24,std::locale a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  _Unwind_Resume(exception_object);
}

const void **sd::IMSSubscriberController::setTTYModeForIpTelephony_sync(const void **this, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (this[27])
  {
    uint64_t v3 = this;
    uint64_t v4 = (*(uint64_t (**)(const void *))(*(void *)this[20] + 72))(this[20]);
    uint64_t v5 = (os_log_t *)(*(uint64_t (**)(const void *, uint64_t))(*(void *)v3[10] + 16))(v3[10], v4);
    uint64_t v6 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = asStringBool();
      _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I TTYMode: %s", buf, 0xCu);
    }
    *(void *)std::string buf = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if ((*(unsigned int (**)(const void *))(*(void *)v3[20] + 504))(v3[20]))
    {
      int v7 = *v5;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v9[0] = 0;
        _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I TTYMode: Carrier suports RTT, sending kIMSCallRTTEnabled", (uint8_t *)v9, 2u);
      }
      int v8 = (const void **)MEMORY[0x263EFFB38];
      if (a2) {
        int v8 = (const void **)MEMORY[0x263EFFB40];
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)buf, (const void *)*MEMORY[0x263F4B2A0], *v8);
      (*(void (**)(const void *, uint64_t, uint64_t))(*(void *)v3[27] + 120))(v3[27], 2, a2);
    }
    return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)buf);
  }
  return this;
}

void sub_223B29EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

const void **sd::IMSSubscriberController::setTTYModeForEmergency_sync(const void **result, void *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (*a2)
  {
    uint64_t v5 = result;
    uint64_t v6 = (*(uint64_t (**)(const void *))(*(void *)result[20] + 72))(result[20]);
    int v7 = (os_log_t *)(*(uint64_t (**)(const void *, uint64_t))(*(void *)v5[10] + 16))(v5[10], v6);
    int v8 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = asStringBool();
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I TTYModeEm: %s", buf, 0xCu);
    }
    *(void *)std::string buf = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
    if ((*(unsigned int (**)(const void *))(*(void *)v5[20] + 504))(v5[20]))
    {
      int v9 = *v7;
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
      {
        v11[0] = 0;
        _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I TTYModeEm: Carrier suports RTT, sending kIMSCallRTTEnabled", (uint8_t *)v11, 2u);
      }
      uint64_t v10 = (const void **)MEMORY[0x263EFFB38];
      if (a3) {
        uint64_t v10 = (const void **)MEMORY[0x263EFFB40];
      }
      CFDictionarySetValue(*(CFMutableDictionaryRef *)buf, (const void *)*MEMORY[0x263F4B2A0], *v10);
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 120))(*a2, 2, a3);
    }
    return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)buf);
  }
  return result;
}

void sub_223B2A0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sd::IMSSubscriberController::handleInitialized(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I IMS Client initialized!", v4, 2u);
  }
  *((_DWORD *)this + 62) = 2;
}

void non-virtual thunk to'sd::IMSSubscriberController::handleInitialized(sd::IMSSubscriberController *this)
{
}

void sd::IMSSubscriberController::handleUninitialized(sd::IMSSubscriberController *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  uint64_t v4 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((unsigned char *)this + 292)) {
      uint64_t v5 = "do";
    }
    else {
      uint64_t v5 = "do NOT";
    }
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = v5;
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I IMS Client deinitialized! We %s need to check reg masks.", __p, 0xCu);
  }
  *((_DWORD *)this + 62) = 0;
  *(_DWORD *)std::string __p = 0;
  (*(void (**)(sd::IMSSubscriberController *, unsigned char *))(*(void *)this + 792))(this, __p);
  if (*((unsigned char *)this + 292)) {
    sd::IMSSubscriberController::onImsRegMaskUp((void **)this, (uint64_t)"Uninitialized: fMaskUpDesired", *((_DWORD *)this + 74));
  }
  if (*((void *)this + 41))
  {
    uint64_t v6 = *v3;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#N Uninitialized: Continuing shutdown", __p, 2u);
    }
    uint64_t v7 = *((void *)this + 16);
    if (v7)
    {
      (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 20) + 56))(__p);
      (*(void (**)(uint64_t, unsigned char *, void))(*(void *)v7 + 88))(v7, __p, *(unsigned __int8 *)(*((void *)this + 13) + 8));
      if (v10 < 0) {
        operator delete(*(void **)__p);
      }
    }
    int v8 = *((void *)this + 41);
    *((void *)this + 41) = 0;
    if (v8)
    {
      dispatch_group_leave(v8);
      dispatch_release(v8);
    }
  }
}

void sub_223B2A408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'sd::IMSSubscriberController::handleUninitialized(sd::IMSSubscriberController *this)
{
}

uint64_t sd::IMSSubscriberController::handleStateDump(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 128);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::handleStateDump(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

uint64_t sd::IMSSubscriberController::handleRegistrationStateChanged(void *a1, unsigned int *a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1 + 20;
  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)a1[20] + 72))(a1[20]);
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(*(void *)*(v4 - 10) + 16))(*(v4 - 10), v5);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)*v4 + 104))();
  int v8 = *a2;
  if (result != *a2)
  {
    int v9 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = (*(uint64_t (**)(void))(*(void *)*v4 + 104))() - 1;
      if (v10 > 2) {
        uint64_t v11 = "Deregistered (Idle)";
      }
      else {
        uint64_t v11 = (&off_2646CF6C0)[v10];
      }
      unsigned int v12 = *a2 - 1;
      if (v12 > 2) {
        uint64_t v13 = "Deregistered (Idle)";
      }
      else {
        uint64_t v13 = (&off_2646CF6C0)[v12];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v13;
      _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I RegistrationState: state changed from %s to %s", buf, 0x16u);
      int v8 = *a2;
    }
    if (!v8 && !a1[41])
    {
      unint64_t v14 = (unint64_t)(*(uint64_t (**)(void))(*(void *)a1[20] + 384))(a1[20]) >> 32;
      if (*(unsigned char *)(a1[13] + 8))
      {
        uint64_t v15 = *v6;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = (*(uint64_t (**)(void, uint64_t))(*(void *)*v4 + 752))(*v4, 1);
          uint64_t v17 = "disabled";
          if (v16) {
            uint64_t v17 = "terminated";
          }
          *(_DWORD *)std::string buf = 136315138;
          *(void *)&uint8_t buf[4] = v17;
          _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I RegistrationState: Sending Lazuli registration %s", buf, 0xCu);
        }
        std::string::size_type v18 = a1 + 20;
        if ((*(unsigned int (**)(void, uint64_t))(*(void *)a1[20] + 752))(a1[20], 1)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = 2;
        }
        LODWORD(v25) = 0;
        HIDWORD(v25) = v14;
        int v26 = v19;
        int v27 = 0;
        uint64_t v20 = a1[18];
        (*(void (**)(unsigned char *__return_ptr))(*(void *)*v18 + 56))(buf);
        char v21 = (*(uint64_t (**)(void))(*(void *)*v18 + 400))(*v18);
        (*(void (**)(uint64_t, unsigned char *, uint64_t, void, void, unint64_t))(*(void *)v20 + 168))(v20, buf, v19, 0, v21 & 1, v14);
        if (v29 < 0) {
          operator delete(*(void **)buf);
        }
        (*(void (**)(void, void ***))(*(void *)a1[20] + 360))(a1[20], &v25);
        (*(void (**)(void *, void ***))(*a1 + 392))(a1, &v25);
      }
      else
      {
        uint64_t v22 = a1[16];
        *(_DWORD *)std::string buf = 0;
        *(_DWORD *)&uint8_t buf[4] = v14;
        *(void *)&uint8_t buf[8] = 0;
        (*(void (**)(uint64_t, void *, unsigned char *, void))(*(void *)v22 + 32))(v22, v4, buf, 0);
        uint64_t v23 = a1[18];
        (*(void (**)(unsigned char *__return_ptr))(*(void *)a1[20] + 56))(buf);
        memset(v24, 0, sizeof(v24));
        (*(void (**)(uint64_t, unsigned char *, void *))(*(void *)v23 + 136))(v23, buf, v24);
        int v25 = (void **)v24;
        std::vector<ImsIdentityWithState>::__destroy_vector::operator()[abi:ne180100](&v25);
        if (v29 < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    return (*(uint64_t (**)(void, void))(*(void *)*v4 + 96))(*v4, *a2);
  }
  return result;
}

void sub_223B2A994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::handleRegistrationStateChanged(uint64_t a1, unsigned int *a2)
{
  return sd::IMSSubscriberController::handleRegistrationStateChanged((void *)(a1 - 64), a2);
}

uint64_t sd::IMSSubscriberController::handleRegistrationActive(uint64_t a1, unsigned int *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  uint64_t v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4);
  uint64_t v6 = *v5;
  if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = sd::ipTelephonyServiceMaskToString((sd *)*a2);
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I IMSRegistrationActive: Service Masks - %s", buf, 0xCu);
  }
  unsigned int v8 = sd::ipTelephonyServiceMaskToImsServiceMask((sd *)*a2);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 384))(*(void *)(a1 + 160));
  v22[0] = v9;
  v22[1] = v10;
  if (v10 == 1 && (v8 & ~HIDWORD(v10)) == 0)
  {
    v21[0] = 0;
    v21[1] = HIDWORD(v9);
    v21[2] = 1;
    v21[3] = v8;
    sd::IMSSubscriberController::handleImsRegistrationStatusUpdate(a1, v21);
    unint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 400))(*(void *)(a1 + 160));
    v20[0] = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 368))(*(void *)(a1 + 160));
    v20[1] = v16;
    if (v15) {
      HIDWORD(v20[0]) = 18;
    }
    sd::IMSSubscriberController::abortImsEstablishmentTimer((sd::IMSSubscriberController *)a1);
    (*(void (**)(uint64_t, void *, void))(*(void *)a1 + 224))(a1, v20, 0);
    uint64_t v17 = *(void *)(a1 + 144);
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 56))(buf);
    (*(void (**)(void))(**(void **)(a1 + 160) + 336))(*(void *)(a1 + 160));
    (*(void (**)(uint64_t, unsigned char *, BOOL, uint64_t, unint64_t, unint64_t))(*(void *)v17 + 96))(v17, buf, v18 == 1, 1, v15 & 1, HIDWORD(v15));
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
    if (!*(unsigned char *)(*(void *)(a1 + 104) + 8))
    {
      uint64_t v19 = *(void *)(a1 + 144);
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 56))(buf);
      (*(void (**)(uint64_t, unsigned char *, unsigned int *, unsigned int *))(*(void *)v19 + 176))(v19, buf, a2 + 2, a2 + 8);
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    unsigned int v12 = *v5;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = sd::ipTelephonyServiceMaskToString((sd *)*a2);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I IMSRegistrationActive: Ignoring event due to mismatch with attempted - %s", buf, 0xCu);
    }
    sd::IMSSubscriberController::printIRStatus(a1, (unsigned int *)v22, (uint64_t)"IMSRegistrationActive");
    *(void *)std::string buf = 0xFFFFFFFF00000000;
    *(_DWORD *)&uint8_t buf[8] = 1;
    unsigned int v24 = v8;
    sd::IMSSubscriberController::printIRStatus(a1, (unsigned int *)buf, (uint64_t)"IMSRegistrationActive:");
  }
  uint64_t result = *(void *)(a1 + 232);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
  }
  return result;
}

void sub_223B2ADF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::handleImsRegistrationStatusUpdate(uint64_t a1, unsigned int *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)(a1 + 160);
  (*(void (**)(void))(**(void **)(a1 + 160) + 336))(*(void *)(a1 + 160));
  if (a2[2] == v5)
  {
    if (v5) {
      BOOL v7 = a2[3] == v6;
    }
    else {
      BOOL v7 = 1;
    }
    int v8 = !v7;
  }
  else
  {
    int v8 = 1;
  }
  (*(void (**)(uint64_t, unsigned int *))(*(void *)a1 + 392))(a1, a2);
  if (*(unsigned char *)(*(void *)(a1 + 104) + 8))
  {
    if (v8)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
      uint64_t v10 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string __p = 136315138;
        *(void *)&__p[4] = sd::asString();
        _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#I ImsRegistrationState: Sending Lazuli IMS Registration state update: %s", __p, 0xCu);
      }
      uint64_t v11 = *(void *)(a1 + 144);
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 56))(__p);
      uint64_t v12 = a2[2];
      uint64_t v13 = a2[3];
      char v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 400))(*(void *)(a1 + 160));
      (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t, void, void))(*(void *)v11 + 168))(v11, __p, v12, v13, v14 & 1, a2[1]);
      if (v17 < 0) {
        operator delete(*(void **)__p);
      }
      (*(void (**)(void, unsigned int *))(*(void *)*v4 + 360))(*v4, a2);
    }
  }
  else
  {
    (*(void (**)(void, void *, unsigned int *, void))(**(void **)(a1 + 128) + 32))(*(void *)(a1 + 128), v4, a2, *(unsigned __int8 *)(a1 + 306));
    if (v8)
    {
      if (!(*(unsigned int (**)(void))(*(void *)*v4 + 64))()) {
        (*(void (**)(void, void *))(**(void **)(a1 + 128) + 40))(*(void *)(a1 + 128), v4);
      }
      if (a2[2] == 1)
      {
        uint64_t v15 = *(void *)(a1 + 192);
        if (v15) {
          (*(void (**)(uint64_t))(*(void *)v15 + 96))(v15);
        }
      }
      (*(void (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
      if (subscriber::isValidSimSlot())
      {
        sd::IMSSubscriberController::updateFullFunctionPCRegistration(a1, (uint64_t)a2);
      }
    }
  }
}

void sub_223B2B1F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::abortImsEstablishmentTimer(sd::IMSSubscriberController *this)
{
  uint64_t v1 = *((void *)this + 33);
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 80);
    if (v3)
    {
      *(void *)(v1 + 80) = 0;
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
      int v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v6 = 0;
        _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I ImsEstablishmentTimer: Aborting TIMS_Establishment timer", v6, 2u);
      }
    }
  }
}

void sd::IMSSubscriberController::printIRStatus(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  BOOL v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = sd::asString((sd *)*a2, v8);
    int v10 = 136316162;
    uint64_t v11 = a3;
    __int16 v12 = 2080;
    uint64_t v13 = v9;
    __int16 v14 = 2080;
    uint64_t v15 = sd::asString();
    __int16 v16 = 2080;
    uint64_t v17 = sd::asString();
    __int16 v18 = 2080;
    uint64_t v19 = asString();
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I %sSTATE SNAPSHOT[%s] - Registered: %s, Services: %s, dataMode: %s", (uint8_t *)&v10, 0x34u);
  }
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::handleRegistrationActive(uint64_t a1, unsigned int *a2)
{
  return sd::IMSSubscriberController::handleRegistrationActive(a1 - 64, a2);
}

void sd::IMSSubscriberController::handleRegistrationEvent(uint64_t a1, unsigned int *a2)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 192);
  if (v4) {
    (*(void (**)(uint64_t, void))(*(void *)v4 + 104))(v4, *((unsigned __int8 *)a2 + 8));
  }
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v5);
  BOOL v7 = *v6;
  if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = sd::imsRegFailureReasonToString();
    unsigned int v9 = a2[1];
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v9;
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I IMSRegistrationEvent: %s, for status code %u", buf, 0x12u);
  }
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 384))(*(void *)(a1 + 160));
  *(_DWORD *)std::string buf = 0;
  *(_DWORD *)&uint8_t buf[4] = HIDWORD(v10);
  *(void *)&uint8_t buf[8] = 0;
  sd::IMSSubscriberController::handleImsRegistrationStatusUpdate(a1, (unsigned int *)buf);
  *(void *)std::string buf = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 384))(*(void *)(a1 + 160));
  *(void *)&uint8_t buf[8] = v11;
  sd::IMSSubscriberController::printIRStatus(a1, (unsigned int *)buf, (uint64_t)"handleRegistrationEvent: ");
  if (*((unsigned char *)a2 + 9) && (uint64_t v12 = *a2, !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 144))(a1)))
  {
    int v14 = 0;
  }
  else
  {
    uint64_t v13 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_223AF3000, v13, OS_LOG_TYPE_DEFAULT, "#I IMSRegistrationEvent: no new registration will be attempted. Try to reset context.", buf, 2u);
    }
    uint64_t v12 = 0;
    int v14 = 1;
  }
  switch(a2[4])
  {
    case 0u:
    case 2u:
      goto LABEL_32;
    case 1u:
      goto LABEL_26;
    case 3u:
      uint64_t v15 = *v6;
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I IMSRegistrationEvent: initiate LimitedAccess mode registration", buf, 2u);
      }
      *(unsigned char *)(a1 + 305) = 1;
      sd::IMSSubscriberController::limitedAccessImsRegister((sd::IMSSubscriberController *)a1);
      int v14 = 0;
      break;
    case 4u:
      uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 160) + 744))(*(void *)(a1 + 160), 1);
      if (v16) {
        goto LABEL_16;
      }
      break;
    case 5u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 640))(a1, v12);
      sd::IMSSubscriberController::abortImsRegStatusReportingTimer((sd::IMSSubscriberController *)a1);
      sd::IMSSubscriberController::abortImsEstablishmentTimer((sd::IMSSubscriberController *)a1);
      uint64_t v17 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 384))(*(void *)(a1 + 160));
      *(_DWORD *)std::string buf = 0;
      *(_DWORD *)&uint8_t buf[4] = HIDWORD(v17);
      *(void *)&uint8_t buf[8] = 0;
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 224))(a1, buf, v12);
      uint64_t v18 = *(void *)(a1 + 144);
      std::string::basic_string[abi:ne180100]<0>(buf, "Resetting baseband due to Media Baseband requests timing out");
      uint64_t v16 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)v18 + 144))(v18, buf);
      goto LABEL_55;
    case 6u:
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 160))(buf);
      unsigned int v28 = *(std::__shared_weak_count **)&buf[8];
      *(unsigned char *)(*(void *)buf + 17) = 1;
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      char v29 = *v6;
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_223AF3000, v29, OS_LOG_TYPE_DEFAULT, "#I IMSRegistrationEvent: No WiFi support in country of origination", buf, 2u);
      }
      (*(void (**)(uint64_t, void))(*(void *)a1 + 576))(a1, 0);
      uint64_t v30 = *(void *)(a1 + 160);
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v30 + 256))(buf, v30);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v30 + 232))(v30, buf);
      if (v49 < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v31 = *v6;
      uint64_t v16 = os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT);
      if (!v16) {
        break;
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 240))(buf);
      if (v49 >= 0) {
        uint64_t v32 = buf;
      }
      else {
        uint64_t v32 = *(unsigned char **)buf;
      }
      int v46 = 136315138;
      __int16 v47 = v32;
      _os_log_impl(&dword_223AF3000, v31, OS_LOG_TYPE_DEFAULT, "#I IMSRegistrationEvent: fDisabledCountry set to %s", (uint8_t *)&v46, 0xCu);
LABEL_55:
      if (v49 < 0) {
        operator delete(*(void **)buf);
      }
      break;
    case 7u:
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 72))(buf, a1);
      int v19 = (*(uint64_t (**)(void))(**(void **)buf + 344))(*(void *)buf);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (v19)
      {
        uint64_t v20 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_223AF3000, v20, OS_LOG_TYPE_DEFAULT, "#N IMSRegistrationEvent: Authentication error with unsupported carrier. Disabling IMS.", buf, 2u);
        }
        uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 160) + 744))(*(void *)(a1 + 160), 1);
        if (v16) {
LABEL_16:
        }
          sd::IMSSubscriberController::onImsRegMaskDown(a1, (uint64_t)"IMSRegistrationEvent", 1, 0);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 640))(a1, v12);
        sd::IMSSubscriberController::abortImsRegStatusReportingTimer((sd::IMSSubscriberController *)a1);
        sd::IMSSubscriberController::abortImsEstablishmentTimer((sd::IMSSubscriberController *)a1);
        uint64_t v33 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 384))(*(void *)(a1 + 160));
        *(_DWORD *)std::string buf = 0;
        *(_DWORD *)&uint8_t buf[4] = HIDWORD(v33);
        *(void *)&uint8_t buf[8] = 0;
        uint64_t v16 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 224))(a1, buf, v12);
      }
      break;
    case 8u:
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 640))(a1, v12);
      sd::IMSSubscriberController::abortImsRegStatusReportingTimer((sd::IMSSubscriberController *)a1);
      sd::IMSSubscriberController::abortImsEstablishmentTimer((sd::IMSSubscriberController *)a1);
      uint64_t v16 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 304))(a1, "CallFailureDrop");
      break;
    case 9u:
      uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 232) + 80))(*(void *)(a1 + 232));
LABEL_26:
      if (a2[1] == 408)
      {
        uint64_t v21 = *(void *)(a1 + 144);
        uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
        (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 184))(v21, v22);
      }
      if (*(unsigned char *)(*(void *)(a1 + 104) + 8))
      {
        if (!*((unsigned char *)a2 + 9))
        {
          uint64_t v23 = *(void *)(a1 + 232);
          if (v23) {
            (*(void (**)(uint64_t))(*(void *)v23 + 136))(v23);
          }
        }
      }
LABEL_32:
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 640))(a1, v12);
      sd::IMSSubscriberController::abortImsRegStatusReportingTimer((sd::IMSSubscriberController *)a1);
      if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 160) + 752))(*(void *)(a1 + 160), 9))
      {
        if (v12) {
          BOOL v24 = 1;
        }
        else {
          BOOL v24 = *((unsigned char *)a2 + 9) == 0;
        }
        if (v24) {
          uint64_t v12 = v12;
        }
        else {
          uint64_t v12 = 1;
        }
        uint64_t v25 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 384))(*(void *)(a1 + 160));
        *(_DWORD *)std::string buf = 0;
        *(_DWORD *)&uint8_t buf[4] = HIDWORD(v25);
        *(void *)&uint8_t buf[8] = 0;
        uint64_t v16 = (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(*(void *)a1 + 224))(a1, buf, v12);
      }
      else
      {
        uint64_t v26 = *v6;
        uint64_t v16 = os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT);
        if (v16)
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl(&dword_223AF3000, v26, OS_LOG_TYPE_DEFAULT, "#I IMS status update to baseband blocked. IMS PDN is not active", buf, 2u);
        }
      }
      break;
    case 0xAu:
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 640))(a1, v12);
      sd::IMSSubscriberController::abortImsRegStatusReportingTimer((sd::IMSSubscriberController *)a1);
      sd::IMSSubscriberController::abortImsEstablishmentTimer((sd::IMSSubscriberController *)a1);
      (*(void (**)(uint64_t, const char *))(*(void *)a1 + 304))(a1, "ExpiredWhileOos");
      uint64_t v16 = (*(uint64_t (**)(uint64_t, const char *))(*(void *)a1 + 328))(a1, "ExpiredWhileOos");
      break;
    default:
      int v27 = *v6;
      uint64_t v16 = os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR);
      if (v16)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_223AF3000, v27, OS_LOG_TYPE_ERROR, "IMSRegistrationEvent: Unknown or new registration failure reason. Ignoring...", buf, 2u);
      }
      break;
  }
  if (capabilities::ct::supportsSTKSendIMSRegEvent((capabilities::ct *)v16))
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 88));
    uint64_t v35 = ServiceMap;
    uint64_t v36 = *(void *)(MEMORY[0x263F03550] + 8);
    if (v36 < 0)
    {
      BOOL v37 = (unsigned __int8 *)(v36 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v38 = 5381;
      do
      {
        uint64_t v36 = v38;
        unsigned int v39 = *v37++;
        uint64_t v38 = (33 * v38) ^ v39;
      }
      while (v39);
    }
    std::mutex::lock(ServiceMap);
    *(void *)std::string buf = v36;
    uint64_t v40 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v35[1].__m_.__sig, (unint64_t *)buf);
    if (v40)
    {
      uint64_t v42 = v40[3];
      uint64_t v41 = (std::__shared_weak_count *)v40[4];
      if (v41)
      {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v35);
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        char v43 = 0;
        goto LABEL_69;
      }
    }
    else
    {
      uint64_t v42 = 0;
    }
    std::mutex::unlock(v35);
    uint64_t v41 = 0;
    char v43 = 1;
LABEL_69:
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 528))(buf);
    if (v42 && (sd::UEInfo::IsimInfo::valid(*(sd::UEInfo::IsimInfo **)buf) & 1) != 0)
    {
      uint64_t v44 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, BOOL))(*(void *)v42 + 136))(v42, v44, *(void *)buf + 32, a2[1], a2[4] != 0);
    }
    else
    {
      uint64_t v45 = *v6;
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v4SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
        _os_log_error_impl(&dword_223AF3000, v45, OS_LOG_TYPE_ERROR, "IMSRegistrationEvent: No handle to STK controller or valid ISIM card app, not sending IMS reg event", (uint8_t *)&v46, 2u);
      }
    }
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if ((v43 & 1) == 0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
  }
  sd::IMSSubscriberController::resetNetworkAndNotifications((sd::IMSSubscriberController *)a1, v14);
}

void sub_223B2C148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::abortImsRegStatusReportingTimer(sd::IMSSubscriberController *this)
{
  uint64_t v1 = *((void *)this + 32);
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 80);
    if (v3)
    {
      *(void *)(v1 + 80) = 0;
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
      uint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I ImsRegStatusReportingTimer: Aborting IMS Registration reporting timer", v6, 2u);
      }
    }
  }
}

void sd::IMSSubscriberController::limitedAccessImsRegister(sd::IMSSubscriberController *this)
{
  uint64_t v16 = (*(uint64_t (**)(void))(**((void **)this + 20) + 384))(*((void *)this + 20));
  uint64_t v17 = v2;
  if ((*(uint64_t (**)(void))(**((void **)this + 20) + 400))()) {
    int v3 = 18;
  }
  else {
    int v3 = (*(uint64_t (**)(void))(**((void **)this + 20) + 512))(*((void *)this + 20));
  }
  HIDWORD(v1SystemDeterminationManager::handleDumpState_sync(this - 6) = v3;
  uint64_t v4 = *((void *)this + 27);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v5);
  BOOL v7 = v6;
  if (v4)
  {
    bzero(&buf, 0x250uLL);
    ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&buf);
    (*(void (**)(void))(**((void **)this + 20) + 664))();
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 264))(v4, &buf);
    uint64_t v8 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I limitedAccessImsRegister: Sent LimitedAccess Registration request", v13, 2u);
    }
    sd::IMSSubscriberController::startImsRegStatusReportingTimer(this);
    sd::IMSSubscriberController::startImsEstablishmentTimer(this, 0);
    LODWORD(v17) = 1;
    uint64_t v9 = **((void **)this + 20);
    if (*(unsigned char *)(*((void *)this + 13) + 8)) {
      int v10 = (*(uint64_t (**)(void))(v9 + 560))();
    }
    else {
      int v10 = (*(uint64_t (**)(void))(v9 + 128))();
    }
    HIDWORD(v17) = v10;
    sd::IMSSubscriberController::printIRStatus((uint64_t)this, (unsigned int *)&v16, (uint64_t)"limitedAccessImsRegister: ");
    (*(void (**)(void, uint64_t *))(**((void **)this + 20) + 392))(*((void *)this + 20), &v16);
    ims::NetworkConfig::~NetworkConfig(&buf);
  }
  else
  {
    uint64_t v11 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I limitedAccessImsRegister: Client not valid", (uint8_t *)&buf, 2u);
    }
    (*(void (**)(void, uint64_t *))(**((void **)this + 20) + 392))(*((void *)this + 20), &v16);
    uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 20) + 384))();
    LODWORD(buf) = 0;
    HIDWORD(buf) = HIDWORD(v12);
    uint64_t v15 = 0;
    (*(void (**)(sd::IMSSubscriberController *, void **, void))(*(void *)this + 224))(this, &buf, 0);
  }
}

void sub_223B2C698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ims::NetworkConfig::~NetworkConfig((void **)va);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberController::resetNetworkAndNotifications(sd::IMSSubscriberController *this, int a2)
{
  if (a2 && !*((unsigned char *)this + 309)) {
    (*(void (**)(sd::IMSSubscriberController *))(*(void *)this + 656))(this);
  }
  if (*((unsigned char *)this + 303))
  {
    uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v7 = 0;
      _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I SubscriptionChange: ok to proceed", v7, 2u);
    }
    uint64_t v5 = *((void *)this + 18);
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 104))(v5, v6);
    sd::IMSSubscriberController::updateRestImsFeatureState(this);
  }
}

void non-virtual thunk to'sd::IMSSubscriberController::handleRegistrationEvent(uint64_t a1, unsigned int *a2)
{
}

void sd::IMSSubscriberController::handleNewInitialRegistration(sd::IMSSubscriberController *this)
{
  if (*(unsigned char *)(*((void *)this + 13) + 8)) {
    return;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I New initial registration started. Notifying baseband.", v15, 2u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*((Registry **)this + 11));
  uint64_t v5 = ServiceMap;
  unint64_t v6 = *(void *)(MEMORY[0x263F03598] + 8);
  if ((v6 & 0x8000000000000000) != 0)
  {
    BOOL v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v16 = v6;
  int v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v5[1].__m_.__sig, &v16);
  if (!v10)
  {
    uint64_t v12 = 0;
    goto LABEL_11;
  }
  uint64_t v12 = v10[3];
  uint64_t v11 = (std::__shared_weak_count *)v10[4];
  if (!v11)
  {
LABEL_11:
    std::mutex::unlock(v5);
    uint64_t v11 = 0;
    char v13 = 1;
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v5);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  char v13 = 0;
LABEL_12:
  uint64_t v14 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 416))(v12, v14);
  if ((v13 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  (*(void (**)(sd::IMSSubscriberController *, const char *, void))(*(void *)this + 320))(this, "New initial registration", 0);
  sd::IMSSubscriberController::startImsEstablishmentTimer(this, 0);
}

void sub_223B2CA34(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::startImsEstablishmentTimer(sd::IMSSubscriberController *this, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (((*(uint64_t (**)(void))(**((void **)this + 20) + 400))(*((void *)this + 20)) & 1) == 0
    && !*(void *)(*((void *)this + 33) + 80)
    && (*(unsigned int (**)(void))(**((void **)this + 20) + 776))(*((void *)this + 20)))
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 88))(&v7);
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 408))(v7);
    if (v4)
    {
      SDTimer::set(*((SDTimer **)this + 33), v4 + a2);
      uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
      unint64_t v6 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 67109376;
        int v10 = v4;
        __int16 v11 = 1024;
        int v12 = a2;
        _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I ImsEstablishmentTimer: Starting TIMS_Establishment timer: %u + %u seconds", buf, 0xEu);
      }
    }
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_223B2CC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void non-virtual thunk to'sd::IMSSubscriberController::handleNewInitialRegistration(sd::IMSSubscriberController *this)
{
}

uint64_t sd::IMSSubscriberController::handlePdnReset(sd::IMSSubscriberController *this)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 20) + 752))(*((void *)this + 20), 9);
  if (result)
  {
    uint64_t result = *((void *)this + 29);
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 56);
      return v3();
    }
  }
  return result;
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::handlePdnReset(sd::IMSSubscriberController *this)
{
  return sd::IMSSubscriberController::handlePdnReset((sd::IMSSubscriberController *)((char *)this - 64));
}

void sd::IMSSubscriberController::handleEmergencyAuthenticate(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 176);
  unint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  uint64_t v14 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 160) + 528))(&v11);
  uint64_t v7 = v11;
  if (v11)
  {
    (*(void (**)(sd::UEInfo::IsimInfo **__return_ptr))(**(void **)(a1 + 160) + 528))(&v9);
    uint64_t v8 = sd::UEInfo::IsimInfo::valid(v9);
  }
  else
  {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v5 + 24))(v5, &v13, a3, v8);
  if (v7 && v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_223B2CE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::handleAuthenticate(uint64_t a1, unsigned char *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  uint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*a2) {
      unint64_t v6 = "XCAP";
    }
    else {
      unint64_t v6 = "SIP";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v6;
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I Auth: got auth challenge from IMS via %s", (uint8_t *)&buf, 0xCu);
  }
  if (*(void *)(a1 + 216))
  {
    uint64_t v7 = *(void *)(a1 + 176);
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 224);
    uint64_t v10 = *(void *)(a1 + 216);
    uint64_t v11 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 160) + 528))(&buf);
    uint64_t v9 = sd::UEInfo::IsimInfo::valid((sd::UEInfo::IsimInfo *)buf);
    (*(void (**)(uint64_t, uint64_t *, unsigned char *, uint64_t))(*(void *)v7 + 24))(v7, &v10, a2, v9);
    if (*((void *)&buf + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
}

void sub_223B2D054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'sd::IMSSubscriberController::handleAuthenticate(uint64_t a1, unsigned char *a2)
{
}

void sd::IMSSubscriberController::handleClientError(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = (uint64_t *)*a2;
    }
    v9[0] = 67109378;
    v9[1] = a3;
    __int16 v10 = 2080;
    uint64_t v11 = v8;
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I IMSClient: error [%u]: %s", (uint8_t *)v9, 0x12u);
  }
}

void non-virtual thunk to'sd::IMSSubscriberController::handleClientError(uint64_t a1, uint64_t *a2, int a3)
{
}

void sd::IMSSubscriberController::handleRegistrationAllowed(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  uint64_t v4 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I IMSRegistrationAllowed: reenabling", (uint8_t *)__p, 2u);
  }
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 20) + 736))(*((void *)this + 20), 1))
  {
    if (*(unsigned char *)(*((void *)this + 13) + 8))
    {
      uint64_t v5 = *v3;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I IMSRegistrationAllowed: Changing Lazuli registration to kNotRegistered", (uint8_t *)__p, 2u);
      }
      long long v10 = xmmword_223B4CDA0;
      uint64_t v6 = *((void *)this + 18);
      (*(void (**)(void **__return_ptr))(**((void **)this + 20) + 56))(__p);
      char v7 = (*(uint64_t (**)(void))(**((void **)this + 20) + 400))();
      (*(void (**)(uint64_t, void **, void, void, void, uint64_t))(*(void *)v6 + 168))(v6, __p, 0, 0, v7 & 1, 0xFFFFFFFFLL);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      (*(void (**)(void, long long *))(**((void **)this + 20) + 360))(*((void *)this + 20), &v10);
    }
    sd::IMSSubscriberController::onImsRegMaskUp((void **)this, (uint64_t)"IMSRegistrationAllowed", 1);
  }
}

void sub_223B2D3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'sd::IMSSubscriberController::handleRegistrationAllowed(sd::IMSSubscriberController *this)
{
}

void sd::IMSSubscriberController::handleRegistrationIdentities(uint64_t a1, long long **a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  uint64_t v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4);
  uint64_t v6 = *v5;
  if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = ((char *)a2[1] - (char *)*a2) >> 5;
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I IMSRegistrationIdentity: list size: %lu", buf, 0xCu);
  }
  uint64_t v8 = *a2;
  char v9 = a2[1];
  if (*a2 != v9)
  {
    int64x2_t v47 = 0uLL;
    std::locale v48 = 0;
    do
    {
      memset(v46, 0, sizeof(v46));
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v46, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v10 = *v8;
        *(void *)&v46[16] = *((void *)v8 + 2);
        *(_OWORD *)int v46 = v10;
      }
      uint64_t v11 = *((int *)v8 + 6);
      *(_DWORD *)&v46[24] = *((_DWORD *)v8 + 6);
      uint64_t v12 = *v5;
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = v46;
        if (v46[23] < 0) {
          uint64_t v13 = *(unsigned char **)v46;
        }
        uint64_t v14 = "???";
        if (v11 <= 4) {
          uint64_t v14 = (&off_2646CF698)[v11];
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v14;
        _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I IMSRegistrationIdentity: %s (%s)", buf, 0x16u);
      }
      if ((v46[23] & 0x80000000) != 0) {
        std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v46, *(std::string::size_type *)&v46[8]);
      }
      else {
        std::string v44 = *(std::string *)v46;
      }
      int v15 = *(_DWORD *)&v46[24];
      if ((*(_DWORD *)&v46[24] - 1) >= 4) {
        int v15 = 0;
      }
      int v45 = v15;
      uint64_t v16 = v47.i64[1];
      if (v47.i64[1] >= (unint64_t)v48)
      {
        uint64_t v18 = (v47.i64[1] - v47.i64[0]) >> 5;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 59) {
          std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v20 = (uint64_t)&v48[-v47.i64[0]];
        if ((uint64_t)&v48[-v47.i64[0]] >> 4 > v19) {
          unint64_t v19 = v20 >> 4;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v21 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        uint64_t v53 = &v48;
        uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImsIdentityWithState>>(v21);
        uint64_t v23 = &v22[32 * v18];
        *(void *)long long buf = v22;
        *(void *)&uint8_t buf[8] = v23;
        uint64_t v52 = &v22[32 * v24];
        long long v25 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
        *((void *)v23 + 2) = *((void *)&v44.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v23 = v25;
        memset(&v44, 0, sizeof(v44));
        *((_DWORD *)v23 + SystemDeterminationManager::handleDumpState_sync(this - 6) = v45;
        uint64_t v26 = v23 + 32;
        *(void *)&uint8_t buf[16] = v23 + 32;
        uint64_t v27 = v47.i64[1];
        uint64_t v28 = v47.i64[0];
        uint64_t v29 = *(void *)&buf[8];
        if (v47.i64[1] == v47.i64[0])
        {
          int64x2_t v31 = vdupq_n_s64(v47.u64[1]);
        }
        else
        {
          do
          {
            long long v30 = *(_OWORD *)(v27 - 32);
            *(void *)(v29 - 1SystemDeterminationManager::handleDumpState_sync(this - 6) = *(void *)(v27 - 16);
            *(_OWORD *)(v29 - 32) = v30;
            *(void *)(v27 - 24) = 0;
            *(void *)(v27 - 1SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
            *(void *)(v27 - 32) = 0;
            *(_DWORD *)(v29 - 8) = *(_DWORD *)(v27 - 8);
            v29 -= 32;
            v27 -= 32;
          }
          while (v27 != v28);
          int64x2_t v31 = v47;
          uint64_t v26 = *(char **)&buf[16];
        }
        v47.i64[0] = v29;
        v47.i64[1] = (uint64_t)v26;
        *(int64x2_t *)&uint8_t buf[8] = v31;
        uint64_t v32 = v48;
        std::locale v48 = v52;
        uint64_t v52 = v32;
        *(void *)long long buf = v31.i64[0];
        std::__split_buffer<ImsIdentityWithState>::~__split_buffer((uint64_t)buf);
        v47.i64[1] = (uint64_t)v26;
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v17 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
        *(void *)(v47.i64[1] + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = *((void *)&v44.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v16 = v17;
        memset(&v44, 0, sizeof(v44));
        *(_DWORD *)(v16 + 24) = v45;
        v47.i64[1] = v16 + 32;
      }
      if ((v46[23] & 0x80000000) != 0) {
        operator delete(*(void **)v46);
      }
      v8 += 2;
    }
    while (v8 != v9);
    uint64_t v33 = *(void *)(a1 + 144);
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 56))(v46);
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v35 = v47.i64[1];
    uint64_t v34 = v47.i64[0];
    char v43 = 0;
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
    uint64_t v36 = v47.i64[1] - v47.i64[0];
    if (v47.i64[1] != v47.i64[0])
    {
      v44.__r_.__value_.__l.__size_ = 0;
      if (v36 < 0) {
        std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v41 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImsIdentityWithState>>(v36 >> 5);
      uint64_t v42 = v41;
      char v43 = (char *)v41 + 32 * v37;
      uint64_t v50 = v41;
      *(void *)long long buf = &v43;
      char v49 = v41;
      uint64_t v38 = v41;
      uint64_t v52 = 0;
      *(void *)&uint8_t buf[8] = &v49;
      *(void *)&uint8_t buf[16] = &v50;
      do
      {
        if (*(char *)(v34 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v38, *(const std::string::value_type **)v34, *(void *)(v34 + 8));
          uint64_t v40 = v50;
        }
        else
        {
          long long v39 = *(_OWORD *)v34;
          v38->__r_.__value_.__r.__words[2] = *(void *)(v34 + 16);
          *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
          uint64_t v40 = v38;
        }
        LODWORD(v38[1].__r_.__value_.__l.__data_) = *(_DWORD *)(v34 + 24);
        v34 += 32;
        uint64_t v38 = (std::string *)((char *)v40 + 32);
        uint64_t v50 = (std::string *)((char *)v40 + 32);
      }
      while (v34 != v35);
      LOBYTE(v52) = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ImsIdentityWithState>,ImsIdentityWithState*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
      uint64_t v42 = v38;
    }
    (*(void (**)(uint64_t, unsigned char *, std::string **))(*(void *)v33 + 136))(v33, v46, &v41);
    *(void *)long long buf = &v41;
    std::vector<ImsIdentityWithState>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((v46[23] & 0x80000000) != 0) {
      operator delete(*(void **)v46);
    }
    *(void *)long long buf = &v47;
    std::vector<ImsIdentityWithState>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
}

void sub_223B2D924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31)
{
  *(void *)(v32 - 144) = v31;
  std::vector<ImsIdentityWithState>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 144));
  if (a29 < 0) {
    operator delete(__p);
  }
  std::string __p = &a31;
  std::vector<ImsIdentityWithState>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'sd::IMSSubscriberController::handleRegistrationIdentities(uint64_t a1, long long **a2)
{
}

void sd::IMSSubscriberController::updateRestImsFeatureState(sd::IMSSubscriberController *this)
{
  (*(void (**)(void **__return_ptr))(**((void **)this + 20) + 160))(&__p);
  int v2 = *(_DWORD *)__p;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v2)
  {
    uint64_t v3 = *((void *)this + 18);
    (*(void (**)(void **__return_ptr))(**((void **)this + 20) + 56))(&__p);
    unsigned int v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 288))();
    unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 20) + 296))(*((void *)this + 20));
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 20) + 440))(*((void *)this + 20));
    (*(void (**)(uint64_t, void **, void, void, uint64_t))(*(void *)v3 + 72))(v3, &__p, v4, v5, v6);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    uint64_t v8 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I IMS Feature: set removed, because VoLTE support is unknown", (uint8_t *)&__p, 2u);
    }
    uint64_t v9 = *((void *)this + 18);
    (*(void (**)(void **__return_ptr))(**((void **)this + 20) + 56))(&__p);
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 80))(v9, &__p);
  }
  if (v12 < 0) {
    operator delete(__p);
  }
}

void sub_223B2DC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::handleSimRefreshEnd_sync(sd::IMSSubscriberController *this)
{
  if (*((unsigned char *)this + 303))
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    uint64_t v3 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v4 = 0;
      _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I SubscriptionChange: Reset pending state", v4, 2u);
    }
    *((unsigned char *)this + 303) = 0;
  }
}

void sd::IMSSubscriberController::updateFullFunctionPCRegistration(uint64_t a1, uint64_t a2)
{
  v24[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  unsigned int v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v4);
  char v6 = *(_DWORD *)(a2 + 12);
  uint64_t v7 = v6 & 1;
  unsigned int v8 = v6 & 2;
  BOOL v9 = *(unsigned __int8 *)(a1 + 320) == v7 && *(unsigned __int8 *)(a1 + 321) == v8 >> 1;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 88));
  uint64_t v11 = ServiceMap;
  unint64_t v12 = *(void *)(MEMORY[0x263F03550] + 8);
  if ((v12 & 0x8000000000000000) != 0)
  {
    uint64_t v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      unint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v23 = v12;
  uint64_t v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v11[1].__m_.__sig, &v23);
  if (v16)
  {
    uint64_t v18 = v16[3];
    long long v17 = (std::__shared_weak_count *)v16[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      char v19 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::mutex::unlock(v11);
  long long v17 = 0;
  char v19 = 1;
LABEL_12:
  if (v18) {
    char v20 = v9;
  }
  else {
    char v20 = 1;
  }
  if (v20)
  {
    unint64_t v21 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v23) = 0;
      _os_log_impl(&dword_223AF3000, v21, OS_LOG_TYPE_DEFAULT, "#I updateFullFunctionPCRegistration: Not updating", (uint8_t *)&v23, 2u);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 320) = v7;
    *(unsigned char *)(a1 + 321) = v8 >> 1;
    uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
    v24[0] = &unk_26D745180;
    v24[1] = v5;
    v24[2] = v7 | (v8 << 7);
    void v24[3] = v24;
    (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, void *))(*(void *)v18 + 64))(v18, v22, v7, v8 != 0, v24);
    std::__function::__value_func<void ()(BOOL,BOOL)>::~__value_func[abi:ne180100](v24);
  }
  if ((v19 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_223B2DFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(BOOL,BOOL)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if ((v3 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberController::saveImsRegistrationStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  (*(void (**)(void))(**(void **)(a1 + 160) + 344))(*(void *)(a1 + 160));
  *(void *)long long buf = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 336))();
  *(void *)&uint8_t buf[8] = v4;
  sd::IMSSubscriberController::printIRStatus(a1, (unsigned int *)buf, (uint64_t)"ImsRegistrationState: ");
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 88));
  char v6 = ServiceMap;
  uint64_t v7 = *(void *)(MEMORY[0x263F03578] + 8);
  if (v7 < 0)
  {
    unsigned int v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v7;
  uint64_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v6[1].__m_.__sig, (unint64_t *)buf);
  if (v11)
  {
    uint64_t v13 = v11[3];
    unint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      char v14 = 0;
      if (!v13) {
        goto LABEL_14;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  unint64_t v12 = 0;
  char v14 = 1;
  if (!v13) {
    goto LABEL_14;
  }
LABEL_10:
  int v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 64))(*(void *)(a1 + 160));
  uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  if (v15 == 1) {
    uint64_t v17 = 26;
  }
  else {
    uint64_t v17 = 17;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL))(*(void *)v13 + 112))(v13, v16, v17, *(_DWORD *)(a2 + 8) == 1);
LABEL_14:
  if ((v14 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  char v19 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v18);
  char v20 = v19;
  if (*(_DWORD *)(a2 + 8) == 1)
  {
    v36[0] = 0;
    v36[1] = 0;
    uint64_t v37 = 0;
    unint64_t v21 = (char *)asString();
    std::string::basic_string[abi:ne180100]<0>(v36, v21);
    uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 400))(*(void *)(a1 + 160));
    unint64_t v23 = *v20;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = sd::asString();
      long long v25 = v36;
      if (v37 < 0) {
        long long v25 = (void **)v36[0];
      }
      if (v22) {
        uint64_t v26 = "iWLAN";
      }
      else {
        uint64_t v26 = (const char *)v25;
      }
      if ((v22 & 0xFFFFFFFF00000001) == 1) {
        uint64_t v27 = "[overCell]";
      }
      else {
        uint64_t v27 = "";
      }
      uint64_t v28 = *(void *)(a1 + 144);
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 160) + 56))(__p);
      (*(void (**)(uint64_t, void **))(*(void *)v28 + 272))(v28, __p);
      uint64_t v29 = asString();
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v26;
      __int16 v39 = 2080;
      uint64_t v40 = v27;
      __int16 v41 = 2080;
      uint64_t v42 = v29;
      _os_log_impl(&dword_223AF3000, v23, OS_LOG_TYPE_DEFAULT, "#I ImsRegistrationState: UE is Registered for %s on %{public}s%s (%s)", buf, 0x2Au);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 376))(*(void *)(a1 + 160), a2);
    *(void *)long long buf = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 368))(*(void *)(a1 + 160));
    *(void *)&uint8_t buf[8] = v30;
    sd::IMSSubscriberController::printIRStatus(a1, (unsigned int *)buf, (uint64_t)"ImsRegistrationState: ");
    uint64_t v31 = *(void *)(a1 + 256);
    uint64_t v32 = *(void *)(v31 + 80);
    if (v32)
    {
      *(void *)(v31 + 80) = 0;
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(v36[0]);
    }
  }
  else
  {
    uint64_t v33 = *v19;
    if (os_log_type_enabled(*v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v33, OS_LOG_TYPE_DEFAULT, "#I ImsRegistrationState: UE is not Registered", buf, 2u);
    }
  }
}

void sub_223B2E500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::onImsRegStatusReportingTimeout(sd::IMSSubscriberController *this)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v22 = 0;
  unint64_t v23 = 0;
  uint64_t v2 = (char *)this + 160;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 88))(&v22);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v2 + 72))();
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 224))(v22);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#N ImsRegStatusReportingTimer: Registration didn't succeed in %d seconds. Inform Baseband", buf, 8u);
  }
  uint64_t v6 = *((void *)this + 32);
  uint64_t v7 = *(void *)(v6 + 80);
  if (v7)
  {
    *(void *)(v6 + 80) = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  *(void *)long long buf = 0;
  uint64_t v25 = 0;
  uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 20) + 384))(*((void *)this + 20));
  *(_DWORD *)long long buf = 0;
  *(_DWORD *)&uint8_t buf[4] = HIDWORD(v8);
  uint64_t v25 = 0;
  (*(void (**)(sd::IMSSubscriberController *, uint8_t *, void))(*(void *)this + 224))(this, buf, 0);
  if ((*(uint64_t (**)(void))(**((void **)this + 20) + 400))(*((void *)this + 20)))
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(*((Registry **)this + 11));
    unsigned int v10 = ServiceMap;
    unint64_t v11 = *(void *)(MEMORY[0x263F03578] + 8);
    if ((v11 & 0x8000000000000000) != 0)
    {
      unint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v13 = 5381;
      do
      {
        unint64_t v11 = v13;
        unsigned int v14 = *v12++;
        uint64_t v13 = (33 * v13) ^ v14;
      }
      while (v14);
    }
    std::mutex::lock(ServiceMap);
    unint64_t v20 = v11;
    int v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v10[1].__m_.__sig, &v20);
    if (!v15)
    {
      std::mutex::unlock(v10);
      goto LABEL_21;
    }
    uint64_t v17 = v15[3];
    uint64_t v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      if (!v17)
      {
LABEL_20:
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        goto LABEL_21;
      }
    }
    else
    {
      std::mutex::unlock(v10);
      if (!v17) {
        goto LABEL_21;
      }
    }
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    (*(void (**)(unint64_t *__return_ptr, uint64_t))(*(void *)v17 + 432))(&v20, v17);
    unint64_t v18 = v20;
    if (v20)
    {
      uint64_t v19 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
      (*(void (**)(unint64_t, uint64_t))(*(void *)v18 + 80))(v18, v19);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_21:
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
}

void sub_223B2E8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::startImsRegStatusReportingTimer(sd::IMSSubscriberController *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!*(void *)(*((void *)this + 32) + 80))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 88))(&v5);
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 224))(v5);
    SDTimer::set(*((SDTimer **)this + 32), v2);
    uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      int v8 = v2;
      _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I ImsRegStatusReportingTimer: Starting IMS Registration reporting timer: %u seconds", buf, 8u);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_223B2EAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sd::IMSSubscriberController::onImsEstablishmentTimeout(sd::IMSSubscriberController *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v2 = (char *)this + 160;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 88))(&v8);
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)v2 + 72))();
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 408))(v8);
    *(_DWORD *)long long buf = 67109120;
    int v11 = v5;
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#N ImsEstablishmentTimer: Registration didn't succeed in %d seconds. Inform Baseband", buf, 8u);
  }
  uint64_t v6 = *((void *)this + 33);
  uint64_t v7 = *(void *)(v6 + 80);
  if (v7)
  {
    *(void *)(v6 + 80) = 0;
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (((*(uint64_t (**)(void))(**((void **)this + 20) + 400))(*((void *)this + 20)) & 1) == 0)
  {
    sd::IMSSubscriberController::startPlmnBarringTimer(this);
    sd::IMSSubscriberController::onImsRegMaskDown((uint64_t)this, (uint64_t)"ImsEstablishmentTimer", 1, 1);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_223B2ECE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::startPlmnBarringTimer(sd::IMSSubscriberController *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!*(void *)(*((void *)this + 34) + 80))
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 88))(&v5);
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 416))(v5);
    if (v2)
    {
      SDTimer::set(*((SDTimer **)this + 34), v2);
      uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
      uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        int v8 = v2;
        _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I PlmnBarringTimer: Starting PLMN_Barring timer: %u seconds", buf, 8u);
      }
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_223B2EE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sd::IMSSubscriberController::resetImsEstablishmentTimer(sd::IMSSubscriberController *this)
{
  sd::IMSSubscriberController::abortImsEstablishmentTimer(this);

  sd::IMSSubscriberController::startImsEstablishmentTimer(this, 0);
}

void sd::IMSSubscriberController::onPlmnBarringTimeout(sd::IMSSubscriberController *this)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 88))(&v8);
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#N PlmnBarringTimer: expired.", v7, 2u);
  }
  uint64_t v4 = *((void *)this + 34);
  uint64_t v5 = *(void *)(v4 + 80);
  if (v5)
  {
    *(void *)(v4 + 80) = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 20) + 752))(*((void *)this + 20), 1))
  {
    uint64_t v6 = *((void *)this + 27);
    *(_DWORD *)uint64_t v7 = 128;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v6 + 56))(v6, v7);
  }
  sd::IMSSubscriberController::onImsRegMaskUp((void **)this, (uint64_t)"PlmnBarringTimer", 1);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_223B2F08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::abortPlmnBarringTimer(sd::IMSSubscriberController *this)
{
  uint64_t v1 = *((void *)this + 34);
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 80);
    if (v3)
    {
      *(void *)(v1 + 80) = 0;
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
      uint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I PlmnBarringTimer: Aborting PLMN_Barring timer", v6, 2u);
      }
    }
  }
}

void sd::IMSSubscriberController::initializeImsClient_sync(sd::IMSSubscriberController *this, uint64_t a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)((char *)this + 160);
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 20) + 56))(&v31);
  if ((*(uint64_t (**)(void))(*(void *)*v4 + 400))(*v4)) {
    int v5 = 18;
  }
  else {
    int v5 = (*(uint64_t (**)(void))(**((void **)this + 20) + 512))(*((void *)this + 20));
  }
  v29[0] = 0;
  v29[1] = v5;
  uint64_t v30 = 0;
  *((unsigned char *)this + 311) = 0;
  (*(void (**)(sd::IMSSubscriberController *, const char *, uint64_t))(*(void *)this + 320))(this, "initializeImsClient", a2);
  (*(void (**)(sd::IMSSubscriberController *, const char *))(*(void *)this + 336))(this, "initializeImsClient");
  if (*((unsigned char *)this + 305))
  {
    sd::IMSSubscriberController::limitedAccessImsRegister(this);
  }
  else
  {
    uint64_t v6 = *((void *)this + 27);
    uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    uint64_t v8 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v7);
    if (v6
      && (*(unsigned int (**)(void, uint64_t))(**((void **)this + 20) + 752))(*((void *)this + 20), 11))
    {
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 584))(&v26);
      if (v26 == v27)
      {
        int v15 = *v8;
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl(&dword_223AF3000, v15, OS_LOG_TYPE_ERROR, "initializeImsClient: No usable proxy found - switching transport.", buf, 2u);
        }
        uint64_t v16 = *((void *)this + 29);
        if (v16)
        {
          (*(void (**)(uint64_t))(*(void *)v16 + 128))(v16);
          (*(void (**)(void))(**((void **)this + 29) + 56))(*((void *)this + 29));
        }
      }
      else
      {
        if (*(unsigned char *)(*((void *)this + 13) + 8)) {
          (*(void (**)(void, uint64_t))(**((void **)this + 20) + 200))(*((void *)this + 20), 1);
        }
        bzero(buf, 0x2E0uLL);
        ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)v34);
        memset(&v34[592], 0, 96);
        __int16 v35 = 257;
        int v36 = 0;
        __int16 v37 = 256;
        char v38 = 1;
        (*(void (**)(void))(**((void **)this + 20) + 672))();
        LODWORD(v30) = 1;
        char v9 = (*(uint64_t (**)(void))(**((void **)this + 20) + 400))(*((void *)this + 20));
        if (*(unsigned char *)(*((void *)this + 13) + 8)) {
          int v10 = (*(uint64_t (**)(void))(**((void **)this + 20) + 560))(*((void *)this + 20));
        }
        else {
          int v10 = (*(uint64_t (**)(void, void))(**((void **)this + 20) + 128))(*((void *)this + 20), v9 & 1);
        }
        HIDWORD(v30) = v10;
        (*(void (**)(void, _DWORD *))(**((void **)this + 20) + 392))(*((void *)this + 20), v29);
        memset(&__p, 0, sizeof(__p));
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&__p, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v31;
        }
        if (*(unsigned char *)(*((void *)this + 13) + 8))
        {
          uint64_t v17 = *v8;
          if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v32.__r_.__value_.__l.__data_) = 0;
            _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#I Lazuli stack. No baseband status update required", (uint8_t *)&v32, 2u);
          }
          if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = v31.__r_.__value_.__l.__size_;
          }
          memset(&v32, 0, sizeof(v32));
          uint64_t v19 = &v32;
          std::string::basic_string[abi:ne180100]((uint64_t)&v32, size + 7);
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v19 = (std::string *)v32.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v20 = &v31;
            }
            else {
              unint64_t v20 = (std::string *)v31.__r_.__value_.__r.__words[0];
            }
            memmove(v19, v20, size);
          }
          strcpy((char *)v19 + size, "_lazuli");
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v32;
        }
        (*(void (**)(uint64_t, std::string *, unsigned char *))(*(void *)v6 + 256))(v6, &__p, buf);
        *((_DWORD *)this + 62) = 1;
        (*(void (**)(void, void))(**((void **)this + 20) + 200))(*((void *)this + 20), 0);
        unint64_t v21 = *v8;
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(v32.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
          _os_log_impl(&dword_223AF3000, v21, OS_LOG_TYPE_DEFAULT, "#I initializeImsClient: Sent Registration request for PersonalityID: %s", (uint8_t *)&v32, 0xCu);
        }
        sd::IMSSubscriberController::startImsRegStatusReportingTimer(this);
        (*(void (**)(std::string *__return_ptr, sd::IMSSubscriberController *))(*(void *)this + 72))(&v32, this);
        uint64_t v23 = (*(uint64_t (**)(std::string::size_type))(*(void *)v32.__r_.__value_.__l.__data_ + 224))(v32.__r_.__value_.__r.__words[0]);
        if (v32.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
        }
        (*(void (**)(sd::IMSSubscriberController *, uint64_t))(*(void *)this + 640))(this, v23);
        v32.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void))(**((void **)this + 20) + 384))(*((void *)this + 20));
        v32.__r_.__value_.__l.__size_ = v24;
        sd::IMSSubscriberController::printIRStatus((uint64_t)this, (unsigned int *)&v32, (uint64_t)"initializeImsClient: ");
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        ims::StackConfig::~StackConfig((void **)buf);
      }
      *(void *)long long buf = &v26;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    }
    else
    {
      int v11 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v12 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v12 = v31.__r_.__value_.__l.__size_;
        }
        uint64_t v13 = &v31;
        if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v13 = (std::string *)v31.__r_.__value_.__r.__words[0];
        }
        if (v12) {
          unsigned int v14 = (const char *)v13;
        }
        else {
          unsigned int v14 = "<invalid>";
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I initializeImsClient: Client not valid for PersonalityID: %s", buf, 0xCu);
      }
      (*(void (**)(void, _DWORD *))(**((void **)this + 20) + 392))(*((void *)this + 20), v29);
      (*(void (**)(sd::IMSSubscriberController *, _DWORD *, void))(*(void *)this + 224))(this, v29, 0);
    }
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_223B2FA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char *a31)
{
  a31 = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberController::updateImsClientNetworkServices_sync(sd::IMSSubscriberController *this, int a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  int v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  uint64_t v27 = (*(uint64_t (**)(void))(**((void **)this + 20) + 384))();
  uint64_t v28 = v6;
  if ((*(uint64_t (**)(void))(**((void **)this + 20) + 400))()) {
    int v7 = 18;
  }
  else {
    int v7 = (*(uint64_t (**)(void))(**((void **)this + 20) + 512))(*((void *)this + 20));
  }
  HIDWORD(v27) = v7;
  uint64_t v8 = *((void *)this + 27);
  if (v8)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    memset(v19, 0, sizeof(v19));
    uint64_t v26 = 0x10100000001;
    uint64_t v9 = *((void *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(buf, "updateImsClientNetworkServices");
    (*(void (**)(uint64_t, _OWORD *, uint8_t *, void))(*(void *)v9 + 680))(v9, v19, buf, 0);
    if (v30 < 0)
    {
      operator delete(*(void **)buf);
      if (!a2) {
        goto LABEL_14;
      }
    }
    else if (!a2)
    {
LABEL_14:
      if ((*(unsigned int (**)(sd::IMSSubscriberController *))(*(void *)this + 608))(this)
        && ((*(uint64_t (**)(void))(**((void **)this + 20) + 400))(*((void *)this + 20)) & 1) != 0
        && (int v13 = DWORD2(v20)) != 0)
      {
        unsigned int v14 = *v5;
        BOOL v15 = os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT);
        uint64_t v11 = 0;
        if (v15)
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v13;
          _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#I updateImsClientNetworkServices: On a CS call and in iWLan mode. Don't update network services to %u", buf, 8u);
          uint64_t v11 = 0;
        }
      }
      else
      {
        if (DWORD2(v20))
        {
          (*(void (**)(sd::IMSSubscriberController *, const char *, void))(*(void *)this + 320))(this, "start Registration", 0);
          LODWORD(v28) = 1;
          uint64_t v16 = (sd *)DWORD2(v20);
        }
        else
        {
          uint64_t v16 = 0;
          LODWORD(v28) = 0;
        }
        HIDWORD(v28) = sd::ipTelephonyServiceMaskToImsServiceMask(v16);
        (*(void (**)(void, uint64_t *))(**((void **)this + 20) + 392))(*((void *)this + 20), &v27);
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v8 + 328))(v8, v19);
        uint64_t v17 = *v5;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = DWORD2(v20);
          _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#I updateImsClientNetworkServices: Sent IMS Network Services Update request (services=%u)", buf, 8u);
        }
        if ((*(unsigned int (**)(void))(**((void **)this + 20) + 496))(*((void *)this + 20))) {
          sd::IMSSubscriberController::startImsRegStatusReportingTimer(this);
        }
        sd::IMSSubscriberController::printIRStatus((uint64_t)this, (unsigned int *)&v27, (uint64_t)"updateImsClientNetworkServices: ");
        uint64_t v11 = 1;
      }
      ims::NetworkServices::~NetworkServices((void **)v19);
      return v11;
    }
    DWORD2(v20) = 0;
    std::string::size_type v12 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I updateImsClientNetworkServices: IMS Network Services revoked", buf, 2u);
    }
    goto LABEL_14;
  }
  int v10 = *v5;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v19[0]) = 0;
    _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#I updateImsClientNetworkServices: Client not valid", (uint8_t *)v19, 2u);
  }
  (*(void (**)(sd::IMSSubscriberController *, const char *, void))(*(void *)this + 320))(this, "Invalid IMS client", 0);
  (*(void (**)(sd::IMSSubscriberController *, const char *))(*(void *)this + 336))(this, "Invalid IMS client");
  (*(void (**)(void, uint64_t *))(**((void **)this + 20) + 392))(*((void *)this + 20), &v27);
  LODWORD(v19[0]) = 0;
  DWORD1(v19[0]) = HIDWORD(v27);
  *((void *)&v19[0] + 1) = 0;
  (*(void (**)(sd::IMSSubscriberController *, _OWORD *, void))(*(void *)this + 224))(this, v19, 0);
  return 0;
}

void sub_223B300B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sd::IMSSubscriberController::deinitializeImsClient_sync(sd::IMSSubscriberController *this, uint64_t a2)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  int v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  uint64_t v6 = v5;
  int v7 = *((_DWORD *)this + 62);
  if (v7 != 3)
  {
    if (!v7)
    {
      uint64_t v8 = *v5;
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I deinitializeImsClient: client already reset, refreshing state", buf, 2u);
      }
      sd::IMSSubscriberController::resetNetworkAndNotifications(this, 1);
      return;
    }
    goto LABEL_7;
  }
  if (a2)
  {
LABEL_7:
    uint64_t v9 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = (*(uint64_t (**)(void))(**((void **)this + 20) + 104))(*((void *)this + 20)) - 1;
      if (v10 > 2) {
        uint64_t v11 = "Deregistered (Idle)";
      }
      else {
        uint64_t v11 = (&off_2646CF6C0)[v10];
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I deinitializeImsClient: Current IMS registration state is %s", buf, 0xCu);
    }
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)long long buf = 0u;
    uint64_t v44 = 0x10100000001;
    uint64_t v13 = *((void *)this + 20);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    (*(void (**)(uint64_t, uint8_t *, void **, void))(*(void *)v13 + 680))(v13, buf, &__p, 0);
    if (v24 < 0) {
      operator delete(__p);
    }
    unsigned int v14 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = DWORD2(v38);
      _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#I deinitializeImsClient: Resetting IMS client - printing updated network services %u", (uint8_t *)&__p, 8u);
    }
    if (*((unsigned char *)this + 301))
    {
      BOOL v15 = *v6;
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I deinitializeImsClient: Reset call based pending proxy update flag since updated proxy list will be used in an initial register after reset", (uint8_t *)&__p, 2u);
      }
      *((unsigned char *)this + 301) = 0;
    }
    if (*((unsigned char *)this + 302))
    {
      uint64_t v16 = *v6;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I deinitializeImsClient: Reset context based pending proxy update flag since updated proxy list will be used in an initial register after reset", (uint8_t *)&__p, 2u);
      }
      *((unsigned char *)this + 302) = 0;
    }
    uint64_t v17 = (*(uint64_t (**)(void))(**((void **)this + 20) + 384))(*((void *)this + 20));
    LODWORD(__p) = 0;
    HIDWORD(__p) = HIDWORD(v17);
    uint64_t v23 = 0;
    sd::IMSSubscriberController::handleImsRegistrationStatusUpdate((uint64_t)this, (unsigned int *)&__p);
    uint64_t v18 = *((void *)this + 27);
    if (v18
      && (*(unsigned int (**)(void, uint64_t))(**((void **)this + 20) + 752))(*((void *)this + 20), 11))
    {
      *((_DWORD *)this + 62) = 3;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 272))(v18, a2);
    }
    uint64_t v19 = *((void *)this + 20);
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 384))(v19);
    LODWORD(__p) = 0;
    HIDWORD(__p) = HIDWORD(v20);
    uint64_t v23 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v19 + 392))(v19, &__p);
    std::string __p = (void *)(*(uint64_t (**)(void))(**((void **)this + 20) + 384))(*((void *)this + 20));
    uint64_t v23 = v21;
    sd::IMSSubscriberController::printIRStatus((uint64_t)this, (unsigned int *)&__p, (uint64_t)"deinitializeImsClient");
    ims::NetworkServices::~NetworkServices((void **)buf);
    return;
  }
  std::string::size_type v12 = *v5;
  if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I deinitializeImsClient: Already attempting to deinitialize IMS client", buf, 2u);
  }
}

void sub_223B305F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

void non-virtual thunk to'sd::IMSSubscriberController::deinitializeImsClient_sync(sd::IMSSubscriberController *this, uint64_t a2)
{
}

void sd::IMSSubscriberController::evaluateImsFeature_sync(sd::IMSSubscriberController *this, char a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v4 = (uint64_t **)((char *)this + 160);
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 160))(&v49);
  int v5 = *(_DWORD *)v49;
  int v6 = *(_DWORD *)v49 == 2;
  int v7 = *(unsigned __int8 *)(v49 + 4);
  uint64_t v8 = (*(uint64_t (**)(void))(**v4 + 72))();
  uint64_t v9 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v8);
  unsigned int v10 = v9;
  if (v7 != v6)
  {
    uint64_t v11 = *v9;
    if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v12 = "OFF";
      if (v5 == 2) {
        std::string::size_type v12 = "ON";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I IMS Feature: VoLTE feature is turned %s", buf, 0xCu);
    }
    *(unsigned char *)(v49 + 4) = v6;
    (*(void (**)(void, uint64_t **))(**((void **)this + 16) + 72))(*((void *)this + 16), v4);
    (*(void (**)(uint64_t *, BOOL))(**v4 + 416))(*v4, v5 == 2);
  }
  uint64_t v13 = v49;
  int v14 = *(_DWORD *)(v49 + 8);
  int v15 = v14 == 2;
  int v16 = *(unsigned __int8 *)(v49 + 12);
  if (v16 != v15)
  {
    uint64_t v17 = *v10;
    if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = "OFF";
      if (v5 == 2) {
        uint64_t v18 = "ON";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#I IMS Feature: VoNR feature is turned %s", buf, 0xCu);
      uint64_t v13 = v49;
    }
    *(unsigned char *)(v13 + 12) = v15;
    (*(void (**)(uint64_t *, BOOL))(**v4 + 432))(*v4, v14 == 2);
    uint64_t v13 = v49;
  }
  *(unsigned char *)(v13 + 18) = 1;
  uint64_t v48 = 0;
  (*(void (**)(uint64_t *, char *, uint64_t *))(**v4 + 280))(*v4, (char *)&v48 + 4, &v48);
  uint64_t v19 = *v10;
  if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = sd::asString();
    uint64_t v21 = sd::asString();
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v20;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v21;
    _os_log_impl(&dword_223AF3000, v19, OS_LOG_TYPE_DEFAULT, "#I IMS Feature: New IMS service masks: cell=[%s], wifi=[%s]", buf, 0x16u);
  }
  if (!(*(unsigned int (**)(void))(**v4 + 64))())
  {
    (*(void (**)(unsigned char *__return_ptr))(**v4 + 88))(buf);
    int v22 = (*(uint64_t (**)(void))(**(void **)buf + 256))(*(void *)buf);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (v22)
    {
      int v23 = *(unsigned __int8 *)(v49 + 4);
      *(unsigned char *)(v49 + 18) = v23;
      if (!v23)
      {
        if (v48)
        {
          char v24 = *v10;
          if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_223AF3000, v24, OS_LOG_TYPE_DEFAULT, "#I IMS Feature: Carrier does not allow VoWiFi without VoLTE - suppress VoWiFi", buf, 2u);
          }
          LODWORD(v48) = 0;
        }
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t *))(**v4 + 264))(*v4)) {
    int v25 = *((void *)this + 29) != 0;
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = v49;
  if (*(unsigned __int8 *)(v49 + 21) != v25 || (a2 & 1) != 0)
  {
    int v37 = v48;
    *(_DWORD *)(v49 + 24) = HIDWORD(v48);
    *(_DWORD *)(v26 + 28) = v37;
    long long v38 = *v10;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      long long v39 = "OFF";
      if (v25) {
        long long v39 = "ON";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v39;
      _os_log_impl(&dword_223AF3000, v38, OS_LOG_TYPE_DEFAULT, "#I IMS Feature: is turned %s", buf, 0xCu);
      uint64_t v26 = v49;
    }
    *(unsigned char *)(v26 + 21) = v25;
    (*(void (**)(unsigned char *__return_ptr))(**v4 + 160))(buf);
    sd::IMSSubscriberController::printImsFeatureState((uint64_t)this, *(uint64_t *)buf, (uint64_t)"IMS Feature: ");
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v40 = **v4;
    if (v25)
    {
      (*(void (**)(void))(v40 + 736))();
      (*(void (**)(sd::IMSSubscriberController *))(*(void *)this + 584))(this);
    }
    else
    {
      (*(void (**)(void))(v40 + 744))();
      int v41 = (*(uint64_t (**)(uint64_t *))(**v4 + 496))(*v4);
      long long v42 = *(void (**)(sd::IMSSubscriberController *, uint64_t))(*(void *)this + 136);
      if (v41)
      {
        v42(this, 1);
        (*(void (**)(sd::IMSSubscriberController *, const char *))(*(void *)this + 304))(this, "IMS Feature: disabled");
        (*(void (**)(sd::IMSSubscriberController *, uint64_t))(*(void *)this + 192))(this, 1);
        goto LABEL_61;
      }
      v42(this, 0);
    }
    goto LABEL_60;
  }
  long long v27 = *v10;
  if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    long long v28 = "OFF";
    if (v25) {
      long long v28 = "ON";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v28;
    _os_log_impl(&dword_223AF3000, v27, OS_LOG_TYPE_DEFAULT, "#I IMS Feature: already %s", buf, 0xCu);
    uint64_t v26 = v49;
  }
  sd::IMSSubscriberController::printImsFeatureState((uint64_t)this, v26, (uint64_t)"IMS Feature: ");
  int v30 = v48;
  int v29 = HIDWORD(v48);
  unsigned int v31 = *(_DWORD *)(v49 + 24);
  unsigned int v32 = *(_DWORD *)(v49 + 28);
  if (v16 != v15 || v48 != __PAIR64__(v31, v32))
  {
    char v33 = (*(uint64_t (**)(uint64_t *))(**v4 + 400))(*v4);
    BOOL v34 = v30 == v32;
    BOOL v35 = v29 != v31;
    if (v33) {
      BOOL v35 = 0;
    }
    else {
      BOOL v34 = 1;
    }
    if (v35 || !v34)
    {
      (*(void (**)(sd::IMSSubscriberController *))(*(void *)this + 584))(this);
      if ((*(unsigned int (**)(uint64_t *))(**v4 + 496))(*v4)) {
        uint64_t v36 = (*(uint64_t (**)(uint64_t *, uint64_t))(**v4 + 752))(*v4, 9);
      }
      else {
        uint64_t v36 = 0;
      }
      (*(void (**)(sd::IMSSubscriberController *, uint64_t))(*(void *)this + 136))(this, v36);
      (*(void (**)(sd::IMSSubscriberController *, const char *))(*(void *)this + 304))(this, "IMS Feature: changed");
      (*(void (**)(sd::IMSSubscriberController *, void))(*(void *)this + 184))(this, 0);
    }
    uint64_t v43 = v49;
    int v44 = v48;
    *(_DWORD *)(v49 + 24) = HIDWORD(v48);
    *(_DWORD *)(v43 + 28) = v44;
    char v45 = (*(uint64_t (**)(sd::IMSSubscriberController *))(*(void *)this + 144))(this);
    int v46 = *v10;
    BOOL v47 = os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT);
    if (v45)
    {
      if (v47)
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_223AF3000, v46, OS_LOG_TYPE_DEFAULT, "#I IMS Feature: set has changed, defer publishing state.", buf, 2u);
      }
      goto LABEL_61;
    }
    if (v47)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v46, OS_LOG_TYPE_DEFAULT, "#I IMS Feature: set has changed, publishing state.", buf, 2u);
    }
LABEL_60:
    sd::IMSSubscriberController::updateRestImsFeatureState(this);
  }
LABEL_61:
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
}

void sub_223B30FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::printImsFeatureState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  int v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a2 + 21)) {
      uint64_t v8 = "ON";
    }
    else {
      uint64_t v8 = "OFF";
    }
    int v9 = 136316930;
    uint64_t v10 = a3;
    __int16 v11 = 2080;
    std::string::size_type v12 = v8;
    __int16 v13 = 2080;
    uint64_t v14 = asString();
    __int16 v15 = 2080;
    uint64_t v16 = asString();
    __int16 v17 = 2080;
    uint64_t v18 = asStringBool();
    __int16 v19 = 2080;
    uint64_t v20 = asStringBool();
    __int16 v21 = 2080;
    uint64_t v22 = asStringBool();
    __int16 v23 = 2080;
    uint64_t v24 = asStringBool();
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I %sIMS Feature: %s, VoLTE Feature support: %s, VoNR Feature support: %s, VoWiFi Feature support: %s, VoWiFi Supported in country of origination: %s, SMS in no VoLTE mode enabled in CB: %s, SMS in no VoLTE mode supported in roaming: %s", (uint8_t *)&v9, 0x52u);
  }
}

void sd::IMSSubscriberController::suppressIMSStatusToBaseband(sd::IMSSubscriberController *this, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  int v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    int v7 = a2;
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I Suppress IMS status notification to Baseband for %s", (uint8_t *)&v6, 0xCu);
  }
  *(_WORD *)((char *)this + 307) = 0;
}

void non-virtual thunk to'sd::IMSSubscriberController::suppressIMSStatusToBaseband(sd::IMSSubscriberController *this, const char *a2)
{
}

void sd::IMSSubscriberController::suppressIMSStatusToBasebandWithConnectivityCheck(sd::IMSSubscriberController *this, const char *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  int v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  int v6 = *v5;
  if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315138;
    int v9 = a2;
    _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I Suppress IMS status notification to Baseband for %s (with callback)", (uint8_t *)&v8, 0xCu);
  }
  if (*((unsigned char *)this + 307))
  {
    *(_WORD *)((char *)this + 307) = 256;
  }
  else
  {
    int v7 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I Suppress IMS status notification already has been active", (uint8_t *)&v8, 2u);
    }
  }
}

void sd::IMSSubscriberController::unsuppressIMSStatusToBaseband(sd::IMSSubscriberController *this, const char *a2, int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  int v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v6);
  int v8 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315394;
    __int16 v11 = a2;
    __int16 v12 = 2080;
    uint64_t v13 = asStringBool();
    _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I Remove the suppression of IMS status notification to Baseband for %s, handover %s", (uint8_t *)&v10, 0x16u);
  }
  if (a3 && *((unsigned char *)this + 308))
  {
    int v9 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      __int16 v11 = a2;
      _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I Skip removal of the suppression of IMS status notification to Baseband for %s (on handover)", (uint8_t *)&v10, 0xCu);
    }
  }
  else
  {
    *(_WORD *)((char *)this + 307) = 1;
  }
}

void sd::IMSSubscriberController::suppressImsPdnBringdown(sd::IMSSubscriberController *this, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  int v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    int v7 = a2;
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I Suppress IMS PDN bringdown %s", (uint8_t *)&v6, 0xCu);
  }
  *((unsigned char *)this + 309) = 1;
}

void sd::IMSSubscriberController::unsuppressImsPdnBringdown(sd::IMSSubscriberController *this, const char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  int v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    int v7 = a2;
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I Remove the suppression of IMS PDN bringdown for %s", (uint8_t *)&v6, 0xCu);
  }
  *((unsigned char *)this + 309) = 0;
}

uint64_t sd::IMSSubscriberController::shouldSendImsStatusToBaseband(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = (NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  uint64_t v4 = (sd *)(*(uint64_t (**)(void))(**((void **)this + 20) + 64))(*((void *)this + 20));
  if (v4)
  {
    int v5 = *v3;
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
    LOWORD(v13) = 0;
    uint64_t v8 = "#I Non SIM personality. No baseband status update required";
    goto LABEL_10;
  }
  if ((sd::IsDataConnectionImSupportedByDevice(v4) & 1) == 0)
  {
    int v5 = *v3;
    BOOL v10 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v10) {
      return result;
    }
    LOWORD(v13) = 0;
    uint64_t v8 = "#I Thumper-only device. No baseband status update required";
    goto LABEL_10;
  }
  if (*(unsigned char *)(*((void *)this + 13) + 8))
  {
    int v5 = *v3;
    BOOL v9 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v9) {
      return result;
    }
    LOWORD(v13) = 0;
    uint64_t v8 = "#I Lazuli stack. No baseband status update required";
    goto LABEL_10;
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 88))(&v13);
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 216))(v13);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (!v11) {
    return 1;
  }
  int v5 = *v3;
  BOOL v12 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v12)
  {
    LOWORD(v13) = 0;
    uint64_t v8 = "#I IMS status update to baseband blocked. No baseband status update required";
LABEL_10:
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v13, 2u);
    return 0;
  }
  return result;
}

void sub_223B31A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::sendImsStatusToBaseband(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  if (sd::IMSSubscriberController::shouldSendImsStatusToBaseband((sd::IMSSubscriberController *)a1))
  {
    uint64_t v6 = *(unsigned int *)(a2 + 4);
    char v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 400))(*(void *)(a1 + 160));
    bzero(v49, 0x688uLL);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 160) + 456))(v49);
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))();
    BOOL v9 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v8);
    BOOL v10 = v9;
    if ((v7 & 1) != 0 && v6 == -1)
    {
      int v11 = *v9;
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long v42 = 136315394;
        *(void *)&v42[4] = asString();
        __int16 v43 = 2080;
        uint64_t v44 = asString();
        _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I ImsStatusToBaseband: HACK: Wifi registration was attempted when data mode was %s, to reach BB, use current data mode %s instead.", v42, 0x16u);
      }
      uint64_t v6 = v51;
    }
    if (*(unsigned char *)(a1 + 307))
    {
LABEL_8:
      BOOL v12 = *v10;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = asString();
        uint64_t v14 = sd::asString();
        uint64_t v15 = asStringBool();
        *(_DWORD *)long long v42 = 136315906;
        *(void *)&v42[4] = v13;
        __int16 v43 = 2080;
        uint64_t v44 = v14;
        __int16 v45 = 2080;
        uint64_t v46 = v15;
        __int16 v47 = 1024;
        int v48 = a3;
        _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I ImsStatusToBaseband: Informing baseband of status - DataMode: %s, Services: %s, hint: %s, exp: %u", v42, 0x26u);
      }
      ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 88));
      __int16 v17 = ServiceMap;
      uint64_t v18 = *(void *)(MEMORY[0x263F03598] + 8);
      if (v18 < 0)
      {
        __int16 v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v20 = 5381;
        do
        {
          uint64_t v18 = v20;
          unsigned int v21 = *v19++;
          uint64_t v20 = (33 * v20) ^ v21;
        }
        while (v21);
      }
      std::mutex::lock(ServiceMap);
      *(void *)long long v42 = v18;
      uint64_t v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v17[1].__m_.__sig, (unint64_t *)v42);
      if (v22)
      {
        uint64_t v24 = v22[3];
        __int16 v23 = (std::__shared_weak_count *)v22[4];
        if (v23)
        {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v17);
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          char v25 = 0;
          goto LABEL_22;
        }
      }
      else
      {
        uint64_t v24 = 0;
      }
      std::mutex::unlock(v17);
      __int16 v23 = 0;
      char v25 = 1;
LABEL_22:
      uint64_t v34 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
      (*(void (**)(uint64_t, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v24 + 408))(v24, v34, v50, v6, *(unsigned int *)(a2 + 12), a3);
      if ((v25 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      goto LABEL_27;
    }
    if (*(unsigned char *)(a1 + 308))
    {
      char v26 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 160) + 752))(*(void *)(a1 + 160), 5);
      long long v27 = *v10;
      BOOL v28 = os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT);
      if ((v26 & 1) == 0)
      {
        if (v28)
        {
          uint64_t v39 = asString();
          uint64_t v40 = sd::asString();
          uint64_t v41 = asStringBool();
          *(_DWORD *)long long v42 = 136315650;
          *(void *)&v42[4] = v39;
          __int16 v43 = 2080;
          uint64_t v44 = v40;
          __int16 v45 = 2080;
          uint64_t v46 = v41;
          _os_log_impl(&dword_223AF3000, v27, OS_LOG_TYPE_DEFAULT, "#I ImsStatusToBaseband: Not informing baseband of status set but Connectivity did not restore - go ahead and report - DataMode: %s, Services: %s, hint: %s", v42, 0x20u);
        }
        goto LABEL_8;
      }
      if (v28)
      {
        uint64_t v29 = asString();
        uint64_t v30 = sd::asString();
        uint64_t v31 = asStringBool();
        *(_DWORD *)long long v42 = 136315650;
        *(void *)&v42[4] = v29;
        __int16 v43 = 2080;
        uint64_t v44 = v30;
        __int16 v45 = 2080;
        uint64_t v46 = v31;
        unsigned int v32 = "#I ImsStatusToBaseband: Not informing baseband of status (IMS connectivity restored) - DataMode: %s, Servi"
              "ces: %s, hint: %s";
        char v33 = v27;
LABEL_26:
        _os_log_impl(&dword_223AF3000, v33, OS_LOG_TYPE_DEFAULT, v32, v42, 0x20u);
      }
    }
    else
    {
      os_log_t v35 = *v10;
      if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = asString();
        uint64_t v37 = sd::asString();
        uint64_t v38 = asStringBool();
        *(_DWORD *)long long v42 = 136315650;
        *(void *)&v42[4] = v36;
        __int16 v43 = 2080;
        uint64_t v44 = v37;
        __int16 v45 = 2080;
        uint64_t v46 = v38;
        unsigned int v32 = "#I ImsStatusToBaseband: Not informing baseband of status - DataMode: %s, Services: %s, hint: %s";
        char v33 = v35;
        goto LABEL_26;
      }
    }
LABEL_27:
    sd::RuntimeInfo::~RuntimeInfo(v49);
  }
}

void sub_223B31F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sd::RuntimeInfo::~RuntimeInfo((void **)va);
  _Unwind_Resume(a1);
}

os_log_t *sd::IMSSubscriberController::sendAccessControlClass_sync(sd::IMSSubscriberController *this, int a2)
{
  int v8 = a2;
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t result = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v3);
  uint64_t v5 = *((void *)this + 27);
  if (v5)
  {
    uint64_t v6 = *result;
    if (os_log_type_enabled(*result, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v7 = 0;
      _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I AccessControlClass: reporting data to IMS client", v7, 2u);
    }
    return (os_log_t *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 336))(v5, &v8);
  }
  return result;
}

os_log_t *sd::IMSSubscriberController::sendQoSEstablished_sync(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  uint64_t result = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v8);
  uint64_t v10 = *(void *)(a1 + 216);
  if (v10)
  {
    int v11 = *result;
    if (os_log_type_enabled(*result, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = (uint64_t)(a4[1] - *a4) >> 1;
      uint64_t v13 = "remote";
      int v14 = 134218498;
      if (a3) {
        uint64_t v13 = "local";
      }
      uint64_t v15 = v12;
      __int16 v16 = 2080;
      __int16 v17 = v13;
      __int16 v18 = 1024;
      int v19 = a2;
      _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I QoS: reporting data to IMS client, have %lu %s ports, bearerId=%d", (uint8_t *)&v14, 0x1Cu);
      uint64_t v10 = *(void *)(a1 + 216);
    }
    return (os_log_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v10 + 32))(v10, a2, a3, a4);
  }
  return result;
}

os_log_t *sd::IMSSubscriberController::sendQoSRevoked_sync(sd::IMSSubscriberController *this, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t result = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  uint64_t v6 = *((void *)this + 27);
  if (v6)
  {
    char v7 = *result;
    if (os_log_type_enabled(*result, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109120;
      v8[1] = a2;
      _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I QoS: reporting QoS deleted to IMS client bearerId=%d", (uint8_t *)v8, 8u);
      uint64_t v6 = *((void *)this + 27);
    }
    return (os_log_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2);
  }
  return result;
}

os_log_t *sd::IMSSubscriberController::sendThumperEnabled_sync(sd::IMSSubscriberController *this, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t result = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  uint64_t v6 = *((void *)this + 27);
  if (v6)
  {
    char v7 = *result;
    if (os_log_type_enabled(*result, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = "Disabled";
      if (a2) {
        uint64_t v8 = "Enabled";
      }
      int v9 = 136315138;
      uint64_t v10 = v8;
      _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I ThumperFeature: reporting %s to IMS client", (uint8_t *)&v9, 0xCu);
      uint64_t v6 = *((void *)this + 27);
    }
    int v9 = 2;
    return (os_log_t *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v6 + 48))(v6, &v9, a2);
  }
  return result;
}

void sd::IMSSubscriberController::sendLazuliEnabled_sync(sd::IMSSubscriberController *this, int a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  if (*((void *)this + 27))
  {
    uint64_t v6 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      char v7 = "Disabled";
      if (a2) {
        char v7 = "Enabled";
      }
      int v8 = 136315138;
      int v9 = v7;
      _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I LazuliFeature: reporting %s to IMS client", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sd::IMSSubscriberController::sendSimInserted_sync(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  uint64_t v4 = *((void *)this + 27);
  if (v4)
  {
    uint64_t v5 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I SimInserted: reporting to IMS Client", buf, 2u);
      uint64_t v4 = *((void *)this + 27);
    }
    int v10 = 1;
    (*(void (**)(uint64_t, int *))(*(void *)v4 + 56))(v4, &v10);
    if (*((unsigned char *)this + 311))
    {
      *((unsigned char *)this + 311) = 0;
      uint64_t v6 = *((void *)this + 5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v9 = 0;
        _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I Reporting SubEnabled to IMS Client", v9, 2u);
      }
      uint64_t v7 = *((void *)this + 27);
      int v8 = 512;
      (*(void (**)(uint64_t, int *))(*(void *)v7 + 56))(v7, &v8);
    }
  }
  sd::IMSSubscriberController::abortPlmnBarringTimer(this);
}

void sd::IMSSubscriberController::sendServingNetworkChanged_sync(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  uint64_t v4 = *((void *)this + 27);
  if (v4)
  {
    uint64_t v5 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I ServingNetworkChanged: reporting to IMS Client", buf, 2u);
      uint64_t v4 = *((void *)this + 27);
    }
    int v10 = 128;
    (*(void (**)(uint64_t, int *))(*(void *)v4 + 56))(v4, &v10);
    if (*((unsigned char *)this + 311))
    {
      *((unsigned char *)this + 311) = 0;
      uint64_t v6 = *((void *)this + 5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v9 = 0;
        _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I Reporting SubEnabled to IMS Client", v9, 2u);
      }
      uint64_t v7 = *((void *)this + 27);
      int v8 = 512;
      (*(void (**)(uint64_t, int *))(*(void *)v7 + 56))(v7, &v8);
    }
  }
  sd::IMSSubscriberController::abortPlmnBarringTimer(this);
}

void sd::IMSSubscriberController::sendAirplaneModeEnabled_sync(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  *((unsigned char *)this + 310) = 1;
  uint64_t v4 = *((void *)this + 27);
  if (v4)
  {
    uint64_t v5 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I AirplaneModeEnabled: reporting to IMS Client", buf, 2u);
      uint64_t v4 = *((void *)this + 27);
    }
    int v10 = 32;
    (*(void (**)(uint64_t, int *))(*(void *)v4 + 56))(v4, &v10);
    if (*((unsigned char *)this + 311))
    {
      *((unsigned char *)this + 311) = 0;
      uint64_t v6 = *((void *)this + 5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v9 = 0;
        _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I Reporting SubEnabled to IMS Client", v9, 2u);
      }
      uint64_t v7 = *((void *)this + 27);
      int v8 = 512;
      (*(void (**)(uint64_t, int *))(*(void *)v7 + 56))(v7, &v8);
    }
  }
  sd::IMSSubscriberController::abortPlmnBarringTimer(this);
}

void sd::IMSSubscriberController::sendAirplaneModeDisabled_sync(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  *((unsigned char *)this + 310) = 0;
  uint64_t v4 = *((void *)this + 27);
  if (v4)
  {
    uint64_t v5 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I AirplaneModeDisabled: reporting to IMS Client", buf, 2u);
      uint64_t v4 = *((void *)this + 27);
    }
    int v7 = 64;
    (*(void (**)(uint64_t, int *))(*(void *)v4 + 56))(v4, &v7);
  }
  uint64_t v6 = *((void *)this + 29);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 144))(v6);
  }
  sd::IMSSubscriberController::onImsRegMaskUp((void **)this, (uint64_t)"AirplaneModeDisabled", 16);
}

os_log_t *sd::IMSSubscriberController::sendKeepAliveWakeup_sync(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t result = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  *((unsigned char *)this + 310) = 0;
  uint64_t v4 = *((void *)this + 27);
  if (v4)
  {
    uint64_t v5 = *result;
    if (os_log_type_enabled(*result, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I KeepAlive: reporting wakeup event to IMS Client", buf, 2u);
      uint64_t v4 = *((void *)this + 27);
    }
    int v6 = 4096;
    return (os_log_t *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v4 + 56))(v4, &v6);
  }
  return result;
}

uint64_t sd::IMSSubscriberController::getCurrentDataMode(sd::IMSSubscriberController *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 20) + 512))();
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::getCurrentDataMode(sd::IMSSubscriberController *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 11) + 512))();
}

uint64_t sd::IMSSubscriberController::handleDcnAttempt_sync(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (void *)((char *)this + 160);
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v4 = (NSObject **)(*(uint64_t (**)(void, uint64_t))(*(void *)*(v2 - 10) + 16))(*(v2 - 10), v3);
  if ((*(unsigned int (**)(void))(*(void *)*v2 + 744))())
  {
    (*(void (**)(void))(*(void *)*v2 + 336))(*v2);
    if (v5 == 1)
    {
      int v6 = *v4;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v10[0]) = 0;
        _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I DcnAttempt: Forcing IMS client down", (uint8_t *)v10, 2u);
      }
      *((unsigned char *)this + 292) = 0;
      *((_DWORD *)this + 74) = 16;
      int v7 = (capabilities::ct *)(*(uint64_t (**)(sd::IMSSubscriberController *, uint64_t))(*(void *)this
                                                                                                 + 184))(this, 1);
      if (capabilities::ct::requiresIMSStatusUpdateInCSFB(v7))
      {
        uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 20) + 384))(*((void *)this + 20));
        v10[0] = 0;
        v10[1] = HIDWORD(v8);
        uint64_t v11 = 0;
        (*(void (**)(sd::IMSSubscriberController *, _DWORD *, void))(*(void *)this + 224))(this, v10, 0);
      }
    }
  }
  return (*(uint64_t (**)(void, void *, uint64_t, uint64_t))(**((void **)this + 16) + 56))(*((void *)this + 16), v2, 1, 1);
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::handleDcnAttempt_sync(sd::IMSSubscriberController *this)
{
  return sd::IMSSubscriberController::handleDcnAttempt_sync((sd::IMSSubscriberController *)((char *)this - 72));
}

uint64_t sd::IMSSubscriberController::handleDcnDeliveryStatus_sync(sd::IMSSubscriberController *this)
{
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 20) + 736))(*((void *)this + 20), 14))
  {
    sd::IMSSubscriberController::onImsRegMaskUp((void **)this, (uint64_t)"DcnDeliveryStatus", 14);
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 16) + 56);

  return v2();
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::handleDcnDeliveryStatus_sync(sd::IMSSubscriberController *this)
{
  return sd::IMSSubscriberController::handleDcnDeliveryStatus_sync((sd::IMSSubscriberController *)((char *)this - 72));
}

uint64_t sd::IMSSubscriberController::isIMSRegistered(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 464))();
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::isIMSRegistered(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 464))();
}

{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 88) + 464))();
}

uint64_t sd::IMSSubscriberController::getDCNHysteresisTimeoutVal(sd::IMSSubscriberController *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 88))(&v3);
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 232))(v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void sub_223B33108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::getDCNHysteresisTimeoutVal(sd::IMSSubscriberController *this)
{
  return sd::IMSSubscriberController::getDCNHysteresisTimeoutVal((sd::IMSSubscriberController *)((char *)this - 72));
}

void sd::IMSSubscriberController::getDCNPolicyName(sd::IMSSubscriberController *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 88))(&v1);
  (*(void (**)(uint64_t))(*(void *)v1 + 240))(v1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_223B331B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'sd::IMSSubscriberController::getDCNPolicyName(sd::IMSSubscriberController *this)
{
}

uint64_t sd::IMSSubscriberController::isDCNAllowed(sd::IMSSubscriberController *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 20) + 88))(&v3);
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 248))(v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void sub_223B33260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::isDCNAllowed(sd::IMSSubscriberController *this)
{
  return sd::IMSSubscriberController::isDCNAllowed((sd::IMSSubscriberController *)((char *)this - 72));
}

os_log_t *sd::IMSSubscriberController::handleSRModeStart_sync(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t result = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  uint64_t v4 = *((void *)this + 27);
  if (v4 && !*((unsigned char *)this + 282))
  {
    int v5 = *result;
    if (os_log_type_enabled(*result, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I Reporting SRMode start to IMS Client", v6, 2u);
      uint64_t v4 = *((void *)this + 27);
    }
    uint64_t result = (os_log_t *)(*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 64))(v4, 0);
  }
  *((unsigned char *)this + 282) = 1;
  return result;
}

NSObject **sd::IMSSubscriberController::handleSRModeEnd_sync(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t result = (NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  if (*((void *)this + 27))
  {
    if (*((unsigned char *)this + 282))
    {
      uint64_t v4 = result;
      uint64_t result = (NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 20) + 752))(*((void *)this + 20), 5);
      if (result)
      {
        int v5 = *v4;
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int v6 = 0;
          _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I Reporting SRMode end to IMS Client", v6, 2u);
        }
        uint64_t result = (NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 27) + 64))(*((void *)this + 27), 1);
      }
    }
  }
  *((unsigned char *)this + 282) = 0;
  return result;
}

uint64_t sd::IMSSubscriberController::handleConnectivityUp_sync(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  uint64_t v4 = *((void *)this + 27);
  if (v4 && !*((unsigned char *)this + 282))
  {
    int v5 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I Reporting connectivity up to IMS Client", buf, 2u);
      uint64_t v4 = *((void *)this + 27);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64))(v4, 1);
    if (*((unsigned char *)this + 311))
    {
      *((unsigned char *)this + 311) = 0;
      int v6 = *((void *)this + 5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v10 = 0;
        _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I Reporting SubEnabled to IMS Client", v10, 2u);
      }
      uint64_t v7 = *((void *)this + 27);
      int v9 = 512;
      (*(void (**)(uint64_t, int *))(*(void *)v7 + 56))(v7, &v9);
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 20) + 736))(*((void *)this + 20), 5);
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::handleConnectivityUp_sync(sd::IMSSubscriberController *this)
{
  return sd::IMSSubscriberController::handleConnectivityUp_sync((sd::IMSSubscriberController *)((char *)this - 48));
}

uint64_t sd::IMSSubscriberController::handleConnectivityDown_sync(sd::IMSSubscriberController *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  uint64_t v4 = *((void *)this + 27);
  if (v4)
  {
    int v5 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I Reporting connectivity down to IMS Client", buf, 2u);
      uint64_t v4 = *((void *)this + 27);
    }
    (*(void (**)(uint64_t, void))(*(void *)v4 + 64))(v4, 0);
    if ((*(unsigned int (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20)) == 1) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 1;
    }
    if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 18) + 240))(*((void *)this + 18), v6))
    {
      *((unsigned char *)this + 311) = 1;
      uint64_t v7 = *((void *)this + 5);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I Reporting SubDisabled to IMS Client", v11, 2u);
      }
      uint64_t v8 = *((void *)this + 27);
      int v10 = 256;
      (*(void (**)(uint64_t, int *))(*(void *)v8 + 56))(v8, &v10);
    }
  }
  *((unsigned char *)this + 282) = 0;
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 20) + 744))(*((void *)this + 20), 5);
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::handleConnectivityDown_sync(sd::IMSSubscriberController *this)
{
  return sd::IMSSubscriberController::handleConnectivityDown_sync((sd::IMSSubscriberController *)((char *)this - 48));
}

void non-virtual thunk to'sd::IMSSubscriberController::handleImsRegMaskUp_sync(uint64_t a1, uint64_t a2, int a3)
{
}

void non-virtual thunk to'sd::IMSSubscriberController::handleImsRegMaskDown_sync(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sd::IMSSubscriberController::handleImsPdpActive_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 232))
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
    uint64_t v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v6);
    uint64_t v8 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 160) + 56))(__p);
      unint64_t v9 = v22;
      if ((v22 & 0x80u) == 0)
      {
        int v10 = __p;
      }
      else
      {
        unint64_t v9 = (unint64_t)__p[1];
        int v10 = (void **)__p[0];
      }
      uint64_t v11 = v9 ? (char *)v10 : "<invalid>";
      uint64_t v12 = asStringBool();
      uint64_t v13 = asString();
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v11;
      __int16 v24 = 2080;
      uint64_t v25 = v12;
      __int16 v26 = 2080;
      uint64_t v27 = v13;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I ImsPdpActive: active for %s: iWLan: %s, transportType: %s", buf, 0x20u);
      if ((char)v22 < 0) {
        operator delete(__p[0]);
      }
    }
    sd::IMSSubscriberController::updateIWLanMode_sync(a1, a2, a3);
    if (a2 && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 608))(a1))
    {
      int v14 = *v7;
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#I ImsPdpActive: On a CS call. Don't initiate register", buf, 2u);
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 744))(*(void *)(a1 + 160), 13);
    }
    if (!*(unsigned char *)(*(void *)(a1 + 104) + 8))
    {
      unint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 400))(*(void *)(a1 + 160));
      uint64_t v16 = *(void *)(a1 + 144);
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 56))(buf);
      (*(void (**)(uint64_t, unsigned char *, void, uint64_t, unint64_t, unint64_t))(*(void *)v16 + 96))(v16, buf, 0, 1, v15 & 1, HIDWORD(v15));
      if (SHIBYTE(v26) < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v17 = *(void *)(a1 + 144);
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 56))(buf);
      (*(void (**)(uint64_t, unsigned char *, unint64_t, unint64_t))(*(void *)v17 + 112))(v17, buf, v15 & 1, HIDWORD(v15));
      if (SHIBYTE(v26) < 0) {
        operator delete(*(void **)buf);
      }
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 736))(*(void *)(a1 + 160), 9);
    if (*(unsigned char *)(*(void *)(a1 + 104) + 8)
      && ((*(uint64_t (**)(void))(**(void **)(a1 + 160) + 400))(*(void *)(a1 + 160)) & 1) != 0)
    {
      uint64_t v20 = *v7;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_223AF3000, v20, OS_LOG_TYPE_DEFAULT, "#I ImsPdpActive: Lazuli mode. Country Of Origination not required", buf, 2u);
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 216))(*(void *)(a1 + 160), 1);
      sd::IMSSubscriberController::onImsRegMaskUp((void **)a1, (uint64_t)"ImsPdpActive", 9);
    }
    else if ((*(uint64_t (**)(void))(**(void **)(a1 + 160) + 400))(*(void *)(a1 + 160)))
    {
      uint64_t v19 = *(void *)(a1 + 128);
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 160) + 56))(buf);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v19 + 48))(v19, buf);
      if (SHIBYTE(v26) < 0) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      __int16 v18 = *v7;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_223AF3000, v18, OS_LOG_TYPE_DEFAULT, "#I ImsPdpActive: Not in iWLAN mode. Country Of Origination not required", buf, 2u);
      }
      sd::IMSSubscriberController::onImsRegMaskUp((void **)a1, (uint64_t)"ImsPdpActive", 9);
    }
  }
}

void sub_223B33E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sd::IMSSubscriberController::updateIWLanMode_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 400))(*(void *)(a1 + 160));
  BOOL v7 = (v6 & 1) == a2 && HIDWORD(v6) == a3;
  uint64_t v8 = !v7;
  if (!v7)
  {
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 160) + 408))(*(void *)(a1 + 160), a2, a3);
    uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
    int v10 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 136315906;
      uint64_t v13 = asStringBool();
      __int16 v14 = 2080;
      uint64_t v15 = asString();
      __int16 v16 = 2080;
      uint64_t v17 = asStringBool();
      __int16 v18 = 2080;
      uint64_t v19 = asString();
      _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#I IWLAN mode updated (IwlanMode: %s, transport: %s) -> (%s, %s)", (uint8_t *)&v12, 0x2Au);
    }
  }
  return v8;
}

void non-virtual thunk to'sd::IMSSubscriberController::handleImsPdpActive_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sd::IMSSubscriberController::handleImsPdpInactive_sync(uint64_t this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*(void *)(this + 232))
  {
    uint64_t v1 = this;
    uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(this + 160) + 72))(*(void *)(this + 160));
    uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 80) + 16))(*(void *)(v1 + 80), v2);
    uint64_t v4 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I ImsPdpInactive: Processing PDP deactivated", __p, 2u);
    }
    sd::IMSSubscriberController::updateIWLanMode_sync(v1, 0, 0);
    if (!*(unsigned char *)(*(void *)(v1 + 104) + 8))
    {
      unint64_t v5 = (*(uint64_t (**)(void))(**(void **)(v1 + 160) + 400))(*(void *)(v1 + 160));
      uint64_t v6 = *(void *)(v1 + 144);
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(v1 + 160) + 56))(__p);
      (*(void (**)(uint64_t, unsigned char *, void, void, unint64_t, unint64_t))(*(void *)v6 + 96))(v6, __p, 0, 0, v5 & 1, HIDWORD(v5));
      if (v15 < 0) {
        operator delete(*(void **)__p);
      }
      uint64_t v7 = *(void *)(v1 + 144);
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(v1 + 160) + 56))(__p);
      (*(void (**)(uint64_t, unsigned char *, unint64_t, unint64_t))(*(void *)v7 + 112))(v7, __p, v5 & 1, HIDWORD(v5));
      if (v15 < 0) {
        operator delete(*(void **)__p);
      }
    }
    sd::IMSSubscriberController::abortImsRegStatusReportingTimer((sd::IMSSubscriberController *)v1);
    sd::IMSSubscriberController::abortImsEstablishmentTimer((sd::IMSSubscriberController *)v1);
    uint64_t v8 = *(void *)(v1 + 192);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 80))(v8);
    }
    *(_WORD *)(v1 + 305) = 0;
    (*(void (**)(void, uint64_t))(**(void **)(v1 + 160) + 744))(*(void *)(v1 + 160), 9);
    sd::IMSSubscriberController::onImsRegMaskDown(v1, (uint64_t)"ImsPdpInactive", 9, 1);
    uint64_t v9 = *v3;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void))(**(void **)(v1 + 160) + 224))(*(void *)(v1 + 160));
      uint64_t v10 = asStringBool();
      uint64_t v11 = asStringBool();
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = v10;
      __int16 v13 = 2080;
      uint64_t v14 = v11;
      _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I ImsPdpInactive: fCountrySetFlag set from %s to %s", __p, 0x16u);
    }
    (*(void (**)(void, void))(**(void **)(v1 + 160) + 216))(*(void *)(v1 + 160), 0);
    this = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 144))(v1);
    if (this)
    {
      sd::IMSSubscriberController::updateRestImsFeatureState((sd::IMSSubscriberController *)v1);
      return (*(uint64_t (**)(uint64_t, void))(*(void *)v1 + 136))(v1, 0);
    }
  }
  return this;
}

void sub_223B34428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::handleImsPdpInactive_sync(sd::IMSSubscriberController *this)
{
  return sd::IMSSubscriberController::handleImsPdpInactive_sync((uint64_t)this - 48);
}

uint64_t sd::IMSSubscriberController::isQualifiedToBringUpImsPdn(sd::IMSSubscriberController *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 20) + 768))(*((void *)this + 20));
  if (result) {
    return !*((unsigned char *)this + 303) && *(void *)(*((void *)this + 34) + 80) == 0;
  }
  return result;
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::isQualifiedToBringUpImsPdn(sd::IMSSubscriberController *this)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 14) + 768))(*((void *)this + 14));
  if (result) {
    return !*((unsigned char *)this + 255) && *(void *)(*((void *)this + 28) + 80) == 0;
  }
  return result;
}

void sd::IMSSubscriberController::handleMobikeOrHandover_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 72))(*(void *)(a1 + 160));
  uint64_t v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), v6);
  uint64_t v8 = v7;
  if (a3 == 1 && (a2 & 1) == 0)
  {
    uint64_t v9 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl(&dword_223AF3000, v9, OS_LOG_TYPE_ERROR, "MobikeOrHandover: Cannot accept transport: kDataContextIWLAN for context: kDataContextBB", (uint8_t *)__p, 2u);
    }
    return;
  }
  char v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 400))(*(void *)(a1 + 160));
  if (!sd::IMSSubscriberController::updateIWLanMode_sync(a1, a2, a3)) {
    return;
  }
  if ((((v10 & 1) == 0) ^ a2))
  {
    if (a2)
    {
      sd::IMSSubscriberController::handleMobike_sync((sd::IMSSubscriberController *)a1);
    }
    return;
  }
  unint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 400))(*(void *)(a1 + 160));
  uint64_t v12 = *(void *)(a1 + 144);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 160) + 56))(__p);
  (*(void (**)(void))(**(void **)(a1 + 160) + 336))();
  (*(void (**)(uint64_t, void **, BOOL, uint64_t, unint64_t, unint64_t))(*(void *)v12 + 96))(v12, __p, v13 == 1, 1, v11 & 1, HIDWORD(v11));
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = *(void *)(a1 + 144);
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 160) + 56))(__p);
  (*(void (**)(uint64_t, void **, unint64_t, unint64_t))(*(void *)v14 + 112))(v14, __p, v11 & 1, HIDWORD(v11));
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (a2) {
      goto LABEL_15;
    }
  }
  else if (a2)
  {
LABEL_15:
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 608))(a1))
    {
      char v15 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I MobikeOrHandover: On a CS call. Don't allow IMS registration", (uint8_t *)__p, 2u);
      }
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 744))(*(void *)(a1 + 160), 13);
    }
    uint64_t v16 = *(void *)(a1 + 128);
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 160) + 56))(__p);
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 48))(v16, __p);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(void))(**(void **)(a1 + 160) + 336))(*(void *)(a1 + 160));
    if (v17 == 1) {
      (*(void (**)(uint64_t, void))(*(void *)a1 + 424))(a1, 0);
    }
    return;
  }
  (*(void (**)(void))(**(void **)(a1 + 160) + 336))(*(void *)(a1 + 160));
  if (v18 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 424))(a1, v18);
  }
  else if ((*(unsigned int (**)(void))(**(void **)(a1 + 160) + 776))(*(void *)(a1 + 160)))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 176))(a1, 1);
  }
}

void sub_223B34A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberController::handleMobike_sync(sd::IMSSubscriberController *this)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  (*(void (**)(sd::IMSSubscriberController *))(*(void *)this + 264))(this);
  unint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 400))();
  char v3 = v2;
  unint64_t v4 = HIDWORD(v2);
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v6 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string __p = 136315138;
    *(void *)&__p[4] = asString();
    _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I Mobike: New transport: %s", __p, 0xCu);
  }
  uint64_t v7 = *((void *)this + 18);
  (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 20) + 56))(__p);
  (*(void (**)(void))(**((void **)this + 20) + 336))(*((void *)this + 20));
  (*(void (**)(uint64_t, unsigned char *, BOOL, uint64_t, void, unint64_t))(*(void *)v7 + 96))(v7, __p, v8 == 1, 1, v3 & 1, v4);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v9 = *((void *)this + 18);
  (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 20) + 56))(__p);
  (*(void (**)(uint64_t, unsigned char *, void, unint64_t))(*(void *)v9 + 112))(v9, __p, v3 & 1, v4);
  if (v11 < 0) {
    operator delete(*(void **)__p);
  }
}

void sub_223B34D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'sd::IMSSubscriberController::handleMobikeOrHandover_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sd::IMSSubscriberController::checkAndSwitchToCSCallMode(sd::IMSSubscriberController *this)
{
  unint64_t v2 = (char *)this + 160;
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  unint64_t v4 = (NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)v2 - 10) + 16))(*((void *)v2 - 10), v3);
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v2 + 488))();
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(sd::IMSSubscriberController *))(*(void *)this + 592))(this);
    if ((result & 1) == 0)
    {
      uint64_t v6 = *v4;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v8) = 0;
        _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I Switching transports to CS immediately as connection is unavailable", (uint8_t *)&v8, 2u);
      }
      uint64_t v7 = *((void *)this + 16);
      long long v8 = xmmword_223B4CDA0;
      return (*(uint64_t (**)(uint64_t, char *, long long *, void))(*(void *)v7 + 32))(v7, v2, &v8, 0);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::checkAndSwitchToCSCallMode(sd::IMSSubscriberController *this)
{
  return sd::IMSSubscriberController::checkAndSwitchToCSCallMode((sd::IMSSubscriberController *)((char *)this - 48));
}

uint64_t sd::IMSSubscriberController::resetServiceMasks(sd::IMSSubscriberController *this)
{
  v3[1] = *MEMORY[0x263EF8340];
  v3[0] = 0;
  (*(void (**)(void, uint64_t, void *))(**((void **)this + 20) + 136))(*((void *)this + 20), 2, v3);
  uint64_t result = *((void *)this + 29);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 112))(result);
  }
  return result;
}

uint64_t sd::IMSSubscriberController::resetCallMode(sd::IMSSubscriberController *this)
{
  uint64_t v1 = *((void *)this + 16);
  unint64_t v2 = (char *)this + 160;
  v5[0] = (*(uint64_t (**)(void))(**((void **)this + 20) + 336))(*((void *)this + 20));
  v5[1] = v3;
  return (*(uint64_t (**)(uint64_t, char *, void *, void))(*(void *)v1 + 32))(v1, v2, v5, 0);
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::resetCallMode(sd::IMSSubscriberController *this)
{
  return sd::IMSSubscriberController::resetCallMode((sd::IMSSubscriberController *)((char *)this - 48));
}

uint64_t sd::IMSSubscriberController::saveAttemptedState(sd::IMSSubscriberController *this)
{
  uint64_t v1 = *((void *)this + 20);
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 512))(v1);
  v4[0] = 0;
  v4[1] = v2;
  uint64_t v5 = 0;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v1 + 392))(v1, v4);
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::saveAttemptedState(sd::IMSSubscriberController *this)
{
  uint64_t v1 = *((void *)this + 14);
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 512))(v1);
  v4[0] = 0;
  v4[1] = v2;
  uint64_t v5 = 0;
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(void *)v1 + 392))(v1, v4);
}

uint64_t sd::IMSSubscriberController::getPersonalityInfo(sd::IMSSubscriberController *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 20) + 80))();
}

uint64_t sd::IMSSubscriberController::reportPdnFailure(sd::IMSSubscriberController *this, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 384))(*((void *)this + 20));
  v6[0] = 0;
  v6[1] = HIDWORD(v4);
  uint64_t v7 = 0;
  return (*(uint64_t (**)(sd::IMSSubscriberController *, _DWORD *, void))(*(void *)this + 224))(this, v6, (a2 << 31 >> 31));
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::reportPdnFailure(sd::IMSSubscriberController *this, int a2)
{
  return sd::IMSSubscriberController::reportPdnFailure((sd::IMSSubscriberController *)((char *)this - 48), a2);
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::isCallActive(sd::IMSSubscriberController *this)
{
  return *((unsigned __int8 *)this + 232);
}

uint64_t sd::IMSSubscriberController::isOnImsCall(sd::IMSSubscriberController *this)
{
  if (!(*(unsigned int (**)(sd::IMSSubscriberController *))(*(void *)this + 592))(this)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 18);
  (*(void (**)(void **__return_ptr))(**((void **)this + 20) + 56))(__p);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 248))(v2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_223B3530C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sd::IMSSubscriberController::isICloudConfiguration(sd::IMSSubscriberController *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 18) + 264))();
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::isICloudConfiguration(sd::IMSSubscriberController *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 11) + 264))();
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::getIMSNetworkInterface_sync@<X0>(sd::IMSSubscriberController *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 22);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 88))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t sd::IMSSubscriberController::getApnName_sync@<X0>(sd::IMSSubscriberController *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 29);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 104))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t non-virtual thunk to'sd::IMSSubscriberController::getApnName_sync@<X0>(sd::IMSSubscriberController *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 22);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 104))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void sd::IMSSubscriberController::publishCallWaitingStatus(sd::IMSSubscriberController *this, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  uint64_t v6 = *((void *)this + 27);
  uint64_t v7 = *v5;
  BOOL v8 = os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = "Disabled";
      if (a2) {
        uint64_t v9 = "Enabled";
      }
      int v10 = 136315138;
      char v11 = v9;
      _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I Publishing Call Waiting status to IpTelephony. Call Waiting - %s", (uint8_t *)&v10, 0xCu);
      uint64_t v6 = *((void *)this + 27);
    }
    int v10 = 3;
    (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v6 + 48))(v6, &v10, a2);
  }
  else if (v8)
  {
    LOWORD(v10) = 0;
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I Cannot publish Call Waiting status. Invalid IMS Client", (uint8_t *)&v10, 2u);
  }
}

uint64_t sd::IMSSubscriberController::isXcapConfigUpdateNecessary(sd::IMSSubscriberController *this)
{
  if (*((unsigned char *)this + 283)) {
    return (*(uint64_t (**)(void))(**((void **)this + 20) + 520))();
  }
  else {
    return 0;
  }
}

void sd::IMSSubscriberController::sendXcapConfigInfo(sd::IMSSubscriberController *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  uint64_t v4 = v3;
  if (*((void *)this + 27))
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 20) + 688))(*((void *)this + 20));
    if (v5)
    {
      uint64_t v6 = (const void *)v5;
      uint64_t v7 = *v4;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v6;
        _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I Reporting Xcap config info =%@", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v9 = 0;
      (*(void (**)(long long *__return_ptr))(**((void **)this + 20) + 88))(&buf);
      (*(void (**)(const void **__return_ptr))(*(void *)buf + 24))(&v9);
      if (*((void *)&buf + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&buf + 1));
      }
      (*(void (**)(void, const void *, const void *))(**((void **)this + 27) + 128))(*((void *)this + 27), v6, v9);
      CFRelease(v6);
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v9);
    }
  }
  else
  {
    BOOL v8 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I Cannot configure XCAP. Invalid IMS Client", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_223B35824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sd::IMSSubscriberController::evaluateAndSendXcapConfigInfo(uint64_t this)
{
  uint64_t v1 = (unsigned char *)this;
  if (*(unsigned char *)(this + 283)
    && (this = (*(uint64_t (**)(void))(**(void **)(this + 160) + 520))(*(void *)(this + 160)),
        this))
  {
    uint64_t v2 = *(uint64_t (**)(unsigned char *))(*(void *)v1 + 352);
    return v2(v1);
  }
  else
  {
    v1[284] = 1;
  }
  return this;
}

void sd::IMSSubscriberController::updateSSPTransport(sd::IMSSubscriberController *this, int a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 283) = a2;
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = "Baseband";
    if (a2) {
      uint64_t v6 = "XCAP";
    }
    int v7 = 136315138;
    BOOL v8 = v6;
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I Transport for Supplementary Services Provisioning - %s", (uint8_t *)&v7, 0xCu);
  }
  if (*((unsigned char *)this + 284) && *((unsigned char *)this + 283))
  {
    if ((*(unsigned int (**)(void))(**((void **)this + 20) + 520))(*((void *)this + 20)))
    {
      *((unsigned char *)this + 284) = 0;
      (*(void (**)(sd::IMSSubscriberController *))(*(void *)this + 352))(this);
    }
  }
}

void sd::IMSSubscriberController::requestCallWaitingStatus(sd::IMSSubscriberController *this)
{
  if (*((_DWORD *)this + 72) == 2)
  {
    uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
    uint64_t v3 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I Failed to publish Call Waiting status as it hasn't been determined yet", v5, 2u);
    }
  }
  else
  {
    uint64_t v4 = *(void (**)(void))(*(void *)this + 344);
    v4();
  }
}

uint64_t sd::IMSSubscriberController::updateCallWaitingStatus(sd::IMSSubscriberController *this, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 72) = a2;
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = "Disabled";
    if (a2) {
      uint64_t v6 = "Enabled";
    }
    int v8 = 136315138;
    uint64_t v9 = v6;
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I Call Waiting - %s", (uint8_t *)&v8, 0xCu);
  }
  return (*(uint64_t (**)(sd::IMSSubscriberController *, uint64_t))(*(void *)this + 344))(this, a2);
}

BOOL sd::IMSSubscriberController::isBackoffExpired(sd::IMSSubscriberController *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  CSISystemElapsedTime();
  unsigned int v2 = CSIGetTimeDifference();
  uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v2;
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I timeSinceLastBackoff = %u msecs", (uint8_t *)v6, 8u);
  }
  return v2 > *((_DWORD *)this + 79);
}

void sd::IMSSubscriberController::setBackoffEventTimeAndExpiration(sd::IMSSubscriberController *this, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *((_DWORD *)this + 78) = CSISystemElapsedTime();
  *((_DWORD *)this + 79) = 1000 * a2;
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((_DWORD *)this + 79);
    v7[0] = 67109120;
    v7[1] = v6;
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I Set backoff expiration to %u msecs", (uint8_t *)v7, 8u);
  }
}

void sd::IMSSubscriberController::dumpState(sd::IMSSubscriberController *this)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 20) + 72))(*((void *)this + 20));
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 10) + 16))(*((void *)this + 10), v2);
  uint64_t v4 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (*(uint64_t (**)(sd::IMSSubscriberController *))(*(void *)this + 88))(this);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "IMSSubscriberController";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v5;
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: ----------------- %s %lu ==>> -------------------", buf, 0x16u);
    uint64_t v4 = *v3;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 20) + 56))(buf);
    uint64_t v6 = HIBYTE(v60);
    if (v60 >= 0)
    {
      uint64_t v7 = buf;
    }
    else
    {
      uint64_t v6 = *(void *)&buf[8];
      uint64_t v7 = *(const char **)buf;
    }
    if (v6) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = "<invalid>";
    }
    uint64_t v9 = *((void *)this + 27);
    if (v9)
    {
      if (*(char *)(v9 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v78, *(const std::string::value_type **)(v9 + 24), *(void *)(v9 + 32));
      }
      else {
        std::string v78 = *(std::string *)(v9 + 24);
      }
      uint64_t v10 = &v78;
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v10 = (std::string *)v78.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)char v55 = 136315394;
      *(void *)&v55[4] = v8;
      __int16 v56 = 2080;
      __int16 v57 = (const char *)v10;
      _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: Subscriber %s: fIMSClientRef initialized = %s", v55, 0x16u);
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v78.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *(_DWORD *)char v55 = 136315394;
      *(void *)&v55[4] = v8;
      __int16 v56 = 2080;
      __int16 v57 = "false";
      _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: Subscriber %s: fIMSClientRef initialized = %s", v55, 0x16u);
    }
    if (SHIBYTE(v60) < 0) {
      operator delete(*(void **)buf);
    }
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  (*(void (**)(unsigned char *__return_ptr))(**((void **)this + 20) + 88))(buf);
  uint64_t v11 = *(void *)buf;
  if (*(void *)buf)
  {
    uint64_t v12 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 224))(v11);
      LODWORD(v78.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v78.__r_.__value_.__r.__words[0]) = v13;
      _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t getImsRegStatusReportingTimeoutValue = %d", (uint8_t *)&v78, 8u);
      uint64_t v12 = *v3;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = (*(uint64_t (**)(void))(**(void **)buf + 408))(*(void *)buf);
      LODWORD(v78.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v78.__r_.__value_.__r.__words[0]) = v14;
      _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t getImsEstablishmentTimeoutValue = %d", (uint8_t *)&v78, 8u);
      uint64_t v12 = *v3;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = (*(uint64_t (**)(void))(**(void **)buf + 416))(*(void *)buf);
      LODWORD(v78.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(v78.__r_.__value_.__r.__words[0]) = v15;
      _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t getPlmnBarringTimeoutValue = %d", (uint8_t *)&v78, 8u);
    }
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v16 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fImsRegStatusReportingTimer.isPending = %s", buf, 0xCu);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v18;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fImsEstablishmentTimer.isPending = %s", buf, 0xCu);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v19;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fPlmnBarringTimer.isPending = %s", buf, 0xCu);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v20;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fShutdownSession = %s", buf, 0xCu);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v21;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fInAirplaneMode = %s", buf, 0xCu);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v22;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fSignalingReductionMode = %s", buf, 0xCu);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v23;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fOnVoiceCall = %s", buf, 0xCu);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v24;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fOnEmergencyCall = %s", buf, 0xCu);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(sd::IMSSubscriberController *))(*(void *)this + 616))(this);
    uint64_t v25 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v25;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t isOnImsCall = %s", buf, 0xCu);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v26 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v26;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fPendingImsSoftReset = %s", buf, 0xCu);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v27;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fSubDisabled = %s", buf, 0xCu);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v54 = asStringBool();
    uint64_t v53 = sd::asString();
    uint64_t v52 = asStringBool();
    uint64_t v28 = asStringBool();
    uint64_t v29 = asStringBool();
    uint64_t v30 = asStringBool();
    uint64_t v31 = asStringBool();
    uint64_t v32 = asStringBool();
    uint64_t v33 = asStringBool();
    uint64_t v34 = asStringBool();
    uint64_t v35 = asStringBool();
    *(_DWORD *)long long buf = 136317698;
    *(void *)&uint8_t buf[4] = v54;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v53;
    __int16 v60 = 2080;
    uint64_t v61 = v52;
    __int16 v62 = 2080;
    uint64_t v63 = v28;
    __int16 v64 = 2080;
    uint64_t v65 = v29;
    __int16 v66 = 2080;
    uint64_t v67 = v30;
    __int16 v68 = 2080;
    uint64_t v69 = v31;
    __int16 v70 = 2080;
    uint64_t v71 = v32;
    __int16 v72 = 2080;
    uint64_t v73 = v33;
    __int16 v74 = 2080;
    uint64_t v75 = v34;
    __int16 v76 = 2080;
    uint64_t v77 = v35;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fMaskUpDesired = %s, fMaskUpDesiredMask = %s, fPendingImsSwitchStatusNotification = %s, fPendingPcscfChangeUpdateDueToActiveCall = %s, fPendingPcscfChangeUpdateDueToContextMismatch = %s, fPendingSubscriptionChangeNotification = %s, fLimitedModeRegistrationRequested = %s, fUnprovisionedRegistrationRequested = %s, fSendImsStatusToBaseband = %s, fSendImsStatusToBasebandWithConnectivityCheck = %s, fPendingSimFilesUpdate = %s", buf, 0x70u);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v36 = asStringBool();
    uint64_t v37 = asStringBool();
    if (*((_DWORD *)this + 72) == 2) {
      uint64_t v38 = "empty";
    }
    else {
      uint64_t v38 = (const char *)asStringBool();
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v36;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v37;
    __int16 v60 = 2080;
    uint64_t v61 = (uint64_t)v38;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fIsXcapTransport = %s, fXcapTriggerConfigPushOnTransportChange = %s, fCallWaitingStatus = %s", buf, 0x20u);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int v39 = *((_DWORD *)this + 78);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v39;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fLastBackoffEventTime = %u", buf, 8u);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int v40 = *((_DWORD *)this + 79);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v40;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fBackoffExpiration = %u", buf, 8u);
    uint64_t v16 = *v3;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v41 = asStringBool();
    uint64_t v42 = asStringBool();
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v41;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v42;
    _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: \t fPCRegState.fCall = %s, fPCRegState.fSms = %s", buf, 0x16u);
  }
  uint64_t v43 = *((void *)this + 20);
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 40))(v43);
  }
  uint64_t v44 = *((void *)this + 29);
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 176))(v44);
  }
  uint64_t v45 = *((void *)this + 24);
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 112))(v45);
  }
  uint64_t v46 = *v3;
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v47 = (*(uint64_t (**)(sd::IMSSubscriberController *))(*(void *)this + 88))(this);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "IMSSubscriberController";
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v47;
    _os_log_impl(&dword_223AF3000, v46, OS_LOG_TYPE_DEFAULT, "#I 5wi.ctr:: ------------ <<== %s %lu ------------------------", buf, 0x16u);
  }
  uint64_t v48 = *((void *)this + 27);
  if (v48)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)this + 20) + 56))(&v78);
    std::string::size_type size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      unsigned int v50 = &v78;
    }
    else
    {
      std::string::size_type size = v78.__r_.__value_.__l.__size_;
      unsigned int v50 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    if (size) {
      unsigned int v51 = (char *)v50;
    }
    else {
      unsigned int v51 = "<invalid>";
    }
    std::string::basic_string[abi:ne180100]<0>(buf, v51);
    std::string::basic_string[abi:ne180100]<0>(v55, "");
    (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)v48 + 16))(v48, buf, v55);
    if (v58 < 0) {
      operator delete(*(void **)v55);
    }
    if (SHIBYTE(v60) < 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
  }
}

void sub_223B36BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sd::IMSSubscriberController::isShuttingDown(sd::IMSSubscriberController *this)
{
  return *((void *)this + 41) != 0;
}

const void **ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::vector<ImsIdentityWithState>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ImsIdentityWithState>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

uint64_t std::__split_buffer<ImsIdentityWithState>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 4;
      *(void *)(a1 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ImsIdentityWithState>,ImsIdentityWithState*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 32)
    {
      if (*(char *)(i - 9) < 0) {
        operator delete(*(void **)(i - 32));
      }
    }
  }
  return a1;
}

void ims::PrefsContainer::release(ims::PrefsContainer *this)
{
  uint64_t v2 = *(const void **)this;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 1);
  if (v3)
  {
    CFRelease(v3);
  }
}

void ims::StackConfig::~StackConfig(void **this)
{
  uint64_t v2 = *this;
  if (v2) {
    CFRelease(v2);
  }
  if (*((char *)this + 711) < 0) {
    operator delete(this[86]);
  }
  if (*((char *)this + 687) < 0) {
    operator delete(this[83]);
  }
  if (*((char *)this + 663) < 0) {
    operator delete(this[80]);
  }
  if (*((char *)this + 639) < 0) {
    operator delete(this[77]);
  }
  ims::NetworkConfig::~NetworkConfig(this + 3);
  ims::PrefsContainer::release((ims::PrefsContainer *)(this + 1));
}

ims::NetworkConfig *ims::NetworkConfig::NetworkConfig(ims::NetworkConfig *this)
{
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 64) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
  *((unsigned char *)this + 13SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((unsigned char *)this + 120) = 0;
  *((void *)this + 25) = 0;
  *((unsigned char *)this + 208) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((unsigned char *)this + 192) = 0;
  *((unsigned char *)this + 300) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((void *)this + 3SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
  *((_DWORD *)this + 7SystemDeterminationManager::handleDumpState_sync(this - 6) = 1;
  *((_WORD *)this + 154) = 257;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 37SystemDeterminationManager::handleDumpState_sync(this - 6) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 45SystemDeterminationManager::handleDumpState_sync(this - 6) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 63, "ims");
  *((_WORD *)this + 26SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
  *((unsigned char *)this + 534) = 1;
  *((_WORD *)this + 292) = 0;
  *(_OWORD *)((char *)this + 53SystemDeterminationManager::handleDumpState_sync(this - 6) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  return this;
}

void sub_223B36FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 480);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 456);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 455) < 0) {
    operator delete(*(void **)(v10 + 432));
  }
  if (*(char *)(v10 + 431) < 0) {
    operator delete(*(void **)(v10 + 408));
  }
  if (*(char *)(v10 + 407) < 0) {
    operator delete(*(void **)(v10 + 384));
  }
  if (*(char *)(v10 + 383) < 0) {
    operator delete(*(void **)(v10 + 360));
  }
  if (*(char *)(v10 + 359) < 0) {
    operator delete(*(void **)(v10 + 336));
  }
  if (*(char *)(v10 + 335) < 0) {
    operator delete(*v11);
  }
  ims::NetworkServices::~NetworkServices((void **)v10);
  _Unwind_Resume(a1);
}

void ims::NetworkConfig::~NetworkConfig(void **this)
{
  if (*((char *)this + 583) < 0) {
    operator delete(this[70]);
  }
  if (*((char *)this + 559) < 0) {
    operator delete(this[67]);
  }
  if (*((char *)this + 527) < 0) {
    operator delete(this[63]);
  }
  uint64_t v2 = this + 60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 455) < 0) {
    operator delete(this[54]);
  }
  if (*((char *)this + 431) < 0) {
    operator delete(this[51]);
  }
  if (*((char *)this + 407) < 0) {
    operator delete(this[48]);
  }
  if (*((char *)this + 383) < 0) {
    operator delete(this[45]);
  }
  if (*((char *)this + 359) < 0) {
    operator delete(this[42]);
  }
  if (*((char *)this + 335) < 0) {
    operator delete(this[39]);
  }
  ims::NetworkServices::~NetworkServices(this);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _DWORD v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_223B371F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void std::__shared_ptr_pointer<sd::IMSSubscriberController *,std::shared_ptr<sd::IMSSubscriberController> ctu::SharedSynchronizable<sd::IMSSubscriberController>::make_shared_ptr<sd::IMSSubscriberController>(sd::IMSSubscriberController*)::{lambda(sd::IMSSubscriberController *)#1},std::allocator<sd::IMSSubscriberController>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

void std::__shared_ptr_pointer<sd::IMSSubscriberController *,std::shared_ptr<sd::IMSSubscriberController> ctu::SharedSynchronizable<sd::IMSSubscriberController>::make_shared_ptr<sd::IMSSubscriberController>(sd::IMSSubscriberController*)::{lambda(sd::IMSSubscriberController *)#1},std::allocator<sd::IMSSubscriberController>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<sd::IMSSubscriberController *,std::shared_ptr<sd::IMSSubscriberController> ctu::SharedSynchronizable<sd::IMSSubscriberController>::make_shared_ptr<sd::IMSSubscriberController>(sd::IMSSubscriberController*)::{lambda(sd::IMSSubscriberController *)#1},std::allocator<sd::IMSSubscriberController>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<sd::IMSSubscriberController> ctu::SharedSynchronizable<sd::IMSSubscriberController>::make_shared_ptr<sd::IMSSubscriberController>(sd::IMSSubscriberController*)::{lambda(sd::IMSSubscriberController*)#1}::operator() const(sd::IMSSubscriberController*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D745000;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D745000;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223CBBDF0);
}

void *std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D745000;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D745000;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(sd::IMSSubscriberController **)(a1 + 8);
      if (v5) {
        sd::IMSSubscriberController::onImsRegStatusReportingTimeout(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_223B37854(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_0>,void ()(void)>::target_type()
{
}

void *std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D745080;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D745080;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223CBBDF0);
}

void *std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D745080;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D745080;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(sd::IMSSubscriberController **)(a1 + 8);
      if (v5) {
        sd::IMSSubscriberController::onImsEstablishmentTimeout(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_223B37AB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_1>,void ()(void)>::target_type()
{
}

void *std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D745100;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_26D745100;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223CBBDF0);
}

void *std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D745100;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D745100;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2>,void ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(sd::IMSSubscriberController **)(a1 + 8);
      if (v5) {
        sd::IMSSubscriberController::onPlmnBarringTimeout(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_223B37D0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2,std::allocator<sd::IMSSubscriberController::bootstrap(std::shared_ptr<sd::IMSSubscriberEventInterface> const&)::$_2>,void ()(void)>::target_type()
{
}

void std::__function::__func<sd::IMSSubscriberController::updateFullFunctionPCRegistration(sd::ImsRegistrationStatus const&)::$_0,std::allocator<sd::IMSSubscriberController::updateFullFunctionPCRegistration(sd::ImsRegistrationStatus const&)::$_0>,void ()(BOOL,BOOL)>::~__func()
{
}

__n128 std::__function::__func<sd::IMSSubscriberController::updateFullFunctionPCRegistration(sd::ImsRegistrationStatus const&)::$_0,std::allocator<sd::IMSSubscriberController::updateFullFunctionPCRegistration(sd::ImsRegistrationStatus const&)::$_0>,void ()(BOOL,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D745180;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<sd::IMSSubscriberController::updateFullFunctionPCRegistration(sd::ImsRegistrationStatus const&)::$_0,std::allocator<sd::IMSSubscriberController::updateFullFunctionPCRegistration(sd::ImsRegistrationStatus const&)::$_0>,void ()(BOOL,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D745180;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<sd::IMSSubscriberController::updateFullFunctionPCRegistration(sd::ImsRegistrationStatus const&)::$_0,std::allocator<sd::IMSSubscriberController::updateFullFunctionPCRegistration(sd::ImsRegistrationStatus const&)::$_0>,void ()(BOOL,BOOL)>::operator()(uint64_t a1, unsigned char *a2, unsigned __int8 *a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v6 = **(NSObject ***)(a1 + 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *a3;
    if (*(unsigned char *)(a1 + 16)) {
      uint64_t v8 = "Enabled";
    }
    else {
      uint64_t v8 = "Disabled";
    }
    int v9 = *(unsigned __int8 *)(a1 + 17);
    if (*a2) {
      uint64_t v10 = "Success";
    }
    else {
      uint64_t v10 = "Failure";
    }
    int v13 = 136315906;
    int v14 = v8;
    if (v9) {
      uint64_t v11 = "Enabled";
    }
    else {
      uint64_t v11 = "Disabled";
    }
    __int16 v15 = 2080;
    uint64_t v16 = v10;
    if (v7) {
      uint64_t v12 = "Success";
    }
    else {
      uint64_t v12 = "Failure";
    }
    __int16 v17 = 2080;
    uint64_t v18 = v11;
    __int16 v19 = 2080;
    uint64_t v20 = v12;
    _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I Full-Function proactive command registration - CALL: %s, Result: %s, SMS: %s, Result: %s", (uint8_t *)&v13, 0x2Au);
  }
}

uint64_t std::__function::__func<sd::IMSSubscriberController::updateFullFunctionPCRegistration(sd::ImsRegistrationStatus const&)::$_0,std::allocator<sd::IMSSubscriberController::updateFullFunctionPCRegistration(sd::ImsRegistrationStatus const&)::$_0>,void ()(BOOL,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<sd::IMSSubscriberController::updateFullFunctionPCRegistration(sd::ImsRegistrationStatus const&)::$_0,std::allocator<sd::IMSSubscriberController::updateFullFunctionPCRegistration(sd::ImsRegistrationStatus const&)::$_0>,void ()(BOOL,BOOL)>::target_type()
{
}

void *std::__function::__value_func<void ()(BOOL,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sd::DCNPolicyDefault::~DCNPolicyDefault(sd::DCNPolicyDefault *this)
{
}

void sd::DCNPolicyLegacy::~DCNPolicyLegacy(sd::DCNPolicyLegacy *this)
{
}

double sd::DCNPolicyDefault::policyName@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = 0x700000000000000;
  double result = *(double *)"Default";
  *(_OWORD *)a1 = *(_OWORD *)"Default";
  return result;
}

uint64_t sd::DCNPolicyDefault::shouldTriggerDCNOnStartup(sd::DCNPolicyDefault *this)
{
  return 0;
}

uint64_t sd::DCNPolicyDefault::shouldTriggerDCNOnECBMUpdate(sd::DCNPolicyDefault *this)
{
  return 1;
}

uint64_t sd::DCNPolicyDefault::shouldTriggerDCNOnCSCallStart(sd::DCNPolicyDefault *this)
{
  return 1;
}

uint64_t sd::DCNPolicyDefault::supportDCNDuringCall(sd::DCNPolicyDefault *this)
{
  return 1;
}

uint64_t sd::DCNPolicyDefault::shouldTriggerDCNOnCSCallEnd(sd::DCNPolicyDefault *this)
{
  return 0;
}

uint64_t sd::DCNPolicyDefault::shouldTriggerDCNOnDataModeChange(sd::DCNPolicyDefault *this)
{
  return 0;
}

uint64_t sd::DCNPolicyDefault::qualifiedServicesForDCNTrigger(sd::DCNPolicyDefault *this)
{
  return 1;
}

double sd::DCNPolicyLegacy::policyName@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = 0x600000000000000;
  double result = *(double *)"Legacy";
  *(_OWORD *)a1 = *(_OWORD *)"Legacy";
  return result;
}

uint64_t sd::DCNPolicyLegacy::shouldTriggerDCNOnStartup(sd::DCNPolicyLegacy *this)
{
  return 1;
}

uint64_t sd::DCNPolicyLegacy::shouldTriggerDCNOnECBMUpdate(sd::DCNPolicyLegacy *this)
{
  return 0;
}

uint64_t sd::DCNPolicyLegacy::shouldTriggerDCNOnCSCallStart(sd::DCNPolicyLegacy *this)
{
  return 0;
}

uint64_t sd::DCNPolicyLegacy::supportDCNDuringCall(sd::DCNPolicyLegacy *this)
{
  return 0;
}

uint64_t sd::DCNPolicyLegacy::shouldTriggerDCNOnCSCallEnd(sd::DCNPolicyLegacy *this)
{
  return 1;
}

uint64_t sd::DCNPolicyLegacy::shouldTriggerDCNOnDataModeChange(sd::DCNPolicyLegacy *this)
{
  return 1;
}

uint64_t sd::DCNPolicyLegacy::qualifiedServicesForDCNTrigger(sd::DCNPolicyLegacy *this)
{
  return 3;
}

void sd::LLTrafficManager::create()
{
}

void sub_223B38144(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *sd::LLTrafficManager::LLTrafficManager(void *a1)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v3, (const char *)*MEMORY[0x263F03770], "5wi.tfm");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223CBB890](v4);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v3);
  *a1 = &unk_26D745310;
  return a1;
}

void sd::LLTrafficManager::~LLTrafficManager(sd::LLTrafficManager *this)
{
}

{
  MEMORY[0x223CBB890]((char *)this + 8);
}

{
  uint64_t vars8;

  MEMORY[0x223CBB890]((char *)this + 8);

  JUMPOUT(0x223CBBDF0);
}

const char *sd::LLTrafficManager::getName(sd::LLTrafficManager *this)
{
  return "LLTrafficManager";
}

void sd::LLTrafficManager::bootstrap(sd::LLTrafficManager *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = os_nexus_controller_create();
  *((void *)this + 2) = v2;
  if (!v2)
  {
    uint64_t v3 = __error();
    uint64_t v4 = *((void *)this + 1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = strerror(*v3);
      int v6 = 136315138;
      int v7 = v5;
      _os_log_error_impl(&dword_223AF3000, v4, OS_LOG_TYPE_ERROR, "Traffic controller create failed: %s", (uint8_t *)&v6, 0xCu);
    }
  }
}

uint64_t sd::LLTrafficManager::shutdown(sd::LLTrafficManager *this)
{
  return MEMORY[0x270EDA9F8](*((void *)this + 2));
}

void sd::LLTrafficManager::provisionLLPacketFilter(DataIPFilter *this@<X3>, uint64_t a2@<X0>, uint64_t *a3@<X1>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  if (!*(void *)(a2 + 16))
  {
    uint64_t v12 = *(NSObject **)(a2 + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v3SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
      int v13 = "Flow controller is not initialized";
LABEL_11:
      int v14 = (uint8_t *)&v36;
      __int16 v15 = v12;
      uint32_t v16 = 2;
LABEL_12:
      _os_log_error_impl(&dword_223AF3000, v15, OS_LOG_TYPE_ERROR, v13, v14, v16);
    }
LABEL_78:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  if (DataIPFilter::empty(this) || *((_DWORD *)this + 6) != 17)
  {
    uint64_t v12 = *(NSObject **)(a2 + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v3SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
      int v13 = "Empty filter or wrong protocol";
      goto LABEL_11;
    }
    goto LABEL_78;
  }
  int v39 = 786433;
  uint64_t v40 = a4;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  BYTE10(v3SystemDeterminationManager::handleDumpState_sync(this - 6) = 17;
  BYTE8(v3SystemDeterminationManager::handleDumpState_sync(this - 6) = 2;
  int v10 = *((_DWORD *)this + 7);
  if (v10 == 4)
  {
    char v11 = 4;
  }
  else
  {
    if (v10 != 41)
    {
      __int16 v19 = *(NSObject **)(a2 + 8);
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        goto LABEL_78;
      }
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
      int v13 = "Invalid address family in packet filter: %d. Skipping filter...";
      int v14 = buf;
      __int16 v15 = v19;
      uint32_t v16 = 8;
      goto LABEL_12;
    }
    char v11 = 96;
  }
  BYTE9(v3SystemDeterminationManager::handleDumpState_sync(this - 6) = v11;
  BYTE8(v3SystemDeterminationManager::handleDumpState_sync(this - 6) = 3;
  if (*((unsigned char *)this + 80))
  {
    if (!*((unsigned char *)this + 56))
    {
LABEL_40:
      if (!*((unsigned char *)this + 80)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      if (*((unsigned char *)this + 68))
      {
        WORD6(v3MEMORY[0x223CBB890]((char *)this + 8) = bswap32(*((unsigned __int16 *)this + 33)) >> 16;
        BYTE8(v36) |= 0x10u;
      }
      goto LABEL_43;
    }
    if (v10 == 4)
    {
      if (*((char *)this + 55) >= 0) {
        __int16 v17 = (char *)this + 32;
      }
      else {
        __int16 v17 = (const char *)*((void *)this + 4);
      }
      if (inet_pton(2, v17, (char *)&v37 + 8) != 1)
      {
        uint64_t v20 = *(NSObject **)(a2 + 8);
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
          goto LABEL_40;
        }
        if (!*((unsigned char *)this + 80)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if (!*((unsigned char *)this + 56)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if (*((char *)this + 55) >= 0) {
          uint64_t v21 = (char *)this + 32;
        }
        else {
          uint64_t v21 = (char *)*((void *)this + 4);
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v21;
        uint64_t v22 = "Invalid source IPv4 address in packet filter: %s.";
        goto LABEL_94;
      }
      int v10 = *((_DWORD *)this + 7);
    }
    if (v10 != 41) {
      goto LABEL_29;
    }
    if (!*((unsigned char *)this + 80)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (!*((unsigned char *)this + 56)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v18 = *((char *)this + 55) >= 0 ? (char *)this + 32 : (const char *)*((void *)this + 4);
    if (inet_pton(30, v18, (void *)((unint64_t)&v36 | 0xC)) == 1)
    {
LABEL_29:
      BYTE8(v36) |= 4u;
      goto LABEL_40;
    }
    uint64_t v20 = *(NSObject **)(a2 + 8);
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      goto LABEL_40;
    }
    if (!*((unsigned char *)this + 80)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (!*((unsigned char *)this + 56)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (*((char *)this + 55) >= 0) {
      uint64_t v35 = (char *)this + 32;
    }
    else {
      uint64_t v35 = (char *)*((void *)this + 4);
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v35;
    uint64_t v22 = "Invalid source IPv6 address in packet filter: %s.";
LABEL_94:
    _os_log_error_impl(&dword_223AF3000, v20, OS_LOG_TYPE_ERROR, v22, buf, 0xCu);
    goto LABEL_40;
  }
LABEL_43:
  if (!*((unsigned char *)this + 136)) {
    goto LABEL_69;
  }
  if (*((unsigned char *)this + 112))
  {
    int v23 = *((_DWORD *)this + 7);
    if (v23 == 4)
    {
      if (*((char *)this + 111) >= 0) {
        uint64_t v24 = (char *)this + 88;
      }
      else {
        uint64_t v24 = (const char *)*((void *)this + 11);
      }
      if (inet_pton(2, v24, (char *)&v38 + 8) != 1)
      {
        uint64_t v26 = *(NSObject **)(a2 + 8);
        if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          goto LABEL_66;
        }
        if (!*((unsigned char *)this + 136)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if (!*((unsigned char *)this + 112)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        if (*((char *)this + 111) >= 0) {
          uint64_t v34 = (char *)this + 88;
        }
        else {
          uint64_t v34 = (char *)*((void *)this + 11);
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v34;
        uint64_t v28 = "Invalid destination IPv4 address in packet filter: %s.";
LABEL_87:
        _os_log_error_impl(&dword_223AF3000, v26, OS_LOG_TYPE_ERROR, v28, buf, 0xCu);
LABEL_66:
        BYTE8(v36) |= 8u;
        if (!*((unsigned char *)this + 136)) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        goto LABEL_67;
      }
      int v23 = *((_DWORD *)this + 7);
    }
    if (v23 != 41) {
      goto LABEL_66;
    }
    if (!*((unsigned char *)this + 136)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (!*((unsigned char *)this + 112)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    uint64_t v25 = *((char *)this + 111) >= 0 ? (char *)this + 88 : (const char *)*((void *)this + 11);
    if (inet_pton(30, v25, (char *)&v37 + 12) == 1) {
      goto LABEL_66;
    }
    uint64_t v26 = *(NSObject **)(a2 + 8);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
      goto LABEL_66;
    }
    if (!*((unsigned char *)this + 136)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (!*((unsigned char *)this + 112)) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    if (*((char *)this + 111) >= 0) {
      uint64_t v27 = (char *)this + 88;
    }
    else {
      uint64_t v27 = (char *)*((void *)this + 11);
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v27;
    uint64_t v28 = "Invalid destination IPv6 address in packet filter: %s.";
    goto LABEL_87;
  }
LABEL_67:
  if (*((unsigned char *)this + 124))
  {
    HIWORD(v3MEMORY[0x223CBB890]((char *)this + 8) = bswap32(*((unsigned __int16 *)this + 61)) >> 16;
    BYTE8(v36) |= 0x20u;
  }
LABEL_69:
  LOBYTE(v3SystemDeterminationManager::handleDumpState_sync(this - 6) = 2;
  WORD1(v3SystemDeterminationManager::handleDumpState_sync(this - 6) = 48;
  DWORD1(v3SystemDeterminationManager::handleDumpState_sync(this - 6) = 2;
  uint64_t v29 = *(NSObject **)(a2 + 8);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v30 = a3;
    }
    else {
      uint64_t v30 = (uint64_t *)*a3;
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v30;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 1;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = a4;
    _os_log_impl(&dword_223AF3000, v29, OS_LOG_TYPE_DEFAULT, "#I Add traffic rule action: ifname=%s, ra_type=0x%02xu, ras_qset_id=%llu", buf, 0x1Cu);
    uint64_t v29 = *(NSObject **)(a2 + 8);
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = BYTE8(v36);
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = BYTE10(v36);
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = DWORD1(v36);
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&unsigned char buf[22] = WORD6(v38);
    *(_WORD *)&buf[26] = 1024;
    *(_DWORD *)&unsigned char buf[28] = HIWORD(v38);
    _os_log_impl(&dword_223AF3000, v29, OS_LOG_TYPE_DEFAULT, "#I Add traffic descriptor: td.inet_mask=0x%02xu, td.inet_proto=0x%02xu, td.inet_common.itd_flags=0x%08xu, td.inet_lport=0x%04xu, td.inet_rport=0x%04xu", buf, 0x20u);
  }
  *(void *)uu = 0;
  uint64_t v43 = 0;
  int v31 = os_nexus_controller_add_traffic_rule();
  if (v31)
  {
    uint64_t v32 = *(NSObject **)(a2 + 8);
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
      goto LABEL_78;
    }
    uint64_t v33 = strerror(v31);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v33;
    int v13 = "Add traffic rule failed: %s";
    int v14 = buf;
    __int16 v15 = v32;
    uint32_t v16 = 12;
    goto LABEL_12;
  }
  memset(buf, 0, 37);
  uuid_unparse(uu, (char *)buf);
  std::string::basic_string[abi:ne180100]<0>(a5, (char *)buf);
}

void sd::LLTrafficManager::removeLLPacketFilter(uint64_t a1, char *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!*(void *)(a1 + 16))
  {
    char v11 = *(NSObject **)(a1 + 8);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)__dst = 0;
    uint64_t v8 = "Flow controller is not initialized";
    int v9 = __dst;
    int v10 = v11;
    uint32_t v12 = 2;
    goto LABEL_23;
  }
  uint64_t v3 = a2;
  memset(uu, 0, sizeof(uu));
  memset(__dst, 0, sizeof(__dst));
  int v4 = a2[23];
  if (v4 >= 0) {
    size_t v5 = a2[23];
  }
  else {
    size_t v5 = *((void *)a2 + 1);
  }
  if (v5)
  {
    if (v4 < 0) {
      a2 = *(char **)a2;
    }
    memmove(__dst, a2, v5);
  }
  int v6 = uuid_parse(__dst, uu);
  int v7 = *(NSObject **)(a1 + 8);
  if (v6)
  {
    if (!os_log_type_enabled(*(os_log_t *)(a1 + 8), OS_LOG_TYPE_ERROR)) {
      return;
    }
    int v17 = 136315138;
    uint64_t v18 = __dst;
    uint64_t v8 = "Invalid flow rule UUID: %s";
    int v9 = (uint8_t *)&v17;
    int v10 = v7;
    goto LABEL_22;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 8), OS_LOG_TYPE_DEFAULT))
  {
    if (v3[23] >= 0) {
      int v13 = v3;
    }
    else {
      int v13 = *(char **)v3;
    }
    int v17 = 136315138;
    uint64_t v18 = v13;
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I Remove traffic rule: %s", (uint8_t *)&v17, 0xCu);
  }
  int v14 = os_nexus_controller_remove_traffic_rule();
  if (v14)
  {
    __int16 v15 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint32_t v16 = strerror(v14);
      int v17 = 136315138;
      uint64_t v18 = v16;
      uint64_t v8 = "Remove traffic rule failed: %s";
      int v9 = (uint8_t *)&v17;
      int v10 = v15;
LABEL_22:
      uint32_t v12 = 12;
LABEL_23:
      _os_log_error_impl(&dword_223AF3000, v10, OS_LOG_TYPE_ERROR, v8, v9, v12);
    }
  }
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C200], MEMORY[0x263F8C088]);
}

void std::__shared_ptr_pointer<sd::LLTrafficManager *,std::shared_ptr<sd::LLTrafficManager>::__shared_ptr_default_delete<sd::LLTrafficManager,sd::LLTrafficManager>,std::allocator<sd::LLTrafficManager>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

uint64_t std::__shared_ptr_pointer<sd::LLTrafficManager *,std::shared_ptr<sd::LLTrafficManager>::__shared_ptr_default_delete<sd::LLTrafficManager,sd::LLTrafficManager>,std::allocator<sd::LLTrafficManager>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<sd::LLTrafficManager *,std::shared_ptr<sd::LLTrafficManager>::__shared_ptr_default_delete<sd::LLTrafficManager,sd::LLTrafficManager>,std::allocator<sd::LLTrafficManager>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sd::IMSSubscriberModel::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_223B38F0C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

const char *sd::IMSSubscriberModel::getName(sd::IMSSubscriberModel *this)
{
  return "IMSSubscriberModel";
}

uint64_t sd::IMSSubscriberModel::bootstrap(sd::IMSSubscriberModel *this, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 18);
  *((void *)this + 17) = v6;
  *((void *)this + 1MEMORY[0x223CBB890]((char *)this + 8) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  int v10 = (std::__shared_weak_count *)*((void *)this + 16);
  *((void *)this + 15) = v9;
  *((void *)this + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  *((void *)this + 33) = 0xFFFF000001FFLL;
  *((_DWORD *)this + 6MEMORY[0x223CBB890]((char *)this + 8) = 61439;

  return sd::IMSSubscriberModel::initialize_sync(this);
}

double sd::IMSSubscriberModel::setImsRegistrationQualifierMasks(sd::IMSSubscriberModel *this)
{
  *(void *)&double result = 0xFFFF000001FFLL;
  *((void *)this + 33) = 0xFFFF000001FFLL;
  *((_DWORD *)this + 6MEMORY[0x223CBB890]((char *)this + 8) = 61439;
  return result;
}

uint64_t sd::IMSSubscriberModel::initialize_sync(sd::IMSSubscriberModel *this)
{
  (*(void (**)(sd::IMSSubscriberModel *))(*(void *)this + 712))(this);
  **((_DWORD **)this + 20) = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 17) + 232))(*((void *)this + 17), *((void *)this + 5) + 24);
  uint64_t v2 = *(uint64_t (***)(sd::IMSSubscriberModel *))this;
  if (*(unsigned char *)(*((void *)this + 9) + 8)) {
    goto LABEL_2;
  }
  int v14 = (capabilities::ct *)v2[33](this);
  if (v14)
  {
    __int16 v15 = (capabilities::ct *)capabilities::ct::supportsVoLTE(v14);
    if ((v15 & 1) != 0 || (capabilities::ct::supportsVoiceCall(v15) & 1) == 0)
    {
      uint64_t v2 = *(uint64_t (***)(sd::IMSSubscriberModel *))this;
LABEL_2:
      ((void (*)(sd::IMSSubscriberModel *, void))v2[92])(this, 0);
    }
  }
  uint64_t v3 = 1;
  int v4 = (capabilities::ct *)(*(uint64_t (**)(sd::IMSSubscriberModel *, uint64_t))(*(void *)this + 736))(this, 1);
  unsigned int BasebandBootStrategy = capabilities::ct::getBasebandBootStrategy(v4);
  if (BasebandBootStrategy >= 2)
  {
    if (BasebandBootStrategy != 2) {
      goto LABEL_7;
    }
    uint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 17) + 200))(*((void *)this + 17));
  }
  (*(void (**)(sd::IMSSubscriberModel *, uint64_t))(*(void *)this + 168))(this, v3);
LABEL_7:
  (*(void (**)(sd::IMSSubscriberModel *, uint64_t))(*(void *)this + 736))(this, 7);
  (*(void (**)(sd::IMSSubscriberModel *, uint64_t))(*(void *)this + 736))(this, 8);
  uint64_t v6 = *((void *)this + 17);
  uint64_t v7 = *(unsigned int *)(*((void *)this + 5) + 52);
  uint64_t v8 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 640))(this);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 456))(v6, v7, v8, 2))
  {
    uint64_t v9 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
    int v10 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint32_t v16 = 0;
      _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#I Connectivity is up", v16, 2u);
    }
    (*(void (**)(sd::IMSSubscriberModel *, uint64_t))(*(void *)this + 736))(this, 5);
  }
  char v11 = *(void (***)(sd::IMSSubscriberModel *, uint64_t))this;
  if (*(unsigned char *)(*((void *)this + 9) + 8)
    || (int v12 = ((uint64_t (*)(sd::IMSSubscriberModel *))v11[90])(this),
        char v11 = *(void (***)(sd::IMSSubscriberModel *, uint64_t))this,
        v12))
  {
    v11[92](this, 6);
  }
  else
  {
    v11[93](this, 6);
  }
  (*(void (**)(sd::IMSSubscriberModel *, uint64_t))(*(void *)this + 736))(this, 13);
  uint64_t result = (*(uint64_t (**)(sd::IMSSubscriberModel *, uint64_t))(*(void *)this + 736))(this, 14);
  *((unsigned char *)this + 27SystemDeterminationManager::handleDumpState_sync(this - 6) = 1;
  return result;
}

void sd::IMSSubscriberModel::shutdown(sd::IMSSubscriberModel *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  *((void *)this + 17) = 0;
  *((void *)this + 1MEMORY[0x223CBB890]((char *)this + 8) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 16);
  *((void *)this + 15) = 0;
  *((void *)this + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sd::IMSSubscriberModel::handlePersonalityRemoved_sync(sd::IMSSubscriberModel *this)
{
}

void sub_223B39770(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<sd::DataCache>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberModel::clearRegMask(uint64_t this)
{
  *(_DWORD *)(this + 260) = 0;
  return this;
}

void sd::IMSSubscriberModel::IMSSubscriberModel(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[4] = *MEMORY[0x263EF8340];
  *a1 = MEMORY[0x263F03650] + 16;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, (const char *)*MEMORY[0x263F03770], "5wi.mdl");
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223CBB890](&v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  a1[2] = 0;
  a1[3] = 0;
  uint64_t v8 = *(void *)(a6 + 8);
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_223B39BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::__shared_weak_count::~__shared_weak_count(v12);
  operator delete(v14);
  if (*(void *)(v10 + 184)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v10 + 184));
  }
  if (*(void *)(v10 + 168)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v10 + 168));
  }
  __int16 v15 = *(std::__shared_weak_count **)(v10 + 144);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint32_t v16 = *(std::__shared_weak_count **)(v10 + 128);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  int v17 = *(std::__shared_weak_count **)(v10 + 112);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v10 + 96);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  __int16 v19 = *(std::__shared_weak_count **)(v10 + 80);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v10 + 64);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v10 + 48);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v22 = *(void *)(v10 + 32);
  *(void *)(v10 + 32) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  int v23 = *(std::__shared_weak_count **)(v10 + 24);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  MEMORY[0x223CBB890](v11);
  sd::IMSSubscriberModelInterface::~IMSSubscriberModelInterface((sd::IMSSubscriberModelInterface *)v10);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberModel::~IMSSubscriberModel(void **this)
{
  *this = &unk_26D745420;
  if (*((char *)this + 375) < 0) {
    operator delete(this[44]);
  }
  if (*((char *)this + 351) < 0) {
    operator delete(this[41]);
  }
  if (*((char *)this + 327) < 0) {
    operator delete(this[38]);
  }
  if (*((char *)this + 303) < 0) {
    operator delete(this[35]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[25];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[23];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = (std::__shared_weak_count *)this[21];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[18];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)this[16];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)this[14];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)this[12];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)this[10];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)this[8];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)this[6];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  int v12 = this[4];
  this[4] = 0;
  if (v12) {
    (*(void (**)(void *))(*(void *)v12 + 8))(v12);
  }
  int v13 = (std::__shared_weak_count *)this[3];
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  MEMORY[0x223CBB890](this + 1);

  sd::IMSSubscriberModelInterface::~IMSSubscriberModelInterface((sd::IMSSubscriberModelInterface *)this);
}

{
  uint64_t vars8;

  sd::IMSSubscriberModel::~IMSSubscriberModel(this);

  JUMPOUT(0x223CBBDF0);
}

uint64_t sd::IMSSubscriberModel::updatePersonalityInfo(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  *(_DWORD *)(*(void *)(a1 + 72) + 4) = *(_DWORD *)(*a2 + 56);
  uint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(v4 + 52));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(*a2 + 24);
    uint64_t v7 = *(unsigned __int8 *)(*a2 + 47);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(*a2 + 32);
    }
    if (v8 >= 0) {
      uint64_t v6 = *a2 + 24;
    }
    if (v7) {
      uint64_t v9 = (const char *)v6;
    }
    else {
      uint64_t v9 = "<invalid>";
    }
    int v14 = 136315650;
    __int16 v15 = v9;
    __int16 v16 = 2080;
    uint64_t v17 = subscriber::asString();
    __int16 v18 = 2080;
    uint64_t v19 = asString();
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I updatePersonalityInfo: accountID: %s, slot: %s, type: %s", (uint8_t *)&v14, 0x20u);
  }
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  int v12 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 4MEMORY[0x223CBB890]((char *)this + 8) = v10;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return (*(uint64_t (**)(void, void *))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), a2);
}

void sd::IMSSubscriberModel::getPersonalityId(sd::IMSSubscriberModel *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 5);
  if (*(char *)(v2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 24), *(void *)(v2 + 32));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 24);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 40);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t sd::IMSSubscriberModel::getIMSConnectionType(sd::IMSSubscriberModel *this)
{
  if (*(unsigned char *)(*((void *)this + 9) + 8)) {
    return 0;
  }
  if (*(unsigned char *)(*((void *)this + 5) + 49) == 1) {
    return 26;
  }
  return 17;
}

BOOL sd::IMSSubscriberModel::isVoLTEEnabled_sync(sd::IMSSubscriberModel *this)
{
  return **((_DWORD **)this + 20) == 2;
}

uint64_t sd::IMSSubscriberModel::updateNonVoLteSMSFromConfig(sd::IMSSubscriberModel *this)
{
  *(unsigned char *)(*((void *)this + 20) + 19) = (*(uint64_t (**)(void))(**((void **)this + 11) + 136))(*((void *)this + 11));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 11) + 144))(*((void *)this + 11));
  *(unsigned char *)(*((void *)this + 20) + 20) = result;
  return result;
}

uint64_t sd::IMSSubscriberModel::isNonVoLteSMSEnabled(sd::IMSSubscriberModel *this)
{
  return MEMORY[0x270EE9290](*((void *)this + 20) + 19, *((_DWORD *)this + 39) == 4);
}

uint64_t sd::IMSSubscriberModel::isIMSFeatureEnabled(sd::IMSSubscriberModel *this)
{
  uint64_t v1 = (_DWORD *)*((void *)this + 20);
  if (v1[2] == 2 || *v1 == 2 || (sd::ImsFeature::VoWiFi::isEnabled((sd::ImsFeature::VoWiFi *)(v1 + 4)) & 1) != 0) {
    return 1;
  }
  uint64_t v4 = *(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 272);

  return v4(this);
}

uint64_t sd::IMSSubscriberModel::evaluateIMSServiceMasks(void *a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = 0;
  *a3 = 0;
  uint64_t v6 = (_DWORD *)a1[20];
  if (*v6 == 2) {
    *a2 |= 3u;
  }
  if (sd::ImsFeature::VoWiFi::isEnabled((sd::ImsFeature::VoWiFi *)(v6 + 4))) {
    *a3 |= 3u;
  }
  uint64_t result = (*(uint64_t (**)(void *))(*a1 + 272))(a1);
  if (result) {
    *a2 |= 2u;
  }
  return result;
}

uint64_t sd::IMSSubscriberModel::getImsFeatureMaskOverCell(sd::IMSSubscriberModel *this)
{
  return *(unsigned int *)(*((void *)this + 20) + 24);
}

uint64_t sd::IMSSubscriberModel::getImsFeatureMaskOverWiFi(sd::IMSSubscriberModel *this)
{
  return *(unsigned int *)(*((void *)this + 20) + 28);
}

uint64_t sd::IMSSubscriberModel::getImsFeature@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 168);
  *a2 = *(void *)(this + 160);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t sd::IMSSubscriberModel::shouldIgnoreISIM(sd::IMSSubscriberModel *this)
{
  return (*(uint64_t (**)(void, BOOL))(**((void **)this + 11) + 192))(*((void *)this + 11), **((_DWORD **)this + 20) == 2);
}

uint64_t sd::IMSSubscriberModel::isUSIMFallbackSupported(sd::IMSSubscriberModel *this)
{
  return (*(uint64_t (**)(void, BOOL))(**((void **)this + 11) + 152))(*((void *)this + 11), **((_DWORD **)this + 20) == 2);
}

uint64_t sd::IMSSubscriberModel::useMDNFromCSIM(sd::IMSSubscriberModel *this)
{
  return (*(uint64_t (**)(void, BOOL))(**((void **)this + 11) + 200))(*((void *)this + 11), **((_DWORD **)this + 20) == 2);
}

uint64_t sd::IMSSubscriberModel::setImsRegistrationState(uint64_t result, int a2)
{
  *(_DWORD *)(result + 240) = a2;
  return result;
}

uint64_t sd::IMSSubscriberModel::getImsRegistrationState(sd::IMSSubscriberModel *this)
{
  return *((unsigned int *)this + 60);
}

uint64_t sd::IMSSubscriberModel::setCurrentConnHelperType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 152) = a2;
  return result;
}

uint64_t sd::IMSSubscriberModel::getCurrentConnHelperType(sd::IMSSubscriberModel *this)
{
  return *((unsigned int *)this + 38);
}

uint64_t sd::IMSSubscriberModel::getImsPref(uint64_t a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (validContextType()) {
    return *(unsigned int *)(a1 + 4 * a2 + 252);
  }
  sd::DataCache::getRuntimeInfo((sd::DataCache *)v6, *(void *)(a1 + 192));
  uint64_t v4 = v7;
  sd::RuntimeInfo::~RuntimeInfo(v6);
  return v4;
}

BOOL sd::IMSSubscriberModel::setImsPref(uint64_t *a1, int a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (validContextType()) {
    int v6 = *((_DWORD *)a3 + a2);
  }
  else {
    int v6 = 0;
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t *))(*a1 + 72))(a1);
  uint64_t v8 = (os_log_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[4] + 16))(a1[4], v7);
  *(uint64_t *)((char *)a1 + 252) = *a3;
  if (a2 == 1)
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t *))(*a1 + 160))(v25, a1);
    int v9 = *(_DWORD *)(*(void *)v25 + 28);
    if (*(void *)&v25[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v25[8]);
    }
    int v10 = v9 & v6;
    if ((v9 & v6) != v6)
    {
      uint64_t v11 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = sd::asString();
        uint64_t v13 = sd::asString();
        uint64_t v14 = sd::asString();
        *(_DWORD *)uint64_t v25 = 136315650;
        *(void *)&v25[4] = v12;
        *(_WORD *)&v25[12] = 2080;
        *(void *)&v25[14] = v13;
        __int16 v26 = 2080;
        uint64_t v27 = v14;
        _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I WiFi Pref Mask: [%s]; WiFi Feature Mask: [%s]; Updating ims prefs using effective WiFi Pref Mask: [%s]",
          v25,
          0x20u);
      }
      *((_DWORD *)a1 + 64) = v10;
      int v6 = v10;
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1[11] + 360))(a1[11]))
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1[11] + 352))(a1[11]))
    {
      BOOL v15 = a2 == 1;
      uint64_t v16 = a1[17];
      uint64_t v17 = (*(uint64_t (**)(uint64_t *))(*a1 + 72))(a1);
      if ((v15 & (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v16 + 432))(v16, v17)) == 1
        && (sd::ImsFeature::VoWiFi::isEnabled((sd::ImsFeature::VoWiFi *)(a1[20] + 16)) & 1) == 0)
      {
        __int16 v18 = *v8;
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v25 = 0;
          _os_log_impl(&dword_223AF3000, v18, OS_LOG_TYPE_DEFAULT, "#I Dropping VoWiFi IMS pref for unprovisioned SIM", v25, 2u);
        }
        int v6 = 0;
        *((_DWORD *)a1 + 64) = 0;
      }
    }
  }
  if (*((unsigned char *)a1 + 248))
  {
    uint64_t v19 = *v8;
    BOOL v20 = os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v20)
    {
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_223AF3000, v19, OS_LOG_TYPE_DEFAULT, "#I Skip changing runtime IMS Pref: In-Call IMS pref is active", v25, 2u);
      return 0;
    }
  }
  else
  {
    bzero(v25, 0x688uLL);
    sd::DataCache::getRuntimeInfo((sd::DataCache *)v25, a1[24]);
    if (v28 == v6)
    {
      int v22 = 0;
    }
    else
    {
      int v28 = v6;
      sd::DataCache::updateRuntimeInfo((sd::DataCache *)a1[24], (const sd::RuntimeInfo *)v25);
      int v22 = 1;
    }
    sd::RuntimeInfo::~RuntimeInfo((void **)v25);
    uint64_t v23 = *a1;
    if (v6) {
      int v24 = (*(uint64_t (**)(uint64_t *, uint64_t))(v23 + 736))(a1, 4);
    }
    else {
      int v24 = (*(uint64_t (**)(uint64_t *, uint64_t))(v23 + 744))(a1, 4);
    }
    return (v22 | v24) != 0;
  }
  return result;
}

void sub_223B3A85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sd::IMSSubscriberModel::setInCallImsPref(sd::IMSSubscriberModel *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if ((*(unsigned int (**)(void))(**((void **)this + 11) + 336))(*((void *)this + 11)))
  {
    *((_DWORD *)this + 61) = (*(uint64_t (**)(sd::IMSSubscriberModel *, uint64_t))(*(void *)this + 128))(this, 2);
    *((unsigned char *)this + 24MEMORY[0x223CBB890]((char *)this + 8) = 1;
    uint64_t v2 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
    long long v3 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (*((unsigned char *)this + 248)) {
        uint64_t v4 = (const char *)sd::asString();
      }
      else {
        uint64_t v4 = "NULL";
      }
      int v5 = 136315138;
      int v6 = v4;
      _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I Setting fInCallImsPref as %s", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sd::IMSSubscriberModel::resetInCallImsPref(sd::IMSSubscriberModel *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
  long long v3 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5[0]) = 0;
    _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I Resetting fInCallImsPref...", (uint8_t *)v5, 2u);
  }
  if (*((unsigned char *)this + 248)) {
    *((unsigned char *)this + 24MEMORY[0x223CBB890]((char *)this + 8) = 0;
  }
  int v4 = (*(uint64_t (**)(sd::IMSSubscriberModel *, uint64_t))(*(void *)this + 128))(this, 2);
  bzero(v5, 0x688uLL);
  sd::DataCache::getRuntimeInfo((sd::DataCache *)v5, *((void *)this + 24));
  if (v6 != v4)
  {
    int v6 = v4;
    sd::DataCache::updateRuntimeInfo(*((sd::DataCache **)this + 24), (const sd::RuntimeInfo *)v5);
  }
  sd::RuntimeInfo::~RuntimeInfo(v5);
}

void sub_223B3AB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sd::IMSSubscriberModel::getRegMask(sd::IMSSubscriberModel *this)
{
  return *((unsigned int *)this + 65);
}

uint64_t sd::IMSSubscriberModel::setRegMask(_DWORD *a1, char a2)
{
  int v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 752))(a1);
  if ((v4 & 1) == 0)
  {
    a1[65] |= 1 << a2;
    sd::IMSSubscriberModel::logCurrentMaskState((void **)a1);
  }
  return v4 ^ 1u;
}

uint64_t sd::IMSSubscriberModel::logCurrentMaskState(void **a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v26 = 0;
  long long v24 = 0u;
  memset(v25, 0, sizeof(v25));
  *(_OWORD *)std::string __p = 0u;
  long long v23 = 0u;
  memset(v21, 0, sizeof(v21));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v21);
  uint64_t v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"RegMasks[", 9);
  long long v3 = (const char *)sd::asString();
  size_t v4 = strlen(v3);
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"]: ", 3);
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = (const char *)sd::asString();
    size_t v8 = strlen(v7);
    int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"[", 1);
    ((void (*)(void **, uint64_t))(*a1)[94])(a1, v6);
    int v10 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    uint64_t v6 = (v6 + 1);
  }
  while (v6 != 16);
  uint64_t v11 = ((uint64_t (*)(void **))(*a1)[9])(a1);
  uint64_t v12 = (os_log_t *)(*(uint64_t (**)(void *, uint64_t))(*a1[4] + 16))(a1[4], v11);
  uint64_t v13 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v21 + 8, v27);
    if (v30 >= 0) {
      uint64_t v14 = v27;
    }
    else {
      uint64_t v14 = *(unsigned char **)v27;
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v32 = v14;
    _os_log_impl(&dword_223AF3000, v13, OS_LOG_TYPE_DEFAULT, "#I %{public}s", buf, 0xCu);
    if (v30 < 0) {
      operator delete(*(void **)v27);
    }
    uint64_t v13 = *v12;
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl(&dword_223AF3000, v13, OS_LOG_TYPE_DEFAULT, "#I RegMasks: {", v27, 2u);
  }
  uint64_t v15 = 0;
  do
  {
    uint64_t v16 = *v12;
    if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = sd::asString();
      int v18 = ((uint64_t (*)(void **, uint64_t))(*a1)[94])(a1, v15);
      *(_DWORD *)uint64_t v27 = 136315394;
      *(void *)&v27[4] = v17;
      __int16 v28 = 1024;
      int v29 = v18;
      _os_log_impl(&dword_223AF3000, v16, OS_LOG_TYPE_DEFAULT, "#I RegMasks:\t %s[%d]", v27, 0x12u);
    }
    uint64_t v15 = (v15 + 1);
  }
  while (v15 != 16);
  uint64_t v19 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl(&dword_223AF3000, v19, OS_LOG_TYPE_DEFAULT, "#I RegMasks: }", v27, 2u);
  }
  *(void *)&v21[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v21 + *(void *)(*(void *)&v21[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v21[0] + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223CBBDB0](v25);
}

void sub_223B3B068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberModel::unsetRegMask(_DWORD *a1, char a2)
{
  uint64_t v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 752))(a1);
  if (v4)
  {
    a1[65] &= ~(1 << a2);
    sd::IMSSubscriberModel::logCurrentMaskState((void **)a1);
  }
  return v4;
}

uint64_t sd::IMSSubscriberModel::isQualifiedToBringUpImsPdn(sd::IMSSubscriberModel *this)
{
  uint64_t result = (*(uint64_t (**)(sd::IMSSubscriberModel *, void))(*(void *)this + 760))(this, *((unsigned int *)this + 66));
  if (result) {
    return (*(unsigned int (**)(sd::IMSSubscriberModel *, uint64_t))(*(void *)this + 752))(this, 9) ^ 1;
  }
  return result;
}

uint64_t sd::IMSSubscriberModel::enableTelephony(sd::IMSSubscriberModel *this, int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
  int v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v4);
  uint64_t v6 = *(void **)this;
  if (a2)
  {
    if ((((uint64_t (*)(sd::IMSSubscriberModel *, uint64_t))v6[92])(this, 2) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    uint64_t result = ((uint64_t (*)(sd::IMSSubscriberModel *, uint64_t))v6[93])(this, 2);
    if (!result) {
      return result;
    }
  }
  size_t v8 = *v5;
  if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = "disabled";
    if (a2) {
      int v9 = "enabled";
    }
    int v10 = 136315138;
    uint64_t v11 = v9;
    _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I Telephony was %s successfully", (uint8_t *)&v10, 0xCu);
  }
  return 1;
}

uint64_t sd::IMSSubscriberModel::isTelephonyEnabled(sd::IMSSubscriberModel *this)
{
  return (*(uint64_t (**)(sd::IMSSubscriberModel *, uint64_t))(*(void *)this + 752))(this, 2);
}

std::string *sd::IMSSubscriberModel::setAddressRefId(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string::operator=((std::string *)(a1 + 328), a2);

  return std::string::operator=((std::string *)(a1 + 352), a3);
}

std::string *sd::IMSSubscriberModel::getAddressRefId(uint64_t a1, std::string *this, std::string *a3)
{
  std::string::operator=(this, (const std::string *)(a1 + 328));

  return std::string::operator=(a3, (const std::string *)(a1 + 352));
}

void sd::IMSSubscriberModel::setPrefsChanged(sd::IMSSubscriberModel *this, int a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
  int v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v4);
  if (*((unsigned __int8 *)this + 276) != a2)
  {
    uint64_t v6 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      uint64_t v8 = asStringBool();
      __int16 v9 = 2080;
      uint64_t v10 = asStringBool();
      _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I IMS Preferences (CB) changed set from %s to %s", (uint8_t *)&v7, 0x16u);
    }
    *((unsigned char *)this + 27SystemDeterminationManager::handleDumpState_sync(this - 6) = a2;
  }
}

uint64_t sd::IMSSubscriberModel::isPrefsChanged(sd::IMSSubscriberModel *this)
{
  return *((unsigned __int8 *)this + 276);
}

void sd::IMSSubscriberModel::setCountrySetFlag(sd::IMSSubscriberModel *this, char a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
  int v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315394;
    uint64_t v7 = asStringBool();
    __int16 v8 = 2080;
    uint64_t v9 = asStringBool();
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I fCountrySetFlag set from %s to %s", (uint8_t *)&v6, 0x16u);
  }
  *((unsigned char *)this + 277) = a2;
}

uint64_t sd::IMSSubscriberModel::isCountrySetFlag(sd::IMSSubscriberModel *this)
{
  return *((unsigned __int8 *)this + 277);
}

std::string *sd::IMSSubscriberModel::setDisabledCountry(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 280), a2);
}

void sd::IMSSubscriberModel::getDisabledCountry(sd::IMSSubscriberModel *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 303) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 35), *((void *)this + 36));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 280);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 37);
  }
}

std::string *sd::IMSSubscriberModel::setCountryOfOrigination(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 304), a2);
}

void sd::IMSSubscriberModel::getCountryOfOrigination(sd::IMSSubscriberModel *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 327) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 38), *((void *)this + 39));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 19);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 40);
  }
}

void sd::IMSSubscriberModel::updateCurrentImsStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 192);
  std::mutex::lock((std::mutex *)(v3 + 1720));
  *(void *)(v3 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(v3 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)uint64_t v3 = 1;

  std::mutex::unlock((std::mutex *)(v3 + 1720));
}

uint64_t sd::IMSSubscriberModel::getLastNotifiedImsStatus(sd::IMSSubscriberModel *this)
{
  uint64_t v1 = *((void *)this + 24);
  std::mutex::lock((std::mutex *)(v1 + 1720));
  uint64_t v2 = *(void *)(v1 + 16);
  std::mutex::unlock((std::mutex *)(v1 + 1720));
  return v2;
}

void sd::IMSSubscriberModel::updateLastNotifiedImsStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 192);
  std::mutex::lock((std::mutex *)(v3 + 1720));
  *(void *)(v3 + 20) = *(void *)(a2 + 4);
  *(_DWORD *)(v3 + 2MEMORY[0x223CBB890]((char *)this + 8) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)uint64_t v3 = 2;

  std::mutex::unlock((std::mutex *)(v3 + 1720));
}

uint64_t sd::IMSSubscriberModel::getLastRegisteredImsStatus(sd::IMSSubscriberModel *this)
{
  return *((void *)this + 28);
}

double sd::IMSSubscriberModel::updateLastRegisteredImsStatus(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 4);
  *(double *)(a1 + 22MEMORY[0x223CBB890]((char *)this + 8) = result;
  *(_DWORD *)(a1 + 23SystemDeterminationManager::handleDumpState_sync(this - 6) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 224) = 4;
  return result;
}

void sd::IMSSubscriberModel::updateIWLanMode(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  uint64_t v7 = (NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), v6);
  bzero(v13, 0x688uLL);
  sd::DataCache::getRuntimeInfo((sd::DataCache *)v13, *(void *)(a1 + 192));
  if (*(unsigned char *)(a1 + 248))
  {
    __int16 v8 = (int *)(a1 + 244);
    uint64_t v9 = *v7;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 136315138;
      uint64_t v12 = sd::asString();
      _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I In-Call IMS pref is active: [%s]", (uint8_t *)&v11, 0xCu);
      if (!*(unsigned char *)(a1 + 248)) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
    }
  }
  else
  {
    __int16 v8 = (int *)(a1 + 4 * a2 + 252);
  }
  int v14 = *v8;
  sd::DataCache::updateRuntimeInfo(*(sd::DataCache **)(a1 + 192), (const sd::RuntimeInfo *)v13);
  uint64_t v10 = *(void *)(a1 + 192);
  std::mutex::lock((std::mutex *)(v10 + 1720));
  *(unsigned char *)(v10 + 32) = a2;
  *(_DWORD *)(v10 + 3SystemDeterminationManager::handleDumpState_sync(this - 6) = a3;
  std::mutex::unlock((std::mutex *)(v10 + 1720));
  sd::RuntimeInfo::~RuntimeInfo(v13);
}

void sub_223B3B96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sd::RuntimeInfo::~RuntimeInfo((void **)va);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberModel::updateVoLTEEnabled(sd::IMSSubscriberModel *this, char a2)
{
  uint64_t v3 = *((void *)this + 24);
  std::mutex::lock((std::mutex *)(v3 + 1720));
  *(unsigned char *)(v3 + 40) = a2;

  std::mutex::unlock((std::mutex *)(v3 + 1720));
}

uint64_t sd::IMSSubscriberModel::isVoLTEEnabled(sd::IMSSubscriberModel *this)
{
  uint64_t v1 = *((void *)this + 24);
  uint64_t v2 = (std::mutex *)(v1 + 1720);
  std::mutex::lock((std::mutex *)(v1 + 1720));
  uint64_t v3 = *(unsigned __int8 *)(v1 + 40);
  std::mutex::unlock(v2);
  return v3;
}

void sd::IMSSubscriberModel::updateVoNREnabled(sd::IMSSubscriberModel *this, char a2)
{
  uint64_t v3 = *((void *)this + 24);
  std::mutex::lock((std::mutex *)(v3 + 1720));
  *(unsigned char *)(v3 + 41) = a2;

  std::mutex::unlock((std::mutex *)(v3 + 1720));
}

uint64_t sd::IMSSubscriberModel::isVoNREnabled(sd::IMSSubscriberModel *this)
{
  uint64_t v1 = *((void *)this + 24);
  uint64_t v2 = (std::mutex *)(v1 + 1720);
  std::mutex::lock((std::mutex *)(v1 + 1720));
  uint64_t v3 = *(unsigned __int8 *)(v1 + 41);
  std::mutex::unlock(v2);
  return v3;
}

BOOL sd::IMSSubscriberModel::updateRoamingState(uint64_t a1, int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  int v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), v4);
  int v6 = *(_DWORD *)(a1 + 156);
  if (v6 != a2)
  {
    uint64_t v7 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = asString();
      __int16 v11 = 2080;
      uint64_t v12 = asString();
      _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I Roaming result changing from %s to %s", (uint8_t *)&v9, 0x16u);
    }
    *(_DWORD *)(a1 + 15SystemDeterminationManager::handleDumpState_sync(this - 6) = a2;
  }
  return v6 != a2;
}

uint64_t sd::IMSSubscriberModel::getRoamingState(sd::IMSSubscriberModel *this)
{
  return *((unsigned int *)this + 39);
}

unint64_t sd::IMSSubscriberModel::isInVolteMode(sd::IMSSubscriberModel *this)
{
  uint64_t v2 = *((void *)this + 24);
  uint64_t v3 = (std::mutex *)(v2 + 1720);
  std::mutex::lock((std::mutex *)(v2 + 1720));
  unint64_t v4 = *(void *)(v2 + 8);
  std::mutex::unlock(v3);
  if (*(unsigned char *)(*((void *)this + 24) + 32)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == 1;
  }
  if (v5) {
    return HIDWORD(v4) & 1;
  }
  else {
    return 0;
  }
}

BOOL sd::IMSSubscriberModel::isRegisteringOrRegistered(sd::IMSSubscriberModel *this)
{
  return (*((_DWORD *)this + 60) - 1) < 2;
}

uint64_t sd::IMSSubscriberModel::isIMSAlowedBasedOnTTYMode_sync(sd::IMSSubscriberModel *this)
{
  uint64_t v2 = *((void *)this + 17);
  (*(void (**)(void **__return_ptr))(*(void *)this + 56))(__p);
  int v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 288))(v2, __p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v3 == 1) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void))(**((void **)this + 11) + 88))(*((void *)this + 11));
  }
}

void sub_223B3BD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberModel::isIMSRegistered(uint64_t a1, BOOL *a2, _DWORD *a3, unsigned char *a4, _DWORD *a5, int a6)
{
  uint64_t v12 = (std::mutex *)(*(void *)(a1 + 192) + 1720);
  std::mutex::lock(v12);
  *a2 = 0;
  *a3 = 0;
  uint64_t v13 = *(void *)(a1 + 192);
  *a4 = *(unsigned char *)(v13 + 32);
  *a5 = *(_DWORD *)(v13 + 36);
  if (a6)
  {
    BOOL v14 = *(_DWORD *)(a1 + 240) == 2;
    uint64_t v15 = (_DWORD *)(v13 + 12);
  }
  else
  {
    BOOL v14 = *(_DWORD *)(v13 + 24) == 1;
    uint64_t v15 = (_DWORD *)(v13 + 28);
  }
  *a2 = v14;
  *a3 = *v15;

  std::mutex::unlock(v12);
}

uint64_t sd::IMSSubscriberModel::getImsSubscriberConfig@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 96);
  *a2 = *(void *)(this + 88);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t sd::IMSSubscriberModel::getUEInfo@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 184);
  *a2 = *(void *)(this + 176);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t sd::IMSSubscriberModel::updateSimInfo(sd::IMSSubscriberModel *this, const BasicSimInfo *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
  unint64_t v4 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v3);
  uint64_t isSimTypePresent = BasicSimInfo::isSimTypePresent();
  int v6 = sd::UEInfo::IsimInfo::markSimPresent();
  uint64_t v7 = *v4;
  if (v6 && os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315394;
    uint64_t v11 = asString();
    __int16 v12 = 2080;
    uint64_t v13 = asStringBool();
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I ISIM presence changed %s -> %s", (uint8_t *)&v10, 0x16u);
    uint64_t v7 = *v4;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (**((_DWORD **)this + 22) == 1) {
      __int16 v8 = "";
    }
    else {
      __int16 v8 = "not ";
    }
    int v10 = 136315138;
    uint64_t v11 = (uint64_t)v8;
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I ISIM %spresent.", (uint8_t *)&v10, 0xCu);
  }
  sd::UEInfo::DeviceInfo::updateSimInfo();
  return isSimTypePresent;
}

void sd::IMSSubscriberModel::updateLazuliInfo(sd::IMSSubscriberModel *this, const LazuliImsInfo *a2)
{
  std::string::operator=((std::string *)(*((void *)this + 22) + 480), (const std::string *)a2);
  std::string::operator=((std::string *)(*((void *)this + 22) + 384), (const std::string *)a2 + 1);
  std::string::operator=((std::string *)(*((void *)this + 22) + 408), (const std::string *)a2 + 2);
  std::string::operator=((std::string *)(*((void *)this + 22) + 432), (const std::string *)a2 + 3);
  uint64_t v4 = *((void *)this + 22);
  if ((const LazuliImsInfo *)(v4 + 456) != (const LazuliImsInfo *)((char *)a2 + 96))
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v4 + 456), *((std::string **)a2 + 12), *((long long **)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3));
    uint64_t v4 = *((void *)this + 22);
  }
  if ((const LazuliImsInfo *)(v4 + 384) != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v4 + 504), *((std::string **)a2 + 15), *((long long **)a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 3));
    uint64_t v4 = *((void *)this + 22);
  }
  *(_DWORD *)(v4 + 52MEMORY[0x223CBB890]((char *)this + 8) = *((_DWORD *)a2 + 36);
  if ((const LazuliImsInfo *)(v4 + 384) != a2)
  {
    BOOL v5 = (const void *)*((void *)a2 + 19);
    if (v5) {
      CFRetain(v5);
    }
    int v6 = *(const void **)(v4 + 536);
    *(void *)(v4 + 53SystemDeterminationManager::handleDumpState_sync(this - 6) = v5;
    uint64_t v7 = v6;
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v7);
  }
}

uint64_t sd::IMSSubscriberModel::getLazuliServices(sd::IMSSubscriberModel *this)
{
  unsigned int v1 = *(_DWORD *)(*((void *)this + 22) + 528);
  if (v1) {
    return v1;
  }
  else {
    return 6528;
  }
}

uint64_t sd::IMSSubscriberModel::updateDeviceInfo(sd::IMSSubscriberModel *this)
{
  return (*(uint64_t (**)(sd::IMSSubscriberModel *, uint64_t, uint64_t))(*(void *)this + 616))(this, *((void *)this + 22) + 328, *((void *)this + 22) + 352);
}

uint64_t sd::IMSSubscriberModel::getPcscfPort(sd::IMSSubscriberModel *this)
{
  v3[209] = *(void **)MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(*(void *)this + 456))(v3);
  uint64_t v1 = HIDWORD(v3[0]);
  sd::RuntimeInfo::~RuntimeInfo(v3);
  return v1;
}

void sd::IMSSubscriberModel::getPcscfList(sd::IMSSubscriberModel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(*(void *)this + 456))(v3);
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v5;
  uint64_t v5 = 0;
  long long v4 = 0uLL;
  sd::RuntimeInfo::~RuntimeInfo(v3);
}

void sd::IMSSubscriberModel::getEffectivePcscfList(sd::IMSSubscriberModel *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  bzero(v20, 0x688uLL);
  (*(void (**)(void **__return_ptr, sd::IMSSubscriberModel *))(*(void *)this + 456))(v20, this);
  if (*(unsigned char *)(*((void *)this + 5) + 49) == 1)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, v21, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v21) >> 3));
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v18 = 0;
    (*(void (**)(void **__return_ptr))(**((void **)this + 15) + 24))(__p);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    (*(void (**)(uint64_t **__return_ptr))(**((void **)this + 13) + 24))(&v14);
    uint64_t v4 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
    uint64_t v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v4);
    uint64_t v6 = v14;
    for (uint64_t i = v15; v6 != i; v6 += 3)
    {
      __int16 v8 = *v5;
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = v6;
        if (*((char *)v6 + 23) < 0) {
          int v9 = (uint64_t *)*v6;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I InterfaceIpAddress: %s", buf, 0xCu);
      }
    }
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t **))(**((void **)this + 13) + 32))(*((void *)this + 13), &v14);
    if ((*(unsigned int (**)(void, void **))(**((void **)this + 13) + 16))(*((void *)this + 13), __p))
    {
      uint64_t v11 = *v5;
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_223AF3000, v11, OS_LOG_TYPE_DEFAULT, "#I XLAT interface detected - ignoring all IPv4 addresses.", buf, 2u);
      }
      v10 &= 2u;
    }
    if ((v10 & 3) - 1 > 1)
    {
      a2->__r_.__value_.__r.__words[0] = 0;
      a2->__r_.__value_.__l.__size_ = 0;
      a2->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, v21, v22, 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v21) >> 3));
    }
    else
    {
      __int16 v12 = *v5;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = asString();
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v13;
        _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I EffectivePcscfList: Only one IP family %s is configured - filtering P-CSCF list.", buf, 0xCu);
      }
      (*(void (**)(void, long long **, uint64_t))(**((void **)this + 13) + 40))(*((void *)this + 13), &v21, v10);
    }
    *(void *)long long buf = &v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
  }
  sd::RuntimeInfo::~RuntimeInfo(v20);
}

void sub_223B3C67C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char *a20,uint64_t a21,void *a22)
{
  a20 = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (a19 < 0) {
    operator delete(__p);
  }
  sd::RuntimeInfo::~RuntimeInfo(&a22);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberModel::resetPcscfList(sd::IMSSubscriberModel *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  bzero(v4, 0x688uLL);
  (*(void (**)(void **__return_ptr, sd::IMSSubscriberModel *))(*(void *)this + 456))(v4, this);
  uint64_t v2 = (void **)v4[5];
  for (uint64_t i = v5; i != v2; i -= 3)
  {
    if (*((char *)i - 1) < 0) {
      operator delete(*(i - 3));
    }
  }
  uint64_t v5 = v2;
  (*(void (**)(sd::IMSSubscriberModel *, void **))(*(void *)this + 448))(this, v4);
  sd::RuntimeInfo::~RuntimeInfo(v4);
}

void sub_223B3C7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sd::IMSSubscriberModel::updatePcscfList(void **a1, std::vector<std::string> *a2, const std::string *a3, int a4, int a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  bzero(&v34, 0x688uLL);
  ((void (*)(void **__return_ptr, void **))(*a1)[57])(&v34, a1);
  uint64_t v32 = a2;
  if ((char *)v37[0].__end_ - (char *)v37[0].__begin_ == (char *)a2->__end_ - (char *)a2->__begin_)
  {
    uint64_t v7 = ((uint64_t (*)(void **))(*a1)[9])(a1);
    __int16 v8 = (NSObject **)(*(uint64_t (**)(void *, uint64_t))(*a1[4] + 16))(a1[4], v7);
    std::vector<std::string>::pointer begin = v37[0].__begin_;
    std::vector<std::string>::pointer end = v37[0].__end_;
    if (v37[0].__begin_ != v37[0].__end_)
    {
      uint64_t v11 = v32->__begin_;
      __int16 v12 = (unsigned __int8 *)v32->__begin_;
      std::vector<std::string>::pointer v13 = v37[0].__begin_;
      while (PersonalityID::operator==((unsigned __int8 *)v13, v12))
      {
        ++v13;
        v12 += 24;
        if (v13 == end) {
          goto LABEL_6;
        }
      }
      __int16 v28 = v8;
      int64_t v17 = (char *)end - (char *)begin;
      while (PersonalityID::operator==((unsigned __int8 *)begin, (unsigned __int8 *)v11))
      {
        ++begin;
        ++v11;
        v17 -= 24;
        if (begin == end) {
          goto LABEL_32;
        }
      }
      if (begin != end)
      {
        if (v17 != 24)
        {
          uint64_t v18 = 0;
          uint64_t v19 = 24 * (v17 / 24);
          BOOL v20 = (unsigned __int8 *)begin;
          while (1)
          {
            std::vector<std::string>::pointer v21 = begin;
            if (begin != (std::vector<std::string>::pointer)v20)
            {
              unint64_t v22 = 0;
              while (1)
              {
                std::vector<std::string>::pointer v21 = &begin[v22 / 0x18];
                if (PersonalityID::operator==((unsigned __int8 *)&begin[v22 / 0x18], v20)) {
                  break;
                }
                v22 += 24;
                if (v18 == v22) {
                  goto LABEL_24;
                }
              }
            }
            if (v21 == (std::vector<std::string>::pointer)v20)
            {
LABEL_24:
              unint64_t v23 = 0;
              uint64_t v24 = 0;
              do
              {
                v24 += PersonalityID::operator==(v20, (unsigned __int8 *)&v11[v23 / 0x18]);
                v23 += 24;
              }
              while (v19 != v23);
              if (!v24) {
                goto LABEL_14;
              }
              uint64_t v25 = v20 + 24;
              uint64_t v26 = 1;
              while (v25 != (unsigned __int8 *)end)
              {
                v26 += PersonalityID::operator==(v20, v25);
                v25 += 24;
              }
              if (v26 != v24) {
                goto LABEL_14;
              }
            }
            v20 += 24;
            v18 += 24;
            if (v20 == (unsigned __int8 *)end) {
              goto LABEL_32;
            }
          }
        }
        goto LABEL_14;
      }
LABEL_32:
      uint64_t v14 = *v28;
      uint64_t v15 = 0;
      if (!os_log_type_enabled(*v28, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_35;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v16 = "#I PcscfList: Got a Proxy update but list is equivalent. No action needed";
      goto LABEL_34;
    }
LABEL_6:
    uint64_t v14 = *v8;
    uint64_t v15 = 0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v16 = "#I PcscfList: Got a Proxy update but list didn't change. No action needed";
LABEL_34:
      _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
      uint64_t v15 = 0;
    }
  }
  else
  {
LABEL_14:
    std::string::operator=(&v36, a3);
    HIDWORD(v34) = a4;
    int v35 = a5;
    if (v37 != v32) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v37, v32->__begin_, (long long *)v32->__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v32->__end_ - (char *)v32->__begin_) >> 3));
    }
    ((void (*)(void **, void **))(*a1)[56])(a1, &v34);
    uint64_t v15 = 1;
  }
LABEL_35:
  sd::RuntimeInfo::~RuntimeInfo(&v34);
  return v15;
}

void sub_223B3CB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sd::RuntimeInfo::~RuntimeInfo((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sd::IMSSubscriberModel::updateDeviceInfo(uint64_t a1, const std::string *a2, const std::string *a3)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  uint64_t v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), v6);
  long long v49 = 0u;
  long long v50 = 0u;
  MEMORY[0x223CBB850](&v49, a2);
  long long v47 = 0u;
  long long v48 = 0u;
  MEMORY[0x223CBB860](&v47, a3);
  if ((!MCC::valid((MCC *)&v49) || (MCC::valid((MCC *)&v47) & 1) == 0)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 88) + 120))(*(void *)(a1 + 88)))
  {
    __int16 v8 = *v7;
    BOOL v9 = os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT);
    uint64_t v10 = 0;
    if (v9)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, "#I Not clearing Device info", buf, 2u);
      uint64_t v10 = 0;
    }
    goto LABEL_47;
  }
  uint64_t v46 = 0;
  *(_OWORD *)uint64_t v44 = 0u;
  long long v45 = 0u;
  *(_OWORD *)uint64_t v43 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v42, 0, sizeof(v42));
  long long v40 = 0u;
  memset(v39, 0, sizeof(v39));
  *(_OWORD *)long long buf = 0u;
  LOBYTE(v4SystemDeterminationManager::handleDumpState_sync(this - 6) = *(unsigned char *)(*(void *)(a1 + 176) + 376);
  uint64_t v11 = *(void *)(a1 + 40);
  int v12 = *(unsigned __int8 *)(v11 + 49);
  BYTE8(v40) = *(unsigned char *)(v11 + 49) == 0;
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 136) + 384))(&v53);
  *(_OWORD *)std::string __p = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
  v42[0] = (void *)v53.__r_.__value_.__r.__words[2];
  if (!v12)
  {
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 136) + 352))(&v53);
    if (SHIBYTE(v42[3]) < 0) {
      operator delete(v42[1]);
    }
    *(std::string *)&v42[1] = v53;
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 56));
    uint64_t v18 = ServiceMap;
    std::string::size_type v19 = *(void *)(MEMORY[0x263F035B0] + 8);
    if ((v19 & 0x8000000000000000) != 0)
    {
      BOOL v20 = (unsigned __int8 *)(v19 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v21 = 5381;
      do
      {
        std::string::size_type v19 = v21;
        unsigned int v22 = *v20++;
        uint64_t v21 = (33 * v21) ^ v22;
      }
      while (v22);
    }
    std::mutex::lock(ServiceMap);
    v53.__r_.__value_.__r.__words[0] = v19;
    unint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v18[1].__m_.__sig, (unint64_t *)&v53);
    if (!v23)
    {
      std::mutex::unlock(v18);
      goto LABEL_7;
    }
    uint64_t v25 = v23[3];
    uint64_t v24 = (std::__shared_weak_count *)v23[4];
    if (v24)
    {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v18);
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      if (!v25)
      {
LABEL_82:
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        goto LABEL_7;
      }
    }
    else
    {
      std::mutex::unlock(v18);
      if (!v25) {
        goto LABEL_7;
      }
    }
    long long v51 = 0uLL;
    uint64_t v52 = 0;
    (*(void (**)(long long *__return_ptr, uint64_t, void, uint64_t))(*(void *)v25 + 176))(&v51, v25, *(unsigned int *)(*(void *)(a1 + 40) + 52), 3);
    uint64_t v29 = v51;
    memset(&v37, 0, sizeof(v37));
    if (*((void *)&v51 + 1) - (void)v51 >= 2uLL
      && *((void *)&v51 + 1) - (void)v51 - 1 == *(unsigned __int8 *)v51)
    {
      ctu::hex((ctu *)(v51 + 2), (const void *)(*((void *)&v51 + 1) - v51 - 2));
      std::string v37 = v53;
      std::string::size_type v30 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
      int v31 = (std::string *)v53.__r_.__value_.__r.__words[0];
      if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v31 = &v37;
      }
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v37.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v33 = &v31->__r_.__value_.__s.__data_[1];
        do
        {
          if (size == 1) {
            break;
          }
          std::string::value_type v34 = *(v33 - 1);
          *(v33 - 1) = *v33;
          *uint64_t v33 = v34;
          v33 += 2;
          size -= 2;
        }
        while (size);
        LODWORD(v30) = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      int v35 = *(unsigned __int8 *)(v29 + 1) >> 4;
      if (v35 != 15)
      {
        if ((v30 & 0x80u) == 0) {
          v36.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v37;
        }
        else {
          v36.__i_ = (std::__wrap_iter<const char *>::iterator_type)v37.__r_.__value_.__r.__words[0];
        }
        std::string::insert(&v37, v36, v35 | 0x30);
        LODWORD(v30) = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      }
      if ((v30 & 0x80) != 0)
      {
        std::string::size_type v30 = v37.__r_.__value_.__l.__size_;
        if (v37.__r_.__value_.__l.__size_
          && *(unsigned char *)(v37.__r_.__value_.__r.__words[0] + v37.__r_.__value_.__l.__size_ - 1) == 102)
        {
          goto LABEL_76;
        }
      }
      else if (v30 && v37.__r_.__value_.__s.__data_[v30 - 1] == 102)
      {
        std::string::size_type v30 = v30;
LABEL_76:
        std::string::resize(&v37, v30 - 1, 0);
      }
    }
    if (SBYTE7(v39[0]) < 0) {
      operator delete(*(void **)buf);
    }
    *(_OWORD *)long long buf = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    *(void *)&v39[0] = *((void *)&v37.__r_.__value_.__l + 2);
    if ((void)v51)
    {
      *((void *)&v51 + 1) = v51;
      operator delete((void *)v51);
    }
    if (!v24) {
      goto LABEL_7;
    }
    goto LABEL_82;
  }
LABEL_7:
  std::__optional_storage_base<CSIPhoneNumber,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CSIPhoneNumber,false> const&>((uint64_t)v39 + 8, *(void *)(a1 + 176) + 128);
  std::string::operator=((std::string *)v43, a2);
  std::string::operator=((std::string *)&v44[1], a3);
  int v13 = sd::UEInfo::DeviceInfo::operator==();
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = *(void *)(a1 + 176);
    std::string::operator=((std::string *)(v14 + 104), (const std::string *)buf);
    std::__optional_storage_base<CSIPhoneNumber,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CSIPhoneNumber,false> const&>(v14 + 128, (uint64_t)v39 + 8);
    *(unsigned char *)(v14 + 272) = BYTE8(v40);
    std::string::operator=((std::string *)(v14 + 280), (const std::string *)__p);
    std::string::operator=((std::string *)(v14 + 304), (const std::string *)&v42[1]);
    std::string::operator=((std::string *)(v14 + 328), (const std::string *)v43);
    std::string::operator=((std::string *)(v14 + 352), (const std::string *)&v44[1]);
    *(unsigned char *)(v14 + 37SystemDeterminationManager::handleDumpState_sync(this - 6) = v46;
    uint64_t v15 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      if ((_BYTE)v40)
      {
        CSIPhoneNumber::getFormatted((uint64_t *)&v53, (CSIPhoneNumber *)((char *)v39 + 8));
        if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v16 = &v53;
        }
        else {
          uint64_t v16 = (std::string *)v53.__r_.__value_.__r.__words[0];
        }
        LODWORD(v51) = 136315138;
        *(void *)((char *)&v51 + 4) = v16;
        _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I USIM: MDN - %s", (uint8_t *)&v51, 0xCu);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v53.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        LODWORD(v51) = 136315138;
        *(void *)((char *)&v51 + 4) = "empty";
        _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I USIM: MDN - %s", (uint8_t *)&v51, 0xCu);
      }
      uint64_t v15 = *v7;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (SHIBYTE(v44[0]) >= 0) {
        uint64_t v26 = v43;
      }
      else {
        uint64_t v26 = (void **)v43[0];
      }
      LODWORD(v53.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
      _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I USIM: MCC - %s", (uint8_t *)&v53, 0xCu);
      uint64_t v15 = *v7;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (v45 >= 0) {
        uint64_t v27 = &v44[1];
      }
      else {
        uint64_t v27 = (void **)v44[1];
      }
      LODWORD(v53.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v53.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
      _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I USIM: MNC - %s", (uint8_t *)&v53, 0xCu);
    }
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(v44[1]);
  }
  if (SHIBYTE(v44[0]) < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v42[3]) < 0) {
    operator delete(v42[1]);
  }
  if (SHIBYTE(v42[0]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = v13 ^ 1u;
  std::__optional_destruct_base<CSIPhoneNumber,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v39 + 8);
  if (SBYTE7(v39[0]) < 0) {
    operator delete(*(void **)buf);
  }
LABEL_47:
  if (SHIBYTE(v48) < 0) {
    operator delete(*((void **)&v47 + 1));
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(*((void **)&v49 + 1));
  }
  return v10;
}

void sub_223B3D300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string::size_type v19 = *(void **)(v17 - 160);
  if (v19)
  {
    *(void *)(v17 - 152) = v19;
    operator delete(v19);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  sd::UEInfo::DeviceInfo::~DeviceInfo(&a16);
  if (*(char *)(v17 - 193) < 0) {
    operator delete(*(void **)(v17 - 216));
  }
  if (*(char *)(v17 - 161) < 0) {
    operator delete(*(void **)(v17 - 184));
  }
  _Unwind_Resume(a1);
}

void sd::UEInfo::DeviceInfo::~DeviceInfo(void **this)
{
  if (*((char *)this + 271) < 0) {
    operator delete(this[31]);
  }
  if (*((char *)this + 247) < 0) {
    operator delete(this[28]);
  }
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(this[22]);
  }
  std::__optional_destruct_base<CSIPhoneNumber,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t sd::IMSSubscriberModel::updateIsimInfo(sd::IMSSubscriberModel *this)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v2);
  uint64_t v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v33 = 0u;
  long long v34 = 0u;
  LODWORD(v33[0]) = **((_DWORD **)this + 22);
  ServiceMap = (std::mutex *)Registry::getServiceMap(*((Registry **)this + 7));
  uint64_t v5 = ServiceMap;
  std::string::size_type v6 = *(void *)(MEMORY[0x263F035B0] + 8);
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      std::string::size_type v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  buf.__r_.__value_.__r.__words[0] = v6;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v5[1].__m_.__sig, (unint64_t *)&buf);
  if (!v10)
  {
    uint64_t v12 = 0;
LABEL_9:
    std::mutex::unlock(v5);
    uint64_t v11 = 0;
    char v13 = 1;
    if (!v12) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v12 = v10[3];
  uint64_t v11 = (std::__shared_weak_count *)v10[4];
  if (!v11) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v5);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  char v13 = 0;
  if (v12)
  {
LABEL_10:
    (*(void (**)(uint64_t, void, void **, long long *, void **, long long *))(*(void *)v12 + 216))(v12, *(unsigned int *)(*((void *)this + 5) + 52), &v33[1], &v35, &__p[1], &v38);
    BYTE4(v33[0]) = 1;
  }
LABEL_11:
  int v14 = sd::UEInfo::IsimInfo::operator==();
  if ((v14 & 1) == 0)
  {
    uint64_t v15 = *((void *)this + 22);
    int v16 = (int)v33[0];
    *(unsigned char *)(v15 + 4) = BYTE4(v33[0]);
    *(_DWORD *)uint64_t v15 = v16;
    std::string::operator=((std::string *)(v15 + 8), (const std::string *)&v33[1]);
    if ((void **)v15 != v33)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v15 + 32), (std::string *)v35, *((long long **)&v35 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
      std::string::operator=((std::string *)(v15 + 56), (const std::string *)&__p[1]);
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v15 + 80), (std::string *)v38, *((long long **)&v38 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v38 + 1) - v38) >> 3));
    }
    uint64_t v17 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      if (LODWORD(v33[0]) == 2) {
        uint64_t v18 = "unknown";
      }
      else {
        uint64_t v18 = (const char *)asStringBool();
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#I ISIM: Present - %s", (uint8_t *)&buf, 0xCu);
      uint64_t v17 = *v3;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v19 = &__p[1];
      if (v37 < 0) {
        std::string::size_type v19 = (void **)__p[1];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
      _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#I ISIM: DOMAIN - %{public}s", (uint8_t *)&buf, 0xCu);
      uint64_t v17 = *v3;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      if (v34 >= 0) {
        BOOL v20 = &v33[1];
      }
      else {
        BOOL v20 = (void **)v33[1];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
      _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#I ISIM: Private Identity - %s", (uint8_t *)&buf, 0xCu);
      uint64_t v17 = *v3;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL
                                                                             * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3);
      _os_log_impl(&dword_223AF3000, v17, OS_LOG_TYPE_DEFAULT, "#I ISIM: Num public identities - %lu", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v21 = (long long *)*((void *)&v35 + 1);
    for (uint64_t i = (long long *)v35; i != v21; uint64_t i = (long long *)((char *)i + 24))
    {
      memset(&buf, 0, sizeof(buf));
      if (*((char *)i + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)i, *((void *)i + 1));
      }
      else
      {
        long long v23 = *i;
        buf.__r_.__value_.__r.__words[2] = *((void *)i + 2);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v23;
      }
      uint64_t v24 = *v3;
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
      {
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long v40 = 136315138;
        uint64_t v41 = p_buf;
        _os_log_impl(&dword_223AF3000, v24, OS_LOG_TYPE_DEFAULT, "#I ISIM: Public Identity - %s", v40, 0xCu);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v26 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL
                                                                             * ((uint64_t)(*((void *)&v38 + 1) - v38) >> 3);
      _os_log_impl(&dword_223AF3000, v26, OS_LOG_TYPE_DEFAULT, "#I ISIM: Num PCSCFs - %lu", (uint8_t *)&buf, 0xCu);
    }
    __int16 v28 = (long long *)*((void *)&v38 + 1);
    for (j = (long long *)v38; j != v28; j = (long long *)((char *)j + 24))
    {
      memset(&buf, 0, sizeof(buf));
      if (*((char *)j + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)j, *((void *)j + 1));
      }
      else
      {
        long long v29 = *j;
        buf.__r_.__value_.__r.__words[2] = *((void *)j + 2);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v29;
      }
      std::string::size_type v30 = *v3;
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
      {
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v31 = &buf;
        }
        else {
          int v31 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long v40 = 136446210;
        uint64_t v41 = v31;
        _os_log_impl(&dword_223AF3000, v30, OS_LOG_TYPE_DEFAULT, "#I ISIM: PCSCF - %{public}s", v40, 0xCu);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
  }
  if ((v13 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[1]);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[1]);
  }
  return v14 ^ 1u;
}

void sub_223B3DA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v4 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  sd::UEInfo::IsimInfo::~IsimInfo((void **)va);
  _Unwind_Resume(a1);
}

void sd::UEInfo::IsimInfo::~IsimInfo(void **this)
{
  uint64_t v2 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  uint64_t v2 = this + 4;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

BOOL sd::IMSSubscriberModel::updatePhoneNumber(uint64_t a1, CSIPhoneNumber **a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  uint64_t v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), v4);
  std::string::size_type v6 = v5;
  uint64_t v7 = *a2;
  uint64_t v8 = *(void *)(a1 + 176);
  if (!*a2)
  {
    if (!*(unsigned char *)(v8 + 264)) {
      return 0;
    }
    long long v23 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      CSIPhoneNumber::getFullNumber((uint64_t *)&__p, (CSIPhoneNumber *)(v8 + 128));
      if ((v36 & 0x80u) == 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = __p;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = p_p;
      _os_log_impl(&dword_223AF3000, v23, OS_LOG_TYPE_DEFAULT, "#I PhoneNumber: cleared, erase old number: %s", (uint8_t *)&buf, 0xCu);
      if ((char)v36 < 0) {
        operator delete(__p);
      }
      uint64_t v8 = *(void *)(a1 + 176);
    }
    std::__optional_destruct_base<CSIPhoneNumber,false>::reset[abi:ne180100](v8 + 128);
    return 1;
  }
  if (!*(unsigned char *)(v8 + 264))
  {
    uint64_t v25 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      CSIPhoneNumber::getFullNumber((uint64_t *)&__p, v7);
      if ((v36 & 0x80u) == 0) {
        uint64_t v26 = &__p;
      }
      else {
        uint64_t v26 = __p;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v26;
      _os_log_impl(&dword_223AF3000, v25, OS_LOG_TYPE_DEFAULT, "#I PhoneNumber: received first: %s", (uint8_t *)&buf, 0xCu);
      if ((char)v36 < 0) {
        operator delete(__p);
      }
      uint64_t v7 = *a2;
      uint64_t v8 = *(void *)(a1 + 176);
    }
    std::optional<CSIPhoneNumber>::operator=[abi:ne180100]<CSIPhoneNumber&,void>(v8 + 128, (uint64_t)v7);
    return 1;
  }
  CSIPhoneNumber::getBaseNumber((uint64_t *)&__p, (CSIPhoneNumber *)(v8 + 128));
  CSIPhoneNumber::getBaseNumber((uint64_t *)&buf, *a2);
  unsigned __int8 v9 = v36;
  if ((v36 & 0x80u) == 0) {
    size_t v10 = v36;
  }
  else {
    size_t v10 = __n;
  }
  uint64_t v11 = v42;
  int v12 = (char)v42;
  if ((v42 & 0x80u) != 0) {
    uint64_t v11 = *((void *)&buf + 1);
  }
  if (v10 != v11)
  {
    BOOL v22 = 0;
    if (((char)v42 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_65;
  }
  if ((v42 & 0x80u) == 0) {
    p_long long buf = (unsigned __int8 *)&buf;
  }
  else {
    p_long long buf = (unsigned __int8 *)buf;
  }
  if ((char)v36 < 0)
  {
    BOOL v22 = memcmp(__p, p_buf, __n) == 0;
    goto LABEL_41;
  }
  if (v36)
  {
    uint64_t v14 = v36 - 1;
    uint64_t v15 = &__p;
    do
    {
      int v17 = *(unsigned __int8 *)v15;
      uint64_t v15 = (void **)((char *)v15 + 1);
      int v16 = v17;
      int v19 = *p_buf++;
      int v18 = v19;
      BOOL v21 = v14-- != 0;
      BOOL v22 = v16 == v18;
    }
    while (v16 == v18 && v21);
LABEL_41:
    if ((v12 & 0x80000000) == 0) {
      goto LABEL_42;
    }
LABEL_65:
    operator delete((void *)buf);
    if ((v36 & 0x80) == 0) {
      goto LABEL_43;
    }
    goto LABEL_66;
  }
  BOOL v22 = 1;
  if ((char)v42 < 0) {
    goto LABEL_65;
  }
LABEL_42:
  if ((v9 & 0x80) == 0) {
    goto LABEL_43;
  }
LABEL_66:
  operator delete(__p);
LABEL_43:
  uint64_t v27 = *v6;
  BOOL result = os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
  if (!v22)
  {
    if (result)
    {
      CSIPhoneNumber::getFullNumber((uint64_t *)&__p, *a2);
      int v30 = (char)v36;
      int v31 = (void **)__p;
      CSIPhoneNumber::getFullNumber((uint64_t *)&buf, (CSIPhoneNumber *)(*(void *)(a1 + 176) + 128));
      uint64_t v32 = &__p;
      if (v30 < 0) {
        uint64_t v32 = v31;
      }
      if ((v42 & 0x80u) == 0) {
        uint64_t v33 = &buf;
      }
      else {
        uint64_t v33 = (long long *)buf;
      }
      *(_DWORD *)long long v37 = 136315394;
      long long v38 = v32;
      __int16 v39 = 2080;
      long long v40 = v33;
      _os_log_impl(&dword_223AF3000, v27, OS_LOG_TYPE_DEFAULT, "#I PhoneNumber: received new: %s, replaced old number: %s", v37, 0x16u);
      if ((char)v42 < 0) {
        operator delete((void *)buf);
      }
      if ((char)v36 < 0) {
        operator delete(__p);
      }
    }
    std::optional<CSIPhoneNumber>::operator=[abi:ne180100]<CSIPhoneNumber&,void>(*(void *)(a1 + 176) + 128, (uint64_t)*a2);
    return 1;
  }
  if (result)
  {
    CSIPhoneNumber::getFullNumber((uint64_t *)&__p, *a2);
    if ((v36 & 0x80u) == 0) {
      long long v29 = &__p;
    }
    else {
      long long v29 = __p;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v29;
    _os_log_impl(&dword_223AF3000, v27, OS_LOG_TYPE_DEFAULT, "#I PhoneNumber: remains the same: %s", (uint8_t *)&buf, 0xCu);
    if ((char)v36 < 0) {
      operator delete(__p);
    }
    return 0;
  }
  return result;
}

void sub_223B3DF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<CSIPhoneNumber>::operator=[abi:ne180100]<CSIPhoneNumber&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    *(void *)a1 = *(void *)a2;
    std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
    std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
    char v4 = *(unsigned char *)(a2 + 60);
    *(_DWORD *)(a1 + 5SystemDeterminationManager::handleDumpState_sync(this - 6) = *(_DWORD *)(a2 + 56);
    *(unsigned char *)(a1 + 60) = v4;
    std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
    std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
    char v5 = *(unsigned char *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(unsigned char *)(a1 + 12MEMORY[0x223CBB890]((char *)this + 8) = v5;
  }
  else
  {
    CSIPhoneNumber::CSIPhoneNumber(a1, a2);
    *(unsigned char *)(a1 + 13SystemDeterminationManager::handleDumpState_sync(this - 6) = 1;
  }
  return a1;
}

void std::__optional_destruct_base<CSIPhoneNumber,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 13SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
  }
}

uint64_t sd::IMSSubscriberModel::isDeviceInfoValid(sd::IMSSubscriberModel *this)
{
  uint64_t v2 = sd::UEInfo::DeviceInfo::valid((sd::UEInfo::DeviceInfo *)(*((void *)this + 22) + 104));
  if (!v2) {
    return v2;
  }
  CSIPhoneNumber::getFullNumber((uint64_t *)&v9, (CSIPhoneNumber *)(*((void *)this + 22) + 128));
  if (SHIBYTE(v11) < 0)
  {
    uint64_t v3 = v10;
    operator delete(v9);
    if (v3) {
      return v2;
    }
  }
  else if (HIBYTE(v11))
  {
    return v2;
  }
  if ((*(unsigned int (**)(void, BOOL))(**((void **)this + 11) + 176))(*((void *)this + 11), **((_DWORD **)this + 20) == 2) == 1)return 0; {
  unsigned __int8 v9 = 0;
  }
  size_t v10 = 0;
  uint64_t v11 = 0;
  (*(void (**)(char **__return_ptr))(**((void **)this + 11) + 184))(&v9);
  if (v9 == v10)
  {
    BOOL v6 = 1;
    if (v9)
    {
LABEL_15:
      size_t v10 = v9;
      operator delete(v9);
    }
  }
  else
  {
    char v4 = v9 + 8;
    do
    {
      int v5 = *((_DWORD *)v4 - 2);
      BOOL v6 = v5 != 1;
      BOOL v7 = v5 == 1 || v4 == v10;
      v4 += 8;
    }
    while (!v7);
    if (v9) {
      goto LABEL_15;
    }
  }
  if (!v6) {
    return 0;
  }
  return v2;
}

void sd::IMSSubscriberModel::identityFromUriType(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  memset(&v28, 0, sizeof(v28));
  uint64_t v6 = *(void *)(a1 + 176);
  if (*a2 == 1)
  {
    if (*(unsigned char *)(v6 + 264))
    {
      CSIPhoneNumber::getFullNumber((uint64_t *)&v15, (CSIPhoneNumber *)(v6 + 128));
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
      v28.__r_.__value_.__r.__words[2] = v16;
    }
  }
  else
  {
    std::string::operator=(&v28, (const std::string *)(v6 + 104));
  }
  long long v26 = 0uLL;
  uint64_t v27 = 0;
  int v7 = a2[1];
  if (v7 == 1)
  {
    sd::UEInfo::DeviceInfo::domainFromImsi((uint64_t *)&v15, (sd::UEInfo::DeviceInfo *)(*(void *)(a1 + 176) + 104));
    long long v26 = v15;
    uint64_t v27 = v16;
  }
  else if (v7 == 2)
  {
    uint64_t v8 = *(void *)(a1 + 88);
    sd::UEInfo::DeviceInfo::domainFromImsi((uint64_t *)v24, (sd::UEInfo::DeviceInfo *)(*(void *)(a1 + 176) + 104));
    (*(void (**)(long long *__return_ptr, uint64_t, void **, BOOL))(*(void *)v8 + 168))(&v15, v8, v24, **(_DWORD **)(a1 + 160) == 2);
    long long v26 = v15;
    uint64_t v27 = v16;
    BYTE7(v1SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
    LOBYTE(v15) = 0;
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
  uint64_t v23 = 0;
  long long v21 = 0u;
  memset(v22, 0, sizeof(v22));
  *(_OWORD *)std::string __p = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned __int8 v9 = &v28;
  }
  else {
    unsigned __int8 v9 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v28.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)v9, size);
  int v11 = SHIBYTE(v27);
  if (v27 >= 0) {
    uint64_t v12 = HIBYTE(v27);
  }
  else {
    uint64_t v12 = *((void *)&v26 + 1);
  }
  if (v12)
  {
    char v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"@", 1);
    if (v11 >= 0) {
      uint64_t v14 = &v26;
    }
    else {
      uint64_t v14 = (long long *)v26;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v12);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v15 + 8, a3);
  *(void *)&long long v15 = *MEMORY[0x263F8C2C8];
  *(void *)((char *)&v15 + *(void *)(v15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v15 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x223CBBDB0](v22);
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_223B3E474(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 97) < 0) {
    operator delete(*(void **)(v1 - 120));
  }
  if (*(char *)(v1 - 41) < 0) {
    operator delete(*(void **)(v1 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sd::IMSSubscriberModel::getPrivateIdentity(sd::IMSSubscriberModel *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((sd::UEInfo::IsimInfo::valid(*((sd::UEInfo::IsimInfo **)this + 22)) & 1) != 0
    && ((*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 304))(this) & 1) == 0)
  {
    uint64_t v8 = *((void *)this + 22);
    if (*(char *)(v8 + 31) < 0)
    {
      size_t v10 = *(const std::string::value_type **)(v8 + 8);
      std::string::size_type v11 = *(void *)(v8 + 16);
      std::string::__init_copy_ctor_external(a2, v10, v11);
    }
    else
    {
      long long v9 = *(_OWORD *)(v8 + 8);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v8 + 24);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v9;
    }
  }
  else
  {
    uint64_t v12 = (*(uint64_t (**)(void, BOOL))(**((void **)this + 11) + 176))(*((void *)this + 11), **((_DWORD **)this + 20) == 2);
    uint64_t v4 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
    int v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v4);
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    sd::IMSSubscriberModel::identityFromUriType((uint64_t)this, &v12, a2);
    uint64_t v6 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v7 = a2;
      }
      else {
        int v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v14 = v7;
      _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I USIM: Private Identity - %s", buf, 0xCu);
    }
  }
}

void sd::IMSSubscriberModel::getPublicIdentities(sd::IMSSubscriberModel *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  if (sd::UEInfo::IsimInfo::valid(*((sd::UEInfo::IsimInfo **)this + 22))
    && ((*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 304))(this) & 1) == 0)
  {
    uint64_t v22 = *((void *)this + 22);
    *(void *)(a2 + MEMORY[0x223CBB890]((char *)this + 8) = 0;
    *(void *)(a2 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
    *(void *)a2 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a2, *(long long **)(v22 + 32), *(long long **)(v22 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v22 + 40) - *(void *)(v22 + 32)) >> 3));
    *(_DWORD *)(a2 + 24) = 2;
  }
  else
  {
    uint64_t v39 = a2;
    memset(&v44, 0, sizeof(v44));
    std::string __p = 0;
    unsigned __int8 v42 = 0;
    uint64_t v43 = 0;
    (*(void (**)(void **__return_ptr))(**((void **)this + 11) + 184))(&__p);
    uint64_t v4 = (unint64_t *)__p;
    int v5 = v42;
    if (__p != v42)
    {
      do
      {
        unint64_t v40 = *v4;
        if (HIDWORD(v40))
        {
          sd::IMSSubscriberModel::identityFromUriType((uint64_t)this, &v40, &v45);
          char v13 = std::string::insert(&v45, 0, "sip:", 4uLL);
          std::string::size_type v7 = v13->__r_.__value_.__r.__words[0];
          v46[0] = v13->__r_.__value_.__l.__size_;
          *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
          char v8 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          std::vector<std::string>::pointer end = v44.__end_;
          if (v44.__end_ >= v44.__end_cap_.__value_)
          {
            unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_ - (char *)v44.__begin_) >> 3);
            unint64_t v16 = v10 + 1;
            if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) > v16) {
              unint64_t v16 = 0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v12 = v16;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v44.__end_cap_;
            if (v12) {
LABEL_23:
            }
              long long v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v44.__end_cap_, v12);
            else {
              long long v17 = 0;
            }
LABEL_26:
            long long v18 = v17 + v10;
            __v.__first_ = v17;
            __v.__begin_ = v18;
            __v.__end_cap_.__value_ = &v17[v12];
            std::string::size_type v19 = v46[0];
            v18->__r_.__value_.__r.__words[0] = v7;
            v18->__r_.__value_.__l.__size_ = v19;
            *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v46 + 7);
            *((unsigned char *)&v18->__r_.__value_.__s + 23) = v8;
            __v.__end_ = v18 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v44, &__v);
            uint64_t v15 = v44.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            goto LABEL_27;
          }
        }
        else
        {
          sd::IMSSubscriberModel::identityFromUriType((uint64_t)this, &v40, &v45);
          uint64_t v6 = std::string::insert(&v45, 0, "tel:", 4uLL);
          std::string::size_type v7 = v6->__r_.__value_.__r.__words[0];
          v46[0] = v6->__r_.__value_.__l.__size_;
          *(void *)((char *)v46 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
          char v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
          v6->__r_.__value_.__l.__size_ = 0;
          v6->__r_.__value_.__r.__words[2] = 0;
          v6->__r_.__value_.__r.__words[0] = 0;
          std::vector<std::string>::pointer end = v44.__end_;
          if (v44.__end_ >= v44.__end_cap_.__value_)
          {
            unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_ - (char *)v44.__begin_) >> 3);
            unint64_t v11 = v10 + 1;
            if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) > v11) {
              unint64_t v11 = 0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v12 = v11;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v44.__end_cap_;
            if (v12) {
              goto LABEL_23;
            }
            long long v17 = 0;
            goto LABEL_26;
          }
        }
        std::string::size_type v14 = v46[0];
        end->__r_.__value_.__r.__words[0] = v7;
        end->__r_.__value_.__l.__size_ = v14;
        *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v46 + 7);
        *((unsigned char *)&end->__r_.__value_.__s + 23) = v8;
        uint64_t v15 = end + 1;
LABEL_27:
        v44.__end_ = v15;
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
        ++v4;
      }
      while (v4 != v5);
    }
    if (v44.__begin_ == v44.__end_)
    {
      sd::UEInfo::DeviceInfo::publicIdentityFromImsi((uint64_t *)&v45, (sd::UEInfo::DeviceInfo *)(*((void *)this + 22) + 104));
      std::vector<std::string>::pointer v20 = v44.__end_;
      if (v44.__end_ >= v44.__end_cap_.__value_)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_ - (char *)v44.__begin_) >> 3);
        unint64_t v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) > v24) {
          unint64_t v24 = 0x5555555555555556 * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_cap_.__value_ - (char *)v44.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v25 = v24;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v44.__end_cap_;
        if (v25) {
          long long v26 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v44.__end_cap_, v25);
        }
        else {
          long long v26 = 0;
        }
        uint64_t v27 = v26 + v23;
        __v.__first_ = v26;
        __v.__begin_ = v27;
        __v.__end_cap_.__value_ = &v26[v25];
        long long v28 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
        v27->__r_.__value_.__r.__words[2] = v45.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
        memset(&v45, 0, sizeof(v45));
        __v.__end_ = v27 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v44, &__v);
        long long v29 = v44.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v44.__end_ = v29;
        if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v45.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v21 = *(_OWORD *)&v45.__r_.__value_.__l.__data_;
        v44.__end_->__r_.__value_.__r.__words[2] = v45.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
        v44.__end_ = v20 + 1;
      }
    }
    uint64_t v30 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
    int v31 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v30);
    uint64_t v32 = *v31;
    if (os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__v.__first_) = 134217984;
      *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__first_ + 4) = (std::__split_buffer<std::string>::pointer)(0xAAAAAAAAAAAAAAABLL * (((char *)v44.__end_ - (char *)v44.__begin_) >> 3));
      _os_log_impl(&dword_223AF3000, v32, OS_LOG_TYPE_DEFAULT, "#I USIM: Num public identities - %lu", (uint8_t *)&__v, 0xCu);
    }
    std::vector<std::string>::pointer begin = v44.__begin_;
    std::vector<std::string>::pointer v33 = v44.__end_;
    if (v44.__begin_ == v44.__end_)
    {
      long long v38 = (long long *)v44.__begin_;
    }
    else
    {
      do
      {
        memset(&__v, 0, 24);
        if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__v, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v35 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
          __v.__end_ = (std::__split_buffer<std::string>::pointer)begin->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__v.__first_ = v35;
        }
        unsigned __int8 v36 = *v31;
        if (os_log_type_enabled(*v31, OS_LOG_TYPE_DEFAULT))
        {
          if (SHIBYTE(__v.__end_) >= 0) {
            p_v = &__v;
          }
          else {
            p_v = __v.__first_;
          }
          LODWORD(v45.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v45.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_v;
          _os_log_impl(&dword_223AF3000, v36, OS_LOG_TYPE_DEFAULT, "#I USIM: Public Identity - %s", (uint8_t *)&v45, 0xCu);
        }
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        ++begin;
      }
      while (begin != v33);
      long long v38 = (long long *)v44.__begin_;
      std::vector<std::string>::pointer begin = v44.__end_;
    }
    *(void *)uint64_t v39 = 0;
    *(void *)(v39 + MEMORY[0x223CBB890]((char *)this + 8) = 0;
    *(void *)(v39 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v39, v38, (long long *)begin, 0xAAAAAAAAAAAAAAABLL * (((char *)begin - (char *)v38) >> 3));
    *(_DWORD *)(v39 + 24) = 1;
    if (__p)
    {
      unsigned __int8 v42 = (unint64_t *)__p;
      operator delete(__p);
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
}

void sub_223B3ED84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t *a15, uint64_t *a16, uint64_t a17, uint64_t a18, std::__split_buffer<std::string> *a19, uint64_t a20,void *__pa,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a26 < 0) {
    operator delete(__pa);
  }
  if (a15)
  {
    a16 = a15;
    operator delete(a15);
  }
  a15 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberModel::getImsDomain(sd::IMSSubscriberModel *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((sd::UEInfo::IsimInfo::valid(*((sd::UEInfo::IsimInfo **)this + 22)) & 1) != 0
    && ((*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 304))(this) & 1) == 0)
  {
    uint64_t v9 = *((void *)this + 22);
    if (*(char *)(v9 + 79) < 0)
    {
      unint64_t v11 = *(const std::string::value_type **)(v9 + 56);
      std::string::size_type v12 = *(void *)(v9 + 64);
      std::string::__init_copy_ctor_external(a2, v11, v12);
    }
    else
    {
      long long v10 = *(_OWORD *)(v9 + 56);
      a2->__r_.__value_.__r.__words[2] = *(void *)(v9 + 72);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v10;
    }
  }
  else
  {
    uint64_t v4 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
    int v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v4);
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    a2->__r_.__value_.__r.__words[0] = 0;
    uint64_t v6 = *((void *)this + 11);
    sd::UEInfo::DeviceInfo::domainFromImsi((uint64_t *)__p, (sd::UEInfo::DeviceInfo *)(*((void *)this + 22) + 104));
    (*(void (**)(uint64_t, unsigned char *, BOOL))(*(void *)v6 + 168))(v6, __p, **((_DWORD **)this + 20) == 2);
    if (v14 < 0) {
      operator delete(*(void **)__p);
    }
    std::string::size_type v7 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v8 = a2;
      }
      else {
        char v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string __p = 136446210;
      *(void *)&__p[4] = v8;
      _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I USIM: DOMAIN - %{public}s", __p, 0xCu);
    }
  }
}

void sub_223B3F044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sd::IMSSubscriberModel::isLazuliCarrierBased(sd::IMSSubscriberModel *this)
{
  CFDictionaryRef v1 = *(const __CFDictionary **)(*((void *)this + 22) + 536);
  if (v1) {
    uint64_t v2 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
  }
  else {
    uint64_t v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v1);
  Value = CFDictionaryGetValue(MutableCopy, @"CarrierBased");
  uint64_t v4 = Value;
  if (Value)
  {
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFBooleanGetTypeID()) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v6) {
    BOOL v8 = v6 == (const void *)*MEMORY[0x263EFFB40];
  }
  else {
    BOOL v8 = 0;
  }
  uint64_t v7 = v8;
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&MutableCopy);
  return v7;
}

void sub_223B3F1B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberModel::createLimitedAccessRegParams(sd::IMSSubscriberModel *this, ims::NetworkConfig *a2)
{
  v26[209] = *(void **)MEMORY[0x263EF8340];
  bzero(v26, 0x688uLL);
  sd::DataCache::getRuntimeInfo((sd::DataCache *)v26, *((void *)this + 24));
  sd::UEInfo::DeviceInfo::privateIdentityFromImsi((uint64_t *)&__v, (sd::UEInfo::DeviceInfo *)(*((void *)this + 22) + 104));
  uint64_t v4 = (void **)((char *)a2 + 408);
  if (*((char *)a2 + 431) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)&__v.__first_;
  *((void *)a2 + 53) = __v.__end_;
  sd::UEInfo::DeviceInfo::publicIdentityFromImsi((uint64_t *)__p, (sd::UEInfo::DeviceInfo *)(*((void *)this + 22) + 104));
  unint64_t v6 = *((void *)a2 + 58);
  unint64_t v5 = *((void *)a2 + 59);
  if (v6 >= v5)
  {
    uint64_t v8 = *((void *)a2 + 57);
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v8) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - v8) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)((char *)a2 + 472);
    if (v12) {
      char v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)a2 + 472, v12);
    }
    else {
      char v13 = 0;
    }
    char v14 = v13 + v9;
    __v.__first_ = v13;
    __v.__begin_ = v14;
    __v.__end_cap_.__value_ = &v13[v12];
    long long v15 = *(_OWORD *)__p;
    v14->__r_.__value_.__r.__words[2] = (std::string::size_type)v24;
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    __p[1] = 0;
    unint64_t v24 = 0;
    __p[0] = 0;
    __v.__end_ = v14 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2 + 19, &__v);
    uint64_t v16 = *((void *)a2 + 58);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v17 = SHIBYTE(v24);
    *((void *)a2 + 5MEMORY[0x223CBB890]((char *)this + 8) = v16;
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v7 = *(_OWORD *)__p;
    *(void *)(v6 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v24;
    *(_OWORD *)unint64_t v6 = v7;
    *((void *)a2 + 5MEMORY[0x223CBB890]((char *)this + 8) = v6 + 24;
  }
  sd::UEInfo::DeviceInfo::domainFromImsi((uint64_t *)&__v, (sd::UEInfo::DeviceInfo *)(*((void *)this + 22) + 104));
  long long v18 = (void **)((char *)a2 + 432);
  if (*((char *)a2 + 455) < 0) {
    operator delete(*v18);
  }
  *(_OWORD *)long long v18 = *(_OWORD *)&__v.__first_;
  *((void *)a2 + 5SystemDeterminationManager::handleDumpState_sync(this - 6) = __v.__end_;
  (*(void (**)(std::__split_buffer<std::string> *__return_ptr, sd::IMSSubscriberModel *))(*(void *)this + 584))(&__v, this);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a2 + 20);
  *((_OWORD *)a2 + 30) = *(_OWORD *)&__v.__first_;
  *((void *)a2 + 62) = __v.__end_;
  memset(&__v, 0, 24);
  __p[0] = &__v;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::string::operator=((std::string *)a2 + 16, (const std::string *)(*((void *)this + 22) + 104));
  (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(**((void **)this + 15) + 40))(&__v);
  std::string::size_type v19 = (void **)((char *)a2 + 504);
  if (*((char *)a2 + 527) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)std::string::size_type v19 = *(_OWORD *)&__v.__first_;
  *((void *)a2 + 65) = __v.__end_;
  (*(void (**)(void))(**((void **)this + 11) + 352))(*((void *)this + 11));
  *((_DWORD *)a2 + 54) = sd::imsServiceMaskToIpTelephonyServiceMask();
  *((_DWORD *)a2 + 7SystemDeterminationManager::handleDumpState_sync(this - 6) = LOBYTE(v26[0]);
  *((_DWORD *)a2 + 74) = sd::IMSSubscriberModel::getPreferredMediaStack(this, (sd::IMSSubscriberConfigInterface *)*(unsigned __int8 *)(*((void *)this + 24) + 32));
  memset(&__v, 0, 24);
  uint64_t v20 = *((void *)this + 22);
  if (*(unsigned char *)(v20 + 264))
  {
    CSIPhoneNumber::getBaseNumber((uint64_t *)__p, (CSIPhoneNumber *)(v20 + 128));
    *(_OWORD *)&__v.__first_ = *(_OWORD *)__p;
    __v.__end_ = v24;
  }
  std::string::operator=((std::string *)a2 + 15, (const std::string *)&__v);
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v24 = 0;
  (*(void (**)(void **__return_ptr, sd::IMSSubscriberModel *, void))(*(void *)this + 648))(__p, this, 0);
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v22 = 0;
  (*(void (**)(void **__return_ptr, sd::IMSSubscriberModel *, void))(*(void *)this + 656))(v21, this, 0);
  ims::AccessNetwork::set();
  ims::AccessNetwork::set();
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  sd::RuntimeInfo::~RuntimeInfo(v26);
}

void sub_223B3F5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *__p, int a8, __int16 a9, char a10, char a11, std::__split_buffer<std::string> *a12, uint64_t a13, void *__pa, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,...)
{
  va_start(va, a25);
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a20);
  if (a19 < 0) {
    operator delete(__pa);
  }
  sd::RuntimeInfo::~RuntimeInfo((void **)va);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberModel::createInitialRegParams(sd::IMSSubscriberModel *this, ims::StackConfig *a2, int a3)
{
  void (***v45)(uint64_t *__return_ptr, void, std::string *);
  char v46;
  NSObject *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  long long v51;
  std::string *v52;
  long long v53;
  const std::string::value_type *v54;
  std::string::size_type v55;
  std::string *v56;
  char *v57;
  char v58;
  std::vector<std::string>::pointer end;
  std::string::size_type v60;
  std::string *v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  std::vector<std::string>::pointer v66;
  long long v67;
  std::string *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  NSObject *v75;
  void *v76;
  NSObject *v77;
  NSObject *v78;
  unint64_t v79;
  long long *v80;
  long long *k;
  long long v82;
  NSObject *v83;
  std::string *v84;
  NSObject *v85;
  unint64_t v86;
  long long *v87;
  long long *m;
  long long v89;
  NSObject *v90;
  std::string *v91;
  CFDictionaryRef v92;
  uint64_t (*v93)(uint64_t);
  CFAllocatorRef v94;
  std::string *MutableCopy;
  std::vector<std::string>::pointer v96;
  std::string *Mutable;
  std::vector<std::string>::pointer v98;
  NSObject *v99;
  uint64_t v100;
  std::string *v101;
  std::__split_buffer<std::string>::pointer v102;
  const void **v103;
  std::string *v104;
  std::__split_buffer<std::string>::pointer v105;
  std::string *v106;
  std::__split_buffer<std::string>::pointer v107;
  std::string *v108;
  std::__split_buffer<std::string>::pointer v109;
  std::string *v110;
  std::__split_buffer<std::string>::pointer v111;
  std::string *v112;
  std::__split_buffer<std::string>::pointer v113;
  std::string *v114;
  std::__split_buffer<std::string>::pointer v115;
  __CFDictionary *v116;
  std::string::size_type v117;
  const void *v118;
  const void *v119;
  const void *Value;
  const void *v121;
  CFTypeID v122;
  const void *v123;
  const void *v124;
  const void *v125;
  CFTypeID v126;
  const void *v127;
  NSObject *v128;
  uint64_t v129;
  uint64_t v130;
  unsigned int v131;
  const void *v132;
  const void *v133;
  CFTypeID v134;
  const void *v135;
  const void *v136;
  const void *v137;
  CFTypeID v138;
  const void *v139;
  const void *v140;
  const void *v141;
  CFTypeID v142;
  std::mutex *v143;
  std::mutex *v144;
  std::string::size_type v145;
  unsigned __int8 *v146;
  uint64_t v147;
  unsigned int v148;
  void *v149;
  std::__shared_weak_count *v150;
  uint64_t v151;
  unsigned int v152;
  CFAllocatorRef v153;
  std::__shared_weak_count *v154;
  atomic_ullong *p_shared_owners;
  const void *v156;
  const void *v157;
  CFTypeID v158;
  const void *v159;
  int v160;
  int v161;
  NSObject *v162;
  std::string *v163;
  std::string *v164;
  long long *v165;
  long long *n;
  long long v167;
  NSObject *v168;
  void *v169;
  NSObject *v170;
  std::string *v171;
  std::string *ii;
  long long v173;
  NSObject *v174;
  void *v175;
  NSObject *v176;
  long long *v177;
  long long *v178;
  long long v179;
  NSObject *v180;
  void *v181;
  std::string *v182;
  long long *v183;
  std::vector<std::string> *v184;
  uint64_t v185;
  uint64_t v186;
  std::mutex *v187;
  std::mutex *v188;
  uint64_t v189;
  unsigned __int8 *v190;
  uint64_t v191;
  unsigned int v192;
  void *v193;
  std::__shared_weak_count *v194;
  uint64_t v195;
  char v196;
  int v197;
  NSObject *v198;
  BOOL v199;
  std::string::size_type v200;
  std::__split_buffer<std::string>::pointer v201;
  std::string::size_type v202;
  int v203;
  NSObject *v204;
  void *v205;
  const void *v206;
  CFTypeID v207;
  std::mutex *v208;
  std::mutex *v209;
  std::string::size_type v210;
  unsigned __int8 *v211;
  uint64_t v212;
  unsigned int v213;
  void *v214;
  std::__shared_weak_count *v215;
  uint64_t v216;
  void *v217;
  NSObject *v218;
  unsigned int *v219;
  CFTypeID v220;
  CFNumberRef v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  std::string *v225;
  void *v226;
  NSObject *v227;
  unsigned int *v228;
  CFTypeID v229;
  CFNumberRef v230;
  const void *v231;
  __CFDictionary *v232;
  std::string *v233;
  std::__split_buffer<std::string>::pointer v234;
  NSObject *v235;
  const char *v236;
  const char *v237;
  const char *v238;
  std::vector<std::string>::pointer v239;
  int v240;
  NSObject *v241;
  std::string *v242;
  std::string::size_type v243;
  std::string *v244;
  std::string::size_type v245;
  std::string *v246;
  long long v247;
  std::string *v248;
  long long v249;
  const std::string::value_type *v250;
  std::string::size_type v251;
  std::string *v252;
  char *v253;
  char v254;
  std::vector<std::string>::pointer v255;
  std::string::size_type v256;
  std::string *v257;
  unint64_t v258;
  unint64_t v259;
  unint64_t v260;
  std::string *v261;
  std::string *v262;
  std::string::size_type v263;
  std::string::size_type v264;
  uint64_t v265;
  const void *v266;
  std::string *v267;
  std::string::size_type v268;
  NSObject *v269;
  std::string *v270;
  std::string *v271;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer i;
  long long v274;
  NSObject *v275;
  void *p_str;
  NSObject *v277;
  std::string *v278;
  long long *j;
  long long v280;
  NSObject *v281;
  void *first;
  std::string::size_type v283;
  std::string::size_type v284;
  CFTypeRef v285;
  uint64_t (*v286)(uint64_t);
  int v287;
  NSObject *v288;
  void **v289;
  void **v290;
  void **v291;
  BOOL v292;
  BOOL v293;
  std::mutex *v294;
  std::mutex *v295;
  std::string::size_type v296;
  unsigned __int8 *v297;
  uint64_t v298;
  unsigned int v299;
  void *v300;
  std::__shared_weak_count *v301;
  GestaltUtilityInterface *v302;
  char v303;
  int v304;
  NSObject *v305;
  BOOL v306;
  int v307;
  const char *v308;
  NSObject *v309;
  std::string *v310;
  std::string *p_p;
  void *v312;
  std::string::size_type v313;
  void *v314;
  NSObject *v315;
  BOOL v316;
  int v317;
  NSObject *v318;
  uint64_t v319;
  const char *v320;
  const char *v321;
  int v322;
  const void *v323;
  BOOL v324;
  const void *v325;
  const void *v326;
  int v327;
  int v328;
  int isLazuliCarrierBased;
  std::string v330;
  std::string v331;
  std::string v332;
  uint64_t v333;
  std::__shared_weak_count *v334;
  std::string v335;
  CFTypeRef cf;
  std::string v337;
  std::string v338;
  std::vector<std::string> theDict;
  std::string v340;
  std::string v341;
  std::string v342;
  std::string v343;
  std::string __p;
  std::string v345;
  void v346[2];
  std::string buf[2];
  std::string *v348[2];
  std::string *v349[2];
  int v350[4];
  long long v351;
  long long v352;
  long long v353;
  long long v354;
  long long v355;
  uint64_t v356;
  long long v357;
  long long v358;
  long long v359;
  long long v360;
  uint64_t v361;
  std::string v362;
  void *v363;
  unsigned int v364;
  std::string __s;
  std::string *v366;
  int v367[2];
  int v368;
  std::__split_buffer<std::string> __str;
  uint64_t v370;

  v370 = *MEMORY[0x263EF8340];
  uint64_t v6 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
  long long v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v6);
  memset(&__p, 0, sizeof(__p));
  memset(&v343, 0, sizeof(v343));
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 15) + 24))(&v343);
  bzero(&v363, 0x688uLL);
  sd::DataCache::getRuntimeInfo((sd::DataCache *)&v363, *((void *)this + 24));
  uint64_t v9 = *((void *)this + 24);
  int v10 = *(unsigned __int8 *)(v9 + 32);
  v327 = *(_DWORD *)(v9 + 36);
  v328 = v10;
  if (*(unsigned char *)(*((void *)this + 5) + 49) == 1)
  {
    memset(&v362, 0, sizeof(v362));
    memset(&v342, 0, sizeof(v342));
    memset(&v341, 0, sizeof(v341));
    memset(&v340, 0, sizeof(v340));
    memset(&theDict, 0, sizeof(theDict));
    memset(&v338, 0, sizeof(v338));
    memset(&v337, 0, sizeof(v337));
    CFTypeRef cf = 0;
    v354 = 0u;
    v355 = 0u;
    v352 = 0u;
    v353 = 0u;
    *(_OWORD *)v350 = 0u;
    v351 = 0u;
    *(_OWORD *)v348 = 0u;
    *(_OWORD *)v349 = 0u;
    memset(buf, 0, sizeof(buf));
    v356 = 1;
    v357 = 0u;
    v358 = 0u;
    v359 = 0u;
    v360 = 0u;
    v361 = 0;
    memset(&v335, 0, sizeof(v335));
    ServiceMap = (std::mutex *)Registry::getServiceMap(*((Registry **)this + 7));
    unint64_t v12 = ServiceMap;
    uint64_t v13 = *(void *)(MEMORY[0x263F03558] + 8);
    if (v13 < 0)
    {
      char v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v15 = 5381;
      do
      {
        uint64_t v13 = v15;
        unsigned int v16 = *v14++;
        uint64_t v15 = (33 * v15) ^ v16;
      }
      while (v16);
    }
    std::mutex::lock(ServiceMap);
    __str.__first_ = (std::__split_buffer<std::string>::pointer)v13;
    int v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v12[1].__m_.__sig, (unint64_t *)&__str);
    if (v17)
    {
      uint64_t v19 = v17[3];
      long long v18 = (std::__shared_weak_count *)v17[4];
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v12);
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        char v20 = 0;
        if (!v19) {
          goto LABEL_62;
        }
LABEL_55:
        (*(void (**)(std::__split_buffer<std::string> *__return_ptr, uint64_t))(*(void *)v19 + 144))(&__str, v19);
        std::string::operator=(&v335, (const std::string *)&__str);
        if (SHIBYTE(__str.__end_) < 0) {
          operator delete(__str.__first_);
        }
        std::string::size_type size = HIBYTE(v335.__r_.__value_.__r.__words[2]);
        if ((v335.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v335.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          *(_OWORD *)&__str.__first_ = 0uLL;
          (**(void (***)(std::__split_buffer<std::string> *__return_ptr, uint64_t, std::string *))v19)(&__str, v19, &v335);
          if (__str.__first_) {
            BOOL v36 = __str.__first_[2].__r_.__value_.__s.__data_[0] != 0;
          }
          else {
            BOOL v36 = 0;
          }
          if (__str.__begin_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__begin_);
          }
LABEL_70:
          if ((v20 & 1) == 0) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v18);
          }
          v333 = 0;
          v334 = 0;
          long long v37 = (std::mutex *)Registry::getServiceMap(*((Registry **)this + 7));
          long long v38 = v37;
          uint64_t v39 = *(void *)(MEMORY[0x263F03548] + 8);
          if (v39 < 0)
          {
            unint64_t v40 = (unsigned __int8 *)(v39 & 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v41 = 5381;
            do
            {
              uint64_t v39 = v41;
              unsigned int v42 = *v40++;
              uint64_t v41 = (33 * v41) ^ v42;
            }
            while (v42);
          }
          std::mutex::lock(v37);
          __str.__first_ = (std::__split_buffer<std::string>::pointer)v39;
          uint64_t v43 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v38[1].__m_.__sig, (unint64_t *)&__str);
          if (v43)
          {
            std::string v45 = (void (***)(uint64_t *__return_ptr, void, std::string *))v43[3];
            std::vector<std::string> v44 = (std::__shared_weak_count *)v43[4];
            if (v44)
            {
              atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
              std::mutex::unlock(v38);
              atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
              std::__shared_weak_count::__release_shared[abi:ne180100](v44);
              uint64_t v46 = 0;
              goto LABEL_80;
            }
          }
          else
          {
            std::string v45 = 0;
          }
          std::mutex::unlock(v38);
          std::vector<std::string> v44 = 0;
          uint64_t v46 = 1;
LABEL_80:
          (**v45)(&v333, v45, &v335);
          if ((v46 & 1) == 0) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v44);
          }
          if (v36
            && v333
            && (*(unsigned int (**)(uint64_t, std::string *))(*(void *)v333 + 104))(v333, buf))
          {
            long long v47 = *v7;
            if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__str.__first_) = 0;
              _os_log_impl(&dword_223AF3000, v47, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: reading from iCloud", (uint8_t *)&__str, 2u);
            }
            std::string::operator=(&v342, (const std::string *)&v351);
            std::string::operator=(&v362, &buf[1]);
            std::string::operator=(&__p, (const std::string *)&v349[1]);
            std::string::operator=(&v340, buf);
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&theDict, v348[0], (long long *)v348[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v348[1] - (char *)v348[0]) >> 3));
            if (theDict.__end_ == theDict.__begin_)
            {
              std::string::basic_string[abi:ne180100]<0>(&v331, "sip:");
              if (v350[3] >= 0) {
                uint64_t v48 = (std::string *)&v349[1];
              }
              else {
                uint64_t v48 = v349[1];
              }
              if (v350[3] >= 0) {
                long long v49 = HIBYTE(v350[3]);
              }
              else {
                long long v49 = *(void *)v350;
              }
              long long v50 = std::string::append(&v331, (const std::string::value_type *)v48, v49);
              long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
              v332.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v51;
              v50->__r_.__value_.__l.__size_ = 0;
              v50->__r_.__value_.__r.__words[2] = 0;
              v50->__r_.__value_.__r.__words[0] = 0;
              uint64_t v52 = std::string::append(&v332, "@", 1uLL);
              std::string v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
              v345.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v345.__r_.__value_.__l.__data_ = v53;
              v52->__r_.__value_.__l.__size_ = 0;
              v52->__r_.__value_.__r.__words[2] = 0;
              v52->__r_.__value_.__r.__words[0] = 0;
              if ((SBYTE7(v352) & 0x80u) == 0) {
                uint64_t v54 = (const std::string::value_type *)&v351;
              }
              else {
                uint64_t v54 = (const std::string::value_type *)v351;
              }
              if ((SBYTE7(v352) & 0x80u) == 0) {
                char v55 = BYTE7(v352);
              }
              else {
                char v55 = *((void *)&v351 + 1);
              }
              __int16 v56 = std::string::append(&v345, v54, v55);
              __int16 v57 = (char *)v56->__r_.__value_.__r.__words[0];
              v346[0] = v56->__r_.__value_.__l.__size_;
              *(void *)((char *)v346 + 7) = *(std::string::size_type *)((char *)&v56->__r_.__value_.__r.__words[1] + 7);
              char v58 = HIBYTE(v56->__r_.__value_.__r.__words[2]);
              v56->__r_.__value_.__l.__size_ = 0;
              v56->__r_.__value_.__r.__words[2] = 0;
              v56->__r_.__value_.__r.__words[0] = 0;
              std::vector<std::string>::pointer end = theDict.__end_;
              if (theDict.__end_ >= theDict.__end_cap_.__value_)
              {
                v222 = 0xAAAAAAAAAAAAAAABLL * (((char *)theDict.__end_ - (char *)theDict.__begin_) >> 3);
                v223 = v222 + 1;
                if (v222 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * (((char *)theDict.__end_cap_.__value_ - (char *)theDict.__begin_) >> 3) > v223) {
                  v223 = 0x5555555555555556 * (((char *)theDict.__end_cap_.__value_ - (char *)theDict.__begin_) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)theDict.__end_cap_.__value_ - (char *)theDict.__begin_) >> 3) >= 0x555555555555555) {
                  v224 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  v224 = v223;
                }
                __str.__end_cap_.__value_ = (std::allocator<std::string> *)&theDict.__end_cap_;
                if (v224) {
                  v225 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&theDict.__end_cap_, v224);
                }
                else {
                  v225 = 0;
                }
                v242 = v225 + v222;
                __str.__first_ = v225;
                __str.__begin_ = v242;
                __str.__end_cap_.__value_ = &v225[v224];
                v243 = v346[0];
                v242->__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
                v242->__r_.__value_.__l.__size_ = v243;
                *(std::string::size_type *)((char *)&v242->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v346 + 7);
                *((unsigned char *)&v242->__r_.__value_.__s + 23) = v58;
                v346[0] = 0;
                *(void *)((char *)v346 + 7) = 0;
                __str.__end_ = v242 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&theDict, &__str);
                uint64_t v61 = theDict.__end_;
                std::__split_buffer<std::string>::~__split_buffer(&__str);
              }
              else
              {
                __int16 v60 = v346[0];
                theDict.__end_->__r_.__value_.__l.__data_ = v57;
                end->__r_.__value_.__l.__size_ = v60;
                *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v346 + 7);
                *((unsigned char *)&end->__r_.__value_.__s + 23) = v58;
                uint64_t v61 = end + 1;
              }
              theDict.__end_ = v61;
              if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v345.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v332.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v331.__r_.__value_.__l.__data_);
              }
              std::string::basic_string[abi:ne180100]<0>(&v331, "sip:");
              if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v244 = buf;
              }
              else {
                v244 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
              }
              if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v245 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
              }
              else {
                v245 = buf[0].__r_.__value_.__l.__size_;
              }
              v246 = std::string::append(&v331, (const std::string::value_type *)v244, v245);
              v247 = *(_OWORD *)&v246->__r_.__value_.__l.__data_;
              v332.__r_.__value_.__r.__words[2] = v246->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v332.__r_.__value_.__l.__data_ = v247;
              v246->__r_.__value_.__l.__size_ = 0;
              v246->__r_.__value_.__r.__words[2] = 0;
              v246->__r_.__value_.__r.__words[0] = 0;
              v248 = std::string::append(&v332, "@", 1uLL);
              v249 = *(_OWORD *)&v248->__r_.__value_.__l.__data_;
              v345.__r_.__value_.__r.__words[2] = v248->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v345.__r_.__value_.__l.__data_ = v249;
              v248->__r_.__value_.__l.__size_ = 0;
              v248->__r_.__value_.__r.__words[2] = 0;
              v248->__r_.__value_.__r.__words[0] = 0;
              if ((SBYTE7(v352) & 0x80u) == 0) {
                v250 = (const std::string::value_type *)&v351;
              }
              else {
                v250 = (const std::string::value_type *)v351;
              }
              if ((SBYTE7(v352) & 0x80u) == 0) {
                v251 = BYTE7(v352);
              }
              else {
                v251 = *((void *)&v351 + 1);
              }
              v252 = std::string::append(&v345, v250, v251);
              v253 = (char *)v252->__r_.__value_.__r.__words[0];
              v346[0] = v252->__r_.__value_.__l.__size_;
              *(void *)((char *)v346 + 7) = *(std::string::size_type *)((char *)&v252->__r_.__value_.__r.__words[1] + 7);
              v254 = HIBYTE(v252->__r_.__value_.__r.__words[2]);
              v252->__r_.__value_.__l.__size_ = 0;
              v252->__r_.__value_.__r.__words[2] = 0;
              v252->__r_.__value_.__r.__words[0] = 0;
              v255 = theDict.__end_;
              if (theDict.__end_ >= theDict.__end_cap_.__value_)
              {
                v258 = 0xAAAAAAAAAAAAAAABLL * (((char *)theDict.__end_ - (char *)theDict.__begin_) >> 3);
                v259 = v258 + 1;
                if (v258 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * (((char *)theDict.__end_cap_.__value_ - (char *)theDict.__begin_) >> 3) > v259) {
                  v259 = 0x5555555555555556 * (((char *)theDict.__end_cap_.__value_ - (char *)theDict.__begin_) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)theDict.__end_cap_.__value_ - (char *)theDict.__begin_) >> 3) >= 0x555555555555555) {
                  v260 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  v260 = v259;
                }
                __str.__end_cap_.__value_ = (std::allocator<std::string> *)&theDict.__end_cap_;
                if (v260) {
                  v261 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&theDict.__end_cap_, v260);
                }
                else {
                  v261 = 0;
                }
                v262 = v261 + v258;
                __str.__first_ = v261;
                __str.__begin_ = v262;
                __str.__end_cap_.__value_ = &v261[v260];
                v263 = v346[0];
                v262->__r_.__value_.__r.__words[0] = (std::string::size_type)v253;
                v262->__r_.__value_.__l.__size_ = v263;
                *(std::string::size_type *)((char *)&v262->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v346 + 7);
                *((unsigned char *)&v262->__r_.__value_.__s + 23) = v254;
                v346[0] = 0;
                *(void *)((char *)v346 + 7) = 0;
                __str.__end_ = v262 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&theDict, &__str);
                v257 = theDict.__end_;
                std::__split_buffer<std::string>::~__split_buffer(&__str);
              }
              else
              {
                v256 = v346[0];
                theDict.__end_->__r_.__value_.__l.__data_ = v253;
                v255->__r_.__value_.__l.__size_ = v256;
                *(std::string::size_type *)((char *)&v255->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v346 + 7);
                *((unsigned char *)&v255->__r_.__value_.__s + 23) = v254;
                v257 = v255 + 1;
              }
              theDict.__end_ = v257;
              if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v345.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v332.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v331.__r_.__value_.__l.__data_);
              }
            }
            v264 = HIBYTE(buf[1].__r_.__value_.__r.__words[2]);
            if ((buf[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v264 = buf[1].__r_.__value_.__l.__size_;
            }
            if (v264)
            {
              v265 = HIBYTE(v355);
              if (v355 < 0) {
                v265 = v355;
              }
              if (v265)
              {
                std::string::operator=(&v338, &buf[1]);
                std::string::operator=(&v337, (const std::string *)((char *)&v354 + 8));
              }
            }
            v266 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v333 + 112))(v333);
            v267 = (std::string *)cf;
            CFTypeRef cf = v266;
            __str.__first_ = v267;
            ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&__str.__first_);
          }
          else
          {
            memset(&__str, 0, 24);
            __int16 v62 = *v7;
            if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v345.__r_.__value_.__l.__data_) = 0;
              _os_log_impl(&dword_223AF3000, v62, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: reading from Latte prefs", (uint8_t *)&v345, 2u);
            }
            uint64_t v63 = *((void *)this + 11);
            std::string::basic_string[abi:ne180100]<0>(&v332, "Latte_domain");
            (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, std::__split_buffer<std::string> *))(*(void *)v63 + 80))(&v345, v63, &v332, &__str);
            if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v342.__r_.__value_.__l.__data_);
            }
            v342 = v345;
            *((unsigned char *)&v345.__r_.__value_.__s + 23) = 0;
            v345.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v332.__r_.__value_.__l.__data_);
            }
            __int16 v64 = *((void *)this + 11);
            std::string::basic_string[abi:ne180100]<0>(&v332, "Latte_impi");
            (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, std::__split_buffer<std::string> *))(*(void *)v64 + 80))(&v345, v64, &v332, &__str);
            if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v362.__r_.__value_.__l.__data_);
            }
            v362 = v345;
            *((unsigned char *)&v345.__r_.__value_.__s + 23) = 0;
            v345.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v332.__r_.__value_.__l.__data_);
            }
            memset(&v345, 0, sizeof(v345));
            uint64_t v65 = *((void *)this + 11);
            std::string::basic_string[abi:ne180100]<0>(&v332, "Latte_impu");
            (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, std::__split_buffer<std::string> *))(*(void *)v65 + 80))(&v345, v65, &v332, &__str);
            if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v332.__r_.__value_.__l.__data_);
            }
            __int16 v66 = theDict.__end_;
            if (theDict.__end_ >= theDict.__end_cap_.__value_)
            {
              __int16 v68 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&theDict, (long long *)&v345);
            }
            else
            {
              if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(theDict.__end_, v345.__r_.__value_.__l.__data_, v345.__r_.__value_.__l.__size_);
              }
              else
              {
                uint64_t v67 = *(_OWORD *)&v345.__r_.__value_.__l.__data_;
                theDict.__end_->__r_.__value_.__r.__words[2] = v345.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
              }
              __int16 v68 = v66 + 1;
            }
            theDict.__end_ = v68;
            uint64_t v69 = *((void *)this + 11);
            std::string::basic_string[abi:ne180100]<0>(&v331, "Latte_mdn");
            (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, std::__split_buffer<std::string> *))(*(void *)v69 + 80))(&v332, v69, &v331, &__str);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::string __p = v332;
            *((unsigned char *)&v332.__r_.__value_.__s + 23) = 0;
            v332.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v331.__r_.__value_.__l.__data_);
            }
            __int16 v70 = *((void *)this + 11);
            std::string::basic_string[abi:ne180100]<0>(&v331, "Latte_imsi");
            (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, std::__split_buffer<std::string> *))(*(void *)v70 + 80))(&v332, v70, &v331, &__str);
            if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v340.__r_.__value_.__l.__data_);
            }
            v340 = v332;
            *((unsigned char *)&v332.__r_.__value_.__s + 23) = 0;
            v332.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v331.__r_.__value_.__l.__data_);
            }
            uint64_t v71 = *((void *)this + 11);
            std::string::basic_string[abi:ne180100]<0>(&v331, "Latte_iface");
            (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, std::__split_buffer<std::string> *))(*(void *)v71 + 80))(&v332, v71, &v331, &__str);
            if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v343.__r_.__value_.__l.__data_);
            }
            v343 = v332;
            *((unsigned char *)&v332.__r_.__value_.__s + 23) = 0;
            v332.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v331.__r_.__value_.__l.__data_);
            }
            __int16 v72 = *((void *)this + 11);
            std::string::basic_string[abi:ne180100]<0>(&v331, "Latte_deviceId");
            (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, std::__split_buffer<std::string> *))(*(void *)v72 + 80))(&v332, v72, &v331, &__str);
            if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v341.__r_.__value_.__l.__data_);
            }
            v341 = v332;
            *((unsigned char *)&v332.__r_.__value_.__s + 23) = 0;
            v332.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v331.__r_.__value_.__l.__data_);
            }
            std::string::operator=(&v338, &v362);
            uint64_t v73 = *((void *)this + 11);
            std::string::basic_string[abi:ne180100]<0>(&v331, "Latte_passwd");
            (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, std::__split_buffer<std::string> *))(*(void *)v73 + 80))(&v332, v73, &v331, &__str);
            if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v337.__r_.__value_.__l.__data_);
            }
            v337 = v332;
            *((unsigned char *)&v332.__r_.__value_.__s + 23) = 0;
            v332.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v331.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v345.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v345.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__end_) < 0) {
              operator delete(__str.__first_);
            }
          }
          v268 = HIBYTE(v341.__r_.__value_.__r.__words[2]);
          if ((v341.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v268 = v341.__r_.__value_.__l.__size_;
          }
          if (!v268)
          {
            (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(**((void **)this + 17) + 384))(&__str);
            if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v341.__r_.__value_.__l.__data_);
            }
            *(_OWORD *)&v341.__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__first_;
            v341.__r_.__value_.__r.__words[2] = (std::string::size_type)__str.__end_;
          }
          v269 = *v7;
          if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
          {
            v270 = &v342;
            if ((v342.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v270 = (std::string *)v342.__r_.__value_.__r.__words[0];
            }
            LODWORD(__str.__first_) = 136446210;
            *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = v270;
            _os_log_impl(&dword_223AF3000, v269, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: DOMAIN - %{public}s", (uint8_t *)&__str, 0xCu);
            v269 = *v7;
          }
          if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT))
          {
            v271 = &v362;
            if ((v362.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v271 = (std::string *)v362.__r_.__value_.__r.__words[0];
            }
            LODWORD(__str.__first_) = 136315138;
            *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = v271;
            _os_log_impl(&dword_223AF3000, v269, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Private Identity - %s", (uint8_t *)&__str, 0xCu);
            v269 = *v7;
          }
          if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(__str.__first_) = 134217984;
            *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = (std::__split_buffer<std::string>::pointer)(0xAAAAAAAAAAAAAAABLL * (((char *)theDict.__end_ - (char *)theDict.__begin_) >> 3));
            _os_log_impl(&dword_223AF3000, v269, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Num public identities - %lu", (uint8_t *)&__str, 0xCu);
          }
          std::vector<std::string>::pointer begin = theDict.__begin_;
          for (uint64_t i = theDict.__end_; begin != i; ++begin)
          {
            memset(&__str, 0, 24);
            if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__str, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
            }
            else
            {
              v274 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
              __str.__end_ = (std::__split_buffer<std::string>::pointer)begin->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__first_ = v274;
            }
            v275 = *v7;
            if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
            {
              if (SHIBYTE(__str.__end_) >= 0) {
                p_str = &__str;
              }
              else {
                p_str = __str.__first_;
              }
              LODWORD(v345.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)v345.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
              _os_log_impl(&dword_223AF3000, v275, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Public Identity - %s", (uint8_t *)&v345, 0xCu);
            }
            if (SHIBYTE(__str.__end_) < 0) {
              operator delete(__str.__first_);
            }
          }
          v277 = *v7;
          if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(__str.__first_) = 134217984;
            *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = (std::__split_buffer<std::string>::pointer)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v367 - (void)v366) >> 3));
            _os_log_impl(&dword_223AF3000, v277, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Num PCSCFs [PCO] - %lu", (uint8_t *)&__str, 0xCu);
          }
          v278 = v366;
          for (j = *(long long **)v367; v278 != (std::string *)j; ++v278)
          {
            memset(&__str, 0, 24);
            if (SHIBYTE(v278->__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__str, v278->__r_.__value_.__l.__data_, v278->__r_.__value_.__l.__size_);
            }
            else
            {
              v280 = *(_OWORD *)&v278->__r_.__value_.__l.__data_;
              __str.__end_ = (std::__split_buffer<std::string>::pointer)v278->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__first_ = v280;
            }
            v281 = *v7;
            if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
            {
              if (SHIBYTE(__str.__end_) >= 0) {
                first = &__str;
              }
              else {
                first = __str.__first_;
              }
              LODWORD(v345.__r_.__value_.__l.__data_) = 136446210;
              *(std::string::size_type *)((char *)v345.__r_.__value_.__r.__words + 4) = (std::string::size_type)first;
              _os_log_impl(&dword_223AF3000, v281, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: PCSCF [PCO] - %{public}s", (uint8_t *)&v345, 0xCu);
            }
            if (SHIBYTE(__str.__end_) < 0) {
              operator delete(__str.__first_);
            }
          }
          std::string::operator=((std::string *)a2 + 19, &v342);
          std::string::operator=((std::string *)a2 + 18, &v362);
          if ((std::vector<std::string> *)((char *)a2 + 480) != &theDict) {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)a2 + 20, theDict.__begin_, (long long *)theDict.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)theDict.__end_ - (char *)theDict.__begin_) >> 3));
          }
          if ((std::string **)((char *)a2 + 504) != &v366) {
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)a2 + 21, v366, *(long long **)v367, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v367 - (void)v366) >> 3));
          }
          std::string::operator=((std::string *)a2 + 17, &v340);
          std::string::operator=((std::string *)a2 + 16, &__p);
          *((_DWORD *)a2 + 13MEMORY[0x223CBB890]((char *)this + 8) = 2;
          *((_DWORD *)a2 + 60) = sd::imsServiceMaskToIpTelephonyServiceMask();
          *((_DWORD *)a2 + 82) = v363;
          std::string::operator=((std::string *)((char *)a2 + 616), &v341);
          std::string::operator=((std::string *)((char *)a2 + 664), (const std::string *)(*((void *)this + 22) + 304));
          *((unsigned char *)a2 + 712) = *(unsigned char *)(*((void *)this + 22) + 272);
          v283 = HIBYTE(v338.__r_.__value_.__r.__words[2]);
          if ((v338.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v283 = v338.__r_.__value_.__l.__size_;
          }
          if (v283)
          {
            v284 = HIBYTE(v337.__r_.__value_.__r.__words[2]);
            if ((v337.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              v284 = v337.__r_.__value_.__l.__size_;
            }
            if (v284)
            {
              std::string::operator=((std::string *)((char *)a2 + 560), &v338);
              std::string::operator=((std::string *)((char *)a2 + 584), &v337);
            }
          }
          v285 = cf;
          if (cf) {
            v286 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
          }
          else {
            v286 = 0;
          }
          if (v286 && cf)
          {
            CFRetain(cf);
            *(void *)a2 = v285;
          }
          v287 = subscriber::simSlotAsInstance();
          *((_DWORD *)a2 + 181) = v287;
          v288 = *v7;
          if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(__str.__first_) = 67109120;
            HIDWORD(__str.__first_) = v287;
            _os_log_impl(&dword_223AF3000, v288, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: SIM instance - %u", (uint8_t *)&__str, 8u);
          }
          if (v334) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v334);
          }
          int v10 = v328;
          if (SHIBYTE(v335.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v335.__r_.__value_.__l.__data_);
          }
          IMSInfo::~IMSInfo((void **)&buf[0].__r_.__value_.__l.__data_);
          ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
          if (SHIBYTE(v337.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v337.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v338.__r_.__value_.__l.__data_);
          }
          buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&theDict;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          if (SHIBYTE(v340.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v340.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v341.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v341.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v342.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v342.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v362.__r_.__value_.__r.__words[2]) < 0)
          {
            v205 = (void *)v362.__r_.__value_.__r.__words[0];
            goto LABEL_568;
          }
          goto LABEL_569;
        }
LABEL_62:
        BOOL v36 = 0;
        goto LABEL_70;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    std::mutex::unlock(v12);
    long long v18 = 0;
    char v20 = 1;
    if (!v19) {
      goto LABEL_62;
    }
    goto LABEL_55;
  }
  if (*(unsigned char *)(*((void *)this + 9) + 8))
  {
    memset(&v362, 0, sizeof(v362));
    (*(void (**)(std::string *__return_ptr, sd::IMSSubscriberModel *))(*(void *)this + 584))(&v362, this);
    *((unsigned char *)a2 + 60MEMORY[0x223CBB890]((char *)this + 8) = 1;
    long long v21 = (void *)((char *)a2 + 456);
    std::string::operator=((std::string *)a2 + 19, (const std::string *)(*((void *)this + 22) + 480));
    uint64_t v22 = (void *)((char *)a2 + 432);
    std::string::operator=((std::string *)a2 + 18, (const std::string *)(*((void *)this + 22) + 384));
    uint64_t v23 = *((void *)this + 22);
    if ((ims::StackConfig *)((char *)a2 + 480) != (ims::StackConfig *)(v23 + 456)) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)a2 + 20, *(std::string **)(v23 + 456), *(long long **)(v23 + 464), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v23 + 464) - *(void *)(v23 + 456)) >> 3));
    }
    *((_DWORD *)a2 + 13MEMORY[0x223CBB890]((char *)this + 8) = 2;
    if ((std::string *)((char *)a2 + 504) != &v362) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)a2 + 21, (std::string *)v362.__r_.__value_.__l.__data_, (long long *)v362.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v362.__r_.__value_.__l.__size_ - v362.__r_.__value_.__r.__words[0]) >> 3));
    }
    std::string::operator=((std::string *)a2 + 17, (const std::string *)(*((void *)this + 22) + 104));
    uint64_t v24 = *((void *)this + 22);
    if (*(unsigned char *)(v24 + 264))
    {
      CSIPhoneNumber::getBaseNumber((uint64_t *)buf, (CSIPhoneNumber *)(v24 + 128));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = buf[0];
    }
    std::string::operator=((std::string *)a2 + 16, &__p);
    *((_DWORD *)a2 + 60) = sd::imsServiceMaskToIpTelephonyServiceMask();
    *((_DWORD *)a2 + 82) = v363;
    (*(void (**)(std::string *__return_ptr))(**((void **)this + 17) + 392))(buf);
    unint64_t v25 = (void **)((char *)a2 + 616);
    if (*((char *)a2 + 639) < 0) {
      operator delete(*v25);
    }
    *(_OWORD *)unint64_t v25 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
    *((void *)a2 + 79) = *((void *)&buf[0].__r_.__value_.__l + 2);
    std::string::operator=((std::string *)((char *)a2 + 664), (const std::string *)(*((void *)this + 22) + 304));
    *((unsigned char *)a2 + 712) = 0;
    long long v26 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 479) < 0) {
        long long v21 = (void *)*v21;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      _os_log_impl(&dword_223AF3000, v26, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: DOMAIN - %{public}s", (uint8_t *)buf, 0xCu);
      long long v26 = *v7;
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 455) < 0) {
        uint64_t v22 = (void *)*v22;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
      _os_log_impl(&dword_223AF3000, v26, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Private Identity - %s", (uint8_t *)buf, 0xCu);
      long long v26 = *v7;
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 639) < 0) {
        unint64_t v25 = (void **)*v25;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
      _os_log_impl(&dword_223AF3000, v26, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: DeviceAccountUUID Identity - %s", (uint8_t *)buf, 0xCu);
    }
    uint64_t v27 = *((void *)this + 22);
    if (*(char *)(v27 + 431) < 0)
    {
      if (!*(void *)(v27 + 416)) {
        goto LABEL_153;
      }
    }
    else if (!*(unsigned char *)(v27 + 431))
    {
      goto LABEL_153;
    }
    if (*(char *)(v27 + 455) < 0)
    {
      if (!*(void *)(v27 + 440)) {
        goto LABEL_153;
      }
    }
    else if (!*(unsigned char *)(v27 + 455))
    {
      goto LABEL_153;
    }
    __int16 v74 = (void *)((char *)a2 + 560);
    std::string::operator=((std::string *)((char *)a2 + 560), (const std::string *)(v27 + 408));
    uint64_t v75 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 583) < 0) {
        __int16 v74 = (void *)*v74;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
      _os_log_impl(&dword_223AF3000, v75, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: UserName - %{private}s", (uint8_t *)buf, 0xCu);
    }
    __int16 v76 = (void *)((char *)a2 + 584);
    std::string::operator=((std::string *)((char *)a2 + 584), (const std::string *)(*((void *)this + 22) + 432));
    uint64_t v77 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 607) < 0) {
        __int16 v76 = (void *)*v76;
      }
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v76;
      _os_log_impl(&dword_223AF3000, v77, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: UserPwd - %{private}s", (uint8_t *)buf, 0xCu);
    }
LABEL_153:
    std::string v78 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 61) - *((void *)a2 + 60)) >> 3);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v79;
      _os_log_impl(&dword_223AF3000, v78, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Num public identities - %lu", (uint8_t *)buf, 0xCu);
    }
    long long v80 = (long long *)*((void *)a2 + 60);
    for (k = (long long *)*((void *)a2 + 61); v80 != k; long long v80 = (long long *)((char *)v80 + 24))
    {
      memset(buf, 0, 24);
      if (*((char *)v80 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)v80, *((void *)v80 + 1));
      }
      else
      {
        long long v82 = *v80;
        buf[0].__r_.__value_.__r.__words[2] = *((void *)v80 + 2);
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v82;
      }
      long long v83 = *v7;
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
      {
        if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v84 = buf;
        }
        else {
          uint64_t v84 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
        }
        LODWORD(__str.__first_) = 136315138;
        *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = v84;
        _os_log_impl(&dword_223AF3000, v83, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Public Identity - %s", (uint8_t *)&__str, 0xCu);
      }
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
    }
    uint64_t v85 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 64) - *((void *)a2 + 63)) >> 3);
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v86;
      _os_log_impl(&dword_223AF3000, v85, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Num PCSCFs [PCO] - %lu", (uint8_t *)buf, 0xCu);
    }
    v87 = (long long *)*((void *)a2 + 63);
    for (m = (long long *)*((void *)a2 + 64); v87 != m; v87 = (long long *)((char *)v87 + 24))
    {
      memset(buf, 0, 24);
      if (*((char *)v87 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(buf, *(const std::string::value_type **)v87, *((void *)v87 + 1));
      }
      else
      {
        v89 = *v87;
        buf[0].__r_.__value_.__r.__words[2] = *((void *)v87 + 2);
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v89;
      }
      unsigned int v90 = *v7;
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
      {
        if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v91 = buf;
        }
        else {
          uint64_t v91 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
        }
        LODWORD(__str.__first_) = 136446210;
        *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = v91;
        _os_log_impl(&dword_223AF3000, v90, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: PCSCF [PCO] - %{public}s", (uint8_t *)&__str, 0xCu);
      }
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
    }
    theDict.__begin_ = 0;
    unsigned int v92 = *(const __CFDictionary **)(*((void *)this + 22) + 536);
    if (v92) {
      v93 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      v93 = 0;
    }
    int v94 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    if (v93)
    {
      CFDictionaryRef MutableCopy = (std::string *)CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, v92);
      uint64_t v96 = theDict.__begin_;
      theDict.__begin_ = MutableCopy;
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v96;
      ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&buf[0].__r_.__value_.__l.__data_);
    }
    else
    {
      Mutable = (std::string *)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
      if (Mutable)
      {
        int v98 = theDict.__begin_;
        theDict.__begin_ = Mutable;
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
        ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&buf[0].__r_.__value_.__l.__data_);
      }
    }
    isLazuliCarrierBased = sd::IMSSubscriberModel::isLazuliCarrierBased(this);
    v99 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v100 = asStringBool();
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v100;
      _os_log_impl(&dword_223AF3000, v99, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Carrier-Based: %s", (uint8_t *)buf, 0xCu);
    }
    __str.__first_ = 0;
    buf[0].__r_.__value_.__r.__words[0] = 0xFFFFFFFFLL;
    v101 = (std::string *)CFNumberCreate(v94, kCFNumberLongLongType, buf);
    if (v101)
    {
      unsigned int v102 = __str.__first_;
      __str.__first_ = v101;
      buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&buf[0].__r_.__value_.__l.__data_);
    }
    v342.__r_.__value_.__r.__words[0] = (std::string::size_type)__str.__first_;
    __str.__first_ = 0;
    ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&__str.__first_);
    CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"TcpIdleTimeoutSeconds", v342.__r_.__value_.__l.__data_);
    ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v342.__r_.__value_.__l.__data_);
    uint64_t v103 = (const void **)MEMORY[0x263EFFB40];
    if (isLazuliCarrierBased)
    {
      __str.__first_ = 0;
      buf[0].__r_.__value_.__r.__words[0] = 1200;
      unsigned int v104 = (std::string *)CFNumberCreate(v94, kCFNumberLongLongType, buf);
      if (v104)
      {
        v105 = __str.__first_;
        __str.__first_ = v104;
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
        ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&buf[0].__r_.__value_.__l.__data_);
      }
      v342.__r_.__value_.__r.__words[0] = (std::string::size_type)__str.__first_;
      __str.__first_ = 0;
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&__str.__first_);
      CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"TLSIdlePingIntervalSeconds", v342.__r_.__value_.__l.__data_);
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v342.__r_.__value_.__l.__data_);
      __str.__first_ = 0;
      buf[0].__r_.__value_.__r.__words[0] = 1200;
      v106 = (std::string *)CFNumberCreate(v94, kCFNumberLongLongType, buf);
      if (v106)
      {
        __int16 v107 = __str.__first_;
        __str.__first_ = v106;
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
        ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&buf[0].__r_.__value_.__l.__data_);
      }
      v342.__r_.__value_.__r.__words[0] = (std::string::size_type)__str.__first_;
      __str.__first_ = 0;
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&__str.__first_);
      CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"TCPIdlePingIntervalSeconds", v342.__r_.__value_.__l.__data_);
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v342.__r_.__value_.__l.__data_);
      __str.__first_ = 0;
      buf[0].__r_.__value_.__r.__words[0] = 120;
      v108 = (std::string *)CFNumberCreate(v94, kCFNumberLongLongType, buf);
      if (v108)
      {
        __int16 v109 = __str.__first_;
        __str.__first_ = v108;
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
        ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&buf[0].__r_.__value_.__l.__data_);
      }
      v342.__r_.__value_.__r.__words[0] = (std::string::size_type)__str.__first_;
      __str.__first_ = 0;
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&__str.__first_);
      CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"CRLFMinimumPingIntervalSeconds", v342.__r_.__value_.__l.__data_);
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v342.__r_.__value_.__l.__data_);
    }
    else
    {
      __str.__first_ = 0;
      buf[0].__r_.__value_.__r.__words[0] = 150;
      long long v110 = (std::string *)CFNumberCreate(v94, kCFNumberLongLongType, buf);
      if (v110)
      {
        uint64_t v111 = __str.__first_;
        __str.__first_ = v110;
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v111;
        ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&buf[0].__r_.__value_.__l.__data_);
      }
      v342.__r_.__value_.__r.__words[0] = (std::string::size_type)__str.__first_;
      __str.__first_ = 0;
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&__str.__first_);
      CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"TLSIdlePingIntervalSeconds", v342.__r_.__value_.__l.__data_);
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v342.__r_.__value_.__l.__data_);
      __str.__first_ = 0;
      buf[0].__r_.__value_.__r.__words[0] = 150;
      v112 = (std::string *)CFNumberCreate(v94, kCFNumberLongLongType, buf);
      if (v112)
      {
        long long v113 = __str.__first_;
        __str.__first_ = v112;
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v113;
        ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&buf[0].__r_.__value_.__l.__data_);
      }
      v342.__r_.__value_.__r.__words[0] = (std::string::size_type)__str.__first_;
      __str.__first_ = 0;
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&__str.__first_);
      CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"TCPIdlePingIntervalSeconds", v342.__r_.__value_.__l.__data_);
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v342.__r_.__value_.__l.__data_);
      __str.__first_ = 0;
      buf[0].__r_.__value_.__r.__words[0] = 120;
      long long v114 = (std::string *)CFNumberCreate(v94, kCFNumberLongLongType, buf);
      if (v114)
      {
        long long v115 = __str.__first_;
        __str.__first_ = v114;
        buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v115;
        ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&buf[0].__r_.__value_.__l.__data_);
      }
      v342.__r_.__value_.__r.__words[0] = (std::string::size_type)__str.__first_;
      __str.__first_ = 0;
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&__str.__first_);
      CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"CRLFMinimumPingIntervalSeconds", v342.__r_.__value_.__l.__data_);
      ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v342.__r_.__value_.__l.__data_);
      CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"UseCrlfIntervalFromRegistrationKeep", *v103);
    }
    if (*(void *)(*((void *)this + 22) + 504) != *(void *)(*((void *)this + 22) + 512))
    {
      v116 = (__CFDictionary *)theDict.__begin_;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v330, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else {
        v330 = __s;
      }
      if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__str, v330.__r_.__value_.__l.__data_, v330.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&__str.__first_ = *(_OWORD *)&v330.__r_.__value_.__l.__data_;
        __str.__end_ = (std::__split_buffer<std::string>::pointer)v330.__r_.__value_.__r.__words[2];
      }
      v340.__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__end_) < 0)
      {
        std::string::__init_copy_ctor_external(buf, (const std::string::value_type *)__str.__first_, (std::string::size_type)__str.__begin_);
      }
      else
      {
        *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__first_;
        buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)__str.__end_;
      }
      v341.__r_.__value_.__r.__words[0] = 0;
      if (ctu::cf::convert_copy())
      {
        uint64_t v117 = v340.__r_.__value_.__r.__words[0];
        v340.__r_.__value_.__r.__words[0] = v341.__r_.__value_.__r.__words[0];
        v342.__r_.__value_.__r.__words[0] = v117;
        ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v342.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf[0].__r_.__value_.__l.__data_);
      }
      v338.__r_.__value_.__r.__words[0] = v340.__r_.__value_.__r.__words[0];
      v340.__r_.__value_.__r.__words[0] = 0;
      ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v340.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__end_) < 0) {
        operator delete(__str.__first_);
      }
      CFDictionarySetValue(v116, @"PCSCFDomainName", v338.__r_.__value_.__l.__data_);
      ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v338.__r_.__value_.__l.__data_);
      if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v330.__r_.__value_.__l.__data_);
      }
    }
    CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"ContactUser", @"+MDN");
    long long v118 = *v103;
    CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"SendPreferredServiceInInvite", *v103);
    __int16 v119 = (const void *)*MEMORY[0x263EFFB38];
    CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"SupportPEarlyMediaHeader", (const void *)*MEMORY[0x263EFFB38]);
    CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"RegSubscriptionEnabled", v119);
    CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"UserAgentHeaderValue", @"${OS} ${DEVICE}");
    Value = CFDictionaryGetValue((CFDictionaryRef)theDict.__begin_, @"BusinessMessagingProvisioned");
    v121 = Value;
    v325 = v119;
    if (Value)
    {
      v122 = CFGetTypeID(Value);
      if (v122 == CFBooleanGetTypeID()) {
        v123 = v121;
      }
      else {
        v123 = 0;
      }
    }
    else
    {
      v123 = 0;
    }
    v124 = CFDictionaryGetValue((CFDictionaryRef)theDict.__begin_, @"BusinessMessagingEnabled");
    v125 = v124;
    if (v124)
    {
      v126 = CFGetTypeID(v124);
      if (v126 == CFBooleanGetTypeID()) {
        v127 = v125;
      }
      else {
        v127 = 0;
      }
    }
    else
    {
      v127 = 0;
    }
    v128 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      v129 = asStringBool();
      uint64_t v130 = asStringBool();
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v129;
      WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + SystemDeterminationManager::handleDumpState_sync(this - 6) = v130;
      _os_log_impl(&dword_223AF3000, v128, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: BusinessMessaging: provisioned: %s, enabled: %s", (uint8_t *)buf, 0x16u);
    }
    if (v123 == v118 && v127 == v118)
    {
      *(_DWORD *)(*((void *)this + 22) + 528) |= 0x100u;
      *((_DWORD *)a2 + 60) = sd::imsServiceMaskToIpTelephonyServiceMask();
    }
    if (v328)
    {
      if (v364) {
        int v131 = v364;
      }
      else {
        int v131 = HIDWORD(v363);
      }
      v132 = CFDictionaryGetValue((CFDictionaryRef)theDict.__begin_, @"WifiMediaTls");
      v133 = v132;
      if (v132)
      {
        uint64_t v134 = CFGetTypeID(v132);
        if (v134 == CFBooleanGetTypeID()) {
          v135 = v133;
        }
        else {
          v135 = 0;
        }
        v326 = v135;
      }
      else
      {
        v326 = 0;
      }
      uint64_t v140 = CFDictionaryGetValue((CFDictionaryRef)theDict.__begin_, @"WifiSignalingTls");
      v141 = v140;
      if (v140)
      {
        uint64_t v142 = CFGetTypeID(v140);
        if (v142 != CFBooleanGetTypeID()) {
          v141 = 0;
        }
      }
      if (v131) {
        goto LABEL_261;
      }
      v323 = v141;
      if (isLazuliCarrierBased) {
        int v131 = 5260;
      }
      else {
        int v131 = 5223;
      }
      v143 = (std::mutex *)Registry::getServiceMap(*((Registry **)this + 7));
      v144 = v143;
      v145 = *(void *)(MEMORY[0x263F035C8] + 8);
      if ((v145 & 0x8000000000000000) != 0)
      {
        v146 = (unsigned __int8 *)(v145 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v147 = 5381;
        do
        {
          v145 = v147;
          int v148 = *v146++;
          uint64_t v147 = (33 * v147) ^ v148;
        }
        while (v148);
      }
      std::mutex::lock(v143);
      buf[0].__r_.__value_.__r.__words[0] = v145;
      uint64_t v149 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v144[1].__m_.__sig, (unint64_t *)buf);
      if (v149)
      {
        uint64_t v151 = v149[3];
        v150 = (std::__shared_weak_count *)v149[4];
        if (v150)
        {
          int v152 = v131;
          int v153 = v94;
          v154 = (std::__shared_weak_count *)v149[4];
          p_shared_owners = &v150->__shared_owners_;
          atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v144);
          atomic_fetch_add_explicit(p_shared_owners, 1uLL, memory_order_relaxed);
          v150 = v154;
          int v94 = v153;
          int v131 = v152;
          std::__shared_weak_count::__release_shared[abi:ne180100](v150);
          if (!v151)
          {
            v141 = v323;
LABEL_401:
            std::__shared_weak_count::__release_shared[abi:ne180100](v150);
LABEL_261:
            v324 = 0;
LABEL_423:
            CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"ForceTcp", v118);
            if (v141 == v118) {
              v231 = v118;
            }
            else {
              v231 = v325;
            }
            CFDictionarySetValue((CFMutableDictionaryRef)theDict.__begin_, @"ForceTls", v231);
            *((unsigned char *)a2 + 609) = v326 == v118;
            v232 = (__CFDictionary *)theDict.__begin_;
            __str.__first_ = 0;
            buf[0].__r_.__value_.__r.__words[0] = v131;
            v233 = (std::string *)CFNumberCreate(v94, kCFNumberLongLongType, buf);
            if (v233)
            {
              v234 = __str.__first_;
              __str.__first_ = v233;
              buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v234;
              ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&buf[0].__r_.__value_.__l.__data_);
            }
            v342.__r_.__value_.__r.__words[0] = (std::string::size_type)__str.__first_;
            __str.__first_ = 0;
            ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&__str.__first_);
            CFDictionarySetValue(v232, @"DefaultRemoteSipPort", v342.__r_.__value_.__l.__data_);
            ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v342.__r_.__value_.__l.__data_);
            v235 = *v7;
            if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
            {
              v236 = "cell(home)";
              if (v324) {
                v236 = "cell(roaming)";
              }
              if (v328) {
                v236 = "wifi";
              }
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v236;
              if (v326 == v118) {
                v237 = "true";
              }
              else {
                v237 = "false";
              }
              WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + SystemDeterminationManager::handleDumpState_sync(this - 6) = (std::string::size_type)v237;
              if (v141 == v118) {
                v238 = "true";
              }
              else {
                v238 = "false";
              }
              HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2080;
              buf[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v238;
              LOWORD(buf[1].__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf[1].__r_.__value_.__r.__words[1] + 2) = v131;
              _os_log_impl(&dword_223AF3000, v235, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: transport=%s msrpTls=%s sipTls=%s remotePort=%u", (uint8_t *)buf, 0x26u);
            }
            v239 = theDict.__begin_;
            if (theDict.__begin_)
            {
              CFRetain(theDict.__begin_);
              *(void *)a2 = v239;
            }
            v240 = subscriber::simSlotAsInstance();
            *((_DWORD *)a2 + 181) = v240;
            v241 = *v7;
            if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v240;
              _os_log_impl(&dword_223AF3000, v241, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: SIM instance - %u", (uint8_t *)buf, 8u);
            }
            ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&theDict.__begin_);
            buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
            int v10 = v328;
            goto LABEL_569;
          }
LABEL_392:
          v217 = operator new(0x10uLL);
          buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v217 + 2);
          buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v217 + 2);
          *v217 = @"RCS";
          v217[1] = @"WifiRemotePort";
          buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v217;
          v342.__r_.__value_.__r.__words[0] = 0;
          (*(void (**)(std::string *__return_ptr, uint64_t, void, uint64_t, std::string *, void, void))(*(void *)v151 + 104))(&v342, v151, *(unsigned int *)(*((void *)this + 5) + 52), 1, buf, 0, 0);
          v218 = *v7;
          if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(__str.__first_) = 138412290;
            *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = (std::__split_buffer<std::string>::pointer)v342.__r_.__value_.__r.__words[0];
            _os_log_impl(&dword_223AF3000, v218, OS_LOG_TYPE_DEFAULT, "#I RCS.WifiRemotePort = %@", (uint8_t *)&__str, 0xCu);
          }
          v219 = (unsigned int *)v342.__r_.__value_.__r.__words[0];
          if (v342.__r_.__value_.__r.__words[0])
          {
            LODWORD(__str.__first_) = 0;
            v220 = CFGetTypeID(v342.__r_.__value_.__l.__data_);
            if (v220 == CFNumberGetTypeID()) {
              ctu::cf::assign((ctu::cf *)&__str, v219, v221);
            }
            int v131 = __str.__first_;
          }
          ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v342.__r_.__value_.__l.__data_);
          if (buf[0].__r_.__value_.__r.__words[0])
          {
            buf[0].__r_.__value_.__l.__size_ = buf[0].__r_.__value_.__r.__words[0];
            operator delete(buf[0].__r_.__value_.__l.__data_);
          }
          v141 = v323;
          if (!v150) {
            goto LABEL_261;
          }
          goto LABEL_401;
        }
        std::mutex::unlock(v144);
        if (v151) {
          goto LABEL_392;
        }
      }
      else
      {
        std::mutex::unlock(v144);
      }
      v324 = 0;
LABEL_403:
      v141 = v323;
      goto LABEL_423;
    }
    int v131 = HIDWORD(v363);
    v324 = v368 == 5;
    if (v368 == 5)
    {
      int v136 = CFDictionaryGetValue((CFDictionaryRef)theDict.__begin_, @"PsMediaRoamingTls");
      uint64_t v137 = v136;
      if (v136)
      {
        uint64_t v138 = CFGetTypeID(v136);
        if (v138 == CFBooleanGetTypeID()) {
          v139 = v137;
        }
        else {
          v139 = 0;
        }
        v326 = v139;
      }
      else
      {
        v326 = 0;
      }
      v206 = CFDictionaryGetValue((CFDictionaryRef)theDict.__begin_, @"PsSignalingRoamingTls");
      v141 = v206;
      if (!v206) {
        goto LABEL_380;
      }
    }
    else
    {
      v156 = CFDictionaryGetValue((CFDictionaryRef)theDict.__begin_, @"PsMediaTls");
      v157 = v156;
      if (v156)
      {
        v158 = CFGetTypeID(v156);
        if (v158 == CFBooleanGetTypeID()) {
          v159 = v157;
        }
        else {
          v159 = 0;
        }
        v326 = v159;
      }
      else
      {
        v326 = 0;
      }
      v206 = CFDictionaryGetValue((CFDictionaryRef)theDict.__begin_, @"PsSignalingTls");
      v141 = v206;
      if (!v206) {
        goto LABEL_380;
      }
    }
    v207 = CFGetTypeID(v206);
    if (v207 != CFBooleanGetTypeID()) {
      v141 = 0;
    }
LABEL_380:
    if (v131) {
      goto LABEL_423;
    }
    v323 = v141;
    if (isLazuliCarrierBased) {
      int v131 = 5460;
    }
    else {
      int v131 = 5223;
    }
    v208 = (std::mutex *)Registry::getServiceMap(*((Registry **)this + 7));
    v209 = v208;
    v210 = *(void *)(MEMORY[0x263F035C8] + 8);
    if ((v210 & 0x8000000000000000) != 0)
    {
      v211 = (unsigned __int8 *)(v210 & 0x7FFFFFFFFFFFFFFFLL);
      v212 = 5381;
      do
      {
        v210 = v212;
        v213 = *v211++;
        v212 = (33 * v212) ^ v213;
      }
      while (v213);
    }
    std::mutex::lock(v208);
    buf[0].__r_.__value_.__r.__words[0] = v210;
    v214 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v209[1].__m_.__sig, (unint64_t *)buf);
    if (!v214)
    {
      std::mutex::unlock(v209);
      goto LABEL_403;
    }
    v216 = v214[3];
    v215 = (std::__shared_weak_count *)v214[4];
    if (v215)
    {
      atomic_fetch_add_explicit(&v215->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v209);
      atomic_fetch_add_explicit(&v215->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v215);
      if (!v216)
      {
        v141 = v323;
LABEL_422:
        std::__shared_weak_count::__release_shared[abi:ne180100](v215);
        goto LABEL_423;
      }
    }
    else
    {
      std::mutex::unlock(v209);
      if (!v216) {
        goto LABEL_403;
      }
    }
    v226 = operator new(0x10uLL);
    buf[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v226 + 2);
    buf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v226 + 2);
    *v226 = @"RCS";
    v226[1] = @"CellRemotePort";
    buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v226;
    v342.__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t, void, uint64_t, std::string *, void, void))(*(void *)v216 + 104))(&v342, v216, *(unsigned int *)(*((void *)this + 5) + 52), 1, buf, 0, 0);
    v227 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__str.__first_) = 138412290;
      *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = (std::__split_buffer<std::string>::pointer)v342.__r_.__value_.__r.__words[0];
      _os_log_impl(&dword_223AF3000, v227, OS_LOG_TYPE_DEFAULT, "#I RCS.CellRemotePort = %@", (uint8_t *)&__str, 0xCu);
    }
    v228 = (unsigned int *)v342.__r_.__value_.__r.__words[0];
    if (v342.__r_.__value_.__r.__words[0])
    {
      LODWORD(__str.__first_) = 0;
      v229 = CFGetTypeID(v342.__r_.__value_.__l.__data_);
      if (v229 == CFNumberGetTypeID()) {
        ctu::cf::assign((ctu::cf *)&__str, v228, v230);
      }
      int v131 = __str.__first_;
    }
    ctu::SharedRef<void const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,void const>::~SharedRef((const void **)&v342.__r_.__value_.__l.__data_);
    if (buf[0].__r_.__value_.__r.__words[0])
    {
      buf[0].__r_.__value_.__l.__size_ = buf[0].__r_.__value_.__r.__words[0];
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    v141 = v323;
    if (!v215) {
      goto LABEL_423;
    }
    goto LABEL_422;
  }
  if (!sd::IsDataConnectionImSupportedByDevice(v8)) {
    goto LABEL_569;
  }
  long long v28 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_223AF3000, v28, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: reading from devinfo", (uint8_t *)buf, 2u);
  }
  *(void *)&v352 = 0;
  *(_OWORD *)v350 = 0u;
  v351 = 0u;
  *(_OWORD *)v348 = 0u;
  *(_OWORD *)v349 = 0u;
  memset(buf, 0, sizeof(buf));
  uint64_t v29 = *((void *)this + 22);
  if (&v349[1] != (std::string **)(v29 + 80)) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)&v349[1], *(std::string **)(v29 + 80), *(long long **)(v29 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v29 + 88) - *(void *)(v29 + 80)) >> 3));
  }
  (*(void (**)(std::__split_buffer<std::string> *__return_ptr, sd::IMSSubscriberModel *))(*(void *)this + 584))(&__str, this);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&v351);
  v351 = *(_OWORD *)&__str.__first_;
  *(void *)&v352 = __str.__end_;
  memset(&__str, 0, 24);
  v362.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v362);
  sd::IMSSubscriberModel::getImsDomain(this, (std::string *)&__str);
  uint64_t v30 = (std::string *)((char *)a2 + 456);
  if (*((char *)a2 + 479) < 0) {
    operator delete(v30->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v30->__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__first_;
  *((void *)a2 + 59) = __str.__end_;
  sd::IMSSubscriberModel::getPrivateIdentity(this, (std::string *)&__str);
  int v31 = (std::string *)((char *)a2 + 432);
  if (*((char *)a2 + 455) < 0) {
    operator delete(v31->__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v31->__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__first_;
  *((void *)a2 + 5SystemDeterminationManager::handleDumpState_sync(this - 6) = __str.__end_;
  if (a3)
  {
    memset(&__str, 0, 24);
    sd::UEInfo::DeviceInfo::publicIdentityFromImsi((uint64_t *)&__str, (sd::UEInfo::DeviceInfo *)(*((void *)this + 22) + 104));
    uint64_t v32 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      std::vector<std::string>::pointer v33 = &__str;
      if (SHIBYTE(__str.__end_) < 0) {
        std::vector<std::string>::pointer v33 = __str.__first_;
      }
      LODWORD(v362.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v362.__r_.__value_.__r.__words + 4) = (std::string::size_type)v33;
      _os_log_impl(&dword_223AF3000, v32, OS_LOG_TYPE_DEFAULT, "#I Unprovisioned: Public identity - %s", (uint8_t *)&v362, 0xCu);
    }
    memset(&v362, 0, sizeof(v362));
    long long v34 = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v362, (long long *)&__str);
    v362.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
    if ((std::string *)((char *)a2 + 480) != &v362) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)a2 + 20, (std::string *)v362.__r_.__value_.__l.__data_, v34, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v34 - v362.__r_.__value_.__r.__words[0]) >> 3));
    }
    *((_DWORD *)a2 + 13MEMORY[0x223CBB890]((char *)this + 8) = 1;
    v342.__r_.__value_.__r.__words[0] = (std::string::size_type)&v362;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v342);
    if (SHIBYTE(__str.__end_) < 0) {
      operator delete(__str.__first_);
    }
  }
  else
  {
    memset(&__str, 0, 32);
    sd::IMSSubscriberModel::getPublicIdentities(this, (uint64_t)&__str);
    if ((std::__split_buffer<std::string> *)((char *)a2 + 480) != &__str) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)a2 + 20, __str.__first_, (long long *)__str.__begin_, 0xAAAAAAAAAAAAAAABLL * (((char *)__str.__begin_ - (char *)__str.__first_) >> 3));
    }
    if (LODWORD(__str.__end_cap_.__value_) == 1) {
      v160 = 1;
    }
    else {
      v160 = 2;
    }
    if (LODWORD(__str.__end_cap_.__value_) == 2) {
      v161 = 0;
    }
    else {
      v161 = v160;
    }
    *((_DWORD *)a2 + 13MEMORY[0x223CBB890]((char *)this + 8) = v161;
    v362.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v362);
  }
  v162 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 479) < 0) {
      uint64_t v30 = (std::string *)v30->__r_.__value_.__r.__words[0];
    }
    LODWORD(__str.__first_) = 136446210;
    *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = v30;
    _os_log_impl(&dword_223AF3000, v162, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: DOMAIN - %{public}s", (uint8_t *)&__str, 0xCu);
    v162 = *v7;
  }
  if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 455) < 0) {
      int v31 = (std::string *)v31->__r_.__value_.__r.__words[0];
    }
    LODWORD(__str.__first_) = 136315138;
    *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = v31;
    _os_log_impl(&dword_223AF3000, v162, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Private Identity - %s", (uint8_t *)&__str, 0xCu);
    v162 = *v7;
  }
  if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
  {
    v163 = (std::string *)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 61) - *((void *)a2 + 60)) >> 3));
    v164 = (std::string *)"U";
    if (!*((_DWORD *)a2 + 138)) {
      v164 = (std::string *)"I";
    }
    LODWORD(__str.__first_) = 134218242;
    *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = v163;
    WORD2(__str.__begin_) = 2080;
    *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__begin_ + SystemDeterminationManager::handleDumpState_sync(this - 6) = v164;
    _os_log_impl(&dword_223AF3000, v162, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Num public identities - %lu (%sSIM)", (uint8_t *)&__str, 0x16u);
  }
  v165 = (long long *)*((void *)a2 + 60);
  for (n = (long long *)*((void *)a2 + 61); v165 != n; v165 = (long long *)((char *)v165 + 24))
  {
    memset(&__str, 0, 24);
    if (*((char *)v165 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)v165, *((void *)v165 + 1));
    }
    else
    {
      v167 = *v165;
      __str.__end_ = (std::__split_buffer<std::string>::pointer)*((void *)v165 + 2);
      *(_OWORD *)&__str.__first_ = v167;
    }
    v168 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      if (SHIBYTE(__str.__end_) >= 0) {
        v169 = &__str;
      }
      else {
        v169 = __str.__first_;
      }
      LODWORD(v362.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v362.__r_.__value_.__r.__words + 4) = (std::string::size_type)v169;
      _os_log_impl(&dword_223AF3000, v168, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Public Identity - %s", (uint8_t *)&v362, 0xCu);
    }
    if (SHIBYTE(__str.__end_) < 0) {
      operator delete(__str.__first_);
    }
  }
  v170 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__str.__first_) = 134217984;
    *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = (std::__split_buffer<std::string>::pointer)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)v350 - (unint64_t)v349[1]) >> 3));
    _os_log_impl(&dword_223AF3000, v170, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Num PCSCFs [SIM] - %lu", (uint8_t *)&__str, 0xCu);
  }
  v171 = v349[1];
  for (iuint64_t i = *(std::string **)v350; v171 != ii; ++v171)
  {
    memset(&__str, 0, 24);
    if (SHIBYTE(v171->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__str, v171->__r_.__value_.__l.__data_, v171->__r_.__value_.__l.__size_);
    }
    else
    {
      v173 = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
      __str.__end_ = (std::__split_buffer<std::string>::pointer)v171->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__first_ = v173;
    }
    v174 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      if (SHIBYTE(__str.__end_) >= 0) {
        v175 = &__str;
      }
      else {
        v175 = __str.__first_;
      }
      LODWORD(v362.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v362.__r_.__value_.__r.__words + 4) = (std::string::size_type)v175;
      _os_log_impl(&dword_223AF3000, v174, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: PCSCF [SIM] - %{public}s", (uint8_t *)&v362, 0xCu);
    }
    if (SHIBYTE(__str.__end_) < 0) {
      operator delete(__str.__first_);
    }
  }
  v176 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__str.__first_) = 134217984;
    *(std::__split_buffer<std::string>::pointer *)((char *)&__str.__first_ + 4) = (std::__split_buffer<std::string>::pointer)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v351 + 1) - v351) >> 3));
    _os_log_impl(&dword_223AF3000, v176, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Num PCSCFs [PCO] - %lu", (uint8_t *)&__str, 0xCu);
  }
  v178 = (long long *)*((void *)&v351 + 1);
  v177 = (long long *)v351;
  if ((void)v351 == *((void *)&v351 + 1)) {
    goto LABEL_341;
  }
  do
  {
    memset(&__str, 0, 24);
    if (*((char *)v177 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__str, *(const std::string::value_type **)v177, *((void *)v177 + 1));
    }
    else
    {
      v179 = *v177;
      __str.__end_ = (std::__split_buffer<std::string>::pointer)*((void *)v177 + 2);
      *(_OWORD *)&__str.__first_ = v179;
    }
    v180 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      if (SHIBYTE(__str.__end_) >= 0) {
        v181 = &__str;
      }
      else {
        v181 = __str.__first_;
      }
      LODWORD(v362.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v362.__r_.__value_.__r.__words + 4) = (std::string::size_type)v181;
      _os_log_impl(&dword_223AF3000, v180, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: PCSCF [PCO] - %{public}s", (uint8_t *)&v362, 0xCu);
    }
    if (SHIBYTE(__str.__end_) < 0) {
      operator delete(__str.__first_);
    }
    v177 = (long long *)((char *)v177 + 24);
  }
  while (v177 != v178);
  v183 = (long long *)*((void *)&v351 + 1);
  v182 = (std::string *)v351;
  if ((void)v351 == *((void *)&v351 + 1))
  {
LABEL_341:
    v184 = (std::vector<std::string> *)((char *)a2 + 504);
    if ((std::string **)((char *)a2 + 504) == &v349[1]) {
      goto LABEL_344;
    }
    v182 = v349[1];
    v183 = *(long long **)v350;
    goto LABEL_343;
  }
  v184 = (std::vector<std::string> *)((char *)a2 + 504);
  if ((long long *)((char *)a2 + 504) != &v351) {
LABEL_343:
  }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v184, v182, v183, 0xAAAAAAAAAAAAAAABLL * (((char *)v183 - (char *)v182) >> 3));
LABEL_344:
  *((_DWORD *)a2 + 60) = sd::imsServiceMaskToIpTelephonyServiceMask();
  std::string::operator=((std::string *)a2 + 17, (const std::string *)(*((void *)this + 22) + 104));
  *((_DWORD *)a2 + 82) = v363;
  v185 = *((void *)this + 22);
  *((unsigned char *)a2 + 712) = *(unsigned char *)(v185 + 272);
  std::string::operator=((std::string *)((char *)a2 + 616), (const std::string *)(v185 + 280));
  std::string::operator=((std::string *)((char *)a2 + 664), (const std::string *)(*((void *)this + 22) + 304));
  v186 = *((void *)this + 22);
  if (*(unsigned char *)(v186 + 264))
  {
    CSIPhoneNumber::getBaseNumber((uint64_t *)&__str, (CSIPhoneNumber *)(v186 + 128));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&__str.__first_;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)__str.__end_;
  }
  std::string::operator=((std::string *)a2 + 16, &__p);
  v362.__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 11) + 24))(&v362);
  v187 = (std::mutex *)Registry::getServiceMap(*((Registry **)this + 7));
  v188 = v187;
  v189 = *(void *)(MEMORY[0x263F035C8] + 8);
  if (v189 < 0)
  {
    v190 = (unsigned __int8 *)(v189 & 0x7FFFFFFFFFFFFFFFLL);
    v191 = 5381;
    do
    {
      v189 = v191;
      v192 = *v190++;
      v191 = (33 * v191) ^ v192;
    }
    while (v192);
  }
  std::mutex::lock(v187);
  __str.__first_ = (std::__split_buffer<std::string>::pointer)v189;
  v193 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v188[1].__m_.__sig, (unint64_t *)&__str);
  if (v193)
  {
    v195 = v193[3];
    v194 = (std::__shared_weak_count *)v193[4];
    if (v194)
    {
      atomic_fetch_add_explicit(&v194->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v188);
      atomic_fetch_add_explicit(&v194->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v194);
      v196 = 0;
      goto LABEL_356;
    }
  }
  else
  {
    v195 = 0;
  }
  std::mutex::unlock(v188);
  v194 = 0;
  v196 = 1;
LABEL_356:
  v197 = (*(uint64_t (**)(uint64_t, void))(*(void *)v195 + 112))(v195, *(unsigned int *)(*((void *)this + 5) + 52));
  if ((v196 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v194);
  }
  v198 = *v7;
  v199 = os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT);
  if (v197)
  {
    if (v199)
    {
      LOWORD(__str.__first_) = 0;
      _os_log_impl(&dword_223AF3000, v198, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: We have a unique operator bundle, copy it", (uint8_t *)&__str, 2u);
    }
    __str.__first_ = 0;
    (*(void (**)(std::__split_buffer<std::string> *__return_ptr))(**((void **)this + 11) + 24))(&__str);
    v200 = v362.__r_.__value_.__r.__words[0];
    v201 = __str.__first_;
    ims::PrefsContainer::release((ims::StackConfig *)((char *)a2 + 8));
    *((void *)a2 + 1) = v200;
    *((void *)a2 + 2) = v201;
    ims::PrefsContainer::retain((ims::StackConfig *)((char *)a2 + 8));
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&__str.__first_);
    int v10 = v328;
  }
  else
  {
    if (v199)
    {
      LOWORD(__str.__first_) = 0;
      _os_log_impl(&dword_223AF3000, v198, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Operator and Carrier bundles are the same", (uint8_t *)&__str, 2u);
    }
    v202 = v362.__r_.__value_.__r.__words[0];
    ims::PrefsContainer::release((ims::StackConfig *)((char *)a2 + 8));
    *((void *)a2 + 1) = v202;
    *((void *)a2 + 2) = 0;
    ims::PrefsContainer::retain((ims::StackConfig *)((char *)a2 + 8));
  }
  v203 = subscriber::simSlotAsInstance();
  *((_DWORD *)a2 + 181) = v203;
  v204 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__str.__first_) = 67109120;
    HIDWORD(__str.__first_) = v203;
    _os_log_impl(&dword_223AF3000, v204, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: SIM instance - %u", (uint8_t *)&__str, 8u);
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v362.__r_.__value_.__l.__data_);
  __str.__first_ = (std::__split_buffer<std::string>::pointer)&v351;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  __str.__first_ = (std::__split_buffer<std::string>::pointer)&v349[1];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v349[0]) < 0) {
    operator delete(v348[0]);
  }
  __str.__first_ = &buf[1];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
  {
    v205 = (void *)buf[0].__r_.__value_.__r.__words[0];
LABEL_568:
    operator delete(v205);
  }
LABEL_569:
  *((_DWORD *)a2 + 80) = sd::IMSSubscriberModel::getPreferredMediaStack(this, (sd::IMSSubscriberConfigInterface *)(v10 != 0));
  std::string::basic_string[abi:ne180100]<0>(buf, "createInitialRegParams");
  sd::IMSSubscriberModel::fillNetworkAccessInfo_sync((uint64_t)this, (uint64_t)a2 + 24, (uint64_t *)buf, v10 != 0, v327);
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, 24);
  if (*((char *)this + 327) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__str, *((const std::string::value_type **)this + 38), *((void *)this + 39));
  }
  else
  {
    *(_OWORD *)&__str.__first_ = *((_OWORD *)this + 19);
    __str.__end_ = (std::__split_buffer<std::string>::pointer)*((void *)this + 40);
  }
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 15) + 32))(buf);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a2 + 296));
  *(std::string *)((char *)a2 + 29SystemDeterminationManager::handleDumpState_sync(this - 6) = buf[0];
  memset(buf, 0, 24);
  v362.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v362);
  std::string::operator=((std::string *)((char *)a2 + 248), (const std::string *)&__str);
  sd::UEInfo::DeviceInfo::getThreeDigitMcc((uint64_t *)buf, (sd::UEInfo::DeviceInfo *)(*((void *)this + 22) + 104));
  v289 = (void **)((char *)a2 + 336);
  if (*((char *)a2 + 359) < 0) {
    operator delete(*v289);
  }
  *(_OWORD *)v289 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
  *((void *)a2 + 44) = *((void *)&buf[0].__r_.__value_.__l + 2);
  sd::UEInfo::DeviceInfo::getThreeDigitMnc((uint64_t *)buf, (sd::UEInfo::DeviceInfo *)(*((void *)this + 22) + 104));
  v290 = (void **)((char *)a2 + 360);
  if (*((char *)a2 + 383) < 0) {
    operator delete(*v290);
  }
  *(_OWORD *)v290 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
  *((void *)a2 + 47) = *((void *)&buf[0].__r_.__value_.__l + 2);
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 15) + 40))(buf);
  v291 = (void **)((char *)a2 + 528);
  if (*((char *)a2 + 551) < 0) {
    operator delete(*v291);
  }
  *(_OWORD *)v291 = *(_OWORD *)&buf[0].__r_.__value_.__l.__data_;
  *((void *)a2 + 6MEMORY[0x223CBB890]((char *)this + 8) = *((void *)&buf[0].__r_.__value_.__l + 2);
  *((unsigned char *)a2 + 332) = (*(uint64_t (**)(void, void))(**((void **)this + 17) + 448))(*((void *)this + 17), *(unsigned int *)(*((void *)this + 5) + 52));
  v292 = *(unsigned char *)(*((void *)this + 5) + 49) != 1 && *(unsigned char *)(*((void *)this + 9) + 8) == 0;
  *((unsigned char *)a2 + 730) = v292;
  std::string::operator=((std::string *)((char *)a2 + 640), (const std::string *)((char *)this + 328));
  *((unsigned char *)a2 + 55MEMORY[0x223CBB890]((char *)this + 8) = **((_DWORD **)this + 20) == 2;
  v293 = v368 == 5;
  *((unsigned char *)a2 + 729) = *((unsigned char *)this + 276);
  *((unsigned char *)a2 + 55SystemDeterminationManager::handleDumpState_sync(this - 6) = v293;
  v294 = (std::mutex *)Registry::getServiceMap(*((Registry **)this + 7));
  v295 = v294;
  v296 = *(void *)(MEMORY[0x263F035C0] + 8);
  if ((v296 & 0x8000000000000000) != 0)
  {
    v297 = (unsigned __int8 *)(v296 & 0x7FFFFFFFFFFFFFFFLL);
    v298 = 5381;
    do
    {
      v296 = v298;
      v299 = *v297++;
      v298 = (33 * v298) ^ v299;
    }
    while (v299);
  }
  std::mutex::lock(v294);
  buf[0].__r_.__value_.__r.__words[0] = v296;
  v300 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v295[1].__m_.__sig, (unint64_t *)buf);
  if (v300)
  {
    v302 = (GestaltUtilityInterface *)v300[3];
    v301 = (std::__shared_weak_count *)v300[4];
    if (v301)
    {
      atomic_fetch_add_explicit(&v301->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v295);
      atomic_fetch_add_explicit(&v301->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v301);
      v303 = 0;
      goto LABEL_591;
    }
  }
  else
  {
    v302 = 0;
  }
  std::mutex::unlock(v295);
  v301 = 0;
  v303 = 1;
LABEL_591:
  *((unsigned char *)a2 + 72MEMORY[0x223CBB890]((char *)this + 8) = GestaltUtilityInterface::isWatch(v302);
  if ((v303 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v301);
  }
  v304 = *((unsigned __int8 *)this + 276);
  v305 = *v7;
  v306 = os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT);
  if (v304)
  {
    v307 = v328;
    if (!v306) {
      goto LABEL_599;
    }
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    v308 = "#I IMS Registration Info: Carrier and operator bundles refreshed";
  }
  else
  {
    v307 = v328;
    if (!v306) {
      goto LABEL_599;
    }
    LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
    v308 = "#I IMS Registration Info: Carrier and operator bundles didn't change";
  }
  _os_log_impl(&dword_223AF3000, v305, OS_LOG_TYPE_DEFAULT, v308, (uint8_t *)buf, 2u);
LABEL_599:
  v309 = *v7;
  if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
  {
    v310 = &v343;
    if ((v343.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v310 = (std::string *)v343.__r_.__value_.__r.__words[0];
    }
    uint64_t p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v312 = &__str;
    if (SHIBYTE(__str.__end_) < 0) {
      v312 = __str.__first_;
    }
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v310;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + SystemDeterminationManager::handleDumpState_sync(this - 6) = v363;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 2080;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[2] + 4) = (std::string::size_type)p_p;
    WORD2(buf[1].__r_.__value_.__r.__words[0]) = 2082;
    *(std::string::size_type *)((char *)buf[1].__r_.__value_.__r.__words + SystemDeterminationManager::handleDumpState_sync(this - 6) = (std::string::size_type)v312;
    _os_log_impl(&dword_223AF3000, v309, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: network interface: %s, app ID: %d, mdn: %s, country: %{public}s", (uint8_t *)buf, 0x26u);
  }
  memset(buf, 0, 24);
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 17) + 296))(buf);
  v313 = HIBYTE(buf[0].__r_.__value_.__r.__words[2]);
  if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    v313 = buf[0].__r_.__value_.__l.__size_;
  }
  if (v313)
  {
    v314 = (void *)((char *)a2 + 272);
    std::string::operator=((std::string *)((char *)a2 + 272), buf);
    v315 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 295) < 0) {
        v314 = (void *)*v314;
      }
      LODWORD(v362.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)v362.__r_.__value_.__r.__words + 4) = (std::string::size_type)v314;
      _os_log_impl(&dword_223AF3000, v315, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: Local routable address - %{public}s", (uint8_t *)&v362, 0xCu);
    }
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (v307) {
    v316 = v327 == 0;
  }
  else {
    v316 = 0;
  }
  v317 = v316;
  v318 = *v7;
  if (os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT))
  {
    v319 = sd::ipTelephonyServiceMaskToString((sd *)*((unsigned int *)a2 + 60));
    if (v307) {
      v320 = "iWLAN";
    }
    else {
      v320 = (const char *)asString();
    }
    v321 = "";
    if (v317) {
      v321 = "[overCell]";
    }
    if (*((char *)a2 + 551) < 0) {
      v291 = (void **)*v291;
    }
    v322 = *((unsigned __int8 *)a2 + 332);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136316162;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = v319;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[0].__r_.__value_.__r.__words[1] + SystemDeterminationManager::handleDumpState_sync(this - 6) = (std::string::size_type)v320;
    HIWORD(buf[0].__r_.__value_.__r.__words[2]) = 2080;
    buf[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v321;
    LOWORD(buf[1].__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf[1].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v291;
    WORD1(buf[1].__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf[1].__r_.__value_.__r.__words[2]) = v322;
    _os_log_impl(&dword_223AF3000, v318, OS_LOG_TYPE_DEFAULT, "#I IMS Registration Info: initializing for %s over %{public}s%s (APN: %{public}s, hasLegacyRat=%d)", (uint8_t *)buf, 0x30u);
  }
  if (SHIBYTE(__str.__end_) < 0) {
    operator delete(__str.__first_);
  }
  sd::RuntimeInfo::~RuntimeInfo(&v363);
  if (SHIBYTE(v343.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v343.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_223B42F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,const void *a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v80 - 144));
  if (a79 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  IMSInfo::~IMSInfo(&a80);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&a41);
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  a80 = &a55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a80);
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a70 < 0) {
    operator delete(a65);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (SLOBYTE(STACK[0x2F7]) < 0) {
    operator delete((void *)STACK[0x2E0]);
  }
  sd::RuntimeInfo::~RuntimeInfo((void **)&STACK[0x2F8]);
  if (a75 < 0) {
    operator delete(a74);
  }
  if (a77 < 0) {
    operator delete(a76);
  }
  _Unwind_Resume(a1);
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void ims::IsimFiles::~IsimFiles(void **this)
{
  uint64_t v2 = this + 12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  uint64_t v2 = this + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

__CFDictionary *sd::IMSSubscriberModel::createXcapConfigParams(sd::UEInfo::IsimInfo **this)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  if (!capabilities::ct::supportsCellRadio((capabilities::ct *)this)) {
    return 0;
  }
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  uint64_t v49 = 0;
  long long v48 = 0u;
  *(_OWORD *)uint64_t v46 = 0u;
  memset(v47, 0, sizeof(v47));
  memset(v45, 0, sizeof(v45));
  *(_OWORD *)std::string __p = 0u;
  sd::IMSSubscriberModel::getPrivateIdentity((sd::IMSSubscriberModel *)this, (std::string *)&v42);
  if (SBYTE7(v45[0]) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&v45[0] = v43;
  long long v43 = 0u;
  *(_OWORD *)std::string __p = v42;
  long long v42 = 0u;
  sd::IMSSubscriberModel::getPublicIdentities((sd::IMSSubscriberModel *)this, (uint64_t)&v42);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)v45 + 8), (std::string *)v42, *((long long **)&v42 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v42 + 1) - v42) >> 3));
  sd::IMSSubscriberModel::getImsDomain((sd::IMSSubscriberModel *)this, &v54);
  if (SBYTE7(v47[0]) < 0) {
    operator delete(v46[0]);
  }
  *(_OWORD *)uint64_t v46 = *(_OWORD *)&v54.__r_.__value_.__l.__data_;
  *(void *)&v47[0] = *((void *)&v54.__r_.__value_.__l + 2);
  value = 0;
  ims::IsimFiles::Serialize((uint64_t *)&value, (ims::IsimFiles *)__p);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F4B288], value);
  uint64_t v3 = this[22];
  if (*((char *)v3 + 303) < 0) {
    std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)v3 + 35), *((void *)v3 + 36));
  }
  else {
    std::string v40 = *(std::string *)((char *)v3 + 280);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v51, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
  }
  else {
    std::string v51 = v40;
  }
  uint64_t v52 = 0;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v54, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  }
  else {
    std::string v54 = v51;
  }
  std::string v53 = 0;
  int v4 = ctu::cf::convert_copy();
  unint64_t v5 = (const void **)MEMORY[0x263F4B280];
  if (v4)
  {
    std::string::size_type v6 = (std::string::size_type)v52;
    uint64_t v52 = v53;
    v39.__r_.__value_.__r.__words[0] = v6;
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v39.__r_.__value_.__l.__data_);
  }
  long long v7 = *v5;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  long long v50 = v52;
  uint64_t v52 = 0;
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&v52);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  CFDictionarySetValue(Mutable, v7, v50);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&v50);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  int v8 = sd::UEInfo::IsimInfo::valid(this[22]);
  uint64_t v9 = (const void **)MEMORY[0x263EFFB38];
  if (v8) {
    uint64_t v9 = (const void **)MEMORY[0x263EFFB40];
  }
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x263F4B298], *v9);
  memset(&v39, 0, sizeof(v39));
  int v10 = (const std::string *)this[5];
  if (!v10[2].__r_.__value_.__s.__data_[1]) {
    std::string::operator=(&v39, v10);
  }
  uint64_t v11 = (*((uint64_t (**)(sd::UEInfo::IsimInfo **))*this + 9))(this);
  unint64_t v12 = (os_log_t *)(*(uint64_t (**)(sd::UEInfo::IsimInfo *, uint64_t))(*(void *)this[4] + 16))(this[4], v11);
  int v13 = SHIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = *v12;
  BOOL v16 = os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT);
  if (size)
  {
    if (v16)
    {
      int v17 = (std::string *)v39.__r_.__value_.__r.__words[0];
      long long v18 = this[5];
      long long v21 = (char *)*((void *)v18 + 3);
      uint64_t v19 = (char *)v18 + 24;
      char v20 = v21;
      if (v13 >= 0) {
        int v17 = &v39;
      }
      uint64_t v22 = v19[23];
      int v23 = (char)v22;
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *((void *)v19 + 1);
      }
      if (v23 < 0) {
        uint64_t v19 = v20;
      }
      if (v22) {
        uint64_t v24 = v19;
      }
      else {
        uint64_t v24 = "<invalid>";
      }
      LODWORD(v54.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
      WORD2(v54.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v54.__r_.__value_.__r.__words[1] + SystemDeterminationManager::handleDumpState_sync(this - 6) = (std::string::size_type)v24;
      _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I XcapConfig: Setting sim slot uuid to %s (account ID %s)", (uint8_t *)&v54, 0x16u);
      LOBYTE(v13) = *((unsigned char *)&v39.__r_.__value_.__s + 23);
    }
    if ((v13 & 0x80) != 0) {
      std::string::__init_copy_ctor_external(&v37, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
    }
    else {
      std::string v37 = v39;
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v51, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    }
    else {
      std::string v51 = v37;
    }
    long long v50 = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v54, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    }
    else {
      std::string v54 = v51;
    }
    uint64_t v52 = 0;
    int v31 = ctu::cf::convert_copy();
    uint64_t v32 = (const void **)MEMORY[0x263F4B290];
    if (v31)
    {
      std::vector<std::string>::pointer v33 = v50;
      long long v50 = v52;
      std::string v53 = v33;
      ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&v53);
    }
    long long v34 = *v32;
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54.__r_.__value_.__l.__data_);
    }
    long long v35 = v50;
    long long v38 = v50;
    long long v50 = 0;
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&v50);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    CFDictionarySetValue(Mutable, v34, v35);
    ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef(&v38);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
  else if (v16)
  {
    unint64_t v25 = this[5];
    long long v28 = (const char *)*((void *)v25 + 3);
    long long v26 = (char *)v25 + 24;
    uint64_t v27 = v28;
    uint64_t v29 = *((unsigned __int8 *)v26 + 23);
    int v30 = (char)v29;
    if ((v29 & 0x80u) != 0) {
      uint64_t v29 = *((void *)v26 + 1);
    }
    if (v30 < 0) {
      long long v26 = v27;
    }
    if (!v29) {
      long long v26 = "<invalid>";
    }
    LODWORD(v54.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v54.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    _os_log_impl(&dword_223AF3000, v15, OS_LOG_TYPE_DEFAULT, "#I XcapConfig: No account ID found for subscriber %s", (uint8_t *)&v54, 0xCu);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&value);
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v54);
  *(void *)&long long v42 = &v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  *(void *)&long long v42 = (char *)v47 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (SBYTE7(v47[0]) < 0) {
    operator delete(v46[0]);
  }
  *(void *)&long long v42 = (char *)v45 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  if (SBYTE7(v45[0]) < 0) {
    operator delete(__p[0]);
  }
  return Mutable;
}

void sub_223B43AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, __int16 *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,const void *a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)(v36 - 168));
  if (*(char *)(v36 - 137) < 0) {
    operator delete(*(void **)(v36 - 160));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&a29);
  a17 = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  ims::IsimFiles::~IsimFiles(&a36);
  _Unwind_Resume(a1);
}

void sd::IMSSubscriberModel::fetchImsCredentials(sd::IMSSubscriberModel *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  int v4 = (char *)operator new(0xE0uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)int v4 = &unk_26D745AB0;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 5SystemDeterminationManager::handleDumpState_sync(this - 6) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 8MEMORY[0x223CBB890]((char *)this + 8) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 13SystemDeterminationManager::handleDumpState_sync(this - 6) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 16MEMORY[0x223CBB890]((char *)this + 8) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *((void *)v4 + 27) = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  unint64_t v5 = (const std::string *)(*((void *)this + 22) + 104);
  *a2 = v4 + 24;
  a2[1] = v4;
  std::string::operator=((std::string *)v4 + 1, v5);
  std::string::operator=((std::string *)v4 + 2, (const std::string *)(*((void *)this + 22) + 328));
  std::string::operator=((std::string *)v4 + 3, (const std::string *)(*((void *)this + 22) + 352));
  uint64_t v6 = *((void *)this + 22);
  if (*(unsigned char *)(v6 + 264)) {
    CSIPhoneNumber::getBaseNumber((uint64_t *)&v13, (CSIPhoneNumber *)(v6 + 128));
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&v13, "");
  }
  long long v7 = (void **)(v4 + 120);
  if (v4[143] < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)long long v7 = v13;
  *((void *)v4 + 17) = v14;
  sd::IMSSubscriberModel::getPrivateIdentity(this, (std::string *)&v13);
  int v8 = (void **)(v4 + 96);
  if (v4[119] < 0) {
    operator delete(*v8);
  }
  *(_OWORD *)int v8 = v13;
  *((void *)v4 + 14) = v14;
  long long v13 = 0u;
  long long v14 = 0u;
  sd::IMSSubscriberModel::getPublicIdentities(this, (uint64_t)&v13);
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)v4 + 6, (std::string *)v13, *((long long **)&v13 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v13 + 1) - v13) >> 3));
  sd::IMSSubscriberModel::getImsDomain(this, &v12);
  uint64_t v9 = (void **)(v4 + 168);
  if (v4[191] < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
  *((void *)v4 + 23) = *((void *)&v12.__r_.__value_.__l + 2);
  int v10 = DWORD2(v14);
  *((_DWORD *)v4 + 54) = DWORD2(v14);
  if (v10 == 2)
  {
    uint64_t v11 = *((void *)this + 22);
    if (v4 + 192 != (char *)(v11 + 80)) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)v4 + 8, *(std::string **)(v11 + 80), *(long long **)(v11 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v11 + 88) - *(void *)(v11 + 80)) >> 3));
    }
  }
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);
}

void sub_223B43E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  _Unwind_Resume(a1);
}

BOOL sd::IMSSubscriberModel::isUSimPresent(sd::IMSSubscriberModel *this)
{
  uint64_t v1 = *((void *)this + 22);
  int v2 = *(unsigned __int8 *)(v1 + 376);
  if (*(unsigned char *)(v1 + 376))
  {
    uint64_t v4 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
    unint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v7 = 0;
      _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I USIM found", v7, 2u);
    }
  }
  return v2 != 0;
}

uint64_t sd::IMSSubscriberModel::evaluateSimFiles(sd::IMSSubscriberModel *this)
{
  uint64_t v2 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v2);
  if ((*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 304))(this)) {
    goto LABEL_2;
  }
  long long v7 = (sd::UEInfo::IsimInfo *)*((void *)this + 22);
  if (*(_DWORD *)v7)
  {
    if (*(_DWORD *)v7 == 2)
    {
      int v8 = *v3;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v9 = "#I ISIM present or not is unknown yet.";
LABEL_23:
        uint64_t v5 = 2;
        _os_log_impl(&dword_223AF3000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 2u);
        return v5;
      }
      return 2;
    }
    if (!*((unsigned char *)v7 + 4))
    {
      int v8 = *v3;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v9 = "#I ISIM present, but still waiting for files to be read.";
        goto LABEL_23;
      }
      return 2;
    }
    if (sd::UEInfo::IsimInfo::valid(v7)) {
      return 1;
    }
    std::string v12 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v12, OS_LOG_TYPE_DEFAULT, "#I ISIM files read, but not usable.", buf, 2u);
    }
    uint64_t v13 = *((void *)this + 22);
    if (*(char *)(v13 + 31) < 0)
    {
      if (!*(void *)(v13 + 16)) {
        goto LABEL_2;
      }
    }
    else if (!*(unsigned char *)(v13 + 31))
    {
      goto LABEL_2;
    }
    if (((*(uint64_t (**)(void, BOOL))(**((void **)this + 11) + 152))(*((void *)this + 11), **((_DWORD **)this + 20) == 2) & 1) == 0)
    {
      long long v14 = *v3;
      if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_223AF3000, v14, OS_LOG_TYPE_DEFAULT, "#I no USIM fallback, ISIM files are not complete, sending impi_ready.", buf, 2u);
      }
      uint64_t v28 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
      *(_OWORD *)std::string __p = 0u;
      memset(v21, 0, sizeof(v21));
      memset(v20, 0, sizeof(v20));
      uint64_t v15 = (const std::string *)(*((void *)this + 22) + 104);
      *(_OWORD *)long long buf = 0u;
      std::string::operator=((std::string *)buf, v15);
      std::string::operator=((std::string *)((char *)v20 + 8), (const std::string *)(*((void *)this + 22) + 328));
      std::string::operator=(v21, (const std::string *)(*((void *)this + 22) + 352));
      std::string::operator=(&v21[1], (const std::string *)(*((void *)this + 22) + 8));
      uint64_t v16 = *((void *)this + 22);
      if (*(unsigned char *)(v16 + 264)) {
        CSIPhoneNumber::getBaseNumber((uint64_t *)&v17, (CSIPhoneNumber *)(v16 + 128));
      }
      else {
        std::string::basic_string[abi:ne180100]<0>(&v17, "");
      }
      if (SBYTE7(v23) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v17;
      *(void *)&long long v23 = v18;
      (*(void (**)(void, uint64_t, uint8_t *))(**((void **)this + 17) + 88))(*((void *)this + 17), *((void *)this + 5) + 24, buf);
      t_ims_info::~t_ims_info((void **)buf);
    }
  }
  else
  {
    int v10 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_223AF3000, v10, OS_LOG_TYPE_DEFAULT, "#I ISIM not present.", buf, 2u);
    }
  }
LABEL_2:
  if ((*(uint64_t (**)(void, BOOL))(**((void **)this + 11) + 152))(*((void *)this + 11), **((_DWORD **)this + 20) == 2))
  {
    if (!sd::IMSSubscriberModel::isUSimPresent(this))
    {
      uint64_t v4 = *v3;
      uint64_t v5 = 0;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v6 = "#I USIM is not present.";
        goto LABEL_15;
      }
      return v5;
    }
    if (((*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 632))(this) & 1) == 0)
    {
      uint64_t v4 = *v3;
      uint64_t v5 = 0;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v6 = "#I USIM files are not valid.";
LABEL_15:
        _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, v6, buf, 2u);
        return 0;
      }
      return v5;
    }
    return 1;
  }
  uint64_t v4 = *v3;
  uint64_t v5 = 0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    uint64_t v6 = "#I USIM fallback is not supported.";
    goto LABEL_15;
  }
  return v5;
}

void sub_223B443C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  t_ims_info::~t_ims_info((void **)va);
  _Unwind_Resume(a1);
}

BOOL sd::IMSSubscriberModel::isProxyAvailable(sd::IMSSubscriberModel *this)
{
  v4[209] = *(void **)MEMORY[0x263EF8340];
  bzero(v4, 0x688uLL);
  sd::DataCache::getRuntimeInfo((sd::DataCache *)v4, *((void *)this + 24));
  BOOL v2 = !*(unsigned char *)(*((void *)this + 9) + 8)
    && ((*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 304))(this) & 1) == 0
    && *(void *)(*((void *)this + 22) + 80) != *(void *)(*((void *)this + 22) + 88)
    || v4[5] != v4[6];
  sd::RuntimeInfo::~RuntimeInfo(v4);
  return v2;
}

void sub_223B444B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sd::IMSSubscriberModel::isUEInfoValid(sd::UEInfo::IsimInfo **this)
{
  if (((*((uint64_t (**)(sd::UEInfo::IsimInfo **))*this + 38))(this) & 1) == 0
    && (sd::UEInfo::IsimInfo::valid(this[22]) & 1) != 0)
  {
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(sd::UEInfo::IsimInfo *, BOOL))(*(void *)this[11] + 152))(this[11], *(_DWORD *)this[20] == 2);
  if (result)
  {
    uint64_t v3 = (uint64_t (*)(sd::UEInfo::IsimInfo **))*((void *)*this + 79);
    return v3(this);
  }
  return result;
}

uint64_t sd::IMSSubscriberModel::allowIMSBasedOnTTYMode(sd::IMSSubscriberModel *this)
{
  if ((*(unsigned int (**)(void, uint64_t))(**((void **)this + 17) + 288))(*((void *)this + 17), *((void *)this + 5) + 24) == 1)return 0; {
  uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 11) + 88);
  }

  return v3();
}

void sd::IMSSubscriberModel::printImsFeatureState(sd::IMSSubscriberModel *this, const char *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
  uint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(*((void *)this + 20) + 21)) {
      uint64_t v6 = "ON";
    }
    else {
      uint64_t v6 = "OFF";
    }
    int v7 = 136316674;
    int v8 = a2;
    __int16 v9 = 2080;
    int v10 = v6;
    __int16 v11 = 2080;
    uint64_t v12 = asString();
    __int16 v13 = 2080;
    uint64_t v14 = asStringBool();
    __int16 v15 = 2080;
    uint64_t v16 = asStringBool();
    __int16 v17 = 2080;
    uint64_t v18 = asStringBool();
    __int16 v19 = 2080;
    uint64_t v20 = asStringBool();
    _os_log_impl(&dword_223AF3000, v5, OS_LOG_TYPE_DEFAULT, "#I %sIMS Feature: %s, VoLTE Feature support: %s, VoWiFi Feature support: %s, VoWiFi Supported in country of origination: %s, SMS in no VoLTE mode enabled in CB: %s, SMS in no VoLTE mode supported in roaming: %s", (uint8_t *)&v7, 0x48u);
  }
}

void sd::IMSSubscriberModel::dumpIRStatus(void **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v6 = ((uint64_t (*)(void **))(*a1)[9])(a1);
  int v7 = *(NSObject **)(*(uint64_t (**)(void *, uint64_t))(*a1[4] + 16))(a1[4], v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = sd::asString((sd *)*a2, v8);
    int v10 = 136315906;
    uint64_t v11 = a3;
    __int16 v12 = 2080;
    uint64_t v13 = v9;
    __int16 v14 = 2080;
    uint64_t v15 = sd::asString();
    __int16 v16 = 2080;
    uint64_t v17 = sd::asString();
    _os_log_impl(&dword_223AF3000, v7, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: %sSTATE SNAPSHOT[%s]  - Registered: %s, Services: %s", (uint8_t *)&v10, 0x2Au);
  }
}

void sd::IMSSubscriberModel::dumpImsFeatureState(sd::IMSSubscriberModel *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
  uint64_t v3 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136317954;
    uint64_t v5 = asStringBool();
    __int16 v6 = 2080;
    uint64_t v7 = sd::asString();
    __int16 v8 = 2080;
    uint64_t v9 = sd::asString();
    __int16 v10 = 2080;
    uint64_t v11 = asString();
    __int16 v12 = 2080;
    uint64_t v13 = asStringBool();
    __int16 v14 = 2080;
    uint64_t v15 = asString();
    __int16 v16 = 2080;
    uint64_t v17 = asStringBool();
    __int16 v18 = 2080;
    uint64_t v19 = asStringBool();
    __int16 v20 = 2080;
    uint64_t v21 = asStringBool();
    __int16 v22 = 2080;
    uint64_t v23 = asStringBool();
    __int16 v24 = 2080;
    uint64_t v25 = asStringBool();
    __int16 v26 = 2080;
    uint64_t v27 = asStringBool();
    _os_log_impl(&dword_223AF3000, v3, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: fImsFeaturePreference: fIsEnabled=%s (cell=[%s], wifi=[%s]), fVoLTE.fFeatureSupport=%s, fVoLTE.fIsEnabled=%s, fVoNR.fFeatureSupport=%s, fVoNR.fIsEnabled=%s, fVoWiFi.fFeatureSupport=%s, fVoWiFi.fIsAllowed=%s, fVoWiFi.fIsDisabledInCountryOfOrigination=%s, fSms.fCarrierPreference=%s, fSms.fFeatureSupportedInRoaming=%s", buf, 0x7Au);
  }
}

void sd::IMSSubscriberModel::dumpState(sd::IMSSubscriberModel *this)
{
  v114[101] = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 72))(this);
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 4) + 16))(*((void *)this + 4), v2);
  sd::IMSSubscriberModel::dumpImsFeatureState(this);
  uint64_t v4 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_223AF3000, v4, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \t Mask state: {", buf, 2u);
  }
  uint64_t v5 = 0;
  do
  {
    __int16 v6 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = sd::asString();
      int v8 = (*(uint64_t (**)(sd::IMSSubscriberModel *, uint64_t))(*(void *)this + 752))(this, v5);
      *(_DWORD *)long long buf = 136315394;
      *(void *)__int16 v109 = v7;
      *(_WORD *)&v109[8] = 1024;
      *(_DWORD *)long long v110 = v8;
      _os_log_impl(&dword_223AF3000, v6, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \t\t %s[%d]", buf, 0x12u);
    }
    uint64_t v5 = (v5 + 1);
  }
  while (v5 != 16);
  uint64_t v9 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \t }", buf, 2u);
    uint64_t v9 = *v3;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *((_DWORD *)this + 65);
    int v11 = *((_DWORD *)this + 66);
    int v12 = *((_DWORD *)this + 67);
    int v13 = *((_DWORD *)this + 68);
    *(_DWORD *)long long buf = 67109888;
    *(_DWORD *)__int16 v109 = v10;
    *(_WORD *)&v109[4] = 1024;
    *(_DWORD *)&v109[6] = v11;
    *(_WORD *)long long v110 = 1024;
    *(_DWORD *)&v110[2] = v12;
    *(_WORD *)&v110[6] = 1024;
    *(_DWORD *)&v110[8] = v13;
    _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \t fImsRegistrationMask = 0x%x, fImsDCMaskQualifier = 0x%x, fImsRegMaskQualifier = 0x%x, fUnprovisionedImsRegMaskQualifier = 0x%x", buf, 0x1Au);
    uint64_t v9 = *v3;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = sd::asString();
    uint64_t v15 = sd::asString();
    *(_DWORD *)long long buf = 136315394;
    *(void *)__int16 v109 = v14;
    *(_WORD *)&v109[8] = 2080;
    *(void *)long long v110 = v15;
    _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \t fImsPrefs[BB] = [%s], fImsPrefs[IWLAN] = [%s]", buf, 0x16u);
    uint64_t v9 = *v3;
  }
  if (*((unsigned char *)this + 248) && os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = sd::asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)__int16 v109 = v16;
    _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \t fInCallImsPref = [%s]", buf, 0xCu);
    uint64_t v9 = *v3;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = asStringBool();
    *(_DWORD *)long long buf = 136315138;
    *(void *)__int16 v109 = v17;
    _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \t fPrefsChanged = %s", buf, 0xCu);
    uint64_t v9 = *v3;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v18 = (void *)((char *)this + 280);
    if (*((char *)this + 303) < 0) {
      __int16 v18 = (void *)*v18;
    }
    uint64_t v19 = (void *)((char *)this + 304);
    if (*((char *)this + 327) < 0) {
      uint64_t v19 = (void *)*v19;
    }
    uint64_t v20 = asStringBool();
    *(_DWORD *)long long buf = 136315650;
    *(void *)__int16 v109 = v18;
    *(_WORD *)&v109[8] = 2080;
    *(void *)long long v110 = v19;
    *(_WORD *)&v110[8] = 2080;
    *(void *)&v110[10] = v20;
    _os_log_impl(&dword_223AF3000, v9, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \t fDisabledCountry = %s, fCountryOfOrigination=%s, fCountrySetFlag = %s", buf, 0x20u);
  }
  bzero(buf, 0x688uLL);
  (*(void (**)(uint8_t *__return_ptr, sd::IMSSubscriberModel *))(*(void *)this + 456))(buf, this);
  uint64_t v21 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    if (**((_DWORD **)this + 22) == 2) {
      __int16 v22 = "empty";
    }
    else {
      __int16 v22 = (const char *)asStringBool();
    }
    uint64_t v23 = asStringBool();
    uint64_t v24 = *((void *)this + 22);
    uint64_t v25 = (void *)(v24 + 8);
    if (*(char *)(v24 + 31) < 0) {
      uint64_t v25 = (void *)*v25;
    }
    if (v80 >= 0) {
      __int16 v26 = v79;
    }
    else {
      __int16 v26 = (void **)v79[0];
    }
    uint64_t v27 = *((void *)this + 22);
    uint64_t v28 = (void *)(v27 + 56);
    if (*(char *)(v27 + 79) < 0) {
      uint64_t v28 = (void *)*v28;
    }
    if (v78 >= 0) {
      uint64_t v29 = v77;
    }
    else {
      uint64_t v29 = (void **)v77[0];
    }
    uint64_t v65 = v29;
    int v30 = &v110[2];
    if (v111 < 0) {
      int v30 = *(unsigned char **)&v110[2];
    }
    uint64_t v63 = v30;
    uint64_t v31 = *((void *)this + 22);
    uint64_t v32 = (void *)(v31 + 104);
    if (*(char *)(v31 + 127) < 0) {
      uint64_t v32 = (void *)*v32;
    }
    __int16 v64 = v32;
    int v62 = *(_DWORD *)v109;
    int v70 = *(unsigned __int8 *)(v31 + 264);
    __int16 v68 = v25;
    uint64_t v69 = v23;
    __int16 v66 = v28;
    uint64_t v67 = v26;
    if (*(unsigned char *)(v31 + 264))
    {
      CSIPhoneNumber::getFormatted((uint64_t *)__p, (CSIPhoneNumber *)(v31 + 128));
      std::vector<std::string>::pointer v33 = v22;
      if (v76 >= 0) {
        long long v34 = __p;
      }
      else {
        long long v34 = (void **)__p[0];
      }
      uint64_t v61 = (const char *)v34;
    }
    else
    {
      std::vector<std::string>::pointer v33 = v22;
      uint64_t v61 = "empty";
    }
    uint64_t v35 = asStringBool();
    uint64_t v36 = (char *)*((void *)this + 22);
    std::string v37 = v36 + 280;
    if (v36[303] < 0) {
      std::string v37 = (void *)*v37;
    }
    long long v38 = v36 + 304;
    if (v36[327] < 0) {
      long long v38 = (void *)*v38;
    }
    std::string v39 = v36 + 328;
    if (v36[351] < 0) {
      std::string v39 = (void *)*v39;
    }
    std::string v40 = v36 + 352;
    if (v36[375] < 0) {
      std::string v40 = (void *)*v40;
    }
    uint64_t v41 = asStringBool();
    *(_DWORD *)long long v82 = 136318978;
    *(void *)&v82[4] = v33;
    *(_WORD *)&v82[12] = 2080;
    *(void *)&v82[14] = v69;
    *(_WORD *)&v82[22] = 2080;
    *(void *)long long v83 = v68;
    *(_WORD *)&v83[8] = 2080;
    *(void *)uint64_t v84 = v67;
    *(_WORD *)&v84[8] = 2080;
    uint64_t v85 = v66;
    __int16 v86 = 2080;
    v87 = v65;
    __int16 v88 = 2080;
    v89 = v63;
    __int16 v90 = 1024;
    int v91 = v62;
    __int16 v92 = 2080;
    v93 = v64;
    __int16 v94 = 2080;
    v95 = v61;
    __int16 v96 = 2080;
    uint64_t v97 = v35;
    __int16 v98 = 2080;
    v99 = v37;
    __int16 v100 = 2080;
    v101 = v38;
    __int16 v102 = 2080;
    uint64_t v103 = v39;
    __int16 v104 = 2080;
    v105 = v40;
    __int16 v106 = 2080;
    uint64_t v107 = v41;
    _os_log_impl(&dword_223AF3000, v21, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \t fUEInfo: [[IsimInfo: fIsPresent = %s, fIsAllFilesRead = %s, fImpuint64_t i = %s, fImpuList = %s, fDomain = %s, fPcscfList = %s, fPcscfDomain = %s, fPcscfPort = %u], [fDeviceInfo: fImsuint64_t i = %s, fMdn = %s, fIsSimPersonality = %s, fDeviceId = %s, fDeviceSVN = %s, fMcc = %s, fMnc = %s, fUSimPresent = %s]]", v82, 0x9Eu);
    if (v70 && v76 < 0) {
      operator delete(__p[0]);
    }
    if (v78 < 0) {
      operator delete(v77[0]);
    }
    if (SHIBYTE(v80) < 0) {
      operator delete(v79[0]);
    }
    uint64_t v21 = *v3;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v42 = buf[0];
    int v43 = buf[1];
    std::vector<std::string> v44 = v80 >= 0 ? v79 : (void **)v79[0];
    uint64_t v45 = asString();
    uint64_t v46 = sd::asString();
    *(_DWORD *)long long v82 = 67110146;
    *(_DWORD *)&v82[4] = v42;
    *(_WORD *)&v82[8] = 1024;
    *(_DWORD *)&v82[10] = v43;
    *(_WORD *)&v82[14] = 2080;
    *(void *)&v82[16] = v44;
    *(_WORD *)long long v83 = 2080;
    *(void *)&v83[2] = v45;
    *(_WORD *)uint64_t v84 = 2080;
    *(void *)&v84[2] = v46;
    _os_log_impl(&dword_223AF3000, v21, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \t fRuntimeInfo: fAppId = %d, fEmAppId = %d, fPcscfList = %s, fRFBandType = %s, fImsServiceMask = [%s]", v82, 0x2Cu);
    if (SHIBYTE(v80) < 0) {
      operator delete(v79[0]);
    }
  }
  v79[0] = 0;
  v79[1] = 0;
  uint64_t v80 = 0;
  (*(void (**)(void **__return_ptr))(**((void **)this + 15) + 24))(v79);
  long long v47 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    if (v80 >= 0) {
      long long v48 = v79;
    }
    else {
      long long v48 = (void **)v79[0];
    }
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 13) + 24))(v74);
    uint64_t v49 = v77;
    if (v78 < 0) {
      uint64_t v49 = (void **)v77[0];
    }
    (*(void (**)(uint64_t *__return_ptr, sd::IMSSubscriberModel *))(*(void *)this + 584))(v71, this);
    if (v73 >= 0) {
      long long v50 = v72;
    }
    else {
      long long v50 = (void **)v72[0];
    }
    *(_DWORD *)long long v82 = 136315650;
    *(void *)&v82[4] = v48;
    *(_WORD *)&v82[12] = 2080;
    *(void *)&v82[14] = v49;
    *(_WORD *)&v82[22] = 2080;
    *(void *)long long v83 = v50;
    _os_log_impl(&dword_223AF3000, v47, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \t Network interface name = %s, Configured Addresses = %s, Effective PcscfList = %s", v82, 0x20u);
    if (v73 < 0) {
      operator delete(v72[0]);
    }
    unsigned int v81 = (void **)v71;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v81);
    if (v78 < 0) {
      operator delete(v77[0]);
    }
    v72[0] = v74;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  }
  RegisteredNetworkInfo::dumpState((RegisteredNetworkInfo *)v114, "CurrentRegisteredNetworkInfo", (sd::IMSSubscriberModel *)((char *)this + 8));
  RegisteredNetworkInfo::dumpState((RegisteredNetworkInfo *)&v113, "LastRegisteredNetworkInfo", (sd::IMSSubscriberModel *)((char *)this + 8));
  *(void *)long long v82 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 336))(this);
  *(void *)&v82[8] = v51;
  sd::IMSSubscriberModel::dumpIRStatus((void **)this, (unsigned int *)v82, (uint64_t)"getCurrentImsStatus(): ");
  *(void *)long long v82 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 384))(this);
  *(void *)&v82[8] = v52;
  sd::IMSSubscriberModel::dumpIRStatus((void **)this, (unsigned int *)v82, (uint64_t)"getLastAttemptedImsStatus(): ");
  *(void *)long long v82 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 368))(this);
  *(void *)&v82[8] = v53;
  sd::IMSSubscriberModel::dumpIRStatus((void **)this, (unsigned int *)v82, (uint64_t)"getLastRegisteredImsStatus(): ");
  *(void *)long long v82 = (*(uint64_t (**)(sd::IMSSubscriberModel *))(*(void *)this + 352))(this);
  *(void *)&v82[8] = v54;
  sd::IMSSubscriberModel::dumpIRStatus((void **)this, (unsigned int *)v82, (uint64_t)"getLastNotifiedImsStatus(): ");
  (*(void (**)(sd::IMSSubscriberModel *))(*(void *)this + 400))(this);
  uint64_t v55 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v56 = (void *)((char *)this + 328);
    if (*((char *)this + 351) < 0) {
      __int16 v56 = (void *)*v56;
    }
    __int16 v57 = (void *)((char *)this + 352);
    if (*((char *)this + 375) < 0) {
      __int16 v57 = (void *)*v57;
    }
    uint64_t v58 = asStringBool();
    uint64_t v59 = asString();
    *(_DWORD *)long long v82 = 136315906;
    *(void *)&v82[4] = v56;
    *(_WORD *)&v82[12] = 2080;
    *(void *)&v82[14] = v57;
    *(_WORD *)&v82[22] = 2080;
    *(void *)long long v83 = v58;
    *(_WORD *)&v83[8] = 2080;
    *(void *)uint64_t v84 = v59;
    _os_log_impl(&dword_223AF3000, v55, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \t fAddressRefId = %s, fAddressRefIdExpiry = %s, fIsIWLANMode = %s, fIMSTransportType = %s", v82, 0x2Au);
    uint64_t v55 = *v3;
  }
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v60 = asString();
    *(_DWORD *)long long v82 = 136315138;
    *(void *)&v82[4] = v60;
    _os_log_impl(&dword_223AF3000, v55, OS_LOG_TYPE_DEFAULT, "#I 5wi.mdl:: \tCurrent Definite Roaming result: %s", v82, 0xCu);
  }
  if (SHIBYTE(v80) < 0) {
    operator delete(v79[0]);
  }
  sd::RuntimeInfo::~RuntimeInfo((void **)buf);
}

void sub_223B4573C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  sd::RuntimeInfo::~RuntimeInfo(&a67);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::to_string(void *a1, uint64_t *a2)
{
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  uint64_t v26 = 0;
  *(_OWORD *)std::string __p = 0u;
  uint64_t v21 = 0;
  memset(v23, 0, sizeof(v23));
  uint64_t v3 = MEMORY[0x263F8C328] + 104;
  uint64_t v27 = MEMORY[0x263F8C328] + 104;
  uint64_t v4 = MEMORY[0x263F8C328] + 64;
  uint64_t v22 = MEMORY[0x263F8C328] + 64;
  uint64_t v5 = (uint64_t *)MEMORY[0x263F8C2B8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v20 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(uint64_t *)((char *)&v20 + *(void *)(v20 - 24)) = v6;
  uint64_t v21 = 0;
  uint64_t v7 = (std::ios_base *)((char *)&v20 + *(void *)(v20 - 24));
  std::ios_base::init(v7, v23);
  uint64_t v8 = MEMORY[0x263F8C328] + 24;
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  uint64_t v9 = v5[5];
  uint64_t v22 = v5[4];
  *(uint64_t *)((char *)&v22 + *(void *)(v22 - 24)) = v9;
  uint64_t v20 = v5[1];
  *(uint64_t *)((char *)&v20 + *(void *)(v20 - 24)) = v5[6];
  uint64_t v27 = v3;
  uint64_t v20 = v8;
  uint64_t v22 = v4;
  std::streambuf::basic_streambuf();
  uint64_t v10 = MEMORY[0x263F8C318] + 16;
  *(void *)&v23[0] = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)std::string __p = 0u;
  long long v25 = 0u;
  LODWORD(v2SystemDeterminationManager::handleDumpState_sync(this - 6) = 24;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"{", 1);
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 != v12)
  {
    do
    {
      int v13 = *(char *)(v11 + 23);
      if (v13 >= 0) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = *(void *)v11;
      }
      if (v13 >= 0) {
        uint64_t v15 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        uint64_t v15 = *(void *)(v11 + 8);
      }
      uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, v14, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
      v11 += 24;
    }
    while (v11 != v12);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"}", 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v23, a1);
  uint64_t v20 = *v5;
  uint64_t v17 = v5[9];
  *(uint64_t *)((char *)&v20 + *(void *)(v20 - 24)) = v5[8];
  uint64_t v22 = v17;
  *(void *)&v23[0] = v10;
  if (SBYTE7(v25) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x223CBBDB0](&v27);
}

void sub_223B45C7C(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x223CBBDB0](v1);
  _Unwind_Resume(a1);
}

sd::RuntimeInfo *sd::RuntimeInfo::RuntimeInfo(sd::RuntimeInfo *this)
{
  *(_WORD *)this = -1;
  *((_DWORD *)this + 1) = 0;
  *((_DWORD *)this + 2) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  RegisteredNetworkInfo::RegisteredNetworkInfo((sd::RuntimeInfo *)((char *)this + 64));
  RegisteredNetworkInfo::RegisteredNetworkInfo((sd::RuntimeInfo *)((char *)this + 864));
  *((void *)this + 20MEMORY[0x223CBB890]((char *)this + 8) = 0xFFFFFFFFLL;
  return this;
}

void sub_223B45D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(unsigned char *)(v10 + 848) && *(char *)(v10 + 815) < 0) {
    operator delete(*(void **)(v10 + 792));
  }
  std::__optional_destruct_base<Cdma1xCell,false>::~__optional_destruct_base[abi:ne180100](v10 + 664);
  std::__optional_destruct_base<NrCell,false>::~__optional_destruct_base[abi:ne180100](v10 + 520);
  std::__optional_destruct_base<LteCell,false>::~__optional_destruct_base[abi:ne180100](v10 + 384);
  std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100](v10 + 280);
  std::__optional_destruct_base<TDSCDMACell,false>::~__optional_destruct_base[abi:ne180100](v10 + 176);
  std::__optional_destruct_base<GsmCell,false>::~__optional_destruct_base[abi:ne180100](v10 + 80);
  a10 = (void **)(v10 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*v11);
  }
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<__CFString const*>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::__optional_storage_base<CSIPhoneNumber,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CSIPhoneNumber,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 136) == *(unsigned __int8 *)(a2 + 136))
  {
    if (*(unsigned char *)(a1 + 136))
    {
      *(void *)a1 = *(void *)a2;
      std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
      std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
      char v4 = *(unsigned char *)(a2 + 60);
      *(_DWORD *)(a1 + 5SystemDeterminationManager::handleDumpState_sync(this - 6) = *(_DWORD *)(a2 + 56);
      *(unsigned char *)(a1 + 60) = v4;
      std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
      std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
      char v5 = *(unsigned char *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(unsigned char *)(a1 + 12MEMORY[0x223CBB890]((char *)this + 8) = v5;
    }
  }
  else if (*(unsigned char *)(a1 + 136))
  {
    std::__optional_destruct_base<CSIPhoneNumber,false>::reset[abi:ne180100](a1);
  }
  else
  {
    CSIPhoneNumber::CSIPhoneNumber(a1, a2);
    *(unsigned char *)(a1 + 13SystemDeterminationManager::handleDumpState_sync(this - 6) = 1;
  }
}

uint64_t CSIPhoneNumber::CSIPhoneNumber(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + MEMORY[0x223CBB890]((char *)this + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 4MEMORY[0x223CBB890]((char *)this + 8) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  *(void *)(a1 + 5SystemDeterminationManager::handleDumpState_sync(this - 6) = *(void *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  uint64_t v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 12MEMORY[0x223CBB890]((char *)this + 8) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v9;
  return a1;
}

void sub_223B45FD0(_Unwind_Exception *exception_object)
{
  if (v1[87] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_destruct_base<CSIPhoneNumber,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 136))
  {
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

void IMSInfo::~IMSInfo(void **this)
{
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  if (*((char *)this + 231) < 0) {
    operator delete(this[26]);
  }
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  if (*((char *)this + 175) < 0) {
    operator delete(this[19]);
  }
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  uint64_t v2 = this + 6;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

CFTypeRef ims::PrefsContainer::retain(ims::PrefsContainer *this)
{
  uint64_t v2 = *(const void **)this;
  if (v2) {
    CFRetain(v2);
  }
  CFTypeRef result = (CFTypeRef)*((void *)this + 1);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

void t_ims_info::~t_ims_info(void **this)
{
  uint64_t v2 = this + 21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 167) < 0) {
    operator delete(this[18]);
  }
  uint64_t v2 = this + 15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 1SystemDeterminationManager::handleDumpState_sync(this - 6) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223CBBDB0](a1 + 128);
  return a1;
}

void std::__shared_ptr_pointer<sd::IMSSubscriberModel *,std::shared_ptr<sd::IMSSubscriberModel>::__shared_ptr_default_delete<sd::IMSSubscriberModel,sd::IMSSubscriberModel>,std::allocator<sd::IMSSubscriberModel>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

uint64_t std::__shared_ptr_pointer<sd::IMSSubscriberModel *,std::shared_ptr<sd::IMSSubscriberModel>::__shared_ptr_default_delete<sd::IMSSubscriberModel,sd::IMSSubscriberModel>,std::allocator<sd::IMSSubscriberModel>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<sd::IMSSubscriberModel *,std::shared_ptr<sd::IMSSubscriberModel>::__shared_ptr_default_delete<sd::IMSSubscriberModel,sd::IMSSubscriberModel>,std::allocator<sd::IMSSubscriberModel>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<sd::ImsFeature *,std::shared_ptr<sd::ImsFeature>::__shared_ptr_default_delete<sd::ImsFeature,sd::ImsFeature>,std::allocator<sd::ImsFeature>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

uint64_t std::__shared_ptr_pointer<sd::ImsFeature *,std::shared_ptr<sd::ImsFeature>::__shared_ptr_default_delete<sd::ImsFeature,sd::ImsFeature>,std::allocator<sd::ImsFeature>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x223CBBDF0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<sd::ImsFeature *,std::shared_ptr<sd::ImsFeature>::__shared_ptr_default_delete<sd::ImsFeature,sd::ImsFeature>,std::allocator<sd::ImsFeature>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<sd::DataCache *,std::shared_ptr<sd::DataCache>::__shared_ptr_default_delete<sd::DataCache,sd::DataCache>,std::allocator<sd::DataCache>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

uint64_t std::__shared_ptr_pointer<sd::DataCache *,std::shared_ptr<sd::DataCache>::__shared_ptr_default_delete<sd::DataCache,sd::DataCache>,std::allocator<sd::DataCache>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    std::mutex::~mutex((std::mutex *)(v1 + 1720));
    sd::RuntimeInfo::~RuntimeInfo((void **)(v1 + 48));
    JUMPOUT(0x223CBBDF0);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<sd::DataCache *,std::shared_ptr<sd::DataCache>::__shared_ptr_default_delete<sd::DataCache,sd::DataCache>,std::allocator<sd::DataCache>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *std::unique_ptr<sd::DataCache>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    std::mutex::~mutex((std::mutex *)(v1 + 1720));
    sd::RuntimeInfo::~RuntimeInfo((void **)(v1 + 48));
    JUMPOUT(0x223CBBDF0);
  }
  return result;
}

void std::__shared_ptr_emplace<sd::ImsFeature>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7459C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sd::ImsFeature>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D7459C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

void std::__shared_ptr_emplace<sd::UEInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D745A10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sd::UEInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D745A10;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

void std::__shared_ptr_emplace<sd::UEInfo>::__on_zero_shared(uint64_t a1)
{
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)(a1 + 560));
  uint64_t v2 = (void **)(a1 + 528);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  uint64_t v2 = (void **)(a1 + 480);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  if (*(char *)(a1 + 327) < 0) {
    operator delete(*(void **)(a1 + 304));
  }
  std::__optional_destruct_base<CSIPhoneNumber,false>::~__optional_destruct_base[abi:ne180100](a1 + 152);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  uint64_t v2 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v2 = (void **)(a1 + 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void std::__shared_ptr_emplace<sd::DataCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D745A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sd::DataCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D745A60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

void std::__shared_ptr_emplace<sd::DataCache>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 1744));

  sd::RuntimeInfo::~RuntimeInfo((void **)(a1 + 72));
}

void std::__shared_ptr_emplace<t_ims_info>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D745AB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<t_ims_info>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D745AB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223CBBDF0);
}

void std::__shared_ptr_emplace<t_ims_info>::__on_zero_shared(uint64_t a1)
{
}

const char *sd::imsRegStateToString(_DWORD *a1)
{
  unsigned int v1 = *a1 - 1;
  if (v1 > 2) {
    return "Deregistered (Idle)";
  }
  else {
    return (&off_2646CF958)[v1];
  }
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x270EE4320](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x270EE4348]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x270EE4360](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4928](allocator, capacity, theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x270EE4948]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x270EE4CC0](key, applicationID, userName, hostName);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x270EE4D08](applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t asStringBool()
{
  return MEMORY[0x270EE8938]();
}

uint64_t CSIBOOLAsString()
{
  return MEMORY[0x270EE8970]();
}

uint64_t validContextType()
{
  return MEMORY[0x270EE89B8]();
}

uint64_t CSIGetTimeDifference()
{
  return MEMORY[0x270EE8A10]();
}

uint64_t CSISystemElapsedTime(void)
{
  return MEMORY[0x270EE8A18]();
}

uint64_t PersonalityIDToSimSlot()
{
  return MEMORY[0x270EE8A30]();
}

uint64_t PersonalityIdFromSlotId()
{
  return MEMORY[0x270EE8A58]();
}

uint64_t PersonalityIdFromSlotIdEx()
{
  return MEMORY[0x270EE8A78]();
}

uint64_t asString()
{
  return MEMORY[0x270EE8AC0]();
}

{
  return MEMORY[0x270EE8AE8]();
}

{
  return MEMORY[0x270EE8B08]();
}

{
  return MEMORY[0x270EE8B10]();
}

{
  return MEMORY[0x270EE8B20]();
}

{
  return MEMORY[0x270EE8B28]();
}

{
  return MEMORY[0x270EE8B30]();
}

{
  return MEMORY[0x270EE8B70]();
}

{
  return MEMORY[0x270EE8BA0]();
}

{
  return MEMORY[0x270EE8BB0]();
}

{
  return MEMORY[0x270EE8BD0]();
}

{
  return MEMORY[0x270EE8C18]();
}

{
  return MEMORY[0x270EE8C40]();
}

uint64_t isPresent()
{
  return MEMORY[0x270EE8C58]();
}

uint64_t subscriber::isSimReady()
{
  return MEMORY[0x270EE8C68]();
}

uint64_t subscriber::isSimPresent()
{
  return MEMORY[0x270EE8C88]();
}

uint64_t subscriber::isValidSimSlot()
{
  return MEMORY[0x270EE8CB8]();
}

uint64_t subscriber::simSlotAsInstance()
{
  return MEMORY[0x270EE8CE8]();
}

uint64_t subscriber::asString()
{
  return MEMORY[0x270EE8D20]();
}

{
  return MEMORY[0x270EE8D28]();
}

{
  return MEMORY[0x270EE8D40]();
}

{
  return MEMORY[0x270EE8D48]();
}

uint64_t capabilities::ct::supports5G(capabilities::ct *this)
{
  return MEMORY[0x270F968B0](this);
}

uint64_t capabilities::ct::supportsVoLTE(capabilities::ct *this)
{
  return MEMORY[0x270F968C8](this);
}

uint64_t capabilities::ct::supportsGemini(capabilities::ct *this)
{
  return MEMORY[0x270F968D0](this);
}

uint64_t capabilities::ct::supportsCellRadio(capabilities::ct *this)
{
  return MEMORY[0x270F968F0](this);
}

uint64_t capabilities::ct::supportsVoiceCall(capabilities::ct *this)
{
  return MEMORY[0x270F96900](this);
}

uint64_t capabilities::ct::getRadioModuleType(capabilities::ct *this)
{
  return MEMORY[0x270F96910](this);
}

uint64_t capabilities::ct::supportsSMSIMSStack(capabilities::ct *this)
{
  return MEMORY[0x270F96930](this);
}

uint64_t capabilities::ct::supportsLLFiltersIMS(capabilities::ct *this)
{
  return MEMORY[0x270F96940](this);
}

uint64_t capabilities::ct::getBasebandBootStrategy(capabilities::ct *this)
{
  return MEMORY[0x270F96988](this);
}

uint64_t capabilities::ct::getCarrierBundleBaseDir(capabilities::ct *this)
{
  return MEMORY[0x270F96990](this);
}

uint64_t capabilities::ct::supportsSTKSendIMSRegEvent(capabilities::ct *this)
{
  return MEMORY[0x270F969F8](this);
}

uint64_t capabilities::ct::requiresIMSStatusUpdateInCSFB(capabilities::ct *this)
{
  return MEMORY[0x270F96A50](this);
}

uint64_t capabilities::ct::shouldSaveInCallIMSPrefForCSCall(capabilities::ct *this)
{
  return MEMORY[0x270F96AA0](this);
}

uint64_t capabilities::ct::shouldEnableSystemDeterminationWatchdog(capabilities::ct *this)
{
  return MEMORY[0x270F96AE0](this);
}

uint64_t ServiceManager::addConcreteService()
{
  return MEMORY[0x270EE8E18]();
}

void ServiceManager::Service::~Service(ServiceManager::Service *this)
{
}

uint64_t CSIPacketAddress::setIPv4Address(CSIPacketAddress *this)
{
  return MEMORY[0x270EE8E48](this);
}

uint64_t CSIPacketAddress::setIPv6Address(CSIPacketAddress *this, const unsigned __int8 *a2)
{
  return MEMORY[0x270EE8E50](this, a2);
}

uint64_t CSIPacketAddress::CSIPacketAddress()
{
  return MEMORY[0x270EE8E68]();
}

void CSIPacketAddress::CSIPacketAddress(CSIPacketAddress *this)
{
}

void RegisteredNetworkInfo::RegisteredNetworkInfo(RegisteredNetworkInfo *this, const RegisteredNetworkInfo *a2)
{
}

void RegisteredNetworkInfo::RegisteredNetworkInfo(RegisteredNetworkInfo *this)
{
}

uint64_t RegisteredNetworkInfo::operator=()
{
  return MEMORY[0x270EE8EE8]();
}

uint64_t RequestDumpStatePayload::RequestDumpStatePayload()
{
  return MEMORY[0x270EE8F08]();
}

uint64_t sd::isSimPersonality()
{
  return MEMORY[0x270EE8F18]();
}

void sd::IMSSubscriberEventDelegate::~IMSSubscriberEventDelegate(sd::IMSSubscriberEventDelegate *this)
{
}

void sd::IMSSubscriberModelDelegate::~IMSSubscriberModelDelegate(sd::IMSSubscriberModelDelegate *this)
{
}

void sd::IMSSubscriberModelInterface::~IMSSubscriberModelInterface(sd::IMSSubscriberModelInterface *this)
{
}

uint64_t sd::imsRegFailureReasonToString()
{
  return MEMORY[0x270EE8F48]();
}

uint64_t sd::IMSSubscriberConfigInterface::APOnlyModeDefaultVal(sd::IMSSubscriberConfigInterface *this)
{
  return MEMORY[0x270EE8F50](this);
}

uint64_t sd::IMSSubscriberConfigInterface::shouldUseAPMediaStack(sd::IMSSubscriberConfigInterface *this)
{
  return MEMORY[0x270EE8F58](this);
}

void sd::IMSSubscriberConfigInterface::~IMSSubscriberConfigInterface(sd::IMSSubscriberConfigInterface *this)
{
}

void sd::IMSSubscriberMetricsDelegate::~IMSSubscriberMetricsDelegate(sd::IMSSubscriberMetricsDelegate *this)
{
}

void sd::IMSConnHelperManagerInterface::~IMSConnHelperManagerInterface(sd::IMSConnHelperManagerInterface *this)
{
}

uint64_t sd::ipTelephonyServiceMaskToString(sd *this)
{
  return MEMORY[0x270EE8F78](this);
}

uint64_t sd::IsDataConnectionImSupportedByDevice(sd *this)
{
  return MEMORY[0x270EE8F80](this);
}

uint64_t sd::imsServiceMaskToIpTelephonyServiceMask()
{
  return MEMORY[0x270EE8F88]();
}

uint64_t sd::ipTelephonyServiceMaskToImsServiceMask(sd *this)
{
  return MEMORY[0x270EE8F90](this);
}

uint64_t sd::UEInfo::DeviceInfo::updateSimInfo()
{
  return MEMORY[0x270EE8F98]();
}

uint64_t sd::UEInfo::DeviceInfo::clear(sd::UEInfo::DeviceInfo *this)
{
  return MEMORY[0x270EE8FA0](this);
}

uint64_t sd::UEInfo::clear(sd::UEInfo *this)
{
  return MEMORY[0x270EE8FA8](this);
}

uint64_t sd::UEInfo::IsimInfo::markSimPresent()
{
  return MEMORY[0x270EE8FB0]();
}

uint64_t sd::UEInfo::IsimInfo::clear(sd::UEInfo::IsimInfo *this)
{
  return MEMORY[0x270EE8FB8](this);
}

uint64_t sd::asString()
{
  return MEMORY[0x270EE8FC0]();
}

{
  return MEMORY[0x270EE8FC8]();
}

{
  return MEMORY[0x270EE8FD8]();
}

{
  return MEMORY[0x270EE8FE0]();
}

uint64_t sd::asString(sd *this, Category a2)
{
  return MEMORY[0x270EE8FD0](this, a2);
}

void SystemDeterminationManagerInterface::~SystemDeterminationManagerInterface(SystemDeterminationManagerInterface *this)
{
}

uint64_t MCC::MCC()
{
  return MEMORY[0x270EE9010]();
}

uint64_t MNC::MNC()
{
  return MEMORY[0x270EE9048]();
}

uint64_t ctu::OsLogLogger::OsLogLogger()
{
  return MEMORY[0x270F972B0]();
}

{
  return MEMORY[0x270F972B8]();
}

void ctu::OsLogLogger::~OsLogLogger(ctu::OsLogLogger *this)
{
}

uint64_t ctu::OsLogContext::OsLogContext(ctu::OsLogContext *this, const char *a2, const char *a3)
{
  return MEMORY[0x270F972D8](this, a2, a3);
}

void ctu::OsLogContext::~OsLogContext(ctu::OsLogContext *this)
{
}

uint64_t ctu::cf::convert_copy()
{
  return MEMORY[0x270F97508]();
}

uint64_t ctu::cf::assign()
{
  return MEMORY[0x270F97550]();
}

{
  return MEMORY[0x270F97558]();
}

uint64_t ctu::cf::assign(ctu::cf *this, BOOL *a2, const __CFBoolean *a3)
{
  return MEMORY[0x270F97570](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, int *a2, const __CFNumber *a3)
{
  return MEMORY[0x270F97580](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned int *a2, const __CFNumber *a3)
{
  return MEMORY[0x270F97588](this, a2, a3);
}

uint64_t ctu::hex(ctu *this, const void *a2)
{
  return MEMORY[0x270F97628](this, a2);
}

uint64_t ims::AccessNetwork::set()
{
  return MEMORY[0x270F3D478]();
}

uint64_t ims::setBBServerConnection()
{
  return MEMORY[0x270F3D480]();
}

uint64_t sms::asString()
{
  return MEMORY[0x270EE9088]();
}

{
  return MEMORY[0x270EE9098]();
}

uint64_t detail::createOsLogLoggers()
{
  return MEMORY[0x270EE90D8]();
}

uint64_t detail::createUnknownOsLogLogger()
{
  return MEMORY[0x270EE90E8]();
}

uint64_t BasicSimInfo::isSimTypePresent()
{
  return MEMORY[0x270EE9150]();
}

uint64_t ServiceStage::holdOffStage(ServiceStage *this)
{
  return MEMORY[0x270EE9160](this);
}

uint64_t CSIPhoneNumber::getFormatted(CSIPhoneNumber *this)
{
  return MEMORY[0x270EE9168](this);
}

uint64_t CSIPhoneNumber::getBaseNumber(CSIPhoneNumber *this)
{
  return MEMORY[0x270EE9170](this);
}

uint64_t CSIPhoneNumber::getFullNumber(CSIPhoneNumber *this)
{
  return MEMORY[0x270EE9178](this);
}

uint64_t CSIPacketAddress::isLinkLocal(CSIPacketAddress *this)
{
  return MEMORY[0x270EE9190](this);
}

uint64_t CSIPacketAddress::isIPv4(CSIPacketAddress *this)
{
  return MEMORY[0x270EE91B8](this);
}

uint64_t CSIPacketAddress::isIPv6(CSIPacketAddress *this)
{
  return MEMORY[0x270EE91C0](this);
}

uint64_t CSIPacketAddress::isZeroIP(CSIPacketAddress *this)
{
  return MEMORY[0x270EE91D8](this);
}

uint64_t CSIPacketAddress::operator std::string()
{
  return MEMORY[0x270EE91E8]();
}

uint64_t RegisteredNetworkInfo::compare(RegisteredNetworkInfo *this, const RegisteredNetworkInfo *a2)
{
  return MEMORY[0x270EE9260](this, a2);
}

uint64_t RegisteredNetworkInfo::dumpState(RegisteredNetworkInfo *this, const char *a2, const ctu::OsLogLogger *a3)
{
  return MEMORY[0x270EE9268](this, a2, a3);
}

uint64_t GestaltUtilityInterface::isWatch(GestaltUtilityInterface *this)
{
  return MEMORY[0x270EE9270](this);
}

uint64_t sd::ImsFeature::VoWiFi::isEnabled(sd::ImsFeature::VoWiFi *this)
{
  return MEMORY[0x270EE9298](this);
}

uint64_t sd::UEInfo::DeviceInfo::domainFromImsi(sd::UEInfo::DeviceInfo *this)
{
  return MEMORY[0x270EE92A0](this);
}

uint64_t sd::UEInfo::DeviceInfo::getThreeDigitMcc(sd::UEInfo::DeviceInfo *this)
{
  return MEMORY[0x270EE92A8](this);
}

uint64_t sd::UEInfo::DeviceInfo::getThreeDigitMnc(sd::UEInfo::DeviceInfo *this)
{
  return MEMORY[0x270EE92B0](this);
}

uint64_t sd::UEInfo::DeviceInfo::publicIdentityFromImsi(sd::UEInfo::DeviceInfo *this)
{
  return MEMORY[0x270EE92B8](this);
}

uint64_t sd::UEInfo::DeviceInfo::privateIdentityFromImsi(sd::UEInfo::DeviceInfo *this)
{
  return MEMORY[0x270EE92C0](this);
}

uint64_t sd::UEInfo::DeviceInfo::valid(sd::UEInfo::DeviceInfo *this)
{
  return MEMORY[0x270EE92C8](this);
}

uint64_t sd::UEInfo::DeviceInfo::operator==()
{
  return MEMORY[0x270EE92D0]();
}

uint64_t sd::UEInfo::IsimInfo::valid(sd::UEInfo::IsimInfo *this)
{
  return MEMORY[0x270EE92D8](this);
}

uint64_t sd::UEInfo::IsimInfo::operator==()
{
  return MEMORY[0x270EE92E0]();
}

uint64_t MCC::getIntValue(MCC *this)
{
  return MEMORY[0x270EE92E8](this);
}

uint64_t MCC::valid(MCC *this)
{
  return MEMORY[0x270EE92F8](this);
}

uint64_t ims::IsimFiles::Serialize(ims::IsimFiles *this)
{
  return MEMORY[0x270F3D488](this);
}

uint64_t Registry::getServiceMap(Registry *this)
{
  return MEMORY[0x270EE9340](this);
}

uint64_t Registry::getTimerService(Registry *this)
{
  return MEMORY[0x270EE9348](this);
}

uint64_t Registry::getServiceManager(Registry *this)
{
  return MEMORY[0x270EE9350](this);
}

uint64_t Registry::getServerConnection(Registry *this)
{
  return MEMORY[0x270EE9358](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x270F98238](this, __c, __pos);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return (std::string::iterator)MEMORY[0x270F984D8](this, __pos.__i_, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x270F98548](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98788]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987E0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

void std::mutex::~mutex(std::mutex *this)
{
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x270F98C78](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F08](*(void *)&a1);
}

uint64_t _is3DigitMNCWithMCC()
{
  return MEMORY[0x270EE93A0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_async_and_wait(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9458](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x270ED9510](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

void freeifaddrs(ifaddrs *a1)
{
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x270ED9C68](a1);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x270ED9EC8](*(void *)&a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x270ED9ED8](*(void *)&a1, a2);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t os_nexus_controller_add_traffic_rule()
{
  return MEMORY[0x270EDA9E8]();
}

uint64_t os_nexus_controller_create()
{
  return MEMORY[0x270EDA9F0]();
}

uint64_t os_nexus_controller_remove_traffic_rule()
{
  return MEMORY[0x270EDAA00]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x270EDB520](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x270EDB648](__dst, __src, __n);
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x270EDBA30](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x270EDBBE8](__s, *(void *)&__c, __n);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDC008](keys, values, count);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x270EDC200](object);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x270EDC290]();
}

void xpc_release(xpc_object_t object)
{
}