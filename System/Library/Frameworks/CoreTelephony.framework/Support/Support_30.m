void sub_101076AE4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  char v2;

  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101076B14()
{
}

void sub_101076C24(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_10004D2C8(v2);
    if (!v1)
    {
LABEL_3:
      if (v3) {
        goto LABEL_4;
      }
      goto LABEL_5;
    }
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  sub_10004D2C8(v1);
  if (v3) {
LABEL_4:
  }
    operator delete();
LABEL_5:
  _Unwind_Resume(exception_object);
}

void sub_101076C70(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  sub_10108C0C0(a2, a1);
}

void sub_101076CAC(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101076CC4(uint64_t a1, uint64_t a2, NSObject **a3, uint64_t *a4, uint64_t a5, uint64_t *a6)
{
  v8 = (std::__shared_weak_count *)a6[1];
  uint64_t v18 = *a6;
  v19 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v9 = (std::__shared_weak_count *)a4[1];
  uint64_t v16 = *a4;
  v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100810360(a1, a2, 0, a3, &v18, &v16, a5, "ps.thp");
  if (v17) {
    sub_10004D2C8(v17);
  }
  if (v19) {
    sub_10004D2C8(v19);
  }
  *(void *)a1 = off_101A85320;
  *(void *)(a1 + 8) = off_101A85480;
  *(void *)(a1 + 16) = off_101A85558;
  sub_100058DB0(&__p, "thp");
  dispatch_object_t v13 = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  ctu::RestModule::RestModule();
  if (v13) {
    dispatch_release(v13);
  }
  if (v15 < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 3;
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 728) = 0;
  *(unsigned char *)(a1 + 736) = 0;
  *(unsigned char *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 826) = 0u;
  *(_DWORD *)(a1 + 842) = 16842753;
  *(_DWORD *)(a1 + 848) = 0;
  *(unsigned char *)(a1 + 856) = 0;
  *(void *)(a1 + 968) = 0;
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 992) = 5;
  v10 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    *(_DWORD *)buf = 136315394;
    uint64_t v21 = v11;
    __int16 v22 = 2080;
    v23 = " ";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%screated", buf, 0x16u);
  }
  return a1;
}

void sub_101076F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, dispatch_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  v23 = *v21;
  if (*v21)
  {
    *(void *)(v17 + 976) = v23;
    operator delete(v23);
  }
  sub_1003C8134(v20);
  v24 = *(std::__shared_weak_count **)(v17 + 824);
  if (v24) {
    sub_10004D2C8(v24);
  }
  v25 = *(std::__shared_weak_count **)(v17 + 808);
  if (v25) {
    sub_10004D2C8(v25);
  }
  sub_100FC7974(v19);
  if (*(unsigned char *)(v17 + 728)) {
    sub_10019D6E8(v18);
  }
  v26 = *(std::__shared_weak_count **)(v17 + 248);
  if (v26) {
    sub_10004D2C8(v26);
  }
  sub_100810708(v17);
  _Unwind_Resume(a1);
}

void sub_101076FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  if (a18) {
    sub_10004D2C8(a18);
  }
  JUMPOUT(0x101076FC4);
}

uint64_t sub_101076FEC(uint64_t a1)
{
  *(void *)a1 = off_101A85320;
  *(void *)(a1 + 8) = off_101A85480;
  *(void *)(a1 + 16) = off_101A85558;
  ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 240));
  v2 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    int v9 = 136315394;
    uint64_t v10 = v3;
    __int16 v11 = 2080;
    v12 = " ";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s%sdestroyed", (uint8_t *)&v9, 0x16u);
  }
  v4 = *(void **)(a1 + 968);
  if (v4)
  {
    *(void *)(a1 + 976) = v4;
    operator delete(v4);
  }
  sub_1003C8134((unsigned char *)(a1 + 856));
  v5 = *(std::__shared_weak_count **)(a1 + 824);
  if (v5) {
    sub_10004D2C8(v5);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 808);
  if (v6) {
    sub_10004D2C8(v6);
  }
  sub_100FC7974(a1 + 736);
  if (*(unsigned char *)(a1 + 728)) {
    sub_10019D6E8(a1 + 272);
  }
  v7 = *(std::__shared_weak_count **)(a1 + 248);
  if (v7) {
    sub_10004D2C8(v7);
  }
  sub_100810708(a1);
  return a1;
}

void sub_10107716C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

uint64_t sub_10107717C(uint64_t a1)
{
  return sub_101076FEC(a1 - 8);
}

uint64_t sub_101077184(uint64_t a1)
{
  return sub_101076FEC(a1 - 16);
}

void sub_10107718C(uint64_t a1)
{
  sub_101076FEC(a1);

  operator delete();
}

void sub_1010771C4(uint64_t a1)
{
  sub_101076FEC(a1 - 8);

  operator delete();
}

void sub_101077200(uint64_t a1)
{
  sub_101076FEC(a1 - 16);

  operator delete();
}

void sub_10107723C(uint64_t a1)
{
  *(void *)&long long v90 = 0;
  sub_1003A9CA0(buf);
  __p[0] = (void *)sub_1003A9B04(*(uint64_t *)buf, @"last.account", 0);
  sub_100225AE0(&v90, (CFTypeRef *)__p);
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((void)v90) {
    v2 = (uint64_t *)sub_1000810B8;
  }
  else {
    v2 = 0;
  }
  if (!v2)
  {
LABEL_88:
    ServiceMap = (std::mutex *)Registry::getServiceMap(v2, *(Registry **)(a1 + 120));
    v53 = ServiceMap;
    uint64_t v55 = v54;
    if (v54 < 0)
    {
      v56 = (unsigned __int8 *)(v54 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v57 = 5381;
      do
      {
        uint64_t v55 = v57;
        unsigned int v58 = *v56++;
        uint64_t v57 = (33 * v57) ^ v58;
      }
      while (v58);
    }
    std::mutex::lock(ServiceMap);
    *(void *)buf = v55;
    v59 = sub_10004D37C(&v53[1].__m_.__sig, (unint64_t *)buf);
    if (v59)
    {
      uint64_t v61 = v59[3];
      v60 = (std::__shared_weak_count *)v59[4];
      if (v60)
      {
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v53);
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v60);
        char v62 = 0;
        goto LABEL_96;
      }
    }
    else
    {
      uint64_t v61 = 0;
    }
    std::mutex::unlock(v53);
    v60 = 0;
    char v62 = 1;
LABEL_96:
    uint64_t v63 = kPhoneServicesWalletDomain;
    (*(void (**)(uint64_t, uint64_t, const __CFString *, void, void, uint64_t))(*(void *)v61 + 32))(v61, **(void **)(a1 + 144) + 24, @"thumper.id", kPhoneServicesWalletDomain, 0, 1);
    if ((v62 & 1) == 0) {
      sub_10004D2C8(v60);
    }
    LOBYTE(__p[0]) = 0;
    uint64_t v64 = sub_100365D74();
    sub_100058DB0(buf, "kAccountInvalidationForced");
    BOOL v65 = sub_1002260B0(v64, (void **)buf, (BOOL *)__p);
    BOOL v66 = v65;
    v67 = (uint64_t *)(char)buf[23];
    if ((v67 & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (!v66) {
        goto LABEL_114;
      }
    }
    else if (!v65)
    {
      goto LABEL_114;
    }
    v68 = (std::mutex *)Registry::getServiceMap(v67, *(Registry **)(a1 + 120));
    v69 = v68;
    if (v54 < 0)
    {
      v70 = (unsigned __int8 *)(v54 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v71 = 5381;
      do
      {
        uint64_t v54 = v71;
        unsigned int v72 = *v70++;
        uint64_t v71 = (33 * v71) ^ v72;
      }
      while (v72);
    }
    std::mutex::lock(v68);
    *(void *)buf = v54;
    v73 = sub_10004D37C(&v69[1].__m_.__sig, (unint64_t *)buf);
    if (v73)
    {
      uint64_t v75 = v73[3];
      v74 = (std::__shared_weak_count *)v73[4];
      if (v74)
      {
        atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v69);
        atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v74);
        char v76 = 0;
LABEL_110:
        (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, uint64_t, void, uint64_t, void))(*(void *)v75 + 16))(v75, **(void **)(a1 + 144) + 24, @"NeedAccountInvalidation", kCFBooleanTrue, v63, 0, 1, 0);
        if ((v76 & 1) == 0) {
          sub_10004D2C8(v74);
        }
        v77 = (uint64_t **)sub_100365D74();
        sub_100058DB0(buf, "kAccountInvalidationForced");
        sub_1003660FC(v77, (void **)buf);
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
LABEL_114:
        sub_1000558F4((const void **)&v90);
        uint64_t v78 = **(void **)(a1 + 144);
        if (*(char *)(v78 + 95) < 0)
        {
          if (!*(void *)(v78 + 80)) {
            goto LABEL_121;
          }
        }
        else if (!*(unsigned char *)(v78 + 95))
        {
          goto LABEL_121;
        }
        std::string::operator=((std::string *)(a1 + 208), (const std::string *)(v78 + 72));
        sub_100639AD0((const void **)(a1 + 208));
        v79 = (void **)(a1 + 184);
        if (*(char *)(a1 + 207) < 0) {
          operator delete(*v79);
        }
        *(_OWORD *)v79 = *(_OWORD *)buf;
        *(void *)(a1 + 200) = *(void *)&buf[16];
LABEL_121:
        v80 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v81 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
          v82 = (void *)(a1 + 208);
          if (*(char *)(a1 + 231) < 0) {
            v82 = (void *)*v82;
          }
          v83 = (void *)(a1 + 184);
          if (*(char *)(a1 + 207) < 0) {
            v83 = (void *)*v83;
          }
          *(_DWORD *)buf = 136315906;
          *(void *)&uint8_t buf[4] = v81;
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = " ";
          *(_WORD *)&buf[22] = 2080;
          v100 = v82;
          __int16 v101 = 2080;
          v102 = v83;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "#I %s%sinitializing, mdn:'%s', thumperId:'%s'", buf, 0x2Au);
        }
        sub_10081060C(a1);
        int v84 = sub_10107A5C8(a1);
        sub_10107A4A8(a1, v84);
        sub_10107A918(a1);
        sub_10003E168(buf, (void *)(a1 + 88));
        CFStringRef v86 = *(const __CFString **)buf;
        v85 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
          sub_10004D2C8(v85);
        }
        sub_10003E168(&v88, (void *)(a1 + 88));
        v87 = *(__CFString **)(a1 + 104);
        key[0] = v87;
        key[1] = (CFStringRef)a1;
        key[2] = v86;
        key[3] = (CFStringRef)v85;
        if (v85)
        {
          atomic_fetch_add_explicit(&v85->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          dispatch_retain((dispatch_object_t)v87);
          *(_OWORD *)__p = 0u;
          long long v98 = 0u;
          atomic_fetch_add_explicit(&v85->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          dispatch_retain((dispatch_object_t)v87);
          atomic_fetch_add_explicit(&v85->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          dispatch_retain((dispatch_object_t)v87);
          atomic_fetch_add_explicit(&v85->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          dispatch_retain((dispatch_object_t)v87);
          atomic_fetch_add_explicit(&v85->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          dispatch_retain((dispatch_object_t)v87);
          atomic_fetch_add_explicit(&v85->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          dispatch_retain((dispatch_object_t)v87);
          atomic_fetch_add_explicit(&v85->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          dispatch_retain((dispatch_object_t)v87);
          atomic_fetch_add_explicit(&v85->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          dispatch_retain((dispatch_object_t)v87);
          *(_OWORD *)__p = 0u;
          long long v98 = 0u;
          dispatch_retain((dispatch_object_t)v87);
          dispatch_retain((dispatch_object_t)v87);
          dispatch_retain((dispatch_object_t)v87);
          dispatch_retain((dispatch_object_t)v87);
          dispatch_retain((dispatch_object_t)v87);
          dispatch_retain((dispatch_object_t)v87);
        }
        *(void *)&long long v90 = 0;
        dispatch_retain((dispatch_object_t)v87);
        operator new();
      }
    }
    else
    {
      uint64_t v75 = 0;
    }
    std::mutex::unlock(v69);
    v74 = 0;
    char v76 = 1;
    goto LABEL_110;
  }
  sub_1003A9CA0(buf);
  sub_1003A9C3C(*(uint64_t *)buf, @"last.account", 0);
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&long long v98 = 0;
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)buf;
  *(void *)&long long v98 = *(void *)&buf[16];
  uint64_t v3 = *(void ***)buf;
  key[0] = 0;
  if ((buf[23] & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  key[0] = CFStringCreateWithFormat(0, 0, @"%@%s", @"thumper.switch.status.", v3);
  *(void *)&long long v95 = 0;
  sub_1003A9CA0(buf);
  CFStringRef v88 = (CFStringRef)sub_1003A9B04(*(uint64_t *)buf, key[0], 0);
  sub_10086FCF0(&v95, (CFTypeRef *)&v88);
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((void)v95) {
    v4 = (uint64_t *)sub_100081E58;
  }
  else {
    v4 = 0;
  }
  if (!v4)
  {
LABEL_29:
    CFStringRef v88 = 0;
    sub_100800E2C(@"ps.local.auth.", (uint64_t *)__p, &v88);
    uint64_t v94 = 0;
    sub_1003A9CA0(buf);
    v96 = sub_1003A9B04(*(uint64_t *)buf, v88, 0);
    sub_100225AE0(&v94, &v96);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v94) {
      char v15 = sub_1000810B8;
    }
    else {
      char v15 = 0;
    }
    if (!v15)
    {
LABEL_48:
      v96 = 0;
      sub_1003A9CA0(buf);
      v27 = sub_1003A9B04(*(uint64_t *)buf, @"ps.device.list", 0);
      v96 = v27;
      if (*(void *)&buf[8])
      {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        v27 = v96;
      }
      if (v27) {
        v28 = sub_100080934;
      }
      else {
        v28 = 0;
      }
      if (!v28)
      {
LABEL_67:
        CFStringRef v93 = 0;
        sub_100800E2C(@"ps.local.keys.", (uint64_t *)__p, &v93);
        uint64_t v92 = 0;
        sub_1003A9CA0(buf);
        v91 = sub_1003A9B04(*(uint64_t *)buf, v93, 0);
        sub_100225AE0(&v92, &v91);
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v92) {
          v40 = sub_1000810B8;
        }
        else {
          v40 = 0;
        }
        if (!v40) {
          goto LABEL_86;
        }
        v91 = 0;
        sub_1007FF600(*(void *)(a1 + 168), (uint64_t)v93, v92, (uint64_t *)__p);
        v42 = (std::mutex *)Registry::getServiceMap(v41, *(Registry **)(a1 + 120));
        v43 = v42;
        if (v44 < 0)
        {
          v45 = (unsigned __int8 *)(v44 & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v46 = 5381;
          do
          {
            uint64_t v44 = v46;
            unsigned int v47 = *v45++;
            uint64_t v46 = (33 * v46) ^ v47;
          }
          while (v47);
        }
        std::mutex::lock(v42);
        *(void *)buf = v44;
        v48 = sub_10004D37C(&v43[1].__m_.__sig, (unint64_t *)buf);
        if (v48)
        {
          uint64_t v50 = v48[3];
          v49 = (std::__shared_weak_count *)v48[4];
          if (v49)
          {
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
            std::mutex::unlock(v43);
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v49);
            char v51 = 0;
LABEL_81:
            (*(void (**)(uint64_t, uint64_t, const __CFString *, const void *, void, void, uint64_t, void))(*(void *)v50 + 16))(v50, **(void **)(a1 + 144) + 24, @"individual.keys", v91, kPhoneServicesWalletDomain, 0, 4, 0);
            if ((v51 & 1) == 0) {
              sub_10004D2C8(v49);
            }
            sub_1003A9CA0(buf);
            sub_1003A9C3C(*(uint64_t *)buf, v93, 0);
            if (*(void *)&buf[8]) {
              sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
            }
            sub_1000577C4(&v91);
LABEL_86:
            sub_1000558F4((const void **)&v92);
            sub_1000558F4((const void **)&v93);
            sub_1000577C4(&v96);
            sub_1000558F4((const void **)&v94);
            sub_1000558F4((const void **)&v88);
            sub_1000570E8((const void **)&v95);
            sub_1000558F4((const void **)key);
            v2 = (uint64_t *)SBYTE7(v98);
            if ((v2 & 0x80000000) != 0) {
              operator delete(__p[0]);
            }
            goto LABEL_88;
          }
        }
        else
        {
          uint64_t v50 = 0;
        }
        std::mutex::unlock(v43);
        v49 = 0;
        char v51 = 1;
        goto LABEL_81;
      }
      CFStringRef v93 = 0;
      sub_1007FF600(*(void *)(a1 + 168), @"ps.device.list", (uint64_t)v27, (uint64_t *)__p);
      v30 = (std::mutex *)Registry::getServiceMap(v29, *(Registry **)(a1 + 120));
      v31 = v30;
      if (v32 < 0)
      {
        v33 = (unsigned __int8 *)(v32 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v34 = 5381;
        do
        {
          uint64_t v32 = v34;
          unsigned int v35 = *v33++;
          uint64_t v34 = (33 * v34) ^ v35;
        }
        while (v35);
      }
      std::mutex::lock(v30);
      *(void *)buf = v32;
      v36 = sub_10004D37C(&v31[1].__m_.__sig, (unint64_t *)buf);
      if (v36)
      {
        uint64_t v38 = v36[3];
        v37 = (std::__shared_weak_count *)v36[4];
        if (v37)
        {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v31);
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v37);
          char v39 = 0;
LABEL_62:
          (*(void (**)(uint64_t, uint64_t, const __CFString *, CFStringRef, void, void, uint64_t, void))(*(void *)v38 + 16))(v38, **(void **)(a1 + 144) + 24, @"ps.device.list", v93, kPhoneServicesWalletDomain, 0, 4, 0);
          if ((v39 & 1) == 0) {
            sub_10004D2C8(v37);
          }
          sub_1003A9CA0(buf);
          sub_1003A9C3C(*(uint64_t *)buf, @"ps.device.list", 0);
          if (*(void *)&buf[8]) {
            sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
          }
          sub_1000577C4((const void **)&v93);
          goto LABEL_67;
        }
      }
      else
      {
        uint64_t v38 = 0;
      }
      std::mutex::unlock(v31);
      v37 = 0;
      char v39 = 1;
      goto LABEL_62;
    }
    v96 = 0;
    sub_1007FF600(*(void *)(a1 + 168), (uint64_t)v88, v94, (uint64_t *)__p);
    uint64_t v17 = (std::mutex *)Registry::getServiceMap(v16, *(Registry **)(a1 + 120));
    uint64_t v18 = v17;
    if (v19 < 0)
    {
      v20 = (unsigned __int8 *)(v19 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v21 = 5381;
      do
      {
        uint64_t v19 = v21;
        unsigned int v22 = *v20++;
        uint64_t v21 = (33 * v21) ^ v22;
      }
      while (v22);
    }
    std::mutex::lock(v17);
    *(void *)buf = v19;
    v23 = sub_10004D37C(&v18[1].__m_.__sig, (unint64_t *)buf);
    if (v23)
    {
      uint64_t v25 = v23[3];
      v24 = (std::__shared_weak_count *)v23[4];
      if (v24)
      {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v18);
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v24);
        char v26 = 0;
LABEL_43:
        (*(void (**)(uint64_t, uint64_t, const __CFString *, const void *, void, void, uint64_t, void))(*(void *)v25 + 16))(v25, **(void **)(a1 + 144) + 24, @"ps.local.auth", v96, kPhoneServicesWalletDomain, 0, 4, 0);
        if ((v26 & 1) == 0) {
          sub_10004D2C8(v24);
        }
        sub_1003A9CA0(buf);
        sub_1003A9C3C(*(uint64_t *)buf, v88, 0);
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
        sub_1000577C4(&v96);
        goto LABEL_48;
      }
    }
    else
    {
      uint64_t v25 = 0;
    }
    std::mutex::unlock(v18);
    v24 = 0;
    char v26 = 1;
    goto LABEL_43;
  }
  v5 = (std::mutex *)Registry::getServiceMap(v4, *(Registry **)(a1 + 120));
  v6 = v5;
  if (v7 < 0)
  {
    v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(v5);
  *(void *)buf = v7;
  __int16 v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
  if (v11)
  {
    uint64_t v13 = v11[3];
    v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
LABEL_25:
      (*(void (**)(uint64_t, uint64_t, const __CFString *, void, void, void, uint64_t, void))(*(void *)v13 + 48))(v13, **(void **)(a1 + 144) + 24, @"thumper.switch.status", v95, kPhoneServicesWalletDomain, 0, 1, 0);
      if ((v14 & 1) == 0) {
        sub_10004D2C8(v12);
      }
      sub_1003A9CA0(buf);
      sub_1003A9C3C(*(uint64_t *)buf, key[0], 0);
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  v12 = 0;
  char v14 = 1;
  goto LABEL_25;
}

void sub_101079850(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a2)
  {
    sub_100163C60((void ***)&a33);
    operator delete();
  }
  _Unwind_Resume(a1);
}

void sub_10107A4A8(uint64_t a1, int a2)
{
  uint64_t v2 = *(int *)(a1 + 256);
  if (v2 != a2)
  {
    *(_DWORD *)(a1 + 256) = a2;
    v4 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      if (v2 > 2) {
        v6 = (char *)&unk_10161656E;
      }
      else {
        v6 = off_101A85F58[v2];
      }
      uint64_t v7 = *(int *)(a1 + 256);
      if (v7 > 2) {
        v8 = (char *)&unk_10161656E;
      }
      else {
        v8 = off_101A85F58[v7];
      }
      int v9 = 136315906;
      uint64_t v10 = v5;
      __int16 v11 = 2080;
      v12 = " ";
      __int16 v13 = 2080;
      char v14 = v6;
      __int16 v15 = 2080;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%suser switch state changed %s -> %s", (uint8_t *)&v9, 0x2Au);
    }
  }
}

uint64_t sub_10107A5C8(uint64_t a1)
{
  v23 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
  uint64_t v3 = ServiceMap;
  if (v4 < 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      uint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  *(void *)buf = v4;
  v8 = sub_10004D37C(&v3[1].__m_.__sig, (unint64_t *)buf);
  if (v8)
  {
    uint64_t v10 = v8[3];
    int v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      char v11 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v3);
  int v9 = 0;
  char v11 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, const __CFString *, void, void, uint64_t))(*(void *)v10 + 64))(&v22, v10, **(void **)(a1 + 144) + 24, @"thumper.switch.status", kPhoneServicesWalletDomain, 0, 1);
  sub_1000842D0(&v23, &v22);
  sub_1000577C4(&v22);
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
  if (v23) {
    __int16 v13 = sub_100081E58;
  }
  else {
    __int16 v13 = 0;
  }
  if (v13)
  {
    *(_DWORD *)buf = 0;
    ctu::cf::assign((ctu::cf *)buf, v23, v12);
    uint64_t v14 = *(unsigned int *)buf;
    __int16 v15 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      if (v14 > 2) {
        uint64_t v17 = (char *)&unk_10161656E;
      }
      else {
        uint64_t v17 = off_101A85F58[(int)v14];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v25 = 2080;
      char v26 = " ";
      __int16 v27 = 2080;
      v28 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I %s%slast known user switch state is: %s", buf, 0x20u);
    }
  }
  else
  {
    uint64_t v18 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      v20 = (char *)(a1 + 184);
      if (*(char *)(a1 + 207) < 0) {
        v20 = *(char **)v20;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v19;
      __int16 v25 = 2080;
      char v26 = " ";
      __int16 v27 = 2080;
      v28 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s%sno saved user switch state for account '%s'", buf, 0x20u);
    }
    if (sub_10107644C(a1) || !sub_1007FF79C(*(void *)(a1 + 168), 0, (uint64_t *)(a1 + 184)))
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 2;
      sub_10107B1FC(a1, 2u);
    }
  }
  sub_1000570E8((const void **)&v23);
  return v14;
}

void sub_10107A8C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000570E8((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_10107A918(uint64_t a1)
{
  uint64_t v19 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 120));
  uint64_t v3 = ServiceMap;
  if (v4 < 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      uint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  *(void *)buf = v4;
  v8 = sub_10004D37C(&v3[1].__m_.__sig, (unint64_t *)buf);
  if (v8)
  {
    uint64_t v10 = v8[3];
    int v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      char v11 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v3);
  int v9 = 0;
  char v11 = 1;
LABEL_9:
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, const __CFString *, void, void, uint64_t))(*(void *)v10 + 64))(&v18, v10, **(void **)(a1 + 144) + 24, @"last.icloud.ver", kPhoneServicesWalletDomain, 0, 1);
  sub_1000842D0(&v19, &v18);
  sub_1000577C4(&v18);
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
  if (v19) {
    __int16 v13 = sub_100081E58;
  }
  else {
    __int16 v13 = 0;
  }
  if (v13)
  {
    *(_DWORD *)buf = 0;
    ctu::cf::assign((ctu::cf *)buf, v19, v12);
    *(_DWORD *)(a1 + 832) = *(_DWORD *)buf;
    uint64_t v14 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      int v16 = *(_DWORD *)(a1 + 832);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v15;
      __int16 v21 = 2080;
      unsigned int v22 = " ";
      __int16 v23 = 1024;
      int v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s%sRestored fLastICloudVer %u", buf, 0x1Cu);
    }
  }
  return sub_1000570E8((const void **)&v19);
}

void sub_10107AB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000570E8((const void **)va);
  _Unwind_Resume(a1);
}

void sub_10107AB90(uint64_t a1)
{
}

const void **sub_10107AB98(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v4;
    __int16 v43 = 2080;
    uint64_t v44 = " ";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s%sstarting", buf, 0x16u);
  }
  v41 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)(a1 + 120));
  uint64_t v6 = ServiceMap;
  uint64_t v8 = v7;
  if (v7 < 0)
  {
    int v9 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      uint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  *(void *)buf = v8;
  CFNumberRef v12 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
  if (v12)
  {
    uint64_t v14 = v12[3];
    __int16 v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v13);
      char v15 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v6);
  __int16 v13 = 0;
  char v15 = 1;
LABEL_11:
  uint64_t v16 = kPhoneServicesWalletDomain;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const __CFString *, void, void, uint64_t))(*(void *)v14 + 24))(__p, v14, **(void **)(a1 + 144) + 24, @"NeedAccountInvalidation", kPhoneServicesWalletDomain, 0, 1);
  sub_1000057AC(&v41, (CFTypeRef *)__p);
  sub_1000577C4((const void **)__p);
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v13);
  }
  if (v41) {
    uint64_t v18 = sub_100084B4C;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v18)
  {
    buf[0] = 0;
    ctu::cf::assign((ctu::cf *)buf, v41, v17);
    uint64_t v19 = (uint64_t *)buf[0];
    *(unsigned char *)(a1 + 843) = buf[0];
    if (!v19) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v19 = (uint64_t *)*(unsigned __int8 *)(a1 + 843);
    if (!*(unsigned char *)(a1 + 843)) {
      goto LABEL_22;
    }
  }
  v20 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v21;
    __int16 v43 = 2080;
    uint64_t v44 = " ";
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s%sfAccountInvalidationForced is true at bootup!", buf, 0x16u);
  }
LABEL_22:
  uint64_t v40 = 0;
  unsigned int v22 = (std::mutex *)Registry::getServiceMap(v19, *(Registry **)(a1 + 120));
  __int16 v23 = v22;
  if (v7 < 0)
  {
    int v24 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v25 = 5381;
    do
    {
      uint64_t v7 = v25;
      unsigned int v26 = *v24++;
      uint64_t v25 = (33 * v25) ^ v26;
    }
    while (v26);
  }
  std::mutex::lock(v22);
  *(void *)buf = v7;
  __int16 v27 = sub_10004D37C(&v23[1].__m_.__sig, (unint64_t *)buf);
  if (v27)
  {
    uint64_t v29 = v27[3];
    v28 = (std::__shared_weak_count *)v27[4];
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v23);
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v28);
      char v30 = 0;
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  std::mutex::unlock(v23);
  v28 = 0;
  char v30 = 1;
LABEL_30:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, const __CFString *, uint64_t, void, uint64_t))(*(void *)v29 + 24))(&v40, v29, **(void **)(a1 + 144) + 24, @"ps.device.list", v16, 0, 1);
  if ((v30 & 1) == 0) {
    sub_10004D2C8(v28);
  }
  if (v40) {
    v31 = sub_100080934;
  }
  else {
    v31 = 0;
  }
  if (v31)
  {
    char v39 = 0;
    sub_1007FF600(*(void *)(a1 + 168), @"ps.device.list", v40, (uint64_t *)(a1 + 184));
    sub_10004EFE4(&v39, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    if (v39) {
      uint64_t v32 = sub_100080778;
    }
    else {
      uint64_t v32 = 0;
    }
    if (v32) {
      sub_100C905DC();
    }
    sub_100057D78(&v39);
  }
  v33 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v34 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    unsigned int v35 = *(_DWORD *)(a1 + 264) - 1;
    if (v35 > 5) {
      v36 = "???";
    }
    else {
      v36 = off_101A85F70[v35];
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v34;
    __int16 v43 = 2080;
    uint64_t v44 = " ";
    __int16 v45 = 2080;
    uint64_t v46 = v36;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I %s%sStarted, status:%s", buf, 0x20u);
  }
  sub_1000577C4((const void **)&v40);
  return sub_100062778((const void **)&v41);
}

void sub_10107B134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, const void *);
  sub_100057D78((const void **)va);
  sub_1000577C4((const void **)va1);
  sub_100062778((const void **)va2);
  _Unwind_Resume(a1);
}

const void **sub_10107B1F4(uint64_t a1)
{
  return sub_10107AB98(a1 - 8);
}

const void **sub_10107B1FC(uint64_t a1, unsigned int a2)
{
  v42 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
  uint64_t v5 = ServiceMap;
  unint64_t v7 = v6;
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t v8 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t valuePtr = v7;
  unsigned int v11 = sub_10004D37C(&v5[1].__m_.__sig, &valuePtr);
  if (v11)
  {
    uint64_t v13 = v11[3];
    CFNumberRef v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v5);
  CFNumberRef v12 = 0;
  char v14 = 1;
LABEL_9:
  uint64_t v15 = kPhoneServicesWalletDomain;
  (*(void (**)(CFNumberRef *__return_ptr, uint64_t, uint64_t, const __CFString *, void, void, uint64_t))(*(void *)v13 + 64))(&v43, v13, **(void **)(a1 + 144) + 24, @"thumper.switch.status", kPhoneServicesWalletDomain, 0, 1);
  sub_1000842D0(&v42, (CFTypeRef *)&v43);
  sub_1000577C4((const void **)&v43);
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  if (v42) {
    CFBooleanRef v17 = sub_100081E58;
  }
  else {
    CFBooleanRef v17 = 0;
  }
  if (v17)
  {
    LODWORD(valuePtr) = 0;
    ctu::cf::assign((ctu::cf *)&valuePtr, v42, v16);
    LODWORD(v17) = valuePtr;
  }
  if (v17 == a2) {
    return sub_1000570E8((const void **)&v42);
  }
  uint64_t v18 = *(Registry **)(a1 + 120);
  if (!a2)
  {
    v28 = (std::mutex *)Registry::getServiceMap(v18);
    uint64_t v29 = v28;
    if ((v6 & 0x8000000000000000) != 0)
    {
      char v30 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v31 = 5381;
      do
      {
        unint64_t v6 = v31;
        unsigned int v32 = *v30++;
        uint64_t v31 = (33 * v31) ^ v32;
      }
      while (v32);
    }
    std::mutex::lock(v28);
    unint64_t valuePtr = v6;
    v33 = sub_10004D37C(&v29[1].__m_.__sig, &valuePtr);
    if (v33)
    {
      uint64_t v34 = v33[3];
      uint64_t v25 = (std::__shared_weak_count *)v33[4];
      if (v25)
      {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v29);
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v25);
        char v35 = 0;
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v34 = 0;
    }
    std::mutex::unlock(v29);
    uint64_t v25 = 0;
    char v35 = 1;
LABEL_39:
    (*(void (**)(uint64_t, uint64_t, const __CFString *, uint64_t, void, uint64_t))(*(void *)v34 + 72))(v34, **(void **)(a1 + 144) + 24, @"thumper.switch.status", v15, 0, 1);
    if (v35) {
      return sub_1000570E8((const void **)&v42);
    }
    goto LABEL_35;
  }
  uint64_t v19 = (std::mutex *)Registry::getServiceMap(v18);
  v20 = v19;
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t v21 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v22 = 5381;
    do
    {
      unint64_t v6 = v22;
      unsigned int v23 = *v21++;
      uint64_t v22 = (33 * v22) ^ v23;
    }
    while (v23);
  }
  std::mutex::lock(v19);
  unint64_t valuePtr = v6;
  int v24 = sub_10004D37C(&v20[1].__m_.__sig, &valuePtr);
  if (v24)
  {
    uint64_t v26 = v24[3];
    uint64_t v25 = (std::__shared_weak_count *)v24[4];
    if (v25)
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v20);
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v25);
      char v27 = 0;
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v26 = 0;
  }
  std::mutex::unlock(v20);
  uint64_t v25 = 0;
  char v27 = 1;
LABEL_32:
  uint64_t v36 = **(void **)(a1 + 144);
  CFNumberRef v43 = 0;
  unint64_t valuePtr = a2;
  CFNumberRef v37 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  if (v37)
  {
    unint64_t v38 = (unint64_t)v43;
    CFNumberRef v43 = v37;
    unint64_t valuePtr = v38;
    sub_1000570E8((const void **)&valuePtr);
  }
  CFNumberRef v39 = v43;
  CFNumberRef v41 = v43;
  CFNumberRef v43 = 0;
  sub_1000570E8((const void **)&v43);
  (*(void (**)(uint64_t, uint64_t, const __CFString *, CFNumberRef, uint64_t, void, uint64_t, void, CFNumberRef))(*(void *)v26 + 48))(v26, v36 + 24, @"thumper.switch.status", v39, v15, 0, 1, 0, v41);
  sub_1000570E8((const void **)&v41);
  if ((v27 & 1) == 0) {
LABEL_35:
  }
    sub_10004D2C8(v25);
  return sub_1000570E8((const void **)&v42);
}

void sub_10107B5B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v3);
  }
  sub_1000570E8((const void **)va);
  _Unwind_Resume(a1);
}

void sub_10107B630(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    if ((a2 - 1) > 5) {
      unint64_t v6 = "???";
    }
    else {
      unint64_t v6 = off_101A85F70[a2 - 1];
    }
    int v12 = 136315650;
    uint64_t v13 = v5;
    __int16 v14 = 2080;
    uint64_t v15 = " ";
    __int16 v16 = 2080;
    CFBooleanRef v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%sThumper Entitlement:%s", (uint8_t *)&v12, 0x20u);
  }
  if (*(_DWORD *)(a1 + 264) != a2)
  {
    unint64_t v7 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      unsigned int v9 = *(_DWORD *)(a1 + 264) - 1;
      if (v9 > 5) {
        unsigned int v10 = "???";
      }
      else {
        unsigned int v10 = off_101A85F70[v9];
      }
      if ((a2 - 1) > 5) {
        unsigned int v11 = "???";
      }
      else {
        unsigned int v11 = off_101A85F70[a2 - 1];
      }
      int v12 = 136315906;
      uint64_t v13 = v8;
      __int16 v14 = 2080;
      uint64_t v15 = " ";
      __int16 v16 = 2080;
      CFBooleanRef v17 = v10;
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s%sThumper entitlement is changing from %s to %s", (uint8_t *)&v12, 0x2Au);
    }
    *(_DWORD *)(a1 + 264) = a2;
    sub_10107B800((const void **)a1, 0, 0);
  }
}

const void **sub_10107B800(const void **result, BOOL a2, BOOL a3)
{
  void (***v64)(unsigned char *__return_ptr, void, uint64_t);
  char v65;
  uint64_t v66;
  NSObject *v67;
  uint64_t v68;
  int v69;
  BOOL v70;
  int v71;
  uint64_t (*v72)(uint64_t);
  int v73;
  BOOL v74;
  BOOL v75;
  NSObject *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  BOOL v79;
  uint64_t (*v80)(uint64_t);
  char v81;
  int v82;
  uint64_t (*v83)(uint64_t);
  NSObject *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t (*v87)(uint64_t);
  NSObject *v88;
  uint64_t v89;
  const char *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  CFStringRef Value;
  CFStringRef v96;
  CFTypeID v97;
  CFStringRef v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  CFTypeRef v103;
  BOOL v104;
  uint64_t (*v105)(uint64_t);
  char v106;
  NSObject *v107;
  uint64_t v108;
  const char *v109;
  int v110;
  uint64_t v111;
  uint64_t (*v112)(uint64_t);
  std::mutex *ServiceMap;
  std::mutex *v114;
  uint64_t v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unsigned int v118;
  void *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  char v122;
  void *v123;
  void *v124;
  int v125;
  CFStringRef v126;
  CFStringRef v127;
  NSObject *v128;
  uint64_t v129;
  int v130;
  void **v131;
  void **v132;
  void **v133;
  uint64_t v134;
  int v135;
  NSObject *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  BOOL v140;
  uint64_t (*v141)(uint64_t);
  BOOL v142;
  _OWORD *v143;
  int v144;
  int v145;
  CFTypeRef v146;
  CFTypeRef v147;
  const void *v148;
  const void *v149;
  const void *v150;
  CFTypeRef cf;
  void *v152[2];
  uint64_t v153;
  _DWORD v154[2];
  CFStringRef v155;
  void *__p[2];
  uint64_t v157;
  char v158;
  CFStringRef v159;
  void *__dst[2];
  uint64_t v161;
  void *v162[2];
  uint64_t v163;
  CFStringRef v164;
  unsigned char buf[22];
  __int16 v166;
  void *v167;
  __int16 v168;
  uint64_t v169;
  __int16 v170;
  unsigned char v171[20];
  const char *v172;
  __int16 v173;
  unsigned char v174[18];
  char v175;

  if (*((unsigned char *)result[20] + 354)) {
    return result;
  }
  uint64_t v5 = (uint64_t)result;
  result = (const void **)(*(uint64_t (**)(const void *))(*(void *)result[21] + 16))(result[21]);
  if (!result) {
    return result;
  }
  unint64_t v6 = *(NSObject **)(v5 + 56);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    v166 = 2080;
    v167 = (void *)asStringBool(a2);
    v168 = 2080;
    v169 = asStringBool(a3);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s%suserAction = %s, reprovisioning = %s", buf, 0x2Au);
  }
  v150 = 0;
  cf = 0;
  sub_1007FFAA4(*(void **)(v5 + 168), 0, (void **)(v5 + 184), 0, &v150);
  v148 = 0;
  v149 = 0;
  sub_1007FFAA4(*(void **)(v5 + 168), 1, (void **)(v5 + 184), 0, &v148);
  CFDictionaryRef v8 = (const __CFDictionary *)cf;
  if (cf) {
    unsigned int v9 = sub_100080778;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v9 && !*(_DWORD *)(v5 + 832))
  {
    int v10 = (int)v148;
    if (v150 > v148) {
      int v10 = (int)v150;
    }
    *(_DWORD *)(v5 + 832) = v10;
    sub_10107F770(v5);
    CFDictionaryRef v8 = (const __CFDictionary *)cf;
  }
  v143 = (_OWORD *)(v5 + 184);
  if (v8) {
    unsigned int v11 = sub_100080778;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v11 && !a3)
  {
    if (*(unsigned char *)(v5 + 840))
    {
      a3 = 0;
LABEL_40:
      *(unsigned char *)(v5 + 842) = 0;
      goto LABEL_41;
    }
    if ((sub_10107F2A8(v5, v8, 0) & 1) == 0)
    {
      int v12 = *(NSObject **)(v5 + 56);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v15;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        __int16 v14 = "#I %s%sCB mismatch, reprovisioning required";
        goto LABEL_30;
      }
LABEL_31:
      char v17 = 0;
      a3 = 1;
LABEL_32:
      *(unsigned char *)(v5 + 841) = v17;
      goto LABEL_33;
    }
    if ((sub_10107F2A8(v5, v8, 1) & 1) == 0)
    {
      int v12 = *(NSObject **)(v5 + 56);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        __int16 v14 = "#I %s%sDefault bundle mismatch, reprovisioning required";
        goto LABEL_30;
      }
      goto LABEL_31;
    }
    if (*(unsigned char *)(v5 + 728) && sub_10108033C(v5, v5 + 272))
    {
      int v12 = *(NSObject **)(v5 + 56);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        __int16 v14 = "#I %s%sTokens or credentials mismatch, reprovisioning required";
LABEL_30:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v14, buf, 0x16u);
        goto LABEL_31;
      }
      goto LABEL_31;
    }
    uint64_t v92 = *(void *)(v5 + 168);
    if (*(char *)(v5 + 207) < 0)
    {
      sub_10004FC84(__p, *(void **)(v5 + 184), *(void *)(v5 + 192));
    }
    else
    {
      *(_OWORD *)__p = *v143;
      v157 = *(void *)(v5 + 200);
    }
    v158 = 1;
    uint64_t v94 = sub_1007FCB38(v92, v8, (long long *)__p, 1);
    if (v158 && SHIBYTE(v157) < 0) {
      operator delete(__p[0]);
    }
    if ((v94 & 1) == 0)
    {
      v99 = *(NSObject **)(v5 + 56);
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
      {
        v100 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v100;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "#I %s%sSchema version changed - iCloud update required", buf, 0x16u);
      }
      a3 = 0;
      char v17 = 1;
      goto LABEL_32;
    }
    Value = (const __CFString *)CFDictionaryGetValue(v8, @"labelID");
    v96 = Value;
    if (Value)
    {
      v97 = CFGetTypeID(Value);
      if (v97 == CFStringGetTypeID()) {
        long long v98 = v96;
      }
      else {
        long long v98 = 0;
      }
    }
    else
    {
      long long v98 = 0;
    }
    v155 = 0;
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v5 + 120));
    v114 = ServiceMap;
    if (v115 < 0)
    {
      v116 = (unsigned __int8 *)(v115 & 0x7FFFFFFFFFFFFFFFLL);
      v117 = 5381;
      do
      {
        v115 = v117;
        v118 = *v116++;
        v117 = (33 * v117) ^ v118;
      }
      while (v118);
    }
    std::mutex::lock(ServiceMap);
    v162[0] = (void *)v115;
    v119 = sub_10004D37C(&v114[1].__m_.__sig, (unint64_t *)v162);
    if (v119)
    {
      v120 = v119[3];
      v121 = (std::__shared_weak_count *)v119[4];
      if (v121)
      {
        atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v114);
        atomic_fetch_add_explicit(&v121->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v121);
        v122 = 0;
        goto LABEL_272;
      }
    }
    else
    {
      v120 = 0;
    }
    std::mutex::unlock(v114);
    v121 = 0;
    v122 = 1;
LABEL_272:
    (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t))(*(void *)v120 + 176))(buf, v120, **(void **)(v5 + 144) + 24);
    v124 = *(void **)&v171[4];
    v123 = *(void **)&v171[12];
    v154[0] = v172;
    *(_DWORD *)((char *)v154 + 3) = *(_DWORD *)((char *)&v172 + 3);
    v125 = SHIBYTE(v172);
    *(void *)&v171[12] = 0;
    v172 = 0;
    *(void *)&v171[4] = 0;
    if (v125 < 0)
    {
      sub_10004FC84(__dst, v124, (unint64_t)v123);
      v159 = 0;
      if (SHIBYTE(v161) < 0)
      {
        sub_10004FC84(v162, __dst[0], (unint64_t)__dst[1]);
        goto LABEL_276;
      }
    }
    else
    {
      __dst[0] = v124;
      __dst[1] = v123;
      LODWORD(v161) = v154[0];
      *(_DWORD *)((char *)&v161 + 3) = *(_DWORD *)((char *)v154 + 3);
      HIBYTE(v161) = v125;
      v159 = 0;
    }
    *(_OWORD *)v162 = *(_OWORD *)__dst;
    v163 = v161;
LABEL_276:
    v164 = 0;
    if (ctu::cf::convert_copy())
    {
      v126 = v159;
      v159 = v164;
      v152[0] = (void *)v126;
      sub_1000558F4((const void **)v152);
    }
    if (SHIBYTE(v163) < 0) {
      operator delete(v162[0]);
    }
    v127 = v159;
    v155 = v159;
    v159 = 0;
    sub_1000558F4((const void **)&v159);
    if (SHIBYTE(v161) < 0) {
      operator delete(__dst[0]);
    }
    if (v125 < 0) {
      operator delete(v124);
    }
    if (v175 < 0) {
      operator delete(*(void **)&v174[6]);
    }
    if (SHIBYTE(v172) < 0) {
      operator delete(*(void **)&v171[4]);
    }
    if ((v171[3] & 0x80000000) != 0) {
      operator delete(v167);
    }
    if (SHIBYTE(v166) < 0) {
      operator delete(*(void **)buf);
    }
    if ((v122 & 1) == 0) {
      sub_10004D2C8(v121);
    }
    if (v98 && CFEqual(v98, v127))
    {
      a3 = 0;
    }
    else
    {
      v128 = *(NSObject **)(v5 + 56);
      if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
      {
        v129 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
        v162[0] = 0;
        v162[1] = 0;
        v163 = 0;
        ctu::cf::assign();
        v161 = v163;
        *(_OWORD *)__dst = *(_OWORD *)v162;
        v130 = SHIBYTE(v163);
        v131 = (void **)v162[0];
        v162[0] = 0;
        v162[1] = 0;
        v163 = 0;
        ctu::cf::assign();
        v132 = __dst;
        if (v130 < 0) {
          v132 = v131;
        }
        *(_OWORD *)v152 = *(_OWORD *)v162;
        v153 = v163;
        v133 = v152;
        if (v163 < 0) {
          v133 = (void **)v162[0];
        }
        *(_DWORD *)buf = 136315906;
        *(void *)&uint8_t buf[4] = v129;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        v166 = 2080;
        v167 = v132;
        v168 = 2080;
        v169 = (uint64_t)v133;
        _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEFAULT, "#I %s%smy labelId '%s' doesn't match ID from cloud '%s'", buf, 0x2Au);
        if (SHIBYTE(v153) < 0) {
          operator delete(v152[0]);
        }
        if (SHIBYTE(v161) < 0) {
          operator delete(__dst[0]);
        }
      }
      a3 = 1;
    }
    sub_1000558F4((const void **)&v155);
    char v17 = 0;
    goto LABEL_32;
  }
LABEL_33:
  if (a3 && !*(unsigned char *)(v5 + 840))
  {
    *(unsigned char *)(v5 + 840) = 1;
    __int16 v18 = *(NSObject **)(v5 + 56);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v19;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s%scredentials flushed to force reprovisioning with entitlement server", buf, 0x16u);
    }
    v20 = *(std::__shared_weak_count **)(v5 + 808);
    *(_OWORD *)(v5 + 800) = 0u;
    if (v20) {
      sub_10004D2C8(v20);
    }
  }
  if (v11) {
    goto LABEL_40;
  }
LABEL_41:
  uint64_t v21 = *(void *)(v5 + 168);
  BOOL v22 = (sub_1007F89C4(v21) & 1) != 0 || *(unsigned char *)(v21 + 193) != 0;
  int v23 = sub_10107D848(v5);
  int v24 = *(_DWORD *)(v5 + 256);
  if (v24) {
    BOOL v25 = v24 == 2;
  }
  else {
    BOOL v25 = sub_10107644C(v5);
  }
  v141 = v11;
  if (v23 == 1)
  {
    int v26 = a3 || a2;
    v144 = sub_100A2EB74(*(void *)(v5 + 160), v26, 0);
  }
  else
  {
    v144 = -1;
  }
  unsigned int v27 = sub_1010767E0(*(void *)(v5 + 160));
  v142 = a2;
  BOOL v28 = sub_10107FD7C(v5);
  uint64_t v29 = *(NSObject **)(v5 + 56);
  v145 = v23;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v30 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
    int v31 = *(_DWORD *)(v5 + 260);
    unsigned int v32 = (const char *)&unk_10161656E;
    if (v31 == 1) {
      unsigned int v32 = "Active";
    }
    if (v31) {
      v33 = v32;
    }
    else {
      v33 = "Disabled";
    }
    uint64_t v34 = "indeterminate";
    if (!v145) {
      uint64_t v34 = "false";
    }
    if (v145 == 1) {
      char v35 = "true";
    }
    else {
      char v35 = v34;
    }
    uint64_t v36 = asStringBool(v25);
    CFNumberRef v37 = "signed-out";
    if (v22) {
      CFNumberRef v37 = "signed-in";
    }
    unint64_t v38 = "Incomplete";
    if (v144 != -1) {
      unint64_t v38 = "Good";
    }
    if (!v144) {
      unint64_t v38 = "Pending";
    }
    int v39 = *(char *)(v5 + 207);
    uint64_t v40 = "missing";
    if (v39 < 0)
    {
      if (*(void *)(v5 + 192)) {
        v42 = *(const char **)v143;
      }
      else {
        v42 = "missing";
      }
    }
    else
    {
      BOOL v41 = v39 == 0;
      v42 = (const char *)(v5 + 184);
      if (v41) {
        v42 = "missing";
      }
    }
    if (cf) {
      CFNumberRef v43 = sub_100080778;
    }
    else {
      CFNumberRef v43 = 0;
    }
    *(_DWORD *)buf = 136317186;
    *(void *)&uint8_t buf[4] = v30;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    if (v43) {
      uint64_t v40 = "present";
    }
    v166 = 2080;
    v167 = (void *)v33;
    v168 = 2080;
    v169 = (uint64_t)v35;
    v170 = 2080;
    *(void *)v171 = v36;
    *(_WORD *)&v171[8] = 2080;
    *(void *)&v171[10] = v37;
    *(_WORD *)&v171[18] = 2080;
    v172 = v38;
    v173 = 2080;
    *(void *)v174 = v42;
    *(_WORD *)&v174[8] = 2080;
    *(void *)&v174[10] = v40;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I %s%s+ fServiceStatus:%s, serviceAllowed:%s, switchIsON:%s, iCloud:%s accountState:%s, accountId:%s, mainCfg:%s", buf, 0x5Cu);
    uint64_t v29 = *(NSObject **)(v5 + 56);
  }
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v44 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
    __int16 v45 = (void *)asStringBool(*(unsigned char *)(*(void *)(v5 + 160) + 353));
    uint64_t v46 = asStringBool(*(unsigned char *)(v5 + 836));
    uint64_t v47 = asStringBool(*(unsigned char *)(v5 + 837));
    uint64_t v48 = asStringBool(*(unsigned char *)(v5 + 840));
    *(_DWORD *)buf = 136316418;
    *(void *)&uint8_t buf[4] = v44;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    v166 = 2080;
    v167 = v45;
    v168 = 2080;
    v169 = v46;
    v170 = 2080;
    *(void *)v171 = v47;
    *(_WORD *)&v171[8] = 2080;
    *(void *)&v171[10] = v48;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I %s%s+ isInGetPSASProcess:%s, fAwaitingGetProvisioning:%s, fAwaitingSetProvisioning:%s, fReprovisioningRequested:%s", buf, 0x3Eu);
    uint64_t v29 = *(NSObject **)(v5 + 56);
  }
  int v49 = v27 & v28;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v50 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
    char v51 = "not ";
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = v50;
    if (v27) {
      char v51 = "";
    }
    *(void *)&buf[14] = " ";
    *(_WORD *)&unsigned char buf[12] = 2080;
    v166 = 2080;
    v167 = (void *)v51;
    if (v49) {
      v52 = "";
    }
    else {
      v52 = " not";
    }
    v168 = 2080;
    v169 = (uint64_t)v52;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I %s%s+ stealthMode %sallowed and%s justified", buf, 0x2Au);
  }
  int v53 = (v22 && v25) | v49;
  int v54 = v142;
  uint64_t v55 = (void **)(v5 + 184);
  if (!*(unsigned char *)(**(void **)(v5 + 144) + 48)) {
    goto LABEL_108;
  }
  v56 = (std::mutex *)Registry::getServiceMap(*(Registry **)(v5 + 120));
  uint64_t v57 = v56;
  if (v58 < 0)
  {
    v59 = (unsigned __int8 *)(v58 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v60 = 5381;
    do
    {
      uint64_t v58 = v60;
      unsigned int v61 = *v59++;
      uint64_t v60 = (33 * v60) ^ v61;
    }
    while (v61);
  }
  std::mutex::lock(v56);
  __p[0] = (void *)v58;
  char v62 = sub_10004D37C(&v57[1].__m_.__sig, (unint64_t *)__p);
  if (v62)
  {
    uint64_t v64 = (void (***)(unsigned char *__return_ptr, void, uint64_t))v62[3];
    uint64_t v63 = (std::__shared_weak_count *)v62[4];
    if (v63)
    {
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v57);
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v63);
      goto LABEL_101;
    }
  }
  else
  {
    uint64_t v64 = 0;
  }
  std::mutex::unlock(v57);
  uint64_t v63 = 0;
LABEL_101:
  (**v64)(buf, v64, **(void **)(v5 + 144) + 24);
  BOOL v65 = (*(uint64_t (**)(void))(**(void **)buf + 544))(*(void *)buf);
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v63) {
    sub_10004D2C8(v63);
  }
  if (v65)
  {
    if (*(char *)(v5 + 207) < 0) {
      BOOL v66 = *(void *)(v5 + 192);
    }
    else {
      BOOL v66 = *(unsigned __int8 *)(v5 + 207);
    }
    v73 = *(unsigned __int8 *)(v5 + 843);
    v74 = sub_10107657C(v5);
    if (v73) {
      uint64_t v75 = v74;
    }
    else {
      uint64_t v75 = 0;
    }
    if (v145 == 1 && v75 && v66)
    {
      char v76 = *(NSObject **)(v5 + 56);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      {
        v77 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v77;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#I %s%scredentials invalidation forced", buf, 0x16u);
      }
      sub_1010816E0(v5, 0, 0, 0);
      uint64_t v78 = *(std::__shared_weak_count **)(v5 + 808);
      *(_OWORD *)(v5 + 800) = 0u;
      if (v78) {
        sub_10004D2C8(v78);
      }
    }
    v147 = cf;
    if (cf) {
      CFRetain(cf);
    }
    if (*(unsigned char *)(v5 + 836) || *(unsigned char *)(v5 + 837))
    {
      if (v53) {
        goto LABEL_159;
      }
      v79 = 0;
    }
    else
    {
      v79 = 0;
      if (v145 && ((v53 ^ 1) & 1) == 0 && v144 != -1)
      {
        if (v147) {
          v87 = sub_100080778;
        }
        else {
          v87 = 0;
        }
        v79 = v87 != 0;
      }
    }
    if (*(_DWORD *)(v5 + 260) == 1)
    {
      if (v79)
      {
LABEL_154:
        sub_10107E63C(v5, v79);
        if (!v141 && *(_DWORD *)(v5 + 260) == 1) {
          sub_10107DCE0(v5);
        }
        if (v79) {
          sub_10108816C(v5);
        }
LABEL_159:
        sub_100057D78(&v147);
        if (*(unsigned char *)(v5 + 836) || (v82 = v145, *(unsigned char *)(v5 + 837))) {
          v82 = 0;
        }
        if (!v53) {
          v82 = 0;
        }
        if (cf) {
          v83 = sub_100080778;
        }
        else {
          v83 = 0;
        }
        if ((v83 || v144 != 1) && (!v83 || v144 == -1 || !*(unsigned char *)(v5 + 840) && !*(unsigned char *)(v5 + 841)) || v82 != 1)
        {
LABEL_221:
          v103 = cf;
          v146 = cf;
          if (cf) {
            CFRetain(cf);
          }
          if (*(unsigned char *)(v5 + 836) || *(unsigned char *)(v5 + 837))
          {
            if (v53)
            {
LABEL_243:
              sub_100057D78(&v146);
              goto LABEL_244;
            }
            v104 = 0;
          }
          else
          {
            v104 = 0;
            if (v145 && ((v53 ^ 1) & 1) == 0 && v144 != -1)
            {
              if (v103) {
                v112 = sub_100080778;
              }
              else {
                v112 = 0;
              }
              v104 = v112 != 0;
            }
          }
          if (*(_DWORD *)(v5 + 260) == 1)
          {
            if (v104)
            {
LABEL_238:
              sub_10107E63C(v5, v104);
              if (!v141 && *(_DWORD *)(v5 + 260) == 1) {
                sub_10107DCE0(v5);
              }
              if (v104) {
                sub_10108816C(v5);
              }
              goto LABEL_243;
            }
          }
          else
          {
            if (v103) {
              v105 = sub_100080778;
            }
            else {
              v105 = 0;
            }
            if (v105) {
              v106 = v104;
            }
            else {
              v106 = 1;
            }
            if (v106) {
              goto LABEL_238;
            }
          }
          sub_10107D2A0(v5);
          goto LABEL_238;
        }
        if (!sub_1007FA824(*(void **)(v5 + 168)))
        {
          CFStringRef v88 = *(NSObject **)(v5 + 56);
          if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
          {
LABEL_218:
            if (!*(unsigned char *)(v5 + 836) && !*(unsigned char *)(v5 + 837))
            {
              sub_1007FFAA4(*(void **)(v5 + 168), 0, v55, 0, (const void **)buf);
              LODWORD(v150) = *(_DWORD *)buf;
              __p[0] = (void *)cf;
              cf = *(CFTypeRef *)&buf[8];
              *(void *)&buf[8] = 0;
              sub_100057D78((const void **)__p);
              sub_100057D78((const void **)&buf[8]);
            }
            goto LABEL_221;
          }
          v89 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v89;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          long long v90 = "#I %s%sDevice ID still not available - bailout";
LABEL_217:
          _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, v90, buf, 0x16u);
          goto LABEL_218;
        }
        if ((*(unsigned char *)(v5 + 842) || *(unsigned char *)(v5 + 843)) && sub_10107657C(v5))
        {
          int v84 = *(NSObject **)(v5 + 56);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            v85 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = v85;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "#I %s%saccount invalidation required - defer Thumper configuration", buf, 0x16u);
          }
          sub_1010816E0(v5, 0, 0, 0);
          CFStringRef v86 = *(std::__shared_weak_count **)(v5 + 808);
          *(_OWORD *)(v5 + 800) = 0u;
          if (v86) {
            sub_10004D2C8(v86);
          }
          goto LABEL_218;
        }
        v91 = *(uint64_t **)(v5 + 800);
        if (v91)
        {
          if (*(unsigned char *)(v5 + 728))
          {
            if (*(unsigned char *)(v5 + 328))
            {
              sub_101083E40(v5, v91);
              goto LABEL_218;
            }
            CFStringRef v88 = *(NSObject **)(v5 + 56);
            if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_218;
            }
            v102 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = v102;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            long long v90 = "#I %s%scalled while Authentication don't have service tokens - no go";
          }
          else
          {
            CFStringRef v88 = *(NSObject **)(v5 + 56);
            if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_218;
            }
            __int16 v101 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = v101;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            long long v90 = "#I %s%scalled while Authentication response is not present - no go";
          }
          goto LABEL_217;
        }
        if (*(unsigned char *)(v5 + 836) || *(unsigned char *)(v5 + 837))
        {
          CFStringRef v88 = *(NSObject **)(v5 + 56);
          if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_218;
          }
          CFStringRef v93 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v93;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          long long v90 = "#I %s%sgetProvisioning call in progress";
          goto LABEL_217;
        }
        v134 = *(void *)(v5 + 160);
        v135 = *(_DWORD *)(v134 + 408);
        if (v135 == 1)
        {
          if (!*(void *)(v134 + 416))
          {
            v139 = *(_DWORD *)(v134 + 412);
            v136 = *(NSObject **)(v5 + 56);
            v140 = os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT);
            if (v139)
            {
              int v54 = v142;
              if (!v140) {
                goto LABEL_313;
              }
              goto LABEL_312;
            }
            int v54 = v142;
            uint64_t v55 = (void **)(v5 + 184);
            if (v140) {
              goto LABEL_320;
            }
            goto LABEL_321;
          }
        }
        else if (!v135)
        {
          v136 = *(NSObject **)(v5 + 56);
          if (!os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
          {
LABEL_313:
            v162[0] = (void *)256;
            sub_1001DD354(*(Registry **)(v5 + 120), __p);
            (**(void (***)(unsigned char *__return_ptr))__p[0])(buf);
            (*(void (**)(void, void, void **))(**(void **)buf + 432))(*(void *)buf, 0, v162);
            if (*(void *)&buf[8]) {
              sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
            }
            if (__p[1]) {
              sub_10004D2C8((std::__shared_weak_count *)__p[1]);
            }
            *(unsigned char *)(v5 + 836) = 1;
            goto LABEL_221;
          }
LABEL_312:
          v137 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v137;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEFAULT, "#I %s%s================================ Call Get Provisiong Data Update ================================", buf, 0x16u);
          goto LABEL_313;
        }
        v136 = *(NSObject **)(v5 + 56);
        if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
        {
LABEL_320:
          v138 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v138;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEFAULT, "#I %s%sRequest throttled, scheduling service refresh", buf, 0x16u);
          v134 = *(void *)(v5 + 160);
        }
LABEL_321:
        *(unsigned char *)(v134 + 424) = 1;
        sub_100A2B860(v134 + 360);
        goto LABEL_218;
      }
    }
    else
    {
      if (v147) {
        v80 = sub_100080778;
      }
      else {
        v80 = 0;
      }
      if (v80) {
        uint64_t v81 = v79;
      }
      else {
        uint64_t v81 = 1;
      }
      if (v81) {
        goto LABEL_154;
      }
    }
    sub_10107D2A0(v5);
    goto LABEL_154;
  }
LABEL_108:
  v67 = *(NSObject **)(v5 + 56);
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
  {
    v68 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v68;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "#I %s%sNo SIM or SIM is not authorized to touch account configuration - wait getPSAS replied, if issued", buf, 0x16u);
  }
  if (v145 != 2)
  {
    v70 = 0;
    if (v145) {
      uint64_t v71 = v53;
    }
    else {
      uint64_t v71 = 0;
    }
    if (v71 != 1 || v144 == -1) {
      goto LABEL_125;
    }
    goto LABEL_121;
  }
  if (v144 == -1) {
    v69 = 0;
  }
  else {
    v69 = v53;
  }
  if (v69 == 1)
  {
LABEL_121:
    if (cf) {
      unsigned int v72 = sub_100080778;
    }
    else {
      unsigned int v72 = 0;
    }
    v70 = v72 != 0;
    goto LABEL_125;
  }
  v70 = 0;
LABEL_125:
  sub_10107E63C(v5, v70);
LABEL_244:
  v107 = *(NSObject **)(v5 + 56);
  if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
  {
    v108 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
    v109 = (const char *)&unk_10161656E;
    v110 = *(_DWORD *)(v5 + 260);
    if (v110 == 1) {
      v109 = "Active";
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v108;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    if (!v110) {
      v109 = "Disabled";
    }
    v166 = 2080;
    v167 = (void *)v109;
    _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "#I %s%s- fServiceStatus:%s", buf, 0x20u);
  }
  v111 = *(void *)(v5 + 160);
  if (!*(unsigned char *)(v111 + 353) && !*(unsigned char *)(v5 + 836) && !*(unsigned char *)(v5 + 837))
  {
    *(_WORD *)(v5 + 840) = 0;
    sub_100A2FBE8((uint64_t *)v111, 1);
    v111 = *(void *)(v5 + 160);
  }
  sub_100A2FD3C(v111, 1, v54);
  sub_100057D78(&v149);
  return sub_100057D78(&cf);
}

void sub_10107CF28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void **a10, const void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,void *a30,std::__shared_weak_count *a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  int v53 = *(std::__shared_weak_count **)(v51 - 200);
  if (v53) {
    sub_10004D2C8(v53);
  }
  if (a31) {
    sub_10004D2C8(a31);
  }
  sub_100057D78(a10);
  sub_100057D78(a11);
  _Unwind_Resume(a1);
}

const void **sub_10107D100(const void **a1)
{
  return sub_10107B800(a1, 0, 0);
}

const void **sub_10107D10C(uint64_t a1)
{
  return sub_10107B800((const void **)(a1 - 8), 0, 0);
}

uint64_t sub_10107D11C(uint64_t result, int a2)
{
  if (a2)
  {
    if ((*(char *)(result + 207) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(result + 207)) {
        return result;
      }
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(result + 168) + 152) + 24))(*(void *)(*(void *)(result + 168) + 152), result + 184);
    }
    if (*(void *)(result + 192)) {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(result + 168) + 152) + 24))(*(void *)(*(void *)(result + 168) + 152), result + 184);
    }
  }
  return result;
}

uint64_t sub_10107D16C(uint64_t result, int a2)
{
  if (a2)
  {
    if ((*(char *)(result + 199) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(result + 199)) {
        return result;
      }
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(result + 160) + 152) + 24))(*(void *)(*(void *)(result + 160) + 152), result + 176);
    }
    if (*(void *)(result + 184)) {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(result + 160) + 152) + 24))(*(void *)(*(void *)(result + 160) + 152), result + 176);
    }
  }
  return result;
}

void sub_10107D1C4(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    uint64_t v4 = (void *)(a1 + 184);
    if (*(char *)(a1 + 207) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v5 = 136315650;
    uint64_t v6 = v3;
    __int16 v7 = 2080;
    CFDictionaryRef v8 = " ";
    __int16 v9 = 2080;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s%sReference to account %s removed", (uint8_t *)&v5, 0x20u);
  }
  sub_10107D2A0(a1);
}

void sub_10107D2A0(uint64_t a1)
{
  if (*(char *)(a1 + 207) < 0)
  {
    if (!*(void *)(a1 + 192)) {
      goto LABEL_8;
    }
  }
  else if (!*(unsigned char *)(a1 + 207))
  {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 260))
  {
    *(unsigned char *)(a1 + 842) = 1;
    if (sub_10107657C(a1)) {
      sub_1010816E0(a1, 0, 0, 0);
    }
  }
LABEL_8:
  char v2 = *(std::__shared_weak_count **)(a1 + 808);
  *(_OWORD *)(a1 + 800) = 0u;
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
  uint64_t v4 = ServiceMap;
  if (v5 < 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      uint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v5;
  __int16 v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)__p);
  if (v9)
  {
    uint64_t v11 = v9[3];
    int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  int v10 = 0;
  char v12 = 1;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t, const __CFString *, void, void, uint64_t))(*(void *)v11 + 32))(v11, **(void **)(a1 + 144) + 24, @"individual.keys", kPhoneServicesWalletDomain, 0, 4);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  uint64_t v13 = *(void *)(a1 + 168);
  __int16 v14 = *(std::__shared_weak_count **)(a1 + 176);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 72))(v13, __p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
  uint64_t v15 = *(void *)(a1 + 168);
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 176);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100C6C950(v15, (uint64_t *)(a1 + 184));
  if (v16) {
    sub_10004D2C8(v16);
  }
}

void sub_10107D4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    sub_10004D2C8(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10107D4E8()
{
  if (v0) {
    JUMPOUT(0x10107D4E0);
  }
  JUMPOUT(0x10107D4D8);
}

void sub_10107D4F8(uint64_t a1)
{
}

const void **sub_10107D500(uint64_t a1)
{
  *(unsigned char *)(a1 + 845) = 1;
  return sub_10107B800((const void **)a1, 0, 0);
}

const void **sub_10107D514(uint64_t a1)
{
  *(unsigned char *)(a1 + 837) = 1;
  return sub_10107B800((const void **)(a1 - 8), 0, 0);
}

const void **sub_10107D530(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    int v6 = 136315394;
    uint64_t v7 = v3;
    __int16 v8 = 2080;
    __int16 v9 = " ";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s%spersonal wallet changed", (uint8_t *)&v6, 0x16u);
  }
  int v4 = sub_10107A5C8(a1);
  sub_10107A4A8(a1, v4);
  sub_10107A918(a1);
  return sub_10107B800((const void **)a1, 0, 0);
}

const void **sub_10107D618(uint64_t a1)
{
  return sub_10107D530(a1 - 8);
}

const void **sub_10107D620(const void **result, int a2)
{
  if (!a2) {
    return result;
  }
  char v2 = result;
  uint64_t v3 = result[7];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v2[18]);
    *(_DWORD *)uint64_t v15 = 136315394;
    *(void *)&v15[4] = v4;
    __int16 v16 = 2080;
    char v17 = " ";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s%scredentials are going to be invalidated", v15, 0x16u);
  }
  *((unsigned char *)v2 + 843) = 1;
  ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)1, (Registry *)v2[15]);
  int v6 = ServiceMap;
  if (v7 < 0)
  {
    __int16 v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  *(void *)uint64_t v15 = v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)v15);
  if (!v11)
  {
    uint64_t v13 = 0;
    goto LABEL_11;
  }
  uint64_t v13 = v11[3];
  char v12 = (std::__shared_weak_count *)v11[4];
  if (!v12)
  {
LABEL_11:
    std::mutex::unlock(v6);
    char v12 = 0;
    char v14 = 1;
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v6);
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v12);
  char v14 = 0;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, void, void, uint64_t, void))(*(void *)v13 + 16))(v13, *(void *)v2[18] + 24, @"NeedAccountInvalidation", kCFBooleanTrue, kPhoneServicesWalletDomain, 0, 1, 0);
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  return sub_10107B800(v2, 0, 0);
}

void sub_10107D80C(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_10107D83C(uint64_t a1, int a2)
{
  return sub_10107D620((const void **)(a1 - 8), a2);
}

uint64_t sub_10107D848(uint64_t a1)
{
  uint64_t result = sub_10107D8A8(a1);
  if (result)
  {
    if (sub_1010768A4(a1))
    {
      return 1;
    }
    else
    {
      int v3 = *(_DWORD *)(a1 + 264) - 1;
      if (v3 > 5) {
        return 2;
      }
      else {
        return dword_1015B70D8[v3];
      }
    }
  }
  return result;
}

uint64_t sub_10107D8A8(uint64_t a1)
{
  uint64_t result = (uint64_t)sub_10107D908(a1);
  if (result)
  {
    if (sub_1010768A4(a1))
    {
      return 1;
    }
    else
    {
      int v3 = *(_DWORD *)(a1 + 264) - 1;
      if (v3 > 5) {
        return 2;
      }
      else {
        return dword_1015B70F0[v3];
      }
    }
  }
  return result;
}

BOOL *sub_10107D908(uint64_t a1)
{
  void (***v10)(uint64_t *__return_ptr, void, uint64_t);
  char v11;
  char v12;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t v16;

  char v14 = 0;
  uint64_t v15 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
  int v3 = ServiceMap;
  if ((v4 & 0x8000000000000000) != 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  __int16 v16 = v4;
  __int16 v8 = sub_10004D37C(&v3[1].__m_.__sig, &v16);
  if (v8)
  {
    unsigned int v10 = (void (***)(uint64_t *__return_ptr, void, uint64_t))v8[3];
    uint64_t v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      uint64_t v11 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    unsigned int v10 = 0;
  }
  std::mutex::unlock(v3);
  uint64_t v9 = 0;
  uint64_t v11 = 1;
LABEL_9:
  (**v10)(&v14, v10, **(void **)(a1 + 144) + 24);
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
  if (v14)
  {
    char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 488))(v14, 8);
    if (v15) {
      sub_10004D2C8(v15);
    }
    if (v12) {
      return (BOOL *)1;
    }
  }
  else if (v15)
  {
    sub_10004D2C8(v15);
  }
  return sub_1010768A4(a1);
}

void sub_10107DA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_10107DAB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 256);
  if (!v4)
  {
    BOOL v5 = sub_10107644C(a1);
    goto LABEL_5;
  }
  if (v4 == 2)
  {
    BOOL v5 = 1;
LABEL_5:
    uint64_t v6 = (_DWORD *)(a1 + 260);
    int v7 = *(_DWORD *)(a1 + 260);
    if (v5 && v7 != 1)
    {
      BOOL v8 = sub_100A2EAC0(*(void *)(a1 + 160), *(_DWORD *)(a1 + 264));
      char v9 = 0;
      BOOL v5 = 1;
      goto LABEL_13;
    }
    if (v7 != 1)
    {
      BOOL v8 = 0;
      char v9 = 0;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  BOOL v5 = 0;
  BOOL v8 = 0;
  char v9 = 0;
  uint64_t v6 = (_DWORD *)(a1 + 260);
  if (*(_DWORD *)(a1 + 260) == 1)
  {
LABEL_12:
    BOOL v8 = 0;
    char v9 = sub_10107DCE0(a1) ^ 1;
  }
LABEL_13:
  unsigned int v10 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    uint64_t v12 = *(int *)(a1 + 256);
    uint64_t v13 = (char *)&unk_10161656E;
    if (v12 <= 2) {
      uint64_t v13 = off_101A85F58[v12];
    }
    if (v5) {
      char v14 = "on";
    }
    else {
      char v14 = "off";
    }
    uint64_t v15 = asStringBool(v8);
    __int16 v16 = "Active";
    if (*v6 != 1) {
      __int16 v16 = (const char *)&unk_10161656E;
    }
    if (*v6) {
      char v17 = v16;
    }
    else {
      char v17 = "Disabled";
    }
    *(_DWORD *)uint64_t v19 = 136316674;
    *(void *)&v19[4] = v11;
    __int16 v20 = 2080;
    uint64_t v21 = " ";
    __int16 v22 = 2080;
    int v23 = v13;
    __int16 v24 = 2080;
    BOOL v25 = v14;
    __int16 v26 = 2080;
    uint64_t v27 = v15;
    __int16 v28 = 2080;
    uint64_t v29 = v17;
    __int16 v30 = 2080;
    uint64_t v31 = asStringBool(v9);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%sThumper user switch state is %s ('%s'), activating: %s; service status: %s; isEnabled return '%s'",
      v19,
      0x48u);
  }
  *(unsigned char *)a2 = v9;
  *(void *)(a2 + 8) = 0;
  *(void *)uint64_t v19 = 0;
  return sub_100057D78((const void **)v19);
}

uint64_t sub_10107DCE0(uint64_t a1)
{
  uint64_t result = (uint64_t)sub_1010767E0(*(void *)(a1 + 160));
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 168);
    if ((sub_1007F89C4(v3) & 1) != 0 || *(unsigned char *)(v3 + 193))
    {
      int v4 = *(_DWORD *)(a1 + 256);
      if (v4) {
        return v4 != 2;
      }
      else {
        return !sub_10107644C(a1);
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

const void **sub_10107DD50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10107DAB4(a1 - 8, a2);
}

const void **sub_10107DD58@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 168);
  if ((sub_1007F89C4(v6) & 1) == 0 && !*(unsigned char *)(v6 + 193))
  {
    CFMutableDictionaryRef v13 = 0;
    char v14 = 0;
    BOOL v11 = 0;
    BOOL v15 = 0;
    CFMutableDictionaryRef theDict = 0;
    goto LABEL_82;
  }
  CFMutableDictionaryRef theDict = 0;
  if (!sub_10107D908(a1))
  {
    CFMutableDictionaryRef v13 = 0;
    char v14 = 0;
    BOOL v11 = 0;
    BOOL v15 = 0;
    goto LABEL_82;
  }
  int v7 = sub_10107D848(a1);
  int v8 = sub_10107D8A8(a1);
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableDictionaryRef v10 = theDict;
    CFMutableDictionaryRef theDict = Mutable;
    __p[0] = v10;
    sub_10005717C((const void **)__p);
  }
  BOOL v11 = v8 == 1;
  if (v8 == 1)
  {
    if (v7)
    {
      sub_100A30BFC(*(void *)(a1 + 160), v41);
      __p[0] = theDict;
      CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)v41[0];
      v41[0] = 0;
      sub_10005717C((const void **)__p);
      uint64_t v12 = v41;
LABEL_51:
      sub_10005717C((const void **)v12);
      goto LABEL_52;
    }
    if (*(unsigned char *)(a1 + 792))
    {
      unint64_t v38 = 0;
      CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (v16)
      {
        char v17 = v38;
        unint64_t v38 = v16;
        __p[0] = v17;
        sub_10005717C((const void **)__p);
      }
      uint64_t v18 = v38;
      if (*(char *)(a1 + 759) < 0)
      {
        sub_10004FC84(__dst, *(void **)(a1 + 736), *(void *)(a1 + 744));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)(a1 + 736);
        uint64_t v36 = *(void *)(a1 + 752);
      }
      if (SHIBYTE(v36) < 0)
      {
        sub_10004FC84(v41, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)BOOL v41 = *(_OWORD *)__dst;
        uint64_t v42 = v36;
      }
      uint64_t v40 = 0;
      if (SHIBYTE(v42) < 0)
      {
        sub_10004FC84(__p, v41[0], (unint64_t)v41[1]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v41;
        uint64_t v44 = v42;
      }
      __int16 v45 = 0;
      if (ctu::cf::convert_copy())
      {
        uint64_t v19 = v40;
        uint64_t v40 = v45;
        uint64_t v46 = v19;
        sub_1000558F4((const void **)&v46);
      }
      __int16 v20 = (const void *)kCTWebSheetURL;
      if (SHIBYTE(v44) < 0) {
        operator delete(__p[0]);
      }
      value = v40;
      uint64_t v40 = 0;
      sub_1000558F4((const void **)&v40);
      if (SHIBYTE(v42) < 0) {
        operator delete(v41[0]);
      }
      CFDictionarySetValue(v18, v20, value);
      sub_1000558F4((const void **)&value);
      if (SHIBYTE(v36) < 0) {
        operator delete(__dst[0]);
      }
      if (*(unsigned char *)(a1 + 784))
      {
        value = 0;
        if (*(char *)(a1 + 783) < 0)
        {
          sub_10004FC84(v32, *(void **)(a1 + 760), *(void *)(a1 + 768));
        }
        else
        {
          *(_OWORD *)unsigned int v32 = *(_OWORD *)(a1 + 760);
          uint64_t v33 = *(void *)(a1 + 776);
        }
        if (SHIBYTE(v33) < 0)
        {
          sub_10004FC84(v41, v32[0], (unint64_t)v32[1]);
        }
        else
        {
          *(_OWORD *)BOOL v41 = *(_OWORD *)v32;
          uint64_t v42 = v33;
        }
        uint64_t v40 = 0;
        if (SHIBYTE(v42) < 0)
        {
          sub_10004FC84(__p, v41[0], (unint64_t)v41[1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)v41;
          uint64_t v44 = v42;
        }
        __int16 v45 = 0;
        if (ctu::cf::convert_copy())
        {
          uint64_t v21 = v40;
          uint64_t v40 = v45;
          uint64_t v46 = v21;
          sub_1000558F4((const void **)&v46);
        }
        if (SHIBYTE(v44) < 0) {
          operator delete(__p[0]);
        }
        CFStringRef theString = v40;
        uint64_t v40 = 0;
        sub_1000558F4((const void **)&v40);
        if (SHIBYTE(v42) < 0) {
          operator delete(v41[0]);
        }
        value = CFStringCreateExternalRepresentation(0, theString, 0x600u, 0);
        sub_1000558F4((const void **)&theString);
        if (SHIBYTE(v33) < 0) {
          operator delete(v32[0]);
        }
        CFDictionarySetValue(v38, kCTWebSheetPostData, value);
        sub_100030068((const void **)&value);
      }
      CFDictionarySetValue(theDict, kCTProvisioningURL, v38);
      uint64_t v12 = (void **)&v38;
      goto LABEL_51;
    }
  }
LABEL_52:
  int v22 = *(_DWORD *)(a1 + 256);
  if (v22) {
    BOOL v23 = v22 == 2;
  }
  else {
    BOOL v23 = sub_10107644C(a1);
  }
  if (a2)
  {
    uint64_t v24 = *(void *)(a1 + 160);
    if (*(unsigned char *)(v24 + 344) && *(unsigned char *)(v24 + 216))
    {
      if (*(char *)(v24 + 215) < 0) {
        uint64_t v25 = *(void *)(v24 + 200);
      }
      else {
        uint64_t v25 = *(unsigned __int8 *)(v24 + 215);
      }
      BOOL v26 = v25 == 0;
    }
    else
    {
      BOOL v26 = 1;
    }
  }
  else
  {
    BOOL v26 = 0;
  }
  BOOL v27 = 0;
  uint64_t v28 = *(void *)(a1 + 160);
  if (*(_DWORD *)(a1 + 260) != 1 && (v23 || v26)) {
    BOOL v27 = sub_100A2EAC0(*(void *)(a1 + 160), *(_DWORD *)(a1 + 264))
  }
       || *(unsigned char *)(v28 + 353)
       || *(unsigned char *)(a1 + 836)
       || *(unsigned char *)(a1 + 837) != 0;
  int v29 = sub_100A2EB20(v28);
  BOOL v15 = v7 == 1;
  if (v7 == 1)
  {
    if (v27)
    {
      __int16 v30 = (const void **)&kCTProvisioningStatusInProcess;
    }
    else if (v29 == 1)
    {
      __int16 v30 = (const void **)&kCTProvisioningStatusSubscribed;
    }
    else
    {
      __int16 v30 = (const void **)&kCTProvisioningStatusNotSubscribed;
    }
  }
  else if (v8 == 1)
  {
    __int16 v30 = (const void **)&kCTProvisioningStatusInProcess;
    if (!v27) {
      __int16 v30 = (const void **)&kCTProvisioningStatusNotSubscribed;
    }
  }
  else
  {
    __int16 v30 = (const void **)&kCTProvisioningStatusNotAllowed;
  }
  CFDictionarySetValue(theDict, kCTProvisioningStatus, *v30);
  char v14 = 1;
  CFMutableDictionaryRef v13 = theDict;
LABEL_82:
  LOBYTE(__p[0]) = v14;
  BYTE1(__p[0]) = v11;
  BYTE2(__p[0]) = v15;
  __p[1] = v13;
  if (v13) {
    CFRetain(v13);
  }
  *(unsigned char *)a3 = v14;
  *(unsigned char *)(a3 + 1) = v11;
  *(unsigned char *)(a3 + 2) = v15;
  sub_10004EFE4((void *)(a3 + 8), (CFTypeRef *)&__p[1]);
  sub_10005717C((const void **)&__p[1]);
  return sub_10005717C((const void **)&theDict);
}

void sub_10107E2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,int a24,const void *a25,const void *a26,const void *a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  sub_10005717C(&a25);
  sub_10005717C(&a26);
  _Unwind_Resume(a1);
}

const void **sub_10107E414@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return sub_10107DD58(a1 - 8, a2, a3);
}

void sub_10107E41C(uint64_t a1, int a2)
{
  int v4 = sub_10107D8A8(a1);
  if (!a2 || v4 == 1)
  {
    if (*(char *)(a1 + 207) < 0) {
      uint64_t v7 = *(void *)(a1 + 192);
    }
    else {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 207);
    }
    int v8 = *(NSObject **)(a1 + 56);
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (v9)
      {
        uint64_t v10 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
        BOOL v11 = "disable";
        int v14 = 136315650;
        uint64_t v15 = v10;
        char v17 = " ";
        __int16 v16 = 2080;
        if (a2) {
          BOOL v11 = "enable";
        }
        __int16 v18 = 2080;
        uint64_t v19 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sUI requests to %s Thumper", (uint8_t *)&v14, 0x20u);
      }
      if (a2) {
        int v12 = 2;
      }
      else {
        int v12 = 1;
      }
      sub_10107A4A8(a1, v12);
      sub_10107B1FC(a1, *(_DWORD *)(a1 + 256));
      sub_10107B800((const void **)a1, 1, 0);
    }
    else if (v9)
    {
      uint64_t v13 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      int v14 = 136315394;
      uint64_t v15 = v13;
      __int16 v16 = 2080;
      char v17 = " ";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sno account id", (uint8_t *)&v14, 0x16u);
    }
  }
  else
  {
    BOOL v5 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      int v14 = 136315394;
      uint64_t v15 = v6;
      __int16 v16 = 2080;
      char v17 = " ";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s%sThumper cannot be turned ON since feature is not allowed", (uint8_t *)&v14, 0x16u);
    }
    sub_100A2FD3C(*(void *)(a1 + 160), 1, 1);
  }
}

void sub_10107E634(uint64_t a1, int a2)
{
}

void sub_10107E63C(uint64_t a1, BOOL a2)
{
  int v2 = *(_DWORD *)(a1 + 260);
  if (v2 != a2)
  {
    *(_DWORD *)(a1 + 260) = a2;
    BOOL v5 = *(NSObject **)(a1 + 56);
    BOOL v6 = a2;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      int v8 = *(_DWORD *)(a1 + 260);
      BOOL v9 = (const char *)&unk_10161656E;
      if (v2 == 1) {
        uint64_t v10 = "Active";
      }
      else {
        uint64_t v10 = (const char *)&unk_10161656E;
      }
      if (!v2) {
        uint64_t v10 = "Disabled";
      }
      if (v8 == 1) {
        BOOL v9 = "Active";
      }
      BOOL v11 = v8 == 0;
      if (v8) {
        int v12 = "on";
      }
      else {
        int v12 = "off";
      }
      if (v11) {
        uint64_t v13 = "Disabled";
      }
      else {
        uint64_t v13 = v9;
      }
      int v14 = (void *)(a1 + 184);
      if (*(char *)(a1 + 207) < 0) {
        int v14 = (void *)*v14;
      }
      *(_DWORD *)__p = 136316418;
      *(void *)&__p[4] = v7;
      *(_WORD *)&__p[12] = 2080;
      *(void *)&__p[14] = " ";
      *(_WORD *)&__p[22] = 2080;
      BOOL v27 = v12;
      __int16 v28 = 2080;
      int v29 = v10;
      __int16 v30 = 2080;
      uint64_t v31 = v13;
      __int16 v32 = 2080;
      uint64_t v33 = v14;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s%sservice:%s, status:%s->%s, account id:'%s'", __p, 0x3Eu);
      BOOL v6 = *(_DWORD *)(a1 + 260) == 1;
    }
    uint64_t v15 = *(void *)(a1 + 160);
    if (*(char *)(a1 + 207) < 0)
    {
      sub_10004FC84(__p, *(void **)(a1 + 184), *(void *)(a1 + 192));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(a1 + 184);
      *(void *)&__p[16] = *(void *)(a1 + 200);
    }
    (*(void (**)(uint64_t, uint64_t, BOOL, unsigned char *))(*(void *)v15 + 448))(v15, 1, v6, __p);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    sub_10107E95C((void *)a1);
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
    char v17 = ServiceMap;
    if (v18 < 0)
    {
      uint64_t v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v20 = 5381;
      do
      {
        uint64_t v18 = v20;
        unsigned int v21 = *v19++;
        uint64_t v20 = (33 * v20) ^ v21;
      }
      while (v21);
    }
    std::mutex::lock(ServiceMap);
    *(void *)__p = v18;
    int v22 = sub_10004D37C(&v17[1].__m_.__sig, (unint64_t *)__p);
    if (v22)
    {
      uint64_t v24 = v22[3];
      BOOL v23 = (std::__shared_weak_count *)v22[4];
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v17);
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v23);
        char v25 = 0;
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    std::mutex::unlock(v17);
    BOOL v23 = 0;
    char v25 = 1;
LABEL_32:
    (*(void (**)(uint64_t, void, BOOL))(*(void *)v24 + 240))(v24, *(unsigned int *)(**(void **)(a1 + 144) + 52), a2);
    if ((v25 & 1) == 0) {
      sub_10004D2C8(v23);
    }
  }
}

void sub_10107E914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10107E95C(void *a1)
{
  if (*(unsigned char *)(*(void *)a1[18] + 48))
  {
    (*(void (**)(unsigned char *__return_ptr))(*a1 + 200))(buf);
    int v2 = buf[0];
    sub_100057D78((const void **)&buf[8]);
    uint64_t v3 = (wis::MetricFactory *)sub_10107D848((uint64_t)a1);
    if (v3 == 1) {
      int v4 = v2;
    }
    else {
      int v4 = 2;
    }
    BOOL v5 = (PersonalityInfo **)a1[18];
    BOOL v6 = *v5;
    switch(*((_DWORD *)*v5 + 13))
    {
      case 0:
      case 3:
        uint64_t v7 = a1[7];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          uint64_t v8 = PersonalityInfo::logPrefix(v6);
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v8;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#E %s%sPhoneServices is broken!", buf, 0x16u);
        }
        break;
      case 1:
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = sub_101092C94;
        uint64_t v18 = &unk_101A85F18;
        int v19 = v4;
        int v20 = 1;
        SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(v3);
        uint64_t v10 = (wis::MetricContainer *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, 0x800F2u);
        if (v10)
        {
          BOOL v11 = sub_10001C8F4(8);
          uint64_t v13 = *v11;
          int v12 = (std::__shared_weak_count *)v11[1];
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v13) {
            operator new();
          }
          goto LABEL_18;
        }
        return;
      case 2:
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 0x40000000;
        *(void *)&buf[16] = sub_101092CDC;
        uint64_t v18 = &unk_101A85F38;
        int v19 = v4;
        int v20 = 2;
        char v14 = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(v3);
        uint64_t v10 = (wis::MetricContainer *)wis::MetricFactory::newMetricContainerWithIdentifier(v14, 0x80119u);
        if (v10)
        {
          uint64_t v15 = sub_10001C8F4(8);
          uint64_t v16 = *v15;
          int v12 = (std::__shared_weak_count *)v15[1];
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v16) {
            operator new();
          }
LABEL_18:
          if (v12) {
            sub_10004D2C8(v12);
          }
          if (v10)
          {
            wis::MetricContainer::~MetricContainer(v10);
            operator delete();
          }
        }
        return;
      default:
        return;
    }
  }
}

void sub_10107ED48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100129880((wis::MetricContainer **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10107EDFC(uint64_t a1)
{
  void (***v23)(unsigned char *__return_ptr, void, uint64_t);
  char v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  unint64_t v29;
  unsigned char buf[22];

  int v2 = sub_10107D848(a1);
  uint64_t result = 0;
  if (v2) {
    return result;
  }
  if (*(_DWORD *)(a1 + 264) != 1) {
    return 0;
  }
  int v4 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%s", buf, 0x16u);
  }
  if (*(char *)(a1 + 207) < 0)
  {
    if (!*(void *)(a1 + 192)) {
      goto LABEL_13;
    }
LABEL_9:
    if (!sub_1007FA824(*(void **)(a1 + 168))) {
      goto LABEL_13;
    }
    if (*(unsigned char *)(a1 + 836))
    {
      BOOL v6 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v7;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s%sgetProvisioning call in progress", buf, 0x16u);
      }
      return 1;
    }
    uint64_t v11 = *(void *)(a1 + 160);
    int v12 = *(_DWORD *)(v11 + 408);
    if (v12 == 1)
    {
      if (!*(void *)(v11 + 416))
      {
        BOOL v26 = *(_DWORD *)(v11 + 412);
        uint64_t v13 = *(NSObject **)(a1 + 56);
        BOOL v27 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        if (v26)
        {
          if (!v27)
          {
LABEL_20:
            __int16 v28 = 256;
            ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)0x100, *(Registry **)(a1 + 120));
            uint64_t v16 = ServiceMap;
            if ((v17 & 0x8000000000000000) != 0)
            {
              uint64_t v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
              uint64_t v19 = 5381;
              do
              {
                unint64_t v17 = v19;
                unsigned int v20 = *v18++;
                uint64_t v19 = (33 * v19) ^ v20;
              }
              while (v20);
            }
            std::mutex::lock(ServiceMap);
            int v29 = v17;
            unsigned int v21 = sub_10004D37C(&v16[1].__m_.__sig, &v29);
            if (v21)
            {
              BOOL v23 = (void (***)(unsigned char *__return_ptr, void, uint64_t))v21[3];
              int v22 = (std::__shared_weak_count *)v21[4];
              if (v22)
              {
                atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
                std::mutex::unlock(v16);
                atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
                sub_10004D2C8(v22);
                uint64_t v24 = 0;
LABEL_34:
                (**v23)(buf, v23, **(void **)(a1 + 144) + 24);
                (*(void (**)(void, void, uint64_t *))(**(void **)buf + 432))(*(void *)buf, 0, &v28);
                if (*(void *)&buf[8]) {
                  sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
                }
                if ((v24 & 1) == 0) {
                  sub_10004D2C8(v22);
                }
                uint64_t result = 1;
                *(unsigned char *)(a1 + 836) = 1;
                return result;
              }
            }
            else
            {
              BOOL v23 = 0;
            }
            std::mutex::unlock(v16);
            int v22 = 0;
            uint64_t v24 = 1;
            goto LABEL_34;
          }
LABEL_19:
          uint64_t v14 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v14;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I %s%s================================ Call Get Provisiong Data Update ================================", buf, 0x16u);
          goto LABEL_20;
        }
        if (v27) {
          goto LABEL_28;
        }
        goto LABEL_29;
      }
    }
    else if (!v12)
    {
      uint64_t v13 = *(NSObject **)(a1 + 56);
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    uint64_t v13 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
LABEL_28:
      char v25 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v25;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I %s%sRequest throttled, scheduling service refresh", buf, 0x16u);
      uint64_t v11 = *(void *)(a1 + 160);
    }
LABEL_29:
    *(unsigned char *)(v11 + 424) = 1;
    sub_100A2B860(v11 + 360);
    return 1;
  }
  if (*(unsigned char *)(a1 + 207)) {
    goto LABEL_9;
  }
LABEL_13:
  uint64_t v8 = *(NSObject **)(a1 + 56);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v9)
  {
    uint64_t v10 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sAccount ID or Device ID still not available - bailout", buf, 0x16u);
    return 0;
  }
  return result;
}

void sub_10107F25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107F2A0(uint64_t a1)
{
  return sub_10107EDFC(a1 - 8);
}

uint64_t sub_10107F2A8(uint64_t a1, const __CFDictionary *a2, int a3)
{
  __s1 = 0;
  size_t __n = 0;
  uint64_t v49 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
  uint64_t v7 = ServiceMap;
  if (v8 < 0)
  {
    BOOL v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      uint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  *(void *)buf = v8;
  int v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)buf);
  if (v12)
  {
    uint64_t v14 = v12[3];
    char v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v13);
      char v15 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  char v13 = 0;
  char v15 = 1;
LABEL_9:
  if (a3) {
    uint64_t v16 = 4;
  }
  else {
    uint64_t v16 = 1;
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void))(*(void *)v14 + 48))(&__s1, v14, v16, *(unsigned int *)(**(void **)(a1 + 144) + 52));
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v13);
  }
  size_t v17 = HIBYTE(v49);
  if (v49 < 0) {
    size_t v17 = __n;
  }
  if (!v17) {
    goto LABEL_62;
  }
  uint64_t v18 = off_1019AFCB0;
  if (!a3) {
    uint64_t v18 = off_1019AFCA8;
  }
  Value = CFDictionaryGetValue(a2, *v18);
  if (!Value || (CFTypeID v20 = CFGetTypeID(Value), v20 != CFStringGetTypeID()))
  {
    char v34 = 1;
    goto LABEL_40;
  }
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  uint64_t v51 = *(void *)&buf[16];
  *(_OWORD *)uint64_t v50 = *(_OWORD *)buf;
  if (v49 >= 0) {
    size_t v21 = HIBYTE(v49);
  }
  else {
    size_t v21 = __n;
  }
  int v22 = (void *)HIBYTE(v51);
  int v23 = SHIBYTE(v51);
  if (v51 < 0) {
    int v22 = v50[1];
  }
  if ((void *)v21 != v22)
  {
    BOOL v33 = 0;
    if ((SHIBYTE(v51) & 0x80000000) == 0) {
      goto LABEL_61;
    }
    goto LABEL_57;
  }
  if (v51 >= 0) {
    uint64_t v24 = v50;
  }
  else {
    uint64_t v24 = (void **)v50[0];
  }
  if (v49 < 0)
  {
    BOOL v33 = memcmp(__s1, v24, __n) == 0;
    goto LABEL_60;
  }
  if (HIBYTE(v49))
  {
    uint64_t v25 = HIBYTE(v49) - 1;
    p_s1 = &__s1;
    do
    {
      int v28 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v27 = v28;
      int v30 = *(unsigned __int8 *)v24;
      uint64_t v24 = (void **)((char *)v24 + 1);
      int v29 = v30;
      BOOL v32 = v25-- != 0;
      BOOL v33 = v27 == v29;
    }
    while (v27 == v29 && v32);
LABEL_60:
    if ((v23 & 0x80000000) == 0) {
      goto LABEL_61;
    }
LABEL_57:
    operator delete(v50[0]);
    if (v33)
    {
LABEL_62:
      uint64_t v36 = 1;
      goto LABEL_63;
    }
    goto LABEL_58;
  }
  BOOL v33 = 1;
  if (SHIBYTE(v51) < 0) {
    goto LABEL_57;
  }
LABEL_61:
  if (v33) {
    goto LABEL_62;
  }
LABEL_58:
  char v34 = 0;
LABEL_40:
  char v35 = *(NSObject **)(a1 + 56);
  uint64_t v36 = 0;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    uint64_t v38 = v37;
    if (v34)
    {
      int v39 = (void *)(a1 + 184);
      if (*(char *)(a1 + 207) < 0) {
        int v39 = (void *)*v39;
      }
      uint64_t v40 = &__s1;
      if (v49 < 0) {
        uint64_t v40 = __s1;
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = v37;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      *(_WORD *)&buf[22] = 2080;
      int v53 = "no previous CB info";
      __int16 v54 = 2080;
      uint64_t v55 = v39;
      __int16 v56 = 2080;
      uint64_t v57 = v40;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I %s%sCarrier bundle [%s] used for account %s differs with current CB [%s]", buf, 0x34u);
    }
    else
    {
      v50[0] = 0;
      v50[1] = 0;
      uint64_t v51 = 0;
      ctu::cf::assign();
      *(_OWORD *)__p = *(_OWORD *)v50;
      uint64_t v46 = v51;
      BOOL v41 = (void **)v50[0];
      if (v51 >= 0) {
        BOOL v41 = __p;
      }
      uint64_t v42 = (void *)(a1 + 184);
      if (*(char *)(a1 + 207) < 0) {
        uint64_t v42 = (void *)*v42;
      }
      CFNumberRef v43 = &__s1;
      if (v49 < 0) {
        CFNumberRef v43 = __s1;
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = v38;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      *(_WORD *)&buf[22] = 2080;
      int v53 = (const char *)v41;
      __int16 v54 = 2080;
      uint64_t v55 = v42;
      __int16 v56 = 2080;
      uint64_t v57 = v43;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I %s%sCarrier bundle [%s] used for account %s differs with current CB [%s]", buf, 0x34u);
      if (SHIBYTE(v46) < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v36 = 0;
  }
LABEL_63:
  if (SHIBYTE(v49) < 0) {
    operator delete(__s1);
  }
  return v36;
}

void sub_10107F6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107F760(uint64_t a1)
{
  return *(unsigned int *)(a1 + 832);
}

uint64_t sub_10107F768(uint64_t result, int a2)
{
  *(_DWORD *)(result + 832) = a2;
  return result;
}

void sub_10107F770(uint64_t a1)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
  uint64_t v3 = ServiceMap;
  if (v4 < 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      uint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  uint64_t valuePtr = v4;
  uint64_t v8 = sub_10004D37C(&v3[1].__m_.__sig, (unint64_t *)&valuePtr);
  if (v8)
  {
    uint64_t v10 = v8[3];
    BOOL v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      char v11 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v3);
  BOOL v9 = 0;
  char v11 = 1;
LABEL_9:
  uint64_t v12 = **(void **)(a1 + 144);
  uint64_t v13 = *(unsigned int *)(a1 + 832);
  CFNumberRef v18 = 0;
  uint64_t valuePtr = v13;
  CFNumberRef v14 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &valuePtr);
  if (v14)
  {
    CFNumberRef v15 = v18;
    CFNumberRef v18 = v14;
    uint64_t valuePtr = (uint64_t)v15;
    sub_1000570E8((const void **)&valuePtr);
  }
  CFNumberRef v16 = v18;
  CFNumberRef v17 = v18;
  CFNumberRef v18 = 0;
  sub_1000570E8((const void **)&v18);
  (*(void (**)(uint64_t, uint64_t, const __CFString *, CFNumberRef, void, void, uint64_t, void))(*(void *)v10 + 48))(v10, v12 + 24, @"last.icloud.ver", v16, kPhoneServicesWalletDomain, 0, 1, 0);
  sub_1000570E8((const void **)&v17);
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
}

void sub_10107F8F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000570E8((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

void sub_10107F924(uint64_t a1, uint64_t a2)
{
  BOOL v33 = 0;
  char v34 = 0;
  uint64_t v35 = 0;
  int v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  int v27 = 0;
  int v28 = 0;
  uint64_t v29 = 0;
  uint64_t v4 = *(void *)(a2 + 168);
  uint64_t v6 = *(void *)(v4 + 208);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 216);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v23 = v5;
  if (v6)
  {
    unsigned int v7 = sub_100046F68(v6 + 144, (void **)(a2 + 184));
    if ((void **)(v6 + 152) != v7)
    {
      uint64_t v8 = v7[7];
      BOOL v9 = (void *)v8[11];
      uint64_t v10 = v8 + 12;
      if (v9 != v8 + 12)
      {
        do
        {
          CFStringRef theString2 = 0;
          if (*((char *)v9 + 55) < 0)
          {
            sub_10004FC84(__dst, (void *)v9[4], v9[5]);
          }
          else
          {
            *(_OWORD *)__dst = *((_OWORD *)v9 + 2);
            uint64_t v25 = v9[6];
          }
          if (SHIBYTE(v25) < 0)
          {
            sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
          }
          else
          {
            *(_OWORD *)__p = *(_OWORD *)__dst;
            uint64_t v38 = v25;
          }
          CFStringRef v36 = 0;
          if (SHIBYTE(v38) < 0)
          {
            sub_10004FC84(&v39, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            long long v39 = *(_OWORD *)__p;
            uint64_t v40 = v38;
          }
          CFStringRef v41 = 0;
          if (ctu::cf::convert_copy())
          {
            CFStringRef v11 = v36;
            CFStringRef v36 = v41;
            CFStringRef v42 = v11;
            sub_1000558F4((const void **)&v42);
          }
          if (SHIBYTE(v40) < 0) {
            operator delete((void *)v39);
          }
          CFStringRef theString2 = v36;
          CFStringRef v36 = 0;
          sub_1000558F4((const void **)&v36);
          if (SHIBYTE(v38) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v25) < 0) {
            operator delete(__dst[0]);
          }
          uint64_t v12 = *(void *)(a2 + 168);
          uint64_t v13 = *(std::__shared_weak_count **)(a2 + 176);
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v14 = sub_100C6BFE0(v12, theString2);
          if (v13) {
            sub_10004D2C8(v13);
          }
          uint64_t v15 = *(void *)(a2 + 168);
          CFNumberRef v16 = *(std::__shared_weak_count **)(a2 + 176);
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v17 = sub_100C6C04C(v15, theString2);
          if (v16) {
            sub_10004D2C8(v16);
          }
          CFNumberRef v18 = &v27;
          if (v17) {
            CFNumberRef v18 = &v30;
          }
          if (v14) {
            uint64_t v19 = &v33;
          }
          else {
            uint64_t v19 = v18;
          }
          sub_1000C06D8(v19, (const void **)&theString2);
          sub_1000558F4((const void **)&theString2);
          CFTypeID v20 = (void *)v9[1];
          if (v20)
          {
            do
            {
              size_t v21 = v20;
              CFTypeID v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              size_t v21 = (void *)v9[2];
              BOOL v22 = *v21 == (void)v9;
              BOOL v9 = v21;
            }
            while (!v22);
          }
          BOOL v9 = v21;
        }
        while (v21 != v10);
      }
    }
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_10108BF94((const void **)a1, v33, v34, v34 - v33);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_10108BF94((const void **)(a1 + 24), v30, v31, v31 - v30);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_10108BF94((const void **)(a1 + 48), v27, v28, v28 - v27);
  if (v23) {
    sub_10004D2C8(v23);
  }
  *(void *)&long long v39 = &v27;
  sub_100084178((void ***)&v39);
  *(void *)&long long v39 = &v30;
  sub_100084178((void ***)&v39);
  *(void *)&long long v39 = &v33;
  sub_100084178((void ***)&v39);
}

void sub_10107FC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, char **a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  *(void *)(v33 - 96) = &a18;
  sub_100084178((void ***)(v33 - 96));
  a18 = &a21;
  sub_100084178((void ***)&a18);
  a21 = &a24;
  sub_100084178((void ***)&a21);
  _Unwind_Resume(a1);
}

void **sub_10107FD24(void **a1)
{
  char v3 = a1 + 6;
  sub_100084178(&v3);
  char v3 = a1 + 3;
  sub_100084178(&v3);
  char v3 = a1;
  sub_100084178(&v3);
  return a1;
}

BOOL sub_10107FD7C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 256);
  if (v2) {
    BOOL v3 = v2 == 2;
  }
  else {
    BOOL v3 = sub_10107644C(a1);
  }
  int v4 = *(_DWORD *)(a1 + 260);
  memset(__src, 0, 32);
  sub_1010800B0((uint64_t)__src, a1);
  CFStringRef v14 = 0;
  if (SHIBYTE(__src[3]) < 0)
  {
    if (!__src[2]) {
      goto LABEL_22;
    }
    sub_10004FC84(v11, __src[1], (unint64_t)__src[2]);
  }
  else
  {
    if (!HIBYTE(__src[3])) {
      goto LABEL_22;
    }
    *(_OWORD *)CFStringRef v11 = *(_OWORD *)&__src[1];
    uint64_t v12 = __src[3];
  }
  if (SHIBYTE(v12) < 0)
  {
    sub_10004FC84(__p, v11[0], (unint64_t)v11[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v11;
    CFNumberRef v18 = v12;
  }
  CFStringRef v16 = 0;
  if (SHIBYTE(v18) < 0)
  {
    sub_10004FC84(__dst, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    __dst[0] = *(_OWORD *)__p;
    *(void *)&__dst[1] = v18;
  }
  CFStringRef v19 = 0;
  if (ctu::cf::convert_copy())
  {
    CFStringRef v5 = v16;
    CFStringRef v16 = v19;
    CFStringRef v20 = v5;
    sub_1000558F4((const void **)&v20);
  }
  if (SBYTE7(__dst[1]) < 0) {
    operator delete(*(void **)&__dst[0]);
  }
  CFStringRef v6 = v16;
  CFStringRef v16 = 0;
  sub_1000558F4((const void **)&v16);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  *(void *)&__dst[0] = v14;
  uint64_t v13 = 0;
  CFStringRef v14 = v6;
  sub_1000558F4((const void **)__dst);
  sub_1000558F4(&v13);
  if (SHIBYTE(v12) < 0)
  {
    operator delete(v11[0]);
    if (!v3) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
LABEL_22:
  if (!v3) {
    goto LABEL_27;
  }
LABEL_23:
  uint64_t v7 = *(void *)(a1 + 168);
  if ((sub_1007F89C4(v7) & 1) != 0 || *(unsigned char *)(v7 + 193)) {
    goto LABEL_32;
  }
LABEL_27:
  if (LOBYTE(__src[0]))
  {
    BOOL v8 = BYTE1(__src[0]) != 0;
    if (BYTE1(__src[0]) || v4 != 1) {
      goto LABEL_39;
    }
    goto LABEL_33;
  }
  if (v4 != 1)
  {
LABEL_32:
    BOOL v8 = 0;
    goto LABEL_39;
  }
LABEL_33:
  CFStringRef v9 = v14;
  uint64_t v23 = 0;
  long long v22 = 0u;
  memset(__dst, 0, sizeof(__dst));
  sub_10107F924((uint64_t)__dst, a1);
  if (*((void *)&__dst[0] + 1) == *(void *)&__dst[0])
  {
    BOOL v8 = 0;
  }
  else
  {
    BOOL v8 = 1;
    if (v9 && *((void *)&__dst[0] + 1) - *(void *)&__dst[0] <= 8uLL) {
      BOOL v8 = CFStringCompare(**(CFStringRef **)&__dst[0], v9, 0) != kCFCompareEqualTo;
    }
  }
  __p[0] = &v22;
  sub_100084178((void ***)__p);
  __p[0] = (char *)&__dst[1] + 8;
  sub_100084178((void ***)__p);
  __p[0] = __dst;
  sub_100084178((void ***)__p);
LABEL_39:
  sub_1000558F4((const void **)&v14);
  if (SHIBYTE(__src[3]) < 0) {
    operator delete(__src[1]);
  }
  return v8;
}

void sub_101080028(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, const void *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_10107FD24((void **)(v32 - 128));
  sub_1000558F4(&a17);
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const void **sub_1010800B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 168);
  CFStringRef v5 = *(std::__shared_weak_count **)(a2 + 176);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v21 = 0;
  (*(void (**)(const void **__return_ptr))(**(void **)(v4 + 144) + 56))(&v21);
  if (v5) {
    sub_10004D2C8(v5);
  }
  BOOL v20 = 0;
  uint64_t v6 = sub_100365D74();
  sub_100058DB0(__p, "vinyl.sim.active");
  BOOL v7 = sub_1002260B0(v6, __p, &v20);
  BOOL v8 = v7;
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (v8) {
      goto LABEL_7;
    }
  }
  else if (v7)
  {
LABEL_7:
    memset(__p, 0, sizeof(__p));
    ctu::cf::assign();
    *(void **)((char *)__dst + 7) = *(void **)((char *)&__p[1] + 7);
    CFStringRef v9 = __p[0];
    __dst[0] = __p[1];
    char v10 = HIBYTE(__p[2]);
    BOOL v11 = v20;
    *(unsigned char *)a1 = 1;
    *(unsigned char *)(a1 + 1) = v11;
    uint64_t v12 = __dst[0];
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v12;
    *(void **)(a1 + 23) = *(void **)((char *)__dst + 7);
    *(unsigned char *)(a1 + 31) = v10;
    return sub_1000558F4(&v21);
  }
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v24 = 0;
  if (!*(unsigned char *)(a2 + 856)) {
    goto LABEL_20;
  }
  uint64_t v13 = (void **)(a2 + 864);
  if (*(char *)(a2 + 887) < 0)
  {
    unint64_t v15 = *(void *)(a2 + 872);
    if (v15)
    {
      sub_10004FC84(__dst, *v13, v15);
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a2 + 887))
  {
LABEL_15:
    memset(__p, 0, sizeof(__p));
    ctu::cf::assign();
    *(_OWORD *)__dst = *(_OWORD *)__p;
    CFStringRef v14 = __p[2];
    goto LABEL_16;
  }
  *(_OWORD *)__dst = *(_OWORD *)v13;
  CFStringRef v14 = *(void **)(a2 + 880);
LABEL_16:
  uint64_t v24 = v14;
LABEL_17:
  if (!*(unsigned char *)(a2 + 856))
  {
LABEL_20:
    *(_WORD *)a1 = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    goto LABEL_21;
  }
  int v16 = *(_DWORD *)(a2 + 888);
  char isSimReadyToUse = cellplan::RemoteSimSubscriptionInfo::isSimReadyToUse((cellplan::RemoteSimSubscriptionInfo *)v13);
  *(unsigned char *)a1 = v16 != 0;
  *(unsigned char *)(a1 + 1) = isSimReadyToUse;
  CFNumberRef v18 = (unsigned char *)(a1 + 8);
  if (SHIBYTE(v24) < 0)
  {
    sub_10004FC84(v18, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)CFNumberRef v18 = *(_OWORD *)__dst;
    *(void *)(a1 + 24) = v24;
  }
LABEL_21:
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst[0]);
  }
  return sub_1000558F4(&v21);
}

void sub_1010802D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

void sub_101080328()
{
  if (v0) {
    sub_10004D2C8(v0);
  }
  JUMPOUT(0x101080320);
}

uint64_t sub_10108033C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 207) < 0)
  {
    if (!*(void *)(a1 + 192)) {
      return 0;
    }
  }
  else if (!*(unsigned char *)(a1 + 207))
  {
    return 0;
  }
  if (*(unsigned char *)(a2 + 456))
  {
    CFTypeRef cf2 = 0;
    CFTypeRef cf1 = 0;
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
    CFStringRef v5 = ServiceMap;
    uint64_t v7 = v6;
    if (v6 < 0)
    {
      BOOL v8 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v9 = 5381;
      do
      {
        uint64_t v7 = v9;
        unsigned int v10 = *v8++;
        uint64_t v9 = (33 * v9) ^ v10;
      }
      while (v10);
    }
    std::mutex::lock(ServiceMap);
    *(void *)buf = v7;
    BOOL v11 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)buf);
    if (v11)
    {
      uint64_t v13 = v11[3];
      uint64_t v12 = (std::__shared_weak_count *)v11[4];
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v5);
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v12);
        char v14 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    std::mutex::unlock(v5);
    uint64_t v12 = 0;
    char v14 = 1;
LABEL_15:
    uint64_t v16 = kPhoneServicesWalletDomain;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const __CFString *, void, void, uint64_t))(*(void *)v13 + 24))(v132, v13, **(void **)(a1 + 144) + 24, @"ps.local.auth", kPhoneServicesWalletDomain, 0, 4);
    sub_100056248(v168, (CFTypeRef *)v132);
    CFTypeRef v17 = cf1;
    CFTypeRef cf1 = *(CFTypeRef *)v168;
    *(void *)buf = v17;
    *(void *)v168 = 0;
    sub_1000558F4((const void **)buf);
    sub_1000558F4((const void **)v168);
    sub_1000577C4((const void **)v132);
    if ((v14 & 1) == 0) {
      sub_10004D2C8(v12);
    }
    if (*(unsigned char *)(a2 + 456))
    {
      sub_100C8D6A4(a2, v168);
      CFNumberRef v18 = *(const void **)v168;
    }
    else
    {
      CFNumberRef v18 = 0;
    }
    *(void *)buf = cf2;
    CFTypeRef cf2 = v18;
    *(void *)v168 = 0;
    sub_1000558F4((const void **)buf);
    sub_1000558F4((const void **)v168);
    if (cf1) {
      CFStringRef v19 = sub_1000810B8;
    }
    else {
      CFStringRef v19 = 0;
    }
    if (v19)
    {
      BOOL v20 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v21;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        *(_WORD *)&buf[22] = 2112;
        *(void *)&uint8_t buf[24] = cf1;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s%sold auth set: %@", buf, 0x20u);
      }
    }
    if (cf2) {
      long long v22 = sub_1000810B8;
    }
    else {
      long long v22 = 0;
    }
    if (v22)
    {
      uint64_t v23 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v24;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        *(_WORD *)&buf[22] = 2112;
        *(void *)&uint8_t buf[24] = cf2;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I %s%snew auth set: %@", buf, 0x20u);
      }
    }
    if (cf1) {
      uint64_t v25 = sub_1000810B8;
    }
    else {
      uint64_t v25 = 0;
    }
    if (v25)
    {
      BOOL v26 = cf2 ? sub_1000810B8 : 0;
      if (!v26 || !CFEqual(cf1, cf2))
      {
        uint64_t v31 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v32 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v32;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I %s%sgetAuthentication response mismatch with stored copy", buf, 0x16u);
        }
LABEL_159:
        if (!*(unsigned char *)(a1 + 844))
        {
LABEL_175:
          uint64_t v15 = 1;
          goto LABEL_176;
        }
        *(unsigned char *)(a1 + 844) = 0;
        BOOL v93 = sub_10107657C(a1);
        uint64_t v94 = *(NSObject **)(a1 + 56);
        BOOL v95 = os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT);
        if (!v93)
        {
          if (v95)
          {
            uint64_t v107 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
            *(_DWORD *)buf = 136315394;
            *(void *)&uint8_t buf[4] = v107;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "#I %s%sDetected suspicious change of tokens - setProvisioning(disable) not supported - skipped", buf, 0x16u);
          }
          goto LABEL_175;
        }
        if (v95)
        {
          uint64_t v96 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v96;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "#I %s%sDetected suspicious change of tokens - invoke reprovisioning for security reasons", buf, 0x16u);
        }
        *(unsigned char *)(a1 + 843) = 1;
        v97 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
        long long v98 = v97;
        uint64_t v99 = v6;
        if (v6 < 0)
        {
          v100 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v101 = 5381;
          do
          {
            uint64_t v99 = v101;
            unsigned int v102 = *v100++;
            uint64_t v101 = (33 * v101) ^ v102;
          }
          while (v102);
        }
        std::mutex::lock(v97);
        *(void *)buf = v99;
        v103 = sub_10004D37C(&v98[1].__m_.__sig, (unint64_t *)buf);
        if (v103)
        {
          uint64_t v105 = v103[3];
          v104 = (std::__shared_weak_count *)v103[4];
          if (v104)
          {
            atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
            std::mutex::unlock(v98);
            atomic_fetch_add_explicit(&v104->__shared_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v104);
            char v106 = 0;
            goto LABEL_173;
          }
        }
        else
        {
          uint64_t v105 = 0;
        }
        std::mutex::unlock(v98);
        v104 = 0;
        char v106 = 1;
LABEL_173:
        (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, uint64_t, void, uint64_t, void))(*(void *)v105 + 16))(v105, **(void **)(a1 + 144) + 24, @"NeedAccountInvalidation", kCFBooleanTrue, v16, 0, 1, 0);
        if ((v106 & 1) == 0) {
          sub_10004D2C8(v104);
        }
        goto LABEL_175;
      }
    }
    v138 = 0;
    CFDictionaryRef theDict = 0;
    sub_1007FFAA4(*(void **)(a1 + 168), 0, (void **)(a1 + 184), 0, &v138);
    if (theDict) {
      int v27 = sub_100080778;
    }
    else {
      int v27 = 0;
    }
    if (!v27)
    {
LABEL_206:
      sub_100057D78((const void **)&theDict);
      uint64_t v15 = 0;
      if (*(unsigned char *)(a1 + 844)) {
        *(unsigned char *)(a1 + 844) = 0;
      }
LABEL_176:
      if (cf1) {
        v108 = sub_1000810B8;
      }
      else {
        v108 = 0;
      }
      if ((v15 & 1) == 0 && v108) {
        goto LABEL_199;
      }
      if (*(unsigned char *)(a1 + 843) && sub_10107657C(a1)) {
        goto LABEL_199;
      }
      if (!(cf2 ? sub_1000810B8 : 0)) {
        goto LABEL_199;
      }
      v110 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v111 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v111;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEFAULT, "#I %s%sput new credentials set in cache", buf, 0x16u);
      }
      v112 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
      v113 = v112;
      if (v6 < 0)
      {
        v114 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v115 = 5381;
        do
        {
          uint64_t v6 = v115;
          unsigned int v116 = *v114++;
          uint64_t v115 = (33 * v115) ^ v116;
        }
        while (v116);
      }
      std::mutex::lock(v112);
      *(void *)buf = v6;
      v117 = sub_10004D37C(&v113[1].__m_.__sig, (unint64_t *)buf);
      if (v117)
      {
        uint64_t v119 = v117[3];
        v118 = (std::__shared_weak_count *)v117[4];
        if (v118)
        {
          atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v113);
          atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v118);
          char v120 = 0;
          goto LABEL_197;
        }
      }
      else
      {
        uint64_t v119 = 0;
      }
      std::mutex::unlock(v113);
      v118 = 0;
      char v120 = 1;
LABEL_197:
      (*(void (**)(uint64_t, uint64_t, const __CFString *, CFTypeRef, uint64_t, void, uint64_t, void))(*(void *)v119 + 16))(v119, **(void **)(a1 + 144) + 24, @"ps.local.auth", cf2, v16, 0, 4, 0);
      if ((v120 & 1) == 0) {
        sub_10004D2C8(v118);
      }
LABEL_199:
      sub_1000558F4(&cf2);
      sub_1000558F4(&cf1);
      return v15;
    }
    if (sub_10107696C(a1))
    {
      Value = CFDictionaryGetValue(theDict, @"masterToken");
      if (Value && (CFTypeID v29 = CFGetTypeID(Value), v29 == CFStringGetTypeID()))
      {
        if (*(unsigned char *)(a2 + 56) && *(void *)(a2 + 40) != *(void *)(a2 + 32))
        {
          memset(buf, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)v168 = *(_OWORD *)buf;
          *(void *)&v168[16] = *(void *)&buf[16];
          BOOL v30 = sub_10001D294(v168, *(unsigned __int8 **)(a2 + 32));
          if ((char)v168[23] < 0) {
            operator delete(*(void **)v168);
          }
          if (v30)
          {
LABEL_132:
            CFDictionaryRef v83 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"imsCommonCredentials");
            if (!v83 && *(unsigned __int8 *)(a2 + 216) | *(unsigned __int8 *)(a2 + 184))
            {
              uint64_t v46 = *(NSObject **)(a1 + 56);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v84 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = v84;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = " ";
                uint64_t v48 = "#I %s%scommon credentials have been changed";
                goto LABEL_136;
              }
              goto LABEL_158;
            }
            uint64_t v167 = 0;
            long long v165 = 0u;
            long long v166 = 0u;
            long long v163 = 0u;
            long long v164 = 0u;
            long long v161 = 0u;
            long long v162 = 0u;
            long long v159 = 0u;
            long long v160 = 0u;
            long long v157 = 0u;
            long long v158 = 0u;
            long long v155 = 0u;
            long long v156 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            long long v151 = 0u;
            long long v152 = 0u;
            long long v149 = 0u;
            long long v150 = 0u;
            long long v147 = 0u;
            long long v148 = 0u;
            long long v145 = 0u;
            long long v146 = 0u;
            long long v143 = 0u;
            long long v144 = 0u;
            memset(buf, 0, sizeof(buf));
            sub_1003A5408((uint64_t)buf, v83);
            if (*(unsigned char *)(a2 + 216))
            {
              if (BYTE8(v152))
              {
                uint64_t v85 = *(unsigned __int8 *)(a2 + 215);
                if ((v85 & 0x80u) == 0) {
                  uint64_t v86 = *(unsigned __int8 *)(a2 + 215);
                }
                else {
                  uint64_t v86 = *(void *)(a2 + 200);
                }
                uint64_t v87 = BYTE7(v152);
                if (SBYTE7(v152) < 0) {
                  uint64_t v87 = *((void *)&v151 + 1);
                }
                if (v86 == v87)
                {
                  CFStringRef v88 = (const void **)(a2 + 192);
                  if ((SBYTE7(v152) & 0x80u) == 0) {
                    v89 = (unsigned __int8 *)&v151;
                  }
                  else {
                    v89 = (unsigned __int8 *)v151;
                  }
                  if ((v85 & 0x80) == 0)
                  {
                    if (*(unsigned char *)(a2 + 215))
                    {
                      while (*(unsigned __int8 *)v88 == *v89)
                      {
                        CFStringRef v88 = (const void **)((char *)v88 + 1);
                        ++v89;
                        if (!--v85) {
                          goto LABEL_202;
                        }
                      }
                      goto LABEL_154;
                    }
LABEL_202:
                    if (*(unsigned char *)(a2 + 184))
                    {
                      if (BYTE8(v150) && sub_10001D294((unsigned __int8 *)(a2 + 160), (unsigned __int8 *)&v149)) {
                        goto LABEL_205;
                      }
                    }
                    else if (!BYTE8(v150))
                    {
LABEL_205:
                      sub_10019D6E8((uint64_t)buf);
                      goto LABEL_206;
                    }
                    long long v90 = *(NSObject **)(a1 + 56);
                    if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT)) {
                      goto LABEL_157;
                    }
                    uint64_t v122 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
                    *(_DWORD *)v168 = 136315394;
                    *(void *)&v168[4] = v122;
                    *(_WORD *)&v168[12] = 2080;
                    *(void *)&v168[14] = " ";
                    uint64_t v92 = "#I %s%sgateway-address has been changed";
                    goto LABEL_156;
                  }
                  if (!memcmp(*v88, v89, *(void *)(a2 + 200))) {
                    goto LABEL_202;
                  }
                }
              }
            }
            else if (!BYTE8(v152))
            {
              goto LABEL_202;
            }
LABEL_154:
            long long v90 = *(NSObject **)(a1 + 56);
            if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
            {
LABEL_157:
              sub_10019D6E8((uint64_t)buf);
              goto LABEL_158;
            }
            uint64_t v91 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
            *(_DWORD *)v168 = 136315394;
            *(void *)&v168[4] = v91;
            *(_WORD *)&v168[12] = 2080;
            *(void *)&v168[14] = " ";
            uint64_t v92 = "#I %s%sentitlement-server-address has been changed";
LABEL_156:
            _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, v92, v168, 0x16u);
            goto LABEL_157;
          }
        }
      }
      else if (!*(unsigned char *)(a2 + 56) || *(void *)(a2 + 40) == *(void *)(a2 + 32))
      {
        goto LABEL_132;
      }
      uint64_t v46 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v47 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v47;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        uint64_t v48 = "#I %s%smaster token is not equal";
LABEL_136:
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, v48, buf, 0x16u);
      }
LABEL_158:
      sub_100057D78((const void **)&theDict);
      goto LABEL_159;
    }
    if (!*(unsigned char *)(a2 + 56)) {
      goto LABEL_132;
    }
    CFArrayRef v33 = (const __CFArray *)CFDictionaryGetValue(theDict, @"cfgSlots");
    CFArrayRef v34 = v33;
    if (v33)
    {
      CFTypeID v35 = CFGetTypeID(v33);
      if (v35 != CFArrayGetTypeID()) {
        CFArrayRef v34 = 0;
      }
    }
    CFArrayRef theArray = 0;
    CFStringRef v36 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
    uint64_t v37 = v36;
    uint64_t v38 = v6;
    if (v6 < 0)
    {
      long long v39 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v40 = 5381;
      do
      {
        uint64_t v38 = v40;
        unsigned int v41 = *v39++;
        uint64_t v40 = (33 * v40) ^ v41;
      }
      while (v41);
    }
    std::mutex::lock(v36);
    *(void *)buf = v38;
    CFStringRef v42 = sub_10004D37C(&v37[1].__m_.__sig, (unint64_t *)buf);
    if (v42)
    {
      uint64_t v44 = v42[3];
      CFNumberRef v43 = (std::__shared_weak_count *)v42[4];
      if (v43)
      {
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v37);
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v43);
        char v45 = 0;
        goto LABEL_72;
      }
    }
    else
    {
      uint64_t v44 = 0;
    }
    std::mutex::unlock(v37);
    CFNumberRef v43 = 0;
    char v45 = 1;
LABEL_72:
    (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, const __CFString *, uint64_t, void, uint64_t))(*(void *)v44 + 24))(v168, v44, **(void **)(a1 + 144) + 24, @"individual.keys", v16, 0, 4);
    sub_100044D6C(&theArray, (CFTypeRef *)v168);
    sub_1000577C4((const void **)v168);
    if ((v45 & 1) == 0) {
      sub_10004D2C8(v43);
    }
    if (v34
      && (theArray ? (uint64_t v49 = sub_100083F10) : (uint64_t v49 = 0),
          v49
       && (uint64_t v51 = *(void *)(a2 + 32),
           uint64_t v50 = *(void *)(a2 + 40),
           0xAAAAAAAAAAAAAAABLL * ((v50 - v51) >> 3) >= CFArrayGetCount(v34))
       && (CFIndex v52 = CFArrayGetCount(theArray), v52 >= CFArrayGetCount(v34))))
    {
      CFIndex Count = CFArrayGetCount(v34);
      if (!Count)
      {
LABEL_131:
        sub_100044D00((const void **)&theArray);
        goto LABEL_132;
      }
      CFIndex v63 = 0;
      while (1)
      {
        CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v34, v63);
        if (!ValueAtIndex) {
          break;
        }
        CFDictionaryRef v136 = 0;
        BOOL v65 = CFArrayGetValueAtIndex(theArray, v63);
        memset(buf, 0, 24);
        if (v65)
        {
          CFTypeID v66 = CFGetTypeID(v65);
          if (v66 == CFDataGetTypeID()) {
            ctu::cf::assign();
          }
        }
        *(_OWORD *)__p = *(_OWORD *)buf;
        uint64_t v135 = *(void *)&buf[16];
        sub_100639DDC(ValueAtIndex, (uint64_t)__p, (CFPropertyListRef *)v168);
        sub_10004EFE4(&v136, (CFTypeRef *)v168);
        sub_1000577C4((const void **)v168);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v136) {
          v67 = sub_100080778;
        }
        else {
          v67 = 0;
        }
        if (!v67)
        {
          v125 = *(NSObject **)(a1 + 56);
          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v126 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = v126;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            *(_WORD *)&buf[22] = 2048;
            *(void *)&uint8_t buf[24] = v63;
            _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEFAULT, "#I %s%sthumper config for slot %zu is incomplete", buf, 0x20u);
          }
          goto LABEL_223;
        }
        uint64_t v68 = *(void *)(a2 + 32);
        CFDictionaryGetValue(v136, @"token");
        memset(buf, 0, 24);
        ctu::cf::assign();
        v69 = (unsigned __int8 *)(v68 + 24 * v63);
        *(void *)&v168[16] = *(void *)&buf[16];
        *(_OWORD *)v168 = *(_OWORD *)buf;
        uint64_t v70 = v69[23];
        if ((v70 & 0x80u) == 0) {
          uint64_t v71 = v69[23];
        }
        else {
          uint64_t v71 = *((void *)v69 + 1);
        }
        uint64_t v72 = v168[23];
        int v73 = (char)v168[23];
        if ((v168[23] & 0x80u) != 0) {
          uint64_t v72 = *(void *)&v168[8];
        }
        if (v71 == v72)
        {
          if ((v168[23] & 0x80u) == 0) {
            v74 = v168;
          }
          else {
            v74 = *(uint8_t **)v168;
          }
          if ((v70 & 0x80) != 0)
          {
            BOOL v82 = memcmp(*(const void **)v69, v74, *((void *)v69 + 1)) == 0;
          }
          else if (v69[23])
          {
            uint64_t v75 = v70 - 1;
            do
            {
              int v77 = *v69++;
              int v76 = v77;
              int v79 = *v74++;
              int v78 = v79;
              BOOL v81 = v75-- != 0;
              BOOL v82 = v76 == v78;
            }
            while (v76 == v78 && v81);
          }
          else
          {
            BOOL v82 = 1;
          }
        }
        else
        {
          BOOL v82 = 0;
        }
        if (v73 < 0) {
          operator delete(*(void **)v168);
        }
        if (!v82)
        {
          v127 = *(NSObject **)(a1 + 56);
          if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v128 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
            uint64_t v129 = *(void *)(a2 + 32) + 24 * v63;
            if (*(char *)(v129 + 23) < 0) {
              uint64_t v129 = *(void *)v129;
            }
            CFDictionaryGetValue(v136, @"token");
            memset(v168, 0, sizeof(v168));
            ctu::cf::assign();
            *(_OWORD *)v132 = *(_OWORD *)v168;
            uint64_t v133 = *(void *)&v168[16];
            v130 = *(void ***)v168;
            if ((v168[23] & 0x80u) == 0) {
              v130 = v132;
            }
            *(_DWORD *)buf = 136316162;
            *(void *)&uint8_t buf[4] = v128;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            *(_WORD *)&buf[22] = 2048;
            *(void *)&uint8_t buf[24] = v63;
            *(_WORD *)&buf[32] = 2080;
            *(void *)&buf[34] = v129;
            *(_WORD *)&buf[42] = 2080;
            *(void *)&buf[44] = v130;
            _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "#I %s%stoken for slot %zu doesn't match: '%s' vs '%s'", buf, 0x34u);
            if (SHIBYTE(v133) < 0) {
              operator delete(v132[0]);
            }
          }
LABEL_223:
          sub_100057D78((const void **)&v136);
          goto LABEL_93;
        }
        sub_100057D78((const void **)&v136);
        if (++v63 == Count) {
          goto LABEL_131;
        }
      }
      v123 = *(NSObject **)(a1 + 56);
      if (!os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_93;
      }
      uint64_t v124 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v124;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      *(_WORD *)&buf[22] = 2048;
      *(void *)&uint8_t buf[24] = v63;
      uint64_t v60 = "#I %s%sthumper config for slot %zu is of incorrect format";
      unsigned int v61 = v123;
      uint32_t v62 = 32;
    }
    else
    {
      int v53 = *(NSObject **)(a1 + 56);
      if (!os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
LABEL_93:
        sub_100044D00((const void **)&theArray);
        goto LABEL_158;
      }
      uint64_t v54 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      uint64_t v56 = *(void *)(a2 + 32);
      uint64_t v55 = *(void *)(a2 + 40);
      if (v34) {
        CFIndex v57 = CFArrayGetCount(v34);
      }
      else {
        CFIndex v57 = 0;
      }
      if (theArray) {
        uint64_t v58 = sub_100083F10;
      }
      else {
        uint64_t v58 = 0;
      }
      if (v58) {
        CFIndex v59 = CFArrayGetCount(theArray);
      }
      else {
        CFIndex v59 = 0;
      }
      *(_DWORD *)buf = 136316162;
      *(void *)&uint8_t buf[4] = v54;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      *(_WORD *)&buf[22] = 2048;
      *(void *)&uint8_t buf[24] = 0xAAAAAAAAAAAAAAABLL * ((v55 - v56) >> 3);
      *(_WORD *)&buf[32] = 2048;
      *(void *)&buf[34] = v57;
      *(_WORD *)&buf[42] = 2048;
      *(void *)&buf[44] = v59;
      uint64_t v60 = "#I %s%stoo many slots in config, tokens:%zu ? slots:%zu ? slot keys:%zu";
      unsigned int v61 = v53;
      uint32_t v62 = 52;
    }
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, v60, buf, v62);
    goto LABEL_93;
  }
  return 0;
}

void sub_101081514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, const void *a20,uint64_t a21,uint64_t a22,const void *a23,const void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (*(char *)(v31 - 105) < 0) {
    operator delete(*(void **)(v31 - 128));
  }
  sub_100057D78(&a19);
  sub_100044D00(&a20);
  sub_100057D78(v30);
  sub_1000558F4(&a23);
  sub_1000558F4(&a24);
  _Unwind_Resume(a1);
}

void sub_1010816E0(uint64_t a1, char *a2, char *a3, char *a4)
{
  void (***v36)(uint64_t *__return_ptr, void, uint64_t);
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t v40;
  unsigned char buf[24];

  if (!*(unsigned char *)(a1 + 837) || !*(unsigned char *)(a1 + 839))
  {
    uint64_t v8 = *(void *)(a1 + 160);
    int v9 = *(_DWORD *)(v8 + 408);
    if (!v9 || v9 == 1 && !*(void *)(v8 + 416) && *(_DWORD *)(v8 + 412))
    {
      uint64_t v23 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = v24;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I %s%s================================ Call Set Provisiong (to disable) ================================", buf, 0x16u);
      }
      uint64_t v25 = (char *)operator new(0x128uLL);
      BOOL v26 = v25;
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = 0;
      *(void *)uint64_t v25 = off_101A85DE8;
      uint64_t v27 = (uint64_t)(v25 + 24);
      *((_OWORD *)v25 + 2) = 0u;
      *((_OWORD *)v25 + 3) = 0u;
      *((_OWORD *)v25 + 4) = 0u;
      *((_OWORD *)v25 + 5) = 0u;
      *((_OWORD *)v25 + 6) = 0u;
      *((_OWORD *)v25 + 7) = 0u;
      *((_OWORD *)v25 + 8) = 0u;
      *((_OWORD *)v25 + 9) = 0u;
      *((_OWORD *)v25 + 10) = 0u;
      *((_OWORD *)v25 + 11) = 0u;
      *((_OWORD *)v25 + 12) = 0u;
      *((_OWORD *)v25 + 13) = 0u;
      *((_OWORD *)v25 + 14) = 0u;
      *((_OWORD *)v25 + 15) = 0u;
      *((_OWORD *)v25 + 16) = 0u;
      *((_OWORD *)v25 + 17) = 0u;
      *((void *)v25 + 36) = 0;
      *((void *)v25 + 3) = off_101A4D368;
      if (a2 && a3)
      {
        sub_101081C44((std::string *)(v25 + 136), a2);
        sub_101081C44((std::string *)(v26 + 232), a3);
        if (a4) {
          sub_101081C44((std::string *)(v26 + 200), a4);
        }
      }
      else
      {
        *(unsigned char *)(a1 + 839) = 1;
      }
      *(_OWORD *)&buf[8] = 0uLL;
      *(void *)buf = &buf[8];
      uint64_t v38 = v27;
      long long v39 = (std::__shared_weak_count *)v26;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v26 + 1, 1uLL, memory_order_relaxed);
      sub_101081C8C((uint64_t **)buf, 8, &v38);
      if (v39) {
        sub_10004D2C8(v39);
      }
      ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
      CFTypeID v29 = ServiceMap;
      if ((v30 & 0x8000000000000000) != 0)
      {
        uint64_t v31 = (unsigned __int8 *)(v30 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v32 = 5381;
        do
        {
          unint64_t v30 = v32;
          unsigned int v33 = *v31++;
          uint64_t v32 = (33 * v32) ^ v33;
        }
        while (v33);
      }
      std::mutex::lock(ServiceMap);
      uint64_t v40 = v30;
      CFArrayRef v34 = sub_10004D37C(&v29[1].__m_.__sig, &v40);
      if (v34)
      {
        CFStringRef v36 = (void (***)(uint64_t *__return_ptr, void, uint64_t))v34[3];
        CFTypeID v35 = (std::__shared_weak_count *)v34[4];
        if (v35)
        {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v29);
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v35);
          uint64_t v37 = 0;
LABEL_37:
          (**v36)(&v38, v36, **(void **)(a1 + 144) + 24);
          (*(void (**)(uint64_t, void, unsigned char *))(*(void *)v38 + 440))(v38, 0, buf);
          if (v39) {
            sub_10004D2C8(v39);
          }
          if ((v37 & 1) == 0) {
            sub_10004D2C8(v35);
          }
          *(unsigned char *)(a1 + 837) = 1;
          sub_10005D0E4((uint64_t)buf, *(void **)&buf[8]);
          sub_10004D2C8((std::__shared_weak_count *)v26);
LABEL_42:
          sub_101081CFC(a1, 1);
          return;
        }
      }
      else
      {
        CFStringRef v36 = 0;
      }
      std::mutex::unlock(v29);
      CFTypeID v35 = 0;
      uint64_t v37 = 1;
      goto LABEL_37;
    }
    *(unsigned char *)(a1 + 843) = 1;
    unsigned int v10 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
    BOOL v11 = v10;
    if (v12 < 0)
    {
      uint64_t v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v14 = 5381;
      do
      {
        uint64_t v12 = v14;
        unsigned int v15 = *v13++;
        uint64_t v14 = (33 * v14) ^ v15;
      }
      while (v15);
    }
    std::mutex::lock(v10);
    *(void *)buf = v12;
    uint64_t v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)buf);
    if (v16)
    {
      uint64_t v18 = v16[3];
      CFTypeRef v17 = (std::__shared_weak_count *)v16[4];
      if (v17)
      {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v11);
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v17);
        char v19 = 0;
LABEL_14:
        (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, void, void, uint64_t, void))(*(void *)v18 + 16))(v18, **(void **)(a1 + 144) + 24, @"NeedAccountInvalidation", kCFBooleanTrue, kPhoneServicesWalletDomain, 0, 1, 0);
        if ((v19 & 1) == 0) {
          sub_10004D2C8(v17);
        }
        BOOL v20 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = v21;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s%sRequest throttled, scheduling service refresh", buf, 0x16u);
        }
        uint64_t v22 = *(void *)(a1 + 160);
        *(unsigned char *)(v22 + 424) = 1;
        sub_100A2B860(v22 + 360);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    std::mutex::unlock(v11);
    CFTypeRef v17 = 0;
    char v19 = 1;
    goto LABEL_14;
  }
}

void sub_101081BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, char a13, void *a14)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  sub_10005D0E4((uint64_t)&a13, a14);
  sub_10004D2C8(v14);
  _Unwind_Resume(a1);
}

const void **sub_101081C3C(uint64_t a1, BOOL a2, BOOL a3)
{
  return sub_10107B800((const void **)(a1 - 8), a2, a3);
}

std::string *sub_101081C44(std::string *a1, char *a2)
{
  if (a1[1].__r_.__value_.__s.__data_[0])
  {
    sub_10003ED78(a1, a2);
  }
  else
  {
    sub_100058DB0(a1, a2);
    a1[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return a1;
}

void sub_101081C8C(uint64_t **a1, int a2, uint64_t *a3)
{
  int v4 = a2;
  BOOL v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = *a3;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1010928E4(a1, &v4, (uint64_t)&v4);
  if (v6) {
    sub_10004D2C8(v6);
  }
}

void sub_101081CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_101081CFC(uint64_t a1, int a2)
{
  int v4 = sub_10107D848(a1);
  if (sub_10107696C(a1) && v4 == 1)
  {
    if (a2)
    {
      *(unsigned char *)(a1 + 845) = 1;
    }
    else if (!*(unsigned char *)(a1 + 845))
    {
      return;
    }
    sub_1010838F4(a1);
  }
}

void sub_101081D84(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = a2[23];
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (v3)
  {
    memset(&v56, 0, sizeof(v56));
    uint64_t v5 = *(void *)(a1 + 160);
    CFArrayRef theArray = 0;
    (*(void (**)(std::string *__return_ptr))(*(void *)v5 + 472))(&buf);
    sub_100044D6C(&theArray, (CFTypeRef *)&buf.__r_.__value_.__l.__data_);
    sub_1000577C4((const void **)&buf.__r_.__value_.__l.__data_);
    CFArrayRef v6 = theArray;
    if (theArray) {
      uint64_t v7 = sub_100083F10;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v7)
    {
      for (CFIndex i = 0; i < CFArrayGetCount(v6); ++i)
      {
        memset(&__p, 0, sizeof(__p));
        CFArrayGetValueAtIndex(theArray, i);
        memset(&buf, 0, sizeof(buf));
        ctu::cf::assign();
        std::string __p = buf;
        unint64_t v9 = *((void *)a2 + 1);
        char v10 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        std::string::size_type v11 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        int v12 = (char)a2[23];
        if (v12 >= 0) {
          std::string::size_type v13 = a2[23];
        }
        else {
          std::string::size_type v13 = *((void *)a2 + 1);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (v13 < __p.__r_.__value_.__l.__size_) {
            goto LABEL_32;
          }
        }
        else
        {
          if (v13 < HIBYTE(buf.__r_.__value_.__r.__words[2])) {
            goto LABEL_33;
          }
          p_p = &__p;
          std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        if (size)
        {
          char v16 = (std::string *)((char *)p_p + size);
          CFTypeRef v17 = *(unsigned __int8 **)a2;
          if (v12 >= 0) {
            CFTypeRef v17 = a2;
          }
          while (p_p->__r_.__value_.__s.__data_[0] == *v17)
          {
            p_p = (std::string *)((char *)p_p + 1);
            ++v17;
            if (!--size)
            {
              p_p = v16;
              break;
            }
          }
        }
        std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v19 = &__p;
        }
        else {
          char v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v20 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v20 = __p.__r_.__value_.__l.__size_;
        }
        if (p_p == (std::string *)((char *)v19 + v20))
        {
          memset(&buf, 0, sizeof(buf));
          if (v12 < 0)
          {
            sub_10004FC84(&buf, *(void **)a2, v9);
            std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
            char v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else
          {
            std::string buf = *(std::string *)a2;
          }
          if (v10 >= 0) {
            std::string::size_type v23 = v11;
          }
          else {
            std::string::size_type v23 = v18;
          }
          uint64_t v24 = std::string::erase(&buf, 0, v23);
          if (SHIBYTE(v24->__r_.__value_.__r.__words[2]) < 0)
          {
            sub_10004FC84(&v56, v24->__r_.__value_.__l.__data_, v24->__r_.__value_.__l.__size_);
          }
          else
          {
            long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
            v56.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_52;
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_32:
          operator delete(p_p);
        }
LABEL_33:
        CFArrayRef v6 = theArray;
      }
    }
    if ((char)a2[23] < 0) {
      sub_10004FC84(&v56, *(void **)a2, *((void *)a2 + 1));
    }
    else {
      std::string v56 = *(std::string *)a2;
    }
LABEL_52:
    sub_100044D00((const void **)&theArray);
    std::string::size_type v26 = v56.__r_.__value_.__l.__size_;
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    }
    if (!v26)
    {
      unsigned int v33 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v34 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v34;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)" ";
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I %s%sprovided phone number is empty - ignored", (uint8_t *)&buf, 0x16u);
      }
      goto LABEL_114;
    }
    uint64_t v27 = (const void **)(a1 + 208);
    uint64_t v28 = *(unsigned __int8 *)(a1 + 231);
    char v29 = v28;
    if ((v28 & 0x80u) == 0) {
      uint64_t v30 = *(unsigned __int8 *)(a1 + 231);
    }
    else {
      uint64_t v30 = *(void *)(a1 + 216);
    }
    if (v30 == v26)
    {
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v31 = &v56;
      }
      else {
        uint64_t v31 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      if ((char)v28 < 0)
      {
        if (memcmp(*v27, v31, *(void *)(a1 + 216))) {
          goto LABEL_71;
        }
      }
      else if ((_BYTE)v28)
      {
        uint64_t v32 = (unsigned __int8 *)(a1 + 208);
        while (*v32 == v31->__r_.__value_.__s.__data_[0])
        {
          ++v32;
          uint64_t v31 = (std::string *)((char *)v31 + 1);
          if (!--v28) {
            goto LABEL_114;
          }
        }
        goto LABEL_71;
      }
LABEL_114:
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      return;
    }
LABEL_71:
    CFTypeID v35 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v36 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      uint64_t v37 = (const void *)(a1 + 208);
      if (*(char *)(a1 + 231) < 0) {
        uint64_t v37 = *v27;
      }
      uint64_t v38 = &v56;
      if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v38 = (std::string *)v56.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v36;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)" ";
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v60 = (uint64_t)v37;
      __int16 v61 = 2080;
      uint32_t v62 = v38;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I %s%sphone number changed from: '%s' to '%s'", (uint8_t *)&buf, 0x2Au);
      char v29 = *(unsigned char *)(a1 + 231);
    }
    if (v29 < 0)
    {
      if (!*(void *)(a1 + 216)) {
        goto LABEL_84;
      }
    }
    else if (!v29)
    {
      goto LABEL_84;
    }
    long long v39 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v40 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v40;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)" ";
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I %s%sTHUMPER ACCOUNT IS GOING TO BE COMPLETELY RE-PROVISIONED because Phone Number has been changed for Subscriber ID", (uint8_t *)&buf, 0x16u);
    }
    sub_10107D2A0(a1);
LABEL_84:
    std::string::operator=((std::string *)(a1 + 208), &v56);
    memset(&__p, 0, sizeof(__p));
    sub_100639AD0((const void **)(a1 + 208));
    (*(void (**)(void, std::string *))(**(void **)(*(void *)(a1 + 168) + 152) + 24))(*(void *)(*(void *)(a1 + 168) + 152), &__p);
    unsigned int v41 = (uint64_t *)(a1 + 184);
    uint64_t v42 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v44 = *(unsigned __int8 *)(a1 + 207);
    int v45 = (char)v44;
    if ((v44 & 0x80u) != 0) {
      uint64_t v44 = *(void *)(a1 + 192);
    }
    if (v43 == v44)
    {
      if (v45 >= 0) {
        uint64_t v46 = (unsigned __int8 *)(a1 + 184);
      }
      else {
        uint64_t v46 = (unsigned __int8 *)*v41;
      }
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(__p.__r_.__value_.__l.__data_, v46, __p.__r_.__value_.__l.__size_)) {
          goto LABEL_111;
        }
      }
      else
      {
        if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
          goto LABEL_111;
        }
        uint64_t v47 = &__p;
        while (v47->__r_.__value_.__s.__data_[0] == *v46)
        {
          uint64_t v47 = (std::string *)((char *)v47 + 1);
          ++v46;
          if (!--v42) {
            goto LABEL_111;
          }
        }
      }
    }
    uint64_t v48 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v49 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      uint64_t v50 = a1 + 184;
      if (*(char *)(a1 + 207) < 0) {
        uint64_t v50 = *v41;
      }
      uint64_t v51 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v49;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)" ";
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v60 = v50;
      __int16 v61 = 2080;
      uint32_t v62 = v51;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#I %s%saccount id was changed from '%s' to '%s'", (uint8_t *)&buf, 0x2Au);
    }
    std::string::operator=((std::string *)(a1 + 184), &__p);
    int v52 = sub_10107A5C8(a1);
    sub_10107A4A8(a1, v52);
    if (*(unsigned char *)(a1 + 728) && sub_10108033C(a1, a1 + 272))
    {
      int v53 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v54 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v54;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)" ";
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#I %s%sgetAuthentication response changed and affect Thumper configuration. Re-provisioning requested, if applicable", (uint8_t *)&buf, 0x16u);
      }
      BOOL v55 = 1;
      goto LABEL_112;
    }
LABEL_111:
    BOOL v55 = 0;
LABEL_112:
    sub_10107B800((const void **)a1, 0, v55);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_114;
  }
  uint64_t v21 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v22 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v22;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)" ";
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I %s%sphone number is NOT PROVIDED!", (uint8_t *)&buf, 0x16u);
  }
}

void sub_101082510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1010825D0(void *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t v4 = *a4;
  if (*a4 && *(unsigned char *)(v4 + 32) && a3 && *(void *)(v4 + 16) != *(void *)(v4 + 8)) {
    operator new();
  }
  return result;
}

void sub_101082998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void **a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_100057D78(a11);
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  sub_10004D2C8(v28);
  _Unwind_Resume(a1);
}

const void **sub_101082A70(uint64_t a1, void **cf, const void *a3)
{
  int v76 = 0;
  if (cf)
  {
    int v76 = cf;
    CFRetain(cf);
  }
  else
  {
    if (*(char *)(a1 + 207) < 0)
    {
      sub_10004FC84(&__p, *(void **)(a1 + 184), *(void *)(a1 + 192));
    }
    else
    {
      long long __p = *(_OWORD *)(a1 + 184);
      uint64_t v75 = *(void *)(a1 + 200);
    }
    if (SHIBYTE(v75) < 0)
    {
      sub_10004FC84(&__dst, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      long long __dst = __p;
      uint64_t v79 = v75;
    }
    values[0] = 0;
    if (SHIBYTE(v79) < 0)
    {
      sub_10004FC84(buf, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)std::string buf = __dst;
      *(void *)&buf[16] = v79;
    }
    v70[0] = 0;
    if (ctu::cf::convert_copy())
    {
      uint64_t v5 = values[0];
      values[0] = (void **)v70[0];
      *(void *)&long long v72 = v5;
      sub_1000558F4((const void **)&v72);
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    int v76 = values[0];
    values[0] = 0;
    sub_1000558F4((const void **)values);
    if (SHIBYTE(v79) < 0) {
      operator delete((void *)__dst);
    }
    if (SHIBYTE(v75) < 0) {
      operator delete((void *)__p);
    }
  }
  long long v72 = 0uLL;
  uint64_t v73 = 0;
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  long long v72 = *(_OWORD *)buf;
  uint64_t v73 = *(void *)&buf[16];
  v70[0] = 0;
  v70[1] = 0;
  uint64_t v71 = 0;
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  long long __dst = *(_OWORD *)buf;
  uint64_t v79 = *(void *)&buf[16];
  if ((buf[23] & 0x80u) == 0) {
    p_dst = (char *)&__dst;
  }
  else {
    p_dst = (char *)__dst;
  }
  sub_100058DB0(v70, p_dst);
  if (SHIBYTE(v79) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v7 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    unint64_t v9 = v70;
    if (v71 < 0) {
      unint64_t v9 = (void **)v70[0];
    }
    char v10 = &v72;
    if (v73 < 0) {
      char v10 = (long long *)v72;
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    *(_WORD *)&buf[22] = 2080;
    CFDictionaryRef v83 = v9;
    __int16 v84 = 2080;
    uint64_t v85 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s%sremoving dev:%s from account:%s", buf, 0x2Au);
  }
  uint64_t v68 = 0;
  CFDictionaryRef theDict = 0;
  sub_1007FFAA4(*(void **)(a1 + 168), 1, (void **)(a1 + 184), 0, &v68);
  if (theDict) {
    std::string::size_type v11 = sub_100080778;
  }
  else {
    std::string::size_type v11 = 0;
  }
  if (v11)
  {
    CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"assignments");
    if (v12)
    {
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v12);
      unint64_t Count = CFDictionaryGetCount(MutableCopy);
      long long __dst = 0uLL;
      uint64_t v79 = 0;
      sub_10019E8F0(&__dst, Count);
      values[0] = 0;
      values[1] = 0;
      uint64_t v67 = 0;
      sub_10004EE3C(values, Count);
      CFDictionaryGetKeysAndValues(MutableCopy, (const void **)__dst, (const void **)values[0]);
      if (Count)
      {
        uint64_t v14 = 0;
        BOOL v15 = 1;
        while (1)
        {
          char v16 = values[0][v14];
          if (v16)
          {
            CFTypeID v17 = CFGetTypeID(values[0][v14]);
            std::string::size_type v18 = v17 == CFStringGetTypeID() ? v16 : 0;
          }
          else
          {
            std::string::size_type v18 = 0;
          }
          if (CFEqual(a3, v18)) {
            break;
          }
          BOOL v15 = ++v14 < Count;
          if (Count == v14) {
            goto LABEL_45;
          }
        }
        memset(buf, 0, sizeof(buf));
        ctu::cf::assign();
        uint64_t v65 = *(void *)&buf[16];
        *(_OWORD *)uint64_t v64 = *(_OWORD *)buf;
        if ((char)buf[23] < 0)
        {
          int v20 = atoi(v64[0]);
          operator delete(v64[0]);
        }
        else
        {
          int v20 = atoi((const char *)v64);
        }
        CFDictionaryRemoveValue(MutableCopy, *(const void **)(__dst + 8 * v14));
        *(void *)std::string buf = 0;
        *(void *)std::string buf = CFDictionaryCreateMutableCopy(0, 0, theDict);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)buf, @"assignments", MutableCopy);
        sub_100810B58(a1, 1u, *(const __CFDictionary **)buf, 1, 0);
        unint64_t v19 = v20;
        sub_10005717C((const void **)buf);
      }
      else
      {
LABEL_45:
        BOOL v15 = 0;
        unint64_t v19 = 0;
      }
      if (values[0])
      {
        values[1] = values[0];
        operator delete(values[0]);
      }
      if ((void)__dst)
      {
        *((void *)&__dst + 1) = __dst;
        operator delete((void *)__dst);
      }
      sub_10005717C((const void **)&MutableCopy);
      if (v15)
      {
        CFDictionaryRef MutableCopy = 0;
        CFDictionaryRef v63 = 0;
        sub_1007FFAA4(*(void **)(a1 + 168), 2, (void **)(a1 + 184), (uint64_t)a3, (const void **)&MutableCopy);
        if (v63) {
          uint64_t v21 = sub_100080778;
        }
        else {
          uint64_t v21 = 0;
        }
        if (!v21) {
          goto LABEL_125;
        }
        std::string::size_type v22 = CFDictionaryGetValue(v63, @"impi");
        std::string::size_type v23 = CFDictionaryGetValue(v63, @"impu");
        __int16 v61 = 0;
        *(void *)std::string buf = CFDictionaryGetValue(v63, @"imsi");
        sub_100056248(&v61, (CFTypeRef *)buf);
        if (!v23 || !v22 || !sub_10107657C(a1)) {
          goto LABEL_124;
        }
        memset(buf, 0, sizeof(buf));
        ctu::cf::assign();
        long long __dst = *(_OWORD *)buf;
        uint64_t v79 = *(void *)&buf[16];
        if ((buf[23] & 0x80u) == 0) {
          uint64_t v24 = (char *)&__dst;
        }
        else {
          uint64_t v24 = (char *)__dst;
        }
        memset(buf, 0, sizeof(buf));
        ctu::cf::assign();
        *(_OWORD *)values = *(_OWORD *)buf;
        uint64_t v67 = *(void *)&buf[16];
        if ((buf[23] & 0x80u) == 0) {
          long long v25 = (char *)values;
        }
        else {
          long long v25 = (char *)values[0];
        }
        if (v61) {
          std::string::size_type v26 = sub_1000810B8;
        }
        else {
          std::string::size_type v26 = 0;
        }
        if (v26)
        {
          memset(buf, 0, sizeof(buf));
          ctu::cf::assign();
          *(_OWORD *)uint64_t v64 = *(_OWORD *)buf;
          uint64_t v65 = *(void *)&buf[16];
          if ((buf[23] & 0x80u) == 0) {
            uint64_t v27 = (char *)v64;
          }
          else {
            uint64_t v27 = v64[0];
          }
        }
        else
        {
          uint64_t v27 = 0;
        }
        sub_1010816E0(a1, v24, v25, v27);
        if (v26 && SHIBYTE(v65) < 0) {
          operator delete(v64[0]);
        }
        if (SHIBYTE(v67) < 0) {
          operator delete(values[0]);
        }
        if (SHIBYTE(v79) < 0) {
          operator delete((void *)__dst);
        }
        if (sub_10107696C(a1))
        {
LABEL_124:
          sub_1000558F4(&v61);
LABEL_125:
          uint64_t v50 = *(NSObject **)(a1 + 56);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v51 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
            int v52 = v70;
            if (v71 < 0) {
              int v52 = (void **)v70[0];
            }
            int v53 = &v72;
            if (v73 < 0) {
              int v53 = (long long *)v72;
            }
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = v51;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            *(_WORD *)&buf[22] = 2080;
            CFDictionaryRef v83 = v52;
            __int16 v84 = 2080;
            uint64_t v85 = v53;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#I %s%sdev:%s removed from account:%s", buf, 0x2Au);
          }
          sub_100057D78((const void **)&v63);
          goto LABEL_132;
        }
        CFArrayRef theArray = 0;
        ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
        unsigned int v33 = ServiceMap;
        if (v34 < 0)
        {
          CFTypeID v35 = (unsigned __int8 *)(v34 & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v36 = 5381;
          do
          {
            uint64_t v34 = v36;
            unsigned int v37 = *v35++;
            uint64_t v36 = (33 * v36) ^ v37;
          }
          while (v37);
        }
        std::mutex::lock(ServiceMap);
        *(void *)std::string buf = v34;
        uint64_t v38 = sub_10004D37C(&v33[1].__m_.__sig, (unint64_t *)buf);
        if (v38)
        {
          uint64_t v40 = v38[3];
          long long v39 = (std::__shared_weak_count *)v38[4];
          if (v39)
          {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            std::mutex::unlock(v33);
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v39);
            char v41 = 0;
LABEL_98:
            uint64_t v42 = kPhoneServicesWalletDomain;
            (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, const __CFString *, void, void, uint64_t))(*(void *)v40 + 24))(&__dst, v40, **(void **)(a1 + 144) + 24, @"individual.keys", kPhoneServicesWalletDomain, 0, 4);
            sub_100044D6C(&theArray, (CFTypeRef *)&__dst);
            sub_1000577C4((const void **)&__dst);
            if ((v41 & 1) == 0) {
              sub_10004D2C8(v39);
            }
            if (theArray) {
              std::string::size_type v43 = sub_100083F10;
            }
            else {
              std::string::size_type v43 = 0;
            }
            if (v43 && v19 < CFArrayGetCount(theArray))
            {
              values[0] = 0;
              values[1] = 0;
              uint64_t v67 = 0;
              sub_100639F14(0x20uLL, values);
              CFMutableArrayRef v44 = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, theArray);
              CFMutableArrayRef v59 = v44;
              std::string v56 = 0;
              uint64_t v57 = 0;
              BOOL v55 = 0;
              sub_10005C928(&v55, values[0], (uint64_t)values[1], (char *)values[1] - (char *)values[0]);
              uint64_t v79 = 0;
              long long __dst = 0uLL;
              sub_10005C928(&__dst, v55, (uint64_t)v56, v56 - (unsigned char *)v55);
              int v77 = 0;
              memset(buf, 0, sizeof(buf));
              sub_10005C928(buf, (const void *)__dst, *((uint64_t *)&__dst + 1), *((void *)&__dst + 1) - __dst);
              v80 = 0;
              if (ctu::cf::convert_copy())
              {
                int v45 = v77;
                int v77 = v80;
                BOOL v81 = v45;
                sub_100030068(&v81);
              }
              if (*(void *)buf)
              {
                *(void *)&buf[8] = *(void *)buf;
                operator delete(*(void **)buf);
              }
              value = v77;
              int v77 = 0;
              sub_100030068((const void **)&v77);
              if ((void)__dst)
              {
                *((void *)&__dst + 1) = __dst;
                operator delete((void *)__dst);
              }
              CFArraySetValueAtIndex(v44, v19, value);
              sub_100030068((const void **)&value);
              if (v55)
              {
                std::string v56 = v55;
                operator delete(v55);
              }
              sub_100183848(*(Registry **)(a1 + 120), buf);
              (*(void (**)(void, uint64_t, const __CFString *, CFMutableArrayRef, uint64_t, void, uint64_t, void))(**(void **)buf + 16))(*(void *)buf, **(void **)(a1 + 144) + 24, @"individual.keys", v59, v42, 0, 4, 0);
              if (*(void *)&buf[8]) {
                sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
              }
              *(void *)(a1 + 976) = *(void *)(a1 + 968);
              sub_1000440D4((const void **)&v59);
              if (values[0])
              {
                values[1] = values[0];
                operator delete(values[0]);
              }
            }
            else
            {
              uint64_t v46 = *(NSObject **)(a1 + 56);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v47 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
                uint64_t v48 = v70;
                if (v71 < 0) {
                  uint64_t v48 = (void **)v70[0];
                }
                std::string::size_type v49 = &v72;
                if (v73 < 0) {
                  std::string::size_type v49 = (long long *)v72;
                }
                *(_DWORD *)std::string buf = 136315906;
                *(void *)&uint8_t buf[4] = v47;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = " ";
                *(_WORD *)&buf[22] = 2080;
                CFDictionaryRef v83 = v48;
                __int16 v84 = 2080;
                uint64_t v85 = v49;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I %s%sdev:%s removed from account:%s. Individual key not found", buf, 0x2Au);
              }
            }
            sub_100044D00((const void **)&theArray);
            goto LABEL_124;
          }
        }
        else
        {
          uint64_t v40 = 0;
        }
        std::mutex::unlock(v33);
        long long v39 = 0;
        char v41 = 1;
        goto LABEL_98;
      }
    }
  }
  uint64_t v28 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    uint64_t v30 = v70;
    if (v71 < 0) {
      uint64_t v30 = (void **)v70[0];
    }
    uint64_t v31 = &v72;
    if (v73 < 0) {
      uint64_t v31 = (long long *)v72;
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = v29;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    *(_WORD *)&buf[22] = 2080;
    CFDictionaryRef v83 = v30;
    __int16 v84 = 2080;
    uint64_t v85 = v31;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I %s%sdev:%s not found within account:%s", buf, 0x2Au);
  }
LABEL_132:
  sub_100057D78((const void **)&theDict);
  if (SHIBYTE(v71) < 0) {
    operator delete(v70[0]);
  }
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
  return sub_1000558F4((const void **)&v76);
}

void sub_1010835E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void **a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, const void *a17, const void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  CFMutableArrayRef v44 = *(std::__shared_weak_count **)(v42 - 152);
  if (v44) {
    sub_10004D2C8(v44);
  }
  sub_1000440D4(&a16);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100044D00(&a17);
  sub_1000558F4(&a18);
  sub_100057D78(v41);
  sub_100057D78(a11);
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  sub_1000558F4((const void **)(v42 - 224));
  _Unwind_Resume(a1);
}

void sub_1010838F4(uint64_t a1)
{
  void (***v18)(unsigned char *__return_ptr, void, uint64_t);
  char v19;
  unint64_t v20;
  unsigned char buf[22];

  if (*(unsigned char *)(a1 + 838))
  {
    int v2 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s%supdatePSDeviceList - call in progress", buf, 0x16u);
    }
    return;
  }
  uint64_t v4 = *(void *)(a1 + 160);
  int v5 = *(_DWORD *)(v4 + 408);
  if (!v5 || v5 == 1 && !*(void *)(v4 + 416) && *(_DWORD *)(v4 + 412))
  {
    uint64_t v8 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v9;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%s================================ Call Get Phone Service Device List ================================", buf, 0x16u);
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
    std::string::size_type v11 = ServiceMap;
    if ((v12 & 0x8000000000000000) != 0)
    {
      std::string::size_type v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v14 = 5381;
      do
      {
        unint64_t v12 = v14;
        unsigned int v15 = *v13++;
        uint64_t v14 = (33 * v14) ^ v15;
      }
      while (v15);
    }
    std::mutex::lock(ServiceMap);
    int v20 = v12;
    char v16 = sub_10004D37C(&v11[1].__m_.__sig, &v20);
    if (v16)
    {
      std::string::size_type v18 = (void (***)(unsigned char *__return_ptr, void, uint64_t))v16[3];
      CFTypeID v17 = (std::__shared_weak_count *)v16[4];
      if (v17)
      {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v11);
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v17);
        unint64_t v19 = 0;
LABEL_21:
        (**v18)(buf, v18, **(void **)(a1 + 144) + 24);
        (*(void (**)(void))(**(void **)buf + 424))(*(void *)buf);
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
        if ((v19 & 1) == 0) {
          sub_10004D2C8(v17);
        }
        *(unsigned char *)(a1 + 838) = 1;
        return;
      }
    }
    else
    {
      std::string::size_type v18 = 0;
    }
    std::mutex::unlock(v11);
    CFTypeID v17 = 0;
    unint64_t v19 = 1;
    goto LABEL_21;
  }
  *(unsigned char *)(a1 + 845) = 1;
  CFArrayRef v6 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s%sRequest throttled, scheduling service refresh", buf, 0x16u);
    uint64_t v4 = *(void *)(a1 + 160);
  }
  *(unsigned char *)(v4 + 424) = 1;
  sub_100A2B860(v4 + 360);
}

void sub_101083BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_101083C40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  operator new();
}

void sub_101083CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101092A7C((void ***)va);
  _Unwind_Resume(a1);
}

unint64_t sub_101083D04(uint64_t a1)
{
  uint64_t v8 = 0;
  (*(void (**)(const void **__return_ptr))(**(void **)(a1 + 160) + 472))(&v7);
  sub_1000842D0(&v8, &v7);
  sub_1000577C4(&v7);
  if (v8) {
    uint64_t v2 = sub_100081E58;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2)
  {
    LODWORD(v7) = 0;
    ctu::cf::assign((ctu::cf *)&v7, v8, v1);
    if (v7) {
      uint64_t v3 = &_mh_execute_header;
    }
    else {
      uint64_t v3 = 0;
    }
    if (v7) {
      int v4 = v7;
    }
    else {
      int v4 = 0;
    }
    if (v7) {
      unsigned int v5 = v7 & 0xFFFFFF00;
    }
    else {
      unsigned int v5 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
    int v4 = 0;
    unsigned int v5 = 0;
  }
  sub_1000570E8((const void **)&v8);
  return (unint64_t)v3 | v5 | v4;
}

void sub_101083DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000570E8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101083E18(uint64_t a1)
{
  if (sub_10107DCE0(a1)) {
    return 0x100000004;
  }
  else {
    return 0;
  }
}

const void **sub_101083E40(uint64_t a1, uint64_t *a2)
{
  void (***v48)(CSIPhoneNumber *__return_ptr, void, uint64_t);
  char v49;
  uint64_t v50;
  __CFDictionary *v51;
  CFTypeRef v52;
  __CFDictionary *v53;
  __CFDictionary *v54;
  long long *v55;
  long long v56;
  std::mutex *v57;
  std::mutex *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  uint64_t v62;
  unsigned int v63;
  void *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  char v67;
  CFTypeRef v68;
  unsigned int *v69;
  unsigned int v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t);
  CFMutableArrayRef v77;
  void *v78;
  unint64_t v79;
  uint64_t (*v80)(uint64_t);
  __CFArray *v81;
  const void *ValueAtIndex;
  __CFArray *v83;
  CFTypeRef v84;
  std::mutex *v85;
  std::mutex *v86;
  unsigned __int8 *v87;
  uint64_t v88;
  unsigned int v89;
  void *v90;
  std::__shared_weak_count *v91;
  uint64_t v92;
  char v93;
  CFMutableArrayRef v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  NSObject *v102;
  uint64_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  __CFArray *v107;
  CFMutableDictionaryRef v108;
  const void *v109;
  CFTypeID v110;
  NSObject *v111;
  uint64_t v112;
  CFMutableArrayRef v113;
  uint64_t v114;
  NSObject *v115;
  BOOL v116;
  uint64_t v117;
  int v118;
  CFNumberRef v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t);
  CFArrayRef v122;
  CFArrayRef v123;
  std::mutex *v124;
  std::mutex *v125;
  uint64_t v126;
  uint64_t v127;
  unsigned __int8 *v128;
  uint64_t v129;
  unsigned int v130;
  void *v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  char v134;
  const void *v135;
  CFTypeRef v136;
  uint64_t (*v137)(uint64_t);
  NSObject *v138;
  uint64_t v139;
  void **v140;
  uint64_t (*v141)(uint64_t);
  NSObject *v142;
  uint64_t v143;
  std::mutex *v144;
  std::mutex *v145;
  uint64_t v146;
  unsigned __int8 *v147;
  uint64_t v148;
  unsigned int v149;
  void *v150;
  std::__shared_weak_count *v151;
  uint64_t v152;
  char v153;
  CFTypeRef v154;
  uint64_t (*v155)(uint64_t);
  NSObject *v156;
  uint64_t v157;
  void **v158;
  uint64_t (*v159)(uint64_t);
  uint64_t v160;
  std::mutex *v161;
  std::mutex *v162;
  uint64_t v163;
  unsigned __int8 *v164;
  uint64_t v165;
  unsigned int v166;
  void *v167;
  std::__shared_weak_count *v168;
  uint64_t v169;
  char v170;
  NSObject *v171;
  uint64_t v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  CFDictionaryRef v175;
  CFDictionaryRef v176;
  CFTypeID v177;
  int *v178;
  int *v179;
  CFTypeID v180;
  NSObject *v181;
  uint64_t v182;
  CFNumberRef v183;
  const char *v184;
  NSObject *v185;
  uint32_t v186;
  NSObject *v187;
  uint64_t v188;
  __CFDictionary *MutableCopy;
  NSObject *v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  CFNumberRef v194;
  uint64_t v195;
  std::mutex *v196;
  std::mutex *v197;
  uint64_t v198;
  unsigned __int8 *v199;
  uint64_t v200;
  unsigned int v201;
  void *v202;
  std::__shared_weak_count *v203;
  uint64_t v204;
  char v205;
  CFTypeRef v206;
  uint64_t (*v207)(uint64_t);
  NSObject *v208;
  uint64_t v209;
  void **v210;
  uint64_t (*v211)(uint64_t);
  std::mutex *v212;
  std::mutex *v213;
  uint64_t v214;
  unsigned __int8 *v215;
  uint64_t v216;
  unsigned int v217;
  void *v218;
  std::__shared_weak_count *v219;
  uint64_t v220;
  char v221;
  CFTypeRef v222;
  uint64_t (*v223)(uint64_t);
  NSObject *v224;
  uint64_t v225;
  void **v226;
  uint64_t (*v227)(uint64_t);
  uint64_t v228;
  std::mutex *v229;
  std::mutex *v230;
  unsigned __int8 *v231;
  uint64_t v232;
  unsigned int v233;
  void *v234;
  std::__shared_weak_count *v235;
  uint64_t v236;
  char v237;
  CFTypeRef v238;
  uint64_t (*v239)(uint64_t);
  NSObject *v240;
  uint64_t v241;
  void **v242;
  uint64_t (*v243)(uint64_t);
  __CFDictionary *v244;
  CFTypeRef v245;
  Registry *v246;
  std::mutex *v247;
  std::mutex *v248;
  uint64_t v249;
  uint64_t v250;
  unsigned __int8 *v251;
  uint64_t v252;
  unsigned int v253;
  void *v254;
  std::__shared_weak_count *v255;
  uint64_t v256;
  char v257;
  CFMutableDictionaryRef v258;
  void *v259;
  uint8_t *v260;
  CFMutableArrayRef v261;
  uint64_t v262;
  uint64_t v263;
  uint8_t *v264;
  uint8_t *v265;
  BOOL v266;
  void *v267;
  uint64_t (*v268)(uint64_t);
  NSObject *v269;
  uint64_t v270;
  std::mutex *v271;
  std::mutex *v272;
  unsigned __int8 *v273;
  uint64_t v274;
  unsigned int v275;
  void *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  char v279;
  NSObject *v280;
  uint64_t v281;
  CFMutableDictionaryRef *v282;
  __CFDictionary *v283;
  void *v284;
  std::mutex *v285;
  std::mutex *v286;
  uint64_t v287;
  uint64_t v288;
  unsigned __int8 *v289;
  uint64_t v290;
  unsigned int v291;
  void *v292;
  std::__shared_weak_count *v293;
  uint64_t v294;
  char v295;
  __CFDictionary *v296;
  __CFDictionary *v297;
  std::mutex *v298;
  std::mutex *v299;
  unsigned __int8 *v300;
  uint64_t v301;
  unsigned int v302;
  void *v303;
  std::__shared_weak_count *v304;
  uint64_t v305;
  char v306;
  __CFDictionary *v307;
  void *v308;
  CFArrayRef v309;
  std::mutex *v310;
  std::mutex *v311;
  uint64_t v312;
  unsigned __int8 *v313;
  uint64_t v314;
  unsigned int v315;
  void *v316;
  std::__shared_weak_count *v317;
  void *v318;
  char v319;
  void *v320;
  uint8_t v321;
  NSObject *v322;
  uint64_t v323;
  __CFDictionary *v324;
  CFArrayRef v325;
  void *v326;
  NSObject *v327;
  uint64_t v328;
  std::__shared_weak_count *v330;
  Registry **v331;
  uint64_t v332;
  void *v333[2];
  uint64_t v334;
  void *v335;
  CFArrayRef theArray[2];
  unint64_t size;
  _DWORD v338[2];
  void *v339;
  void *v340[2];
  uint64_t v341;
  CFTypeRef v342[2];
  uint64_t v343;
  void *v344[2];
  uint64_t v345;
  void *v346[2];
  uint64_t v347;
  void *v348[2];
  uint64_t v349;
  CFMutableDictionaryRef v350[2];
  uint64_t v351;
  long long v352;
  uint64_t v353;
  void *v354;
  void *v355;
  void *v356;
  void *v357;
  void *v358[2];
  uint64_t v359;
  void *v360;
  unsigned char *v361;
  void *v362[2];
  uint64_t v363;
  void *__dst[2];
  uint64_t v365;
  long long value;
  uint64_t v367;
  _DWORD v368[2];
  CFMutableDictionaryRef theDict;
  CFDictionaryRef v370;
  void *v371;
  void *__p[2];
  uint64_t v373;
  CSIPhoneNumber buf;
  void *__src[2];
  void *v376[2];
  void *v377[2];
  long long v378;
  long long v379;
  long long v380;
  long long v381;
  long long v382;
  long long v383;
  long long v384;
  long long v385;
  long long v386;
  long long v387;
  void *v388[2];
  long long v389;
  void *v390[2];
  long long v391;
  void *v392[2];
  long long v393;
  void *v394[2];
  long long v395;
  uint64_t v396;
  uint8_t v397[24];
  void v398[2];

  sub_10108816C(a1);
  CFDictionaryRef theDict = 0;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableDictionaryRef v6 = theDict;
    CFDictionaryRef theDict = Mutable;
    *(void *)&buf.var0 = v6;
    sub_10005717C((const void **)&buf);
  }
  uint64_t v7 = (const __CFString **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0) {
    uint64_t v7 = (const __CFString **)*v7;
  }
  __p[0] = 0;
  *(void *)v397 = 0;
  if (ctu::cf::convert_copy((ctu::cf *)v397, v7, (const char *)0x8000100, kCFAllocatorDefault, v5))
  {
    uint64_t v8 = __p[0];
    __p[0] = *(void **)v397;
    *(void *)&buf.var0 = v8;
    sub_1000558F4((const void **)&buf);
  }
  *(void **)&value = __p[0];
  __p[0] = 0;
  sub_1000558F4((const void **)__p);
  CFDictionaryAddValue(theDict, @"phoneNumber", (const void *)value);
  sub_1000558F4((const void **)&value);
  uint64_t v9 = theDict;
  char v10 = (const void *)sub_1007FA824(*(void **)(a1 + 168));
  CFDictionaryAddValue(v9, @"primaryDeviceId", v10);
  v332 = a1;
  std::string::size_type v11 = theDict;
  v331 = (Registry **)(a1 + 120);
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
  char v13 = ServiceMap;
  if (v14 < 0)
  {
    unsigned int v15 = (unsigned __int8 *)(v14 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v16 = 5381;
    do
    {
      uint64_t v14 = v16;
      unsigned int v17 = *v15++;
      uint64_t v16 = (33 * v16) ^ v17;
    }
    while (v17);
  }
  std::mutex::lock(ServiceMap);
  *(void *)v397 = v14;
  std::string::size_type v18 = sub_10004D37C(&v13[1].__m_.__sig, (unint64_t *)v397);
  if (v18)
  {
    uint64_t v20 = v18[3];
    unint64_t v19 = (std::__shared_weak_count *)v18[4];
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v13);
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v19);
      char v21 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  std::mutex::unlock(v13);
  unint64_t v19 = 0;
  char v21 = 1;
LABEL_15:
  (*(void (**)(CSIPhoneNumber *__return_ptr, uint64_t, uint64_t))(*(void *)v20 + 176))(&buf, v20, **(void **)(a1 + 144) + 24);
  std::string::size_type v22 = __src[0];
  std::string::size_type v23 = __src[1];
  v368[0] = v376[0];
  *(_DWORD *)((char *)v368 + 3) = *(_DWORD *)((char *)v376 + 3);
  int v24 = SHIBYTE(v376[0]);
  v376[0] = 0;
  __src[1] = 0;
  __src[0] = 0;
  if ((v24 & 0x80000000) == 0)
  {
    __p[0] = v22;
    __p[1] = v23;
    LODWORD(v373) = v368[0];
    *(_DWORD *)((char *)&v373 + 3) = *(_DWORD *)((char *)v368 + 3);
    HIBYTE(v373) = v24;
    v342[0] = 0;
LABEL_18:
    *(_OWORD *)v397 = *(_OWORD *)__p;
    *(void *)&v397[16] = v373;
    goto LABEL_19;
  }
  sub_10004FC84(__p, v22, (unint64_t)v23);
  v342[0] = 0;
  if ((SHIBYTE(v373) & 0x80000000) == 0) {
    goto LABEL_18;
  }
  sub_10004FC84(v397, __p[0], (unint64_t)__p[1]);
LABEL_19:
  v350[0] = 0;
  if (ctu::cf::convert_copy())
  {
    CFTypeRef v25 = v342[0];
    v342[0] = v350[0];
    *(void *)&value = v25;
    sub_1000558F4((const void **)&value);
  }
  if ((char)v397[23] < 0) {
    operator delete(*(void **)v397);
  }
  theArray[0] = (CFArrayRef)v342[0];
  v342[0] = 0;
  sub_1000558F4(v342);
  if (SHIBYTE(v373) < 0) {
    operator delete(__p[0]);
  }
  CFDictionaryAddValue(v11, @"labelID", theArray[0]);
  sub_1000558F4((const void **)theArray);
  if (v24 < 0) {
    operator delete(v22);
  }
  if (SBYTE7(v378) < 0) {
    operator delete(v377[0]);
  }
  if (SHIBYTE(v376[0]) < 0) {
    operator delete(__src[0]);
  }
  if (SHIBYTE(buf.var2.var0) < 0) {
    operator delete(*((void **)&buf.var2.__r_.__value_.var0.var1 + 2));
  }
  if ((buf.var2.__r_.__value_.var0.var0.__data_[15] & 0x80000000) == 0)
  {
    if (v21) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  operator delete(*(void **)&buf.var0);
  if ((v21 & 1) == 0) {
LABEL_35:
  }
    sub_10004D2C8(v19);
LABEL_36:
  uint64_t v26 = *(void *)(a1 + 160);
  uint64_t v27 = *(void *)(v26 + 1024);
  uint64_t v28 = *(std::__shared_weak_count **)(v26 + 1032);
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v330 = v28;
  if (v27 && (uint64_t v29 = *(void *)(v27 + 128) - *(void *)(v27 + 120)) != 0)
  {
    *(void *)&value = 0;
    CFMutableArrayRef v30 = CFArrayCreateMutable(kCFAllocatorDefault, 0xAAAAAAAAAAAAAAABLL * (v29 >> 3), &kCFTypeArrayCallBacks);
    *(void *)&value = v30;
    uint64_t v32 = *(void *)(v27 + 120);
    if (*(void *)(v27 + 128) != v32)
    {
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      do
      {
        CFTypeID v35 = (const __CFString **)(v32 + v33);
        if (*(char *)(v32 + v33 + 23) < 0) {
          CFTypeID v35 = (const __CFString **)*v35;
        }
        uint64_t v36 = (__CFArray *)value;
        __p[0] = 0;
        *(void *)v397 = 0;
        if (ctu::cf::convert_copy((ctu::cf *)v397, v35, (const char *)0x8000100, kCFAllocatorDefault, v31))
        {
          unsigned int v37 = __p[0];
          __p[0] = *(void **)v397;
          *(void *)&buf.var0 = v37;
          sub_1000558F4((const void **)&buf);
        }
        v350[0] = (CFMutableDictionaryRef)__p[0];
        __p[0] = 0;
        sub_1000558F4((const void **)__p);
        CFArrayAppendValue(v36, v350[0]);
        sub_1000558F4((const void **)v350);
        ++v34;
        uint64_t v32 = *(void *)(v27 + 120);
        v33 += 24;
      }
      while (v34 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v27 + 128) - v32) >> 3));
      CFMutableArrayRef v30 = (CFMutableArrayRef)value;
    }
    CFDictionaryAddValue(theDict, @"impu", v30);
    sub_1000440D4((const void **)&value);
  }
  else
  {
    uint64_t v38 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v39 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      buf.var0 = 136315394;
      *(void *)&buf.var1 = v39;
      WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
      *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I %s%sIMPU is not available - skipped", (uint8_t *)&buf, 0x16u);
    }
  }
  value = 0uLL;
  v367 = 0;
  uint64_t v40 = (std::mutex *)Registry::getServiceMap(*v331);
  char v41 = v40;
  if (v42 < 0)
  {
    std::string::size_type v43 = (unsigned __int8 *)(v42 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v44 = 5381;
    do
    {
      uint64_t v42 = v44;
      unsigned int v45 = *v43++;
      uint64_t v44 = (33 * v44) ^ v45;
    }
    while (v45);
  }
  std::mutex::lock(v40);
  *(void *)v397 = v42;
  uint64_t v46 = sub_10004D37C(&v41[1].__m_.__sig, (unint64_t *)v397);
  if (v46)
  {
    uint64_t v48 = (void (***)(CSIPhoneNumber *__return_ptr, void, uint64_t))v46[3];
    uint64_t v47 = (std::__shared_weak_count *)v46[4];
    if (v47)
    {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v41);
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v47);
      std::string::size_type v49 = 0;
      goto LABEL_61;
    }
  }
  else
  {
    uint64_t v48 = 0;
  }
  std::mutex::unlock(v41);
  uint64_t v47 = 0;
  std::string::size_type v49 = 1;
LABEL_61:
  (**v48)(&buf, v48, **(void **)(v332 + 144) + 24);
  (*(void (**)(long long *__return_ptr))(**(void **)&buf.var0 + 448))(&value);
  uint64_t v50 = v332;
  if (buf.var2.__r_.__value_.var0.var1.__data_) {
    sub_10004D2C8((std::__shared_weak_count *)buf.var2.__r_.__value_.var0.var1.__data_);
  }
  if ((v49 & 1) == 0) {
    sub_10004D2C8(v47);
  }
  uint64_t v51 = theDict;
  if (SHIBYTE(v367) < 0)
  {
    sub_10004FC84(__dst, (void *)value, *((unint64_t *)&value + 1));
  }
  else
  {
    *(_OWORD *)long long __dst = value;
    v365 = v367;
  }
  if (SHIBYTE(v365) < 0)
  {
    sub_10004FC84(v397, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)v397 = *(_OWORD *)__dst;
    *(void *)&v397[16] = v365;
  }
  v342[0] = 0;
  if ((char)v397[23] < 0)
  {
    sub_10004FC84(&buf, *(void **)v397, *(unint64_t *)&v397[8]);
  }
  else
  {
    *(_OWORD *)&buf.var0 = *(_OWORD *)v397;
    buf.var2.__r_.__value_.var0.var1.__size_ = *(void *)&v397[16];
  }
  v350[0] = 0;
  if (ctu::cf::convert_copy())
  {
    int v52 = v342[0];
    v342[0] = v350[0];
    __p[0] = (void *)v52;
    sub_1000558F4((const void **)__p);
  }
  if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
    operator delete(*(void **)&buf.var0);
  }
  theArray[0] = (CFArrayRef)v342[0];
  v342[0] = 0;
  sub_1000558F4(v342);
  if ((char)v397[23] < 0) {
    operator delete(*(void **)v397);
  }
  CFDictionaryAddValue(v51, @"primarySubscriberId", theArray[0]);
  sub_1000558F4((const void **)theArray);
  if (SHIBYTE(v365) < 0) {
    operator delete(__dst[0]);
  }
  int v53 = theDict;
  sub_1003A4534(v332 + 272, &buf);
  CFDictionaryAddValue(v53, @"imsCommonCredentials", *(const void **)&buf.var0);
  sub_100057D78((const void **)&buf);
  if (sub_10107696C(v332))
  {
    std::string::size_type v54 = theDict;
    BOOL v55 = *(long long **)(v332 + 304);
    if (*((char *)v55 + 23) < 0)
    {
      sub_10004FC84(v362, *(void **)v55, *((void *)v55 + 1));
    }
    else
    {
      std::string v56 = *v55;
      v363 = *((void *)v55 + 2);
      *(_OWORD *)v362 = v56;
    }
    if (SHIBYTE(v363) < 0)
    {
      sub_10004FC84(v397, v362[0], (unint64_t)v362[1]);
    }
    else
    {
      *(_OWORD *)v397 = *(_OWORD *)v362;
      *(void *)&v397[16] = v363;
    }
    v342[0] = 0;
    if ((char)v397[23] < 0)
    {
      sub_10004FC84(&buf, *(void **)v397, *(unint64_t *)&v397[8]);
    }
    else
    {
      *(_OWORD *)&buf.var0 = *(_OWORD *)v397;
      buf.var2.__r_.__value_.var0.var1.__size_ = *(void *)&v397[16];
    }
    v350[0] = 0;
    if (ctu::cf::convert_copy())
    {
      uint64_t v68 = v342[0];
      v342[0] = v350[0];
      __p[0] = (void *)v68;
      sub_1000558F4((const void **)__p);
    }
    if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
      operator delete(*(void **)&buf.var0);
    }
    theArray[0] = (CFArrayRef)v342[0];
    v342[0] = 0;
    sub_1000558F4(v342);
    if ((char)v397[23] < 0) {
      operator delete(*(void **)v397);
    }
    CFDictionaryAddValue(v54, @"masterToken", theArray[0]);
    sub_1000558F4((const void **)theArray);
    if (SHIBYTE(v363) < 0) {
      operator delete(v362[0]);
    }
    v69 = *(unsigned int **)(v332 + 816);
    if (v69 && *((unsigned char *)v69 + 4)) {
      uint64_t v70 = *v69;
    }
    else {
      uint64_t v70 = 0;
    }
    uint64_t v71 = *(NSObject **)(v332 + 56);
    if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_207;
    }
    long long v72 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
    uint64_t v73 = *(void *)(v332 + 816);
    if (v73)
    {
      if (*(unsigned char *)(v73 + 4))
      {
        if (*(unsigned char *)(v73 + 32)) {
          v74 = (uint64_t)(*(void *)(v73 + 16) - *(void *)(v73 + 8)) >> 7;
        }
        else {
          v74 = 0;
        }
        LODWORD(v73) = *(_DWORD *)v73 - v74;
        if ((int)v73 >= 0) {
          goto LABEL_206;
        }
        uint64_t v115 = *(NSObject **)(v332 + 56);
        unsigned int v116 = os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT);
        LODWORD(v73) = 0;
        if (!v116) {
          goto LABEL_206;
        }
        v117 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
        v118 = **(_DWORD **)(v332 + 816);
        buf.var0 = 136315906;
        *(void *)&buf.var1 = v117;
        WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
        *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
        HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 1024;
        *((_DWORD *)&buf.var2.__r_.__value_.var0.var1 + 4) = v118;
        *((_WORD *)&buf.var2.__r_.__value_.var0.var1 + 10) = 2048;
        *(void *)((char *)&buf.var2.__r_.__value_.var0.var1 + 22) = v74;
        _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "#W %s%sIncorrect PS device list: max=%u, used=%zu", (uint8_t *)&buf, 0x26u);
      }
      LODWORD(v73) = 0;
    }
LABEL_206:
    *(_DWORD *)v397 = 136315906;
    *(void *)&v397[4] = v72;
    *(_WORD *)&v397[12] = 2080;
    *(void *)&v397[14] = " ";
    *(_WORD *)&v397[22] = 1024;
    LODWORD(v398[0]) = v70;
    WORD2(v398[0]) = 2048;
    *(void *)((char *)v398 + 6) = v73;
    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#I %s%sAcoount has %u device slots (%zu are vacant)", v397, 0x26u);
LABEL_207:
    __p[0] = 0;
    *(void *)v397 = 0;
    *(void *)&buf.var0 = v70;
    uint64_t v119 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &buf);
    if (v119)
    {
      char v120 = *(void *)v397;
      *(void *)v397 = v119;
      *(void *)&buf.var0 = v120;
      sub_1000570E8((const void **)&buf);
    }
    __p[0] = *(void **)v397;
    *(void *)v397 = 0;
    sub_1000570E8((const void **)v397);
    CFDictionaryAddValue(theDict, @"maxDeviceNumber", __p[0]);
    sub_1000570E8((const void **)__p);
    goto LABEL_210;
  }
  theArray[0] = 0;
  uint64_t v57 = (std::mutex *)Registry::getServiceMap(*v331);
  uint64_t v58 = v57;
  uint64_t v60 = v59;
  if (v59 < 0)
  {
    __int16 v61 = (unsigned __int8 *)(v59 & 0x7FFFFFFFFFFFFFFFLL);
    uint32_t v62 = 5381;
    do
    {
      uint64_t v60 = v62;
      CFDictionaryRef v63 = *v61++;
      uint32_t v62 = (33 * v62) ^ v63;
    }
    while (v63);
  }
  std::mutex::lock(v57);
  *(void *)&buf.var0 = v60;
  uint64_t v64 = sub_10004D37C(&v58[1].__m_.__sig, (unint64_t *)&buf);
  if (v64)
  {
    CFTypeID v66 = v64[3];
    uint64_t v65 = (std::__shared_weak_count *)v64[4];
    if (v65)
    {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v58);
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v65);
      uint64_t v67 = 0;
      goto LABEL_117;
    }
  }
  else
  {
    CFTypeID v66 = 0;
  }
  std::mutex::unlock(v58);
  uint64_t v65 = 0;
  uint64_t v67 = 1;
LABEL_117:
  uint64_t v75 = kPhoneServicesWalletDomain;
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, const __CFString *, void, void, uint64_t))(*(void *)v66 + 24))(v397, v66, **(void **)(v332 + 144) + 24, @"individual.keys", kPhoneServicesWalletDomain, 0, 4);
  sub_100044D6C(theArray, (CFTypeRef *)v397);
  sub_1000577C4((const void **)v397);
  if ((v67 & 1) == 0) {
    sub_10004D2C8(v65);
  }
  if (!*(unsigned char *)(v332 + 328)) {
    goto LABEL_156;
  }
  int v76 = theArray[0] ? sub_100083F10 : 0;
  if (v76
    && CFArrayGetCount(theArray[0]) >= 0xAAAAAAAAAAAAAAABLL
                                     * ((uint64_t)(*(void *)(v332 + 312) - *(void *)(v332 + 304)) >> 3))
  {
    goto LABEL_156;
  }
  v371 = 0;
  int v77 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (v77)
  {
    int v78 = v371;
    v371 = v77;
    *(void *)&buf.var0 = v78;
    sub_1000440D4((const void **)&buf);
  }
  if (*(void *)(v332 + 312) != *(void *)(v332 + 304))
  {
    uint64_t v79 = 0;
    do
    {
      if (theArray[0]) {
        v80 = sub_100083F10;
      }
      else {
        v80 = 0;
      }
      if (v80 && v79 < CFArrayGetCount(theArray[0]))
      {
        BOOL v81 = (__CFArray *)v371;
        CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(theArray[0], v79);
        CFArrayAppendValue(v81, ValueAtIndex);
      }
      else
      {
        CFDictionaryRef v83 = (__CFArray *)v371;
        sub_100639F14(0x20uLL, &v360);
        memset(v397, 0, sizeof(v397));
        sub_10005C928(v397, v360, (uint64_t)v361, v361 - (unsigned char *)v360);
        v342[0] = 0;
        memset(&buf, 0, 24);
        sub_10005C928(&buf, *(const void **)v397, *(uint64_t *)&v397[8], *(void *)&v397[8] - *(void *)v397);
        v350[0] = 0;
        if (ctu::cf::convert_copy())
        {
          __int16 v84 = v342[0];
          v342[0] = v350[0];
          __p[0] = (void *)v84;
          sub_100030068((const void **)__p);
        }
        if (*(void *)&buf.var0)
        {
          buf.var2.__r_.__value_.var0.var1.__data_ = *(char **)&buf.var0;
          operator delete(*(void **)&buf.var0);
        }
        v370 = (CFDictionaryRef)v342[0];
        v342[0] = 0;
        sub_100030068(v342);
        if (*(void *)v397)
        {
          *(void *)&v397[8] = *(void *)v397;
          operator delete(*(void **)v397);
        }
        CFArrayAppendValue(v83, v370);
        sub_100030068((const void **)&v370);
        if (v360)
        {
          v361 = v360;
          operator delete(v360);
        }
      }
      ++v79;
    }
    while (v79 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v332 + 312) - *(void *)(v332 + 304)) >> 3));
  }
  uint64_t v85 = (std::mutex *)Registry::getServiceMap(*v331);
  uint64_t v86 = v85;
  if (v59 < 0)
  {
    uint64_t v87 = (unsigned __int8 *)(v59 & 0x7FFFFFFFFFFFFFFFLL);
    CFStringRef v88 = 5381;
    do
    {
      CFMutableArrayRef v59 = v88;
      v89 = *v87++;
      CFStringRef v88 = (33 * v88) ^ v89;
    }
    while (v89);
  }
  std::mutex::lock(v85);
  *(void *)&buf.var0 = v59;
  long long v90 = sub_10004D37C(&v86[1].__m_.__sig, (unint64_t *)&buf);
  if (!v90)
  {
    uint64_t v92 = 0;
    goto LABEL_152;
  }
  uint64_t v92 = v90[3];
  uint64_t v91 = (std::__shared_weak_count *)v90[4];
  if (!v91)
  {
LABEL_152:
    std::mutex::unlock(v86);
    uint64_t v91 = 0;
    BOOL v93 = 1;
    goto LABEL_153;
  }
  atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v86);
  atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v91);
  BOOL v93 = 0;
LABEL_153:
  (*(void (**)(uint64_t, uint64_t, const __CFString *, void *, uint64_t, void, uint64_t, void))(*(void *)v92 + 16))(v92, **(void **)(v332 + 144) + 24, @"individual.keys", v371, v75, 0, 4, 0);
  if ((v93 & 1) == 0) {
    sub_10004D2C8(v91);
  }
  sub_100044D6C(v397, (CFTypeRef *)&v371);
  *(CFArrayRef *)&buf.var0 = theArray[0];
  theArray[0] = *(CFArrayRef *)v397;
  *(void *)v397 = 0;
  sub_100044D00((const void **)&buf);
  sub_100044D00((const void **)v397);
  sub_1000440D4((const void **)&v371);
LABEL_156:
  *(void *)(v332 + 976) = *(void *)(v332 + 968);
  __p[0] = 0;
  uint64_t v94 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (v94)
  {
    BOOL v95 = __p[0];
    __p[0] = v94;
    *(void *)&buf.var0 = v95;
    sub_1000440D4((const void **)&buf);
  }
  v97 = *a2;
  uint64_t v96 = a2[1];
  if (*a2 != v96)
  {
    long long v98 = 0;
    uint64_t v99 = 0;
    v100 = 0;
    while (1)
    {
      uint64_t v101 = v332;
      unsigned int v102 = *(NSObject **)(v332 + 56);
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        v103 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
        sub_100C8BF60(v97, v397);
        v104 = v397;
        if ((v397[23] & 0x80u) != 0) {
          v104 = *(uint8_t **)v397;
        }
        buf.var0 = 136315906;
        *(void *)&buf.var1 = v103;
        WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
        *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
        HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 2048;
        *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = v100;
        LOWORD(buf.var2.__r_.var0) = 2080;
        *(void *)((char *)&buf.var2.__r_.var0 + 2) = v104;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "#I %s%s%zu. %s", (uint8_t *)&buf, 0x2Au);
        if ((char)v397[23] < 0) {
          operator delete(*(void **)v397);
        }
        uint64_t v101 = v332;
      }
      if (!*(unsigned char *)(v101 + 328)
        || v100 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v101 + 312) - *(void *)(v101 + 304)) >> 3))
      {
        break;
      }
      v396 = 0;
      *(_OWORD *)v394 = 0u;
      v395 = 0u;
      *(_OWORD *)v392 = 0u;
      v393 = 0u;
      *(_OWORD *)v390 = 0u;
      v391 = 0u;
      *(_OWORD *)v388 = 0u;
      v389 = 0u;
      v386 = 0u;
      v387 = 0u;
      v384 = 0u;
      v385 = 0u;
      v382 = 0u;
      v383 = 0u;
      v380 = 0u;
      v381 = 0u;
      v378 = 0u;
      v379 = 0u;
      *(_OWORD *)v376 = 0u;
      *(_OWORD *)v377 = 0u;
      *(_OWORD *)__src = 0u;
      memset(&buf, 0, sizeof(buf));
      sub_101089824((char *)&buf, v97);
      sub_100093B44((std::string *)&v388[1], (const std::string *)(*(void *)(v101 + 304) + v98));
      if (*(unsigned char *)(v101 + 360))
      {
        uint64_t v105 = *(void *)(v101 + 336);
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v101 + 344) - v105) >> 3) > v100) {
          sub_100093B44((std::string *)&v390[1], (const std::string *)(v105 + v98));
        }
      }
      if (*(unsigned char *)(v101 + 424))
      {
        char v106 = *(void *)(v101 + 400);
        if (v100 < (*(void *)(v101 + 408) - v106) >> 6)
        {
          sub_100179AF8((std::string *)&v392[1], (const std::string *)(v106 + v99));
          sub_100179AF8((std::string *)&v394[1], (const std::string *)(*(void *)(v101 + 400) + v99 + 32));
          if (!LOBYTE(v392[0])) {
            sub_100179AF8((std::string *)&v390[1], (const std::string *)&v392[1]);
          }
        }
      }
      v350[0] = 0;
      sub_1003A5938((long long *)&buf.var0, v350);
      v342[0] = 0;
      v342[0] = CFStringCreateWithFormat(0, 0, @"%zu", v100);
      CFDictionaryAddValue(v350[0], @"slotId", v342[0]);
      uint64_t v107 = (__CFArray *)__p[0];
      v108 = v350[0];
      v109 = CFArrayGetValueAtIndex(theArray[0], v100);
      memset(v397, 0, sizeof(v397));
      if (v109)
      {
        v110 = CFGetTypeID(v109);
        if (v110 == CFDataGetTypeID()) {
          ctu::cf::assign();
        }
      }
      *(_OWORD *)v358 = *(_OWORD *)v397;
      v359 = *(void *)&v397[16];
      sub_100639B74(v108, (uint64_t)v358, &v371);
      CFArrayAppendValue(v107, v371);
      sub_100030068((const void **)&v371);
      if (v358[0])
      {
        v358[1] = v358[0];
        operator delete(v358[0]);
      }
      sub_1000558F4(v342);
      sub_10005717C((const void **)v350);
      if ((_BYTE)v396 && SHIBYTE(v395) < 0) {
        operator delete(v394[1]);
      }
      if (LOBYTE(v394[0]) && SHIBYTE(v393) < 0) {
        operator delete(v392[1]);
      }
      if (LOBYTE(v392[0]) && SHIBYTE(v391) < 0) {
        operator delete(v390[1]);
      }
      if (LOBYTE(v390[0]) && SHIBYTE(v389) < 0) {
        operator delete(v388[1]);
      }
      if (LOBYTE(v388[0])) {
        sub_1003AA7DC((uint64_t)&buf);
      }
      v97 += 256;
      v99 += 64;
      v98 += 24;
      ++v100;
      if (v97 == v96) {
        goto LABEL_198;
      }
    }
    uint64_t v111 = *(NSObject **)(v101 + 56);
    if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
    {
      v112 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
      buf.var0 = 136315650;
      *(void *)&buf.var1 = v112;
      WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
      *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
      HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 2048;
      *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = v100;
      _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "#I %s%sNot enough tokens - used %zu and skipped rest of the IMS credentials", (uint8_t *)&buf, 0x20u);
    }
  }
LABEL_198:
  CFDictionaryAddValue(theDict, @"cfgSlots", __p[0]);
  *(void *)v397 = 0;
  v113 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  uint64_t v50 = v332;
  if (v113)
  {
    v114 = *(void *)v397;
    *(void *)v397 = v113;
    *(void *)&buf.var0 = v114;
    sub_1000440D4((const void **)&buf);
  }
  CFDictionaryAddValue(theDict, @"cfgs", *(const void **)v397);
  sub_1000440D4((const void **)v397);
  sub_1000440D4((const void **)__p);
  sub_100044D00((const void **)theArray);
LABEL_210:
  v357 = 0;
  sub_100A32FDC(*(void *)(v50 + 160), (CFDataRef *)&v357);
  if (v357) {
    v121 = sub_10008324C;
  }
  else {
    v121 = 0;
  }
  if (v121) {
    CFDictionaryAddValue(theDict, @"ePdgCACert", v357);
  }
  theArray[0] = 0;
  uint64_t v122 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v122)
  {
    v123 = theArray[0];
    theArray[0] = v122;
    *(void *)&buf.var0 = v123;
    sub_10005717C((const void **)&buf);
  }
  v371 = 0;
  uint64_t v124 = (std::mutex *)Registry::getServiceMap(*v331);
  v125 = v124;
  v127 = v126;
  if (v126 < 0)
  {
    uint64_t v128 = (unsigned __int8 *)(v126 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v129 = 5381;
    do
    {
      v127 = v129;
      v130 = *v128++;
      uint64_t v129 = (33 * v129) ^ v130;
    }
    while (v130);
  }
  std::mutex::lock(v124);
  *(void *)&buf.var0 = v127;
  v131 = sub_10004D37C(&v125[1].__m_.__sig, (unint64_t *)&buf);
  if (v131)
  {
    uint64_t v133 = v131[3];
    v132 = (std::__shared_weak_count *)v131[4];
    if (v132)
    {
      atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v125);
      atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v132);
      v134 = 0;
      goto LABEL_225;
    }
  }
  else
  {
    uint64_t v133 = 0;
  }
  std::mutex::unlock(v125);
  v132 = 0;
  v134 = 1;
LABEL_225:
  v350[0] = 0;
  uint64_t v135 = (const void *)kIWLANSettingsKey;
  (*(void (**)(CSIPhoneNumber *__return_ptr, uint64_t, void, uint64_t, void, void, void))(*(void *)v133 + 96))(&buf, v133, *(unsigned int *)(**(void **)(v50 + 144) + 52), 1, kIWLANSettingsKey, 0, 0);
  sub_10004EFE4(v350, (CFTypeRef *)&buf);
  sub_1000577C4((const void **)&buf);
  v342[0] = 0;
  (*(void (**)(CSIPhoneNumber *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v133 + 96))(&buf, v133, *(unsigned int *)(**(void **)(v50 + 144) + 52), 1, @"TechSettingsSecondaryOverlay", 0, 0);
  sub_10004EFE4(v342, (CFTypeRef *)&buf);
  sub_1000577C4((const void **)&buf);
  CFDictionaryRef v136 = v342[0];
  if (v342[0]) {
    v137 = sub_100080778;
  }
  else {
    v137 = 0;
  }
  if (!v137)
  {
    v138 = *(NSObject **)(v332 + 56);
    if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
    {
      v139 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
      memset(v397, 0, sizeof(v397));
      ctu::cf::assign();
      *(_OWORD *)long long __p = *(_OWORD *)v397;
      v373 = *(void *)&v397[16];
      v140 = __p;
      if ((v397[23] & 0x80u) != 0) {
        v140 = (void **)__p[0];
      }
      buf.var0 = 136315650;
      *(void *)&buf.var1 = v139;
      WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
      *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
      HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 2080;
      *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = v140;
      _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "#I %s%sNo overlay dictionary %s", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v373) < 0) {
        operator delete(__p[0]);
      }
      CFDictionaryRef v136 = v342[0];
    }
  }
  sub_10080FF0C((unint64_t)v350[0], (unint64_t)v136, (const void **)v332, (unint64_t *)&v371);
  sub_100057D78(v342);
  sub_100057D78((const void **)v350);
  if ((v134 & 1) == 0) {
    sub_10004D2C8(v132);
  }
  if (v371) {
    v141 = sub_100080778;
  }
  else {
    v141 = 0;
  }
  if (v141)
  {
    CFDictionaryAddValue(theArray[0], v135, v371);
  }
  else
  {
    v142 = *(NSObject **)(v332 + 56);
    if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
    {
      long long v143 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
      buf.var0 = 136315394;
      *(void *)&buf.var1 = v143;
      WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
      *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
      _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_DEFAULT, "#I %s%stech configuration is not found", (uint8_t *)&buf, 0x16u);
    }
  }
  v370 = 0;
  long long v144 = (std::mutex *)Registry::getServiceMap(*v331);
  long long v145 = v144;
  long long v146 = v126;
  if (v126 < 0)
  {
    long long v147 = (unsigned __int8 *)(v126 & 0x7FFFFFFFFFFFFFFFLL);
    long long v148 = 5381;
    do
    {
      long long v146 = v148;
      long long v149 = *v147++;
      long long v148 = (33 * v148) ^ v149;
    }
    while (v149);
  }
  std::mutex::lock(v144);
  *(void *)&buf.var0 = v146;
  long long v150 = sub_10004D37C(&v145[1].__m_.__sig, (unint64_t *)&buf);
  if (v150)
  {
    long long v152 = v150[3];
    long long v151 = (std::__shared_weak_count *)v150[4];
    if (v151)
    {
      atomic_fetch_add_explicit(&v151->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v145);
      atomic_fetch_add_explicit(&v151->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v151);
      long long v153 = 0;
      goto LABEL_252;
    }
  }
  else
  {
    long long v152 = 0;
  }
  std::mutex::unlock(v145);
  long long v151 = 0;
  long long v153 = 1;
LABEL_252:
  v350[0] = 0;
  (*(void (**)(CSIPhoneNumber *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v152 + 96))(&buf, v152, *(unsigned int *)(**(void **)(v332 + 144) + 52), 1, @"IMSConfig", 0, 0);
  sub_10004EFE4(v350, (CFTypeRef *)&buf);
  sub_1000577C4((const void **)&buf);
  v342[0] = 0;
  (*(void (**)(CSIPhoneNumber *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v152 + 96))(&buf, v152, *(unsigned int *)(**(void **)(v332 + 144) + 52), 1, @"IMSConfigSecondaryOverlay", 0, 0);
  sub_10004EFE4(v342, (CFTypeRef *)&buf);
  sub_1000577C4((const void **)&buf);
  long long v154 = v342[0];
  if (v342[0]) {
    long long v155 = sub_100080778;
  }
  else {
    long long v155 = 0;
  }
  if (!v155)
  {
    long long v156 = *(NSObject **)(v332 + 56);
    if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
    {
      long long v157 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
      memset(v397, 0, sizeof(v397));
      ctu::cf::assign();
      *(_OWORD *)long long __p = *(_OWORD *)v397;
      v373 = *(void *)&v397[16];
      long long v158 = __p;
      if ((v397[23] & 0x80u) != 0) {
        long long v158 = (void **)__p[0];
      }
      buf.var0 = 136315650;
      *(void *)&buf.var1 = v157;
      WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
      *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
      HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 2080;
      *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = v158;
      _os_log_impl((void *)&_mh_execute_header, v156, OS_LOG_TYPE_DEFAULT, "#I %s%sNo overlay dictionary %s", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v373) < 0) {
        operator delete(__p[0]);
      }
      long long v154 = v342[0];
    }
  }
  sub_10080FF0C((unint64_t)v350[0], (unint64_t)v154, (const void **)v332, (unint64_t *)&v370);
  sub_100057D78(v342);
  sub_100057D78((const void **)v350);
  if ((v153 & 1) == 0) {
    sub_10004D2C8(v151);
  }
  if (v370) {
    long long v159 = sub_100080778;
  }
  else {
    long long v159 = 0;
  }
  long long v160 = v332;
  if (v159)
  {
    __p[0] = 0;
    __p[0] = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v370);
    buf.var2.__r_.__value_.var0.var1.__data_ = 0;
    *(void *)&buf.var0 = 0;
    long long v161 = (std::mutex *)Registry::getServiceMap(*(Registry **)(v332 + 120));
    long long v162 = v161;
    if (v163 < 0)
    {
      long long v164 = (unsigned __int8 *)(v163 & 0x7FFFFFFFFFFFFFFFLL);
      long long v165 = 5381;
      do
      {
        long long v163 = v165;
        long long v166 = *v164++;
        long long v165 = (33 * v165) ^ v166;
      }
      while (v166);
    }
    std::mutex::lock(v161);
    *(void *)v397 = v163;
    uint64_t v167 = sub_10004D37C(&v162[1].__m_.__sig, (unint64_t *)v397);
    if (v167)
    {
      v169 = v167[3];
      v168 = (std::__shared_weak_count *)v167[4];
      if (v168)
      {
        atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v162);
        atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v168);
        v170 = 0;
        goto LABEL_278;
      }
    }
    else
    {
      v169 = 0;
    }
    std::mutex::unlock(v162);
    v168 = 0;
    v170 = 1;
LABEL_278:
    sub_100BBB920(v169, &buf);
    if ((v170 & 1) == 0) {
      sub_10004D2C8(v168);
    }
    if (*(void *)&buf.var0)
    {
      (*(void (**)(uint8_t *__return_ptr))(**(void **)&buf.var0 + 72))(v397);
      v173 = *(void *)v397;
      v174 = *(std::__shared_weak_count **)&v397[8];
    }
    else
    {
      v173 = 0;
      v174 = 0;
    }
    if (buf.var2.__r_.__value_.var0.var1.__data_) {
      sub_10004D2C8((std::__shared_weak_count *)buf.var2.__r_.__value_.var0.var1.__data_);
    }
    if (v173)
    {
      v175 = (const __CFDictionary *)CFDictionaryGetValue(v370, @"Signaling");
      v176 = v175;
      if (v175)
      {
        v177 = CFGetTypeID(v175);
        if (v177 == CFDictionaryGetTypeID())
        {
          v178 = (int *)CFDictionaryGetValue(v176, @"AllowedPdpTypeMask");
          v179 = v178;
          if (!v178 || (v180 = CFGetTypeID(v178), v180 != CFNumberGetTypeID()))
          {
            v350[0] = 0;
            CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, v176);
            v350[0] = MutableCopy;
            v190 = *(NSObject **)(v332 + 56);
            if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
            {
              v191 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
              v192 = *(_DWORD *)(v173 + 168);
              buf.var0 = 136315650;
              *(void *)&buf.var1 = v191;
              WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
              *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
              HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 1024;
              *((_DWORD *)&buf.var2.__r_.__value_.var0.var1 + 4) = v192;
              _os_log_impl((void *)&_mh_execute_header, v190, OS_LOG_TYPE_DEFAULT, "#I %s%sSet AllowedPdpTypeMask: %d", (uint8_t *)&buf, 0x1Cu);
              CFDictionaryRef MutableCopy = v350[0];
            }
            v193 = *(unsigned int *)(v173 + 168);
            *(void *)v397 = 0;
            *(void *)&buf.var0 = v193;
            v194 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &buf);
            if (v194)
            {
              v195 = *(void *)v397;
              *(void *)v397 = v194;
              *(void *)&buf.var0 = v195;
              sub_1000570E8((const void **)&buf);
            }
            v342[0] = *(CFTypeRef *)v397;
            *(void *)v397 = 0;
            sub_1000570E8((const void **)v397);
            CFDictionarySetValue(MutableCopy, @"AllowedPdpTypeMask", v342[0]);
            sub_1000570E8(v342);
            CFDictionarySetValue((CFMutableDictionaryRef)__p[0], @"Signaling", v350[0]);
            sub_10005717C((const void **)v350);
            goto LABEL_300;
          }
          v181 = *(NSObject **)(v332 + 56);
          if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
          {
            v182 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
            *(_DWORD *)v397 = 0;
            ctu::cf::assign((ctu::cf *)v397, v179, v183);
            buf.var0 = 136315650;
            *(void *)&buf.var1 = v182;
            WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
            *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
            HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 1024;
            *((_DWORD *)&buf.var2.__r_.__value_.var0.var1 + 4) = *(_DWORD *)v397;
            v184 = "#I %s%sPreserve AllowedPdpTypeMask: %d";
            v185 = v181;
            v186 = 28;
LABEL_294:
            _os_log_impl((void *)&_mh_execute_header, v185, OS_LOG_TYPE_DEFAULT, v184, (uint8_t *)&buf, v186);
          }
        }
      }
    }
    else
    {
      v187 = *(NSObject **)(v332 + 56);
      if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
      {
        v188 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
        buf.var0 = 136315394;
        *(void *)&buf.var1 = v188;
        WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
        *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
        v184 = "#W %s%sAPN config is not found";
        v185 = v187;
        v186 = 22;
        goto LABEL_294;
      }
    }
LABEL_300:
    CFDictionaryAddValue(theArray[0], @"IMSConfig", __p[0]);
    if (v174) {
      sub_10004D2C8(v174);
    }
    sub_10005717C((const void **)__p);
    long long v160 = v332;
    goto LABEL_303;
  }
  v171 = *(NSObject **)(v332 + 56);
  if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
  {
    v172 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
    buf.var0 = 136315394;
    *(void *)&buf.var1 = v172;
    WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
    *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
    _os_log_impl((void *)&_mh_execute_header, v171, OS_LOG_TYPE_DEFAULT, "#I %s%sip telephony configuration is not found", (uint8_t *)&buf, 0x16u);
  }
LABEL_303:
  v356 = 0;
  v196 = (std::mutex *)Registry::getServiceMap(*v331);
  v197 = v196;
  v198 = v126;
  if (v126 < 0)
  {
    v199 = (unsigned __int8 *)(v126 & 0x7FFFFFFFFFFFFFFFLL);
    v200 = 5381;
    do
    {
      v198 = v200;
      v201 = *v199++;
      v200 = (33 * v200) ^ v201;
    }
    while (v201);
  }
  std::mutex::lock(v196);
  *(void *)&buf.var0 = v198;
  v202 = sub_10004D37C(&v197[1].__m_.__sig, (unint64_t *)&buf);
  if (v202)
  {
    v204 = v202[3];
    v203 = (std::__shared_weak_count *)v202[4];
    if (v203)
    {
      atomic_fetch_add_explicit(&v203->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v197);
      atomic_fetch_add_explicit(&v203->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v203);
      v205 = 0;
      goto LABEL_311;
    }
  }
  else
  {
    v204 = 0;
  }
  std::mutex::unlock(v197);
  v203 = 0;
  v205 = 1;
LABEL_311:
  v350[0] = 0;
  (*(void (**)(CSIPhoneNumber *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v204 + 96))(&buf, v204, *(unsigned int *)(**(void **)(v160 + 144) + 52), 1, @"CarrierEntitlements", 0, 0);
  sub_10004EFE4(v350, (CFTypeRef *)&buf);
  sub_1000577C4((const void **)&buf);
  v342[0] = 0;
  (*(void (**)(CSIPhoneNumber *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v204 + 96))(&buf, v204, *(unsigned int *)(**(void **)(v160 + 144) + 52), 1, @"CarrierEntitlementsSecondaryOverlay", 0, 0);
  sub_10004EFE4(v342, (CFTypeRef *)&buf);
  sub_1000577C4((const void **)&buf);
  v206 = v342[0];
  if (v342[0]) {
    v207 = sub_100080778;
  }
  else {
    v207 = 0;
  }
  if (!v207)
  {
    v208 = *(NSObject **)(v332 + 56);
    if (os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
    {
      v209 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
      memset(v397, 0, sizeof(v397));
      ctu::cf::assign();
      *(_OWORD *)long long __p = *(_OWORD *)v397;
      v373 = *(void *)&v397[16];
      v210 = __p;
      if ((v397[23] & 0x80u) != 0) {
        v210 = (void **)__p[0];
      }
      buf.var0 = 136315650;
      *(void *)&buf.var1 = v209;
      WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
      *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
      HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 2080;
      *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = v210;
      _os_log_impl((void *)&_mh_execute_header, v208, OS_LOG_TYPE_DEFAULT, "#I %s%sNo overlay dictionary %s", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v373) < 0) {
        operator delete(__p[0]);
      }
      v206 = v342[0];
    }
  }
  sub_10080FF0C((unint64_t)v350[0], (unint64_t)v206, (const void **)v332, (unint64_t *)&v356);
  sub_100057D78(v342);
  sub_100057D78((const void **)v350);
  if ((v205 & 1) == 0) {
    sub_10004D2C8(v203);
  }
  if (v356) {
    v211 = sub_100080778;
  }
  else {
    v211 = 0;
  }
  if (v211) {
    CFDictionaryAddValue(theArray[0], @"CarrierEntitlements", v356);
  }
  v355 = 0;
  v212 = (std::mutex *)Registry::getServiceMap(*v331);
  v213 = v212;
  v214 = v126;
  if (v126 < 0)
  {
    v215 = (unsigned __int8 *)(v126 & 0x7FFFFFFFFFFFFFFFLL);
    v216 = 5381;
    do
    {
      v214 = v216;
      v217 = *v215++;
      v216 = (33 * v216) ^ v217;
    }
    while (v217);
  }
  std::mutex::lock(v212);
  *(void *)&buf.var0 = v214;
  v218 = sub_10004D37C(&v213[1].__m_.__sig, (unint64_t *)&buf);
  if (v218)
  {
    v220 = v218[3];
    v219 = (std::__shared_weak_count *)v218[4];
    if (v219)
    {
      atomic_fetch_add_explicit(&v219->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v213);
      atomic_fetch_add_explicit(&v219->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v219);
      v221 = 0;
      goto LABEL_336;
    }
  }
  else
  {
    v220 = 0;
  }
  std::mutex::unlock(v213);
  v219 = 0;
  v221 = 1;
LABEL_336:
  v350[0] = 0;
  (*(void (**)(CSIPhoneNumber *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v220 + 96))(&buf, v220, *(unsigned int *)(**(void **)(v332 + 144) + 52), 1, @"PushSettings", 0, 0);
  sub_10004EFE4(v350, (CFTypeRef *)&buf);
  sub_1000577C4((const void **)&buf);
  v342[0] = 0;
  (*(void (**)(CSIPhoneNumber *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v220 + 96))(&buf, v220, *(unsigned int *)(**(void **)(v332 + 144) + 52), 1, @"PushSettingsSecondaryOverlay", 0, 0);
  sub_10004EFE4(v342, (CFTypeRef *)&buf);
  sub_1000577C4((const void **)&buf);
  v222 = v342[0];
  if (v342[0]) {
    v223 = sub_100080778;
  }
  else {
    v223 = 0;
  }
  if (!v223)
  {
    v224 = *(NSObject **)(v332 + 56);
    if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
    {
      v225 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
      memset(v397, 0, sizeof(v397));
      ctu::cf::assign();
      *(_OWORD *)long long __p = *(_OWORD *)v397;
      v373 = *(void *)&v397[16];
      v226 = __p;
      if ((v397[23] & 0x80u) != 0) {
        v226 = (void **)__p[0];
      }
      buf.var0 = 136315650;
      *(void *)&buf.var1 = v225;
      WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
      *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
      HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 2080;
      *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = v226;
      _os_log_impl((void *)&_mh_execute_header, v224, OS_LOG_TYPE_DEFAULT, "#I %s%sNo overlay dictionary %s", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v373) < 0) {
        operator delete(__p[0]);
      }
      v222 = v342[0];
    }
  }
  sub_10080FF0C((unint64_t)v350[0], (unint64_t)v222, (const void **)v332, (unint64_t *)&v355);
  sub_100057D78(v342);
  sub_100057D78((const void **)v350);
  if ((v221 & 1) == 0) {
    sub_10004D2C8(v219);
  }
  if (v355) {
    v227 = sub_100080778;
  }
  else {
    v227 = 0;
  }
  v228 = v332;
  if (v227) {
    CFDictionaryAddValue(theArray[0], @"PushSettings", v355);
  }
  v354 = 0;
  v229 = (std::mutex *)Registry::getServiceMap(*v331);
  v230 = v229;
  if (v126 < 0)
  {
    v231 = (unsigned __int8 *)(v126 & 0x7FFFFFFFFFFFFFFFLL);
    v232 = 5381;
    do
    {
      uint64_t v126 = v232;
      v233 = *v231++;
      v232 = (33 * v232) ^ v233;
    }
    while (v233);
  }
  std::mutex::lock(v229);
  *(void *)&buf.var0 = v126;
  v234 = sub_10004D37C(&v230[1].__m_.__sig, (unint64_t *)&buf);
  if (v234)
  {
    v236 = v234[3];
    v235 = (std::__shared_weak_count *)v234[4];
    if (v235)
    {
      atomic_fetch_add_explicit(&v235->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v230);
      atomic_fetch_add_explicit(&v235->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v235);
      v237 = 0;
      goto LABEL_361;
    }
  }
  else
  {
    v236 = 0;
  }
  std::mutex::unlock(v230);
  v235 = 0;
  v237 = 1;
LABEL_361:
  v350[0] = 0;
  (*(void (**)(CSIPhoneNumber *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v236 + 96))(&buf, v236, *(unsigned int *)(**(void **)(v332 + 144) + 52), 1, @"Location", 0, 0);
  sub_10004EFE4(v350, (CFTypeRef *)&buf);
  sub_1000577C4((const void **)&buf);
  v342[0] = 0;
  (*(void (**)(CSIPhoneNumber *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v236 + 96))(&buf, v236, *(unsigned int *)(**(void **)(v332 + 144) + 52), 1, @"LocationSecondaryOverlay", 0, 0);
  sub_10004EFE4(v342, (CFTypeRef *)&buf);
  sub_1000577C4((const void **)&buf);
  v238 = v342[0];
  if (v342[0]) {
    v239 = sub_100080778;
  }
  else {
    v239 = 0;
  }
  if (!v239)
  {
    v240 = *(NSObject **)(v332 + 56);
    if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
    {
      v241 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v332 + 144));
      memset(v397, 0, sizeof(v397));
      ctu::cf::assign();
      *(_OWORD *)long long __p = *(_OWORD *)v397;
      v373 = *(void *)&v397[16];
      v242 = __p;
      if ((v397[23] & 0x80u) != 0) {
        v242 = (void **)__p[0];
      }
      buf.var0 = 136315650;
      *(void *)&buf.var1 = v241;
      WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
      *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
      HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 2080;
      *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = v242;
      _os_log_impl((void *)&_mh_execute_header, v240, OS_LOG_TYPE_DEFAULT, "#I %s%sNo overlay dictionary %s", (uint8_t *)&buf, 0x20u);
      if (SHIBYTE(v373) < 0) {
        operator delete(__p[0]);
      }
      v238 = v342[0];
    }
  }
  sub_10080FF0C((unint64_t)v350[0], (unint64_t)v238, (const void **)v332, (unint64_t *)&v354);
  sub_100057D78(v342);
  sub_100057D78((const void **)v350);
  if ((v237 & 1) == 0) {
    sub_10004D2C8(v235);
  }
  if (v354) {
    v243 = sub_100080778;
  }
  else {
    v243 = 0;
  }
  if (v243) {
    CFDictionaryAddValue(theArray[0], @"Location", v354);
  }
  CFDictionaryAddValue(theDict, @"CBRoot", theArray[0]);
  sub_100057D78((const void **)&v354);
  sub_100057D78((const void **)&v355);
  sub_100057D78((const void **)&v356);
  sub_100057D78((const void **)&v370);
  sub_100057D78((const void **)&v371);
  sub_10005717C((const void **)theArray);
  v244 = theDict;
  CTGetRootVersionString();
  if (SHIBYTE(v353) < 0)
  {
    sub_10004FC84(v397, (void *)v352, *((unint64_t *)&v352 + 1));
  }
  else
  {
    *(_OWORD *)v397 = v352;
    *(void *)&v397[16] = v353;
  }
  v342[0] = 0;
  if ((char)v397[23] < 0)
  {
    sub_10004FC84(&buf, *(void **)v397, *(unint64_t *)&v397[8]);
  }
  else
  {
    *(_OWORD *)&buf.var0 = *(_OWORD *)v397;
    buf.var2.__r_.__value_.var0.var1.__size_ = *(void *)&v397[16];
  }
  v350[0] = 0;
  if (ctu::cf::convert_copy())
  {
    v245 = v342[0];
    v342[0] = v350[0];
    __p[0] = (void *)v245;
    sub_1000558F4((const void **)__p);
  }
  if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
    operator delete(*(void **)&buf.var0);
  }
  theArray[0] = (CFArrayRef)v342[0];
  v342[0] = 0;
  sub_1000558F4(v342);
  if ((char)v397[23] < 0) {
    operator delete(*(void **)v397);
  }
  CFDictionaryAddValue(v244, @"CoreTelephonyVersion", theArray[0]);
  sub_1000558F4((const void **)theArray);
  if (SHIBYTE(v353) < 0) {
    operator delete((void *)v352);
  }
  v356 = 0;
  v246 = *v331;
  __p[0] = 0;
  *(void *)&v397[8] = 0;
  *(void *)&v397[16] = 0;
  *(void *)v397 = &v397[8];
  v247 = (std::mutex *)Registry::getServiceMap(v246);
  v248 = v247;
  v250 = v249;
  if (v249 < 0)
  {
    v251 = (unsigned __int8 *)(v249 & 0x7FFFFFFFFFFFFFFFLL);
    v252 = 5381;
    do
    {
      v250 = v252;
      v253 = *v251++;
      v252 = (33 * v252) ^ v253;
    }
    while (v253);
  }
  std::mutex::lock(v247);
  *(void *)&buf.var0 = v250;
  v254 = sub_10004D37C(&v248[1].__m_.__sig, (unint64_t *)&buf);
  if (v254)
  {
    v256 = v254[3];
    v255 = (std::__shared_weak_count *)v254[4];
    if (v255)
    {
      atomic_fetch_add_explicit(&v255->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v248);
      atomic_fetch_add_explicit(&v255->__shared_owners_, 1uLL, memory_order_relaxed);
      v228 = v332;
      sub_10004D2C8(v255);
      v257 = 0;
      goto LABEL_400;
    }
  }
  else
  {
    v256 = 0;
  }
  std::mutex::unlock(v248);
  v255 = 0;
  v257 = 1;
LABEL_400:
  (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v256 + 112))(v256, v397, 1);
  if ((v257 & 1) == 0) {
    sub_10004D2C8(v255);
  }
  if (*(void *)&v397[16])
  {
    v258 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v259 = __p[0];
    __p[0] = v258;
    *(void *)&buf.var0 = v259;
    sub_10005717C((const void **)&buf);
    v260 = *(uint8_t **)v397;
    if (*(uint8_t **)v397 != &v397[8])
    {
      do
      {
        v350[0] = 0;
        v350[0] = (CFMutableDictionaryRef)CFStringCreateWithFormat(kCFAllocatorDefault, 0, @"%d", *((unsigned int *)v260 + 8));
        v342[0] = 0;
        v261 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
        v342[0] = v261;
        v262 = *((void *)v260 + 5);
        v263 = *((void *)v260 + 6);
        *(void *)&buf.var0 = _NSConcreteStackBlock;
        buf.var2.__r_.__value_.var0.var1.__data_ = (char *)1174405120;
        buf.var2.__r_.__value_.var0.var1.__size_ = (unint64_t)sub_10108A730;
        *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = &unk_101A85588;
        *(void *)&buf.var2.__r_.var0 = v261;
        if (v261) {
          CFRetain(v261);
        }
        while (v262 != v263)
        {
          ((void (*)(CSIPhoneNumber *, uint64_t))buf.var2.__r_.__value_.var0.var1.__size_)(&buf, v262);
          v262 += 24;
        }
        CFDictionaryAddValue((CFMutableDictionaryRef)__p[0], v350[0], v342[0]);
        sub_1000440D4((const void **)&buf.var2.__r_.var0);
        sub_1000440D4(v342);
        sub_1000558F4((const void **)v350);
        v264 = (uint8_t *)*((void *)v260 + 1);
        v228 = v332;
        if (v264)
        {
          do
          {
            v265 = v264;
            v264 = *(uint8_t **)v264;
          }
          while (v264);
        }
        else
        {
          do
          {
            v265 = (uint8_t *)*((void *)v260 + 2);
            v266 = *(void *)v265 == (void)v260;
            v260 = v265;
          }
          while (!v266);
        }
        v260 = v265;
      }
      while (v265 != &v397[8]);
    }
  }
  sub_10004EFE4(&v356, (CFTypeRef *)__p);
  sub_100703778((uint64_t)v397, *(char **)&v397[8]);
  sub_10005717C((const void **)__p);
  v267 = v356;
  if (v356) {
    v268 = sub_100080778;
  }
  else {
    v268 = 0;
  }
  if (v268)
  {
    v269 = *(NSObject **)(v228 + 56);
    if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT))
    {
      v270 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v228 + 144));
      buf.var0 = 136315650;
      *(void *)&buf.var1 = v270;
      WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
      *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
      HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 2112;
      *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = v356;
      _os_log_impl((void *)&_mh_execute_header, v269, OS_LOG_TYPE_DEFAULT, "#I %s%sEmergencyNumbers: %@", (uint8_t *)&buf, 0x20u);
      v267 = v356;
    }
    CFDictionaryAddValue(theDict, @"emergencyNumbers", v267);
  }
  v271 = (std::mutex *)Registry::getServiceMap(*v331);
  v272 = v271;
  if (v249 < 0)
  {
    v273 = (unsigned __int8 *)(v249 & 0x7FFFFFFFFFFFFFFFLL);
    v274 = 5381;
    do
    {
      v249 = v274;
      v275 = *v273++;
      v274 = (33 * v274) ^ v275;
    }
    while (v275);
  }
  std::mutex::lock(v271);
  *(void *)&buf.var0 = v249;
  v276 = sub_10004D37C(&v272[1].__m_.__sig, (unint64_t *)&buf);
  if (!v276)
  {
    v277 = 0;
LABEL_429:
    std::mutex::unlock(v272);
    v278 = 0;
    v279 = 1;
    if (!v277) {
      goto LABEL_460;
    }
    goto LABEL_430;
  }
  v277 = v276[3];
  v278 = (std::__shared_weak_count *)v276[4];
  if (!v278) {
    goto LABEL_429;
  }
  atomic_fetch_add_explicit(&v278->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v272);
  atomic_fetch_add_explicit(&v278->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v278);
  v279 = 0;
  if (!v277) {
    goto LABEL_460;
  }
LABEL_430:
  *(void *)&v380 = 0;
  v378 = 0u;
  v379 = 0u;
  *(_OWORD *)v376 = 0u;
  *(_OWORD *)v377 = 0u;
  *(_OWORD *)__src = 0u;
  memset(&buf, 0, sizeof(buf));
  (*(void (**)(CSIPhoneNumber *__return_ptr, uint64_t, void))(*(void *)v277 + 88))(&buf, v277, 0);
  v350[0] = 0;
  v350[1] = 0;
  v351 = 0;
  CSIPhoneNumber::getFullOriginalNumber((uint64_t *)v350, &buf);
  v280 = *(NSObject **)(v228 + 56);
  if (os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT))
  {
    v281 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v228 + 144));
    v282 = v350;
    if (v351 < 0) {
      v282 = (CFMutableDictionaryRef *)v350[0];
    }
    *(_DWORD *)v397 = 136315650;
    *(void *)&v397[4] = v281;
    *(_WORD *)&v397[12] = 2080;
    *(void *)&v397[14] = " ";
    *(_WORD *)&v397[22] = 2080;
    v398[0] = v282;
    _os_log_impl((void *)&_mh_execute_header, v280, OS_LOG_TYPE_DEFAULT, "#I %s%sPreferred emergency number: %s", v397, 0x20u);
  }
  v283 = theDict;
  if (SHIBYTE(v351) < 0)
  {
    sub_10004FC84(v348, v350[0], (unint64_t)v350[1]);
  }
  else
  {
    *(_OWORD *)v348 = *(_OWORD *)v350;
    v349 = v351;
  }
  if (SHIBYTE(v349) < 0)
  {
    sub_10004FC84(__p, v348[0], (unint64_t)v348[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v348;
    v373 = v349;
  }
  v371 = 0;
  if (SHIBYTE(v373) < 0)
  {
    sub_10004FC84(v397, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v397 = *(_OWORD *)__p;
    *(void *)&v397[16] = v373;
  }
  theArray[0] = 0;
  if (ctu::cf::convert_copy())
  {
    v284 = v371;
    v371 = theArray[0];
    v342[0] = v284;
    sub_1000558F4(v342);
  }
  if ((char)v397[23] < 0) {
    operator delete(*(void **)v397);
  }
  v370 = (CFDictionaryRef)v371;
  v371 = 0;
  sub_1000558F4((const void **)&v371);
  if (SHIBYTE(v373) < 0) {
    operator delete(__p[0]);
  }
  CFDictionaryAddValue(v283, @"preferredEmergencyNumber", v370);
  sub_1000558F4((const void **)&v370);
  if (SHIBYTE(v349) < 0) {
    operator delete(v348[0]);
  }
  if (SHIBYTE(v351) < 0) {
    operator delete(v350[0]);
  }
  if (SHIBYTE(v378) < 0) {
    operator delete(v377[1]);
  }
  if (SHIBYTE(v377[0]) < 0) {
    operator delete(v376[0]);
  }
  if (SHIBYTE(__src[0]) < 0) {
    operator delete(*(void **)&buf.var2.__r_.var0);
  }
  if ((*((char *)&buf.var2.__r_.__value_.var0.var1 + 23) & 0x80000000) == 0)
  {
LABEL_460:
    if (v279) {
      goto LABEL_462;
    }
    goto LABEL_461;
  }
  operator delete(buf.var2.__r_.__value_.var0.var1.__data_);
  if ((v279 & 1) == 0) {
LABEL_461:
  }
    sub_10004D2C8(v278);
LABEL_462:
  __p[1] = 0;
  __p[0] = 0;
  v373 = 0;
  v285 = (std::mutex *)Registry::getServiceMap(*v331);
  v286 = v285;
  v288 = v287;
  if (v287 < 0)
  {
    v289 = (unsigned __int8 *)(v287 & 0x7FFFFFFFFFFFFFFFLL);
    v290 = 5381;
    do
    {
      v288 = v290;
      v291 = *v289++;
      v290 = (33 * v290) ^ v291;
    }
    while (v291);
  }
  std::mutex::lock(v285);
  *(void *)&buf.var0 = v288;
  v292 = sub_10004D37C(&v286[1].__m_.__sig, (unint64_t *)&buf);
  if (v292)
  {
    v294 = v292[3];
    v293 = (std::__shared_weak_count *)v292[4];
    if (v293)
    {
      atomic_fetch_add_explicit(&v293->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v286);
      atomic_fetch_add_explicit(&v293->__shared_owners_, 1uLL, memory_order_relaxed);
      v228 = v332;
      sub_10004D2C8(v293);
      v295 = 0;
      goto LABEL_470;
    }
  }
  else
  {
    v294 = 0;
  }
  std::mutex::unlock(v286);
  v293 = 0;
  v295 = 1;
LABEL_470:
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void))(*(void *)v294 + 48))(__p, v294, 1, *(unsigned int *)(**(void **)(v228 + 144) + 52));
  if ((v295 & 1) == 0) {
    sub_10004D2C8(v293);
  }
  if (SHIBYTE(v373) < 0)
  {
    if (!__p[1]) {
      goto LABEL_493;
    }
    v296 = theDict;
    sub_10004FC84(v346, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    if (!HIBYTE(v373)) {
      goto LABEL_493;
    }
    v296 = theDict;
    *(_OWORD *)v346 = *(_OWORD *)__p;
    v347 = v373;
  }
  if (SHIBYTE(v347) < 0)
  {
    sub_10004FC84(v397, v346[0], (unint64_t)v346[1]);
  }
  else
  {
    *(_OWORD *)v397 = *(_OWORD *)v346;
    *(void *)&v397[16] = v347;
  }
  theArray[0] = 0;
  if ((char)v397[23] < 0)
  {
    sub_10004FC84(&buf, *(void **)v397, *(unint64_t *)&v397[8]);
  }
  else
  {
    *(_OWORD *)&buf.var0 = *(_OWORD *)v397;
    buf.var2.__r_.__value_.var0.var1.__size_ = *(void *)&v397[16];
  }
  v342[0] = 0;
  if (ctu::cf::convert_copy())
  {
    v297 = theArray[0];
    theArray[0] = (CFArrayRef)v342[0];
    v350[0] = v297;
    sub_1000558F4((const void **)v350);
  }
  if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
    operator delete(*(void **)&buf.var0);
  }
  v371 = theArray[0];
  theArray[0] = 0;
  sub_1000558F4((const void **)theArray);
  if ((char)v397[23] < 0) {
    operator delete(*(void **)v397);
  }
  CFDictionaryAddValue(v296, @"carrierBundleName", v371);
  sub_1000558F4((const void **)&v371);
  if (SHIBYTE(v347) < 0) {
    operator delete(v346[0]);
  }
LABEL_493:
  v350[0] = 0;
  v350[1] = 0;
  v351 = 0;
  v298 = (std::mutex *)Registry::getServiceMap(*v331);
  v299 = v298;
  if (v287 < 0)
  {
    v300 = (unsigned __int8 *)(v287 & 0x7FFFFFFFFFFFFFFFLL);
    v301 = 5381;
    do
    {
      v287 = v301;
      v302 = *v300++;
      v301 = (33 * v301) ^ v302;
    }
    while (v302);
  }
  std::mutex::lock(v298);
  *(void *)&buf.var0 = v287;
  v303 = sub_10004D37C(&v299[1].__m_.__sig, (unint64_t *)&buf);
  if (v303)
  {
    v305 = v303[3];
    v304 = (std::__shared_weak_count *)v303[4];
    if (v304)
    {
      atomic_fetch_add_explicit(&v304->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v299);
      atomic_fetch_add_explicit(&v304->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v304);
      v306 = 0;
      goto LABEL_501;
    }
  }
  else
  {
    v305 = 0;
  }
  std::mutex::unlock(v299);
  v304 = 0;
  v306 = 1;
LABEL_501:
  (*(void (**)(CFMutableDictionaryRef *__return_ptr, uint64_t, uint64_t, void))(*(void *)v305 + 48))(v350, v305, 4, *(unsigned int *)(**(void **)(v228 + 144) + 52));
  if ((v306 & 1) == 0) {
    sub_10004D2C8(v304);
  }
  if (SHIBYTE(v351) < 0)
  {
    if (!v350[1]) {
      goto LABEL_522;
    }
    v307 = theDict;
    sub_10004FC84(v344, v350[0], (unint64_t)v350[1]);
  }
  else
  {
    if (!HIBYTE(v351)) {
      goto LABEL_522;
    }
    v307 = theDict;
    *(_OWORD *)v344 = *(_OWORD *)v350;
    v345 = v351;
  }
  if (SHIBYTE(v345) < 0)
  {
    sub_10004FC84(v397, v344[0], (unint64_t)v344[1]);
  }
  else
  {
    *(_OWORD *)v397 = *(_OWORD *)v344;
    *(void *)&v397[16] = v345;
  }
  v371 = 0;
  if ((char)v397[23] < 0)
  {
    sub_10004FC84(&buf, *(void **)v397, *(unint64_t *)&v397[8]);
  }
  else
  {
    *(_OWORD *)&buf.var0 = *(_OWORD *)v397;
    buf.var2.__r_.__value_.var0.var1.__size_ = *(void *)&v397[16];
  }
  theArray[0] = 0;
  if (ctu::cf::convert_copy())
  {
    v308 = v371;
    v371 = theArray[0];
    v342[0] = v308;
    sub_1000558F4(v342);
  }
  if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
    operator delete(*(void **)&buf.var0);
  }
  v370 = (CFDictionaryRef)v371;
  v371 = 0;
  sub_1000558F4((const void **)&v371);
  if ((char)v397[23] < 0) {
    operator delete(*(void **)v397);
  }
  CFDictionaryAddValue(v307, @"defaultBundleName", v370);
  sub_1000558F4((const void **)&v370);
  if (SHIBYTE(v345) < 0) {
    operator delete(v344[0]);
  }
LABEL_522:
  v342[0] = 0;
  v342[1] = 0;
  v343 = 0;
  buf.var2.__r_.__value_.var0.var1.__data_ = 0;
  *(void *)&buf.var0 = 0;
  sGetSubscriberSimInterface();
  if (*(void *)&buf.var0) {
    (*(void (**)(void, void, uint64_t, CFTypeRef *))(**(void **)&buf.var0 + 200))(*(void *)&buf.var0, *(unsigned int *)(**(void **)(v228 + 144) + 52), 3, v342);
  }
  if (buf.var2.__r_.__value_.var0.var1.__data_) {
    sub_10004D2C8((std::__shared_weak_count *)buf.var2.__r_.__value_.var0.var1.__data_);
  }
  v355 = 0;
  if (SHIBYTE(v343) < 0)
  {
    sub_10004FC84(v340, (void *)v342[0], (unint64_t)v342[1]);
  }
  else
  {
    *(_OWORD *)v340 = *(_OWORD *)v342;
    v341 = v343;
  }
  if (SHIBYTE(v341) < 0)
  {
    sub_10004FC84(v397, v340[0], (unint64_t)v340[1]);
  }
  else
  {
    *(_OWORD *)v397 = *(_OWORD *)v340;
    *(void *)&v397[16] = v341;
  }
  v370 = 0;
  if ((char)v397[23] < 0)
  {
    sub_10004FC84(&buf, *(void **)v397, *(unint64_t *)&v397[8]);
  }
  else
  {
    *(_OWORD *)&buf.var0 = *(_OWORD *)v397;
    buf.var2.__r_.__value_.var0.var1.__size_ = *(void *)&v397[16];
  }
  v371 = 0;
  if (ctu::cf::convert_copy())
  {
    v309 = v370;
    v370 = (CFDictionaryRef)v371;
    theArray[0] = v309;
    sub_1000558F4((const void **)theArray);
  }
  if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
    operator delete(*(void **)&buf.var0);
  }
  v355 = v370;
  v370 = 0;
  sub_1000558F4((const void **)&v370);
  if ((char)v397[23] < 0) {
    operator delete(*(void **)v397);
  }
  if (SHIBYTE(v341) < 0) {
    operator delete(v340[0]);
  }
  v354 = 0;
  v339 = 0;
  if (sub_100013084((const __CFString *)v355, (const void **)&v354, (const void **)&v339))
  {
    CFDictionaryAddValue(theDict, @"carrierMCC", v354);
    CFDictionaryAddValue(theDict, @"carrierMNC", v339);
    memset(v338, 0, 7);
    v310 = (std::mutex *)Registry::getServiceMap(*v331);
    v311 = v310;
    if (v312 < 0)
    {
      v313 = (unsigned __int8 *)(v312 & 0x7FFFFFFFFFFFFFFFLL);
      v314 = 5381;
      do
      {
        v312 = v314;
        v315 = *v313++;
        v314 = (33 * v314) ^ v315;
      }
      while (v315);
    }
    std::mutex::lock(v310);
    *(void *)&buf.var0 = v312;
    v316 = sub_10004D37C(&v311[1].__m_.__sig, (unint64_t *)&buf);
    if (v316)
    {
      v318 = (void *)v316[3];
      v317 = (std::__shared_weak_count *)v316[4];
      if (v317)
      {
        atomic_fetch_add_explicit(&v317->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v311);
        atomic_fetch_add_explicit(&v317->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v317);
        v319 = 0;
        if (!v318)
        {
LABEL_550:
          v320 = 0;
          v321 = 0;
          goto LABEL_557;
        }
LABEL_555:
        memset(&buf, 0, 24);
        ctu::cf::assign();
        *(_OWORD *)CFArrayRef theArray = *(_OWORD *)&buf.var0;
        std::string::size_type size = buf.var2.__r_.__value_.var0.var1.__size_;
        (*(void (**)(uint8_t *__return_ptr, void *, CFArrayRef *))(*(void *)v318 + 24))(v397, v318, theArray);
        v320 = *(void **)v397;
        v318 = *(void **)&v397[8];
        v338[0] = *(_DWORD *)&v397[16];
        *(_DWORD *)((char *)v338 + 3) = *(_DWORD *)&v397[19];
        v321 = v397[23];
        v397[23] = 0;
        v397[0] = 0;
        if (SHIBYTE(size) < 0) {
          operator delete(theArray[0]);
        }
LABEL_557:
        if ((v319 & 1) == 0) {
          sub_10004D2C8(v317);
        }
        v324 = theDict;
        if ((v321 & 0x80) != 0)
        {
          sub_10004FC84(v333, v320, (unint64_t)v318);
          if (SHIBYTE(v334) < 0)
          {
            sub_10004FC84(v397, v333[0], (unint64_t)v333[1]);
LABEL_563:
            v370 = 0;
            if ((char)v397[23] < 0)
            {
              sub_10004FC84(&buf, *(void **)v397, *(unint64_t *)&v397[8]);
            }
            else
            {
              *(_OWORD *)&buf.var0 = *(_OWORD *)v397;
              buf.var2.__r_.__value_.var0.var1.__size_ = *(void *)&v397[16];
            }
            v371 = 0;
            if (ctu::cf::convert_copy())
            {
              v325 = v370;
              v370 = (CFDictionaryRef)v371;
              theArray[0] = v325;
              sub_1000558F4((const void **)theArray);
            }
            if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
              operator delete(*(void **)&buf.var0);
            }
            v335 = v370;
            v370 = 0;
            sub_1000558F4((const void **)&v370);
            if ((char)v397[23] < 0) {
              operator delete(*(void **)v397);
            }
            CFDictionaryAddValue(v324, @"carrierIsoMCC", v335);
            sub_1000558F4((const void **)&v335);
            if (SHIBYTE(v334) < 0)
            {
              operator delete(v333[0]);
              if ((v321 & 0x80) == 0) {
                goto LABEL_574;
              }
            }
            else if ((v321 & 0x80) == 0)
            {
LABEL_574:
              v228 = v332;
              goto LABEL_575;
            }
            operator delete(v320);
            goto LABEL_574;
          }
        }
        else
        {
          v333[0] = v320;
          v333[1] = v318;
          LODWORD(v334) = v338[0];
          *(_DWORD *)((char *)&v334 + 3) = *(_DWORD *)((char *)v338 + 3);
          HIBYTE(v334) = v321;
        }
        *(_OWORD *)v397 = *(_OWORD *)v333;
        *(void *)&v397[16] = v334;
        goto LABEL_563;
      }
    }
    else
    {
      v318 = 0;
    }
    std::mutex::unlock(v311);
    v317 = 0;
    v319 = 1;
    if (!v318) {
      goto LABEL_550;
    }
    goto LABEL_555;
  }
  v322 = *(NSObject **)(v228 + 56);
  if (os_log_type_enabled(v322, OS_LOG_TYPE_DEFAULT))
  {
    v323 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v228 + 144));
    buf.var0 = 136315394;
    *(void *)&buf.var1 = v323;
    WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
    *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
    _os_log_impl((void *)&_mh_execute_header, v322, OS_LOG_TYPE_DEFAULT, "#I %s%sfailed to copyMCCMNCFromIMSI", (uint8_t *)&buf, 0x16u);
  }
LABEL_575:
  sub_100810B58(v228, 0, theDict, 1, 1);
  v326 = (void *)(v228 + 184);
  (*(void (**)(void, uint64_t))(**(void **)(*(void *)(v228 + 168) + 152) + 40))(*(void *)(*(void *)(v228 + 168) + 152), v228 + 184);
  *(_WORD *)(v228 + 840) = 0;
  v327 = *(NSObject **)(v228 + 56);
  if (os_log_type_enabled(v327, OS_LOG_TYPE_DEFAULT))
  {
    v328 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v228 + 144));
    if (*(char *)(v228 + 207) < 0) {
      v326 = (void *)*v326;
    }
    buf.var0 = 136315650;
    *(void *)&buf.var1 = v328;
    WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
    *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = " ";
    HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 2080;
    *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = v326;
    _os_log_impl((void *)&_mh_execute_header, v327, OS_LOG_TYPE_DEFAULT, "#I %s%sThumper account %s created and pushed into cloud", (uint8_t *)&buf, 0x20u);
  }
  sub_1000558F4((const void **)&v339);
  sub_1000558F4((const void **)&v354);
  sub_1000558F4((const void **)&v355);
  if (SHIBYTE(v343) < 0) {
    operator delete((void *)v342[0]);
  }
  if (SHIBYTE(v351) < 0) {
    operator delete(v350[0]);
  }
  if (SHIBYTE(v373) < 0) {
    operator delete(__p[0]);
  }
  sub_100057D78((const void **)&v356);
  sub_100030068((const void **)&v357);
  if (SHIBYTE(v367) < 0) {
    operator delete((void *)value);
  }
  if (v330) {
    sub_10004D2C8(v330);
  }
  return sub_10005717C((const void **)&theDict);
}

void sub_101087654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,const void *a60)
{
  sub_10005717C((const void **)&a51);
  if (v60) {
    sub_10004D2C8(v60);
  }
  sub_10005717C((const void **)&STACK[0x240]);
  sub_100057D78((const void **)&STACK[0x230]);
  sub_100057D78((const void **)&STACK[0x238]);
  sub_10005717C((const void **)&a27);
  sub_100030068(&a60);
  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  sub_10005717C((const void **)&STACK[0x228]);
  _Unwind_Resume(a1);
}

const void **sub_10108816C(uint64_t a1)
{
  BOOL v55 = 0;
  CFDictionaryRef theDict = 0;
  sub_1007FFAA4(*(void **)(a1 + 168), 1, (void **)(a1 + 184), 0, &v55);
  CFMutableDictionaryRef v54 = 0;
  if (theDict) {
    uint64_t v2 = sub_100080778;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2) {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  }
  else {
    CFDictionaryRef MutableCopy = CFDictionaryCreateMutable(0, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
  CFMutableDictionaryRef v54 = MutableCopy;
  int v4 = CFDictionaryGetValue(MutableCopy, @"whiteList");
  CFAllocatorRef v5 = v4;
  if (v4)
  {
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 != CFArrayGetTypeID()) {
      CFAllocatorRef v5 = 0;
    }
  }
  if (sub_10107DCE0(a1))
  {
    if (!v5)
    {
      value[0] = 0;
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        uint64_t v8 = value[0];
        value[0] = Mutable;
        *(void *)std::string buf = v8;
        sub_1000440D4((const void **)buf);
      }
      CFDictionarySetValue(v54, @"whiteList", value[0]);
      sub_1000440D4((const void **)value);
    }
  }
  else if (v5)
  {
    CFDictionaryRemoveValue(v54, @"whiteList");
  }
  CFDictionaryRef v9 = theDict;
  char v10 = *(std::__shared_weak_count **)(a1 + 824);
  __dst[0] = *(void **)(a1 + 816);
  __dst[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  value[0] = 0;
  value[1] = 0;
  sub_1010825D0(value, a1, (uint64_t)v9, (uint64_t *)__dst);
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (value[0])
  {
    std::string::size_type v11 = *(const void ***)value[0];
    unint64_t v12 = (const void **)*((void *)value[0] + 1);
    uint64_t v13 = (uint64_t)v12 - *(void *)value[0];
    uint64_t v14 = v13 >> 3;
    if (v13)
    {
      do
      {
        *(void *)std::string buf = 0;
        unsigned int v15 = sub_100083DA4((const void **)buf, v11);
        if (*(void *)buf) {
          uint64_t v16 = sub_1000810B8;
        }
        else {
          uint64_t v16 = 0;
        }
        v14 -= v16 != 0;
        sub_1000558F4(v15);
        ++v11;
      }
      while (v11 != v12);
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  unsigned int v17 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v18;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    *(_WORD *)&buf[22] = 2048;
    *(void *)&uint8_t buf[24] = v14;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I %s%sDetected %zu foreign devices on account", buf, 0x20u);
  }
  if (value[1]) {
    sub_10004D2C8((std::__shared_weak_count *)value[1]);
  }
  unint64_t v19 = v54;
  if (v14)
  {
    value[0] = 0;
    *(void *)std::string buf = v14;
    CFNumberRef v20 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, buf);
    if (v20)
    {
      char v21 = value[0];
      value[0] = v20;
      *(void *)std::string buf = v21;
      sub_1000570E8((const void **)buf);
    }
    __dst[0] = value[0];
    value[0] = 0;
    sub_1000570E8((const void **)value);
    CFDictionarySetValue(v19, @"foreignDevicesCount", __dst[0]);
    sub_1000570E8((const void **)__dst);
  }
  else
  {
    CFDictionaryRemoveValue(v54, @"foreignDevicesCount");
  }
  if (theDict) {
    std::string::size_type v22 = sub_100080778;
  }
  else {
    std::string::size_type v22 = 0;
  }
  if (!v22 || !CFEqual(theDict, v54)) {
    sub_100810B58(a1, 1u, v54, 1, 0);
  }
  if (sub_10107DCE0(a1))
  {
    uint64_t v67 = 0;
    long long v65 = 0u;
    long long v66 = 0u;
    memset(buf, 0, sizeof(buf));
    sub_10107F924((uint64_t)buf, a1);
    memset(value, 0, sizeof(value));
    sub_1010800B0((uint64_t)value, a1);
    std::string::size_type v23 = *(const void ***)buf;
    int v24 = *(const void ***)&buf[8];
    if (*(void *)buf != *(void *)&buf[8])
    {
      char v25 = 0;
      while (1)
      {
        __dst[0] = 0;
        __dst[1] = 0;
        __int16 v61 = 0;
        ctu::cf::assign();
        CFMutableArrayRef v59 = v61;
        *(_OWORD *)long long __p = *(_OWORD *)__dst;
        if (SHIBYTE(value[3]) >= 0) {
          uint64_t v26 = (void *)HIBYTE(value[3]);
        }
        else {
          uint64_t v26 = value[2];
        }
        uint64_t v27 = (void *)HIBYTE(v59);
        int v28 = SHIBYTE(v59);
        if (SHIBYTE(v59) < 0) {
          uint64_t v27 = __p[1];
        }
        if (v26 == v27) {
          break;
        }
        BOOL v38 = 0;
        if (SHIBYTE(v59) < 0) {
          goto LABEL_74;
        }
LABEL_65:
        if (LOBYTE(value[0])) {
          BOOL v39 = v38;
        }
        else {
          BOOL v39 = 0;
        }
        if (v39 && BYTE1(value[0]) == 0) {
          sub_101082A70(a1, 0, *v23);
        }
        else {
          v25 |= v38;
        }
        if (++v23 == v24) {
          goto LABEL_87;
        }
      }
      if (SHIBYTE(v59) >= 0) {
        uint64_t v29 = __p;
      }
      else {
        uint64_t v29 = (void **)__p[0];
      }
      if ((HIBYTE(value[3]) & 0x80) != 0)
      {
        BOOL v38 = memcmp(value[1], v29, (size_t)value[2]) == 0;
        if ((v28 & 0x80000000) == 0) {
          goto LABEL_65;
        }
      }
      else if (HIBYTE(value[3]))
      {
        uint64_t v30 = HIBYTE(value[3]) - 1;
        CFAllocatorRef v31 = &value[1];
        do
        {
          int v33 = *(unsigned __int8 *)v31;
          CFAllocatorRef v31 = (void **)((char *)v31 + 1);
          int v32 = v33;
          int v35 = *(unsigned __int8 *)v29;
          uint64_t v29 = (void **)((char *)v29 + 1);
          int v34 = v35;
          BOOL v37 = v30-- != 0;
          BOOL v38 = v32 == v34;
        }
        while (v32 == v34 && v37);
        if ((SHIBYTE(v59) & 0x80000000) == 0) {
          goto LABEL_65;
        }
      }
      else
      {
        BOOL v38 = 1;
        if ((SHIBYTE(v59) & 0x80000000) == 0) {
          goto LABEL_65;
        }
      }
LABEL_74:
      operator delete(__p[0]);
      goto LABEL_65;
    }
    char v25 = 0;
LABEL_87:
    std::string::size_type v43 = *(const void ***)&buf[24];
    uint64_t v44 = (const void **)v65;
    while (v43 != v44)
      sub_101082A70(a1, 0, *v43++);
    uint64_t v46 = (const void **)*((void *)&v66 + 1);
    for (CFIndex i = (const void **)v66; i != v46; ++i)
      sub_101082A70(a1, 0, *i);
    if (!(v25 & 1 | (LOBYTE(value[0]) == 0)) && BYTE1(value[0]))
    {
      if (SHIBYTE(value[3]) < 0)
      {
        sub_10004FC84(v50, value[1], (unint64_t)value[2]);
      }
      else
      {
        *(_OWORD *)uint64_t v50 = *(_OWORD *)&value[1];
        uint64_t v51 = value[3];
      }
      if (SHIBYTE(v51) < 0)
      {
        sub_10004FC84(__p, v50[0], (unint64_t)v50[1]);
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)v50;
        CFMutableArrayRef v59 = v51;
      }
      uint64_t v57 = 0;
      if (SHIBYTE(v59) < 0)
      {
        sub_10004FC84(__dst, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)long long __dst = *(_OWORD *)__p;
        __int16 v61 = v59;
      }
      uint32_t v62 = 0;
      if (ctu::cf::convert_copy())
      {
        uint64_t v47 = v57;
        uint64_t v57 = v62;
        CFDictionaryRef v63 = v47;
        sub_1000558F4(&v63);
      }
      if (SHIBYTE(v61) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v48 = v57;
      int v52 = v57;
      uint64_t v57 = 0;
      sub_1000558F4(&v57);
      if (SHIBYTE(v59) < 0) {
        operator delete(__p[0]);
      }
      sub_1010889D8(a1, 0, v48);
      sub_1000558F4(&v52);
      if (SHIBYTE(v51) < 0) {
        operator delete(v50[0]);
      }
    }
    if (SHIBYTE(value[3]) < 0) {
      operator delete(value[1]);
    }
    value[0] = &v66;
    sub_100084178((void ***)value);
    value[0] = &buf[24];
    sub_100084178((void ***)value);
    value[0] = buf;
  }
  else
  {
    uint64_t v67 = 0;
    long long v65 = 0u;
    long long v66 = 0u;
    memset(buf, 0, sizeof(buf));
    sub_10107F924((uint64_t)buf, a1);
    uint64_t v42 = (const void **)*((void *)&v66 + 1);
    for (j = (const void **)v66; j != v42; ++j)
      sub_101082A70(a1, 0, *j);
    value[0] = &v66;
    sub_100084178((void ***)value);
    value[0] = &buf[24];
    sub_100084178((void ***)value);
    value[0] = buf;
  }
  sub_100084178((void ***)value);
  sub_10005717C((const void **)&v54);
  return sub_100057D78((const void **)&theDict);
}

void sub_1010888A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,const void *a26,uint64_t a27,uint64_t a28,const void *a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  sub_1000558F4(&a29);
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_10107FD24((void **)(v43 - 160));
  sub_10005717C(&a26);
  sub_100057D78(v42);
  _Unwind_Resume(a1);
}

const void **sub_1010889D8(uint64_t a1, void **cf, const void *a3)
{
  CFStringRef v88 = 0;
  if (cf)
  {
    CFStringRef v88 = cf;
    CFRetain(cf);
  }
  else
  {
    if (*(char *)(a1 + 207) < 0)
    {
      sub_10004FC84(&__p, *(void **)(a1 + 184), *(void *)(a1 + 192));
    }
    else
    {
      long long __p = *(_OWORD *)(a1 + 184);
      uint64_t v87 = *(void *)(a1 + 200);
    }
    if (SHIBYTE(v87) < 0)
    {
      sub_10004FC84(&__dst, (void *)__p, *((unint64_t *)&__p + 1));
    }
    else
    {
      long long __dst = __p;
      uint64_t v90 = v87;
    }
    values[0] = 0;
    if (SHIBYTE(v90) < 0)
    {
      sub_10004FC84(buf, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      *(_OWORD *)std::string buf = __dst;
      *(void *)&buf[16] = v90;
    }
    v82[0] = 0;
    if (ctu::cf::convert_copy())
    {
      CFAllocatorRef v5 = values[0];
      values[0] = (void **)v82[0];
      *(void *)&long long v84 = v5;
      sub_1000558F4((const void **)&v84);
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    CFStringRef v88 = values[0];
    values[0] = 0;
    sub_1000558F4((const void **)values);
    if (SHIBYTE(v90) < 0) {
      operator delete((void *)__dst);
    }
    if (SHIBYTE(v87) < 0) {
      operator delete((void *)__p);
    }
  }
  long long v84 = 0uLL;
  uint64_t v85 = 0;
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  long long v84 = *(_OWORD *)buf;
  uint64_t v85 = *(void *)&buf[16];
  v82[0] = 0;
  v82[1] = 0;
  uint64_t v83 = 0;
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  long long __dst = *(_OWORD *)buf;
  uint64_t v90 = *(void *)&buf[16];
  if ((buf[23] & 0x80u) == 0) {
    p_dst = (char *)&__dst;
  }
  else {
    p_dst = (char *)__dst;
  }
  sub_100058DB0(v82, p_dst);
  if (SHIBYTE(v90) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v7 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    CFDictionaryRef v9 = v82;
    if (v83 < 0) {
      CFDictionaryRef v9 = (void **)v82[0];
    }
    char v10 = &v84;
    if (v85 < 0) {
      char v10 = (long long *)v84;
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    *(_WORD *)&buf[22] = 2080;
    uint64_t v92 = v9;
    __int16 v93 = 2080;
    *(void *)uint64_t v94 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s%sadding dev:%s to account: %s", buf, 0x2Au);
  }
  v80 = 0;
  CFDictionaryRef theDict = 0;
  sub_1007FFAA4(*(void **)(a1 + 168), 0, (void **)(a1 + 184), 0, &v80);
  if (theDict) {
    std::string::size_type v11 = sub_100080778;
  }
  else {
    std::string::size_type v11 = 0;
  }
  if (v11)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"cfgSlots");
    CFArrayRef v13 = Value;
    if (Value && (CFTypeID v14 = CFGetTypeID(Value), v14 == CFArrayGetTypeID()))
    {
      int Count = CFArrayGetCount(v13);
    }
    else
    {
      uint64_t v16 = (int *)CFDictionaryGetValue(theDict, @"maxDeviceNumber");
      unsigned int v17 = v16;
      *(_DWORD *)std::string buf = 5;
      if (v16)
      {
        CFTypeID v18 = CFGetTypeID(v16);
        if (v18 == CFNumberGetTypeID()) {
          ctu::cf::assign((ctu::cf *)buf, v17, v19);
        }
      }
      int Count = *(_DWORD *)buf;
    }
    key = 0;
    uint64_t v79 = 0;
    int v76 = 0;
    CFDictionaryRef v77 = 0;
    sub_1007FFAA4(*(void **)(a1 + 168), 1, (void **)(a1 + 184), 0, &v76);
    if (v77) {
      CFNumberRef v20 = sub_100080778;
    }
    else {
      CFNumberRef v20 = 0;
    }
    if (v20)
    {
      CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(v77, @"assignments");
      CFDictionaryRef v22 = v21;
      if (v21)
      {
        int v23 = CFDictionaryGetCount(v21);
        if (v23)
        {
          long long __dst = 0uLL;
          uint64_t v90 = 0;
          sub_10019E8F0(&__dst, v23);
          values[0] = 0;
          values[1] = 0;
          uint64_t v75 = 0;
          sub_10004EE3C(values, v23);
          CFDictionaryGetKeysAndValues(v22, (const void **)__dst, (const void **)values[0]);
          if (v23 < 1)
          {
            int v28 = 0;
          }
          else
          {
            uint64_t v24 = 0;
            while (1)
            {
              char v25 = values[0][v24];
              if (v25)
              {
                CFTypeID v26 = CFGetTypeID(values[0][v24]);
                uint64_t v27 = v26 == CFStringGetTypeID() ? v25 : 0;
              }
              else
              {
                uint64_t v27 = 0;
              }
              if (CFEqual(a3, v27)) {
                break;
              }
              if (v23 == ++v24)
              {
                int v28 = 0;
                goto LABEL_69;
              }
            }
            *(void *)std::string buf = *(void *)(__dst + v24 * 8);
            sub_100013168(&v79, (CFTypeRef *)buf);
            memset(buf, 0, sizeof(buf));
            ctu::cf::assign();
            uint64_t v73 = *(void *)&buf[16];
            *(_OWORD *)long long v72 = *(_OWORD *)buf;
            if ((char)buf[23] < 0)
            {
              int v28 = atoi(v72[0]);
              operator delete(v72[0]);
            }
            else
            {
              int v28 = atoi((const char *)v72);
            }
          }
LABEL_69:
          if (values[0])
          {
            values[1] = values[0];
            operator delete(values[0]);
          }
          if ((void)__dst)
          {
            *((void *)&__dst + 1) = __dst;
            operator delete((void *)__dst);
          }
        }
        else
        {
          int v28 = 0;
        }
      }
      else
      {
        int v28 = 0;
        int v23 = 0;
      }
      int v33 = (int *)CFDictionaryGetValue(v77, @"foreignDevicesCount");
      int v34 = v33;
      *(_DWORD *)std::string buf = 0;
      if (v33)
      {
        CFTypeID v35 = CFGetTypeID(v33);
        if (v35 == CFNumberGetTypeID()) {
          ctu::cf::assign((ctu::cf *)buf, v34, v36);
        }
      }
      int v32 = *(_DWORD *)buf;
    }
    else
    {
      int v32 = 0;
      int v28 = 0;
      int v23 = 0;
      CFDictionaryRef v22 = 0;
    }
    BOOL v37 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      BOOL v39 = &v84;
      if (v85 < 0) {
        BOOL v39 = (long long *)v84;
      }
      *(_DWORD *)std::string buf = 136316162;
      *(void *)&uint8_t buf[4] = v38;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      *(_WORD *)&buf[22] = 2080;
      uint64_t v92 = v39;
      __int16 v93 = 1024;
      *(_DWORD *)uint64_t v94 = Count;
      *(_WORD *)&v94[4] = 1024;
      *(_DWORD *)&v94[6] = v32;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#I %s%smax devices for account %s: %d, foreign devs:%d", buf, 0x2Cu);
    }
    if (v79) {
      uint64_t v40 = sub_1000810B8;
    }
    else {
      uint64_t v40 = 0;
    }
    if (!v40 && Count > v23 + v32 && Count >= 1)
    {
      uint64_t v41 = 0;
      while (1)
      {
        *(void *)std::string buf = 0;
        CFStringRef v42 = CFStringCreateWithFormat(0, 0, @"%d", v41);
        *(void *)std::string buf = v42;
        if (!v22) {
          break;
        }
        if (!CFDictionaryGetValue(v22, v42)) {
          goto LABEL_93;
        }
        sub_1000558F4((const void **)buf);
        uint64_t v41 = (v41 + 1);
        if (Count == v41) {
          goto LABEL_94;
        }
      }
      LODWORD(v41) = 0;
LABEL_93:
      sub_100083EB8((const void **)&key, (const void **)buf);
      sub_1000558F4((const void **)buf);
      int v28 = v41;
    }
LABEL_94:
    uint64_t v43 = v79;
    if (v79) {
      uint64_t v44 = sub_1000810B8;
    }
    else {
      uint64_t v44 = 0;
    }
    if (v44 || (key ? (unsigned int v45 = sub_1000810B8) : (unsigned int v45 = 0), v45))
    {
      sub_10108A8D0(a1, (uint64_t)a3, v28, 0);
      uint64_t v43 = v79;
    }
    *(void *)(a1 + 976) = *(void *)(a1 + 968);
    if (v43) {
      uint64_t v46 = sub_1000810B8;
    }
    else {
      uint64_t v46 = 0;
    }
    if (v46)
    {
      uint64_t v47 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v48 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
        long long __dst = 0uLL;
        uint64_t v90 = 0;
        ctu::cf::assign();
        *(_OWORD *)values = __dst;
        uint64_t v75 = v90;
        std::string::size_type v49 = (long long *)v84;
        uint64_t v50 = (void **)v82[0];
        uint64_t v51 = values;
        if (v90 < 0) {
          uint64_t v51 = (void ***)__dst;
        }
        if (v83 >= 0) {
          uint64_t v50 = v82;
        }
        if (v85 >= 0) {
          std::string::size_type v49 = &v84;
        }
        *(_DWORD *)std::string buf = 136316162;
        *(void *)&uint8_t buf[4] = v48;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        *(_WORD *)&buf[22] = 2080;
        uint64_t v92 = v51;
        __int16 v93 = 2080;
        *(void *)uint64_t v94 = v50;
        *(_WORD *)&v94[8] = 2080;
        BOOL v95 = v49;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#I %s%sfound existing configuration slot %s for dev:%s in account %s", buf, 0x34u);
        if (SHIBYTE(v75) < 0) {
          operator delete(values[0]);
        }
      }
      int v52 = *(const void ***)(a1 + 168);
      int v53 = *(std::__shared_weak_count **)(a1 + 176);
      if (v53) {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100C6CEF8(v52, v88, (uint64_t)a3);
      if (v53) {
        sub_10004D2C8(v53);
      }
    }
    else
    {
      if (key) {
        CFMutableDictionaryRef v54 = sub_1000810B8;
      }
      else {
        CFMutableDictionaryRef v54 = 0;
      }
      if (v54)
      {
        v72[0] = 0;
        if (v77) {
          BOOL v55 = sub_100080778;
        }
        else {
          BOOL v55 = 0;
        }
        if (v55) {
          CFDictionaryRef MutableCopy = (char *)CFDictionaryCreateMutableCopy(0, 0, v77);
        }
        else {
          CFDictionaryRef MutableCopy = (char *)CFDictionaryCreateMutable(0, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        }
        CFMutableDictionaryRef v71 = 0;
        v72[0] = MutableCopy;
        if (v22) {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutableCopy(0, 0, v22);
        }
        else {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        }
        CFMutableDictionaryRef v71 = Mutable;
        CFDictionarySetValue(Mutable, key, a3);
        CFDictionarySetValue((CFMutableDictionaryRef)v72[0], @"assignments", v71);
        __int16 v61 = *(const void ***)(a1 + 168);
        uint32_t v62 = *(std::__shared_weak_count **)(a1 + 176);
        if (v62) {
          atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_100C6CEF8(v61, v88, (uint64_t)a3);
        if (v62) {
          sub_10004D2C8(v62);
        }
        sub_100810B58(a1, 1u, (const __CFDictionary *)v72[0], 1, 1);
        CFDictionaryRef v63 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v64 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
          int v65 = SHIBYTE(v83);
          long long v66 = (void **)v82[0];
          long long __dst = 0uLL;
          uint64_t v90 = 0;
          ctu::cf::assign();
          uint64_t v67 = v82;
          if (v65 < 0) {
            uint64_t v67 = v66;
          }
          *(_OWORD *)values = __dst;
          uint64_t v75 = v90;
          uint64_t v68 = (long long *)v84;
          v69 = values;
          if (v90 < 0) {
            v69 = (void ***)__dst;
          }
          if (v85 >= 0) {
            uint64_t v68 = &v84;
          }
          *(_DWORD *)std::string buf = 136316162;
          *(void *)&uint8_t buf[4] = v64;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          *(_WORD *)&buf[22] = 2080;
          uint64_t v92 = v67;
          __int16 v93 = 2080;
          *(void *)uint64_t v94 = v69;
          *(_WORD *)&v94[8] = 2080;
          BOOL v95 = v68;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#I %s%sdev:%s added to slot %s in account: %s", buf, 0x34u);
          if (SHIBYTE(v75) < 0) {
            operator delete(values[0]);
          }
        }
        sub_10005717C((const void **)&v71);
        sub_10005717C((const void **)v72);
      }
      else
      {
        uint64_t v57 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v58 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
          CFMutableArrayRef v59 = &v84;
          if (v85 < 0) {
            CFMutableArrayRef v59 = (long long *)v84;
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v58;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          *(_WORD *)&buf[22] = 2080;
          uint64_t v92 = v59;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#I %s%saccount %s does not have empty slots", buf, 0x20u);
        }
      }
    }
    sub_100057D78((const void **)&v77);
    sub_1000558F4((const void **)&key);
    sub_1000558F4(&v79);
  }
  else
  {
    uint64_t v29 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      CFAllocatorRef v31 = &v84;
      if (v85 < 0) {
        CFAllocatorRef v31 = (long long *)v84;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v30;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      *(_WORD *)&buf[22] = 2080;
      uint64_t v92 = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I %s%saccount %s not found in the storage", buf, 0x20u);
    }
  }
  sub_100A2FD3C(*(void *)(a1 + 160), 1, 0);
  sub_100057D78((const void **)&theDict);
  if (SHIBYTE(v83) < 0) {
    operator delete(v82[0]);
  }
  if (SHIBYTE(v85) < 0) {
    operator delete((void *)v84);
  }
  return sub_1000558F4((const void **)&v88);
}

void sub_1010895E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  sub_100057D78(v48);
  sub_1000558F4(&a25);
  sub_1000558F4(&a26);
  sub_100057D78(v47);
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  sub_1000558F4((const void **)(v49 - 200));
  _Unwind_Resume(a1);
}

char *sub_101089824(char *__dst, uint64_t a2)
{
  if (__dst[256])
  {
    sub_100179AF8((std::string *)__dst, (const std::string *)a2);
    sub_100179AF8((std::string *)(__dst + 32), (const std::string *)(a2 + 32));
    sub_100179AF8((std::string *)(__dst + 64), (const std::string *)(a2 + 64));
    sub_100179AF8((std::string *)__dst + 4, (const std::string *)(a2 + 96));
    sub_100179AF8((std::string *)(__dst + 128), (const std::string *)(a2 + 128));
    sub_100179AF8((std::string *)(__dst + 160), (const std::string *)(a2 + 160));
    sub_100179AF8((std::string *)__dst + 8, (const std::string *)(a2 + 192));
    sub_100179AF8((std::string *)(__dst + 224), (const std::string *)(a2 + 224));
  }
  else
  {
    sub_100C92174((uint64_t)__dst, (long long *)a2);
    __dst[256] = 1;
  }
  return __dst;
}

uint64_t sub_1010898CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 384) && *(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  if (*(unsigned char *)(a1 + 352) && *(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  if (*(unsigned char *)(a1 + 320) && *(char *)(a1 + 319) < 0) {
    operator delete(*(void **)(a1 + 296));
  }
  if (*(unsigned char *)(a1 + 288) && *(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  if (*(unsigned char *)(a1 + 256)) {
    sub_1003AA7DC(a1);
  }
  return a1;
}

uint64_t sub_101089960(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return a2;
  }
  int v4 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    CFTypeID v6 = (void *)(a1 + 184);
    if (*(char *)(a1 + 207) < 0) {
      CFTypeID v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t v27 = 136315650;
    *(void *)&v27[4] = v5;
    __int16 v28 = 2080;
    uint64_t v29 = " ";
    __int16 v30 = 2080;
    CFAllocatorRef v31 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%sreceived iCloud info on my account:'%s'", v27, 0x20u);
  }
  *(unsigned char *)(a1 + 843) = 1;
  ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)1, *(Registry **)(a1 + 120));
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    char v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)uint64_t v27 = v9;
  CFArrayRef v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)v27);
  if (!v13)
  {
    uint64_t v15 = 0;
    goto LABEL_13;
  }
  uint64_t v15 = v13[3];
  CFTypeID v14 = (std::__shared_weak_count *)v13[4];
  if (!v14)
  {
LABEL_13:
    std::mutex::unlock(v8);
    CFTypeID v14 = 0;
    char v16 = 1;
    goto LABEL_14;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v8);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v14);
  char v16 = 0;
LABEL_14:
  (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, void, void, uint64_t, void))(*(void *)v15 + 16))(v15, **(void **)(a1 + 144) + 24, @"NeedAccountInvalidation", kCFBooleanTrue, kPhoneServicesWalletDomain, 0, 1, 0);
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  *(unsigned char *)(a1 + 232) = 1;
  int v17 = *(_DWORD *)(a1 + 848);
  *(_DWORD *)(a1 + 848) = v17 + 1;
  if (v17)
  {
    CFTypeID v18 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      int v24 = *(_DWORD *)(a1 + 848);
      *(_DWORD *)uint64_t v27 = 136315650;
      *(void *)&v27[4] = v23;
      __int16 v28 = 2080;
      uint64_t v29 = " ";
      __int16 v30 = 1024;
      LODWORD(v31) = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#E %s%s|| cloud updated configuration for my own Thumper account. Collision number %u.", v27, 0x1Cu);
      CFTypeID v18 = *(NSObject **)(a1 + 56);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      *(_DWORD *)uint64_t v27 = 136315394;
      *(void *)&v27[4] = v25;
      __int16 v28 = 2080;
      uint64_t v29 = " ";
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#E %s%s|| Potentially another iPhone with the same phone number is present and active, and pretend it owns the number.", v27, 0x16u);
      CFTypeID v18 = *(NSObject **)(a1 + 56);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      *(_DWORD *)uint64_t v27 = 136315394;
      *(void *)&v27[4] = v26;
      __int16 v28 = 2080;
      uint64_t v29 = " ";
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#E %s%s|| To avoid fighting on cloud - adding reprovisioning delay.", v27, 0x16u);
    }
    uint64_t v20 = *(void *)(a1 + 160);
    uint64_t v19 = a1 + 160;
    sub_100A2B760(v20 + 360, 0);
    uint64_t v21 = *(void *)v19 + 360;
    *(unsigned char *)(*(void *)v19 + 424) = 1;
    sub_100A2B860(v21);
  }
  return a2;
}

void sub_101089CF4(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101089D24(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_101089D2C(uint64_t a1, int a2, CFStringRef theString, const __CFDictionary *a4)
{
  CFDictionaryRef v4 = a4;
  CFDictionaryRef v74 = 0;
  if (*(char *)(a1 + 207) < 0) {
    uint64_t v7 = *(void *)(a1 + 192);
  }
  else {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 207);
  }
  uint64_t v8 = 0;
  if (!a4 || !v7) {
    goto LABEL_103;
  }
  uint64_t v9 = (const void **)(a1 + 184);
  if (CFStringHasPrefix(theString, @"dev."))
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, @"accounts");
    CFDictionaryRef v11 = Value;
    if (!Value) {
      goto LABEL_102;
    }
    CFTypeID v12 = CFGetTypeID(Value);
    if (v12 != CFDictionaryGetTypeID()) {
      goto LABEL_102;
    }
    if (*(char *)(a1 + 207) < 0)
    {
      sub_10004FC84(__dst, *(void **)(a1 + 184), *(void *)(a1 + 192));
    }
    else
    {
      *(_OWORD *)long long __dst = *(_OWORD *)v9;
      long long v72 = *(void **)(a1 + 200);
    }
    if (SHIBYTE(v72) < 0)
    {
      sub_10004FC84(theDict, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      *(_OWORD *)CFDictionaryRef theDict = *(_OWORD *)__dst;
      CFDictionaryRef v77 = v72;
    }
    CFArrayRef theArray = 0;
    if (SHIBYTE(v77) < 0)
    {
      sub_10004FC84(__p, theDict[0], (unint64_t)theDict[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)theDict;
      __p[2] = v77;
    }
    CFArrayRef v78 = 0;
    if (ctu::cf::convert_copy())
    {
      CFArrayRef v13 = theArray;
      CFArrayRef theArray = v78;
      CFTypeRef v79 = v13;
      sub_1000558F4(&v79);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    key = theArray;
    CFArrayRef theArray = 0;
    sub_1000558F4((const void **)&theArray);
    if (SHIBYTE(v77) < 0) {
      operator delete(theDict[0]);
    }
    CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(v11, key);
    CFDictionaryRef v15 = v14;
    if (v14)
    {
      CFTypeID v16 = CFGetTypeID(v14);
      if (v16 != CFDictionaryGetTypeID()) {
        CFDictionaryRef v15 = 0;
      }
    }
    sub_1000558F4((const void **)&key);
    if (SHIBYTE(v72) < 0) {
      operator delete(__dst[0]);
    }
    if (!v15) {
      goto LABEL_102;
    }
    sub_100800620(theString, *(void **)(a1 + 168), 2u, a1 + 184, 0, v15, (const void **)__p);
    theDict[0] = v74;
    CFDictionaryRef v74 = (const __CFDictionary *)__p[1];
    __p[1] = 0;
    sub_100057D78((const void **)theDict);
    sub_100057D78((const void **)&__p[1]);
    CFDictionaryRef v4 = v74;
    if (!v74) {
      goto LABEL_102;
    }
  }
  int v17 = CFDictionaryGetValue(v4, @"account");
  if (v17)
  {
    CFTypeID v18 = CFGetTypeID(v17);
    if (v18 == CFStringGetTypeID())
    {
      memset(__p, 0, 24);
      ctu::cf::assign();
      CFDictionaryRef v77 = __p[2];
      *(_OWORD *)CFDictionaryRef theDict = *(_OWORD *)__p;
      uint64_t v19 = *(unsigned __int8 *)(a1 + 207);
      if ((v19 & 0x80u) == 0) {
        CFDictionaryRef v20 = (CFDictionaryRef)*(unsigned __int8 *)(a1 + 207);
      }
      else {
        CFDictionaryRef v20 = *(CFDictionaryRef *)(a1 + 192);
      }
      CFDictionaryRef v21 = (CFDictionaryRef)HIBYTE(v77);
      int v22 = SHIBYTE(v77);
      if (SHIBYTE(v77) < 0) {
        CFDictionaryRef v21 = theDict[1];
      }
      if (v20 == v21)
      {
        if (SHIBYTE(v77) >= 0) {
          uint64_t v23 = theDict;
        }
        else {
          uint64_t v23 = (CFDictionaryRef *)theDict[0];
        }
        if ((v19 & 0x80) != 0)
        {
          BOOL v32 = memcmp(*v9, v23, *(void *)(a1 + 192)) == 0;
        }
        else if (*(unsigned char *)(a1 + 207))
        {
          uint64_t v24 = v19 - 1;
          uint64_t v25 = (unsigned __int8 *)(a1 + 184);
          do
          {
            int v27 = *v25++;
            int v26 = v27;
            int v29 = *(unsigned __int8 *)v23;
            uint64_t v23 = (CFDictionaryRef *)((char *)v23 + 1);
            int v28 = v29;
            BOOL v31 = v24-- != 0;
            BOOL v32 = v26 == v28;
          }
          while (v26 == v28 && v31);
        }
        else
        {
          BOOL v32 = 1;
        }
      }
      else
      {
        BOOL v32 = 0;
      }
      if (v22 < 0) {
        operator delete(theDict[0]);
      }
      if (!v32) {
        goto LABEL_102;
      }
    }
  }
  CFStringRef v33 = (const __CFString *)CFDictionaryGetValue(v4, @"last-expired-token");
  CFStringRef v34 = v33;
  if (!v33 || (CFTypeID v35 = CFGetTypeID(v33), v35 != CFStringGetTypeID()))
  {
LABEL_102:
    uint64_t v8 = 0;
    goto LABEL_103;
  }
  theDict[0] = 0;
  theDict[1] = 0;
  sub_1007FFAA4(*(void **)(a1 + 168), 0, (void **)(a1 + 184), 0, (const void **)theDict);
  if (theDict[1]) {
    CFNumberRef v36 = sub_100080778;
  }
  else {
    CFNumberRef v36 = 0;
  }
  if (!v36) {
    goto LABEL_101;
  }
  if (sub_10107696C(a1))
  {
    CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(theDict[1], @"masterToken");
    CFStringRef v38 = v37;
    if (v37)
    {
      CFTypeID v39 = CFGetTypeID(v37);
      if (v39 == CFStringGetTypeID())
      {
        BOOL v40 = CFEqual(v38, v34);
        goto LABEL_106;
      }
    }
    goto LABEL_101;
  }
  CFArrayRef v41 = (const __CFArray *)CFDictionaryGetValue(theDict[1], @"cfgSlots");
  CFArrayRef v42 = v41;
  if (!v41 || (CFTypeID v43 = CFGetTypeID(v41), v43 != CFArrayGetTypeID()))
  {
LABEL_101:
    sub_100057D78((const void **)&theDict[1]);
    goto LABEL_102;
  }
  CFArrayRef theArray = 0;
  sub_100183848(*(Registry **)(a1 + 120), __p);
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)__p[0] + 24))(&v79);
  sub_100044D6C(&theArray, &v79);
  sub_1000577C4(&v79);
  if (__p[1]) {
    sub_10004D2C8((std::__shared_weak_count *)__p[1]);
  }
  if (theArray) {
    uint64_t v44 = sub_100083F10;
  }
  else {
    uint64_t v44 = 0;
  }
  if (v44)
  {
    for (CFIndex i = 0; i < CFArrayGetCount(v42) && i < CFArrayGetCount(theArray); ++i)
    {
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(v42, i);
      CFDataRef v47 = ValueAtIndex;
      if (ValueAtIndex)
      {
        CFTypeID v48 = CFGetTypeID(ValueAtIndex);
        if (v48 == CFDataGetTypeID())
        {
          key = 0;
          uint64_t v49 = CFArrayGetValueAtIndex(theArray, i);
          memset(__p, 0, 24);
          if (v49)
          {
            CFTypeID v50 = CFGetTypeID(v49);
            if (v50 == CFDataGetTypeID()) {
              ctu::cf::assign();
            }
          }
          *(_OWORD *)uint64_t v68 = *(_OWORD *)__p;
          v69 = __p[2];
          sub_100639DDC(v47, (uint64_t)v68, &cf);
          CFTypeRef v79 = cf;
          if (cf) {
            CFRetain(cf);
          }
          CFArrayRef v78 = 0;
          __p[0] = 0;
          sub_10004EFE4(__p, &v79);
          if (__p[0]) {
            uint64_t v51 = sub_100080778;
          }
          else {
            uint64_t v51 = 0;
          }
          if (v51) {
            sub_100058140((const void **)&v78, (const void **)__p);
          }
          sub_100057D78((const void **)__p);
          key = v78;
          CFArrayRef v78 = 0;
          sub_100057D78((const void **)&v78);
          sub_1000577C4(&v79);
          sub_1000577C4(&cf);
          if (v68[0])
          {
            v68[1] = v68[0];
            operator delete(v68[0]);
          }
          if (key) {
            int v52 = sub_100080778;
          }
          else {
            int v52 = 0;
          }
          if (v52)
          {
            CFStringRef v53 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)key, @"token");
            CFStringRef v54 = v53;
            if (v53)
            {
              CFTypeID v55 = CFGetTypeID(v53);
              if (v55 == CFStringGetTypeID() && CFEqual(v54, v34))
              {
                sub_100057D78((const void **)&key);
                BOOL v40 = 1;
                goto LABEL_105;
              }
            }
          }
          sub_100057D78((const void **)&key);
        }
      }
    }
  }
  BOOL v40 = 0;
LABEL_105:
  sub_100044D00((const void **)&theArray);
LABEL_106:
  sub_100057D78((const void **)&theDict[1]);
  if (!v40) {
    goto LABEL_102;
  }
  memset(__p, 0, 24);
  ctu::cf::assign();
  *(_OWORD *)CFDictionaryRef theDict = *(_OWORD *)__p;
  CFDictionaryRef v77 = __p[2];
  if (*(unsigned char *)(a1 + 728) && *(unsigned char *)(a1 + 328))
  {
    uint64_t v57 = *(void *)(a1 + 304);
    uint64_t v58 = *(void *)(a1 + 312);
    char v59 = HIBYTE(v77);
    if (v57 != v58)
    {
      if (SHIBYTE(v77) >= 0) {
        CFDictionaryRef v60 = (CFDictionaryRef)HIBYTE(v77);
      }
      else {
        CFDictionaryRef v60 = theDict[1];
      }
      if (SHIBYTE(v77) >= 0) {
        __int16 v61 = theDict;
      }
      else {
        __int16 v61 = (CFDictionaryRef *)theDict[0];
      }
      do
      {
        uint64_t v62 = *(unsigned __int8 *)(v57 + 23);
        if ((v62 & 0x80u) == 0) {
          CFDictionaryRef v63 = (CFDictionaryRef)*(unsigned __int8 *)(v57 + 23);
        }
        else {
          CFDictionaryRef v63 = *(CFDictionaryRef *)(v57 + 8);
        }
        if (v63 == v60)
        {
          if ((v62 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v57, v61, *(void *)(v57 + 8))) {
              goto LABEL_130;
            }
          }
          else
          {
            if (!*(unsigned char *)(v57 + 23)) {
              goto LABEL_130;
            }
            uint64_t v64 = 0;
            while (*(unsigned __int8 *)(v57 + v64) == *((unsigned __int8 *)v61 + v64))
            {
              if (v62 == ++v64) {
                goto LABEL_130;
              }
            }
          }
        }
        v57 += 24;
      }
      while (v57 != v58);
    }
    if (v59 < 0) {
      operator delete(theDict[0]);
    }
    goto LABEL_102;
  }
LABEL_130:
  int v65 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
  {
    long long v66 = (void *)PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    uint64_t v67 = theDict;
    if (SHIBYTE(v77) < 0) {
      uint64_t v67 = (CFDictionaryRef *)theDict[0];
    }
    LODWORD(__p[0]) = 136315650;
    *(void **)((char *)__p + 4) = v66;
    WORD2(__p[1]) = 2080;
    *(void **)((char *)&__p[1] + 6) = " ";
    HIWORD(__p[2]) = 2080;
    __p[3] = v67;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#I %s%sRequest to refresh token %s", (uint8_t *)__p, 0x20u);
  }
  *(unsigned char *)(a1 + 232) = 1;
  if (SHIBYTE(v77) < 0) {
    operator delete(theDict[0]);
  }
  uint64_t v8 = 1;
LABEL_103:
  sub_100057D78((const void **)&v74);
  return v8;
}

void sub_10108A5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,const void *a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_100057D78(&a21);
  _Unwind_Resume(a1);
}

void sub_10108A730(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(__CFArray **)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v5, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  if (SHIBYTE(v6) < 0)
  {
    sub_10004FC84(__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v5;
    uint64_t v10 = v6;
  }
  uint64_t v8 = 0;
  if (SHIBYTE(v10) < 0)
  {
    sub_10004FC84(&__dst, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long __dst = *(_OWORD *)__p;
    uint64_t v12 = v10;
  }
  CFArrayRef v13 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v3 = v8;
    uint64_t v8 = v13;
    CFDictionaryRef v14 = v3;
    sub_1000558F4(&v14);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__dst);
  }
  CFDictionaryRef v4 = v8;
  uint64_t v7 = v8;
  uint64_t v8 = 0;
  sub_1000558F4(&v8);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  CFArrayAppendValue(v2, v4);
  sub_1000558F4(&v7);
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[0]);
  }
}

void sub_10108A86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, const void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

const void **sub_10108A8D0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t result = (const void **)sub_10107696C(a1);
  if (result) {
    return result;
  }
  CFArrayRef theArray = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 120));
  uint64_t v10 = ServiceMap;
  if (v11 < 0)
  {
    uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      uint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v11;
  CFDictionaryRef v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (!v15)
  {
    uint64_t v17 = 0;
    goto LABEL_9;
  }
  uint64_t v17 = v15[3];
  CFTypeID v16 = (std::__shared_weak_count *)v15[4];
  if (!v16)
  {
LABEL_9:
    std::mutex::unlock(v10);
    CFTypeID v16 = 0;
    char v18 = 1;
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v10);
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v16);
  char v18 = 0;
LABEL_10:
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, const __CFString *, void, void, uint64_t))(*(void *)v17 + 24))(&v35, v17, **(void **)(a1 + 144) + 24, @"individual.keys", kPhoneServicesWalletDomain, 0, 4);
  sub_100044D6C(&theArray, (CFTypeRef *)&v35);
  sub_1000577C4((const void **)&v35);
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v16);
  }
  if (theArray) {
    uint64_t v19 = sub_100083F10;
  }
  else {
    uint64_t v19 = 0;
  }
  if (v19 && CFArrayGetCount(theArray) > a3)
  {
    CFDictionaryRef v20 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      uint64_t v22 = v21;
      if (!a4)
      {
        a4 = (void *)(a1 + 184);
        if (*(char *)(a1 + 207) < 0) {
          a4 = (void *)*a4;
        }
      }
      if (a2)
      {
        long long v35 = 0uLL;
        uint64_t v36 = 0;
        ctu::cf::assign();
        *(_OWORD *)long long __p = v35;
        uint64_t v33 = v36;
        uint64_t v23 = __p;
        if (v36 < 0) {
          uint64_t v23 = (void **)v35;
        }
        *(_DWORD *)std::string buf = 136316162;
        *(void *)&uint8_t buf[4] = v22;
        __int16 v38 = 2080;
        CFTypeID v39 = " ";
        __int16 v40 = 2080;
        CFArrayRef v41 = a4;
        __int16 v42 = 1024;
        int v43 = a3;
        __int16 v44 = 2080;
        unsigned int v45 = (const char *)v23;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s%sSending individual secret for account '%s' slot %d to device %s", buf, 0x30u);
        if (SHIBYTE(v33) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)std::string buf = 136316162;
        *(void *)&uint8_t buf[4] = v21;
        __int16 v38 = 2080;
        CFTypeID v39 = " ";
        __int16 v40 = 2080;
        CFArrayRef v41 = a4;
        __int16 v42 = 1024;
        int v43 = a3;
        __int16 v44 = 2080;
        unsigned int v45 = "<none>";
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s%sSending individual secret for account '%s' slot %d to device %s", buf, 0x30u);
      }
    }
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
    int v29 = ValueAtIndex;
    if (ValueAtIndex)
    {
      CFTypeID v30 = CFGetTypeID(ValueAtIndex);
      if (v30 == CFDataGetTypeID()) {
        BOOL v31 = v29;
      }
      else {
        BOOL v31 = 0;
      }
    }
    else
    {
      BOOL v31 = 0;
    }
    (*(void (**)(void, uint64_t, uint64_t, const void *))(**(void **)(a1 + 168) + 32))(*(void *)(a1 + 168), a2, **(void **)(a1 + 144) + 24, v31);
  }
  else
  {
    uint64_t v24 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      uint64_t v26 = v25;
      if (!a4)
      {
        a4 = (void *)(a1 + 184);
        if (*(char *)(a1 + 207) < 0) {
          a4 = (void *)*a4;
        }
      }
      if (a2)
      {
        long long v35 = 0uLL;
        uint64_t v36 = 0;
        ctu::cf::assign();
        *(_OWORD *)long long __p = v35;
        uint64_t v33 = v36;
        int v27 = __p;
        if (v36 < 0) {
          int v27 = (void **)v35;
        }
        *(_DWORD *)std::string buf = 136316162;
        *(void *)&uint8_t buf[4] = v26;
        __int16 v38 = 2080;
        CFTypeID v39 = " ";
        __int16 v40 = 2080;
        CFArrayRef v41 = a4;
        __int16 v42 = 1024;
        int v43 = a3;
        __int16 v44 = 2080;
        unsigned int v45 = (const char *)v27;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sFailed to send individual secret for account '%s' slot %d to device %s", buf, 0x30u);
        if (SHIBYTE(v33) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)std::string buf = 136316162;
        *(void *)&uint8_t buf[4] = v25;
        __int16 v38 = 2080;
        CFTypeID v39 = " ";
        __int16 v40 = 2080;
        CFArrayRef v41 = a4;
        __int16 v42 = 1024;
        int v43 = a3;
        __int16 v44 = 2080;
        unsigned int v45 = "<none>";
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sFailed to send individual secret for account '%s' slot %d to device %s", buf, 0x30u);
      }
    }
  }
  return sub_100044D00((const void **)&theArray);
}

void sub_10108ADBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_100044D00(&a13);
  _Unwind_Resume(a1);
}

const void **sub_10108AE2C(uint64_t a1, void **a2, const void *a3)
{
  if (sub_1010767E0(*(void *)(a1 + 160)) && sub_10107FD7C(a1))
  {
    uint64_t v6 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s%sprohibited operation. Cannot remove anything while in stealthmode - ignored", buf, 0x16u);
    }
    sub_10003E168(buf, (void *)(a1 + 88));
    uint64_t v8 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
    }
    *(void *)std::string buf = 0;
    *(void *)&buf[8] = 0;
    sub_10003E168(buf, (void *)(a1 + 88));
    operator new();
  }
  sub_101082A70(a1, a2, a3);

  return sub_10107B800((const void **)a1, 1, 0);
}

void sub_10108B03C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

uint64_t sub_10108B054(uint64_t a1)
{
  sub_100810C84(a1);
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    uint64_t v4 = *(int *)(a1 + 256);
    uint64_t v5 = (const char *)&unk_10161656E;
    uint64_t v6 = (char *)&unk_10161656E;
    if (v4 <= 2) {
      uint64_t v6 = off_101A85F58[v4];
    }
    int v7 = *(_DWORD *)(a1 + 260);
    if (v7 == 1) {
      uint64_t v5 = "Active";
    }
    if (!v7) {
      uint64_t v5 = "Disabled";
    }
    unsigned int v8 = *(_DWORD *)(a1 + 264) - 1;
    if (v8 > 5) {
      uint64_t v9 = "???";
    }
    else {
      uint64_t v9 = off_101A85F70[v8];
    }
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&uint8_t buf[24] = v6;
    *(_WORD *)&uint8_t buf[32] = 2080;
    *(void *)&buf[34] = v5;
    *(_WORD *)&buf[42] = 2080;
    *(void *)&buf[44] = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s%s| fSwitchState: %s, fServiceStatus: %s, fEntitlementResultForThumper: %s", buf, 0x34u);
  }
  uint64_t v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  *(_OWORD *)CFArrayRef v41 = 0u;
  long long v42 = 0u;
  long long v40 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_10004BD84((uint64_t)buf);
  sub_100C916E8(&buf[16], a1 + 272);
  uint64_t v10 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    uint64_t v12 = asStringBool(*(unsigned char *)(a1 + 836));
    uint64_t v13 = asStringBool(*(unsigned char *)(a1 + 837));
    sub_10004BC98((uint64_t)&buf[24], __p);
    if (v24 >= 0) {
      unsigned int v14 = __p;
    }
    else {
      unsigned int v14 = (void **)__p[0];
    }
    *(_DWORD *)uint64_t v25 = 136316162;
    uint64_t v26 = v11;
    __int16 v27 = 2080;
    int v28 = " ";
    __int16 v29 = 2080;
    uint64_t v30 = v12;
    __int16 v31 = 2080;
    uint64_t v32 = v13;
    __int16 v33 = 2080;
    uint64_t v34 = (uint64_t)v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%s| fAwaitingGetProvisioning: %s, fAwaitingSetProvisioning: %s, fAuthenticationResponse: %s", v25, 0x34u);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = *(NSObject **)(a1 + 56);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
    uint64_t v16 = asStringBool(*(unsigned char *)(a1 + 840));
    uint64_t v17 = asStringBool(*(unsigned char *)(a1 + 841));
    uint64_t v18 = asStringBool(*(unsigned char *)(a1 + 842));
    uint64_t v19 = asStringBool(*(unsigned char *)(a1 + 843));
    int v20 = *(_DWORD *)(a1 + 848);
    *(_DWORD *)uint64_t v25 = 136316674;
    uint64_t v26 = v15;
    __int16 v27 = 2080;
    int v28 = " ";
    __int16 v29 = 2080;
    uint64_t v30 = v16;
    __int16 v31 = 2080;
    uint64_t v32 = v17;
    __int16 v33 = 2080;
    uint64_t v34 = v18;
    __int16 v35 = 2080;
    uint64_t v36 = v19;
    __int16 v37 = 1024;
    int v38 = v20;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%s| fReprovisioningRequested: %s, fICloudUpdateRequested: %s, fAccountInvalidationNeeded: %s, fAccountInvalidationForced: %s, fCloudCollisionCounter: %u", v25, 0x44u);
  }
  *(void *)&buf[16] = v21;
  if (SHIBYTE(v42) < 0) {
    operator delete(v41[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10108B4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_10008248C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10108B4D0(uint64_t a1)
{
  return sub_10108B054(a1 - 8);
}

void sub_10108B4D8(uint64_t a1)
{
}

uint64_t sub_10108B4E0(uint64_t result)
{
  if (*(unsigned char *)(**(void **)(result + 144) + 48))
  {
    uint64_t v1 = result;
    sub_10107D848(result);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v1 + 200))(&v2, v1);
    sub_100057D78(&v3);
    phoneservices::submitSwitchAnalytics();
  }
  return result;
}

uint64_t sub_10108B58C(uint64_t a1)
{
  return sub_10108B4E0(a1 - 8);
}

void sub_10108B594(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 176);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 72))(v2, a1 + 184);
  if (v3) {
    sub_10004D2C8(v3);
  }
  *(_DWORD *)(a1 + 848) = 0;
}

void sub_10108B604(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10108B620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v6 = *(void *)(v4 + 208);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 216);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    memset(buf, 0, sizeof(buf));
    ctu::cf::assign();
    *(_OWORD *)long long __p = 0u;
    uint64_t v46 = 0;
    int v7 = (void *)(a1 + 184);
    unsigned int v8 = sub_100046F68(v6 + 144, (void **)(a1 + 184));
    if ((void **)(v6 + 152) == v8)
    {
      uint64_t v10 = *(NSObject **)(a1 + 56);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_44;
      }
      uint64_t v11 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      uint64_t v12 = __p;
      if (v46 < 0) {
        uint64_t v12 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      *(_WORD *)&unsigned char buf[22] = 2080;
      long long v48 = v12;
      uint64_t v13 = "#I %s%sIgnore 'requestIndividualSecret' from '%s'. Unknown account?!?";
    }
    else
    {
      if ((char *)v8[7] + 96 != (char *)sub_100046F68((uint64_t)v8[7] + 88, __p))
      {
        memset(buf, 0, sizeof(buf));
        ctu::cf::assign();
        uint64_t v44 = *(void *)&buf[16];
        *(_OWORD *)long long v43 = *(_OWORD *)buf;
        if ((char)buf[23] < 0)
        {
          int v9 = atoi(v43[0]);
          operator delete(v43[0]);
        }
        else
        {
          int v9 = atoi((const char *)v43);
        }
        uint64_t v18 = v9;
        uint64_t v19 = (void *)(a1 + 968);
        int v20 = *(char **)(a1 + 976);
        uint64_t v21 = *(void *)(a1 + 968);
        uint64_t v22 = &v20[-v21];
        unint64_t v23 = (uint64_t)&v20[-v21] >> 2;
        if (v23 > v9) {
          goto LABEL_38;
        }
        unint64_t v24 = v9 + 1;
        unint64_t v25 = v24 - v23;
        if (v18 + 1 <= v23)
        {
          if (v18 + 1 >= v23)
          {
LABEL_37:
            uint64_t v19 = (void *)(a1 + 968);
            uint64_t v21 = *(void *)(a1 + 968);
LABEL_38:
            int v38 = *(_DWORD *)(v21 + 4 * v18) + 1;
            *(_DWORD *)(v21 + 4 * v18) = v38;
            if (v38 % *(_DWORD *)(a1 + 992))
            {
              if (*(char *)(a1 + 207) < 0) {
                int v7 = (void *)*v7;
              }
              sub_10108A8D0(a1, a2, v18, v7);
              goto LABEL_44;
            }
            CFTypeID v39 = *(NSObject **)(a1 + 56);
            if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
LABEL_44:
              if (SHIBYTE(v46) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_46;
            }
            uint64_t v40 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
            int v41 = *(_DWORD *)(*v19 + 4 * v18);
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&uint8_t buf[4] = v40;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            *(_WORD *)&unsigned char buf[22] = 1024;
            LODWORD(v48) = v41;
            uint64_t v13 = "#I %s%sSuppress reply on 'requestIndividualSecret' to prevent loop (id %d)";
            uint64_t v16 = v39;
            uint32_t v17 = 28;
LABEL_17:
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v13, buf, v17);
            goto LABEL_44;
          }
          __int16 v37 = (char *)(v21 + 4 * v24);
        }
        else
        {
          uint64_t v26 = *(void *)(a1 + 984);
          if (v25 > (v26 - (uint64_t)v20) >> 2)
          {
            if ((int)v18 <= -2) {
              sub_10006A748();
            }
            uint64_t v27 = v26 - v21;
            uint64_t v28 = v27 >> 1;
            if (v27 >> 1 <= v24) {
              uint64_t v28 = v18 + 1;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v28;
            }
            uint64_t v30 = (char *)sub_10005ECD8(a1 + 984, v29);
            uint64_t v42 = v31;
            uint64_t v32 = v30;
            __int16 v33 = &v30[4 * v23];
            bzero(v33, ((4 * v24 - (void)v22 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            uint64_t v34 = *(char **)(a1 + 976);
            __int16 v35 = *(char **)(a1 + 968);
            while (v34 != v35)
            {
              int v36 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *((_DWORD *)v33 - 1) = v36;
              v33 -= 4;
            }
            *(void *)(a1 + 968) = v33;
            *(void *)(a1 + 976) = &v32[4 * v24];
            *(void *)(a1 + 984) = &v32[4 * v42];
            if (v35) {
              operator delete(v35);
            }
            goto LABEL_37;
          }
          bzero(v20, ((4 * v24 - (void)v22 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
          __int16 v37 = &v20[4 * v25];
        }
        *(void *)(a1 + 976) = v37;
        goto LABEL_37;
      }
      uint64_t v10 = *(NSObject **)(a1 + 56);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_44;
      }
      uint64_t v14 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(a1 + 144));
      uint64_t v15 = __p;
      if (v46 < 0) {
        uint64_t v15 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      *(_WORD *)&unsigned char buf[22] = 2080;
      long long v48 = v15;
      uint64_t v13 = "#I %s%sIgnore 'requestIndividualSecret' from '%s'. Unknown device";
    }
    uint64_t v16 = v10;
    uint32_t v17 = 32;
    goto LABEL_17;
  }
LABEL_46:
  if (v5) {
    sub_10004D2C8(v5);
  }
}

void sub_10108BA64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v27) {
    sub_10004D2C8(v27);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_10108BAD4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  CFMutableDictionaryRef v35 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableDictionaryRef v5 = v35;
    CFMutableDictionaryRef v35 = Mutable;
    __p[0] = v5;
    sub_10005717C((const void **)__p);
  }
  CFStringRef theString2 = 0;
  if (*(char *)(a1 + 207) < 0)
  {
    sub_10004FC84(v32, *(void **)(a1 + 184), *(void *)(a1 + 192));
  }
  else
  {
    *(_OWORD *)uint64_t v32 = *(_OWORD *)(a1 + 184);
    uint64_t v33 = *(void *)(a1 + 200);
  }
  if (SHIBYTE(v33) < 0)
  {
    sub_10004FC84(theDict, v32[0], (unint64_t)v32[1]);
  }
  else
  {
    *(_OWORD *)CFDictionaryRef theDict = *(_OWORD *)v32;
    uint64_t v38 = v33;
  }
  CFStringRef v36 = 0;
  if (SHIBYTE(v38) < 0)
  {
    sub_10004FC84(__p, theDict[0], (unint64_t)theDict[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)theDict;
    uint64_t v40 = v38;
  }
  CFStringRef v41 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v6 = (__CFArray *)v36;
    CFStringRef v36 = v41;
    uint64_t v42 = v6;
    sub_1000558F4((const void **)&v42);
  }
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  CFStringRef theString2 = v36;
  CFStringRef v36 = 0;
  sub_1000558F4((const void **)&v36);
  if (SHIBYTE(v38) < 0) {
    operator delete(theDict[0]);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[0]);
  }
  int v7 = (const void *)kPSAccountId;
  CFDictionarySetValue(v35, kPSAccountId, theString2);
  theDict[0] = 0;
  sub_100058198((const void **)theDict, (const void **)(*(void *)(a1 + 168) + 200));
  if (theDict[0]) {
    unsigned int v8 = sub_100080778;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8)
  {
    int v9 = (const void *)kPSDeviceId;
    CFDictionaryRef Value = CFDictionaryGetValue(theDict[0], kPSDeviceId);
    if (Value) {
      CFDictionarySetValue(v35, v9, Value);
    }
    uint64_t v42 = 0;
    CFMutableArrayRef v11 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (v11)
    {
      uint64_t v12 = v42;
      uint64_t v42 = v11;
      __p[0] = v12;
      sub_1000440D4((const void **)__p);
    }
    uint64_t v13 = (const void *)kPSAccountList;
    CFArrayRef v14 = (const __CFArray *)CFDictionaryGetValue(theDict[0], kPSAccountList);
    CFArrayRef v15 = v14;
    if (v14)
    {
      CFTypeID v16 = CFGetTypeID(v14);
      if (v16 == CFArrayGetTypeID())
      {
        CFIndex Count = CFArrayGetCount(v15);
        if (Count)
        {
          CFIndex v18 = 0;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v15, v18);
            CFDictionaryRef v20 = ValueAtIndex;
            if (ValueAtIndex)
            {
              CFTypeID v21 = CFGetTypeID(ValueAtIndex);
              if (v21 == CFDictionaryGetTypeID())
              {
                CFStringRef v22 = (const __CFString *)CFDictionaryGetValue(v20, v7);
                CFStringRef v23 = v22;
                if (v22)
                {
                  CFTypeID v24 = CFGetTypeID(v22);
                  if (v24 == CFStringGetTypeID() && CFEqual(v23, theString2)) {
                    break;
                  }
                }
              }
            }
            if (Count == ++v18) {
              goto LABEL_38;
            }
          }
          CFArrayAppendValue(v42, v20);
          uint64_t v26 = (const void *)kPSMdn;
          uint64_t v27 = CFDictionaryGetValue(v20, kPSMdn);
          if (v27) {
            CFDictionarySetValue(v35, v26, v27);
          }
          uint64_t v28 = (const void *)kPSAccountFreeSlots;
          unint64_t v29 = CFDictionaryGetValue(v20, kPSAccountFreeSlots);
          if (v29) {
            CFDictionarySetValue(v35, v28, v29);
          }
          uint64_t v30 = (const void *)kPSDeviceList;
          uint64_t v31 = CFDictionaryGetValue(v20, kPSDeviceList);
          if (v31) {
            CFDictionarySetValue(v35, v30, v31);
          }
        }
      }
    }
LABEL_38:
    CFDictionarySetValue(v35, v13, v42);
    sub_1000440D4((const void **)&v42);
  }
  sub_10004EFE4(a2, (CFTypeRef *)&v35);
  sub_100057D78((const void **)theDict);
  sub_1000558F4((const void **)&theString2);
  return sub_10005717C((const void **)&v35);
}

void sub_10108BE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15, const void *a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_1000440D4((const void **)(v32 - 88));
  sub_100057D78((const void **)&__p);
  sub_1000558F4(&a15);
  sub_10005717C(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_10108BF5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 260);
}

uint64_t sub_10108BF64()
{
  return 0;
}

uint64_t sub_10108BF70()
{
  return 0;
}

uint64_t sub_10108BF78(uint64_t a1)
{
  return *(unsigned int *)(a1 + 252);
}

uint64_t sub_10108BF80()
{
  return 0;
}

uint64_t sub_10108BF8C()
{
  return 0;
}

const void **sub_10108BF94(const void **result, const void **a2, const void **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10004EF30(result, a4);
    uint64_t result = (const void **)v6[1];
    while (a2 != a3)
    {
      int v7 = sub_100083DA4(result, a2++);
      uint64_t result = v7 + 1;
    }
    v6[1] = result;
  }
  return result;
}

void sub_10108C004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_10108C018(void *a1)
{
  if (a1[7])
  {
    uint64_t v1 = (ctu::LoggerCommonBase *)(a1 + 1);
    sub_10003E168(v3, a1 + 9);
    uint64_t v2 = (std::__shared_weak_count *)v3[1];
    ctu::LoggerCommonBase::getLogDomain(v1);
    ctu::TrackedLogger::registerLoggerToServer();
    if (v2) {
      sub_10004D2C8(v2);
    }
  }
}

void sub_10108C098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10108C0C0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10108C18C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[13], v1, (dispatch_function_t)sub_10108C264);
  __cxa_rethrow();
}

void sub_10108C1B4(_Unwind_Exception *a1)
{
}

void sub_10108C1CC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10108C204(uint64_t a1)
{
}

uint64_t sub_10108C220(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10108C264(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10108C290(uint64_t a1)
{
  sub_10108D0EC((uint64_t *)(a1 + 24));
  uint64_t v3 = (void **)a1;
  sub_100163C60(&v3);
  return a1;
}

void sub_10108C2D4(uint64_t a1)
{
  sub_10108C620(a1);

  operator delete();
}

BOOL sub_10108C30C(uint64_t a1)
{
  long long v7 = 0u;
  memset(v6, 0, sizeof(v6));
  uint64_t v2 = (pthread_mutex_t *)sub_100060E64((uint64_t *)(a1 + 48));
  sub_100061F70(v6, v2);
  if (*(void *)(a1 + 32))
  {
    for (CFIndex i = *(_DWORD **)sub_1001C3250((uint64_t *)(a1 + 32));
          i != *(_DWORD **)(sub_1001C3250((uint64_t *)(a1 + 32)) + 8);
          i += 6)
    {
      memset(v8, 0, sizeof(v8));
      sub_100060B10(i, (uint64_t)v8);
      if (sub_100060A68((uint64_t)i))
      {
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          sub_100163448((atomic_uint **)a1, v6);
        }
        sub_1000624B4((uint64_t)v8);
        break;
      }
      sub_1000624B4((uint64_t)v8);
    }
  }
  int v4 = *(unsigned __int8 *)(a1 + 24);
  sub_10000A6C8(*((pthread_mutex_t **)&v7 + 1));
  sub_10000A5F8(v6);
  return v4 != 0;
}

void sub_10108C444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000624B4(v3 - 80);
  sub_100161F10((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10108C488(uint64_t a1)
{
  uint64_t v1 = (pthread_mutex_t *)sub_10000A588((uint64_t *)(a1 + 48));

  return sub_10000A704(v1);
}

uint64_t sub_10108C4B4(uint64_t a1)
{
  uint64_t v1 = (pthread_mutex_t *)sub_10000A588((uint64_t *)(a1 + 48));

  return sub_10000A6C8(v1);
}

atomic_uint **sub_10108C4E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v2 = (long long *)(a1 + 32);
  *a2 = v3;
  a2[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
    long long v5 = *v2;
  }
  else
  {
    *((void *)&v5 + 1) = 0;
  }
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)&v7 + 1) = *((void *)&v5 + 1);
  return sub_10000A740((atomic_uint **)&v7 + 1);
}

uint64_t sub_10108C53C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    sub_10108D0EC((uint64_t *)(result + 24));
    uint64_t v2 = v1;
    sub_100163C60(&v2);
    operator delete();
  }
  return result;
}

void sub_10108C59C()
{
}

uint64_t sub_10108C5B0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    sub_10108D0EC((uint64_t *)(v1 + 24));
    uint64_t v2 = (void **)v1;
    sub_100163C60(&v2);
    operator delete();
  }
  return result;
}

uint64_t sub_10108C608()
{
  return 0;
}

uint64_t sub_10108C610()
{
  return 0;
}

uint64_t sub_10108C618()
{
  return 0;
}

uint64_t sub_10108C620(uint64_t a1)
{
  *(void *)a1 = off_101A85640;
  sub_10000A740((atomic_uint **)(a1 + 56));
  sub_10000A740((atomic_uint **)(a1 + 40));
  *(void *)a1 = off_1019A5688;
  sub_100160AF8((atomic_uint **)(a1 + 16));
  return a1;
}

void sub_10108C694()
{
}

uint64_t sub_10108C6A8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10108C6D8()
{
  return 0;
}

uint64_t sub_10108C6E0()
{
  return 0;
}

uint64_t sub_10108C6E8()
{
  return 0;
}

uint64_t sub_10108C6F0(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      uint64_t result = *(void *)a2;
      if (*(void *)a2)
      {
        sub_1001E1134(result);
        operator delete();
      }
      goto LABEL_9;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N3ctu12DispatchSlotIZN21ThumperPrimaryControl10initializeEvE3$_0EE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"N3ctu12DispatchSlotIZN21ThumperPrimaryControl10initializeEvE3$_0EE" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_10108C82C(void *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = (void *)*a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __dst = *a2;
    uint64_t v10 = *((void *)a2 + 2);
  }
  sub_1001A16A8(v8, a3);
  uint64_t v5 = v4[1];
  uint64_t v6 = v4[2];
  long long v7 = (std::__shared_weak_count *)v4[3];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v13 = v6;
    CFArrayRef v14 = v7;
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v7);
    std::__shared_weak_count::__release_weak(v7);
    std::__shared_weak_count::__release_weak(v7);
    std::__shared_weak_count::__release_weak(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    uint64_t v13 = v4[2];
    CFArrayRef v14 = 0;
  }
  CFMutableArrayRef v11 = off_101A85788;
  uint64_t v12 = v5;
  operator new();
}

void sub_10108CA64()
{
}

uint64_t sub_10108CB04(uint64_t a1)
{
  sub_1001C32D8(*(void **)(a1 + 32));
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  if (v2)
  {
    sub_10108D0EC(v2);
    operator delete();
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    if (*(char *)(v3 + 23) < 0) {
      operator delete(*(void **)v3);
    }
    operator delete();
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    if (*(unsigned char *)(result + 456)) {
      sub_10019D6E8(result);
    }
    operator delete();
  }
  return result;
}

void sub_10108CBC0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 <= 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a2 + 16) = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    }
    if (a3 != 1) {
      return;
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v6) {
      return;
    }
LABEL_13:
    std::__shared_weak_count::__release_weak(v6);
    return;
  }
  if (a3 == 3)
  {
    long long v7 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v7 == (const char *)((unint64_t)"ZN21ThumperPrimaryControl10initializeEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)
      || !strcmp(v7, (const char *)((unint64_t)"ZN21ThumperPrimaryControl10initializeEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      *(void *)a2 = a1;
    }
    else
    {
      *(void *)a2 = 0;
    }
    return;
  }
  if (a3 != 2)
  {
LABEL_2:
    *(_WORD *)(a2 + 8) = 0;
    return;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6) {
    goto LABEL_13;
  }
}

void sub_10108CCA4(uint64_t *a1, unsigned __int8 *a2, unsigned char *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (!v4) {
    return;
  }
  uint64_t v7 = *a1;
  unsigned int v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return;
  }
  int v9 = v8;
  if (!a1[1] || !sub_10001D294(a2, (unsigned __int8 *)(**(void **)(v7 + 144) + 24))) {
    goto LABEL_24;
  }
  uint64_t v10 = *(NSObject **)(v7 + 56);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v7 + 144));
    int v22 = 136315394;
    uint64_t v23 = v11;
    __int16 v24 = 2080;
    unint64_t v25 = " ";
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%s================================ Evaluating Authentication Response ================================", (uint8_t *)&v22, 0x16u);
  }
  if (!a3[456])
  {
    CFArrayRef v15 = *(NSObject **)(v7 + 56);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    uint64_t v18 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v7 + 144));
    int v22 = 136315394;
    uint64_t v23 = v18;
    __int16 v24 = 2080;
    unint64_t v25 = " ";
    uint64_t v19 = "#I %s%sno real authentication response data provided";
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&v22, 0x16u);
    goto LABEL_24;
  }
  if (!a3[56])
  {
    CFArrayRef v15 = *(NSObject **)(v7 + 56);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    uint64_t v20 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v7 + 144));
    int v22 = 136315394;
    uint64_t v23 = v20;
    __int16 v24 = 2080;
    unint64_t v25 = " ";
    uint64_t v19 = "#I %s%sno Tokens in authentication response data provided";
    goto LABEL_23;
  }
  if (!a3[88])
  {
    uint64_t v12 = *(NSObject **)(v7 + 56);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v7 + 144));
      int v22 = 136315394;
      uint64_t v23 = v13;
      __int16 v24 = 2080;
      unint64_t v25 = " ";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I %s%sno SubscriberIds in authentication response data provided", (uint8_t *)&v22, 0x16u);
    }
  }
  int v14 = sub_10108033C(v7, (uint64_t)a3);
  sub_1001A1CE4((char *)(v7 + 272), (uint64_t)a3);
  CFArrayRef v15 = *(NSObject **)(v7 + 56);
  BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (v16)
    {
      uint64_t v17 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v7 + 144));
      int v22 = 136315394;
      uint64_t v23 = v17;
      __int16 v24 = 2080;
      unint64_t v25 = " ";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I %s%sgetAuthentication response changed and affect Thumper configuration. Re-provisioning requested, if applicable", (uint8_t *)&v22, 0x16u);
    }
    sub_10107B800((const void **)v7, 0, 1);
    goto LABEL_24;
  }
  if (v16)
  {
    uint64_t v21 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v7 + 144));
    int v22 = 136315394;
    uint64_t v23 = v21;
    __int16 v24 = 2080;
    unint64_t v25 = " ";
    uint64_t v19 = "#I %s%sNo valuable changes in Authentication response detected";
    goto LABEL_23;
  }
LABEL_24:

  sub_10004D2C8(v9);
}

void sub_10108D018(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10108D02C(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_10108D0C8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_10108D0D8(_Unwind_Exception *a1)
{
}

uint64_t *sub_10108D0EC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void *sub_10108D140(void *a1)
{
  *a1 = off_101A857B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10108D18C(void *a1)
{
  *a1 = off_101A857B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void sub_10108D1F8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::lock(v1);
  }
  operator new();
}

void sub_10108D2A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10108D2C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void sub_10108D2E0()
{
}

void *sub_10108D34C(void *a1)
{
  *a1 = off_101A85808;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_10108D398(void *a1)
{
  *a1 = off_101A85808;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void sub_10108D404()
{
}

void sub_10108D470(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_10108D5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100163BC8((uint64_t)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10108D648(uint64_t a1)
{
  sub_10108EEEC((uint64_t *)(a1 + 24));
  uint64_t v3 = (void **)a1;
  sub_100163C60(&v3);
  return a1;
}

void sub_10108D688(uint64_t *a1)
{
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = (pthread_mutex_t *)sub_100060E64(a1 + 3);
  sub_100061F70(v3, v2);
  sub_10108D780(a1, v3);
}

void sub_10108D750(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10108D780(uint64_t *a1, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_10108D878(a1, a2);
}

void sub_10108D860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10000A740((atomic_uint **)va);
  _Unwind_Resume(a1);
}

void sub_10108D878(uint64_t *a1, void *a2)
{
}

void sub_10108D8EC()
{
}

uint64_t *sub_10108D910(uint64_t *a1, void *a2)
{
  uint64_t v2 = a1[1];
  if (!v2 || atomic_load_explicit((atomic_uint *volatile)(v2 + 8), memory_order_acquire) != 1) {
    operator new();
  }

  return sub_1001AEC98(a1, a2, 1, 2);
}

void sub_10108DA0C()
{
}

void sub_10108DA30(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)a1 = off_101A85848;
  operator new();
}

void sub_10108DB44(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_100163C60((void ***)va);
  operator delete();
}

void sub_10108DBAC(uint64_t a1)
{
  sub_10108DF60(a1);

  operator delete();
}

BOOL sub_10108DBE4(uint64_t a1)
{
  uint64_t v1 = a1;
  long long v5 = 0u;
  memset(v4, 0, sizeof(v4));
  uint64_t v2 = (pthread_mutex_t *)sub_100060E64((uint64_t *)(a1 + 48));
  sub_100061F70(v4, v2);
  sub_10108DFD0((atomic_uint **)v1, v4);
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 24);
  sub_10000A6C8(*((pthread_mutex_t **)&v5 + 1));
  sub_10000A5F8(v4);
  return v1 != 0;
}

void sub_10108DC94(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10108DCC4(uint64_t a1)
{
  uint64_t v1 = (pthread_mutex_t *)sub_10000A588((uint64_t *)(a1 + 48));

  return sub_10000A704(v1);
}

uint64_t sub_10108DCF0(uint64_t a1)
{
  uint64_t v1 = (pthread_mutex_t *)sub_10000A588((uint64_t *)(a1 + 48));

  return sub_10000A6C8(v1);
}

atomic_uint **sub_10108DD1C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v2 = (long long *)(a1 + 32);
  *a2 = v3;
  a2[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
    long long v5 = *v2;
  }
  else
  {
    *((void *)&v5 + 1) = 0;
  }
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)&v7 + 1) = *((void *)&v5 + 1);
  return sub_10000A740((atomic_uint **)&v7 + 1);
}

void sub_10108DD78(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  sub_10108DDE4(&v2);
}

void sub_10108DDD0(_Unwind_Exception *a1)
{
  sub_10000A740(v1);
  _Unwind_Resume(a1);
}

void sub_10108DDE4(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_10108DE54(void *a1)
{
  __cxa_begin_catch(a1);
  sub_10108DE7C(v1);
  __cxa_rethrow();
}

void sub_10108DE68(_Unwind_Exception *a1)
{
}

uint64_t sub_10108DE7C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    sub_10108EEEC((uint64_t *)(result + 24));
    uint64_t v2 = v1;
    sub_100163C60(&v2);
    operator delete();
  }
  return result;
}

void sub_10108DEDC()
{
}

uint64_t sub_10108DEF0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    sub_10108EEEC((uint64_t *)(v1 + 24));
    uint64_t v2 = (void **)v1;
    sub_100163C60(&v2);
    operator delete();
  }
  return result;
}

uint64_t sub_10108DF48()
{
  return 0;
}

uint64_t sub_10108DF50()
{
  return 0;
}

uint64_t sub_10108DF58()
{
  return 0;
}

uint64_t sub_10108DF60(uint64_t a1)
{
  *(void *)a1 = off_101A85848;
  sub_10000A740((atomic_uint **)(a1 + 56));
  sub_10000A740((atomic_uint **)(a1 + 40));
  *(void *)a1 = off_1019A5688;
  sub_100160AF8((atomic_uint **)(a1 + 16));
  return a1;
}

atomic_uint **sub_10108DFD0(atomic_uint **result, void *a2)
{
  uint64_t v2 = (uint64_t *)(result + 4);
  if (result[4])
  {
    uint64_t v4 = result;
    for (CFIndex i = *(atomic_uint **)sub_1001AEF78((uint64_t *)result + 4); ; i += 6)
    {
      uint64_t result = (atomic_uint **)sub_1001AEF78(v2);
      if (i == result[1]) {
        break;
      }
      memset(v6, 0, sizeof(v6));
      sub_100060B10(i, (uint64_t)v6);
      if (sub_100060A68((uint64_t)i))
      {
        if (*((unsigned char *)v4 + 24))
        {
          *((unsigned char *)v4 + 24) = 0;
          sub_100163448(v4, a2);
        }
        return sub_1000624B4((uint64_t)v6);
      }
      sub_1000624B4((uint64_t)v6);
    }
  }
  return result;
}

void sub_10108E0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000624B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10108E0D4(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  sub_10108E140(&v2);
}

void sub_10108E12C(_Unwind_Exception *a1)
{
  sub_10000A740(v1);
  _Unwind_Resume(a1);
}

void sub_10108E140(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_10108E1B0(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  __cxa_rethrow();
}

void sub_10108E1E8(_Unwind_Exception *a1)
{
}

void sub_10108E200()
{
}

uint64_t sub_10108E214(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10108E244()
{
  return 0;
}

uint64_t sub_10108E24C()
{
  return 0;
}

uint64_t sub_10108E254()
{
  return 0;
}

uint64_t *sub_10108E25C(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = (uint64_t)result;
    memset(v4, 0, sizeof(v4));
    sub_10108EE2C((uint64_t)v4, result);
    sub_10108EE2C(v3, a2);
    sub_10108EE2C((uint64_t)a2, (uint64_t *)v4);
    return sub_10108EEEC((uint64_t *)v4);
  }
  return result;
}

void sub_10108E2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10108E2D8(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      uint64_t result = *(void *)a2;
      if (*(void *)a2)
      {
        sub_1001E1134(result);
        operator delete();
      }
      goto LABEL_9;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N3ctu12DispatchSlotIZN21ThumperPrimaryControl10initializeEvE3$_1EE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"N3ctu12DispatchSlotIZN21ThumperPrimaryControl10initializeEvE3$_1EE" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_10108E414(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v5 = (void *)*a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
  }
  uint64_t v7 = *a4;
  uint64_t v6 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  uint64_t v8 = v5[1];
  uint64_t v9 = v5[2];
  uint64_t v10 = (std::__shared_weak_count *)v5[3];
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  else
  {
    uint64_t v17 = v5[2];
    uint64_t v18 = 0;
  }
  CFArrayRef v15 = off_101A85990;
  uint64_t v16 = v8;
  uint64_t v13 = v7;
  uint64_t v14 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10108E5B0();
}

void sub_10108E568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18)
{
  if (a17) {
    sub_10004D2C8(a17);
  }
  sub_10108EEEC(&a18);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10108E5B0()
{
}

void sub_10108E744()
{
}

uint64_t sub_10108E784(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = **(unsigned int **)(a1 + 48);
  uint64_t v6 = v4[1];
  *(void *)&long long v12 = *v4;
  *((void *)&v12 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1001AF204(v2, v3, v5, &v12);
  if (*((void *)&v12 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v12 + 1));
  }
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  if (v7)
  {
    sub_10108EEEC(v7);
    operator delete();
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    operator delete();
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    operator delete();
  }
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10)
  {
    uint64_t v11 = *(std::__shared_weak_count **)(v10 + 8);
    if (v11) {
      sub_10004D2C8(v11);
    }
    operator delete();
  }
  return result;
}

void sub_10108E880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10108E898(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 <= 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a2 + 16) = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    }
    if (a3 != 1) {
      return;
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v6) {
      return;
    }
LABEL_13:
    std::__shared_weak_count::__release_weak(v6);
    return;
  }
  if (a3 == 3)
  {
    uint64_t v7 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v7 == (const char *)((unint64_t)"ZN21ThumperPrimaryControl10initializeEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)
      || !strcmp(v7, (const char *)((unint64_t)"ZN21ThumperPrimaryControl10initializeEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      *(void *)a2 = a1;
    }
    else
    {
      *(void *)a2 = 0;
    }
    return;
  }
  if (a3 != 2)
  {
LABEL_2:
    *(_WORD *)(a2 + 8) = 0;
    return;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6) {
    goto LABEL_13;
  }
}

void sub_10108E97C(uint64_t *a1, unsigned __int8 *a2, int a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  uint64_t v5 = (std::__shared_weak_count *)a4[1];
  *a4 = 0;
  a4[1] = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = std::__shared_weak_count::lock(v7);
    if (v11)
    {
      long long v12 = v11;
      if (!a1[1])
      {
LABEL_32:
        sub_10004D2C8(v12);
        goto LABEL_33;
      }
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!sub_10001D294(a2, (unsigned __int8 *)(**(void **)(v10 + 144) + 24))) {
        goto LABEL_30;
      }
      uint64_t v13 = *(void *)(v10 + 160);
      unint64_t v29 = (int *)v6;
      uint64_t v30 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned __int16 v14 = sub_100A2F6CC(v13, a3, &v29);
      if (v30) {
        sub_10004D2C8(v30);
      }
      if (!(_BYTE)v14)
      {
LABEL_30:
        if (v5) {
          sub_10004D2C8(v5);
        }
        goto LABEL_32;
      }
      CFArrayRef v15 = *(NSObject **)(v10 + 56);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v10 + 144));
        if ((a3 - 1) > 2) {
          uint64_t v17 = "RequestCanceled";
        }
        else {
          uint64_t v17 = off_101A85FA0[a3 - 1];
        }
        *(_DWORD *)std::string buf = 136315650;
        uint64_t v32 = v16;
        __int16 v33 = 2080;
        uint64_t v34 = " ";
        __int16 v35 = 2080;
        CFStringRef v36 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I %s%s================================ Evaluating Get Provisiong Data Update ==(cause:%s)==============================", buf, 0x20u);
      }
      *(unsigned char *)(v10 + 836) = 0;
      if (v14 >= 0x100u)
      {
        uint64_t v18 = *(void *)(v6 + 8);
        uint64_t v21 = *(void *)(v18 + 8);
        uint64_t v19 = v18 + 8;
        uint64_t v20 = v21;
        if (v21)
        {
          uint64_t v22 = v19;
          do
          {
            int v23 = *(_DWORD *)(v20 + 32);
            BOOL v24 = v23 < 8;
            if (v23 >= 8) {
              unint64_t v25 = (uint64_t *)v20;
            }
            else {
              unint64_t v25 = (uint64_t *)(v20 + 8);
            }
            if (!v24) {
              uint64_t v22 = v20;
            }
            uint64_t v20 = *v25;
          }
          while (*v25);
          if (v22 != v19 && *(int *)(v22 + 32) <= 8)
          {
            sub_100A2BBB0(*(void *)(v10 + 160) + 360);
            if (sub_10107D8A8(v10) == 1) {
              sub_100FC9AB0((std::string *)(v10 + 736), (std::string *)(v22 + 72));
            }
            if (sub_10107D848(v10) != 1) {
              goto LABEL_29;
            }
            if (*(unsigned char *)(v22 + 64) && *(void *)(v22 + 48) != *(void *)(v22 + 40)) {
              operator new();
            }
            if (sub_10107696C(v10)) {
              operator new();
            }
            uint64_t v27 = *(NSObject **)(v10 + 56);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v28 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v10 + 144));
              *(_DWORD *)std::string buf = 136315394;
              uint64_t v32 = v28;
              __int16 v33 = 2080;
              uint64_t v34 = " ";
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I %s%sNo IMS credentials attached to getProvisioning - incorrect response, temporary failure, need to retry", buf, 0x16u);
            }
          }
        }
        sub_100A2B760(*(void *)(v10 + 160) + 360, 0);
        uint64_t v26 = *(void *)(v10 + 160);
        *(unsigned char *)(v26 + 424) = 1;
        sub_100A2B860(v26 + 360);
      }
LABEL_29:
      sub_10107B800((const void **)v10, 0, 0);
      goto LABEL_30;
    }
  }
LABEL_33:
  if (v5)
  {
    sub_10004D2C8(v5);
  }
}

void sub_10108EDC8()
{
}

uint64_t sub_10108EE2C(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_10108EEC8(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_10108EED8(_Unwind_Exception *a1)
{
}

uint64_t *sub_10108EEEC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

void sub_10108EF40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_10108F0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100163BC8((uint64_t)va);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10108F118(uint64_t a1)
{
  sub_101090AF0((uint64_t *)(a1 + 24));
  uint64_t v3 = (void **)a1;
  sub_100163C60(&v3);
  return a1;
}

void sub_10108F158(uint64_t *a1)
{
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = (pthread_mutex_t *)sub_100060E64(a1 + 3);
  sub_100061F70(v3, v2);
  sub_10108F250(a1, v3);
}

void sub_10108F220(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10108F250(uint64_t *a1, void *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  sub_10108F348(a1, a2);
}

void sub_10108F330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10000A740((atomic_uint **)va);
  _Unwind_Resume(a1);
}

void sub_10108F348(uint64_t *a1, void *a2)
{
}

void sub_10108F3BC()
{
}

uint64_t *sub_10108F3E0(uint64_t *a1, void *a2)
{
  uint64_t v2 = a1[1];
  if (!v2 || atomic_load_explicit((atomic_uint *volatile)(v2 + 8), memory_order_acquire) != 1) {
    operator new();
  }

  return sub_1001B11DC(a1, a2, 1, 2);
}

void sub_10108F4DC()
{
}

void sub_10108F500(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 1;
  *(void *)a1 = off_101A859C0;
  operator new();
}

void sub_10108F614(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_100163C60((void ***)va);
  operator delete();
}

void sub_10108F67C(uint64_t a1)
{
  sub_10108FA30(a1);

  operator delete();
}

BOOL sub_10108F6B4(uint64_t a1)
{
  uint64_t v1 = a1;
  long long v5 = 0u;
  memset(v4, 0, sizeof(v4));
  uint64_t v2 = (pthread_mutex_t *)sub_100060E64((uint64_t *)(a1 + 48));
  sub_100061F70(v4, v2);
  sub_10108FAA0((atomic_uint **)v1, v4);
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 24);
  sub_10000A6C8(*((pthread_mutex_t **)&v5 + 1));
  sub_10000A5F8(v4);
  return v1 != 0;
}

void sub_10108F764(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10108F794(uint64_t a1)
{
  uint64_t v1 = (pthread_mutex_t *)sub_10000A588((uint64_t *)(a1 + 48));

  return sub_10000A704(v1);
}

uint64_t sub_10108F7C0(uint64_t a1)
{
  uint64_t v1 = (pthread_mutex_t *)sub_10000A588((uint64_t *)(a1 + 48));

  return sub_10000A6C8(v1);
}

atomic_uint **sub_10108F7EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v2 = (long long *)(a1 + 32);
  *a2 = v3;
  a2[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
    long long v5 = *v2;
  }
  else
  {
    *((void *)&v5 + 1) = 0;
  }
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)&v7 + 1) = *((void *)&v5 + 1);
  return sub_10000A740((atomic_uint **)&v7 + 1);
}

void sub_10108F848(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  sub_10108F8B4(&v2);
}

void sub_10108F8A0(_Unwind_Exception *a1)
{
  sub_10000A740(v1);
  _Unwind_Resume(a1);
}

void sub_10108F8B4(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_10108F924(void *a1)
{
  __cxa_begin_catch(a1);
  sub_10108F94C(v1);
  __cxa_rethrow();
}

void sub_10108F938(_Unwind_Exception *a1)
{
}

uint64_t sub_10108F94C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    sub_101090AF0((uint64_t *)(result + 24));
    uint64_t v2 = v1;
    sub_100163C60(&v2);
    operator delete();
  }
  return result;
}

void sub_10108F9AC()
{
}

uint64_t sub_10108F9C0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    sub_101090AF0((uint64_t *)(v1 + 24));
    uint64_t v2 = (void **)v1;
    sub_100163C60(&v2);
    operator delete();
  }
  return result;
}

uint64_t sub_10108FA18()
{
  return 0;
}

uint64_t sub_10108FA20()
{
  return 0;
}

uint64_t sub_10108FA28()
{
  return 0;
}

uint64_t sub_10108FA30(uint64_t a1)
{
  *(void *)a1 = off_101A859C0;
  sub_10000A740((atomic_uint **)(a1 + 56));
  sub_10000A740((atomic_uint **)(a1 + 40));
  *(void *)a1 = off_1019A5688;
  sub_100160AF8((atomic_uint **)(a1 + 16));
  return a1;
}

atomic_uint **sub_10108FAA0(atomic_uint **result, void *a2)
{
  uint64_t v2 = (uint64_t *)(result + 4);
  if (result[4])
  {
    uint64_t v4 = result;
    for (CFIndex i = *(atomic_uint **)sub_1001B14BC((uint64_t *)result + 4); ; i += 6)
    {
      uint64_t result = (atomic_uint **)sub_1001B14BC(v2);
      if (i == result[1]) {
        break;
      }
      memset(v6, 0, sizeof(v6));
      sub_100060B10(i, (uint64_t)v6);
      if (sub_100060A68((uint64_t)i))
      {
        if (*((unsigned char *)v4 + 24))
        {
          *((unsigned char *)v4 + 24) = 0;
          sub_100163448(v4, a2);
        }
        return sub_1000624B4((uint64_t)v6);
      }
      sub_1000624B4((uint64_t)v6);
    }
  }
  return result;
}

void sub_10108FB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000624B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10108FBA4(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  sub_10108FC10(&v2);
}

void sub_10108FBFC(_Unwind_Exception *a1)
{
  sub_10000A740(v1);
  _Unwind_Resume(a1);
}

void sub_10108FC10(void *a1)
{
  *a1 = 0;
  operator new();
}

void sub_10108FC80(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  __cxa_rethrow();
}

void sub_10108FCB8(_Unwind_Exception *a1)
{
}

void sub_10108FCD0()
{
}

uint64_t sub_10108FCE4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10108FD14()
{
  return 0;
}

uint64_t sub_10108FD1C()
{
  return 0;
}

uint64_t sub_10108FD24()
{
  return 0;
}

uint64_t *sub_10108FD2C(uint64_t *result, uint64_t *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = (uint64_t)result;
    memset(v4, 0, sizeof(v4));
    sub_101090A30((uint64_t)v4, result);
    sub_101090A30(v3, a2);
    sub_101090A30((uint64_t)a2, (uint64_t *)v4);
    return sub_101090AF0((uint64_t *)v4);
  }
  return result;
}

void sub_10108FD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10108FDA8(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      uint64_t result = *(void *)a2;
      if (*(void *)a2)
      {
        sub_1001E1134(result);
        operator delete();
      }
      goto LABEL_9;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N3ctu12DispatchSlotIZN21ThumperPrimaryControl10initializeEvE3$_2EE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"N3ctu12DispatchSlotIZN21ThumperPrimaryControl10initializeEvE3$_2EE" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_10108FEE4(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v5 = (void *)*a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
  }
  uint64_t v7 = *a4;
  uint64_t v6 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  uint64_t v8 = v5[1];
  uint64_t v9 = v5[2];
  uint64_t v10 = (std::__shared_weak_count *)v5[3];
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = v9;
    uint64_t v18 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  else
  {
    uint64_t v17 = v5[2];
    uint64_t v18 = 0;
  }
  CFArrayRef v15 = off_101A85B08;
  uint64_t v16 = v8;
  uint64_t v13 = v7;
  uint64_t v14 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_101090080();
}

void sub_101090038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18)
{
  if (a17) {
    sub_10004D2C8(a17);
  }
  sub_101090AF0(&a18);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_101090080()
{
}

void sub_101090214()
{
}

uint64_t sub_101090254(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = **(unsigned int **)(a1 + 48);
  uint64_t v6 = v4[1];
  *(void *)&long long v12 = *v4;
  *((void *)&v12 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1001B1748(v2, v3, v5, &v12);
  if (*((void *)&v12 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v12 + 1));
  }
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  if (v7)
  {
    sub_101090AF0(v7);
    operator delete();
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    operator delete();
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    operator delete();
  }
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10)
  {
    uint64_t v11 = *(std::__shared_weak_count **)(v10 + 8);
    if (v11) {
      sub_10004D2C8(v11);
    }
    operator delete();
  }
  return result;
}

void sub_101090350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_101090368(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 <= 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a2 + 16) = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    }
    if (a3 != 1) {
      return;
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v6) {
      return;
    }
LABEL_13:
    std::__shared_weak_count::__release_weak(v6);
    return;
  }
  if (a3 == 3)
  {
    uint64_t v7 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v7 == (const char *)((unint64_t)"ZN21ThumperPrimaryControl10initializeEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)
      || !strcmp(v7, (const char *)((unint64_t)"ZN21ThumperPrimaryControl10initializeEvE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      *(void *)a2 = a1;
    }
    else
    {
      *(void *)a2 = 0;
    }
    return;
  }
  if (a3 != 2)
  {
LABEL_2:
    *(_WORD *)(a2 + 8) = 0;
    return;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6) {
    goto LABEL_13;
  }
}

void sub_10109044C(uint64_t *a1, unsigned __int8 *a2, int a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  uint64_t v5 = (std::__shared_weak_count *)a4[1];
  *a4 = 0;
  a4[1] = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = std::__shared_weak_count::lock(v7);
    if (v11)
    {
      long long v12 = v11;
      if (!a1[1])
      {
LABEL_61:
        sub_10004D2C8(v12);
        goto LABEL_62;
      }
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!sub_10001D294(a2, (unsigned __int8 *)(**(void **)(v10 + 144) + 24))) {
        goto LABEL_59;
      }
      uint64_t v13 = *(void *)(v10 + 160);
      CFStringRef v54 = (int *)v6;
      CFTypeID v55 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned __int16 v14 = sub_100A2F6CC(v13, a3, &v54);
      if (v55) {
        sub_10004D2C8(v55);
      }
      if (!(_BYTE)v14)
      {
LABEL_59:
        if (v5) {
          sub_10004D2C8(v5);
        }
        goto LABEL_61;
      }
      uint64_t v15 = *(void *)(v6 + 8);
      uint64_t v18 = *(void *)(v15 + 8);
      uint64_t v16 = v15 + 8;
      uint64_t v17 = v18;
      if (!v18) {
        goto LABEL_22;
      }
      uint64_t v19 = v16;
      do
      {
        int v20 = *(_DWORD *)(v17 + 32);
        BOOL v21 = v20 < 8;
        if (v20 >= 8) {
          uint64_t v22 = (uint64_t *)v17;
        }
        else {
          uint64_t v22 = (uint64_t *)(v17 + 8);
        }
        if (!v21) {
          uint64_t v19 = v17;
        }
        uint64_t v17 = *v22;
      }
      while (*v22);
      if (v19 == v16 || *(int *)(v19 + 32) >= 9)
      {
LABEL_22:
        int v23 = *(NSObject **)(v10 + 56);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v24 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v10 + 144));
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v24;
          __int16 v57 = 2080;
          uint64_t v58 = " ";
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I %s%sset provisioning do not have iCloudVoWiFi part - keep waiting", buf, 0x16u);
        }
        goto LABEL_59;
      }
      unint64_t v25 = *(NSObject **)(v10 + 56);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v10 + 144));
        if ((a3 - 1) > 2) {
          uint64_t v27 = "RequestCanceled";
        }
        else {
          uint64_t v27 = off_101A85FA0[a3 - 1];
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v26;
        __int16 v57 = 2080;
        uint64_t v58 = " ";
        __int16 v59 = 2080;
        CFDictionaryRef v60 = v27;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I %s%s================================ Evaluating Set Provisiong Data Update ==(cause:%s)==============================", buf, 0x20u);
      }
      *(unsigned char *)(v10 + 837) = 0;
      *(unsigned char *)(v10 + 839) = 0;
      if (v14 < 0x100u)
      {
LABEL_58:
        sub_10107B800((const void **)v10, 0, 0);
        goto LABEL_59;
      }
      *(_WORD *)(v10 + 842) = 0;
      ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)v14, *(Registry **)(v10 + 120));
      unint64_t v29 = ServiceMap;
      uint64_t v31 = v30;
      if (v30 < 0)
      {
        uint64_t v32 = (unsigned __int8 *)(v30 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v33 = 5381;
        do
        {
          uint64_t v31 = v33;
          unsigned int v34 = *v32++;
          uint64_t v33 = (33 * v33) ^ v34;
        }
        while (v34);
      }
      std::mutex::lock(ServiceMap);
      *(void *)std::string buf = v31;
      __int16 v35 = sub_10004D37C(&v29[1].__m_.__sig, (unint64_t *)buf);
      if (v35)
      {
        uint64_t v37 = v35[3];
        CFStringRef v36 = (std::__shared_weak_count *)v35[4];
        if (v36)
        {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v29);
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v36);
          char v38 = 0;
          goto LABEL_38;
        }
      }
      else
      {
        uint64_t v37 = 0;
      }
      std::mutex::unlock(v29);
      CFStringRef v36 = 0;
      char v38 = 1;
LABEL_38:
      uint64_t v39 = kPhoneServicesWalletDomain;
      (*(void (**)(uint64_t, uint64_t, const __CFString *, void, void, uint64_t))(*(void *)v37 + 32))(v37, **(void **)(v10 + 144) + 24, @"NeedAccountInvalidation", kPhoneServicesWalletDomain, 0, 1);
      if ((v38 & 1) == 0) {
        sub_10004D2C8(v36);
      }
      if (!*(unsigned char *)(v10 + 728)) {
        goto LABEL_58;
      }
      if (!(*(char *)(v10 + 207) < 0 ? *(void *)(v10 + 192) : *(unsigned __int8 *)(v10 + 207))) {
        goto LABEL_58;
      }
      CFStringRef v41 = *(NSObject **)(v10 + 56);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v42 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v10 + 144));
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v42;
        __int16 v57 = 2080;
        uint64_t v58 = " ";
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I %s%sput new credentials set in cache", buf, 0x16u);
      }
      uint64_t v53 = 0;
      sub_100C8D6A4(v10 + 272, &v53);
      uint64_t v44 = (std::mutex *)Registry::getServiceMap(v43, *(Registry **)(v10 + 120));
      long long v45 = v44;
      if (v30 < 0)
      {
        uint64_t v46 = (unsigned __int8 *)(v30 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v47 = 5381;
        do
        {
          uint64_t v30 = v47;
          unsigned int v48 = *v46++;
          uint64_t v47 = (33 * v47) ^ v48;
        }
        while (v48);
      }
      std::mutex::lock(v44);
      *(void *)std::string buf = v30;
      long long v49 = sub_10004D37C(&v45[1].__m_.__sig, (unint64_t *)buf);
      if (v49)
      {
        uint64_t v51 = v49[3];
        long long v50 = (std::__shared_weak_count *)v49[4];
        if (v50)
        {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v45);
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v50);
          char v52 = 0;
LABEL_55:
          (*(void (**)(uint64_t, uint64_t, const __CFString *, const void *, uint64_t, void, uint64_t, void))(*(void *)v51 + 16))(v51, **(void **)(v10 + 144) + 24, @"ps.local.auth", v53, v39, 0, 4, 0);
          if ((v52 & 1) == 0) {
            sub_10004D2C8(v50);
          }
          sub_1000558F4(&v53);
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v51 = 0;
      }
      std::mutex::unlock(v45);
      long long v50 = 0;
      char v52 = 1;
      goto LABEL_55;
    }
  }
LABEL_62:
  if (v5)
  {
    sub_10004D2C8(v5);
  }
}

void sub_1010909A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if ((v4 & 1) == 0) {
    sub_10004D2C8(v5);
  }
  sub_1000558F4((const void **)va);
  if (v2)
  {
    sub_10004D2C8(v2);
    sub_10004D2C8(v3);
  }
  else
  {
    uint64_t v2 = v3;
  }
  sub_10004D2C8(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_101090A30(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_101090ACC(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_101090ADC(_Unwind_Exception *a1)
{
}

uint64_t *sub_101090AF0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_101090B44(uint64_t a1)
{
  sub_101091ED4((uint64_t *)(a1 + 24));
  uint64_t v3 = (void **)a1;
  sub_100163C60(&v3);
  return a1;
}

void sub_101090B88(uint64_t a1)
{
  sub_101090ED4(a1);

  operator delete();
}

BOOL sub_101090BC0(uint64_t a1)
{
  long long v7 = 0u;
  memset(v6, 0, sizeof(v6));
  uint64_t v2 = (pthread_mutex_t *)sub_100060E64((uint64_t *)(a1 + 48));
  sub_100061F70(v6, v2);
  if (*(void *)(a1 + 32))
  {
    for (CFIndex i = *(_DWORD **)sub_1001C4448((uint64_t *)(a1 + 32));
          i != *(_DWORD **)(sub_1001C4448((uint64_t *)(a1 + 32)) + 8);
          i += 6)
    {
      memset(v8, 0, sizeof(v8));
      sub_100060B10(i, (uint64_t)v8);
      if (sub_100060A68((uint64_t)i))
      {
        if (*(unsigned char *)(a1 + 24))
        {
          *(unsigned char *)(a1 + 24) = 0;
          sub_100163448((atomic_uint **)a1, v6);
        }
        sub_1000624B4((uint64_t)v8);
        break;
      }
      sub_1000624B4((uint64_t)v8);
    }
  }
  int v4 = *(unsigned __int8 *)(a1 + 24);
  sub_10000A6C8(*((pthread_mutex_t **)&v7 + 1));
  sub_10000A5F8(v6);
  return v4 != 0;
}

void sub_101090CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000624B4(v3 - 80);
  sub_100161F10((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101090D3C(uint64_t a1)
{
  uint64_t v1 = (pthread_mutex_t *)sub_10000A588((uint64_t *)(a1 + 48));

  return sub_10000A704(v1);
}

uint64_t sub_101090D68(uint64_t a1)
{
  uint64_t v1 = (pthread_mutex_t *)sub_10000A588((uint64_t *)(a1 + 48));

  return sub_10000A6C8(v1);
}

atomic_uint **sub_101090D94@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v2 = (long long *)(a1 + 32);
  *a2 = v3;
  a2[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
    long long v5 = *v2;
  }
  else
  {
    *((void *)&v5 + 1) = 0;
  }
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)&v7 + 1) = *((void *)&v5 + 1);
  return sub_10000A740((atomic_uint **)&v7 + 1);
}

uint64_t sub_101090DF0(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    sub_101091ED4((uint64_t *)(result + 24));
    uint64_t v2 = v1;
    sub_100163C60(&v2);
    operator delete();
  }
  return result;
}

void sub_101090E50()
{
}

uint64_t sub_101090E64(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    sub_101091ED4((uint64_t *)(v1 + 24));
    uint64_t v2 = (void **)v1;
    sub_100163C60(&v2);
    operator delete();
  }
  return result;
}

uint64_t sub_101090EBC()
{
  return 0;
}

uint64_t sub_101090EC4()
{
  return 0;
}

uint64_t sub_101090ECC()
{
  return 0;
}

uint64_t sub_101090ED4(uint64_t a1)
{
  *(void *)a1 = off_101A85B38;
  sub_10000A740((atomic_uint **)(a1 + 56));
  sub_10000A740((atomic_uint **)(a1 + 40));
  *(void *)a1 = off_1019A5688;
  sub_100160AF8((atomic_uint **)(a1 + 16));
  return a1;
}

void sub_101090F48()
{
}

uint64_t sub_101090F5C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_101090F8C()
{
  return 0;
}

uint64_t sub_101090F94()
{
  return 0;
}

uint64_t sub_101090F9C()
{
  return 0;
}

uint64_t sub_101090FA4(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      uint64_t result = *(void *)a2;
      if (*(void *)a2)
      {
        sub_1001E1134(result);
        operator delete();
      }
      goto LABEL_9;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N3ctu12DispatchSlotIZN21ThumperPrimaryControl10initializeEvE3$_3EE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"N3ctu12DispatchSlotIZN21ThumperPrimaryControl10initializeEvE3$_3EE" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_1010910E0(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v5 = (void *)*a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
  }
  uint64_t v6 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  uint64_t v7 = v5[1];
  uint64_t v8 = v5[2];
  uint64_t v9 = (std::__shared_weak_count *)v5[3];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v14 = v8;
    uint64_t v15 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v9);
    std::__shared_weak_count::__release_weak(v9);
    std::__shared_weak_count::__release_weak(v9);
    std::__shared_weak_count::__release_weak(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    uint64_t v14 = v5[2];
    uint64_t v15 = 0;
  }
  long long v12 = off_101A85C80;
  uint64_t v13 = v7;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_101091364(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

uint64_t sub_1010913E8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v5 = **(unsigned int **)(a1 + 48);
  uint64_t v6 = v4[1];
  *(void *)&long long v12 = *v4;
  *((void *)&v12 + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1001C44D0(v2, v3, v5, &v12);
  if (*((void *)&v12 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v12 + 1));
  }
  uint64_t v7 = *(uint64_t **)(a1 + 32);
  if (v7)
  {
    sub_101091ED4(v7);
    operator delete();
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8)
  {
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    operator delete();
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    operator delete();
  }
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10)
  {
    uint64_t v11 = *(std::__shared_weak_count **)(v10 + 8);
    if (v11) {
      sub_10004D2C8(v11);
    }
    operator delete();
  }
  return result;
}

void sub_1010914E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010914FC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 <= 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a2 + 16) = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    }
    if (a3 != 1) {
      return;
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v6) {
      return;
    }
LABEL_13:
    std::__shared_weak_count::__release_weak(v6);
    return;
  }
  if (a3 == 3)
  {
    uint64_t v7 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v7 == (const char *)((unint64_t)"ZN21ThumperPrimaryControl10initializeEvE3$_3" & 0x7FFFFFFFFFFFFFFFLL)
      || !strcmp(v7, (const char *)((unint64_t)"ZN21ThumperPrimaryControl10initializeEvE3$_3" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      *(void *)a2 = a1;
    }
    else
    {
      *(void *)a2 = 0;
    }
    return;
  }
  if (a3 != 2)
  {
LABEL_2:
    *(_WORD *)(a2 + 8) = 0;
    return;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6) {
    goto LABEL_13;
  }
}

void sub_1010915E0(uint64_t *a1, unsigned __int8 *a2, int a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  uint64_t v5 = (std::__shared_weak_count *)a4[1];
  *a4 = 0;
  a4[1] = 0;
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = std::__shared_weak_count::lock(v7);
    if (v11)
    {
      long long v12 = v11;
      if (!a1[1])
      {
LABEL_113:
        sub_10004D2C8(v12);
        goto LABEL_114;
      }
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!sub_10001D294(a2, (unsigned __int8 *)(**(void **)(v10 + 144) + 24))) {
        goto LABEL_111;
      }
      uint64_t v13 = *(void *)(v10 + 160);
      CFArrayRef v78 = (int *)v6;
      CFTypeRef v79 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unsigned __int16 v14 = sub_100A2F6CC(v13, a3, &v78);
      if (v79) {
        sub_10004D2C8(v79);
      }
      if (!(_BYTE)v14)
      {
LABEL_111:
        if (v5) {
          sub_10004D2C8(v5);
        }
        goto LABEL_113;
      }
      uint64_t v15 = *(NSObject **)(v10 + 56);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v10 + 144));
        if ((a3 - 1) > 2) {
          uint64_t v17 = "RequestCanceled";
        }
        else {
          uint64_t v17 = off_101A85FA0[a3 - 1];
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        __int16 v81 = 2080;
        BOOL v82 = (void *)v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I %s%s================================ Evaluating Phone Service Device List ==(cause:%s)==============================", buf, 0x20u);
      }
      BOOL v18 = 0;
      *(unsigned char *)(v10 + 838) = 0;
      if (v14 < 0x100u)
      {
LABEL_110:
        sub_10107B800((const void **)v10, v18, 0);
        goto LABEL_111;
      }
      *(unsigned char *)(v10 + 845) = 0;
      uint64_t v19 = *(void *)(v10 + 816);
      if (v19)
      {
        uint64_t v20 = *(void *)(v6 + 8);
        BOOL v18 = (*(unsigned char *)(v19 + 4) != 0) ^ (*(unsigned char *)(v20 + 4) != 0);
        if (*(unsigned char *)(v19 + 4) && *(unsigned char *)(v20 + 4)) {
          BOOL v18 = *(_DWORD *)v19 != *(_DWORD *)v20;
        }
        long long __p = 0;
        int v76 = 0;
        CFDictionaryRef v77 = 0;
        if (*(unsigned char *)(v19 + 32))
        {
          uint64_t v21 = *(void *)(v19 + 8);
          if (*(void *)(v19 + 16) != v21)
          {
            BOOL v69 = v18;
            uint64_t v22 = 0;
            unint64_t v23 = 0;
            do
            {
              uint64_t v24 = (unsigned __int8 **)(v21 + (v23 << 7));
              if (*((unsigned char *)v24 + 24))
              {
                uint64_t v25 = *(void *)(v6 + 8);
                if (*(unsigned char *)(v25 + 32))
                {
                  uint64_t v27 = *(void *)(v25 + 8);
                  uint64_t v26 = *(void *)(v25 + 16);
                  while (v27 != v26)
                  {
                    if (*(unsigned char *)(v27 + 24))
                    {
                      uint64_t v28 = *(unsigned __int8 *)(v27 + 23);
                      if ((v28 & 0x80u) == 0) {
                        unint64_t v29 = (unsigned __int8 *)*(unsigned __int8 *)(v27 + 23);
                      }
                      else {
                        unint64_t v29 = *(unsigned __int8 **)(v27 + 8);
                      }
                      uint64_t v30 = (unsigned __int8 *)*((unsigned __int8 *)v24 + 23);
                      int v31 = (char)v30;
                      if ((char)v30 < 0) {
                        uint64_t v30 = v24[1];
                      }
                      if (v29 == v30)
                      {
                        if (v31 >= 0) {
                          uint64_t v32 = (unsigned __int8 *)v24;
                        }
                        else {
                          uint64_t v32 = *v24;
                        }
                        if ((v28 & 0x80) != 0)
                        {
                          if (!memcmp(*(const void **)v27, v32, *(void *)(v27 + 8))) {
                            goto LABEL_64;
                          }
                        }
                        else
                        {
                          if (!*(unsigned char *)(v27 + 23)) {
                            goto LABEL_64;
                          }
                          uint64_t v33 = 0;
                          while (*(unsigned __int8 *)(v27 + v33) == v32[v33])
                          {
                            if (v28 == ++v33) {
                              goto LABEL_64;
                            }
                          }
                        }
                      }
                    }
                    v27 += 128;
                  }
                }
                if (v22 >= v77)
                {
                  __int16 v35 = (unint64_t *)__p;
                  uint64_t v36 = ((char *)v22 - (unsigned char *)__p) >> 3;
                  unint64_t v37 = v36 + 1;
                  if ((unint64_t)(v36 + 1) >> 61) {
                    sub_10006A748();
                  }
                  uint64_t v38 = (char *)v77 - (unsigned char *)__p;
                  if (((char *)v77 - (unsigned char *)__p) >> 2 > v37) {
                    unint64_t v37 = v38 >> 2;
                  }
                  if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v39 = v37;
                  }
                  if (v39)
                  {
                    uint64_t v40 = (char *)sub_10004EF74((uint64_t)&v77, v39);
                    __int16 v35 = (unint64_t *)__p;
                    uint64_t v22 = v76;
                  }
                  else
                  {
                    uint64_t v40 = 0;
                  }
                  CFStringRef v41 = (unint64_t *)&v40[8 * v36];
                  unint64_t *v41 = v23;
                  unsigned int v34 = v41 + 1;
                  while (v22 != v35)
                  {
                    unint64_t v42 = *--v22;
                    *--CFStringRef v41 = v42;
                  }
                  long long __p = v41;
                  int v76 = v34;
                  CFDictionaryRef v77 = (unint64_t *)&v40[8 * v39];
                  if (v35) {
                    operator delete(v35);
                  }
                }
                else
                {
                  *uint64_t v22 = v23;
                  unsigned int v34 = v22 + 1;
                }
                int v76 = v34;
                uint64_t v19 = *(void *)(v10 + 816);
                uint64_t v22 = v34;
              }
LABEL_64:
              ++v23;
              uint64_t v21 = *(void *)(v19 + 8);
            }
            while (v23 < (*(void *)(v19 + 16) - v21) >> 7);
            if (v22 == __p)
            {
              BOOL v18 = v69;
            }
            else
            {
              *(void *)std::string buf = 0;
              *(void *)&buf[8] = 0;
              sub_1007FFAA4(*(void **)(v10 + 168), 1, (void **)(v10 + 184), 0, (const void **)buf);
              BOOL v18 = v69;
              uint64_t v43 = *(void *)&buf[8];
              if (*(void *)&buf[8]) {
                uint64_t v44 = sub_100080778;
              }
              else {
                uint64_t v44 = 0;
              }
              if (v44)
              {
                uint64_t v70 = 0;
                CFMutableDictionaryRef v71 = 0;
                long long v45 = *(std::__shared_weak_count **)(v10 + 824);
                v74[0] = *(void *)(v10 + 816);
                v74[1] = (uint64_t)v45;
                if (v45) {
                  atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                sub_1010825D0(&v70, v10, v43, v74);
                if (v45) {
                  sub_10004D2C8(v45);
                }
                uint64_t v46 = v70;
                if (v70)
                {
                  uint64_t v47 = (unint64_t *)__p;
                  unsigned int v48 = v76;
                  while (v47 != v48)
                  {
                    unint64_t v49 = *v47;
                    uint64_t v73 = 0;
                    sub_100083DA4(&v73, (const void **)(*v46 + 8 * v49));
                    if (v73) {
                      long long v50 = sub_1000810B8;
                    }
                    else {
                      long long v50 = 0;
                    }
                    if (v50) {
                      sub_101082A70(v10, 0, v73);
                    }
                    sub_1000558F4(&v73);
                    ++v47;
                  }
                }
                if (v71) {
                  sub_10004D2C8(v71);
                }
              }
              sub_100057D78((const void **)&buf[8]);
            }
          }
        }
      }
      else
      {
        BOOL v18 = 0;
        long long __p = 0;
        int v76 = 0;
        CFDictionaryRef v77 = 0;
      }
      uint64_t v51 = *(unsigned int **)(v6 + 8);
      uint64_t v52 = *(void *)(v6 + 16);
      if (v52) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)(v10 + 816) = v51;
      uint64_t v53 = *(std::__shared_weak_count **)(v10 + 824);
      *(void *)(v10 + 824) = v52;
      if (v53)
      {
        sub_10004D2C8(v53);
        uint64_t v51 = *(unsigned int **)(v10 + 816);
      }
      uint64_t v73 = 0;
      uint64_t v54 = *(void *)(v10 + 168);
      sub_100C8FD44(v51, buf);
      sub_1007FF568(v54);
      sub_100057D78((const void **)buf);
      ServiceMap = (std::mutex *)Registry::getServiceMap(v55, *(Registry **)(v10 + 120));
      __int16 v57 = ServiceMap;
      if (v58 < 0)
      {
        __int16 v59 = (unsigned __int8 *)(v58 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v60 = 5381;
        do
        {
          uint64_t v58 = v60;
          unsigned int v61 = *v59++;
          uint64_t v60 = (33 * v60) ^ v61;
        }
        while (v61);
      }
      std::mutex::lock(ServiceMap);
      *(void *)std::string buf = v58;
      uint64_t v62 = sub_10004D37C(&v57[1].__m_.__sig, (unint64_t *)buf);
      if (v62)
      {
        uint64_t v64 = v62[3];
        CFDictionaryRef v63 = (std::__shared_weak_count *)v62[4];
        if (v63)
        {
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v57);
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v63);
          char v65 = 0;
LABEL_100:
          (*(void (**)(uint64_t, uint64_t, const __CFString *, const void *, void, void, uint64_t, void))(*(void *)v64 + 16))(v64, **(void **)(v10 + 144) + 24, @"ps.device.list", v73, kPhoneServicesWalletDomain, 0, 1, 0);
          if ((v65 & 1) == 0) {
            sub_10004D2C8(v63);
          }
          long long v66 = *(NSObject **)(v10 + 56);
          if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v67 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v10 + 144));
            sub_100C8F6B4(*(void *)(v10 + 816), &v70);
            uint64_t v68 = v72 >= 0 ? &v70 : (void **)v70;
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&uint8_t buf[4] = v67;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            __int16 v81 = 2080;
            BOOL v82 = v68;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#I %s%sPS Device List: %s", buf, 0x20u);
            if (v72 < 0) {
              operator delete(v70);
            }
          }
          sub_1000577C4(&v73);
          if (__p)
          {
            int v76 = (unint64_t *)__p;
            operator delete(__p);
          }
          goto LABEL_110;
        }
      }
      else
      {
        uint64_t v64 = 0;
      }
      std::mutex::unlock(v57);
      CFDictionaryRef v63 = 0;
      char v65 = 1;
      goto LABEL_100;
    }
  }
LABEL_114:
  if (v5)
  {
    sub_10004D2C8(v5);
  }
}

void sub_101091D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (v26) {
    sub_10004D2C8(v26);
  }
  sub_100057D78(v25);
  if (__p) {
    operator delete(__p);
  }
  if (v23)
  {
    sub_10004D2C8(v23);
    sub_10004D2C8(v24);
  }
  else
  {
    unint64_t v23 = v24;
  }
  sub_10004D2C8(v23);
  _Unwind_Resume(a1);
}

uint64_t sub_101091E14(uint64_t result, uint64_t *a2)
{
  if (a2 != (uint64_t *)result)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *a2;
    if (*a2)
    {
      *(void *)uint64_t result = v4;
      if (v4)
      {
        long long v7 = *(_OWORD *)(a2 + 1);
        *(void *)(result + 24) = a2[3];
        *(_OWORD *)(result + 8) = v7;
      }
      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 & 0xFFFFFFFFFFFFFFFELL))(a2 + 1, result + 8, 1);
      }
    }
    else
    {
      uint64_t v5 = *(void *)result;
      if (!*(void *)result) {
        return result;
      }
      if ((v5 & 1) == 0)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 & 0xFFFFFFFFFFFFFFFELL);
        if (v6) {
          uint64_t result = v6(result + 8, result + 8, 2);
        }
      }
      uint64_t v2 = v3;
    }
    uint64_t *v2 = 0;
  }
  return result;
}

void sub_101091EB0(void *a1)
{
  __cxa_begin_catch(a1);
  void *v1 = 0;
  __cxa_rethrow();
}

void sub_101091EC0(_Unwind_Exception *a1)
{
}

uint64_t *sub_101091ED4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    if ((v2 & 1) == 0)
    {
      uint64_t v3 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v2 & 0xFFFFFFFFFFFFFFFELL);
      if (v3) {
        v3(a1 + 1, a1 + 1, 2);
      }
    }
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_101091F28(uint64_t result, _WORD *a2, int a3)
{
  uint64_t v4 = (void *)result;
  switch(a3)
  {
    case 0:
      operator new();
    case 1:
      *(void *)a2 = *(void *)result;
      *(void *)uint64_t result = 0;
      return result;
    case 2:
      uint64_t result = *(void *)a2;
      if (*(void *)a2)
      {
        sub_1001E1134(result);
        operator delete();
      }
      goto LABEL_9;
    case 3:
      uint64_t result = *(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      if (result == ((unint64_t)"N3ctu12DispatchSlotIZN21ThumperPrimaryControl10initializeEvE3$_4EE" & 0x7FFFFFFFFFFFFFFFLL)
        || (uint64_t result = strcmp((const char *)result, (const char *)((unint64_t)"N3ctu12DispatchSlotIZN21ThumperPrimaryControl10initializeEvE3$_4EE" & 0x7FFFFFFFFFFFFFFFLL)), !result))
      {
        *(void *)a2 = *v4;
      }
      else
      {
LABEL_9:
        *(void *)a2 = 0;
      }
      break;
    default:
      a2[4] = 0;
      break;
  }
  return result;
}

void sub_101092064(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)*a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v3 = v2[1];
  uint64_t v4 = v2[2];
  uint64_t v5 = (std::__shared_weak_count *)v2[3];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  else
  {
    uint64_t v10 = v4;
    uint64_t v11 = 0;
  }
  uint64_t v8 = off_101A85CC0;
  uint64_t v9 = v3;
  sub_100A34AD8();
}

void sub_101092164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16)
{
  sub_100A35098(&a16);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_101092194(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 == 4) {
    goto LABEL_2;
  }
  if (a3 <= 1)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    uint64_t v5 = *(void *)(a1 + 16);
    *(void *)(a2 + 16) = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    }
    if (a3 != 1) {
      return;
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v6) {
      return;
    }
LABEL_13:
    std::__shared_weak_count::__release_weak(v6);
    return;
  }
  if (a3 == 3)
  {
    uint64_t v7 = (const char *)(*(void *)(*(void *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
    if (v7 == (const char *)((unint64_t)"ZN21ThumperPrimaryControl10initializeEvE3$_4" & 0x7FFFFFFFFFFFFFFFLL)
      || !strcmp(v7, (const char *)((unint64_t)"ZN21ThumperPrimaryControl10initializeEvE3$_4" & 0x7FFFFFFFFFFFFFFFLL)))
    {
      *(void *)a2 = a1;
    }
    else
    {
      *(void *)a2 = 0;
    }
    return;
  }
  if (a3 != 2)
  {
LABEL_2:
    *(_WORD *)(a2 + 8) = 0;
    return;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  if (v6) {
    goto LABEL_13;
  }
}

void sub_101092278(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[1] && sub_10001D294(a2, (unsigned __int8 *)(**(void **)(v5 + 144) + 24)))
      {
        uint64_t v8 = *(NSObject **)(v5 + 56);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v9 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v5 + 144));
          int v10 = 136315394;
          uint64_t v11 = v9;
          __int16 v12 = 2080;
          uint64_t v13 = " ";
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sPhone service device list changed on server side - refresh requested", (uint8_t *)&v10, 0x16u);
        }
        sub_101081CFC(v5, 1);
      }
      sub_10004D2C8(v7);
    }
  }
}

void sub_1010923C4(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void *sub_1010923D8(void *a1)
{
  *a1 = off_101A85CF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_101092424(void *a1)
{
  *a1 = off_101A85CF0;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_101092490(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)uint64_t result = off_101A85CF0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1010924F4(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A85CF0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_101092534(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_101092544(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_101092584(uint64_t a1, cellplan::RemoteSimSubscriptionInfo *a2)
{
  sub_1003C8A7C(*(unsigned char **)(a1 + 8), a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (*(void *)(a1 + 24))
      {
        uint64_t v7 = *(NSObject **)(v4 + 56);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = PersonalityInfo::logPrefix(**(PersonalityInfo ***)(v4 + 144));
          if (*(unsigned char *)(v4 + 856))
          {
            uint64_t v9 = (const char *)(v4 + 864);
            if (*(char *)(v4 + 887) < 0) {
              uint64_t v9 = *(const char **)v9;
            }
            int v10 = *(_DWORD *)(v4 + 888);
          }
          else
          {
            int v10 = 0;
            uint64_t v9 = "not initialized";
          }
          int v11 = 136315906;
          uint64_t v12 = v8;
          __int16 v13 = 2080;
          unsigned __int16 v14 = " ";
          __int16 v15 = 2080;
          uint64_t v16 = v9;
          __int16 v17 = 1024;
          int v18 = v10;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s%sdevId:%s, state:%d", (uint8_t *)&v11, 0x26u);
        }
        sub_10107B800((const void **)v4, 0, 0);
      }
      sub_10004D2C8(v6);
    }
  }
}

void sub_101092700(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101092714(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101092754()
{
}

void sub_101092764(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10109279C(uint64_t a1)
{
  return sub_1010927E8(*(void *)(a1 + 24));
}

uint64_t sub_1010927A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1010927E8(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 32))
    {
      uint64_t v1 = (void **)(result + 8);
      sub_100C9274C(&v1);
    }
    operator delete();
  }
  return result;
}

void sub_101092848(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A85DE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101092868(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A85DE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010928BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

uint64_t **sub_1010928E4(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    int v10 = (char *)operator new(0x38uLL);
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    sub_100046C38(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1010929B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010929E8(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    uint64_t v1 = *(void ***)(result + 24);
    sub_100C92308(&v1);
    operator delete();
  }
  return result;
}

uint64_t sub_101092A38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ***sub_101092A7C(void ***result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = v1;
    sub_100C92308(&v2);
    operator delete();
  }
  return result;
}

void sub_101092AD4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101092B0C(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    uint64_t v1 = *(void ***)(result + 24);
    sub_100084178(&v1);
    operator delete();
  }
  return result;
}

uint64_t sub_101092B5C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ***sub_101092BA0(void ***result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = v1;
    sub_100084178(&v2);
    operator delete();
  }
  return result;
}

uint64_t *sub_101092BF4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(const void ***)v1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(v1 + 8)) {
        sub_10107B800(v3, 0, 0);
      }
      sub_10004D2C8(v5);
    }
  }
  sub_100004A84(&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_101092C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10004D2C8(v10);
  sub_100004A84(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101092C94(uint64_t a1, _DWORD *a2)
{
  a2[7] |= 2u;
  a2[4] = *(_DWORD *)(a1 + 32);
  uint64_t result = subscriber::simSlotAsInstance();
  a2[7] |= 4u;
  a2[5] = result;
  return result;
}

uint64_t sub_101092CDC(uint64_t a1, _DWORD *a2)
{
  a2[7] |= 2u;
  a2[4] = *(_DWORD *)(a1 + 32);
  uint64_t result = subscriber::simSlotAsInstance();
  a2[7] |= 4u;
  a2[5] = result;
  return result;
}

uint64_t sub_101092D24@<X0>(void *a1@<X8>)
{
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v9 = 0u;
  memset(v7, 0, sizeof(v7));
  long long v6 = 0u;
  sub_10004BD84((uint64_t)&v6);
  sub_10004B96C(v7, (uint64_t)"[", 1);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_10004B96C(v2, (uint64_t)" ,", 2);
  uint64_t v3 = (void *)std::ostream::operator<<();
  sub_10004B96C(v3, (uint64_t)"]", 1);
  sub_10004BC98((uint64_t)v7 + 8, a1);
  *(void *)((char *)&v7[-1]
  *(void *)&v7[0] = v4;
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101092F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

ctu::OsLogLogger *sub_101092F14(ctu::OsLogLogger *a1)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v3, kCtLoggingSystemName, "wea");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v4, &v3);
  ctu::OsLogLogger::OsLogLogger(a1, (const ctu::OsLogLogger *)v4);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v4);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v3);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  return a1;
}

BOOL sub_101092F90(uint64_t a1, const char *a2)
{
  v31[0] = 0;
  v31[1] = 0;
  ctu::TextConverter::TextConverter((ctu::TextConverter *)v31);
  ctu::TextConverter::pushConversion();
  if (a2[23] < 0)
  {
    uint64_t v5 = a2;
    a2 = *(const char **)a2;
    unint64_t v4 = *((void *)v5 + 1);
  }
  else
  {
    unint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  ctu::TextConverter::setSource((ctu::TextConverter *)v31, a2, v4);
  long long v6 = (void *)(a1 + 8);
  while (1)
  {
    SourceAvailableCFIndex Count = ctu::TextConverter::getSourceAvailableCount((ctu::TextConverter *)v31);
    if (!SourceAvailableCount) {
      break;
    }
    if ((unint64_t)ctu::TextConverter::getSourceAvailableCount((ctu::TextConverter *)v31) <= 3)
    {
      uint64_t v28 = *(NSObject **)a1;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        SourceCFIndex Count = ctu::TextConverter::getSourceCount((ctu::TextConverter *)v31);
        *(_DWORD *)std::string buf = 134218242;
        *(void *)&uint8_t buf[4] = SourceCount;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "false";
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed to decode Active Alert tuple. Only %zu bytes left isCommon: %s", buf, 0x16u);
      }
      break;
    }
    __int16 Code = ctu::TextConverter::nextCode((ctu::TextConverter *)v31);
    __int16 v9 = ctu::TextConverter::nextCode((ctu::TextConverter *)v31);
    __int16 v10 = ctu::TextConverter::nextCode((ctu::TextConverter *)v31);
    __int16 v11 = ctu::TextConverter::nextCode((ctu::TextConverter *)v31);
    unsigned __int16 v12 = v9 | (Code << 8);
    long long v13 = *(NSObject **)a1;
    unsigned __int16 v14 = v11 | (v10 << 8);
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v14;
      *(_WORD *)&buf[14] = 2080;
      *(void *)&buf[16] = "false";
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Wham MessageId : %u Serial : %u combined: %s", buf, 0x18u);
    }
    long long v15 = operator new(0x20uLL);
    long long v16 = v15;
    v15[1] = 0;
    v15[2] = 0;
    *long long v15 = off_101A85FC8;
    *((_DWORD *)v15 + 6) = v12 | (v14 << 16);
    long long v17 = (char *)(v15 + 3);
    *((unsigned char *)v15 + 28) = 0;
    long long v19 = *(void **)(a1 + 16);
    unint64_t v18 = *(void *)(a1 + 24);
    if ((unint64_t)v19 >= v18)
    {
      uint64_t v21 = ((uint64_t)v19 - *v6) >> 4;
      unint64_t v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 60) {
        sub_101093C84();
      }
      uint64_t v23 = v18 - *v6;
      if (v23 >> 3 > v22) {
        unint64_t v22 = v23 >> 3;
      }
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v22;
      }
      uint64_t v34 = a1 + 24;
      uint64_t v25 = (char *)sub_10006A794(a1 + 24, v24);
      uint64_t v26 = &v25[16 * v21];
      *(void *)std::string buf = v25;
      *(void *)&buf[8] = v26;
      uint64_t v33 = &v25[16 * v27];
      *(void *)uint64_t v26 = v17;
      *((void *)v26 + 1) = v16;
      *(void *)&buf[16] = v26 + 16;
      sub_101093DE8((uint64_t *)(a1 + 8), buf);
      uint64_t v20 = *(void **)(a1 + 16);
      sub_1006C59A4((void **)buf);
    }
    else
    {
      void *v19 = v17;
      v19[1] = v15;
      uint64_t v20 = v19 + 2;
      *(void *)(a1 + 16) = v19 + 2;
    }
    *(void *)(a1 + 16) = v20;
  }
  ctu::TextConverter::~TextConverter((ctu::TextConverter *)v31);
  return SourceAvailableCount == 0;
}

void sub_101093284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  ctu::TextConverter::~TextConverter((ctu::TextConverter *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010932E0(os_log_t *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (!v4)
  {
    uint64_t v21 = *a1;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Empty Wham data..", buf, 2u);
    }
    return 1;
  }
  unint64_t v5 = v4;
  v31[0] = 0;
  v31[1] = 0;
  ctu::TextConverter::TextConverter((ctu::TextConverter *)v31);
  memset(&__str, 0, sizeof(__str));
  sub_100058DB0(&__str, __s);
  ctu::TextConverter::pushConversion();
  do
  {
    while (1)
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__str.__r_.__value_.__l.__size_ <= 2)
        {
          uint64_t v22 = 1;
          goto LABEL_69;
        }
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (HIBYTE(__str.__r_.__value_.__r.__words[2]) <= 2u)
        {
          uint64_t v22 = 1;
          goto LABEL_70;
        }
        p_str = &__str;
      }
      ctu::TextConverter::setSource((ctu::TextConverter *)v31, (const char *)p_str, v5);
      unsigned __int8 Code = ctu::TextConverter::nextCode((ctu::TextConverter *)v31);
      unint64_t v8 = (8 * (Code & 0xF)) | (ctu::TextConverter::nextCode((ctu::TextConverter *)v31) >> 5);
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (size < v8)
      {
        uint64_t v23 = *a1;
        BOOL v24 = os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT);
        uint64_t v22 = 0;
        if (!v24) {
          goto LABEL_65;
        }
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I Not enough bytes left to resize. Decode failure.", buf, 2u);
        goto LABEL_63;
      }
      if (ctu::TextConverter::getSourceAvailableCount((ctu::TextConverter *)v31) < v8)
      {
        uint64_t v25 = *a1;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          SourceAvailableCFIndex Count = ctu::TextConverter::getSourceAvailableCount((ctu::TextConverter *)v31);
          *(_DWORD *)std::string buf = 134218240;
          *(void *)&uint8_t buf[4] = SourceAvailableCount;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v8;
          _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "TLV parsing failed. %zu bytes available for parsing, but length indicates %u", buf, 0x12u);
        }
LABEL_63:
        uint64_t v22 = 0;
        goto LABEL_65;
      }
      memset(&v29, 0, sizeof(v29));
      std::string::basic_string(&v29, &__str, 4uLL, 2 * (int)v8 - 4, (std::allocator<char> *)buf);
      uint64_t v10 = Code >> 4;
      __int16 v11 = *a1;
      if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int16 v12 = "Unknown TLV";
        if ((v10 - 1) <= 3) {
          unsigned __int16 v12 = off_101A86008[v10 - 1];
        }
        long long v13 = &v29;
        if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v13 = (std::string *)v29.__r_.__value_.__r.__words[0];
        }
        if (!v8) {
          long long v13 = (std::string *)"";
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v8;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Wham TLV [%s] of length [%u] : %s", buf, 0x1Cu);
      }
      if (v8)
      {
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          sub_10004FC84(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
        }
        else {
          std::string __p = v29;
        }
        switch(v10)
        {
          case 4:
            long long v15 = *a1;
            if (os_log_type_enabled(*a1, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Invalid TLV in Wham parsing.", buf, 2u);
            }
            BOOL v16 = 0;
            goto LABEL_42;
          case 2:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              *(std::string *)std::string buf = __p;
              goto LABEL_40;
            }
            break;
          case 1:
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              *(std::string *)std::string buf = __p;
LABEL_40:
              BOOL v16 = sub_101092F90((uint64_t)a1, (const char *)buf);
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
LABEL_42:
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(__p.__r_.__value_.__l.__data_);
                if (v16)
                {
LABEL_47:
                  std::string::erase(&__str, 0, (2 * v8));
                  goto LABEL_48;
                }
              }
              else if (v16)
              {
                goto LABEL_47;
              }
              unint64_t v18 = *a1;
              if (os_log_type_enabled(*a1, OS_LOG_TYPE_ERROR))
              {
                uint64_t v19 = v10 - 1;
                uint64_t v20 = "Unknown TLV";
                if (v19 <= 3) {
                  uint64_t v20 = off_101A86008[v19];
                }
                *(_DWORD *)std::string buf = 136315138;
                *(void *)&uint8_t buf[4] = v20;
                _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Wham TLV [%s] decode failure", buf, 0xCu);
              }
              goto LABEL_47;
            }
            break;
          default:
            long long v17 = *a1;
            if (os_log_type_enabled(*a1, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Unhandled TLV in Wham parsing.", buf, 2u);
            }
            BOOL v16 = 1;
            goto LABEL_42;
        }
        sub_10004FC84(buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        goto LABEL_40;
      }
      unsigned __int16 v14 = *a1;
      if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I Wham decoding complete", buf, 2u);
      }
LABEL_48:
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (!v8) {
        goto LABEL_64;
      }
    }
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  while (v8);
LABEL_64:
  uint64_t v22 = 1;
LABEL_65:
  if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_70;
  }
LABEL_69:
  operator delete(__str.__r_.__value_.__l.__data_);
LABEL_70:
  ctu::TextConverter::~TextConverter((ctu::TextConverter *)v31);
  return v22;
}

void sub_10109386C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  ctu::TextConverter::~TextConverter((ctu::TextConverter *)&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_101093908(uint64_t a1)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)uint64_t v21 = 0u;
  long long v22 = 0u;
  memset(v20, 0, sizeof(v20));
  long long v19 = 0u;
  sub_10004BD84((uint64_t)&v19);
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  OsLogContext v3 = *(uint64_t **)(a1 + 16);
  for (CFIndex i = (os_log_t *)a1; v2 != v3; v2 += 2)
  {
    uint64_t v4 = *v2;
    unint64_t v5 = (std::__shared_weak_count *)v2[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v4)
    {
      sub_10004B96C(v20, (uint64_t)"[", 1);
      long long v6 = (void *)std::ostream::operator<<();
      sub_10004B96C(v6, (uint64_t)"-", 1);
      int v7 = (void *)std::ostream::operator<<();
      unint64_t v8 = sub_10004B96C(v7, (uint64_t)"] ", 2);
      __int16 v9 = sub_10004B96C(v8, (uint64_t)" combined: ", 11);
      if (*(unsigned char *)(v4 + 4)) {
        uint64_t v10 = "true";
      }
      else {
        uint64_t v10 = "false";
      }
      if (*(unsigned char *)(v4 + 4)) {
        uint64_t v11 = 4;
      }
      else {
        uint64_t v11 = 5;
      }
      sub_10004B96C(v9, (uint64_t)v10, v11);
    }
    if (v5) {
      sub_10004D2C8(v5);
    }
  }
  unsigned __int16 v12 = *(NSObject **)a1;
  if (os_log_type_enabled(*i, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004BC98((uint64_t)v20 + 8, __p);
    long long v13 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315138;
    __int16 v35 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Wham: %s", buf, 0xCu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  *(void *)((char *)&v20[-1]
  *(void *)&v20[0] = v14;
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101093C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10008248C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_101093C40(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_101093C84();
  }
  uint64_t result = (char *)sub_10006A794((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_101093C84()
{
}

uint64_t sub_101093C9C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10037AA1C(a1);
  }
  return a1;
}

void *sub_101093CD4(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_101093C40(result, a4);
    uint64_t result = sub_101093D5C((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_101093D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10005CBF0(&a9);
  _Unwind_Resume(a1);
}

void *sub_101093D5C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v8;
  v7[3] = 1;
  unint64_t v8 = a4;
  v7[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  sub_101093C9C((uint64_t)v7);
  return v4;
}

uint64_t sub_101093DE8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_101093E60((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_101093E60(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = &v14;
  v12[3] = 1;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v14 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v14;
  }
  sub_101093EF0((uint64_t)v12);
  return v10;
}

uint64_t sub_101093EF0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1006C5960(a1);
  }
  return a1;
}

void sub_101093F28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A85FC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101093F48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A85FC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101093FA4(PB::Base *this)
{
  *(void *)this = &off_101A86038;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PB::Base::~Base(this);
}

void sub_101094058(PB::Base *a1)
{
  sub_101093FA4(a1);

  operator delete();
}

void *sub_101094090(void *result, uint64_t a2)
{
  *uint64_t result = &off_101A86038;
  result[1] = 0;
  result[2] = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  if (*(void *)(a2 + 16)) {
    operator new();
  }
  return result;
}

uint64_t sub_1010941A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "phoneSimInfo");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "subscriptionInfo");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101094258(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_20:
      unsigned __int8 v18 = v10 & 7;
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v10 >> 3;
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if (v19 == 1) {
        operator new();
      }
LABEL_24:
      uint64_t result = PB::Reader::skip(this, v19, v18, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13)
      {
LABEL_19:
        unsigned __int8 v18 = 0;
        LODWORD(v19) = 0;
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101094514(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 16);
  if (v5)
  {
    return PB::Writer::writeSubmessage(this, v5, 2u);
  }
  return result;
}

uint64_t sub_101094578(uint64_t result)
{
  if (!*(void *)(result + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_101094630(uint64_t result)
{
  if (!*(void *)(result + 16)) {
    operator new();
  }
  return result;
}

void sub_101094810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_101095298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    sub_10004D2C8(a21);
  }
  sub_100057D78(&a12);
  if ((v25 & 1) == 0) {
    sub_10004D2C8(v24);
  }
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_101095458(Registry *this@<X1>, void *a2@<X0>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, this);
  uint64_t v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v13 = v6;
  unint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, &v13);
  if (v10)
  {
    uint64_t v12 = v10[3];
    unint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  std::mutex::unlock(v5);
  *a2 = v12;
  a2[1] = v11;
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v11);
  }
}

void sub_101095F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    sub_10004D2C8(a21);
  }
  sub_100057D78(&a12);
  if ((v25 & 1) == 0) {
    sub_10004D2C8(v24);
  }
  if (a18 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_101096B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a30) {
    sub_10004D2C8(a30);
  }
  if ((v35 & 1) == 0) {
    sub_10004D2C8(v34);
  }
  if (a28 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1010971A0(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_1010975FC(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_101097CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if ((v21 & 1) == 0) {
    sub_10004D2C8(v20);
  }
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1010980A8(_Unwind_Exception *a1)
{
  if ((v4 & 1) == 0) {
    sub_10004D2C8(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1010983AC(_Unwind_Exception *a1)
{
  if ((v4 & 1) == 0) {
    sub_10004D2C8(v2);
  }

  _Unwind_Resume(a1);
}

void sub_101098954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if ((v22 & 1) == 0) {
    sub_10004D2C8(v20);
  }
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_101098FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if ((v22 & 1) == 0) {
    sub_10004D2C8(v20);
  }
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_101099534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v13);
  }

  _Unwind_Resume(a1);
}

void sub_1010998A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_101099BC0(_Unwind_Exception *a1)
{
  char v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t sub_101099C2C(uint64_t a1)
{
  return a1;
}

void sub_101099C58(uint64_t a1)
{
  operator delete();
}

void *sub_101099CA4(uint64_t a1)
{
  unint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A86088;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_101099CFC(uint64_t a1, void *a2)
{
  *a2 = off_101A86088;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_101099D44(uint64_t a1)
{
}

void sub_101099D4C(id *a1)
{
  operator delete(a1);
}

uint64_t sub_101099D88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_101099DA0(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A860F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_101099DE0()
{
  return &off_101A860F8;
}

uint64_t sub_101099DEC(uint64_t a1)
{
  return a1;
}

void sub_101099E20(uint64_t a1)
{
  operator delete();
}

void *sub_101099E74(uint64_t a1)
{
  unint64_t v2 = operator new(0x18uLL);
  void *v2 = off_101A86118;
  v2[1] = *(id *)(a1 + 8);
  v2[2] = objc_retainBlock(*(id *)(a1 + 16));
  return v2;
}

id sub_101099ED8(uint64_t a1, void *a2)
{
  *a2 = off_101A86118;
  a2[1] = *(id *)(a1 + 8);
  id result = objc_retainBlock(*(id *)(a1 + 16));
  a2[2] = result;
  return result;
}

void sub_101099F30(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
}

void sub_101099F6C(id *a1)
{
  operator delete(a1);
}

void sub_101099FB0(uint64_t a1, unsigned char *a2, uint64_t *a3)
{
  if (*a2)
  {
    char v5 = *(void **)(a1 + 8);
    if (v5)
    {
      [v5 getLogContext];
      unint64_t v6 = *((void *)&v12 + 1);
    }
    else
    {
      unint64_t v6 = 0;
      long long v12 = 0uLL;
    }
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v12);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *a3;
      LODWORD(v12) = 138412290;
      *(void *)((char *)&v12 + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "device list:\n%@", (uint8_t *)&v12, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 16) + 16))();
  }
  else
  {
    uint64_t v7 = *(void **)(a1 + 8);
    if (v7)
    {
      [v7 getLogContext];
      uint64_t v8 = *((void *)&v12 + 1);
    }
    else
    {
      uint64_t v8 = 0;
      long long v12 = 0uLL;
    }
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v12);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Device list is not ready yet", (uint8_t *)&v12, 2u);
    }
    uint64_t v10 = *(void *)(a1 + 16);
    unint64_t v11 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 35, 0, v12);
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v11);
  }
}

void sub_10109A150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10109A168(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A86178)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10109A1A8()
{
  return &off_101A86178;
}

uint64_t sub_10109A1B4(uint64_t a1)
{
  return a1;
}

void sub_10109A1E8(uint64_t a1)
{
  operator delete();
}

void *sub_10109A23C(uint64_t a1)
{
  unint64_t v2 = operator new(0x18uLL);
  void *v2 = off_101A86198;
  v2[1] = *(id *)(a1 + 8);
  v2[2] = objc_retainBlock(*(id *)(a1 + 16));
  return v2;
}

id sub_10109A2A0(uint64_t a1, void *a2)
{
  *a2 = off_101A86198;
  a2[1] = *(id *)(a1 + 8);
  id result = objc_retainBlock(*(id *)(a1 + 16));
  a2[2] = result;
  return result;
}

void sub_10109A2F8(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
}

void sub_10109A334(id *a1)
{
  operator delete(a1);
}

void sub_10109A378(uint64_t a1, unsigned char *a2, uint64_t *a3)
{
  if (*a2)
  {
    char v5 = *(void **)(a1 + 8);
    if (v5)
    {
      [v5 getLogContext];
      unint64_t v6 = *((void *)&v12 + 1);
    }
    else
    {
      unint64_t v6 = 0;
      long long v12 = 0uLL;
    }
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v12);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *a3;
      LODWORD(v12) = 138412290;
      *(void *)((char *)&v12 + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "device info:\n%@", (uint8_t *)&v12, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 16) + 16))();
  }
  else
  {
    uint64_t v7 = *(void **)(a1 + 8);
    if (v7)
    {
      [v7 getLogContext];
      uint64_t v8 = *((void *)&v12 + 1);
    }
    else
    {
      uint64_t v8 = 0;
      long long v12 = 0uLL;
    }
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v12);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Device info is not ready yet", (uint8_t *)&v12, 2u);
    }
    uint64_t v10 = *(void *)(a1 + 16);
    unint64_t v11 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 35, 0, v12);
    (*(void (**)(uint64_t, void, void *))(v10 + 16))(v10, 0, v11);
  }
}

void sub_10109A518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10109A530(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A861F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10109A570()
{
  return &off_101A861F8;
}

void *sub_10109A57C@<X0>(void *a1@<X8>)
{
  id result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  *id result = off_1019CC6F8;
  result[3] = &off_101A0BE90;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void *sub_10109A5E8@<X0>(void *a1@<X8>)
{
  id result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  *id result = off_1019B4BF0;
  result[3] = &off_1019A4D30;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void sub_10109A658()
{
}

void sub_10109A66C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A86260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10109A68C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A86260;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10109A6E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

uint64_t sub_10109A710(unsigned __int16 *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v3 = *(unsigned char **)a1;
    unint64_t v2 = (unsigned char *)(*(void *)a1 + *((void *)a1 + 1));
  }
  else
  {
    unint64_t v2 = (char *)a1 + *((unsigned __int8 *)a1 + 23);
    uint64_t v3 = a1;
  }
  if (v3 == v2)
  {
    LOBYTE(v4) = *((unsigned char *)a1 + 23);
  }
  else
  {
    do
    {
      *uint64_t v3 = __tolower((char)*v3);
      ++v3;
    }
    while (v3 != v2);
    LOBYTE(v4) = *((unsigned char *)a1 + 23);
  }
  uint64_t result = 0;
  int v6 = (char)v4;
  uint64_t v4 = v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a1 + 1);
  }
  switch(v4)
  {
    case 3:
      if (v6 >= 0) {
        uint64_t v7 = a1;
      }
      else {
        uint64_t v7 = *(unsigned __int16 **)a1;
      }
      int v8 = *v7;
      int v9 = *((unsigned __int8 *)v7 + 2);
      if (v8 != 25966 || v9 != 119) {
        goto LABEL_56;
      }
      uint64_t result = 1;
      break;
    case 4:
    case 5:
    case 7:
    case 9:
    case 10:
      return result;
    case 6:
      if (v6 >= 0) {
        char v17 = a1;
      }
      else {
        char v17 = *(unsigned __int16 **)a1;
      }
      int v18 = *(_DWORD *)v17;
      int v19 = v17[2];
      if (v18 != 1769235297 || v19 != 25974) {
        goto LABEL_56;
      }
      uint64_t result = 2;
      break;
    case 8:
      if (v6 >= 0) {
        char v21 = a1;
      }
      else {
        char v21 = *(void **)a1;
      }
      if (*v21 == 0x6576697463616E69)
      {
        uint64_t result = 4;
      }
      else
      {
        if (*v21 != 0x656C626173756E75) {
          goto LABEL_56;
        }
        uint64_t result = 5;
      }
      break;
    case 11:
      if (v6 >= 0) {
        char v22 = (uint64_t *)a1;
      }
      else {
        char v22 = *(uint64_t **)a1;
      }
      uint64_t v23 = *v22;
      uint64_t v24 = *(uint64_t *)((char *)v22 + 3);
      if (v23 != 0x72676F72702D6E69 || v24 != 0x73736572676F7270) {
        goto LABEL_56;
      }
      uint64_t result = 3;
      break;
    default:
      if (v4 == 16)
      {
        if (v6 >= 0) {
          long long v26 = (unint64_t *)a1;
        }
        else {
          long long v26 = *(unint64_t **)a1;
        }
        unint64_t v27 = 0x70656E64696E672DLL;
        unint64_t v28 = bswap64(*v26);
        if (v28 == 0x70656E64696E672DLL
          && (unint64_t v27 = 0x69642D636865636BLL, v28 = bswap64(v26[1]), v28 == 0x69642D636865636BLL))
        {
          int v29 = 0;
        }
        else if (v28 < v27)
        {
          int v29 = -1;
        }
        else
        {
          int v29 = 1;
        }
        if (v29) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = 7;
        }
      }
      else if (v4 == 23)
      {
        if (v6 >= 0) {
          unint64_t v11 = (uint64_t *)a1;
        }
        else {
          unint64_t v11 = *(uint64_t **)a1;
        }
        uint64_t v12 = *v11;
        uint64_t v13 = v11[1];
        uint64_t v14 = *(uint64_t *)((char *)v11 + 15);
        if (v12 == 0x2D676E69646E6570 && v13 == 0x2D656C69666F7270 && v14 == 0x657361656C65722DLL) {
          uint64_t result = 6;
        }
        else {
LABEL_56:
        }
          uint64_t result = 0;
      }
      break;
  }
  return result;
}

void sub_10109A9C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  int v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (uint64_t v11 = a1[1], (v12 = std::__shared_weak_count::lock(v6)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v13 = v12;
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v12);
  long long v44 = 0u;
  long long v45 = 0u;
  long long v43 = 0u;
  memset(v42, 0, sizeof(v42));
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  std::string::operator=((std::string *)&v37, (const std::string *)a3);
  sub_100CFBAA0((char *)(a3 + 24), (uint64_t)&__p);
  sub_100179CB0((uint64_t)&v38 + 8, &__p);
  if (LOBYTE(v33[0]) && SHIBYTE(v32) < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  std::string::operator=((std::string *)((char *)&v40 + 8), (const std::string *)(a3 + 56));
  if (&v37 != (long long *)a3) {
    sub_10005CA3C((uint64_t)v42, *(std::string **)(a3 + 80), *(long long **)(a3 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 88) - *(void *)(a3 + 80)) >> 3));
  }
  int v14 = *(unsigned __int8 *)(a3 + 104);
  if (*(unsigned char *)(a3 + 104))
  {
    if (*(char *)(a3 + 135) < 0)
    {
      sub_10004FC84(&__p, *(void **)(a3 + 112), *(void *)(a3 + 120));
    }
    else
    {
      __n128 __p = *(__n128 *)(a3 + 112);
      uint64_t v32 = *(void *)(a3 + 128);
    }
    v33[0] = *(void *)(a3 + 136);
    *(void *)((char *)v33 + 5) = *(void *)(a3 + 141);
    if (*(char *)(a3 + 175) < 0)
    {
      sub_10004FC84(&v34, *(void **)(a3 + 152), *(void *)(a3 + 160));
    }
    else
    {
      long long v34 = *(_OWORD *)(a3 + 152);
      uint64_t v35 = *(void *)(a3 + 168);
    }
    int v14 = 1;
  }
  else
  {
    __p.n128_u8[0] = 0;
  }
  char v36 = v14;
  if (BYTE8(v45) == v14)
  {
    if (BYTE8(v45))
    {
      if (SHIBYTE(v42[2]) < 0) {
        operator delete(*((void **)&v42[1] + 1));
      }
      *(__n128 *)((char *)&v42[1] + 8) = __p;
      *((void *)&v42[2] + 1) = v32;
      HIBYTE(v32) = 0;
      __p.n128_u8[0] = 0;
      *(void *)&long long v43 = v33[0];
      *(void *)((char *)&v43 + 5) = *(void *)((char *)v33 + 5);
      if (SBYTE7(v45) < 0) {
        operator delete((void *)v44);
      }
      long long v44 = v34;
      *(void *)&long long v45 = v35;
      HIBYTE(v35) = 0;
      LOBYTE(v34) = 0;
    }
  }
  else if (BYTE8(v45))
  {
    if (SBYTE7(v45) < 0) {
      operator delete((void *)v44);
    }
    if (SHIBYTE(v42[2]) < 0) {
      operator delete(*((void **)&v42[1] + 1));
    }
    BYTE8(v45) = 0;
  }
  else
  {
    *((void *)&v42[2] + 1) = v32;
    *(void *)&long long v43 = v33[0];
    *(void *)((char *)&v43 + 5) = *(void *)((char *)v33 + 5);
    *(__n128 *)((char *)&v42[1] + 8) = __p;
    __n128 __p = 0uLL;
    long long v44 = v34;
    *(void *)&long long v45 = v35;
    uint64_t v32 = 0;
    long long v34 = 0uLL;
    uint64_t v35 = 0;
    BYTE8(v45) = 1;
  }
  sub_10019EFB4((uint64_t)&__p);
  char v15 = a1[5];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    __p.n128_u16[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I fetching subscription info", (uint8_t *)&__p, 2u);
  }
  uint64_t v16 = a1[6];
  sub_10019ED6C((char *)__dst, &v37);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3321888768;
  v18[2] = sub_10109AE90;
  v18[3] = &unk_101A862F8;
  v18[4] = a1;
  v18[5] = v11;
  int v19 = v13;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v21 = a2;
  char v17 = *a5;
  if (*a5) {
    char v17 = _Block_copy(v17);
  }
  aBlock = v17;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void *))(*(void *)v16 + 16))(v16, a2, __dst, a4, v18);
  sub_10019EFB4((uint64_t)&v30);
  __p.n128_u64[0] = (unint64_t)&v29;
  sub_100047F64((void ***)&__p);
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 && v25 < 0) {
    operator delete(v24);
  }
  if (v23 < 0) {
    operator delete(__dst[0]);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  sub_10019EFB4((uint64_t)&v42[1] + 8);
  __p.n128_u64[0] = (unint64_t)v42;
  sub_100047F64((void ***)&__p);
  if (SHIBYTE(v41) < 0) {
    operator delete(*((void **)&v40 + 1));
  }
  if ((_BYTE)v40 && SHIBYTE(v39) < 0) {
    operator delete(*((void **)&v38 + 1));
  }
  if (SBYTE7(v38) < 0) {
    operator delete((void *)v37);
  }
  std::__shared_weak_count::__release_weak(v13);
}

void sub_10109AE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  sub_100CB68DC((uint64_t)&a54);
  std::__shared_weak_count::__release_weak(v54);
  _Unwind_Resume(a1);
}

void sub_10109AE90(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      int v9 = v8;
      if (!*(void *)(a1 + 40))
      {
LABEL_181:
        sub_10004D2C8(v9);
        return;
      }
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      *(_OWORD *)uint64_t v46 = 0u;
      *(_OWORD *)long long v44 = 0u;
      uint64_t v10 = *a2;
      if (!a3) {
        goto LABEL_8;
      }
      unsigned int v32 = *(_DWORD *)(a1 + 64);
      uint64_t v11 = *(void *)(v10 + 8);
      uint64_t v12 = *(std::__shared_weak_count **)(v10 + 16);
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!v11)
        {
          sub_10004D2C8(v12);
LABEL_8:
          long long v66 = 0u;
          *(_OWORD *)uint64_t v67 = 0u;
          *(_OWORD *)char v65 = 0u;
          *(_OWORD *)CFDictionaryRef v63 = 0u;
          memset(__p, 0, sizeof(__p));
          *(_OWORD *)uint64_t v62 = 0u;
          (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
          *(void *)uint64_t v53 = (char *)&v66 + 8;
          sub_10023F96C((void ***)v53);
          *(void *)uint64_t v53 = v65;
          sub_10023FA88((void ***)v53);
          if (LOBYTE(__p[0]))
          {
            if (SHIBYTE(__p[3]) < 0) {
              operator delete(__p[1]);
            }
            LOBYTE(__p[0]) = 0;
          }
          if (LOBYTE(v62[0]) && SHIBYTE(v63[1]) < 0) {
            operator delete(v62[1]);
          }
LABEL_174:
          v62[0] = (char *)&v49 + 8;
          sub_10023F96C((void ***)v62);
          v62[0] = &v48;
          sub_10023FA88((void ***)v62);
          if (LOBYTE(v46[0]))
          {
            if (SHIBYTE(v47) < 0) {
              operator delete(v46[1]);
            }
            LOBYTE(v46[0]) = 0;
          }
          if (LOBYTE(v44[0]))
          {
            if (SHIBYTE(v45) < 0) {
              operator delete(v44[1]);
            }
          }
          goto LABEL_181;
        }
      }
      else if (!v11)
      {
        goto LABEL_8;
      }
      uint64_t v30 = v8;
      uint64_t v31 = v11;
      if (*(unsigned char *)(v11 + 88))
      {
        int v14 = *(long long **)(v11 + 64);
        uint64_t v13 = *(long long **)(v11 + 72);
        while (v14 != v13)
        {
          *(_OWORD *)CFMutableDictionaryRef v71 = 0u;
          long long v72 = 0u;
          *(_OWORD *)__src = 0u;
          *(_OWORD *)uint64_t v70 = 0u;
          *(_OWORD *)uint64_t v67 = 0u;
          *(_OWORD *)uint64_t v68 = 0u;
          *(_OWORD *)char v65 = 0u;
          long long v66 = 0u;
          memset(__p, 0, sizeof(__p));
          *(_OWORD *)uint64_t v62 = 0u;
          *(_OWORD *)CFDictionaryRef v63 = 0u;
          sub_100FC80D0((uint64_t)v62, v14);
          *(_OWORD *)uint64_t v60 = 0u;
          long long v61 = 0u;
          *(_OWORD *)uint64_t v58 = 0u;
          long long v59 = 0u;
          *(_OWORD *)std::string v56 = 0u;
          long long v57 = 0u;
          *(_OWORD *)uint64_t v54 = 0u;
          long long v55 = 0u;
          *(_OWORD *)uint64_t v53 = 0u;
          if (LOBYTE(v63[1]) && (sub_100CCD2E8() & 1) == 0)
          {
            char v15 = *(NSObject **)(v7 + 40);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#E Invalid EID in secondary-devices-paired", buf, 2u);
            }
            goto LABEL_62;
          }
          if (LOBYTE(v68[1]))
          {
            sub_100CCD468(v67, buf);
            if (SBYTE7(v59) < 0) {
              operator delete(v58[0]);
            }
            *(_OWORD *)uint64_t v58 = *(_OWORD *)buf;
            *(void *)&long long v59 = *(void *)&buf[16];
          }
          if (LOBYTE(v70[1]))
          {
            if (SHIBYTE(v70[0]) < 0)
            {
              sub_10004FC84(__dst, __src[0], (unint64_t)__src[1]);
            }
            else
            {
              *(_OWORD *)long long __dst = *(_OWORD *)__src;
              char v36 = v70[0];
            }
            BYTE8(v59) = sub_10109A710((unsigned __int16 *)__dst);
            if (SHIBYTE(v36) < 0) {
              operator delete(__dst[0]);
            }
          }
          else
          {
            BYTE8(v59) = 0;
          }
          if (BYTE8(v72))
          {
            if (SBYTE7(v72) < 0)
            {
              if (v71[1])
              {
                buf[0] = 0;
                sub_10004FC84(&buf[8], v71[0], (unint64_t)v71[1]);
                goto LABEL_39;
              }
            }
            else if (BYTE7(v72))
            {
              *(_OWORD *)&buf[8] = *(_OWORD *)v71;
              uint64_t v52 = (void *)v72;
LABEL_39:
              buf[0] = 1;
              sub_1003464A0((uint64_t)v60, (uint64_t)buf);
              if (buf[0] && SHIBYTE(v52) < 0) {
                operator delete(*(void **)&buf[8]);
              }
            }
          }
          char v16 = (char)__p[3];
          if (LOBYTE(__p[3]))
          {
            buf[0] = 0;
            if (SHIBYTE(__p[2]) < 0)
            {
              sub_10004FC84(&buf[8], __p[0], (unint64_t)__p[1]);
            }
            else
            {
              *(_OWORD *)&buf[8] = *(_OWORD *)__p;
              uint64_t v52 = __p[2];
            }
            char v16 = 1;
          }
          buf[0] = v16;
          sub_1003464A0((uint64_t)v54, (uint64_t)buf);
          if (buf[0] && SHIBYTE(v52) < 0) {
            operator delete(*(void **)&buf[8]);
          }
          char v17 = BYTE8(v66);
          if (BYTE8(v66))
          {
            buf[0] = 0;
            if (SBYTE7(v66) < 0)
            {
              sub_10004FC84(&buf[8], v65[0], (unint64_t)v65[1]);
            }
            else
            {
              *(_OWORD *)&buf[8] = *(_OWORD *)v65;
              uint64_t v52 = (void *)v66;
            }
            char v17 = 1;
          }
          buf[0] = v17;
          sub_1003464A0((uint64_t)v56, (uint64_t)buf);
          if (buf[0] && SHIBYTE(v52) < 0) {
            operator delete(*(void **)&buf[8]);
          }
          uint64_t v18 = *((void *)&v48 + 1);
          if (*((void *)&v48 + 1) >= (unint64_t)v49)
          {
            uint64_t v19 = sub_1006D3390((uint64_t *)&v48, (uint64_t)v53);
          }
          else
          {
            sub_1003447D4(*((uint64_t *)&v48 + 1), (uint64_t)v53);
            uint64_t v19 = v18 + 144;
          }
          *((void *)&v48 + 1) = v19;
LABEL_62:
          if (LOBYTE(v60[0]))
          {
            if (SHIBYTE(v61) < 0) {
              operator delete(v60[1]);
            }
            LOBYTE(v60[0]) = 0;
          }
          if (SBYTE7(v59) < 0) {
            operator delete(v58[0]);
          }
          if (LOBYTE(v56[0]))
          {
            if (SHIBYTE(v57) < 0) {
              operator delete(v56[1]);
            }
            LOBYTE(v56[0]) = 0;
          }
          if (LOBYTE(v54[0]) && SHIBYTE(v55) < 0) {
            operator delete(v54[1]);
          }
          if (BYTE8(v72) && SBYTE7(v72) < 0) {
            operator delete(v71[0]);
          }
          if (LOBYTE(v70[1]) && SHIBYTE(v70[0]) < 0) {
            operator delete(__src[0]);
          }
          if (LOBYTE(v68[1]) && SHIBYTE(v68[0]) < 0) {
            operator delete(v67[0]);
          }
          if (BYTE8(v66) && SBYTE7(v66) < 0) {
            operator delete(v65[0]);
          }
          if (LOBYTE(__p[3]) && SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          if (LOBYTE(v63[1]) && SHIBYTE(v63[0]) < 0) {
            operator delete(v62[0]);
          }
          v14 += 12;
        }
      }
      if (!*(unsigned char *)(v31 + 120) || (v20 = *(void *)(v31 + 96), uint64_t v21 = *(void *)(v31 + 104), v20 == v21))
      {
LABEL_151:
        sub_100D09934((char *)v31, (uint64_t)v62);
        sub_1003464A0((uint64_t)v44, (uint64_t)v62);
        if (LOBYTE(v62[0]) && SHIBYTE(v63[1]) < 0) {
          operator delete(v62[1]);
        }
        sub_100D09934((char *)(v31 + 32), (uint64_t)v62);
        sub_1003464A0((uint64_t)v46, (uint64_t)v62);
        int v9 = v30;
        if (LOBYTE(v62[0]) && SHIBYTE(v63[1]) < 0) {
          operator delete(v62[1]);
        }
        if (v12) {
          sub_10004D2C8(v12);
        }
        char v28 = *(NSObject **)(v7 + 40);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          sub_100344514(v37, (uint64_t *)v44);
          cellplan::asString();
          if (SHIBYTE(v63[0]) >= 0) {
            uint64_t v29 = v62;
          }
          else {
            uint64_t v29 = (void **)v62[0];
          }
          *(_DWORD *)uint64_t v53 = 136315138;
          *(void *)&v53[4] = v29;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I getSIMStatus response: %s", v53, 0xCu);
          if (SHIBYTE(v63[0]) < 0) {
            operator delete(v62[0]);
          }
          *(void *)std::string buf = &v43;
          sub_10023F96C((void ***)buf);
          *(void *)std::string buf = &v42;
          sub_10023FA88((void ***)buf);
          if (v39)
          {
            if (v41 < 0) {
              operator delete(v40);
            }
            char v39 = 0;
          }
          if (LOBYTE(v37[0]))
          {
            if (v38 < 0) {
              operator delete(v37[1]);
            }
            LOBYTE(v37[0]) = 0;
          }
        }
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        goto LABEL_174;
      }
      while (1)
      {
        v71[0] = 0;
        *(_OWORD *)__src = 0u;
        *(_OWORD *)uint64_t v70 = 0u;
        *(_OWORD *)uint64_t v67 = 0u;
        *(_OWORD *)uint64_t v68 = 0u;
        *(_OWORD *)char v65 = 0u;
        long long v66 = 0u;
        memset(__p, 0, sizeof(__p));
        *(_OWORD *)uint64_t v62 = 0u;
        *(_OWORD *)CFDictionaryRef v63 = 0u;
        if (*(unsigned char *)(v20 + 24) && (sub_100CCD2E8() & 1) == 0)
        {
          char v23 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v53 = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#E Invalid EID in Subscription", v53, 2u);
          }
          goto LABEL_138;
        }
        if (*(unsigned char *)(v20 + 56)) {
          std::string::operator=((std::string *)v63, (const std::string *)(v20 + 32));
        }
        if (*(unsigned char *)(v20 + 88))
        {
          sub_100CCD468((void *)(v20 + 64), (char *)v53);
          if (SHIBYTE(__p[3]) < 0) {
            operator delete(__p[1]);
          }
          *(_OWORD *)&__p[1] = *(_OWORD *)v53;
          __p[3] = v54[0];
        }
        if (*(unsigned char *)(v20 + 120))
        {
          if (*(char *)(v20 + 119) < 0)
          {
            sub_10004FC84(v33, *(void **)(v20 + 96), *(void *)(v20 + 104));
          }
          else
          {
            long long v22 = *(_OWORD *)(v20 + 96);
            uint64_t v34 = *(void *)(v20 + 112);
            *(_OWORD *)uint64_t v33 = v22;
          }
          LOBYTE(v65[0]) = sub_10109A710((unsigned __int16 *)v33);
          if (SHIBYTE(v34) < 0) {
            operator delete(v33[0]);
          }
        }
        else
        {
          LOBYTE(v65[0]) = 0;
        }
        if (*(unsigned char *)(v20 + 132)) {
          break;
        }
        (*(void (**)(uint8_t *__return_ptr))(**(void **)(v7 + 64) + 640))(v53);
        char v25 = (*(uint64_t (**)(void, void))(**(void **)v53 + 120))(*(void *)v53, v32);
        if (*(void *)&v53[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&v53[8]);
        }
        if (v25)
        {
          char v24 = 2;
LABEL_121:
          BYTE1(v65[0]) = v24;
        }
        if (*(unsigned char *)(v20 + 160)) {
          std::string::operator=((std::string *)&v65[1], (const std::string *)(v20 + 136));
        }
        if (!*(unsigned char *)(v20 + 192)) {
          goto LABEL_130;
        }
        if ((*(char *)(v20 + 191) & 0x80000000) == 0)
        {
          if (!*(unsigned char *)(v20 + 191)) {
            goto LABEL_130;
          }
LABEL_129:
          std::string::operator=((std::string *)v67, (const std::string *)(v20 + 168));
          goto LABEL_130;
        }
        if (*(void *)(v20 + 176)) {
          goto LABEL_129;
        }
LABEL_130:
        if (*(unsigned char *)(v20 + 224)) {
          std::string::operator=((std::string *)&v68[1], (const std::string *)(v20 + 200));
        }
        if (*(unsigned char *)(v20 + 256)) {
          std::string::operator=((std::string *)v70, (const std::string *)(v20 + 232));
        }
        uint64_t v26 = v50;
        if ((unint64_t)v50 >= *((void *)&v50 + 1))
        {
          uint64_t v27 = sub_1006D3644((uint64_t *)&v49 + 1, (uint64_t)v62);
        }
        else
        {
          sub_1003449E4(v50, (uint64_t)v62);
          uint64_t v27 = v26 + 168;
        }
        *(void *)&long long v50 = v27;
LABEL_138:
        if (SHIBYTE(v71[0]) < 0) {
          operator delete(v70[0]);
        }
        if (SHIBYTE(__src[1]) < 0) {
          operator delete(v68[1]);
        }
        if (SHIBYTE(v68[0]) < 0) {
          operator delete(v67[0]);
        }
        if (SHIBYTE(v66) < 0) {
          operator delete(v65[1]);
        }
        if (SHIBYTE(__p[3]) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v63[0]);
        }
        v20 += 264;
        if (v20 == v21) {
          goto LABEL_151;
        }
      }
      if (*(_DWORD *)(v20 + 128) == 1) {
        char v24 = 1;
      }
      else {
        char v24 = 2;
      }
      goto LABEL_121;
    }
  }
}

void sub_10109B910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void *sub_10109BA2C(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void sub_10109BA78(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10109BACC(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  char v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (uint64_t v9 = a1[1], (v10 = std::__shared_weak_count::lock(v5)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  uint64_t v31 = 0;
  long long v30 = 0u;
  long long v28 = 0u;
  memset(v29, 0, sizeof(v29));
  memset(v27, 0, sizeof(v27));
  long long v25 = 0u;
  long long v26 = 0u;
  memset(v24, 0, sizeof(v24));
  std::string::operator=(v24, (const std::string *)a3);
  sub_100093B44(&v24[1], (const std::string *)(a3 + 24));
  uint64_t v12 = *(std::string **)(a3 + 48);
  uint64_t v13 = *(long long **)(a3 + 56);
  if (v12 != (std::string *)v13)
  {
    if (v27[0])
    {
      if ((long long *)((char *)&v25 + 8) != (long long *)(a3 + 48)) {
        sub_10005CA3C((uint64_t)&v25 + 8, v12, v13, 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v12) >> 3));
      }
    }
    else
    {
      *((void *)&v25 + 1) = 0;
      long long v26 = 0uLL;
      sub_1000302C0((char *)&v25 + 8, (long long *)v12, v13, 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v12) >> 3));
      v27[0] = 1;
    }
  }
  sub_100CFBAA0((char *)(a3 + 72), (uint64_t)&__p);
  sub_100179CB0((uint64_t)&v27[8], &__p);
  if (v23 && v22 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_100CFBAA0((char *)(a3 + 104), (uint64_t)&__p);
  sub_100179CB0((uint64_t)&v27[40], &__p);
  if (v23 && v22 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  sub_100CFBAA0((char *)(a3 + 136), (uint64_t)&__p);
  sub_100179CB0((uint64_t)&v27[72], &__p);
  if (v23 && v22 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  int v14 = *(_DWORD *)(a3 + 172);
  if (!*(unsigned char *)(a3 + 168)) {
    int v14 = 0;
  }
  BYTE12(v28) = *(unsigned char *)(a3 + 168);
  DWORD2(v28) = v14;
  sub_100CFBAA0((char *)(a3 + 176), (uint64_t)&__p);
  sub_100179CB0((uint64_t)v29, &__p);
  if (v23 && v22 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  int v15 = *(_DWORD *)(a3 + 212);
  if (!*(unsigned char *)(a3 + 208)) {
    int v15 = 0;
  }
  BYTE4(v30) = *(unsigned char *)(a3 + 208);
  LODWORD(v30) = v15;
  int v16 = *(_DWORD *)(a3 + 220);
  if (!*(unsigned char *)(a3 + 216)) {
    int v16 = 0;
  }
  BYTE12(v30) = *(unsigned char *)(a3 + 216);
  DWORD2(v30) = v16;
  if (*(unsigned char *)(a3 + 224)) {
    LOWORD(v31) = *(unsigned __int8 *)(a3 + 225) | 0x100;
  }
  char v17 = a1[5];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    __p.n128_u16[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I fetching signup info", (uint8_t *)&__p, 2u);
  }
  uint64_t v18 = a1[6];
  sub_10019F000(__dst, (long long *)v24);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3321888768;
  v32[2] = sub_10109BFA4;
  v32[3] = &unk_101A86328;
  v32[4] = a1;
  v32[5] = v9;
  uint64_t v33 = v11;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10034696C((char *)&v34, (long long *)a3);
  uint64_t v19 = *a4;
  if (*a4) {
    uint64_t v19 = _Block_copy(v19);
  }
  aBlock = v19;
  (*(void (**)(uint64_t, uint64_t, unsigned char *, void *))(*(void *)v18 + 24))(v18, a2, __dst, v32);
  sub_10019F1F4((uint64_t)__dst);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v48)
  {
    if (v50 < 0) {
      operator delete(v49);
    }
    char v48 = 0;
  }
  if (v45)
  {
    if (v47 < 0) {
      operator delete(v46);
    }
    char v45 = 0;
  }
  if (v42)
  {
    if (v44 < 0) {
      operator delete(v43);
    }
    char v42 = 0;
  }
  if (v39)
  {
    if (v41 < 0) {
      operator delete(v40);
    }
    char v39 = 0;
  }
  __p.n128_u64[0] = (unint64_t)&v38;
  sub_100047F64((void ***)&__p);
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
  sub_10019F1F4((uint64_t)v24);
  std::__shared_weak_count::__release_weak(v11);
}

void sub_10109BF18(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10109BFA4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (*(void *)(a1 + 40))
      {
        bzero(&v16, 0x310uLL);
        if (a3 && *(void *)(*(void *)a2 + 8))
        {
          uint64_t v12 = 0;
          long long v14 = 0u;
          memset(v11, 0, sizeof(v11));
          uint64_t v13 = &v14;
          char v15 = 1;
          sub_10034620C((uint64_t)&v19, (uint64_t)v11);
          sub_1003107E0((uint64_t)v11);
          std::string::operator=(&v18, *(const std::string **)(*(void *)a2 + 8));
          std::string::operator=(&v19, (const std::string *)(*(void *)(*(void *)a2 + 8) + 24));
          std::string::operator=(&v20, (const std::string *)(a1 + 56));
          std::string::operator=(&v21, (const std::string *)(a1 + 80));
          if (&v20 != (std::string *)(a1 + 56)) {
            sub_10005CA3C((uint64_t)&v22, *(std::string **)(a1 + 104), *(long long **)(a1 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 112) - *(void *)(a1 + 104)) >> 3));
          }
          sub_1003DC1E4((uint64_t)&v23, a1 + 128);
          sub_1003DC1E4((uint64_t)&v24, a1 + 160);
          sub_1003DC1E4((uint64_t)v25, a1 + 192);
          uint8_t v25[4] = *(void *)(a1 + 224);
          sub_1003DC1E4((uint64_t)v26, a1 + 232);
          __int16 v27 = *(_WORD *)(a1 + 280);
          v26[2] = *(_OWORD *)(a1 + 264);
        }
        else
        {
          uint64_t v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v11[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E no response", (uint8_t *)v11, 2u);
          }
        }
        (*(void (**)(void))(*(void *)(a1 + 288) + 16))();
        if (v31 && v30 < 0) {
          operator delete(__p);
        }
        if (v28[344]) {
          sub_100310520((uint64_t)v28);
        }
        sub_1003107E0((uint64_t)&v19);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v18.__r_.__value_.__l.__data_);
        }
        if (v17 < 0) {
          operator delete(v16);
        }
      }
      sub_10004D2C8(v9);
    }
  }
}

void sub_10109C23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10109C268(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  sub_10034696C((char *)(a1 + 56), (long long *)(a2 + 56));
  uint64_t result = *(void **)(a2 + 288);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 288) = result;
  return result;
}

void sub_10109C2C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10109C2DC(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 288);
  if (v2) {
    _Block_release(v2);
  }
  sub_10031085C(a1 + 56);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10109C338(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v7 = a1[5];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I getCarrierAuthToken", buf, 2u);
  }
  int v8 = (std::__shared_weak_count *)a1[2];
  if (!v8 || (uint64_t v9 = a1[1], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v11 = v10;
  p_shared_weak_owners = &v10->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  uint64_t v13 = a1[6];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  v15[2] = sub_10109C4D4;
  v15[3] = &unk_101A86358;
  v15[4] = a1;
  v15[5] = v9;
  int v16 = v11;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  long long v14 = *a4;
  if (*a4) {
    long long v14 = _Block_copy(v14);
  }
  aBlock = v14;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v13 + 48))(v13, a2, v15);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v11);
}

void sub_10109C4A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void sub_10109C4D4(void *a1, const std::string *a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    int v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (a1[5])
      {
        memset(&v12, 0, sizeof(v12));
        if (a3)
        {
          std::string::operator=(&v12, a2);
        }
        else
        {
          uint64_t v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v11 = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E no response", v11, 2u);
          }
        }
        (*(void (**)(void))(a1[7] + 16))();
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12.__r_.__value_.__l.__data_);
        }
      }
      sub_10004D2C8(v9);
    }
  }
}

void sub_10109C5BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10004D2C8(v15);
  _Unwind_Resume(a1);
}

void *sub_10109C5E0(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void sub_10109C62C(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10109C680(void *a1, uint64_t a2, uint64_t a3, void **a4)
{
  int v8 = a1[5];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I TransferSIMService", buf, 2u);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[2];
  if (!v9 || (v10 = a1[1], (uint64_t v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    sub_100088B9C();
  }
  std::string v12 = v11;
  p_shared_weak_owners = &v11->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v11);
  uint64_t v14 = a1[6];
  sub_10019FC70((uint64_t)v19, a3);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3321888768;
  v16[2] = sub_10109C854;
  v16[3] = &unk_101A86388;
  v16[4] = a1;
  v16[5] = v10;
  char v17 = v12;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  char v15 = *a4;
  if (*a4) {
    char v15 = _Block_copy(v15);
  }
  aBlock = v15;
  (*(void (**)(uint64_t, uint64_t, uint8_t *, void *))(*(void *)v14 + 56))(v14, a2, v19, v16);
  sub_1001A03F4((uint64_t)v19);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v12);
}

void sub_10109C814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, char a18)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  sub_1001A03F4((uint64_t)&a18);
  std::__shared_weak_count::__release_weak(v18);
  _Unwind_Resume(a1);
}

void sub_10109C854(void *a1, unsigned int **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v10 = v6;
      if (a1[5])
      {
        uint64_t v26 = 0;
        long long v24 = 0u;
        *(_OWORD *)__n128 __p = 0u;
        *(_OWORD *)uint64_t v22 = 0u;
        long long v23 = 0u;
        *(_OWORD *)std::string v20 = 0u;
        long long v21 = 0u;
        *(_OWORD *)std::string v18 = 0u;
        long long v19 = 0u;
        long long v17 = 0u;
        uint64_t v11 = *a2;
        if (*a2 && (uint64_t v12 = *((void *)v11 + 1)) != 0)
        {
          (*(void (**)(void, uint64_t, void, uint64_t, uint64_t, uint64_t))(a1[7] + 16))(a1[7], v12, *v11, v7, v8, v9);
        }
        else
        {
          uint64_t v13 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#E no response", buf, 2u);
          }
          (*(void (**)(void, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(a1[7] + 16))(a1[7], &v17, 6010, v14, v15, v16);
        }
        if (SHIBYTE(v26) < 0) {
          operator delete(__p[0]);
        }
        if ((_BYTE)v24 && SHIBYTE(v23) < 0) {
          operator delete(v22[1]);
        }
        if (LOBYTE(v22[0]) && SHIBYTE(v21) < 0) {
          operator delete(v20[1]);
        }
        if (LOBYTE(v20[0]))
        {
          if (SHIBYTE(v19) < 0) {
            operator delete(v18[1]);
          }
        }
        *(void *)std::string buf = &v17;
        sub_1001A010C((void ***)buf);
      }
      sub_10004D2C8(v10);
    }
  }
}

void sub_10109C9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1008C340C((uint64_t)&a9);
  sub_10004D2C8(v9);
  _Unwind_Resume(a1);
}

void *sub_10109C9D0(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void sub_10109CA1C(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10109CA70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v10 = a1[5];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I TransferAuthorization", buf, 2u);
  }
  uint64_t v11 = (std::__shared_weak_count *)a1[2];
  if (!v11 || (v12 = a1[1], (uint64_t v13 = std::__shared_weak_count::lock(v11)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v14 = v13;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v13);
  uint64_t v15 = a1[6];
  sub_1000593FC((uint64_t)__p, (long long *)a3);
  uint64_t v23 = *(void *)(a3 + 32);
  sub_1001A04E8(v24, a3 + 40);
  long long v25 = *(_OWORD *)(a3 + 200);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3321888768;
  v17[2] = sub_10109CCB0;
  v17[3] = &unk_101A863B8;
  v17[4] = a1;
  v17[5] = v12;
  std::string v18 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = *a5;
  if (*a5) {
    uint64_t v16 = _Block_copy(v16);
  }
  aBlock = v16;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void *))(*(void *)v15 + 64))(v15, a2, __p, a4, v17);
  sub_1001A0540((uint64_t)v24);
  if (v22 && v21 < 0) {
    operator delete(__p[0]);
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  std::__shared_weak_count::__release_weak(v14);
}

void sub_10109CC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  sub_100B56FB8((uint64_t)&__p);
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void sub_10109CCB0(void *a1, uint64_t a2, int a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      if (a1[5])
      {
        if (a3 && *(void *)(*(void *)a2 + 8))
        {
          (*(void (**)(void))(a1[7] + 16))();
        }
        else
        {
          uint64_t v10 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v11 = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E no response", v11, 2u);
          }
          *(_WORD *)uint64_t v11 = 0;
          char v12 = 0;
          char v13 = 0;
          char v14 = 0;
          char v15 = 0;
          char v16 = 0;
          char v17 = 0;
          char v18 = 0;
          char v19 = 0;
          char v20 = 0;
          char v21 = 0;
          char v22 = 0;
          char v23 = 0;
          char v24 = 0;
          char v25 = 0;
          char v26 = 0;
          char v27 = 0;
          char v28 = 0;
          char v29 = 0;
          char v30 = 0;
          char v31 = 0;
          __int16 v32 = 0;
          (*(void (**)(void, uint8_t *))(a1[7] + 16))(a1[7], v11);
          sub_1008C2D48((uint64_t)v11);
        }
      }
      sub_10004D2C8(v9);
    }
  }
}

void sub_10109CE08(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void *sub_10109CE2C(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void sub_10109CE78(uint64_t a1)
{
  unint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_10109CED0(void *a1)
{
  sub_10109CF08(a1);

  operator delete();
}

void *sub_10109CF08(void *a1)
{
  *a1 = off_101A862C0;
  unint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_10004D2C8(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 5));
  sub_100087E88(a1 + 1);
  return a1;
}

void sub_10109CF74(dispatch_object_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x68uLL);
  sub_10109D000(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1000B3BC8((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_10109CFEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10109D000(void *a1, dispatch_object_t *a2, uint64_t *a3, void *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_101A864F8;
  sub_10109D0F8(a1 + 3, a2, a3, a4);
  return a1;
}

void sub_10109D048(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10109D05C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A864F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10109D07C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A864F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10109D0D0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))();
}

void *sub_10109D0F8(void *a1, dispatch_object_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v7 = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  uint64_t v9 = *a3;
  uint64_t v8 = (std::__shared_weak_count *)a3[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a1 = &off_101A863F8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v12, kCtLoggingSystemName, "cp.ent");
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  a1[4] = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v13, &v12);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 5), (const ctu::OsLogLogger *)v13);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v12);
  *a1 = off_101A862C0;
  a1[6] = v9;
  a1[7] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[8] = *a4;
  uint64_t v10 = a4[1];
  a1[9] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v7) {
    dispatch_release(v7);
  }
  return a1;
}

void sub_10109D244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  sub_100087E88(v4);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (v2) {
    dispatch_release(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10109D290()
{
  return 1;
}

uint64_t sub_10109D298(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    a2[1] = 0;
    a2 = (uint64_t *)*a2;
  }
  else
  {
    *((unsigned char *)a2 + 23) = 0;
  }
  *(unsigned char *)a2 = 0;
  return 1;
}

uint64_t sub_10109D2BC()
{
  return 1;
}

uint64_t sub_10109D2C4()
{
  return 1;
}

void sub_10109D2CC()
{
}

void sub_10109D328()
{
}

const char *sub_10109D384()
{
  return "empty";
}

void sub_10109D394()
{
}

uint64_t IMSCallCommandDriver::IMSCallCommandDriver(uint64_t a1, uint64_t a2, void *a3, NSObject **a4, uint64_t a5, uint64_t a6)
{
  object = *a4;
  *a4 = 0;
  CallCommandDriver::CallCommandDriver();
  uint64_t v9 = (capabilities::ct *)object;
  if (object) {
    dispatch_release(object);
  }
  v13[0] = off_101999E18;
  v13[1] = sub_10109D88C;
  v13[3] = v13;
  *(void *)(a1 + 120) = 0;
  if ((capabilities::ct::supportsGemini(v9) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 120)) {
    operator new();
  }
  sub_10008863C(v13);
  *(void *)a1 = off_101A865F0;
  *(void *)(a1 + 8) = off_101A86810;
  *(_DWORD *)(a1 + 128) = 2;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)a6;
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  sub_10057F630(a1 + 192);
  *(unsigned char *)(a1 + 600) = 0;
  *(unsigned char *)(a1 + 602) = 0;
  *(void *)(a1 + 608) = 0;
  *(unsigned char *)(a1 + 616) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 624) = a1 + 632;
  *(unsigned char *)(a1 + 648) = 0;
  *(void *)(a1 + 656) = a1 + 656;
  *(void *)(a1 + 664) = a1 + 656;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 696) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = a1 + 688;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 704) = a1 + 712;
  *(unsigned char *)(a1 + 728) = 0;
  sub_1000FE9CC((uint64_t *)(a1 + 736), (uint64_t)&rest::kDefaultBundles);
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 760) = a1 + 768;
  *(void *)(a1 + 784) = *a3;
  uint64_t v10 = a3[1];
  *(void *)(a1 + 792) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 808) = 0;
  *(void *)(a1 + 800) = a1 + 808;
  *(unsigned char *)(a1 + 824) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 840) = 0;
  sub_10035D650((uint64_t *)(a1 + 856), (uint64_t)&rest::kDefaultRegistrationStatuses);
  return a1;
}

void sub_10109D6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10008863C((uint64_t *)va);
  operator delete();
}

void sub_10109D878(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  JUMPOUT(0x10109D868);
}

const char *sub_10109D88C(int a1)
{
  if ((a1 - 1) > 2) {
    return "call.CmdDriver.IMS.sim.?";
  }
  else {
    return off_101A87660[a1 - 1];
  }
}

void sub_10109D8B4(uint64_t a1)
{
  *(void *)a1 = off_101A865F0;
  unint64_t v2 = (CallCommandDriver *)(a1 + 8);
  *(void *)(a1 + 8) = off_101A86810;
  sub_1000346F8(a1 + 856, *(void **)(a1 + 864));
  uint64_t v9 = (void **)(a1 + 832);
  sub_10008A88C(&v9);
  sub_1000346F8(a1 + 800, *(void **)(a1 + 808));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 792);
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_1000886C0(a1 + 760, *(char **)(a1 + 768));
  sub_100087F94(a1 + 736, *(void **)(a1 + 744));
  sub_1007035FC(a1 + 704, *(void **)(a1 + 712));
  sub_10005CD2C(a1 + 680, *(char **)(a1 + 688));
  sub_100160A84((atomic_uint **)(a1 + 656));
  sub_1001FEC70(*(void **)(a1 + 632));
  uint64_t v4 = *(void *)(a1 + 608);
  *(void *)(a1 + 608) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1002243E8(a1 + 192);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 176);
  if (v5) {
    sub_10004D2C8(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 160);
  if (v6) {
    sub_10004D2C8(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 144);
  if (v7) {
    sub_10004D2C8(v7);
  }
  uint64_t v8 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  CallCommandDriver::~CallCommandDriver(v2);
  IMSCallCommandDriverInterface::~IMSCallCommandDriverInterface((IMSCallCommandDriverInterface *)a1);
}

void sub_10109DA2C(uint64_t a1)
{
}

void sub_10109DA34(uint64_t a1)
{
  sub_10109D8B4(a1);

  operator delete();
}

void sub_10109DA6C(uint64_t a1)
{
  sub_10109D8B4(a1 - 8);

  operator delete();
}

const void **sub_10109DAA8(uint64_t a1, uint64_t a2, unsigned int *a3, void *a4, uint64_t a5, void *a6)
{
  void (***v145)(std::string **__return_ptr, void, unsigned char *);
  char v146;
  NSObject *v147;
  std::string::size_type size;
  std::string *v149;
  const char *v150;
  std::string *v151;
  void *v152;
  NSObject *v153;
  unsigned char *v154;
  std::string::size_type v155;
  std::string *v156;
  const char *v157;
  uint64_t v158;
  NSObject *v159;
  NSObject *v160;
  int v161;
  NSObject *v162;
  unsigned char *v163;
  NSObject *v164;
  std::mutex *v165;
  std::mutex *v166;
  uint64_t v167;
  unsigned __int8 *v168;
  uint64_t v169;
  unsigned int v170;
  void *v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  uint64_t v174;
  BOOL v175;
  BOOL *v176;
  CFTypeID v177;
  CFBooleanRef v178;
  NSObject *v179;
  NSObject *v180;
  uint64_t v181;
  std::__shared_weak_count *v182;
  NSObject **v183;
  uint64_t v184;
  int v185;
  NSObject *v186;
  BOOL v187;
  uint64_t v188;
  int v189;
  NSObject *v190;
  uint64_t v191;
  NSObject *v192;
  int v193;
  CallInfo *v194;
  int v195;
  NSObject *v196;
  const char *v197;
  uint64_t *v198;
  std::mutex *v199;
  std::mutex *v200;
  std::string::size_type v201;
  unsigned __int8 *v202;
  uint64_t v203;
  unsigned int v204;
  void *v205;
  std::__shared_weak_count *v206;
  uint64_t v207;
  char v208;
  std::string::size_type v209;
  NSObject *v210;
  uint64_t v211;
  uint64_t v213;
  const char *v214;
  const char *v215;
  std::__shared_weak_count *v216;
  char v217;
  int v218;
  void *v219;
  char v220;
  void *v221;
  int v222;
  signed int v223;
  uint64_t v224;
  uint64_t *v225;
  os_log_t *v226;
  CallInfo *v228;
  const void *v229;
  std::string *v230;
  std::__shared_weak_count *v231;
  uint64_t v232;
  uint64_t v233;
  std::__shared_weak_count *v234;
  int v235;
  std::string __p;
  std::string __str;
  unsigned char buf[32];
  long long v239;
  long long v240;
  long long v241;
  long long v242;
  long long v243;
  long long v244;
  long long v245;
  long long v246;
  long long v247;
  long long v248;
  long long v249;
  long long v250;
  long long v251;
  long long v252;
  long long v253;
  long long v254;
  long long v255;
  long long v256;
  long long v257;
  long long v258;
  long long v259;
  long long v260;
  long long v261;
  uint64_t v262;
  std::string __dst;
  unsigned char v264[14];
  __int16 v265;
  std::string *v266;
  unsigned char v267[14];
  std::string *v268;
  std::string v269;
  std::string v270;

  uint64_t v11 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), a3[63]);
  v228 = (CallInfo *)a3;
  v222 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 440))();
  if (!v222) {
    goto LABEL_297;
  }
  OsLogContext v12 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Filling the optional emergency parameters", buf, 2u);
  }
  if (a5)
  {
    v218 = *((_DWORD *)v228 + 24);
    v225 = (uint64_t *)(a1 + 56);
    ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)(a1 + 56), *(Registry **)(a1 + 56));
    char v14 = ServiceMap;
    if (v15 < 0)
    {
      char v16 = (unsigned __int8 *)(v15 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v17 = 5381;
      do
      {
        uint64_t v15 = v17;
        unsigned int v18 = *v16++;
        uint64_t v17 = (33 * v17) ^ v18;
      }
      while (v18);
    }
    std::mutex::lock(ServiceMap);
    *(void *)std::string buf = v15;
    char v19 = sub_10004D37C(&v14[1].__m_.__sig, (unint64_t *)buf);
    uint64_t v20 = a5;
    if (v19)
    {
      char v21 = (std::__shared_weak_count *)v19[4];
      v224 = v19[3];
      if (v21)
      {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v14);
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v20 = a5;
        v216 = v21;
        sub_10004D2C8(v21);
        v217 = 0;
        goto LABEL_15;
      }
    }
    else
    {
      v224 = 0;
    }
    std::mutex::unlock(v14);
    v216 = 0;
    v217 = 1;
LABEL_15:
    memset(&v270, 0, sizeof(v270));
    (*(void (**)(std::string *__return_ptr))(*(void *)*a6 + 248))(&v270);
    uint64_t v23 = (*(uint64_t (**)(void))(*(void *)*a6 + 256))(*a6);
    v226 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), v23);
    *(_DWORD *)(v20 + 724) = subscriber::simSlotAsInstance();
    v223 = v23;
    if (*((unsigned char *)v228 + 68) == 2) {
      char v24 = (sd::IMSSubscriberConfigInterface *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 136)
    }
                                                                                           + 432))(*(void *)(a1 + 136), v23);
    else {
      char v24 = 0;
    }
    char v25 = (*(uint64_t (**)(uint64_t, void))(*(void *)v224 + 288))(v224, v223);
    *(_DWORD *)(v20 + 320) = sd::IMSSubscriberConfigInterface::shouldUseAPMediaStack(v24, v25, 0, v26) ^ 1;
    memset(&__str, 0, sizeof(__str));
    (*(void (**)(std::string *__return_ptr))(*(void *)v224 + 56))(&__str);
    std::string::operator=((std::string *)(v20 + 248), &__str);
    char v27 = (std::mutex *)Registry::getServiceMap(v225, (Registry *)*v225);
    char v28 = v27;
    uint64_t v30 = v29;
    if ((v29 & 0x8000000000000000) != 0)
    {
      char v31 = (unsigned __int8 *)(v29 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v32 = 5381;
      do
      {
        uint64_t v30 = v32;
        unsigned int v33 = *v31++;
        uint64_t v32 = (33 * v32) ^ v33;
      }
      while (v33);
    }
    std::mutex::lock(v27);
    *(void *)std::string buf = v30;
    uint64_t v34 = sub_10004D37C(&v28[1].__m_.__sig, (unint64_t *)buf);
    if (v34)
    {
      uint64_t v36 = v34[3];
      char v35 = (std::__shared_weak_count *)v34[4];
      if (v35)
      {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v28);
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v35);
        char v37 = 0;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v36 = 0;
    }
    std::mutex::unlock(v28);
    char v35 = 0;
    char v37 = 1;
LABEL_26:
    int v38 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 96))(v36);
    if ((v37 & 1) == 0) {
      sub_10004D2C8(v35);
    }
    if (v38)
    {
      PersonalityIdFromSlotIdEx();
      sub_100058DB0(&__p, "");
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v224 + 112))(buf);
      sub_10005CBB4((uint64_t *)(a5 + 296));
      *(_OWORD *)(a5 + 296) = *(_OWORD *)buf;
      *(void *)(a5 + 312) = *(void *)&buf[16];
      memset(buf, 0, 24);
      v269.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
      sub_100047F64((void ***)&v269);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        char v39 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_133:
        operator delete(v39);
        goto LABEL_134;
      }
      goto LABEL_134;
    }
    *(void *)&v244 = 0;
    v242 = 0u;
    v243 = 0u;
    v240 = 0u;
    v241 = 0u;
    v239 = 0u;
    memset(buf, 0, sizeof(buf));
    v235 = -1;
    memset(&__p, 0, sizeof(__p));
    memset(&v269, 0, sizeof(v269));
    long long v40 = (std::mutex *)Registry::getServiceMap(v225, (Registry *)*v225);
    char v41 = v40;
    std::string::size_type v42 = v29;
    if ((v29 & 0x8000000000000000) != 0)
    {
      uint64_t v43 = (unsigned __int8 *)(v29 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v44 = 5381;
      do
      {
        std::string::size_type v42 = v44;
        unsigned int v45 = *v43++;
        uint64_t v44 = (33 * v44) ^ v45;
      }
      while (v45);
    }
    std::mutex::lock(v40);
    __dst.__r_.__value_.__r.__words[0] = v42;
    uint64_t v46 = sub_10004D37C(&v41[1].__m_.__sig, (unint64_t *)&__dst);
    if (v46)
    {
      uint64_t v48 = v46[3];
      char v47 = (std::__shared_weak_count *)v46[4];
      if (v47)
      {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v41);
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v47);
        char v49 = 0;
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v48 = 0;
    }
    std::mutex::unlock(v41);
    char v47 = 0;
    char v49 = 1;
LABEL_41:
    (*(void (**)(uint64_t, int *, std::string *, std::string *))(*(void *)v48 + 112))(v48, &v235, &__p, &v269);
    if ((v49 & 1) == 0) {
      sub_10004D2C8(v47);
    }
    v233 = 0;
    v234 = 0;
    PersonalityIdFromSlotIdEx();
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v224 + 48))(&v233);
    uint64_t v50 = a5;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    std::string::operator=((std::string *)buf, (const std::string *)(v233 + 72));
    uint64_t v51 = (const std::string *)v233;
    if (&buf[24] != (unsigned char *)(v233 + 120))
    {
      sub_10005CA3C((uint64_t)&buf[24], *(std::string **)(v233 + 120), *(long long **)(v233 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v233 + 128) - *(void *)(v233 + 120)) >> 3));
      uint64_t v51 = (const std::string *)v233;
    }
    std::string::operator=((std::string *)&v240, v51 + 6);
    if ((long long *)((char *)&v241 + 8) != (long long *)(v233 + 168)) {
      sub_10005CA3C((uint64_t)&v241 + 8, *(std::string **)(v233 + 168), *(long long **)(v233 + 176), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v233 + 176) - *(void *)(v233 + 168)) >> 3));
    }
    sub_10005CA3C((uint64_t)&v243, (std::string *)v269.__r_.__value_.__l.__data_, (long long *)v269.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v269.__r_.__value_.__l.__size_ - v269.__r_.__value_.__r.__words[0]) >> 3));
    uint64_t v53 = (long long *)*((void *)&v243 + 1);
    uint64_t v52 = (std::string *)v243;
    uint64_t v54 = (long long *)(a5 + 504);
    if ((void)v243 == *((void *)&v243 + 1))
    {
      if (v54 == (long long *)((char *)&v241 + 8)) {
        goto LABEL_55;
      }
      uint64_t v52 = (std::string *)*((void *)&v241 + 1);
      uint64_t v53 = (long long *)v242;
    }
    else if (v54 == &v243)
    {
LABEL_55:
      long long v55 = (void *)(a5 + 456);
      std::string::operator=((std::string *)(a5 + 456), (const std::string *)&v240);
      std::string v56 = (void *)(a5 + 432);
      std::string::operator=((std::string *)(a5 + 432), (const std::string *)buf);
      if ((unsigned char *)(a5 + 480) != &buf[24]) {
        sub_10005CA3C(a5 + 480, *(std::string **)&buf[24], (long long *)v239, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v239 - *(void *)&buf[24]) >> 3));
      }
      long long v57 = (const std::string *)v233;
      *(_DWORD *)(a5 + 552) = *(_DWORD *)(v233 + 192) != 2;
      *(_DWORD *)(a5 + 328) = v235;
      std::string::operator=((std::string *)(a5 + 384), v57 + 4);
      v230 = 0;
      v231 = 0;
      v232 = 0;
      uint64_t v58 = (std::__shared_weak_count *)sub_100048008((uint64_t *)&v230, (long long *)&__p);
      v231 = v58;
      if ((std::string **)(a5 + 296) != &v230) {
        sub_10005CA3C(a5 + 296, v230, (long long *)v58, 0xAAAAAAAAAAAAAAABLL * (((char *)v58 - (char *)v230) >> 3));
      }
      if (v226)
      {
        long long v59 = *v226;
        if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a5 + 479) < 0) {
            long long v55 = (void *)*v55;
          }
          LODWORD(__dst.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fillConfigWithEmergencyParams";
          WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v55;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#I %s: IMS Emergency Reg Info: DOMAIN - %s", (uint8_t *)&__dst, 0x16u);
          long long v59 = *v226;
        }
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a5 + 455) < 0) {
            std::string v56 = (void *)*v56;
          }
          LODWORD(__dst.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fillConfigWithEmergencyParams";
          WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v56;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#I %s: IMS Emergency Reg Info: Private Identity - %s", (uint8_t *)&__dst, 0x16u);
          long long v59 = *v226;
        }
        uint64_t v50 = a5;
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a5 + 488) - *(void *)(a5 + 480)) >> 3);
          if (*(_DWORD *)(v233 + 192) == 2) {
            long long v61 = "I";
          }
          else {
            long long v61 = "U";
          }
          LODWORD(__dst.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fillConfigWithEmergencyParams";
          WORD2(__dst.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = v60;
          HIWORD(__dst.__r_.__value_.__r.__words[2]) = 2080;
          *(void *)v264 = v61;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#I %s: IMS Emergency Reg Info: Num public identities - %lu (%sSIM)", (uint8_t *)&__dst, 0x20u);
        }
      }
      v219 = a4;
      CFDictionaryRef v63 = *(long long **)(v50 + 480);
      for (i = *(long long **)(v50 + 488); v63 != i; CFDictionaryRef v63 = (long long *)((char *)v63 + 24))
      {
        memset(&__dst, 0, sizeof(__dst));
        if (*((char *)v63 + 23) < 0)
        {
          sub_10004FC84(&__dst, *(void **)v63, *((void *)v63 + 1));
        }
        else
        {
          long long v64 = *v63;
          __dst.__r_.__value_.__r.__words[2] = *((void *)v63 + 2);
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v64;
        }
        if (v226)
        {
          char v65 = *v226;
          if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
          {
            p_dst = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)v267 = 136315394;
            *(void *)&v267[4] = "fillConfigWithEmergencyParams";
            *(_WORD *)&v267[12] = 2080;
            v268 = p_dst;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#I %s: IMS Emergency Reg Info: Public Identity - %s", v267, 0x16u);
          }
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      if (v226)
      {
        uint64_t v67 = *v226;
        if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v233 + 176) - *(void *)(v233 + 168)) >> 3);
          LODWORD(__dst.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fillConfigWithEmergencyParams";
          WORD2(__dst.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = v68;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "#I %s: IMS Emergency Reg Info: Num PCSCFs [SIM] - %lu", (uint8_t *)&__dst, 0x16u);
        }
      }
      uint64_t v70 = *(long long **)(v233 + 168);
      for (j = *(long long **)(v233 + 176); v70 != j; uint64_t v70 = (long long *)((char *)v70 + 24))
      {
        memset(&__dst, 0, sizeof(__dst));
        if (*((char *)v70 + 23) < 0)
        {
          sub_10004FC84(&__dst, *(void **)v70, *((void *)v70 + 1));
        }
        else
        {
          long long v71 = *v70;
          __dst.__r_.__value_.__r.__words[2] = *((void *)v70 + 2);
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v71;
        }
        if (v226)
        {
          long long v72 = *v226;
          if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v73 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v73 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)v267 = 136315394;
            *(void *)&v267[4] = "fillConfigWithEmergencyParams";
            *(_WORD *)&v267[12] = 2080;
            v268 = v73;
            _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#I %s: IMS Emergency Reg Info: PCSCF [SIM] - %s", v267, 0x16u);
          }
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      if (v226)
      {
        CFDictionaryRef v74 = *v226;
        if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__dst.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fillConfigWithEmergencyParams";
          WORD2(__dst.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = 0xAAAAAAAAAAAAAAABLL
                                                                                       * ((uint64_t)(*((void *)&v243 + 1)
                                                                                                  - v243) >> 3);
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#I %s: IMS Emergency Reg Info: Num PCSCFs [PCO] - %lu", (uint8_t *)&__dst, 0x16u);
        }
      }
      uint64_t v75 = (long long *)*((void *)&v243 + 1);
      for (k = (long long *)v243; k != v75; k = (long long *)((char *)k + 24))
      {
        memset(&__dst, 0, sizeof(__dst));
        if (*((char *)k + 23) < 0)
        {
          sub_10004FC84(&__dst, *(void **)k, *((void *)k + 1));
        }
        else
        {
          long long v77 = *k;
          __dst.__r_.__value_.__r.__words[2] = *((void *)k + 2);
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v77;
        }
        if (v226)
        {
          CFArrayRef v78 = *v226;
          if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
          {
            CFTypeRef v79 = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              CFTypeRef v79 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)v267 = 136315394;
            *(void *)&v267[4] = "fillConfigWithEmergencyParams";
            *(_WORD *)&v267[12] = 2080;
            v268 = v79;
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "#I %s: IMS Emergency Reg Info: PCSCF [PCO] - %s", v267, 0x16u);
          }
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      a4 = v219;
      if (v226)
      {
        v80 = *v226;
        if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          BOOL v82 = (void *)(v233 + 96);
          if (*(char *)(v233 + 119) < 0) {
            BOOL v82 = (void *)*v82;
          }
          p_str = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          LODWORD(__dst.__r_.__value_.__l.__data_) = 136316162;
          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fillConfigWithEmergencyParams";
          WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
          HIWORD(__dst.__r_.__value_.__r.__words[2]) = 1024;
          *(_DWORD *)v264 = v235;
          *(_WORD *)&v264[4] = 2080;
          *(void *)&v264[6] = v82;
          v265 = 2080;
          v266 = p_str;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "#I %s: IMS Emergency Reg Info: network interface: %s, app ID: %d, mdn: %s, country: %s", (uint8_t *)&__dst, 0x30u);
        }
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v230;
      sub_100047F64((void ***)&__dst);
      if (v234) {
        sub_10004D2C8(v234);
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v269;
      sub_100047F64((void ***)&__dst);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v243;
      sub_100047F64((void ***)&__dst);
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v241 + 8;
      sub_100047F64((void ***)&__dst);
      if (SBYTE7(v241) < 0) {
        operator delete((void *)v240);
      }
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf[24];
      sub_100047F64((void ***)&__dst);
      if ((buf[23] & 0x80000000) != 0)
      {
        char v39 = *(void **)buf;
        goto LABEL_133;
      }
LABEL_134:
      memset(&__dst, 0, sizeof(__dst));
      memset(&__p, 0, sizeof(__p));
      long long v84 = (std::mutex *)Registry::getServiceMap(v225, (Registry *)*v225);
      uint64_t v85 = v84;
      if ((v29 & 0x8000000000000000) != 0)
      {
        uint64_t v86 = (unsigned __int8 *)(v29 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v87 = 5381;
        do
        {
          std::string::size_type v29 = v87;
          unsigned int v88 = *v86++;
          uint64_t v87 = (33 * v87) ^ v88;
        }
        while (v88);
      }
      std::mutex::lock(v84);
      *(void *)std::string buf = v29;
      v89 = sub_10004D37C(&v85[1].__m_.__sig, (unint64_t *)buf);
      if (v89)
      {
        uint64_t v91 = v89[3];
        uint64_t v90 = (std::__shared_weak_count *)v89[4];
        if (v90)
        {
          atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v85);
          atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v90);
          char v92 = 0;
          goto LABEL_142;
        }
      }
      else
      {
        uint64_t v91 = 0;
      }
      std::mutex::unlock(v85);
      uint64_t v90 = 0;
      char v92 = 1;
LABEL_142:
      int v93 = (*(uint64_t (**)(uint64_t))(*(void *)v91 + 88))(v91);
      if ((v92 & 1) == 0) {
        sub_10004D2C8(v90);
      }
      if (v93)
      {
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v224 + 120))(buf);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        long long __dst = *(std::string *)buf;
        PersonalityIdFromSlotIdEx();
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v224 + 128))(buf);
      }
      else
      {
        PersonalityIdFromSlotId();
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v224 + 176))(buf);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        long long __dst = *(std::string *)buf;
        buf[23] = 0;
        buf[0] = 0;
        if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v269.__r_.__value_.__l.__data_);
        }
        PersonalityIdFromSlotId();
        (*(void (**)(unsigned char *__return_ptr))(*(void *)v224 + 192))(buf);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __n128 __p = *(std::string *)buf;
      buf[23] = 0;
      buf[0] = 0;
      if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v269.__r_.__value_.__l.__data_);
      }
      ims::AccessNetwork::set();
      if (v226)
      {
        uint64_t v94 = *v226;
        if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v95 = &__dst;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            BOOL v95 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          uint64_t v96 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v96 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "fillConfigWithEmergencyParams";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v95;
          *(_WORD *)&unsigned char buf[22] = 2080;
          *(void *)&unsigned char buf[24] = v96;
          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "#I %s: IMS Emergency Reg Info: Access Type = %s, Access Info = %s", buf, 0x20u);
        }
      }
      v97 = (std::mutex *)Registry::getServiceMap(v225, (Registry *)*v225);
      long long v98 = v97;
      if (v99 < 0)
      {
        v100 = (unsigned __int8 *)(v99 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v101 = 5381;
        do
        {
          uint64_t v99 = v101;
          unsigned int v102 = *v100++;
          uint64_t v101 = (33 * v101) ^ v102;
        }
        while (v102);
      }
      std::mutex::lock(v97);
      *(void *)std::string buf = v99;
      v103 = sub_10004D37C(&v98[1].__m_.__sig, (unint64_t *)buf);
      if (v103)
      {
        uint64_t v104 = v103[3];
        uint64_t v105 = (std::__shared_weak_count *)v103[4];
        if (v105)
        {
          atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v98);
          atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v105);
          v220 = 0;
LABEL_172:
          uint64_t v106 = (*(uint64_t (**)(uint64_t, void))(*(void *)v104 + 440))(v104, v223);
          uint64_t v107 = (capabilities::ct *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v104 + 448))(v104, v223, v106);
          int v108 = (int)v107;
          uint64_t v109 = *(void *)(a1 + 864);
          if (!v109) {
            goto LABEL_182;
          }
          uint64_t v110 = a1 + 864;
          do
          {
            int v111 = *(_DWORD *)(v109 + 28);
            BOOL v112 = v111 < v223;
            if (v111 >= v223) {
              v113 = (uint64_t *)v109;
            }
            else {
              v113 = (uint64_t *)(v109 + 8);
            }
            if (!v112) {
              uint64_t v110 = v109;
            }
            uint64_t v109 = *v113;
          }
          while (*v113);
          if (v110 != a1 + 864 && *(_DWORD *)(v110 + 28) <= v223) {
            int v114 = *(_DWORD *)(v110 + 32);
          }
          else {
LABEL_182:
          }
            int v114 = 0;
          if (v226)
          {
            uint64_t v115 = *v226;
            uint64_t v107 = (capabilities::ct *)os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT);
            if (v107)
            {
              uint64_t v116 = asString();
              v117 = "false";
              *(_DWORD *)std::string buf = 136315650;
              *(void *)&uint8_t buf[4] = "fillConfigWithEmergencyParams";
              *(_WORD *)&unsigned char buf[12] = 2080;
              if (v108) {
                v117 = "true";
              }
              *(void *)&buf[14] = v117;
              *(_WORD *)&unsigned char buf[22] = 2080;
              *(void *)&unsigned char buf[24] = v116;
              _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "#I %s: IMS Emergency Reg Info: isLimitedService = %s, regStatus = %s", buf, 0x20u);
            }
          }
          *(unsigned char *)(a5 + 556) = v114 == 5;
          *(unsigned char *)(a5 + 557) = v108;
          int v118 = capabilities::ct::supportsVoiceCall(v107);
          *(unsigned char *)(a5 + 712) = v118;
          if (v118)
          {
            memset(buf, 0, 24);
            sub_100058DB0(buf, "");
            uint64_t v119 = *(void *)(a1 + 768);
            if (!v119) {
              goto LABEL_199;
            }
            uint64_t v120 = a1 + 768;
            do
            {
              int v121 = *(_DWORD *)(v119 + 32);
              BOOL v122 = v121 < v223;
              if (v121 >= v223) {
                v123 = (uint64_t *)v119;
              }
              else {
                v123 = (uint64_t *)(v119 + 8);
              }
              if (!v122) {
                uint64_t v120 = v119;
              }
              uint64_t v119 = *v123;
            }
            while (*v123);
            if (v120 != a1 + 768 && v223 >= *(_DWORD *)(v120 + 32))
            {
              std::string::operator=((std::string *)buf, (const std::string *)(v120 + 40));
              long long v162 = *v226;
              if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
              {
                long long v163 = buf;
                if (buf[23] < 0) {
                  long long v163 = *(unsigned char **)buf;
                }
                LODWORD(v269.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v269.__r_.__value_.__r.__words + 4) = (std::string::size_type)v163;
                _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_DEFAULT, "#I Device ID found: %s", (uint8_t *)&v269, 0xCu);
              }
            }
            else
            {
LABEL_199:
              uint64_t v124 = *v226;
              if (os_log_type_enabled(*v226, OS_LOG_TYPE_ERROR))
              {
                LOWORD(v269.__r_.__value_.__l.__data_) = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_ERROR, "No device ID found for the sim!", (uint8_t *)&v269, 2u);
              }
            }
            std::string::operator=((std::string *)(a5 + 616), (const std::string *)buf);
LABEL_228:
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            memset(&v269, 0, sizeof(v269));
            sub_100058DB0(&v269, "");
            v230 = 0;
            v231 = 0;
            v232 = 0;
            sub_100058DB0(&v230, "");
            (*(void (**)(uint64_t, std::string *, std::string *, std::string **))(*(void *)v224 + 88))(v224, &v270, &v269, &v230);
            std::string::operator=((std::string *)(a5 + 640), &v269);
            long long v147 = *v226;
            if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
            {
              std::string::size_type size = HIBYTE(v270.__r_.__value_.__r.__words[2]);
              if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type size = v270.__r_.__value_.__l.__size_;
              }
              long long v149 = &v270;
              if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v149 = (std::string *)v270.__r_.__value_.__r.__words[0];
              }
              if (size) {
                long long v150 = (const char *)v149;
              }
              else {
                long long v150 = "<invalid>";
              }
              long long v151 = &v269;
              if ((v269.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v151 = (std::string *)v269.__r_.__value_.__r.__words[0];
              }
              long long v152 = &v230;
              if (v232 < 0) {
                long long v152 = v230;
              }
              *(_DWORD *)std::string buf = 136315650;
              *(void *)&uint8_t buf[4] = v150;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v151;
              *(_WORD *)&unsigned char buf[22] = 2080;
              *(void *)&unsigned char buf[24] = v152;
              _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_DEFAULT, "#I Address ref Id associated with %s: %s with expiry %s", buf, 0x20u);
            }
            memset(buf, 0, 24);
            (*(void (**)(unsigned char *__return_ptr))(*(void *)v224 + 144))(buf);
            long long v153 = *v226;
            if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
            {
              long long v154 = buf;
              if (buf[23] < 0) {
                long long v154 = *(unsigned char **)buf;
              }
              long long v155 = HIBYTE(v270.__r_.__value_.__r.__words[2]);
              if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v155 = v270.__r_.__value_.__l.__size_;
              }
              long long v156 = &v270;
              if ((v270.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v156 = (std::string *)v270.__r_.__value_.__r.__words[0];
              }
              if (v155) {
                long long v157 = (const char *)v156;
              }
              else {
                long long v157 = "<invalid>";
              }
              *(_DWORD *)v267 = 136315394;
              *(void *)&v267[4] = v154;
              *(_WORD *)&v267[12] = 2080;
              v268 = (std::string *)v157;
              _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEFAULT, "#I IMSI based Identity = %s for PID: %s", v267, 0x16u);
            }
            long long v158 = buf[23];
            if (buf[23] < 0) {
              long long v158 = *(void *)&buf[8];
            }
            if (v158) {
              std::string::operator=((std::string *)(a2 + 40), (const std::string *)buf);
            }
            long long v159 = *v226;
            if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v267 = 67109376;
              *(_DWORD *)&v267[4] = v218 & 0x1F;
              *(_WORD *)&v267[8] = 1024;
              *(_DWORD *)&v267[10] = v218;
              _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_DEFAULT, "#I Emergency Services Category Value masked off: %d for %d.", v267, 0xEu);
            }
            if (v218)
            {
              long long v161 = 2;
            }
            else if ((v218 & 2) != 0)
            {
              long long v161 = 3;
            }
            else if ((v218 & 4) != 0)
            {
              long long v161 = 4;
            }
            else if ((v218 & 8) != 0)
            {
              long long v161 = 5;
            }
            else if ((v218 & 0x10) != 0)
            {
              long long v161 = 6;
            }
            else
            {
              long long v160 = *v226;
              if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v267 = 67109120;
                *(_DWORD *)&v267[4] = v218;
                _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEFAULT, "#I No IMS emergency category found for %d, defaulting to kNone", v267, 8u);
              }
              long long v161 = 1;
            }
            long long v164 = *v226;
            if (os_log_type_enabled(*v226, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v267 = 67109376;
              *(_DWORD *)&v267[4] = v218;
              *(_WORD *)&v267[8] = 1024;
              *(_DWORD *)&v267[10] = v161;
              _os_log_impl((void *)&_mh_execute_header, v164, OS_LOG_TYPE_DEFAULT, "#I Emergency category is %d converted to ims category: %d", v267, 0xEu);
            }
            *(_DWORD *)(a2 + 208) = v161;
            *(unsigned char *)(a2 + 248) = CallInfo::isSuspicious380Redirect(v228);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (SHIBYTE(v232) < 0) {
              operator delete(v230);
            }
            if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v269.__r_.__value_.__l.__data_);
            }
            if ((v220 & 1) == 0) {
              sub_10004D2C8(v105);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v270.__r_.__value_.__l.__data_);
            }
            if ((v217 & 1) == 0) {
              sub_10004D2C8(v216);
            }
            goto LABEL_297;
          }
          memset(buf, 0, 24);
          v125 = (std::mutex *)Registry::getServiceMap(v225, (Registry *)*v225);
          uint64_t v126 = v125;
          if ((v127 & 0x8000000000000000) != 0)
          {
            uint64_t v128 = (unsigned __int8 *)(v127 & 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v129 = 5381;
            do
            {
              std::string::size_type v127 = v129;
              unsigned int v130 = *v128++;
              uint64_t v129 = (33 * v129) ^ v130;
            }
            while (v130);
          }
          std::mutex::lock(v125);
          v269.__r_.__value_.__r.__words[0] = v127;
          v131 = sub_10004D37C(&v126[1].__m_.__sig, (unint64_t *)&v269);
          uint64_t v132 = a2;
          if (v131)
          {
            uint64_t v134 = v131[3];
            uint64_t v133 = (std::__shared_weak_count *)v131[4];
            if (v133)
            {
              atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
              std::mutex::unlock(v126);
              atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
              sub_10004D2C8(v133);
              char v135 = 0;
              goto LABEL_211;
            }
          }
          else
          {
            uint64_t v134 = 0;
          }
          std::mutex::unlock(v126);
          uint64_t v133 = 0;
          char v135 = 1;
LABEL_211:
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v134 + 144))(buf, v134);
          a2 = v132;
          if ((v135 & 1) == 0) {
            sub_10004D2C8(v133);
          }
          v230 = 0;
          v231 = 0;
          CFDictionaryRef v136 = (std::mutex *)Registry::getServiceMap(v225, (Registry *)*v225);
          v137 = v136;
          if ((v138 & 0x8000000000000000) != 0)
          {
            v139 = (unsigned __int8 *)(v138 & 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v140 = 5381;
            do
            {
              std::string::size_type v138 = v140;
              unsigned int v141 = *v139++;
              uint64_t v140 = (33 * v140) ^ v141;
            }
            while (v141);
          }
          std::mutex::lock(v136);
          v269.__r_.__value_.__r.__words[0] = v138;
          v142 = sub_10004D37C(&v137[1].__m_.__sig, (unint64_t *)&v269);
          long long v143 = v105;
          if (v142)
          {
            long long v145 = (void (***)(std::string **__return_ptr, void, unsigned char *))v142[3];
            long long v144 = (std::__shared_weak_count *)v142[4];
            if (v144)
            {
              atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
              std::mutex::unlock(v137);
              atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
              a2 = v132;
              sub_10004D2C8(v144);
              long long v146 = 0;
LABEL_221:
              (**v145)(&v230, v145, buf);
              uint64_t v105 = v143;
              if ((v146 & 1) == 0) {
                sub_10004D2C8(v144);
              }
              if (v230)
              {
                memset(&v269, 0, sizeof(v269));
                (*(void (**)(std::string *__return_ptr))(v230->__r_.__value_.__r.__words[0] + 112))(&v269);
                std::string::operator=((std::string *)(a5 + 616), &v269);
                if (SHIBYTE(v269.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v269.__r_.__value_.__l.__data_);
                }
              }
              if (v231) {
                sub_10004D2C8(v231);
              }
              goto LABEL_228;
            }
          }
          else
          {
            long long v145 = 0;
          }
          std::mutex::unlock(v137);
          long long v144 = 0;
          long long v146 = 1;
          goto LABEL_221;
        }
      }
      else
      {
        uint64_t v104 = 0;
      }
      std::mutex::unlock(v98);
      uint64_t v105 = 0;
      v220 = 1;
      goto LABEL_172;
    }
    sub_10005CA3C((uint64_t)v54, v52, v53, 0xAAAAAAAAAAAAAAABLL * (((char *)v53 - (char *)v52) >> 3));
    goto LABEL_55;
  }
  char v22 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "StackConfig is NULL, cannot fill config with emergency params", buf, 2u);
  }
LABEL_297:
  long long v165 = (std::mutex *)Registry::getServiceMap((uint64_t *)v228, *(Registry **)(a1 + 56));
  long long v166 = v165;
  if (v167 < 0)
  {
    v168 = (unsigned __int8 *)(v167 & 0x7FFFFFFFFFFFFFFFLL);
    v169 = 5381;
    do
    {
      uint64_t v167 = v169;
      v170 = *v168++;
      v169 = (33 * v169) ^ v170;
    }
    while (v170);
  }
  std::mutex::lock(v165);
  *(void *)std::string buf = v167;
  v171 = sub_10004D37C(&v166[1].__m_.__sig, (unint64_t *)buf);
  if (!v171)
  {
    std::mutex::unlock(v166);
    v175 = 0;
    goto LABEL_320;
  }
  v221 = a4;
  v172 = a2;
  v174 = v171[3];
  v173 = (std::__shared_weak_count *)v171[4];
  if (v173)
  {
    atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
    std::mutex::unlock(v166);
    atomic_fetch_add_explicit(&v173->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v173);
    if (!v174)
    {
      v175 = 0;
      a2 = v172;
      a4 = v221;
LABEL_319:
      sub_10004D2C8(v173);
      goto LABEL_320;
    }
  }
  else
  {
    std::mutex::unlock(v166);
    if (!v174)
    {
      v175 = 0;
      a2 = v172;
      a4 = v221;
      goto LABEL_320;
    }
  }
  memset(buf, 0, 24);
  PersonalityIdFromSlotIdEx();
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(std::string *__return_ptr, uint64_t, unsigned char *))(*(void *)v174 + 40))(&__dst, v174, buf);
  a2 = v172;
  if (__dst.__r_.__value_.__r.__words[0])
  {
    v270.__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(std::string *__return_ptr))(*(void *)__dst.__r_.__value_.__l.__data_ + 40))(&v270);
    v176 = (BOOL *)v270.__r_.__value_.__r.__words[0];
    __str.__r_.__value_.__s.__data_[0] = 0;
    a4 = v221;
    if (v270.__r_.__value_.__r.__words[0]
      && (v177 = CFGetTypeID(v270.__r_.__value_.__l.__data_), v177 == CFBooleanGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)&__str, v176, v178);
      v175 = __str.__r_.__value_.__s.__data_[0] != 0;
    }
    else
    {
      v175 = 0;
    }
    sub_1000577C4((const void **)&v270.__r_.__value_.__l.__data_);
  }
  else
  {
    v179 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
    {
      v213 = buf[23];
      if (buf[23] < 0) {
        v213 = *(void *)&buf[8];
      }
      v214 = buf;
      if (buf[23] < 0) {
        v214 = *(const char **)buf;
      }
      if (v213) {
        v215 = v214;
      }
      else {
        v215 = "<invalid>";
      }
      LODWORD(v270.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v270.__r_.__value_.__r.__words + 4) = (std::string::size_type)v215;
      _os_log_error_impl((void *)&_mh_execute_header, v179, OS_LOG_TYPE_ERROR, "IMS config not found for pid %s", (uint8_t *)&v270, 0xCu);
    }
    v175 = 0;
    a4 = v221;
  }
  if (__dst.__r_.__value_.__l.__size_) {
    sub_10004D2C8((std::__shared_weak_count *)__dst.__r_.__value_.__l.__size_);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v173) {
    goto LABEL_319;
  }
LABEL_320:
  v180 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v222;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v175;
    _os_log_impl((void *)&_mh_execute_header, v180, OS_LOG_TYPE_DEFAULT, "#I Setting the CLIR setting.. sendEmParams: %d ignoreRestrictionFlags: %d", buf, 0xEu);
  }
  if ((v222 & v175 & 1) == 0)
  {
    v189 = CallCommandDriver::computeClirValue_sync((CallCommandDriver *)(a1 + 8), v228);
    v190 = *v11;
    if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
    {
      v191 = asString();
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v191;
      _os_log_impl((void *)&_mh_execute_header, v190, OS_LOG_TYPE_DEFAULT, "#I CLIR setting evaluated to %s", buf, 0xCu);
    }
    if ((v189 - 2) < 2)
    {
      (*(void (**)(void, void, void))(*(void *)*a4 + 64))(*a4, 0, 0);
      v192 = *v11;
      if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v192, OS_LOG_TYPE_DEFAULT, "#I Not setting the CLIR setting for call to be dialed", buf, 2u);
      }
    }
    else if (v189)
    {
      if (v189 == 1) {
        (*(void (**)(void, uint64_t, uint64_t))(*(void *)*a4 + 64))(*a4, 1, 1);
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, void))(*(void *)*a4 + 64))(*a4, 1, 0);
    }
  }
  v181 = *a4;
  v182 = (std::__shared_weak_count *)a4[1];
  if (v182) {
    atomic_fetch_add_explicit(&v182->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v183 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), *((unsigned int *)v228 + 63));
  v184 = *((unsigned __int8 *)v228 + 151);
  if ((v184 & 0x80u) != 0) {
    v184 = *((void *)v228 + 17);
  }
  if (v184) {
    std::string::operator=((std::string *)(a2 + 8), (const std::string *)((char *)v228 + 128));
  }
  if (v181)
  {
    v185 = (*(uint64_t (**)(void, CallInfo *))(**(void **)(a1 + 136) + 376))(*(void *)(a1 + 136), v228);
    v186 = *v183;
    v187 = os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT);
    if (v185)
    {
      if (v187)
      {
        *(_WORD *)std::string buf = 0;
        v188 = 2;
        _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEFAULT, "#I Starting call with RTT mode enabled", buf, 2u);
      }
      else
      {
        v188 = 2;
      }
    }
    else
    {
      if (v187)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEFAULT, "#I Starting call with RTT mode disabled", buf, 2u);
      }
      v188 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v181 + 40))(v181, v188);
  }
  if (v182) {
    sub_10004D2C8(v182);
  }
  v262 = 0;
  v260 = 0u;
  v261 = 0u;
  v258 = 0u;
  v259 = 0u;
  v256 = 0u;
  v257 = 0u;
  v254 = 0u;
  v255 = 0u;
  v252 = 0u;
  v253 = 0u;
  v250 = 0u;
  v251 = 0u;
  v248 = 0u;
  v249 = 0u;
  v246 = 0u;
  v247 = 0u;
  v244 = 0u;
  v245 = 0u;
  v242 = 0u;
  v243 = 0u;
  v240 = 0u;
  v241 = 0u;
  v239 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_10057F630((uint64_t)buf);
  sub_10012A394(&v229, (const void **)v228);
  sub_101328F44((CFUUIDRef *)&v229, (uint64_t)&__dst);
  v193 = sub_1010A0378(a1, (uint64_t)&__dst, (uint64_t)buf);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  sub_10012577C(&v229);
  v194 = (CallInfo *)buf;
  if (!v193) {
    v194 = v228;
  }
  v195 = *((_DWORD *)v194 + 46);
  (*(void (**)(void, BOOL))(*(void *)*a4 + 48))(*a4, v195 == 1);
  v196 = *v11;
  if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
  {
    v197 = "Disabled";
    if (v195 == 1) {
      v197 = "Enabled";
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v197;
    _os_log_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_DEFAULT, "#I Setting relay mode to %s", (uint8_t *)&__dst, 0xCu);
  }
  v198 = (uint64_t *)*(unsigned __int8 *)(a1 + 184);
  if (*(unsigned char *)(a1 + 184))
  {
    v230 = 0;
    *(void *)v267 = 0;
    memset(&__dst, 0, sizeof(__dst));
    memset(&v270, 0, sizeof(v270));
    memset(&__str, 0, sizeof(__str));
    memset(&__p, 0, sizeof(__p));
    *(unsigned char *)(a1 + 184) = 0;
    v199 = (std::mutex *)Registry::getServiceMap(v198, *(Registry **)(a1 + 56));
    v200 = v199;
    if ((v201 & 0x8000000000000000) != 0)
    {
      v202 = (unsigned __int8 *)(v201 & 0x7FFFFFFFFFFFFFFFLL);
      v203 = 5381;
      do
      {
        v201 = v203;
        v204 = *v202++;
        v203 = (33 * v203) ^ v204;
      }
      while (v204);
    }
    std::mutex::lock(v199);
    v269.__r_.__value_.__r.__words[0] = v201;
    v205 = sub_10004D37C(&v200[1].__m_.__sig, (unint64_t *)&v269);
    if (v205)
    {
      v207 = v205[3];
      v206 = (std::__shared_weak_count *)v205[4];
      if (v206)
      {
        atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v200);
        atomic_fetch_add_explicit(&v206->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v206);
        v208 = 0;
LABEL_365:
        (*(void (**)(uint64_t, std::string **, unsigned char *, std::string *, std::string *, std::string *, std::string *))(*(void *)v207 + 24))(v207, &v230, v267, &__dst, &v270, &__str, &__p);
        if ((v208 & 1) == 0) {
          sub_10004D2C8(v206);
        }
        v209 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v209 = __dst.__r_.__value_.__l.__size_;
        }
        if (v209)
        {
          v210 = *v11;
          if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v269.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEFAULT, "#I Filling the optional short code parameters", (uint8_t *)&v269, 2u);
          }
          *(unsigned char *)(a2 + 32) = 1;
          v211 = *(void *)v267;
          *(void *)(a2 + 64) = v230;
          *(void *)(a2 + 72) = v211;
          std::string::operator=((std::string *)(a2 + 112), &__dst);
          std::string::operator=((std::string *)(a2 + 136), &v270);
          std::string::operator=((std::string *)(a2 + 160), &__str);
          std::string::operator=((std::string *)(a2 + 184), &__p);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v270.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        return sub_1002243E8((uint64_t)buf);
      }
    }
    else
    {
      v207 = 0;
    }
    std::mutex::unlock(v200);
    v206 = 0;
    v208 = 1;
    goto LABEL_365;
  }
  return sub_1002243E8((uint64_t)buf);
}

void sub_10109FFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, int a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  if ((a21 & 1) == 0) {
    sub_10004D2C8(v56);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  if (*(char *)(v57 - 217) < 0) {
    operator delete(*(void **)(v57 - 240));
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (*(char *)(v57 - 105) < 0) {
    operator delete(*(void **)(v57 - 128));
  }
  if ((a17 & 1) == 0) {
    sub_10004D2C8(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010A0378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
  }
  if (SHIBYTE(v16) < 0)
  {
    sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)__n128 __p = *(_OWORD *)__dst;
    uint64_t v20 = v16;
  }
  CFStringRef v18 = 0;
  if (SHIBYTE(v20) < 0)
  {
    sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)std::string buf = *(_OWORD *)__p;
    uint64_t v24 = v20;
  }
  CFStringRef v21 = 0;
  if (ctu::cf::convert_copy())
  {
    CFStringRef v6 = v18;
    CFStringRef v18 = v21;
    CFStringRef v22 = v6;
    sub_1000558F4((const void **)&v22);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(*(void **)buf);
  }
  CFStringRef v7 = v18;
  CFStringRef v17 = v18;
  CFStringRef v18 = 0;
  sub_1000558F4((const void **)&v18);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__dst[0]);
  }
  CFUUIDRef v8 = CFUUIDCreateFromString(kCFAllocatorDefault, v7);
  __p[0] = v8;
  uint64_t v9 = *(void *)(a1 + 136);
  CFUUIDRef v14 = v8;
  if (v8) {
    CFRetain(v8);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, CFUUIDRef *, uint64_t))(*(void *)v9 + 288))(v9, &v14, a3);
  sub_10012577C((const void **)&v14);
  if ((v10 & 1) == 0)
  {
    uint64_t v11 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        char v13 = (void *)a2;
      }
      else {
        char v13 = *(void **)a2;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Received notification with unknown UUID: %s", buf, 0xCu);
    }
  }
  sub_10012577C((const void **)__p);
  sub_1000558F4((const void **)&v17);
  return v10;
}

void sub_1010A05BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, int a19, const void *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void sub_1010A0650(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 736);
  uint64_t v3 = (void *)(a1 + 744);
  if (v2 != (void *)(a1 + 744))
  {
    uint64_t v5 = (void *)(a2 + 8);
    while (1)
    {
      uint64_t v6 = *v5;
      if (!*v5) {
        break;
      }
      uint64_t v7 = *((unsigned int *)v2 + 8);
      CFUUIDRef v8 = v5;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < (int)v7;
        if (v9 >= (int)v7) {
          uint64_t v11 = (uint64_t *)v6;
        }
        else {
          uint64_t v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          CFUUIDRef v8 = (void *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 == v5 || (int)v7 < *((_DWORD *)v8 + 8)) {
        goto LABEL_16;
      }
      if ((rest::operator==() & 1) == 0)
      {
        uint64_t v7 = *((unsigned int *)v2 + 8);
        uint64_t v12 = a1;
        char v13 = (unsigned __int8 *)(v2 + 5);
        goto LABEL_17;
      }
LABEL_18:
      CFUUIDRef v14 = (void *)v2[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          CFUUIDRef v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v2[2];
          BOOL v16 = *v15 == (void)v2;
          unint64_t v2 = v15;
        }
        while (!v16);
      }
      unint64_t v2 = v15;
      if (v15 == v3) {
        return;
      }
    }
    uint64_t v7 = *((unsigned int *)v2 + 8);
LABEL_16:
    char v13 = (unsigned __int8 *)(v2 + 5);
    uint64_t v12 = a1;
LABEL_17:
    sub_1010AEBF4(v12, v7, v13);
    goto LABEL_18;
  }
}

void sub_1010A0740(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = 0;
  long long v40 = 0;
  sub_1010A0C00(&v39, a1, a2);
  uint64_t v5 = v39;
  if (v39)
  {
    uint64_t v37 = 0;
    int v38 = 0;
    ServiceMap = (std::mutex *)Registry::getServiceMap(v4, *(Registry **)(a1 + 56));
    uint64_t v7 = ServiceMap;
    if (v8 < 0)
    {
      int v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v10 = 5381;
      do
      {
        uint64_t v8 = v10;
        unsigned int v11 = *v9++;
        uint64_t v10 = (33 * v10) ^ v11;
      }
      while (v11);
    }
    std::mutex::lock(ServiceMap);
    *(void *)&long long buf = v8;
    uint64_t v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)&buf);
    if (v12)
    {
      uint64_t v14 = v12[3];
      char v13 = (std::__shared_weak_count *)v12[4];
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v7);
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v13);
        char v15 = 0;
LABEL_20:
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v14 + 24))(&v37, v14, a2);
        if ((v15 & 1) == 0) {
          sub_10004D2C8(v13);
        }
        uint64_t v21 = v37;
        if (v37)
        {
          long long buf = 0uLL;
          uint64_t v46 = 0;
          sub_1010A0D50((uint64_t)&buf, a2);
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v36 = 0;
          sub_1010A0D50((uint64_t)__p, a2);
          CFStringRef v22 = *(NSObject **)(a1 + 48);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v23 = *(unsigned __int8 *)(a2 + 23);
            BOOL v24 = (v23 & 0x80u) != 0;
            if ((v23 & 0x80u) != 0) {
              uint64_t v23 = *(void *)(a2 + 8);
            }
            if (v24) {
              char v25 = *(const char **)a2;
            }
            else {
              char v25 = (const char *)a2;
            }
            if (v23) {
              BOOL v26 = v25;
            }
            else {
              BOOL v26 = "<invalid>";
            }
            *(_DWORD *)char v41 = 136315138;
            std::string::size_type v42 = v26;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Setting call and default IMS delegates for %s", v41, 0xCu);
            CFStringRef v22 = *(NSObject **)(a1 + 48);
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            p_long long buf = (const char *)&buf;
            if (v46 < 0) {
              p_long long buf = (const char *)buf;
            }
            char v28 = __p;
            if (v36 < 0) {
              char v28 = (void **)__p[0];
            }
            *(_DWORD *)char v41 = 136315394;
            std::string::size_type v42 = p_buf;
            __int16 v43 = 2080;
            uint64_t v44 = v28;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Call Manager Delegate: %s, Call Delegate: %s.", v41, 0x16u);
          }
          std::string::size_type v29 = v40;
          uint64_t v33 = v5 + 8;
          uint64_t v34 = v40;
          if (v40) {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, long long *, uint64_t *, void))(*(void *)v21 + 160))(v21, &buf, &v33, *(void *)(a1 + 32));
          if (v34) {
            sub_10004D2C8(v34);
          }
          uint64_t v31 = v5;
          uint64_t v32 = v29;
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, void **, uint64_t *, void))(*(void *)v21 + 168))(v21, __p, &v31, *(void *)(a1 + 32));
          if (v32) {
            sub_10004D2C8(v32);
          }
          if (SHIBYTE(v36) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v46) < 0) {
            operator delete((void *)buf);
          }
        }
        else
        {
          uint64_t v30 = *(NSObject **)(a1 + 48);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to set delegate: call client is NULL!!", (uint8_t *)&buf, 2u);
          }
        }
        if (v38) {
          sub_10004D2C8(v38);
        }
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    std::mutex::unlock(v7);
    char v13 = 0;
    char v15 = 1;
    goto LABEL_20;
  }
  BOOL v16 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
    BOOL v18 = (v17 & 0x80u) != 0;
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(a2 + 8);
    }
    if (v18) {
      char v19 = *(const char **)a2;
    }
    else {
      char v19 = (const char *)a2;
    }
    if (v17) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = "<invalid>";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v20;
    _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::setDelegatesOnIMSClientHandle: No Model found for PID: %s", (uint8_t *)&buf, 0xCu);
  }
LABEL_55:
  if (v40) {
    sub_10004D2C8(v40);
  }
}

void sub_1010A0B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 - 73) < 0) {
    operator delete(*(void **)(v23 - 96));
  }
  if (a21) {
    sub_10004D2C8(a21);
  }
  if (a23) {
    sub_10004D2C8(a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010A0C00(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)(a2 + 632);
  if (!v6) {
    goto LABEL_13;
  }
  uint64_t v7 = (void **)(a2 + 632);
  uint64_t v8 = (void **)(a2 + 632);
  do
  {
    char v9 = sub_100046FE8(v6 + 4, (void **)a3);
    if (v9 >= 0) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9 >= 0) {
      uint64_t v8 = (void **)v6;
    }
    uint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v8 == v7 || (sub_100046FE8((void *)a3, v8 + 4) & 0x80) != 0)
  {
LABEL_13:
    uint64_t v12 = *(NSObject **)(a2 + 48);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
      BOOL v14 = (v13 & 0x80u) != 0;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(a3 + 8);
      }
      if (v14) {
        char v15 = *(const char **)a3;
      }
      else {
        char v15 = (const char *)a3;
      }
      if (v13) {
        BOOL v16 = v15;
      }
      else {
        BOOL v16 = "<invalid>";
      }
      int v17 = 136315138;
      BOOL v18 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::getIMSCallModelForPersonalityID: Model not found for PID %s", (uint8_t *)&v17, 0xCu);
    }
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    unsigned int v11 = (atomic_ullong *)v8[8];
    *a1 = v8[7];
    a1[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
    }
  }
}

double sub_1010A0D50(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  BOOL v4 = (v3 & 0x80u) != 0;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v4) {
    uint64_t v5 = *(char **)a2;
  }
  else {
    uint64_t v5 = (char *)a2;
  }
  if (v3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = "<invalid>";
  }
  sub_100058DB0((void *)a1, v6);
  std::operator+<char>();
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  double result = *(double *)&v8;
  *(_OWORD *)a1 = v8;
  *(void *)(a1 + 16) = v9;
  return result;
}

void sub_1010A0E00(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010A0E20(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  sub_1010A0C00(&v30, a1, a2);
  uint64_t v5 = v30;
  if (v30)
  {
    uint64_t v28 = 0;
    std::string::size_type v29 = 0;
    ServiceMap = (std::mutex *)Registry::getServiceMap(v4, *(Registry **)(a1 + 56));
    uint64_t v7 = ServiceMap;
    if (v8 < 0)
    {
      uint64_t v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v10 = 5381;
      do
      {
        uint64_t v8 = v10;
        unsigned int v11 = *v9++;
        uint64_t v10 = (33 * v10) ^ v11;
      }
      while (v11);
    }
    std::mutex::lock(ServiceMap);
    *(void *)long long buf = v8;
    uint64_t v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)buf);
    if (v12)
    {
      uint64_t v14 = v12[3];
      uint64_t v13 = (std::__shared_weak_count *)v12[4];
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v7);
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v13);
        char v15 = 0;
LABEL_20:
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v14 + 16))(&v28, v14);
        if ((v15 & 1) == 0) {
          sub_10004D2C8(v13);
        }
        uint64_t v21 = v28;
        if (v28)
        {
          sub_100058DB0(buf, "ims.manager.e911");
          CFStringRef v22 = v31;
          uint64_t v26 = v5 + 8;
          char v27 = v31;
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, unsigned char *, uint64_t *, void))(*(void *)v21 + 160))(v21, buf, &v26, *(void *)(a1 + 32));
          if (v27) {
            sub_10004D2C8(v27);
          }
          if (v33 < 0) {
            operator delete(*(void **)buf);
          }
          sub_100058DB0(buf, "ims.call.e911");
          uint64_t v24 = v5;
          char v25 = v22;
          if (v22) {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, unsigned char *, uint64_t *, void))(*(void *)v21 + 168))(v21, buf, &v24, *(void *)(a1 + 32));
          if (v25) {
            sub_10004D2C8(v25);
          }
          if (v33 < 0) {
            operator delete(*(void **)buf);
          }
        }
        else
        {
          uint64_t v23 = *(NSObject **)(a1 + 48);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "failed to set delegate: Emergency client is NULL!!", buf, 2u);
          }
        }
        if (v29) {
          sub_10004D2C8(v29);
        }
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    std::mutex::unlock(v7);
    uint64_t v13 = 0;
    char v15 = 1;
    goto LABEL_20;
  }
  BOOL v16 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
    BOOL v18 = (v17 & 0x80u) != 0;
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(a2 + 8);
    }
    if (v18) {
      char v19 = *(const char **)a2;
    }
    else {
      char v19 = (const char *)a2;
    }
    if (v17) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v20;
    _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::setDelegatesOnIMSClientHandle: No Model found for PID: %s", buf, 0xCu);
  }
LABEL_39:
  if (v31) {
    sub_10004D2C8(v31);
  }
}

void sub_1010A1148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (a16) {
    sub_10004D2C8(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010A11CC(uint64_t a1, uint64_t a2)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 56));
  uint64_t v5 = ServiceMap;
  if (v6 < 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)buf);
  if (v10)
  {
    uint64_t v11 = v10[3];
    uint64_t v12 = (std::__shared_weak_count *)v10[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = v12;
      sub_10004D2C8(v12);
      char v31 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v13 = 0;
  char v31 = 1;
LABEL_9:
  uint64_t v30 = v13;
  if (v11)
  {
    uint64_t v14 = *(void ***)(a1 + 680);
    if (v14 != (void **)(a1 + 688))
    {
      do
      {
        uint64_t v15 = SlotIdFromPersonalityId();
        BOOL v16 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), v15);
        uint64_t v17 = sub_100046F68(a2, v14 + 4);
        int v18 = *((unsigned __int8 *)v14 + 56);
        if ((void **)(a2 + 8) == v17 || *((unsigned __int8 *)v17 + 56) != v18)
        {
          uint64_t v21 = *v16;
          if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
          {
            CFStringRef v22 = "ready";
            if (!v18) {
              CFStringRef v22 = "not ready";
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I IMS client is now %s", buf, 0xCu);
            int v18 = *((unsigned __int8 *)v14 + 56);
          }
          if (v18)
          {
            uint64_t v23 = *v16;
            if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I Registering for IMS call status change notifications", buf, 2u);
            }
            (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 152) + 16))(buf);
            long long v24 = *(_OWORD *)buf;
            memset(buf, 0, sizeof(buf));
            char v25 = *(std::__shared_weak_count **)(a1 + 176);
            *(_OWORD *)(a1 + 168) = v24;
            if (v25)
            {
              sub_10004D2C8(v25);
              if (*(void *)&buf[8]) {
                sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
              }
            }
            sub_1010A0740(a1, (uint64_t)(v14 + 4));
            sub_1010A0E20(a1, (uint64_t)(v14 + 4));
          }
        }
        else
        {
          char v19 = *v16;
          if (os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v20 = "ready";
            if (!v18) {
              uint64_t v20 = "not ready";
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I IMS client has not changed state from %s", buf, 0xCu);
          }
        }
        uint64_t v26 = (void **)v14[1];
        if (v26)
        {
          do
          {
            char v27 = v26;
            uint64_t v26 = (void **)*v26;
          }
          while (v26);
        }
        else
        {
          do
          {
            char v27 = (void **)v14[2];
            BOOL v28 = *v27 == v14;
            uint64_t v14 = v27;
          }
          while (!v28);
        }
        uint64_t v14 = v27;
      }
      while (v27 != (void **)(a1 + 688));
    }
  }
  else
  {
    std::string::size_type v29 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "PersonalityShop is not found!", buf, 2u);
    }
  }
  if ((v31 & 1) == 0) {
    sub_10004D2C8(v30);
  }
}

void sub_1010A156C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1010A15A4(uint64_t a1, unsigned int *a2)
{
  BOOL v4 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), *a2);
  uint64_t v5 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Received proactive call command from STK", buf, 2u);
  }
  uint64_t v89 = 0;
  long long v88 = 0u;
  long long v87 = 0u;
  long long v86 = 0u;
  long long v85 = 0u;
  long long v84 = 0u;
  long long v83 = 0u;
  long long v82 = 0u;
  long long v81 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
  long long v78 = 0u;
  long long v77 = 0u;
  long long v76 = 0u;
  long long v75 = 0u;
  long long v74 = 0u;
  long long v73 = 0u;
  long long v72 = 0u;
  memset(v71, 0, sizeof(v71));
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  *(_OWORD *)__n128 __p = 0u;
  long long v66 = 0u;
  *(_OWORD *)long long buf = 0u;
  sub_100058DB0(__p, kCallerIdDefaultValue);
  DWORD2(v68) = 9;
  BYTE12(v68) = 0;
  LODWORD(v69) = 1;
  BYTE4(v69) = 1;
  *((void *)&v69 + 1) = 0x400000001;
  *(void *)&long long v70 = 2;
  BYTE8(v70) = 0;
  HIDWORD(v70) = CallInfo::kDefaultCallId;
  BYTE8(v71[1]) = 0;
  BYTE12(v71[1]) = 0;
  memset(v71, 0, 22);
  sub_100058DB0(&v72, "");
  DWORD2(v73) = 0;
  sub_100058DB0(&v74, "");
  DWORD2(v75) = 0;
  WORD6(v75) = 0;
  LODWORD(v76) = 0;
  WORD2(v76) = 0;
  DWORD2(v76) = 0;
  BYTE12(v76) = 0;
  LOBYTE(v77) = 0;
  BYTE8(v77) = 0;
  LOBYTE(v79) = 0;
  WORD4(v79) = 0;
  HIDWORD(v79) = 1;
  LOBYTE(v80) = 0;
  DWORD1(v80) = 0;
  BYTE8(v80) = 0;
  LOBYTE(v88) = 0;
  BYTE8(v88) = 0;
  BYTE4(v89) = 0;
  LOBYTE(v85) = 0;
  long long v84 = 0u;
  long long v83 = 0u;
  long long v82 = 0u;
  long long v81 = 0u;
  CSIPhoneNumber::getBaseNumber((uint64_t *)v37, (CSIPhoneNumber *)(a2 + 2));
  if (SBYTE7(v68) < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)__n128 __p = *(_OWORD *)v37;
  *(void *)&long long v68 = v38;
  HIDWORD(v79) = *a2;
  long long v64 = 0;
  uint64_t v63 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 56))(&v63, a1);
  if (v63)
  {
    uint64_t v6 = (uint64_t *)a2[36];
    if (v6 <= 5)
    {
      int v7 = 1 << (char)v6;
      if ((v7 & 3) != 0)
      {
        uint64_t v62 = 0;
        long long v61 = 0u;
        long long v60 = 0u;
        long long v59 = 0u;
        long long v58 = 0u;
        long long v57 = 0u;
        long long v56 = 0u;
        long long v55 = 0u;
        long long v54 = 0u;
        long long v53 = 0u;
        long long v52 = 0u;
        long long v51 = 0u;
        long long v50 = 0u;
        long long v49 = 0u;
        long long v48 = 0u;
        long long v47 = 0u;
        long long v46 = 0u;
        long long v45 = 0u;
        long long v44 = 0u;
        long long v43 = 0u;
        long long v42 = 0u;
        long long v41 = 0u;
        long long v40 = 0u;
        long long v39 = 0u;
        long long v38 = 0u;
        *(_OWORD *)uint64_t v37 = 0u;
        sub_10057F630((uint64_t)v37);
        uint64_t v35 = 0;
        uint64_t v34 = 0;
        uint64_t v36 = 0;
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 256))(&v34);
        BOOL v10 = v34 != v35 && *(_DWORD *)(v34 + 252) == HIDWORD(v79);
        int v12 = (*(uint64_t (**)(void, uint8_t *))(**(void **)(a1 + 136) + 264))(*(void *)(a1 + 136), v37);
        uint64_t v32 = 0;
        char v31 = 0;
        uint64_t v33 = 0;
        (*(void (**)(void ***__return_ptr))(**(void **)(a1 + 136) + 280))(&v31);
        BOOL v13 = v31 != v32 && *((_DWORD *)v31 + 63) == HIDWORD(v79);
        if (((v10 | v12) & 1) != 0 || v13)
        {
          uint64_t v14 = *v4;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            if ((SBYTE7(v68) & 0x80u) == 0) {
              uint64_t v26 = __p;
            }
            else {
              uint64_t v26 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t v90 = 136315138;
            *(void *)&v90[4] = v26;
            _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Cannot dial normal STK proactive call to %s as calls already exist", v90, 0xCu);
          }
          uint64_t v11 = 6;
        }
        else
        {
          sub_100245B5C((uint64_t)v30, (uint64_t)buf);
          sub_1010A1EF4(a1, (uint64_t)v30, 1);
          sub_1002243E8((uint64_t)v30);
          uint64_t v11 = 0;
        }
        *(void *)uint64_t v90 = &v31;
        sub_1002244D8((void ***)v90);
        char v31 = (void **)&v34;
        sub_1002244D8(&v31);
        sub_1002243E8((uint64_t)v37);
LABEL_30:
        ServiceMap = (std::mutex *)Registry::getServiceMap(v6, *(Registry **)(a1 + 56));
        BOOL v16 = ServiceMap;
        if (v17 < 0)
        {
          int v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v19 = 5381;
          do
          {
            uint64_t v17 = v19;
            unsigned int v20 = *v18++;
            uint64_t v19 = (33 * v19) ^ v20;
          }
          while (v20);
        }
        std::mutex::lock(ServiceMap);
        *(void *)uint64_t v37 = v17;
        uint64_t v21 = sub_10004D37C(&v16[1].__m_.__sig, (unint64_t *)v37);
        if (v21)
        {
          uint64_t v23 = v21[3];
          CFStringRef v22 = (std::__shared_weak_count *)v21[4];
          if (v22)
          {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            std::mutex::unlock(v16);
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v22);
            char v24 = 0;
            if (!v23)
            {
LABEL_40:
              if ((v24 & 1) == 0) {
                sub_10004D2C8(v22);
              }
              goto LABEL_42;
            }
LABEL_39:
            (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)v23 + 72))(v23, *a2, a2[1], v11);
            goto LABEL_40;
          }
        }
        else
        {
          uint64_t v23 = 0;
        }
        std::mutex::unlock(v16);
        CFStringRef v22 = 0;
        char v24 = 1;
        if (!v23) {
          goto LABEL_40;
        }
        goto LABEL_39;
      }
      if ((v7 & 0xC) != 0)
      {
        uint64_t v35 = 0;
        uint64_t v34 = 0;
        uint64_t v36 = 0;
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 256))(&v34);
        if (v34 != v35)
        {
          uint64_t v62 = 0;
          long long v61 = 0u;
          long long v60 = 0u;
          long long v59 = 0u;
          long long v58 = 0u;
          long long v57 = 0u;
          long long v56 = 0u;
          long long v55 = 0u;
          long long v54 = 0u;
          long long v53 = 0u;
          long long v52 = 0u;
          long long v51 = 0u;
          long long v50 = 0u;
          long long v49 = 0u;
          long long v48 = 0u;
          long long v47 = 0u;
          long long v46 = 0u;
          long long v45 = 0u;
          long long v44 = 0u;
          long long v43 = 0u;
          long long v42 = 0u;
          long long v41 = 0u;
          long long v40 = 0u;
          long long v39 = 0u;
          long long v38 = 0u;
          *(_OWORD *)uint64_t v37 = 0u;
          sub_100245B5C((uint64_t)v37, v34);
          if (HIDWORD(v52) == HIDWORD(v79))
          {
            uint64_t v8 = v63;
            sub_100245B5C((uint64_t)v29, (uint64_t)v37);
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 344))(v8, v29);
            sub_1002243E8((uint64_t)v29);
          }
          sub_1002243E8((uint64_t)v37);
        }
        sub_100245B5C((uint64_t)v28, (uint64_t)buf);
        sub_1010A1EF4(a1, (uint64_t)v28, 1);
        sub_1002243E8((uint64_t)v28);
        *(void *)uint64_t v37 = &v34;
        sub_1002244D8((void ***)v37);
      }
      else
      {
        (*(void (**)(uint64_t, void))(*(void *)a1 + 200))(a1, HIDWORD(v79));
        sub_100245B5C((uint64_t)v27, (uint64_t)buf);
        sub_1010A1EF4(a1, (uint64_t)v27, 1);
        sub_1002243E8((uint64_t)v27);
      }
    }
    uint64_t v11 = 0;
    goto LABEL_30;
  }
  unsigned int v9 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v37 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::handleSTKProactiveCall_sync: IMS Call model not found!", v37, 2u);
  }
LABEL_42:
  if (v64) {
    sub_10004D2C8(v64);
  }
  return sub_1002243E8((uint64_t)buf);
}

void sub_1010A1DA0(_Unwind_Exception *a1)
{
  STACK[0x690] = (unint64_t)&STACK[0x678];
  sub_1002244D8((void ***)&STACK[0x690]);
  if (STACK[0x838]) {
    sub_10004D2C8((std::__shared_weak_count *)STACK[0x838]);
  }
  sub_1002243E8((uint64_t)&STACK[0x840]);
  _Unwind_Resume(a1);
}

void sub_1010A1EF4(uint64_t a1, uint64_t a2, int a3)
{
  void (***v28)(unsigned char *__return_ptr, void, uint8_t *);
  char v29;
  NSObject *v30;
  const char *v31;
  const char *v32;
  uint64_t *v33;
  std::mutex *ServiceMap;
  std::mutex *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  unsigned int v39;
  void *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  char v43;
  char v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  NSObject *v49;
  void v50[5];
  void v51[52];
  std::__shared_weak_count *v52;
  char v53;
  char v54;
  unsigned char v55[32];
  unsigned char v56[36];
  unsigned __int8 v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  const void *v60;
  unint64_t v61;
  unsigned char v62[22];
  char v63;
  uint8_t buf[24];
  const char *v65;
  void *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;

  uint64_t v6 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = (void *)(a2 + 32);
    if (*(char *)(a2 + 55) < 0) {
      int v7 = (void *)*v7;
    }
    sub_10012A394(&v60, (const void **)a2);
    printUuid();
    uint64_t v8 = *(unsigned char **)v62;
    if (v63 >= 0) {
      uint64_t v8 = v62;
    }
    unsigned int v9 = "false";
    *(_DWORD *)long long buf = 136315650;
    if (a3) {
      unsigned int v9 = "true";
    }
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v8;
    *(_WORD *)&unsigned char buf[22] = 2080;
    char v65 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Performing dial for %s (%s Is baseband call: %s)", buf, 0x20u);
    if (v63 < 0) {
      operator delete(*(void **)v62);
    }
    sub_10012577C(&v60);
  }
  long long v58 = 0;
  long long v59 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)a1 + 56))(&v58, a1, *(unsigned int *)(a2 + 252));
  if (v58)
  {
    sub_100245B5C((uint64_t)v55, a2);
    int v10 = isEmergencyCall((const CallInfo *)v55);
    int v11 = v10;
    int v12 = v57;
    if (v57 == 2) {
      int v13 = v10;
    }
    else {
      int v13 = 1;
    }
    if (v13 == 1)
    {
      uint64_t v14 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = "false";
        if (v11) {
          BOOL v16 = "true";
        }
        else {
          BOOL v16 = "false";
        }
        if (v12 == 2) {
          uint64_t v15 = "true";
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I Call does not need civic location. Emergency: %s, Wifi Call: %s", buf, 0x16u);
      }
      int v17 = 0;
      uint64_t v18 = 0;
      goto LABEL_54;
    }
    memset(buf, 0, sizeof(buf));
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v58 + 248))(buf);
    uint64_t v19 = (uint64_t *)buf[23];
    if ((buf[23] & 0x80u) != 0) {
      uint64_t v19 = *(uint64_t **)&buf[8];
    }
    if (!v19)
    {
      uint64_t v18 = 0;
      int v17 = 0;
LABEL_45:
      uint64_t v30 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        char v31 = "true";
        if (v17) {
          uint64_t v32 = "true";
        }
        else {
          uint64_t v32 = "false";
        }
        if (!v18) {
          char v31 = "false";
        }
        *(_DWORD *)uint64_t v62 = 136315394;
        *(void *)&v62[4] = v32;
        *(_WORD *)&v62[12] = 2080;
        *(void *)&v62[14] = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I Call requires civic location info: %s, force location lookup: %s", v62, 0x16u);
      }
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1002243E8((uint64_t)v55);
      ServiceMap = (std::mutex *)Registry::getServiceMap(v33, *(Registry **)(a1 + 56));
      uint64_t v35 = ServiceMap;
      if (v36 < 0)
      {
        uint64_t v37 = (unsigned __int8 *)(v36 & 0x7FFFFFFFFFFFFFFFLL);
        long long v38 = 5381;
        do
        {
          uint64_t v36 = v38;
          long long v39 = *v37++;
          long long v38 = (33 * v38) ^ v39;
        }
        while (v39);
      }
      std::mutex::lock(ServiceMap);
      *(void *)long long buf = v36;
      long long v40 = sub_10004D37C(&v35[1].__m_.__sig, (unint64_t *)buf);
      if (v40)
      {
        long long v42 = v40[3];
        long long v41 = (std::__shared_weak_count *)v40[4];
        if (v41)
        {
          atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v35);
          atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v41);
          long long v43 = 0;
          goto LABEL_62;
        }
      }
      else
      {
        long long v42 = 0;
      }
      std::mutex::unlock(v35);
      long long v41 = 0;
      long long v43 = 1;
LABEL_62:
      long long v44 = 0;
      if (v17 && v42) {
        long long v44 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v42 + 32))(v42, v18);
      }
      v50[0] = _NSConcreteStackBlock;
      v50[1] = 1174405120;
      v50[2] = sub_1010A4DD0;
      v50[3] = &unk_101A86A50;
      v50[4] = a1;
      long long v53 = v44;
      sub_100245B5C((uint64_t)v51, a2);
      long long v54 = a3;
      v51[51] = v58;
      long long v52 = v59;
      if (v59) {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v45 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v45 || (long long v46 = *(void *)(a1 + 16), (v47 = std::__shared_weak_count::lock(v45)) == 0)) {
        sub_100088B9C();
      }
      long long v48 = v47;
      long long v49 = *(NSObject **)(a1 + 32);
      *(void *)long long buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 1174405120;
      *(void *)&uint8_t buf[16] = sub_1010AED70;
      char v65 = (const char *)&unk_101A86D60;
      uint64_t v67 = v46;
      long long v68 = v48;
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v66 = v50;
      dispatch_async(v49, buf);
      if (v68) {
        sub_10004D2C8(v68);
      }
      sub_10004D2C8(v48);
      if (v52) {
        sub_10004D2C8(v52);
      }
      sub_1002243E8((uint64_t)v51);
      if ((v43 & 1) == 0) {
        sub_10004D2C8(v41);
      }
      goto LABEL_75;
    }
    *(void *)uint64_t v62 = 0;
    *(void *)&v62[8] = 0;
    unsigned int v20 = (std::mutex *)Registry::getServiceMap(v19, *(Registry **)(a1 + 56));
    uint64_t v21 = v20;
    if ((v22 & 0x8000000000000000) != 0)
    {
      uint64_t v23 = (unsigned __int8 *)(v22 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v24 = 5381;
      do
      {
        unint64_t v22 = v24;
        unsigned int v25 = *v23++;
        uint64_t v24 = (33 * v24) ^ v25;
      }
      while (v25);
    }
    std::mutex::lock(v20);
    long long v61 = v22;
    uint64_t v26 = sub_10004D37C(&v21[1].__m_.__sig, &v61);
    if (v26)
    {
      BOOL v28 = (void (***)(unsigned char *__return_ptr, void, uint8_t *))v26[3];
      char v27 = (std::__shared_weak_count *)v26[4];
      if (v27)
      {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v21);
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v27);
        std::string::size_type v29 = 0;
LABEL_36:
        (**v28)(v62, v28, buf);
        if ((v29 & 1) == 0) {
          sub_10004D2C8(v27);
        }
        if (*(void *)v62)
        {
          if ((*(uint64_t (**)(void, unsigned char *))(**(void **)v62 + 152))(*(void *)v62, v56))
          {
            uint64_t v18 = 1;
            int v17 = 1;
          }
          else
          {
            int v17 = (*(uint64_t (**)(void, unsigned char *))(**(void **)v62 + 160))(*(void *)v62, v56);
            uint64_t v18 = 0;
          }
        }
        else
        {
          uint64_t v18 = 0;
          int v17 = 0;
        }
        if (*(void *)&v62[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&v62[8]);
        }
        goto LABEL_45;
      }
    }
    else
    {
      BOOL v28 = 0;
    }
    std::mutex::unlock(v21);
    char v27 = 0;
    std::string::size_type v29 = 1;
    goto LABEL_36;
  }
LABEL_75:
  if (v59) {
    sub_10004D2C8(v59);
  }
}

void sub_1010A2580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  long long v70 = *(std::__shared_weak_count **)(v68 - 200);
  if (v70) {
    sub_10004D2C8(v70);
  }
  if (*(char *)(v68 - 153) < 0) {
    operator delete(*(void **)(v68 - 176));
  }
  sub_1002243E8((uint64_t)&a68);
  long long v71 = *(std::__shared_weak_count **)(v68 - 232);
  if (v71) {
    sub_10004D2C8(v71);
  }
  _Unwind_Resume(a1);
}

void sub_1010A262C(void *a1, int a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_1010A2748;
  v8[3] = &unk_101A86A10;
  v8[4] = a1;
  int v9 = a2;
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3 || (v4 = a1[2], (uint64_t v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  int v7 = a1[4];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010AED70;
  block[3] = &unk_101A86D60;
  block[5] = v4;
  int v11 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v8;
  dispatch_async(v7, block);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10004D2C8(v6);
}

uint64_t sub_1010A2748(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 488))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1010A2780(uint64_t a1, int a2)
{
}

uint64_t sub_1010A2788()
{
  return 1;
}

uint64_t sub_1010A2790()
{
  return 1;
}

uint64_t sub_1010A2798()
{
  return 0;
}

uint64_t sub_1010A27A0()
{
  return 0;
}

uint64_t sub_1010A27A8()
{
  return 1;
}

uint64_t sub_1010A27B0()
{
  return 1;
}

void sub_1010A27B8(uint64_t a1, uint64_t a2)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  (*(void (**)(uint64_t **__return_ptr))(*(void *)a1 + 56))(&v32);
  if (!v32) {
    goto LABEL_33;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v32, *(Registry **)(a1 + 56));
  uint64_t v5 = ServiceMap;
  if (v6 < 0)
  {
    int v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v6;
  int v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)buf);
  if (!v10)
  {
    uint64_t v12 = 0;
LABEL_12:
    std::mutex::unlock(v5);
    int v11 = 0;
    char v13 = 1;
    if (!v12) {
      goto LABEL_8;
    }
LABEL_13:
    int v15 = *(unsigned __int8 *)(a1 + 728);
    int v16 = (*(uint64_t (**)(uint64_t *))(*v32 + 384))(v32);
    uint64_t v30 = 0;
    *(_OWORD *)long long buf = 0u;
    long long v29 = 0u;
    (*(void (**)(void **__return_ptr))(*v32 + 248))(__p);
    int v17 = sub_100046F68(a1 + 704, __p);
    if ((void **)(a1 + 712) == v17)
    {
      uint64_t v18 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        unint64_t v21 = v27;
        if ((v27 & 0x80u) != 0) {
          unint64_t v21 = (unint64_t)__p[1];
        }
        unint64_t v22 = __p;
        if ((v27 & 0x80u) != 0) {
          unint64_t v22 = (void **)__p[0];
        }
        if (v21) {
          uint64_t v23 = (const char *)v22;
        }
        else {
          uint64_t v23 = "<invalid>";
        }
        *(_DWORD *)uint64_t v34 = 136315138;
        uint64_t v35 = v23;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "rest::vowifi_prov_state not initialized or pid not found! : %s", v34, 0xCu);
      }
      *(_DWORD *)long long buf = 0;
      uint8_t buf[4] = 1;
      uint8_t buf[8] = 0;
      LOBYTE(v30) = 0;
    }
    else
    {
      *(_DWORD *)long long buf = *((_DWORD *)v17 + 14);
      uint8_t buf[4] = *((unsigned char *)v17 + 60);
      sub_1000593FC((uint64_t)&buf[8], (long long *)v17 + 4);
    }
    if ((char)v27 < 0)
    {
      operator delete(__p[0]);
      if (!v16) {
        goto LABEL_23;
      }
    }
    else if (!v16)
    {
LABEL_23:
      uint64_t v19 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), *(unsigned int *)(a2 + 252));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I VoLTE or VoWifi (not Thumper) call will be made, do a SIM call control check", (uint8_t *)__p, 2u);
      }
      if ((*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)v12 + 232))(v12, *(unsigned int *)(a2 + 252), 30))
      {
        sub_100245B5C((uint64_t)v25, a2);
        unsigned int v20 = v25;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 376))(a1, v25);
LABEL_28:
        sub_1002243E8((uint64_t)v20);
        if ((_BYTE)v30 && SHIBYTE(v29) < 0) {
          operator delete(*(void **)&buf[8]);
        }
        goto LABEL_31;
      }
LABEL_27:
      sub_100245B5C((uint64_t)v24, a2);
      unsigned int v20 = v24;
      sub_1010A1EF4(a1, (uint64_t)v24, 0);
      goto LABEL_28;
    }
    if (v15 || *(_DWORD *)buf != 1) {
      goto LABEL_27;
    }
    goto LABEL_23;
  }
  uint64_t v12 = v10[3];
  int v11 = (std::__shared_weak_count *)v10[4];
  if (!v11) {
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v5);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v11);
  char v13 = 0;
  if (v12) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v14 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I Subscriber module is not available, perform SIM call control then dial", buf, 2u);
  }
  sub_100245B5C((uint64_t)v31, a2);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 376))(a1, v31);
  sub_1002243E8((uint64_t)v31);
LABEL_31:
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
LABEL_33:
  if (v33) {
    sub_10004D2C8(v33);
  }
}

void sub_1010A2C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  sub_1002243E8((uint64_t)&a60);
  if (LOBYTE(STACK[0x370]) && SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  if ((v61 & 1) == 0) {
    sub_10004D2C8(v60);
  }
  long long v64 = *(std::__shared_weak_count **)(v62 - 120);
  if (v64) {
    sub_10004D2C8(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1010A2CE4(uint64_t a1, uint64_t a2)
{
}

void sub_1010A2CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Performing SIM call control first and then dialing", buf, 2u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v5, *(Registry **)(a1 + 56));
  int v7 = ServiceMap;
  if (v8 < 0)
  {
    unsigned int v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      uint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v8;
  uint64_t v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)buf);
  if (v12)
  {
    uint64_t v14 = v12[3];
    char v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v13);
      char v15 = 0;
      if (!v14) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  char v13 = 0;
  char v15 = 1;
  if (!v14)
  {
LABEL_9:
    sub_100245B5C((uint64_t)v74, a2);
    sub_1010A1EF4(a1, (uint64_t)v74, 0);
    sub_1002243E8((uint64_t)v74);
    if (v15) {
      return;
    }
    goto LABEL_28;
  }
LABEL_13:
  *(unsigned char *)(a1 + 602) = 1;
  int v16 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v16 || (v17 = *(void *)(a1 + 16), (uint64_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v19 = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v18);
  uint64_t v20 = *(unsigned int *)(a2 + 252);
  CSIPhoneNumber::CSIPhoneNumber();
  uint64_t v21 = *(unsigned __int8 *)(a2 + 68);
  *(void *)&long long v34 = a1;
  sub_100245B5C((uint64_t)&v34 + 8, a2);
  uint64_t v63 = v17;
  long long v64 = v19;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v77 = 0;
  unint64_t v22 = (char *)operator new(0x1B8uLL);
  *(void *)unint64_t v22 = off_101A86DA0;
  long long v23 = v35;
  *(_OWORD *)(v22 + 8) = v34;
  *((void *)&v34 + 1) = 0;
  *(void *)&long long v35 = 0;
  *(_OWORD *)(v22 + 24) = v23;
  *((void *)v22 + 5) = v36;
  *((void *)&v35 + 1) = 0;
  uint64_t v36 = 0;
  *((_OWORD *)v22 + 3) = v37;
  *((void *)v22 + 8) = v38;
  long long v37 = 0uLL;
  long long v24 = v40;
  *(_OWORD *)(v22 + 72) = v39;
  long long v25 = v41;
  long long v26 = *(_OWORD *)v42;
  *(void *)(v22 + 133) = *(void *)&v42[13];
  *(_OWORD *)(v22 + 120) = v26;
  *(_OWORD *)(v22 + 104) = v25;
  *(_OWORD *)(v22 + 88) = v24;
  long long v27 = v43;
  *((void *)v22 + 20) = v44;
  *((_OWORD *)v22 + 9) = v27;
  uint64_t v38 = 0;
  long long v43 = 0uLL;
  uint64_t v44 = 0;
  *((_DWORD *)v22 + 42) = v45;
  long long v28 = v46;
  *((void *)v22 + 24) = v47;
  *((_OWORD *)v22 + 11) = v28;
  long long v46 = 0uLL;
  uint64_t v47 = 0;
  long long v29 = v48[0];
  *(_OWORD *)(v22 + 209) = *(_OWORD *)((char *)v48 + 9);
  *(_OWORD *)(v22 + 200) = v29;
  v22[232] = 0;
  v22[256] = 0;
  if (v51)
  {
    *(_OWORD *)(v22 + 232) = v49;
    *((void *)v22 + 31) = v50;
    uint64_t v50 = 0;
    long long v49 = 0uLL;
    v22[256] = 1;
  }
  v22[280] = v53;
  *(_OWORD *)(v22 + 264) = v52;
  *((void *)v22 + 38) = v55;
  *((_OWORD *)v22 + 18) = v54;
  long long v54 = 0uLL;
  *((void *)v22 + 41) = v57;
  *(_OWORD *)(v22 + 312) = v56;
  uint64_t v55 = 0;
  long long v56 = 0uLL;
  uint64_t v57 = 0;
  long long v30 = v59;
  *((_OWORD *)v22 + 21) = v58;
  *((_OWORD *)v22 + 22) = v30;
  long long v31 = v60;
  long long v32 = v61;
  long long v33 = *(_OWORD *)v62;
  *(void *)(v22 + 413) = *(void *)&v62[13];
  *((_OWORD *)v22 + 24) = v32;
  *((_OWORD *)v22 + 25) = v33;
  *((_OWORD *)v22 + 23) = v31;
  *((void *)v22 + 53) = v17;
  *((void *)v22 + 54) = v19;
  uint64_t v63 = 0;
  long long v64 = 0;
  long long v77 = v22;
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, void *))(*(void *)v14 + 176))(v14, v20, v65, v21, v76);
  sub_1005A52B8(v76);
  if (v64) {
    std::__shared_weak_count::__release_weak(v64);
  }
  sub_1002243E8((uint64_t)&v34 + 8);
  if (v73 < 0) {
    operator delete(__p);
  }
  if (v71 < 0) {
    operator delete(v70);
  }
  if (v69 < 0) {
    operator delete(v68);
  }
  if (v67 < 0) {
    operator delete(v66);
  }
  std::__shared_weak_count::__release_weak(v19);
  if ((v15 & 1) == 0) {
LABEL_28:
  }
    sub_10004D2C8(v13);
}

void sub_1010A3118(_Unwind_Exception *a1)
{
  sub_1002243E8((uint64_t)&STACK[0x238]);
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010A31A4(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 424);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_1002243E8(a1 + 8);
  return a1;
}

void sub_1010A31DC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4)
  {
    memset(&__str, 0, sizeof(__str));
    uint64_t v8 = (_OWORD *)(a2 + 32);
    if (*(char *)(a2 + 55) < 0)
    {
      sub_10004FC84(&__str, *(void **)(a2 + 32), *(void *)(a2 + 40));
    }
    else
    {
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v8;
      __str.__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      std::string::size_type v11 = 0;
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      unsigned int v13 = 1;
      while (1)
      {
        int v14 = p_str->__r_.__value_.__s.__data_[v11];
        if (v14 == 59 || v14 == 44) {
          break;
        }
        std::string::size_type v11 = v13;
        if (size <= v13++) {
          goto LABEL_20;
        }
      }
      std::string::basic_string(&buf, &__str, 0, v11, (std::allocator<char> *)v192);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = buf;
    }
LABEL_20:
    (*(void (**)(std::string *__return_ptr))(*(void *)*a4 + 248))(&buf);
    sub_1010A0E20(a1, (uint64_t)&buf);
    std::string::size_type v60 = (std::string::size_type)v8;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    long long v204 = 0u;
    long long v203 = 0u;
    long long v197 = 0u;
    long long v196 = 0u;
    long long v195 = 0u;
    *(_OWORD *)v194 = 0u;
    uint64_t v198 = 0x40A7700000000000;
    long long v199 = 0u;
    *(_OWORD *)v200 = 0u;
    *(_OWORD *)v201 = 0u;
    memset(v202, 0, sizeof(v202));
    long long v193 = 0u;
    *(_OWORD *)v192 = 0u;
    bzero(&buf, 0x2E0uLL);
    *(_DWORD *)&v170[8] = 1;
    *(_WORD *)&v170[12] = 257;
    *(_OWORD *)v171 = 0u;
    memset(v172, 0, sizeof(v172));
    *(_OWORD *)v173 = 0u;
    memset(v174, 0, sizeof(v174));
    *(_OWORD *)v175 = 0u;
    memset(v176, 0, sizeof(v176));
    long long v177 = 0u;
    long long v178 = 0u;
    long long v179 = 0u;
    sub_100058DB0(&v180, "ims");
    *(_WORD *)&v182[4] = 0;
    v182[6] = 1;
    *(_OWORD *)v183 = 0u;
    memset(v184, 0, sizeof(v184));
    __int16 v185 = 0;
    memset(v189, 0, sizeof(v189));
    long long v188 = 0u;
    long long v186 = 0u;
    memset(v187, 0, sizeof(v187));
    __int16 v190 = 257;
    *(_DWORD *)&v191[4] = 0;
    *(_WORD *)&v191[8] = 256;
    v191[10] = 1;
    uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 440))();
    if (a3)
    {
      if (!(*(void *)a2 ? sub_100136254 : 0))
      {
        CFUUIDRef v18 = CFUUIDCreate(kCFAllocatorDefault);
        std::string::size_type v19 = *(void *)a2;
        *(void *)a2 = v18;
        v212.__r_.__value_.__r.__words[0] = v19;
        sub_10012577C((const void **)&v212.__r_.__value_.__l.__data_);
      }
    }
    long long v143 = 0;
    uint64_t v142 = 0;
    sub_1010A4850(&v142, a1, a2, v16);
    if (!v142)
    {
      long long v30 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v212.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to create IMS call object!", (uint8_t *)&v212, 2u);
      }
LABEL_221:
      if (v143) {
        sub_10004D2C8(v143);
      }
      sub_1010AEB48((uint64_t)&buf);
      if ((_BYTE)v204 && SHIBYTE(v203) < 0) {
        operator delete(v202[8]);
      }
      if (SHIBYTE(v202[6]) < 0) {
        operator delete(v202[4]);
      }
      if (SHIBYTE(v202[3]) < 0) {
        operator delete(v202[1]);
      }
      if (SHIBYTE(v202[0]) < 0) {
        operator delete(v201[0]);
      }
      if (SHIBYTE(v200[1]) < 0) {
        operator delete(*((void **)&v199 + 1));
      }
      if (SHIBYTE(v195) < 0) {
        operator delete(v194[1]);
      }
      if (SHIBYTE(v193) < 0) {
        operator delete(v192[1]);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      return;
    }
    (*(void (**)(void **__return_ptr))(*(void *)*a4 + 248))(__p);
    ServiceMap = (std::mutex *)Registry::getServiceMap(v20, *(Registry **)(a1 + 56));
    unint64_t v22 = ServiceMap;
    if ((v23 & 0x8000000000000000) != 0)
    {
      long long v24 = (unsigned __int8 *)(v23 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v25 = 5381;
      do
      {
        std::string::size_type v23 = v25;
        unsigned int v26 = *v24++;
        uint64_t v25 = (33 * v25) ^ v26;
      }
      while (v26);
    }
    std::mutex::lock(ServiceMap);
    v212.__r_.__value_.__r.__words[0] = v23;
    long long v27 = sub_10004D37C(&v22[1].__m_.__sig, (unint64_t *)&v212);
    if (v27)
    {
      uint64_t v29 = v27[3];
      long long v28 = (std::__shared_weak_count *)v27[4];
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v22);
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v28);
        if (!v29)
        {
LABEL_106:
          sub_10004D2C8(v28);
          goto LABEL_107;
        }
LABEL_40:
        uint64_t v209 = 0;
        v210 = 0;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v29 + 40))(&v209, v29, __p);
        if (!v209) {
          goto LABEL_103;
        }
        CFDictionaryRef v208 = 0;
        (*(void (**)(std::string *__return_ptr))(*(void *)v209 + 40))(&v212);
        sub_10004EFE4(&v208, (CFTypeRef *)&v212.__r_.__value_.__l.__data_);
        sub_1000577C4((const void **)&v212.__r_.__value_.__l.__data_);
        long long v31 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v31 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if (v31->__r_.__value_.__s.__data_[0] != 43 || (v208 ? (long long v32 = sub_100080778) : (long long v32 = 0), !v32))
        {
LABEL_102:
          sub_100057D78((const void **)&v208);
LABEL_103:
          if (v210) {
            sub_10004D2C8(v210);
          }
          if (!v28) {
            goto LABEL_107;
          }
          goto LABEL_106;
        }
        long long v33 = *(NSObject **)(a1 + 48);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v212.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I Trimming \"+\" character off front of Call destination address", (uint8_t *)&v212, 2u);
        }
        std::string::basic_string(&v212, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v207);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        std::string __str = v212;
        memset(&v207, 0, sizeof(v207));
        CFDictionaryGetValue(v208, @"Local");
        memset(&v212, 0, sizeof(v212));
        ctu::cf::assign();
        std::string v207 = v212;
        memset(&v206, 0, sizeof(v206));
        CFDictionaryGetValue(v208, @"International");
        memset(&v212, 0, sizeof(v212));
        ctu::cf::assign();
        std::string v206 = v212;
        std::string::size_type v34 = v207.__r_.__value_.__l.__size_;
        if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v34 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
        }
        if (v34)
        {
          std::string::size_type v35 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
          char v36 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
          if ((v206.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v35 = v206.__r_.__value_.__l.__size_;
          }
          if (v35)
          {
            long long v37 = &v207;
            if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              long long v37 = (std::string *)v207.__r_.__value_.__r.__words[0];
            }
            if (v37->__r_.__value_.__s.__data_[0] == 43)
            {
              std::string::basic_string(&v212, &v207, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v211);
              if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v207.__r_.__value_.__l.__data_);
              }
              std::string v207 = v212;
              char v36 = HIBYTE(v206.__r_.__value_.__r.__words[2]);
            }
            BOOL v38 = v36 < 0;
            long long v39 = &v206;
            if (v38) {
              long long v39 = (std::string *)v206.__r_.__value_.__r.__words[0];
            }
            if (v39->__r_.__value_.__s.__data_[0] == 43)
            {
              std::string::basic_string(&v212, &v206, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v211);
              if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v206.__r_.__value_.__l.__data_);
              }
              std::string v206 = v212;
            }
            if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v40 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v40 = v207.__r_.__value_.__l.__size_;
            }
            std::string::basic_string(&v212, &__str, 0, v40, (std::allocator<char> *)&v211);
            if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v41 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v41 = v212.__r_.__value_.__l.__size_;
            }
            std::string::size_type v42 = HIBYTE(v207.__r_.__value_.__r.__words[2]);
            if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v42 = v207.__r_.__value_.__l.__size_;
            }
            if (v41 != v42)
            {
              if ((*((unsigned char *)&v212.__r_.__value_.__s + 23) & 0x80) != 0) {
                operator delete(v212.__r_.__value_.__l.__data_);
              }
              goto LABEL_95;
            }
            if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v43 = &v207;
            }
            else {
              long long v43 = (std::string *)v207.__r_.__value_.__r.__words[0];
            }
            if ((*((unsigned char *)&v212.__r_.__value_.__s + 23) & 0x80) == 0)
            {
              if (!*((unsigned char *)&v212.__r_.__value_.__s + 23)) {
                goto LABEL_98;
              }
              uint64_t v44 = 0;
              do
              {
                int v45 = v212.__r_.__value_.__s.__data_[v44];
                int v46 = v43->__r_.__value_.__s.__data_[v44];
              }
              while (v45 == v46 && HIBYTE(v212.__r_.__value_.__r.__words[2]) - 1 != v44++);
              if (v45 == v46) {
                goto LABEL_98;
              }
LABEL_95:
              sub_1002055B4((const void **)&v206.__r_.__value_.__l.__data_, (const void **)&__str.__r_.__value_.__l.__data_, &v212);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v212;
              goto LABEL_98;
            }
            long long v48 = (void *)v212.__r_.__value_.__r.__words[0];
            int v49 = memcmp(v212.__r_.__value_.__l.__data_, v43, v212.__r_.__value_.__l.__size_);
            operator delete(v48);
            if (v49) {
              goto LABEL_95;
            }
          }
        }
LABEL_98:
        if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v206.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v207.__r_.__value_.__l.__data_);
        }
        goto LABEL_102;
      }
      std::mutex::unlock(v22);
      if (v29) {
        goto LABEL_40;
      }
    }
    else
    {
      std::mutex::unlock(v22);
    }
LABEL_107:
    if (v141 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v50 = v143;
    v139[0] = v142;
    v139[1] = v143;
    if (v143) {
      atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v16) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = 0;
    }
    sub_10109DAA8(a1, (uint64_t)v192, (unsigned int *)a2, v139, (uint64_t)p_buf, a4);
    if (v50) {
      sub_10004D2C8(v50);
    }
    long long v52 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 55) < 0) {
        std::string::size_type v60 = *(void *)v8;
      }
      CallInfo::toString((uint64_t *)&v207, (CallInfo *)a2);
      char v53 = "false";
      if (a3) {
        char v53 = "true";
      }
      LODWORD(v212.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)v212.__r_.__value_.__r.__words + 4) = v60;
      if ((v207.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v54 = &v207;
      }
      else {
        long long v54 = (std::string *)v207.__r_.__value_.__r.__words[0];
      }
      WORD2(v212.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v212.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v53;
      HIWORD(v212.__r_.__value_.__r.__words[2]) = 2080;
      v213 = v54;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#I PerformDial number: %s, bbCall: %s  %s", (uint8_t *)&v212, 0x20u);
      if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v207.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v55 = *(_DWORD **)(a1 + 832);
    long long v56 = *(_DWORD **)(a1 + 840);
    int v57 = (*(uint64_t (**)(void))(*(void *)*a4 + 256))(*a4);
    if (v55 != v56)
    {
      while (*v55 != v57)
      {
        v55 += 42;
        if (v55 == v56)
        {
          uint64_t v55 = v56;
          break;
        }
      }
    }
    if (v55 == *(_DWORD **)(a1 + 840) || (subscriber::isSimAbsent() & 1) != 0) {
      uint64_t isSimUnreadable = 1;
    }
    else {
      uint64_t isSimUnreadable = subscriber::isSimUnreadable();
    }
    uint64_t v59 = *a4;
    uint64_t v137 = v142;
    std::string::size_type v138 = v143;
    if (v143) {
      atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100245B5C((uint64_t)v136, a2);
    sub_1010AE7DC((uint64_t)v120, (uint64_t)v192);
    std::string v62 = buf;
    if (SHIBYTE(v146) < 0)
    {
      sub_10004FC84(&v63, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      long long v63 = __src;
      uint64_t v64 = v146;
    }
    if (SHIBYTE(v148) < 0)
    {
      sub_10004FC84(&v65, (void *)v147, *((unint64_t *)&v147 + 1));
    }
    else
    {
      long long v65 = v147;
      uint64_t v66 = v148;
    }
    long long v67 = v149;
    char v68 = v150;
    if (SHIBYTE(v152) < 0)
    {
      sub_10004FC84(&v69, (void *)v151, *((unint64_t *)&v151 + 1));
    }
    else
    {
      long long v69 = v151;
      uint64_t v70 = v152;
    }
    if (SHIBYTE(v154) < 0)
    {
      sub_10004FC84(&v71, (void *)v153, *((unint64_t *)&v153 + 1));
    }
    else
    {
      long long v71 = v153;
      uint64_t v72 = v154;
    }
    long long v73 = v155;
    char v74 = v156;
    if (SHIBYTE(v158) < 0)
    {
      sub_10004FC84(&v75, (void *)v157, *((unint64_t *)&v157 + 1));
    }
    else
    {
      long long v75 = v157;
      uint64_t v76 = v158;
    }
    if (SHIBYTE(v160) < 0)
    {
      sub_10004FC84(&v77, (void *)v159, *((unint64_t *)&v159 + 1));
    }
    else
    {
      long long v77 = v159;
      uint64_t v78 = v160;
    }
    long long v79 = v161;
    char v80 = v162;
    int v81 = v163;
    if (SHIBYTE(v165) < 0)
    {
      sub_10004FC84(&v82, (void *)v164, *((unint64_t *)&v164 + 1));
    }
    else
    {
      long long v82 = v164;
      uint64_t v83 = v165;
    }
    if (SHIBYTE(v167) < 0)
    {
      sub_10004FC84(&v84, (void *)v166, *((unint64_t *)&v166 + 1));
    }
    else
    {
      long long v84 = v166;
      uint64_t v85 = v167;
    }
    memset(v86, 0, sizeof(v86));
    sub_1000302C0((char *)v86, v168, v169, 0xAAAAAAAAAAAAAAABLL * (((char *)v169 - (char *)v168) >> 3));
    *(void *)((char *)v87 + 6) = *(void *)&v170[6];
    v87[0] = *(void *)v170;
    if (SHIBYTE(v172[0]) < 0)
    {
      sub_10004FC84(&v88, v171[0], (unint64_t)v171[1]);
    }
    else
    {
      long long v88 = *(_OWORD *)v171;
      uint64_t v89 = v172[0];
    }
    if (SHIBYTE(v172[3]) < 0)
    {
      sub_10004FC84(&v90, v172[1], (unint64_t)v172[2]);
    }
    else
    {
      long long v90 = *(_OWORD *)&v172[1];
      uint64_t v91 = v172[3];
    }
    if (SHIBYTE(v174[0]) < 0)
    {
      sub_10004FC84(&v92, v173[0], (unint64_t)v173[1]);
    }
    else
    {
      long long v92 = *(_OWORD *)v173;
      int v93 = v174[0];
    }
    if (SHIBYTE(v174[3]) < 0)
    {
      sub_10004FC84(&v94, v174[1], (unint64_t)v174[2]);
    }
    else
    {
      long long v94 = *(_OWORD *)&v174[1];
      BOOL v95 = v174[3];
    }
    if (SHIBYTE(v176[0]) < 0)
    {
      sub_10004FC84(&v96, v175[0], (unint64_t)v175[1]);
    }
    else
    {
      long long v96 = *(_OWORD *)v175;
      v97 = v176[0];
    }
    if (SHIBYTE(v176[3]) < 0)
    {
      sub_10004FC84(&v98, v176[1], (unint64_t)v176[2]);
    }
    else
    {
      long long v98 = *(_OWORD *)&v176[1];
      uint64_t v99 = v176[3];
    }
    memset(v100, 0, sizeof(v100));
    sub_1000302C0((char *)v100, (long long *)v177, *((long long **)&v177 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v177 + 1) - v177) >> 3));
    memset(v101, 0, sizeof(v101));
    sub_1000302C0((char *)v101, *((long long **)&v178 + 1), (long long *)v179, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - *((void *)&v178 + 1)) >> 3));
    if (SHIBYTE(v181) < 0)
    {
      sub_10004FC84(&v102, (void *)v180, *((unint64_t *)&v180 + 1));
    }
    else
    {
      long long v102 = v180;
      uint64_t v103 = v181;
    }
    *(_DWORD *)((char *)v104 + 3) = *(_DWORD *)&v182[3];
    v104[0] = *(_DWORD *)v182;
    if (SHIBYTE(v184[0]) < 0)
    {
      sub_10004FC84(&v105, v183[0], (unint64_t)v183[1]);
    }
    else
    {
      long long v105 = *(_OWORD *)v183;
      uint64_t v106 = v184[0];
    }
    if (SHIBYTE(v184[3]) < 0)
    {
      sub_10004FC84(&v107, v184[1], (unint64_t)v184[2]);
    }
    else
    {
      long long v107 = *(_OWORD *)&v184[1];
      int v108 = v184[3];
    }
    __int16 v109 = v185;
    if (SHIBYTE(v187[0]) < 0)
    {
      sub_10004FC84(&v110, (void *)v186, *((unint64_t *)&v186 + 1));
    }
    else
    {
      long long v110 = v186;
      uint64_t v111 = v187[0];
    }
    if (SHIBYTE(v187[3]) < 0)
    {
      sub_10004FC84(&v112, (void *)v187[1], v187[2]);
    }
    else
    {
      long long v112 = *(_OWORD *)&v187[1];
      uint64_t v113 = v187[3];
    }
    if (SHIBYTE(v189[0]) < 0)
    {
      sub_10004FC84(&v114, (void *)v188, *((unint64_t *)&v188 + 1));
    }
    else
    {
      long long v114 = v188;
      uint64_t v115 = v189[0];
    }
    if (SHIBYTE(v189[3]) < 0)
    {
      sub_10004FC84(&v116, (void *)v189[1], v189[2]);
    }
    else
    {
      long long v116 = *(_OWORD *)&v189[1];
      uint64_t v117 = v189[3];
    }
    __int16 v118 = v190;
    *(_DWORD *)((char *)v119 + 7) = *(_DWORD *)&v191[7];
    v119[0] = *(void *)v191;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = __str;
    }
    (*(void (**)(uint64_t, uint64_t *, unsigned char *, unsigned char *, std::string *, uint64_t, std::string *, uint64_t))(*(void *)v59 + 320))(v59, &v137, v136, v120, &v62, a3, &__dst, isSimUnreadable);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    sub_1010AEB48((uint64_t)&v62);
    if (v135 && v134 < 0) {
      operator delete(v133);
    }
    if (v132 < 0) {
      operator delete(v131);
    }
    if (v130 < 0) {
      operator delete(v129);
    }
    if (v128 < 0) {
      operator delete(v127);
    }
    if (v126 < 0) {
      operator delete(v125);
    }
    if (v124 < 0) {
      operator delete(v123);
    }
    if (v122 < 0) {
      operator delete(v121);
    }
    sub_1002243E8((uint64_t)v136);
    if (v138) {
      sub_10004D2C8(v138);
    }
    goto LABEL_221;
  }
  unsigned int v9 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::dialNormalCall_Sync: IMS Call model is NULL!", (uint8_t *)&buf, 2u);
  }
}

void sub_1010A43B8(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 217) < 0) {
    operator delete(*(void **)(v2 - 240));
  }
  if (*(char *)(v2 - 185) < 0) {
    operator delete(*(void **)(v2 - 208));
  }
  sub_100057D78((const void **)(v2 - 176));
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 160);
  if (v4) {
    sub_10004D2C8(v4);
  }
  if (v1) {
    sub_10004D2C8(v1);
  }
  if (SLOBYTE(STACK[0x5EF]) < 0) {
    operator delete((void *)STACK[0x5D8]);
  }
  if (STACK[0x5F8]) {
    sub_10004D2C8((std::__shared_weak_count *)STACK[0x5F8]);
  }
  sub_1010AEB48((uint64_t)&STACK[0x600]);
  sub_1009A3898((uint64_t)&STACK[0x8E0]);
  if (SLOBYTE(STACK[0x9F7]) < 0) {
    operator delete((void *)STACK[0x9E0]);
  }
  _Unwind_Resume(a1);
}

void sub_1010A4850(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v6 = *(void *)(a2 + 784);
  sub_1010A6C04(&v7, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 64))(v6, a3, &v7, a4);
  if (v8) {
    sub_10004D2C8(v8);
  }
}

void sub_1010A48DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010A48F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 184))
  {
    uint64_t v2 = *(void *)(a1 + 608);
    *(void *)(a1 + 608) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Got civic location information, continuing with call", (uint8_t *)v6, 2u);
    }
    sub_100245B5C((uint64_t)v45, a1 + 192);
    int v4 = *(unsigned __int8 *)(a1 + 600);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, void))(*(void *)a1 + 56))(v6, a1, *(unsigned int *)(a1 + 444));
    sub_1010A31DC(a1, (uint64_t)v45, v4 != 0, v6);
    if (*((void *)&v6[0] + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v6[0] + 1));
    }
    sub_1002243E8((uint64_t)v45);
    memset(v6, 0, sizeof(v6));
    sub_100058DB0(v7, kCallerIdDefaultValue);
    int v8 = 9;
    char v9 = 0;
    int v10 = 1;
    char v11 = 1;
    uint64_t v12 = 0x400000001;
    uint64_t v13 = 2;
    char v14 = 0;
    int v15 = CallInfo::kDefaultCallId;
    char v18 = 0;
    char v19 = 0;
    uint64_t v16 = 0;
    v17[0] = 0;
    *(void *)((char *)v17 + 6) = 0;
    sub_100058DB0(v20, "");
    int v21 = 0;
    sub_100058DB0(v22, "");
    int v23 = 0;
    __int16 v24 = 0;
    int v25 = 0;
    __int16 v26 = 0;
    int v27 = 0;
    char v28 = 0;
    char v29 = 0;
    char v30 = 0;
    char v31 = 0;
    __int16 v32 = 0;
    int v33 = 1;
    char v34 = 0;
    int v35 = 0;
    char v36 = 0;
    char v42 = 0;
    char v43 = 0;
    char v44 = 0;
    char v41 = 0;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    sub_1010A4BC8(a1 + 192, (uint64_t)v6);
    sub_1002243E8((uint64_t)v6);
    *(unsigned char *)(a1 + 600) = 0;
  }
  else
  {
    uint64_t v5 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Received location information but has no call pending!", (uint8_t *)v6, 2u);
    }
  }
}

void sub_1010A4B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  sub_10012577C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1010A4BC8(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    int v4 = *(const void **)a1;
    *(void *)a1 = 0;
    int v27 = v4;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = 0;
    sub_10012577C(&v27);
  }
  uint64_t v5 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v7 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)uint64_t v7 = v8;
  *(unsigned char *)(a2 + 55) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  uint64_t v9 = *(void *)(a2 + 117);
  long long v10 = *(_OWORD *)(a2 + 104);
  long long v11 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = v11;
  *(_OWORD *)(a1 + 104) = v10;
  *(void *)(a1 + 117) = v9;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v12 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*v12);
  }
  long long v13 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)uint64_t v12 = v13;
  *(unsigned char *)(a2 + 151) = 0;
  *(unsigned char *)(a2 + 128) = 0;
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  char v14 = (void **)(a1 + 160);
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_OWORD *)char v14 = v15;
  *(unsigned char *)(a2 + 183) = 0;
  *(unsigned char *)(a2 + 160) = 0;
  long long v16 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 193) = *(_OWORD *)(a2 + 193);
  *(_OWORD *)(a1 + 184) = v16;
  sub_10026E640(a1 + 216, (__n128 *)(a2 + 216));
  long long v17 = *(_OWORD *)(a2 + 248);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v17;
  char v18 = (void **)(a1 + 272);
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*v18);
  }
  long long v19 = *(_OWORD *)(a2 + 272);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(_OWORD *)char v18 = v19;
  *(unsigned char *)(a2 + 295) = 0;
  *(unsigned char *)(a2 + 272) = 0;
  uint64_t v20 = (void **)(a1 + 296);
  if (*(char *)(a1 + 319) < 0) {
    operator delete(*v20);
  }
  long long v21 = *(_OWORD *)(a2 + 296);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(_OWORD *)uint64_t v20 = v21;
  *(unsigned char *)(a2 + 319) = 0;
  *(unsigned char *)(a2 + 296) = 0;
  long long v22 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v22;
  long long v23 = *(_OWORD *)(a2 + 352);
  long long v24 = *(_OWORD *)(a2 + 368);
  long long v25 = *(_OWORD *)(a2 + 384);
  *(void *)(a1 + 397) = *(void *)(a2 + 397);
  *(_OWORD *)(a1 + 368) = v24;
  *(_OWORD *)(a1 + 384) = v25;
  *(_OWORD *)(a1 + 352) = v23;
  return a1;
}

void sub_1010A4DD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 464))
  {
    uint64_t v3 = *(NSObject **)(v2 + 48);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Requested civic info, pending the call until we get an update w/ the location information", buf, 2u);
    }
    *(unsigned char *)(v2 + 184) = 1;
    sub_100224390((const void **)(v2 + 192), (const void **)(a1 + 40));
    std::string::operator=((std::string *)(v2 + 200), (const std::string *)(a1 + 48));
    std::string::operator=((std::string *)(v2 + 224), (const std::string *)(a1 + 72));
    *(_OWORD *)(v2 + 248) = *(_OWORD *)(a1 + 96);
    long long v5 = *(_OWORD *)(a1 + 128);
    long long v4 = *(_OWORD *)(a1 + 144);
    uint64_t v6 = *(void *)(a1 + 157);
    *(_OWORD *)(v2 + 264) = *(_OWORD *)(a1 + 112);
    *(void *)(v2 + 309) = v6;
    *(_OWORD *)(v2 + 296) = v4;
    *(_OWORD *)(v2 + 280) = v5;
    std::string::operator=((std::string *)(v2 + 320), (const std::string *)(a1 + 168));
    *(_DWORD *)(v2 + 344) = *(_DWORD *)(a1 + 192);
    std::string::operator=((std::string *)(v2 + 352), (const std::string *)(a1 + 200));
    long long v7 = *(_OWORD *)(a1 + 233);
    *(_OWORD *)(v2 + 376) = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(v2 + 385) = v7;
    sub_100840CD0(v2 + 408, a1 + 256);
    long long v8 = *(_OWORD *)(a1 + 288);
    *(unsigned char *)(v2 + 456) = *(unsigned char *)(a1 + 304);
    *(_OWORD *)(v2 + 440) = v8;
    std::string::operator=((std::string *)(v2 + 464), (const std::string *)(a1 + 312));
    std::string::operator=((std::string *)(v2 + 488), (const std::string *)(a1 + 336));
    long long v9 = *(_OWORD *)(a1 + 376);
    *(_OWORD *)(v2 + 512) = *(_OWORD *)(a1 + 360);
    *(_OWORD *)(v2 + 528) = v9;
    long long v11 = *(_OWORD *)(a1 + 408);
    long long v10 = *(_OWORD *)(a1 + 424);
    long long v12 = *(_OWORD *)(a1 + 392);
    *(void *)(v2 + 589) = *(void *)(a1 + 437);
    *(_OWORD *)(v2 + 560) = v11;
    *(_OWORD *)(v2 + 576) = v10;
    *(_OWORD *)(v2 + 544) = v12;
    *(unsigned char *)(v2 + 600) = *(unsigned char *)(a1 + 465);
    Registry::getTimerService((uint64_t *)buf, *(Registry **)(v2 + 56));
    uint64_t v13 = *(void *)buf;
    sub_100058DB0(__p, "Call with Location Timer");
    char v14 = *(NSObject **)(v2 + 32);
    dispatch_object_t object = v14;
    if (v14) {
      dispatch_retain(v14);
    }
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 0x40000000;
    aBlock[2] = sub_1010A5670;
    aBlock[3] = &unk_101A86A30;
    aBlock[4] = v2;
    long long v37 = _Block_copy(aBlock);
    sub_100118A44(v13, (uint64_t)__p, 1, 30000000, &object, &v37);
    long long v15 = __dst[0];
    __dst[0] = 0;
    uint64_t v16 = *(void *)(v2 + 608);
    *(void *)(v2 + 608) = v15;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      long long v17 = __dst[0];
      __dst[0] = 0;
      if (v17) {
        (*(void (**)(void *))(*(void *)v17 + 8))(v17);
      }
    }
    if (v37) {
      _Block_release(v37);
    }
    if (object) {
      dispatch_release(object);
    }
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (v76) {
      sub_10004D2C8(v76);
    }
  }
  else
  {
    uint64_t v18 = a1 + 40;
    long long v19 = (uint64_t *)(a1 + 448);
    if (*(unsigned char *)(a1 + 228))
    {
      sub_100245B5C((uint64_t)cf, v18);
      uint64_t v20 = *(void *)(a1 + 448);
      if (v20)
      {
        int v21 = *(unsigned __int8 *)(a1 + 465);
        (*(void (**)(uint8_t *__return_ptr))(*(void *)v20 + 488))(buf);
        uint64_t v22 = v77;
        sub_1004DD39C((uint64_t)buf);
        if (v22)
        {
          char v74 = 0;
          long long v73 = 0;
          sub_1010A4850(buf, v2, (uint64_t)cf, 0);
          sub_1009A0AC8((void **)buf, &v73);
          if (v76) {
            sub_10004D2C8(v76);
          }
          if (v73)
          {
            long long v72 = 0u;
            long long v71 = 0u;
            long long v65 = 0u;
            long long v64 = 0u;
            long long v63 = 0u;
            *(_OWORD *)std::string v62 = 0u;
            long long v61 = 0u;
            *(_OWORD *)std::string __dst = 0u;
            uint64_t v66 = 0x40A7700000000000;
            long long v67 = 0u;
            *(_OWORD *)char v68 = 0u;
            *(_OWORD *)long long v69 = 0u;
            memset(v70, 0, sizeof(v70));
            long long v23 = v74;
            v59[0] = v73;
            v59[1] = v74;
            if (v74) {
              atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_10109DAA8(v2, (uint64_t)__dst, (unsigned int *)cf, v59, 0, v19);
            if (v23) {
              sub_10004D2C8(v23);
            }
            uint64_t v24 = *v19;
            int v57 = v73;
            long long v58 = v74;
            if (v74) {
              atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_100245B5C((uint64_t)buf, (uint64_t)cf);
            sub_1010AE7DC((uint64_t)v41, (uint64_t)__dst);
            (*(void (**)(uint64_t, void **, uint8_t *, unsigned char *))(*(void *)v24 + 336))(v24, &v57, buf, v41);
            if (v56 && v55 < 0) {
              operator delete(v54);
            }
            if (v53 < 0) {
              operator delete(v52);
            }
            if (v51 < 0) {
              operator delete(v50);
            }
            if (v49 < 0) {
              operator delete(v48);
            }
            if (v47 < 0) {
              operator delete(v46);
            }
            if (v45 < 0) {
              operator delete(v44);
            }
            if (v43 < 0) {
              operator delete(v42);
            }
            sub_1002243E8((uint64_t)buf);
            if (v58) {
              sub_10004D2C8(v58);
            }
            if ((_BYTE)v72 && SHIBYTE(v71) < 0) {
              operator delete(v70[8]);
            }
            if (SHIBYTE(v70[6]) < 0) {
              operator delete(v70[4]);
            }
            if (SHIBYTE(v70[3]) < 0) {
              operator delete(v70[1]);
            }
            if (SHIBYTE(v70[0]) < 0) {
              operator delete(v69[0]);
            }
            if (SHIBYTE(v68[1]) < 0) {
              operator delete(*((void **)&v67 + 1));
            }
            if (SHIBYTE(v63) < 0) {
              operator delete(v62[1]);
            }
            if (SHIBYTE(v61) < 0) {
              operator delete(__dst[1]);
            }
          }
          else
          {
            char v28 = *(NSObject **)(v2 + 48);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "pullThumperCall_Sync: cannot create an ims call object", buf, 2u);
            }
          }
          if (v74) {
            sub_10004D2C8(v74);
          }
        }
        else
        {
          int v27 = *(NSObject **)(v2 + 48);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I Pulling call via short code", buf, 2u);
          }
          __dst[1] = 0;
          __dst[0] = 0;
          *(void *)&long long v61 = 0;
          if (SHIBYTE(v35) < 0)
          {
            sub_10004FC84(__dst, (void *)v34, *((unint64_t *)&v34 + 1));
          }
          else
          {
            *(_OWORD *)std::string __dst = v34;
            *(void *)&long long v61 = v35;
          }
          char v29 = (void *)BYTE7(v61);
          if (SBYTE7(v61) < 0) {
            char v29 = __dst[1];
          }
          if (v29)
          {
            sub_100245B5C((uint64_t)buf, (uint64_t)cf);
            sub_1010A31DC(v2, (uint64_t)buf, v21 != 0, v19);
            sub_1002243E8((uint64_t)buf);
          }
          else
          {
            char v30 = *(NSObject **)(v2 + 48);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "No short code found. Cannot pull this call, ending it!", buf, 2u);
            }
            uint64_t v31 = *(void *)(v2 + 136);
            *(CFTypeRef *)std::string buf = cf[0];
            if (cf[0]) {
              CFRetain(cf[0]);
            }
            (*(void (**)(uint64_t, uint8_t *))(*(void *)v31 + 40))(v31, buf);
            sub_10012577C((const void **)buf);
          }
          if (SBYTE7(v61) < 0) {
            operator delete(__dst[0]);
          }
        }
      }
      else
      {
        __int16 v26 = *(NSObject **)(v2 + 48);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "pullThumperCall_Sync: cannot find ims model.", buf, 2u);
        }
      }
      long long v25 = cf;
    }
    else
    {
      sub_100245B5C((uint64_t)v32, v18);
      sub_1010A31DC(v2, (uint64_t)v32, *(unsigned __int8 *)(a1 + 465), (void *)(a1 + 448));
      long long v25 = (CFTypeRef *)v32;
    }
    sub_1002243E8((uint64_t)v25);
  }
}

void sub_1010A5570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (SLOBYTE(STACK[0x4B7]) < 0) {
    operator delete((void *)STACK[0x4A0]);
  }
  sub_1002243E8((uint64_t)&a60);
  _Unwind_Resume(a1);
}

const void **sub_1010A5670(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double result = *(const void ***)(v1 + 608);
  *(void *)(v1 + 608) = 0;
  if (result) {
    double result = (const void **)(*((uint64_t (**)(const void **))*result + 1))(result);
  }
  if (*(unsigned char *)(v1 + 184))
  {
    uint64_t v3 = *(NSObject **)(v1 + 48);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Location timer expired, continuing with call", (uint8_t *)v6, 2u);
    }
    *(unsigned char *)(v1 + 184) = 0;
    sub_100245B5C((uint64_t)v45, v1 + 192);
    int v4 = *(unsigned __int8 *)(v1 + 600);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, void))(*(void *)v1 + 56))(v6, v1, *(unsigned int *)(v1 + 444));
    sub_1010A31DC(v1, (uint64_t)v45, v4 != 0, v6);
    if (*((void *)&v6[0] + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v6[0] + 1));
    }
    sub_1002243E8((uint64_t)v45);
    memset(v6, 0, sizeof(v6));
    sub_100058DB0(v7, kCallerIdDefaultValue);
    int v8 = 9;
    char v9 = 0;
    int v10 = 1;
    char v11 = 1;
    uint64_t v12 = 0x400000001;
    uint64_t v13 = 2;
    char v14 = 0;
    char v5 = CallInfo::kDefaultCallId;
    int v15 = CallInfo::kDefaultCallId;
    char v18 = 0;
    char v19 = 0;
    uint64_t v16 = 0;
    v17[0] = 0;
    *(void *)((char *)v17 + 6) = 0;
    sub_100058DB0(v20, "");
    int v21 = 0;
    sub_100058DB0(v22, "");
    int v23 = 0;
    __int16 v24 = 0;
    int v25 = 0;
    __int16 v26 = 0;
    int v27 = 0;
    char v28 = 0;
    char v29 = 0;
    char v30 = 0;
    char v31 = 0;
    __int16 v32 = 0;
    int v33 = 1;
    char v34 = 0;
    int v35 = 0;
    char v36 = 0;
    char v42 = 0;
    char v43 = 0;
    char v44 = 0;
    char v41 = 0;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    sub_1010A4BC8(v1 + 192, (uint64_t)v6);
    double result = sub_1002243E8((uint64_t)v6);
    *(unsigned char *)(v1 + 600) = 0;
    *(unsigned char *)(v1 + 601) = v5;
  }
  return result;
}

void sub_1010A589C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  sub_10012577C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1010A5914(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100245B5C(a1 + 40, a2 + 40);
  uint64_t v5 = *(void *)(a2 + 456);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a1 + 456) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

const void **sub_1010A595C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 456);
  if (v2) {
    sub_10004D2C8(v2);
  }

  return sub_1002243E8(a1 + 40);
}

void sub_1010A599C(void *a1, const void **a2)
{
  int v4 = a1[6];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10012A394(&v12, a2);
    printUuid();
    if (SHIBYTE(v14) >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I IMSCallCommandDriver::answerWaitingHoldOther uuid: %s", buf, 0xCu);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    sub_10012577C(&v12);
  }
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000;
  v11[2] = sub_1010A5B94;
  v11[3] = &unk_101A86A80;
  v11[4] = a1;
  uint64_t v6 = (std::__shared_weak_count *)a1[3];
  if (!v6 || (uint64_t v7 = a1[2], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    sub_100088B9C();
  }
  char v9 = v8;
  int v10 = a1[4];
  __p[0] = _NSConcreteStackBlock;
  __p[1] = (void *)1174405120;
  char v14 = sub_1010AED70;
  int v15 = &unk_101A86D60;
  uint64_t v17 = v7;
  char v18 = v9;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v16 = v11;
  dispatch_async(v10, __p);
  if (v18) {
    sub_10004D2C8(v18);
  }
  sub_10004D2C8(v9);
}

void sub_1010A5B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10012577C((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_1010A5B94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  memset(v19, 0, sizeof(v19));
  sub_10057F630((uint64_t)v19);
  int v2 = (*(uint64_t (**)(void, unsigned char *))(**(void **)(v1 + 136) + 264))(*(void *)(v1 + 136), v19);
  uint64_t v17 = 0;
  uint64_t v16 = 0;
  uint64_t v18 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v1 + 136) + 256))(&v16);
  uint64_t v3 = v16;
  uint64_t v4 = v17;
  if (v16 == v17) {
    char v5 = 0;
  }
  else {
    char v5 = v2;
  }
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = *(NSObject **)(v1 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::answerWaitingHoldOther does not have a waiting and an active call", buf, 2u);
      uint64_t v6 = *(NSObject **)(v1 + 48);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = "false";
      if (v3 == v4) {
        int v8 = "false";
      }
      else {
        int v8 = "true";
      }
      if (v2) {
        uint64_t v7 = "true";
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Waiting: %s, Active: %s", buf, 0x16u);
    }
  }
  if (v3 == v4)
  {
    if (!v2) {
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  uint64_t v55 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v32 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_100245B5C((uint64_t)buf, v16);
  int v15 = 0;
  uint64_t v14 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v1 + 56))(&v14, v1, HIDWORD(v45));
  uint64_t v9 = v14;
  if (v14)
  {
    sub_100245B5C((uint64_t)v13, (uint64_t)buf);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 344))(v9, v13);
    sub_1002243E8((uint64_t)v13);
    if (v15) {
      sub_10004D2C8(v15);
    }
    sub_1002243E8((uint64_t)buf);
    if ((v2 & 1) == 0) {
      goto LABEL_28;
    }
LABEL_21:
    *(void *)&uint8_t buf[8] = 0;
    *(void *)std::string buf = 0;
    (*(void (**)(uint8_t *__return_ptr, uint64_t, void))(*(void *)v1 + 56))(buf, v1, HIDWORD(v20));
    uint64_t v10 = *(void *)buf;
    if (*(void *)buf)
    {
      sub_100245B5C((uint64_t)v12, (uint64_t)v19);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v10 + 328))(v10, v12);
      sub_1002243E8((uint64_t)v12);
    }
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    goto LABEL_28;
  }
  if (v15) {
    sub_10004D2C8(v15);
  }
  sub_1002243E8((uint64_t)buf);
LABEL_28:
  *(void *)std::string buf = &v16;
  sub_1002244D8((void ***)buf);
  return sub_1002243E8((uint64_t)v19);
}

void sub_1010A5F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002243E8((uint64_t)va);
  if (STACK[0x508]) {
    sub_10004D2C8((std::__shared_weak_count *)STACK[0x508]);
  }
  STACK[0x500] = (unint64_t)&STACK[0x348];
  sub_1002244D8((void ***)&STACK[0x500]);
  sub_1002243E8((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

void sub_1010A5FDC()
{
}

void sub_1010A5FE4(uint64_t a1, const void **a2)
{
}

void sub_1010A5FEC(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I IMSCallCommandDriver::answerWaitingEndActive", buf, 2u);
  }
  if (*(void *)(a1 + 168))
  {
    uint64_t v66 = 0;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    *(_OWORD *)std::string buf = 0u;
    sub_10057F630((uint64_t)buf);
    int v5 = (*(uint64_t (**)(void, uint8_t *))(**(void **)(a1 + 136) + 264))(*(void *)(a1 + 136), buf);
    uint64_t v39 = 0;
    uint64_t v38 = 0;
    uint64_t v40 = 0;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 256))(&v38);
    uint64_t v6 = v38;
    uint64_t v7 = v39;
    if (v38 == v39) {
      char v8 = 0;
    }
    else {
      char v8 = v5;
    }
    if ((v8 & 1) == 0)
    {
      uint64_t v9 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)block = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#E IMSCallCommandDriver::answerWaitingEndActive does not have a waiting and an active call", block, 2u);
        uint64_t v9 = *(NSObject **)(a1 + 48);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = "false";
        if (v6 == v7) {
          char v11 = "false";
        }
        else {
          char v11 = "true";
        }
        if (v5) {
          uint64_t v10 = "true";
        }
        *(_DWORD *)block = 136315394;
        *(void *)&block[4] = v10;
        *(_WORD *)&block[12] = 2080;
        *(void *)&block[14] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Waiting: %s, Active: %s", block, 0x16u);
      }
    }
    if (v6 != v7)
    {
      uint64_t v12 = v38;
      unint64_t v13 = 0xFAFAFAFAFAFAFAFBLL * ((v39 - v38) >> 3);
      if (v39 - v38 == 408)
      {
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 1174405120;
        v36[2] = sub_1010A67A8;
        v36[3] = &unk_101A86AA0;
        v36[4] = a1;
        memset(v37, 0, sizeof(v37));
        sub_100DF73F8(v37, v38, v39, v13);
        uint64_t v14 = *(std::__shared_weak_count **)(a1 + 24);
        if (!v14 || (uint64_t v15 = *(void *)(a1 + 16), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
          sub_100088B9C();
        }
        uint64_t v17 = v16;
        uint64_t v18 = *(NSObject **)(a1 + 32);
        *(void *)block = _NSConcreteStackBlock;
        *(void *)&block[8] = 1174405120;
        *(void *)&block[16] = sub_1010AED70;
        *(void *)&block[24] = &unk_101A86D60;
        *((void *)&v75 + 1) = v15;
        *(void *)&long long v76 = v17;
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)&long long v75 = v36;
        dispatch_async(v18, block);
        if ((void)v76) {
          sub_10004D2C8((std::__shared_weak_count *)v76);
        }
        sub_10004D2C8(v17);
        *(void *)block = v37;
        sub_1002244D8((void ***)block);
      }
      else if (v13 >= 2)
      {
        long long v20 = *(NSObject **)(a1 + 48);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)block = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Ending conference call", block, 2u);
          uint64_t v12 = v38;
        }
        uint64_t v98 = 0;
        long long v97 = 0u;
        long long v96 = 0u;
        long long v95 = 0u;
        long long v94 = 0u;
        long long v93 = 0u;
        long long v92 = 0u;
        long long v91 = 0u;
        long long v90 = 0u;
        long long v89 = 0u;
        long long v88 = 0u;
        long long v87 = 0u;
        long long v86 = 0u;
        long long v85 = 0u;
        long long v84 = 0u;
        long long v83 = 0u;
        long long v82 = 0u;
        long long v81 = 0u;
        long long v80 = 0u;
        long long v79 = 0u;
        long long v78 = 0u;
        long long v77 = 0u;
        long long v76 = 0u;
        long long v75 = 0u;
        memset(block, 0, sizeof(block));
        sub_100245B5C((uint64_t)block, v12);
        sub_1010A6C04(&lpsrc, a1, (uint64_t)block);
        if (lpsrc) {
        else
        }
          long long v21 = 0;
        if (v68) {
          sub_10004D2C8((std::__shared_weak_count *)v68);
        }
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 0x40000000;
        v35[2] = sub_1010A6CB0;
        v35[3] = &unk_101A86AD0;
        v35[4] = v21;
        long long v22 = *(std::__shared_weak_count **)(a1 + 24);
        if (!v22 || (uint64_t v23 = *(void *)(a1 + 16), (v24 = std::__shared_weak_count::lock(v22)) == 0)) {
          sub_100088B9C();
        }
        long long v25 = v24;
        long long v26 = *(NSObject **)(a1 + 32);
        lpsrc = _NSConcreteStackBlock;
        uint64_t v68 = 1174405120;
        long long v69 = sub_1010AED70;
        uint64_t v70 = &unk_101A86D60;
        uint64_t v72 = v23;
        long long v73 = v25;
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v71 = v35;
        dispatch_async(v26, &lpsrc);
        if (v73) {
          sub_10004D2C8(v73);
        }
        sub_10004D2C8(v25);
        sub_1002243E8((uint64_t)block);
      }
      if (!*a2)
      {
        *a2 = 1;
        long long v27 = *(NSObject **)(a1 + 48);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)block = 67109120;
          *(_DWORD *)&block[4] = 1;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I numOfActiveCallsEnded incremented to %d", block, 8u);
        }
      }
    }
    if (v5)
    {
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 1174405120;
      void v33[2] = sub_1010A6CE8;
      v33[3] = &unk_101A86AF0;
      v33[4] = a1;
      sub_100245B5C((uint64_t)v34, (uint64_t)buf);
      long long v28 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v28 || (uint64_t v29 = *(void *)(a1 + 16), (v30 = std::__shared_weak_count::lock(v28)) == 0)) {
        sub_100088B9C();
      }
      char v31 = v30;
      long long v32 = *(NSObject **)(a1 + 32);
      *(void *)block = _NSConcreteStackBlock;
      *(void *)&block[8] = 1174405120;
      *(void *)&block[16] = sub_1010AED70;
      *(void *)&block[24] = &unk_101A86D60;
      *((void *)&v75 + 1) = v29;
      *(void *)&long long v76 = v31;
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v75 = v33;
      dispatch_async(v32, block);
      if ((void)v76) {
        sub_10004D2C8((std::__shared_weak_count *)v76);
      }
      sub_10004D2C8(v31);
      sub_1002243E8((uint64_t)v34);
    }
    *(void *)block = &v38;
    sub_1002244D8((void ***)block);
    sub_1002243E8((uint64_t)buf);
  }
  else
  {
    char v19 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I Telephony Daemon is not in a valid state to take requests", buf, 2u);
    }
  }
}

void sub_1010A6744(_Unwind_Exception *a1)
{
  STACK[0x410] = (unint64_t)&STACK[0x228];
  sub_1002244D8((void ***)&STACK[0x410]);
  sub_1002243E8((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

const void **sub_1010A67A8(uint64_t a1)
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100245B5C((uint64_t)cf, *(void *)(a1 + 40));
  int v2 = *(NSObject **)(v1 + 48);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef v5 = cf[0];
    if (cf[0]) {
      CFRetain(cf[0]);
    }
    sub_101328F44((CFUUIDRef *)&v5, (uint64_t)__p);
    if (v7 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    long long v35 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Ending single call with uuid: %s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
    sub_10012577C(&v5);
  }
  sub_1010A692C((void **)v1, (uint64_t)cf, 0);
  return sub_1002243E8((uint64_t)cf);
}

void sub_1010A68F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010A692C(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void *, void))(*a1[15] + 16))(a1[15], *(unsigned int *)(a2 + 252));
  char v7 = *v6;
  if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_10012A394(&v14, (const void **)a2);
    printUuid();
    int v8 = *(unsigned __int8 *)(a2 + 85);
    long long v9 = *(uint8_t **)v15;
    if (v16 >= 0) {
      long long v9 = v15;
    }
    long long v10 = "true";
    *(_DWORD *)std::string buf = 136315650;
    if (!v8) {
      long long v10 = "false";
    }
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v10;
    __int16 v18 = 1024;
    int v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Ending this call: %s is a merged call: %s is call of multi-party: %d.", buf, 0x1Cu);
    if (v16 < 0) {
      operator delete(*(void **)v15);
    }
    sub_10012577C(&v14);
  }
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  ((void (*)(unsigned char *__return_ptr, void **, void))(*a1)[7])(buf, a1, *(unsigned int *)(a2 + 252));
  uint64_t v11 = *(void *)buf;
  if (*(void *)buf)
  {
    sub_100245B5C((uint64_t)v13, a2);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v11 + 280))(v11, v13, a3);
    sub_1002243E8((uint64_t)v13);
  }
  else
  {
    long long v12 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long v15 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "IMS Call model not found!", v15, 2u);
    }
  }
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
}

void sub_1010A6B68(_Unwind_Exception *a1)
{
  sub_10012577C((const void **)(v1 - 152));
  _Unwind_Resume(a1);
}

void *sub_1010A6BA8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  int v2 = (void *)(a1 + 40);
  v2[2] = 0;
  return sub_100DF73F8(v2, *(void *)(a2 + 40), *(void *)(a2 + 48), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 3));
}

void sub_1010A6BD8(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_1002244D8(&v1);
}

void sub_1010A6C04(void *a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a2 + 136) + 440))(*(void *)(a2 + 136), a3))
  {
    sub_1010ABE04(a1, a2, v6);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(a3 + 252);
    sub_1010A9800(a1, a2, v7);
  }
}

uint64_t sub_1010A6CB0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 320))();
  }
  return result;
}

void sub_1010A6CE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 56))(&v5);
  uint64_t v3 = v5;
  if (v5)
  {
    sub_100245B5C((uint64_t)v4, a1 + 40);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 328))(v3, v4);
    sub_1002243E8((uint64_t)v4);
  }
  if (v6) {
    sub_10004D2C8(v6);
  }
}

void sub_1010A6DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002243E8((uint64_t)va);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 40);
  if (v4) {
    sub_10004D2C8(v4);
  }
  _Unwind_Resume(a1);
}

void sub_1010A6DD0(uint64_t a1, _DWORD *a2)
{
}

const void **sub_1010A6DD8(void *a1, uint64_t a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  v9[2] = sub_1010A6F0C;
  v9[3] = &unk_101A86B20;
  v9[4] = a1;
  sub_100245B5C((uint64_t)v10, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3 || (v4 = a1[2], (uint64_t v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  uint64_t v7 = a1[4];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010AED70;
  block[3] = &unk_101A86D60;
  block[5] = v4;
  long long v12 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v9;
  dispatch_async(v7, block);
  if (v12) {
    sub_10004D2C8(v12);
  }
  sub_10004D2C8(v6);
  return sub_1002243E8((uint64_t)v10);
}

void sub_1010A6F0C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[6];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    CallInfo::toString((uint64_t *)&v8, (CallInfo *)(a1 + 40));
    if (v10 >= 0) {
      uint64_t v5 = (void **)&v8;
    }
    else {
      uint64_t v5 = v8;
    }
    *(_DWORD *)std::string buf = 136315394;
    long long v12 = v4;
    __int16 v13 = 2080;
    long long v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I IMSCallCommandDriver::answerIncomingCall number: %s %s", buf, 0x16u);
    if (v10 < 0) {
      operator delete(v8);
    }
  }
  int v8 = 0;
  long long v9 = 0;
  (*(void (**)(void ***__return_ptr, void *, void))(*v2 + 56))(&v8, v2, *(unsigned int *)(a1 + 292));
  uint64_t v6 = v8;
  if (v8)
  {
    sub_100245B5C((uint64_t)v7, a1 + 40);
    (*((void (**)(void **, unsigned char *))*v6 + 41))(v6, v7);
    sub_1002243E8((uint64_t)v7);
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_1010A709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002243E8((uint64_t)&a9);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 - 96);
  if (v11) {
    sub_10004D2C8(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010A70CC(uint64_t a1, uint64_t a2)
{
  return sub_100245B5C(a1 + 40, a2 + 40);
}

const void **sub_1010A70D8(uint64_t a1)
{
  return sub_1002243E8(a1 + 40);
}

const void **sub_1010A70E0(uint64_t a1, uint64_t a2)
{
  return sub_1010A6DD8((void *)(a1 - 8), a2);
}

const void **sub_1010A70E8(void *a1, const void **a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  v9[2] = sub_1010A7214;
  v9[3] = &unk_101A86B50;
  v9[4] = a1;
  sub_10012A394(&v10, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3 || (v4 = a1[2], (uint64_t v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  uint64_t v7 = a1[4];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010AED70;
  block[3] = &unk_101A86D60;
  block[5] = v4;
  long long v12 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v9;
  dispatch_async(v7, block);
  if (v12) {
    sub_10004D2C8(v12);
  }
  sub_10004D2C8(v6);
  return sub_10012577C(&v10);
}

const void **sub_1010A7214(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  memset(v19, 0, sizeof(v19));
  sub_10057F630((uint64_t)v19);
  uint64_t v3 = *(void *)(v2 + 136);
  uint64_t v4 = (const void **)(a1 + 40);
  sub_10012A394(&v18, v4);
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t, const void **, unsigned char *))(*(void *)v3 + 288))(v3, &v18, v19);
  sub_10012577C(&v18);
  if (v3)
  {
    uint64_t v5 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(v2 + 120) + 16))(*(void *)(v2 + 120), HIDWORD(v32));
    char v16 = 0;
    __n128 __p = 0;
    (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v2 + 56))(&__p, v2, HIDWORD(v32));
    uint64_t v6 = __p;
    if (__p)
    {
      if (DWORD2(v20))
      {
        if (DWORD2(v20) != 1)
        {
          char v10 = *v5;
          if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "No Active or Held call found!", buf, 2u);
          }
          goto LABEL_17;
        }
        sub_100245B5C((uint64_t)v13, (uint64_t)v19);
        (*(void (**)(void *, unsigned char *))(*(void *)v6 + 352))(v6, v13);
        uint64_t v7 = v13;
      }
      else
      {
        sub_100245B5C((uint64_t)v12, (uint64_t)v19);
        (*(void (**)(void *, unsigned char *))(*(void *)v6 + 344))(v6, v12);
        uint64_t v7 = v12;
      }
      sub_1002243E8((uint64_t)v7);
    }
LABEL_17:
    if (v16) {
      sub_10004D2C8(v16);
    }
    return sub_1002243E8((uint64_t)v19);
  }
  int v8 = *(NSObject **)(v2 + 48);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    sub_10012A394(&v14, v4);
    printUuid();
    if (v17 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)std::string buf = 136315138;
    long long v44 = p_p;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "No Active Calls to hold..: %s", buf, 0xCu);
    if (v17 < 0) {
      operator delete(__p);
    }
    sub_10012577C(&v14);
  }
  return sub_1002243E8((uint64_t)v19);
}

void sub_1010A7510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002243E8((uint64_t)va);
  if (STACK[0x348]) {
    sub_10004D2C8((std::__shared_weak_count *)STACK[0x348]);
  }
  sub_1002243E8((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

const void **sub_1010A757C(uint64_t a1, uint64_t a2)
{
  return sub_10012A394((const void **)(a1 + 40), (const void **)(a2 + 40));
}

const void **sub_1010A7588(uint64_t a1)
{
  return sub_10012577C((const void **)(a1 + 40));
}

const void **sub_1010A7590(uint64_t a1, const void **a2)
{
  return sub_1010A70E8((void *)(a1 - 8), a2);
}

const void **sub_1010A7598(void *a1, const void **a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  v9[2] = sub_1010A76C4;
  v9[3] = &unk_101A86B80;
  v9[4] = a1;
  sub_10012A394(&v10, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3 || (v4 = a1[2], (uint64_t v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  uint64_t v7 = a1[4];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010AED70;
  block[3] = &unk_101A86D60;
  block[5] = v4;
  long long v12 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v9;
  dispatch_async(v7, block);
  if (v12) {
    sub_10004D2C8(v12);
  }
  sub_10004D2C8(v6);
  return sub_10012577C(&v10);
}

void sub_1010A76C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v1 + 136) + 280))(&v35);
  if (v36 == v35)
  {
    uint64_t v3 = *(NSObject **)(v1 + 48);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(cf[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "No held calls to resume.", (uint8_t *)cf, 2u);
    }
  }
  else
  {
    uint64_t v34 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    *(_OWORD *)CFTypeRef cf = 0u;
    sub_100245B5C((uint64_t)cf, v35);
    uint64_t v7 = 0;
    int v8 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v1 + 56))(&v7, v1, HIDWORD(v24));
    uint64_t v2 = v7;
    if (v7)
    {
      CFTypeRef v4 = cf[0];
      if (cf[0]) {
        CFRetain(cf[0]);
      }
      sub_101328F44((CFUUIDRef *)&v4, (uint64_t)__p);
      (*(void (**)(uint64_t, void **))(*(void *)v2 + 272))(v2, __p);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      sub_10012577C(&v4);
    }
    if (v8) {
      sub_10004D2C8(v8);
    }
    sub_1002243E8((uint64_t)cf);
  }
  cf[0] = &v35;
  sub_1002244D8((void ***)cf);
}

void sub_1010A7894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10012577C((const void **)&a9);
  if (a17) {
    sub_10004D2C8(a17);
  }
  sub_1002243E8((uint64_t)&a18);
  a18 = v18 - 40;
  sub_1002244D8((void ***)&a18);
  _Unwind_Resume(a1);
}

const void **sub_1010A78F4(uint64_t a1, const void **a2)
{
  return sub_1010A7598((void *)(a1 - 8), a2);
}

const void **sub_1010A78FC(void *a1, uint64_t a2)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  v10[2] = sub_1010A7A84;
  v10[3] = &unk_101A86BB0;
  v10[4] = a1;
  sub_100245B5C((uint64_t)v11, a2);
  if (*(char *)(a2 + 431) < 0)
  {
    sub_10004FC84(&__p, *(void **)(a2 + 408), *(void *)(a2 + 416));
  }
  else
  {
    long long __p = *(_OWORD *)(a2 + 408);
    uint64_t v13 = *(void *)(a2 + 424);
  }
  CFTypeRef v4 = (std::__shared_weak_count *)a1[3];
  if (!v4 || (uint64_t v5 = a1[2], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v6;
  int v8 = a1[4];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010AED70;
  block[3] = &unk_101A86D60;
  block[5] = v5;
  long long v15 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v10;
  dispatch_async(v8, block);
  if (v15) {
    sub_10004D2C8(v15);
  }
  sub_10004D2C8(v7);
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)__p);
  }
  return sub_1002243E8((uint64_t)v11);
}

void sub_1010A7A6C(_Unwind_Exception *a1)
{
  sub_1002243E8(v1);
  _Unwind_Resume(a1);
}

void sub_1010A7A84(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[6];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I IMSCallCommandDriver::mergeCalls", buf, 2u);
  }
  sub_1010A6C04(buf, (uint64_t)v2, a1 + 40);
  if (*(void *)buf) {
  else
  }
    CFTypeRef v4 = 0;
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (v4) {
    (*(void (**)(void *))(*(void *)v4 + 312))(v4);
  }
  *(void *)std::string buf = 0;
  long long v10 = 0;
  (*(void (**)(uint8_t *__return_ptr, void *, void))(*v2 + 56))(buf, v2, *(unsigned int *)(a1 + 292));
  uint64_t v5 = *(const void **)buf;
  if (*(void *)buf)
  {
    sub_100245B5C((uint64_t)v6, a1 + 40);
    if (*(char *)(a1 + 471) < 0)
    {
      sub_10004FC84(&__p, *(void **)(a1 + 448), *(void *)(a1 + 456));
    }
    else
    {
      long long __p = *(_OWORD *)(a1 + 448);
      uint64_t v8 = *(void *)(a1 + 464);
    }
    (*(void (**)(const void *, unsigned char *))(*(void *)v5 + 496))(v5, v6);
    if (SHIBYTE(v8) < 0) {
      operator delete((void *)__p);
    }
    sub_1002243E8((uint64_t)v6);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
}

void sub_1010A7C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002243E8((uint64_t)&a9);
  long long v11 = *(std::__shared_weak_count **)(v9 - 56);
  if (v11) {
    sub_10004D2C8(v11);
  }
  _Unwind_Resume(a1);
}

const void **sub_1010A7CAC(uint64_t a1)
{
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }

  return sub_1002243E8(a1);
}

unsigned char *sub_1010A7CF0(uint64_t a1, uint64_t a2)
{
  sub_100245B5C(a1 + 40, a2 + 40);
  uint64_t result = (unsigned char *)(a1 + 448);
  if (*(char *)(a2 + 471) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 448), *(void *)(a2 + 456));
  }
  long long v5 = *(_OWORD *)(a2 + 448);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(_OWORD *)uint64_t result = v5;
  return result;
}

void sub_1010A7D58(_Unwind_Exception *a1)
{
  sub_1002243E8(v1);
  _Unwind_Resume(a1);
}

const void **sub_1010A7D6C(uint64_t a1)
{
  if (*(char *)(a1 + 471) < 0) {
    operator delete(*(void **)(a1 + 448));
  }

  return sub_1002243E8(a1 + 40);
}

const void **sub_1010A7DB0(uint64_t a1, uint64_t a2)
{
  return sub_1010A78FC((void *)(a1 - 8), a2);
}

const void **sub_1010A7DC0(void *a1, uint64_t a2, int a3)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  v10[2] = sub_1010A7EF8;
  v10[3] = &unk_101A86BE0;
  v10[4] = a1;
  v11[102] = a3;
  sub_100245B5C((uint64_t)v11, a2);
  CFTypeRef v4 = (std::__shared_weak_count *)a1[3];
  if (!v4 || (uint64_t v5 = a1[2], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[4];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010AED70;
  block[3] = &unk_101A86D60;
  block[5] = v5;
  uint64_t v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v10;
  dispatch_async(v8, block);
  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10004D2C8(v7);
  return sub_1002243E8((uint64_t)v11);
}

void sub_1010A7EF8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 448) - 2;
  if (v3 > 2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = dword_1015B8E5C[v3];
  }
  uint64_t v5 = v2[6];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    char v6 = (void *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      char v6 = (void *)*v6;
    }
    uint64_t v7 = asString();
    CallInfo::toString((uint64_t *)v11, (CallInfo *)(a1 + 40));
    if (v12 >= 0) {
      uint64_t v8 = v11;
    }
    else {
      uint64_t v8 = (void **)v11[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v7;
    __int16 v14 = 2080;
    long long v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I IMSCallCommandDriver::sendToVoicemail number: %s reason: %s %s", buf, 0x20u);
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  (*(void (**)(unsigned char *__return_ptr, void *, void))(*v2 + 56))(buf, v2, *(unsigned int *)(a1 + 292));
  uint64_t v9 = *(void *)buf;
  if (*(void *)buf)
  {
    sub_100245B5C((uint64_t)v10, a1 + 40);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v9 + 280))(v9, v10, v4);
    sub_1002243E8((uint64_t)v10);
  }
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
}

void sub_1010A80D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1002243E8((uint64_t)&a9);
  long long v11 = *(std::__shared_weak_count **)(v9 - 120);
  if (v11) {
    sub_10004D2C8(v11);
  }
  _Unwind_Resume(a1);
}

const void **sub_1010A8108(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1010A7DC0((void *)(a1 - 8), a2, a3);
}

void sub_1010A8110(void *a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1010A8228;
  void v7[3] = &unk_101A86C10;
  void v7[4] = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (!v2 || (uint64_t v3 = a1[2], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v5 = v4;
  char v6 = a1[4];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010AED70;
  block[3] = &unk_101A86D60;
  block[5] = v3;
  uint64_t v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v7;
  dispatch_async(v6, block);
  if (v9) {
    sub_10004D2C8(v9);
  }
  sub_10004D2C8(v5);
}

void sub_1010A8228(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v1 + 136) + 280))(&v36);
  uint64_t v2 = v36;
  for (uint64_t i = v37; v2 != i; v2 += 408)
  {
    uint64_t v35 = 0;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v12 = 0u;
    memset(v11, 0, sizeof(v11));
    sub_100245B5C((uint64_t)v11, v2);
    uint64_t v4 = *(NSObject **)(v1 + 48);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = SBYTE7(v13);
      char v6 = (long long *)v12;
      CallInfo::toString((uint64_t *)__p, (CallInfo *)v11);
      if (v5 >= 0) {
        uint64_t v7 = &v12;
      }
      else {
        uint64_t v7 = v6;
      }
      uint64_t v8 = __p;
      if (v10 < 0) {
        uint64_t v8 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      long long v40 = v7;
      __int16 v41 = 2080;
      uint64_t v42 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Ending held call with number: %s %s", buf, 0x16u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_1010A692C((void **)v1, (uint64_t)v11, 0);
    sub_1002243E8((uint64_t)v11);
  }
  *(void *)&v11[0] = &v36;
  sub_1002244D8((void ***)v11);
}

void sub_1010A841C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

void sub_1010A8454(uint64_t a1)
{
}

const void **sub_1010A845C(void *a1, uint64_t a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  v9[2] = sub_1010A8590;
  v9[3] = &unk_101A86C30;
  v9[4] = a1;
  sub_100245B5C((uint64_t)v10, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3 || (v4 = a1[2], (int v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  char v6 = v5;
  uint64_t v7 = a1[4];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010AED70;
  block[3] = &unk_101A86D60;
  block[5] = v4;
  long long v12 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v9;
  dispatch_async(v7, block);
  if (v12) {
    sub_10004D2C8(v12);
  }
  sub_10004D2C8(v6);
  return sub_1002243E8((uint64_t)v10);
}

void sub_1010A8590(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 48);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    CallInfo::toString((uint64_t *)__p, (CallInfo *)(a1 + 40));
    if ((SBYTE7(v27) & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Ending call with number: %s %s", buf, 0x16u);
    if (SBYTE7(v27) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(unsigned char *)(v2 + 602))
  {
    char v6 = *(NSObject **)(v2 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Removing call pended for sim control results!", (uint8_t *)__p, 2u);
    }
    *(unsigned char *)(v2 + 602) = 0;
    uint64_t v50 = 0;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    memset(v32, 0, sizeof(v32));
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    *(_OWORD *)long long __p = 0u;
    sub_100245B5C((uint64_t)__p, a1 + 40);
    DWORD2(v32[1]) = 0;
    BYTE12(v32[1]) = 1;
    (*(void (**)(void, void **, uint64_t, uint64_t))(**(void **)(v2 + 136) + 72))(*(void *)(v2 + 136), __p, 1, 1);
LABEL_13:
    sub_1002243E8((uint64_t)__p);
    return;
  }
  if (*(unsigned char *)(v2 + 184))
  {
    uint64_t v7 = a1 + 40;
    sub_10012A394(&v25, (const void **)(a1 + 40));
    sub_101328F44((CFUUIDRef *)&v25, (uint64_t)__p);
    sub_10012A394(&v24, (const void **)(v2 + 192));
    sub_101328F44((CFUUIDRef *)&v24, (uint64_t)buf);
    if ((SBYTE7(v27) & 0x80u) == 0) {
      uint64_t v8 = (void *)BYTE7(v27);
    }
    else {
      uint64_t v8 = __p[1];
    }
    unint64_t v9 = v52;
    int v10 = (char)v52;
    if ((v52 & 0x80u) != 0) {
      unint64_t v9 = *(void *)&buf[8];
    }
    if (v8 != (void *)v9)
    {
      BOOL v20 = 0;
      if (((char)v52 & 0x80000000) == 0) {
        goto LABEL_37;
      }
      goto LABEL_34;
    }
    if ((v52 & 0x80u) == 0) {
      long long v11 = buf;
    }
    else {
      long long v11 = *(unsigned __int8 **)buf;
    }
    if ((BYTE7(v27) & 0x80) != 0)
    {
      BOOL v20 = memcmp(__p[0], v11, (size_t)__p[1]) == 0;
    }
    else
    {
      if (!BYTE7(v27))
      {
        BOOL v20 = 1;
        if (((char)v52 & 0x80000000) == 0)
        {
LABEL_37:
          sub_10012577C(&v24);
          if (SBYTE7(v27) < 0) {
            operator delete(__p[0]);
          }
          sub_10012577C(&v25);
          if (v20)
          {
            long long v21 = *(NSObject **)(v2 + 48);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p[0]) = 0;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Removing the pended call with location!", (uint8_t *)__p, 2u);
            }
            *(unsigned char *)(v2 + 184) = 0;
            *(_OWORD *)long long __p = 0u;
            long long v27 = 0u;
            sub_100058DB0(&v28, kCallerIdDefaultValue);
            DWORD2(v29) = 9;
            BYTE12(v29) = 0;
            LODWORD(v30) = 1;
            BYTE4(v30) = 1;
            *((void *)&v30 + 1) = 0x400000001;
            *(void *)&long long v31 = 2;
            BYTE8(v31) = 0;
            char v22 = CallInfo::kDefaultCallId;
            HIDWORD(v31) = CallInfo::kDefaultCallId;
            BYTE8(v32[1]) = 0;
            BYTE12(v32[1]) = 0;
            memset(v32, 0, 22);
            sub_100058DB0(&v33, "");
            DWORD2(v34) = 0;
            sub_100058DB0(&v35, "");
            DWORD2(v36) = 0;
            WORD6(v36) = 0;
            LODWORD(v37) = 0;
            WORD2(v37) = 0;
            DWORD2(v37) = 0;
            BYTE12(v37) = 0;
            LOBYTE(v38) = 0;
            BYTE8(v38) = 0;
            LOBYTE(v40) = 0;
            WORD4(v40) = 0;
            HIDWORD(v40) = 1;
            LOBYTE(v41) = 0;
            DWORD1(v41) = 0;
            BYTE8(v41) = 0;
            LOBYTE(v49) = 0;
            BYTE8(v49) = 0;
            BYTE4(v50) = 0;
            LOBYTE(v46) = 0;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            sub_1010A4BC8(v2 + 192, (uint64_t)__p);
            sub_1002243E8((uint64_t)__p);
            *(unsigned char *)(v2 + 600) = 0;
            *(unsigned char *)(v2 + 601) = v22;
            uint64_t v23 = *(void *)(v2 + 608);
            *(void *)(v2 + 608) = 0;
            if (v23) {
              (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
            }
            uint64_t v50 = 0;
            long long v48 = 0u;
            long long v49 = 0u;
            long long v46 = 0u;
            long long v47 = 0u;
            long long v44 = 0u;
            long long v45 = 0u;
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            long long v38 = 0u;
            long long v39 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            long long v34 = 0u;
            long long v35 = 0u;
            long long v33 = 0u;
            long long v31 = 0u;
            memset(v32, 0, sizeof(v32));
            long long v29 = 0u;
            long long v30 = 0u;
            long long v27 = 0u;
            long long v28 = 0u;
            *(_OWORD *)long long __p = 0u;
            sub_100245B5C((uint64_t)__p, v7);
            DWORD2(v32[1]) = 0;
            BYTE12(v32[1]) = 1;
            (*(void (**)(void, void **, uint64_t, uint64_t))(**(void **)(v2 + 136) + 72))(*(void *)(v2 + 136), __p, 1, 1);
            goto LABEL_13;
          }
          goto LABEL_45;
        }
LABEL_34:
        operator delete(*(void **)buf);
        goto LABEL_37;
      }
      uint64_t v12 = BYTE7(v27) - 1;
      long long v13 = __p;
      do
      {
        int v15 = *(unsigned __int8 *)v13;
        long long v13 = (void **)((char *)v13 + 1);
        int v14 = v15;
        int v17 = *v11++;
        int v16 = v17;
        BOOL v19 = v12-- != 0;
        BOOL v20 = v14 == v16;
      }
      while (v14 == v16 && v19);
    }
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_34;
  }
LABEL_45:
  sub_1010A692C((void **)v2, a1 + 40, 0);
}

void sub_1010A8A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, void *a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
}

const void **sub_1010A8B34(uint64_t a1, uint64_t a2)
{
  return sub_1010A845C((void *)(a1 - 8), a2);
}

const void **sub_1010A8B3C(void *a1, const void **a2)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  v9[2] = sub_1010A8C68;
  v9[3] = &unk_101A86C60;
  v9[4] = a1;
  sub_10012A394(&v10, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3 || (v4 = a1[2], (int v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  char v6 = v5;
  uint64_t v7 = a1[4];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010AED70;
  block[3] = &unk_101A86D60;
  block[5] = v4;
  uint64_t v12 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v9;
  dispatch_async(v7, block);
  if (v12) {
    sub_10004D2C8(v12);
  }
  sub_10004D2C8(v6);
  return sub_10012577C(&v10);
}

const void **sub_1010A8C68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 48);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Ending the conference call.", buf, 2u);
  }
  uint64_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  *(_OWORD *)std::string buf = 0u;
  long long v16 = 0u;
  sub_10057F630((uint64_t)buf);
  uint64_t v4 = *(void *)(v2 + 136);
  int v5 = (const void **)(a1 + 40);
  sub_10012A394(&v14, v5);
  LOBYTE(v4) = (*(uint64_t (**)(uint64_t, const void **, uint8_t *))(*(void *)v4 + 288))(v4, &v14, buf);
  sub_10012577C(&v14);
  if (v4)
  {
    sub_1010A6C04(&lpsrc, v2, (uint64_t)buf);
    if (lpsrc) {
    else
    }
      char v6 = 0;
    if (v12) {
      sub_10004D2C8(v12);
    }
    if (v6) {
      (*(void (**)(void *))(*(void *)v6 + 320))(v6);
    }
  }
  else
  {
    uint64_t v7 = *(NSObject **)(v2 + 48);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_10012A394(&v10, v5);
      printUuid();
      if (v13 >= 0) {
        p_lpsrc = &lpsrc;
      }
      else {
        p_lpsrc = lpsrc;
      }
      *(_DWORD *)long long v41 = 136315138;
      long long v42 = p_lpsrc;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "No conference call found to end..: %s", v41, 0xCu);
      if (v13 < 0) {
        operator delete(lpsrc);
      }
      sub_10012577C(&v10);
    }
  }
  return sub_1002243E8((uint64_t)buf);
}

void sub_1010A8EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1002243E8((uint64_t)va);
  _Unwind_Resume(a1);
}

const void **sub_1010A8F28(uint64_t a1, const void **a2)
{
  return sub_1010A8B3C((void *)(a1 - 8), a2);
}

void sub_1010A8F30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v4 = *(_DWORD *)(a2 + 92);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unexpected CallCommandDriver::endCallDueToHandover %d", (uint8_t *)v5, 8u);
  }
}

void sub_1010A8FD4(uint64_t a1, uint64_t a2)
{
}

void sub_1010A8FDC(void *a1, int a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_1010A90F8;
  v8[3] = &unk_101A86C90;
  v8[4] = a1;
  int v9 = a2;
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3 || (v4 = a1[2], (int v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  char v6 = v5;
  uint64_t v7 = a1[4];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010AED70;
  block[3] = &unk_101A86D60;
  block[5] = v4;
  long long v11 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v8;
  dispatch_async(v7, block);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10004D2C8(v6);
}

void sub_1010A90F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(v2 + 120) + 16))(*(void *)(v2 + 120), *(unsigned int *)(a1 + 40));
  uint64_t v4 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I IMSCallCommandDriver::endAllCalls", buf, 2u);
  }
  int v5 = *(void **)(v2 + 624);
  if (v5 != (void *)(v2 + 632))
  {
    do
    {
      uint64_t v6 = v5[7];
      if (v6)
      {
        *(void *)std::string buf = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        (*(void (**)(uint8_t *__return_ptr))(*(void *)v6 + 248))(buf);
        uint64_t v7 = HIBYTE(v30);
        if (v30 < 0) {
          uint64_t v7 = v29;
        }
        if (v7)
        {
          int v8 = (*(uint64_t (**)(void))(*(void *)v5[7] + 256))(v5[7]);
          int v9 = *(_DWORD *)(a1 + 40);
          BOOL v10 = v9 == 3 || v9 == v8;
          if (v10)
          {
            long long v36 = 0uLL;
            uint64_t v37 = 0;
            (*(void (**)(long long *__return_ptr))(**(void **)(v2 + 136) + 352))(&v36);
            long long v11 = *v3;
            if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
            {
              long long v12 = v36;
              (*(void (**)(uint8_t *__return_ptr))(**(void **)(v2 + 136) + 344))(v26);
              *(_DWORD *)long long v32 = 134218240;
              unint64_t v33 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)&v12 + 1) - v12) >> 3);
              __int16 v34 = 2048;
              unint64_t v35 = 0xFAFAFAFAFAFAFAFBLL * (((uint64_t)v27 - *(void *)v26) >> 3);
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Number of current calls on sim: %lu Total number of calls: %lu", v32, 0x16u);
              long long v31 = v26;
              sub_1002244D8((void ***)&v31);
            }
            uint64_t v14 = *((void *)&v36 + 1);
            uint64_t v13 = v36;
            if ((void)v36 != *((void *)&v36 + 1))
            {
              char v15 = 0;
              do
              {
                if (*(unsigned char *)(v13 + 85))
                {
                  if ((v15 & 1) == 0)
                  {
                    long long v16 = *v3;
                    if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)long long v26 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Ending the conference call", v26, 2u);
                    }
                    sub_1010A6C04(v26, v2, v13);
                    if (*(void *)v26) {
                    else
                    }
                      long long v17 = 0;
                    if (v27) {
                      sub_10004D2C8(v27);
                    }
                    if (v17) {
                      (*(void (**)(void *))(*(void *)v17 + 320))(v17);
                    }
                  }
                  char v15 = 1;
                }
                else
                {
                  uint64_t v18 = v5[7];
                  sub_100245B5C((uint64_t)v25, v13);
                  (*(void (**)(uint64_t, uint8_t *, void))(*(void *)v18 + 280))(v18, v25, 0);
                  sub_1002243E8((uint64_t)v25);
                }
                v13 += 408;
              }
              while (v13 != v14);
            }
            *(void *)long long v26 = &v36;
            sub_1002244D8((void ***)v26);
          }
          else
          {
            long long v20 = *(NSObject **)(v2 + 48);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v22 = subscriber::asString();
              LODWORD(v36) = 136315138;
              *(void *)((char *)&v36 + 4) = v22;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Don't end calls on %s", (uint8_t *)&v36, 0xCu);
            }
          }
        }
        else
        {
          long long v19 = *(NSObject **)(v2 + 48);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v36) = 136315138;
            *(void *)((char *)&v36 + 4) = "<invalid>";
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Invalid models not cleaned up! :%s", (uint8_t *)&v36, 0xCu);
          }
        }
        if (SHIBYTE(v30) < 0) {
          operator delete(*(void **)buf);
        }
      }
      long long v23 = (void *)v5[1];
      if (v23)
      {
        do
        {
          long long v24 = v23;
          long long v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          long long v24 = (void *)v5[2];
          BOOL v10 = *v24 == (void)v5;
          int v5 = v24;
        }
        while (!v10);
      }
      int v5 = v24;
    }
    while (v24 != (void *)(v2 + 632));
  }
}

void sub_1010A95F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (*(char *)(v14 - 169) < 0) {
    operator delete(*(void **)(v14 - 192));
  }
  _Unwind_Resume(exception_object);
}

void sub_1010A9658(uint64_t a1, int a2)
{
}

void sub_1010A9660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (NSObject **)(*(uint64_t (**)(void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120));
  long long lpsrc = 0uLL;
  sub_1010A9800(&lpsrc, a1, a2);
  if ((void)lpsrc)
  {
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *v4;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = subscriber::asString();
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v11 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Transferring IMS calls on sim %s", buf, 0xCu);
      }
      (*(void (**)(void *))(*(void *)v6 + 368))(v6);
    }
  }
  if (*((void *)&lpsrc + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&lpsrc + 1));
  }
}

void sub_1010A97DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010A9800(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5 = (NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 120) + 16))(*(void *)(a2 + 120), a3);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = (Registry **)(a2 + 56);
  uint64_t v20 = 0;
  PersonalityIdFromSlotIdEx();
  uint64_t v7 = *v5;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = "<invalid>";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Looking up Normal IMS client for %s", buf, 0xCu);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v8, *v6);
  BOOL v10 = ServiceMap;
  if ((v11 & 0x8000000000000000) != 0)
  {
    long long v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      unint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v21 = v11;
  char v15 = sub_10004D37C(&v10[1].__m_.__sig, &v21);
  if (v15)
  {
    uint64_t v17 = v15[3];
    long long v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      char v18 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::mutex::unlock(v10);
  long long v16 = 0;
  char v18 = 1;
LABEL_11:
  (*(void (**)(uint8_t *__return_ptr, uint64_t, void **))(*(void *)v17 + 24))(buf, v17, __p);
  *a1 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v16);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1010A9A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010A9A64(uint64_t a1, uint64_t a2)
{
}

void sub_1010A9A6C(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::enableVoicePrivacy is not supported", v2, 2u);
  }
}

void sub_1010A9AD0(uint64_t a1)
{
}

uint64_t sub_1010A9AE4(uint64_t a1, CallInfo *this)
{
  CallInfo::getLegacyFlags(this);
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 136) + 208);

  return v3();
}

uint64_t sub_1010A9B54(uint64_t a1, CallInfo *this)
{
  CallInfo::getLegacyFlags(this);
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 128) + 208);

  return v3();
}

uint64_t sub_1010A9BD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 200))();
}

uint64_t sub_1010A9BF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 8) + 200))();
}

void sub_1010A9C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), *(unsigned int *)(a3 + 252));
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)a1 + 56))(&v19, a1, *(unsigned int *)(a3 + 252));
  uint64_t v7 = v19;
  if (v19)
  {
    long long v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_10005C928(&v16, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
    sub_10012A394(&v13, (const void **)a3);
    sub_101328F44((CFUUIDRef *)&v13, (uint64_t)__p);
    (*(void (**)(uint64_t, void **, void **))(*(void *)v7 + 288))(v7, &v16, __p);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    sub_10012577C(&v13);
    if (v16)
    {
      uint64_t v17 = v16;
      operator delete(v16);
    }
  }
  else
  {
    uint64_t v8 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::sendDTMFDigits: No IMS model found.", buf, 2u);
    }
  }
  *(void *)std::string buf = 0;
  long long v12 = 0;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 136) + 320))(buf);
  if (*(void *)buf)
  {
    (*(void (**)(void, uint64_t, void))(**(void **)buf + 56))(*(void *)buf, a2, 0);
  }
  else
  {
    int v9 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v10 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::sendDTMFDigits Did not get a valid CallAudioDriver", v10, 2u);
    }
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
  if (v20) {
    sub_10004D2C8(v20);
  }
}

void sub_1010A9E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  long long v24 = *(std::__shared_weak_count **)(v22 - 56);
  if (v24) {
    sub_10004D2C8(v24);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010A9ECC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1010A9ED4(uint64_t a1, void **a2, int a3)
{
  int v5 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v6 = a2;
    }
    else {
      uint64_t v6 = *a2;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Sending downlink_dtmf_received rest event, uuid:%s, digit:%c", buf, 0x12u);
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(buf, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)std::string buf = *(_OWORD *)a2;
    *(void *)&uint8_t buf[16] = a2[2];
  }
  LOBYTE(value) = a3;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t v20 = v7;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v20 = v8;
    if (!v8)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
      goto LABEL_16;
    }
  }
  if (xpc_get_type(v8) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v8);
    goto LABEL_17;
  }
  xpc_object_t v9 = xpc_null_create();
LABEL_16:
  xpc_object_t v20 = v9;
LABEL_17:
  xpc_release(v8);
  if (buf[23] >= 0) {
    BOOL v10 = buf;
  }
  else {
    BOOL v10 = *(const char **)buf;
  }
  xpc_object_t v18 = xpc_string_create(v10);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  long long __p = &v20;
  char v14 = "first";
  sub_100035E70((uint64_t)&__p, &v18, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v18);
  xpc_object_t v18 = 0;
  xpc_object_t v16 = xpc_int64_create((char)value);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  long long __p = &v20;
  char v14 = "second";
  sub_100035E70((uint64_t)&__p, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_object_t v11 = v20;
  if (v20) {
    xpc_retain(v20);
  }
  else {
    xpc_object_t v11 = xpc_null_create();
  }
  xpc_release(v20);
  sub_100058DB0(&__p, "/cc/events/downlink_dtmf_complete");
  xpc_object_t v20 = v11;
  xpc_object_t v12 = xpc_null_create();
  ctu::RestModule::sendEvent();
  xpc_release(v20);
  xpc_object_t v20 = 0;
  if (v15 < 0) {
    operator delete(__p);
  }
  xpc_release(v12);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
}

void sub_1010AA16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1010AA218(uint64_t a1, void **a2, int a3)
{
}

void sub_1010AA220(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void *, void))(*a1[15] + 16))(a1[15], *(unsigned int *)(a3 + 252));
  uint64_t v13 = 0;
  char v14 = 0;
  ((void (*)(uint64_t *__return_ptr, void **, void))(*a1)[7])(&v13, a1, *(unsigned int *)(a3 + 252));
  uint64_t v7 = v13;
  if (v13)
  {
    sub_10012A394(&v10, (const void **)a3);
    sub_101328F44((CFUUIDRef *)&v10, (uint64_t)__p);
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v7 + 296))(v7, a2, __p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    sub_10012577C(&v10);
  }
  else
  {
    xpc_object_t v8 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)xpc_object_t v9 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::startDTMFTone: No IMS model found!", v9, 2u);
    }
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
}

void sub_1010AA37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10012577C(&a11);
  if (a19) {
    sub_10004D2C8(a19);
  }
  _Unwind_Resume(a1);
}

void sub_1010AA3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1010AA3BC(void **a1, uint64_t a2)
{
  uint64_t v4 = (os_log_t *)(*(uint64_t (**)(void *, void))(*a1[15] + 16))(a1[15], *(unsigned int *)(a2 + 252));
  uint64_t v11 = 0;
  char v12 = 0;
  ((void (*)(uint64_t *__return_ptr, void **, void))(*a1)[7])(&v11, a1, *(unsigned int *)(a2 + 252));
  uint64_t v5 = v11;
  if (v11)
  {
    sub_10012A394(&v8, (const void **)a2);
    sub_101328F44((CFUUIDRef *)&v8, (uint64_t)__p);
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 304))(v5, __p);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    sub_10012577C(&v8);
  }
  else
  {
    uint64_t v6 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::startDTMFTone: No IMS model found!", v7, 2u);
    }
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
}

void sub_1010AA510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10012577C(&a11);
  if (a19) {
    sub_10004D2C8(a19);
  }
  _Unwind_Resume(a1);
}

void sub_1010AA548(uint64_t a1, uint64_t a2)
{
}

void sub_1010AA550(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120));
  long long lpsrc = 0uLL;
  sub_1010A9800(&lpsrc, a1, a2);
  if ((void)lpsrc
  {
    uint64_t v6 = v5;
    uint64_t v7 = *v4;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)xpc_object_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I canceling USSD session...", v9, 2u);
    }
    (*(void (**)(void *))(*(void *)v6 + 304))(v6);
  }
  else
  {
    xpc_object_t v8 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)xpc_object_t v9 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "client is NULL! Failed to cancel USSD session!", v9, 2u);
    }
  }
  if (*((void *)&lpsrc + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&lpsrc + 1));
  }
}

void sub_1010AA6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AA6E8(uint64_t a1, uint64_t a2)
{
}

void sub_1010AA6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), a3);
  long long lpsrc = 0uLL;
  sub_1010A9800(&lpsrc, a1, a3);
  if ((void)lpsrc
  {
    xpc_object_t v8 = v7;
    xpc_object_t v9 = *v6;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I sending USSD procedure...", v11, 2u);
    }
    (*(void (**)(void *, uint64_t))(*(void *)v8 + 296))(v8, a2);
  }
  else
  {
    char v10 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "client is NULL! Failed to send USSD procedure!", v11, 2u);
    }
  }
  if (*((void *)&lpsrc + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&lpsrc + 1));
  }
}

void sub_1010AA87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AA894(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1010AA89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), a3);
  long long lpsrc = 0uLL;
  sub_1010A9800(&lpsrc, a1, a3);
  if ((void)lpsrc
  {
    xpc_object_t v8 = v7;
    xpc_object_t v9 = *v6;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I sending USSD user reply...", v11, 2u);
    }
    (*(void (**)(void *, uint64_t))(*(void *)v8 + 296))(v8, a2);
  }
  else
  {
    char v10 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "client is NULL! Failed to send USSD user reply!", v11, 2u);
    }
  }
  if (*((void *)&lpsrc + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&lpsrc + 1));
  }
}

void sub_1010AAA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AAA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1010AAA48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, *(Registry **)(a1 + 56));
  uint64_t v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    xpc_object_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v19 = v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, &v19);
  if (v11)
  {
    uint64_t v13 = v11[3];
    char v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      if (!v13) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  char v12 = 0;
  char v14 = 1;
  if (!v13)
  {
LABEL_7:
    uint64_t v15 = 0;
    if (v14) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 408))(v13, a2);
  if ((v14 & 1) == 0) {
LABEL_12:
  }
    sub_10004D2C8(v12);
LABEL_13:
  if ((v15 & 1) == 0)
  {
    xpc_object_t v16 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)xpc_object_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I We are CDMA technology; USSD is not supported",
        v18,
        2u);
    }
  }
  return v15;
}

void sub_1010AABBC(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010AABD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_1010AAA48(a1 - 8, a2, a3);
}

BOOL *sub_1010AABE0(uint64_t a1)
{
  uint64_t v2 = (Registry **)(a1 + 56);
  PersonalityIdFromSlotIdEx();
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *v2);
  uint64_t v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v23 = v6;
  unsigned int v10 = sub_10004D37C(&v5[1].__m_.__sig, &v23);
  if (!v10)
  {
    std::mutex::unlock(v5);
    goto LABEL_9;
  }
  uint64_t v12 = v10[3];
  uint64_t v11 = (std::__shared_weak_count *)v10[4];
  if (!v11)
  {
    std::mutex::unlock(v5);
    if (v12) {
      goto LABEL_11;
    }
LABEL_9:
    uint64_t v13 = 0;
    goto LABEL_23;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v5);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v11);
  if (!v12)
  {
    uint64_t v13 = 0;
LABEL_22:
    sub_10004D2C8(v11);
    goto LABEL_23;
  }
LABEL_11:
  unint64_t v23 = 0;
  long long v24 = 0;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, void **))(*(void *)v12 + 40))(&v23, v12, __p);
  if (v23)
  {
    *(void *)CFTypeRef cf = 0;
    (*(void (**)(unsigned char *__return_ptr))(*(void *)v23 + 40))(cf);
    uint64_t v13 = *(BOOL **)cf;
    char v25 = 0;
    if (*(void *)cf)
    {
      CFTypeID v14 = CFGetTypeID(*(CFTypeRef *)cf);
      if (v14 == CFBooleanGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)&v25, v13, v15);
        uint64_t v13 = (BOOL *)(v25 != 0);
      }
      else
      {
        uint64_t v13 = 0;
      }
    }
    sub_1000577C4((const void **)cf);
  }
  else
  {
    xpc_object_t v16 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      unint64_t v18 = v22;
      if ((v22 & 0x80u) != 0) {
        unint64_t v18 = (unint64_t)__p[1];
      }
      unint64_t v19 = __p;
      if ((v22 & 0x80u) != 0) {
        unint64_t v19 = (void **)__p[0];
      }
      if (v18) {
        xpc_object_t v20 = (const char *)v19;
      }
      else {
        xpc_object_t v20 = "<invalid>";
      }
      *(_DWORD *)CFTypeRef cf = 136315138;
      *(void *)&CFTypeRef cf[4] = v20;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "IMS config not found for pid %s", cf, 0xCu);
    }
    uint64_t v13 = 0;
  }
  if (v24) {
    sub_10004D2C8(v24);
  }
  if (v11) {
    goto LABEL_22;
  }
LABEL_23:
  if ((char)v22 < 0) {
    operator delete(__p[0]);
  }
  return v13;
}

void sub_1010AAE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, char a18)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL *sub_1010AAEE8(uint64_t a1)
{
  return sub_1010AABE0(a1 - 8);
}

void sub_1010AAEF0(uint64_t a1)
{
  CallCommandDriver::dumpState((CallCommandDriver *)(a1 + 8));
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I ----------------DUMP STATE:: IMSCommandDriver----------------", (uint8_t *)&v10, 2u);
  }
  uint64_t v3 = *(void **)(a1 + 624);
  if (v3 != (void *)(a1 + 632))
  {
    do
    {
      uint64_t v4 = v3[7];
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 504))(v4);
      }
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          unint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != (void *)(a1 + 632));
  }
  uint64_t v8 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 602)) {
      unsigned int v9 = "true";
    }
    else {
      unsigned int v9 = "false";
    }
    int v10 = 136315138;
    uint64_t v11 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Have call pended for sim call control result: %s", (uint8_t *)&v10, 0xCu);
  }
}

void sub_1010AB070(uint64_t a1)
{
}

void sub_1010AB078(uint64_t a1, uint64_t a2)
{
  long long v5 = 0uLL;
  sub_1010A9800(&v5, a1, a2);
  if ((void)v5)
  {
    *(_DWORD *)uint64_t v4 = 16;
    (*(void (**)(void, uint8_t *))(*(void *)v5 + 56))(v5, v4);
    uint64_t v3 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Send SRVCC started event succeeded!", v4, 2u);
    }
  }
  if (*((void *)&v5 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_1010AB134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AB14C(void **a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*a1[17] + 352))(&v8);
  uint64_t v2 = v8;
  for (uint64_t i = v9; v2 != i; v2 += 408)
  {
    unsigned int v4 = *(_DWORD *)(v2 + 56);
    BOOL v5 = v4 > 8;
    int v6 = (1 << v4) & 0x1B3;
    if (!v5 && v6 != 0) {
      sub_1010A692C(a1, v2, 3);
    }
  }
  uint64_t v11 = (void **)&v8;
  sub_1002244D8(&v11);
}

void sub_1010AB218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1002244D8(&a12);
  _Unwind_Resume(a1);
}

void sub_1010AB234(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  unsigned int v4 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 56))(&v3);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 360))(v3, a2);
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
}

void sub_1010AB2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AB2E8(uint64_t a1, const CallInfo *a2)
{
  int v4 = *((_DWORD *)a2 + 46);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v5 = isEmergencyCall(a2);
  sub_1010A4850(&v8, a1, (uint64_t)a2, v5);
  if (v8)
  {
    (*(void (**)(void))(*(void *)v8 + 48))();
    (*(void (**)(uint64_t, BOOL))(*(void *)v8 + 56))(v8, v4 == 2);
  }
  else
  {
    int v6 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#E applyCallSource: Cannot create an ims call object", v7, 2u);
    }
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_1010AB3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AB408(uint64_t a1, const CallInfo *a2)
{
}

uint64_t sub_1010AB410(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 224))();
}

uint64_t sub_1010AB438(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 128) + 224))();
}

uint64_t sub_1010AB460(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 96);
  sub_100047F64(&v3);
  uint64_t v3 = (void **)(a1 + 72);
  sub_100047F64(&v3);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v3 = (void **)(a1 + 24);
  sub_100047F64(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1010AB4DC(unsigned char *a1)
{
  a1[648] = 1;
  return (*(uint64_t (**)(void))(*(void *)a1 + 392))();
}

uint64_t sub_1010AB510(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 - 8);
  *(unsigned char *)(a1 + 640) = 1;
  return (*(uint64_t (**)(void))(v1 + 392))();
}

void sub_1010AB544(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Sending audio ready event to IMS clients of current calls", buf, 2u);
  }
  if (*(unsigned char *)(a1 + 648))
  {
    *(_OWORD *)std::string buf = 0u;
    long long v36 = 0u;
    uint64_t v37 = 1065353216;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 136) + 344))(&v32);
    uint64_t v3 = v32;
    uint64_t v4 = v33;
    while (v3 != v4)
    {
      int v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 136) + 440))(*(void *)(a1 + 136), v3);
      int v6 = *(_DWORD *)(v3 + 252);
      unint64_t v7 = *(void *)&buf[8];
      if (v5)
      {
        if (*(void *)&buf[8])
        {
          uint8x8_t v8 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&buf[8]);
          v8.i16[0] = vaddlv_u8(v8);
          if (v8.u32[0] > 1uLL)
          {
            unint64_t v9 = v6;
            if (*(void *)&buf[8] <= (unint64_t)v6) {
              unint64_t v9 = (unint64_t)v6 % *(void *)&buf[8];
            }
          }
          else
          {
            unint64_t v9 = (*(void *)&buf[8] - 1) & v6;
          }
          uint64_t v11 = *(uint64_t ***)(*(void *)buf + 8 * v9);
          if (v11)
          {
            for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
            {
              unint64_t v13 = i[1];
              if (v13 == v6)
              {
                if (*((_DWORD *)i + 4) == v6)
                {
                  i[3] = v3;
                  goto LABEL_69;
                }
              }
              else
              {
                if (v8.u32[0] > 1uLL)
                {
                  if (v13 >= *(void *)&buf[8]) {
                    v13 %= *(void *)&buf[8];
                  }
                }
                else
                {
                  v13 &= *(void *)&buf[8] - 1;
                }
                if (v13 != v9) {
                  break;
                }
              }
            }
          }
        }
        else
        {
          unint64_t v9 = 0;
        }
        CFTypeID v14 = operator new(0x20uLL);
        *CFTypeID v14 = 0;
        v14[1] = v6;
        *((_DWORD *)v14 + 4) = v6;
        v14[3] = v3;
        float v15 = (float)(unint64_t)(*((void *)&v36 + 1) + 1);
        if (!v7 || (float)(*(float *)&v37 * (float)v7) < v15)
        {
          BOOL v16 = (v7 & (v7 - 1)) != 0;
          if (v7 < 3) {
            BOOL v16 = 1;
          }
          unint64_t v17 = v16 | (2 * v7);
          unint64_t v18 = vcvtps_u32_f32(v15 / *(float *)&v37);
          if (v17 <= v18) {
            size_t v19 = v18;
          }
          else {
            size_t v19 = v17;
          }
LABEL_54:
          sub_100BD0148((uint64_t)buf, v19);
          unint64_t v7 = *(void *)&buf[8];
          if ((*(void *)&buf[8] & (*(void *)&buf[8] - 1)) != 0)
          {
            if (*(void *)&buf[8] <= (unint64_t)v6) {
              unint64_t v9 = (unint64_t)v6 % *(void *)&buf[8];
            }
            else {
              unint64_t v9 = v6;
            }
          }
          else
          {
            unint64_t v9 = (*(void *)&buf[8] - 1) & v6;
          }
        }
      }
      else
      {
        if (*(void *)&buf[8])
        {
          uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&buf[8]);
          v10.i16[0] = vaddlv_u8(v10);
          if (v10.u32[0] > 1uLL)
          {
            unint64_t v9 = v6;
            if (*(void *)&buf[8] <= (unint64_t)v6) {
              unint64_t v9 = (unint64_t)v6 % *(void *)&buf[8];
            }
          }
          else
          {
            unint64_t v9 = (*(void *)&buf[8] - 1) & v6;
          }
          xpc_object_t v20 = *(uint64_t ***)(*(void *)buf + 8 * v9);
          if (v20)
          {
            for (j = *v20; j; j = (uint64_t *)*j)
            {
              unint64_t v22 = j[1];
              if (v22 == v6)
              {
                if (*((_DWORD *)j + 4) == v6) {
                  goto LABEL_69;
                }
              }
              else
              {
                if (v10.u32[0] > 1uLL)
                {
                  if (v22 >= *(void *)&buf[8]) {
                    v22 %= *(void *)&buf[8];
                  }
                }
                else
                {
                  v22 &= *(void *)&buf[8] - 1;
                }
                if (v22 != v9) {
                  break;
                }
              }
            }
          }
        }
        else
        {
          unint64_t v9 = 0;
        }
        CFTypeID v14 = operator new(0x20uLL);
        *CFTypeID v14 = 0;
        v14[1] = v6;
        *((_DWORD *)v14 + 4) = *(_DWORD *)(v3 + 252);
        v14[3] = v3;
        float v23 = (float)(unint64_t)(*((void *)&v36 + 1) + 1);
        if (!v7 || (float)(*(float *)&v37 * (float)v7) < v23)
        {
          BOOL v24 = (v7 & (v7 - 1)) != 0;
          if (v7 < 3) {
            BOOL v24 = 1;
          }
          unint64_t v25 = v24 | (2 * v7);
          unint64_t v26 = vcvtps_u32_f32(v23 / *(float *)&v37);
          if (v25 <= v26) {
            size_t v19 = v26;
          }
          else {
            size_t v19 = v25;
          }
          goto LABEL_54;
        }
      }
      uint64_t v27 = *(void *)buf;
      long long v28 = *(void **)(*(void *)buf + 8 * v9);
      if (v28)
      {
        *CFTypeID v14 = *v28;
      }
      else
      {
        *CFTypeID v14 = v36;
        *(void *)&long long v36 = v14;
        *(void *)(v27 + 8 * v9) = &v36;
        if (!*v14) {
          goto LABEL_68;
        }
        unint64_t v29 = *(void *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v29 >= v7) {
            v29 %= v7;
          }
        }
        else
        {
          v29 &= v7 - 1;
        }
        long long v28 = (void *)(*(void *)buf + 8 * v29);
      }
      void *v28 = v14;
LABEL_68:
      ++*((void *)&v36 + 1);
LABEL_69:
      v3 += 408;
    }
    for (k = (void *)v36; k; k = (void *)*k)
      (*(void (**)(uint64_t, void))(*(void *)a1 + 400))(a1, k[3]);
    long long v38 = (void **)&v32;
    sub_1002244D8(&v38);
    sub_100F56BB8((uint64_t)buf);
  }
  else
  {
    long long v31 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I Media session is not activated. Not sending audio ready event.", buf, 2u);
    }
  }
}

void sub_1010ABA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100F56BB8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1010ABA58(uint64_t a1)
{
}

void sub_1010ABA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10012A394(&v15, (const void **)a2);
    sub_101328F44((CFUUIDRef *)&v15, (uint64_t)__p);
    if (v17 >= 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315138;
    size_t v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Sending audio ready event to IMS clients of call %s", buf, 0xCu);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    sub_10012577C(&v15);
  }
  if (*(unsigned char *)(a1 + 648))
  {
    int v6 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), *(unsigned int *)(a2 + 252));
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 136) + 440))(*(void *)(a1 + 136), a2))
    {
      __p[0] = 0;
      __p[1] = 0;
      sub_1010ABE04(__p, a1, v7);
      uint8x8_t v8 = __p[0];
      unint64_t v9 = *(NSObject **)(a1 + 48);
      if (__p[0])
      {
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Sending audio ready event on Emergency IMS client", buf, 2u);
        }
        *(_DWORD *)std::string buf = 8;
        (*(void (**)(void *, uint8_t *))(*(void *)v8 + 56))(v8, buf);
      }
      else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Sending audio ready event failed: Emergency IMS client not found", buf, 2u);
      }
      if (__p[1]) {
        sub_10004D2C8((std::__shared_weak_count *)__p[1]);
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    sub_1010A9800(__p, a1, *(unsigned int *)(a2 + 252));
    uint64_t v11 = __p[0];
    uint64_t v12 = *v6;
    unint64_t v13 = *v6;
    if (__p[0])
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        if (v11[48]) {
          CFTypeID v14 = "Emergency";
        }
        else {
          CFTypeID v14 = "normal";
        }
        *(_DWORD *)std::string buf = 136315138;
        size_t v19 = (void *)v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Sending audio ready event on %s IMS client", buf, 0xCu);
      }
      *(_DWORD *)std::string buf = 8;
      (*(void (**)(unsigned char *, uint8_t *))(*(void *)v11 + 56))(v11, buf);
    }
    else if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Sending audio ready event failed: normal IMS client not found", buf, 2u);
    }
    if (__p[1]) {
      sub_10004D2C8((std::__shared_weak_count *)__p[1]);
    }
  }
  else
  {
    uint8x8_t v10 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Media session is not activated. Not sending audio ready event.", (uint8_t *)__p, 2u);
    }
  }
}

void sub_1010ABDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010ABE04(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, *(Registry **)(a2 + 56));
  int v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    uint8x8_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v19 = v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, &v19);
  if (v11)
  {
    uint64_t v13 = v11[3];
    uint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  uint64_t v12 = 0;
  char v14 = 1;
LABEL_9:
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(buf, v13);
  uint64_t v15 = *(void *)buf;
  *(_OWORD *)a1 = *(_OWORD *)buf;
  memset(buf, 0, 16);
  if ((v14 & 1) == 0)
  {
    uint64_t v17 = v15;
    sub_10004D2C8(v12);
    uint64_t v15 = v17;
  }
  if (!v15)
  {
    BOOL v16 = *(NSObject **)(a2 + 48);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "getEmergencyIMSCallClient: emergency client is NULL!!", buf, 2u);
    }
  }
}

void sub_1010ABF78(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010ABF94(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1010ABF9C(uint64_t result)
{
  *(unsigned char *)(result + 648) = 0;
  return result;
}

uint64_t sub_1010ABFA4(uint64_t result)
{
  *(unsigned char *)(result + 640) = 0;
  return result;
}

void sub_1010ABFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_1010A0C00(&v10, a1, a3);
  uint64_t v5 = v10;
  if (v10)
  {
    int v6 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 376))(v5);
      uint8x8_t v8 = "false";
      if (v7) {
        uint64_t v9 = "true";
      }
      else {
        uint64_t v9 = "false";
      }
      if (a2) {
        uint8x8_t v8 = "true";
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v13 = v9;
      __int16 v14 = 2080;
      uint64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Switching IMS Voice registration from %s to %s", buf, 0x16u);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 432))(v5, a2);
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
}

void sub_1010AC114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AC130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_1010A0C00(&v10, a1, a3);
  uint64_t v5 = v10;
  if (v10)
  {
    int v6 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 384))(v5);
      uint8x8_t v8 = "false";
      if (v7) {
        uint64_t v9 = "true";
      }
      else {
        uint64_t v9 = "false";
      }
      if (a2) {
        uint8x8_t v8 = "true";
      }
      *(_DWORD *)std::string buf = 136315394;
      uint64_t v13 = v9;
      __int16 v14 = 2080;
      uint64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I IMSCallCommandDriver switching Wifi Mode from %s to %s", buf, 0x16u);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 408))(v5, a2);
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
}

void sub_1010AC298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AC2B4(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 824);
  if (v2 != a2)
  {
    uint64_t v5 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = "false";
      if (a2) {
        int v7 = "true";
      }
      else {
        int v7 = "false";
      }
      if (v2) {
        int v6 = "true";
      }
      int v13 = 136315394;
      __int16 v14 = v7;
      __int16 v15 = 2080;
      BOOL v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Airplane mode changed from %s to %s", (uint8_t *)&v13, 0x16u);
    }
    uint8x8_t v8 = *(void **)(a1 + 624);
    if (v8 != (void *)(a1 + 632))
    {
      do
      {
        uint64_t v9 = v8[7];
        if (v9) {
          (*(void (**)(uint64_t, void))(*(void *)v9 + 416))(v9, *(unsigned __int8 *)(a1 + 824));
        }
        uint64_t v10 = (void *)v8[1];
        if (v10)
        {
          do
          {
            uint64_t v11 = v10;
            uint64_t v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            uint64_t v11 = (void *)v8[2];
            BOOL v12 = *v11 == (void)v8;
            uint8x8_t v8 = v11;
          }
          while (!v12);
        }
        uint8x8_t v8 = v11;
      }
      while (v11 != (void *)(a1 + 632));
    }
  }
}

void sub_1010AC414(uint64_t a1, uint64_t a2)
{
  if ((operator==() & 1) == 0)
  {
    uint64_t v4 = *(void **)(a1 + 856);
    if (v4 != (void *)(a1 + 864))
    {
      uint64_t v5 = (uint64_t *)(a2 + 8);
      while (1)
      {
        uint64_t v6 = *(void *)((char *)v4 + 28);
        uint64_t v20 = v6;
        uint64_t v7 = *v5;
        if (!*v5) {
          goto LABEL_16;
        }
        uint64_t v8 = a2 + 8;
        do
        {
          int v9 = *(_DWORD *)(v7 + 28);
          BOOL v10 = v9 < (int)v6;
          if (v9 >= (int)v6) {
            uint64_t v11 = (uint64_t *)v7;
          }
          else {
            uint64_t v11 = (uint64_t *)(v7 + 8);
          }
          if (!v10) {
            uint64_t v8 = v7;
          }
          uint64_t v7 = *v11;
        }
        while (*v11);
        if ((uint64_t *)v8 == v5 || *(_DWORD *)(v8 + 28) > (int)v6) {
          goto LABEL_16;
        }
        BOOL v12 = sub_10012EF5C(a2, (int *)&v20);
        if (*(_DWORD *)v12 != HIDWORD(v20)) {
          break;
        }
LABEL_22:
        uint64_t v17 = (void *)v4[1];
        if (v17)
        {
          do
          {
            unint64_t v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            unint64_t v18 = (void *)v4[2];
            BOOL v19 = *v18 == (void)v4;
            uint64_t v4 = v18;
          }
          while (!v19);
        }
        uint64_t v4 = v18;
        if (v18 == (void *)(a1 + 864)) {
          return;
        }
      }
      uint64_t v6 = v20;
LABEL_16:
      int v13 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), v6);
      uint64_t v14 = HIDWORD(v20);
      __int16 v15 = *v13;
      if (os_log_type_enabled(*v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = asString();
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Registration status changed to %s", buf, 0xCu);
      }
      *(_OWORD *)std::string buf = 0uLL;
      (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 56))(buf, a1, v6);
      if (*(void *)buf) {
        (*(void (**)(void, uint64_t))(**(void **)buf + 424))(*(void *)buf, v14);
      }
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
      goto LABEL_22;
    }
  }
}

void sub_1010AC654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010AC674(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I VoLTE E911EmergencyMode Exited!", v4, 2u);
  }
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 136) + 360))(*(void *)(a1 + 136), 0);
}

void sub_1010AC71C(void **a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void *))(*a1[15] + 16))(a1[15]);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Reset fBasebandCallId..", (uint8_t *)&v5, 2u);
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  ((void (*)(uint64_t *__return_ptr, void **, uint64_t))(*a1)[7])(&v5, a1, a2);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 480))(v5);
  }
  if (v6) {
    sub_10004D2C8(v6);
  }
}

void sub_1010AC828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AC840(uint64_t a1, uint64_t a2)
{
}

void sub_1010AC848(uint64_t a1)
{
  uint64_t v1 = 0;
  int v2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 56))(&v1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 400))(v1);
  }
  if (v2) {
    sub_10004D2C8(v2);
  }
}

void sub_1010AC8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AC8F0(uint64_t a1)
{
}

void sub_1010AC900(uint64_t a1, NSObject **a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Bootstraping IMSCallCommandDriver", (uint8_t *)&buf, 2u);
  }
  uint64_t v5 = *a2;
  dispatch_group_t group = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v5);
  }
  v6.var0.fObj = (dispatch_object_s *)&group;
  CallCommandDriver::bootstrap((CallCommandDriver *)(a1 + 8), v6);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v7, *(Registry **)(a1 + 56));
  int v9 = ServiceMap;
  if (v10 < 0)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      uint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long buf = v10;
  uint64_t v14 = sub_10004D37C(&v9[1].__m_.__sig, (unint64_t *)&buf);
  if (v14)
  {
    uint64_t v16 = v14[3];
    __int16 v15 = (std::__shared_weak_count *)v14[4];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v9);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v15);
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  std::mutex::unlock(v9);
  __int16 v15 = 0;
LABEL_16:
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 160);
  *(void *)(a1 + 152) = v16;
  *(void *)(a1 + 160) = v15;
  if (v17) {
    sub_10004D2C8(v17);
  }
  sub_100058DB0(__p, "/cc/props/ims_client_state");
  unint64_t v18 = (long long *)operator new(0x28uLL);
  *(void *)unint64_t v18 = off_101A86E30;
  *((void *)v18 + 1) = a1 + 680;
  *((void *)v18 + 2) = a1;
  *((void *)v18 + 3) = sub_1010A11CC;
  *((void *)v18 + 4) = 0;
  p_long long buf = v18;
  ctu::RestModule::observeProperty();
  sub_10003F600(&buf);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/vowifi_provisioning_state");
  *(void *)&long long buf = off_101A86EB0;
  *((void *)&buf + 1) = a1 + 704;
  uint64_t v35 = a1;
  p_long long buf = &buf;
  ctu::RestModule::observeProperty();
  sub_10003F600(&buf);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  sub_1010AD23C(a1 + 728);
  sub_1005FE9F4(a1 + 760);
  sub_100058DB0(__p, "/cc/props/airplane_mode");
  BOOL v19 = (long long *)operator new(0x28uLL);
  *(void *)BOOL v19 = off_101A86FB0;
  *((void *)v19 + 1) = a1 + 824;
  *((void *)v19 + 2) = a1;
  *((void *)v19 + 3) = sub_1010AC2B4;
  *((void *)v19 + 4) = 0;
  p_long long buf = v19;
  ctu::RestModule::observeProperty();
  sub_10003F600(&buf);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  sub_10035B5E0(a1 + 832);
  sub_100058DB0(__p, "/cc/props/registration_status");
  uint64_t v20 = (long long *)operator new(0x28uLL);
  *(void *)uint64_t v20 = off_101A87030;
  *((void *)v20 + 1) = a1 + 856;
  *((void *)v20 + 2) = a1;
  *((void *)v20 + 3) = sub_1010AC414;
  *((void *)v20 + 4) = 0;
  p_long long buf = v20;
  ctu::RestModule::observeProperty();
  sub_10003F600(&buf);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/events/e911_state_exit_completed");
  unint64_t v21 = (long long *)operator new(0x20uLL);
  *(void *)unint64_t v21 = off_101A870B0;
  *((void *)v21 + 1) = a1;
  *((void *)v21 + 2) = sub_1010AC674;
  *((void *)v21 + 3) = 0;
  p_long long buf = v21;
  ctu::RestModule::observeEvent();
  sub_10003F600(&buf);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v31 = 0;
  aBlock = 0;
  __p[0] = _NSConcreteStackBlock;
  __p[1] = (void *)0x40000000;
  uint64_t v27 = sub_1010B0538;
  long long v28 = &unk_101A87120;
  uint64_t v29 = a1 + 16;
  uint64_t v30 = sub_1010A48F4;
  aBlock = _Block_copy(__p);
  unint64_t v22 = *(std::__shared_weak_count **)(a1 + 24);
  if (v22)
  {
    float v23 = std::__shared_weak_count::lock(v22);
    if (v23)
    {
      BOOL v24 = v23;
      sub_1001644F8(v33, &aBlock, *(dispatch_object_t *)(a1 + 32));
      sub_100164540(&buf, v33);
      atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010AD0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_group_t group, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27)
{
  if (a2)
  {
    sub_100163BC8(v28 - 96);
    if (a25) {
      (*(void (**)(uint64_t))(*(void *)a25 + 8))(a25);
    }
    std::__shared_weak_count::__release_weak(v27);
    sub_100161C9C((uint64_t)&a26);
    sub_10016578C((uint64_t)&a23);
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AD23C(uint64_t a1)
{
  sub_100058DB0(&__p, "/cc/props/wrm-enable-telephony");
  v4[0] = off_101A86F30;
  v4[1] = a1;
  v4[3] = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(v4);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_1010AD2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010AD31C(uint64_t result)
{
  int v2 = *(void **)(result + 624);
  char v3 = (void *)(result + 632);
  if (v2 != (void *)(result + 632))
  {
    uint64_t v4 = (void *)(result + 808);
    do
    {
      uint64_t result = PersonalityIDToSimSlot();
      uint64_t v5 = *v4;
      if (*v4)
      {
        group_session v6 = v4;
        do
        {
          int v7 = *(_DWORD *)(v5 + 28);
          BOOL v8 = v7 < (int)result;
          if (v7 >= (int)result) {
            int v9 = (uint64_t *)v5;
          }
          else {
            int v9 = (uint64_t *)(v5 + 8);
          }
          if (!v8) {
            group_session v6 = (void *)v5;
          }
          uint64_t v5 = *v9;
        }
        while (*v9);
        if (v6 != v4 && (int)result >= *((_DWORD *)v6 + 7))
        {
          unint64_t v1 = v1 & 0xFFFFFFFF00000000 | *((unsigned int *)v6 + 10);
          uint64_t result = (*(uint64_t (**)(void, void, unint64_t))(*(void *)v2[7] + 440))(v2[7], v6[4], v1);
        }
      }
      uint64_t v10 = (void *)v2[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v2[2];
          BOOL v12 = *v11 == (void)v2;
          int v2 = v11;
        }
        while (!v12);
      }
      int v2 = v11;
    }
    while (v11 != v3);
  }
  return result;
}

void sub_1010AD424(uint64_t a1, NSObject **a2)
{
}

void sub_1010AD42C(uint64_t a1, NSObject **a2)
{
  char v3 = (CallCommandDriver *)(a1 + 8);
  uint64_t v4 = *a2;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(v4);
  }
  v5.var0.fObj = (dispatch_object_s *)&group;
  CallCommandDriver::shutdown(v3, v5);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  group_session v6 = (atomic_uint **)(a1 + 656);
  for (uint64_t i = *(void *)(a1 + 664); (atomic_uint **)i != v6; uint64_t i = *(void *)(i + 8))
    sub_10016111C((uint64_t *)(i + 16));
  sub_100160A84(v6);
}

void sub_1010AD4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AD4EC(uint64_t a1, NSObject **a2)
{
}

void sub_1010AD4F4(uint64_t a1, const void **a2, uint64_t a3)
{
  long long v31 = 0uLL;
  uint64_t v32 = 0;
  group_session v6 = sub_10012A394(&v30, a2);
  sub_101328F44((CFUUIDRef *)v6, (uint64_t)&v31);
  sub_10012577C(&v30);
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  memset(v18, 0, sizeof(v18));
  sub_10057F630((uint64_t)v18);
  if (sub_1010A0378(a1, (uint64_t)&v31, (uint64_t)v18))
  {
    int v7 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), HIDWORD(v19));
    long long __p = 0;
    uint64_t v16 = 0;
    (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)a1 + 56))(&__p, a1, HIDWORD(v19));
    BOOL v8 = __p;
    if (__p)
    {
      if (SHIBYTE(v32) < 0)
      {
        sub_10004FC84(v12, (void *)v31, *((unint64_t *)&v31 + 1));
      }
      else
      {
        *(_OWORD *)BOOL v12 = v31;
        uint64_t v13 = v32;
      }
      (*(void (**)(void *, void **, uint64_t))(*(void *)v8 + 264))(v8, v12, a3);
      if (SHIBYTE(v13) < 0) {
        operator delete(v12[0]);
      }
    }
    else
    {
      uint64_t v11 = *v7;
      if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::setTTYModeForCall: No Model found!", buf, 2u);
      }
    }
    if (v16) {
      sub_10004D2C8(v16);
    }
  }
  else
  {
    int v9 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      sub_10012A394(&v14, a2);
      printUuid();
      if (v17 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v34 = p_p;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "No IMS call found with uuid: %s! Cannot upgrade to TTY.", buf, 0xCu);
      if (v17 < 0) {
        operator delete(__p);
      }
      sub_10012577C(&v14);
    }
  }
  sub_1002243E8((uint64_t)v18);
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
}

void sub_1010AD7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, char a20)
{
  if (a18) {
    sub_10004D2C8(a18);
  }
  sub_1002243E8((uint64_t)&a20);
  if (*(char *)(v20 - 81) < 0) {
    operator delete(*(void **)(v20 - 104));
  }
  _Unwind_Resume(a1);
}

void sub_1010AD82C(uint64_t a1, const void **a2, uint64_t a3)
{
}

void sub_1010AD834(uint64_t a1@<X0>, void *a2@<X8>)
{
  PersonalityIdFromSlotIdEx();
  sub_1010A0C00(a2, a1, (uint64_t)&__p);
  if (v5 < 0) {
    operator delete(__p);
  }
}

void sub_1010AD88C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    if (*(unsigned __int8 *)(v3 + 49) >= 2u)
    {
      group_session v6 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Ignoring the personality as it has a type other than kSim and KCloud!", (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v60 = 0;
      if (*(char *)(v3 + 47) < 0)
      {
        sub_10004FC84(__p, *(void **)(v3 + 24), *(void *)(v3 + 32));
        uint64_t v3 = *a2;
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)(v3 + 24);
        uint64_t v60 = *(void *)(v3 + 40);
      }
      uint64_t v7 = *(unsigned int *)(v3 + 52);
      uint64_t v57 = 0;
      long long v58 = 0;
      sub_1010A0C00(&v57, a1, (uint64_t)__p);
      uint64_t v8 = v57;
      int v9 = *(NSObject **)(a1 + 48);
      BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (v8)
      {
        if (v10)
        {
          uint64_t v11 = (void *)HIBYTE(v60);
          if (v60 < 0) {
            uint64_t v11 = __p[1];
          }
          BOOL v12 = __p;
          if (v60 < 0) {
            BOOL v12 = (void **)__p[0];
          }
          if (v11) {
            uint64_t v13 = (const char *)v12;
          }
          else {
            uint64_t v13 = "<invalid>";
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v13;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Updating personality info for %s", (uint8_t *)&buf, 0xCu);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 512))(v8, a2);
        sub_1010A0740(a1, (uint64_t)__p);
      }
      else
      {
        if (v10)
        {
          uint64_t v14 = (void *)HIBYTE(v60);
          if (v60 < 0) {
            uint64_t v14 = __p[1];
          }
          __int16 v15 = __p;
          if (v60 < 0) {
            __int16 v15 = (void **)__p[0];
          }
          if (v14) {
            uint64_t v16 = (const char *)v15;
          }
          else {
            uint64_t v16 = "<invalid>";
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v16;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Creating a new IMS call model for %s", (uint8_t *)&buf, 0xCu);
        }
        uint64_t v18 = *(void *)(a1 + 136);
        char v17 = *(std::__shared_weak_count **)(a1 + 144);
        long long v19 = (std::__shared_weak_count *)operator new(0x30uLL);
        uint64_t v20 = v19;
        v19->__shared_owners_ = 0;
        v19->__shared_weak_owners_ = 0;
        v19->__vftable = (std::__shared_weak_count_vtbl *)off_101A873E0;
        long long v21 = &v19[1].__vftable;
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          v19[1].__vftable = (std::__shared_weak_count_vtbl *)off_101A87430;
          v19[1].__shared_owners_ = v18;
          v19[1].__shared_weak_owners_ = (uint64_t)v17;
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v17);
        }
        else
        {
          v19[1].__vftable = (std::__shared_weak_count_vtbl *)off_101A87430;
          v19[1].__shared_owners_ = v18;
          v19[1].__shared_weak_owners_ = 0;
        }
        long long v22 = *(std::__shared_weak_count **)(a1 + 24);
        if (!v22 || (uint64_t v23 = *(void *)(a1 + 16), (v24 = std::__shared_weak_count::lock(v22)) == 0)) {
          sub_100088B9C();
        }
        long long v25 = v24;
        long long v26 = (std::__shared_weak_count *)operator new(0x30uLL);
        v26->__shared_owners_ = 0;
        v26->__vftable = (std::__shared_weak_count_vtbl *)off_101A875C8;
        v26->__shared_weak_owners_ = 0;
        v26[1].__vftable = (std::__shared_weak_count_vtbl *)off_101A87618;
        v26[1].__shared_owners_ = v23;
        v26[1].__shared_weak_owners_ = (uint64_t)v25;
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v25);
        uint64_t v55 = 0;
        long long v56 = 0;
        uint64_t v27 = *(void *)(a1 + 784);
        long long v53 = v21;
        long long v54 = v20;
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v51 = v26 + 1;
        unsigned __int8 v52 = v26;
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        long long v28 = *(NSObject **)(a1 + 32);
        dispatch_object_t object = v28;
        if (v28) {
          dispatch_retain(v28);
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, void **, std::__shared_weak_count **, dispatch_object_t *))(*(void *)v27 + 72))(&v55, v27, a2, &v53, &v51, &object);
        if (object) {
          dispatch_release(object);
        }
        if (v52) {
          sub_10004D2C8(v52);
        }
        if (v54) {
          sub_10004D2C8(v54);
        }
        uint64_t v29 = *(NSObject **)(a1 + 48);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = (void *)HIBYTE(v60);
          if (v60 < 0) {
            uint64_t v30 = __p[1];
          }
          long long v31 = __p;
          if (v60 < 0) {
            long long v31 = (void **)__p[0];
          }
          if (v30) {
            uint64_t v32 = (const char *)v31;
          }
          else {
            uint64_t v32 = "<invalid>";
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v32;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I Adding a new IMS call model for %s", (uint8_t *)&buf, 0xCu);
        }
        uint64_t v33 = *(uint64_t **)(a1 + 632);
        uint64_t v34 = (uint64_t **)(a1 + 632);
        uint64_t v35 = (uint64_t **)(a1 + 632);
        if (!v33) {
          goto LABEL_61;
        }
        uint64_t v34 = (uint64_t **)(a1 + 632);
        while (1)
        {
          while (1)
          {
            uint64_t v35 = (uint64_t **)v33;
            long long v36 = v33 + 4;
            if ((sub_100046FE8(__p, (void **)v33 + 4) & 0x80) == 0) {
              break;
            }
            uint64_t v33 = *v35;
            uint64_t v34 = v35;
            if (!*v35) {
              goto LABEL_61;
            }
          }
          if ((sub_100046FE8(v36, __p) & 0x80) == 0) {
            break;
          }
          uint64_t v34 = v35 + 1;
          uint64_t v33 = v35[1];
          if (!v33) {
            goto LABEL_61;
          }
        }
        if (!*v34)
        {
LABEL_61:
          uint64_t v62 = 0;
          uint64_t v37 = (uint64_t *)operator new(0x48uLL);
          *(void *)&long long buf = v37;
          *((void *)&buf + 1) = a1 + 632;
          long long v38 = v37 + 4;
          if (SHIBYTE(v60) < 0)
          {
            sub_10004FC84(v38, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            *(_OWORD *)long long v38 = *(_OWORD *)__p;
            v37[6] = v60;
          }
          long long v39 = v56;
          v37[7] = v55;
          v37[8] = (uint64_t)v39;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          LOBYTE(v62) = 1;
          uint64_t *v37 = 0;
          v37[1] = 0;
          v37[2] = (uint64_t)v35;
          *uint64_t v34 = v37;
          uint64_t v40 = **(void **)(a1 + 624);
          if (v40)
          {
            *(void *)(a1 + 624) = v40;
            uint64_t v37 = *v34;
          }
          sub_100046C90(*(uint64_t **)(a1 + 632), v37);
          ++*(void *)(a1 + 640);
          *(void *)&long long buf = 0;
          sub_1001FEBC4((uint64_t)&buf);
        }
        uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v55 + 256))(v55);
        long long v42 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#I Initiaizing model..", (uint8_t *)&buf, 2u);
        }
        uint64_t v43 = *(void *)(a1 + 808);
        if (v43)
        {
          uint64_t v44 = a1 + 808;
          do
          {
            int v45 = *(_DWORD *)(v43 + 28);
            BOOL v46 = v45 < (int)v41;
            if (v45 >= (int)v41) {
              long long v47 = (uint64_t *)v43;
            }
            else {
              long long v47 = (uint64_t *)(v43 + 8);
            }
            if (!v46) {
              uint64_t v44 = v43;
            }
            uint64_t v43 = *v47;
          }
          while (*v47);
          if (v44 != a1 + 808 && (int)v41 >= *(_DWORD *)(v44 + 28)) {
            (*(void (**)(uint64_t, void, void))(*(void *)v55 + 440))(v55, *(void *)(v44 + 32), *(unsigned int *)(v44 + 40));
          }
        }
        (*(void (**)(uint64_t, void))(*(void *)v55 + 416))(v55, *(unsigned __int8 *)(a1 + 824));
        uint64_t v48 = *(void *)(a1 + 864);
        if (v48)
        {
          do
          {
            if (*(_DWORD *)(v48 + 28) >= (int)v41) {
              long long v49 = (uint64_t *)v48;
            }
            else {
              long long v49 = (uint64_t *)(v48 + 8);
            }
            uint64_t v48 = *v49;
          }
          while (*v49);
        }
        (*(void (**)(void))(*(void *)v55 + 424))();
        (*(void (**)(long long *__return_ptr))(*(void *)v55 + 248))(&buf);
        sub_1010A0740(a1, (uint64_t)&buf);
        if (SHIBYTE(v62) < 0) {
          operator delete((void *)buf);
        }
        if (v56) {
          sub_10004D2C8(v56);
        }
        sub_10004D2C8(v26);
        sub_10004D2C8(v20);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 488))(a1, v7);
      if (v58) {
        sub_10004D2C8(v58);
      }
      if (SHIBYTE(v60) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    char v5 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "IMSCallCommandDriver::handlePersonalityAdded: Invalid PersonalityInfo!", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_1010AE0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_1001FEBC4((uint64_t)&a26);
  if (a16) {
    sub_10004D2C8(a16);
  }
  sub_10004D2C8(v32);
  sub_10004D2C8(v31);
  if (a18) {
    sub_10004D2C8(a18);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1010AE164(uint64_t a1, uint64_t *a2)
{
}

void sub_1010AE16C(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = 0;
  long long v24 = 0;
  sub_1010A0C00(&v23, a1, a2);
  if (v23)
  {
    uint64_t v4 = *(void **)(a1 + 632);
    if (v4)
    {
      uint64_t v5 = a1 + 632;
      do
      {
        char v6 = sub_100046FE8(v4 + 4, (void **)a2);
        if (v6 >= 0) {
          uint64_t v7 = v4;
        }
        else {
          uint64_t v7 = v4 + 1;
        }
        if (v6 >= 0) {
          uint64_t v5 = (uint64_t)v4;
        }
        uint64_t v4 = (void *)*v7;
      }
      while (*v7);
      if (v5 != a1 + 632 && (sub_100046FE8((void *)a2, (void **)(v5 + 32)) & 0x80) == 0)
      {
        uint64_t v8 = *(void **)(v5 + 8);
        if (v8)
        {
          do
          {
            int v9 = v8;
            uint64_t v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          __int16 v15 = (void *)v5;
          do
          {
            int v9 = (void *)v15[2];
            BOOL v16 = *v9 == (void)v15;
            __int16 v15 = v9;
          }
          while (!v16);
        }
        if (*(void *)(a1 + 624) == v5) {
          *(void *)(a1 + 624) = v9;
        }
        --*(void *)(a1 + 640);
        sub_10005EE6C(*(uint64_t **)(a1 + 632), (uint64_t *)v5);
        sub_1001FEC1C(v5 + 32);
        operator delete((void *)v5);
      }
    }
    char v17 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
      BOOL v19 = (v18 & 0x80u) != 0;
      if ((v18 & 0x80u) != 0) {
        uint64_t v18 = *(void *)(a2 + 8);
      }
      if (v19) {
        uint64_t v20 = *(const char **)a2;
      }
      else {
        uint64_t v20 = (const char *)a2;
      }
      if (v18) {
        long long v21 = v20;
      }
      else {
        long long v21 = "<invalid>";
      }
      uint64_t v22 = *(void *)(a1 + 640);
      *(_DWORD *)long long buf = 136315394;
      long long v26 = v21;
      __int16 v27 = 2048;
      uint64_t v28 = v22;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Removed IMS call model for personality ID: %s Current model count: %lu.", buf, 0x16u);
    }
  }
  else
  {
    BOOL v10 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      BOOL v12 = (v11 & 0x80u) != 0;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      if (v12) {
        uint64_t v13 = *(const char **)a2;
      }
      else {
        uint64_t v13 = (const char *)a2;
      }
      if (v11) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = "<invalid>";
      }
      *(_DWORD *)long long buf = 136315138;
      long long v26 = v14;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "IIMSCallCommandDriver::handlePersonalityGone: No Model found for PID: %s", buf, 0xCu);
    }
  }
  if (v24) {
    sub_10004D2C8(v24);
  }
}

void sub_1010AE3AC(uint64_t a1, uint64_t a2)
{
}

void sub_1010AE3B4(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 56))(&v3);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 368))(v3);
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = a2 + 1;
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
}

void sub_1010AE460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AE478(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_1010AE480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  char v6 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 56))(&v5);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 528))(v5, a2, a3);
  }
  if (v6) {
    sub_10004D2C8(v6);
  }
}

void sub_1010AE524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AE53C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1010AE544(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 56))(&v5);
  if (v5) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 520))(v5, a2);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v6) {
    sub_10004D2C8(v6);
  }
  return v3;
}

void sub_1010AE5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010AE608(uint64_t a1, uint64_t a2)
{
  return sub_1010AE544(a1 - 8, a2);
}

uint64_t sub_1010AE610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 480))(a1, a2, a4, a5);
}

uint64_t sub_1010AE644(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 8) + 480))();
}

uint64_t sub_1010AE67C()
{
  return 1;
}

uint64_t sub_1010AE684()
{
  return 1;
}

uint64_t sub_1010AE69C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 272);
  sub_100047F64(&v3);
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  if (*(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1010AE758(uint64_t a1)
{
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1010AE7DC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 64) = v6;
  if (*(char *)(a2 + 135) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 112), *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = v8;
  }
  if (*(char *)(a2 + 159) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 136), *(void **)(a2 + 136), *(void *)(a2 + 144));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v9;
  }
  if (*(char *)(a2 + 183) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 160), *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = v10;
  }
  uint64_t v11 = (unsigned char *)(a1 + 184);
  if (*(char *)(a2 + 207) < 0)
  {
    sub_10004FC84(v11, *(void **)(a2 + 184), *(void *)(a2 + 192));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 184);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(_OWORD *)uint64_t v11 = v12;
  }
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  sub_1000593FC(a1 + 216, (long long *)(a2 + 216));
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  return a1;
}

void sub_1010AE978(_Unwind_Exception *exception_object)
{
  if (v1[183] < 0) {
    operator delete(*v6);
  }
  if (v1[159] < 0) {
    operator delete(*v5);
  }
  if (v1[135] < 0) {
    operator delete(*v4);
  }
  if (v1[63] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010AEA04(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  return a1;
}

uint64_t sub_1010AEA68(uint64_t a1)
{
  if (*(char *)(a1 + 583) < 0) {
    operator delete(*(void **)(a1 + 560));
  }
  if (*(char *)(a1 + 559) < 0) {
    operator delete(*(void **)(a1 + 536));
  }
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  uint64_t v3 = (void **)(a1 + 480);
  sub_100047F64(&v3);
  uint64_t v3 = (void **)(a1 + 456);
  sub_100047F64(&v3);
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*(void **)(a1 + 384));
  }
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  return sub_1010AE69C(a1);
}

uint64_t sub_1010AEB48(uint64_t a1)
{
  int v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  if (*(char *)(a1 + 711) < 0) {
    operator delete(*(void **)(a1 + 688));
  }
  if (*(char *)(a1 + 687) < 0) {
    operator delete(*(void **)(a1 + 664));
  }
  if (*(char *)(a1 + 663) < 0) {
    operator delete(*(void **)(a1 + 640));
  }
  if (*(char *)(a1 + 639) < 0) {
    operator delete(*(void **)(a1 + 616));
  }
  sub_1010AEA68(a1 + 24);
  sub_1009A3934(a1 + 8);
  return a1;
}

void sub_1010AEBD4()
{
}

uint64_t sub_1010AEBE8(uint64_t a1)
{
  return *(void *)(a1 + 8) + 48;
}

void sub_1010AEBF4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  long long v6 = *(NSObject **)(*(uint64_t (**)(void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315138;
    uint64_t v12 = asString();
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Received Carrier Bundle setup event. bundleChangeType: %s", (uint8_t *)&v11, 0xCu);
  }
  int v7 = *a3;
  if (v7) {
    BOOL v8 = v7 == 5;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8 || v7 == 255)
  {
    long long v9 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = asString();
      int v11 = 136315138;
      uint64_t v12 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Ignoring %s", (uint8_t *)&v11, 0xCu);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 488))(a1, a2);
  }
}

uint64_t sub_1010AED70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1010AED80(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1010AED9C(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void *sub_1010AEDAC(void *a1)
{
  *a1 = off_101A86DA0;
  uint64_t v2 = (std::__shared_weak_count *)a1[54];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_1002243E8((uint64_t)(a1 + 2));
  return a1;
}

void sub_1010AEE00(void *a1)
{
  *a1 = off_101A86DA0;
  uint64_t v2 = (std::__shared_weak_count *)a1[54];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_1002243E8((uint64_t)(a1 + 2));

  operator delete();
}

void *sub_1010AEE74(void *a1)
{
  uint64_t v2 = operator new(0x1B8uLL);
  uint64_t v3 = a1[1];
  void *v2 = off_101A86DA0;
  v2[1] = v3;
  sub_100245B5C((uint64_t)(v2 + 2), (uint64_t)(a1 + 2));
  uint64_t v4 = a1[54];
  v2[53] = a1[53];
  v2[54] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  return v2;
}

void sub_1010AEEE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010AEEF8(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  *a2 = off_101A86DA0;
  a2[1] = v4;
  uint64_t result = sub_100245B5C((uint64_t)(a2 + 2), (uint64_t)(a1 + 2));
  uint64_t v6 = a1[54];
  a2[53] = a1[53];
  a2[54] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

const void **sub_1010AEF60(uint64_t a1)
{
  return sub_1010AF540(a1 + 8);
}

void sub_1010AEF68(void *a1)
{
  sub_1010AF540((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1010AEFA4(uint64_t a1, int *a2, uint64_t a3)
{
  int v4 = *a2;
  *(void *)&v27.var0 = *(void *)a3;
  *(_OWORD *)v27.var2.__r_.__value_.var0.var0.__data_ = *(_OWORD *)(a3 + 8);
  *((void *)&v27.var2.__r_.__value_.var0.var1 + 2) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)&v27.var2.__r_.var0 = *(_OWORD *)(a3 + 32);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  uint64_t v5 = *(void *)(a3 + 48);
  uint64_t v6 = *(void *)(a3 + 56);
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  uint64_t v28 = v5;
  uint64_t v29 = v6;
  long long v7 = *(_OWORD *)(a3 + 64);
  uint64_t v31 = *(void *)(a3 + 80);
  *(_OWORD *)uint64_t v30 = v7;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  long long v8 = *(_OWORD *)(a3 + 88);
  uint64_t v33 = *(void *)(a3 + 104);
  *(_OWORD *)uint64_t v32 = v8;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  long long v9 = *(_OWORD *)(a3 + 112);
  char v35 = *(unsigned char *)(a3 + 128);
  long long v34 = v9;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 432);
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = std::__shared_weak_count::lock(v10);
    if (v12)
    {
      uint64_t v13 = v12;
      if (!*(void *)(a1 + 424))
      {
LABEL_43:
        sub_10004D2C8(v13);
        goto LABEL_44;
      }
      v36[0] = 0;
      v36[1] = 0;
      uint64_t v37 = 0;
      if (v4 == 2)
      {
        HIBYTE(v37) = 8;
        uint64_t v15 = 0x696669646F4DLL;
      }
      else
      {
        if (v4 != 1)
        {
          HIBYTE(v37) = 7;
          if (v4)
          {
            LODWORD(v36[0]) = 1852534357;
            int v14 = 1853321070;
          }
          else
          {
            LODWORD(v36[0]) = 1869376577;
            int v14 = 1684371311;
          }
          *(_DWORD *)((char *)v36 + 3) = v14;
          goto LABEL_13;
        }
        HIBYTE(v37) = 8;
        uint64_t v15 = 0x7463656A6552;
      }
      v36[0] = (void *)(v15 & 0xFFFFFFFFFFFFLL | 0x6465000000000000);
LABEL_13:
      BOOL v16 = *(NSObject **)(v11 + 48);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v36;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I IMSCallCommandDriver::performSimCallControlAndDial - Result - %s", buf, 0xCu);
      }
      if (*(unsigned char *)(v11 + 602))
      {
        *(unsigned char *)(v11 + 602) = 0;
        if (v4 == 1)
        {
          char v17 = *(NSObject **)(v11 + 48);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Call control result is rejected so ending the call", buf, 2u);
          }
          (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v11 + 136) + 72))(*(void *)(v11 + 136), a1 + 16, 1, 1);
        }
        else
        {
          uint64_t v69 = 0;
          long long v67 = 0u;
          long long v68 = 0u;
          long long v65 = 0u;
          long long v66 = 0u;
          long long v63 = 0u;
          long long v64 = 0u;
          long long v61 = 0u;
          long long v62 = 0u;
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          *(_OWORD *)long long __p = 0u;
          *(_OWORD *)long long buf = 0u;
          sub_100245B5C((uint64_t)buf, a1 + 16);
          if (v4 == 2)
          {
            uint64_t v20 = *(NSObject **)(v11 + 48);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v23 = *(void *)(a1 + 48);
              uint64_t v21 = a1 + 48;
              uint64_t v22 = v23;
              int v24 = *(char *)(v21 + 23);
              CSIPhoneNumber::getBaseNumber((uint64_t *)v38, &v27);
              uint64_t v25 = v24 >= 0 ? v21 : v22;
              long long v26 = v39 >= 0 ? v38 : *(uint8_t **)v38;
              *(_DWORD *)uint64_t v40 = 136315394;
              uint64_t v41 = v25;
              __int16 v42 = 2080;
              uint64_t v43 = v26;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I IMSCallCommandDriver::performSimCallControlAndDial - Modified Destination Number from %s to %s", v40, 0x16u);
              if (SHIBYTE(v39) < 0) {
                operator delete(*(void **)v38);
              }
            }
            CSIPhoneNumber::getBaseNumber((uint64_t *)v38, &v27);
            if (SBYTE7(v47) < 0) {
              operator delete(__p[0]);
            }
            *(_OWORD *)long long __p = *(_OWORD *)v38;
            *(void *)&long long v47 = v39;
            LODWORD(v48) = CSIPhoneNumber::getTypeOfNumber(&v27);
          }
          sub_100245B5C((uint64_t)v38, (uint64_t)buf);
          sub_1010A1EF4(v11, (uint64_t)v38, 0);
          sub_1002243E8((uint64_t)v38);
          sub_1002243E8((uint64_t)buf);
        }
      }
      else
      {
        uint64_t v18 = *(NSObject **)(v11 + 48);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          sub_10012A394((const void **)v40, (const void **)(a1 + 16));
          printUuid();
          if ((SBYTE7(v45) & 0x80u) == 0) {
            BOOL v19 = buf;
          }
          else {
            BOOL v19 = *(uint8_t **)buf;
          }
          *(_DWORD *)long long v38 = 136315138;
          *(void *)&v38[4] = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I Call %s has been ended at the request of user, ignoring the sim control result.", v38, 0xCu);
          if (SBYTE7(v45) < 0) {
            operator delete(*(void **)buf);
          }
          sub_10012577C((const void **)v40);
        }
      }
      if (SHIBYTE(v37) < 0) {
        operator delete(v36[0]);
      }
      goto LABEL_43;
    }
  }
LABEL_44:
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[0]);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(*(void **)&v27.var2.__r_.var0);
  }
  if (*((char *)&v27.var2.__r_.__value_.var0.var1 + 23) < 0) {
    operator delete(v27.var2.__r_.__value_.var0.var1.__data_);
  }
}

void sub_1010AF454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_1002243E8((uint64_t)&STACK[0x260]);
  if (a43 < 0) {
    operator delete(__p);
  }
  sub_10004D2C8(v43);
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010AF4F4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010AF534()
{
}

const void **sub_1010AF540(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 424);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  return sub_1002243E8(a1 + 8);
}

void sub_1010AF584()
{
}

__n128 sub_1010AF598(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A86E30;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010AF5EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A86E30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010AF624(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  int v4 = v3 + 1;
  uint64_t v5 = v3[1];
  long long v9 = (char **)*v3;
  uint64_t v10 = (char *)v5;
  if (v3[2])
  {
    *(void *)(v5 + 16) = &v10;
    *uint64_t v3 = v4;
    void *v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    long long v9 = &v10;
  }
  sub_100256368((uint64_t)v3, a2);
  uint64_t v6 = (void (*)(void *, char ***))a1[3];
  uint64_t v7 = a1[4];
  long long v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(void (**)(void *, char ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_10005CD2C((uint64_t)&v9, v10);
}

void sub_1010AF6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t sub_1010AF6FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010AF73C()
{
}

void sub_1010AF74C()
{
}

__n128 sub_1010AF760(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A86EB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1010AF7AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A86EB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010AF7DC(uint64_t a1, xpc_object_t *a2)
{
  void (***v16)(uint64_t *__return_ptr, void, uint64_t);
  std::__shared_weak_count *v17;
  char v18;
  uint64_t v19;
  void **v20;
  os_log_t *v21;
  os_log_t *v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  BOOL v26;
  const char *v27;
  BOOL v28;
  const char *v29;
  NSObject *v30;
  const char *v31;
  NSObject *v32;
  uint64_t v33;
  BOOL v34;
  const char *v35;
  const char *v36;
  os_log_t v37;
  NSObject *v38;
  const char *v39;
  uint32_t v40;
  os_log_t v41;
  uint64_t v42;
  BOOL v43;
  const char *v44;
  const char *v45;
  uint64_t *v46;
  NSObject *v47;
  uint64_t v48;
  BOOL v49;
  const char *v50;
  uint64_t v51;
  const char *p_p;
  const char *v53;
  const char *v54;
  void **v55;
  void *v56;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint8_t buf[4];
  const char *v61;
  __int16 v62;
  const char *v63;
  long long __p;
  uint64_t v65;

  uint64_t v3 = *(void **)(a1 + 8);
  int v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  long long v55 = (void **)*v3;
  long long v56 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v56;
    *uint64_t v3 = v4;
    void *v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    long long v55 = &v56;
  }
  sub_100A5892C((uint64_t)v3, a2, "PersonalityID", "State");
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(uint64_t **)(v6 + 704);
  if (v7 != (uint64_t *)(v6 + 712))
  {
    long long v8 = (uint64_t *)&byte_10144BF80[128];
    do
    {
      long long v58 = 0;
      long long v59 = 0;
      ServiceMap = (std::mutex *)Registry::getServiceMap(v8, *(Registry **)(v6 + 56));
      uint64_t v10 = ServiceMap;
      if (v11 < 0)
      {
        uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v13 = 5381;
        do
        {
          uint64_t v11 = v13;
          unsigned int v14 = *v12++;
          uint64_t v13 = (33 * v13) ^ v14;
        }
        while (v14);
      }
      std::mutex::lock(ServiceMap);
      *(void *)&long long __p = v11;
      uint64_t v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)&__p);
      if (v15)
      {
        BOOL v16 = (void (***)(uint64_t *__return_ptr, void, uint64_t))v15[3];
        char v17 = (std::__shared_weak_count *)v15[4];
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v10);
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v17);
          uint64_t v18 = 0;
          goto LABEL_14;
        }
      }
      else
      {
        BOOL v16 = 0;
      }
      std::mutex::unlock(v10);
      char v17 = 0;
      uint64_t v18 = 1;
LABEL_14:
      (**v16)(&v58, v16, (uint64_t)(v7 + 4));
      if ((v18 & 1) == 0) {
        sub_10004D2C8(v17);
      }
      if (v58)
      {
        BOOL v19 = SlotIdFromPersonalityIdEx();
        if (subscriber::isValidSimSlot())
        {
          if (v19 == 1)
          {
            long long __p = 0uLL;
            long long v65 = 0;
            PersonalityIdFromSlotIdEx();
            if (!sub_10001D294((unsigned __int8 *)v7 + 32, (unsigned __int8 *)&__p))
            {
              long long v47 = *(NSObject **)(v6 + 48);
              if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
              {
                long long v48 = *((unsigned __int8 *)v7 + 55);
                long long v49 = (v48 & 0x80u) != 0;
                if ((v48 & 0x80u) != 0) {
                  long long v48 = v7[5];
                }
                if (v49) {
                  long long v50 = (const char *)v7[4];
                }
                else {
                  long long v50 = (const char *)(v7 + 4);
                }
                long long v51 = HIBYTE(v65);
                if (v65 < 0) {
                  long long v51 = *((void *)&__p + 1);
                }
                p_p = (const char *)&__p;
                if (v65 < 0) {
                  p_p = (const char *)__p;
                }
                if (v48) {
                  long long v53 = v50;
                }
                else {
                  long long v53 = "<invalid>";
                }
                if (v51) {
                  long long v54 = p_p;
                }
                else {
                  long long v54 = "<invalid>";
                }
                *(_DWORD *)long long buf = 136315394;
                long long v61 = v53;
                long long v62 = 2080;
                long long v63 = v54;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#I Skip updating call capabilities here. The personality ID: %s is not for Thumper service: %s.", buf, 0x16u);
              }
              if (SHIBYTE(v65) < 0) {
                operator delete((void *)__p);
              }
              goto LABEL_60;
            }
            if (SHIBYTE(v65) < 0) {
              operator delete((void *)__p);
            }
          }
          uint64_t v20 = sub_100046F68((uint64_t)&v55, (void **)v7 + 4);
          uint64_t v21 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 120) + 16))(*(void *)(v6 + 120), v19);
          uint64_t v22 = v21;
          if (&v56 == (void **)v20)
          {
            uint64_t v41 = *v21;
            if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v42 = *((unsigned __int8 *)v7 + 55);
              uint64_t v43 = (v42 & 0x80u) != 0;
              if ((v42 & 0x80u) != 0) {
                __int16 v42 = v7[5];
              }
              if (v43) {
                uint64_t v44 = (const char *)v7[4];
              }
              else {
                uint64_t v44 = (const char *)(v7 + 4);
              }
              uint64_t v28 = v42 == 0;
              long long v45 = "<invalid>";
              if (!v28) {
                long long v45 = v44;
              }
              LODWORD(__p) = 136315138;
              *(void *)((char *)&__p + 4) = v45;
              long long v38 = v41;
              uint64_t v39 = "#I New voice over Wifi provisioning added, update call capabilities for PID: %s.";
              uint64_t v40 = 12;
LABEL_58:
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v39, (uint8_t *)&__p, v40);
            }
          }
          else
          {
            if (*((_DWORD *)v20 + 14) == *((_DWORD *)v7 + 14)
              && *((unsigned __int8 *)v20 + 60) == *((unsigned __int8 *)v7 + 60)
              && (sub_1005A0BB8((unsigned __int8 *)v20 + 64, (unsigned __int8 *)v7 + 64) & 1) != 0)
            {
              uint64_t v23 = *v22;
              if (os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(__p) = 0;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I Voice over Wifi provisioning did NOT change, ignoring.", (uint8_t *)&__p, 2u);
              }
              goto LABEL_60;
            }
            uint64_t v37 = *v22;
            if (os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p) = 0;
              long long v38 = v37;
              uint64_t v39 = "#I Voice over Wifi provisioning changed, update call capabilities";
              uint64_t v40 = 2;
              goto LABEL_58;
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 488))(v6, v19);
          goto LABEL_60;
        }
        uint64_t v32 = *(NSObject **)(v6 + 48);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          uint64_t v33 = *((unsigned __int8 *)v7 + 55);
          long long v34 = (v33 & 0x80u) != 0;
          if ((v33 & 0x80u) != 0) {
            uint64_t v33 = v7[5];
          }
          if (v34) {
            char v35 = (const char *)v7[4];
          }
          else {
            char v35 = (const char *)(v7 + 4);
          }
          uint64_t v28 = v33 == 0;
          long long v36 = "<invalid>";
          if (!v28) {
            long long v36 = v35;
          }
          LODWORD(__p) = 136315138;
          *(void *)((char *)&__p + 4) = v36;
          uint64_t v30 = v32;
          uint64_t v31 = "Sim slot found for PersonalityID :%s is not valid!";
LABEL_46:
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&__p, 0xCu);
        }
      }
      else
      {
        int v24 = *(NSObject **)(v6 + 48);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = *((unsigned __int8 *)v7 + 55);
          long long v26 = (v25 & 0x80u) != 0;
          if ((v25 & 0x80u) != 0) {
            uint64_t v25 = v7[5];
          }
          if (v26) {
            CSIPhoneNumber v27 = (const char *)v7[4];
          }
          else {
            CSIPhoneNumber v27 = (const char *)(v7 + 4);
          }
          uint64_t v28 = v25 == 0;
          uint64_t v29 = "<invalid>";
          if (!v28) {
            uint64_t v29 = v27;
          }
          LODWORD(__p) = 136315138;
          *(void *)((char *)&__p + 4) = v29;
          uint64_t v30 = v24;
          uint64_t v31 = "PersonalityInfo not found for PID:%s.";
          goto LABEL_46;
        }
      }
LABEL_60:
      if (v59) {
        sub_10004D2C8(v59);
      }
      BOOL v46 = (uint64_t *)v7[1];
      if (v46)
      {
        do
        {
          long long v8 = v46;
          BOOL v46 = (uint64_t *)*v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          long long v8 = (uint64_t *)v7[2];
          uint64_t v28 = *v8 == (void)v7;
          uint64_t v7 = v8;
        }
        while (!v28);
      }
      uint64_t v7 = v8;
    }
    while (v8 != (uint64_t *)(v6 + 712));
  }
  sub_1007035FC((uint64_t)&v55, v56);
}

void sub_1010AFD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t sub_1010AFDE8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010AFE28()
{
}

void sub_1010AFE38()
{
}

void *sub_1010AFE4C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A86F30;
  result[1] = v3;
  return result;
}

uint64_t sub_1010AFE94(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A86F30;
  a2[1] = v2;
  return result;
}

void sub_1010AFEC0(uint64_t a1, void **a2)
{
}

uint64_t sub_1010AFEC8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010AFF08()
{
}

void sub_1010AFF14(BOOL **a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  sub_100058DB0(__p, "");
  LODWORD(v13[0]) = 0;
  if (SHIBYTE(v12) < 0)
  {
    sub_10004FC84(&v13[1], __p[0], (unint64_t)__p[1]);
    LODWORD(v14) = 0;
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v13[1] = *(_OWORD *)__p;
    v13[3] = v12;
    LODWORD(v14) = 0;
  }
  sub_100992C80((uint64_t)v13, a2);
  int v4 = (int)v13[0];
  int v7 = (int)v13[0];
  if (SHIBYTE(v13[3]) < 0)
  {
    sub_10004FC84(&v8, v13[1], (unint64_t)v13[2]);
    int v4 = v7;
  }
  else
  {
    long long v8 = *(_OWORD *)&v13[1];
    long long v9 = v13[3];
  }
  int v10 = v14;
  BOOL v6 = v4 == 1 && v14 == 2;
  *uint64_t v3 = v6;
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)v8);
  }
  if (SHIBYTE(v13[3]) < 0) {
    operator delete(v13[1]);
  }
}

void sub_1010B002C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010B0060()
{
}

__n128 sub_1010B0074(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A86FB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010B00C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A86FB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1010B0100(void *a1, xpc *this, BOOL a3)
{
  int v4 = (unsigned char *)a1[1];
  int v5 = *v4;
  unsigned char *v4 = xpc::dyn_cast_or_default(this, 0, a3);
  BOOL v6 = (uint64_t (*)(void *, BOOL))a1[3];
  uint64_t v7 = a1[4];
  long long v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    BOOL v6 = *(uint64_t (**)(void *, BOOL))(*v8 + v6);
  }

  return v6(v8, v5 != 0);
}

uint64_t sub_1010B019C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B01DC()
{
}

void sub_1010B01EC()
{
}

__n128 sub_1010B0200(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A87030;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010B0254(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A87030;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010B028C(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  int v4 = v3 + 1;
  int v5 = (void *)v3[1];
  uint64_t v11 = (void **)*v3;
  uint64_t v12 = v5;
  uint64_t v13 = (void *)v3[2];
  if (v13)
  {
    _DWORD v5[2] = &v12;
    *uint64_t v3 = v4;
    void *v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    uint64_t v11 = &v12;
  }
  sub_100026EC0((uint64_t)v3, a2);
  BOOL v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  long long v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    BOOL v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  long long v9 = v11;
  v10[0] = v12;
  v10[1] = v13;
  if (v13)
  {
    v12[2] = v10;
    uint64_t v11 = &v12;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    long long v9 = v10;
  }
  v6(v8, &v9);
  sub_1000346F8((uint64_t)&v9, v10[0]);
  sub_1000346F8((uint64_t)&v11, v12);
}

void sub_1010B0388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_1010B03B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B03F4()
{
}

void sub_1010B0404()
{
}

__n128 sub_1010B0418(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A870B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1010B046C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A870B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1010B04A4(void *a1)
{
  unint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_1010B04EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B052C()
{
}

uint64_t sub_1010B0538(void *a1)
{
  unint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  uint64_t v3 = (void *)(a1[4] + (v2 >> 1) - 16);
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void *sub_1010B0584(void *a1)
{
  *a1 = off_101A87150;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1010B05D0(void *a1)
{
  *a1 = off_101A87150;
  unint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void sub_1010B063C(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::lock(v1);
  }
  operator new();
}

void sub_1010B06EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010B0704(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void sub_1010B0724()
{
}

void *sub_1010B0790(void *a1)
{
  *a1 = off_101A871A0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1010B07DC(void *a1)
{
  *a1 = off_101A871A0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void sub_1010B0848()
{
}

void sub_1010B08B8()
{
}

__n128 sub_1010B08CC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A871E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1010B0920(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A871E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010B0958(void *a1)
{
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v8 = 0u;
  *(_OWORD *)long long v9 = 0u;
  *(_OWORD *)BOOL v6 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  long long v5 = 0u;
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)((char *)&v5 + 8));
  LODWORD(v14) = 0;
  rest::read_rest_value();
  uint64_t v2 = (void (*)(void *, long long *))a1[2];
  uint64_t v3 = a1[3];
  int v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(void (**)(void *, long long *))(*v4 + v2);
  }
  v2(v4, &v5);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  if (SHIBYTE(v7[0]) < 0) {
    operator delete(v6[0]);
  }
}

void sub_1010B0A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010B0A94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B0AD4()
{
}

void sub_1010B0AE4()
{
}

__n128 sub_1010B0AF8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A87260;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1010B0B4C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A87260;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010B0B84(void *a1)
{
  uint64_t v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v8 = 0u;
  *(_OWORD *)long long v9 = 0u;
  *(_OWORD *)BOOL v6 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  long long v5 = 0u;
  CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)((char *)&v5 + 8));
  LODWORD(v14) = 0;
  rest::read_rest_value();
  uint64_t v2 = (void (*)(void *, long long *))a1[2];
  uint64_t v3 = a1[3];
  int v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(void (**)(void *, long long *))(*v4 + v2);
  }
  v2(v4, &v5);
  if (SBYTE7(v12) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  if (SHIBYTE(v7[0]) < 0) {
    operator delete(v6[0]);
  }
}

void sub_1010B0C74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010B0CC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B0D00()
{
}

void sub_1010B0D10()
{
}

__n128 sub_1010B0D24(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A872E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010B0D78(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A872E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010B0DB0(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  int v4 = v3 + 1;
  long long v5 = (void *)v3[1];
  long long v9 = (void **)*v3;
  long long v10 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v10;
    *uint64_t v3 = v4;
    void *v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    long long v9 = &v10;
  }
  sub_10008AAD8((uint64_t)v3, a2);
  BOOL v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  long long v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    BOOL v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_100087F94((uint64_t)&v9, v10);
}

void sub_1010B0E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_1010B0E88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B0EC8()
{
}

void sub_1010B0ED8()
{
}

__n128 sub_1010B0EEC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A87360;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010B0F40(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A87360;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1010B0F78(uint64_t *a1, xpc_object_t *a2)
{
  sub_1010B1040(a1[1], a2);
  uint64_t v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  long long v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_1010B0FF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B1034()
{
}

void sub_1010B1040(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2 && xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_array) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  sub_1000346F8(a1, *(void **)(a1 + 8));
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v11, object, 0);
    xpc_release(object[0]);
    xpc_object_t v7 = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      xpc_object_t v7 = xpc_null_create();
    }
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v3);
    }
    else {
      count = 0;
    }
    sub_100048BF4(object, &v7, count);
    xpc_release(v7);
    for (uint64_t i = v12; i != object[1] || v11 != object[0]; uint64_t i = ++v12)
    {
      uint64_t v8 = (uint64_t)i;
      xpc_object_t v9 = 0;
      xpc_object_t v7 = &v11;
      sub_10003FBDC((uint64_t)&v7, &v9);
      if (xpc_get_type(v9) == (xpc_type_t)&_xpc_type_dictionary)
      {
        uint64_t v8 = 0x200000002;
        xpc_object_t v6 = v9;
        xpc_object_t v7 = 0;
        if (v9) {
          xpc_retain(v9);
        }
        else {
          xpc_object_t v6 = xpc_null_create();
        }
        sub_1010B12CC((int *)&v7, &v6);
        xpc_release(v6);
        sub_1010B1480((uint64_t **)a1, (int *)&v7, (uint64_t)&v7);
      }
      xpc_release(v9);
    }
    xpc_release(v11);
    xpc_release(v11);
  }
  xpc_release(v3);
}

void sub_1010B123C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object, uint64_t a11, xpc_object_t a12, xpc_object_t a13, uint64_t a14, xpc_object_t a15)
{
  xpc_release(object);
  xpc_release(a15);
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void sub_1010B12CC(int *a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t v9 = v3;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v9 = v3;
  }
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v6 = &v9;
    xpc_object_t v7 = "first";
    sub_100048BAC((uint64_t)&v6, &object);
    xpc_type_t type = xpc_get_type(object);
    if (type == (xpc_type_t)&_xpc_type_string)
    {
      int v10 = *a1;
      ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v10, (int *)&object, v5);
      *a1 = v10;
    }
    else if (type == (xpc_type_t)&_xpc_type_BOOL {
           || type == (xpc_type_t)&_xpc_type_int64
    }
           || type == (xpc_type_t)&_xpc_type_uint64)
    {
      *a1 = xpc::dyn_cast_or_default((xpc *)&object, 0, (uint64_t)v5);
    }
    xpc_release(object);
    xpc_object_t v6 = &v9;
    xpc_object_t v7 = "second";
    sub_100048BAC((uint64_t)&v6, &object);
    read_rest_value();
    xpc_release(object);
    xpc_object_t v3 = v9;
  }
  xpc_release(v3);
}

void sub_1010B142C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13)
{
}

uint64_t **sub_1010B1480(uint64_t **a1, int *a2, uint64_t a3)
{
  xpc_object_t v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        long long v5 = *v8;
        xpc_object_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        xpc_object_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    int v10 = operator new(0x30uLL);
    v10[7] = *(_DWORD *)a3;
    *((void *)v10 + 4) = *(void *)(a3 + 4);
    v10[10] = *(_DWORD *)(a3 + 12);
    sub_100046C38(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1010B154C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A873E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010B156C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A873E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010B15C0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1010B15E8(void *a1)
{
  *a1 = off_101A87430;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1010B1634(void *a1)
{
  *a1 = off_101A87430;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

uint64_t sub_1010B16A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_1010B16D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_1010B1700(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

const void **sub_1010B1730(const void **result, const void **a2)
{
  uint64_t v2 = result[1];
  if (v2)
  {
    sub_10012A394(&v3, a2);
    (*(void (**)(const void *, const void **))(*(void *)v2 + 40))(v2, &v3);
    return sub_10012577C(&v3);
  }
  return result;
}

void sub_1010B1798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10012577C((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010B17AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t sub_1010B17DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

uint64_t sub_1010B180C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

uint64_t sub_1010B183C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 72))();
  }
  return result;
}

uint64_t sub_1010B186C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 88))();
  }
  return result;
}

uint64_t sub_1010B189C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 80))();
  }
  return result;
}

uint64_t sub_1010B18CC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  return result;
}

uint64_t sub_1010B18FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 104))();
  }
  return result;
}

uint64_t sub_1010B192C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 112))();
  }
  return result;
}

uint64_t sub_1010B195C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 120))();
  }
  return result;
}

uint64_t sub_1010B198C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 136))();
  }
  return result;
}

uint64_t sub_1010B19BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 144))();
  }
  return result;
}

uint64_t sub_1010B19EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 152))();
  }
  return result;
}

uint64_t sub_1010B1A1C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 160))();
  }
  return result;
}

uint64_t sub_1010B1A4C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 176))();
  }
  return result;
}

uint64_t sub_1010B1A7C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 184))();
  }
  return result;
}

uint64_t sub_1010B1AAC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 192))();
  }
  return result;
}

uint64_t sub_1010B1ADC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 216))();
  }
  return result;
}

uint64_t sub_1010B1B0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 200))();
  }
  return result;
}

const void **sub_1010B1B3C(const void **result, uint64_t a2, const void **a3, uint64_t a4)
{
  uint64_t v4 = result[1];
  if (v4)
  {
    sub_10012A394(&v7, a3);
    (*(void (**)(const void *, uint64_t, const void **, uint64_t))(*(void *)v4 + 168))(v4, a2, &v7, a4);
    return sub_10012577C(&v7);
  }
  return result;
}

void sub_1010B1BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10012577C((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010B1BD4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 232))();
  }
  return result;
}

void sub_1010B1C04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v2 + 256))(&v4);
    sub_100245F0C((void **)a2);
    *(_OWORD *)a2 = v4;
    *(void *)(a2 + 16) = v5;
    uint64_t v5 = 0;
    long long v4 = 0uLL;
    xpc_object_t v6 = (void **)&v4;
    sub_1002244D8(&v6);
  }
}

void sub_1010B1C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_1010B1CB4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 264))();
  }
  return result;
}

uint64_t sub_1010B1CEC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 272))();
  }
  return result;
}

void sub_1010B1D24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v2 + 280))(&v4);
    sub_100245F0C((void **)a2);
    *(_OWORD *)a2 = v4;
    *(void *)(a2 + 16) = v5;
    uint64_t v5 = 0;
    long long v4 = 0uLL;
    xpc_object_t v6 = (void **)&v4;
    sub_1002244D8(&v6);
  }
}

void sub_1010B1DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_1010B1DD4(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return 0;
  }
  sub_10012A394(&v7, a2);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, const void **, uint64_t))(*(void *)v3 + 288))(v3, &v7, a3);
  sub_10012577C(&v7);
  return v5;
}

void sub_1010B1E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10012577C((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_1010B1E70(const void **result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[1];
  if (v3)
  {
    sub_100245B5C((uint64_t)v5, a2);
    (*(void (**)(const void *, unsigned char *, uint64_t))(*(void *)v3 + 304))(v3, v5, a3);
    return sub_1002243E8((uint64_t)v5);
  }
  return result;
}

void sub_1010B1EF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002243E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010B1F04(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 312))();
  }
  return result;
}

uint64_t sub_1010B1F3C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 376))();
  }
  return result;
}

void *sub_1010B1F74@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (void *)(*(uint64_t (**)(void))(*(void *)v2 + 384))();
  }
  else {
    return sub_100058DB0(a2, "");
  }
}

uint64_t sub_1010B1FB8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 392))();
  }
  return result;
}

uint64_t sub_1010B1FF0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 400))();
  }
  return result;
}

uint64_t sub_1010B2028(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 408))();
  }
  return result;
}

uint64_t sub_1010B2060(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 416))();
  }
  return result;
}

uint64_t sub_1010B2098(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 424))();
  }
  return result;
}

uint64_t sub_1010B20D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 432))();
  }
  return result;
}

uint64_t sub_1010B2108(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 328))();
  }
  return result;
}

uint64_t sub_1010B2140@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 344))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t sub_1010B2180@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 352))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t sub_1010B21C0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 440))();
  }
  return result;
}

void sub_1010B21F8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A875C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010B2218(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A875C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010B226C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1010B2294(void *a1)
{
  *a1 = off_101A87618;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1010B22E0(void *a1)
{
  *a1 = off_101A87618;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

CallCommandDriver *sub_1010B234C(uint64_t a1, BOOL a2, const CallInfo *a3)
{
  uint64_t result = *(CallCommandDriver **)(a1 + 8);
  if (result) {
    return (CallCommandDriver *)CallCommandDriver::shouldMTCallContinue(result, a2, a3);
  }
  return result;
}

uint64_t sub_1010B235C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 368))();
  }
  return result;
}

uint64_t sub_1010B2394(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 480))();
  }
  return result;
}

uint64_t sub_1010B23CC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 488))();
  }
  return result;
}

void sub_1010B2404(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1010B26EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, dispatch_object_t a17)
{
  if (a17) {
    (*((void (**)(dispatch_object_t))a17->isa + 1))(a17);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_10004D2C8(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_1010B2844(uint64_t a1)
{
  *(void *)a1 = off_101A87688;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 112);
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_1000346F8(a1 + 80, *(void **)(a1 + 88));
  long long v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    sub_10004D2C8(v5);
  }
  CDMARoamingInterface::~CDMARoamingInterface((CDMARoamingInterface *)a1);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_1010B28E0(uint64_t a1)
{
  sub_1010B2844(a1);

  operator delete();
}

void sub_1010B2918(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

BOOL sub_1010B2A18(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1010B42E0;
  v5[3] = &unk_101A878D0;
  v5[4] = a1 + 8;
  v5[5] = &v4;
  xpc_object_t v6 = v5;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8))
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    int v9 = sub_10005B590;
    int v10 = &unk_101A87910;
    xpc_object_t v11 = &v13;
    long long v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    int v9 = sub_10005A82C;
    int v10 = &unk_101A878F0;
    xpc_object_t v11 = &v13;
    long long v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

uint64_t sub_1010B2B48(uint64_t a1)
{
  char v17 = 0;
  (*(void (**)(const void **__return_ptr))(**(void **)(a1 + 104) + 40))(&v16);
  sub_10004EFE4(&v17, &v16);
  sub_1000577C4(&v16);
  if (v17) {
    uint64_t v2 = sub_100080778;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2)
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 120) + 296))(*(void *)(a1 + 120)))
    {
      uint64_t v3 = *(NSObject **)(a1 + 40);
      uint64_t v4 = 0;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v16) = 0;
        uint64_t v5 = "#N Voice roaming is disabled, and that overrides CDMA International Roaming";
LABEL_30:
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v16, 2u);
        uint64_t v4 = 0;
      }
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 88);
      if (!v6) {
        goto LABEL_28;
      }
      uint64_t v7 = a1 + 88;
      do
      {
        int v8 = *(_DWORD *)(v6 + 28);
        BOOL v9 = v8 < 1;
        if (v8 >= 1) {
          int v10 = (uint64_t *)v6;
        }
        else {
          int v10 = (uint64_t *)(v6 + 8);
        }
        if (!v9) {
          uint64_t v7 = v6;
        }
        uint64_t v6 = *v10;
      }
      while (*v10);
      if (v7 == a1 + 88 || *(int *)(v7 + 28) > 1)
      {
LABEL_28:
        uint64_t v3 = *(NSObject **)(a1 + 40);
        uint64_t v4 = 0;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v16) = 0;
          uint64_t v5 = "#N Could not find device type";
          goto LABEL_30;
        }
      }
      else
      {
        int v11 = *(_DWORD *)(v7 + 32);
        if (v11) {
          BOOL v12 = v11 == 3;
        }
        else {
          BOOL v12 = 1;
        }
        if (v12)
        {
          char v13 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v16) = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Device is CDMA based, CDMA International Roaming is allowed", (uint8_t *)&v16, 2u);
          }
          uint64_t v4 = 1;
        }
        else
        {
          uint64_t v3 = *(NSObject **)(a1 + 40);
          BOOL v15 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
          uint64_t v4 = 0;
          if (v15)
          {
            LOWORD(v16) = 0;
            uint64_t v5 = "#N Device is not CDMA based";
            goto LABEL_30;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v3 = *(NSObject **)(a1 + 40);
    uint64_t v4 = 0;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      uint64_t v5 = "#I CDMA International functionality is not present in the carrier bundle, assuming not allowed";
      goto LABEL_30;
    }
  }
  sub_100057D78(&v17);
  return v4;
}

void sub_1010B2D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1010B2DBC(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010B2FB0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1010B2FCC(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_1010B4498;
  void v5[3] = &unk_101A87930;
  v5[4] = a1 + 8;
  v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8))
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    BOOL v9 = sub_10005B590;
    int v10 = &unk_101A87910;
    int v11 = &v13;
    BOOL v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    BOOL v9 = sub_10005A82C;
    int v10 = &unk_101A878F0;
    int v11 = &v13;
    BOOL v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

uint64_t sub_1010B30FC(uint64_t a1)
{
  if (sub_1010B2B48(a1))
  {
    char v20 = 1;
    uint64_t v2 = sub_100365D74();
    sub_100058DB0(buf, "EURQMIC2KRegistrationController::fCDMAInternationalRoaming");
    BOOL v3 = sub_1002260B0(v2, (void **)buf, (BOOL *)&v20);
    BOOL v4 = v3;
    if (v22 < 0)
    {
      operator delete(*(void **)buf);
      if (v4) {
        goto LABEL_25;
      }
    }
    else if (v3)
    {
LABEL_25:
      if (v20) {
        return 1;
      }
      else {
        return 2;
      }
    }
    CFDictionaryRef theDict = 0;
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 104) + 40))(buf);
    sub_10004EFE4(&theDict, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    if (theDict) {
      uint64_t v7 = sub_100080778;
    }
    else {
      uint64_t v7 = 0;
    }
    if (v7)
    {
      CFDictionaryRef Value = (BOOL *)CFDictionaryGetValue(theDict, @"EnabledByDefault");
      BOOL v9 = Value;
      if (Value && (CFTypeID v10 = CFGetTypeID(Value), v10 == CFBooleanGetTypeID()))
      {
        buf[0] = 0;
        ctu::cf::assign((ctu::cf *)buf, v9, v11);
        BOOL v12 = buf[0] != 0;
      }
      else
      {
        BOOL v12 = 1;
      }
      char v20 = v12;
      char v13 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_24;
      }
      uint64_t v14 = "false";
      if (v12) {
        uint64_t v14 = "true";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v14;
      BOOL v15 = "#I CDMA Intl roaming enabled by default in Carrier Bundle: %s";
      BOOL v16 = v13;
      uint32_t v17 = 12;
    }
    else
    {
      uint64_t v18 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_24:
        sub_100057D78((const void **)&theDict);
        goto LABEL_25;
      }
      *(_WORD *)long long buf = 0;
      BOOL v15 = "#N Cannot retrieve CDMAInternationalRoamingEnabledByDefault from the carrier bundle";
      BOOL v16 = v18;
      uint32_t v17 = 2;
    }
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
    goto LABEL_24;
  }
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I The device is not a CDMA based one, not handling the request", buf, 2u);
  }
  return 3;
}

void sub_1010B337C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

BOOL sub_1010B33C0(uint64_t a1, char a2)
{
  char v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1010B44C0;
  void v7[3] = &unk_101A87950;
  void v7[4] = a1 + 8;
  void v7[5] = v5;
  uint64_t v8 = v7;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    char v15 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    CFBooleanRef v11 = sub_10005B590;
    BOOL v12 = &unk_101A87910;
    char v13 = &v15;
    uint64_t v14 = &v8;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    char v15 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    CFBooleanRef v11 = sub_10005A82C;
    BOOL v12 = &unk_101A878F0;
    char v13 = &v15;
    uint64_t v14 = &v8;
    dispatch_sync(v2, &block);
  }
  return v15 != 0;
}

void sub_1010B34FC(uint64_t a1, unsigned int a2)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 48));
  uint64_t v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v15 = v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, &v15);
  if (v10)
  {
    uint64_t v12 = v10[3];
    CFBooleanRef v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      if (!v12) {
        goto LABEL_7;
      }
LABEL_11:
      v16[0] = off_101A87A80;
      v16[1] = a1;
      v16[2] = a2;
      v16[3] = v16;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v12 + 104))(v12, 1, v16);
      sub_1000F25E0(v16);
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  CFBooleanRef v11 = 0;
  char v13 = 1;
  if (v12) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v14 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v15) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Could not get Max Data Rate Manager to change RAT selection", (uint8_t *)&v15, 2u);
  }
LABEL_12:
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
}

void sub_1010B36B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000F25E0((uint64_t *)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

void sub_1010B36E8(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = sub_1010B2B48(a1);
    BOOL v4 = "false";
    if (v3) {
      BOOL v4 = "true";
    }
    int v18 = 136315138;
    uint64_t v19 = (uint64_t)v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Is CDMA International Roaming Allowed?: %s", (uint8_t *)&v18, 0xCu);
    uint64_t v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_1010B30FC(a1);
    uint64_t v5 = asString();
    int v18 = 136315138;
    uint64_t v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Current CDMA International Roaming Status: %s", (uint8_t *)&v18, 0xCu);
  }
  uint64_t v6 = *(void *)(a1 + 88);
  if (!v6) {
    goto LABEL_20;
  }
  uint64_t v7 = a1 + 88;
  do
  {
    int v8 = *(_DWORD *)(v6 + 28);
    BOOL v9 = v8 < 1;
    if (v8 >= 1) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (!v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 == a1 + 88 || *(int *)(v7 + 28) > 1)
  {
LABEL_20:
    uint64_t v14 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v18) = 0;
    unint64_t v15 = "#N Could not find device type";
    BOOL v16 = v14;
    uint32_t v17 = 2;
  }
  else
  {
    CFBooleanRef v11 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v12 = *(int *)(v7 + 32);
    if (v12 > 3) {
      char v13 = "Device Type unknown";
    }
    else {
      char v13 = off_101A87B70[v12];
    }
    int v18 = 136315138;
    uint64_t v19 = (uint64_t)v13;
    unint64_t v15 = "#I Device type: %s";
    BOOL v16 = v11;
    uint32_t v17 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v18, v17);
}

void sub_1010B38E0(uint64_t a1, dispatch_object_t *a2)
{
  int v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010B3A0C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010B3A44(uint64_t a1)
{
}

uint64_t sub_1010B3A60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1010B3AA4(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1010B3AD0(ServiceManager::Service *this)
{
  *(void *)this = off_101A877E0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_1010B3B2C(ServiceManager::Service *this)
{
  *(void *)this = off_101A877E0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_1010B3B9C@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "CDMARoamingHandler");
}

unsigned char *sub_1010B3BAC@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  unsigned char *v2 = 2;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_1010B3BEC(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
    sub_1010B2918(v2, v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);

  sub_1010B2918(v4, 0);
}

uint64_t sub_1010B3C70()
{
  return 0;
}

uint64_t sub_1010B3C78()
{
  return 1;
}

uint64_t sub_1010B3C80()
{
  return 0;
}

void sub_1010B3C90(uint64_t a1, int a2, ServiceStage *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  ServiceStage::holdOffStage((uint64_t *)&group[1], this);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t *sub_1010B3DA4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Shutting down", buf, 2u);
  }
  ctu::RestModule::disconnect((ctu::RestModule *)(v2 + 64));
  sub_100088C88(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_1010B3E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_1010B3E44(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v28 = a1;
  uint64_t v29 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping", buf, 2u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v4, *(Registry **)(v2 + 48));
  uint64_t v6 = ServiceMap;
  if (v7 < 0)
  {
    int v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v7;
  CFBooleanRef v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
  if (v11)
  {
    uint64_t v13 = v11[3];
    uint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  uint64_t v12 = 0;
LABEL_11:
  unint64_t v15 = *(std::__shared_weak_count **)(v2 + 112);
  *(void *)(v2 + 104) = v13;
  *(void *)(v2 + 112) = v12;
  if (v15) {
    sub_10004D2C8(v15);
  }
  BOOL v16 = (std::mutex *)Registry::getServiceMap(v14, *(Registry **)(v2 + 48));
  uint32_t v17 = v16;
  if (v18 < 0)
  {
    uint64_t v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v20 = 5381;
    do
    {
      uint64_t v18 = v20;
      unsigned int v21 = *v19++;
      uint64_t v20 = (33 * v20) ^ v21;
    }
    while (v21);
  }
  std::mutex::lock(v16);
  *(void *)long long buf = v18;
  char v22 = sub_10004D37C(&v17[1].__m_.__sig, (unint64_t *)buf);
  if (v22)
  {
    uint64_t v24 = v22[3];
    uint64_t v23 = (std::__shared_weak_count *)v22[4];
    if (v23)
    {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v17);
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v23);
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  std::mutex::unlock(v17);
  uint64_t v23 = 0;
LABEL_21:
  uint64_t v25 = *(std::__shared_weak_count **)(v2 + 128);
  *(void *)(v2 + 120) = v24;
  *(void *)(v2 + 128) = v23;
  if (v25) {
    sub_10004D2C8(v25);
  }
  *(void *)long long buf = _NSConcreteStackBlock;
  uint64_t v35 = 0x40000000;
  long long v36 = sub_100159AC8;
  uint64_t v37 = &unk_1019A4BE8;
  uint64_t v38 = v2;
  sub_10017B514();
  Registry::createRestModuleOneTimeUseConnection(&v30, *(Registry **)(v2 + 48));
  ctu::RestModule::connect();
  if (v31) {
    sub_10004D2C8(v31);
  }
  sub_1008F26E0(v2 + 80);
  sub_100058DB0(&__p, "/cc/events/dump_state");
  long long v26 = operator new(0x20uLL);
  void *v26 = off_101A87860;
  v26[1] = v2;
  v26[2] = sub_1010B36E8;
  _OWORD v26[3] = 0;
  uint64_t v37 = v26;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (v33 < 0) {
    operator delete(__p);
  }
  sub_100088C88(&v29);
  return sub_100046B58((uint64_t *)&v28);
}

void sub_1010B413C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_100088C88(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

void sub_1010B41AC()
{
}

__n128 sub_1010B41C0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A87860;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1010B4214(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A87860;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1010B424C(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_1010B4294(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B42D4()
{
}

uint64_t sub_1010B42E0(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  uint64_t v2 = sub_1010B2B48(v1);
  uint64_t v3 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "false";
    if (v2) {
      uint64_t v4 = "true";
    }
    int v6 = 136315138;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Received query whether CDMA International Roaming is allowed or not, returning: %s", (uint8_t *)&v6, 0xCu);
  }
  return v2;
}

uint64_t *sub_1010B43A8(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  int v6 = v1;
  int v2 = sub_1010B30FC(*v1);
  uint64_t v3 = v1[4];
  int v7 = v2;
  if (!v3) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, int *))(*(void *)v3 + 48))(v3, &v7);
  sub_1010B4448((uint64_t *)&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_1010B442C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_1010B4448((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1010B4448(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_100B9E2B4((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

BOOL sub_1010B4498(uint64_t a1)
{
  return sub_1010B30FC(**(void **)(a1 + 40)) == 1;
}

uint64_t sub_1010B44C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  std::string::size_type v2 = *(void *)v1;
  unsigned __int8 v13 = **(unsigned char **)(v1 + 8);
  if ((sub_1010B2B48(v2) & 1) == 0)
  {
    uint64_t v9 = *(NSObject **)(v2 + 40);
    BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v10) {
      return result;
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I The device is not a CDMA based one, not handling the request", (uint8_t *)&__p, 2u);
    return 0;
  }
  uint64_t v3 = (uint64_t **)sub_100365D74();
  sub_100058DB0(&__p, "EURQMIC2KRegistrationController::fCDMAInternationalRoaming");
  int v4 = sub_1002264FC(v3, &__p, &v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = "true";
    if (v13) {
      int v7 = "true";
    }
    else {
      int v7 = "false";
    }
    if (!v4) {
      int v6 = "false";
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Received request to set CDMA International Roaming to: %s, returning: %s", (uint8_t *)&__p, 0x16u);
  }
  if (!v4) {
    return 0;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_100159D20;
  p_p = (std::string *)&unk_1019A4C08;
  std::string::size_type v16 = v2;
  int v8 = (capabilities::ct *)sub_100159B40((wis::MetricFactory *)0x80051);
  if (capabilities::ct::supportsSystemSelectionInternationalCDMARoaming(v8))
  {
    (*(void (**)(void, uint64_t, void))(**(void **)(v2 + 120) + 456))(*(void *)(v2 + 120), 1, v13);
  }
  else
  {
    sub_10000713C((capabilities::ct *)v2);
    if (v13)
    {
      uint64_t v12 = *(void *)(v2 + 120);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_101A87980;
      __p.__r_.__value_.__l.__size_ = v2;
      p_p = &__p;
      (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v12 + 96))(v12, 1, &__p);
      sub_100ED7DE4(&__p);
    }
  }
  return 1;
}

void sub_1010B4744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_1010B477C()
{
}

void *sub_1010B4790(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_101A87980;
  result[1] = v3;
  return result;
}

uint64_t sub_1010B47D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A87980;
  a2[1] = v2;
  return result;
}

void sub_1010B4804(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_1010B48FC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010B493C()
{
}

void sub_1010B4948(uint64_t **a1)
{
  uint64_t v5 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  int v3 = *((unsigned __int8 *)*a1 + 8);
  if ((v3 & 4) == 0 || (v3 & 8) == 0 || (*((unsigned char *)v1 + 9) & 0xC) != 0xC)
  {
    int v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I CDMA International Roaming has been enabled, now setting the RAT back to Automatic", buf, 2u);
      int v3 = *((unsigned __int8 *)v1 + 8);
    }
    *((unsigned char *)v1 + 8) = v3 | 0xC;
    sub_1010B34FC(v2, v3 | 0xC);
  }
  operator delete();
}

void sub_1010B4A10()
{
}

void sub_1010B4A40()
{
}

void *sub_1010B4A54(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_101A87A00;
  result[1] = v3;
  return result;
}

uint64_t sub_1010B4A9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A87A00;
  a2[1] = v2;
  return result;
}

void sub_1010B4AC8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_1010B4BC0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010B4C00()
{
}

void sub_1010B4C0C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (sub_1010B30FC(v2) != 2) {
    goto LABEL_26;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)(v2 + 48));
  uint64_t v5 = ServiceMap;
  if (v6 < 0)
  {
    int v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v6;
  BOOL v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)buf);
  if (v10)
  {
    uint64_t v12 = v10[3];
    CFBooleanRef v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
LABEL_10:
      int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 88))(v12, 1);
      if ((v13 & 1) == 0) {
        sub_10004D2C8(v11);
      }
      if (!v14)
      {
        std::string::size_type v16 = (unsigned __int8 *)(v1 + 1);
        int v20 = *((unsigned __int8 *)v1 + 8);
        if ((~v20 & 0xC) != 0 || (~*((unsigned __int8 *)v1 + 9) & 0xC) != 0)
        {
          unsigned __int8 v17 = v20 | 0xC;
          *std::string::size_type v16 = v20 | 0xC;
          uint64_t v18 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            uint64_t v19 = "#I CDMA International Roaming has been enabled, now adding back CDMA bits";
            goto LABEL_22;
          }
LABEL_23:
          sub_1010B34FC(v2, v17);
        }
LABEL_32:
        operator delete();
      }
      if (v14 == 1)
      {
        std::string::size_type v16 = (unsigned __int8 *)(v1 + 1);
        int v15 = *((unsigned __int8 *)v1 + 8);
        if ((~v15 & 0xC) == 0 && (~*((unsigned __int8 *)v1 + 9) & 0xC) == 0)
        {
          unsigned __int8 v17 = v15 & 0xF3;
          *std::string::size_type v16 = v15 & 0xF3;
          uint64_t v18 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            uint64_t v19 = "#I CDMA International Roaming is disabled, and the device is currently roaming, removing CDMA from mode pref";
LABEL_22:
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 2u);
            unsigned __int8 v17 = *v16;
            goto LABEL_23;
          }
          goto LABEL_23;
        }
        goto LABEL_32;
      }
      unsigned int v21 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I CDMA International Roaming is disabled, and the device is neither home nor roaming, doing nothing", buf, 2u);
      }
LABEL_26:
      char v22 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        ratSelectionAsStr((uint64_t *)buf, *((unsigned char *)v1 + 8));
        if (v25 >= 0) {
          uint64_t v23 = buf;
        }
        else {
          uint64_t v23 = *(uint8_t **)buf;
        }
        *(_DWORD *)long long v26 = 136446210;
        CSIPhoneNumber v27 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Not necessary to change RAT selection from %{public}s", v26, 0xCu);
        if (v25 < 0) {
          operator delete(*(void **)buf);
        }
      }
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  CFBooleanRef v11 = 0;
  char v13 = 1;
  goto LABEL_10;
}

void sub_1010B4F10()
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v0);
  }
  operator delete();
}

void sub_1010B4F64()
{
}

__n128 sub_1010B4F78(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A87A80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1010B4FC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A87A80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010B4FF4(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_1010B50F0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010B5130()
{
}

void sub_1010B513C(void **a1)
{
  uint64_t v8 = a1;
  char v1 = *a1;
  uint64_t v2 = (void *)**a1;
  if (*((unsigned char *)*a1 + 9) && *((unsigned char *)v1 + 8))
  {
    uint64_t v3 = v2[5];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Carrier and device are LTE capable, adding LTE", buf, 2u);
    }
    *((unsigned char *)v1 + 10) |= 0x10u;
  }
  uint64_t v9 = 0;
  RatSelectionType::RatSelectionType((RatSelectionType *)&v9);
  RatSelectionType::setSelection((RatSelectionType *)&v9, *((unsigned char *)v1 + 10));
  RatSelectionType::setPreferredSelection((RatSelectionType *)&v9, *((unsigned char *)v1 + 10));
  int v4 = (std::__shared_weak_count *)v2[2];
  if (v4)
  {
    uint64_t v5 = v2[1];
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      int v7 = v6;
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v6);
      xpc_object_t v13 = 0;
      sub_10014E9E0((RatSelectionType *)&v9, &v13);
      sub_100058DB0(&__p, "/cc/requests/rat_selection");
      xpc_object_t object = v13;
      xpc_object_t v13 = xpc_null_create();
      *(void *)long long buf = off_101A87AF0;
      uint64_t v15 = v5;
      std::string::size_type v16 = v7;
      unsigned __int8 v17 = buf;
      ctu::RestModule::sendRequest();
      sub_10003F600(buf);
      xpc_release(object);
      xpc_object_t object = 0;
      if (v12 < 0) {
        operator delete(__p);
      }
      xpc_release(v13);
      operator delete();
    }
  }
  sub_100088B9C();
}

void sub_1010B5304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t a19, char a20)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1010B53A4(void *a1)
{
  *a1 = off_101A87AF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1010B53F0(void *a1)
{
  *a1 = off_101A87AF0;
  char v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void *sub_1010B545C(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = off_101A87AF0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1010B54B8(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A87AF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1010B54F0(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1010B5500(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_1010B5540(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  int v4 = xpc::dyn_cast_or_default((xpc *)&object, 0, v3);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = *(void *)(a1 + 8);
      if (v8)
      {
        uint64_t v9 = *(NSObject **)(v8 + 40);
        if (v4)
        {
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I RAT selection change success", buf, 2u);
          }
        }
        else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)CFBooleanRef v11 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "RAT selection change failed", v11, 2u);
        }
      }
      sub_10004D2C8(v7);
    }
  }
  xpc_release(object);
}

void sub_1010B5640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t sub_1010B565C(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A87B50)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010B569C()
{
  return &off_101A87B50;
}

uint64_t *sub_1010B56A8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(NSObject **)(*(void *)v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Resetting International CDMA Roaming preference as network settings have been reset", buf, 2u);
  }
  BOOL v3 = (uint64_t **)sub_100365D74();
  sub_100058DB0(buf, "EURQMIC2KRegistrationController::fCDMAInternationalRoaming");
  sub_1003660FC(v3, (void **)buf);
  if (v8 < 0) {
    operator delete(*(void **)buf);
  }
  sub_100088C88(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_1010B5758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100088C88(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void *sub_1010B578C(void *a1, NSObject **a2, void *a3)
{
  uint64_t v5 = *a2;
  *a1 = off_101A87BA0;
  a1[1] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  uint64_t v6 = a3[1];
  a1[2] = *a3;
  a1[3] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  a1[4] = 0;
  a1[5] = 0;
  return a1;
}

void sub_1010B57F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    goto LABEL_8;
  }
  sub_100DEEAAC(&v14);
  long long v10 = v14;
  long long v14 = 0uLL;
  CFBooleanRef v11 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v10;
  if (!v11)
  {
    uint64_t v8 = v10;
    if (!(void)v10) {
      return;
    }
LABEL_8:
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a3 + 16);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    sub_100DEF150((uint64_t)v15, a4);
    sub_100DEEF44(v8, __p, (uint64_t)v15, a5);
  }
  sub_10004D2C8(v11);
  if (*((void *)&v14 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v14 + 1));
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    goto LABEL_8;
  }
}

void sub_1010B5910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_1010B594C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (v2) {
    sub_10004D2C8(v2);
  }
}

void *sub_1010B5964(void *a1)
{
  *a1 = off_101A87BA0;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }
  BOOL v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_10004D2C8(v3);
  }
  int v4 = a1[1];
  if (v4) {
    dispatch_release(v4);
  }
  return a1;
}

void sub_1010B59C8(void *a1)
{
  *a1 = off_101A87BA0;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }
  BOOL v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_10004D2C8(v3);
  }
  int v4 = a1[1];
  if (v4) {
    dispatch_release(v4);
  }

  operator delete();
}

void sub_1010B5A4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A87BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010B5A6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A87BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010B5AC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void *sub_1010B5AE8(void *a1, NSObject **a2, void *a3)
{
  int v4 = (std::__shared_weak_count *)a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_1010B578C(a1, a2, v6);
    sub_10004D2C8(v4);
  }
  else
  {
    sub_1010B578C(a1, a2, v6);
  }
  return a1;
}

void sub_1010B5B50(void *a1, void *a2, NSObject **a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *a3;
  a1[2] = *a3;
  if (v5) {
    dispatch_retain(v5);
  }
  operator new();
}

void sub_1010B5BE4()
{
}

void sub_1010B5C28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(void *)(a1 + 40))
  {
    BOOL v3 = *(std::__shared_weak_count **)(a1 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    if (v3) {
      sub_10004D2C8(v3);
    }
    uint64_t v4 = **(NSObject ***)(a1 + 24);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I AssertionWithTimeout: Assertion released", v5, 2u);
    }
  }
}

void sub_1010B5CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    *(void *)&long long v7 = a1;
    *((void *)&v7 + 1) = a2;
    if (*(_DWORD *)(v5 + 68) == 2)
    {
      sub_1010B5DEC((uint64_t *)&v7);
    }
    else
    {
      uint64_t v6 = operator new(0x20uLL);
      void *v6 = off_101A87C58;
      v6[1] = a1;
      *((_OWORD *)v6 + 1) = v7;
      v8[3] = v6;
      ctu::rest::AssertionHandle::setHandler_impl();
      sub_100060644(v8);
    }
  }
}

void sub_1010B5DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100060644((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1010B5DEC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (a1[1] >= 1)
  {
    *(_OWORD *)long long buf = 0uLL;
    Registry::getTimerService((uint64_t *)buf, *(Registry **)v2);
    uint64_t v3 = *(void *)buf;
    if (*(void *)buf)
    {
      sub_100058DB0(__p, "AssertionWithTimeout");
      uint64_t v4 = a1[1];
      uint64_t v5 = *(NSObject **)(v2 + 16);
      dispatch_object_t object = v5;
      if (v5)
      {
        dispatch_retain(v5);
        uint64_t v6 = a1[1];
      }
      else
      {
        uint64_t v6 = v4;
      }
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 0x40000000;
      v12[2] = sub_1010B6074;
      v12[3] = &unk_101A87C28;
      void v12[4] = v2;
      v12[5] = v6;
      aBlock = _Block_copy(v12);
      sub_100118A44(v3, (uint64_t)__p, 1, 1000000 * v4, &object, &aBlock);
      uint64_t v7 = v17;
      uint64_t v17 = 0;
      uint64_t v8 = *(void *)(v2 + 32);
      *(void *)(v2 + 32) = v7;
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        uint64_t v9 = v17;
        uint64_t v17 = 0;
        if (v9) {
          (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
        }
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (object) {
        dispatch_release(object);
      }
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (!*(void *)(v2 + 32))
  {
    long long v10 = **(NSObject ***)(v2 + 24);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[1];
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I AssertionWithTimeout: Timer was NOT scheduled for %lld secs", buf, 0xCu);
    }
  }
}

void sub_1010B600C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, dispatch_object_t object, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010B6074(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = **(NSObject ***)(v2 + 24);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 134217984;
    uint64_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I AssertionWithTimeout: expired after %lld secs", (uint8_t *)&v5, 0xCu);
  }
  sub_1010B5C28(v2);
}

void sub_1010B6130()
{
}

__n128 sub_1010B6144(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A87C58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1010B6198(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A87C58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010B61D0(uint64_t a1, unsigned char *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*a2) {
    sub_1010B5DEC((uint64_t *)(a1 + 16));
  }
  if (*(void *)(v3 + 80))
  {
    sub_1000607A8(v3 + 56, v2 != 0);
  }
}

uint64_t sub_1010B6230(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B6270()
{
}

void RoamingNetworkHandler::create()
{
}

void sub_1010B6368(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  if (v2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void RoamingNetworkHandler::RoamingNetworkHandler(uint64_t a1, void *a2, int a3, NSObject **a4)
{
  uint64_t v8 = (void *)(a1 + 8);
  uint64_t v9 = "roam.nw.?";
  if (a3 == 2) {
    uint64_t v9 = "roam.nw.2";
  }
  if (a3 == 1) {
    long long v10 = "roam.nw.1";
  }
  else {
    long long v10 = v9;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v19, kCtLoggingSystemName, v10);
  void *v8 = 0;
  v8[1] = 0;
  uint64_t v11 = *a4;
  *(void *)(a1 + 24) = *a4;
  if (v11) {
    dispatch_retain(v11);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v20, &v19);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v20);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v20);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v19);
  *(void *)a1 = off_101A87CD8;
  *(void *)(a1 + 48) = *a2;
  uint64_t v12 = a2[1];
  *(void *)(a1 + 56) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 64) = a3;
  uint64_t v13 = "RoamingHandler.?";
  if (a3 == 2) {
    uint64_t v13 = "RoamingHandler.2";
  }
  if (a3 == 1) {
    long long v14 = "RoamingHandler.1";
  }
  else {
    long long v14 = (char *)v13;
  }
  sub_100058DB0(&__p, v14);
  uint64_t v15 = *(NSObject **)(a1 + 24);
  char v16 = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  ctu::RestModule::RestModule();
  if (v16) {
    dispatch_release(v16);
  }
  if (v18 < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  RegisteredNetworkInfo::RegisteredNetworkInfo((RegisteredNetworkInfo *)(a1 + 112));
  *(void *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 919) = 0;
  *(_DWORD *)(a1 + 928) = 0;
  *(void *)(a1 + 952) = 0;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 936) = a1 + 944;
  *(_WORD *)(a1 + 960) = 0;
  *(unsigned char *)(a1 + 962) = 0;
  *(_DWORD *)(a1 + 964) = -1;
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 1000) = 0;
  *(void *)(a1 + 992) = 0;
  *(void *)(a1 + 968) = 0;
  *(_WORD *)(a1 + 976) = 0;
  sub_1010FE444((void *)(a1 + 1008));
}

void sub_1010B6628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19)
{
  char v25 = *(std::__shared_weak_count **)(v19 + 1032);
  if (v25) {
    sub_10004D2C8(v25);
  }
  long long v26 = *(std::__shared_weak_count **)(v19 + 1016);
  if (v26) {
    sub_10004D2C8(v26);
  }
  if (*(char *)(v19 + 1007) < 0) {
    operator delete(*(void **)(v19 + 984));
  }
  sub_1010B92A4(*v23);
  sub_10030A970(v22);
  CSIPhoneNumber v27 = *(std::__shared_weak_count **)(v19 + 96);
  if (v27) {
    sub_10004D2C8(v27);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v19 + 80);
  if (v28) {
    sub_10004D2C8(v28);
  }
  uint64_t v29 = *(std::__shared_weak_count **)(v19 + 56);
  if (v29) {
    sub_10004D2C8(v29);
  }
  ctu::OsLogLogger::~OsLogLogger(v21);
  sub_100087E88(v20);
  RoamingNetworkInterface::~RoamingNetworkInterface((RoamingNetworkInterface *)v19);
  _Unwind_Resume(a1);
}

void sub_1010B672C(uint64_t a1)
{
  *(void *)a1 = off_101A87CD8;
  int v2 = *(std::__shared_weak_count **)(a1 + 1080);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 1064);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 1048);
  if (v4) {
    sub_10004D2C8(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 1032);
  if (v5) {
    sub_10004D2C8(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 1016);
  if (v6) {
    sub_10004D2C8(v6);
  }
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*(void **)(a1 + 984));
  }
  sub_1010B92A4(*(void **)(a1 + 944));
  sub_10030A970(a1 + 104);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 96);
  if (v7) {
    sub_10004D2C8(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 80);
  if (v8) {
    sub_10004D2C8(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 56);
  if (v9) {
    sub_10004D2C8(v9);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));

  RoamingNetworkInterface::~RoamingNetworkInterface((RoamingNetworkInterface *)a1);
}

void sub_1010B6814(uint64_t a1)
{
  sub_1010B672C(a1);

  operator delete();
}

void sub_1010B684C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = v4;
  if (v6) {
    sub_10004D2C8(v6);
  }
  if (*(_DWORD *)(a1 + 64) == 1) {
    uint64_t v7 = "/cc/props/reg_net_info1";
  }
  else {
    uint64_t v7 = "/cc/props/reg_net_info2";
  }
  if (*(_DWORD *)(a1 + 64) == 1) {
    uint64_t v8 = "/cc/props/reg_rat_selection1";
  }
  else {
    uint64_t v8 = "/cc/props/reg_rat_selection2";
  }
  *(void *)(a1 + 104) = v7;
  *(void *)(a1 + 912) = v8;
  sub_100058DB0(__p, v7);
  uint64_t v9 = operator new(0x28uLL);
  void *v9 = off_101A87E98;
  v9[1] = a1 + 104;
  v9[2] = a1;
  v9[3] = sub_10006516C;
  v9[4] = 0;
  char v18 = v9;
  ctu::RestModule::observeProperty();
  long long v10 = (char **)(a1 + 912);
  sub_10003F600(v17);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, *v10);
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = off_101A87F18;
  v11[1] = v10;
  _OWORD v11[2] = a1;
  v11[3] = sub_1010B6AC8;
  v11[4] = 0;
  char v18 = v11;
  ctu::RestModule::observeProperty();
  uint64_t v12 = (capabilities::ct *)sub_10003F600(v17);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if ((capabilities::ct::supportsGemini(v12) & 1) == 0)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 0x40000000;
    void v17[2] = sub_1007CEF54;
    char v18 = &unk_101A0A200;
    uint64_t v19 = a1;
    sub_10017B514();
  }
  Registry::createRestModuleOneTimeUseConnection(&v13, *(Registry **)(a1 + 48));
  ctu::RestModule::connect();
  if (v14) {
    sub_10004D2C8(v14);
  }
}

void sub_1010B6A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010B6AC8(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 920);
  if (*(unsigned char *)(a1 + 920))
  {
    int v3 = *(unsigned __int8 *)(a1 + 921);
    int v4 = *(unsigned __int8 *)(a1 + 976);
    if (v4 != v2)
    {
      uint64_t v5 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        ratSelectionAsStr((uint64_t *)v15, v4);
        int v6 = v18;
        uint64_t v7 = *(uint8_t **)v15;
        ratSelectionAsStr((uint64_t *)__p, v2);
        uint64_t v8 = v15;
        if (v6 < 0) {
          uint64_t v8 = v7;
        }
        if (v14 >= 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446466;
        int v20 = v8;
        __int16 v21 = 2082;
        uint64_t v22 = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Changing RAT selection from %{public}s to %{public}s", buf, 0x16u);
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v18 < 0) {
          operator delete(*(void **)v15);
        }
      }
      *(unsigned char *)(a1 + 976) = v2;
    }
    int v10 = *(unsigned __int8 *)(a1 + 977);
    if (v10 != v3)
    {
      uint64_t v11 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v15 = 67109376;
        *(_DWORD *)&v15[4] = v10;
        __int16 v16 = 1024;
        int v17 = v3;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Internal RAT Selection in progress is changing from %d to %d", v15, 0xEu);
      }
      *(unsigned char *)(a1 + 977) = v3;
    }
    sub_100007B00(a1);
  }
  else
  {
    uint64_t v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I RAT selection is still unknown, cannot validate the state", v15, 2u);
    }
  }
}

void sub_1010B6CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010B6CD4(uint64_t a1)
{
  sub_1010B6D44(a1);
  sub_1010FE56C(*(void *)(a1 + 1008));
  sub_1010FEF08(*(void *)(a1 + 1024));
  sub_10022464C(*(void *)(a1 + 1040));
  int v2 = *(uint64_t (**)(void))(**(void **)(a1 + 1072) + 16);

  return v2();
}

const void **sub_1010B6D44(uint64_t a1)
{
  int v2 = (uint64_t **)(a1 + 944);
  sub_1010B92A4(*(void **)(a1 + 944));
  *(void *)(a1 + 936) = v2;
  *(void *)(a1 + 952) = 0;
  *(void *)(a1 + 944) = 0;
  CFDictionaryRef v48 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)(a1 + 48));
  uint64_t v5 = ServiceMap;
  if (v6 < 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  v40[0] = (void *)v6;
  int v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)v40);
  if (v10)
  {
    uint64_t v11 = v10[3];
    uint64_t v12 = (std::__shared_weak_count *)v10[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v13 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v12 = 0;
  char v13 = 1;
LABEL_9:
  (*(void (**)(void **__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v11 + 80))(v38, v11, *(unsigned int *)(a1 + 64), 1, @"CDMAInternationalRoaming", 0, 0);
  sub_10004EFE4(&v48, (CFTypeRef *)v38);
  sub_1000577C4((const void **)v38);
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  if (v48) {
    char v14 = sub_100080778;
  }
  else {
    char v14 = 0;
  }
  if (v14)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v48, @"OverrideNetworkMCC");
    CFDictionaryRef v16 = Value;
    if (Value)
    {
      CFTypeID v17 = CFGetTypeID(Value);
      if (v17 == CFDictionaryGetTypeID())
      {
        CFIndex Count = CFDictionaryGetCount(v16);
        keys = 0;
        BOOL v46 = 0;
        uint64_t v47 = 0;
        sub_10004EE3C(&keys, Count);
        values = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        sub_10004EE3C(&values, Count);
        CFDictionaryGetKeysAndValues(v16, (const void **)keys, (const void **)values);
        CFIndex v35 = Count;
        if (Count >= 1)
        {
          uint64_t v19 = 0;
          do
          {
            int v20 = keys[v19];
            if (v20)
            {
              CFTypeID v21 = CFGetTypeID(keys[v19]);
              if (v21 == CFStringGetTypeID()) {
                uint64_t v22 = v20;
              }
              else {
                uint64_t v22 = 0;
              }
            }
            else
            {
              uint64_t v22 = 0;
            }
            *(_OWORD *)uint64_t v40 = 0u;
            long long v41 = 0u;
            v38[0] = 0;
            v38[1] = 0;
            *(void *)&long long v39 = 0;
            ctu::cf::assign();
            long long v49 = *(_OWORD *)v38;
            uint64_t v50 = v39;
            MCC::MCC();
            if (SHIBYTE(v50) < 0) {
              operator delete((void *)v49);
            }
            CFArrayRef v23 = (const __CFArray *)values[v19];
            if (v23)
            {
              CFTypeID v24 = CFGetTypeID(values[v19]);
              CFTypeID TypeID = CFArrayGetTypeID();
              if (v22)
              {
                if (v24 == TypeID)
                {
                  CFIndex v26 = CFArrayGetCount(v23);
                  if (v26 >= 1)
                  {
                    for (CFIndex i = 0; i != v26; ++i)
                    {
                      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v23, i);
                      if (ValueAtIndex)
                      {
                        CFGetTypeID(ValueAtIndex);
                        CFStringGetTypeID();
                      }
                      *(_OWORD *)uint64_t v38 = 0u;
                      long long v39 = 0u;
                      long long v49 = 0uLL;
                      uint64_t v50 = 0;
                      ctu::cf::assign();
                      std::string __p = (void *)v49;
                      char v37 = HIBYTE(v50);
                      MCC::MCC();
                      if (v37 < 0) {
                        operator delete(__p);
                      }
                      uint64_t v29 = *v2;
                      uint64_t v30 = v2;
                      uint64_t v31 = v2;
                      if (!*v2) {
                        goto LABEL_44;
                      }
                      uint64_t v30 = v2;
                      while (1)
                      {
                        while (1)
                        {
                          uint64_t v31 = (uint64_t **)v29;
                          if (!MCC::operator<()) {
                            break;
                          }
                          uint64_t v29 = *v31;
                          uint64_t v30 = v31;
                          if (!*v31) {
                            goto LABEL_44;
                          }
                        }
                        if (!MCC::operator<()) {
                          break;
                        }
                        uint64_t v30 = v31 + 1;
                        uint64_t v29 = v31[1];
                        if (!v29) {
                          goto LABEL_44;
                        }
                      }
                      if (!*v30)
                      {
LABEL_44:
                        uint64_t v50 = 0;
                        uint64_t v32 = (uint64_t *)operator new(0x60uLL);
                        *(void *)&long long v49 = v32;
                        *((void *)&v49 + 1) = v2;
                        MCC::MCC((MCC *)(v32 + 4), (const MCC *)v38);
                        MCC::MCC((MCC *)(v32 + 8));
                        LOBYTE(v50) = 1;
                        *uint64_t v32 = 0;
                        v32[1] = 0;
                        _OWORD v32[2] = (uint64_t)v31;
                        void *v30 = v32;
                        uint64_t v33 = **(void **)(a1 + 936);
                        if (v33)
                        {
                          *(void *)(a1 + 936) = v33;
                          uint64_t v32 = *v30;
                        }
                        sub_100046C90(*(uint64_t **)(a1 + 944), v32);
                        ++*(void *)(a1 + 952);
                        *(void *)&long long v49 = 0;
                        sub_1010B9558((uint64_t)&v49);
                      }
                      MCC::operator=();
                      if (SHIBYTE(v39) < 0) {
                        operator delete(v38[1]);
                      }
                    }
                  }
                }
              }
            }
            if (SHIBYTE(v41) < 0) {
              operator delete(v40[1]);
            }
            ++v19;
          }
          while (v19 != v35);
        }
        if (values)
        {
          uint64_t v43 = values;
          operator delete(values);
        }
        if (keys)
        {
          BOOL v46 = keys;
          operator delete(keys);
        }
      }
    }
  }
  return sub_100057D78((const void **)&v48);
}

void sub_1010B71BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  if (__p) {
    operator delete(__p);
  }
  if (a39) {
    operator delete(a39);
  }
  sub_100057D78((const void **)(v40 - 120));
  _Unwind_Resume(a1);
}

uint64_t sub_1010B72F0(uint64_t a1)
{
  return ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 72));
}

const void **sub_1010B72F8(const void **result, unsigned char *a2)
{
  if (*a2)
  {
    uint64_t v2 = (uint64_t)result;
    int v3 = result[5];
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Carrier Bundle setup event received, checking for network overrides", v4, 2u);
    }
    return sub_1010B6D44(v2);
  }
  return result;
}

uint64_t sub_1010B736C(RoamingNetworkHandler *a1, const std::string *a2)
{
  int v4 = *((void *)a1 + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v5 = a2;
    }
    else {
      uint64_t v5 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((a2[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      data = (uint64_t *)&a2[1];
    }
    else {
      data = (uint64_t *)a2[1].__r_.__value_.__l.__data_;
    }
    int v8 = 136446466;
    unsigned int v9 = v5;
    __int16 v10 = 2082;
    uint64_t v11 = data;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Mcc/Mnc updated: mcc=%{public}s mnc=%{public}s", (uint8_t *)&v8, 0x16u);
  }
  sub_100224B28(*((void *)a1 + 130), a2, a2 + 1);
  RoamingNetworkHandler::submitOperatorRoamingAwdMetric(a1);
  return (*(uint64_t (**)(RoamingNetworkHandler *, uint64_t))(*(void *)a1 + 120))(a1, 1);
}

uint64_t sub_1010B7488()
{
  return mapRoamingResultToTriBOOL();
}

BOOL sub_1010B74A0(char **a1, uint64_t a2, uint64_t a3)
{
  if (a2 == a3) {
    return 0;
  }
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  do
  {
    uint64_t v31 = 0;
    int64_t v32 = 0;
    uint64_t v33 = 0;
    if (!*(unsigned char *)(v4 + 48)) {
      goto LABEL_15;
    }
    uint64_t v6 = (void **)(v4 + 24);
    uint64_t v7 = *(unsigned __int8 *)(v4 + 47);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(v4 + 32);
    }
    if (v7 != 3) {
      goto LABEL_13;
    }
    unsigned int v9 = (unsigned __int16 *)*v6;
    if (v8 >= 0) {
      unsigned int v9 = (unsigned __int16 *)(v4 + 24);
    }
    int v10 = *v9;
    int v11 = *((unsigned __int8 *)v9 + 2);
    if (v10 == 20033 && v11 == 89)
    {
LABEL_15:
      sub_100058DB0(__p, "");
    }
    else
    {
LABEL_13:
      if (v8 < 0)
      {
        sub_10004FC84(__p, *v6, *(void *)(v4 + 32));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v6;
        uint64_t v30 = *(void *)(v4 + 40);
      }
    }
    sub_1002055B4((const void **)v4, (const void **)__p, &v31);
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
    char v13 = (char *)*((unsigned __int8 *)a1 + 23);
    if ((char)v13 >= 0) {
      char v14 = (char *)a1;
    }
    else {
      char v14 = *a1;
    }
    int v15 = SHIBYTE(v33);
    CFDictionaryRef v16 = v31;
    if (v33 >= 0) {
      CFTypeID v17 = &v31;
    }
    else {
      CFTypeID v17 = (char **)v31;
    }
    if (v33 >= 0) {
      int64_t v18 = HIBYTE(v33);
    }
    else {
      int64_t v18 = v32;
    }
    if (v18)
    {
      if ((char)v13 < 0) {
        char v13 = a1[1];
      }
      uint64_t v19 = &v13[(void)v14];
      if ((uint64_t)v13 >= v18)
      {
        int v22 = *(char *)v17;
        CFArrayRef v23 = v14;
        do
        {
          CFTypeID v24 = &v13[-v18];
          if (v24 == (char *)-1) {
            break;
          }
          char v25 = (char *)memchr(v23, v22, (size_t)(v24 + 1));
          if (!v25) {
            break;
          }
          int v20 = v25;
          if (!memcmp(v25, v17, v18)) {
            goto LABEL_40;
          }
          CFArrayRef v23 = v20 + 1;
          char v13 = (char *)(v19 - (v20 + 1));
        }
        while ((uint64_t)v13 >= v18);
        int v20 = v19;
LABEL_40:
        uint64_t v3 = a3;
      }
      else
      {
        int v20 = &v13[(void)v14];
      }
      if (v20 == v19) {
        uint64_t v21 = -1;
      }
      else {
        uint64_t v21 = v20 - v14;
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    BOOL v26 = v21 == 0;
    if (v15 < 0) {
      operator delete(v16);
    }
    if (!v21) {
      break;
    }
    v4 += 72;
  }
  while (v4 != v3);
  return v26;
}

void sub_1010B7694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010B76B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 960);
}

uint64_t sub_1010B76B8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 962);
}

unint64_t sub_1010B76C0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 961) | ((unint64_t)*(unsigned int *)(a1 + 964) << 32);
}

void sub_1010B76E0(uint64_t a1, unsigned int a2)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 48));
  uint64_t v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v16 = v6;
  int v10 = sub_10004D37C(&v5[1].__m_.__sig, &v16);
  if (v10)
  {
    uint64_t v12 = v10[3];
    int v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      if (!v12) {
        goto LABEL_7;
      }
LABEL_11:
      uint64_t v15 = *(unsigned int *)(a1 + 64);
      v17[0] = off_101A87F98;
      v17[1] = a1;
      void v17[2] = (a2 >> 4) & 1 | ((unint64_t)a2 << 8);
      void v17[3] = v17;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v12 + 104))(v12, v15, v17);
      sub_1000F25E0(v17);
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  int v11 = 0;
  char v13 = 1;
  if (v12) {
    goto LABEL_11;
  }
LABEL_7:
  char v14 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v16) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#N Could not get Max Data Rate Manager to change RAT selection", (uint8_t *)&v16, 2u);
  }
LABEL_12:
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
}

void sub_1010B78A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000F25E0((uint64_t *)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

void sub_1010B78D4(uint64_t a1, uint64_t a2)
{
  std::string __p = 0;
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  uint64_t v4 = *(void **)(a1 + 936);
  uint64_t v5 = (void *)(a1 + 944);
  if (v4 != (void *)(a1 + 944))
  {
    do
    {
      *(_OWORD *)uint64_t v33 = 0u;
      long long v34 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v32 = 0u;
      sub_1010B9080((MCC *)buf, (uint64_t)(v4 + 4));
      IntCFDictionaryRef Value = MCC::getIntValue((MCC *)buf);
      __int16 v7 = IntValue;
      uint64_t v8 = v29;
      if ((unint64_t)v29 >= v30)
      {
        int v10 = __p;
        uint64_t v11 = (char *)v29 - (unsigned char *)__p;
        if ((char *)v29 - (unsigned char *)__p <= -3) {
          sub_10006A748();
        }
        uint64_t v12 = v11 >> 1;
        if (v30 - (unint64_t)__p <= (v11 >> 1) + 1) {
          uint64_t v13 = v12 + 1;
        }
        else {
          uint64_t v13 = v30 - (void)__p;
        }
        if (v30 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v14 = v13;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_10006E5B8((uint64_t)&v30, v14);
          int v10 = __p;
          uint64_t v8 = v29;
        }
        else
        {
          uint64_t v15 = 0;
        }
        unint64_t v16 = &v15[2 * v12];
        *(_WORD *)unint64_t v16 = v7;
        unsigned int v9 = v16 + 2;
        while (v8 != v10)
        {
          __int16 v17 = *--v8;
          *((_WORD *)v16 - 1) = v17;
          v16 -= 2;
        }
        std::string __p = v16;
        uint64_t v29 = v9;
        unint64_t v30 = (unint64_t)&v15[2 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        _WORD *v29 = IntValue;
        unsigned int v9 = v8 + 1;
      }
      uint64_t v29 = v9;
      if (SHIBYTE(v34) < 0) {
        operator delete(v33[1]);
      }
      if (SHIBYTE(v32) < 0) {
        operator delete(*(void **)&buf[8]);
      }
      int64_t v18 = (void *)v4[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          int64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v4[2];
          BOOL v20 = *v19 == (void)v4;
          uint64_t v4 = v19;
        }
        while (!v20);
      }
      uint64_t v4 = v19;
    }
    while (v19 != v5);
  }
  if (*(void *)(a2 + 24))
  {
    uint64_t v21 = *(NSObject **)(a1 + 40);
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    CFArrayRef v23 = __p;
    if (v22)
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = ((char *)v29 - (unsigned char *)__p) >> 1;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Calling back with %zu equivalent countries", buf, 0xCu);
      CFArrayRef v23 = __p;
    }
    char v25 = 0;
    BOOL v26 = 0;
    uint64_t v27 = 0;
    sub_1003A10E0(&v25, v23, (uint64_t)v29, ((char *)v29 - (unsigned char *)v23) >> 1);
    uint64_t v24 = *(void *)(a2 + 24);
    if (!v24) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v24 + 48))(v24, &v25);
    if (v25)
    {
      BOOL v26 = v25;
      operator delete(v25);
    }
  }
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
}

void sub_1010B7B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010B7BB8(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(int *)(a1 + 928);
  if (v2 != a2)
  {
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (v2 > 3) {
        unint64_t v6 = "Device Type unknown";
      }
      else {
        unint64_t v6 = off_101A88088[v2];
      }
      if (a2 > 3) {
        __int16 v7 = "Device Type unknown";
      }
      else {
        __int16 v7 = off_101A88088[a2];
      }
      int v8 = 136315394;
      unsigned int v9 = v6;
      __int16 v10 = 2080;
      uint64_t v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Device type is changing from %s to %s", (uint8_t *)&v8, 0x16u);
    }
    *(_DWORD *)(a1 + 928) = a2;
    sub_100007B00(a1);
  }
}

uint64_t sub_1010B7CBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 1072) + 24))();
}

uint64_t sub_1010B7CE4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 1072) + 32))();
}

void sub_1010B7D0C(uint64_t a1, NSObject **a2)
{
  uint64_t v2 = *(void *)(a1 + 1072);
  char v3 = *a2;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v2 + 48))(v2, &group);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_1010B7D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010B7DB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 1072) + 56))();
}

uint64_t sub_1010B7DE0(uint64_t a1)
{
  if (*(void *)(a1 + 952))
  {
    uint64_t v2 = *(void **)(a1 + 936);
    char v3 = (void *)(a1 + 944);
    if (v2 != (void *)(a1 + 944))
    {
      do
      {
        *(_OWORD *)std::string __p = 0u;
        long long v31 = 0u;
        memset(v29, 0, sizeof(v29));
        sub_1010B9080((MCC *)v29, (uint64_t)(v2 + 4));
        uint64_t v4 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          IntCFDictionaryRef Value = MCC::getIntValue((MCC *)v29);
          int v6 = MCC::getIntValue((MCC *)__p);
          *(_DWORD *)long long buf = 67109376;
          int v26 = IntValue;
          __int16 v27 = 1024;
          int v28 = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I MCC %03d is overridden to %03d", buf, 0xEu);
        }
        if (SHIBYTE(v31) < 0) {
          operator delete(__p[1]);
        }
        if ((char)v29[31] < 0) {
          operator delete(*(void **)&v29[8]);
        }
        __int16 v7 = (void *)v2[1];
        if (v7)
        {
          do
          {
            int v8 = v7;
            __int16 v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            int v8 = (void *)v2[2];
            BOOL v9 = *v8 == (void)v2;
            uint64_t v2 = v8;
          }
          while (!v9);
        }
        uint64_t v2 = v8;
      }
      while (v8 != v3);
    }
  }
  else
  {
    __int16 v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I There are no MCC overrides mentioned in carrier bundle", v29, 2u);
    }
  }
  uint64_t v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = asString();
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)&v29[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Data mode: %s", v29, 0xCu);
    uint64_t v11 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(int *)(a1 + 928);
    if (v13 > 3) {
      uint64_t v14 = "Device Type unknown";
    }
    else {
      uint64_t v14 = off_101A88088[v13];
    }
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)&v29[4] = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Device type: %s", v29, 0xCu);
    uint64_t v11 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = asString();
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)&v29[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Roaming result: %s", v29, 0xCu);
    uint64_t v11 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = asString();
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)&v29[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Roaming result (with overrides): %s", v29, 0xCu);
    uint64_t v11 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 960)) {
      __int16 v17 = "true";
    }
    else {
      __int16 v17 = "false";
    }
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)&v29[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Is in home country: %s", v29, 0xCu);
    uint64_t v11 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 961)) {
      int64_t v18 = "true";
    }
    else {
      int64_t v18 = "false";
    }
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)&v29[4] = v18;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Is in home country (definite): %s", v29, 0xCu);
    uint64_t v11 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 962)) {
      uint64_t v19 = "true";
    }
    else {
      uint64_t v19 = "false";
    }
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)&v29[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Is in home country raw: %s", v29, 0xCu);
    uint64_t v11 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 977)) {
      BOOL v20 = "true";
    }
    else {
      BOOL v20 = "false";
    }
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)&v29[4] = v20;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Internal RAT selection in progress: %s", v29, 0xCu);
    uint64_t v11 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = (void *)(a1 + 984);
    if (*(char *)(a1 + 1007) < 0) {
      uint64_t v21 = (void *)*v21;
    }
    *(_DWORD *)uint64_t v29 = 136315138;
    *(void *)&v29[4] = v21;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I ISO network MCC: %s", v29, 0xCu);
    uint64_t v11 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
    uint64_t v22 = printers::asString();
    (*(void (**)(void))(**(void **)(a1 + 1072) + 40))(*(void *)(a1 + 1072));
    uint64_t v23 = asString();
    *(_DWORD *)uint64_t v29 = 136315394;
    *(void *)&v29[4] = v22;
    *(_WORD *)&v29[12] = 2080;
    *(void *)&v29[14] = v23;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Data roaming setting: %s, reason: %s", v29, 0x16u);
  }
  sub_100B351B8(*(void *)(a1 + 1008));
  sub_100B351B8(*(void *)(a1 + 1024));
  return sub_100B351B8(*(void *)(a1 + 1040));
}

void sub_1010B8360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013C44C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1010B837C(uint64_t a1@<X0>, BOOL a2@<W1>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, *(Registry **)(a1 + 48));
  int v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    int v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      std::string::size_type v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  v92.__r_.__value_.__r.__words[0] = v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)&v92);
  if (!v11)
  {
    uint64_t v13 = 0;
LABEL_9:
    std::mutex::unlock(v6);
    uint64_t v12 = 0;
    char v14 = 1;
    if (!v13) {
      goto LABEL_131;
    }
    goto LABEL_10;
  }
  uint64_t v13 = v11[3];
  uint64_t v12 = (std::__shared_weak_count *)v11[4];
  if (!v12) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v6);
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v12);
  char v14 = 0;
  if (!v13) {
    goto LABEL_131;
  }
LABEL_10:
  if (a2 && (*(_DWORD *)(a1 + 120) & 0xFFFFFFFE) != 4) {
    goto LABEL_131;
  }
  v93[0] = 0;
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v16 = v15;
  if (v15)
  {
    v93[0] = v15;
  }
  else
  {
    xpc_object_t v16 = xpc_null_create();
    v93[0] = v16;
    if (!v16)
    {
      xpc_object_t v17 = xpc_null_create();
      xpc_object_t v16 = 0;
      goto LABEL_19;
    }
  }
  if (xpc_get_type(v16) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v16);
    goto LABEL_20;
  }
  xpc_object_t v17 = xpc_null_create();
LABEL_19:
  v93[0] = v17;
LABEL_20:
  xpc_release(v16);
  memset(&v92, 0, sizeof(v92));
  long long v90 = 0uLL;
  uint64_t v91 = 0;
  unsigned int v18 = analytics::simSlotAsSubsId();
  xpc_object_t v88 = xpc_int64_create(v18);
  if (!v88) {
    xpc_object_t v88 = xpc_null_create();
  }
  __p[0] = v93;
  __p[1] = "subs_id";
  sub_100035E70((uint64_t)__p, &v88, &v89);
  xpc_release(v89);
  xpc_object_t v89 = 0;
  xpc_release(v88);
  xpc_object_t v88 = 0;
  unsigned int v19 = *(_DWORD *)(a1 + 120) - 1;
  if (v19 > 5) {
    BOOL v20 = "Unknown";
  }
  else {
    BOOL v20 = off_101A880A8[v19];
  }
  xpc_object_t v86 = xpc_string_create(v20);
  if (!v86) {
    xpc_object_t v86 = xpc_null_create();
  }
  __p[0] = v93;
  __p[1] = "registrationStatus";
  sub_100035E70((uint64_t)__p, &v86, &v87);
  xpc_release(v87);
  xpc_object_t v87 = 0;
  xpc_release(v86);
  xpc_object_t v86 = 0;
  xpc_object_t v84 = xpc_BOOL_create(a2);
  if (!v84) {
    xpc_object_t v84 = xpc_null_create();
  }
  __p[0] = v93;
  __p[1] = "isEventTrigger";
  sub_100035E70((uint64_t)__p, &v84, &v85);
  xpc_release(v85);
  xpc_object_t v85 = 0;
  xpc_release(v84);
  xpc_object_t v84 = 0;
  uint64_t v22 = (std::mutex *)Registry::getServiceMap(v21, *(Registry **)(a1 + 48));
  uint64_t v23 = v22;
  if (v24 < 0)
  {
    char v25 = (unsigned __int8 *)(v24 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v26 = 5381;
    do
    {
      uint64_t v24 = v26;
      unsigned int v27 = *v25++;
      uint64_t v26 = (33 * v26) ^ v27;
    }
    while (v27);
  }
  std::mutex::lock(v22);
  __p[0] = (void *)v24;
  int v28 = sub_10004D37C(&v23[1].__m_.__sig, (unint64_t *)__p);
  if (!v28)
  {
    uint64_t v30 = 0;
    goto LABEL_36;
  }
  uint64_t v30 = v28[3];
  uint64_t v29 = (std::__shared_weak_count *)v28[4];
  if (!v29)
  {
LABEL_36:
    std::mutex::unlock(v23);
    uint64_t v29 = 0;
    char v31 = 1;
    goto LABEL_37;
  }
  atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v23);
  atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v29);
  char v31 = 0;
LABEL_37:
  long long v32 = *(const std::string **)(a1 + 1040);
  if (v32[2].__r_.__value_.__s.__data_[16])
  {
    std::string::operator=(&v92, v32 + 3);
    uint64_t v33 = *(void *)(a1 + 1040);
    long long v36 = *(const char **)(v33 + 120);
    uint64_t v34 = v33 + 120;
    CFIndex v35 = v36;
    if (*(char *)(v34 + 23) >= 0) {
      char v37 = (const char *)v34;
    }
    else {
      char v37 = v35;
    }
    xpc_object_t object = xpc_string_create(v37);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    __p[0] = v93;
    __p[1] = "carrierBundleID";
    sub_100035E70((uint64_t)__p, &object, &v83);
    xpc_release(v83);
    xpc_object_t v83 = 0;
    xpc_release(object);
    xpc_object_t object = 0;
    if (v30) {
      (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v30 + 16))(__p, v30, *(unsigned int *)(a1 + 64));
    }
    else {
      sub_100058DB0(__p, "");
    }
    if (v79 >= 0) {
      uint64_t v38 = __p;
    }
    else {
      uint64_t v38 = (void **)__p[0];
    }
    xpc_object_t v80 = xpc_string_create((const char *)v38);
    if (!v80) {
      xpc_object_t v80 = xpc_null_create();
    }
    long long v71 = v93;
    uint64_t v72 = "hmCarriername";
    sub_100035E70((uint64_t)&v71, &v80, &v81);
    xpc_release(v81);
    xpc_object_t v81 = 0;
    xpc_release(v80);
    xpc_object_t v80 = 0;
    if (SHIBYTE(v79) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v39 = *(void *)(a1 + 1008);
  if (!*(unsigned char *)(v39 + 64))
  {
    uint64_t v41 = *(void *)(a1 + 1024);
    if (*(unsigned char *)(v41 + 64))
    {
      xpc_object_t v64 = xpc_int64_create(*(int *)(v41 + 108));
      if (!v64) {
        xpc_object_t v64 = xpc_null_create();
      }
      __p[0] = v93;
      __p[1] = "rat";
      sub_100035E70((uint64_t)__p, &v64, &v65);
      xpc_release(v65);
      xpc_object_t v65 = 0;
      xpc_release(v64);
      xpc_object_t v64 = 0;
      BOOL v42 = mapRoamingResultToTriBOOL() == 1;
      xpc_object_t v62 = xpc_BOOL_create(v42);
      if (!v62) {
        xpc_object_t v62 = xpc_null_create();
      }
      __p[0] = v93;
      __p[1] = "isRoaming";
      sub_100035E70((uint64_t)__p, &v62, &v63);
      xpc_release(v63);
      xpc_object_t v63 = 0;
      xpc_release(v62);
      xpc_object_t v62 = 0;
    }
    goto LABEL_91;
  }
  MCC::getStringValue((uint64_t *)__p, (MCC *)(v39 + 72));
  if (SHIBYTE(v91) < 0) {
    operator delete((void *)v90);
  }
  long long v90 = *(_OWORD *)__p;
  uint64_t v91 = v79;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v79 = 0;
  uint64_t v40 = *(void *)(a1 + 1008);
  if (*(char *)(v40 + 159) < 0)
  {
    sub_10004FC84(__p, *(void **)(v40 + 136), *(void *)(v40 + 144));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v40 + 136);
    uint64_t v79 = *(void *)(v40 + 152);
  }
  if (!a2) {
    goto LABEL_70;
  }
  if ((SHIBYTE(v79) & 0x80000000) == 0)
  {
    if (!HIBYTE(v79)) {
      goto LABEL_124;
    }
    goto LABEL_70;
  }
  if (__p[1])
  {
LABEL_70:
    if (v79 >= 0) {
      uint64_t v43 = __p;
    }
    else {
      uint64_t v43 = (void **)__p[0];
    }
    xpc_object_t v76 = xpc_string_create((const char *)v43);
    if (!v76) {
      xpc_object_t v76 = xpc_null_create();
    }
    long long v71 = v93;
    uint64_t v72 = "operatorBundleID";
    sub_100035E70((uint64_t)&v71, &v76, &v77);
    xpc_release(v77);
    xpc_object_t v77 = 0;
    xpc_release(v76);
    xpc_object_t v76 = 0;
    if (v30) {
      (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v30 + 24))(&v71, v30, *(unsigned int *)(a1 + 64));
    }
    else {
      sub_100058DB0(&v71, "");
    }
    if (v73 >= 0) {
      uint64_t v44 = (const char *)&v71;
    }
    else {
      uint64_t v44 = (const char *)v71;
    }
    xpc_object_t v74 = xpc_string_create(v44);
    if (!v74) {
      xpc_object_t v74 = xpc_null_create();
    }
    v70[0] = v93;
    v70[1] = "opCarriername";
    sub_100035E70((uint64_t)v70, &v74, &v75);
    xpc_release(v75);
    xpc_object_t v75 = 0;
    xpc_release(v74);
    xpc_object_t v74 = 0;
    if (v73 < 0) {
      operator delete(v71);
    }
    xpc_object_t v68 = xpc_int64_create(*(int *)(*(void *)(a1 + 1008) + 164));
    if (!v68) {
      xpc_object_t v68 = xpc_null_create();
    }
    long long v71 = v93;
    uint64_t v72 = "rat";
    sub_100035E70((uint64_t)&v71, &v68, &v69);
    xpc_release(v69);
    xpc_object_t v69 = 0;
    xpc_release(v68);
    xpc_object_t v68 = 0;
    BOOL v45 = mapRoamingResultToTriBOOL() == 1;
    xpc_object_t v66 = xpc_BOOL_create(v45);
    if (!v66) {
      xpc_object_t v66 = xpc_null_create();
    }
    long long v71 = v93;
    uint64_t v72 = "isRoaming";
    sub_100035E70((uint64_t)&v71, &v66, &v67);
    xpc_release(v67);
    xpc_object_t v67 = 0;
    xpc_release(v66);
    xpc_object_t v66 = 0;
    if (SHIBYTE(v79) < 0) {
      operator delete(__p[0]);
    }
LABEL_91:
    if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v92.__r_.__value_.__l.__size_;
    }
    if (!size) {
      goto LABEL_112;
    }
    uint64_t v47 = HIBYTE(v91);
    if (v91 < 0) {
      uint64_t v47 = *((void *)&v90 + 1);
    }
    if (v47)
    {
      if (size == v47)
      {
        if (v91 >= 0) {
          CFDictionaryRef v48 = (unsigned __int8 *)&v90;
        }
        else {
          CFDictionaryRef v48 = (unsigned __int8 *)v90;
        }
        if ((*((unsigned char *)&v92.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          BOOL v57 = memcmp(v92.__r_.__value_.__l.__data_, v48, v92.__r_.__value_.__l.__size_) == 0;
        }
        else if (*((unsigned char *)&v92.__r_.__value_.__s + 23))
        {
          uint64_t v49 = HIBYTE(v92.__r_.__value_.__r.__words[2]) - 1;
          uint64_t v50 = &v92;
          do
          {
            int v52 = v50->__r_.__value_.__s.__data_[0];
            uint64_t v50 = (std::string *)((char *)v50 + 1);
            int v51 = v52;
            int v54 = *v48++;
            int v53 = v54;
            BOOL v56 = v49-- != 0;
            BOOL v57 = v51 == v53;
          }
          while (v57 && v56);
        }
        else
        {
          BOOL v57 = 1;
        }
      }
      else
      {
        BOOL v57 = 0;
      }
      BOOL v58 = !v57;
    }
    else
    {
LABEL_112:
      BOOL v58 = 0;
    }
    xpc_object_t v60 = xpc_BOOL_create(v58);
    if (!v60) {
      xpc_object_t v60 = xpc_null_create();
    }
    __p[0] = v93;
    __p[1] = "isInternationalRoaming";
    sub_100035E70((uint64_t)__p, &v60, &v61);
    xpc_release(v61);
    xpc_object_t v61 = 0;
    xpc_release(v60);
    xpc_object_t v59 = v93[0];
    xpc_object_t v60 = 0;
    if (v93[0]) {
      xpc_retain(v93[0]);
    }
    else {
      xpc_object_t v59 = xpc_null_create();
    }
    (*(void (**)(uint64_t, const char *, xpc_object_t *))(*(void *)v13 + 16))(v13, "commCenterRoamingInfo", &v59);
    xpc_release(v59);
    xpc_object_t v59 = 0;
    goto LABEL_124;
  }
  operator delete(__p[0]);
LABEL_124:
  if ((v31 & 1) == 0) {
    sub_10004D2C8(v29);
  }
  if (SHIBYTE(v91) < 0) {
    operator delete((void *)v90);
  }
  if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v92.__r_.__value_.__l.__data_);
  }
  xpc_release(v93[0]);
LABEL_131:
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
}

void sub_1010B8CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if ((v36 & 1) == 0) {
    sub_10004D2C8(v35);
  }
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (*(char *)(v38 - 97) < 0) {
    operator delete(*(void **)(v38 - 120));
  }
  xpc_release(*(xpc_object_t *)(v38 - 96));
  if ((v37 & 1) == 0) {
    sub_10004D2C8(v34);
  }
  _Unwind_Resume(a1);
}

std::string *sub_1010B8E28(uint64_t *a1, std::string *a2, std::string *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      uint64_t v20 = v12 - (void)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)a2) >> 3)) >= a5)
      {
        uint64_t v21 = (long long *)&a3[a5];
      }
      else
      {
        uint64_t v21 = (long long *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (void)a2) >> 3));
        a1[1] = (uint64_t)sub_10005E050(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      sub_100861090((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
      sub_10005E878(a3, (std::string *)v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v27 = v9;
      if (v18) {
        unsigned int v19 = (char *)sub_10004812C(v9, v18);
      }
      else {
        unsigned int v19 = 0;
      }
      uint64_t v23 = v19;
      uint64_t v24 = &v19[24 * v15];
      char v25 = v24;
      uint64_t v26 = &v19[24 * v18];
      sub_1010B8FEC(&v23, (long long *)a3, a5);
      uint64_t v5 = (std::string *)sub_100861100((uint64_t)a1, &v23, (long long *)v5);
      sub_100048174((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_1010B8FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *sub_1010B8FEC(void *result, long long *a2, uint64_t a3)
{
  char v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v6 = v4 + 24 * a3;
    uint64_t v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        __n128 result = sub_10004FC84((unsigned char *)v4, *(void **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v8 = *a2;
        *(void *)(v4 + 16) = *((void *)a2 + 2);
        *(_OWORD *)uint64_t v4 = v8;
      }
      v4 += 24;
      a2 = (long long *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    uint64_t v4 = v6;
  }
  void v3[2] = v4;
  return result;
}

void sub_1010B9078(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

MCC *sub_1010B9080(MCC *a1, uint64_t a2)
{
  MCC::MCC(a1, (const MCC *)a2);
  MCC::MCC((MCC *)(v4 + 32), (const MCC *)(a2 + 32));
  return a1;
}

void sub_1010B90B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_1010B90D4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1010B91A0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1010B9278);
  __cxa_rethrow();
}

void sub_1010B91C8(_Unwind_Exception *a1)
{
}

void sub_1010B91E0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010B9218(uint64_t a1)
{
}

uint64_t sub_1010B9234(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1010B9278(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1010B92A4(void *a1)
{
  if (a1)
  {
    sub_1010B92A4(*a1);
    sub_1010B92A4(a1[1]);
    sub_10008820C((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_1010B92FC()
{
}

__n128 sub_1010B9310(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A87E98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010B9364(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A87E98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1010B939C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B93DC()
{
}

void sub_1010B93EC()
{
}

__n128 sub_1010B9400(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A87F18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010B9454(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A87F18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1010B948C(void *a1)
{
  read_rest_value();
  uint64_t v2 = (uint64_t (*)(void *))a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)(a1[2] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(uint64_t (**)(void *))(*v4 + v2);
  }

  return v2(v4);
}

uint64_t sub_1010B950C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B954C()
{
}

void sub_1010B9558(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10008820C((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_1010B95B4()
{
}

__n128 sub_1010B95C8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A87F98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1010B9614(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A87F98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010B9644(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 8) + 8);
  v2[0] = 0;
  v2[1] = 0;
  sub_10003E168(v2, v1);
  operator new();
}

uint64_t sub_1010B9740(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010B9780()
{
}

void sub_1010B978C(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *(unsigned char **)a1;
  if (!*(unsigned char *)(*(void *)a1 + 8) && v1[10] && v1[9])
  {
    uint64_t v2 = *(NSObject **)(**(void **)a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Carrier and device are LTE capable, adding LTE", buf, 2u);
    }
    v1[11] |= 0x10u;
  }
  uint64_t v4 = 0;
  RatSelectionType::RatSelectionType((RatSelectionType *)&v4);
  RatSelectionType::setSelection((RatSelectionType *)&v4, v1[11]);
  RatSelectionType::setPreferredSelection((RatSelectionType *)&v4, v1[11]);
  RatSelectionType::setSimSlot();
  xpc_object_t v8 = 0;
  sub_10014E9E0((RatSelectionType *)&v4, &v8);
  sub_100058DB0(&__p, "/cc/requests/rat_selection");
  xpc_object_t object = v8;
  xpc_object_t v8 = xpc_null_create();
  *(void *)long long buf = off_101A88008;
  char v10 = 0;
  uint64_t v11 = buf;
  ctu::RestModule::sendRequest();
  sub_10003F600(buf);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v7 < 0) {
    operator delete(__p);
  }
  xpc_release(v8);
  operator delete();
}

void sub_1010B9938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, xpc_object_t object, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t a19, char a20)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010B99C4()
{
}

unsigned char *sub_1010B99D8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = off_101A88008;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_1010B9A24(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A88008;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void sub_1010B9A54(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, 0, v2);
  xpc_release(object);
}

void sub_1010B9AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t sub_1010B9AC0(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A88068)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010B9B00()
{
  return &off_101A88068;
}

uint64_t sub_1010B9B0C(uint64_t a1, NSObject **a2, int a3, void *a4, void *a5, uint64_t a6)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&__p, kCtLoggingSystemName, "lazuli.chatbot.mdl");
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  unint64_t v12 = *a2;
  *(void *)(a1 + 16) = *a2;
  if (v12) {
    dispatch_retain(v12);
  }
  *(void *)(a1 + 24) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v23, &__p);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 32), (const ctu::OsLogLogger *)v23);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v23);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__p);
  v24[0] = off_101999E18;
  v24[1] = sub_1010BA054;
  v24[3] = v24;
  *(void *)(a1 + 40) = 0;
  if ((capabilities::ct::supportsGemini(v13) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 40)) {
    operator new();
  }
  sub_10008863C(v24);
  *(_DWORD *)(a1 + 48) = a3;
  if (*(char *)(a6 + 79) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 56), *(void **)(a6 + 56), *(void *)(a6 + 64));
  }
  else
  {
    long long v14 = *(_OWORD *)(a6 + 56);
    *(void *)(a1 + 72) = *(void *)(a6 + 72);
    *(_OWORD *)(a1 + 56) = v14;
  }
  *(void *)(a1 + 80) = *a4;
  uint64_t v15 = a4[1];
  *(void *)(a1 + 88) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 96) = *a5;
  uint64_t v16 = a5[1];
  *(void *)(a1 + 104) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (std::__shared_weak_count *)a4[1];
  uint64_t v20 = *a4;
  uint64_t v21 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100058DB0(&__p, "ChatBots");
  v23[0] = 0;
  v23[1] = 0;
  int v22 = a3;
  sub_100B8C1D0(&v22, &v20, a6 + 32, (uint64_t)&__p, v23, (void *)(a1 + 112));
  if (v26 < 0) {
    operator delete(__p.var0);
  }
  if (v21) {
    sub_10004D2C8(v21);
  }
  sub_1000593FC(a1 + 128, (long long *)a6);
  *(void *)(a1 + 160) = *(void *)(a6 + 80);
  uint64_t v18 = *(void *)(a6 + 88);
  *(void *)(a1 + 168) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 249) = 0u;
  if (!*(void *)(a1 + 112)) {
    __TUAssertTrigger();
  }
  if (!*(void *)(a1 + 160)) {
    __TUAssertTrigger();
  }
  return a1;
}

void sub_1010B9E88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

const char *sub_1010BA054(int a1)
{
  uint64_t v1 = "lazuli.chatbot.mdl.?";
  if (a1 == 2) {
    uint64_t v1 = "lazuli.chatbot.mdl.2";
  }
  if (a1 == 1) {
    return "lazuli.chatbot.mdl.1";
  }
  else {
    return v1;
  }
}

void sub_1010BA080(uint64_t a1)
{
  BOOL v2 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)(a1 + 216);
    if (*(char *)(a1 + 239) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    uint64_t v4 = "with";
    if (!*(unsigned char *)(a1 + 152)) {
      uint64_t v4 = "without";
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Starting chatbot search for: [%{public}s] %s auth parameters", buf, 0x16u);
  }
  memset(&v39, 0, sizeof(v39));
  sub_1010BA768(&v39, a1 + 216);
  memset(buf, 0, 32);
  uint64_t v5 = *(os_log_t **)(a1 + 112);
  if (*(char *)(a1 + 239) < 0)
  {
    sub_10004FC84(&__dst, *(void **)(a1 + 216), *(void *)(a1 + 224));
  }
  else
  {
    long long __dst = *(_OWORD *)(a1 + 216);
    uint64_t v35 = *(void *)(a1 + 232);
  }
  sub_100178D18(&v36, (uint64_t)&__dst);
  sub_100058DB0(__p, "etag");
  sub_100B18DB4(v5, (uint64_t)&v36, (uint64_t)__p, buf);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(v36);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)__dst);
  }
  char v36 = 0;
  char v37 = 0;
  uint64_t v38 = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 88);
  v31[0] = *(void *)(a1 + 80);
  v31[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000593FC((uint64_t)&v29, (long long *)(a1 + 128));
  sub_1000593FC((uint64_t)&v27, (long long *)buf);
  sub_1010BAC78((uint64_t)&v36, (uint64_t)v31, *(const std::string **)(a1 + 424), &v29, (uint64_t)&v39, &v27);
  if (v28 && SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (v30 && SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (v6) {
    sub_10004D2C8(v6);
  }
  uint64_t v25 = 0;
  char v26 = 0;
  ctu::Http::HttpRequest::create();
  char v7 = *(std::__shared_weak_count **)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)__p;
  xpc_object_t v8 = (void *)(a1 + 176);
  __p[0] = 0;
  __p[1] = 0;
  if (v7)
  {
    sub_10004D2C8(v7);
    if (__p[1]) {
      sub_10004D2C8((std::__shared_weak_count *)__p[1]);
    }
  }
  if (v26) {
    sub_10004D2C8(v26);
  }
  if (*v8)
  {
    sub_1005629F0((uint64_t *)(a1 + 176));
    (*(void (**)(double))(*(void *)*v8 + 96))(30.0);
    (*(void (**)(void, uint64_t))(*(void *)*v8 + 208))(*v8, 1);
    (*(void (**)(void, void))(**(void **)(a1 + 176) + 8))(*(void *)(a1 + 176), *(void *)(a1 + 16));
    (*(void (**)(void, uint64_t))(*(void *)*v8 + 200))(*v8, 75);
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 8);
    if (!v9 || (v10 = *(void *)a1, (uint64_t v11 = std::__shared_weak_count::lock(v9)) == 0)) {
      sub_100088B9C();
    }
    unint64_t v12 = v11;
    p_shared_weak_owners = &v11->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v11);
    uint64_t v14 = *(void *)(a1 + 176);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 1174405120;
    v22[2] = sub_1010BB284;
    void v22[3] = &unk_101A880D8;
    v22[4] = a1;
    v22[5] = v10;
    uint64_t v23 = v12;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&v24, v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
    }
    else {
      std::string v24 = v39;
    }
    (*(void (**)(uint64_t, void *))(*(void *)v14 + 16))(v14, v22);
    uint64_t v16 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
    v20[0] = 0;
    v20[1] = 0;
    uint64_t v21 = 0;
    sub_1005606A8(v16, &v36, (long long *)&v39, 0, (uint64_t *)v20);
    if (SHIBYTE(v21) < 0) {
      operator delete(v20[0]);
    }
    uint64_t v17 = *v8;
    v18[1] = 0;
    uint64_t v19 = 0;
    v18[0] = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v17 + 40))(v17, v18);
    if (SHIBYTE(v19) < 0) {
      operator delete(v18[0]);
    }
    sub_1010BCD7C((uint64_t *)a1);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
    std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    uint64_t v15 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Invalid web request", (uint8_t *)__p, 2u);
    }
  }
  sub_10010C0E0((uint64_t)&v36, v37);
  if (buf[24] && (char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
}

void sub_1010BA604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,char a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a27) {
    std::__shared_weak_count::__release_weak(a27);
  }
  std::__shared_weak_count::__release_weak(v57);
  sub_10010C0E0(v58 - 176, *(void **)(v58 - 168));
  if (*(unsigned char *)(v58 - 104) && *(char *)(v58 - 105) < 0) {
    operator delete(*(void **)(v58 - 128));
  }
  if (*(char *)(v58 - 129) < 0) {
    operator delete(*(void **)(v58 - 152));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010BA768(std::string *a1, uint64_t a2)
{
  uint64_t v64 = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  *(_OWORD *)int v52 = 0u;
  long long v53 = 0u;
  memset(v51, 0, sizeof(v51));
  long long v50 = 0u;
  sub_10004BD84((uint64_t)&v50);
  uint64_t v4 = *(void *)(a2 + 256);
  for (uint64_t i = *(void *)(a2 + 264); v4 != i; v4 += 24)
  {
    uint64_t v6 = sub_10004B96C(v51, (uint64_t)"&hl=", 4);
    int v7 = *(char *)(v4 + 23);
    if (v7 >= 0) {
      uint64_t v8 = v4;
    }
    else {
      uint64_t v8 = *(void *)v4;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(v4 + 23);
    }
    else {
      uint64_t v9 = *(void *)(v4 + 8);
    }
    sub_10004B96C(v6, v8, v9);
  }
  uint64_t v47 = 0;
  std::string::size_type v48 = 0;
  uint64_t v49 = 0;
  sub_100561FEC((uint64_t *)a2, &v47);
  std::operator+<char>();
  uint64_t v10 = std::string::append(&v40, "/bot?id=", 8uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v41.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (v49 >= 0) {
    unint64_t v12 = (const std::string::value_type *)&v47;
  }
  else {
    unint64_t v12 = (const std::string::value_type *)v47;
  }
  if (v49 >= 0) {
    std::string::size_type v13 = HIBYTE(v49);
  }
  else {
    std::string::size_type v13 = v48;
  }
  uint64_t v14 = std::string::append(&v41, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v42.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v42, "&ho=", 4uLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  int v18 = *(char *)(a2 + 183);
  if (v18 >= 0) {
    uint64_t v19 = (const std::string::value_type *)(a2 + 160);
  }
  else {
    uint64_t v19 = *(const std::string::value_type **)(a2 + 160);
  }
  if (v18 >= 0) {
    std::string::size_type v20 = *(unsigned __int8 *)(a2 + 183);
  }
  else {
    std::string::size_type v20 = *(void *)(a2 + 168);
  }
  uint64_t v21 = std::string::append(&v43, v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v44.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  uint64_t v25 = *(const std::string::value_type **)(a2 + 184);
  uint64_t v24 = a2 + 184;
  uint64_t v23 = v25;
  int v26 = *(char *)(v24 + 23);
  if (v26 >= 0) {
    std::string v27 = (const std::string::value_type *)v24;
  }
  else {
    std::string v27 = v23;
  }
  if (v26 >= 0) {
    std::string::size_type v28 = *(unsigned __int8 *)(v24 + 23);
  }
  else {
    std::string::size_type v28 = *(void *)(v24 + 8);
  }
  std::string v29 = std::string::append(&v44, v27, v28);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  sub_10004BC98((uint64_t)v51 + 8, __p);
  if ((v39 & 0x80u) == 0) {
    char v31 = __p;
  }
  else {
    char v31 = (void **)__p[0];
  }
  if ((v39 & 0x80u) == 0) {
    std::string::size_type v32 = v39;
  }
  else {
    std::string::size_type v32 = (std::string::size_type)__p[1];
  }
  char v33 = std::string::append(&v45, (const std::string::value_type *)v31, v32);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  uint64_t v35 = std::string::append(&v46, "&v=3", 4uLL);
  *a1 = *v35;
  v35->__r_.__value_.__l.__size_ = 0;
  v35->__r_.__value_.__r.__words[2] = 0;
  v35->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  if ((char)v39 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(v47);
  }
  *(void *)((char *)&v51[-1]
  *(void *)&v51[0] = v36;
  if (SHIBYTE(v53) < 0) {
    operator delete(v52[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1010BAB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  if (a61 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  sub_10008248C((uint64_t)&a68);
  _Unwind_Resume(a1);
}

const void **sub_1010BAC78(uint64_t a1, uint64_t a2, const std::string *a3, const std::string *a4, uint64_t a5, const std::string *a6)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_100058DB0(&__p, "X-3GPP-Intended-Identity");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  unint64_t v12 = sub_10014BECC((uint64_t **)a1, (uint64_t)&__p, (uint64_t)&unk_10144E20E, &__str);
  std::string::operator=((std::string *)((char *)v12 + 56), a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_100058DB0(&__p, "User-Agent");
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::string::size_type v13 = sub_10014BECC((uint64_t **)a1, (uint64_t)&__p, (uint64_t)&unk_10144E20E, &__str);
  if (*((char *)v13 + 79) < 0)
  {
    *((void *)v13 + 8) = 8;
    uint64_t v14 = (char *)*((void *)v13 + 7);
  }
  else
  {
    uint64_t v14 = (char *)v13 + 56;
    *((unsigned char *)v13 + 79) = 8;
  }
  strcpy(v14, "3gpp-gba");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a4[1].__r_.__value_.__s.__data_[0])
  {
    sub_100058DB0(&__p, "Authorization");
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    long long v15 = sub_10014BECC((uint64_t **)a1, (uint64_t)&__p, (uint64_t)&unk_10144E20E, &__str);
    std::string::operator=((std::string *)((char *)v15 + 56), a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v16 = *(std::__shared_weak_count **)(a2 + 8);
    std::string v42 = *(Registry **)a2;
    std::string v43 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10055FEB8(&v42, &__p);
    sub_100058DB0(&__str, "Date");
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    long long v17 = sub_10014BECC((uint64_t **)a1, (uint64_t)&__str, (uint64_t)&unk_10144E20E, &v38);
    int v18 = (void **)v17 + 7;
    if (*((char *)v17 + 79) < 0) {
      operator delete(*v18);
    }
    *(std::string *)int v18 = __p;
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (v43) {
      sub_10004D2C8(v43);
    }
    sub_100058DB0(&__p, "Accept");
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    uint64_t v19 = sub_10014BECC((uint64_t **)a1, (uint64_t)&__p, (uint64_t)&unk_10144E20E, &__str);
    if (*((char *)v19 + 79) < 0)
    {
      *((void *)v19 + 8) = 3;
      std::string::size_type v20 = (_DWORD *)*((void *)v19 + 7);
    }
    else
    {
      std::string::size_type v20 = (_DWORD *)v19 + 14;
      *((unsigned char *)v19 + 79) = 3;
    }
    _DWORD *v20 = 2764586;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  CFURLRef anURL = 0;
  int v21 = *(char *)(a5 + 23);
  if (v21 >= 0) {
    long long v22 = (const UInt8 *)a5;
  }
  else {
    long long v22 = *(const UInt8 **)a5;
  }
  if (v21 >= 0) {
    CFIndex v23 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    CFIndex v23 = *(void *)(a5 + 8);
  }
  CFURLRef v24 = CFURLCreateWithBytes(kCFAllocatorDefault, v22, v23, 0x8000100u, 0);
  CFStringRef v39 = 0;
  CFURLRef anURL = v24;
  if (v24) {
    uint64_t v25 = sub_1000FCC20;
  }
  else {
    uint64_t v25 = 0;
  }
  if (v25)
  {
    CFStringRef v26 = CFURLCopyHostName(v24);
    std::string::size_type v27 = (std::string::size_type)v39;
    CFStringRef v39 = v26;
    __p.__r_.__value_.__r.__words[0] = v27;
    sub_1000558F4((const void **)&__p.__r_.__value_.__l.__data_);
    SInt32 v28 = CFURLGetPortNumber(anURL);
    CFStringRef v29 = v39;
  }
  else
  {
    CFStringRef v29 = 0;
    SInt32 v28 = -1;
  }
  if (v29) {
    long long v30 = sub_1000810B8;
  }
  else {
    long long v30 = 0;
  }
  if (v30)
  {
    memset(&__str, 0, sizeof(__str));
    memset(&__p, 0, sizeof(__p));
    ctu::cf::assign();
    std::string __str = __p;
    if (v28 != -1)
    {
      std::to_string(&v38, v28);
      char v31 = std::string::insert(&v38, 0, ":", 1uLL);
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&__str, (const std::string::value_type *)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
    }
    sub_100058DB0(&__p, "Host");
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    uint64_t v35 = sub_10014BECC((uint64_t **)a1, (uint64_t)&__p, (uint64_t)&unk_10144E20E, &v38);
    std::string::operator=((std::string *)((char *)v35 + 56), &__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if (a6[1].__r_.__value_.__s.__data_[0])
  {
    sub_100058DB0(&__p, "If-None-Match");
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    uint64_t v36 = sub_10014BECC((uint64_t **)a1, (uint64_t)&__p, (uint64_t)&unk_10144E20E, &__str);
    std::string::operator=((std::string *)((char *)v36 + 56), a6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  sub_1000558F4((const void **)&v39);
  return sub_1000FE824((const void **)&anURL);
}

void sub_1010BB148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_1000558F4(&a16);
  sub_1000FE824(&a17);
  sub_10010C0E0(v32, *(void **)(v32 + 8));
  _Unwind_Resume(a1);
}

void sub_1010BB284(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (*(void *)(a1 + 40))
      {
        uint64_t v8 = *(void *)(v5 + 208);
        if (v8)
        {
          *(void *)(v5 + 208) = 0;
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
        uint64_t v9 = *a2;
        if (*a2)
        {
          uint64_t v10 = (std::__shared_weak_count *)a2[1];
          v12[0] = v9;
          v12[1] = v10;
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_1010BB3AC(v5, (const std::string *)(a1 + 56), v12);
          if (v10) {
            sub_10004D2C8(v10);
          }
        }
        else
        {
          long long v11 = *(NSObject **)(v5 + 32);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Invalid response received", buf, 2u);
          }
        }
      }
      sub_10004D2C8(v7);
    }
  }
}

void sub_1010BB38C(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010BB3AC(uint64_t a1, const std::string *a2, void *a3)
{
  void (***v34)(std::bad_cast *__return_ptr, void, void **);
  char v35;
  void *v36;
  int64_t v37;
  uint64_t v38;
  long long v39;
  const std::string *v40;
  time_t v41;
  const std::string *v42;
  time_t v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  long long v49;
  _OWORD *v50;
  uint64_t v51;
  uint64_t v52;
  long long v53;
  std::__shared_weak_count *v54;
  NSObject *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  NSObject *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63[2];
  uint64_t v64;
  void *v65[2];
  uint64_t v66;
  char v67;
  void *v68[2];
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  long long v79;
  long long v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  void *v84;
  void *v85[2];
  char v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  void *__p[2];
  long long v90;
  long long v91;
  long long v92;
  Registry *__dst[2];
  uint64_t v94;
  std::bad_cast v95[2];
  char v96;
  uint8_t buf[16];
  unsigned char v98[64];
  void *v99[2];
  long long v100;
  long long v101;
  long long v102;
  long long v103;
  uint64_t v104;
  const void *v105[4];
  uint64_t v106;
  char v107;

  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
  int v7 = (std::__shared_weak_count *)a3[1];
  xpc_object_t v87 = *a3;
  xpc_object_t v88 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10056146C(v6, (uint64_t)&v87, (std::string::size_type)a2);
  if (v88) {
    sub_10004D2C8(v88);
  }
  int v8 = (*(uint64_t (**)(void))(*(void *)*a3 + 24))();
  uint64_t v9 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Received response: %d", buf, 8u);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 104);
  if (v10)
  {
    long long v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 96);
      if (v12)
      {
        if (v8 <= 400)
        {
          if (v8 == 200)
          {
            (*(void (**)(void **__return_ptr))(*(void *)*a3 + 48))(v85);
            (*(void (**)(uint64_t *__return_ptr))(*(void *)*a3 + 56))(&v83);
            bzero(v68, 0x2B8uLL);
            long long v17 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
            sub_100F30B98((Registry **)(a1 + 80), v17, (uint64_t *)v85, (uint64_t)v68);
            int v18 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              if (v82) {
                uint64_t v19 = "OK";
              }
              else {
                uint64_t v19 = "Failed";
              }
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v19;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I JSON parsing status: %s", buf, 0xCu);
            }
            sub_100058DB0(buf, "Cache-Control");
            std::string::size_type v20 = (void **)sub_10014C044((uint64_t)&v83, (uint64_t)buf);
            if ((v98[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (&v84 != v20)
            {
              uint64_t v91 = 0u;
              std::string v92 = 0u;
              *(_OWORD *)std::string __p = 0u;
              long long v90 = 0u;
              sub_10056D028((std::locale *)__p, ".*max-age.*(\\d+).*", 0);
            }
            char v37 = 86400;
            memset(buf, 0, sizeof(buf));
            *(void *)uint64_t v98 = 0;
            sub_100058DB0(__p, "Cache-Control");
            std::string v38 = sub_1010BE5A0((uint64_t)&v83, (uint64_t)__p);
            if (*(char *)(v38 + 23) < 0)
            {
              sub_10004FC84(buf, *(void **)v38, *(void *)(v38 + 8));
            }
            else
            {
              CFStringRef v39 = *(_OWORD *)v38;
              *(void *)uint64_t v98 = *(void *)(v38 + 16);
              *(_OWORD *)long long buf = v39;
            }
            if (SBYTE7(v90) < 0) {
              operator delete(__p[0]);
            }
            sub_100058DB0(__p, "Date");
            std::string v40 = (const std::string *)sub_1010BE5A0((uint64_t)&v83, (uint64_t)__p);
            sub_100058DB0(v95, "%a, %d %b %Y %H:%M:%S %Z");
            std::string v41 = sub_100560500(v40);
            if (v96 < 0) {
              operator delete(v95[0].__vftable);
            }
            if (SBYTE7(v90) < 0) {
              operator delete(__p[0]);
            }
            sub_100058DB0(__p, "Expires");
            std::string v42 = (const std::string *)sub_1010BE5A0((uint64_t)&v83, (uint64_t)__p);
            sub_100058DB0(v95, "%a, %d %b %Y %H:%M:%S %Z");
            std::string v43 = sub_100560500(v42);
            if (v96 < 0) {
              operator delete(v95[0].__vftable);
            }
            if (SBYTE7(v90) < 0) {
              operator delete(__p[0]);
            }
            std::string v44 = v43 - v41;
            if (v43 <= v41 || v44 >= 86400)
            {
              uint64_t v47 = 0;
              std::string v46 = 0;
              std::string v45 = 1;
            }
            else
            {
              std::string v45 = 0;
              std::string v46 = v44 & 0xFFFFFFFFFFFFFF00;
              uint64_t v47 = v44;
            }
            if ((v98[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (!v45) {
              char v37 = v46 | v47;
            }
            memset(buf, 0, sizeof(buf));
            *(void *)uint64_t v98 = 0;
            sub_100058DB0(__p, "Etag");
            std::string::size_type v48 = sub_1010BE5A0((uint64_t)&v83, (uint64_t)__p);
            if (*(char *)(v48 + 23) < 0)
            {
              sub_10004FC84(buf, *(void **)v48, *(void *)(v48 + 8));
            }
            else
            {
              uint64_t v49 = *(_OWORD *)v48;
              *(void *)uint64_t v98 = *(void *)(v48 + 16);
              *(_OWORD *)long long buf = v49;
            }
            if (SBYTE7(v90) < 0) {
              operator delete(__p[0]);
            }
            if ((v98[7] & 0x80000000) != 0)
            {
              sub_10004FC84(v65, *(void **)buf, *(unint64_t *)&buf[8]);
              xpc_object_t v67 = 1;
              if ((v98[7] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
            else
            {
              *(_OWORD *)xpc_object_t v65 = *(_OWORD *)buf;
              xpc_object_t v66 = *(void *)v98;
              xpc_object_t v67 = 1;
            }
            long long v50 = (_OWORD *)(a1 + 216);
            int v51 = *(void *)(a1 + 112);
            if (*(char *)(a1 + 239) < 0)
            {
              sub_10004FC84(__p, *(void **)(a1 + 216), *(void *)(a1 + 224));
            }
            else
            {
              *(_OWORD *)std::string __p = *v50;
              *(void *)&long long v90 = *(void *)(a1 + 232);
            }
            sub_100178D18(buf, (uint64_t)__p);
            sub_100058DB0(v95, "render_info");
            sub_100B18E6C(v51, (uint64_t)buf, (uint64_t)v95, (uint64_t)v85, v37, 1);
            if (v96 < 0) {
              operator delete(v95[0].__vftable);
            }
            if ((v98[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (SBYTE7(v90) < 0) {
              operator delete(__p[0]);
            }
            if (v67)
            {
              int v52 = *(void *)(a1 + 112);
              if (*(char *)(a1 + 239) < 0)
              {
                sub_10004FC84(__dst, *(void **)(a1 + 216), *(void *)(a1 + 224));
              }
              else
              {
                *(_OWORD *)long long __dst = *v50;
                long long v94 = *(void *)(a1 + 232);
              }
              sub_100178D18(buf, (uint64_t)__dst);
              sub_100058DB0(v95, "etag");
              if (!v67) {
                sub_10016C840();
              }
              sub_100B18E6C(v52, (uint64_t)buf, (uint64_t)v95, (uint64_t)v65, v37, 1);
              if (v96 < 0) {
                operator delete(v95[0].__vftable);
              }
              if ((v98[7] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              if (SHIBYTE(v94) < 0) {
                operator delete(__dst[0]);
              }
              if (v67 && SHIBYTE(v66) < 0) {
                operator delete(v65[0]);
              }
            }
            bzero(buf, 0x348uLL);
            sub_1001789C8((char *)buf, (long long *)(a1 + 216));
            uint64_t v101 = 0uLL;
            *(void *)&long long v102 = 0;
            sub_100178B9C((char *)&v101, *(long long **)(a1 + 328), *(long long **)(a1 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 3));
            BYTE8(v102) = 0;
            BYTE12(v102) = 0;
            sub_1001F7284(&v103, (uint64_t)v68);
            sub_1001F41B8(v12, *(unsigned int *)(a1 + 48), (uint64_t)buf);
            sub_1001FA0E0((uint64_t)&v103);
            __p[0] = &v101;
            sub_100047F64((void ***)__p);
            if (SHIBYTE(v100) < 0) {
              operator delete(v99[1]);
            }
            if (LOBYTE(v99[0]))
            {
              __p[0] = &v98[40];
              sub_100047F64((void ***)__p);
            }
            if ((v98[31] & 0x80000000) != 0) {
              operator delete(*(void **)&v98[8]);
            }
            if ((v98[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            sub_1001FA0E0((uint64_t)v68);
            sub_10010C0E0((uint64_t)&v83, v84);
            if ((v86 & 0x80000000) == 0) {
              goto LABEL_135;
            }
            uint64_t v36 = v85[0];
            goto LABEL_134;
          }
          if (v8 == 304)
          {
            std::string::size_type v13 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Searching complete with response: 304", buf, 2u);
            }
            bzero(buf, 0x348uLL);
            sub_1001789C8((char *)buf, (long long *)(a1 + 216));
            uint64_t v101 = 0uLL;
            *(void *)&long long v102 = 0;
            sub_100178B9C((char *)&v101, *(long long **)(a1 + 328), *(long long **)(a1 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 3));
            BYTE8(v102) = 0;
            BYTE12(v102) = 0;
            LOBYTE(v103) = 0;
            long long v107 = 0;
            uint64_t v14 = *(os_log_t **)(a1 + 112);
            if (*(char *)(a1 + 239) < 0)
            {
              sub_10004FC84(v63, *(void **)(a1 + 216), *(void *)(a1 + 224));
            }
            else
            {
              *(_OWORD *)long long v63 = *(_OWORD *)(a1 + 216);
              uint64_t v64 = *(void *)(a1 + 232);
            }
            sub_100178D18(v68, (uint64_t)v63);
            sub_100058DB0(__p, "etag");
            sub_100B8BC40(v14, (uint64_t)v68, (uint64_t)__p);
            if (SBYTE7(v90) < 0) {
              operator delete(__p[0]);
            }
            if (SBYTE7(v69) < 0) {
              operator delete(v68[0]);
            }
            if (SHIBYTE(v64) < 0) {
              operator delete(v63[0]);
            }
            sub_1001F41B8(v12, *(unsigned int *)(a1 + 48), (uint64_t)buf);
            goto LABEL_63;
          }
          goto LABEL_24;
        }
        if (v8 == 404)
        {
          int v21 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed searching for chatbot: 404", buf, 2u);
          }
          goto LABEL_38;
        }
        if (v8 != 401
          || ((*(uint64_t (**)(void, void))(**(void **)(a1 + 160) + 8))(*(void *)(a1 + 160), *(unsigned int *)(a1 + 48)) & 1) != 0)
        {
LABEL_24:
          uint64_t v16 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v8;
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed searching for chatbot, unhandled response: %d", buf, 8u);
          }
LABEL_38:
          bzero(buf, 0x348uLL);
          sub_1001789C8((char *)buf, (long long *)(a1 + 216));
          uint64_t v101 = 0uLL;
          *(void *)&long long v102 = 0;
          sub_100178B9C((char *)&v101, *(long long **)(a1 + 328), *(long long **)(a1 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 3));
          DWORD2(v102) = 3;
          BYTE12(v102) = 1;
          LOBYTE(v103) = 0;
          long long v107 = 0;
          sub_1001F41B8(v12, *(unsigned int *)(a1 + 48), (uint64_t)buf);
LABEL_63:
          sub_1001FA0E0((uint64_t)&v103);
          v68[0] = &v101;
          sub_100047F64((void ***)v68);
          if (SHIBYTE(v100) < 0) {
            operator delete(v99[1]);
          }
          if (LOBYTE(v99[0]))
          {
            v68[0] = &v98[40];
            sub_100047F64((void ***)v68);
          }
          if ((v98[31] & 0x80000000) != 0) {
            operator delete(*(void **)&v98[8]);
          }
          if ((v98[7] & 0x80000000) == 0) {
            goto LABEL_135;
          }
          uint64_t v36 = *(void **)buf;
LABEL_134:
          operator delete(v36);
LABEL_135:
          sub_1010BD110(a1);
          goto LABEL_136;
        }
        long long v22 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Received 401 response. Starting GBA auth...", buf, 2u);
        }
        uint64_t v24 = *a3;
        CFIndex v23 = (std::__shared_weak_count *)a3[1];
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        xpc_object_t v81 = 0;
        uint64_t v79 = 0u;
        xpc_object_t v80 = 0u;
        xpc_object_t v77 = 0u;
        long long v78 = 0u;
        xpc_object_t v75 = 0u;
        xpc_object_t v76 = 0u;
        char v73 = 0u;
        xpc_object_t v74 = 0u;
        long long v71 = 0u;
        uint64_t v72 = 0u;
        xpc_object_t v69 = 0u;
        uint64_t v70 = 0u;
        *(_OWORD *)xpc_object_t v68 = 0u;
        uint64_t v25 = *(void *)(a1 + 88);
        __dst[0] = *(Registry **)(a1 + 80);
        __dst[1] = (Registry *)v25;
        if (v25) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
        }
        if (v23) {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v104 = 0;
        uint64_t v106 = 0;
        uint64_t v103 = 0uLL;
        long long v102 = 0uLL;
        uint64_t v101 = 0uLL;
        v100 = 0uLL;
        *(_OWORD *)uint64_t v99 = 0uLL;
        *(_OWORD *)long long buf = 0uLL;
        memset(v98, 0, sizeof(v98));
        HIDWORD(v101) = 3;
        memset(v105, 0, sizeof(v105));
        __p[1] = 0;
        __p[0] = 0;
        *(void *)&long long v90 = 0;
        PersonalityIdFromSlotId();
        ServiceMap = (std::mutex *)Registry::getServiceMap(__dst[0]);
        std::string::size_type v27 = ServiceMap;
        if (v28 < 0)
        {
          CFStringRef v29 = (unsigned __int8 *)(v28 & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v30 = 5381;
          do
          {
            uint64_t v28 = v30;
            unsigned int v31 = *v29++;
            uint64_t v30 = (33 * v30) ^ v31;
          }
          while (v31);
        }
        std::mutex::lock(ServiceMap);
        v95[0].__vftable = (std::bad_cast_vtbl *)v28;
        uint64_t v32 = sub_10004D37C(&v27[1].__m_.__sig, (unint64_t *)v95);
        if (v32)
        {
          long long v34 = (void (***)(std::bad_cast *__return_ptr, void, void **))v32[3];
          char v33 = (std::__shared_weak_count *)v32[4];
          if (v33)
          {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            std::mutex::unlock(v27);
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v33);
            uint64_t v35 = 0;
            goto LABEL_139;
          }
        }
        else
        {
          long long v34 = 0;
        }
        std::mutex::unlock(v27);
        char v33 = 0;
        uint64_t v35 = 1;
LABEL_139:
        if (v34)
        {
          (**v34)(v95, v34, __p);
          long long v53 = *(_OWORD *)&v95[0].__vftable;
          v95[1].__vftable = 0;
          v95[0].__vftable = 0;
          long long v54 = *(std::__shared_weak_count **)&buf[8];
          *(_OWORD *)long long buf = v53;
          if (v54)
          {
            sub_10004D2C8(v54);
            if (v95[1].__vftable) {
              sub_10004D2C8((std::__shared_weak_count *)v95[1].__vftable);
            }
          }
          std::string::operator=((std::string *)v98, (const std::string *)(a1 + 448));
          if (&v98[24] != (unsigned char *)(a1 + 424)) {
            sub_10005CA3C((uint64_t)&v98[24], *(std::string **)(a1 + 424), *(long long **)(a1 + 432), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 432) - *(void *)(a1 + 424)) >> 3));
          }
          if (*(unsigned char *)(a1 + 496))
          {
            v95[0].__vftable = (std::bad_cast_vtbl *)kCTDataConnectionServiceTypeInternet;
            sub_100013168(v105, (CFTypeRef *)&v95[0].__vftable);
          }
          std::string::operator=((std::string *)&v105[1], *(const std::string **)buf);
          BYTE4(v102) = 0;
          HIDWORD(v101) = 0;
          std::string::operator=((std::string *)&v100, a2);
          LOWORD(v106) = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 80))(v24);
          LODWORD(v102) = 8080;
          LOBYTE(v68[0]) = 1;
          sub_1007DC70C((uint64_t)&v68[1], (uint64_t)buf);
        }
        else
        {
          LOBYTE(v68[0]) = 0;
          sub_1007DC70C((uint64_t)&v68[1], (uint64_t)buf);
        }
        if ((v35 & 1) == 0) {
          sub_10004D2C8(v33);
        }
        if (SBYTE7(v90) < 0) {
          operator delete(__p[0]);
        }
        sub_1007DC910((uint64_t)buf);
        if (v23) {
          sub_10004D2C8(v23);
        }
        if (__dst[1]) {
          sub_10004D2C8((std::__shared_weak_count *)__dst[1]);
        }
        if (LOBYTE(v68[0]))
        {
          long long v55 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#I GBA auth will be started...", buf, 2u);
          }
          goto LABEL_178;
        }
        long long v56 = *(std::__shared_weak_count **)(a1 + 104);
        if (v56)
        {
          long long v57 = std::__shared_weak_count::lock(v56);
          if (v57)
          {
            long long v58 = *(void *)(a1 + 96);
            if (v58)
            {
              long long v59 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
              if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "Failed creating env", buf, 2u);
              }
              bzero(buf, 0x348uLL);
              sub_1001789C8((char *)buf, (long long *)(a1 + 216));
              uint64_t v101 = 0uLL;
              *(void *)&long long v102 = 0;
              sub_100178B9C((char *)&v101, *(long long **)(a1 + 328), *(long long **)(a1 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 336) - *(void *)(a1 + 328)) >> 3));
              DWORD2(v102) = 3;
              BYTE12(v102) = 1;
              LOBYTE(v103) = 0;
              long long v107 = 0;
              sub_1001F41B8(v58, *(unsigned int *)(a1 + 48), (uint64_t)buf);
              sub_1010BD110(a1);
              sub_1001FA0E0((uint64_t)&v103);
              __p[0] = &v101;
              sub_100047F64((void ***)__p);
              if (SHIBYTE(v100) < 0) {
                operator delete(v99[1]);
              }
              if (LOBYTE(v99[0]))
              {
                __p[0] = &v98[40];
                sub_100047F64((void ***)__p);
              }
              if ((v98[31] & 0x80000000) != 0) {
                operator delete(*(void **)&v98[8]);
              }
              if ((v98[7] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              sub_10004D2C8(v57);
              goto LABEL_179;
            }
          }
        }
        else
        {
          long long v57 = 0;
        }
        long long v60 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "Failed to find client during GBA auth", buf, 2u);
          if (!v57) {
            goto LABEL_178;
          }
        }
        else if (!v57)
        {
LABEL_178:
          long long v61 = *(void *)(a1 + 160);
          long long v62 = *(unsigned int *)(a1 + 48);
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v24 + 56))(__p, v24);
          *(void *)long long buf = _NSConcreteStackBlock;
          *(void *)&uint8_t buf[8] = 0x40000000;
          *(void *)uint64_t v98 = sub_1010BD1C4;
          *(void *)&v98[8] = &unk_101A88138;
          *(void *)&v98[16] = a1;
          (*(void (**)(uint64_t, uint64_t, void **, void **, uint8_t *))(*(void *)v61 + 16))(v61, v62, &v68[1], __p, buf);
          sub_10010C0E0((uint64_t)__p, (void *)__p[1]);
LABEL_179:
          sub_1007DC910((uint64_t)&v68[1]);
          if (v23) {
            sub_10004D2C8(v23);
          }
          goto LABEL_136;
        }
        sub_10004D2C8(v57);
        goto LABEL_178;
      }
    }
  }
  else
  {
    long long v11 = 0;
  }
  long long v15 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
  if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    if (!v11) {
      return;
    }
LABEL_136:
    sub_10004D2C8(v11);
    return;
  }
  *(_WORD *)long long buf = 0;
  _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to find client while handling response", buf, 2u);
  if (v11) {
    goto LABEL_136;
  }
}

void sub_1010BC81C(_Unwind_Exception *a1)
{
  sub_10016FEBC((uint64_t)&STACK[0x3F0]);
  sub_10004D2C8(v4);
  sub_1007DC910(v3);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_1010BCCA8(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = a1 + 7;
  if (*(char *)(a2 + 79) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  a1[9] = *(void *)(a2 + 72);
  *(_OWORD *)__n128 result = v5;
  return result;
}

void sub_1010BCD10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010BCD28(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1010BCD7C(uint64_t *a1)
{
  uint64_t v2 = a1[26];
  if (v2)
  {
    a1[26] = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  Registry::getTimerService(&v14, (Registry *)a1[10]);
  uint64_t v3 = v14;
  sub_100058DB0(v12, "Operation timeout timer");
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || (uint64_t v5 = *a1, (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  int v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v6);
  *(_OWORD *)std::string __p = *(_OWORD *)v12;
  uint64_t v18 = v13;
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  std::string::size_type v20 = 0;
  int v8 = operator new(0x20uLL);
  void *v8 = off_101A881A8;
  v8[1] = a1;
  v8[2] = v5;
  v8[3] = v7;
  std::string::size_type v20 = v8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, uint64_t, uint64_t, void, void *))(*(void *)v3 + 40))(&v16, v3, __p, 2, 30000000, 0, v19);
  sub_10003B34C(v19);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v9 = v16;
  uint64_t v16 = 0;
  uint64_t v10 = a1[26];
  a1[26] = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v11 = v16;
    uint64_t v16 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (v15) {
    sub_10004D2C8(v15);
  }
}

void sub_1010BCF80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a16) {
    sub_10004D2C8(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1010BCFE8(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a1[5])
      {
        uint64_t v8 = *(void *)(v5 + 208);
        if (v8)
        {
          *(void *)(v5 + 208) = 0;
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
        uint64_t v9 = *a2;
        if (*a2)
        {
          uint64_t v10 = (std::__shared_weak_count *)a2[1];
          v12[0] = v9;
          v12[1] = v10;
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_1010BB3AC(v5, a1 + 7, v12);
          if (v10) {
            sub_10004D2C8(v10);
          }
        }
        else
        {
          uint64_t v11 = *(NSObject **)(v5 + 32);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Invalid response received", buf, 2u);
          }
        }
      }
      sub_10004D2C8(v7);
    }
  }
}

void sub_1010BD0F0(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010BD110(uint64_t a1)
{
  (***(void (****)(void, void))(a1 + 160))(*(void *)(a1 + 160), *(unsigned int *)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 200);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t result = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

void sub_1010BD1C4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v5 + 40) + 16))(*(void *)(v5 + 40), *(unsigned int *)(v5 + 48));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = (void *)(v5 + 216);
    if (*(char *)(v5 + 239) < 0) {
      int v7 = (void *)*v7;
    }
    uint64_t v8 = "false";
    if (a2) {
      uint64_t v8 = "true";
    }
    int v9 = *(char *)(a3 + 23);
    uint64_t v10 = *(void **)a3;
    *(_DWORD *)long long buf = 136446722;
    if (v9 >= 0) {
      uint64_t v11 = (void *)a3;
    }
    else {
      uint64_t v11 = v10;
    }
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v8;
    *(_WORD *)&unsigned char buf[22] = 2082;
    long long v22 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I GBA Auth status for:[%{public}s] : [%s][%{public}s]", buf, 0x20u);
  }
  if (a2)
  {
    *(void *)long long buf = v5;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_10004FC84(&buf[8], *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)a3;
      long long v22 = *(void **)(a3 + 16);
    }
    uint64_t v14 = *(std::__shared_weak_count **)(v5 + 8);
    if (v14)
    {
      if (std::__shared_weak_count::lock(v14)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v12 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v5 + 40) + 16))(*(void *)(v5 + 40), *(unsigned int *)(v5 + 48));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I GBA auth failure", buf, 2u);
  }
  if (*(unsigned char *)(v5 + 152))
  {
    uint64_t v13 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v5 + 40) + 16))(*(void *)(v5 + 40), *(unsigned int *)(v5 + 48));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Resetting existing auth parameters and trying again.", buf, 2u);
    }
    if (*(unsigned char *)(v5 + 152))
    {
      if (*(char *)(v5 + 151) < 0) {
        operator delete(*(void **)(v5 + 128));
      }
      *(unsigned char *)(v5 + 152) = 0;
    }
    (***(void (****)(void, void))(v5 + 160))(*(void *)(v5 + 160), *(unsigned int *)(v5 + 48));
    sub_1010BA080(v5);
  }
  else
  {
    long long v15 = *(std::__shared_weak_count **)(v5 + 104);
    if (v15)
    {
      uint64_t v16 = std::__shared_weak_count::lock(v15);
      if (v16)
      {
        long long v17 = v16;
        uint64_t v18 = *(void *)(v5 + 96);
        if (v18)
        {
          uint64_t v19 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v5 + 40) + 16))(*(void *)(v5 + 40), *(unsigned int *)(v5 + 48));
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed searching for chatbot", buf, 2u);
          }
          bzero(buf, 0x348uLL);
          sub_1001789C8(buf, (long long *)(v5 + 216));
          memset(v27, 0, sizeof(v27));
          sub_100178B9C((char *)v27, *(long long **)(v5 + 328), *(long long **)(v5 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 336) - *(void *)(v5 + 328)) >> 3));
          int v28 = 2;
          char v29 = 1;
          v30[0] = 0;
          v30[688] = 0;
          sub_1001F41B8(v18, *(unsigned int *)(v5 + 48), (uint64_t)buf);
          sub_1001FA0E0((uint64_t)v30);
          std::string::size_type v20 = (void **)v27;
          sub_100047F64(&v20);
          if (v26 < 0) {
            operator delete(__p);
          }
          if (v24[24])
          {
            std::string::size_type v20 = (void **)v24;
            sub_100047F64(&v20);
          }
          if (v23 < 0) {
            operator delete(v22);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        sub_10004D2C8(v17);
      }
    }
  }
}

void sub_1010BD6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  sub_1001FA0E0(v34);
  sub_100047F64((void ***)&a10);
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a27)
  {
    a10 = &a24;
    sub_100047F64((void ***)&a10);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_10004D2C8(v33);
  _Unwind_Resume(a1);
}

void sub_1010BD74C(uint64_t a1, uint64_t a2)
{
  sub_1010BE5E4((uint64_t)&v4, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010BD85C(uint64_t a1@<X0>, long long *a2@<X1>, unsigned char *a3@<X8>)
{
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __dst = *a2;
    uint64_t v13 = *((void *)a2 + 2);
  }
  sub_100178D18(v14, (uint64_t)&__dst);
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)__dst);
  }
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v11 = 0;
  sub_100058DB0(v10, "render_info");
  long long v8 = 0u;
  long long v9 = 0u;
  sub_100B18DB4(*(os_log_t **)(a1 + 112), (uint64_t)v14, (uint64_t)v10, &v8);
  if (BYTE8(v9))
  {
    unsigned __int16 v5 = sub_100B8B858(*(void *)(a1 + 112), (uint64_t)v14, (uint64_t)v10);
    bzero(v7, 0x2B8uLL);
    if (!BYTE8(v9)) {
      sub_10016C840();
    }
    uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
    sub_100F30B98((Registry **)(a1 + 80), v6, (uint64_t *)&v8, (uint64_t)v7);
    if (v5 > 0xFFu) {
      *a3 = v5 ^ 1;
    }
    else {
      *a3 = 0;
    }
    sub_1001F7284(a3 + 8, (uint64_t)v7);
    sub_1001FA0E0((uint64_t)v7);
    if (BYTE8(v9) && SBYTE7(v9) < 0) {
      operator delete((void *)v8);
    }
  }
  else
  {
    *a3 = 0;
    a3[8] = 0;
    a3[696] = 0;
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_1010BDA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001FA0E0((uint64_t)va);
  if (*(unsigned char *)(v2 - 120) && *(char *)(v2 - 121) < 0) {
    operator delete(*(void **)(v2 - 144));
  }
  if (*(char *)(v2 - 81) < 0) {
    operator delete(*(void **)(v2 - 104));
  }
  if (*(char *)(v2 - 33) < 0) {
    operator delete(*(void **)(v2 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010BDA98(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      unsigned __int16 v5 = (uint64_t *)a2;
    }
    else {
      unsigned __int16 v5 = *(uint64_t **)a2;
    }
    int v9 = 136446210;
    uint64_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Adding operation ID: %{public}s", (uint8_t *)&v9, 0xCu);
  }
  uint64_t v6 = (uint64_t *)(a1 + 328);
  unint64_t v7 = *(void *)(a1 + 336);
  if (v7 >= *(void *)(a1 + 344))
  {
    uint64_t result = sub_1001796EC(v6, a2);
  }
  else
  {
    sub_10017968C(v6, a2);
    uint64_t result = v7 + 24;
  }
  *(void *)(a1 + 336) = result;
  return result;
}

void sub_1010BDBA4(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 152))
    {
      uint64_t v3 = (const char *)(a1 + 128);
      if (*(char *)(a1 + 151) < 0) {
        uint64_t v3 = *(const char **)v3;
      }
    }
    else
    {
      uint64_t v3 = "(null)";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Auth parameters: %{public}s", buf, 0xCu);
  }
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int16 v5 = "YES";
    if (*(void *)(a1 + 160)) {
      uint64_t v6 = "YES";
    }
    else {
      uint64_t v6 = "NO";
    }
    uint64_t v7 = *(void *)(a1 + 192);
    if (*(void *)(a1 + 176)) {
      long long v8 = "YES";
    }
    else {
      long long v8 = "NO";
    }
    *(_DWORD *)long long buf = 136446722;
    if (!v7) {
      unsigned __int16 v5 = "NO";
    }
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v8;
    *(_WORD *)&unsigned char buf[22] = 2082;
    *(void *)&unsigned char buf[24] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I GBA helper: %{public}s, Web-req: %{public}s, Web-req auth: %{public}s", buf, 0x20u);
  }
  int v9 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void *)(a1 + 208)) {
      uint64_t v10 = "YES";
    }
    else {
      uint64_t v10 = "NO";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Timeout timer: %{public}s", buf, 0xCu);
  }
  uint64_t v11 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v65 = 0;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    *(_OWORD *)long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v50 = 0u;
    memset(buf, 0, sizeof(buf));
    sub_10004BD84((uint64_t)buf);
    uint64_t v12 = sub_10004B96C(&buf[16], (uint64_t)"[destination: ", 14);
    int v13 = *(char *)(a1 + 239);
    if (v13 >= 0) {
      uint64_t v14 = a1 + 216;
    }
    else {
      uint64_t v14 = *(void *)(a1 + 216);
    }
    if (v13 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(a1 + 239);
    }
    else {
      uint64_t v15 = *(void *)(a1 + 224);
    }
    uint64_t v16 = sub_10004B96C(v12, v14, v15);
    long long v17 = sub_10004B96C(v16, (uint64_t)", fqdn root: ", 13);
    int v18 = *(char *)(a1 + 375);
    if (v18 >= 0) {
      uint64_t v19 = a1 + 352;
    }
    else {
      uint64_t v19 = *(void *)(a1 + 352);
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(a1 + 375);
    }
    else {
      uint64_t v20 = *(void *)(a1 + 360);
    }
    int v21 = sub_10004B96C(v17, v19, v20);
    long long v22 = sub_10004B96C(v21, (uint64_t)", mcc: ", 7);
    int v23 = *(char *)(a1 + 399);
    if (v23 >= 0) {
      uint64_t v24 = a1 + 376;
    }
    else {
      uint64_t v24 = *(void *)(a1 + 376);
    }
    if (v23 >= 0) {
      uint64_t v25 = *(unsigned __int8 *)(a1 + 399);
    }
    else {
      uint64_t v25 = *(void *)(a1 + 384);
    }
    char v26 = sub_10004B96C(v22, v24, v25);
    std::string::size_type v27 = sub_10004B96C(v26, (uint64_t)", mnc: ", 7);
    int v28 = *(char *)(a1 + 423);
    if (v28 >= 0) {
      uint64_t v29 = a1 + 400;
    }
    else {
      uint64_t v29 = *(void *)(a1 + 400);
    }
    if (v28 >= 0) {
      uint64_t v30 = *(unsigned __int8 *)(a1 + 423);
    }
    else {
      uint64_t v30 = *(void *)(a1 + 408);
    }
    unsigned int v31 = sub_10004B96C(v27, v29, v30);
    uint64_t v32 = sub_10004B96C(v31, (uint64_t)", impus: ", 9);
    sub_100062B40(*(std::string **)(a1 + 424), *(std::string **)(a1 + 432), ",", 1uLL, &v48);
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v33 = &v48;
    }
    else {
      char v33 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v48.__r_.__value_.__l.__size_;
    }
    uint64_t v35 = sub_10004B96C(v32, (uint64_t)v33, size);
    uint64_t v36 = sub_10004B96C(v35, (uint64_t)", impi: ", 8);
    int v37 = *(char *)(a1 + 471);
    if (v37 >= 0) {
      uint64_t v38 = a1 + 448;
    }
    else {
      uint64_t v38 = *(void *)(a1 + 448);
    }
    if (v37 >= 0) {
      uint64_t v39 = *(unsigned __int8 *)(a1 + 471);
    }
    else {
      uint64_t v39 = *(void *)(a1 + 456);
    }
    std::string v40 = sub_10004B96C(v36, v38, v39);
    std::string v41 = sub_10004B96C(v40, (uint64_t)", languages: ", 13);
    sub_100062B40(*(std::string **)(a1 + 472), *(std::string **)(a1 + 480), ",", 1uLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = __p.__r_.__value_.__l.__size_;
    }
    std::string v44 = sub_10004B96C(v41, (uint64_t)p_p, v43);
    sub_10004B96C(v44, (uint64_t)"]", 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    sub_10004BC98((uint64_t)&buf[24], &v48);
    *(void *)&uint8_t buf[16] = v45;
    if (SHIBYTE(v54) < 0) {
      operator delete(v53[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    std::string v46 = &v48;
    if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v46 = (std::string *)v48.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v46;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Search param: %{public}s", buf, 0xCu);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1010BE1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_10008248C((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_1010BE1FC(char **a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  int v5 = *v3;
  if (v5 == 45 || v5 == 43) {
    *a1 = ++v3;
  }
  v31[0] = 0;
  uint64_t v32 = 1;
  char v33 = &v36;
  uint64_t v34 = v3;
  if (v3 <= v2 - 1 && (int v6 = *(v2 - 1), (v6 - 58) >= 0xFFFFFFF6))
  {
    uint64_t v10 = v2 - 2;
    uint64_t v35 = v2 - 2;
    uint64_t v36 = (v6 - 48);
    v40.__locale_ = 0;
    std::locale::locale(&v40);
    uint64_t v11 = std::locale::classic();
    if (std::locale::operator==(&v40, v11))
    {
      int v8 = sub_1010BE4E4((uint64_t)v31);
    }
    else
    {
      uint64_t v12 = std::locale::use_facet(&v40, &std::numpunct<char>::id);
      ((void (*)(void **__return_ptr))v12->__vftable[1].__on_zero_shared)(&__p);
      if ((char)v39 < 0)
      {
        uint64_t v13 = v38;
        if (!v38) {
          goto LABEL_46;
        }
        p_p = (char *)__p;
      }
      else
      {
        uint64_t v13 = v39;
        if (!v39) {
          goto LABEL_46;
        }
        p_p = (char *)&__p;
      }
      if (*p_p < 1)
      {
LABEL_46:
        int v8 = sub_1010BE4E4((uint64_t)v31);
        unsigned __int8 v16 = v39;
      }
      else
      {
        char v15 = ((uint64_t (*)(const std::locale::facet *))v12->__vftable[1].~facet_0)(v12);
        unsigned __int8 v16 = v39;
        if (v10 >= v3)
        {
          char v17 = 0;
          unsigned __int8 v18 = 0;
          uint64_t v20 = v36;
          uint64_t v19 = __p;
          if ((v39 & 0x80u) == 0) {
            uint64_t v19 = &__p;
          }
          char v21 = *v19 - 1;
          unint64_t v22 = 1;
          do
          {
            if (v21)
            {
              if (v17) {
                BOOL v23 = 1;
              }
              else {
                BOOL v23 = v22 > 0x1999999999999999;
              }
              char v17 = v23;
              uint64_t v24 = *v10;
              if ((v24 - 58) < 0xF6u
                || (v22 *= 10, unint64_t v25 = v24 - 48, v26 = v22 * (v24 - 48), v25)
                && ((v17 & 1) != 0
                 || ((BOOL v27 = (v25 * (unsigned __int128)v22) >> 64 != 0, !__CFADD__(v26, v20)) ? (v28 = 0) : (v28 = 1),
                     v27 || (v28 & 1) != 0)))
              {
LABEL_44:
                int v8 = 0;
                goto LABEL_47;
              }
              v20 += v26;
              uint64_t v36 = v20;
              --v21;
            }
            else
            {
              if (*v10 != v15)
              {
                v31[0] = v17;
                uint64_t v32 = v22;
                uint64_t v35 = v10;
                goto LABEL_46;
              }
              if (v10 == v3) {
                goto LABEL_44;
              }
              if (v13 - 1 > (unint64_t)v18) {
                ++v18;
              }
              char v21 = v19[v18];
            }
            --v10;
          }
          while (v10 >= v3);
        }
        int v8 = 1;
      }
LABEL_47:
      if ((v16 & 0x80) != 0) {
        operator delete(__p);
      }
    }
    std::locale::~locale(&v40);
    uint64_t v7 = v36;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 0;
  }
  if (v7 >= 0) {
    unsigned int v29 = v8;
  }
  else {
    unsigned int v29 = 0;
  }
  if ((unint64_t)v7 < 0x8000000000000001) {
    unsigned int v30 = v8;
  }
  else {
    unsigned int v30 = 0;
  }
  if (v5 == 45)
  {
    uint64_t v7 = -v7;
    uint64_t result = v30;
  }
  else
  {
    uint64_t result = v29;
  }
  *a2 = v7;
  return result;
}

void sub_1010BE4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::locale::~locale((std::locale *)(v20 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1010BE4E4(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(char **)(a1 + 32);
  if ((unint64_t)v2 < v1) {
    return 1;
  }
  char v4 = *(unsigned char *)a1 != 0;
  while (1)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    v4 |= v5 > 0x1999999999999999;
    *(unsigned char *)a1 = v4 & 1;
    unint64_t v6 = 10 * v5;
    *(void *)(a1 + 8) = 10 * v5;
    uint64_t v7 = *v2;
    if ((v7 - 58) < 0xF6u) {
      break;
    }
    unint64_t v8 = v7 - 48;
    uint64_t v9 = v6 * (v7 - 48);
    if (v8)
    {
      if (v4) {
        return 0;
      }
      if (!is_mul_ok(v8, v6)) {
        return 0;
      }
      uint64_t v10 = *(void **)(a1 + 16);
      uint64_t v11 = *v10;
      if (__CFADD__(v9, *v10)) {
        return 0;
      }
    }
    else
    {
      uint64_t v10 = *(void **)(a1 + 16);
      uint64_t v11 = *v10;
    }
    void *v10 = v11 + v9;
    *(void *)(a1 + 32) = --v2;
    if ((unint64_t)v2 < v1) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1010BE5A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v2 = *sub_10014BF98(a1, &v4, a2);
  if (!v2) {
    sub_1000C14F0("map::at:  key not found");
  }
  return v2 + 56;
}

uint64_t sub_1010BE5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1001789C8((char *)a1, (long long *)a2);
  *((void *)v4 + 14) = 0;
  *((void *)v4 + 15) = 0;
  *((void *)v4 + 16) = 0;
  sub_100178B9C(v4 + 112, *(long long **)(a2 + 112), *(long long **)(a2 + 120), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 3));
  if (*(char *)(a2 + 159) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 136), *(void **)(a2 + 136), *(void *)(a2 + 144));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = v5;
  }
  if (*(char *)(a2 + 183) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 160), *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = v6;
  }
  if (*(char *)(a2 + 207) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 184), *(void **)(a2 + 184), *(void *)(a2 + 192));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 184);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = v7;
  }
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  sub_1000302C0((char *)(a1 + 208), *(long long **)(a2 + 208), *(long long **)(a2 + 216), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 216) - *(void *)(a2 + 208)) >> 3));
  if (*(char *)(a2 + 255) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 232), *(void **)(a2 + 232), *(void *)(a2 + 240));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 232);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = v8;
  }
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  sub_1000302C0((char *)(a1 + 256), *(long long **)(a2 + 256), *(long long **)(a2 + 264), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 264) - *(void *)(a2 + 256)) >> 3));
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  return a1;
}

void sub_1010BE778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100047F64((void ***)va);
  if (v2[207] < 0) {
    operator delete(*v5);
  }
  if (v2[183] < 0) {
    operator delete(*v4);
  }
  if (v2[159] < 0) {
    operator delete(*v3);
  }
  sub_100047F64((void ***)va);
  sub_10016FEBC((uint64_t)v2);
  _Unwind_Resume(a1);
}

void sub_1010BE818()
{
}

uint64_t sub_1010BE82C(uint64_t a1)
{
  return *(void *)(a1 + 8) + 32;
}

void *sub_1010BE838(void *a1)
{
  *a1 = off_101A881A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1010BE884(void *a1)
{
  *a1 = off_101A881A8;
  unint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_1010BE8F0(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = off_101A881A8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1010BE954(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A881A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1010BE994(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1010BE9A4(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_1010BE9E4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      if (a1[2])
      {
        long long v5 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v3 + 40) + 16))(*(void *)(v3 + 40), *(unsigned int *)(v3 + 48));
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Operation timed out", buf, 2u);
        }
        long long v6 = *(std::__shared_weak_count **)(v3 + 8);
        if (v6)
        {
          if (std::__shared_weak_count::lock(v6)) {
            operator new();
          }
        }
        sub_100088B9C();
      }
      sub_10004D2C8(v4);
    }
  }
}

void sub_1010BEB5C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010BEB74(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010BEBB4()
{
}

void sub_1010BEBC0(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(void *)(v1 + 208);
  if (v2)
  {
    *(void *)(v1 + 208) = 0;
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(void *)(v1 + 176))
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 184);
    *(void *)(v1 + 176) = 0;
    *(void *)(v1 + 184) = 0;
    if (v3) {
      sub_10004D2C8(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 104);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *(void *)(v1 + 96);
      if (v6)
      {
        long long v7 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v1 + 40) + 16))(*(void *)(v1 + 40), *(unsigned int *)(v1 + 48));
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed searching for chatbot", buf, 2u);
        }
        sub_1010BD110(v1);
        bzero(buf, 0x348uLL);
        sub_1001789C8((char *)buf, (long long *)(v1 + 216));
        memset(v17, 0, sizeof(v17));
        sub_100178B9C((char *)v17, *(long long **)(v1 + 328), *(long long **)(v1 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 336) - *(void *)(v1 + 328)) >> 3));
        int v18 = 2;
        char v19 = 1;
        v20[0] = 0;
        v20[688] = 0;
        sub_1001F41B8(v6, *(unsigned int *)(v1 + 48), (uint64_t)buf);
        sub_1001FA0E0((uint64_t)v20);
        char v21 = (void **)v17;
        sub_100047F64(&v21);
        if (v16 < 0) {
          operator delete(__p);
        }
        if (v14[24])
        {
          char v21 = (void **)v14;
          sub_100047F64(&v21);
        }
        if (v13 < 0) {
          operator delete(v12);
        }
        if (v11 < 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_22;
      }
    }
  }
  else
  {
    long long v5 = 0;
  }
  long long v8 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v1 + 40) + 16))(*(void *)(v1 + 40), *(unsigned int *)(v1 + 48));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to find client during timeout", buf, 2u);
    if (!v5)
    {
LABEL_23:
      uint64_t v9 = *(void *)(v1 + 208);
      *(void *)(v1 + 208) = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      operator delete();
    }
  }
  else if (!v5)
  {
    goto LABEL_23;
  }
LABEL_22:
  sub_10004D2C8(v5);
  goto LABEL_23;
}

void sub_1010BEE88(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001F6968((uint64_t)va);
  sub_10004D2C8(v2);
  operator delete();
}

uint64_t *sub_1010BEEF0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  BOOL v27 = a1;
  uint64_t v28 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = (std::string *)(*(void *)v1 + 128);
  sub_100093B44(v3, (const std::string *)(v1 + 8));
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 104);
  if (v4)
  {
    long long v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v2 + 96);
      if (v7)
      {
        if (!*(unsigned char *)(v2 + 152)) {
          sub_10016C840();
        }
        sub_1001F4824(v7, *(_DWORD *)(v2 + 48), v3);
      }
      sub_10004D2C8(v6);
    }
  }
  long long v8 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v2 + 40) + 16))(*(void *)(v2 + 40), *(unsigned int *)(v2 + 48));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = (void *)(v2 + 216);
    if (*(char *)(v2 + 239) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Starting Web search: [%{public}s] (with auth)", buf, 0xCu);
  }
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v10 = *(os_log_t **)(v2 + 112);
  if (*(char *)(v2 + 239) < 0)
  {
    sub_10004FC84(__dst, *(void **)(v2 + 216), *(void *)(v2 + 224));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)(v2 + 216);
    uint64_t v45 = *(void *)(v2 + 232);
  }
  sub_100178D18(buf, (uint64_t)__dst);
  sub_100058DB0(&__p, "etag");
  sub_100B18DB4(v10, (uint64_t)buf, (uint64_t)&__p, &v46);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v45) < 0) {
    operator delete(__dst[0]);
  }
  memset(&v43, 0, sizeof(v43));
  sub_1010BA768(&v43, v2 + 216);
  uint64_t v40 = 0;
  std::string v41 = 0;
  uint64_t v42 = 0;
  char v11 = *(std::__shared_weak_count **)(v2 + 88);
  v39[0] = *(void *)(v2 + 80);
  v39[1] = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(v1 + 31) < 0)
  {
    sub_10004FC84(&__p, *(void **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v12 = *(_OWORD *)(v1 + 8);
    __p.__r_.__value_.__r.__words[2] = *(void *)(v1 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
  }
  char v38 = 1;
  sub_1000593FC((uint64_t)&v35, &v46);
  sub_1010BAC78((uint64_t)&v40, (uint64_t)v39, *(const std::string **)(v2 + 424), &__p, (uint64_t)&v43, &v35);
  if (v36 && SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (v38 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
  if (!*(void *)(v2 + 176))
  {
    unint64_t v22 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v2 + 40) + 16))(*(void *)(v2 + 40), *(unsigned int *)(v2 + 48));
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_59;
    }
    *(_WORD *)long long buf = 0;
    BOOL v23 = "#I No previous request...";
LABEL_48:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v23, buf, 2u);
    goto LABEL_59;
  }
  char v13 = *(std::__shared_weak_count **)(v2 + 184);
  uint64_t v33 = *(void *)(v2 + 176);
  uint64_t v34 = v13;
  *(void *)(v2 + 176) = 0;
  *(void *)(v2 + 184) = 0;
  ctu::Http::HttpRequest::create();
  uint64_t v14 = *(std::__shared_weak_count **)(v2 + 200);
  *(_OWORD *)(v2 + 192) = *(_OWORD *)buf;
  char v15 = (void *)(v2 + 192);
  memset(buf, 0, sizeof(buf));
  if (v14)
  {
    sub_10004D2C8(v14);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (v34) {
    sub_10004D2C8(v34);
  }
  if (!*v15)
  {
    unint64_t v22 = *(NSObject **)(v2 + 32);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_59;
    }
    *(_WORD *)long long buf = 0;
    BOOL v23 = "#I Invalid web request";
    goto LABEL_48;
  }
  sub_1005629F0((uint64_t *)(v2 + 192));
  (*(void (**)(double))(*(void *)*v15 + 96))(30.0);
  (*(void (**)(void, uint64_t))(*(void *)*v15 + 208))(*v15, 1);
  (*(void (**)(void, void))(**(void **)(v2 + 192) + 8))(*(void *)(v2 + 192), *(void *)(v2 + 16));
  char v16 = *(std::__shared_weak_count **)(v2 + 8);
  if (!v16 || (v17 = *(void *)v2, (int v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    sub_100088B9C();
  }
  char v19 = v18;
  p_shared_weak_owners = &v18->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v18);
  uint64_t v21 = *(void *)(v2 + 192);
  *(void *)long long buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 1174405120;
  uint64_t v49 = sub_1010BCFE8;
  long long v50 = &unk_101A88108;
  uint64_t v51 = v2;
  uint64_t v52 = v17;
  long long v53 = v19;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&v54, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  else {
    std::string v54 = v43;
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v21 + 16))(v21, buf);
  uint64_t v24 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(v2 + 40) + 16))(*(void *)(v2 + 40), *(unsigned int *)(v2 + 48));
  v31[0] = 0;
  v31[1] = 0;
  uint64_t v32 = 0;
  sub_1005606A8(v24, &v40, (long long *)&v43, 0, (uint64_t *)v31);
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
  uint64_t v25 = *v15;
  v29[1] = 0;
  uint64_t v30 = 0;
  v29[0] = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v25 + 40))(v25, v29);
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
  sub_1010BCD7C((uint64_t *)v2);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (v53) {
    std::__shared_weak_count::__release_weak(v53);
  }
  std::__shared_weak_count::__release_weak(v19);
LABEL_59:
  sub_10010C0E0((uint64_t)&v40, v41);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (BYTE8(v47) && SBYTE7(v47) < 0) {
    operator delete((void *)v46);
  }
  sub_1001102C4(&v28);
  return sub_100046B58((uint64_t *)&v27);
}

void sub_1010BF51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,void *a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  long long v58 = *(std::__shared_weak_count **)(v56 - 128);
  if (v58) {
    std::__shared_weak_count::__release_weak(v58);
  }
  std::__shared_weak_count::__release_weak(v55);
  sub_10010C0E0((uint64_t)&a41, a42);
  if (a49 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v56 - 184))
  {
    if (*(char *)(v56 - 185) < 0) {
      operator delete(*(void **)(v56 - 208));
    }
  }
  sub_1001102C4(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1010BF6A4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v18 = a1;
  uint64_t v19 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = (std::string *)(*(void *)v1 + 216);
  std::string::operator=(v3, (const std::string *)(v1 + 8));
  std::string::operator=((std::string *)(v2 + 240), (const std::string *)(v1 + 32));
  *(unsigned char *)(v2 + 264) = *(unsigned char *)(v1 + 56);
  sub_100179D50(v2 + 272, v1 + 64);
  std::string::operator=((std::string *)(v2 + 304), (const std::string *)(v1 + 96));
  if (v3 != (std::string *)(v1 + 8))
  {
    long long v5 = *(long long **)(v1 + 120);
    uint64_t v4 = *(long long **)(v1 + 128);
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)v5) >> 3);
    uint64_t v7 = *(void *)(v2 + 344);
    long long v8 = *(std::string **)(v2 + 328);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v8) >> 3) >= v6)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 336) - (void)v8) >> 3) >= v6)
      {
        char v15 = sub_100C2FF58(*(std::string **)(v1 + 120), *(std::string **)(v1 + 128), v8);
        for (uint64_t i = *(std::string **)(v2 + 336); i != v15; --i)
        {
          if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(i[-1].__r_.__value_.__l.__data_);
          }
        }
        *(void *)(v2 + 336) = v15;
        goto LABEL_21;
      }
      uint64_t v14 = (std::string *)((char *)v5 + 8 * ((uint64_t)(*(void *)(v2 + 336) - (void)v8) >> 3));
      sub_100C2FF58(*(std::string **)(v1 + 120), v14, v8);
      char v13 = sub_100178C24(v2 + 344, (long long *)v14, v4, *(char **)(v2 + 336));
    }
    else
    {
      uint64_t v9 = (void **)(v2 + 328);
      if (v8)
      {
        sub_100047FB8((uint64_t *)(v2 + 328));
        operator delete(*v9);
        uint64_t v7 = 0;
        void *v9 = 0;
        *(void *)(v2 + 336) = 0;
        *(void *)(v2 + 344) = 0;
      }
      if (v6 > 0xAAAAAAAAAAAAAAALL) {
        sub_10006A748();
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
      uint64_t v11 = 2 * v10;
      if (2 * v10 <= v6) {
        uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)v5) >> 3);
      }
      if (v10 >= 0x555555555555555) {
        unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v12 = v11;
      }
      sub_100157704((void *)(v2 + 328), v12);
      char v13 = sub_100178C24(v2 + 344, v5, v4, *(char **)(v2 + 336));
    }
    *(void *)(v2 + 336) = v13;
LABEL_21:
    std::string::operator=((std::string *)(v2 + 352), (const std::string *)(v1 + 144));
    std::string::operator=((std::string *)(v2 + 376), (const std::string *)(v1 + 168));
    std::string::operator=((std::string *)(v2 + 400), (const std::string *)(v1 + 192));
    sub_10005CA3C(v2 + 424, *(std::string **)(v1 + 216), *(long long **)(v1 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 224) - *(void *)(v1 + 216)) >> 3));
    std::string::operator=((std::string *)(v2 + 448), (const std::string *)(v1 + 240));
    sub_10005CA3C(v2 + 472, *(std::string **)(v1 + 264), *(long long **)(v1 + 272), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 272) - *(void *)(v1 + 264)) >> 3));
  }
  *(unsigned char *)(v2 + 496) = *(unsigned char *)(v1 + 288);
  sub_1010BA080(v2);
  sub_1010BF944(&v19);
  return sub_100046B58((uint64_t *)&v18);
}

void sub_1010BF910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v10 + 336) = v11;
  sub_1010BF944(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1010BF944(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_1001FD2F4(v1 + 8);
    operator delete();
  }
  return result;
}

void sub_1010BF994(void *a1, void *a2, int a3, uint64_t a4, dispatch_object_t *a5, uint64_t *a6)
{
  a1[3] = off_101A8AD08;
  *a1 = off_101A8AFD0;
  PersonalitySpecificImpl::PersonalitySpecificImpl();
  a1[3] = off_101A89928;
  *a1 = off_101A89C00;
  unint64_t v12 = *a5;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  char v13 = (std::__shared_weak_count *)a6[1];
  uint64_t v18 = *a6;
  uint64_t v19 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1012A5B60((uint64_t)(a1 + 4), (uint64_t *)off_101A894A8, a2, a3, a4, &object, &v18);
  if (v19) {
    sub_10004D2C8(v19);
  }
  if (object) {
    dispatch_release(object);
  }
  *a1 = off_101A88258;
  a1[3] = off_101A88988;
  a1[4] = off_101A88EE0;
  a1[18] = off_101A891D8;
  DataContextName = (char *)DataUtils::getDataContextName();
  sub_100058DB0(&__p, DataContextName);
  char v15 = *a5;
  if (*a5) {
    dispatch_retain(*a5);
  }
  ctu::RestModule::RestModule();
  if (v15) {
    dispatch_release(v15);
  }
  if (v17 < 0) {
    operator delete(__p);
  }
  a1[21] = 0;
  a1[22] = 0;
  *(void *)((char *)a1 + 189) = 0;
  a1[23] = 0;
  a1[25] = "";
  if (*a5) {
    dispatch_retain(*a5);
  }
  sub_1003664EC();
}

void sub_1010BFCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_object_t object, dispatch_object_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,dispatch_object_t a23)
{
  if (v26) {
    sub_10004D2C8(v26);
  }
  if (v25) {
    dispatch_release(v25);
  }
  uint64_t v28 = (std::__shared_weak_count *)*((void *)v23 + 29);
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  unsigned int v29 = (std::__shared_weak_count *)*((void *)v23 + 27);
  if (v29) {
    sub_10004D2C8(v29);
  }
  uint64_t v30 = *((void *)v23 + 23);
  *((void *)v23 + 23) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  unsigned int v31 = (std::__shared_weak_count *)*((void *)v23 + 22);
  if (v31) {
    sub_10004D2C8(v31);
  }
  uint64_t v32 = (std::__shared_weak_count *)*((void *)v23 + 20);
  if (v32) {
    sub_10004D2C8(v32);
  }
  sub_1012A5DE0(v24, (uint64_t *)off_101A894A8);
  PersonalitySpecificImpl::~PersonalitySpecificImpl(v23);
  PersonalitySpecific::~PersonalitySpecific(v23);
  _Unwind_Resume(a1);
}

void sub_1010BFDE8(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v5 = (std::__shared_weak_count *)a1[22];
  a1[21] = v3;
  a1[22] = v4;
  if (v5) {
    sub_10004D2C8(v5);
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  unint64_t v6 = (std::__shared_weak_count *)a1[16];
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = a1[15];
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  sub_10003E168(&v10, a1 + 5);
  uint64_t v9 = v10;
  if (v10) {
    uint64_t v9 = &v10[*(void *)(*(void *)v10 - 688)];
  }
  unint64_t v12 = v9;
  char v13 = v11;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  (*(void (**)(uint64_t, char **))(*(void *)v8 + 192))(v8, &v12);
  if (v13) {
    sub_10004D2C8(v13);
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1010BFF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010BFF3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 176);
  *(void *)(a1 + 168) = v3;
  *(void *)(a1 + 176) = v2;
  if (v4) {
    sub_10004D2C8(v4);
  }
}

uint64_t sub_1010BFF68(uint64_t a1)
{
  Registry::createRestModuleOneTimeUseConnection(&v4, *(Registry **)(a1 + 80));
  ctu::RestModule::connect();
  if (v5) {
    sub_10004D2C8(v5);
  }
  uint64_t v2 = *(void *)(a1 + 168);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
  }
  uint64_t result = *(void *)(a1 + 208);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  return result;
}

void sub_1010C0010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C0028(void *a1)
{
  return sub_1010BFF68((uint64_t)a1 + *(void *)(*a1 - 264));
}

void sub_1010C0048(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    unint64_t v6 = "startUsing";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: ", (uint8_t *)&v5, 0xCu);
  }
  uint64_t v3 = *(void *)(a1 + 168);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  if (*(unsigned char *)(a1 + 244)) {
    char v4 = 1;
  }
  else {
    char v4 = *(unsigned char *)(a1 + 245) != 0;
  }

  sub_1010C5F54(a1, v4, 1);
}

void sub_1010C014C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 244)) {
    char v1 = 1;
  }
  else {
    char v1 = *(unsigned char *)(a1 + 245) != 0;
  }
  sub_1010C5F54(a1, v1, 1);
}

void sub_1010C0170(void *a1)
{
}

void sub_1010C018C(uint64_t *a1)
{
  *a1 = (uint64_t)off_101A88258;
  a1[3] = (uint64_t)off_101A88988;
  uint64_t v2 = a1 + 4;
  a1[4] = (uint64_t)off_101A88EE0;
  a1[18] = (uint64_t)off_101A891D8;
  uint64_t v3 = a1[23];
  a1[23] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = a1[9];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315138;
    uint64_t v14 = "stopUsing";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: bb", (uint8_t *)&v13, 0xCu);
  }
  ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 19));
  sub_10005DBA4(a1 + 37);
  for (uint64_t i = 35; i != 33; --i)
  {
    uint64_t v6 = a1[i];
    a1[i] = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[32];
  if (v7) {
    sub_10004D2C8(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[29];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[27];
  if (v9) {
    sub_10004D2C8(v9);
  }
  uint64_t v10 = a1[23];
  a1[23] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)a1[22];
  if (v11) {
    sub_10004D2C8(v11);
  }
  unint64_t v12 = (std::__shared_weak_count *)a1[20];
  if (v12) {
    sub_10004D2C8(v12);
  }
  sub_1012A5DE0(v2, (uint64_t *)off_101A894A8);
  PersonalitySpecificImpl::~PersonalitySpecificImpl((PersonalitySpecificImpl *)a1);

  PersonalitySpecific::~PersonalitySpecific((PersonalitySpecific *)a1);
}

void sub_1010C03D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1010C03E0(uint64_t a1)
{
}

void sub_1010C03E8(uint64_t a1)
{
}

void sub_1010C03F0(uint64_t a1)
{
}

void sub_1010C03F8(uint64_t *a1)
{
  sub_1010C018C(a1);

  operator delete();
}

void sub_1010C0430(uint64_t a1)
{
  sub_1010C018C((uint64_t *)(a1 - 24));

  operator delete();
}

void sub_1010C046C(uint64_t a1)
{
  sub_1010C018C((uint64_t *)(a1 - 32));

  operator delete();
}

void sub_1010C04A8(uint64_t a1)
{
  sub_1010C018C((uint64_t *)(a1 - 144));

  operator delete();
}

void *sub_1010C04E4(void *result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    char v4 = result;
    sub_1010C07B8(result, 0);
    return sub_1010C07B8(v4, 1);
  }
  return result;
}

void *sub_1010C052C(void *result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v3 = (void *)((char *)result + *(void *)(*result - 568));
    sub_1010C07B8(v3, 0);
    return sub_1010C07B8(v3, 1);
  }
  return result;
}

void sub_1010C05AC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 232);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  char v4 = (DataBBResetThrottling *)((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[17].~__shared_weak_count_0)(v2);
  DataBBResetThrottling::resetHappened(v4);
  if (v3) {
    sub_10004D2C8(v3);
  }
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  int v5 = (char *)asString();
  sub_100058DB0(v13, v5);
  std::operator+<char>();
  uint64_t v6 = std::string::append(&v8, " state: resetting baseband", 0x1AuLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v9 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  rest::ResetPayload::ResetPayload();
  sub_1004BC4DC();
  if (v12 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

void sub_1010C06F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v27 - 33) < 0) {
    operator delete(*(void **)(v27 - 56));
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_1010C076C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = *(std::__shared_weak_count **)(a1 + 232);
  if (result)
  {
    uint64_t result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result) {
      *a2 = *(void *)(a1 + 224);
    }
  }
  return result;
}

void sub_1010C07B0(uint64_t a1)
{
}

void *sub_1010C07B8(void *result, char a2)
{
  uint64_t v2 = a2 & 1;
  uint64_t v3 = &result[v2];
  if (v3[34])
  {
    char v4 = result;
    int v5 = result[9];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      uint64_t v9 = "resetBasebandTimerReset";
      __int16 v10 = 1024;
      int v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: we are going to remove BBReset timer[%u]", (uint8_t *)&v8, 0x12u);
    }
    if (!v4[(v2 ^ 1) + 34])
    {
      uint64_t v6 = (std::__shared_weak_count *)v4[29];
      if (v6)
      {
        uint64_t v6 = std::__shared_weak_count::lock(v6);
        long long v7 = v6;
        if (v6) {
          uint64_t v6 = (std::__shared_weak_count *)v4[28];
        }
      }
      else
      {
        long long v7 = 0;
      }
      ((void (*)(std::__shared_weak_count *))v6->__vftable[17].__on_zero_shared_weak)(v6);
      if (v7) {
        sub_10004D2C8(v7);
      }
    }
    (*(void (**)(void))(*(void *)v3[34] + 16))(v3[34]);
    uint64_t result = (void *)v3[34];
    v3[34] = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    *((_DWORD *)v4 + v2 + 72) = 0;
  }
  return result;
}

void sub_1010C094C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C096C(uint64_t a1, int a2, char a3, char a4)
{
  if (a3)
  {
    int v8 = sub_1010C0E90(a1);
    unsigned int v9 = a4 & 1;
    sub_1010C07B8((void *)a1, a4 & 1);
    if (v8)
    {
      uint64_t v10 = *(unsigned int *)(a1 + 4 * !(a4 & 1) + 288);
      if (!v10)
      {
        int v11 = *(std::__shared_weak_count **)(a1 + 232);
        if (v11)
        {
          int v11 = std::__shared_weak_count::lock(v11);
          char v12 = v11;
          if (v11) {
            int v11 = *(std::__shared_weak_count **)(a1 + 224);
          }
        }
        else
        {
          char v12 = 0;
        }
        int v13 = (DataBBResetThrottling *)((uint64_t (*)(std::__shared_weak_count *))v11->__vftable[17].~__shared_weak_count_0)(v11);
        uint64_t Timeout = DataBBResetThrottling::getTimeout(v13);
        if (v12) {
          sub_10004D2C8(v12);
        }
        char v15 = *(std::__shared_weak_count **)(a1 + 232);
        if (v15)
        {
          char v15 = std::__shared_weak_count::lock(v15);
          char v16 = v15;
          if (v15) {
            char v15 = *(std::__shared_weak_count **)(a1 + 224);
          }
        }
        else
        {
          char v16 = 0;
        }
        unsigned int v17 = ((uint64_t (*)(std::__shared_weak_count *))v15->__vftable[17].__get_deleter)(v15);
        if (v16) {
          sub_10004D2C8(v16);
        }
        uint64_t v10 = Timeout * v17;
        *(_DWORD *)(a1 + 4 * v9 + 288) = v10;
      }
      uint64_t v18 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "updateResetBasebandTimer";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v9;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v10;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s: we are going to setup BBReset timer[%u] to %llu seconds", buf, 0x1Cu);
      }
      sub_10003E168(buf, (void *)(a1 + 40));
      uint64_t v20 = *(void *)buf;
      uint64_t v19 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
        sub_10004D2C8(v19);
      }
      memset(buf, 0, 24);
      uint64_t v21 = (char *)asString();
      sub_100058DB0(buf, v21);
      Registry::getTimerService(&v41, *(Registry **)(a1 + 80));
      uint64_t v22 = v41;
      std::operator+<char>();
      BOOL v23 = std::string::append(&v38, " state: resetting baseband", 0x1AuLL);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v40 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      uint64_t v25 = *(NSObject **)(a1 + 56);
      dispatch_object_t object = v25;
      if (v25) {
        dispatch_retain(v25);
      }
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1174405120;
      aBlock[2] = sub_1010C0FA8;
      aBlock[3] = &unk_101A89518;
      aBlock[4] = a1;
      void aBlock[5] = v20;
      unsigned int v31 = v19;
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      char v35 = a3;
      int v33 = a2;
      unsigned int v34 = v9;
      uint64_t v32 = a1;
      char v36 = _Block_copy(aBlock);
      sub_100118A44(v22, (uint64_t)__p, 0, 1000000 * v10, &object, &v36);
      uint64_t v26 = a1 + 8 * v9;
      uint64_t v27 = v43;
      uint64_t v43 = 0;
      uint64_t v28 = *(void *)(v26 + 272);
      *(void *)(v26 + 272) = v27;
      if (v28)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        uint64_t v29 = v43;
        uint64_t v43 = 0;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
        }
      }
      if (v36) {
        _Block_release(v36);
      }
      if (object) {
        dispatch_release(object);
      }
      if (SHIBYTE(v40) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (v42) {
        sub_10004D2C8(v42);
      }
      if (v31) {
        std::__shared_weak_count::__release_weak(v31);
      }
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      if (v19) {
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  else
  {
    sub_1010C07B8((void *)a1, a4 & 1);
  }
}

void sub_1010C0DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,dispatch_object_t object,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35)
{
  if (v35) {
    sub_10004D2C8(v35);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C0E90(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 232);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (((unsigned int (*)(std::__shared_weak_count *))v2->__vftable[9].~__shared_weak_count)(v2))
  {
    char v4 = *(std::__shared_weak_count **)(a1 + 232);
    if (v4)
    {
      char v4 = std::__shared_weak_count::lock(v4);
      int v5 = v4;
      if (v4) {
        char v4 = *(std::__shared_weak_count **)(a1 + 224);
      }
    }
    else
    {
      int v5 = 0;
    }
    uint64_t v6 = ((unsigned int (*)(std::__shared_weak_count *))v4->__vftable[9].__on_zero_shared)(v4) ^ 1;
    if (v5) {
      sub_10004D2C8(v5);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v3) {
    sub_10004D2C8(v3);
  }
  return v6;
}

void sub_1010C0F7C(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C0FA8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    char v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (*(void *)(a1 + 40))
      {
        uint64_t v6 = (std::__shared_weak_count *)v3[29];
        if (v6)
        {
          uint64_t v6 = std::__shared_weak_count::lock(v6);
          long long v7 = v6;
          if (v6) {
            uint64_t v6 = (std::__shared_weak_count *)v3[28];
          }
        }
        else
        {
          long long v7 = 0;
        }
        int v8 = ((uint64_t (*)(std::__shared_weak_count *, void))v6->__vftable[21].__get_deleter)(v6, 0);
        if (v7) {
          sub_10004D2C8(v7);
        }
        if (v8)
        {
          unsigned int v9 = v3[9];
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v13) = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#N BBReset timer expired, but we are in a middle of a baseband call, so we are recharging the timer for the future check", (uint8_t *)&v13, 2u);
          }
          sub_1010C096C(v3, *(unsigned int *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), *(unsigned int *)(a1 + 68));
        }
        else if (sub_1010C0E90(*(void *)(a1 + 56)))
        {
          int v10 = *(_DWORD *)(a1 + 68);
          int v11 = v3[9];
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            int v13 = 136315650;
            uint64_t v14 = "fireResetBasebandTimer";
            __int16 v15 = 2080;
            uint64_t v16 = asString();
            __int16 v17 = 1024;
            int v18 = v10;
            _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "%s: Baseband got stuck in data context %s state: resetting baseband: BBReset timer[%u] fired, resetting the baseband...", (uint8_t *)&v13, 0x1Cu);
          }
          sub_1010C07B8(v3, v10);
          sub_1010C05AC((uint64_t)v3);
        }
        else
        {
          char v12 = v3[9];
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v13) = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#N BBReset timer expired, but we are not in a mode when we can reset baseband data, so ignoring the timer expiration, for now", (uint8_t *)&v13, 2u);
          }
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_1010C11C4(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C11EC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1010C1208(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1010C1218(uint64_t a1, int a2, char a3, char a4)
{
}

uint64_t sub_1010C1220(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 168);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 368))();
  }
  return result;
}

uint64_t sub_1010C1258(void *a1)
{
  uint64_t result = *(void *)((char *)a1 + *(void *)(*a1 - 152) + 168);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 368))();
  }
  return result;
}

void sub_1010C12A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, void))(**(void **)(a1 + 120) + 312))(*(void *)(a1 + 120), 0);

  sub_10004D2C8(v3);
}

void sub_1010C134C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C1360(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 232);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v4 = ((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[10].__on_zero_shared)(v2);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v5 = *(void *)(a1 + 184);
  if (!v4)
  {
    if (v5)
    {
      int v8 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "initiateBackoff";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: We don't support backing off, but have BackOff timer - removing it", buf, 0xCu);
      }
      sub_1010C12A8(a1);
    }
    return 0;
  }
  if (v5)
  {
    uint64_t v6 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "initiateBackoff";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: We are exiting early because we are in backing off state", buf, 0xCu);
    }
    return 1;
  }
  if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 168) + 280))(*(void *)(a1 + 168), 3))
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(v9, *(Registry **)(a1 + 80));
    int v11 = ServiceMap;
    if (v12 < 0)
    {
      int v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v14 = 5381;
      do
      {
        uint64_t v12 = v14;
        unsigned int v15 = *v13++;
        uint64_t v14 = (33 * v14) ^ v15;
      }
      while (v15);
    }
    std::mutex::lock(ServiceMap);
    *(void *)long long buf = v12;
    uint64_t v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)buf);
    if (v16)
    {
      uint64_t v18 = v16[3];
      __int16 v17 = (std::__shared_weak_count *)v16[4];
      if (v17)
      {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v11);
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v17);
        if (!v18)
        {
          unsigned int v19 = 3000;
          goto LABEL_39;
        }
LABEL_27:
        *(void *)long long buf = 0;
        uint64_t v20 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
        (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v18 + 80))(&valuePtr, v18, v20, 1, @"PDNBackoffTimeout", 0, 0);
        sub_1000842D0(buf, &valuePtr);
        sub_1000577C4(&valuePtr);
        if (*(void *)buf) {
          uint64_t v21 = sub_100081E58;
        }
        else {
          uint64_t v21 = 0;
        }
        if (v21)
        {
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(*(CFNumberRef *)buf, kCFNumberIntType, &valuePtr);
          if (valuePtr) {
            BOOL v23 = Value == 0;
          }
          else {
            BOOL v23 = 1;
          }
          if (v23) {
            unsigned int v19 = 3000;
          }
          else {
            unsigned int v19 = valuePtr;
          }
        }
        else
        {
          unsigned int v19 = 3000;
        }
        sub_1000570E8((const void **)buf);
        if (!v17)
        {
LABEL_40:
          unsigned int v24 = CSISystemElapsedTime();
          unsigned int v25 = CSIGetTimeDifference(v24, *(_DWORD *)(a1 + 192));
          uint64_t v26 = *(NSObject **)(a1 + 72);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "initiateBackoff";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v19;
            __int16 v46 = 1024;
            unsigned int v47 = v25;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I %s: backoffTime = %u msecs timeSinceDeactivation = %u msecs", buf, 0x18u);
          }
          BOOL v27 = v19 >= v25;
          unsigned int v28 = v19 - v25;
          if (v28 != 0 && v27)
          {
            uint64_t v29 = *(NSObject **)(a1 + 72);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = "initiateBackoff";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v28;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I %s: back off timer set to %u msecs", buf, 0x12u);
            }
            sub_10003E168(buf, (void *)(a1 + 40));
            uint64_t v31 = *(void *)buf;
            uint64_t v30 = *(std::__shared_weak_count **)&buf[8];
            if (*(void *)&buf[8])
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
              sub_10004D2C8(v30);
            }
            Registry::getTimerService((uint64_t *)buf, *(Registry **)(a1 + 80));
            uint64_t v32 = *(void *)buf;
            sub_100058DB0(__p, "back off timer");
            int v33 = *(NSObject **)(a1 + 56);
            dispatch_object_t object = v33;
            if (v33) {
              dispatch_retain(v33);
            }
            aBlock[0] = _NSConcreteStackBlock;
            aBlock[1] = 1174405120;
            aBlock[2] = sub_1010C1A64;
            aBlock[3] = &unk_101A89548;
            aBlock[4] = a1;
            void aBlock[5] = v31;
            unsigned __int8 v39 = v30;
            if (v30) {
              atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::size_type v40 = _Block_copy(aBlock);
            sub_100118A44(v32, (uint64_t)__p, 0, 1000 * v28, &object, &v40);
            unsigned int v34 = valuePtr;
            uint64_t valuePtr = 0;
            uint64_t v35 = *(void *)(a1 + 184);
            *(void *)(a1 + 184) = v34;
            if (v35)
            {
              (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
              char v36 = valuePtr;
              uint64_t valuePtr = 0;
              if (v36) {
                (*(void (**)(const void *))(*(void *)v36 + 8))(v36);
              }
            }
            if (v40) {
              _Block_release(v40);
            }
            if (object) {
              dispatch_release(object);
            }
            if (v43 < 0) {
              operator delete(__p[0]);
            }
            if (*(void *)&buf[8]) {
              sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
            }
            int v37 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
            (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 312))(*(void *)(a1 + 120), 2);
            sub_10004D2C8(v37);
            if (v39) {
              std::__shared_weak_count::__release_weak(v39);
            }
            if (v30) {
              std::__shared_weak_count::__release_weak(v30);
            }
            return 1;
          }
          return 0;
        }
LABEL_39:
        sub_10004D2C8(v17);
        goto LABEL_40;
      }
      std::mutex::unlock(v11);
      if (v18) {
        goto LABEL_27;
      }
    }
    else
    {
      std::mutex::unlock(v11);
    }
    unsigned int v19 = 3000;
    goto LABEL_40;
  }
  return 0;
}

void sub_1010C1944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, dispatch_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_1000570E8((const void **)(v25 - 80));
  if (v24) {
    sub_10004D2C8(v24);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1010C1A24(uint64_t a1)
{
  return *(void *)(a1 + 184) != 0;
}

uint64_t sub_1010C1A34(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 280))();
}

void sub_1010C1A64(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 72);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = 136315138;
          int v8 = "initiateBackoff_block_invoke";
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: back off timer fired", (uint8_t *)&v7, 0xCu);
        }
        sub_1010C12A8(v3);
        sub_1010C1B5C(v3);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_1010C1B48(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C1B5C(uint64_t a1)
{
  uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, void))(**(void **)(a1 + 120) + 344))(*(void *)(a1 + 120), 0);

  sub_10004D2C8(v2);
}

void sub_1010C1BD0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C1BE4(uint64_t a1)
{
  return sub_1010C1360(a1 - 144);
}

uint64_t sub_1010C1BEC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 264) = 0;
  uint64_t v4 = a1 + 32;
  sub_1012A6A64(a1 + 32);
  if (*((void *)&v11 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v11 + 1));
  }
  if (!(void)v11) {
    return 0;
  }
  sub_1012A6A64(v4);
  if ((*(uint64_t (**)(void, void))(*(void *)v11 + 88))(v11, 0))
  {
    int v5 = 0;
  }
  else
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 232);
    if (v6)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v6);
      int v7 = v6;
      if (v6) {
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 224);
      }
    }
    else
    {
      int v7 = 0;
    }
    int v5 = ((uint64_t (*)(std::__shared_weak_count *))v6->__vftable[10].__get_deleter)(v6) ^ 1;
    if (v7) {
      sub_10004D2C8(v7);
    }
  }
  if (*((void *)&v11 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v11 + 1));
  }
  if (!v5)
  {
    sub_1010C1E2C(a1);
    return 0;
  }
  int v8 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v11) = 136315138;
    *(void *)((char *)&v11 + 4) = "initiatePending";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: No data bearer available, deferring activation", (uint8_t *)&v11, 0xCu);
  }
  if (!*(unsigned char *)(a1 + 196))
  {
    unsigned int v9 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 312))(*(void *)(a1 + 120), 3);
    sub_10004D2C8(v9);
  }
  *(void *)(a1 + 200) = a2;
  uint64_t result = 1;
  *(unsigned char *)(a1 + 196) = 1;
  return result;
}

void sub_1010C1DDC(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C1E1C(uint64_t a1)
{
}

uint64_t sub_1010C1E24()
{
  return 0;
}

void sub_1010C1E2C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 196))
  {
    uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
    (*(void (**)(void, void))(**(void **)(a1 + 120) + 312))(*(void *)(a1 + 120), 0);
    sub_10004D2C8(v2);
  }
  *(unsigned char *)(a1 + 196) = 0;
  *(void *)(a1 + 200) = "";
}

void sub_1010C1EAC(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C1EC0(uint64_t a1, uint64_t a2)
{
  return sub_1010C1BEC(a1 - 144, a2);
}

void sub_1010C1EC8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 196))
  {
    uint64_t v2 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 200);
      int v4 = 136315394;
      int v5 = "checkPendingActivation";
      __int16 v6 = 2080;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: Going to attempt a pending activation, reason %s", (uint8_t *)&v4, 0x16u);
    }
    *(unsigned char *)(a1 + 264) = 1;
    sub_1010C1B5C(a1);
    if (*(unsigned char *)(a1 + 264)) {
      sub_1010C1E2C(a1);
    }
    *(unsigned char *)(a1 + 264) = 0;
  }
}

void sub_1010C1FA8(uint64_t a1)
{
}

void sub_1010C1FB0(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 264)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = a2 == 0;
  }
  if (!v3)
  {
    if (*(void *)(a1 + 184))
    {
      int v4 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315138;
        uint64_t v7 = "clearPostponedActivations";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Clearing back off timer", (uint8_t *)&v6, 0xCu);
      }
      sub_1010C12A8(a1);
    }
    if (*(unsigned char *)(a1 + 196))
    {
      int v5 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315138;
        uint64_t v7 = "clearPostponedActivations";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Clearing pending activation", (uint8_t *)&v6, 0xCu);
      }
      sub_1010C1E2C(a1);
    }
  }
  *(unsigned char *)(a1 + 264) = 0;
}

void sub_1010C20D8(uint64_t a1, int a2)
{
}

uint64_t sub_1010C20E0(uint64_t a1, uint64_t a2)
{
  int v4 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    unsigned int v15 = "handOverToOtherDone";
    __int16 v16 = 2080;
    uint64_t v17 = asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Handover is done on %s", buf, 0x16u);
  }
  char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 136))(a1 + 32, a2);
  if ((v5 & 1) == 0)
  {
    int v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
    int v13 = 0;
    if (!(*(unsigned int (**)(void))(**(void **)(a1 + 120) + 448))(*(void *)(a1 + 120)))
    {
      BOOL v7 = 0;
LABEL_9:
      if (v13) {
        sub_10004D2C8(v13);
      }
      if (v4) {
        sub_10004D2C8((std::__shared_weak_count *)v4);
      }
      if (!v7) {
        return sub_1012A6588((char *)(a1 + 32), a2);
      }
      goto LABEL_14;
    }
  }
  int v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 168) + 280))(*(void *)(a1 + 168), 3);
  BOOL v7 = v6 == 0;
  if ((v5 & 1) == 0) {
    goto LABEL_9;
  }
  if (v6) {
    return sub_1012A6588((char *)(a1 + 32), a2);
  }
LABEL_14:
  sub_1012A7004(a1 + 32, a2, 0);
  unsigned int v9 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = asString();
    *(_DWORD *)long long buf = 136315394;
    unsigned int v15 = "handOverToOtherDone";
    __int16 v16 = 2080;
    uint64_t v17 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Finish the deactivation on %s", buf, 0x16u);
  }
  uint64_t v11 = *(void *)(a1 + 168);
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 176);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 152))(v11, a2);
  if (v12) {
    sub_10004D2C8(v12);
  }
  return 1;
}

void sub_1010C2370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C23B0(uint64_t a1, char a2, int a3)
{
}

uint64_t sub_1010C23B8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 176);
  *a2 = *(void *)(result + 168);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1010C23D4(void *a1, uint64_t a2)
{
  return sub_1010C20E0((uint64_t)a1 + *(void *)(*a1 - 640), a2);
}

uint64_t sub_1010C23F4(uint64_t a1, uint64_t a2)
{
  return sub_1010C20E0(a1 - 32, a2);
}

BOOL sub_1010C23FC(uint64_t a1, uint64_t *a2)
{
  int v4 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      char v5 = a2;
    }
    else {
      char v5 = (uint64_t *)*a2;
    }
    int v10 = 136315394;
    uint64_t v11 = "activationOfOtherDone";
    __int16 v12 = 2080;
    int v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Activation of other context is done for APN %s", (uint8_t *)&v10, 0x16u);
  }
  int v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 168) + 280))(*(void *)(a1 + 168), 3);
  if (!v6)
  {
    uint64_t v7 = *(void *)(a1 + 168);
    int v8 = *(std::__shared_weak_count **)(a1 + 176);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 200))(v7, a2);
    if (v8) {
      sub_10004D2C8(v8);
    }
  }
  return v6 == 0;
}

void sub_1010C2554(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010C2574(void *a1, uint64_t *a2)
{
  return sub_1010C23FC((uint64_t)a1 + *(void *)(*a1 - 664), a2);
}

uint64_t sub_1010C2594(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    int v10 = "handOverToOtherFailed";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: Handover failed", buf, 0xCu);
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 32) + 136))(a1 + 32, 3) & 1) != 0
    || (BOOL v3 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128)),
        int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 448))(*(void *)(a1 + 120)),
        sub_10004D2C8(v3),
        v4))
  {
    if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 168) + 280))(*(void *)(a1 + 168), 3))
    {
      char v5 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        int v10 = "handOverToOtherFailed";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Finish the deactivation", buf, 0xCu);
      }
      uint64_t v6 = *(void *)(a1 + 168);
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 176);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 152))(v6, 3);
      if (v7) {
        sub_10004D2C8(v7);
      }
    }
  }
  return 1;
}

void sub_1010C27B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C27E8(void *a1)
{
  return 1;
}

uint64_t sub_1010C2820(uint64_t a1)
{
  return 1;
}

void sub_1010C2840(void *a1, char a2, int a3)
{
}

void sub_1010C2868(uint64_t a1, char a2, int a3)
{
}

BOOL sub_1010C2870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(std::__shared_weak_count **)(a1 + 232);
  if (v8)
  {
    unsigned int v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      int v10 = *(char **)(a1 + 224);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v9 = 0;
  }
  int v10 = 0;
LABEL_6:
  *(_DWORD *)(a1 + 240) = (*(uint64_t (**)(char *))(*(void *)&v10[*(void *)(*(void *)v10 - 320)]
                                                            + 184))(&v10[*(void *)(*(void *)v10 - 320)]);
  if (v9) {
    sub_10004D2C8(v9);
  }
  uint64_t v11 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315650;
    uint64_t v25 = "handleDataContextIPOnline";
    __int16 v26 = 2080;
    uint64_t v27 = asString();
    __int16 v28 = 2080;
    uint64_t v29 = asString();
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s: for %s on %s", buf, 0x20u);
  }
  __int16 v12 = *(std::__shared_weak_count **)(a1 + 128);
  if (v12)
  {
    int v13 = std::__shared_weak_count::lock(v12);
    if (v13) {
      uint64_t v14 = *(void *)(a1 + 120);
    }
    else {
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
    int v13 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v22, a1);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(*(void *)v14 + 32))(v14, a2, 0, &v22, a3, a4);
  if (v23) {
    sub_10004D2C8(v23);
  }
  if (v13) {
    sub_10004D2C8(v13);
  }
  if (v15)
  {
    __int16 v16 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = asString();
      uint64_t v18 = asString();
      *(_DWORD *)long long buf = 136315906;
      uint64_t v25 = "handleDataContextIPOnline";
      __int16 v26 = 2080;
      uint64_t v27 = v17;
      __int16 v28 = 2080;
      uint64_t v29 = v18;
      __int16 v30 = 1024;
      int v31 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I %s: Error bringing interface online for %s err %s(%d)", buf, 0x26u);
    }
    uint64_t v19 = *(void *)(a1 + 168);
    uint64_t v20 = *(std::__shared_weak_count **)(a1 + 176);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 160))(v19, a2, v15);
    if (v20) {
      sub_10004D2C8(v20);
    }
  }
  return v15 == 0;
}

void sub_1010C2B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010C2BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1010C2870(a1 - 144, a2, a3, a4);
}

uint64_t sub_1010C2BA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 392))();
}

uint64_t sub_1010C2BD8(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 456) + 168) + 392))();
}

uint64_t sub_1010C2C24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 392))();
}

uint64_t sub_1010C2C54(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 168);
  char v5 = *(std::__shared_weak_count **)(a1 + 176);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v7 = a2[1];
  long long v13 = *a2;
  v14[0] = v7;
  *(_OWORD *)((char *)v14 + 10) = *(long long *)((char *)a2 + 26);
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(&v15, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v15 = a2[3];
    uint64_t v16 = *((void *)a2 + 8);
  }
  char v17 = *((unsigned char *)a2 + 72);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  sub_1008DB9AC(&__p, *(const void **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2));
  uint64_t v8 = (*(uint64_t (**)(uint64_t, long long *, void **))(*(void *)v6 + 80))(v6, &v13, &__p);
  if (__p)
  {
    uint64_t v11 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
  return v8;
}

void sub_1010C2D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v24) {
    sub_10004D2C8(v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C2DC0(void *a1, long long *a2, uint64_t a3)
{
  return sub_1010C2C54((uint64_t)a1 + *(void *)(*a1 - 408), a2, a3);
}

uint64_t sub_1010C2DF8(uint64_t a1, long long *a2, uint64_t a3)
{
  return sub_1010C2C54(a1 - 32, a2, a3);
}

uint64_t sub_1010C2E18(uint64_t a1, long long *a2, uint64_t a3)
{
  return sub_1010C2C54(a1 - 144, a2, a3);
}

void sub_1010C2E38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 176);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 144))(v2);
  if (v3)
  {
    sub_10004D2C8(v3);
  }
}

void sub_1010C2EB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C2ED0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 176);
  *a2 = *(void *)(result + 168);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1010C2EEC(void *a1)
{
}

void sub_1010C2F08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 168);
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 176);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 88))(v2);
  }
  if (v3)
  {
    sub_10004D2C8(v3);
  }
}

void sub_1010C2F8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C2FA4(void *a1)
{
}

void sub_1010C2FC4(uint64_t a1)
{
}

uint64_t sub_1010C2FCC@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if ((a2 & 1) != 0
    || ((uint64_t v4 = result,
         result = (*(uint64_t (**)(void, uint64_t))(**(void **)(result + 168) + 280))(*(void *)(result + 168), 3), result <= 5)? (BOOL v5 = ((1 << result) & 0x2C) == 0): (BOOL v5 = 1), v5))
  {
    *(_DWORD *)a3 = 0;
    *(void *)(a3 + 8) = "";
    *(void *)(a3 + 16) = "";
  }
  else
  {
    (*(void (**)(void, uint64_t))(**(void **)(v4 + 168) + 280))(*(void *)(v4 + 168), 3);
    uint64_t result = asString();
    *(_DWORD *)a3 = -9;
    uint64_t v6 = "";
    if (result) {
      uint64_t v6 = (const char *)result;
    }
    *(void *)(a3 + 8) = "Temporary unavailable due to DataContextState (1)";
    *(void *)(a3 + 16) = v6;
  }
  *(_DWORD *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 28) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 32) = 0;
  return result;
}

uint64_t sub_1010C30C4@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return sub_1010C2FCC((uint64_t)a1 + *(void *)(*a1 - 248), a2, a3);
}

void sub_1010C30E0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    sub_1012A6A64(a1 + 32);
    long long v9 = v17;
    long long v17 = 0uLL;
    int v10 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v9;
    if (v10)
    {
      sub_10004D2C8(v10);
      if (*((void *)&v17 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 232);
  if (v6)
  {
    long long v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = *(void *)(a1 + 224);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    long long v7 = 0;
  }
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  uint64_t v15 = *a2;
  uint64_t v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string __p = 0;
  long long v13 = 0;
  uint64_t v14 = 0;
  sub_1008DB9AC(&__p, *(const void **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2));
  (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v8 + 680))(v8, &v15, &__p);
  if (__p)
  {
    long long v13 = __p;
    operator delete(__p);
  }
  if (v16) {
    sub_10004D2C8(v16);
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1010C3230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C326C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

uint64_t sub_1010C3274(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (std::__shared_weak_count *)a1[16];
  if (v6)
  {
    long long v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = a1[15];
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    long long v7 = 0;
  }
  long long v9 = (std::__shared_weak_count *)a1[29];
  if (v9)
  {
    int v10 = std::__shared_weak_count::lock(v9);
    if (v10) {
      uint64_t v11 = (char *)a1[28];
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
    int v10 = 0;
  }
  uint64_t v12 = (*(uint64_t (**)(char *))(*(void *)&v11[*(void *)(*(void *)v11 - 320)] + 184))(&v11[*(void *)(*(void *)v11 - 320)]);
  long long v13 = (std::__shared_weak_count *)a1[29];
  if (v13)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v13);
    if (v14) {
      uint64_t v15 = (char *)a1[28];
    }
    else {
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  uint64_t v16 = (*(uint64_t (**)(char *))(*(void *)&v15[*(void *)(*(void *)v15 - 320)] + 144))(&v15[*(void *)(*(void *)v15 - 320)]);
  long long v17 = (std::__shared_weak_count *)a1[29];
  if (v17)
  {
    long long v17 = std::__shared_weak_count::lock(v17);
    uint64_t v18 = v17;
    if (v17) {
      long long v17 = (std::__shared_weak_count *)a1[28];
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v19 = ((uint64_t (*)(std::__shared_weak_count *))v17->__vftable[10].__on_zero_shared_weak)(v17);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 352))(v8, 0, a2, v12, v16, v19, a3);
  if (v18) {
    sub_10004D2C8(v18);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
  return v20;
}

void sub_1010C3494(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    sub_10004D2C8(v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  sub_10004D2C8(v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  sub_10004D2C8(v1);
  goto LABEL_5;
}

uint64_t sub_1010C34F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1010C3274((void *)(a1 - 144), a2, a3);
}

void sub_1010C3500(uint64_t a1)
{
  uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void))(**(void **)(a1 + 120) + 496))(*(void *)(a1 + 120));

  sub_10004D2C8(v2);
}

void sub_1010C3570(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C3584(uint64_t a1)
{
}

void sub_1010C358C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v32 = 136315138;
    *(void *)std::string __p = "handleActivationEarlyFailure";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v32, 0xCu);
  }
  if (*(_DWORD *)a2)
  {
    int v7 = *(unsigned __int8 *)(a2 + 28);
    uint64_t v8 = *(NSObject **)(a1 + 72);
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (!v9) {
        return;
      }
      uint64_t v10 = *(void *)(a1 + 112);
      uint64_t v11 = asString();
      long long v13 = *(const char **)(a2 + 8);
      uint64_t v12 = *(unsigned char **)(a2 + 16);
      uint64_t v14 = asStringBool(*(unsigned char *)(a2 + 24));
      uint64_t v15 = asStringBool(*(unsigned char *)(a2 + 25));
      uint64_t v16 = asStringBool(*(unsigned char *)(a2 + 26));
      uint64_t v17 = asStringBool(*(unsigned char *)(a2 + 27));
      int v32 = 136317442;
      *(void *)std::string __p = v10;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = "handleActivationEarlyFailure";
      *(_WORD *)&__p[18] = 2080;
      unsigned int v34 = "f";
      __int16 v35 = 2080;
      uint64_t v36 = v11;
      __int16 v37 = 2080;
      std::string v38 = v13;
      __int16 v39 = 2080;
      std::string::size_type v40 = v12;
      __int16 v41 = 2080;
      uint64_t v42 = v14;
      __int16 v43 = 2080;
      uint64_t v44 = v15;
      __int16 v45 = 2080;
      uint64_t v46 = v16;
      __int16 v47 = 2080;
      uint64_t v48 = v17;
      uint64_t v18 = "#I DATA.%s: %s: %s(%s{%s %s [ allowed=%s blocked=%s netAvailable=%s home=%s ]})";
      uint64_t v19 = v8;
      uint32_t v20 = 102;
      goto LABEL_25;
    }
    if (!v9) {
      return;
    }
    uint64_t v24 = *(void *)(a1 + 112);
    uint64_t v25 = asString();
    __int16 v26 = *(unsigned char **)(a2 + 8);
    if (v26)
    {
      uint64_t v27 = *(void *)(a2 + 16);
      if (*v26)
      {
        __int16 v28 = "}";
        uint64_t v29 = "{";
LABEL_24:
        int v32 = 136316930;
        *(void *)std::string __p = v24;
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = "handleActivationEarlyFailure";
        *(_WORD *)&__p[18] = 2080;
        unsigned int v34 = "f";
        __int16 v35 = 2080;
        uint64_t v36 = v25;
        __int16 v37 = 2080;
        std::string v38 = v29;
        __int16 v39 = 2080;
        std::string::size_type v40 = v26;
        __int16 v41 = 2080;
        uint64_t v42 = v27;
        __int16 v43 = 2080;
        uint64_t v44 = (uint64_t)v28;
        uint64_t v18 = "#I DATA.%s: %s: %s(%s%s%s %s%s)";
        uint64_t v19 = v8;
        uint32_t v20 = 82;
LABEL_25:
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v32, v20);
        return;
      }
    }
    else
    {
      uint64_t v27 = *(void *)(a2 + 16);
    }
    uint64_t v29 = "";
    __int16 v28 = "";
    goto LABEL_24;
  }
  if (!a3)
  {
    __int16 v30 = *(NSObject **)(a1 + 72);
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v32 = 136315138;
    *(void *)std::string __p = "handleActivationEarlyFailure";
    uint64_t v18 = "#I %s: called with ok reason and event, bailing";
    uint64_t v19 = v30;
    uint32_t v20 = 12;
    goto LABEL_25;
  }
  uint64_t v21 = CSIEventString();
  uint64_t v22 = "";
  if (v21) {
    uint64_t v22 = (const char *)v21;
  }
  *(_DWORD *)a2 = 24;
  *(void *)(a2 + 8) = "original error";
  *(void *)(a2 + 16) = v22;
  *(_DWORD *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 28) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  BOOL v23 = *(std::__shared_weak_count **)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  if (v23) {
    sub_10004D2C8(v23);
  }
  if (a3 == 74)
  {
    (*(void (**)(void))(**(void **)(a1 + 208) + 32))(*(void *)(a1 + 208));
  }
  else
  {
    sub_100CC9534((uint64_t)&v32, a3);
    int v31 = (uint64_t *)sub_100A013DC(&qword_101B13E28);
    sub_100A01420(v31, (uint64_t)&v32);
    if (*(void *)&__p[4])
    {
      *(void *)&__p[12] = *(void *)&__p[4];
      operator delete(*(void **)&__p[4]);
    }
  }
}

void sub_1010C3918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C393C(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

void sub_1010C3944(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_1010C394C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 232);
  if (v6)
  {
    int v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = *(void *)(a1 + 224);
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    int v7 = 0;
  }
  sub_1012A6A64(a1 + 32);
  std::string __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_1008DB9AC(&__p, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2));
  uint64_t v9 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v8 + 672))(v8, v14, &__p, a3);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
  if (v15) {
    sub_10004D2C8(v15);
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
  return v9;
}

void sub_1010C3A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C3A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1010C394C(a1 - 144, a2, a3);
}

uint64_t sub_1010C3AA4(void *a1, uint64_t a2)
{
  BOOL v3 = (std::__shared_weak_count *)a1[29];
  if (!v3) {
    return 1;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 1;
  }
  uint64_t v6 = a1[28];
  sub_10004D2C8(v5);
  if (!v6) {
    return 1;
  }
  int v7 = (std::__shared_weak_count *)a1[16];
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = a1[15];
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v12 = (std::__shared_weak_count *)a1[29];
  if (v12)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v12);
    if (v13) {
      uint64_t v14 = (char *)a1[28];
    }
    else {
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
  }
  uint64_t v15 = (*(uint64_t (**)(char *))(*(void *)&v14[*(void *)(*(void *)v14 - 320)] + 144))(&v14[*(void *)(*(void *)v14 - 320)]);
  uint64_t v16 = (std::__shared_weak_count *)a1[29];
  if (v16)
  {
    uint64_t v16 = std::__shared_weak_count::lock(v16);
    uint64_t v17 = v16;
    if (v16) {
      uint64_t v16 = (std::__shared_weak_count *)a1[28];
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v18 = ((uint64_t (*)(std::__shared_weak_count *))v16->__vftable[10].__on_zero_shared_weak)(v16);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 64))(v9, 0, v15, v18, a2);
  if (v17) {
    sub_10004D2C8(v17);
  }
  if (v13) {
    sub_10004D2C8(v13);
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
  return v10;
}

void sub_1010C3C50(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    sub_10004D2C8(v2);
    if (!v1) {
LABEL_4:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v1)
  {
    goto LABEL_4;
  }
  sub_10004D2C8(v1);
  goto LABEL_4;
}

uint64_t sub_1010C3C98(uint64_t a1, uint64_t a2)
{
  return sub_1010C3AA4((void *)(a1 - 144), a2);
}

std::__shared_weak_count *sub_1010C3CA0(void *a1)
{
  uint64_t result = (std::__shared_weak_count *)a1[29];
  if (result)
  {
    uint64_t result = std::__shared_weak_count::lock(result);
    if (result)
    {
      uint64_t v3 = a1[28];
      sub_10004D2C8(result);
      if (v3)
      {
        uint64_t v4 = (std::__shared_weak_count *)a1[29];
        if (v4)
        {
          uint64_t v4 = std::__shared_weak_count::lock(v4);
          BOOL v5 = v4;
          if (v4) {
            uint64_t v4 = (std::__shared_weak_count *)a1[28];
          }
        }
        else
        {
          BOOL v5 = 0;
        }
        int v6 = ((uint64_t (*)(std::__shared_weak_count *))v4->__vftable[11].~__shared_weak_count_0)(v4);
        if (v5) {
          sub_10004D2C8(v5);
        }
        return (std::__shared_weak_count *)(sub_1010C3AA4(a1, 0) & v6);
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void sub_1010C3D58(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_1010C3D70(void *a1)
{
  return sub_1010C3CA0((void *)((char *)a1 + *(void *)(*a1 - 96)));
}

void sub_1010C3D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 120) + 360))(*(void *)(a1 + 120), 0, a2, a3);

  sub_10004D2C8(v6);
}

void sub_1010C3E18(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C3E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1010C3E34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, void, uint64_t))(**(void **)(a1 + 120) + 368))(*(void *)(a1 + 120), 0, a2);

  sub_10004D2C8(v4);
}

void sub_1010C3EB8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C3ECC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1010C3ED4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = ((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[4].~__shared_weak_count_0)(v2);
  if (v3) {
    sub_10004D2C8(v3);
  }
  return v4;
}

void sub_1010C3F4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C3F64(uint64_t a1)
{
  return sub_1010C3ED4(a1 - 144);
}

void sub_1010C3F6C(uint64_t a1)
{
  uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void))(**(void **)(a1 + 120) + 376))(*(void *)(a1 + 120));

  sub_10004D2C8(v2);
}

void sub_1010C3FDC(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C3FF0(uint64_t a1)
{
}

uint64_t sub_1010C3FF8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = ((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[4].__on_zero_shared)(v2);
  if (v3) {
    sub_10004D2C8(v3);
  }
  return v4;
}

void sub_1010C4070(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C4088(uint64_t a1)
{
  return sub_1010C3FF8(a1 - 144);
}

void sub_1010C4090(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 392))(*(void *)(a1 + 120), a2);

  sub_10004D2C8(v4);
}

void sub_1010C4110(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C4124(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1010C412C(void *a1)
{
  uint64_t v2 = a1[9];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    uint64_t v8 = "isInEnteringLowPowerForNoWowIP";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: starts", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[16];
  if (v3)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v3);
    uint64_t v4 = v3;
    if (v3) {
      uint64_t v3 = (std::__shared_weak_count *)a1[15];
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v5 = ((uint64_t (*)(std::__shared_weak_count *))v3->__vftable[5].__on_zero_shared)(v3);
  if (v4) {
    sub_10004D2C8(v4);
  }
  return v5;
}

void sub_1010C4228(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C4240(uint64_t a1)
{
  return sub_1010C412C((void *)(a1 - 144));
}

uint64_t sub_1010C4248()
{
  return 0;
}

uint64_t sub_1010C4250()
{
  return 0;
}

uint64_t sub_1010C4258()
{
  return 0;
}

uint64_t sub_1010C4260(void *a1)
{
  return 0;
}

uint64_t sub_1010C4298(void *a1)
{
  char v1 = (void *)((char *)a1 + *(void *)(*a1 - 272));
  sub_1010C07B8(v1, 0);
  sub_1010C07B8(v1, 1);
  return 0;
}

uint64_t sub_1010C42EC(void *a1)
{
  return 0;
}

uint64_t sub_1010C4324(void *a1)
{
  char v1 = (void *)((char *)a1 + *(void *)(*a1 - 280));
  sub_1010C07B8(v1, 0);
  sub_1010C07B8(v1, 1);
  return 0;
}

void sub_1010C4378(uint64_t a1)
{
  if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 168) + 280))(*(void *)(a1 + 168), 3))
  {
    uint64_t v2 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      uint64_t v4 = "handleDataContextIPIdle";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: Context went idle", (uint8_t *)&v3, 0xCu);
    }
  }
}

void sub_1010C4454(uint64_t a1)
{
}

void sub_1010C445C(void *a1)
{
  uint64_t v2 = a1[9];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    int v6 = "handleDataContextIPFailedCleaningDone";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v5, 0xCu);
  }
  int v3 = (std::__shared_weak_count *)a1[29];
  if (v3)
  {
    int v3 = std::__shared_weak_count::lock(v3);
    uint64_t v4 = v3;
    if (v3) {
      int v3 = (std::__shared_weak_count *)a1[28];
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  ((void (*)(std::__shared_weak_count *, void, const char *))v3->__vftable[15].__on_zero_shared)(v3, 0, "Left FailedCleaning state");
  if (v4) {
    sub_10004D2C8(v4);
  }
}

void sub_1010C4564(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C457C(uint64_t a1)
{
}

void sub_1010C4584(void *a1)
{
  uint64_t v2 = a1[9];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    uint64_t v4 = "handleDataContextIPSuspended";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v3, 0xCu);
  }
  sub_1010C4634(a1, 3);
}

void sub_1010C4634(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (v4)
  {
    int v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      uint64_t v6 = a1[15];
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    int v5 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v7, a1);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t *))(*(void *)v6 + 56))(v6, a2, 0, &v7);
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
}

void sub_1010C470C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C4738(uint64_t a1)
{
}

BOOL sub_1010C4740(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[9];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v15 = "handleDataContextIPRetry";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[16];
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = a1[15];
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v12, a1);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(*(void *)v9 + 48))(v9, a2, 0, &v12, a3, 1);
  if (v13) {
    sub_10004D2C8(v13);
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
  return v10 == 0;
}

void sub_1010C48B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010C48E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1010C4740((void *)(a1 - 144), a2, a3);
}

uint64_t sub_1010C48E8(void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = a1[9];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    int v33 = "handleDataContextIPResume";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  if (!a2) {
    return 0;
  }
  if ((a2 & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[16];
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = a1[15];
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v30, a1);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *, void, uint64_t))(*(void *)v9 + 40))(v9, 1, 0, &v30, 0, 1);
  if (v31) {
    sub_10004D2C8(v31);
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v11)
  {
    uint64_t v12 = a1[9];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = asString();
      uint64_t v14 = asString();
      *(_DWORD *)long long buf = 136315906;
      int v33 = "handleDataContextIPResume";
      __int16 v34 = 2080;
      uint64_t v35 = v13;
      __int16 v36 = 2080;
      uint64_t v37 = v14;
      __int16 v38 = 1024;
      int v39 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I %s: Error bringing interface online for %s err %s(%d)", buf, 0x26u);
    }
    uint64_t v15 = a1[21];
    uint64_t v16 = (std::__shared_weak_count *)a1[22];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 160))(v15, 1, v11);
    if (v16) {
      sub_10004D2C8(v16);
    }
    int v17 = 0;
    if ((a2 & 2) == 0) {
      goto LABEL_42;
    }
  }
  else
  {
LABEL_24:
    int v17 = 1;
    if ((a2 & 2) == 0) {
      goto LABEL_42;
    }
  }
  uint64_t v18 = (std::__shared_weak_count *)a1[16];
  if (v18)
  {
    uint64_t v19 = std::__shared_weak_count::lock(v18);
    if (v19) {
      uint64_t v20 = a1[15];
    }
    else {
      uint64_t v20 = 0;
    }
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v19 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v28, a1);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(*(void *)v20 + 40))(v20, 2, 0, &v28, a3, 1);
  if (v29) {
    sub_10004D2C8(v29);
  }
  if (v19) {
    sub_10004D2C8(v19);
  }
  if (v21)
  {
    uint64_t v22 = a1[9];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = asString();
      uint64_t v24 = asString();
      *(_DWORD *)long long buf = 136315906;
      int v33 = "handleDataContextIPResume";
      __int16 v34 = 2080;
      uint64_t v35 = v23;
      __int16 v36 = 2080;
      uint64_t v37 = v24;
      __int16 v38 = 1024;
      int v39 = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %s: Error bringing interface online for %s err %s(%d)", buf, 0x26u);
    }
    uint64_t v25 = a1[21];
    __int16 v26 = (std::__shared_weak_count *)a1[22];
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v25 + 160))(v25, 2, v21);
    if (v26) {
      sub_10004D2C8(v26);
    }
    int v27 = 0;
    return v17 & v27;
  }
LABEL_42:
  int v27 = 1;
  return v17 & v27;
}

void sub_1010C4CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12) {
    sub_10004D2C8(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C4D30(uint64_t a1, int a2, uint64_t a3)
{
  return sub_1010C48E8((void *)(a1 - 144), a2, a3);
}

void sub_1010C4D38(uint64_t a1)
{
  uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void))(**(void **)(a1 + 120) + 272))(*(void *)(a1 + 120));

  sub_10004D2C8(v2);
}

void sub_1010C4DA8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C4DBC(uint64_t a1)
{
}

void sub_1010C4DC4(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    int v5 = "handleDataContextIPResumed";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v4, 0xCu);
  }
  int v3 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, uint64_t, void, void, void))(**(void **)(a1 + 120) + 232))(*(void *)(a1 + 120), 1, 0, 0, 0);
  sub_10004D2C8(v3);
  *(_DWORD *)(a1 + 192) = CSISystemElapsedTime();
  sub_1010C4D38(a1);
}

void sub_1010C4EC4(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C4EE0(uint64_t a1)
{
  uint64_t result = CSISystemElapsedTime();
  *(_DWORD *)(a1 + 192) = result;
  return result;
}

void sub_1010C4F08(uint64_t a1)
{
}

void sub_1010C4F10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1[9];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v18 = "handleDataContextIpDeactivatedNetworkDisconnect";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[16];
  if (v9)
  {
    int v10 = std::__shared_weak_count::lock(v9);
    if (v10) {
      uint64_t v11 = a1[15];
    }
    else {
      uint64_t v11 = 0;
    }
  }
  else
  {
    uint64_t v11 = 0;
    int v10 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v15, a1);
  char v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(*(void *)v11 + 128))(v11, a2, 0, &v15, a3, a4);
  if (v16) {
    sub_10004D2C8(v16);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  if ((v12 & 1) == 0)
  {
    uint64_t v13 = a1[21];
    uint64_t v14 = (std::__shared_weak_count *)a1[22];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 152))(v13, a2);
    if (v14) {
      sub_10004D2C8(v14);
    }
  }
}

void sub_1010C50CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C50FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1010C5104(uint64_t a1, _OWORD *a2)
{
  int v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 120);
  v8[0] = *a2;
  *(_OWORD *)((char *)v8 + 12) = *(_OWORD *)((char *)a2 + 12);
  (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(*(void *)v5 + 576))(v5, v8, v6, v7);
  sub_10004D2C8(v4);
}

void sub_1010C519C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C51B0(uint64_t a1, _OWORD *a2)
{
}

void sub_1010C51B8(void *a1)
{
  uint64_t v2 = a1[9];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v9 = "handleDataContextIpDeactivatedContextDisappeared";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  int v3 = (std::__shared_weak_count *)a1[16];
  if (v3)
  {
    int v4 = std::__shared_weak_count::lock(v3);
    if (v4) {
      uint64_t v5 = a1[15];
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    int v4 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v6, a1);
  (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v5 + 136))(v5, 0, &v6);
  if (v7) {
    sub_10004D2C8(v7);
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
}

void sub_1010C5304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C5330(uint64_t a1)
{
}

void sub_1010C5338(uint64_t a1, uint64_t a2)
{
  int v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 568))(*(void *)(a1 + 120), a2);

  sub_10004D2C8(v4);
}

void sub_1010C53B8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C53CC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1010C53D4(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    uint64_t v7 = "handleDataContextIPAborted";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v6, 0xCu);
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 168) + 280))(*(void *)(a1 + 168), 3);
  if (!result)
  {
    int v4 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315138;
      uint64_t v7 = "handleDataContextIPAborted";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Done with this context", (uint8_t *)&v6, 0xCu);
    }
    uint64_t v5 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
    (*(void (**)(void, void))(**(void **)(a1 + 120) + 320))(*(void *)(a1 + 120), 0);
    sub_10004D2C8(v5);
    uint64_t result = CSISystemElapsedTime();
    *(_DWORD *)(a1 + 192) = result;
  }
  return result;
}

void sub_1010C5550(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C556C(uint64_t a1)
{
  return sub_1010C53D4(a1 - 144);
}

void sub_1010C5574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 120) + 416))(*(void *)(a1 + 120), 0, a2, a3);

  sub_10004D2C8(v6);
}

void sub_1010C5600(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C5614(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1010C561C(uint64_t a1)
{
}

void sub_1010C5624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 136315650;
    char v12 = "handleDataContextIPDidGetMTU";
    __int16 v13 = 1024;
    int v14 = a3;
    __int16 v15 = 2080;
    uint64_t v16 = asString();
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Got MTU: %d for family: %s", (uint8_t *)&v11, 0x1Cu);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 128);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 120);
      sub_10004D2C8(v8);
      if (v9)
      {
        int v10 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), a2, a3);
        sub_10004D2C8(v10);
      }
    }
  }
}

void sub_1010C5758(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C576C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1010C5774(uint64_t a1, uint64_t a2)
{
  int v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 120);
  sub_10004D2C8(v5);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 128);
  if (v7)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v7);
    uint64_t v8 = v7;
    if (v7) {
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 120);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = ((uint64_t (*)(std::__shared_weak_count *, uint64_t))v7->__get_deleter)(v7, a2);
  if (v8) {
    sub_10004D2C8(v8);
  }
  return v9;
}

void sub_1010C5820(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C5838(uint64_t a1, uint64_t a2)
{
  return sub_1010C5774(a1 - 144, a2);
}

void sub_1010C5840(uint64_t a1, uint64_t a2)
{
  int v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 184))(*(void *)(a1 + 120), a2);

  sub_10004D2C8(v4);
}

void sub_1010C58C0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C58D4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1010C58DC(uint64_t a1)
{
  sub_1012A6020((char *)(a1 + 32), 0);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 232);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3) {
      int v4 = *(char **)(a1 + 224);
    }
    else {
      int v4 = 0;
    }
  }
  else
  {
    int v4 = 0;
    int v3 = 0;
  }
  unsigned int v5 = (*(uint64_t (**)(char *))(*(void *)&v4[*(void *)(*(void *)v4 - 320)] + 184))(&v4[*(void *)(*(void *)v4 - 320)]);
  if (v3) {
    sub_10004D2C8(v3);
  }
  return v5;
}

void sub_1010C5998(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C59B0(uint64_t a1, uint64_t a2)
{
  return sub_1012A6020((char *)(a1 + 32), a2);
}

uint64_t sub_1010C59B8(void *a1)
{
  return sub_1010C58DC((uint64_t)a1 + *(void *)(*a1 - 192));
}

void sub_1010C59D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v7 = *(_DWORD *)(a1 + 136);
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  sub_1012A612C((char *)(a1 + 32), &v14);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10004FC84(v10, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)int v10 = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 16);
  }
  if (SHIBYTE(v15) < 0)
  {
    sub_10004FC84(__p, (void *)v14, *((unint64_t *)&v14 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = v14;
    uint64_t v9 = v15;
  }
  sub_10017BDC0(v7, (long long *)__dst, (long long *)v10, a2, (long long *)__p, 0);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
}

void sub_1010C5AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 33) < 0) {
    operator delete(*(void **)(v28 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C5B5C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

void sub_1010C5B64(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_1010C5B6C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1010C5B74()
{
  return sub_100283288((wis::MetricFactory *)0x8004F);
}

void sub_1010C5B88(id a1, void *a2)
{
  int v2 = *((_DWORD *)a2 + 9);
  *((unsigned char *)a2 + 24) = 1;
  *((_DWORD *)a2 + 9) = v2 | 0xA;
  *((_DWORD *)a2 + 7) = 4;
}

uint64_t sub_1010C5BAC()
{
  return sub_100283288((wis::MetricFactory *)0x8004F);
}

void sub_1010C5BC0(PersonalitySpecificImpl *a1)
{
  PersonalitySpecificImpl::simSlot(a1);

  sub_10017D68C();
}

void sub_1010C5C10(uint64_t a1)
{
  PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)(a1 - 144));

  sub_10017D68C();
}

void sub_1010C5C68(PersonalitySpecificImpl *a1)
{
  PersonalitySpecificImpl::simSlot(a1);

  sub_10017D918();
}

void sub_1010C5CA0(uint64_t a1)
{
  PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)(a1 - 144));

  sub_10017D918();
}

uint64_t sub_1010C5CE0(uint64_t a1)
{
  uint64_t result = CSISystemElapsedTime();
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1010C5D08(void *a1)
{
  int v2 = a1[9];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315138;
    uint64_t v9 = "shutDownContext";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v8, 0xCu);
  }
  uint64_t v4 = a1[21];
  int v3 = (std::__shared_weak_count *)a1[22];
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v3);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v4 = a1[21];
    unsigned int v5 = (std::__shared_weak_count *)a1[22];
    if (v5)
    {
      char v6 = 0;
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_12;
    }
    unsigned int v5 = 0;
  }
  char v6 = 1;
LABEL_10:
  (*(void (**)(uint64_t))(*(void *)v4 + 72))(v4);
  if ((v6 & 1) == 0) {
    sub_10004D2C8(v5);
  }
LABEL_12:
  uint64_t result = a1[23];
  a1[23] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1010C5E5C(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C5E74(uint64_t a1)
{
  return sub_1010C5D08((void *)(a1 - 24));
}

uint64_t sub_1010C5E7C(uint64_t a1)
{
  return sub_1010C5D08((void *)(a1 - 144));
}

uint64_t sub_1010C5E84(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 232);
  if (v2)
  {
    char v2 = std::__shared_weak_count::lock(v2);
    int v3 = v2;
    if (v2) {
      char v2 = *(std::__shared_weak_count **)(a1 + 224);
    }
  }
  else
  {
    int v3 = 0;
  }
  uint64_t v4 = ((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[11].~__shared_weak_count)(v2);
  if (v3) {
    sub_10004D2C8(v3);
  }
  return v4;
}

void sub_1010C5F04(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C5F1C(uint64_t a1)
{
  return sub_1010C5E84(a1 - 144);
}

void sub_1010C5F24(void *a1)
{
}

void sub_1010C5F4C(uint64_t a1)
{
}

void sub_1010C5F54(uint64_t a1, char a2, int a3)
{
  char v5 = 0;
  sub_100460ED0(*(void *)(a1 + 248), a2, &v5, a3);
  if (!v5)
  {
    uint64_t v4 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      int v7 = "enableOutgoingTraffic";
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "%s: no AppleIPAppenderInterface instance", buf, 0xCu);
    }
    *(unsigned char *)(a1 + 246) = 1;
  }
}

void sub_1010C6020(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 100)) {
    char v1 = 1;
  }
  else {
    char v1 = *(unsigned char *)(a1 + 101) != 0;
  }
  sub_1010C5F54(a1 - 144, v1, 1);
}

uint64_t sub_1010C6048(uint64_t a1, int a2, uint64_t *a3, char *a4)
{
  if (!capabilities::ct::supportsIPCInterfaceConfig((capabilities::ct *)a1)) {
    return 1;
  }
  int v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 560))(*(void *)(a1 + 120));
  int v10 = *(_DWORD *)v9;
  int v11 = *(unsigned __int8 *)(v9 + 4);
  uint64_t v12 = *(void *)(v9 + 8);
  sub_10004D2C8(v8);
  if (!*a3) {
    *a3 = sub_1012A6020((char *)(a1 + 32), 1);
  }
  int v13 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  if (v11 == a2)
  {
    if (!a2 || (v10 == v13 ? (BOOL v14 = v12 == *a3) : (BOOL v14 = 0), v14))
    {
      uint64_t v25 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "ipcInterfaceConfig";
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I %s: success: nothing to do", buf, 0xCu);
      }
      *a4 = 0;
      return 1;
    }
  }
  *(void *)long long buf = 0;
  long long v40 = 0u;
  *(void *)&uint8_t buf[8] = "";
  uint64_t v35 = 0;
  __int16 v36 = 0;
  uint64_t v37 = 0;
  BYTE8(v40) = a2;
  LODWORD(v40) = *(_DWORD *)(a1 + 136);
  DWORD1(v40) = -1;
  uint64_t v41 = 0;
  PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  *(void *)long long buf = subscriber::simSlotAsInstance() + 1;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v34 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(uint64_t **)buf, *(Registry **)(a1 + 80));
  uint64_t v16 = ServiceMap;
  if (v17 < 0)
  {
    uint64_t v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v19 = 5381;
    do
    {
      uint64_t v17 = v19;
      unsigned int v20 = *v18++;
      uint64_t v19 = (33 * v19) ^ v20;
    }
    while (v20);
  }
  std::mutex::lock(ServiceMap);
  *(void *)__int16 v38 = v17;
  uint64_t v21 = sub_10004D37C(&v16[1].__m_.__sig, (unint64_t *)v38);
  if (!v21)
  {
    uint64_t v23 = 0;
    goto LABEL_21;
  }
  uint64_t v23 = v21[3];
  uint64_t v22 = (std::__shared_weak_count *)v21[4];
  if (!v22)
  {
LABEL_21:
    std::mutex::unlock(v16);
    uint64_t v22 = 0;
    char v24 = 1;
    goto LABEL_22;
  }
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v16);
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v22);
  char v24 = 0;
LABEL_22:
  uint64_t v27 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, void, void, uint64_t))(*(void *)v23 + 176))(__p, v23, v27, *(unsigned int *)(a1 + 136), 0, *a3);
  if ((v24 & 1) == 0) {
    sub_10004D2C8(v22);
  }
  uint64_t v28 = __p;
  if (v34 < 0) {
    uint64_t v28 = (void **)__p[0];
  }
  *(void *)&uint8_t buf[8] = v28;
  uint64_t v26 = (*(uint64_t (**)(void, uint8_t *, void **))(**(void **)(a1 + 208) + 200))(*(void *)(a1 + 208), buf, &v35);
  uint64_t v29 = *(NSObject **)(a1 + 72);
  BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
  if (v26)
  {
    if (v30)
    {
      *(_DWORD *)__int16 v38 = 136315138;
      *(void *)&v38[4] = "ipcInterfaceConfig";
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I %s: success", v38, 0xCu);
    }
    char v31 = 1;
  }
  else
  {
    if (v30)
    {
      *(_DWORD *)__int16 v38 = 136315138;
      *(void *)&v38[4] = "ipcInterfaceConfig";
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#E %s: failure", v38, 0xCu);
    }
    char v31 = 0;
  }
  *a4 = v31;
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
  if (v35)
  {
    __int16 v36 = v35;
    operator delete(v35);
  }
  return v26;
}

void sub_1010C63F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C6468(void *a1, int a2, uint64_t *a3, char *a4)
{
  return sub_1010C6048((uint64_t)a1 + *(void *)(*a1 - 552), a2, a3, a4);
}

void sub_1010C6488(void *a1, char a2, int a3)
{
}

void sub_1010C64A8(uint64_t a1, int a2, int a3, BOOL a4)
{
  if ((a2 - 1) >= 2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315650;
      char v24 = "called with wrong ipFamily";
      __int16 v25 = 2080;
      uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/BBDataContext.cpp";
      __int16 v27 = 1024;
      LODWORD(v28) = 886;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT kDataProtocolFamilyIPv4 == ipFamily || kDataProtocolFamilyIPv6 == ipFamily\n %s\n at %s:%d\n**********", (uint8_t *)&v23, 0x1Cu);
    }
    __TUAssertTrigger();
  }
  int v8 = *(unsigned __int8 *)(a1 + 244);
  if (*(unsigned char *)(a1 + 244)) {
    int v9 = 1;
  }
  else {
    int v9 = *(unsigned char *)(a1 + 245) != 0;
  }
  if (a2 == 2)
  {
    int v13 = *(unsigned __int8 *)(a1 + 245);
    if (v13 != a3)
    {
      BOOL v14 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = asStringBool(v13 != 0);
        uint64_t v16 = asStringBool(a3);
        int v23 = 136315650;
        char v24 = "setOutgoingTrafficEnabled";
        __int16 v25 = 2080;
        uint64_t v26 = (const char *)v15;
        __int16 v27 = 2080;
        uint64_t v28 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s: Changing fOutgoingTrafficEnabledIPv6 from %s to %s", (uint8_t *)&v23, 0x20u);
        int v8 = *(unsigned __int8 *)(a1 + 244);
      }
      *(unsigned char *)(a1 + 245) = a3;
    }
  }
  else if (a2 == 1)
  {
    if (v8 != a3)
    {
      int v10 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = asStringBool(v8 != 0);
        uint64_t v12 = asStringBool(a3);
        int v23 = 136315650;
        char v24 = "setOutgoingTrafficEnabled";
        __int16 v25 = 2080;
        uint64_t v26 = (const char *)v11;
        __int16 v27 = 2080;
        uint64_t v28 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Changing fOutgoingTrafficEnabledIPv4 from %s to %s", (uint8_t *)&v23, 0x20u);
      }
      *(unsigned char *)(a1 + 244) = a3;
    }
    int v8 = a3;
  }
  if (v8) {
    int v17 = 1;
  }
  else {
    int v17 = *(unsigned char *)(a1 + 245) != 0;
  }
  if (v9 != v17 || a4)
  {
    uint64_t v18 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = asStringBool(v9);
      uint64_t v20 = asStringBool(v17);
      uint64_t v21 = asStringBool(a4);
      int v23 = 136315906;
      char v24 = "setOutgoingTrafficEnabled";
      __int16 v25 = 2080;
      uint64_t v26 = (const char *)v19;
      __int16 v27 = 2080;
      uint64_t v28 = v20;
      __int16 v29 = 2080;
      uint64_t v30 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s: Cumulative OutgoingTrafficEnabled changed from %s to %s (force=%s)", (uint8_t *)&v23, 0x2Au);
      int v8 = *(unsigned __int8 *)(a1 + 244);
    }
    if (v8) {
      char v22 = 1;
    }
    else {
      char v22 = *(unsigned char *)(a1 + 245) != 0;
    }
    sub_1010C5F54(a1, v22, 1);
  }
}

void sub_1010C67D8(uint64_t a1, int a2, int a3, BOOL a4)
{
}

uint64_t sub_1010C67E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 208);
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 480))();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 64);

  return v3(v1, v2);
}

uint64_t sub_1010C6864(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 184);
  uint64_t v2 = *((void *)v1 + 26);
  uint64_t v3 = (*(uint64_t (**)(void))(*((void *)v1 + 4) + 480))();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 64);

  return v4(v2, v3);
}

uint64_t sub_1010C6900(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 184))();
}

uint64_t sub_1010C6928(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 224) + 168) + 184))();
}

uint64_t sub_1010C6968(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 192))();
}

uint64_t sub_1010C6990(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 424) + 168) + 192))();
}

uint64_t sub_1010C69D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 136) + 192))();
}

uint64_t sub_1010C69FC(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a1 + 168);
  sub_100058198(&v11, a4);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void **, uint64_t))(*(void *)v8 + 208))(v8, a2, a3, &v11, a5);
  sub_100057D78(&v11);
  return v9;
}

void sub_1010C6A8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C6AA0(void *a1, uint64_t a2, uint64_t a3, const void **a4, uint64_t a5)
{
  return sub_1010C69FC((uint64_t)a1 + *(void *)(*a1 - 328), a2, a3, a4, a5);
}

const void **sub_1010C6AC0(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = *(void *)(a1 + 168);
  sub_100058198(&v6, a3);
  (*(void (**)(uint64_t, uint64_t, const void **))(*(void *)v4 + 216))(v4, a2, &v6);
  return sub_100057D78(&v6);
}

void sub_1010C6B30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_1010C6B44(void *a1, uint64_t a2, const void **a3)
{
  return sub_1010C6AC0((uint64_t)a1 + *(void *)(*a1 - 336), a2, a3);
}

const void **sub_1010C6B64(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 168);
  sub_100062740(&v6, a2);
  (*(void (**)(uint64_t, const void **, uint64_t))(*(void *)v4 + 344))(v4, &v6, a3);
  return sub_100044D00(&v6);
}

void sub_1010C6BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100044D00((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_1010C6BEC(void *a1, const void **a2, uint64_t a3)
{
  return sub_1010C6B64((uint64_t)a1 + *(void *)(*a1 - 344), a2, a3);
}

uint64_t sub_1010C6C0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 352))();
}

uint64_t sub_1010C6C3C(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 352) + 168) + 352))();
}

uint64_t sub_1010C6C88(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 104) + 168) + 280))();
}

uint64_t sub_1010C6CD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 288))();
}

uint64_t sub_1010C6D00(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 112) + 168) + 288))();
}

uint64_t sub_1010C6D48(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 304))();
}

uint64_t sub_1010C6D78(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 432) + 168) + 304))();
}

uint64_t sub_1010C6DC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 312))();
}

uint64_t sub_1010C6DF4(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 440) + 168) + 312))();
}

void *sub_1010C6E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 168);
  sub_1000DFC90((uint64_t)v8, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v6 + 400))(v6, a2, a3, v8);
  return sub_100060644(v8);
}

void sub_1010C6EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100060644((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1010C6F10(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1010C6E40((uint64_t)a1 + *(void *)(*a1 - 600), a2, a3, a4);
}

void *sub_1010C6F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 168);
  sub_1000DFC90((uint64_t)v8, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v6 + 408))(v6, a2, a3, v8);
  return sub_100060644(v8);
}

void sub_1010C6FE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100060644((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1010C7000(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1010C6F30((uint64_t)a1 + *(void *)(*a1 - 608), a2, a3, a4);
}

void *sub_1010C7020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 168);
  sub_1008DC004((uint64_t)v6, a3);
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 416))(v4, a2, v6);
  return sub_100523F74(v6);
}

void sub_1010C70C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100523F74((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1010C70E0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1010C7020((uint64_t)a1 + *(void *)(*a1 - 616), a2, a3);
}

uint64_t sub_1010C7100(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 296))();
}

uint64_t sub_1010C7130(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 560) + 168) + 296))();
}

uint64_t sub_1010C717C(uint64_t a1)
{
  sub_1010C07B8((void *)a1, 0);
  sub_1010C07B8((void *)a1, 1);
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 168) + 320);

  return v2();
}

uint64_t sub_1010C71F8(void *a1)
{
  return sub_1010C717C((uint64_t)a1 + *(void *)(*a1 - 536));
}

void sub_1010C7218(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 168) + 328))(*(void *)(a1 + 168));
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 168) + 280))() == 6)
  {
    sub_10003E168(&block, (void *)(a1 + 40));
    uint64_t v3 = block;
    uint64_t v2 = (std::__shared_weak_count *)v8;
    if (v8)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
      sub_10004D2C8(v2);
    }
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 1174405120;
    void v5[2] = sub_1010C73FC;
    void v5[3] = &unk_101A895B8;
    v5[4] = a1;
    v5[5] = v3;
    uint64_t v6 = v2;
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_10003E168(&v14, (void *)(a1 + 40));
    uint64_t v4 = *(NSObject **)(a1 + 56);
    block = _NSConcreteStackBlock;
    uint64_t v8 = 1174405120;
    uint64_t v9 = sub_1010CC424;
    int v10 = &unk_101A8B1C0;
    uint64_t v12 = v14;
    int v13 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = v5;
    dispatch_async(v4, &block);
    if (v13) {
      sub_10004D2C8(v13);
    }
    if (v15) {
      sub_10004D2C8(v15);
    }
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1010C73FC(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v3 + 128);
        if (v6)
        {
          int v7 = std::__shared_weak_count::lock(v6);
          uint64_t v8 = v7 ? *(void *)(v3 + 120) : 0;
        }
        else
        {
          uint64_t v8 = 0;
          int v7 = 0;
        }
        uint64_t v9 = otherContextType();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 344))(v8, v9);
        if (v7) {
          sub_10004D2C8(v7);
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_1010C74DC(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C74FC(void *a1)
{
}

void sub_1010C751C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 168) + 336))(*(void *)(a1 + 168));
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 168) + 280))() == 6)
  {
    sub_10003E168(&block, (void *)(a1 + 40));
    uint64_t v3 = block;
    uint64_t v2 = (std::__shared_weak_count *)v8;
    if (v8)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
      sub_10004D2C8(v2);
    }
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 1174405120;
    void v5[2] = sub_1010C7700;
    void v5[3] = &unk_101A895E8;
    v5[4] = a1;
    v5[5] = v3;
    uint64_t v6 = v2;
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_10003E168(&v14, (void *)(a1 + 40));
    uint64_t v4 = *(NSObject **)(a1 + 56);
    block = _NSConcreteStackBlock;
    uint64_t v8 = 1174405120;
    uint64_t v9 = sub_1010CC424;
    int v10 = &unk_101A8B1C0;
    uint64_t v12 = v14;
    int v13 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = v5;
    dispatch_async(v4, &block);
    if (v13) {
      sub_10004D2C8(v13);
    }
    if (v15) {
      sub_10004D2C8(v15);
    }
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1010C7700(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v3 + 128);
        if (v6)
        {
          int v7 = std::__shared_weak_count::lock(v6);
          uint64_t v8 = v7 ? *(void *)(v3 + 120) : 0;
        }
        else
        {
          uint64_t v8 = 0;
          int v7 = 0;
        }
        uint64_t v9 = otherContextType();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 344))(v8, v9);
        if (v7) {
          sub_10004D2C8(v7);
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_1010C77E0(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C7800(void *a1)
{
}

uint64_t sub_1010C7820(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 360))();
}

uint64_t sub_1010C7850(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 360) + 168) + 360))();
}

uint64_t sub_1010C789C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 224))();
}

uint64_t sub_1010C78C4(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 120) + 168) + 224))();
}

uint64_t sub_1010C7904(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 240))();
}

uint64_t sub_1010C792C(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 136) + 168) + 240))();
}

uint64_t sub_1010C796C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 232))();
}

uint64_t sub_1010C7994(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 128) + 168) + 232))();
}

uint64_t sub_1010C79D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 248))();
}

uint64_t sub_1010C79FC(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 144) + 168) + 248))();
}

uint64_t sub_1010C7A3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 256))();
}

uint64_t sub_1010C7A6C(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 208) + 168) + 256))();
}

uint64_t sub_1010C7AB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 264))();
}

uint64_t sub_1010C7AE4(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 168) + 168) + 264))();
}

uint64_t sub_1010C7B2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 272))();
}

uint64_t sub_1010C7B5C(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 176) + 168) + 272))();
}

void sub_1010C7BA4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1010C7BAC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, char a9)
{
  int v17 = (std::__shared_weak_count *)a1[16];
  if (v17)
  {
    uint64_t v18 = std::__shared_weak_count::lock(v17);
    if (v18) {
      uint64_t v19 = a1[15];
    }
    else {
      uint64_t v19 = 0;
    }
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v18 = 0;
  }
  long long v20 = *(_OWORD *)(a3 + 16);
  v30[0] = *(_OWORD *)a3;
  v30[1] = v20;
  uint64_t v21 = *(void *)(a3 + 40);
  uint64_t v31 = *(void *)(a3 + 32);
  uint64_t v32 = v21;
  char v22 = *(std::__shared_weak_count **)(a3 + 48);
  int v33 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v29 = *(void *)(a4 + 16);
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v26, a1);
  BYTE4(v25) = a9;
  LODWORD(v25) = a8;
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, void **, uint64_t, void, uint64_t *, void, unint64_t, uint64_t))(*(void *)v19 + 152))(v19, a2, v30, __p, a5, 0, &v26, 0, __PAIR64__(a7, a6), v25);
  if (v27) {
    sub_10004D2C8(v27);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  if (v33) {
    sub_10004D2C8(v33);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  return v23;
}

void sub_1010C7D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    sub_10004D2C8(a26);
  }
  if (v26) {
    sub_10004D2C8(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C7D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, char a9)
{
  return sub_1010C7BAC((void *)(a1 - 144), a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1010C7DA8(uint64_t a1)
{
  uint64_t v2 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, void, const char *, uint64_t))(**(void **)(a1 + 120) + 424))(*(void *)(a1 + 120), 0, "context activated", 1);
  sub_10004D2C8(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4) {
      uint64_t v5 = *(void *)(a1 + 120);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v6, a1);
  (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v5 + 144))(v5, 0, &v6);
  if (v7) {
    sub_10004D2C8(v7);
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  *(_DWORD *)(a1 + 192) = CSISystemElapsedTime();
  sub_1010C4D38(a1);
}

void sub_1010C7EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C7F10(uint64_t a1)
{
}

uint64_t sub_1010C7F18(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::__shared_weak_count *)a1[16];
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9) {
      uint64_t v10 = a1[15];
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v13, a1);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *, uint64_t, uint64_t))(*(void *)v10 + 224))(v10, a2, 0, &v13, a3, a4);
  if (v14) {
    sub_10004D2C8(v14);
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
  return v11;
}

void sub_1010C8010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C803C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1010C7F18((void *)(a1 - 144), a2, a3, a4);
}

uint64_t sub_1010C8044@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 216);
  *a2 = *(void *)(result + 208);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1010C8060@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 72);
  *a2 = *(void *)(result + 64);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1010C807C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 216);
  *a2 = *(void *)(result + 208);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1010C8098@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 72);
  *a2 = *(void *)(result + 64);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1010C80B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(a1 + 120) + 112))(*(void *)(a1 + 120), 0, a2, a3);

  sub_10004D2C8(v6);
}

void sub_1010C8138(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C814C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1010C8154(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[29];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3) {
      uint64_t v4 = (char *)a1[28];
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v5 = *(void *)(*(void *)v4 - 320);
  uint64_t v6 = (*(uint64_t (**)(void *))(a1[4] + 480))(a1 + 4);
  (*(void (**)(char *, uint64_t))(*(void *)&v4[v5] + 176))(&v4[v5], v6);
  if (v3)
  {
    sub_10004D2C8(v3);
  }
}

void sub_1010C8244(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C825C(uint64_t a1)
{
}

void sub_1010C8264(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_1010C826C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 248))(*(void *)(a1 + 120), a2);

  sub_10004D2C8(v4);
}

void sub_1010C82E4(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C82F8(uint64_t a1, uint64_t a2)
{
}

void sub_1010C8300(uint64_t a1)
{
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v32 = (uint64_t *)v33;
  uint64_t v2 = *(void ***)(a1 + 304);
  uint64_t v3 = *(void ***)(a1 + 312);
  if (v3 == v2)
  {
    uint64_t v3 = *(void ***)(a1 + 304);
LABEL_34:
    uint64_t v25 = (void *)(a1 + 336);
    goto LABEL_35;
  }
  unint64_t v4 = *(void *)(a1 + 328);
  uint64_t v5 = (unsigned int *)((char *)v2[v4 / 0x19] + 160 * (v4 % 0x19));
  unint64_t v31 = (unint64_t)v2[(*(void *)(a1 + 336) + v4) / 0x19] + 160 * ((*(void *)(a1 + 336) + v4) % 0x19);
  if (v5 != (unsigned int *)v31)
  {
    uint64_t v6 = &v2[v4 / 0x19];
    do
    {
      uint64_t v7 = v5[3];
      uint64_t v8 = v33[0];
      if (!v33[0]) {
        goto LABEL_45;
      }
      uint64_t v9 = v33;
      do
      {
        uint64_t v10 = v8;
        uint64_t v11 = v9;
        unsigned int v12 = *((_DWORD *)v8 + 7);
        uint64_t v13 = v8 + 1;
        if (v12 >= v7)
        {
          uint64_t v13 = v10;
          uint64_t v9 = (void **)v10;
        }
        uint64_t v8 = (void *)*v13;
      }
      while (v8);
      if (v9 == v33) {
        goto LABEL_45;
      }
      if (v12 < v7) {
        uint64_t v10 = v11;
      }
      if (v7 < *((_DWORD *)v10 + 7))
      {
LABEL_45:
        if (*((unsigned char *)v5 + 144) && *((unsigned char *)v5 + 92)) {
          uint64_t v14 = v5[22];
        }
        else {
          uint64_t v14 = 0;
        }
        if (*((unsigned char *)v5 + 80) && *((unsigned char *)v5 + 28)) {
          uint64_t v15 = v5[6];
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(void *)(a1 + 208);
        uint64_t v17 = sub_1012A6020((char *)(a1 + 32), 0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 128))(v16, v7, v14, v15, v17);
        sub_100A08300(&v32, v5 + 3, v5 + 3);
      }
      uint64_t v18 = *(void *)(a1 + 208);
      uint64_t v19 = *v5;
      uint64_t v20 = sub_1012A6020((char *)(a1 + 32), 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 112))(v18, v19, v20);
      v5 += 40;
      if ((char *)v5 - (unsigned char *)*v6 == 4000)
      {
        uint64_t v21 = (unsigned int *)v6[1];
        ++v6;
        uint64_t v5 = v21;
      }
    }
    while (v5 != (unsigned int *)v31);
    uint64_t v2 = *(void ***)(a1 + 304);
    uint64_t v3 = *(void ***)(a1 + 312);
  }
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    goto LABEL_34;
  }
  unint64_t v22 = *(void *)(a1 + 328);
  uint64_t v23 = &v2[v22 / 0x19];
  uint64_t v24 = (uint64_t)*v23 + 160 * (v22 % 0x19);
  uint64_t v25 = (void *)(a1 + 336);
  unint64_t v26 = (unint64_t)v2[(*(void *)(a1 + 336) + v22) / 0x19] + 160 * ((*(void *)(a1 + 336) + v22) % 0x19);
  if (v24 != v26)
  {
    do
    {
      sub_100525A70(v24);
      v24 += 160;
      if (v24 - (void)*v23 == 4000)
      {
        uint64_t v27 = (uint64_t)v23[1];
        ++v23;
        uint64_t v24 = v27;
      }
    }
    while (v24 != v26);
    uint64_t v2 = *(void ***)(a1 + 304);
    uint64_t v3 = *(void ***)(a1 + 312);
  }
LABEL_35:
  void *v25 = 0;
  unint64_t v28 = (char *)v3 - (char *)v2;
  if (v28 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v29 = *(void *)(a1 + 312);
      uint64_t v2 = (void **)(*(void *)(a1 + 304) + 8);
      *(void *)(a1 + 304) = v2;
      unint64_t v28 = v29 - (void)v2;
    }
    while (v28 > 0x10);
  }
  if (v28 >> 3 == 1)
  {
    uint64_t v30 = 12;
    goto LABEL_41;
  }
  if (v28 >> 3 == 2)
  {
    uint64_t v30 = 25;
LABEL_41:
    *(void *)(a1 + 328) = v30;
  }
  sub_1010C865C((void *)a1);
  sub_1012A679C((char *)(a1 + 32));
  sub_1000346F8((uint64_t)&v32, v33[0]);
}

void sub_1010C8640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

capabilities::ct *sub_1010C865C(void *a1)
{
  uint64_t result = (capabilities::ct *)(*(uint64_t (**)(void))(a1[4] + 480))();
  if (result)
  {
    uint64_t result = (capabilities::ct *)capabilities::ct::supportsThroughputEngineering(result);
    if (result)
    {
      *(void *)uint64_t v18 = 0;
      memset(v17, 0, sizeof(v17));
      *(void *)uint64_t v16 = 0;
      memset(v15, 0, sizeof(v15));
      uint64_t v3 = a1[38];
      if (a1[39] != v3)
      {
        unint64_t v4 = a1[41];
        uint64_t v5 = (void *)(v3 + 8 * (v4 / 0x19));
        unint64_t v6 = *v5 + 160 * (v4 % 0x19);
        unint64_t v7 = *(void *)(v3 + 8 * ((a1[42] + v4) / 0x19)) + 160 * ((a1[42] + v4) % 0x19);
        while (1)
        {
          if (v6 == v7) {
            goto LABEL_15;
          }
          if (v18[0]) {
            break;
          }
          if (*(unsigned char *)(v6 + 80))
          {
            sub_1010C8AB8(buf, v6 + 24);
            sub_1010CBDD4((uint64_t)v17, (uint64_t)buf);
            sub_1010CBF38((uint64_t)buf);
          }
          if (!v16[0]) {
            goto LABEL_8;
          }
LABEL_13:
          v6 += 160;
          if (v6 - *v5 == 4000)
          {
            unint64_t v8 = v5[1];
            ++v5;
            unint64_t v6 = v8;
          }
        }
        if (v16[0]) {
          goto LABEL_15;
        }
LABEL_8:
        if (*(unsigned char *)(v6 + 144))
        {
          sub_1010C8AB8(buf, v6 + 88);
          sub_1010CBDD4((uint64_t)v15, (uint64_t)buf);
          sub_1010CBF38((uint64_t)buf);
        }
        goto LABEL_13;
      }
LABEL_15:
      uint64_t v9 = a1[9];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = asStringBool(v18[0]);
        uint64_t v11 = asStringBool(v16[0]);
        *(_DWORD *)long long buf = 136315394;
        uint64_t v20 = v10;
        __int16 v21 = 2080;
        uint64_t v22 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I anbr: uplink found: %s, downlink found: %s", buf, 0x16u);
      }
      uint64_t v12 = a1[21];
      sub_1010CBF74(v14, (uint64_t)v17);
      sub_1010CBF74(v13, (uint64_t)v15);
      (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)v12 + 96))(v12, v14, v13);
      sub_1010CBF38((uint64_t)v13);
      sub_1010CBF38((uint64_t)v14);
      sub_1010CBF38((uint64_t)v15);
      return (capabilities::ct *)sub_1010CBF38((uint64_t)v17);
    }
  }
  return result;
}

void sub_1010C88FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

void sub_1010C8944(void *a1)
{
}

void sub_1010C8964(uint64_t a1)
{
}

void sub_1010C896C(uint64_t a1)
{
}

void sub_1010C8974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 120) + 520))(*(void *)(a1 + 120), a2, a3);

  sub_10004D2C8(v6);
}

void sub_1010C89FC(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010C8A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1010C8A18(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = ((uint64_t (*)(std::__shared_weak_count *))v2->__vftable[13].~__shared_weak_count_0)(v2);
  if (v3) {
    sub_10004D2C8(v3);
  }
  return v4;
}

void sub_1010C8A98(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C8AB0(uint64_t a1)
{
  return sub_1010C8A18(a1 - 144);
}

_OWORD *sub_1010C8AB8(_OWORD *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (*(unsigned char *)(a2 + 48))
  {
    for (uint64_t i = *(void *)(a2 + 24); i != *(void *)(a2 + 32); i += 160)
    {
      if (*(unsigned char *)(i + 80) && *(unsigned char *)(i + 68))
      {
        uint64_t v4 = (_WORD *)(i + 66);
      }
      else
      {
        if (!*(unsigned char *)(i + 136) || !*(unsigned char *)(i + 124))
        {
LABEL_13:
          long long v6 = *(_OWORD *)(i + 16);
          *uint64_t result = *(_OWORD *)i;
          result[1] = v6;
          sub_100522ECC((uint64_t)(result + 2), i + 32);
          uint64_t result = (_OWORD *)sub_100522ECC((uint64_t)v2 + 88, i + 88);
          uint64_t v7 = *(void *)(i + 144);
          *(void *)((char *)v2 + 150) = *(void *)(i + 150);
          *((void *)v2 + 18) = v7;
          char v5 = 1;
          goto LABEL_14;
        }
        uint64_t v4 = (_WORD *)(i + 122);
      }
      if ((*v4 & 1) == 0) {
        goto LABEL_13;
      }
    }
  }
  char v5 = 0;
  *(unsigned char *)uint64_t result = 0;
LABEL_14:
  *((unsigned char *)v2 + 160) = v5;
  return result;
}

void sub_1010C8B78(_Unwind_Exception *a1)
{
  sub_100522D0C(v1);
  _Unwind_Resume(a1);
}

void sub_1010C8B8C(uint64_t a1, char a2)
{
}

void sub_1010C8B98(void *a1, char a2)
{
}

void *sub_1010C8BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 168);
  sub_1000DFC90((uint64_t)v8, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v6 + 120))(v6, a2, a3, v8);
  return sub_100060644(v8);
}

void sub_1010C8C6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100060644((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1010C8C88(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1010C8BC0((uint64_t)a1 + *(void *)(*a1 - 288), a2, a3, a4);
}

void *sub_1010C8CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 168);
  sub_100323990((uint64_t)v4, a2);
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 112))(v2, v4);
  return sub_1000605C0(v4);
}

void sub_1010C8D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000605C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1010C8D54(void *a1, uint64_t a2)
{
  return sub_1010C8CA8((uint64_t)a1 + *(void *)(*a1 - 296), a2);
}

void sub_1010C8D74(void *a1, uint64_t a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[16];
  if (v4)
  {
    char v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      uint64_t v6 = a1[15];
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    char v5 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v7, a1);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v6 + 536))(v6, &v7, a2);
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
}

void sub_1010C8E50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C8E7C(uint64_t a1, uint64_t a2)
{
}

void sub_1010C8E84(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (std::__shared_weak_count *)a1[16];
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7) {
      uint64_t v8 = a1[15];
    }
    else {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v9, a1);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v8 + 544))(v8, &v9, a2, a3);
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1010C8F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C8F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_1010C8FA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 136))();
}

uint64_t sub_1010C8FCC(void *a1)
{
  return (*(uint64_t (**)(void))(**(void **)((char *)a1 + *(void *)(*a1 - 320) + 168) + 136))();
}

uint64_t sub_1010C9010(uint64_t a1, unsigned __int16 a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 168) + 128))(*(void *)(a1 + 168), a2);
}

uint64_t sub_1010C903C(void *a1, unsigned __int16 a2)
{
  uint64_t v2 = *(void *)((char *)a1 + *(void *)(*a1 - 304) + 168);
  return (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 128))(v2, a2);
}

capabilities::ct *sub_1010C9084(uint64_t a1, int *a2)
{
  uint64_t v4 = (int64x2_t *)(a1 + 296);
  char v5 = sub_1010C9990((void *)(a1 + 296), *a2);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 304);
  if (*(void *)(a1 + 312) == v7)
  {
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = *(void *)(a1 + 336) + *(void *)(a1 + 328);
    unint64_t v9 = *(void *)(v7 + 8 * (v8 / 0x19)) + 160 * (v8 % 0x19);
  }
  if ((char *)v9 == v5)
  {
    uint64_t result = (capabilities::ct *)sub_1005B0D28((uint64_t)a2);
    if (result) {
      return result;
    }
    uint64_t v24 = *(void *)(a1 + 304);
    if (*(void *)(a1 + 312) == v24
      || (unint64_t v25 = *(void *)(a1 + 328),
          uint64_t v26 = *(void *)(v24 + 8 * (v25 / 0x19)),
          uint64_t v27 = v26 + 160 * (v25 % 0x19),
          unint64_t v28 = *(void *)(v24 + 8 * ((*(void *)(a1 + 336) + v25) / 0x19))
              + 160 * ((*(void *)(a1 + 336) + v25) % 0x19),
          v27 == v28))
    {
      uint64_t v31 = a2[1];
LABEL_88:
      uint64_t v60 = *(void *)(a1 + 208);
      if (*((unsigned char *)a2 + 84)) {
        BOOL v61 = *((unsigned char *)a2 + 136) == 0;
      }
      else {
        BOOL v61 = 1;
      }
      if (v61) {
        uint64_t v62 = 0;
      }
      else {
        uint64_t v62 = a2[20];
      }
      if (*((unsigned char *)a2 + 20)) {
        BOOL v63 = *((unsigned char *)a2 + 72) == 0;
      }
      else {
        BOOL v63 = 1;
      }
      if (v63) {
        uint64_t v64 = 0;
      }
      else {
        uint64_t v64 = a2[4];
      }
      uint64_t v65 = sub_1012A6020((char *)(a1 + 32), 0);
      uint64_t v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v60 + 120))(v60, v31, v62, v64, v65);
    }
    else
    {
      uint64_t v29 = v24 + 8 * (v25 / 0x19);
      int v30 = *(_DWORD *)v6;
      uint64_t v31 = a2[1];
      while (*(_DWORD *)v27 == v30 || *(_DWORD *)(v27 + 12) != v31)
      {
        v27 += 160;
        if (v27 - v26 == 4000)
        {
          uint64_t v32 = *(void *)(v29 + 8);
          v29 += 8;
          uint64_t v26 = v32;
          uint64_t v27 = v32;
        }
        if (v27 == v28) {
          goto LABEL_88;
        }
      }
      uint64_t v66 = *(void *)(v27 + 16);
    }
    *((void *)a2 + 1) = v66;
    sub_1010CC344((uint64_t)buf, *a2, (uint64_t)a2);
    sub_1010C9F08(v4, (uint64_t)buf);
    if (v79 && v78)
    {
      long long v71 = (void **)v77;
      sub_100523284(&v71);
    }
    if (v76 && v75)
    {
      long long v71 = (void **)v74;
      sub_100523284(&v71);
    }
    xpc_object_t v67 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
    (*(void (**)(void, uint64_t, void, void, void))(**(void **)(a1 + 120) + 232))(*(void *)(a1 + 120), 38, 0, 0, 0);
    sub_10004D2C8(v67);
    uint64_t v68 = *(void *)(a1 + 208);
    uint64_t v69 = *a2;
    uint64_t v70 = sub_1012A6020((char *)(a1 + 32), 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v68 + 104))(v68, v69, v70, 1);
  }
  else
  {
    if (!a2[1])
    {
      unsigned int v10 = *((_DWORD *)v5 + 3);
      if (v10) {
        a2[1] = v10;
      }
    }
    if (*((unsigned char *)a2 + 136) && !*((unsigned char *)a2 + 84) && v5[144] && v5[92])
    {
      uint64_t v11 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = *((_DWORD *)v6 + 22);
        *(_DWORD *)long long buf = 67109120;
        int v73 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I QCI value %u missed, recovering...", buf, 8u);
        if (!v6[144]) {
          sub_10016C840();
        }
        if (!v6[92]) {
          sub_10016C840();
        }
        if (!*((unsigned char *)a2 + 136)) {
          sub_10016C840();
        }
      }
      a2[20] = *((_DWORD *)v6 + 22);
      *((unsigned char *)a2 + 84) = 1;
    }
    if (*((unsigned char *)a2 + 72) && !*((unsigned char *)a2 + 20) && v6[80] && v6[28])
    {
      uint64_t v13 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = *((_DWORD *)v6 + 6);
        *(_DWORD *)long long buf = 67109120;
        int v73 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I QCI value %u missed, recovering...", buf, 8u);
        if (!v6[80]) {
          sub_10016C840();
        }
        if (!v6[28]) {
          sub_10016C840();
        }
        if (!*((unsigned char *)a2 + 72)) {
          sub_10016C840();
        }
      }
      a2[4] = *((_DWORD *)v6 + 6);
      *((unsigned char *)a2 + 20) = 1;
    }
    if (a2[1] != *((_DWORD *)v6 + 3) || sub_1005B0D28((uint64_t)a2))
    {
      uint64_t v15 = *(void *)(a1 + 304);
      if (*(void *)(a1 + 312) == v15
        || (unint64_t v16 = *(void *)(a1 + 328),
            uint64_t v17 = *(char **)(v15 + 8 * (v16 / 0x19)),
            uint64_t v18 = &v17[160 * (v16 % 0x19)],
            unint64_t v19 = *(void *)(v15 + 8 * ((*(void *)(a1 + 336) + v16) / 0x19))
                + 160 * ((*(void *)(a1 + 336) + v16) % 0x19),
            v18 == (char *)v19))
      {
LABEL_36:
        if (v6[144] && v6[92]) {
          uint64_t v22 = *((unsigned int *)v6 + 22);
        }
        else {
          uint64_t v22 = 0;
        }
        if (v6[80] && v6[28]) {
          uint64_t v33 = *((unsigned int *)v6 + 6);
        }
        else {
          uint64_t v33 = 0;
        }
        uint64_t v34 = *(void *)(a1 + 208);
        uint64_t v35 = *((unsigned int *)v6 + 3);
        uint64_t v36 = sub_1012A6020((char *)(a1 + 32), 0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v34 + 128))(v34, v35, v22, v33, v36);
      }
      else
      {
        uint64_t v20 = v15 + 8 * (v16 / 0x19);
        while (*(_DWORD *)v18 == *(_DWORD *)v6 || *((_DWORD *)v18 + 3) != *((_DWORD *)v6 + 3))
        {
          v18 += 160;
          if (v18 - v17 == 4000)
          {
            __int16 v21 = *(char **)(v20 + 8);
            v20 += 8;
            uint64_t v17 = v21;
            uint64_t v18 = v21;
          }
          if (v18 == (char *)v19) {
            goto LABEL_36;
          }
        }
      }
    }
    uint64_t v37 = *(void *)(a1 + 304);
    if (*(void *)(a1 + 312) == v37
      || (unint64_t v38 = *(void *)(a1 + 328),
          uint64_t v39 = *(void *)(v37 + 8 * (v38 / 0x19)),
          uint64_t v40 = v39 + 160 * (v38 % 0x19),
          unint64_t v41 = *(void *)(v37 + 8 * ((*(void *)(a1 + 336) + v38) / 0x19))
              + 160 * ((*(void *)(a1 + 336) + v38) % 0x19),
          v40 == v41))
    {
LABEL_62:
      int v44 = 1;
    }
    else
    {
      uint64_t v42 = v37 + 8 * (v38 / 0x19);
      while (*(_DWORD *)(v40 + 12) != a2[1])
      {
        v40 += 160;
        if (v40 - v39 == 4000)
        {
          uint64_t v43 = *(void *)(v42 + 8);
          v42 += 8;
          uint64_t v39 = v43;
          uint64_t v40 = v43;
        }
        if (v40 == v41) {
          goto LABEL_62;
        }
      }
      int v44 = 0;
      *((void *)a2 + 1) = *(void *)(v40 + 16);
    }
    sub_1010C9A3C(v4, *((_DWORD *)v6 + 2));
    if (sub_1005B0D28((uint64_t)a2))
    {
      __int16 v45 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
      (*(void (**)(void, uint64_t, void, void, void))(**(void **)(a1 + 120) + 232))(*(void *)(a1 + 120), 38, 0, 0, 0);
      sub_10004D2C8(v45);
      uint64_t v46 = *(void *)(a1 + 208);
      uint64_t v47 = *a2;
      uint64_t v48 = sub_1012A6020((char *)(a1 + 32), 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46 + 112))(v46, v47, v48);
    }
    else
    {
      if (v44)
      {
        uint64_t v49 = *(void *)(a1 + 208);
        uint64_t v50 = a2[1];
        if (*((unsigned char *)a2 + 84)) {
          BOOL v51 = *((unsigned char *)a2 + 136) == 0;
        }
        else {
          BOOL v51 = 1;
        }
        if (v51) {
          uint64_t v52 = 0;
        }
        else {
          uint64_t v52 = a2[20];
        }
        if (*((unsigned char *)a2 + 20)) {
          BOOL v53 = *((unsigned char *)a2 + 72) == 0;
        }
        else {
          BOOL v53 = 1;
        }
        if (v53) {
          uint64_t v54 = 0;
        }
        else {
          uint64_t v54 = a2[4];
        }
        uint64_t v55 = sub_1012A6020((char *)(a1 + 32), 0);
        *((void *)a2 + 1) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v49 + 120))(v49, v50, v52, v54, v55);
      }
      sub_1010CC344((uint64_t)buf, *a2, (uint64_t)a2);
      sub_1010C9F08(v4, (uint64_t)buf);
      if (v79 && v78)
      {
        long long v71 = (void **)v77;
        sub_100523284(&v71);
      }
      if (v76)
      {
        if (v75)
        {
          long long v71 = (void **)v74;
          sub_100523284(&v71);
        }
      }
      uint64_t v56 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
      (*(void (**)(void, uint64_t, void, void, void))(**(void **)(a1 + 120) + 232))(*(void *)(a1 + 120), 38, 0, 0, 0);
      sub_10004D2C8(v56);
      uint64_t v57 = *(void *)(a1 + 208);
      uint64_t v58 = *a2;
      uint64_t v59 = sub_1012A6020((char *)(a1 + 32), 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v57 + 104))(v57, v58, v59, 0);
    }
  }
  return sub_1010C865C((void *)a1);
}

void sub_1010C9958(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

char *sub_1010C9990(void *a1, int a2)
{
  uint64_t v2 = a1[1];
  if (a1[2] == v2) {
    return 0;
  }
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  char v5 = (char **)(v2 + 8 * (v3 / 0x19));
  uint64_t v6 = *v5;
  uint64_t result = &(*v5)[160 * (v3 % 0x19)];
  unint64_t v8 = *(void *)(v2 + 8 * ((v4 + v3) / 0x19)) + 160 * ((v4 + v3) % 0x19);
  if (result != (char *)v8)
  {
    while (*(_DWORD *)result != a2)
    {
      result += 160;
      if (result - v6 == 4000)
      {
        unint64_t v9 = v5[1];
        ++v5;
        uint64_t v6 = v9;
        uint64_t result = v9;
      }
      if (result == (char *)v8) {
        return (char *)v8;
      }
    }
  }
  return result;
}

uint64_t sub_1010C9A3C(int64x2_t *a1, int a2)
{
  unint64_t v3 = a1[2].u64[0];
  uint64_t v4 = a1->i64[1];
  uint64_t v5 = a1[1].i64[0];
  uint64_t v6 = (uint64_t *)(v4 + 8 * (v3 / 0x19));
  if (v5 == v4) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = *v6 + 160 * (v3 % 0x19);
  }
  uint64_t result = 160;
  unint64_t v9 = (void *)(v4 + 8 * (v3 / 0x19));
LABEL_5:
  uint64_t v10 = -(uint64_t)v7;
  while (1)
  {
    unint64_t v11 = v5 == v4 ? 0 : *(void *)(v4 + 8 * ((a1[2].i64[1] + v3) / 0x19)) + 160 * ((a1[2].i64[1] + v3) % 0x19);
    if (v7 == v11) {
      return result;
    }
    if (*(_DWORD *)v7 == a2)
    {
      if (v5 == v4) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = *v6 + 160 * (v3 % 0x19);
      }
      if (v7 == v13) {
        unint64_t v14 = 0;
      }
      else {
        unint64_t v14 = 25 * (v9 - v6) - 0x3333333333333333 * ((-v10 - *v9) >> 5) + 0x3333333333333333 * ((v13 - *v6) >> 5);
      }
      uint64_t v55 = (uint64_t *)(v4 + 8 * (v3 / 0x19));
      uint64_t v56 = (uint64_t *)v13;
      sub_10000C6CC(&v55, v14);
      unint64_t v16 = v55;
      uint64_t v15 = (uint64_t)v56;
      uint64_t v17 = a1[2].i64[1];
      uint64_t v18 = *v55;
      uint64_t v19 = (uint64_t)v56 - *v55;
      unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * (v19 >> 5);
      if (v14 <= (unint64_t)(v17 - 1) >> 1)
      {
        if (v19 < -159)
        {
          unint64_t v39 = 23 - v20;
          uint64_t v40 = ((23 - v20) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
          unint64_t v41 = (v40 + ((v39 - v40) >> 1)) >> 4;
          int v30 = &v55[-v41];
          uint64_t v31 = *v30 + 160 * (25 * v41 - v39) + 3840;
        }
        else
        {
          unint64_t v27 = v20 + 1;
          uint64_t v28 = ((v20 + 1) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
          unint64_t v29 = (v28 + ((v27 - v28) >> 1)) >> 4;
          int v30 = &v55[v29];
          uint64_t v31 = *v30 + 160 * (v27 - 25 * v29);
        }
        if (v6 == v55)
        {
          uint64_t v45 = v13;
          uint64_t v44 = (uint64_t)v56;
        }
        else
        {
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          sub_1010CBFCC(&v55, v18, v15, v30, v31);
          int v30 = v56;
          uint64_t v31 = v57;
          uint64_t v42 = v16 - 1;
          while (v42 != v6)
          {
            uint64_t v43 = *v42--;
            uint64_t v55 = 0;
            uint64_t v56 = 0;
            uint64_t v57 = 0;
            sub_1010CBFCC(&v55, v43, v43 + 4000, v30, v31);
            int v30 = v56;
            uint64_t v31 = v57;
          }
          uint64_t v44 = *v6 + 4000;
          uint64_t v45 = v13;
        }
        sub_1010CBFCC(&v55, v45, v44, v30, v31);
        sub_100525A70(v13);
        a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_10144F900);
        sub_100C47CD8((uint64_t)a1, 1);
      }
      else
      {
        if (v19 < -159)
        {
          unint64_t v32 = 23 - v20;
          uint64_t v33 = ((23 - v20) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
          unint64_t v34 = (v33 + ((v32 - v33) >> 1)) >> 4;
          uint64_t v24 = &v55[-v34];
          uint64_t v25 = *v24;
          uint64_t v26 = *v24 + 160 * (25 * v34 - v32) + 3840;
        }
        else
        {
          unint64_t v21 = v20 + 1;
          uint64_t v22 = ((v20 + 1) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
          unint64_t v23 = (v22 + ((v21 - v22) >> 1)) >> 4;
          uint64_t v24 = &v55[v23];
          uint64_t v25 = *v24;
          uint64_t v26 = *v24 + 160 * (v21 - 25 * v23);
        }
        unint64_t v35 = a1[2].i64[0] + v17;
        uint64_t v36 = a1->i64[1];
        uint64_t v37 = (uint64_t *)(v36 + 8 * (v35 / 0x19));
        if (a1[1].i64[0] == v36) {
          unint64_t v38 = 0;
        }
        else {
          unint64_t v38 = *v37 + 160 * (v35 % 0x19);
        }
        if (v24 == v37)
        {
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          uint64_t v50 = v38;
          uint64_t v46 = v16;
          uint64_t v47 = v15;
        }
        else
        {
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          sub_1010CC23C(&v55, v26, v25 + 4000, v16, v15);
          uint64_t v46 = v56;
          uint64_t v47 = v57;
          uint64_t v48 = v24 + 1;
          while (v48 != v37)
          {
            uint64_t v49 = *v48++;
            uint64_t v55 = 0;
            uint64_t v56 = 0;
            uint64_t v57 = 0;
            sub_1010CC23C(&v55, v49, v49 + 4000, v46, v47);
            uint64_t v46 = v56;
            uint64_t v47 = v57;
          }
          uint64_t v26 = *v37;
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          uint64_t v50 = v38;
        }
        sub_1010CC23C(&v55, v26, v50, v46, v47);
        sub_100525A70(v57);
        --a1[2].i64[1];
        sub_100AE97FC(a1, 1);
      }
      unint64_t v51 = a1[2].u64[0];
      uint64_t v52 = a1->i64[1];
      BOOL v53 = (uint64_t *)(v52 + 8 * (v51 / 0x19));
      if (a1[1].i64[0] == v52) {
        unint64_t v54 = 0;
      }
      else {
        unint64_t v54 = *v53 + 160 * (v51 % 0x19);
      }
      uint64_t v55 = v53;
      uint64_t v56 = (uint64_t *)v54;
      return (uint64_t)sub_10000C6CC(&v55, v14);
    }
    v7 += 160;
    v10 -= 160;
    if (-4000 - *v9 == v10)
    {
      unint64_t v12 = v9[1];
      ++v9;
      unint64_t v7 = v12;
      goto LABEL_5;
    }
  }
}

void sub_1010C9F08(int64x2_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2].u64[0];
  unint64_t v5 = v4 / 0x19;
  unint64_t v7 = (char *)a1->i64[1];
  uint64_t v6 = (char *)a1[1].i64[0];
  if (v6 == v7)
  {
    unint64_t v10 = a1[2].u64[1];
LABEL_10:
    if (v10 >= 0x20)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "QoS flow container is too large, truncating...", buf, 2u);
        unint64_t v7 = (char *)a1->i64[1];
        unint64_t v4 = a1[2].u64[0];
        unint64_t v5 = v4 / 0x19;
      }
      sub_100525A70(*(void *)&v7[8 * v5] + 160 * (v4 % 0x19));
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_10144F900);
      sub_100C47CD8((uint64_t)a1, 1);
      unint64_t v7 = (char *)a1->i64[1];
      uint64_t v6 = (char *)a1[1].i64[0];
      unint64_t v4 = a1[2].u64[0];
      unint64_t v10 = a1[2].u64[1];
    }
    unint64_t v16 = (v6 - v7) >> 3;
    uint64_t v17 = 25 * v16 - 1;
    if (v6 == v7) {
      uint64_t v17 = 0;
    }
    if (v17 != v10 + v4) {
      goto LABEL_51;
    }
    if (v4 < 0x19)
    {
      unint64_t v32 = (char *)a1[1].i64[1];
      uint64_t v33 = (uint64_t)&v32[-a1->i64[0]];
      if (v16 >= v33 >> 3)
      {
        if (v32 == (char *)a1->i64[0]) {
          unint64_t v34 = 1;
        }
        else {
          unint64_t v34 = v33 >> 2;
        }
        xpc_object_t v80 = &a1[1].i8[8];
        *(void *)long long buf = sub_10004EF74((uint64_t)&a1[1].i64[1], v34);
        *(void *)&uint8_t buf[8] = *(void *)buf + 8 * v16;
        v79.i64[0] = *(void *)&buf[8];
        v79.i64[1] = *(void *)buf + 8 * v35;
        xpc_object_t v77 = operator new(0xFA0uLL);
        sub_100097E4C(buf, &v77);
        uint64_t v36 = (void *)a1[1].i64[0];
        uint64_t v37 = -7 - (void)v36;
        while (v36 != (void *)a1->i64[1])
        {
          --v36;
          v37 += 8;
          sub_100097F64((uint64_t)buf, v36);
        }
        unint64_t v38 = (void *)a1->i64[0];
        int64x2_t v39 = *(int64x2_t *)buf;
        int64x2_t v40 = v79;
        *(void *)long long buf = a1->i64[0];
        *(void *)&uint8_t buf[8] = v36;
        int64x2_t v41 = a1[1];
        *a1 = v39;
        a1[1] = v40;
        int64x2_t v79 = v41;
        if (v36 != (void *)v41.i64[0]) {
          v79.i64[0] = v41.i64[0] + (-(v41.i64[0] + v37) & 0xFFFFFFFFFFFFFFF8);
        }
        if (v38) {
          operator delete(v38);
        }
        goto LABEL_50;
      }
      if (v32 != v6)
      {
        *(void *)long long buf = operator new(0xFA0uLL);
        sub_100097C14(a1, buf);
LABEL_50:
        unint64_t v7 = (char *)a1->i64[1];
        uint64_t v6 = (char *)a1[1].i64[0];
LABEL_51:
        if (v6 == v7)
        {
          uint64_t v53 = 0;
        }
        else
        {
          unint64_t v52 = a1[2].i64[1] + a1[2].i64[0];
          uint64_t v53 = *(void *)&v7[8 * (v52 / 0x19)] + 160 * (v52 % 0x19);
        }
        sub_100AE69A4(v53, a2);
        ++a1[2].i64[1];
        return;
      }
      *(void *)long long buf = operator new(0xFA0uLL);
      sub_100097D2C((uint64_t)a1, buf);
      unint64_t v54 = (void *)a1->i64[1];
      uint64_t v55 = (char *)a1[1].i64[0];
      uint64_t v58 = *v54;
      uint64_t v56 = (char *)(v54 + 1);
      uint64_t v57 = v58;
      a1->i64[1] = (uint64_t)v56;
      if (v55 == (char *)a1[1].i64[1])
      {
        uint64_t v59 = (uint64_t)&v56[-a1->i64[0]];
        if ((unint64_t)v56 <= a1->i64[0])
        {
          if (v55 == (char *)a1->i64[0]) {
            unint64_t v67 = 1;
          }
          else {
            unint64_t v67 = (uint64_t)&v55[-a1->i64[0]] >> 2;
          }
          uint64_t v68 = (char *)sub_10004EF74((uint64_t)&a1[1].i64[1], v67);
          uint64_t v70 = &v68[8 * (v67 >> 2)];
          long long v71 = (uint64_t *)a1->i64[1];
          uint64_t v55 = v70;
          uint64_t v72 = a1[1].i64[0] - (void)v71;
          if (v72)
          {
            uint64_t v55 = &v70[v72 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v73 = 8 * (v72 >> 3);
            xpc_object_t v74 = &v68[8 * (v67 >> 2)];
            do
            {
              uint64_t v75 = *v71++;
              *(void *)xpc_object_t v74 = v75;
              v74 += 8;
              v73 -= 8;
            }
            while (v73);
          }
          char v76 = (void *)a1->i64[0];
          a1->i64[0] = (uint64_t)v68;
          a1->i64[1] = (uint64_t)v70;
          a1[1].i64[0] = (uint64_t)v55;
          a1[1].i64[1] = (uint64_t)&v68[8 * v69];
          if (v76)
          {
            operator delete(v76);
            uint64_t v55 = (char *)a1[1].i64[0];
          }
        }
        else
        {
          uint64_t v60 = v59 >> 3;
          BOOL v24 = v59 >> 3 < -1;
          uint64_t v61 = (v59 >> 3) + 2;
          if (v24) {
            uint64_t v62 = v61;
          }
          else {
            uint64_t v62 = v60 + 1;
          }
          uint64_t v63 = -(v62 >> 1);
          uint64_t v64 = v62 >> 1;
          uint64_t v65 = &v56[-8 * v64];
          int64_t v66 = v55 - v56;
          if (v55 != v56)
          {
            memmove(&v56[-8 * v64], v56, v55 - v56);
            uint64_t v56 = (char *)a1->i64[1];
          }
          uint64_t v55 = &v65[v66];
          a1->i64[1] = (uint64_t)&v56[8 * v63];
          a1[1].i64[0] = (uint64_t)&v65[v66];
        }
      }
      *(void *)uint64_t v55 = v57;
    }
    else
    {
      uint64_t v18 = (char *)a1[1].i64[1];
      a1[2].i64[0] = v4 - 25;
      uint64_t v21 = *(void *)v7;
      uint64_t v19 = v7 + 8;
      uint64_t v20 = v21;
      a1->i64[1] = (uint64_t)v19;
      if (v6 == v18)
      {
        uint64_t v22 = (uint64_t)&v19[-a1->i64[0]];
        if ((unint64_t)v19 <= a1->i64[0])
        {
          if (v6 == (char *)a1->i64[0]) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = (uint64_t)&v6[-a1->i64[0]] >> 2;
          }
          uint64_t v43 = (char *)sub_10004EF74((uint64_t)&a1[1].i64[1], v42);
          uint64_t v45 = &v43[8 * (v42 >> 2)];
          uint64_t v46 = (uint64_t *)a1->i64[1];
          uint64_t v6 = v45;
          uint64_t v47 = a1[1].i64[0] - (void)v46;
          if (v47)
          {
            uint64_t v6 = &v45[v47 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v48 = 8 * (v47 >> 3);
            uint64_t v49 = &v43[8 * (v42 >> 2)];
            do
            {
              uint64_t v50 = *v46++;
              *(void *)uint64_t v49 = v50;
              v49 += 8;
              v48 -= 8;
            }
            while (v48);
          }
          unint64_t v51 = (void *)a1->i64[0];
          a1->i64[0] = (uint64_t)v43;
          a1->i64[1] = (uint64_t)v45;
          a1[1].i64[0] = (uint64_t)v6;
          a1[1].i64[1] = (uint64_t)&v43[8 * v44];
          if (v51)
          {
            operator delete(v51);
            uint64_t v6 = (char *)a1[1].i64[0];
          }
        }
        else
        {
          uint64_t v23 = v22 >> 3;
          BOOL v24 = v22 >> 3 < -1;
          uint64_t v25 = (v22 >> 3) + 2;
          if (v24) {
            uint64_t v26 = v25;
          }
          else {
            uint64_t v26 = v23 + 1;
          }
          uint64_t v27 = -(v26 >> 1);
          uint64_t v28 = v26 >> 1;
          unint64_t v29 = &v19[-8 * v28];
          int64_t v30 = v6 - v19;
          if (v6 != v19)
          {
            memmove(&v19[-8 * v28], v19, v6 - v19);
            uint64_t v6 = (char *)a1->i64[1];
          }
          uint64_t v31 = &v6[8 * v27];
          uint64_t v6 = &v29[v30];
          a1->i64[1] = (uint64_t)v31;
          a1[1].i64[0] = (uint64_t)&v29[v30];
        }
      }
      *(void *)uint64_t v6 = v20;
    }
    a1[1].i64[0] += 8;
    goto LABEL_50;
  }
  uint64_t v8 = *(void *)&v7[8 * v5];
  uint64_t v9 = v8 + 160 * (v4 % 0x19);
  unint64_t v10 = a1[2].u64[1];
  uint64_t v11 = ((v10 + v4) * (unsigned __int128)0x47AE147AE147AE15uLL) >> 64;
  unint64_t v12 = (v11 + ((v10 + v4 - v11) >> 1)) >> 4;
  uint64_t v13 = *(void *)&v7[8 * v12] + 160 * (v10 + v4 - 25 * v12);
  if (v9 == v13) {
    goto LABEL_10;
  }
  unint64_t v14 = &v7[8 * v5];
  while (*(_DWORD *)v9 != *(_DWORD *)a2)
  {
    v9 += 160;
    if (v9 - v8 == 4000)
    {
      uint64_t v15 = *((void *)v14 + 1);
      v14 += 8;
      uint64_t v8 = v15;
      uint64_t v9 = v15;
    }
    if (v9 == v13) {
      goto LABEL_10;
    }
  }
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + 8);
  sub_100AE9368(v9 + 24, (long long *)(a2 + 24));
  sub_100AE9368(v9 + 88, (long long *)(a2 + 88));
  *(_WORD *)(v9 + 152) = *(_WORD *)(a2 + 152);
}

void sub_1010CA468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010CA4B4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144) && *(unsigned char *)(a1 + 136))
  {
    unint64_t v3 = (void **)(a1 + 112);
    sub_100523284(&v3);
  }
  if (*(unsigned char *)(a1 + 80) && *(unsigned char *)(a1 + 72))
  {
    unint64_t v3 = (void **)(a1 + 48);
    sub_100523284(&v3);
  }
  return a1;
}

capabilities::ct *sub_1010CA520(uint64_t a1, int *a2)
{
  return sub_1010C9084(a1 - 144, a2);
}

capabilities::ct *sub_1010CA528(void *a1, uint64_t a2)
{
  sub_1010CA560((uint64_t)a1, a2);

  return sub_1010C865C(a1);
}

void sub_1010CA560(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (int64x2_t *)(a1 + 296);
  unint64_t v5 = sub_1010C9990((void *)(a1 + 296), a2);
  uint64_t v6 = *(void *)(a1 + 304);
  if (*(void *)(a1 + 312) == v6)
  {
    if (!v5) {
      return;
    }
  }
  else
  {
    unint64_t v7 = *(void *)(a1 + 328);
    unint64_t v8 = *(void *)(v6 + 8 * ((*(void *)(a1 + 336) + v7) / 0x19)) + 160 * ((*(void *)(a1 + 336) + v7) % 0x19);
    if ((char *)v8 == v5) {
      return;
    }
    uint64_t v9 = (char **)(v6 + 8 * (v7 / 0x19));
    unint64_t v10 = *v9;
    uint64_t v11 = &(*v9)[160 * (v7 % 0x19)];
    if (v11 != (char *)v8)
    {
      while (*(_DWORD *)v11 == *(_DWORD *)v5 || *((_DWORD *)v11 + 3) != *((_DWORD *)v5 + 3))
      {
        v11 += 160;
        if (v11 - v10 == 4000)
        {
          unint64_t v12 = v9[1];
          ++v9;
          unint64_t v10 = v12;
          uint64_t v11 = v12;
        }
        if (v11 == (char *)v8) {
          goto LABEL_11;
        }
      }
      goto LABEL_21;
    }
  }
LABEL_11:
  uint64_t v13 = *(void *)(a1 + 208);
  uint64_t v14 = *((unsigned int *)v5 + 3);
  if (v5[144] && v5[92]) {
    uint64_t v15 = *((unsigned int *)v5 + 22);
  }
  else {
    uint64_t v15 = 0;
  }
  if (v5[80] && v5[28]) {
    uint64_t v16 = *((unsigned int *)v5 + 6);
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = sub_1012A6020((char *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 128))(v13, v14, v15, v16, v17);
LABEL_21:
  sub_1010C9A3C(v4, a2);
  uint64_t v18 = *(void *)(a1 + 208);
  uint64_t v19 = sub_1012A6020((char *)(a1 + 32), 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 112))(v18, a2, v19);
  uint64_t v20 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 128));
  (*(void (**)(void, uint64_t, void, void, void))(**(void **)(a1 + 120) + 232))(*(void *)(a1 + 120), 38, 0, 0, 0);

  sub_10004D2C8(v20);
}

void sub_1010CA7B0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

capabilities::ct *sub_1010CA7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 - 144);
  sub_1010CA560(a1 - 144, a2);

  return sub_1010C865C(v2);
}

void sub_1010CA800(void *a1, unsigned int a2, __int32 **a3)
{
  uint64_t v6 = a1[38];
  if (a1[39] == v6
    || (unint64_t v7 = a1[41],
        unint64_t v8 = *(void *)(v6 + 8 * (v7 / 0x19)) + 160 * (v7 % 0x19),
        unint64_t v9 = *(void *)(v6 + 8 * ((a1[42] + v7) / 0x19)) + 160 * ((a1[42] + v7) % 0x19),
        v8 == v9))
  {
    char v31 = 0;
  }
  else
  {
    char v31 = 0;
    unint64_t v10 = (void *)(v6 + 8 * (v7 / 0x19));
    do
    {
      if (*(unsigned char *)(v8 + 80) && (sub_1010CC3CC(v8 + 24, a2) & 1) != 0
        || *(unsigned char *)(v8 + 144) && sub_1010CC3CC(v8 + 88, a2))
      {
        uint64_t v11 = a3[1];
        unint64_t v12 = wmemchr(*a3, *(_DWORD *)(v8 + 8), v11 - *a3);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = v11;
        }
        uint64_t v14 = a3[1];
        uint64_t v15 = a1[9];
        BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        if (v13 == v14)
        {
          if (v16)
          {
            uint64_t v19 = *(unsigned int *)(v8 + 8);
            uint64_t v20 = asString();
            *(_DWORD *)long long buf = 136315650;
            uint64_t v33 = "cleanCurrentQosFlows_sync";
            __int16 v34 = 2048;
            uint64_t v35 = v19;
            __int16 v36 = 2080;
            uint64_t v37 = v20;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I %s: flow to be removed: %lu (ip family %s)", buf, 0x20u);
          }
          sub_1010CA560((uint64_t)a1, *(unsigned int *)(v8 + 8));
          char v31 = 1;
        }
        else if (v16)
        {
          uint64_t v17 = *(unsigned int *)(v8 + 8);
          uint64_t v18 = asString();
          *(_DWORD *)long long buf = 136315650;
          uint64_t v33 = "cleanCurrentQosFlows_sync";
          __int16 v34 = 2048;
          uint64_t v35 = v17;
          __int16 v36 = 2080;
          uint64_t v37 = v18;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I %s: flow valid: %lu (ip family %s)", buf, 0x20u);
        }
      }
      v8 += 160;
      if (v8 - *v10 == 4000)
      {
        unint64_t v21 = v10[1];
        ++v10;
        unint64_t v8 = v21;
      }
    }
    while (v8 != v9);
  }
  uint64_t v22 = *a3;
  uint64_t v23 = a3[1];
  if (*a3 != v23)
  {
    do
    {
      BOOL v24 = (const char *)*v22;
      uint64_t v25 = sub_1010C9990(a1 + 37, *v22);
      uint64_t v26 = a1[38];
      if (a1[39] == v26)
      {
        unint64_t v28 = 0;
      }
      else
      {
        unint64_t v27 = a1[42] + a1[41];
        unint64_t v28 = *(void *)(v26 + 8 * (v27 / 0x19)) + 160 * (v27 % 0x19);
      }
      if ((char *)v28 == v25)
      {
        unint64_t v29 = a1[9];
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = asString();
          *(_DWORD *)long long buf = 134218242;
          uint64_t v33 = v24;
          __int16 v34 = 2080;
          uint64_t v35 = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#E Unexpected QoS Id: %lu (ip family %s)", buf, 0x16u);
        }
      }
      ++v22;
    }
    while (v22 != v23);
  }
  if (v31) {
    sub_1010C865C(a1);
  }
}

void sub_1010CAB60(uint64_t a1, unsigned int a2, __int32 **a3)
{
}

uint64_t sub_1010CAB68(uint64_t a1)
{
  return a1 + 296;
}

uint64_t sub_1010CAB70(void *a1)
{
  return (uint64_t)a1 + *(void *)(*a1 - 384) + 296;
}

void sub_1010CAB94(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 112);
    *(_DWORD *)long long buf = 136315138;
    *(void *)unint64_t v42 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: ------- %s (BB) -------", buf, 0xCu);
    uint64_t v2 = *(NSObject **)(a1 + 72);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 192);
    uint64_t v5 = asStringBool(*(void *)(a1 + 184) != 0);
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)unint64_t v42 = v4;
    *(_WORD *)&v42[4] = 2080;
    *(void *)&v42[6] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fLastBackoffEventTime = %u fActivateBackoffTimer = %s", buf, 0x12u);
    uint64_t v2 = *(NSObject **)(a1 + 72);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)unint64_t v42 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fContextDataMode = %s", buf, 0xCu);
    uint64_t v2 = *(NSObject **)(a1 + 72);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = asStringBool(*(unsigned char *)(a1 + 196));
    uint64_t v8 = *(void *)(a1 + 200);
    *(_DWORD *)long long buf = 136315394;
    *(void *)unint64_t v42 = v7;
    *(_WORD *)&v42[8] = 2080;
    *(void *)&v42[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fPendingActivationRequest = %s fPendingReason = %s", buf, 0x16u);
    uint64_t v2 = *(NSObject **)(a1 + 72);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = asStringBool(*(unsigned char *)(a1 + 244));
    uint64_t v10 = asStringBool(*(unsigned char *)(a1 + 245));
    *(_DWORD *)long long buf = 136315394;
    *(void *)unint64_t v42 = v9;
    *(_WORD *)&v42[8] = 2080;
    *(void *)&v42[10] = v10;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fOutgoingTrafficEnabledIPint v4 = %s fOutgoingTrafficEnabledIPv6 = %s", buf, 0x16u);
    uint64_t v2 = *(NSObject **)(a1 + 72);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = asStringBool(*(unsigned char *)(a1 + 246));
    *(_DWORD *)long long buf = 136315138;
    *(void *)unint64_t v42 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fIpAppenderNotPresent = %s", buf, 0xCu);
  }
  unint64_t v12 = *(std::__shared_weak_count **)(a1 + 232);
  if (v12)
  {
    unint64_t v12 = std::__shared_weak_count::lock(v12);
    uint64_t v13 = v12;
    if (v12) {
      unint64_t v12 = *(std::__shared_weak_count **)(a1 + 224);
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = (DataBBResetThrottling *)((uint64_t (*)(std::__shared_weak_count *))v12->__vftable[17].~__shared_weak_count_0)(v12);
  int Timeout = DataBBResetThrottling::getTimeout(v14);
  if (v13) {
    sub_10004D2C8(v13);
  }
  BOOL v16 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)unint64_t v42 = Timeout;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t bbResetSecondsint Timeout = %u", buf, 8u);
  }
  uint64_t v17 = 0;
  char v18 = 1;
  do
  {
    char v19 = v18;
    uint64_t v20 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = asStringBool(*(void *)(a1 + 8 * v17 + 272) != 0);
      int v22 = *(_DWORD *)(a1 + 4 * v17 + 288);
      *(_DWORD *)long long buf = 67109890;
      *(_DWORD *)unint64_t v42 = v17;
      *(_WORD *)&v42[4] = 2080;
      *(void *)&v42[6] = v21;
      *(_WORD *)&v42[14] = 1024;
      *(_DWORD *)&v42[16] = v17;
      __int16 v43 = 1024;
      int v44 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fBBResetTimer[%u] = %s, fBBResetTimerTimeout[%u] = %u", buf, 0x1Eu);
    }
    char v18 = 0;
    uint64_t v17 = 1;
  }
  while ((v19 & 1) != 0);
  uint64_t v23 = *(void *)(a1 + 336);
  BOOL v24 = *(NSObject **)(a1 + 72);
  BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
  if (!v23)
  {
    if (!v25) {
      goto LABEL_52;
    }
    *(_WORD *)long long buf = 0;
    unint64_t v38 = "#I DATA:: \t fCurrentQosFlows empty";
    goto LABEL_51;
  }
  if (v25)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fCurrentQosFlows ==>>", buf, 2u);
  }
  uint64_t v26 = *(void *)(a1 + 304);
  if (*(void *)(a1 + 312) != v26)
  {
    unint64_t v27 = *(void *)(a1 + 328);
    unint64_t v28 = (void *)(v26 + 8 * (v27 / 0x19));
    unint64_t v29 = *v28 + 160 * (v27 % 0x19);
    unint64_t v30 = *(void *)(v26 + 8 * ((*(void *)(a1 + 336) + v27) / 0x19)) + 160 * ((*(void *)(a1 + 336) + v27) % 0x19);
    while (v29 != v30)
    {
      char v31 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = *(_DWORD *)(v29 + 8);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)unint64_t v42 = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t flowId=%u", buf, 8u);
        char v31 = *(NSObject **)(a1 + 72);
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        int v33 = *(_DWORD *)(v29 + 12);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)unint64_t v42 = v33;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t bearerId=%u", buf, 8u);
        char v31 = *(NSObject **)(a1 + 72);
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = *(void *)(v29 + 16);
        *(_DWORD *)long long buf = 134217984;
        *(void *)unint64_t v42 = v34;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t queueSetId=%llu", buf, 0xCu);
      }
      if (*(unsigned char *)(v29 + 80))
      {
        uint64_t v35 = *(NSObject **)(a1 + 72);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t txQos:", buf, 2u);
          if (!*(unsigned char *)(v29 + 80)) {
            sub_10016C840();
          }
        }
        sub_1010CB2F0(a1, (int *)(v29 + 24));
      }
      if (*(unsigned char *)(v29 + 144))
      {
        __int16 v36 = *(NSObject **)(a1 + 72);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t rxQos:", buf, 2u);
          if (!*(unsigned char *)(v29 + 144)) {
            sub_10016C840();
          }
        }
        sub_1010CB2F0(a1, (int *)(v29 + 88));
      }
      v29 += 160;
      if (v29 - *v28 == 4000)
      {
        unint64_t v37 = v28[1];
        ++v28;
        unint64_t v29 = v37;
      }
    }
  }
  BOOL v24 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    unint64_t v38 = "#I DATA:: \t <<== fCurrentQosFlows";
LABEL_51:
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v38, buf, 2u);
  }
LABEL_52:
  sub_1012A71D0(a1 + 32);
  uint64_t v39 = *(void *)(a1 + 168);
  int64x2_t v40 = *(std::__shared_weak_count **)(a1 + 176);
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t))(*(void *)v39 + 64))(v39);
  if (v40) {
    sub_10004D2C8(v40);
  }
}

void sub_1010CB2A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010CB2C8(void *a1)
{
}

void sub_1010CB2E8(uint64_t a1)
{
}

void sub_1010CB2F0(uint64_t a1, int *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 4);
  uint64_t v5 = *(NSObject **)(a1 + 72);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      int v7 = *a2;
      *(_DWORD *)long long buf = 67109120;
      int v36 = v7;
      uint64_t v8 = "#I DATA:: \t\t\t qci = %u";
      uint64_t v9 = v5;
      uint32_t v10 = 8;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
    }
  }
  else if (v6)
  {
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "#I DATA:: \t\t\t qci empty";
    uint64_t v9 = v5;
    uint32_t v10 = 2;
    goto LABEL_6;
  }
  if (*((unsigned char *)a2 + 12))
  {
    uint64_t v11 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = a2[2];
      *(_DWORD *)long long buf = 67109120;
      int v36 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t bitRateMax = %u", buf, 8u);
    }
  }
  if (*((unsigned char *)a2 + 20))
  {
    uint64_t v13 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = a2[4];
      *(_DWORD *)long long buf = 67109120;
      int v36 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t bitRateMin = %u", buf, 8u);
    }
  }
  if (!*((unsigned char *)a2 + 48))
  {
    int v32 = *(NSObject **)(a1 + 72);
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    int v33 = "#I DATA:: \t\t\t filters empty";
    uint64_t v34 = v32;
LABEL_44:
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v33, buf, 2u);
    return;
  }
  BOOL v16 = (int *)*((void *)a2 + 3);
  uint64_t v15 = (int *)*((void *)a2 + 4);
  uint64_t v17 = *(NSObject **)(a1 + 72);
  BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if (v16 == v15)
  {
    if (!v18) {
      return;
    }
    *(_WORD *)long long buf = 0;
    int v33 = "#I DATA:: \t\t\t filters empty (array)";
    uint64_t v34 = v17;
    goto LABEL_44;
  }
  if (v18)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t filters:", buf, 2u);
    if (!*((unsigned char *)a2 + 48)) {
LABEL_46:
    }
      sub_10016C840();
    BOOL v16 = (int *)*((void *)a2 + 3);
    uint64_t v15 = (int *)*((void *)a2 + 4);
  }
  for (; v16 != v15; v16 += 40)
  {
    char v19 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *v16;
      int v21 = v16[5];
      int v22 = v16[6];
      int v23 = v16[7];
      *(_DWORD *)long long buf = 67109888;
      int v36 = v20;
      __int16 v37 = 1024;
      int v38 = v21;
      __int16 v39 = 1024;
      int v40 = v22;
      __int16 v41 = 1024;
      int v42 = v23;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t\t id=%u, precedence=%u, ipProtocol=%u, ipFamilyProtocol=%u", buf, 0x1Au);
    }
    if (*((unsigned char *)v16 + 145))
    {
      BOOL v24 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        int v25 = *((unsigned __int8 *)v16 + 144);
        *(_DWORD *)long long buf = 67109120;
        int v36 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t\t tos=%u", buf, 8u);
      }
    }
    if (*((unsigned char *)v16 + 147))
    {
      uint64_t v26 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = *((unsigned __int8 *)v16 + 146);
        *(_DWORD *)long long buf = 67109120;
        int v36 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t\t tosMask=%u", buf, 8u);
      }
    }
    if (*((unsigned char *)v16 + 152))
    {
      unint64_t v28 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = v16[37];
        *(_DWORD *)long long buf = 67109120;
        int v36 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t\t flowLabel=%u", buf, 8u);
      }
    }
    if (*((unsigned char *)v16 + 80))
    {
      unint64_t v30 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t\t src:", buf, 2u);
        if (!*((unsigned char *)v16 + 80)) {
          goto LABEL_46;
        }
      }
      sub_1010CB780(a1, (uint64_t *)v16 + 4);
    }
    if (*((unsigned char *)v16 + 136))
    {
      char v31 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t\t dst:", buf, 2u);
        if (!*((unsigned char *)v16 + 136)) {
          goto LABEL_46;
        }
      }
      sub_1010CB780(a1, (uint64_t *)v16 + 11);
    }
  }
}

void sub_1010CB780(uint64_t a1, uint64_t *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    int v4 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v5 = a2;
      }
      else {
        uint64_t v5 = (uint64_t *)*a2;
      }
      int v12 = 136315138;
      uint64_t v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t\t\t addr=%s", (uint8_t *)&v12, 0xCu);
    }
  }
  if (*((unsigned char *)a2 + 33))
  {
    BOOL v6 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *((unsigned __int8 *)a2 + 32);
      int v12 = 67109120;
      LODWORD(v13) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t\t\t maskLen=%u", (uint8_t *)&v12, 8u);
    }
  }
  if (*((unsigned char *)a2 + 36))
  {
    uint64_t v8 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *((unsigned __int16 *)a2 + 17);
      int v12 = 67109120;
      LODWORD(v13) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t\t\t port=%u", (uint8_t *)&v12, 8u);
    }
  }
  if (*((unsigned char *)a2 + 40))
  {
    uint32_t v10 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *((unsigned __int16 *)a2 + 19);
      int v12 = 67109120;
      LODWORD(v13) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t\t\t portRange=%u", (uint8_t *)&v12, 8u);
    }
  }
}

uint64_t sub_1010CB93C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 168);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 384))();
  }
  return result;
}

uint64_t sub_1010CB974(void *a1)
{
  uint64_t result = *(void *)((char *)a1 + *(void *)(*a1 - 592) + 168);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 384))();
  }
  return result;
}

uint64_t sub_1010CB9C8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 136);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 384))();
  }
  return result;
}

uint64_t sub_1010CBA00(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t sub_1010CBA08(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)((char *)a1 + *(void *)(*a1 - 688)) + 56))();
}

BOOL sub_1010CBA48(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
    case 3:
      if (!*(unsigned char *)(a1 + 72)) {
        goto LABEL_4;
      }
      BOOL result = 1;
      break;
    case 1:
      int v3 = *(unsigned __int8 *)(a1 + 72);
      goto LABEL_7;
    case 2:
LABEL_4:
      int v3 = *(unsigned __int8 *)(a1 + 73);
LABEL_7:
      BOOL result = v3 != 0;
      break;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

uint64_t sub_1010CBAB4()
{
  return 0;
}

uint64_t sub_1010CBABC()
{
  return 0;
}

uint64_t sub_1010CBAC8()
{
  return 1;
}

uint64_t sub_1010CBAD0(void *a1)
{
  return *(void *)((char *)a1 + *(void *)(*a1 - 72) + 80);
}

uint64_t sub_1010CBAF0(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)((char *)a1
                                          + *(void *)(*a1 - 88)
                                          + *(void *)(*(void *)((char *)a1 + *(void *)(*a1 - 88)) - 688))
                              + 56))();
}

BOOL sub_1010CBB48(void *a1, int a2)
{
  return sub_1010CBA48((uint64_t)a1 + *(void *)(*a1 - 160), a2);
}

uint64_t sub_1010CBB64()
{
  return 0;
}

uint64_t sub_1010CBB6C()
{
  return 0;
}

uint64_t sub_1010CBB78()
{
  return 1;
}

uint64_t sub_1010CBB80(uint64_t a1)
{
  return *(unsigned int *)(a1 + 240);
}

uint64_t sub_1010CBB8C()
{
  return 1;
}

uint64_t sub_1010CBB98(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 196);
}

uint64_t sub_1010CBBA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 136))();
}

uint64_t sub_1010CBBC4(uint64_t a1)
{
  return sub_1012A6B18((char *)(a1 + 32));
}

uint64_t sub_1010CBBCC(uint64_t a1)
{
  return sub_1012A6BFC((char *)(a1 + 32));
}

void sub_1010CBBD4(uint64_t a1)
{
}

void sub_1010CBBDC(uint64_t a1)
{
}

void sub_1010CBBE4(uint64_t a1)
{
}

uint64_t sub_1010CBBEC(void *a1)
{
  return *(unsigned int *)((char *)a1 + *(void *)(*a1 - 64) + 136);
}

uint64_t sub_1010CBC0C(void *a1)
{
  return *(void *)((char *)a1 + *(void *)(*a1 - 72) + 112);
}

uint64_t sub_1010CBC2C()
{
  return 0;
}

uint64_t sub_1010CBC34(char *a1, uint64_t a2)
{
  return sub_1012A6020(&a1[*(void *)(*(void *)a1 - 216) + 32], a2);
}

uint64_t sub_1010CBC58()
{
  return 1;
}

uint64_t sub_1010CBC64(void *a1)
{
  return *(unsigned int *)((char *)a1 + *(void *)(*a1 - 680) + 240);
}

uint64_t sub_1010CBC88@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 152);
  *a2 = *(void *)(result + 144);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1010CBCA4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 152);
  *a2 = *(void *)(result + 144);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1010CBCC0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1010CBCC8(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void sub_1010CBCE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v2;
  if (v4) {
    sub_10004D2C8(v4);
  }
}

uint64_t sub_1010CBD14(uint64_t a1)
{
  return *(void *)(a1 - 32);
}

uint64_t sub_1010CBD1C(uint64_t a1)
{
  return *(unsigned int *)(a1 - 8);
}

std::__shared_weak_count *sub_1010CBD24@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  BOOL result = *(std::__shared_weak_count **)(a1 + 88);
  if (result)
  {
    BOOL result = std::__shared_weak_count::lock(result);
    a2[1] = result;
    if (result) {
      *a2 = *(void *)(a1 + 80);
    }
  }
  return result;
}

uint64_t sub_1010CBD68(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 52);
}

BOOL sub_1010CBD70(uint64_t a1)
{
  return *(void *)(a1 + 40) != 0;
}

uint64_t sub_1010CBD80(uint64_t a1, uint64_t a2)
{
  return sub_1012A6020((char *)(a1 - 112), a2);
}

uint64_t sub_1010CBD88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 112) + 136))();
}

uint64_t sub_1010CBDAC(uint64_t a1)
{
  return sub_1012A6B18((char *)(a1 - 112));
}

uint64_t sub_1010CBDB4(uint64_t a1)
{
  return sub_1012A6BFC((char *)(a1 - 112));
}

void sub_1010CBDBC(uint64_t a1)
{
}

void sub_1010CBDC4(uint64_t a1)
{
}

void sub_1010CBDCC(uint64_t a1)
{
}

void sub_1010CBDD4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a2 + 160))
  {
    if (*(unsigned char *)(a1 + 160))
    {
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      sub_1010CBE70(a1 + 32, (__n128 *)(a2 + 32));
      sub_1010CBE70(a1 + 88, (__n128 *)(a2 + 88));
      uint64_t v5 = *(void *)(a2 + 144);
      *(void *)(a1 + 150) = *(void *)(a2 + 150);
      *(void *)(a1 + 144) = v5;
    }
  }
  else if (*(unsigned char *)(a1 + 160))
  {
    sub_100522D0C(a1 + 88);
    sub_100522D0C(a1 + 32);
    *(unsigned char *)(a1 + 160) = 0;
  }
  else
  {
    sub_10052309C(a1, a2);
    *(unsigned char *)(a1 + 160) = 1;
  }
}

void sub_1010CBE70(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == a2[3].n128_u8[0])
  {
    if (*(unsigned char *)(a1 + 48))
    {
      sub_100179CB0(a1, a2);
      unint64_t v4 = a2[2].n128_u64[0];
      *(unsigned char *)(a1 + 40) = a2[2].n128_u8[8];
      *(void *)(a1 + 32) = v4;
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    sub_100AE97B8(a1);
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    if (a2[1].n128_u8[8])
    {
      __n128 v5 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      *(__n128 *)a1 = v5;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
      a2->n128_u64[0] = 0;
      *(unsigned char *)(a1 + 24) = 1;
    }
    unint64_t v6 = a2[2].n128_u64[0];
    *(unsigned char *)(a1 + 40) = a2[2].n128_u8[8];
    *(void *)(a1 + 32) = v6;
    *(unsigned char *)(a1 + 48) = 1;
  }
}

uint64_t sub_1010CBF38(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 160))
  {
    sub_100522D0C(a1 + 88);
    sub_100522D0C(a1 + 32);
  }
  return a1;
}

unsigned char *sub_1010CBF74(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[160] = 0;
  if (*(unsigned char *)(a2 + 160))
  {
    sub_100B7E2DC((uint64_t)a1, a2);
    a1[160] = 1;
  }
  return a1;
}

void sub_1010CBFB8(_Unwind_Exception *a1)
{
  sub_1010CBF38(v1);
  _Unwind_Resume(a1);
}

void *sub_1010CBFCC(void *result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  unint64_t v6 = a4;
  uint64_t v7 = a2;
  if (a2 != a3)
  {
    uint64_t v17 = result;
    uint64_t v8 = *a4;
    uint64_t v9 = a3;
    while (1)
    {
      int64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((a5 - v8) >> 5);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 5)) >= v10) {
        unint64_t v11 = v10;
      }
      else {
        unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 5);
      }
      if (v11)
      {
        uint64_t v12 = 0;
        do
        {
          uint64_t v13 = a5 + v12;
          *(_DWORD *)(v13 - 160) = *(_DWORD *)(v9 + v12 - 160);
          *(_OWORD *)(v13 - 152) = *(_OWORD *)(v9 + v12 - 152);
          sub_1010CC0F0(a5 + v12 - 136, v9 + v12 - 136);
          sub_1010CC0F0(a5 + v12 - 72, v9 + v12 - 72);
          *(_WORD *)(v13 - 8) = *(_WORD *)(v9 + v12 - 8);
          v12 -= 160;
        }
        while (-160 * v11 != v12);
        a5 += v12;
      }
      v9 -= 160 * v11;
      if (v9 == v7) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v8 = v14;
      a5 = v14 + 4000;
    }
    if (*v6 + 4000 == a5)
    {
      uint64_t v15 = v6[1];
      ++v6;
      a5 = v15;
    }
    uint64_t v7 = a3;
    BOOL result = v17;
  }
  *BOOL result = v7;
  result[1] = v6;
  result[2] = a5;
  return result;
}

__n128 sub_1010CC0F0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56))
  {
    if (*(unsigned char *)(a1 + 56))
    {
      __n128 result = *(__n128 *)a2;
      *(void *)(a1 + 13) = *(void *)(a2 + 13);
      *(__n128 *)a1 = result;
      __n128 v5 = (uint64_t *)(a1 + 24);
      unint64_t v6 = (void *)(a2 + 24);
      if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
      {
        if (*(unsigned char *)(a1 + 48))
        {
          sub_100AE9654(v5);
          __n128 result = *(__n128 *)(a2 + 24);
          *(__n128 *)(a1 + 24) = result;
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          void *v6 = 0;
          *(void *)(a2 + 32) = 0;
          *(void *)(a2 + 40) = 0;
        }
      }
      else if (*(unsigned char *)(a1 + 48))
      {
        uint64_t v8 = (void **)(a1 + 24);
        sub_100523284(&v8);
        *(unsigned char *)(a1 + 48) = 0;
      }
      else
      {
        uint64_t *v5 = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        __n128 result = *(__n128 *)(a2 + 24);
        *(__n128 *)(a1 + 24) = result;
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        void *v6 = 0;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        *(unsigned char *)(a1 + 48) = 1;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(a1 + 56))
    {
      char v7 = *(unsigned char *)(a1 + 48);
      if (v7)
      {
        uint64_t v8 = (void **)(a1 + 24);
        sub_100523284(&v8);
        char v7 = 0;
      }
    }
    else
    {
      __n128 result = *(__n128 *)a2;
      *(void *)(a1 + 13) = *(void *)(a2 + 13);
      *(__n128 *)a1 = result;
      *(unsigned char *)(a1 + 24) = 0;
      *(unsigned char *)(a1 + 48) = 0;
      char v7 = 1;
      if (*(unsigned char *)(a2 + 48))
      {
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 32) = 0;
        *(void *)(a1 + 40) = 0;
        __n128 result = *(__n128 *)(a2 + 24);
        *(__n128 *)(a1 + 24) = result;
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = 0;
        *(unsigned char *)(a1 + 48) = 1;
      }
    }
    *(unsigned char *)(a1 + 56) = v7;
  }
  return result;
}

void sub_1010CC23C(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  unint64_t v6 = a4;
  uint64_t v7 = a2;
  if (a2 == a3)
  {
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v9 = a3;
    uint64_t v10 = *a4;
    while (1)
    {
      int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - a5 + 4000) >> 5);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 5)) < v11) {
        int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 5);
      }
      if (v11)
      {
        uint64_t v12 = v7 + 160 * v11;
        do
        {
          *(_DWORD *)a5 = *(_DWORD *)v7;
          *(_OWORD *)(a5 + 8) = *(_OWORD *)(v7 + 8);
          sub_1010CC0F0(a5 + 24, v7 + 24);
          sub_1010CC0F0(a5 + 88, v7 + 88);
          *(_WORD *)(a5 + 152) = *(_WORD *)(v7 + 152);
          a5 += 160;
          v7 += 160;
        }
        while (v7 != v12);
        uint64_t v7 = v12;
      }
      if (v7 == v9) {
        break;
      }
      uint64_t v13 = v6[1];
      ++v6;
      uint64_t v10 = v13;
      a5 = v13;
    }
    if (*v6 + 4000 == a5)
    {
      uint64_t v14 = v6[1];
      ++v6;
      a5 = v14;
    }
  }
  *a1 = v9;
  a1[1] = v6;
  a1[2] = a5;
}

uint64_t sub_1010CC344(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a3;
  sub_100AE6A30(a1 + 24, (long long *)(a3 + 16));
  sub_100AE6A30(a1 + 88, (long long *)(a3 + 80));
  *(_WORD *)(a1 + 152) = *(_WORD *)(a3 + 144);
  return a1;
}

void sub_1010CC3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(v10 + 80))
  {
    if (*(unsigned char *)(v10 + 72))
    {
      a10 = v10 + 48;
      sub_100523284((void ***)&a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010CC3CC(uint64_t a1, unsigned int a2)
{
  if (!*(unsigned char *)(a1 + 48)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v3 == v2) {
    return 0;
  }
  uint64_t v4 = v3 + 160;
  do
  {
    uint64_t result = a2 & (*(_DWORD *)(v4 - 132) == 4) | (*(_DWORD *)(v4 - 132) == 41) & (a2 >> 1);
    if (a2 & (*(_DWORD *)(v4 - 132) == 4) | (*(_DWORD *)(v4 - 132) == 41) & (a2 >> 1)) {
      break;
    }
    BOOL v6 = v4 == v2;
    v4 += 160;
  }
  while (!v6);
  return result;
}

uint64_t sub_1010CC424(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1010CC434(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1010CC450(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_1010CCBD8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1010CCC44()
{
}

uint64_t sub_1010CCC68(uint64_t a1, void *a2)
{
  uint64_t v4 = (capabilities::ct *)ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 8), "com.apple.telephony", "wea");
  v7[0] = off_101999E18;
  v7[1] = sub_1010CCF04;
  void v7[3] = v7;
  *(void *)(a1 + 16) = 0;
  if ((capabilities::ct::supportsGemini(v4) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 16)) {
    operator new();
  }
  sub_10008863C(v7);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = off_101A8B200;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 88) = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 96) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 104) = 850045863;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 160) = 0;
  return a1;
}

void sub_1010CCE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10008863C((uint64_t *)va);
  operator delete();
}

const char *sub_1010CCF04(int a1)
{
  uint64_t v1 = "wea.store.?";
  if (a1 == 2) {
    uint64_t v1 = "wea.2";
  }
  if (a1 == 1) {
    return "wea.1";
  }
  else {
    return v1;
  }
}

unint64_t sub_1010CCF30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 64);
  uint64_t v3 = (void *)(a1 + 72);
  if (v2 != (void *)(a1 + 72))
  {
    do
    {
      uint64_t v5 = (uint64_t *)v2[5];
      BOOL v6 = (uint64_t *)v2[6];
      while (v5 != v6)
      {
        uint64_t v7 = *v5;
        if (v7 == sub_100206390((uint64_t)&v12, a2)) {
          return ((unint64_t)*((unsigned int *)v5 + 2) << 32) | 1;
        }
        v5 += 2;
      }
      uint64_t v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v2[2];
          BOOL v10 = *v9 == (void)v2;
          uint64_t v2 = v9;
        }
        while (!v10);
      }
      uint64_t v2 = v9;
    }
    while (v9 != v3);
  }
  return 0;
}

BOOL sub_1010CCFF0(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v167 = a2;
  uint64_t v160 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  unint64_t v5 = sub_100206390((uint64_t)buf, a3);
  uint64_t v165 = a1;
  uint64_t v7 = *(Registry **)(a1 + 88);
  BOOL v6 = (Registry **)(a1 + 88);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v8, v7);
  BOOL v10 = ServiceMap;
  uint64_t v12 = v11;
  if (v11 < 0)
  {
    uint64_t v13 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v12;
  BOOL v16 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (v16)
  {
    uint64_t v17 = v16[3];
    BOOL v18 = (std::__shared_weak_count *)v16[4];
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      char v19 = v18;
      sub_10004D2C8(v18);
      char v20 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::mutex::unlock(v10);
  char v19 = 0;
  char v20 = 1;
LABEL_9:
  unsigned int v163 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 88))(v17);
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v19);
  }
  int v22 = (std::mutex *)Registry::getServiceMap(v21, *v6);
  int v23 = v22;
  uint64_t v25 = v24;
  if (v24 < 0)
  {
    uint64_t v26 = (unsigned __int8 *)(v24 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v27 = 5381;
    do
    {
      uint64_t v25 = v27;
      unsigned int v28 = *v26++;
      uint64_t v27 = (33 * v27) ^ v28;
    }
    while (v28);
  }
  std::mutex::lock(v22);
  *(void *)long long buf = v25;
  int v29 = sub_10004D37C(&v23[1].__m_.__sig, (unint64_t *)buf);
  uint64_t v154 = v24;
  if (v29)
  {
    uint64_t v31 = v29[3];
    unint64_t v30 = (std::__shared_weak_count *)v29[4];
    if (v30)
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v23);
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v30);
      unsigned int v155 = 0;
      if (!v31) {
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v31 = 0;
  }
  std::mutex::unlock(v23);
  unint64_t v30 = 0;
  unsigned int v155 = 1;
  if (!v31)
  {
LABEL_17:
    int v32 = *v160;
    if (os_log_type_enabled(*v160, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Carrier settings interface missing", buf, 2u);
    }
    goto LABEL_36;
  }
LABEL_21:
  v172 = 0;
  long long v161 = v30;
  (*(void (**)(unsigned char *__return_ptr, uint64_t, void, uint64_t, uint64_t *, void, void))(*(void *)v31 + 104))(buf, v31, v167, 2, &qword_101B130D8, 0, 0);
  sub_1000842D0(&v172, (CFTypeRef *)buf);
  int v33 = sub_1000577C4((const void **)buf);
  if (v172) {
    uint64_t v35 = sub_100081E58;
  }
  else {
    uint64_t v35 = 0;
  }
  if (!v35)
  {
    uint64_t v47 = *v160;
    LODWORD(v48) = 0;
    if (os_log_type_enabled(*v160, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#I Content based duplicate detection disabled", buf, 2u);
      sub_1000570E8((const void **)&v172);
LABEL_36:
      BOOL v48 = 0;
      goto LABEL_158;
    }
    goto LABEL_157;
  }
  uint64_t v151 = v31;
  *(_DWORD *)long long buf = 0;
  ctu::cf::assign((ctu::cf *)v33, v172, v34);
  uint64_t v36 = 60 * *(unsigned int *)buf;
  if (v36 >= 3600) {
    unint64_t v37 = 3600;
  }
  else {
    unint64_t v37 = 60 * *(unsigned int *)buf;
  }
  int v38 = (std::mutex *)Registry::getServiceMap((uint64_t *)v36, *v6);
  __int16 v39 = v38;
  if (v11 < 0)
  {
    int v40 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v41 = 5381;
    do
    {
      uint64_t v11 = v41;
      unsigned int v42 = *v40++;
      uint64_t v41 = (33 * v41) ^ v42;
    }
    while (v42);
  }
  std::mutex::lock(v38);
  *(void *)long long buf = v11;
  __int16 v43 = sub_10004D37C(&v39[1].__m_.__sig, (unint64_t *)buf);
  if (v43)
  {
    uint64_t v45 = v43[3];
    int v44 = (std::__shared_weak_count *)v43[4];
    if (v44)
    {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v39);
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v44);
      char v46 = 0;
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v45 = 0;
  }
  std::mutex::unlock(v39);
  int v44 = 0;
  char v46 = 1;
LABEL_39:
  int v166 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 88))(v45);
  unint64_t v30 = v161;
  if ((v46 & 1) == 0) {
    sub_10004D2C8(v44);
  }
  subscriber::makeSimSlotRange();
  uint64_t v152 = v6;
  uint64_t v50 = v169;
  uint64_t v49 = v170;
  if (v169 != v170)
  {
    unint64_t v51 = v171;
    while ((v171(*v50) & 1) == 0)
    {
      if (++v50 == v170)
      {
        uint64_t v50 = v170;
        break;
      }
    }
    unint64_t v52 = v170;
    if (v50 != v170)
    {
      uint64_t v158 = (uint64_t **)(v165 + 64);
      uint64_t v53 = (void *)(v165 + 72);
      unint64_t v156 = v5;
      long long v153 = v170;
      do
      {
        int v168 = 0;
        int v54 = *v50;
        int v168 = *v50;
        uint64_t v55 = *v53;
        if (*v53)
        {
          uint64_t v56 = v53;
          do
          {
            int v57 = *(_DWORD *)(v55 + 32);
            BOOL v58 = v57 < v54;
            if (v57 >= v54) {
              uint64_t v59 = (uint64_t *)v55;
            }
            else {
              uint64_t v59 = (uint64_t *)(v55 + 8);
            }
            if (!v58) {
              uint64_t v56 = (void *)v55;
            }
            uint64_t v55 = *v59;
          }
          while (*v59);
          if (v56 != v53 && v54 >= *((_DWORD *)v56 + 8))
          {
            long long v159 = sub_1002C73FC(v158, v54, &v168);
            uint64_t v60 = sub_1002C73FC(v158, v54, &v168)[5];
            uint64_t v61 = sub_1002C73FC(v158, v54, &v168)[6];
            if (v60 != v61)
            {
              while (1)
              {
                uint64_t v62 = *v60;
                int v63 = *((_DWORD *)v60 + 2);
                uint64_t v64 = *(NSObject **)(v165 + 8);
                if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 67109632;
                  *(_DWORD *)&uint8_t buf[4] = v166;
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v63;
                  *(_WORD *)&buf[14] = 2048;
                  *(void *)&uint8_t buf[16] = v37;
                  _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#I now: [%d] alertMessage.fTimestamp [%d], window = %lld", buf, 0x18u);
                }
                if (v166 - v63 >= v37) {
                  break;
                }
                v60 += 2;
                if (v60 == v61)
                {
                  uint64_t v60 = v61;
                  uint64_t v53 = (void *)(v165 + 72);
                  goto LABEL_76;
                }
              }
              uint64_t v65 = *(NSObject **)(v165 + 8);
              uint64_t v53 = (void *)(v165 + 72);
              if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 134217984;
                *(void *)&uint8_t buf[4] = v62;
                _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#I Erasing content: [%lx]", buf, 0xCu);
              }
              if (v60 != v61)
              {
                for (uint64_t i = v60 + 2; i != v61; i += 2)
                {
                  unint64_t v67 = v37;
                  uint64_t v164 = *i;
                  int v68 = *((_DWORD *)i + 2);
                  uint64_t v69 = *(NSObject **)(v165 + 8);
                  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)long long buf = 67109632;
                    *(_DWORD *)&uint8_t buf[4] = v166;
                    *(_WORD *)&uint8_t buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v68;
                    *(_WORD *)&buf[14] = 2048;
                    *(void *)&uint8_t buf[16] = v67;
                    _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "#I now: [%d] alertMessage.fTimestamp [%d], window = %lld", buf, 0x18u);
                  }
                  unint64_t v70 = (v166 - v68);
                  unint64_t v37 = v67;
                  if (v67 <= v70)
                  {
                    uint64_t v72 = *(NSObject **)(v165 + 8);
                    uint64_t v53 = (void *)(v165 + 72);
                    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)long long buf = 134217984;
                      *(void *)&uint8_t buf[4] = v164;
                      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#I Erasing content: [%lx]", buf, 0xCu);
                    }
                  }
                  else
                  {
                    uint64_t v71 = *i;
                    *((_DWORD *)v60 + 2) = *((_DWORD *)i + 2);
                    uint64_t *v60 = v71;
                    v60 += 2;
                    uint64_t v53 = (void *)(v165 + 72);
                  }
                }
              }
            }
LABEL_76:
            unint64_t v30 = v161;
            uint64_t v73 = sub_1002C73FC(v158, v54, &v168);
            unint64_t v52 = v153;
            unint64_t v5 = v156;
            if (v60 != v73[6])
            {
              xpc_object_t v74 = v73[6];
              uint64_t v75 = v159[6];
              int64_t v76 = (char *)v75 - (char *)v74;
              if (v75 != v74) {
                memmove(v60, v74, v76 - 4);
              }
              v159[6] = (uint64_t *)((char *)v60 + v76);
            }
          }
        }
        xpc_object_t v77 = v50 + 1;
        uint64_t v50 = v49;
        if (v77 != v49)
        {
          uint64_t v50 = v77;
          while ((v51(*v50) & 1) == 0)
          {
            if (++v50 == v49)
            {
              uint64_t v50 = v49;
              break;
            }
          }
        }
      }
      while (v50 != v52);
    }
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t, void, uint64_t, uint64_t *, const CFBooleanRef, void))(*(void *)v151 + 104))(buf, v151, v167, 2, &qword_101B130F0, kCFBooleanFalse, 0);
  char v78 = *(BOOL **)buf;
  LOBYTE(v169) = 0;
  if (*(void *)buf)
  {
    CFTypeID v79 = CFGetTypeID(*(CFTypeRef *)buf);
    if (v79 == CFBooleanGetTypeID()) {
      ctu::cf::assign((ctu::cf *)&v169, v78, v80);
    }
    LODWORD(v78) = v169;
  }
  BOOL v6 = v152;
  sub_1000577C4((const void **)buf);
  (*(void (**)(unsigned char *__return_ptr, uint64_t, void, uint64_t, uint64_t *, const CFBooleanRef, void))(*(void *)v151 + 104))(buf, v151, v167, 2, &qword_101B13108, kCFBooleanFalse, 0);
  xpc_object_t v81 = *(BOOL **)buf;
  LOBYTE(v169) = 0;
  if (*(void *)buf)
  {
    CFTypeID v82 = CFGetTypeID(*(CFTypeRef *)buf);
    if (v82 == CFBooleanGetTypeID()) {
      ctu::cf::assign((ctu::cf *)&v169, v81, v83);
    }
    int v84 = v169;
  }
  else
  {
    int v84 = 0;
  }
  sub_1000577C4((const void **)buf);
  if (v78)
  {
    uint64_t v85 = *(void *)(v165 + 72);
    if (v85)
    {
      uint64_t v86 = v165 + 72;
      do
      {
        int v87 = *(_DWORD *)(v85 + 32);
        BOOL v88 = v87 < (int)v167;
        if (v87 >= (int)v167) {
          xpc_object_t v89 = (uint64_t *)v85;
        }
        else {
          xpc_object_t v89 = (uint64_t *)(v85 + 8);
        }
        if (!v88) {
          uint64_t v86 = v85;
        }
        uint64_t v85 = *v89;
      }
      while (*v89);
      if (v86 != v165 + 72 && (signed int)v167 >= *(_DWORD *)(v86 + 32))
      {
        uint64_t v108 = *(void *)(v86 + 40);
        uint64_t v107 = *(void *)(v86 + 48);
        while (v108 != v107)
        {
          int v109 = *(_DWORD *)(v108 + 8);
          if (v37 >= v163 - v109 && v5 == *(void *)v108)
          {
            uint64_t v113 = *v160;
            if (os_log_type_enabled(*v160, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136446978;
              *(void *)&uint8_t buf[4] = "intra-sim";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v163;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v109;
              __int16 v174 = 2048;
              unint64_t v175 = v37;
              _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "#I Alert filtered : [content based: %{public}s] currentTS = %u matchedTS = %u window = %lld", buf, 0x22u);
              sub_1000570E8((const void **)&v172);
              BOOL v48 = 1;
              goto LABEL_158;
            }
            LODWORD(v48) = 1;
            goto LABEL_157;
          }
          v108 += 16;
        }
      }
    }
    long long v90 = *v160;
    if (os_log_type_enabled(*v160, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "#I Alert not filtered : [content based: intra-sim]", buf, 2u);
    }
  }
  if (v84)
  {
    subscriber::makeSimSlotRange();
    std::string v92 = (unsigned int *)v169;
    uint64_t v91 = (unsigned int *)v170;
    if (v169 == v170)
    {
      BOOL v48 = 0;
      uint64_t v106 = v160;
    }
    else
    {
      long long v93 = v171;
      while ((v93(*v92) & 1) == 0)
      {
        if (++v92 == v91)
        {
          std::string v92 = v91;
          break;
        }
      }
      long long v94 = (unsigned int *)v170;
      if (v92 == (unsigned int *)v170)
      {
        BOOL v48 = 0;
        uint64_t v106 = v160;
        unint64_t v30 = v161;
      }
      else
      {
        long long v95 = (uint64_t *)(v165 + 72);
        do
        {
          signed int v96 = *v92;
          if (*v92 != v167)
          {
            uint64_t v97 = *v95;
            if (*v95)
            {
              uint64_t v98 = v165 + 72;
              do
              {
                signed int v99 = *(_DWORD *)(v97 + 32);
                BOOL v100 = v99 < v96;
                if (v99 >= v96) {
                  uint64_t v101 = (uint64_t *)v97;
                }
                else {
                  uint64_t v101 = (uint64_t *)(v97 + 8);
                }
                if (!v100) {
                  uint64_t v98 = v97;
                }
                uint64_t v97 = *v101;
              }
              while (*v101);
              if ((uint64_t *)v98 != v95 && v96 >= *(_DWORD *)(v98 + 32))
              {
                uint64_t v104 = *(void *)(v98 + 40);
                uint64_t v103 = *(void *)(v98 + 48);
                while (v104 != v103)
                {
                  int v105 = *(_DWORD *)(v104 + 8);
                  if (v37 >= v163 - v105 && v5 == *(void *)v104)
                  {
                    uint64_t v106 = v160;
                    long long v110 = *v160;
                    if (os_log_type_enabled(*v160, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)long long buf = 136446978;
                      *(void *)&uint8_t buf[4] = "inter-sim";
                      *(_WORD *)&unsigned char buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v163;
                      *(_WORD *)&unsigned char buf[18] = 1024;
                      *(_DWORD *)&buf[20] = v105;
                      __int16 v174 = 2048;
                      unint64_t v175 = v37;
                      _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEFAULT, "#I Alert filtered : [content based: %{public}s] currentTS = %u matchedTS = %u window = %lld", buf, 0x22u);
                      long long v110 = *v160;
                    }
                    unint64_t v30 = v161;
                    BOOL v6 = v152;
                    if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v111 = subscriber::asString();
                      *(_DWORD *)long long buf = 136315138;
                      *(void *)&uint8_t buf[4] = v111;
                      _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEFAULT, "#I Duplicated from slot: %s", buf, 0xCu);
                    }
                    BOOL v48 = 1;
                    goto LABEL_152;
                  }
                  v104 += 16;
                }
              }
            }
          }
          long long v102 = v92 + 1;
          std::string v92 = v91;
          if (v102 != v91)
          {
            std::string v92 = v102;
            while ((v93(*v92) & 1) == 0)
            {
              if (++v92 == v91)
              {
                std::string v92 = v91;
                break;
              }
            }
          }
        }
        while (v92 != v94);
        BOOL v48 = 0;
        uint64_t v106 = v160;
        unint64_t v30 = v161;
        BOOL v6 = v152;
      }
    }
LABEL_152:
    long long v112 = *v106;
    if (os_log_type_enabled(*v106, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "#I Alert not filtered : [content based: inter-sim]", buf, 2u);
      sub_1000570E8((const void **)&v172);
      goto LABEL_158;
    }
  }
  else
  {
    LODWORD(v48) = 0;
  }
LABEL_157:
  sub_1000570E8((const void **)&v172);
  BOOL v48 = v48;
LABEL_158:
  long long v114 = (uint64_t *)v155;
  if ((v155 & 1) == 0) {
    sub_10004D2C8(v30);
  }
  uint64_t v115 = (std::mutex *)Registry::getServiceMap(v114, *v6);
  uint64_t v116 = v154;
  uint64_t v117 = v115;
  if (v154 < 0)
  {
    __int16 v118 = (unsigned __int8 *)(v154 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v119 = 5381;
    do
    {
      uint64_t v116 = v119;
      unsigned int v120 = *v118++;
      uint64_t v119 = (33 * v119) ^ v120;
    }
    while (v120);
  }
  std::mutex::lock(v115);
  *(void *)long long buf = v116;
  int v121 = sub_10004D37C(&v117[1].__m_.__sig, (unint64_t *)buf);
  if (!v121)
  {
    uint64_t v122 = 0;
LABEL_170:
    std::mutex::unlock(v117);
    v123 = 0;
    char v124 = 1;
    if (!v122) {
      goto LABEL_166;
    }
LABEL_171:
    char v162 = v123;
    subscriber::makeSimSlotRange();
    std::string::size_type v127 = *(unsigned int **)buf;
    char v126 = *(unsigned int **)&buf[8];
    unint64_t v157 = v5;
    if (*(void *)buf == *(void *)&buf[8])
    {
      BOOL v129 = v48;
    }
    else
    {
      char v128 = *(uint64_t (**)(void))&buf[16];
      while ((v128(*v127) & 1) == 0)
      {
        if (++v127 == v126)
        {
          BOOL v129 = v48;
          std::string::size_type v127 = v126;
          goto LABEL_178;
        }
      }
      BOOL v129 = v48;
LABEL_178:
      char v130 = *(unsigned int **)&buf[8];
      if (v127 != *(unsigned int **)&buf[8])
      {
        do
        {
          uint64_t v131 = *v127;
          v169 = 0;
          (*(void (**)(unsigned int **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t *, void, void))(*(void *)v122 + 104))(&v172, v122, v131, 2, &qword_101B130D8, 0, 0);
          sub_1000842D0(&v169, (CFTypeRef *)&v172);
          sub_1000577C4((const void **)&v172);
          if (v169) {
            char v132 = sub_100081E58;
          }
          else {
            char v132 = 0;
          }
          BOOL v133 = v132 != 0;
          sub_1000570E8((const void **)&v169);
          if (v132) {
            break;
          }
          char v134 = v127 + 1;
          std::string::size_type v127 = v126;
          if (v134 != v126)
          {
            std::string::size_type v127 = v134;
            while ((v128(*v127) & 1) == 0)
            {
              if (++v127 == v126)
              {
                std::string::size_type v127 = v126;
                break;
              }
            }
          }
        }
        while (v127 != v130);
        if (v124)
        {
LABEL_190:
          BOOL v48 = v129;
          if (!v133) {
            return v48;
          }
LABEL_194:
          char v135 = *v160;
          if (os_log_type_enabled(*v160, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = v157;
            _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEFAULT, "#I Storing WEA (for content based filtering): %lx", buf, 0xCu);
          }
          CFDictionaryRef v136 = sub_1002C73FC((uint64_t **)(v165 + 64), v167, &v167);
          uint64_t v137 = v136;
          v139 = v136[6];
          std::string::size_type v138 = v136[7];
          if (v139 >= v138)
          {
            char v141 = v136[5];
            uint64_t v142 = ((char *)v139 - (char *)v141) >> 4;
            unint64_t v143 = v142 + 1;
            if ((unint64_t)(v142 + 1) >> 60) {
              sub_10006A748();
            }
            uint64_t v144 = (char *)v138 - (char *)v141;
            if (v144 >> 3 > v143) {
              unint64_t v143 = v144 >> 3;
            }
            if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v145 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v145 = v143;
            }
            if (v145)
            {
              if (v145 >> 60) {
                sub_10006A7CC();
              }
              uint64_t v146 = (char *)operator new(16 * v145);
            }
            else
            {
              uint64_t v146 = 0;
            }
            long long v147 = (unint64_t *)&v146[16 * v142];
            *long long v147 = v157;
            v147[1] = v163;
            uint64_t v140 = (uint64_t *)(v147 + 2);
            if (v139 != v141)
            {
              do
              {
                unint64_t v148 = *(v139 - 2);
                v139 -= 2;
                int v149 = *((_DWORD *)v139 + 2);
                *(v147 - 2) = v148;
                v147 -= 2;
                *((_DWORD *)v147 + 2) = v149;
              }
              while (v139 != v141);
              v139 = v137[5];
            }
            v137[5] = (uint64_t *)v147;
            v137[6] = v140;
            v137[7] = (uint64_t *)&v146[16 * v145];
            if (v139) {
              operator delete(v139);
            }
          }
          else
          {
            uint64_t *v139 = v157;
            uint64_t v140 = v139 + 2;
            v139[1] = v163;
          }
          v137[6] = v140;
          return v48;
        }
LABEL_193:
        sub_10004D2C8(v162);
        BOOL v48 = v129;
        if (!v133) {
          return v48;
        }
        goto LABEL_194;
      }
    }
    BOOL v133 = 0;
    if (v124) {
      goto LABEL_190;
    }
    goto LABEL_193;
  }
  uint64_t v122 = v121[3];
  v123 = (std::__shared_weak_count *)v121[4];
  if (!v123) {
    goto LABEL_170;
  }
  atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v117);
  atomic_fetch_add_explicit(&v123->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v123);
  char v124 = 0;
  if (v122) {
    goto LABEL_171;
  }
LABEL_166:
  v125 = *(NSObject **)(v165 + 8);
  if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_ERROR, "Carrier settings interface missing", buf, 2u);
    if (v124) {
      return v48;
    }
    goto LABEL_168;
  }
  if ((v124 & 1) == 0) {
LABEL_168:
  }
    sub_10004D2C8(v123);
  return v48;
}

void sub_1010CE034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  sub_1000570E8((const void **)(v22 - 152));
  if ((a17 & 1) == 0) {
    sub_10004D2C8(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010CE11C(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v94 = a2;
  long long v90 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  std::mutex::lock((std::mutex *)(a1 + 104));
  unsigned int v95 = a2;
  uint64_t v8 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a2);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v9, *(Registry **)(a1 + 88));
  uint64_t v11 = ServiceMap;
  uint64_t v13 = (void *)v12;
  if (v12 < 0)
  {
    uint64_t v14 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v15 = 5381;
    do
    {
      uint64_t v13 = (void *)v15;
      unsigned int v16 = *v14++;
      uint64_t v15 = (33 * v15) ^ v16;
    }
    while (v16);
  }
  std::mutex::lock(ServiceMap);
  std::string __p = v13;
  uint64_t v17 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)&__p);
  if (v17)
  {
    uint64_t v19 = v17[3];
    BOOL v18 = (std::__shared_weak_count *)v17[4];
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v18);
      char v20 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  std::mutex::unlock(v11);
  BOOL v18 = 0;
  char v20 = 1;
LABEL_9:
  int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 88))(v19);
  int v91 = a5;
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v18);
  }
  std::string __p = 0;
  uint64_t v101 = 0;
  long long v102 = 0;
  uint64_t v22 = v95;
  int v23 = sub_100BC7D38((uint64_t **)(a1 + 40), v95, &v95);
  uint64_t v25 = v23[5];
  for (uint64_t i = v23[6]; v25 != i; v25 += 2)
  {
    if ((sub_1010CE9F8(a1, v22, v21, *((_DWORD *)v25 + 2)) & 1) == 0)
    {
      uint64_t v26 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = *(_DWORD *)v25;
        int v28 = *((_DWORD *)v25 + 2);
        *(_DWORD *)long long buf = 67109376;
        int v97 = v27;
        __int16 v98 = 1024;
        int v99 = v28;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I Message with ID: %u and timestamp: %u is not valid anymore, erasing it", buf, 0xEu);
      }
      int v29 = v101;
      if (v101 >= v102)
      {
        uint64_t v31 = (char *)__p;
        uint64_t v32 = (v101 - (unsigned char *)__p) >> 2;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62) {
          sub_10006A748();
        }
        uint64_t v34 = v102 - (unsigned char *)__p;
        if ((v102 - (unsigned char *)__p) >> 1 > v33) {
          unint64_t v33 = v34 >> 1;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          uint64_t v36 = (char *)sub_10005ECD8((uint64_t)&v102, v35);
          uint64_t v31 = (char *)__p;
          int v29 = v101;
        }
        else
        {
          uint64_t v36 = 0;
        }
        unint64_t v37 = &v36[4 * v32];
        *(_DWORD *)unint64_t v37 = *(_DWORD *)v25;
        unint64_t v30 = v37 + 4;
        while (v29 != v31)
        {
          int v38 = *((_DWORD *)v29 - 1);
          v29 -= 4;
          *((_DWORD *)v37 - 1) = v38;
          v37 -= 4;
        }
        std::string __p = v37;
        uint64_t v101 = v30;
        long long v102 = &v36[4 * v35];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v101 = *(_DWORD *)v25;
        unint64_t v30 = v29 + 4;
      }
      uint64_t v101 = v30;
    }
  }
  __int16 v39 = (char *)__p;
  int v40 = v101;
  if (__p == v101)
  {
    int v42 = v91;
    if (__p)
    {
LABEL_43:
      uint64_t v101 = v39;
      operator delete(v39);
    }
  }
  else
  {
    int v41 = v95;
    int v42 = v91;
    do
    {
      __int16 v43 = sub_100BC7D38((uint64_t **)(a1 + 40), v41, &v95)[5];
      int v44 = sub_100BC7D38((uint64_t **)(a1 + 40), v41, &v95);
      uint64_t v45 = v44[6];
      if (v43 != v45)
      {
        while (*(_DWORD *)v43 != *(_DWORD *)v39)
        {
          v43 += 2;
          if (v43 == v45)
          {
            __int16 v43 = v44[6];
            break;
          }
        }
      }
      char v46 = sub_100BC7D38((uint64_t **)(a1 + 40), v41, &v95);
      uint64_t v47 = v46[6];
      int64_t v48 = (char *)v47 - (char *)(v43 + 2);
      if (v47 != v43 + 2) {
        memmove(v43, v43 + 2, (char *)v47 - (char *)(v43 + 2));
      }
      v46[6] = (uint64_t *)((char *)v43 + v48);
      v39 += 4;
    }
    while (v39 != v40);
    __int16 v39 = (char *)__p;
    if (__p) {
      goto LABEL_43;
    }
  }
  uint64_t v49 = sub_100BC7D38((uint64_t **)(a1 + 40), v94, &v94);
  unint64_t v51 = v49[5];
  uint64_t v50 = v49[6];
  if (v51 == v50)
  {
LABEL_55:
    int v54 = (std::mutex *)Registry::getServiceMap(v50, *(Registry **)(a1 + 88));
    uint64_t v55 = v54;
    if (v12 < 0)
    {
      uint64_t v56 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v57 = 5381;
      do
      {
        uint64_t v12 = v57;
        unsigned int v58 = *v56++;
        uint64_t v57 = (33 * v57) ^ v58;
      }
      while (v58);
    }
    std::mutex::lock(v54);
    std::string __p = (void *)v12;
    uint64_t v59 = sub_10004D37C(&v55[1].__m_.__sig, (unint64_t *)&__p);
    if (v59)
    {
      uint64_t v61 = v59[3];
      uint64_t v60 = (std::__shared_weak_count *)v59[4];
      if (v60)
      {
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v55);
        atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v60);
        char v62 = 0;
LABEL_65:
        int v63 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 88))(v61);
        if ((v62 & 1) == 0) {
          sub_10004D2C8(v60);
        }
        uint64_t v64 = *v90;
        if (os_log_type_enabled(*v90, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v65 = sms::asString();
          LODWORD(__p) = 67109634;
          HIDWORD(__p) = a4;
          LOWORD(v101) = 1024;
          *(_DWORD *)((char *)&v101 + 2) = v42;
          HIWORD(v101) = 2080;
          long long v102 = (char *)v65;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#I Storing WEA (for inter-tech duplicate detection): [category %u uniqueId: %u type %s]", (uint8_t *)&__p, 0x18u);
        }
        int64_t v66 = sub_100BC7D38((uint64_t **)(a1 + 40), v94, &v94);
        unint64_t v67 = v66;
        uint64_t v69 = (char *)v66[6];
        int v68 = v66[7];
        if (v69 >= (char *)v68)
        {
          uint64_t v71 = v66[5];
          uint64_t v72 = (v69 - (char *)v71) >> 4;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 60) {
            sub_10006A748();
          }
          uint64_t v74 = (char *)v68 - (char *)v71;
          if (v74 >> 3 > v73) {
            unint64_t v73 = v74 >> 3;
          }
          BOOL v75 = (unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0;
          unint64_t v76 = 0xFFFFFFFFFFFFFFFLL;
          if (!v75) {
            unint64_t v76 = v73;
          }
          if (v76)
          {
            unint64_t v76 = (unint64_t)sub_1009C886C(v76);
            uint64_t v71 = v67[5];
            uint64_t v69 = (char *)v67[6];
          }
          else
          {
            uint64_t v77 = 0;
          }
          int v87 = (_DWORD *)(v76 + 16 * v72);
          _DWORD *v87 = a4;
          v87[1] = v42;
          unint64_t v88 = v76 + 16 * v77;
          void v87[2] = v63;
          v87[3] = a3;
          unint64_t v70 = (uint64_t *)(v87 + 4);
          if (v69 != (char *)v71)
          {
            do
            {
              *((_OWORD *)v87 - 1) = *((_OWORD *)v69 - 1);
              v87 -= 4;
              v69 -= 16;
            }
            while (v69 != (char *)v71);
            uint64_t v71 = v67[5];
          }
          v67[5] = (uint64_t *)v87;
          v67[6] = v70;
          v67[7] = (uint64_t *)v88;
          if (v71) {
            operator delete(v71);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v69 = a4;
          *((_DWORD *)v69 + 1) = v42;
          unint64_t v70 = (uint64_t *)(v69 + 16);
          *((_DWORD *)v69 + 2) = v63;
          *((_DWORD *)v69 + 3) = a3;
        }
        v67[6] = v70;
        uint64_t v79 = 1;
        goto LABEL_90;
      }
    }
    else
    {
      uint64_t v61 = 0;
    }
    std::mutex::unlock(v55);
    uint64_t v60 = 0;
    char v62 = 1;
    goto LABEL_65;
  }
  while (1)
  {
    int v52 = *((_DWORD *)v51 + 1);
    if (a3 == 1 && *((_DWORD *)v51 + 3) == 1) {
      break;
    }
    if (v52 == v42)
    {
      os_log_t v78 = *v90;
      uint64_t v79 = 0;
      if (!os_log_type_enabled(*v90, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_90;
      }
      int v80 = *((_DWORD *)v51 + 2);
      LODWORD(__p) = 67109376;
      HIDWORD(__p) = v42;
      LOWORD(v101) = 1024;
      *(_DWORD *)((char *)&v101 + 2) = v80;
      xpc_object_t v81 = "#I CMAS Message with Message ID: %u has been processed before on 3GPP2 at %u";
      CFTypeID v82 = v78;
      uint32_t v83 = 14;
      goto LABEL_82;
    }
LABEL_54:
    v51 += 2;
    if (v51 == v50) {
      goto LABEL_55;
    }
  }
  if (v52 != v42 || *(_DWORD *)v51 != a4) {
    goto LABEL_54;
  }
  os_log_t v84 = *v90;
  BOOL v85 = os_log_type_enabled(*v90, OS_LOG_TYPE_DEFAULT);
  uint64_t v79 = 0;
  if (v85)
  {
    int v86 = *((_DWORD *)v51 + 2);
    LODWORD(__p) = 67109632;
    HIDWORD(__p) = a4;
    LOWORD(v101) = 1024;
    *(_DWORD *)((char *)&v101 + 2) = v42;
    HIWORD(v101) = 1024;
    LODWORD(v102) = v86;
    xpc_object_t v81 = "#I CMAS Message ID: %u, Serial No: %u has been processed before on 3GPP at %u";
    CFTypeID v82 = v84;
    uint32_t v83 = 20;
LABEL_82:
    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, v81, (uint8_t *)&__p, v83);
    uint64_t v79 = 0;
  }
LABEL_90:
  std::mutex::unlock((std::mutex *)(a1 + 104));
  return v79;
}

void sub_1010CE888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
}

void sub_1010CE8FC(uint64_t a1, uint64_t a2)
{
  int v9 = a2;
  uint64_t v4 = (std::mutex *)(a1 + 104);
  std::mutex::lock((std::mutex *)(a1 + 104));
  unint64_t v5 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a2);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Invalidating all the stored message IDs", v8, 2u);
  }
  BOOL v6 = sub_100BC7D38((uint64_t **)(a1 + 40), a2, &v9);
  v6[6] = v6[5];
  uint64_t v7 = sub_1002C73FC((uint64_t **)(a1 + 64), a2, &v9);
  void v7[6] = v7[5];
  std::mutex::unlock(v4);
}

void sub_1010CE9E0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010CE9F8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
  int v9 = v8;
  uint64_t v10 = (a3 - a4);
  uint64_t v11 = (uint64_t *)(v10 >> 7);
  if (v11 < 0x2A3)
  {
    CFDictionaryRef theDict = 0;
    ServiceMap = (std::mutex *)Registry::getServiceMap(v11, *(Registry **)(a1 + 88));
    uint64_t v15 = ServiceMap;
    if (v16 < 0)
    {
      uint64_t v17 = (unsigned __int8 *)(v16 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v18 = 5381;
      do
      {
        uint64_t v16 = v18;
        unsigned int v19 = *v17++;
        uint64_t v18 = (33 * v18) ^ v19;
      }
      while (v19);
    }
    std::mutex::lock(ServiceMap);
    *(void *)long long buf = v16;
    char v20 = sub_10004D37C(&v15[1].__m_.__sig, (unint64_t *)buf);
    if (v20)
    {
      uint64_t v22 = v20[3];
      int v21 = (std::__shared_weak_count *)v20[4];
      if (v21)
      {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v15);
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v21);
        char v23 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    std::mutex::unlock(v15);
    int v21 = 0;
    char v23 = 1;
LABEL_12:
    (*(void (**)(CFDictionaryRef *__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v22 + 96))(&v36, v22, a2, 2, @"CellBroadcast", 0, 0);
    sub_10004EFE4(&theDict, (CFTypeRef *)&v36);
    sub_1000577C4((const void **)&v36);
    if ((v23 & 1) == 0) {
      sub_10004D2C8(v21);
    }
    if (theDict) {
      uint64_t v24 = sub_100080778;
    }
    else {
      uint64_t v24 = 0;
    }
    if (!v24)
    {
      uint64_t v32 = *v9;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Failed to fetch CellBroadcast dict", buf, 2u);
      }
      uint64_t v13 = 1;
      goto LABEL_36;
    }
    CFDictionaryRef v36 = 0;
    *(void *)long long buf = CFDictionaryGetValue(theDict, @"MessageValidityPeriod");
    sub_10004EFE4(&v36, (CFTypeRef *)buf);
    if (v36) {
      uint64_t v25 = sub_100080778;
    }
    else {
      uint64_t v25 = 0;
    }
    if (!v25) {
      goto LABEL_34;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v36, @"TimeLimit");
    CFNumberRef v27 = Value;
    if (Value && (CFTypeID v28 = CFGetTypeID(Value), v28 == CFNumberGetTypeID()))
    {
      uint64_t valuePtr = 0;
      if (CFNumberGetValue(v27, kCFNumberLongType, &valuePtr))
      {
        uint64_t v29 = valuePtr;
        if (60 * valuePtr < v10)
        {
          unint64_t v30 = *v9;
          BOOL v31 = os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT);
          uint64_t v13 = 0;
          if (v31)
          {
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = v29;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I Message is older than %ld minutes, not valid anymore", buf, 0xCu);
            uint64_t v13 = 0;
          }
          goto LABEL_35;
        }
LABEL_34:
        uint64_t v13 = 1;
LABEL_35:
        sub_100057D78((const void **)&v36);
LABEL_36:
        sub_100057D78((const void **)&theDict);
        return v13;
      }
    }
    else
    {
      uint64_t valuePtr = 0;
    }
    unint64_t v33 = *v9;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I No Time limit found in validity period dictionary, marking valid", buf, 2u);
    }
    goto LABEL_34;
  }
  uint64_t v12 = *v8;
  uint64_t v13 = 0;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = 24;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Message is older than %ld hours, not valid anymore", buf, 0xCu);
    return 0;
  }
  return v13;
}

void sub_1010CEDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, const void *);
  sub_100057D78((const void **)va);
  sub_100057D78((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_1010CEE10(uint64_t a1)
{
  sub_1010CEE48(a1);

  operator delete();
}

uint64_t sub_1010CEE48(uint64_t a1)
{
  *(void *)a1 = off_101A8B200;
  std::mutex::~mutex((std::mutex *)(a1 + 104));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100368D88(*(void **)(a1 + 72));
  sub_100368D88(*(void **)(a1 + 48));
  CellBroadcastMessageStoreInterface::~CellBroadcastMessageStoreInterface((CellBroadcastMessageStoreInterface *)a1);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 8));
  return a1;
}

void sub_1010CEEF4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1010CEF74(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 48))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010CEFB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010CEFE8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t sub_1010CF018(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1010CF060()
{
}

uint64_t sub_1010CF074(uint64_t a1)
{
  return *(void *)(a1 + 8) + 8;
}

uint64_t sub_1010CF080()
{
  qword_101B130D8 = 0;
  qword_101B130E0 = 0;
  qword_101B130E8 = 0;
  char v0 = operator new(0x18uLL);
  qword_101B130E0 = (uint64_t)(v0 + 3);
  qword_101B130E8 = (uint64_t)(v0 + 3);
  *char v0 = @"CellBroadcast";
  v0[1] = @"DuplicateDetectionParameters";
  v0[2] = @"DuplicationWindowInMinutes";
  qword_101B130D8 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_100367F0C, &qword_101B130D8, (void *)&_mh_execute_header);
  qword_101B130F8 = 0;
  unk_101B13100 = 0;
  qword_101B130F0 = 0;
  uint64_t v1 = operator new(0x18uLL);
  qword_101B130F0 = (uint64_t)v1;
  void *v1 = @"CellBroadcast";
  v1[1] = @"DuplicateDetectionParameters";
  v1[2] = @"PerformIntraSimDuplicateDetection";
  qword_101B130F8 = (uint64_t)(v1 + 3);
  unk_101B13100 = v1 + 3;
  __cxa_atexit((void (*)(void *))sub_100367F0C, &qword_101B130F0, (void *)&_mh_execute_header);
  qword_101B13108 = 0;
  qword_101B13110 = 0;
  unk_101B13118 = 0;
  uint64_t v2 = operator new(0x18uLL);
  qword_101B13110 = (uint64_t)(v2 + 3);
  unk_101B13118 = v2 + 3;
  void *v2 = @"CellBroadcast";
  v2[1] = @"DuplicateDetectionParameters";
  void v2[2] = @"PerformInterSimDuplicateDetection";
  qword_101B13108 = (uint64_t)v2;

  return __cxa_atexit((void (*)(void *))sub_100367F0C, &qword_101B13108, (void *)&_mh_execute_header);
}

void sub_1010CF1A8()
{
}

uint64_t sub_1010CF21C@<X0>(void *a1@<X8>)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = a1 + 1;
  uint64_t result = subscriber::makeSimSlotRange();
  uint64_t v2 = v3;
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t result = v5(*v2);
      if (result) {
        break;
      }
      if (++v2 == v4)
      {
        uint64_t v2 = v4;
        break;
      }
    }
    if (v2 != v4) {
      sub_1010CF1A8();
    }
  }
  return result;
}

void sub_1010CF3EC(_Unwind_Exception *a1)
{
  sub_10005D0E4(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1010CF458()
{
}

void sub_1010CF4C8(TimeHandlerFactoryInterface *this)
{
  *(void *)this = off_101A8B388;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  TimeHandlerFactoryInterface::~TimeHandlerFactoryInterface(this);
}

void sub_1010CF524(TimeHandlerFactoryInterface *this)
{
  *(void *)this = off_101A8B388;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  TimeHandlerFactoryInterface::~TimeHandlerFactoryInterface(this);

  operator delete();
}

void sub_1010CF594()
{
}

void sub_1010CF664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (v10) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010CF6B8(uint64_t a1, void *a2, uint64_t *a3)
{
  BOOL v6 = (void *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v18, kCtLoggingSystemName, "cb.server");
  uint64_t v7 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  uint64_t v8 = dispatch_queue_create("CarrierBundleServer", v7);
  void *v6 = 0;
  v6[1] = 0;
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    int v9 = v8;
    dispatch_retain(v8);
    *(void *)(a1 + 32) = 0;
    dispatch_release(v9);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v16, &v18);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v16);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v16);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v18);
  v17[0] = off_101999E18;
  v17[1] = sub_1010CFAE0;
  void v17[3] = v17;
  *(void *)(a1 + 48) = 0;
  if ((capabilities::ct::supportsGemini(v10) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 48)) {
    operator new();
  }
  sub_10008863C(v17);
  *(void *)a1 = off_101A8B3D0;
  *(void *)(a1 + 56) = *a2;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 64) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *a3;
  *a3 = 0;
  *(void *)(a1 + 72) = v12;
  uint64_t v13 = *(NSObject **)(a1 + 24);
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  (*(void (**)(uint64_t, dispatch_object_t *))(*(void *)v12 + 32))(v12, &object);
  if (object) {
    dispatch_release(object);
  }
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

void sub_1010CF9A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

const char *sub_1010CFAE0(int a1)
{
  uint64_t v1 = "cb.server.?";
  if (a1 == 2) {
    uint64_t v1 = "cb.server.2";
  }
  if (a1 == 1) {
    return "cb.server.1";
  }
  else {
    return v1;
  }
}

void sub_1010CFB0C(void *a1)
{
  *a1 = off_101A8B3D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[19];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[17];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[15];
  if (v4) {
    sub_10004D2C8(v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[13];
  if (v5) {
    sub_10004D2C8(v5);
  }
  BOOL v6 = (std::__shared_weak_count *)a1[11];
  if (v6) {
    sub_10004D2C8(v6);
  }
  uint64_t v7 = a1[9];
  a1[9] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[8];
  if (v8) {
    sub_10004D2C8(v8);
  }
  uint64_t v9 = a1[6];
  a1[6] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 5));
  sub_100087E88(a1 + 1);

  CarrierBundleServerInterface::~CarrierBundleServerInterface((CarrierBundleServerInterface *)a1);
}

void sub_1010CFC1C(void *a1)
{
  sub_1010CFB0C(a1);

  operator delete();
}

void sub_1010CFC54(char *a1@<X0>, void **a2@<X1>, char *a3@<X8>)
{
  uint64_t v34 = 0;
  size_t v35 = 0;
  uint64_t v36 = 0;
  unint64_t v30 = a2;
  BOOL v31 = off_101B0AEB0[0];
  sub_100048BAC((uint64_t)&v30, &object);
  long long __p = 0uLL;
  int v38 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)__p);
  }
  xpc_release(object);
  BOOL v6 = *((void *)a1 + 5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = &v34;
    if (v36 < 0) {
      uint64_t v7 = v34;
    }
    LODWORD(__p) = 136446210;
    *(void *)((char *)&__p + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Received command at the server: %{public}s", (uint8_t *)&__p, 0xCu);
  }
  *(void *)a3 = 0;
  *(void *)a3 = xpc_null_create();
  int v8 = SHIBYTE(v36);
  if (v36 >= 0) {
    size_t v9 = HIBYTE(v36);
  }
  else {
    size_t v9 = v35;
  }
  if (v9 == strlen(off_101B0AEB8[0]))
  {
    int v10 = v36 >= 0 ? &v34 : (void **)v34;
    if (!memcmp(v10, off_101B0AEB8[0], v9))
    {
      char v20 = a1 + 8;
      unint64_t v30 = (void **)a1;
      BOOL v31 = a3;
      *(void *)&long long __p = _NSConcreteStackBlock;
      *((void *)&__p + 1) = 0x40000000;
      int v21 = (char *)sub_1010D1880;
      uint64_t v22 = &unk_101A8B560;
      goto LABEL_75;
    }
  }
  if (v9 == strlen(off_101B0AEC0[0]))
  {
    uint64_t v11 = v8 >= 0 ? &v34 : (void **)v34;
    if (!memcmp(v11, off_101B0AEC0[0], v9))
    {
      char v20 = a1 + 8;
      unint64_t v30 = (void **)a1;
      BOOL v31 = a3;
      *(void *)&long long __p = _NSConcreteStackBlock;
      *((void *)&__p + 1) = 0x40000000;
      int v21 = (char *)sub_1010D2538;
      uint64_t v22 = &unk_101A8B580;
      goto LABEL_75;
    }
  }
  if (v9 == strlen(off_101B0AEC8[0]))
  {
    uint64_t v12 = v8 >= 0 ? &v34 : (void **)v34;
    if (!memcmp(v12, off_101B0AEC8[0], v9))
    {
      char v20 = a1 + 8;
      unint64_t v30 = a2;
      BOOL v31 = a1;
      uint64_t v32 = a3;
      *(void *)&long long __p = _NSConcreteStackBlock;
      *((void *)&__p + 1) = 0x40000000;
      int v21 = (char *)sub_1010D28B8;
      uint64_t v22 = &unk_101A8B5A0;
      goto LABEL_75;
    }
  }
  if (v9 == strlen(off_101B0AED0[0]))
  {
    uint64_t v13 = v8 >= 0 ? &v34 : (void **)v34;
    if (!memcmp(v13, off_101B0AED0[0], v9))
    {
      char v20 = a1 + 8;
      unint64_t v30 = a2;
      BOOL v31 = a1;
      uint64_t v32 = a3;
      *(void *)&long long __p = _NSConcreteStackBlock;
      *((void *)&__p + 1) = 0x40000000;
      int v21 = (char *)sub_1010D362C;
      uint64_t v22 = &unk_101A8B5E0;
      goto LABEL_75;
    }
  }
  if (v9 == strlen(off_101B0AED8[0]))
  {
    uint64_t v14 = v8 >= 0 ? &v34 : (void **)v34;
    if (!memcmp(v14, off_101B0AED8[0], v9))
    {
      char v23 = *a2;
      if (v23) {
        xpc_retain(v23);
      }
      else {
        xpc_null_create();
      }
      uint64_t v26 = (std::__shared_weak_count *)*((void *)a1 + 2);
      if (v26 && std::__shared_weak_count::lock(v26)) {
        operator new();
      }
      sub_100088B9C();
    }
  }
  if (v9 == strlen(off_101B0AEE0[0]))
  {
    uint64_t v15 = v8 >= 0 ? &v34 : (void **)v34;
    if (!memcmp(v15, off_101B0AEE0[0], v9))
    {
      char v20 = a1 + 8;
      unint64_t v30 = (void **)a1;
      *(void *)&long long __p = _NSConcreteStackBlock;
      *((void *)&__p + 1) = 0x40000000;
      int v21 = (char *)sub_1010D3BD8;
      uint64_t v22 = &unk_101A8B600;
      goto LABEL_75;
    }
  }
  if (v9 == strlen(off_101B0AEE8[0]))
  {
    uint64_t v16 = v8 >= 0 ? &v34 : (void **)v34;
    if (!memcmp(v16, off_101B0AEE8[0], v9))
    {
      uint64_t v24 = *a2;
      if (v24) {
        xpc_retain(v24);
      }
      else {
        xpc_null_create();
      }
      CFNumberRef v27 = (std::__shared_weak_count *)*((void *)a1 + 2);
      if (v27 && std::__shared_weak_count::lock(v27)) {
        operator new();
      }
      sub_100088B9C();
    }
  }
  if (v9 == strlen(off_101B0AF38[0]))
  {
    uint64_t v17 = v8 >= 0 ? &v34 : (void **)v34;
    if (!memcmp(v17, off_101B0AF38[0], v9))
    {
      char v20 = a1 + 8;
      unint64_t v30 = (void **)a1;
      *(void *)&long long __p = _NSConcreteStackBlock;
      *((void *)&__p + 1) = 0x40000000;
      int v21 = (char *)sub_1010D6484;
      uint64_t v22 = &unk_101A8B740;
      goto LABEL_75;
    }
  }
  if (v9 == strlen(off_101B0AF08[0]))
  {
    OsLogContext v18 = v8 >= 0 ? &v34 : (void **)v34;
    if (!memcmp(v18, off_101B0AF08[0], v9))
    {
      char v20 = a1 + 8;
      unint64_t v30 = (void **)a1;
      BOOL v31 = a3;
      *(void *)&long long __p = _NSConcreteStackBlock;
      *((void *)&__p + 1) = 0x40000000;
      int v21 = (char *)sub_1010D6568;
      uint64_t v22 = &unk_101A8B760;
LABEL_75:
      int v38 = v21;
      __int16 v39 = v22;
      int v40 = v20;
      int v41 = &v30;
      uint64_t v25 = *((void *)a1 + 3);
      if (*((void *)a1 + 4)) {
        dispatch_async_and_wait(v25, &__p);
      }
      else {
        dispatch_sync(v25, &__p);
      }
      goto LABEL_89;
    }
  }
  if (v9 == strlen(off_101B0AF20[0]) && (v8 >= 0 ? (unsigned int v19 = &v34) : (unsigned int v19 = v34), !memcmp(v19, off_101B0AF20[0], v9)))
  {
    *(void *)&long long __p = a2;
    *((void *)&__p + 1) = a1;
    int v38 = a3;
    sub_1010D0548((uint64_t)(a1 + 8), (uint64_t)&__p);
  }
  else if (sub_1002E6B08((const void **)&v34, off_101B0AF28[0]))
  {
    *(void *)&long long __p = a2;
    *((void *)&__p + 1) = a1;
    int v38 = a3;
    sub_1010D05C4((uint64_t)(a1 + 8), (uint64_t)&__p);
  }
  else if (sub_1002E6B08((const void **)&v34, off_101B0AF30[0]))
  {
    *(void *)&long long __p = a1;
    sub_1010D0640((uint64_t)(a1 + 8), (uint64_t)&__p);
  }
  else if (sub_1002E6B08((const void **)&v34, off_101B0AF10[0]))
  {
    *(void *)&long long __p = a1;
    *((void *)&__p + 1) = a3;
    sub_1010D06BC((uint64_t)(a1 + 8), (uint64_t)&__p);
  }
  else
  {
    if (sub_1002E6B08((const void **)&v34, off_101B0AF18[0]))
    {
      *(void *)&long long __p = a1;
      sub_1010D0738((uint64_t)(a1 + 8));
    }
    CFTypeID v28 = *((void *)a1 + 5);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = &v34;
      if (v36 < 0) {
        uint64_t v29 = v34;
      }
      LODWORD(__p) = 136446210;
      *(void *)((char *)&__p + 4) = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#N Unknown command: %{public}s", (uint8_t *)&__p, 0xCu);
    }
  }
LABEL_89:
  if (SHIBYTE(v36) < 0) {
    operator delete(v34);
  }
}

void sub_1010D04DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010D0548(uint64_t a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  _OWORD v4[2] = sub_1010D6700;
  v4[3] = &unk_101A8B780;
  void v4[4] = a1;
  v4[5] = a2;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, v4);
  }
  else {
    dispatch_sync(v2, v4);
  }
}

void sub_1010D05C4(uint64_t a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  _OWORD v4[2] = sub_1010D6BAC;
  v4[3] = &unk_101A8B7A0;
  void v4[4] = a1;
  v4[5] = a2;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, v4);
  }
  else {
    dispatch_sync(v2, v4);
  }
}

void sub_1010D0640(uint64_t a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  _OWORD v4[2] = sub_1010D70E4;
  v4[3] = &unk_101A8B7C0;
  void v4[4] = a1;
  v4[5] = a2;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, v4);
  }
  else {
    dispatch_sync(v2, v4);
  }
}

void sub_1010D06BC(uint64_t a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  _OWORD v4[2] = sub_1010D7114;
  v4[3] = &unk_101A8B7E0;
  void v4[4] = a1;
  v4[5] = a2;
  uint64_t v3 = a1 + 16;
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, v4);
  }
  else {
    dispatch_sync(v2, v4);
  }
}

void sub_1010D0738(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010D0828(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010D090C(uint64_t a1, int a2)
{
  if (a2)
  {
    memset(v18, 0, sizeof(v18));
    uint64_t v3 = *(NSObject **)(a1 + 40);
    uint64_t v4 = os_signpost_id_generate(v3);
    if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v5 = *(NSObject **)(a1 + 40);
      if (os_signpost_enabled(v5))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "CarrierBundleUpdate", (const char *)&unk_1017DEDA7, buf, 2u);
      }
    }
    *(void *)long long buf = off_101A8B810;
    char v20 = buf;
    uint64_t v16 = v4;
    uint64_t v17 = os_retain(v3);
    sub_1000336E8((uint64_t)v18, (uint64_t)buf);
    sub_100033A10(buf);
    sub_100058DB0(&__p, "CarrierBundleServer");
    v14[0] = v16;
    v14[1] = (uint64_t)v17;
    sub_1000336E8((uint64_t)&v15, (uint64_t)v18);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    sub_100033AF4(v18);
    Registry::createXpcJetsamAssertion();
    long long v6 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 136);
    *(_OWORD *)(a1 + 128) = v6;
    if (v7)
    {
      sub_10004D2C8(v7);
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    sub_1000339DC(v14);
    if (v13 < 0) {
      operator delete(__p);
    }
    sub_1000339DC(&v16);
  }
  else
  {
    int v8 = *(std::__shared_weak_count **)(a1 + 136);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    if (v8) {
      sub_10004D2C8(v8);
    }
    size_t v9 = *(std::__shared_weak_count **)(a1 + 104);
    *(void *)(a1 + 96) = 0;
    *(void *)(a1 + 104) = 0;
    if (v9) {
      sub_10004D2C8(v9);
    }
    int v10 = *(std::__shared_weak_count **)(a1 + 120);
    *(void *)(a1 + 112) = 0;
    *(void *)(a1 + 120) = 0;
    if (v10) {
      sub_10004D2C8(v10);
    }
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 152);
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    if (v11)
    {
      sub_10004D2C8(v11);
    }
  }
}

void sub_1010D0B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000339DC(&a22);
  _Unwind_Resume(a1);
}

void sub_1010D0B7C(void *a1, void **a2, uint64_t a3)
{
  uint64_t v29 = 0;
  size_t v30 = 0;
  uint64_t v31 = 0;
  v28[0] = a2;
  v28[1] = off_101B0AEB0[0];
  sub_100048BAC((uint64_t)v28, &object);
  __p[0] = 0;
  __p[1] = 0;
  xpc_object_t v34 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v34) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(object);
  long long v6 = a1[5];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = &v29;
    if (v31 < 0) {
      uint64_t v7 = v29;
    }
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Received command at the server: %{public}s", (uint8_t *)__p, 0xCu);
  }
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v8) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v8);
      xpc_object_t v9 = v8;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v8 = 0;
  }
  xpc_release(v8);
  int v10 = SHIBYTE(v31);
  if (v31 >= 0) {
    size_t v11 = HIBYTE(v31);
  }
  else {
    size_t v11 = v30;
  }
  if (v11 == strlen(off_101B0AEF0[0]))
  {
    uint64_t v12 = v31 >= 0 ? &v29 : (void **)v29;
    if (!memcmp(v12, off_101B0AEF0[0], v11))
    {
      OsLogContext v18 = *a2;
      __p[0] = a1;
      __p[1] = v18;
      if (v18) {
        xpc_retain(v18);
      }
      else {
        __p[1] = xpc_null_create();
      }
      xpc_object_t v34 = v9;
      if (v9) {
        xpc_retain(v9);
      }
      else {
        xpc_object_t v34 = xpc_null_create();
      }
      sub_100661870((uint64_t)v35, a3);
      char v23 = (std::__shared_weak_count *)a1[2];
      if (v23 && std::__shared_weak_count::lock(v23)) {
        operator new();
      }
      sub_100088B9C();
    }
  }
  if (v11 == strlen(off_101B0AF00[0]))
  {
    char v13 = v10 >= 0 ? &v29 : (void **)v29;
    if (!memcmp(v13, off_101B0AF00[0], v11))
    {
      char v20 = *a2;
      __p[0] = a1;
      __p[1] = v20;
      if (v20) {
        xpc_retain(v20);
      }
      else {
        __p[1] = xpc_null_create();
      }
      xpc_object_t v34 = v9;
      if (v9) {
        xpc_retain(v9);
      }
      else {
        xpc_object_t v34 = xpc_null_create();
      }
      sub_100661870((uint64_t)v35, a3);
      uint64_t v24 = (std::__shared_weak_count *)a1[2];
      if (v24 && std::__shared_weak_count::lock(v24)) {
        operator new();
      }
      sub_100088B9C();
    }
  }
  if (v11 == strlen(off_101B0B028[0]))
  {
    uint64_t v14 = v10 >= 0 ? &v29 : (void **)v29;
    if (!memcmp(v14, off_101B0B028[0], v11))
    {
      int v21 = *a2;
      __p[0] = a1;
      __p[1] = v21;
      if (v21) {
        xpc_retain(v21);
      }
      else {
        __p[1] = xpc_null_create();
      }
      xpc_object_t v34 = v9;
      if (v9) {
        xpc_retain(v9);
      }
      else {
        xpc_object_t v34 = xpc_null_create();
      }
      sub_100661870((uint64_t)v35, a3);
      uint64_t v25 = (std::__shared_weak_count *)a1[2];
      if (v25 && std::__shared_weak_count::lock(v25)) {
        operator new();
      }
      sub_100088B9C();
    }
  }
  if (v11 == strlen(off_101B0AEF8[0]))
  {
    uint64_t v15 = v10 >= 0 ? &v29 : (void **)v29;
    if (!memcmp(v15, off_101B0AEF8[0], v11))
    {
      uint64_t v22 = *a2;
      __p[0] = a1;
      __p[1] = v22;
      if (v22) {
        xpc_retain(v22);
      }
      else {
        __p[1] = xpc_null_create();
      }
      xpc_object_t v34 = v9;
      if (v9) {
        xpc_retain(v9);
      }
      else {
        xpc_object_t v34 = xpc_null_create();
      }
      sub_100661870((uint64_t)v35, a3);
      uint64_t v26 = (std::__shared_weak_count *)a1[2];
      if (v26 && std::__shared_weak_count::lock(v26)) {
        operator new();
      }
      sub_100088B9C();
    }
  }
  uint64_t v16 = a1[5];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = v29;
    if (v10 >= 0) {
      uint64_t v17 = &v29;
    }
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#N Unknown command: %{public}s", (uint8_t *)__p, 0xCu);
  }
  xpc_object_t v27 = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t v27 = xpc_null_create();
  }
  uint64_t v19 = *(void *)(a3 + 24);
  if (!v19) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v19 + 48))(v19, &v27);
  xpc_release(v27);
  xpc_object_t v27 = 0;
  xpc_release(v9);
  if (SHIBYTE(v31) < 0) {
    operator delete(v29);
  }
}

void sub_1010D13CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t a19, void *a20,xpc_object_t a21,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1010D1570(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_1010DA5FC;
  void v5[3] = &unk_101A8BB00;
  v5[4] = a1 + 8;
  v5[5] = &v4;
  long long v6 = v5;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    *a2 = 0;
    a2[1] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    xpc_object_t v9 = sub_1010DA688;
    int v10 = &unk_101A8BB40;
    size_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    xpc_object_t v9 = sub_1010DA620;
    int v10 = &unk_101A8BB20;
    size_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_sync(v2, &block);
  }
}

void sub_1010D168C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1010D1758(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1010D1830);
  __cxa_rethrow();
}

void sub_1010D1780(_Unwind_Exception *a1)
{
}

void sub_1010D1798(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010D17D0(uint64_t a1)
{
}

uint64_t sub_1010D17EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1010D1830(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1010D1860()
{
}

uint64_t sub_1010D1874(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

uint64_t sub_1010D1880(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 40);
  uint64_t v2 = *v1;
  uint64_t v40 = 0;
  memset(v39, 0, sizeof(v39));
  sub_1007DE21C((uint64_t)v39, v2 + 56);
  uint64_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  sub_1007DE21C((uint64_t)v37, v2 + 56);
  uint64_t v36 = 0;
  memset(v35, 0, sizeof(v35));
  sub_1007DE21C((uint64_t)v35, v2 + 56);
  uint64_t v34 = 0;
  memset(v33, 0, sizeof(v33));
  sub_1007DE21C((uint64_t)v33, v2 + 56);
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  sub_1007DE21C((uint64_t)v31, v2 + 56);
  uint64_t v30 = 0;
  memset(v29, 0, sizeof(v29));
  sub_1007DE21C((uint64_t)v29, v2 + 56);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing the bundles", buf, 2u);
  }
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(v2 + 80) + 16))(buf);
  sub_1007DE538((uint64_t)v39, (uint64_t)buf);
  sub_1007DE538((uint64_t)v37, (uint64_t)v24);
  sub_1007DE538((uint64_t)v35, (uint64_t)v25);
  sub_1007DE538((uint64_t)v33, (uint64_t)v26);
  sub_1007DE538((uint64_t)v31, (uint64_t)v27);
  sub_1007DE538((uint64_t)v29, (uint64_t)v28);
  sub_1007DE5C8((uint64_t)v28);
  sub_1007DE5C8((uint64_t)v27);
  sub_1007DE5C8((uint64_t)v26);
  sub_1007DE5C8((uint64_t)v25);
  sub_1007DE5C8((uint64_t)v24);
  sub_1007DE5C8((uint64_t)buf);
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  long long v6 = (void **)v1[1];
  xpc_object_t v7 = xpc_null_create();
  uint64_t v8 = *v6;
  void *v6 = v5;
  xpc_release(v8);
  xpc_release(v7);
  sub_1010D1E8C(&v20, (uint64_t)v39, 1);
  *(void *)long long buf = v1[1];
  char v23 = off_101B0AF78[0];
  sub_10014E03C((uint64_t)buf, &v20, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v20);
  xpc_object_t v20 = 0;
  sub_1010D1E8C(&v18, (uint64_t)v37, 1);
  *(void *)long long buf = v1[1];
  char v23 = off_101B0AF80[0];
  sub_10014E03C((uint64_t)buf, &v18, &v19);
  xpc_release(v19);
  xpc_object_t v19 = 0;
  xpc_release(v18);
  xpc_object_t v18 = 0;
  sub_1010D1E8C(&v16, (uint64_t)v35, 1);
  *(void *)long long buf = v1[1];
  char v23 = off_101B0AF88[0];
  sub_10014E03C((uint64_t)buf, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  sub_1010D1E8C(&v14, (uint64_t)v33, 1);
  *(void *)long long buf = v1[1];
  char v23 = off_101B0AFA0[0];
  sub_10014E03C((uint64_t)buf, &v14, &v15);
  xpc_release(v15);
  xpc_object_t v15 = 0;
  xpc_release(v14);
  xpc_object_t v14 = 0;
  sub_1010D1E8C(&v12, (uint64_t)v31, 1);
  *(void *)long long buf = v1[1];
  char v23 = off_101B0AF90[0];
  sub_10014E03C((uint64_t)buf, &v12, &v13);
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_release(v12);
  xpc_object_t v12 = 0;
  sub_1010D1E8C(&v10, (uint64_t)v29, 1);
  *(void *)long long buf = v1[1];
  char v23 = off_101B0AF98[0];
  sub_10014E03C((uint64_t)buf, &v10, &v11);
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  sub_1007DE5C8((uint64_t)v29);
  sub_1007DE5C8((uint64_t)v31);
  sub_1007DE5C8((uint64_t)v33);
  sub_1007DE5C8((uint64_t)v35);
  sub_1007DE5C8((uint64_t)v37);
  return sub_1007DE5C8((uint64_t)v39);
}

void sub_1010D1DE8(_Unwind_Exception *a1)
{
  sub_1007DE5C8((uint64_t)&STACK[0x4B0]);
  sub_1007DE5C8((uint64_t)&STACK[0x570]);
  sub_1007DE5C8((uint64_t)&STACK[0x630]);
  sub_1007DE5C8((uint64_t)&STACK[0x6F0]);
  sub_1007DE5C8((uint64_t)&STACK[0x7B0]);
  sub_1007DE5C8(v1 - 256);
  _Unwind_Resume(a1);
}

void sub_1010D1E8C(void *a1, uint64_t a2, int a3)
{
  *a1 = 0;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    *a1 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    *a1 = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v7) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v7);
    goto LABEL_9;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_8:
  *a1 = v8;
LABEL_9:
  xpc_release(v7);
  sub_1007DF5E4(a2, &__dst);
  if (v39 >= 0) {
    p_dst = (const char *)&__dst;
  }
  else {
    p_dst = (const char *)__dst;
  }
  xpc_object_t v36 = xpc_string_create(p_dst);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  __p[0] = a1;
  __p[1] = off_101B0AFC8[0];
  sub_100035E70((uint64_t)__p, &v36, &v37);
  xpc_release(v37);
  xpc_object_t v37 = 0;
  xpc_release(v36);
  xpc_object_t v36 = 0;
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)__dst);
  }
  sub_1007DF7B0(a2, &v31);
  long long __dst = 0uLL;
  uint64_t v39 = 0;
  ctu::cf::assign();
  *(_OWORD *)long long __p = __dst;
  uint64_t v33 = v39;
  if (v39 >= 0) {
    xpc_object_t v10 = __p;
  }
  else {
    xpc_object_t v10 = (void **)__p[0];
  }
  xpc_object_t v34 = xpc_string_create((const char *)v10);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  *(void *)&long long __dst = a1;
  *((char **)&__dst + 1) = off_101B0AFD0[0];
  sub_100035E70((uint64_t)&__dst, &v34, &v35);
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_release(v34);
  xpc_object_t v34 = 0;
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  sub_1000558F4(&v31);
  if (*(char *)(a2 + 63) < 0)
  {
    sub_10004FC84(&__dst, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long __dst = *(_OWORD *)(a2 + 40);
    uint64_t v39 = *(void *)(a2 + 56);
  }
  if (v39 >= 0) {
    xpc_object_t v11 = (const char *)&__dst;
  }
  else {
    xpc_object_t v11 = (const char *)__dst;
  }
  xpc_object_t v29 = xpc_string_create(v11);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  __p[0] = a1;
  __p[1] = off_101B0AFD8[0];
  sub_100035E70((uint64_t)__p, &v29, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v29);
  xpc_object_t v29 = 0;
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)__dst);
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_10004FC84(&__dst, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long __dst = *(_OWORD *)(a2 + 64);
    uint64_t v39 = *(void *)(a2 + 80);
  }
  if (v39 >= 0) {
    xpc_object_t v12 = (const char *)&__dst;
  }
  else {
    xpc_object_t v12 = (const char *)__dst;
  }
  xpc_object_t v27 = xpc_string_create(v12);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  __p[0] = a1;
  __p[1] = off_101B0AFE0[0];
  sub_100035E70((uint64_t)__p, &v27, &v28);
  xpc_release(v28);
  xpc_object_t v28 = 0;
  xpc_release(v27);
  xpc_object_t v27 = 0;
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)__dst);
  }
  sub_1007DF670(a2, &v31);
  long long __dst = 0uLL;
  uint64_t v39 = 0;
  ctu::cf::assign();
  *(_OWORD *)long long __p = __dst;
  uint64_t v33 = v39;
  if (v39 >= 0) {
    xpc_object_t v13 = __p;
  }
  else {
    xpc_object_t v13 = (void **)__p[0];
  }
  xpc_object_t v25 = xpc_string_create((const char *)v13);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  *(void *)&long long __dst = a1;
  *((char **)&__dst + 1) = off_101B0AFE8[0];
  sub_100035E70((uint64_t)&__dst, &v25, &v26);
  xpc_release(v26);
  xpc_object_t v26 = 0;
  xpc_release(v25);
  xpc_object_t v25 = 0;
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  sub_1000558F4(&v31);
  if (a3)
  {
    if (*(char *)(a2 + 111) < 0)
    {
      sub_10004FC84(&__dst, *(void **)(a2 + 88), *(void *)(a2 + 96));
    }
    else
    {
      long long __dst = *(_OWORD *)(a2 + 88);
      uint64_t v39 = *(void *)(a2 + 104);
    }
    if (v39 >= 0) {
      xpc_object_t v14 = (const char *)&__dst;
    }
    else {
      xpc_object_t v14 = (const char *)__dst;
    }
    xpc_object_t v23 = xpc_string_create(v14);
    if (!v23) {
      xpc_object_t v23 = xpc_null_create();
    }
    __p[0] = a1;
    __p[1] = off_101B0AFF0[0];
    sub_100035E70((uint64_t)__p, &v23, &v24);
    xpc_release(v24);
    xpc_object_t v24 = 0;
    xpc_release(v23);
    xpc_object_t v23 = 0;
    if (SHIBYTE(v39) < 0) {
      operator delete((void *)__dst);
    }
    if (*(char *)(a2 + 135) < 0)
    {
      sub_10004FC84(&__dst, *(void **)(a2 + 112), *(void *)(a2 + 120));
    }
    else
    {
      long long __dst = *(_OWORD *)(a2 + 112);
      uint64_t v39 = *(void *)(a2 + 128);
    }
    if (v39 >= 0) {
      xpc_object_t v15 = (const char *)&__dst;
    }
    else {
      xpc_object_t v15 = (const char *)__dst;
    }
    xpc_object_t v21 = xpc_string_create(v15);
    if (!v21) {
      xpc_object_t v21 = xpc_null_create();
    }
    __p[0] = a1;
    __p[1] = off_101B0AFF8[0];
    sub_100035E70((uint64_t)__p, &v21, &v22);
    xpc_release(v22);
    xpc_object_t v22 = 0;
    xpc_release(v21);
    xpc_object_t v21 = 0;
    if (SHIBYTE(v39) < 0) {
      operator delete((void *)__dst);
    }
    if (*(char *)(a2 + 159) < 0)
    {
      sub_10004FC84(&__dst, *(void **)(a2 + 136), *(void *)(a2 + 144));
    }
    else
    {
      long long __dst = *(_OWORD *)(a2 + 136);
      uint64_t v39 = *(void *)(a2 + 152);
    }
    if (v39 >= 0) {
      xpc_object_t v16 = (const char *)&__dst;
    }
    else {
      xpc_object_t v16 = (const char *)__dst;
    }
    xpc_object_t v19 = xpc_string_create(v16);
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
    __p[0] = a1;
    __p[1] = off_101B0B000[0];
    sub_100035E70((uint64_t)__p, &v19, &v20);
    xpc_release(v20);
    xpc_object_t v20 = 0;
    xpc_release(v19);
    xpc_object_t v19 = 0;
    if (SHIBYTE(v39) < 0) {
      operator delete((void *)__dst);
    }
  }
  xpc_object_t v17 = xpc_int64_create(*(char *)(a2 + 164));
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  *(void *)&long long __dst = a1;
  *((char **)&__dst + 1) = off_101B0B008[0];
  sub_100035E70((uint64_t)&__dst, &v17, &v18);
  xpc_release(v18);
  xpc_object_t v18 = 0;
  xpc_release(v17);
}

void sub_1010D2448(_Unwind_Exception *a1)
{
  sub_10017143C(v1);
  _Unwind_Resume(a1);
}

void sub_1010D2538(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *v1;
  uint64_t v3 = *(NSObject **)(*v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Initializing the country bundles", buf, 2u);
  }
  *(void *)long long buf = 0;
  xpc_object_t v26 = 0;
  uint64_t v27 = 0;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(v2 + 80) + 104))(buf);
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  xpc_object_t v6 = (void **)v1[1];
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v8 = *v6;
  void *v6 = v5;
  xpc_release(v8);
  xpc_release(v7);
  sub_100058DB0(__p, off_101B0AFA8[0]);
  uint64_t v9 = sub_10005DDEC((uint64_t)buf, __p);
  sub_1010D1E8C(&v23, v9, 1);
  uint64_t v19 = v1[1];
  xpc_object_t v20 = off_101B0AFA8[0];
  sub_10014E03C((uint64_t)&v19, &v23, &v24);
  xpc_release(v24);
  xpc_object_t v24 = 0;
  xpc_release(v23);
  xpc_object_t v23 = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, off_101B0AFB8[0]);
  uint64_t v10 = sub_10005DDEC((uint64_t)buf, __p);
  sub_1010D1E8C(&v17, v10, 1);
  uint64_t v19 = v1[1];
  xpc_object_t v20 = off_101B0AFB8[0];
  sub_10014E03C((uint64_t)&v19, &v17, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v17);
  xpc_object_t v17 = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, off_101B0AFB0[0]);
  uint64_t v11 = sub_10005DDEC((uint64_t)buf, __p);
  sub_1010D1E8C(&v15, v11, 1);
  uint64_t v19 = v1[1];
  xpc_object_t v20 = off_101B0AFB0[0];
  sub_10014E03C((uint64_t)&v19, &v15, &v16);
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_release(v15);
  xpc_object_t v15 = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, off_101B0AFC0[0]);
  uint64_t v12 = sub_10005DDEC((uint64_t)buf, __p);
  sub_1010D1E8C(&v13, v12, 1);
  uint64_t v19 = v1[1];
  xpc_object_t v20 = off_101B0AFC0[0];
  sub_10014E03C((uint64_t)&v19, &v13, &v14);
  xpc_release(v14);
  xpc_object_t v14 = 0;
  xpc_release(v13);
  xpc_object_t v13 = 0;
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  sub_1006B1974((uint64_t)buf, v26);
}

void sub_1010D2840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_1006B1974(v23 - 64, *(void **)(v23 - 56));
  _Unwind_Resume(a1);
}

void sub_1010D28B8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = v1[1];
  *(void *)long long buf = *v1;
  v24[0] = off_101B0AF70[0];
  sub_100048BAC((uint64_t)buf, object);
  unsigned __int8 v4 = xpc::dyn_cast_or_default((xpc *)object, 0, v3);
  xpc_release(object[0]);
  if (v4)
  {
    xpc_object_t v39 = 0;
    *(void *)long long buf = *v1;
    v24[0] = off_101B0AF40[0];
    sub_10000CB28((uint64_t)buf, &v39);
    *(void *)long long buf = *v1;
    v24[0] = off_101B0AF50[0];
    sub_100048BAC((uint64_t)buf, object);
    uint64_t v6 = xpc::dyn_cast_or_default((xpc *)object, 0, v5);
    xpc_release(object[0]);
    xpc_object_t v7 = (os_log_t *)(v2 + 40);
    if (v4 <= 6u && ((1 << v4) & 0x66) != 0 && (v6 - 1) < 2) {
      xpc_object_t v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 48) + 16))(*(void *)(v2 + 48), v6);
    }
    xpc_object_t v8 = v39;
    uint64_t v38 = v39;
    if (v39)
    {
      xpc_retain(v39);
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
      uint64_t v38 = v8;
    }
    sub_1010D2DB0(v7, v4, (uint64_t)"Matching request", &v38);
    xpc_release(v8);
    xpc_object_t v37 = 0;
    uint64_t v38 = 0;
    object[0] = v39;
    if (v39) {
      xpc_retain(v39);
    }
    else {
      object[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)buf, (xpc *)object, v10);
    sub_10004EFE4(&v37, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    xpc_release(object[0]);
    *(void *)long long buf = *v1;
    v24[0] = off_101B0AF48[0];
    sub_100048BAC((uint64_t)buf, object);
    int v12 = xpc::dyn_cast_or_default((xpc *)object, 0, v11);
    xpc_release(object[0]);
    uint64_t v36 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)xpc_object_t object = 0u;
    sub_1007DE21C((uint64_t)object, v2 + 56);
    uint64_t v13 = *(void *)(v2 + 80);
    char v22 = v37;
    if (v37) {
      CFRetain(v37);
    }
    int v21 = v12;
    (*(void (**)(uint8_t *__return_ptr, uint64_t, void, const void **, int *, uint64_t))(*(void *)v13 + 24))(buf, v13, v4, &v22, &v21, v6);
    int64_t v14 = (char)buf[0];
    sub_1007DE538((uint64_t)object, (uint64_t)v24);
    sub_1007DE5C8((uint64_t)v24);
    sub_100057D78(&v22);
    sub_1010D1E8C(buf, (uint64_t)object, 1);
    xpc_object_t v15 = (void **)v1[2];
    xpc_object_t v16 = *(xpc_object_t *)buf;
    *(void *)long long buf = xpc_null_create();
    xpc_object_t v17 = *v15;
    *xpc_object_t v15 = v16;
    xpc_release(v17);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v19 = xpc_int64_create(v14);
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
    *(void *)long long buf = v1[2];
    v24[0] = off_101B0B010[0];
    sub_100035E70((uint64_t)buf, &v19, &v20);
    xpc_release(v20);
    xpc_object_t v20 = 0;
    xpc_release(v19);
    xpc_object_t v19 = 0;
    xpc_object_t v18 = *(xpc_object_t *)v1[2];
    *(void *)long long buf = v18;
    if (v18)
    {
      xpc_retain(v18);
    }
    else
    {
      xpc_object_t v18 = xpc_null_create();
      *(void *)long long buf = v18;
    }
    sub_1010D2DB0(v7, v4, (uint64_t)"Matching response", (void **)buf);
    xpc_release(v18);
    *(void *)long long buf = 0;
    sub_1007DE5C8((uint64_t)object);
    sub_100057D78(&v37);
    xpc_release(v39);
  }
  else
  {
    uint64_t v9 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#N Unknown bundle type in the match bundle request", buf, 2u);
    }
  }
}

void sub_1010D2C7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,xpc_object_t object)
{
  xpc_release(*(xpc_object_t *)(v37 - 72));
  _Unwind_Resume(a1);
}

void sub_1010D2D98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,xpc_object_t object)
{
}

BOOL sub_1010D2DB0(os_log_t *a1, uint64_t a2, uint64_t a3, void **a4)
{
  xpc_object_t v7 = *a1;
  if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136446466;
    uint64_t v12 = a3;
    __int16 v13 = 2080;
    uint64_t v14 = asString();
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %{public}s %s bundle", buf, 0x16u);
  }
  xpc_object_t v8 = *a4;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 0x40000000;
  applier[2] = sub_1010D2ED0;
  applier[3] = &unk_101A8B5C0;
  applier[4] = a1;
  return xpc_dictionary_apply(v8, applier);
}

uint64_t sub_1010D2ED0(uint64_t a1, char *string, void *a3)
{
  CFTypeRef cf = 0;
  *(void *)xpc_object_t object = xpc_string_create(string);
  if (!*(void *)object) {
    *(void *)xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&__p, (xpc *)object, v6);
  sub_100056248(&cf, (CFTypeRef *)&__p);
  sub_1000577C4((const void **)&__p);
  xpc_release(*(xpc_object_t *)object);
  CFTypeRef v17 = cf;
  if (cf) {
    CFRetain(cf);
  }
  BOOL v7 = sub_1010D3384(&v17);
  sub_1000558F4(&v17);
  xpc_type_t type = xpc_get_type(a3);
  uint64_t v9 = **(NSObject ***)(a1 + 32);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    if (v7)
    {
      if (!v10) {
        goto LABEL_50;
      }
      xpc_object_t v16 = a3;
      if (a3) {
        xpc_retain(a3);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      long long __p = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v21) < 0) {
        operator delete(__p);
      }
      __int16 v13 = object;
      if (v25 < 0) {
        __int16 v13 = *(unsigned char **)object;
      }
      *(_DWORD *)long long v26 = 136446466;
      *(void *)&uint8_t v26[4] = string;
      __int16 v27 = 2082;
      long long v28 = v13;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I   %{public}s = %{public}s", v26, 0x16u);
      if (v25 < 0) {
        operator delete(*(void **)object);
      }
    }
    else
    {
      if (!v10) {
        goto LABEL_50;
      }
      xpc_object_t v16 = a3;
      if (a3) {
        xpc_retain(a3);
      }
      else {
        xpc_object_t v16 = xpc_null_create();
      }
      long long __p = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v21) < 0) {
        operator delete(__p);
      }
      uint64_t v14 = object;
      if (v25 < 0) {
        uint64_t v14 = *(unsigned char **)object;
      }
      *(_DWORD *)long long v26 = 136446466;
      *(void *)&uint8_t v26[4] = string;
      __int16 v27 = 2080;
      long long v28 = v14;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I   %{public}s = %s", v26, 0x16u);
      if (v25 < 0) {
        operator delete(*(void **)object);
      }
    }
    xpc_release(v16);
    goto LABEL_50;
  }
  if (v7)
  {
    if (v10)
    {
      *(void *)long long v26 = a3;
      if (a3) {
        xpc_retain(a3);
      }
      else {
        *(void *)long long v26 = xpc_null_create();
      }
      xpc::object::to_string((uint64_t *)&__p, (xpc::object *)v26);
      if (v21 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)xpc_object_t object = 136446466;
      *(void *)&object[4] = string;
      __int16 v23 = 2082;
      xpc_object_t v24 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I   %{public}s = %{public}s", object, 0x16u);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p);
      }
LABEL_26:
      xpc_release(*(xpc_object_t *)v26);
    }
  }
  else if (v10)
  {
    *(void *)long long v26 = a3;
    if (a3) {
      xpc_retain(a3);
    }
    else {
      *(void *)long long v26 = xpc_null_create();
    }
    xpc::object::to_string((uint64_t *)&__p, (xpc::object *)v26);
    if (v21 >= 0) {
      uint64_t v12 = &__p;
    }
    else {
      uint64_t v12 = __p;
    }
    *(_DWORD *)xpc_object_t object = 136446466;
    *(void *)&object[4] = string;
    __int16 v23 = 2080;
    xpc_object_t v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I   %{public}s = %s", object, 0x16u);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p);
    }
    goto LABEL_26;
  }
LABEL_50:
  sub_1000558F4(&cf);
  return 1;
}

void sub_1010D328C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t a21,uint64_t a22,uint64_t a23,uint64_t a24,xpc_object_t a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

BOOL sub_1010D3384(const void **a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  unint64_t v4 = qword_101B13EB8;
  v25[0] = qword_101B13EB8;
  v25[1] = @"GID1";
  v25[2] = @"GID2";
  v25[3] = @"MCC";
  uint8_t v25[4] = @"MNC";
  void v25[5] = qword_101B13EC0;
  v25[6] = qword_101B13EC8;
  v25[7] = @"kNameOfBundle";
  v25[8] = @"kMatchedPath";
  v25[9] = @"kCarrierFilePathName";
  __int16 v23 = 0;
  uint64_t v24 = 0;
  unsigned int v5 = &v23;
  char v22 = &v23;
  while (1)
  {
    uint64_t v6 = &v23;
    if (v5 == &v23) {
      goto LABEL_8;
    }
    BOOL v7 = v2;
    xpc_object_t v8 = &v23;
    if (v2)
    {
      do
      {
        uint64_t v6 = (uint64_t **)v7;
        BOOL v7 = (uint64_t *)v7[1];
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v6 = (uint64_t **)v8[2];
        BOOL v9 = *v6 == (uint64_t *)v8;
        xpc_object_t v8 = v6;
      }
      while (v9);
    }
    if ((unint64_t)v6[4] < v4)
    {
LABEL_8:
      if (v2) {
        BOOL v10 = v6;
      }
      else {
        BOOL v10 = &v23;
      }
      if (v2)
      {
        unsigned int v11 = v6 + 1;
      }
      else
      {
        uint64_t v6 = (uint64_t **)&v22;
        unsigned int v11 = &v23;
      }
      if (v6[1]) {
        goto LABEL_27;
      }
LABEL_24:
      uint64_t v14 = (uint64_t *)operator new(0x28uLL);
      v14[4] = v4;
      *uint64_t v14 = 0;
      v14[1] = 0;
      uint64_t v14[2] = (uint64_t)v10;
      *unsigned int v11 = v14;
      if (*v22)
      {
        char v22 = (uint64_t **)*v22;
        uint64_t v14 = *v11;
      }
      sub_100046C90(v23, v14);
      ++v24;
      goto LABEL_27;
    }
    unsigned int v11 = &v23;
    BOOL v10 = &v23;
    if (!v2) {
      goto LABEL_24;
    }
    uint64_t v12 = v2;
    while (1)
    {
      while (1)
      {
        BOOL v10 = (uint64_t **)v12;
        unint64_t v13 = v12[4];
        if (v13 <= v4) {
          break;
        }
        uint64_t v12 = *v10;
        unsigned int v11 = v10;
        if (!*v10) {
          goto LABEL_24;
        }
      }
      if (v13 >= v4) {
        break;
      }
      uint64_t v12 = v10[1];
      if (!v12)
      {
        unsigned int v11 = v10 + 1;
        goto LABEL_24;
      }
    }
LABEL_27:
    if (++v3 == 10) {
      break;
    }
    unsigned int v5 = v22;
    uint64_t v2 = v23;
    unint64_t v4 = v25[v3];
  }
  xpc_object_t v15 = v22;
  sub_100083DA4(&cf2, a1);
  if (v15 == &v23)
  {
    BOOL v17 = 1;
  }
  else
  {
    do
    {
      int v16 = CFEqual(v15[4], cf2);
      BOOL v17 = v16 == 0;
      if (v16) {
        break;
      }
      xpc_object_t v18 = v15[1];
      if (v18)
      {
        do
        {
          xpc_object_t v19 = (uint64_t **)v18;
          xpc_object_t v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          xpc_object_t v19 = (uint64_t **)v15[2];
          BOOL v9 = *v19 == (uint64_t *)v15;
          xpc_object_t v15 = v19;
        }
        while (!v9);
      }
      xpc_object_t v15 = v19;
    }
    while (v19 != &v23);
  }
  sub_1000558F4(&cf2);
  sub_10005D144(v23);
  return v17;
}

void sub_1010D3604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, void *a12)
{
}

void sub_1010D362C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = v1[1];
  *(void *)long long buf = *v1;
  v16[0] = off_101B0AF70[0];
  sub_100048BAC((uint64_t)buf, object);
  unsigned __int8 v4 = xpc::dyn_cast_or_default((xpc *)object, 0, v3);
  xpc_release(*(xpc_object_t *)&object[0]);
  if (v4)
  {
    xpc_object_t v21 = 0;
    *(void *)long long buf = *v1;
    v16[0] = off_101B0AF40[0];
    sub_10000CB28((uint64_t)buf, &v21);
    xpc_object_t v5 = v21;
    uint64_t v20 = v21;
    if (v21)
    {
      xpc_retain(v21);
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
      uint64_t v20 = v5;
    }
    BOOL v7 = (os_log_t *)(v2 + 40);
    sub_1010D2DB0((os_log_t *)(v2 + 40), v4, (uint64_t)"Lookup request", &v20);
    xpc_release(v5);
    xpc_object_t v19 = 0;
    uint64_t v20 = 0;
    *(void *)&object[0] = v21;
    if (v21) {
      xpc_retain(v21);
    }
    else {
      *(void *)&object[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)buf, (xpc *)object, v8);
    sub_10004EFE4(&v19, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    xpc_release(*(xpc_object_t *)&object[0]);
    memset(object, 0, sizeof(object));
    uint64_t v18 = 0;
    sub_1007DE21C((uint64_t)object, v2 + 56);
    uint64_t v9 = *(void *)(v2 + 80);
    uint64_t v14 = v19;
    if (v19) {
      CFRetain(v19);
    }
    (*(void (**)(uint8_t *__return_ptr, uint64_t, void, const void **))(*(void *)v9 + 32))(buf, v9, v4, &v14);
    sub_1007DE538((uint64_t)object, (uint64_t)v16);
    sub_1007DE5C8((uint64_t)v16);
    sub_100057D78(&v14);
    sub_1010D1E8C(buf, (uint64_t)object, 0);
    BOOL v10 = (void **)v1[2];
    xpc_object_t v11 = *(xpc_object_t *)buf;
    *(void *)long long buf = xpc_null_create();
    uint64_t v12 = *v10;
    const object *v10 = v11;
    xpc_release(v12);
    xpc_release(*(xpc_object_t *)buf);
    xpc_object_t v13 = *(xpc_object_t *)v1[2];
    *(void *)long long buf = v13;
    if (v13)
    {
      xpc_retain(v13);
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
      *(void *)long long buf = v13;
    }
    sub_1010D2DB0(v7, v4, (uint64_t)"Lookup response", (void **)buf);
    xpc_release(v13);
    *(void *)long long buf = 0;
    sub_1007DE5C8((uint64_t)object);
    sub_100057D78(&v19);
    xpc_release(v21);
  }
  else
  {
    uint64_t v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Unknown bundle type in the lookup bundle request", buf, 2u);
    }
  }
}

void sub_1010D38D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,xpc_object_t object)
{
  xpc_release(v35);
  sub_1007DE5C8((uint64_t)&object);
  sub_100057D78((const void **)(v36 - 72));
  xpc_release(*(xpc_object_t *)(v36 - 56));
  _Unwind_Resume(a1);
}

uint64_t *sub_1010D39AC(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v9 = a1;
  BOOL v10 = v1;
  uint64_t v2 = *v1;
  *(void *)long long buf = v1 + 1;
  uint64_t v12 = off_101B0B018[0];
  sub_100048BAC((uint64_t)buf, &v13);
  int v4 = xpc::dyn_cast_or_default((xpc *)&v13, 0, v3);
  xpc_release(v13);
  if (v4)
  {
    xpc_object_t v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Deleting bundle links", buf, 2u);
    }
    (*(void (**)(void))(**(void **)(v2 + 80) + 56))(*(void *)(v2 + 80));
  }
  uint64_t v6 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Rescanning the carrier bundles in the file system", buf, 2u);
  }
  (*(void (**)(void))(**(void **)(v2 + 80) + 48))(*(void *)(v2 + 80));
  BOOL v7 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Rescanning the country bundles in the file system", buf, 2u);
  }
  (*(void (**)(void))(**(void **)(v2 + 80) + 120))(*(void *)(v2 + 80));
  sub_1010D3B80((uint64_t *)&v10);
  return sub_100046B58((uint64_t *)&v9);
}

void sub_1010D3B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  xpc_release(*(xpc_object_t *)(v10 - 24));
  sub_1010D3B80(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1010D3B80(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    operator delete();
  }
  return result;
}

uint64_t sub_1010D3BD8(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  (*(void (**)(void))(**(void **)(v1 + 80) + 40))(*(void *)(v1 + 80));
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(v1 + 80) + 112);

  return v2();
}

uint64_t *sub_1010D3C58(uint64_t **a1)
{
  uint64_t v1 = *a1;
  xpc_object_t v21 = a1;
  char v22 = v1;
  uint64_t v2 = *v1;
  if (!*(void *)(*v1 + 128))
  {
    sub_1010D090C(*v1, 1);
    xpc_object_t object = 0;
    int v4 = v1 + 1;
    *(void *)long long buf = v1 + 1;
    *(char **)&uint8_t buf[8] = off_101B0AF40[0];
    sub_10000CB28((uint64_t)buf, &object);
    xpc_object_t v32 = object;
    if (object) {
      xpc_retain(object);
    }
    else {
      xpc_object_t v32 = xpc_null_create();
    }
    xpc_object_t v5 = (os_log_t *)(v2 + 40);
    sub_1010D4208((os_log_t *)(v2 + 40), (uint64_t)&v32);
    xpc_release(v32);
    CFTypeRef v31 = 0;
    xpc_object_t v32 = 0;
    v34[0] = object;
    if (object) {
      xpc_retain(object);
    }
    else {
      v34[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)buf, (xpc *)v34, v6);
    sub_10004EFE4(&v31, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    xpc_release(v34[0]);
    *(void *)long long buf = v1 + 1;
    *(char **)&uint8_t buf[8] = off_101B0B020[0];
    sub_100048BAC((uint64_t)buf, v34);
    unsigned __int8 v8 = xpc::dyn_cast_or_default((xpc *)v34, 0, v7);
    xpc_release(v34[0]);
    *(void *)long long buf = v4;
    *(void *)&uint8_t buf[8] = off_101B0B060;
    sub_100048BAC((uint64_t)buf, v34);
    char v10 = xpc::dyn_cast_or_default((xpc *)v34, 0, v9);
    xpc_release(v34[0]);
    CFTypeRef cf = 0;
    sub_1006CEDDC((Registry **)(v2 + 56), (uint64_t *)&cf);
    if (cf) {
      xpc_object_t v11 = sub_1000810B8;
    }
    else {
      xpc_object_t v11 = 0;
    }
    if (v11)
    {
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(v2 + 72) + 96))(buf);
      long long v12 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      xpc_object_t v13 = *(std::__shared_weak_count **)(v2 + 120);
      *(_OWORD *)(v2 + 112) = v12;
      if (v13)
      {
        sub_10004D2C8(v13);
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
        if (*(void *)(v2 + 112)) {
          goto LABEL_18;
        }
      }
      else if ((void)v12)
      {
LABEL_18:
        CFTypeRef v29 = 0;
        sub_1006CEFC4(&v29);
        uint64_t v14 = *(void *)(v2 + 112);
        CFTypeRef v28 = cf;
        if (cf) {
          CFRetain(cf);
        }
        CFTypeRef v27 = v29;
        if (v29) {
          CFRetain(v29);
        }
        CFTypeRef v15 = v31;
        *(void *)long long buf = v2;
        *(void *)&uint8_t buf[8] = v31;
        if (v31) {
          CFRetain(v31);
        }
        unsigned __int8 v24 = v8;
        CFTypeRef v16 = cf;
        CFTypeRef v25 = cf;
        if (cf) {
          CFRetain(cf);
        }
        char v26 = v10;
        long long v35 = 0;
        BOOL v17 = operator new(0x30uLL);
        void *v17 = off_101A8B650;
        v17[1] = v2;
        void v17[2] = v15;
        *((unsigned char *)v17 + 24) = v8;
        void v17[4] = v16;
        *(void *)&uint8_t buf[8] = 0;
        CFTypeRef v25 = 0;
        *((unsigned char *)v17 + 40) = v10;
        long long v35 = v17;
        (*(void (**)(uint64_t, void, CFTypeRef *, CFTypeRef *, xpc_object_t *))(*(void *)v14 + 16))(v14, v8, &v28, &v27, v34);
        sub_10010E020(v34);
        sub_1000558F4(&v25);
        sub_100057D78((const void **)&buf[8]);
        sub_100044D00(&v27);
        sub_1000558F4(&v28);
        sub_100044D00(&v29);
        goto LABEL_32;
      }
      uint64_t v18 = *v5;
      if (!os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
      {
LABEL_31:
        sub_1010D090C(v2, 0);
LABEL_32:
        sub_1000558F4(&cf);
        sub_100057D78(&v31);
        xpc_release(object);
        goto LABEL_33;
      }
      *(_WORD *)long long buf = 0;
      xpc_object_t v19 = "Failed to create downloader";
    }
    else
    {
      uint64_t v18 = *v5;
      if (!os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR)) {
        goto LABEL_31;
      }
      *(_WORD *)long long buf = 0;
      xpc_object_t v19 = "Not a valid version.xml url";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v19, buf, 2u);
    goto LABEL_31;
  }
  BOOL v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#N Carrier bundle update is already in progress, ignoring this request", buf, 2u);
  }
LABEL_33:
  sub_1010D41B0((uint64_t *)&v22);
  return sub_100046B58((uint64_t *)&v21);
}

void sub_1010D4078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,xpc_object_t a37,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t *sub_1010D41B0(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    operator delete();
  }
  return result;
}

void sub_1010D4208(os_log_t *a1, uint64_t a2)
{
  object[0] = 0;
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)long long __p = 0u;
  uint64_t v20 = 0;
  *(void *)CFTypeRef v27 = a2;
  *(void *)&v27[8] = __p;
  sub_100048BAC((uint64_t)v27, object);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (xpc_get_type(object[0]) != (xpc_type_t)&_xpc_type_null)
  {
    int v4 = *a1;
    if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = xpc::dyn_cast_or_default((xpc *)object, 0, v5);
      uint64_t v7 = "false";
      if (v6) {
        uint64_t v7 = "true";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Supports voice call: %s", buf, 0xCu);
    }
  }
  xpc_release(object[0]);
  object[0] = 0;
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)long long __p = *(_OWORD *)buf;
  uint64_t v20 = *(void *)&buf[16];
  unsigned __int8 v8 = *(void ***)buf;
  if ((buf[23] & 0x80u) == 0) {
    unsigned __int8 v8 = __p;
  }
  *(void *)CFTypeRef v27 = a2;
  *(void *)&v27[8] = v8;
  sub_100048BAC((uint64_t)v27, object);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (xpc_get_type(object[0]) != (xpc_type_t)&_xpc_type_null)
  {
    BOOL v9 = *a1;
    if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
    {
      memset(buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      char v10 = __p;
      if (v20 < 0) {
        char v10 = (void **)__p[0];
      }
      *(_DWORD *)CFTypeRef v27 = 136446210;
      *(void *)&v27[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Device name: %{public}s", v27, 0xCu);
      if (SHIBYTE(v20) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  xpc_release(object[0]);
  xpc_object_t v18 = 0;
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)long long __p = *(_OWORD *)buf;
  uint64_t v20 = *(void *)&buf[16];
  xpc_object_t v11 = *(void ***)buf;
  if ((buf[23] & 0x80u) == 0) {
    xpc_object_t v11 = __p;
  }
  *(void *)CFTypeRef v27 = a2;
  *(void *)&v27[8] = v11;
  sub_10005107C((uint64_t)v27, &v18);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (xpc_get_type(v18) == (xpc_type_t)&_xpc_type_array)
  {
    xpc_object_t v13 = v18;
    if (v18) {
      xpc_retain(v18);
    }
    else {
      xpc_object_t v13 = xpc_null_create();
    }
    uint64_t v14 = *a1;
    if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
    {
      if (xpc_get_type(v13) == (xpc_type_t)&_xpc_type_array) {
        size_t count = xpc_array_get_count(v13);
      }
      else {
        size_t count = 0;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = count;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %{public}sCriteria count: %zu", buf, 0x16u);
    }
    *(void *)long long buf = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    sub_100048BF4(__p, (void **)buf, 0);
    xpc_release(*(xpc_object_t *)buf);
    *(void *)long long buf = v13;
    if (v13) {
      xpc_retain(v13);
    }
    else {
      *(void *)long long buf = xpc_null_create();
    }
    if (xpc_get_type(v13) == (xpc_type_t)&_xpc_type_array) {
      CFTypeRef v16 = (void *)xpc_array_get_count(v13);
    }
    else {
      CFTypeRef v16 = 0;
    }
    sub_100048BF4((void **)v27, (void **)buf, v16);
    xpc_release(*(xpc_object_t *)buf);
    for (uint64_t i = __p[1]; __PAIR128__((unint64_t)i, (unint64_t)__p[0]) != *(_OWORD *)v27; uint64_t i = ++__p[1])
    {
      object[1] = i;
      xpc_object_t xdict = 0;
      object[0] = __p;
      sub_10003FBDC((uint64_t)object, &xdict);
      if (xpc_get_type(xdict) == (xpc_type_t)&_xpc_type_dictionary)
      {
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = sub_1010D4870;
        unsigned __int8 v24 = &unk_101A8B620;
        CFTypeRef v25 = a1;
        char v26 = "";
        xpc_dictionary_apply(xdict, buf);
      }
      xpc_release(xdict);
    }
    xpc_release(__p[0]);
    xpc_release(__p[0]);
    xpc_release(v13);
  }
  else
  {
    long long v12 = *a1;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Update check criteria isn't an array!", buf, 2u);
    }
  }
  xpc_release(v18);
}

void sub_1010D4738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, xpc_object_t a17, uint64_t a18, xpc_object_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,xpc_object_t a29)
{
  xpc_release(v29);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D4870(uint64_t a1, char *string, void *a3)
{
  CFTypeRef cf = 0;
  xpc_object_t object = xpc_string_create(string);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf1, (xpc *)&object, v6);
  sub_100056248(&cf, (CFTypeRef *)cf1);
  sub_1000577C4((const void **)cf1);
  xpc_release(object);
  CFTypeRef v29 = cf;
  if (cf) {
    CFRetain(cf);
  }
  BOOL v7 = sub_1010D3384(&v29);
  sub_1000558F4(&v29);
  xpc_object_t object = xpc_string_create(string);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)cf1, (xpc *)&object, v8);
  int v9 = CFEqual(*(CFTypeRef *)cf1, @"kUpdateBundleType");
  sub_1000577C4((const void **)cf1);
  xpc_release(object);
  if (!v9)
  {
    xpc_type_t type = xpc_get_type(a3);
    uint64_t v14 = **(NSObject ***)(a1 + 32);
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (type == (xpc_type_t)&_xpc_type_string)
    {
      if (v7)
      {
        if (!v15) {
          goto LABEL_22;
        }
        uint64_t v17 = *(void *)(a1 + 40);
        xpc_object_t v26 = a3;
        if (a3) {
          xpc_retain(a3);
        }
        else {
          xpc_object_t v26 = xpc_null_create();
        }
        xpc_object_t object = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        xpc::dyn_cast_or_default();
        if (SHIBYTE(v33) < 0) {
          operator delete(object);
        }
        unsigned __int8 v24 = __p;
        if (v28 < 0) {
          unsigned __int8 v24 = (xpc_object_t *)__p[0];
        }
        *(_DWORD *)CFTypeRef cf1 = 136446722;
        *(void *)&cf1[4] = v17;
        __int16 v35 = 2082;
        uint64_t v36 = string;
        __int16 v37 = 2082;
        uint64_t v38 = v24;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %{public}s%{public}s = %{public}s", cf1, 0x20u);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        if (!v15) {
          goto LABEL_22;
        }
        uint64_t v21 = *(void *)(a1 + 40);
        xpc_object_t v26 = a3;
        if (a3) {
          xpc_retain(a3);
        }
        else {
          xpc_object_t v26 = xpc_null_create();
        }
        xpc_object_t object = 0;
        uint64_t v32 = 0;
        uint64_t v33 = 0;
        xpc::dyn_cast_or_default();
        if (SHIBYTE(v33) < 0) {
          operator delete(object);
        }
        CFTypeRef v25 = __p;
        if (v28 < 0) {
          CFTypeRef v25 = (xpc_object_t *)__p[0];
        }
        *(_DWORD *)CFTypeRef cf1 = 136446722;
        *(void *)&cf1[4] = v21;
        __int16 v35 = 2082;
        uint64_t v36 = string;
        __int16 v37 = 2080;
        uint64_t v38 = v25;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %{public}s%{public}s = %s", cf1, 0x20u);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }
      xpc_release(v26);
      goto LABEL_22;
    }
    if (v7)
    {
      if (!v15) {
        goto LABEL_22;
      }
      uint64_t v16 = *(void *)(a1 + 40);
      __p[0] = a3;
      if (a3) {
        xpc_retain(a3);
      }
      else {
        __p[0] = xpc_null_create();
      }
      xpc::object::to_string((uint64_t *)&object, (xpc::object *)__p);
      if (v33 >= 0) {
        p_xpc_object_t object = &object;
      }
      else {
        p_xpc_object_t object = (xpc_object_t *)object;
      }
      *(_DWORD *)CFTypeRef cf1 = 136446722;
      *(void *)&cf1[4] = v16;
      __int16 v35 = 2082;
      uint64_t v36 = string;
      __int16 v37 = 2082;
      uint64_t v38 = p_object;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %{public}s%{public}s = %{public}s", cf1, 0x20u);
      if (SHIBYTE(v33) < 0) {
        operator delete(object);
      }
    }
    else
    {
      if (!v15) {
        goto LABEL_22;
      }
      uint64_t v20 = *(void *)(a1 + 40);
      __p[0] = a3;
      if (a3) {
        xpc_retain(a3);
      }
      else {
        __p[0] = xpc_null_create();
      }
      xpc::object::to_string((uint64_t *)&object, (xpc::object *)__p);
      if (v33 >= 0) {
        __int16 v23 = &object;
      }
      else {
        __int16 v23 = (xpc_object_t *)object;
      }
      *(_DWORD *)CFTypeRef cf1 = 136446722;
      *(void *)&cf1[4] = v20;
      __int16 v35 = 2082;
      uint64_t v36 = string;
      __int16 v37 = 2080;
      uint64_t v38 = v23;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %{public}s%{public}s = %s", cf1, 0x20u);
      if (SHIBYTE(v33) < 0) {
        operator delete(object);
      }
    }
    xpc_release(__p[0]);
    goto LABEL_22;
  }
  char v10 = **(NSObject ***)(a1 + 32);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 40);
    xpc_object_t object = a3;
    if (a3) {
      xpc_retain(a3);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    xpc::dyn_cast_or_default((xpc *)&object, 0, v12);
    uint64_t v18 = asString();
    *(_DWORD *)CFTypeRef cf1 = 136446466;
    *(void *)&cf1[4] = v11;
    __int16 v35 = 2080;
    uint64_t v36 = (char *)v18;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %{public}sBundle type: %s", cf1, 0x16u);
    xpc_release(object);
  }
LABEL_22:
  sub_1000558F4(&cf);
  return 1;
}

void sub_1010D4D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, xpc_object_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t sub_1010D4E94(uint64_t a1)
{
  *(void *)a1 = off_101A8B650;
  sub_1000558F4((const void **)(a1 + 32));
  sub_100057D78((const void **)(a1 + 16));
  return a1;
}

void sub_1010D4EE0(uint64_t a1)
{
  *(void *)a1 = off_101A8B650;
  sub_1000558F4((const void **)(a1 + 32));
  sub_100057D78((const void **)(a1 + 16));

  operator delete();
}

void *sub_1010D4F4C(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = off_101A8B650;
  *((void *)v2 + 1) = v3;
  sub_100058198((const void **)v2 + 2, (const void **)(a1 + 16));
  *((unsigned char *)v2 + 24) = *(unsigned char *)(a1 + 24);
  sub_100083DA4((const void **)v2 + 4, (const void **)(a1 + 32));
  *((unsigned char *)v2 + 40) = *(unsigned char *)(a1 + 40);
  return v2;
}

const void **sub_1010D4FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a2 = off_101A8B650;
  *(void *)(a2 + 8) = v4;
  sub_100058198((const void **)(a2 + 16), (const void **)(a1 + 16));
  *(unsigned char *)(a2 + 24) = *(unsigned char *)(a1 + 24);
  uint64_t result = sub_100083DA4((const void **)(a2 + 32), (const void **)(a1 + 32));
  *(unsigned char *)(a2 + 40) = *(unsigned char *)(a1 + 40);
  return result;
}

const void **sub_1010D502C(uint64_t a1)
{
  sub_1000558F4((const void **)(a1 + 32));

  return sub_100057D78((const void **)(a1 + 16));
}

void sub_1010D5068(const void **a1)
{
  sub_1000558F4(a1 + 4);
  sub_100057D78(a1 + 2);

  operator delete(a1);
}

void sub_1010D50AC(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = *a2;
  CFTypeRef v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  BOOL v5 = operator new(0x30uLL);
  v5[1] = 0;
  void v5[2] = 0;
  void *v5 = off_1019E3880;
  void v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  if (v3) {
    int v6 = sub_100080778;
  }
  else {
    int v6 = 0;
  }
  if (v6)
  {
    *(void *)long long buf = v4;
    sub_100058198((const void **)&buf[8], (const void **)(a1 + 16));
    LOBYTE(v13) = *(unsigned char *)(a1 + 24);
    sub_100083DA4(&v14, (const void **)(a1 + 32));
    char v15 = *(unsigned char *)(a1 + 40);
    CFTypeRef v16 = cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v17 = v5 + 3;
    uint64_t v18 = v5;
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
    BOOL v7 = *(std::__shared_weak_count **)(v4 + 16);
    if (v7)
    {
      if (std::__shared_weak_count::lock(v7)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  unsigned __int8 v8 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#N Failed to load version.xml from the server", buf, 2u);
    uint64_t v9 = v5[3];
    uint64_t v10 = v5[4];
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  memset(buf, 0, sizeof(buf));
  uint64_t v13 = 0;
  sub_10055D914((const void **)buf, v9, v10, (v10 - v9) >> 4);
  sub_1010D53E8((uint64_t *)buf);
  xpc_object_t v19 = buf;
  sub_10055D640((void ***)&v19);
  sub_1010D0828(v4);
}

void sub_1010D5358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, const void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_10055D640((void ***)va1);
  sub_10004D2C8(v2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D539C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010D53DC()
{
}

void sub_1010D53E8(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)sub_10068CA40(&event::carrierbundle::bundle_update_results[1]);
  memset(v28, 0, sizeof(v28));
  sub_10055D914(v28, *a1, a1[1], (a1[1] - *a1) >> 4);
  long long v33 = 0uLL;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  CFTypeRef v3 = (pthread_mutex_t *)sub_100060E64(v2 + 3);
  sub_100061F70(&v39, v3);
  uint64_t v4 = v2[1];
  if (v4)
  {
    if (atomic_load_explicit((atomic_uint *volatile)(v4 + 8), memory_order_acquire) == 1) {
      sub_10068D0B0(v2, &v39, 0, 1);
    }
    uint64_t v5 = *v2;
    uint64_t v6 = v2[1];
    if (v6) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = *v2;
  }
  long long v7 = v33;
  *(void *)&long long v33 = v5;
  *((void *)&v33 + 1) = v6;
  long long v34 = v7;
  sub_10000A740((atomic_uint **)&v34 + 1);
  sub_10000A6C8(*((pthread_mutex_t **)&v50 + 1));
  sub_10000A5F8(&v39);
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v39 = 0u;
  uint64_t v54 = 0;
  uint64_t v55 = 10;
  uint64_t v56 = (char *)&v39 + 8;
  uint64_t v57 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  unsigned int v58 = v28;
  uint64_t v8 = (uint64_t *)sub_10068CD0C((uint64_t *)&v33);
  uint64_t v9 = sub_10068E070(v8);
  v32[0] = &v39;
  v32[1] = v2;
  _OWORD v32[2] = v9;
  uint64_t v10 = sub_10068CD0C((uint64_t *)&v33);
  sub_100060EA8((uint64_t *)(v10 + 16));
  uint64_t v11 = (uint64_t *)sub_10068CD0C((uint64_t *)&v33);
  uint64_t v12 = *(void *)(sub_10068E070(v11) + 8);
  uint64_t v13 = (uint64_t *)sub_10068CD0C((uint64_t *)&v33);
  uint64_t v14 = sub_10068E070(v13);
  *(void *)&long long v30 = v12;
  *((void *)&v30 + 1) = v14;
  *(void *)&long long v31 = &v39;
  *((void *)&v31 + 1) = v14;
  sub_1010D581C((uint64_t *)&v30);
  char v15 = (uint64_t *)sub_10068CD0C((uint64_t *)&v33);
  uint64_t v16 = sub_10068E070(v15);
  uint64_t v17 = (uint64_t *)sub_10068CD0C((uint64_t *)&v33);
  uint64_t v18 = sub_10068E070(v17);
  v29[0] = v16;
  v29[1] = v18;
  v29[2] = (uint64_t)&v39;
  v29[3] = v18;
  sub_1010D581C(v29);
  long long v34 = v30;
  long long v35 = v31;
  uint64_t v19 = v29[0];
  uint64_t v20 = v30;
  if ((void)v30 != v29[0])
  {
    uint64_t v21 = v35;
    BOOL v22 = *(unsigned char *)v35 == 0;
    do
    {
      if (v22)
      {
        uint64_t v23 = sub_10068CD50((uint64_t *)(v20 + 16));
        uint64_t v24 = sub_10068D800((uint64_t *)(v23 + 32));
        CFTypeRef v25 = *(uint64_t **)(v21 + 272);
        uint64_t v26 = *v25;
        uint64_t v27 = v25[1];
        long long v36 = 0uLL;
        uint64_t v37 = 0;
        sub_10055D914((const void **)&v36, v26, v27, (v27 - v26) >> 4);
        sub_10068E8F0((void *)(v24 + 24), &v36);
        uint64_t v38 = (void **)&v36;
        sub_10055D640(&v38);
        if (!*(unsigned char *)v21) {
          *(unsigned char *)uint64_t v21 = 1;
        }
      }
      if (!*(unsigned char *)v35) {
        __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
      }
      *(void *)&long long v34 = *(void *)(v34 + 8);
      sub_1010D581C((uint64_t *)&v34);
      uint64_t v21 = v35;
      if (*(unsigned char *)v35) {
        *(unsigned char *)long long v35 = 0;
      }
      uint64_t v20 = v34;
      BOOL v22 = 1;
    }
    while ((void)v34 != v19);
  }
  sub_1010D5B98(v32);
  sub_1010D5D60((uint64_t)&v39);
  sub_10000A740((atomic_uint **)&v33 + 1);
  *(void *)&long long v39 = v28;
  sub_10055D640((void ***)&v39);
}

void sub_1010D57A8(void *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  JUMPOUT(0x1010D5814);
}

void sub_1010D57D0()
{
}

void sub_1010D57D8()
{
}

void sub_1010D57E0(_Unwind_Exception *a1)
{
  sub_1010D5B98(&v3);
  sub_1010D5D60(v5);
  sub_10000A740(&v4);
  v5[0] = &v2;
  sub_10055D640(v5);
  _Unwind_Resume(a1);
}

void sub_1010D581C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 != a1[3])
  {
    if (v1 == a1[1]) {
      goto LABEL_24;
    }
    while (1)
    {
      sub_100062390((atomic_uint **)(a1[2] + 8), *(void *)(a1[2] + 264));
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      uint64_t v3 = *(void *)(*a1 + 16);
      sub_1010D5B58(v3);
      sub_10000A4EC(&v19, v3);
      uint64_t v4 = sub_10068CD50((uint64_t *)(*a1 + 16));
      uint64_t v5 = (uint64_t *)(v4 + 32);
      if (*(void *)(v4 + 32))
      {
        uint64_t v6 = v4;
        uint64_t v7 = a1[2];
        uint64_t v8 = *(_DWORD **)sub_10068D800((uint64_t *)(v4 + 32));
        if (v8 != *(_DWORD **)(sub_10068D800(v5) + 8))
        {
          uint64_t v9 = (void *)(v7 + 8);
          while (1)
          {
            memset(v31, 0, sizeof(v31));
            sub_100060B10(v8, (uint64_t)v31);
            if (sub_100060A68((uint64_t)v8)) {
              break;
            }
            sub_100062188(v9, (uint64_t)v31);
            sub_1000624B4((uint64_t)v31);
            v8 += 6;
            if (v8 == *(_DWORD **)(sub_10068D800(v5) + 8)) {
              goto LABEL_12;
            }
          }
          if (*(unsigned char *)(v6 + 24))
          {
            *(unsigned char *)(v6 + 24) = 0;
            sub_100060D70((atomic_uint **)v6, &v19);
          }
          sub_1000624B4((uint64_t)v31);
        }
      }
LABEL_12:
      uint64_t v10 = sub_10068CD50((uint64_t *)(*a1 + 16));
      uint64_t v11 = a1[2];
      if (*(unsigned char *)(v10 + 24)) {
        ++*(_DWORD *)(v11 + 280);
      }
      else {
        ++*(_DWORD *)(v11 + 284);
      }
      uint64_t v12 = sub_10068CD50((uint64_t *)(*a1 + 16));
      if (!*(unsigned char *)(v12 + 24)
        || (uint64_t v13 = *(void *)(v12 + 16)) != 0
        && atomic_load_explicit((atomic_uint *volatile)(v13 + 8), memory_order_acquire))
      {
        int v14 = 1;
      }
      else
      {
        sub_10000A39C(a1, &v19, *a1);
        int v14 = 0;
      }
      (*(void (**)(void))(**((void **)&v30 + 1) + 32))(*((void *)&v30 + 1));
      sub_10000A5F8(&v19);
      uint64_t v1 = *a1;
      uint64_t v15 = a1[1];
      if (!v14) {
        break;
      }
      uint64_t v16 = *(void *)(v1 + 8);
      *a1 = v16;
      if (v16 == v15)
      {
        uint64_t v1 = v15;
        goto LABEL_24;
      }
    }
    if (v1 == v15)
    {
LABEL_24:
      uint64_t v17 = a1[3];
      if (v17 != v1)
      {
        long long v29 = 0u;
        long long v30 = 0u;
        long long v27 = 0u;
        long long v28 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        uint64_t v18 = *(void *)(v17 + 16);
        sub_1010D5B58(v18);
        sub_10000A4EC(&v19, v18);
        sub_10000A39C(a1, &v19, a1[1]);
        (*(void (**)(void))(**((void **)&v30 + 1) + 32))(*((void *)&v30 + 1));
        sub_10000A5F8(&v19);
      }
    }
  }
}

void sub_1010D5B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010D5B58(uint64_t result)
{
  if (!result) {
    __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
  }
  return result;
}

void *sub_1010D5B98(void *a1)
{
  if (*(_DWORD *)(*a1 + 284) > *(_DWORD *)(*a1 + 280))
  {
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v3 = a1[2];
    long long v11 = 0u;
    memset(v10, 0, sizeof(v10));
    uint64_t v4 = (pthread_mutex_t *)sub_100060E64(v2 + 3);
    sub_100061F70(v10, v4);
    uint64_t v5 = (uint64_t *)sub_10068CD0C(v2);
    if (sub_10068E070(v5) == v3)
    {
      uint64_t v6 = v2[1];
      if (!v6 || atomic_load_explicit((atomic_uint *volatile)(v6 + 8), memory_order_acquire) != 1) {
        operator new();
      }
      uint64_t v7 = (uint64_t *)sub_10068CD0C(v2);
      uint64_t v9 = *(uint64_t **)(sub_10068E070(v7) + 8);
      sub_10068CF74(v2, v10, 0, &v9, 0);
    }
    sub_10000A6C8(*((pthread_mutex_t **)&v11 + 1));
    sub_10000A5F8(v10);
  }
  return a1;
}

void sub_1010D5D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010D5D60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 288);
  if (v2)
  {
    long long v5 = 0u;
    memset(v4, 0, sizeof(v4));
    sub_10000A4EC(v4, v2);
    sub_100060D70(*(atomic_uint ***)(a1 + 288), v4);
    (*(void (**)(void))(**((void **)&v5 + 1) + 32))(*((void *)&v5 + 1));
    sub_10000A5F8(v4);
  }
  sub_10006224C((void *)(a1 + 8));
  if (*(unsigned char *)a1) {
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

void sub_1010D5E34(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1010D5E54(const void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = dispatch_group_create();
  uint64_t v4 = *((void *)v2 + 9);
  sub_100058198(&v15, v1 + 1);
  uint64_t v5 = *((unsigned __int8 *)v1 + 16);
  sub_100083DA4(&v14, v1 + 3);
  (*(void (**)(long long *__return_ptr, uint64_t, const void **, uint64_t, const void **, void))(*(void *)v4 + 40))(&v16, v4, &v15, v5, &v14, *((unsigned __int8 *)v1 + 32));
  long long v6 = v16;
  long long v16 = 0uLL;
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v2 + 13);
  *((_OWORD *)v2 + 6) = v6;
  if (v7)
  {
    sub_10004D2C8(v7);
    if (*((void *)&v16 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v16 + 1));
    }
  }
  sub_1000558F4(&v14);
  sub_100057D78(&v15);
  uint64_t v8 = *((void *)v2 + 12);
  sub_100058198(&v13, v1 + 5);
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  uint64_t v10 = v1[6];
  uint64_t v9 = (atomic_ullong *)v1[7];
  if (v9) {
    atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = 0;
  long long v11 = operator new(0x20uLL);
  *long long v11 = off_101A8B6C0;
  v11[1] = v3;
  _OWORD v11[2] = v10;
  v11[3] = v9;
  uint64_t v17 = v11;
  (*(void (**)(uint64_t, const void **, long long *))(*(void *)v8 + 16))(v8, &v13, &v16);
  sub_10055D77C(&v16);
  sub_100057D78(&v13);
  uint64_t v12 = (atomic_ullong *)v1[7];
  if (v12) {
    atomic_fetch_add_explicit(v12 + 1, 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_1010D6080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (v24) {
    sub_10004D2C8(v24);
  }
  if (v23) {
    dispatch_release(v23);
  }
  sub_1010D6108(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1010D6108(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 56);
    if (v2) {
      sub_10004D2C8(v2);
    }
    sub_100057D78((const void **)(v1 + 40));
    sub_1000558F4((const void **)(v1 + 24));
    sub_100057D78((const void **)(v1 + 8));
    operator delete();
  }
  return result;
}

void *sub_1010D6174(void *a1)
{
  *a1 = off_101A8B6C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = a1[1];
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = a1[1];
    if (v4) {
      dispatch_release(v4);
    }
  }
  return a1;
}

void sub_1010D61D8(void *a1)
{
  *a1 = off_101A8B6C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = a1[1];
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = a1[1];
    if (v4) {
      dispatch_release(v4);
    }
  }

  operator delete();
}

void *sub_1010D625C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_101A8B6C0;
  sub_100E5C0A8((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1010D62B0(uint64_t a1, void *a2)
{
  *a2 = off_101A8B6C0;
  return sub_100E5C0A8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1010D62DC(uint64_t a1)
{
}

void sub_1010D62E4(void *a1)
{
  sub_100E5C104((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1010D6320(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v2 = v4;
  long long v5 = *(_OWORD *)(a2 + 8);
  uint64_t v3 = v5;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_100E5C160(*(uint64_t **)(a1 + 16), *(void *)(*(void *)(a1 + 16) + 8), v2, v3, (v3 - v2) >> 4);
  long long v6 = (void **)&v4;
  sub_10055D640(&v6);
}

void sub_1010D6384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10055D640(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D63A0(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A8B720)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010D63E0()
{
  return &off_101A8B720;
}

uint64_t *sub_1010D63EC(uint64_t a1)
{
  uint64_t v3 = a1;
  memset(v4, 0, sizeof(v4));
  uint64_t v1 = *(void *)a1;
  sub_10055D914(v4, **(void **)(a1 + 8), *(void *)(*(void *)(a1 + 8) + 8), (uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 4);
  sub_1010D53E8((uint64_t *)v4);
  long long v5 = v4;
  sub_10055D640((void ***)&v5);
  sub_1010D090C(v1, 0);
  return sub_1000E1A60(&v3);
}

void sub_1010D645C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v3 - 24) = v2;
  sub_10055D640((void ***)(v3 - 24));
  sub_1000E1A60((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1010D6484(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  (*(void (**)(void))(**(void **)(v1 + 80) + 64))(*(void *)(v1 + 80));
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void *)(v1 + 128)) {
      uint64_t v3 = "true";
    }
    else {
      uint64_t v3 = "false";
    }
    int v4 = 136315138;
    long long v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Update in progress: %s", (uint8_t *)&v4, 0xCu);
  }
}

void sub_1010D6568(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *v1;
  char v3 = (*(uint64_t (**)(void))(**(void **)(*v1 + 80) + 80))(*(void *)(*v1 + 80));
  char v4 = (*(uint64_t (**)(void))(**(void **)(v2 + 80) + 128))(*(void *)(v2 + 80));
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  uint64_t v7 = (void **)v1[1];
  xpc_object_t v8 = xpc_null_create();
  uint64_t v9 = *v7;
  std::__shared_weak_count *v7 = v6;
  xpc_release(v9);
  xpc_release(v8);
  xpc_object_t v11 = xpc_BOOL_create(v3 | v4);
  if (!v11) {
    xpc_object_t v11 = xpc_null_create();
  }
  v10[0] = v1[1];
  v10[1] = off_101B0AF68[0];
  sub_100035E70((uint64_t)v10, &v11, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v11);
}

void sub_1010D6700(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = v1[1];
  *(void *)&v18[0] = *v1;
  *((char **)&v18[0] + 1) = off_101B0AF70[0];
  sub_100048BAC((uint64_t)v18, &v24);
  unsigned __int8 v4 = xpc::dyn_cast_or_default((xpc *)&v24, 0, v3);
  xpc_release(v24);
  xpc_object_t v23 = 0;
  *(void *)&v18[0] = *v1;
  *((char **)&v18[0] + 1) = off_101B0AF40[0];
  sub_10000CB28((uint64_t)v18, &v23);
  xpc_object_t v5 = v23;
  long long v22 = v23;
  if (v23)
  {
    xpc_retain(v23);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    long long v22 = v5;
  }
  xpc_object_t v6 = (os_log_t *)(v2 + 40);
  sub_1010D2DB0((os_log_t *)(v2 + 40), v4, (uint64_t)"OverlayBundle request", &v22);
  xpc_release(v5);
  long long v21 = 0;
  long long v22 = 0;
  xpc_object_t v24 = v23;
  if (v23) {
    xpc_retain(v23);
  }
  else {
    xpc_object_t v24 = xpc_null_create();
  }
  xpc::bridge((uint64_t *)v18, (xpc *)&v24, v7);
  sub_10004EFE4(&v21, (CFTypeRef *)v18);
  sub_1000577C4((const void **)v18);
  xpc_release(v24);
  uint64_t v20 = 0;
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  sub_1007DE21C((uint64_t)v18, v2 + 56);
  uint64_t v14 = *v1;
  uint64_t v15 = off_101B0AFD8[0];
  sub_100048BAC((uint64_t)&v14, &object);
  xpc_object_t v24 = 0;
  long long v25 = 0;
  uint64_t v26 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v26) < 0) {
    operator delete(v24);
  }
  sub_1007DE874((uint64_t)v18, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(object);
  uint64_t v14 = *v1;
  uint64_t v15 = off_101B0B000[0];
  sub_100048BAC((uint64_t)&v14, &object);
  xpc_object_t v24 = 0;
  long long v25 = 0;
  uint64_t v26 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v26) < 0) {
    operator delete(v24);
  }
  std::string::operator=((std::string *)((char *)&v18[8] + 8), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(object);
  xpc_object_t v24 = (xpc_object_t)*v1;
  long long v25 = off_101B0B008[0];
  sub_100048BAC((uint64_t)&v24, &__p);
  BYTE4(v19) = xpc::dyn_cast_or_default((xpc *)&__p, 0, v8);
  xpc_release(__p.__r_.__value_.__l.__data_);
  uint64_t v9 = *(void *)(v2 + 80);
  xpc_object_t v24 = v21;
  if (v21) {
    CFRetain(v21);
  }
  (*(void (**)(uint64_t, void, xpc_object_t *, _OWORD *))(*(void *)v9 + 88))(v9, v4, &v24, v18);
  sub_100057D78((const void **)&v24);
  sub_1010D1E8C(&__p, (uint64_t)v18, 1);
  uint64_t v10 = (void **)v1[2];
  std::string::size_type v11 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
  uint64_t v12 = *v10;
  const void *v10 = (void *)v11;
  xpc_release(v12);
  xpc_release(__p.__r_.__value_.__l.__data_);
  xpc_object_t v13 = *(xpc_object_t *)v1[2];
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  if (v13)
  {
    xpc_retain(v13);
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
  }
  sub_1010D2DB0(v6, v4, (uint64_t)"OverlayBundle response", (void **)&__p.__r_.__value_.__l.__data_);
  xpc_release(v13);
  __p.__r_.__value_.__r.__words[0] = 0;
  sub_1007DE5C8((uint64_t)v18);
  sub_100057D78((const void **)&v21);
  xpc_release(v23);
}

void sub_1010D6A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, xpc_object_t object, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  xpc_release(v18);
  sub_1007DE5C8((uint64_t)&a18);
  sub_100057D78((const void **)(v19 - 96));
  xpc_release(*(xpc_object_t *)(v19 - 80));
  _Unwind_Resume(a1);
}

void sub_1010D6B3C()
{
}

void sub_1010D6B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1000577C4((const void **)va);
  xpc_release(*(xpc_object_t *)(v6 - 72));
  JUMPOUT(0x1010D6B2CLL);
}

void sub_1010D6B74()
{
  xpc_release(v0);
  *(void *)(v1 - 88) = 0;
  JUMPOUT(0x1010D6B2CLL);
}

void sub_1010D6B94()
{
  xpc_release(*(xpc_object_t *)(v0 - 72));
  JUMPOUT(0x1010D6B34);
}

void sub_1010D6BAC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  xpc_object_t v35 = 0;
  uint64_t v2 = *(void *)(v1 + 8);
  __p[0] = *(void **)v1;
  __p[1] = off_101B0AF40[0];
  sub_10000CB28((uint64_t)__p, &v35);
  xpc_object_t v3 = v35;
  long long v34 = v35;
  if (v35)
  {
    xpc_retain(v35);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    long long v34 = v3;
  }
  unsigned __int8 v4 = (os_log_t *)(v2 + 40);
  sub_1010D2DB0((os_log_t *)(v2 + 40), 1, (uint64_t)"Lookup GSMA configuration request", &v34);
  xpc_release(v3);
  long long v33 = 0;
  long long v34 = 0;
  v31[0] = v35;
  if (v35) {
    xpc_retain(v35);
  }
  else {
    v31[0] = xpc_null_create();
  }
  xpc::bridge((uint64_t *)__p, (xpc *)v31, v5);
  sub_10004EFE4(&v33, (CFTypeRef *)__p);
  sub_1000577C4((const void **)__p);
  xpc_release(v31[0]);
  v31[0] = 0;
  v31[1] = 0;
  uint64_t v32 = 0;
  long long v29 = 0;
  long long v30 = 0;
  uint64_t v6 = *(void *)(v2 + 80);
  xpc_object_t v24 = v33;
  if (v33) {
    CFRetain(v33);
  }
  (*(void (**)(void **__return_ptr, uint64_t, const void **))(*(void *)v6 + 96))(__p, v6, &v24);
  v22[0] = v31;
  v22[1] = &v30;
  xpc_object_t v23 = &v29;
  sub_100688068(v22, (long long *)__p);
  sub_1000558F4(&v28);
  sub_1000558F4(&v27);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  sub_100057D78(&v24);
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v7) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v7);
      xpc_object_t v8 = v7;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v7 = 0;
  }
  xpc_release(v7);
  uint64_t v9 = *(void ***)(v1 + 16);
  xpc_object_t v10 = xpc_null_create();
  std::string::size_type v11 = *v9;
  void *v9 = v8;
  xpc_release(v11);
  xpc_release(v10);
  if (v32 >= 0) {
    uint64_t v12 = (const char *)v31;
  }
  else {
    uint64_t v12 = (const char *)v31[0];
  }
  xpc_object_t v20 = xpc_string_create(v12);
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  __p[0] = *(void **)(v1 + 16);
  __p[1] = off_101B0B048[0];
  sub_100035E70((uint64_t)__p, &v20, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v20);
  xpc_object_t v20 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v26 = 0;
  ctu::cf::assign();
  *(_OWORD *)long long v22 = *(_OWORD *)__p;
  xpc_object_t v23 = v26;
  if (SHIBYTE(v26) >= 0) {
    xpc_object_t v13 = v22;
  }
  else {
    xpc_object_t v13 = (void **)__p[0];
  }
  xpc_object_t v18 = xpc_string_create((const char *)v13);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  __p[0] = *(void **)(v1 + 16);
  __p[1] = off_101B0B050[0];
  sub_100035E70((uint64_t)__p, &v18, &v19);
  xpc_release(v19);
  xpc_object_t v19 = 0;
  xpc_release(v18);
  xpc_object_t v18 = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v26 = 0;
  ctu::cf::assign();
  *(_OWORD *)long long v22 = *(_OWORD *)__p;
  xpc_object_t v23 = v26;
  if (SHIBYTE(v26) >= 0) {
    uint64_t v14 = v22;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  xpc_object_t v16 = xpc_string_create((const char *)v14);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  __p[0] = *(void **)(v1 + 16);
  __p[1] = off_101B0B058[0];
  sub_100035E70((uint64_t)__p, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  xpc_object_t v15 = **(xpc_object_t **)(v1 + 16);
  __p[0] = v15;
  if (v15)
  {
    xpc_retain(v15);
  }
  else
  {
    xpc_object_t v15 = xpc_null_create();
    __p[0] = v15;
  }
  sub_1010D2DB0(v4, 1, (uint64_t)"Lookup GSMA configuration response", __p);
  xpc_release(v15);
  __p[0] = 0;
  sub_1000558F4(&v29);
  sub_1000558F4(&v30);
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
  sub_100057D78(&v33);
  xpc_release(v35);
}

void sub_1010D6FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  xpc_release(v25);
  sub_1000558F4((const void **)(v26 - 112));
  sub_1000558F4((const void **)(v26 - 104));
  if (*(char *)(v26 - 73) < 0) {
    operator delete(*(void **)(v26 - 96));
  }
  sub_100057D78((const void **)(v26 - 72));
  xpc_release(*(xpc_object_t *)(v26 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1010D70E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(**(void **)(a1 + 40) + 80) + 136))();
}

void sub_1010D7114(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  char v2 = (*(uint64_t (**)(void))(**(void **)(*v1 + 80) + 144))(*(void *)(*v1 + 80));
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  xpc_object_t v5 = (void **)v1[1];
  xpc_object_t v6 = xpc_null_create();
  xpc_object_t v7 = *v5;
  const object *v5 = v4;
  xpc_release(v7);
  xpc_release(v6);
  xpc_object_t v9 = xpc_BOOL_create(v2);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  v8[0] = v1[1];
  v8[1] = off_101B0AF68[0];
  sub_100035E70((uint64_t)v8, &v9, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v9);
}

void sub_1010D7280(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = 0;
  xpc_object_t v3 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v1 + 72) + 112))(&v2);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  if (v3) {
    sub_10004D2C8(v3);
  }
  operator delete();
}

void sub_1010D7338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  operator delete();
}

void sub_1010D7378(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_1010D090C(**a1, *((unsigned __int8 *)*a1 + 8));
  operator delete();
}

void sub_1010D73D0()
{
}

void sub_1010D7400()
{
}

void *sub_1010D7414()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_101A8B810;
  return result;
}

void sub_1010D744C(uint64_t a1, void *a2)
{
  *a2 = off_101A8B810;
}

void sub_1010D7474(uint64_t a1, os_log_t *a2, os_signpost_id_t *a3)
{
  os_signpost_id_t v3 = *a3;
  if (*a3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    xpc_object_t v4 = *a2;
    if (os_signpost_enabled(*a2))
    {
      *(_WORD *)xpc_object_t v5 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v3, "CarrierBundleUpdate", (const char *)&unk_1017DEDA7, v5, 2u);
    }
  }
}

uint64_t sub_1010D74EC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010D752C()
{
}

uint64_t *sub_1010D7538(uint64_t **a1)
{
  uint64_t v1 = *a1;
  xpc_object_t v24 = a1;
  long long v25 = v1;
  uint64_t v2 = *v1;
  if (!*(void *)(*v1 + 128))
  {
    sub_1010D090C(*v1, 1);
    xpc_object_t object = 0;
    *(void *)long long buf = v1 + 1;
    *(char **)&uint8_t buf[8] = off_101B0AF40[0];
    sub_10000CB28((uint64_t)buf, &object);
    xpc_object_t v6 = (os_log_t *)(v2 + 40);
    xpc_object_t v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      xpc::object::to_string((uint64_t *)buf, (xpc::object *)&object);
      xpc_object_t v7 = v34 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)uint64_t v38 = 136315138;
      *(void *)&v38[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Checking for update with criteria: %s", v38, 0xCu);
      if (v34 < 0) {
        operator delete(*(void **)buf);
      }
    }
    CFTypeRef v30 = 0;
    *(void *)uint64_t v38 = object;
    if (object) {
      xpc_retain(object);
    }
    else {
      *(void *)uint64_t v38 = xpc_null_create();
    }
    xpc::bridge((uint64_t *)buf, (xpc *)v38, v8);
    sub_10004EFE4(&v30, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    xpc_release(*(xpc_object_t *)v38);
    *(void *)long long buf = v1 + 1;
    *(char **)&uint8_t buf[8] = off_101B0B020[0];
    sub_100048BAC((uint64_t)buf, v38);
    unsigned __int8 v11 = xpc::dyn_cast_or_default((xpc *)v38, 0, v10);
    xpc_release(*(xpc_object_t *)v38);
    CFTypeRef cf = 0;
    sub_1006CEDDC((Registry **)(v2 + 56), (uint64_t *)&cf);
    if (cf) {
      uint64_t v12 = sub_1000810B8;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v12)
    {
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(v2 + 72) + 96))(buf);
      long long v13 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      uint64_t v14 = *(std::__shared_weak_count **)(v2 + 120);
      *(_OWORD *)(v2 + 112) = v13;
      if (v14)
      {
        sub_10004D2C8(v14);
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
        if (*(void *)(v2 + 112)) {
          goto LABEL_26;
        }
      }
      else if ((void)v13)
      {
LABEL_26:
        CFTypeRef v28 = 0;
        sub_1006CEFC4(&v28);
        uint64_t v15 = *(void *)(v2 + 112);
        CFTypeRef v27 = cf;
        if (cf) {
          CFRetain(cf);
        }
        CFTypeRef v26 = v28;
        if (v28) {
          CFRetain(v28);
        }
        *(void *)long long buf = v2;
        *(void *)&uint8_t buf[8] = v30;
        if (v30) {
          CFRetain(v30);
        }
        char v33 = v11;
        CFTypeRef v35 = cf;
        if (cf) {
          CFRetain(cf);
        }
        sub_100661870((uint64_t)v36, (uint64_t)(v1 + 3));
        xpc_object_t v16 = (void *)v1[2];
        xpc_object_t v37 = v16;
        if (v16) {
          xpc_retain(v16);
        }
        else {
          xpc_object_t v37 = xpc_null_create();
        }
        long long v39 = 0;
        long long v21 = (char *)operator new(0x50uLL);
        *(void *)long long v21 = off_101A8B890;
        *(_OWORD *)(v21 + 8) = *(_OWORD *)buf;
        v21[24] = v33;
        *((void *)v21 + 4) = v35;
        *(void *)&uint8_t buf[8] = 0;
        CFTypeRef v35 = 0;
        sub_100661C4C((uint64_t)(v21 + 40), (uint64_t)v36);
        *((void *)v21 + 9) = v37;
        xpc_object_t v37 = xpc_null_create();
        long long v39 = v21;
        (*(void (**)(uint64_t, void, CFTypeRef *, CFTypeRef *, unsigned char *))(*(void *)v15 + 16))(v15, v11, &v27, &v26, v38);
        sub_10010E020(v38);
        xpc_release(v37);
        xpc_object_t v37 = 0;
        sub_1001472DC(v36);
        sub_1000558F4(&v35);
        sub_100057D78((const void **)&buf[8]);
        sub_100044D00(&v26);
        sub_1000558F4(&v27);
        sub_100044D00(&v28);
        goto LABEL_53;
      }
      xpc_object_t v19 = *v6;
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "downloader missing.", buf, 2u);
      }
      sub_1010D090C(v2, 0);
      xpc_object_t v20 = (void *)v1[2];
      *(void *)long long buf = v20;
      if (v20) {
        xpc_retain(v20);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      uint64_t v22 = v1[6];
      if (!v22) {
        sub_10007B600();
      }
    }
    else
    {
      xpc_object_t v17 = *v6;
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Not a valid version.xml url", buf, 2u);
      }
      sub_1010D090C(v2, 0);
      xpc_object_t v18 = (void *)v1[2];
      *(void *)long long buf = v18;
      if (v18) {
        xpc_retain(v18);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      uint64_t v22 = v1[6];
      if (!v22) {
        sub_10007B600();
      }
    }
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v22 + 48))(v22, buf);
    xpc_release(*(xpc_object_t *)buf);
    *(void *)long long buf = 0;
LABEL_53:
    sub_1000558F4(&cf);
    sub_100057D78(&v30);
    xpc_release(object);
    goto LABEL_54;
  }
  os_signpost_id_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#N Carrier bundle update is already in progress, ignoring this request", buf, 2u);
  }
  xpc_object_t v4 = (void *)v1[2];
  *(void *)long long buf = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  uint64_t v9 = v1[6];
  if (!v9) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v9 + 48))(v9, buf);
  xpc_release(*(xpc_object_t *)buf);
LABEL_54:
  sub_1010D7C94((uint64_t *)&v25);
  return sub_100046B58((uint64_t *)&v24);
}

void sub_1010D7B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,xpc_object_t a31,xpc_object_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t *sub_1010D7C94(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_1001472DC((void *)(v1 + 24));
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    operator delete();
  }
  return result;
}

uint64_t sub_1010D7D04(uint64_t a1)
{
  *(void *)a1 = off_101A8B890;
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  sub_1001472DC((void *)(a1 + 40));
  sub_1000558F4((const void **)(a1 + 32));
  sub_100057D78((const void **)(a1 + 16));
  return a1;
}

void sub_1010D7D6C(uint64_t a1)
{
  *(void *)a1 = off_101A8B890;
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  sub_1001472DC((void *)(a1 + 40));
  sub_1000558F4((const void **)(a1 + 32));
  sub_100057D78((const void **)(a1 + 16));

  operator delete();
}

void *sub_1010D7DF4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x50uLL);
  void *v2 = off_101A8B890;
  sub_1010D8268((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1010D7E48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D7E5C(uint64_t a1, void *a2)
{
  *a2 = off_101A8B890;
  return sub_1010D8268((uint64_t)(a2 + 1), a1 + 8);
}

const void **sub_1010D7E88(uint64_t a1)
{
  return sub_1010D830C(a1 + 8);
}

void sub_1010D7E90(void *a1)
{
  sub_1010D830C((uint64_t)a1 + 8);

  operator delete(a1);
}

const void **sub_1010D7ECC(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = *a2;
  CFTypeRef v3 = cf;
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v3) {
    xpc_object_t v5 = sub_100080778;
  }
  else {
    xpc_object_t v5 = 0;
  }
  if (!v5)
  {
    uint64_t v12 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#N Failed to load version.xml from the server", buf, 2u);
    }
    sub_1010D0828(v4);
  }
  uint64_t v6 = *(void *)(v4 + 72);
  sub_100058198(&v19, (const void **)(a1 + 16));
  uint64_t v7 = *(unsigned __int8 *)(a1 + 24);
  sub_100083DA4(&v18, (const void **)(a1 + 32));
  (*(void (**)(uint8_t *__return_ptr, uint64_t, const void **, uint64_t, uint64_t, const void **, void))(*(void *)v6 + 56))(buf, v6, &v19, v7, 1, &v18, 0);
  long long v8 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v9 = *(std::__shared_weak_count **)(v4 + 152);
  *(_OWORD *)(v4 + 144) = v8;
  if (v9)
  {
    sub_10004D2C8(v9);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_1000558F4(&v18);
  sub_100057D78(&v19);
  uint64_t v10 = *(void *)(v4 + 144);
  if (v10)
  {
    CFTypeRef v17 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *(void *)long long buf = v4;
    sub_100661870((uint64_t)&buf[8], a1 + 40);
    unsigned __int8 v11 = *(void **)(a1 + 72);
    xpc_object_t object = v11;
    if (v11) {
      xpc_retain(v11);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    xpc_object_t v23 = 0;
    long long v13 = operator new(0x38uLL);
    uint64_t v14 = *(void *)buf;
    *long long v13 = off_101A8B900;
    v13[1] = v14;
    sub_100661C4C((uint64_t)(v13 + 2), (uint64_t)&buf[8]);
    v13[6] = object;
    xpc_object_t object = xpc_null_create();
    xpc_object_t v23 = v13;
    (*(void (**)(uint64_t, CFTypeRef *, void *))(*(void *)v10 + 16))(v10, &v17, v22);
    sub_10055D77C(v22);
    xpc_release(object);
    xpc_object_t object = 0;
    sub_1001472DC(&buf[8]);
    sub_100057D78(&v17);
  }
  return sub_100057D78(&cf);
}

void sub_1010D8180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, xpc_object_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t sub_1010D821C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010D825C()
{
}

uint64_t sub_1010D8268(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  sub_100058198((const void **)(a1 + 8), (const void **)(a2 + 8));
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  sub_100083DA4((const void **)(a1 + 24), (const void **)(a2 + 24));
  sub_100661870(a1 + 32, a2 + 32);
  uint64_t v4 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)(a1 + 64) = xpc_null_create();
  }
  return a1;
}

void sub_1010D82F0(_Unwind_Exception *a1)
{
  sub_1000558F4(v2);
  sub_100057D78(v1);
  _Unwind_Resume(a1);
}

const void **sub_1010D830C(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 64));
  *(void *)(a1 + 64) = 0;
  sub_1001472DC((void *)(a1 + 32));
  sub_1000558F4((const void **)(a1 + 24));

  return sub_100057D78((const void **)(a1 + 8));
}

uint64_t sub_1010D8360(uint64_t a1)
{
  *(void *)a1 = off_101A8B900;
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  sub_1001472DC((void *)(a1 + 16));
  return a1;
}

void sub_1010D83B8(uint64_t a1)
{
  *(void *)a1 = off_101A8B900;
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  sub_1001472DC((void *)(a1 + 16));

  operator delete();
}

void *sub_1010D8430(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = off_101A8B900;
  sub_1010D86D0(v2 + 1, v1);
  return v2;
}

void sub_1010D8484(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1010D8498(uint64_t a1, void *a2)
{
  *a2 = off_101A8B900;
  return sub_1010D86D0(a2 + 1, (void *)(a1 + 8));
}

void *sub_1010D84C4(uint64_t a1)
{
  return sub_1010D8724(a1 + 8);
}

void sub_1010D84CC(void *a1)
{
  sub_1010D8724((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1010D8508(void *a1, uint64_t *a2)
{
  uint64_t v8 = *a2;
  uint64_t v3 = v8;
  long long v9 = *(_OWORD *)(a2 + 1);
  uint64_t v4 = v9;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v5 = a1[1];
  if (v3 != v4)
  {
    while (*(unsigned char *)(v3 + 8) != 4)
    {
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_9;
      }
    }
  }
  if (v3 != v4)
  {
    xpc_object_t v12 = xpc_BOOL_create(1);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    v11[0] = a1 + 6;
    v11[1] = off_101B0AF60[0];
    sub_100035E70((uint64_t)v11, &v12, &v13);
    xpc_release(v13);
    xpc_object_t v13 = 0;
    xpc_release(v12);
    xpc_object_t v12 = 0;
  }
LABEL_9:
  uint64_t v6 = (void *)a1[6];
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v7 = a1[5];
  if (v7)
  {
    (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v7 + 48))(v7, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    sub_1010D0828(v5);
  }
  sub_10007B600();
}

void sub_1010D865C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t *a13)
{
  a13 = &a9;
  sub_10055D640((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D8684(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010D86C4()
{
}

void *sub_1010D86D0(void *a1, void *a2)
{
  *a1 = *a2;
  sub_100661870((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  uint64_t v4 = (void *)a2[5];
  a1[5] = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    a1[5] = xpc_null_create();
  }
  return a1;
}

void *sub_1010D8724(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;

  return sub_1001472DC((void *)(a1 + 8));
}

uint64_t *sub_1010D8768(void **a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v11 = a1;
  xpc_object_t v12 = v1;
  uint64_t v2 = *v1;
  xpc_object_t object = 0;
  std::string __p = v1 + 1;
  uint64_t v14 = off_101B0AF58[0];
  sub_10000CB28((uint64_t)&__p, &object);
  uint64_t v3 = *(void *)(v2 + 80);
  *(void *)long long buf = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&__p, (xpc *)buf, v4);
  sub_100DF2724(&v18, (CFTypeRef *)&__p);
  char v5 = (*(uint64_t (**)(uint64_t, const void **))(*(void *)v3 + 72))(v3, &v18);
  sub_1000FE824(&v18);
  sub_1000577C4((const void **)&__p);
  xpc_release(*(xpc_object_t *)buf);
  xpc_object_t v16 = xpc_BOOL_create(v5);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  std::string __p = v1 + 2;
  uint64_t v14 = off_101B0AF60[0];
  sub_100035E70((uint64_t)&__p, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  uint64_t v6 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    xpc::object::to_string((uint64_t *)&__p, (xpc::object *)(v1 + 2));
    uint64_t v7 = v15 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Reply dictionary after carrier bundle installation: %{public}s", buf, 0xCu);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v8 = (void *)v1[2];
  std::string __p = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    std::string __p = xpc_null_create();
  }
  uint64_t v9 = v1[6];
  if (!v9) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 48))(v9, &__p);
  xpc_release(__p);
  std::string __p = 0;
  xpc_release(object);
  sub_1010D8A5C((uint64_t *)&v12);
  return sub_100046B58((uint64_t *)&v11);
}

void sub_1010D89AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t *sub_1010D8A5C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_1001472DC((void *)(v1 + 24));
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    operator delete();
  }
  return result;
}

uint64_t *sub_1010D8ACC(void **a1)
{
  uint64_t v1 = *a1;
  xpc_object_t v12 = a1;
  xpc_object_t v13 = v1;
  uint64_t v2 = *v1;
  CFTypeRef cf = 0;
  *(void *)&v16[0] = v1 + 1;
  *((char **)&v16[0] + 1) = off_101B0B030[0];
  sub_100048BAC((uint64_t)v16, &object);
  xpc::bridge((uint64_t *)v18, (xpc *)&object, v3);
  sub_100044D6C(&cf, (CFTypeRef *)v18);
  sub_1000577C4((const void **)v18);
  xpc_release(object);
  *(void *)&v16[0] = v1 + 1;
  *((char **)&v16[0] + 1) = off_101B0B038[0];
  sub_100048BAC((uint64_t)v16, v18);
  uint64_t v5 = xpc::dyn_cast_or_default((xpc *)v18, 0, v4);
  xpc_release(v18[0]);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(v2 + 72) + 48))(v16);
  long long v6 = v16[0];
  v16[0] = 0uLL;
  uint64_t v7 = *(std::__shared_weak_count **)(v2 + 104);
  *(_OWORD *)(v2 + 96) = v6;
  if (v7)
  {
    sub_10004D2C8(v7);
    if (*((void *)&v16[0] + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v16[0] + 1));
    }
  }
  uint64_t v8 = *(void *)(v2 + 96);
  xpc_object_t object = (xpc_object_t)cf;
  if (cf) {
    CFRetain(cf);
  }
  sub_100661870((uint64_t)v16, (uint64_t)(v1 + 3));
  uint64_t v9 = (void *)v1[2];
  xpc_object_t v17 = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_object_t v19 = 0;
  uint64_t v10 = operator new(0x30uLL);
  void *v10 = off_101A8B990;
  sub_100661C4C((uint64_t)(v10 + 1), (uint64_t)v16);
  void v10[5] = v17;
  xpc_object_t v17 = xpc_null_create();
  xpc_object_t v19 = v10;
  (*(void (**)(uint64_t, xpc_object_t *, uint64_t, xpc_object_t *))(*(void *)v8 + 32))(v8, &object, v5, v18);
  sub_10055D77C(v18);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  sub_1001472DC(v16);
  sub_100044D00((const void **)&object);
  sub_100044D00(&cf);
  sub_1010D8DBC((uint64_t *)&v13);
  return sub_100046B58((uint64_t *)&v12);
}

void sub_1010D8CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, xpc_object_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,xpc_object_t a21)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1010D8DB4()
{
}

uint64_t *sub_1010D8DBC(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_1001472DC((void *)(v1 + 24));
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    operator delete();
  }
  return result;
}

uint64_t sub_1010D8E2C(uint64_t a1)
{
  *(void *)a1 = off_101A8B990;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  sub_1001472DC((void *)(a1 + 8));
  return a1;
}

void sub_1010D8E84(uint64_t a1)
{
  *(void *)a1 = off_101A8B990;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  sub_1001472DC((void *)(a1 + 8));

  operator delete();
}

void *sub_1010D8EFC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = off_101A8B990;
  sub_1010D921C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1010D8F50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D8F64(uint64_t a1, void *a2)
{
  *a2 = off_101A8B990;
  return sub_1010D921C((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_1010D8F90(uint64_t a1)
{
  return sub_1010D9268(a1 + 8);
}

void sub_1010D8F98(void *a1)
{
  sub_1010D9268((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1010D8FD4(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *a2;
  uint64_t v3 = v9;
  long long v10 = *(_OWORD *)(a2 + 1);
  uint64_t v4 = v10;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  if (v3 != v4)
  {
    uint64_t v6 = v3;
    while (*(unsigned char *)(v6 + 8) != 4)
    {
      v6 += 16;
      if (v6 == v4)
      {
        uint64_t v6 = v4;
        break;
      }
    }
  }
  xpc_object_t v16 = xpc_BOOL_create(v6 != v4);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  uint64_t v14 = (void **)(a1 + 40);
  char v15 = off_101B0AF60[0];
  sub_100035E70((uint64_t)&v14, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  if (v3 != v5)
  {
    while ((*(unsigned char *)(v3 + 8) & 0xFD) != 5)
    {
      v3 += 16;
      if (v3 == v5)
      {
        uint64_t v3 = v5;
        break;
      }
    }
  }
  xpc_object_t v12 = xpc_BOOL_create(v3 != v5);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  uint64_t v14 = (void **)(a1 + 40);
  char v15 = off_101B0B040[0];
  sub_100035E70((uint64_t)&v14, &v12, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  uint64_t v7 = *(void **)(a1 + 40);
  xpc_object_t v11 = v7;
  xpc_object_t v12 = 0;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v11 = xpc_null_create();
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v8 + 48))(v8, &v11);
  xpc_release(v11);
  uint64_t v14 = (void **)&v9;
  sub_10055D640(&v14);
}

void sub_1010D91A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, uint64_t *a15)
{
  a15 = &a9;
  sub_10055D640((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D91D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010D9210()
{
}

uint64_t sub_1010D921C(uint64_t a1, uint64_t a2)
{
  sub_100661870(a1, a2);
  uint64_t v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)(a1 + 32) = xpc_null_create();
  }
  return a1;
}

void *sub_1010D9268(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;

  return sub_1001472DC((void *)a1);
}

uint64_t *sub_1010D92AC(uint64_t **a1)
{
  uint64_t v1 = *a1;
  CFTypeRef v27 = a1;
  CFTypeRef v28 = v1;
  uint64_t v2 = *v1;
  if (!*(void *)(*v1 + 128))
  {
    sub_1010D090C(*v1, 1);
    xpc_object_t object = 0;
    *(void *)long long buf = v1 + 1;
    *(char **)&uint8_t buf[8] = off_101B0AF40[0];
    sub_10000CB28((uint64_t)buf, &object);
    xpc_object_t v34 = object;
    if (object) {
      xpc_retain(object);
    }
    else {
      xpc_object_t v34 = xpc_null_create();
    }
    uint64_t v6 = (os_log_t *)(v2 + 40);
    sub_1010D4208((os_log_t *)(v2 + 40), (uint64_t)&v34);
    xpc_release(v34);
    CFTypeRef v33 = 0;
    xpc_object_t v34 = 0;
    v42[0] = object;
    if (object) {
      xpc_retain(object);
    }
    else {
      v42[0] = xpc_null_create();
    }
    xpc::bridge((uint64_t *)buf, (xpc *)v42, v7);
    sub_10004EFE4(&v33, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    xpc_release(v42[0]);
    *(void *)long long buf = v1 + 1;
    *(char **)&uint8_t buf[8] = off_101B0B020[0];
    sub_100048BAC((uint64_t)buf, v42);
    unsigned __int8 v9 = xpc::dyn_cast_or_default((xpc *)v42, 0, v8);
    xpc_release(v42[0]);
    *(void *)long long buf = v1 + 1;
    *(void *)&uint8_t buf[8] = off_101B0B060;
    sub_100048BAC((uint64_t)buf, v42);
    char v11 = xpc::dyn_cast_or_default((xpc *)v42, 0, v10);
    xpc_release(v42[0]);
    if (v33) {
      xpc_object_t v12 = sub_100080778;
    }
    else {
      xpc_object_t v12 = 0;
    }
    if (!v12)
    {
      xpc_object_t v18 = *v6;
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "No matching criteria found", buf, 2u);
      }
      sub_1010D090C(v2, 0);
      xpc_object_t v19 = (void *)v1[2];
      *(void *)long long buf = v19;
      if (v19) {
        xpc_retain(v19);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      uint64_t v23 = v1[6];
      if (!v23) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v23 + 48))(v23, buf);
      xpc_release(*(xpc_object_t *)buf);
      *(void *)long long buf = 0;
      goto LABEL_58;
    }
    CFTypeRef cf = 0;
    sub_1006CEDDC((Registry **)(v2 + 56), (uint64_t *)&cf);
    if (cf) {
      xpc_object_t v13 = sub_1000810B8;
    }
    else {
      xpc_object_t v13 = 0;
    }
    if (!v13)
    {
      xpc_object_t v20 = *v6;
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Not a valid version.xml url", buf, 2u);
      }
      sub_1010D090C(v2, 0);
      long long v21 = (void *)v1[2];
      *(void *)long long buf = v21;
      if (v21) {
        xpc_retain(v21);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      uint64_t v25 = v1[6];
      if (!v25) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v25 + 48))(v25, buf);
      xpc_release(*(xpc_object_t *)buf);
      *(void *)long long buf = 0;
      goto LABEL_57;
    }
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(v2 + 72) + 96))(buf);
    long long v14 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    char v15 = *(std::__shared_weak_count **)(v2 + 120);
    *(_OWORD *)(v2 + 112) = v14;
    if (v15)
    {
      sub_10004D2C8(v15);
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
      if (*(void *)(v2 + 112)) {
        goto LABEL_27;
      }
    }
    else if ((void)v14)
    {
LABEL_27:
      CFTypeRef v31 = 0;
      sub_1006CEFC4(&v31);
      uint64_t v16 = *(void *)(v2 + 112);
      CFTypeRef v30 = cf;
      if (cf) {
        CFRetain(cf);
      }
      CFTypeRef v29 = v31;
      if (v31) {
        CFRetain(v31);
      }
      *(void *)long long buf = v2;
      *(void *)&uint8_t buf[8] = v33;
      if (v33) {
        CFRetain(v33);
      }
      char v37 = v9;
      CFTypeRef v38 = cf;
      if (cf) {
        CFRetain(cf);
      }
      char v39 = v11;
      xpc_object_t v17 = (void *)v1[2];
      xpc_object_t v40 = v17;
      if (v17) {
        xpc_retain(v17);
      }
      else {
        xpc_object_t v40 = xpc_null_create();
      }
      sub_100661870((uint64_t)v41, (uint64_t)(v1 + 3));
      long long v43 = 0;
      xpc_object_t v24 = (char *)operator new(0x58uLL);
      *(void *)xpc_object_t v24 = off_101A8BA10;
      *(_OWORD *)(v24 + 8) = *(_OWORD *)buf;
      v24[24] = v37;
      *((void *)v24 + 4) = v38;
      *(void *)&uint8_t buf[8] = 0;
      CFTypeRef v38 = 0;
      v24[40] = v39;
      *((void *)v24 + 6) = v40;
      xpc_object_t v40 = xpc_null_create();
      sub_100661C4C((uint64_t)(v24 + 56), (uint64_t)v41);
      long long v43 = v24;
      (*(void (**)(uint64_t, void, CFTypeRef *, CFTypeRef *, xpc_object_t *))(*(void *)v16 + 16))(v16, v9, &v30, &v29, v42);
      sub_10010E020(v42);
      sub_1001472DC(v41);
      xpc_release(v40);
      xpc_object_t v40 = 0;
      sub_1000558F4(&v38);
      sub_100057D78((const void **)&buf[8]);
      sub_100044D00(&v29);
      sub_1000558F4(&v30);
      sub_100044D00(&v31);
LABEL_57:
      sub_1000558F4(&cf);
LABEL_58:
      sub_100057D78(&v33);
      xpc_release(object);
      goto LABEL_59;
    }
    uint64_t v22 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to create downloader", buf, 2u);
    }
    sub_1010D0828(v2);
  }
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#N Carrier bundle update is already in progress, ignoring this request", buf, 2u);
  }
  uint64_t v4 = (void *)v1[2];
  *(void *)long long buf = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)long long buf = xpc_null_create();
  }
  uint64_t v5 = v1[6];
  if (!v5) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 48))(v5, buf);
  xpc_release(*(xpc_object_t *)buf);
LABEL_59:
  sub_1010D9B2C((uint64_t *)&v28);
  return sub_100046B58((uint64_t *)&v27);
}

void sub_1010D9940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,xpc_object_t a35,xpc_object_t object,xpc_object_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,xpc_object_t a42)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t *sub_1010D9B2C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_1001472DC((void *)(v1 + 24));
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    operator delete();
  }
  return result;
}

uint64_t sub_1010D9B9C(uint64_t a1)
{
  *(void *)a1 = off_101A8BA10;
  sub_1001472DC((void *)(a1 + 56));
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  sub_1000558F4((const void **)(a1 + 32));
  sub_100057D78((const void **)(a1 + 16));
  return a1;
}

void sub_1010D9C00(uint64_t a1)
{
  *(void *)a1 = off_101A8BA10;
  sub_1001472DC((void *)(a1 + 56));
  xpc_release(*(xpc_object_t *)(a1 + 48));
  *(void *)(a1 + 48) = 0;
  sub_1000558F4((const void **)(a1 + 32));
  sub_100057D78((const void **)(a1 + 16));

  operator delete();
}

void *sub_1010D9C84(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x58uLL);
  void *v2 = off_101A8BA10;
  sub_1010DA0EC((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1010D9CD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010D9CEC(uint64_t a1, void *a2)
{
  *a2 = off_101A8BA10;
  return sub_1010DA0EC((uint64_t)(a2 + 1), a1 + 8);
}

const void **sub_1010D9D18(uint64_t a1)
{
  return sub_1010DA1A8(a1 + 8);
}

void sub_1010D9D20(void *a1)
{
  sub_1010DA1A8((uint64_t)a1 + 8);

  operator delete(a1);
}

const void **sub_1010D9D5C(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = *a2;
  CFTypeRef v3 = cf;
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v3) {
    uint64_t v5 = sub_100080778;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!v5)
  {
    xpc_object_t v12 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#N Failed to load version.xml from the server", buf, 2u);
    }
    sub_1010D0828(v4);
  }
  uint64_t v6 = *(void *)(v4 + 72);
  sub_100058198(&v18, (const void **)(a1 + 16));
  uint64_t v7 = *(unsigned __int8 *)(a1 + 24);
  sub_100083DA4(&v17, (const void **)(a1 + 32));
  (*(void (**)(uint8_t *__return_ptr, uint64_t, const void **, uint64_t, const void **, void))(*(void *)v6 + 40))(buf, v6, &v18, v7, &v17, *(unsigned __int8 *)(a1 + 40));
  long long v8 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  unsigned __int8 v9 = *(std::__shared_weak_count **)(v4 + 104);
  *(_OWORD *)(v4 + 96) = v8;
  if (v9)
  {
    sub_10004D2C8(v9);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_1000558F4(&v17);
  sub_100057D78(&v18);
  uint64_t v10 = *(void *)(v4 + 96);
  CFTypeRef v16 = cf;
  if (cf) {
    CFRetain(cf);
  }
  sub_100661870((uint64_t)buf, a1 + 56);
  char v11 = *(void **)(a1 + 48);
  xpc_object_t object = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v21 = v4;
  uint64_t v23 = 0;
  xpc_object_t v13 = operator new(0x38uLL);
  *xpc_object_t v13 = off_101A8BA80;
  sub_100661C4C((uint64_t)(v13 + 1), (uint64_t)buf);
  v13[5] = object;
  xpc_object_t object = xpc_null_create();
  v13[6] = v21;
  uint64_t v23 = v13;
  (*(void (**)(uint64_t, CFTypeRef *, void *))(*(void *)v10 + 16))(v10, &v16, v22);
  sub_10055D77C(v22);
  xpc_release(object);
  xpc_object_t object = 0;
  sub_1001472DC(buf);
  sub_100057D78(&v16);
  return sub_100057D78(&cf);
}

void sub_1010DA004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, xpc_object_t a19, uint64_t a20,uint64_t a21,uint64_t a22,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t sub_1010DA0A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010DA0E0()
{
}

uint64_t sub_1010DA0EC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  sub_100058198((const void **)(a1 + 8), (const void **)(a2 + 8));
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  sub_100083DA4((const void **)(a1 + 24), (const void **)(a2 + 24));
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)(a1 + 40) = xpc_null_create();
  }
  sub_100661870(a1 + 48, a2 + 48);
  return a1;
}

void sub_1010DA178(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v2 + 40));
  *(void *)(v2 + 40) = 0;
  sub_1000558F4(v3);
  sub_100057D78(v1);
  _Unwind_Resume(a1);
}

const void **sub_1010DA1A8(uint64_t a1)
{
  sub_1001472DC((void *)(a1 + 48));
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  sub_1000558F4((const void **)(a1 + 24));

  return sub_100057D78((const void **)(a1 + 8));
}

uint64_t sub_1010DA1FC(uint64_t a1)
{
  *(void *)a1 = off_101A8BA80;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  sub_1001472DC((void *)(a1 + 8));
  return a1;
}

void sub_1010DA254(uint64_t a1)
{
  *(void *)a1 = off_101A8BA80;
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  sub_1001472DC((void *)(a1 + 8));

  operator delete();
}

void *sub_1010DA2CC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = off_101A8BA80;
  sub_1010DA564((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1010DA320(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010DA334(uint64_t a1, void *a2)
{
  *a2 = off_101A8BA80;
  return sub_1010DA564((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_1010DA360(uint64_t a1)
{
  return sub_1010DA5B8(a1 + 8);
}

void sub_1010DA368(void *a1)
{
  sub_1010DA5B8((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1010DA3A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *a2;
  uint64_t v2 = v7;
  long long v8 = *(_OWORD *)(a2 + 1);
  uint64_t v3 = v8;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 48);
  if (v2 != v3)
  {
    uint64_t v5 = v2 + 16;
    do
    {
      BOOL v6 = *(unsigned char *)(v5 - 8) == 4 || v5 == v3;
      v5 += 16;
    }
    while (!v6);
  }
  sub_1010D0828(v4);
}

void sub_1010DA4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, uint64_t *a13)
{
  a13 = &a9;
  sub_10055D640((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1010DA518(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010DA558()
{
}

uint64_t sub_1010DA564(uint64_t a1, uint64_t a2)
{
  sub_100661870(a1, a2);
  uint64_t v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)(a1 + 32) = xpc_null_create();
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

void *sub_1010DA5B8(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;

  return sub_1001472DC((void *)a1);
}

uint64_t sub_1010DA5FC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = **(void **)(result + 40);
  uint64_t v4 = *(void *)(v2 + 128);
  uint64_t v3 = *(void *)(v2 + 136);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1010DA620(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    sub_10004D2C8(v4);
  }
  if (*((void *)&v5 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_1010DA688(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    sub_10004D2C8(v4);
  }
  if (*((void *)&v5 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v5 + 1));
  }
}

uint64_t sub_1010DA6F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1010DA71C(uint64_t a1, int a2, void *a3)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v8, kCtLoggingSystemName, "wea");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v9, &v8);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, (const ctu::OsLogLogger *)v9);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v9);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v8);
  *(void *)(a1 + 8) = 0xB00000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v6 = a3[1];
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  ctu::TextConverter::TextConverter((ctu::TextConverter *)(a1 + 48));
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 76) = 0;
  *(void *)(a1 + 68) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = -1;
  *(unsigned char *)(a1 + 140) = 0;
  *(void *)(a1 + 144) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = a2;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  ctu::TextConverter::pushConversion();
  return a1;
}

void sub_1010DA824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  CFTypeRef v16 = *(std::__shared_weak_count **)(v12 + 168);
  if (v16) {
    sub_10004D2C8(v16);
  }
  if (*(char *)(v12 + 135) < 0) {
    operator delete(*(void **)(v12 + 112));
  }
  if (*(char *)(v12 + 111) < 0) {
    operator delete(*v14);
  }
  ctu::TextConverter::~TextConverter(v13);
  xpc_object_t v17 = *(std::__shared_weak_count **)(v12 + 40);
  if (v17) {
    sub_10004D2C8(v17);
  }
  xpc_object_t v18 = *(std::__shared_weak_count **)(v12 + 24);
  if (v18) {
    sub_10004D2C8(v18);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v12);
  _Unwind_Resume(a1);
}

uint64_t sub_1010DA8AC(uint64_t a1, char *__s, char *a3, int a4)
{
  if (a4 != 5)
  {
    if (a4 == 4)
    {
      LODWORD(v162.__r_.__value_.__l.__data_) = 0;
      LOBYTE(v160) = 0;
      size_t v7 = strlen(__s);
      ctu::TextConverter::setSource((ctu::TextConverter *)(a1 + 48), __s, v7);
      *(_DWORD *)(a1 + 68) = ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48)) << 8;
      *(_DWORD *)(a1 + 68) |= ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48));
      *(_DWORD *)(a1 + 72) = ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48)) << 8;
      *(_DWORD *)(a1 + 72) |= ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48));
      *(_DWORD *)(a1 + 76) = ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48));
      ctu::TextConverter::decodeCbsDataCodingScheme();
      int Code = ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48));
      int v9 = Code;
      *(_DWORD *)(a1 + 80) = Code;
      if ((Code & 0xF) != 0 && (Code & 0xF0) != 0)
      {
        if (Code >> 4 > (Code & 0xFu)) {
          goto LABEL_24;
        }
      }
      else
      {
        int v9 = 17;
        *(_DWORD *)(a1 + 80) = 17;
      }
      int v28 = *(_DWORD *)(a1 + 72);
      if (v28 == 4400)
      {
        memset(buf, 0, 24);
        sub_100058DB0(buf, __s);
        SourceCFIndex Count = ctu::TextConverter::getSourceCount((ctu::TextConverter *)(a1 + 48));
        unint64_t v30 = buf[23];
        if (buf[23] < 0) {
          unint64_t v30 = *(void *)&buf[8];
        }
        if (SourceCount > v30)
        {
          uint64_t v22 = *(NSObject **)a1;
          if (!os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
            goto LABEL_31;
          }
          LOWORD(__str.__r_.__value_.__l.__data_) = 0;
          goto LABEL_300;
        }
        std::string::size_type v46 = ctu::TextConverter::getSourceCount((ctu::TextConverter *)(a1 + 48));
        std::string::erase((std::string *)buf, 0, v46);
        if (buf[23] >= 0) {
          long long v47 = buf;
        }
        else {
          long long v47 = *(char **)buf;
        }
        goto LABEL_53;
      }
      CFTypeRef v31 = *(NSObject **)a1;
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = *(_DWORD *)(a1 + 68);
        int v33 = *(_DWORD *)(a1 + 76);
        *(_DWORD *)long long buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v28;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v32;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v33;
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&unsigned char buf[22] = v9;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I GSM Message ID: %u, Serial Number: %u, DCS: %u, Page parameter: %u", buf, 0x1Au);
      }
      if (LODWORD(v162.__r_.__value_.__l.__data_) != 3)
      {
        if (LODWORD(v162.__r_.__value_.__l.__data_) == 2)
        {
          long long v49 = *(NSObject **)a1;
          if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 134217984;
            *(void *)&uint8_t buf[4] = v7;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#I The message is in UCS2, the first 2 bytes may contain the language alphabet, PDU length: %zd", buf, 0xCu);
          }
          if ((_BYTE)v160)
          {
            size_t v50 = strlen(__s);
            if (v50 < 0x11)
            {
              uint64_t v103 = *(NSObject **)a1;
              if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_ERROR, "There are not enough bytes to proceed. Failed to parse the message", buf, 2u);
              }
              goto LABEL_221;
            }
            size_t v51 = v50;
            memset(buf, 0, 24);
            sub_100058DB0(&__str, __s);
            std::string::basic_string((std::string *)buf, &__str, 0xCuLL, 4uLL, (std::allocator<char> *)&v164);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            memset(&__str, 0, sizeof(__str));
            sub_1010DC758(&__str, (uint64_t *)buf);
            BOOL v52 = sub_1010DCD20((unsigned __int8 *)&__str);
            long long v53 = *(NSObject **)a1;
            if (v52)
            {
              if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
              {
                p_str = &__str;
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                LODWORD(v164.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v164.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
                _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#I Language encoding is valid, set to: %s", (uint8_t *)&v164, 0xCu);
              }
              std::string::operator=((std::string *)(a1 + 112), &__str);
              if (buf[23] >= 0) {
                uint64_t v55 = buf;
              }
              else {
                uint64_t v55 = *(const char **)buf;
              }
              sub_1010DCD94(a1, v55, 1, (uint64_t *)buf);
            }
            else
            {
              if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
              {
                LOWORD(v164.__r_.__value_.__l.__data_) = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "Language encoding invalid, detecting language from message body", (uint8_t *)&v164, 2u);
              }
              sub_100058DB0(&v163, __s);
              std::string::basic_string(&v164, &v163, 4uLL, v51 - 4, (std::allocator<char> *)v157);
              sub_1010DD1D8(a1, &v164, 0x10uLL);
              if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v164.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v163.__r_.__value_.__l.__data_);
              }
            }
            uint64_t v104 = *(NSObject **)a1;
            if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
            {
              sub_100058DB0(&v164, __s + 16);
              int v105 = (v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                   ? &v164
                   : (std::string *)v164.__r_.__value_.__r.__words[0];
              LODWORD(v163.__r_.__value_.__l.__data_) = 134218242;
              *(std::string::size_type *)((char *)v163.__r_.__value_.__r.__words + 4) = 16;
              WORD2(v163.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&v163.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v105;
              _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "#I Advancing the message start byte by %lu bytes, Message %s", (uint8_t *)&v163, 0x16u);
              if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v164.__r_.__value_.__l.__data_);
              }
            }
            ctu::TextConverter::setSource((ctu::TextConverter *)(a1 + 48), __s + 16, v51 - 16);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            uint64_t v101 = *(NSObject **)a1;
            if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "#I The decoding scheme is UCS2. But does not have language header", buf, 2u);
            }
            memset(buf, 0, 32);
            sub_1010DD538(buf, *(_DWORD *)(a1 + 76));
            if (buf[24])
            {
              std::string::operator=((std::string *)(a1 + 112), (const std::string *)buf);
              sub_1010DCD94(a1, "Dcs", 1, v102);
            }
            else
            {
              sub_100058DB0(&__str, __s);
              sub_1010DD1D8(a1, &__str, 0x10uLL);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
            }
            if (!buf[24]) {
              goto LABEL_221;
            }
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        else
        {
          if (LODWORD(v162.__r_.__value_.__l.__data_)) {
            goto LABEL_222;
          }
          ctu::TextConverter::pushConversion();
        }
LABEL_221:
        ctu::TextConverter::pushConversion();
        ctu::TextConverter::pushConversion();
LABEL_222:
        ctu::TextConverter::readChars((uint64_t *)buf, (ctu::TextConverter *)(a1 + 48), 0x7FFFFFFFuLL);
        uint64_t v106 = (void **)(a1 + 88);
        if (*(char *)(a1 + 111) < 0) {
          operator delete(*v106);
        }
        *(_OWORD *)uint64_t v106 = *(_OWORD *)buf;
        *(void *)(a1 + 104) = *(void *)&buf[16];
        uint64_t v107 = *(unsigned __int8 *)(a1 + 111);
        if (*(char *)(a1 + 111) < 0)
        {
          uint64_t v108 = *(char **)(a1 + 88);
          size_t v109 = *(void *)(a1 + 96);
        }
        else
        {
          uint64_t v108 = (char *)(a1 + 88);
          size_t v109 = *(unsigned __int8 *)(a1 + 111);
        }
        long long v110 = &v108[v109];
        uint64_t v111 = (char *)memchr(v108, 0, v109);
        if (v111) {
          long long v112 = v111;
        }
        else {
          long long v112 = v110;
        }
        if ((v107 & 0x80) != 0)
        {
          uint64_t v114 = *(void *)(a1 + 88);
          uint64_t v113 = (char *)(v114 + *(void *)(a1 + 96));
        }
        else
        {
          uint64_t v113 = (char *)v106 + v107;
          uint64_t v114 = a1 + 88;
        }
        std::string::erase((std::string *)(a1 + 88), (std::string::size_type)&v112[-v114], v113 - v112);
        if (!LODWORD(v162.__r_.__value_.__l.__data_))
        {
          memset(buf, 0, 32);
          sub_1010DD538(buf, *(_DWORD *)(a1 + 76));
          if ((_BYTE)v160)
          {
            sub_1010DD9CC((uint64_t)&__str, a1 + 88);
            uint64_t v115 = (void **)(a1 + 112);
            if (*(char *)(a1 + 135) < 0) {
              operator delete(*v115);
            }
            *(_OWORD *)uint64_t v115 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(void *)(a1 + 128) = *((void *)&__str.__r_.__value_.__l + 2);
          }
          else if (buf[24])
          {
            std::string::operator=((std::string *)(a1 + 112), (const std::string *)buf);
            sub_1010DCD94(a1, "Dcs", 1, v116);
          }
          if (buf[24] && (buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        sub_1010DC528(a1);
        os_log_t v117 = *(os_log_t *)a1;
        if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a1 + 111) < 0) {
            uint64_t v106 = (void **)*v106;
          }
          __int16 v118 = (void *)(a1 + 112);
          if (*(char *)(a1 + 135) < 0) {
            __int16 v118 = (void *)*v118;
          }
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = v106;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v118;
          BOOL v100 = v117;
          goto LABEL_249;
        }
        goto LABEL_250;
      }
LABEL_24:
      char v24 = 0;
      goto LABEL_251;
    }
    os_log_t v23 = *(os_log_t *)a1;
    char v24 = 0;
    if (!os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_251;
    }
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a4;
    uint64_t v25 = "#I Unknown message type %u";
    CFTypeRef v26 = v23;
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v25, buf, 8u);
    goto LABEL_24;
  }
  int v160 = 0;
  char v159 = 0;
  size_t v10 = strlen(__s);
  ctu::TextConverter::setSource((ctu::TextConverter *)(a1 + 48), __s, v10);
  int v11 = ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48));
  if (v11 != 1)
  {
    os_log_t v27 = *(os_log_t *)a1;
    char v24 = 0;
    if (!os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_251;
    }
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v11;
    uint64_t v25 = "#I Received a ETWS secondary message of type non-CBS: %d, discarding";
    CFTypeRef v26 = v27;
    goto LABEL_23;
  }
  *(_DWORD *)(a1 + 72) = ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48)) << 8;
  *(_DWORD *)(a1 + 72) |= ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48));
  *(_DWORD *)(a1 + 68) = ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48)) << 8;
  *(_DWORD *)(a1 + 68) |= ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48));
  *(_DWORD *)(a1 + 76) = ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48));
  ctu::TextConverter::decodeCbsDataCodingScheme();
  *(_DWORD *)(a1 + 80) = 17;
  int v12 = ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48));
  xpc_object_t v13 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(_DWORD *)(a1 + 68);
    int v14 = *(_DWORD *)(a1 + 72);
    int v16 = *(_DWORD *)(a1 + 76);
    int v17 = *(_DWORD *)(a1 + 80);
    if (v159) {
      xpc_object_t v18 = "true";
    }
    else {
      xpc_object_t v18 = "false";
    }
    *(_DWORD *)long long buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = v14;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v15;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v16;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&unsigned char buf[22] = v17;
    *(_WORD *)&buf[26] = 2080;
    *(void *)&buf[28] = v18;
    __int16 v166 = 1024;
    int v167 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I UMTS Message ID: %u, Serial Number: %u, DCS: %u, Page parameter: %u. Lang prefix present: %s Number of pages: %d", buf, 0x2Au);
  }
  xpc_object_t v19 = (uint64_t *)*(unsigned int *)(a1 + 72);
  if (v19 == 4400)
  {
    memset(buf, 0, 24);
    sub_100058DB0(buf, __s);
    unint64_t v20 = ctu::TextConverter::getSourceCount((ctu::TextConverter *)(a1 + 48));
    unint64_t v21 = buf[23];
    if (buf[23] < 0) {
      unint64_t v21 = *(void *)&buf[8];
    }
    if (v20 > v21)
    {
      uint64_t v22 = *(NSObject **)a1;
      if (!os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
      {
LABEL_31:
        char v24 = 0;
        goto LABEL_54;
      }
      LOWORD(__str.__r_.__value_.__l.__data_) = 0;
LABEL_300:
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to parse Wham. Invalid characters.", (uint8_t *)&__str, 2u);
      goto LABEL_31;
    }
    std::string::size_type v48 = ctu::TextConverter::getSourceCount((ctu::TextConverter *)(a1 + 48));
    std::string::erase((std::string *)buf, 0, v48);
    if (buf[23] >= 0) {
      long long v47 = buf;
    }
    else {
      long long v47 = *(char **)buf;
    }
LABEL_53:
    char v24 = sub_1010DD3BC(a1, v47);
LABEL_54:
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_251;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v19, *(Registry **)(a1 + 32));
  CFTypeRef v35 = ServiceMap;
  if (v36 < 0)
  {
    char v37 = (unsigned __int8 *)(v36 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v38 = 5381;
    do
    {
      uint64_t v36 = v38;
      unsigned int v39 = *v37++;
      uint64_t v38 = (33 * v38) ^ v39;
    }
    while (v39);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v36;
  xpc_object_t v40 = sub_10004D37C(&v35[1].__m_.__sig, (unint64_t *)buf);
  if (!v40)
  {
    uint64_t v42 = 0;
LABEL_72:
    std::mutex::unlock(v35);
    long long v41 = 0;
    char v43 = 1;
    if (!v42) {
      goto LABEL_44;
    }
LABEL_73:
    int v45 = (*(uint64_t (**)(uint64_t, void))(*(void *)v42 + 152))(v42, *(unsigned int *)(a1 + 156));
    uint64_t v56 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v57 = "false";
      if (v45) {
        uint64_t v57 = "true";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v57;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#I Carrier Requirement to ignore invalid page :- %s", buf, 0xCu);
    }
    goto LABEL_77;
  }
  uint64_t v42 = v40[3];
  long long v41 = (std::__shared_weak_count *)v40[4];
  if (!v41) {
    goto LABEL_72;
  }
  atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v35);
  atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v41);
  char v43 = 0;
  if (v42) {
    goto LABEL_73;
  }
LABEL_44:
  long long v44 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Invalid CellBroadcast Interface", buf, 2u);
  }
  LOBYTE(v45) = 0;
LABEL_77:
  char v153 = v45;
  if ((v43 & 1) == 0) {
    sub_10004D2C8(v41);
  }
  if (v12 < 1) {
    goto LABEL_190;
  }
  uint64_t v58 = 0;
  uint64_t v154 = (std::string *)(a1 + 112);
  uint64_t v155 = 166 * v12;
  int v59 = 89;
  while (1)
  {
    uint64_t v60 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v59 - 82;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#I Processing message starting at position %d", buf, 8u);
      uint64_t v60 = *(NSObject **)a1;
    }
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v59;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#I Valid bytes is at position %d", buf, 8u);
    }
    size_t v61 = strlen(__s);
    if (v61 < (v58 + 180))
    {
      size_t v94 = v61;
      unsigned int v95 = *(NSObject **)a1;
      if (!os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
        goto LABEL_189;
      }
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = v94;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = (v58 + 180);
      goto LABEL_302;
    }
    ctu::TextConverter::setSource((ctu::TextConverter *)(a1 + 48), &__s[(v58 + 178)], 2uLL);
    int v62 = ctu::TextConverter::nextCode((ctu::TextConverter *)(a1 + 48));
    int v63 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v62;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#I Valid bytes in this page are: %d", buf, 8u);
    }
    int v64 = v58 + 2 * v62 + 14;
    size_t v65 = strlen(__s);
    if (v65 < v64) {
      break;
    }
    memset(&__str, 0, sizeof(__str));
    sub_1000D95C8(&__str, &__s[(v58 + 14)], 2 * v62);
    int64_t v66 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v67 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v67 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v67;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#I Decoding hex string: %s", buf, 0xCu);
    }
    v157[0] = 0;
    v157[1] = 0;
    ctu::TextConverter::TextConverter((ctu::TextConverter *)v157);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v68 = &__str;
    }
    else {
      int v68 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    ctu::TextConverter::setSource((ctu::TextConverter *)v157, (const char *)v68, size);
    ctu::TextConverter::pushConversion();
    if (v160)
    {
      if (v160 == 2)
      {
        uint64_t v71 = *(NSObject **)a1;
        if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 134217984;
          *(void *)&uint8_t buf[4] = v10;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#I The message is in UCS2, the first 2 bytes may contain the language alphabet, PDU length: %zd", buf, 0xCu);
        }
        size_t v72 = (int)v58 + 18;
        if (v159)
        {
          if (v10 > v72)
          {
            memset(buf, 0, 24);
            sub_100058DB0(&v164, __s);
            std::string::basic_string((std::string *)buf, &v164, v72 - 4, 4uLL, (std::allocator<char> *)&v163);
            if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v164.__r_.__value_.__l.__data_);
            }
            memset(&v164, 0, sizeof(v164));
            sub_1010DC758(&v164, (uint64_t *)buf);
            BOOL v73 = sub_1010DCD20((unsigned __int8 *)&v164);
            uint64_t v74 = *(NSObject **)a1;
            if (v73)
            {
              if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
              {
                if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  BOOL v75 = &v164;
                }
                else {
                  BOOL v75 = (std::string *)v164.__r_.__value_.__r.__words[0];
                }
                LODWORD(v163.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)v163.__r_.__value_.__r.__words + 4) = (std::string::size_type)v75;
                _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#I Language encoding is valid, set to: %s", (uint8_t *)&v163, 0xCu);
              }
              std::string::operator=(v154, &v164);
              if (buf[23] >= 0) {
                unint64_t v76 = buf;
              }
              else {
                unint64_t v76 = *(const char **)buf;
              }
              sub_1010DCD94(a1, v76, 1, (uint64_t *)buf);
            }
            else
            {
              if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
              {
                LOWORD(v163.__r_.__value_.__l.__data_) = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "Language encoding invalid, detecting language from message body", (uint8_t *)&v163, 2u);
              }
              sub_100058DB0(&v162, __s);
              std::string::basic_string(&v163, &v162, 4uLL, v10 - 4, (std::allocator<char> *)&v161);
              sub_1010DD1D8(a1, &v163, (int)v58 + 18);
              if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v163.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v162.__r_.__value_.__l.__data_);
              }
            }
            int v80 = *(NSObject **)a1;
            if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
            {
              sub_100058DB0(&v163, &__s[v72]);
              xpc_object_t v81 = &v163;
              if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                xpc_object_t v81 = (std::string *)v163.__r_.__value_.__r.__words[0];
              }
              LODWORD(v162.__r_.__value_.__l.__data_) = 134218242;
              *(std::string::size_type *)((char *)v162.__r_.__value_.__r.__words + 4) = (int)v58 + 18;
              WORD2(v162.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&v162.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v81;
              _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "#I Advancing the message start byte by %lu bytes, Message %s", (uint8_t *)&v162, 0x16u);
              if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v163.__r_.__value_.__l.__data_);
              }
            }
            ctu::TextConverter::setSource((ctu::TextConverter *)v157, &__s[v72], 0xA0uLL);
            if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v164.__r_.__value_.__l.__data_);
            }
            goto LABEL_142;
          }
          uint64_t v79 = *(NSObject **)a1;
          if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "#I There are not enough bytes to proceed. Failed to parse the message", buf, 2u);
          }
        }
        else
        {
          uint64_t v77 = *(NSObject **)a1;
          if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "#I The decoding scheme is UCS2. But does not have language header", buf, 2u);
          }
          memset(buf, 0, 32);
          sub_1010DD538(buf, *(_DWORD *)(a1 + 76));
          if (buf[24])
          {
            std::string::operator=(v154, (const std::string *)buf);
            sub_1010DCD94(a1, "Dcs", 1, v78);
          }
          else
          {
            sub_100058DB0(&v164, __s);
            sub_1010DD1D8(a1, &v164, (int)v58 + 18);
            if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v164.__r_.__value_.__l.__data_);
            }
          }
          if (buf[24])
          {
LABEL_142:
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        ctu::TextConverter::pushConversion();
        ctu::TextConverter::pushConversion();
        goto LABEL_145;
      }
      if (v160 == 3)
      {
        char v70 = 0;
        goto LABEL_181;
      }
    }
    else
    {
      ctu::TextConverter::pushConversion();
      ctu::TextConverter::pushConversion();
      ctu::TextConverter::pushConversion();
    }
LABEL_145:
    memset(&v164, 0, sizeof(v164));
    ctu::TextConverter::readChars((uint64_t *)&v164, (ctu::TextConverter *)v157, 0x7FFFFFFFuLL);
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFTypeID v82 = &v164;
    }
    else {
      CFTypeID v82 = (std::string *)v164.__r_.__value_.__r.__words[0];
    }
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v83 = HIBYTE(v164.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v83 = v164.__r_.__value_.__l.__size_;
    }
    os_log_t v84 = (char *)v82 + v83;
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v85 = (char *)&v164 + HIBYTE(v164.__r_.__value_.__r.__words[2]);
    }
    else {
      BOOL v85 = (char *)(v164.__r_.__value_.__r.__words[0] + v164.__r_.__value_.__l.__size_);
    }
    int v86 = memchr(v82, 0, v83);
    if (v86) {
      int v87 = v86;
    }
    else {
      int v87 = v84;
    }
    std::string::erase(&v164, v87 - (unsigned char *)v82, v85 - v87);
    unint64_t v88 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v89 = HIBYTE(v164.__r_.__value_.__r.__words[2]);
      if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        long long v90 = &v164;
      }
      else
      {
        std::string::size_type v89 = v164.__r_.__value_.__l.__size_;
        long long v90 = (std::string *)v164.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 134218242;
      *(void *)&uint8_t buf[4] = v89;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v90;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "#I Decoded characters length after remaining valid bytes: %lu, body: %s", buf, 0x16u);
    }
    if (!v160)
    {
      memset(buf, 0, 32);
      sub_1010DD538(buf, *(_DWORD *)(a1 + 76));
      if (v159)
      {
        sub_1010DD9CC((uint64_t)&v163, (uint64_t)&v164);
        if (*(char *)(a1 + 135) < 0) {
          operator delete(v154->__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&v154->__r_.__value_.__l.__data_ = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
        *(void *)(a1 + 128) = *((void *)&v163.__r_.__value_.__l + 2);
      }
      else if (buf[24])
      {
        std::string::operator=(v154, (const std::string *)buf);
        sub_1010DCD94(a1, "Dcs", 1, v91);
      }
      if (buf[24] && (buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v92 = &v164;
    }
    else {
      std::string v92 = (std::string *)v164.__r_.__value_.__r.__words[0];
    }
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v93 = HIBYTE(v164.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v93 = v164.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 88), (const std::string::value_type *)v92, v93);
    if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v164.__r_.__value_.__l.__data_);
    }
    char v70 = 1;
LABEL_181:
    ctu::TextConverter::~TextConverter((ctu::TextConverter *)v157);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if ((v70 & 1) == 0) {
      goto LABEL_24;
    }
    v58 += 166;
    v59 += 83;
    if (v155 == v58) {
      goto LABEL_190;
    }
  }
  size_t v96 = v65;
  unsigned int v95 = *(NSObject **)a1;
  if (!os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR)) {
    goto LABEL_189;
  }
  *(_DWORD *)long long buf = 134218240;
  *(void *)&uint8_t buf[4] = v96;
  *(_WORD *)&unsigned char buf[12] = 2048;
  *(void *)&buf[14] = v64;
LABEL_302:
  _os_log_error_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_ERROR, "PDU length: %lu is lesser than expected: %lu", buf, 0x16u);
LABEL_189:
  if ((v153 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_190:
  sub_1010DC528(a1);
  os_log_t v97 = *(os_log_t *)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v98 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      __int16 v98 = (void *)*v98;
    }
    int v99 = (void *)(a1 + 112);
    if (*(char *)(a1 + 135) < 0) {
      int v99 = (void *)*v99;
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v98;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v99;
    BOOL v100 = v97;
LABEL_249:
    _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "#I Decoded Body: [%{public}s] Detected Lang: [%{public}s]", buf, 0x16u);
  }
LABEL_250:
  char v24 = 1;
LABEL_251:
  if (*(_DWORD *)(a1 + 72) == 4400)
  {
    uint64_t v119 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "#I Wham detected", buf, 2u);
    }
    if (!*(void *)(a1 + 160))
    {
      unsigned int v120 = *(NSObject **)a1;
      BOOL v121 = os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v121)
      {
        *(_WORD *)long long buf = 0;
        v123 = "#I Failed to decode Wham";
        goto LABEL_277;
      }
      return result;
    }
    return 1;
  }
  if (v24)
  {
    unsigned int v124 = *(_DWORD *)(a1 + 68);
    if (((unsigned __int16)v124 >> 14) - 1 >= 2) {
      int v125 = 0;
    }
    else {
      int v125 = (unsigned __int16)v124 >> 14;
    }
    *(_DWORD *)(a1 + 136) = v125;
    char v126 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v127 = asString();
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v127;
      _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "#I Geographical scope: %s", buf, 0xCu);
      unsigned int v124 = *(_DWORD *)(a1 + 68);
      char v126 = *(NSObject **)a1;
    }
    *(unsigned char *)(a1 + 140) = (v124 & 0xC000) == 0;
    if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = (v124 & 0xC000) == 0;
      _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "#I Is urgent: %d", buf, 8u);
      unsigned int v124 = *(_DWORD *)(a1 + 68);
      char v126 = *(NSObject **)a1;
    }
    *(_DWORD *)(a1 + 144) = (v124 >> 4) & 0x3FF;
    if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = (v124 >> 4) & 0x3FF;
      _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "#I Message code: %d", buf, 8u);
      unsigned int v124 = *(_DWORD *)(a1 + 68);
      char v126 = *(NSObject **)a1;
    }
    int v128 = v124 & 0xF;
    *(_DWORD *)(a1 + 148) = v128;
    if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v128;
      _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "#I Update number: %d", buf, 8u);
    }
    char v130 = (std::mutex *)Registry::getServiceMap(v129, *(Registry **)(a1 + 32));
    uint64_t v131 = v130;
    if (v132 < 0)
    {
      BOOL v133 = (unsigned __int8 *)(v132 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v134 = 5381;
      do
      {
        uint64_t v132 = v134;
        unsigned int v135 = *v133++;
        uint64_t v134 = (33 * v134) ^ v135;
      }
      while (v135);
    }
    std::mutex::lock(v130);
    *(void *)long long buf = v132;
    CFDictionaryRef v136 = sub_10004D37C(&v131[1].__m_.__sig, (unint64_t *)buf);
    if (v136)
    {
      uint64_t v138 = v136[3];
      uint64_t v137 = (std::__shared_weak_count *)v136[4];
      if (v137)
      {
        atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v131);
        atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v137);
        char v139 = 0;
        goto LABEL_280;
      }
    }
    else
    {
      uint64_t v138 = 0;
    }
    std::mutex::unlock(v131);
    uint64_t v137 = 0;
    char v139 = 1;
LABEL_280:
    int v141 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v138 + 128))(v138, *(unsigned int *)(a1 + 156), *(unsigned int *)(a1 + 72));
    if ((v139 & 1) == 0) {
      sub_10004D2C8(v137);
    }
    if (v141)
    {
      int v142 = (*(_DWORD *)(a1 + 144) >> 9) & 1;
      *(unsigned char *)(a1 + 152) = (*(_DWORD *)(a1 + 144) & 0x200) != 0;
      unint64_t v143 = *(NSObject **)a1;
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v142;
        _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_DEFAULT, "#I Is this message a Emergency alert: %d", buf, 8u);
      }
    }
    if (a3 && *a3)
    {
      *(_DWORD *)(a1 + 8) = 1;
      uint64_t v144 = operator new(0x78uLL);
      v144[1] = 0;
      v144[2] = 0;
      *uint64_t v144 = off_101A8BB70;
      uint64_t v145 = sub_1012F6D24((uint64_t)(v144 + 3), (Registry **)(a1 + 32));
      uint64_t v146 = *(std::__shared_weak_count **)(a1 + 24);
      *(void *)(a1 + 16) = v145;
      *(void *)(a1 + 24) = v144;
      if (v146)
      {
        sub_10004D2C8(v146);
        uint64_t v145 = *(void *)(a1 + 16);
      }
      sub_1012F6FA8(v145, a3);
      os_log_t v147 = *(os_log_t *)a1;
      if (!os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      if (*(unsigned char *)(*(void *)(a1 + 16) + 81)) {
        unint64_t v148 = "true";
      }
      else {
        unint64_t v148 = "false";
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "true";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v148;
      int v149 = "#I Wea decode success: %s Wac decode success: %s";
      char v150 = v147;
      uint32_t v151 = 22;
    }
    else
    {
      uint64_t v152 = *(NSObject **)a1;
      if (!os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "true";
      int v149 = "#I Wea decode success: %s";
      char v150 = v152;
      uint32_t v151 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEFAULT, v149, buf, v151);
    return 1;
  }
  unsigned int v120 = *(NSObject **)a1;
  BOOL v140 = os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v140)
  {
    *(_WORD *)long long buf = 0;
    v123 = "#I PDU parsing has failed, discarding the message";
LABEL_277:
    _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, v123, buf, 2u);
    return 0;
  }
  return result;
}

void sub_1010DC320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(v48 - 136))
  {
    if (*(char *)(v48 - 137) < 0) {
      operator delete(*(void **)(v48 - 160));
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1010DC528(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 80) & 0xE) != 0)
  {
    uint64_t v2 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      long long v3 = "#I Skipping trimming of extra chars on non-concatenated message";
LABEL_4:
      uint64_t v4 = v2;
      uint32_t v5 = 2;
LABEL_5:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)&v16, v5);
    }
  }
  else
  {
    uint64_t v6 = a1 + 88;
    if (*(char *)(a1 + 111) < 0)
    {
      uint64_t v8 = *(void *)(a1 + 88);
      uint64_t v7 = *(void *)(a1 + 96);
    }
    else
    {
      uint64_t v7 = *(unsigned __int8 *)(a1 + 111);
      uint64_t v8 = a1 + 88;
    }
    uint64_t v9 = v8 - 1;
    while (v7)
    {
      if (!memchr(" \n\r\t\f\v", *(char *)(v9 + v7--), 6uLL)) {
        goto LABEL_14;
      }
    }
    uint64_t v7 = -1;
LABEL_14:
    int v11 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 134217984;
      uint64_t v17 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Last non cr is at position: %lu", (uint8_t *)&v16, 0xCu);
    }
    if (v7 == -1)
    {
      if (*(char *)(a1 + 111) < 0)
      {
        **(unsigned char **)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
      }
      else
      {
        *(unsigned char *)(a1 + 88) = 0;
        *(unsigned char *)(a1 + 111) = 0;
      }
      uint64_t v2 = *(NSObject **)a1;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v16) = 0;
        long long v3 = "#I There are no non-cr chars...";
        goto LABEL_4;
      }
    }
    else
    {
      std::string::size_type v12 = v7 + 1;
      if (*(char *)(a1 + 111) < 0) {
        std::string::size_type v13 = *(void *)(a1 + 96);
      }
      else {
        std::string::size_type v13 = *(unsigned __int8 *)(a1 + 111);
      }
      if (v12 < v13)
      {
        std::string::erase((std::string *)(a1 + 88), v12, 0xFFFFFFFFFFFFFFFFLL);
        os_log_t v14 = *(os_log_t *)a1;
        if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a1 + 111) < 0)
          {
            uint64_t v6 = *(void *)(a1 + 88);
            uint64_t v15 = *(void *)(a1 + 96);
          }
          else
          {
            uint64_t v15 = *(unsigned __int8 *)(a1 + 111);
          }
          int v16 = 134218242;
          uint64_t v17 = v15;
          __int16 v18 = 2080;
          uint64_t v19 = v6;
          long long v3 = "#I Decoded characters with cr removed length: %lu, body: %s";
          uint64_t v4 = v14;
          uint32_t v5 = 22;
          goto LABEL_5;
        }
      }
    }
  }
}

void sub_1010DC758(std::string *a1, uint64_t *a2)
{
  memset(&__str, 0, sizeof(__str));
  sub_100058DB0(&__str, "");
  BOOL v4 = *((char *)a2 + 23) < 0;
  uint64_t v5 = *((unsigned __int8 *)a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a2[1];
  }
  if (v5)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 1;
    do
    {
      if (v4) {
        uint64_t v8 = (uint64_t *)*a2;
      }
      else {
        uint64_t v8 = a2;
      }
      unsigned int v9 = __toupper(*((char *)v8 + v6)) - 48;
      size_t v10 = "";
      if (v9 <= 0x16) {
        size_t v10 = off_101A8BC00[v9];
      }
      sub_100058DB0(&v41, v10);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v11 = &v41;
      }
      else {
        int v11 = (std::string *)v41.__r_.__value_.__r.__words[0];
      }
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v41.__r_.__value_.__l.__size_;
      }
      std::string::append(&__str, (const std::string::value_type *)v11, size);
      if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v41.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = v7;
      BOOL v4 = *((char *)a2 + 23) < 0;
      unint64_t v13 = *((unsigned __int8 *)a2 + 23);
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = a2[1];
      }
    }
    while (v13 > v7++);
  }
  memset(&v41, 0, sizeof(v41));
  std::string::basic_string(&v41, &__str, 0, 8uLL, (std::allocator<char> *)&v40);
  memset(&v40, 0, sizeof(v40));
  std::string::basic_string(&v40, &__str, 8uLL, 8uLL, (std::allocator<char> *)&v39);
  uint64_t v15 = &v41;
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v15 = (std::string *)v41.__r_.__value_.__r.__words[0];
  }
  std::string::push_back(&v40, v15->__r_.__value_.__s.__data_[0]);
  std::string::basic_string(&v39, &v41, 1uLL, 7uLL, (std::allocator<char> *)&v38);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  std::string v41 = v39;
  std::string::basic_string(&v39, &v40, 2uLL, 7uLL, (std::allocator<char> *)&v38);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::string v40 = v39;
  std::operator+<char>();
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  std::string v41 = v39;
  std::operator+<char>();
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  std::string v40 = v39;
  memset(&v39, 0, sizeof(v39));
  sub_100058DB0(&v39, "");
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  sub_100058DB0(a1, "");
  std::string::size_type v16 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v16 = v41.__r_.__value_.__l.__size_;
  }
  if (v16)
  {
    for (std::string::size_type i = 0; i < v22; i += 4)
    {
      memset(&v38, 0, sizeof(v38));
      std::string::basic_string(&v38, &v41, i, 4uLL, (std::allocator<char> *)&__p);
      __int16 v18 = (ctu *)std::stoul(&v38, 0, 2);
      std::string __p = 0;
      std::string::size_type v36 = 0;
      uint64_t v37 = 0;
      ctu::hex((uint64_t *)&__p, v18, v19);
      if (v37 >= 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if (v37 >= 0) {
        std::string::size_type v21 = HIBYTE(v37);
      }
      else {
        std::string::size_type v21 = v36;
      }
      std::string::append(&v39, p_p, v21);
      if (SHIBYTE(v37) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      std::string::size_type v22 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v22 = v41.__r_.__value_.__l.__size_;
      }
    }
  }
  sub_1010DDCC0(&v38, (uint64_t)&v39);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    os_log_t v23 = &v38;
  }
  else {
    os_log_t v23 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v24 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v24 = v38.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v23, v24);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
  {
    v39.__r_.__value_.__l.__size_ = 0;
    uint64_t v25 = (std::string *)v39.__r_.__value_.__r.__words[0];
  }
  else
  {
    *((unsigned char *)&v39.__r_.__value_.__s + 23) = 0;
    uint64_t v25 = &v39;
  }
  v25->__r_.__value_.__s.__data_[0] = 0;
  std::string::size_type v26 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v26 = v40.__r_.__value_.__l.__size_;
  }
  if (v26)
  {
    for (std::string::size_type j = 0; j < v32; j += 4)
    {
      memset(&v38, 0, sizeof(v38));
      std::string::basic_string(&v38, &v40, j, 4uLL, (std::allocator<char> *)&__p);
      int v28 = (ctu *)std::stoul(&v38, 0, 2);
      std::string __p = 0;
      std::string::size_type v36 = 0;
      uint64_t v37 = 0;
      ctu::hex((uint64_t *)&__p, v28, v29);
      if (v37 >= 0) {
        unint64_t v30 = (const std::string::value_type *)&__p;
      }
      else {
        unint64_t v30 = (const std::string::value_type *)__p;
      }
      if (v37 >= 0) {
        std::string::size_type v31 = HIBYTE(v37);
      }
      else {
        std::string::size_type v31 = v36;
      }
      std::string::append(&v39, v30, v31);
      if (SHIBYTE(v37) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      std::string::size_type v32 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v32 = v40.__r_.__value_.__l.__size_;
      }
    }
  }
  sub_1010DDCC0(&v38, (uint64_t)&v39);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v33 = &v38;
  }
  else {
    int v33 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v34 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v34 = v38.__r_.__value_.__l.__size_;
  }
  std::string::append(a1, (const std::string::value_type *)v33, v34);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1010DCC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v34 - 73) < 0) {
    operator delete(*(void **)(v34 - 96));
  }
  if (*(char *)(v34 - 49) < 0) {
    operator delete(*(void **)(v34 - 72));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010DCD20(unsigned __int8 *a1)
{
  unint64_t v1 = a1[23];
  int v2 = (char)v1;
  if ((v1 & 0x80u) != 0) {
    unint64_t v1 = *((void *)a1 + 1);
  }
  if (!v1) {
    return 1;
  }
  if (v2 >= 0) {
    long long v3 = a1;
  }
  else {
    long long v3 = *(unsigned __int8 **)a1;
  }
  if (*v3 - 123 < 0xFFFFFFE6) {
    return 0;
  }
  uint64_t v5 = 1;
  do
  {
    unint64_t v6 = v5;
    if (v1 == v5) {
      break;
    }
    ++v5;
  }
  while (v3[v6] - 123 > 0xFFFFFFE5);
  return v6 >= v1;
}

void sub_1010DCD94(uint64_t a1@<X0>, const char *a2@<X1>, BOOL a3@<W2>, uint64_t *a4@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a4, *(Registry **)(a1 + 32));
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    size_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v9;
  unint64_t v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)buf);
  if (v13)
  {
    uint64_t v15 = v13[3];
    os_log_t v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v16 = 0;
      if (!v15) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  os_log_t v14 = 0;
  char v16 = 1;
  if (!v15)
  {
LABEL_7:
    uint64_t v17 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "AnalyticsInterface not found.", buf, 2u);
    }
    goto LABEL_41;
  }
LABEL_11:
  xpc_object_t v34 = 0;
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v19 = v18;
  if (v18)
  {
    xpc_object_t v34 = v18;
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
    xpc_object_t v34 = v19;
    if (!v19)
    {
      xpc_object_t v20 = xpc_null_create();
      xpc_object_t v19 = 0;
      goto LABEL_18;
    }
  }
  if (xpc_get_type(v19) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v20 = xpc_null_create();
LABEL_18:
    xpc_object_t v34 = v20;
    goto LABEL_19;
  }
  xpc_retain(v19);
LABEL_19:
  xpc_release(v19);
  xpc_object_t v32 = xpc_string_create(a2);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  *(void *)long long buf = &v34;
  *(void *)&uint8_t buf[8] = "LanguageBytes";
  sub_100035E70((uint64_t)buf, &v32, &v33);
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_release(v32);
  xpc_object_t v32 = 0;
  if (a3)
  {
    if (*(char *)(a1 + 135) < 0)
    {
      sub_10004FC84(buf, *(void **)(a1 + 112), *(void *)(a1 + 120));
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)(a1 + 112);
      uint64_t v29 = *(void *)(a1 + 128);
    }
  }
  else
  {
    sub_100058DB0(buf, "Invalid");
  }
  if (v29 >= 0) {
    std::string::size_type v21 = buf;
  }
  else {
    std::string::size_type v21 = *(uint8_t **)buf;
  }
  xpc_object_t v30 = xpc_string_create((const char *)v21);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  v27[0] = &v34;
  v27[1] = "DetectedLanguage";
  sub_100035E70((uint64_t)v27, &v30, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v30);
  xpc_object_t v30 = 0;
  if (SHIBYTE(v29) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_object_t v25 = xpc_BOOL_create(a3);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  *(void *)long long buf = &v34;
  *(void *)&uint8_t buf[8] = "isSuccess";
  sub_100035E70((uint64_t)buf, &v25, &v26);
  xpc_release(v26);
  xpc_object_t v26 = 0;
  xpc_release(v25);
  xpc_object_t v25 = 0;
  xpc_object_t v23 = xpc_int64_create(*(unsigned int *)(a1 + 76));
  if (!v23) {
    xpc_object_t v23 = xpc_null_create();
  }
  *(void *)long long buf = &v34;
  *(void *)&uint8_t buf[8] = "DcsValue";
  sub_100035E70((uint64_t)buf, &v23, &v24);
  xpc_release(v24);
  xpc_object_t v24 = 0;
  xpc_release(v23);
  xpc_object_t v22 = v34;
  xpc_object_t v23 = 0;
  if (v34) {
    xpc_retain(v34);
  }
  else {
    xpc_object_t v22 = xpc_null_create();
  }
  (*(void (**)(uint64_t, const char *, xpc_object_t *))(*(void *)v15 + 16))(v15, "commCenterCbPduLanguageDetection", &v22);
  xpc_release(v22);
  xpc_object_t v22 = 0;
  xpc_release(v34);
LABEL_41:
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_1010DD150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(*(xpc_object_t *)(v12 - 72));
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(a1);
}

void sub_1010DD1D8(uint64_t a1, std::string *__str, std::string::size_type a3)
{
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size <= a3)
  {
    xpc_object_t v18 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "There are not enough bytes to proceed. Failed to parse the message", (uint8_t *)&__p, 2u);
    }
  }
  else
  {
    std::string::size_type v5 = a3 - 4;
    std::string::size_type v6 = size - 4;
    if (a3 - 4 >= size - 4) {
      goto LABEL_26;
    }
    char v8 = 0;
    do
    {
      memset(&__p, 0, sizeof(__p));
      std::string::basic_string(&__p, __str, v5, 4uLL, (std::allocator<char> *)&v20);
      unsigned __int16 v9 = std::stoul(&__p, 0, 16);
      uint64_t v10 = qword_101B13130;
      if ((uint64_t *)qword_101B13130 != &qword_101B13138)
      {
        unsigned int v11 = v9;
        do
        {
          if (v11 > *(unsigned __int16 *)(v10 + 32) && v11 < *(unsigned __int16 *)(v10 + 34))
          {
            std::string::operator=((std::string *)(a1 + 112), (const std::string *)(v10 + 40));
            unint64_t v13 = (uint64_t *)SHIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((int)v13 >= 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            char v8 = 1;
            sub_1010DCD94(a1, (const char *)p_p, 1, v13);
          }
          uint64_t v15 = *(uint64_t **)(v10 + 8);
          if (v15)
          {
            do
            {
              char v16 = v15;
              uint64_t v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              char v16 = *(uint64_t **)(v10 + 16);
              BOOL v17 = *v16 == v10;
              uint64_t v10 = (uint64_t)v16;
            }
            while (!v17);
          }
          uint64_t v10 = (uint64_t)v16;
        }
        while (v16 != &qword_101B13138);
      }
      std::string::size_type size = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((size & 0x80000000) != 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v5 += 4;
    }
    while (v5 < v6);
    if ((v8 & 1) == 0) {
LABEL_26:
    }
      sub_1010DCD94(a1, "Invalid", 0, (uint64_t *)size);
  }
}

void sub_1010DD39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010DD3BC(uint64_t a1, char *a2)
{
  BOOL v4 = operator new(0x38uLL);
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void *v4 = off_101A8BBC0;
  sub_101092F14((ctu::OsLogLogger *)(v4 + 3));
  std::string::size_type v5 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 160) = v4 + 3;
  *(void *)(a1 + 168) = v4;
  if (v5) {
    sub_10004D2C8(v5);
  }
  std::string::size_type v6 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136446210;
    unint64_t v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Wham str: %{public}s", (uint8_t *)&v12, 0xCu);
  }
  uint64_t v7 = sub_1010932E0(*(os_log_t **)(a1 + 160), a2);
  char v8 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int16 v9 = "false";
    if (v7) {
      unsigned __int16 v9 = "true";
    }
    int v12 = 136315138;
    unint64_t v13 = (void *)v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Wham decoding success: %s", (uint8_t *)&v12, 0xCu);
  }
  if ((v7 & 1) == 0)
  {
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 168);
    *(void *)(a1 + 160) = 0;
    *(void *)(a1 + 168) = 0;
    if (v10) {
      sub_10004D2C8(v10);
    }
  }
  return v7;
}

void sub_1010DD538(void *__dst, unsigned int a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B13128, memory_order_acquire) & 1) == 0)
  {
    unsigned int v9 = a2;
    int v10 = __cxa_guard_acquire(&qword_101B13128);
    a2 = v9;
    if (v10)
    {
      LODWORD(v12) = 0;
      sub_100058DB0(v13, "de");
      int v14 = 1;
      sub_100058DB0(v15, "en");
      int v16 = 2;
      sub_100058DB0(v17, "it");
      int v18 = 3;
      sub_100058DB0(v19, "fr");
      int v20 = 4;
      sub_100058DB0(v21, "es");
      int v22 = 5;
      sub_100058DB0(v23, "nl");
      int v24 = 6;
      sub_100058DB0(v25, "sv");
      int v26 = 7;
      sub_100058DB0(v27, "da");
      int v28 = 8;
      sub_100058DB0(v29, "pt");
      int v30 = 9;
      sub_100058DB0(v31, "fi");
      int v32 = 10;
      sub_100058DB0(v33, "no");
      int v34 = 11;
      sub_100058DB0(v35, "el");
      int v36 = 12;
      sub_100058DB0(v37, "tr");
      int v38 = 13;
      sub_100058DB0(v39, "hu");
      int v40 = 14;
      sub_100058DB0(v41, "pl");
      int v42 = 32;
      sub_100058DB0(v43, "cs");
      int v44 = 33;
      sub_100058DB0(v45, "he");
      int v46 = 34;
      sub_100058DB0(v47, "ar");
      int v48 = 35;
      sub_100058DB0(v49, "ru");
      int v50 = 36;
      sub_100058DB0(v51, "is");
      sub_1010DDDF0(&v12, 20);
      uint64_t v11 = 80;
      do
      {
        if (*((char *)&v13[v11 - 1] - 1) < 0) {
          operator delete((void *)v13[v11 - 4]);
        }
        v11 -= 4;
      }
      while (v11 * 8);
      __cxa_atexit((void (*)(void *))sub_1010DDDC4, &qword_101B13148, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101B13128);
      a2 = v9;
    }
  }
  uint64_t v3 = qword_101B13150;
  if (!qword_101B13150)
  {
LABEL_8:
    char v6 = 0;
    *(unsigned char *)long long __dst = 0;
    goto LABEL_18;
  }
  uint64_t v4 = qword_101B13150;
  while (1)
  {
    unsigned int v5 = *(_DWORD *)(v4 + 32);
    if (v5 <= a2) {
      break;
    }
LABEL_7:
    uint64_t v4 = *(void *)v4;
    if (!v4) {
      goto LABEL_8;
    }
  }
  if (v5 < a2)
  {
    v4 += 8;
    goto LABEL_7;
  }
  while (1)
  {
    while (1)
    {
      unsigned int v7 = *(_DWORD *)(v3 + 32);
      if (v7 <= a2) {
        break;
      }
      uint64_t v3 = *(void *)v3;
      if (!v3) {
LABEL_19:
      }
        sub_1000C14F0("map::at:  key not found");
    }
    if (v7 >= a2) {
      break;
    }
    uint64_t v3 = *(void *)(v3 + 8);
    if (!v3) {
      goto LABEL_19;
    }
  }
  if (*(char *)(v3 + 63) < 0)
  {
    sub_10004FC84(__dst, *(void **)(v3 + 40), *(void *)(v3 + 48));
  }
  else
  {
    long long v8 = *(_OWORD *)(v3 + 40);
    __dst[2] = *(void *)(v3 + 56);
    *(_OWORD *)long long __dst = v8;
  }
  char v6 = 1;
LABEL_18:
  *((unsigned char *)__dst + 24) = v6;
}

void sub_1010DD914(_Unwind_Exception *a1)
{
  uint64_t v3 = 640;
  while (1)
  {
    if (*(char *)(v1 + v3 - 1) < 0) {
      operator delete(*(void **)(v1 + v3 - 24));
    }
    v3 -= 32;
    if (!v3)
    {
      __cxa_guard_abort(&qword_101B13128);
      _Unwind_Resume(a1);
    }
  }
}

std::string *sub_1010DD9CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t result = (std::string *)sub_100058DB0((void *)a1, "");
  unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    unint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5 >= 4)
  {
    std::string::basic_string(&v6, (const std::string *)a2, 0, 2uLL, (std::allocator<char> *)&v7);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(std::string *)a1 = v6;
    return std::string::erase((std::string *)a2, 0, 3uLL);
  }
  return result;
}

void sub_1010DDA70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010DDA90@<X0>(void *a1@<X8>)
{
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  memset(v9, 0, sizeof(v9));
  long long v8 = 0u;
  sub_10004BD84((uint64_t)&v8);
  int v2 = sub_10004B96C(v9, (uint64_t)"[", 1);
  char v23 = 48;
  uint64_t v3 = sub_1004DC904(v2, &v23);
  *(void *)((char *)v3 + *(void *)(*v3 - 24) + 24) = 4;
  uint64_t v4 = (void *)std::ostream::operator<<();
  sub_10004B96C(v4, (uint64_t)"-", 1);
  unint64_t v5 = (void *)std::ostream::operator<<();
  sub_10004B96C(v5, (uint64_t)"]", 1);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_10004BC98((uint64_t)v9 + 8, a1);
  *(void *)((char *)&v9[-1]
  *(void *)&v9[0] = v6;
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1010DDCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1010DDCC0(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  sub_100058DB0(a1, "");
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    for (std::string::size_type i = 0; i < v7; i += 2)
    {
      memset(&__p, 0, sizeof(__p));
      std::string::basic_string(&__p, (const std::string *)a2, i, 2uLL, (std::allocator<char> *)&v9);
      std::string::value_type v6 = std::stoul(&__p, 0, 16);
      std::string::push_back(a1, v6);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::size_type v7 = *(unsigned __int8 *)(a2 + 23);
      if ((v7 & 0x80u) != 0) {
        std::string::size_type v7 = *(void *)(a2 + 8);
      }
    }
  }
}

void sub_1010DDD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010DDDC4(uint64_t a1)
{
  return a1;
}

uint64_t *sub_1010DDDF0(uint64_t *result, uint64_t a2)
{
  qword_101B13158 = 0;
  qword_101B13150 = 0;
  qword_101B13148 = (uint64_t)&qword_101B13150;
  if (a2)
  {
    int v2 = result;
    uint64_t v3 = 0;
    uint64_t v4 = &result[4 * a2];
    unint64_t v5 = &qword_101B13150;
    while (1)
    {
      unsigned int v6 = *(_DWORD *)v2;
      if (v5 == &qword_101B13150) {
        break;
      }
      std::string::size_type v7 = (uint64_t *)v3;
      if (v3)
      {
        do
        {
          long long v8 = v7;
          std::string::size_type v7 = (uint64_t *)v7[1];
        }
        while (v7);
      }
      else
      {
        char v9 = &qword_101B13150;
        do
        {
          long long v8 = (uint64_t *)v9[2];
          BOOL v10 = *v8 == (void)v9;
          char v9 = v8;
        }
        while (v10);
      }
      if (*((_DWORD *)v8 + 8) < v6) {
        goto LABEL_11;
      }
      if (!v3) {
        goto LABEL_22;
      }
      uint64_t v12 = v3;
      while (1)
      {
        while (1)
        {
          long long v8 = (uint64_t *)v12;
          unsigned int v13 = *(_DWORD *)(v12 + 32);
          if (v13 <= v6) {
            break;
          }
          uint64_t v12 = *v8;
          long long v11 = (uint64_t **)v8;
          if (!*v8) {
            goto LABEL_23;
          }
        }
        if (v13 >= v6) {
          break;
        }
        uint64_t v12 = v8[1];
        if (!v12)
        {
          long long v11 = (uint64_t **)(v8 + 1);
          goto LABEL_23;
        }
      }
LABEL_27:
      v2 += 4;
      if (v2 == v4) {
        return result;
      }
      unint64_t v5 = (uint64_t *)qword_101B13148;
      uint64_t v3 = qword_101B13150;
    }
    long long v8 = &qword_101B13150;
LABEL_11:
    if (v3)
    {
      long long v11 = (uint64_t **)(v8 + 1);
      if (v8[1]) {
        goto LABEL_27;
      }
    }
    else
    {
LABEL_22:
      long long v11 = (uint64_t **)&qword_101B13150;
      long long v8 = &qword_101B13150;
    }
LABEL_23:
    uint64_t v14 = (char *)operator new(0x40uLL);
    *((_DWORD *)v14 + 8) = v6;
    long long v15 = v14 + 40;
    if (*((char *)v2 + 31) < 0)
    {
      sub_10004FC84(v15, (void *)v2[1], v2[2]);
    }
    else
    {
      long long v16 = *(_OWORD *)(v2 + 1);
      *((void *)v14 + 7) = v2[3];
      *(_OWORD *)long long v15 = v16;
    }
    uint64_t result = sub_100046C38((uint64_t **)&qword_101B13148, (uint64_t)v8, v11, (uint64_t *)v14);
    goto LABEL_27;
  }
  return result;
}

void sub_1010DDF6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  sub_1000886C0((uint64_t)&qword_101B13148, (char *)qword_101B13150);
  _Unwind_Resume(a1);
}

void sub_1010DDFA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A8BB70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010DDFC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A8BB70;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010DE014(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 72);
  sub_10005CBF0(&v3);
  uint64_t v3 = (void **)(a1 + 48);
  sub_10005CBF0(&v3);
  int v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 24));
}

void sub_1010DE074(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A8BBC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010DE094(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A8BBC0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010DE0E8(uint64_t a1)
{
  uint64_t v1 = (ctu::OsLogLogger *)(a1 + 24);
  int v2 = (void **)(a1 + 32);
  sub_10005CBF0(&v2);
  ctu::OsLogLogger::~OsLogLogger(v1);
}

uint64_t sub_1010DE12C()
{
  sub_100058DB0(v31, "hi");
  v33[0] = 159320320;
  if (SHIBYTE(v32) < 0)
  {
    sub_10004FC84(&v34, v31[0], (unint64_t)v31[1]);
  }
  else
  {
    long long v34 = *(_OWORD *)v31;
    uint64_t v35 = v32;
  }
  sub_100058DB0(v29, "en");
  int v36 = 5898305;
  if (SHIBYTE(v30) < 0)
  {
    sub_10004FC84(&v37, v29[0], (unint64_t)v29[1]);
  }
  else
  {
    long long v37 = *(_OWORD *)v29;
    uint64_t v38 = v30;
  }
  sub_100058DB0(__p, "en");
  int v39 = 7995489;
  if (SHIBYTE(v28) < 0)
  {
    sub_10004FC84(&v40, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long v40 = *(_OWORD *)__p;
    uint64_t v41 = v28;
  }
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  qword_101B13140 = 0;
  qword_101B13138 = 0;
  int v2 = &qword_101B13138;
  qword_101B13130 = (uint64_t)&qword_101B13138;
  while (1)
  {
    uint64_t v3 = (unsigned __int16 *)&v33[8 * v1];
    if (v2 == &qword_101B13138)
    {
      unint64_t v5 = &qword_101B13138;
    }
    else
    {
      uint64_t v4 = (uint64_t *)v0;
      if (v0)
      {
        do
        {
          unint64_t v5 = v4;
          uint64_t v4 = (uint64_t *)v4[1];
        }
        while (v4);
      }
      else
      {
        unsigned int v6 = &qword_101B13138;
        do
        {
          unint64_t v5 = (uint64_t *)v6[2];
          BOOL v10 = *v5 == (void)v6;
          unsigned int v6 = v5;
        }
        while (v10);
      }
      unsigned int v7 = *v3;
      unsigned int v8 = v3[1];
      unsigned int v9 = *((unsigned __int16 *)v5 + 16);
      BOOL v10 = v9 == v7;
      if (v9 >= v7) {
        char v11 = 1;
      }
      else {
        char v11 = -1;
      }
      if (v10)
      {
        unsigned int v12 = *((unsigned __int16 *)v5 + 17);
        BOOL v13 = v12 == v8;
        char v11 = v12 >= v8 ? 1 : -1;
        if (v13) {
          char v11 = 0;
        }
      }
      if ((v11 & 0x80) == 0)
      {
        if (v0)
        {
          uint64_t v14 = v0;
          while (1)
          {
            unint64_t v5 = (uint64_t *)v14;
            unsigned int v15 = *(unsigned __int16 *)(v14 + 32);
            if (v15 == v7)
            {
              unsigned int v16 = *((unsigned __int16 *)v5 + 17);
              BOOL v17 = v16 == v8;
              if (v16 <= v8)
              {
                if (v16 >= v8) {
                  char v18 = 1;
                }
                else {
                  char v18 = -1;
                }
                if (v17) {
                  char v18 = 0;
                }
                if ((v18 & 0x80) == 0) {
                  goto LABEL_59;
                }
                goto LABEL_47;
              }
LABEL_41:
              uint64_t v14 = *v5;
              long long v19 = v5;
              if (!*v5) {
                goto LABEL_53;
              }
            }
            else
            {
              if (v15 > v7) {
                goto LABEL_41;
              }
              if (v15 >= v7) {
                char v20 = 1;
              }
              else {
                char v20 = -1;
              }
              if ((v20 & 0x80) == 0) {
                goto LABEL_59;
              }
LABEL_47:
              uint64_t v14 = v5[1];
              if (!v14)
              {
                long long v19 = v5 + 1;
                goto LABEL_53;
              }
            }
          }
        }
        goto LABEL_52;
      }
    }
    if (v0)
    {
      long long v19 = v5 + 1;
      if (v5[1]) {
        goto LABEL_59;
      }
      goto LABEL_53;
    }
LABEL_52:
    long long v19 = &qword_101B13138;
    unint64_t v5 = &qword_101B13138;
LABEL_53:
    long long v21 = (char *)operator new(0x40uLL);
    *((_DWORD *)v21 + 8) = *(_DWORD *)v3;
    uint64_t v22 = v21 + 40;
    char v23 = &v33[8 * v1];
    int v24 = (void **)(v23 + 2);
    if (*((char *)v3 + 31) < 0)
    {
      sub_10004FC84(v22, *v24, *((void *)v23 + 2));
    }
    else
    {
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v24;
      *((void *)v21 + 7) = *((void *)v23 + 3);
    }
    *(void *)long long v21 = 0;
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = v5;
    uint64_t *v19 = (uint64_t)v21;
    if (*(void *)qword_101B13130)
    {
      qword_101B13130 = *(void *)qword_101B13130;
      long long v21 = (char *)*v19;
    }
    sub_100046C90((uint64_t *)qword_101B13138, (uint64_t *)v21);
    ++qword_101B13140;
LABEL_59:
    if (++v1 == 3) {
      break;
    }
    int v2 = (uint64_t *)qword_101B13130;
    uint64_t v0 = qword_101B13138;
  }
  for (uint64_t i = 0; i != -96; i -= 32)
  {
    if (*((char *)&v41 + i + 7) < 0) {
      operator delete(*(void **)((char *)&v40 + i));
    }
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
  return __cxa_atexit((void (*)(void *))sub_1010DA6F0, &qword_101B13130, (void *)&_mh_execute_header);
}

void sub_1010DE4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  long long v37 = (char *)&a36;
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (&a28 != (char *)&a36)
  {
    do
    {
      if (*(v37 - 1) < 0) {
        operator delete(*((void **)v37 - 3));
      }
      v37 -= 32;
    }
    while (v37 != &a28);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010DE5B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, NSObject **a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v14, kCtLoggingSystemName, "5wi.lzl.ct");
  a1[2] = 0;
  a1[3] = 0;
  char v11 = *a5;
  a1[4] = *a5;
  if (v11) {
    dispatch_retain(v11);
  }
  a1[5] = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v13, &v14);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 6), (const ctu::OsLogLogger *)v13);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v14);
  uint64_t v12 = *(void *)(a8 + 8);
  if (v12)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_1010DE8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, ctu::OsLogLogger *a10, void *a11, sd::IMSConnectivityHelperEventDelegate *a12, char a13, int a14, __int16 a15, char a16, char a17)
{
  long long v19 = (std::__shared_weak_count *)*((void *)v17 + 20);
  if (v19) {
    sub_10004D2C8(v19);
  }
  char v20 = (std::__shared_weak_count *)*((void *)v17 + 18);
  if (v20) {
    sub_10004D2C8(v20);
  }
  long long v21 = (std::__shared_weak_count *)*((void *)v17 + 16);
  if (v21) {
    sub_10004D2C8(v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)v17 + 14);
  if (v22) {
    sub_10004D2C8(v22);
  }
  uint64_t v23 = *((void *)v17 + 12);
  *((void *)v17 + 12) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  int v24 = (std::__shared_weak_count *)*((void *)v17 + 11);
  if (v24) {
    sub_10004D2C8(v24);
  }
  xpc_object_t v25 = (std::__shared_weak_count *)*((void *)v17 + 9);
  if (v25) {
    sub_10004D2C8(v25);
  }
  uint64_t v26 = *((void *)v17 + 7);
  *((void *)v17 + 7) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  ctu::OsLogLogger::~OsLogLogger(a10);
  sub_100087E88(a11);
  sd::IMSConnectivityHelperEventDelegate::~IMSConnectivityHelperEventDelegate(a12);
  sd::IMSConnectivityHelperInterface::~IMSConnectivityHelperInterface(v17);
  _Unwind_Resume(a1);
}

void sub_1010DEA48(uint64_t a1)
{
  *(void *)a1 = off_101A8BCC8;
  int v2 = (sd::IMSConnectivityHelperEventDelegate *)(a1 + 8);
  *(void *)(a1 + 8) = off_101A8BE00;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 376);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(void *)(a1 + 360);
  *(void *)(a1 + 360) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  OsLogContext v14 = (void **)(a1 + 304);
  sub_100047F64(&v14);
  OsLogContext v14 = (void **)(a1 + 280);
  sub_100047F64(&v14);
  sub_1001FEC70(*(void **)(a1 + 264));
  OsLogContext v14 = (void **)(a1 + 232);
  sub_100047F64(&v14);
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 224);
  if (v5) {
    sub_10004D2C8(v5);
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 160);
  if (v6) {
    sub_10004D2C8(v6);
  }
  unsigned int v7 = *(std::__shared_weak_count **)(a1 + 144);
  if (v7) {
    sub_10004D2C8(v7);
  }
  unsigned int v8 = *(std::__shared_weak_count **)(a1 + 128);
  if (v8) {
    sub_10004D2C8(v8);
  }
  unsigned int v9 = *(std::__shared_weak_count **)(a1 + 112);
  if (v9) {
    sub_10004D2C8(v9);
  }
  uint64_t v10 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  char v11 = *(std::__shared_weak_count **)(a1 + 88);
  if (v11) {
    sub_10004D2C8(v11);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 72);
  if (v12) {
    sub_10004D2C8(v12);
  }
  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 48));
  sub_100087E88((void *)(a1 + 16));
  sd::IMSConnectivityHelperEventDelegate::~IMSConnectivityHelperEventDelegate(v2);
  sd::IMSConnectivityHelperInterface::~IMSConnectivityHelperInterface((sd::IMSConnectivityHelperInterface *)a1);
}

void sub_1010DEC24(uint64_t a1)
{
}

void sub_1010DEC2C(uint64_t a1)
{
  sub_1010DEA48(a1);

  operator delete();
}

void sub_1010DEC64(uint64_t a1)
{
  sub_1010DEA48(a1 - 8);

  operator delete();
}

void sub_1010DECA0(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1010DEDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (v10) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_1010DEE14(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v5;
  *(void *)(a1 + 144) = v4;
  if (v6) {
    sub_10004D2C8(v6);
  }
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 104) + 176))(buf);
  unsigned int v7 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(*(void *)buf + 52));
  if (v18) {
    sub_10004D2C8(v18);
  }
  unsigned int v8 = *v7;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I start using IMSConnectivityHelperLazuli", buf, 2u);
  }
  uint64_t v9 = *a2;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 104) + 176))(buf);
  int v10 = *(std::__shared_weak_count **)(a1 + 24);
  if (v10)
  {
    uint64_t v11 = *(void *)buf;
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v13 = std::__shared_weak_count::lock(v10);
    if (v13)
    {
      uint64_t v14 = v12 + 8;
      if (!v12) {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v14;
      unsigned int v16 = v13;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v9 + 40))(v9, v11 + 24, &v15);
      if (v16) {
        sub_10004D2C8(v16);
      }
      if (v18) {
        sub_10004D2C8(v18);
      }
      sub_1010DF0E4(a1);
    }
  }
  sub_100088B9C();
}

void sub_1010DF0B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010DF0E4(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 104) + 176))(&v8);
  int v2 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(v8 + 52));
  if (v9) {
    sub_10004D2C8(v9);
  }
  uint64_t v3 = *v2;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I resend IMS Pref and proxy", (uint8_t *)&v8, 2u);
  }
  *(_DWORD *)(a1 + 204) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 376);
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5)
  {
    unsigned int v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v6);
      unsigned int v7 = *(std::__shared_weak_count **)(a1 + 24);
      if (v7)
      {
        if (std::__shared_weak_count::lock(v7)) {
          operator new();
        }
      }
      sub_100088B9C();
    }
  }
  sub_100088B9C();
}

void sub_1010DF2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010DF2DC(void **a1, uint64_t *a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1[13] + 176))(&v9);
  uint64_t v4 = (NSObject **)(*(uint64_t (**)(void *, void))(*a1[7] + 16))(a1[7], *(unsigned int *)(v9 + 52));
  if (v10) {
    sub_10004D2C8(v10);
  }
  uint64_t v5 = *v4;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v9) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I stop using IMSConnectivityHelperLazuli", (uint8_t *)&v9, 2u);
  }
  uint64_t v6 = *a2;
  (*(void (**)(uint64_t *__return_ptr))(*a1[13] + 176))(&v9);
  uint64_t v7 = v9;
  uint64_t v8 = ((uint64_t (*)(void **))(*a1)[2])(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 48))(v6, v7 + 24, v8);
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_1010DF584((uint64_t)a1);
}

void sub_1010DF564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010DF584(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v3);
      uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
      if (v4)
      {
        if (std::__shared_weak_count::lock(v4)) {
          operator new();
        }
      }
      sub_100088B9C();
    }
  }
  sub_100088B9C();
}

void sub_1010DF69C(uint64_t a1)
{
  *(_DWORD *)(a1 + 212) = 2;
  int v2 = *(std::__shared_weak_count **)(a1 + 224);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  if (v2) {
    sub_10004D2C8(v2);
  }
  *(_WORD *)(a1 + 209) = 0;
}

void sub_1010DF6D8(uint64_t a1)
{
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 104) + 176))(buf);
  int v2 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(*(void *)buf + 52));
  if (*(void *)v19) {
    sub_10004D2C8(*(std::__shared_weak_count **)v19);
  }
  unsigned int v3 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 120) + 440))(*(void *)(a1 + 120), *(unsigned int *)(a1 + 204));
  uint64_t v4 = *v2;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = asString();
    int v6 = *(_DWORD *)(a1 + 204);
    *(_DWORD *)long long buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v3;
    *(_WORD *)long long v19 = 2080;
    *(void *)&v19[2] = v5;
    __int16 v20 = 1024;
    int v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I PdnBringUp: Attempting pdn bring up after %u seconds. Attempt [%s] # %u", buf, 0x18u);
  }
  Registry::getTimerService((uint64_t *)buf, *(Registry **)(a1 + 64));
  uint64_t v7 = *(void *)buf;
  sub_100058DB0(__p, "PDP Retry timer");
  uint64_t v8 = *(NSObject **)(a1 + 32);
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 0x40000000;
  aBlock[2] = sub_1010DF9FC;
  aBlock[3] = &unk_101A8BE90;
  aBlock[4] = a1;
  uint64_t v13 = _Block_copy(aBlock);
  sub_100118A44(v7, (uint64_t)__p, 1, 1000000 * v3, &object, &v13);
  uint64_t v9 = v17;
  uint64_t v17 = 0;
  uint64_t v10 = *(void *)(a1 + 360);
  *(void *)(a1 + 360) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v11 = v17;
    uint64_t v17 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  if (v13) {
    _Block_release(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)v19) {
    sub_10004D2C8(*(std::__shared_weak_count **)v19);
  }
}

void sub_1010DF990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *aBlock, dispatch_object_t object, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010DF9FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_1010DFF18(v1);
  if (!(*(unsigned int (**)(void))(**(void **)(v1 + 104) + 104))(*(void *)(v1 + 104)))
  {
    *(_DWORD *)(v1 + 204) = 0;
    return;
  }
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(v1 + 104) + 176))(buf);
  int v2 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(v1 + 56) + 16))(*(void *)(v1 + 56), *(unsigned int *)(*(void *)buf + 52));
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (validContextType())
  {
    int v3 = *(_DWORD *)(v1 + 172);
  }
  else
  {
    int v3 = *(unsigned __int8 *)(v1 + 168);
    *(_DWORD *)(v1 + 172) = v3;
  }
  ++*(_DWORD *)(v1 + 204);
  if (!v3)
  {
    *(_DWORD *)(v1 + 212) = 0;
    uint64_t v4 = *(uint64_t **)(v1 + 216);
    if (!v4) {
      sub_1011DEFFC(buf);
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap(v4, *(Registry **)(v1 + 64));
    int v6 = ServiceMap;
    if (v7 < 0)
    {
      uint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v9 = 5381;
      do
      {
        uint64_t v7 = v9;
        unsigned int v10 = *v8++;
        uint64_t v9 = (33 * v9) ^ v10;
      }
      while (v10);
    }
    std::mutex::lock(ServiceMap);
    *(void *)long long buf = v7;
    uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
    if (!v11)
    {
      std::mutex::unlock(v6);
      return;
    }
    uint64_t v13 = v11[3];
    uint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      if (!v13) {
        goto LABEL_41;
      }
    }
    else
    {
      std::mutex::unlock(v6);
      if (!v13) {
        return;
      }
    }
    unsigned int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 776))(v13);
    uint64_t v20 = *(void *)(v1 + 136);
    if (v20 && (*(unsigned int (**)(uint64_t, unsigned int *))(*(void *)v20 + 408))(v20, &v27))
    {
      int v21 = *v2;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = subscriber::asString();
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I PdnBringUp: Cellular Internet connection is already up on %s", buf, 0xCu);
      }
      *(unsigned char *)(v1 + 200) = 1;
      unsigned int v23 = v27;
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(v1 + 104) + 176))(buf);
      int v24 = *(_DWORD *)(*(void *)buf + 52);
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
      sub_1010E03C4(v1, v23 != v24, *(unsigned int *)(v1 + 212));
    }
    else
    {
      xpc_object_t v25 = *v2;
      if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I PdnBringUp: Attempting to activate Cellular Internet.", buf, 2u);
      }
      uint64_t v26 = v27;
      sub_100058DB0(buf, "Activating internet for SIP/TLS");
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, void, void))(*(void *)v13 + 80))(v13, v26, 1, 1, buf, 0, 0);
      if (v29 < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!v12) {
      return;
    }
LABEL_41:
    sub_10004D2C8(v12);
    return;
  }
  if (v3 == 1)
  {
    if (*(unsigned char *)(v1 + 168))
    {
      *(_DWORD *)(v1 + 212) = 1;
      sub_1010E03C4(v1, 1, 1);
      return;
    }
    os_log_t v19 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      char v16 = "#I PdnBringUp: Current transport preference is WiFi, but WiFi is not available, cannot activate.";
      uint64_t v17 = v19;
      uint32_t v18 = 2;
      goto LABEL_25;
    }
  }
  else
  {
    os_log_t v14 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = asString();
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v15;
      char v16 = "#I PdnBringUp: Current transport preference is %s, cannot activate.";
      uint64_t v17 = v14;
      uint32_t v18 = 12;
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
    }
  }
}

void sub_1010DFEB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    sub_10004D2C8(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010DFF18(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 360);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 16))(result);
    uint64_t result = *(void *)(a1 + 360);
    *(void *)(a1 + 360) = 0;
    if (result)
    {
      int v3 = *(uint64_t (**)(void))(*(void *)result + 8);
      return v3();
    }
  }
  return result;
}

void sub_1010DFFAC(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 104) + 176))(&v4);
  int v2 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(v4 + 52));
  if (v5) {
    sub_10004D2C8(v5);
  }
  int v3 = *v2;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Throttling PDN bringup", (uint8_t *)&v4, 2u);
  }
  ++*(_DWORD *)(a1 + 204);
}

void sub_1010E0088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E00A0(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 104) + 176))(&v4);
  int v2 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(v4 + 52));
  if (v5) {
    sub_10004D2C8(v5);
  }
  int v3 = *v2;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Reset PDN bringup throttling", (uint8_t *)&v4, 2u);
  }
  *(_DWORD *)(a1 + 204) = 0;
}

void sub_1010E0174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E018C(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 104) + 176))(&v10);
  int v2 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(v10 + 52));
  if (*((void *)&v10 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v10 + 1));
  }
  if (validContextType())
  {
    int v3 = *v2;
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v4 = asString();
    LODWORD(v10) = 136315138;
    *(void *)((char *)&v10 + 4) = v4;
    uint64_t v5 = "#I PdnBringUp: Data is in activating or already up on %s";
    int v6 = v3;
    uint32_t v7 = 12;
    goto LABEL_13;
  }
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 152))(a1, 0) & 1) == 0)
  {
    os_log_t v8 = *v2;
    if (!os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10) = 0;
    uint64_t v5 = "#N PdnBringUp: No connectivity to activate PDN right now.";
    goto LABEL_12;
  }
  if (*(void *)(a1 + 360))
  {
    os_log_t v8 = *v2;
    if (!os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10) = 0;
    uint64_t v5 = "#I PdnBringUp: There is already Pdn bring up request on the queue. Do nothing";
LABEL_12:
    int v6 = v8;
    uint32_t v7 = 2;
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v10, v7);
    return;
  }
  if (*(void *)(a1 + 232) == *(void *)(a1 + 240))
  {
    uint64_t v9 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v10) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "P-CSCF is empty", (uint8_t *)&v10, 2u);
    }
  }
  else
  {
    sub_1010DF6D8(a1);
  }
}

void sub_1010E03A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E03C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 104) + 176))(v13);
  int v6 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(*(void *)v13 + 52));
  if (*(void *)&v13[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v13[8]);
  }
  if (*(_DWORD *)(a1 + 212) == a3)
  {
    *(unsigned char *)(a1 + 208) = a2;
    uint32_t v7 = *v6;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = asString();
      uint64_t v9 = "";
      if (*(unsigned char *)(a1 + 208))
      {
        if (!*(_DWORD *)(a1 + 212)) {
          uint64_t v9 = "[over cell]";
        }
      }
      *(_DWORD *)uint64_t v13 = 136315394;
      *(void *)&void v13[4] = v8;
      *(_WORD *)&v13[12] = 2080;
      *(void *)&v13[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Data Connection %s%s is Up", v13, 0x16u);
    }
    sub_1010E121C(a1, 0);
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 104) + 48))(*(void *)(a1 + 104), a2, a3);
  }
  else
  {
    long long v10 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = asString();
      uint64_t v12 = asString();
      *(_DWORD *)uint64_t v13 = 136315394;
      *(void *)&void v13[4] = v11;
      *(_WORD *)&v13[12] = 2080;
      *(void *)&v13[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#N Data Connection %s is Up, but expecting %s", v13, 0x16u);
    }
  }
}

void sub_1010E05D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010E05F0()
{
  return 0;
}

void sub_1010E05F8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(unsigned char *)(a1 + 168))
  {
    std::string::operator=(a2, (const std::string *)(a1 + 176));
    goto LABEL_23;
  }
  uint64_t v4 = (uint64_t *)*(unsigned int *)(a1 + 212);
  if (!v4)
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(v4, *(Registry **)(a1 + 64));
    int v6 = ServiceMap;
    if (v7 < 0)
    {
      uint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v9 = 5381;
      do
      {
        uint64_t v7 = v9;
        unsigned int v10 = *v8++;
        uint64_t v9 = (33 * v9) ^ v10;
      }
      while (v10);
    }
    std::mutex::lock(ServiceMap);
    *(void *)long long buf = v7;
    uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
    if (v11)
    {
      uint64_t v13 = v11[3];
      uint64_t v12 = (std::__shared_weak_count *)v11[4];
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v6);
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v12);
        char v15 = 0;
        if (!v13)
        {
LABEL_21:
          if ((v15 & 1) == 0) {
            sub_10004D2C8(v12);
          }
          goto LABEL_23;
        }
LABEL_13:
        if (capabilities::ct::supportsGemini(v14))
        {
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 776))(v13);
          (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, void))(*(void *)v13 + 120))(buf, v13, v16, 0);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(a2->__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)buf;
          a2->__r_.__value_.__r.__words[2] = v23;
        }
        else
        {
          (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 104) + 176))(&v20);
          (*(void (**)(uint8_t *__return_ptr, uint64_t, void, void))(*(void *)v13 + 120))(buf, v13, *(unsigned int *)(v20 + 52), 0);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(a2->__r_.__value_.__l.__data_);
          }
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)buf;
          a2->__r_.__value_.__r.__words[2] = v23;
          HIBYTE(v23) = 0;
          buf[0] = 0;
          if (v21) {
            sub_10004D2C8(v21);
          }
        }
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    std::mutex::unlock(v6);
    uint64_t v12 = 0;
    char v15 = 1;
    if (!v13) {
      goto LABEL_21;
    }
    goto LABEL_13;
  }
LABEL_23:
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 104) + 176))(buf);
  uint64_t v17 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(*(void *)buf + 52));
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  uint32_t v18 = *v17;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      os_log_t v19 = a2;
    }
    else {
      os_log_t v19 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I IMSNetworkInterface: %s", buf, 0xCu);
  }
}

void sub_1010E0928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v13);
  }
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E099C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_1010E09A8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

BOOL sub_1010E09B4(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 168))
  {
    BOOL v3 = 1;
    if (!a2) {
      return v3;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 172)) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = *(unsigned char *)(a1 + 169) == 0;
    }
    BOOL v3 = !v4;
    if (!a2) {
      return v3;
    }
  }
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 104) + 176))(v12);
  uint64_t v5 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(*(void *)v12 + 52));
  if (*(void *)&v12[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v12[8]);
  }
  int v6 = *v5;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = asStringBool(v3);
    uint64_t v8 = asStringBool(*(unsigned char *)(a1 + 168));
    uint64_t v9 = asStringBool(*(unsigned char *)(a1 + 169));
    uint64_t v10 = asString();
    *(_DWORD *)uint64_t v12 = 136315906;
    *(void *)&void v12[4] = v7;
    *(_WORD *)&v12[12] = 2080;
    *(void *)&v12[14] = v8;
    __int16 v13 = 2080;
    uint64_t v14 = v9;
    __int16 v15 = 2080;
    uint64_t v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Connectivity(%s): [WiFiAvailable(%s), CellInternetAvailable(%s), CurrentIMSIRatTransportType(%s)]", v12, 0x2Au);
  }
  return v3;
}

void sub_1010E0B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010E0B68(_DWORD *a1, BOOL a2, BOOL a3, int a4)
{
  (*(void (**)(unsigned char *__return_ptr))(**((void **)a1 + 13) + 176))(v21);
  uint64_t v8 = (NSObject **)(*(uint64_t (**)(void, void))(**((void **)a1 + 7) + 16))(*((void *)a1 + 7), *(unsigned int *)(*(void *)v21 + 52));
  if (*(void *)&v21[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v21[8]);
  }
  uint64_t v9 = *v8;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = asStringBool(*((unsigned char *)a1 + 168));
    uint64_t v11 = asStringBool(a2);
    uint64_t v12 = asStringBool(*((unsigned char *)a1 + 169));
    uint64_t v13 = asStringBool(a3);
    uint64_t v14 = asString();
    uint64_t v15 = asString();
    *(_DWORD *)int v21 = 136316418;
    *(void *)&v21[4] = v10;
    *(_WORD *)&v21[12] = 2080;
    *(void *)&v21[14] = v11;
    __int16 v22 = 2080;
    uint64_t v23 = v12;
    __int16 v24 = 2080;
    uint64_t v25 = v13;
    __int16 v26 = 2080;
    uint64_t v27 = v14;
    __int16 v28 = 2080;
    uint64_t v29 = v15;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Change Connectivity: WiFi: %s -> %s, cellInternetAvailable: %s -> %s, PreferredTransportType: %s -> %s", v21, 0x3Eu);
  }
  uint64_t v16 = (capabilities::ct *)(*(uint64_t (**)(_DWORD *, void))(*(void *)a1 + 152))(a1, 0);
  int v17 = (int)v16;
  if (a4) {
    BOOL v18 = 0;
  }
  else {
    BOOL v18 = a3;
  }
  int v19 = a2 || v18;
  *((unsigned char *)a1 + 168) = a2;
  *((unsigned char *)a1 + 169) = a3;
  uint64_t result = capabilities::ct::supportsCellRadio(v16);
  if (result)
  {
    if (a1[43] != a4)
    {
      sub_1010E00A0((uint64_t)a1);
      if (*((void *)a1 + 45))
      {
        sub_1010DFF18((uint64_t)a1);
        sub_1010DF6D8((uint64_t)a1);
      }
      uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 120))(a1);
    }
    a1[43] = a4;
  }
  if (v17 != v19) {
    return sub_1010E0DEC((void **)a1);
  }
  return result;
}

void sub_1010E0DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010E0DEC(void **a1)
{
  int v2 = ((uint64_t (*)(void **, void))(*a1)[19])(a1, 0);
  uint64_t v3 = *a1[13];
  if (v2)
  {
    (*(void (**)(void))(v3 + 16))();
    BOOL v4 = *(uint64_t (**)(void))(*a1[13] + 32);
    return v4();
  }
  else
  {
    int v6 = *(uint64_t (**)(void))(v3 + 24);
    return v6();
  }
}

void sub_1010E0EE0(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 104) + 176))(&v5);
  int v2 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(v5 + 52));
  if (v6) {
    sub_10004D2C8(v6);
  }
  uint64_t v3 = *v2;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Reset proxies", (uint8_t *)&v5, 2u);
  }
  sub_1001FEC70(*(void **)(a1 + 264));
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 256) = a1 + 264;
  sub_100047FB8((uint64_t *)(a1 + 304));
  sub_100047FB8((uint64_t *)(a1 + 280));
  if (*(char *)(a1 + 359) < 0)
  {
    **(unsigned char **)(a1 + 336) = 0;
    *(void *)(a1 + 344) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 336) = 0;
    *(unsigned char *)(a1 + 359) = 0;
  }
  *(void *)(a1 + 328) = 0;
  BOOL v4 = *(std::__shared_weak_count **)(a1 + 376);
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  if (v4) {
    sub_10004D2C8(v4);
  }
}

void sub_1010E1008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E1020(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 104) + 176))(&v7);
  int v2 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(v7 + 52));
  if (v8) {
    sub_10004D2C8(v8);
  }
  uint64_t v3 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7) = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Switch current transport and prefer different type if available", (uint8_t *)&v7, 2u);
  }
  int v4 = *(_DWORD *)(a1 + 212);
  if (*(unsigned char *)(a1 + 208) && !v4)
  {
    uint64_t v5 = *v2;
    if (!*(unsigned char *)(a1 + 168))
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v7) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Other transport is not available at the moment. Set pending transport sub switch.", (uint8_t *)&v7, 2u);
      }
      *(unsigned char *)(a1 + 209) = 1;
      return;
    }
    goto LABEL_15;
  }
  if (v4 != 1)
  {
    uint64_t v5 = *v2;
LABEL_15:
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I There is no other transport to fallback. Ignore transport switch.", (uint8_t *)&v7, 2u);
    }
    return;
  }
  if (*(unsigned char *)(a1 + 169))
  {
    sub_1010E0B68((_DWORD *)a1, 0, 1, 0);
  }
  else
  {
    int v6 = *v2;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Cellular connection is not available at the moment. Set pending cell transport switch.", (uint8_t *)&v7, 2u);
    }
    *(unsigned char *)(a1 + 210) = 1;
  }
}

void sub_1010E1204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E121C(uint64_t a1, int a2)
{
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 104) + 176))(&buf);
  int v4 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(buf.__r_.__value_.__r.__words[0] + 52));
  if (buf.__r_.__value_.__l.__size_) {
    sub_10004D2C8((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
  }
  int v6 = *(long long **)(a1 + 232);
  uint64_t v5 = *(long long **)(a1 + 240);
  if (v6 == v5)
  {
    uint64_t v8 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "P-CSCF is empty", (uint8_t *)&buf, 2u);
    }
  }
  else
  {
    if (*(void *)(a1 + 272))
    {
      uint64_t v7 = *v4;
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I P-CSCF address resolution is already in progress", (uint8_t *)&buf, 2u);
      }
      return;
    }
    if (*(void *)(a1 + 280) != *(void *)(a1 + 288) || *(void *)(a1 + 304) != *(void *)(a1 + 312))
    {
      sub_1010E20E8(a1);
      return;
    }
    uint64_t v9 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Starting P-CSCF resolution, attempt=%u", (uint8_t *)&buf, 8u);
      int v6 = *(long long **)(a1 + 232);
      uint64_t v5 = *(long long **)(a1 + 240);
    }
    if (v6 != v5)
    {
      char v70 = (char **)(a1 + 264);
      while (1)
      {
        memset(&__str, 0, sizeof(__str));
        if (*((char *)v6 + 23) < 0)
        {
          sub_10004FC84(&__str, *(void **)v6, *((void *)v6 + 1));
        }
        else
        {
          long long v10 = *v6;
          __str.__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v10;
        }
        uint64_t v11 = *v4;
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
        {
          p_str = &__str;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I P-CSCF: %{public}s", (uint8_t *)&buf, 0xCu);
        }
        memset(v77, 0, sizeof(v77));
        sub_1010E2D10((CSIPacketAddress *)v77, a1, (std::string::size_type)&__str);
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        if (!size) {
          goto LABEL_141;
        }
        std::string::operator=((std::string *)(a1 + 336), &__str);
        if (CSIPacketAddress::isZeroIP((CSIPacketAddress *)v77))
        {
          std::string::size_type v14 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v14 = __str.__r_.__value_.__l.__size_;
          }
          if (v14) {
            break;
          }
        }
        memset(&buf, 0, sizeof(buf));
        CSIPacketAddress::operator std::string();
        uint64_t v16 = *v4;
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
        {
          p_std::string buf = &buf;
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)long long __dst = 136446210;
          *(void *)&__dst[4] = p_buf;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Adding raw address: %{public}s", __dst, 0xCu);
        }
        memset(__dst, 0, sizeof(__dst));
        uint64_t v84 = 0;
        BOOL v18 = (CSIPacketAddress *)CSIPacketAddress::CSIPacketAddress();
        if ((CSIPacketAddress::isZeroIP(v18) & 1) == 0)
        {
          if (CSIPacketAddress::isIPv4((CSIPacketAddress *)__dst))
          {
            unint64_t v19 = *(void *)(a1 + 312);
            if (v19 >= *(void *)(a1 + 320))
            {
              uint64_t v34 = sub_1000D8CE8((uint64_t *)(a1 + 304), (long long *)&buf);
            }
            else
            {
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              {
                sub_10004FC84(*(unsigned char **)(a1 + 312), buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v20 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
                *(void *)(v19 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v19 = v20;
              }
              uint64_t v34 = v19 + 24;
              *(void *)(a1 + 312) = v19 + 24;
            }
            *(void *)(a1 + 312) = v34;
          }
          else if (CSIPacketAddress::isIPv6((CSIPacketAddress *)__dst))
          {
            unint64_t v32 = *(void *)(a1 + 288);
            if (v32 >= *(void *)(a1 + 296))
            {
              uint64_t v36 = sub_1000D8CE8((uint64_t *)(a1 + 280), (long long *)&buf);
            }
            else
            {
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              {
                sub_10004FC84(*(unsigned char **)(a1 + 288), buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
              }
              else
              {
                long long v33 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
                *(void *)(v32 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v32 = v33;
              }
              uint64_t v36 = v32 + 24;
              *(void *)(a1 + 288) = v32 + 24;
            }
            *(void *)(a1 + 288) = v36;
          }
        }
        if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_141;
        }
        int v68 = (void *)buf.__r_.__value_.__r.__words[0];
LABEL_140:
        operator delete(v68);
LABEL_141:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        int v6 = (long long *)((char *)v6 + 24);
        if (v6 == v5) {
          goto LABEL_144;
        }
      }
      memset(__dst, 0, sizeof(__dst));
      uint64_t v84 = 0;
      uint64_t v15 = (uint64_t *)*(unsigned __int8 *)(a1 + 168);
      if (*(unsigned char *)(a1 + 168))
      {
        uint64_t v15 = (uint64_t *)*(unsigned int *)(a1 + 172);
        if (v15 == 1)
        {
          if (*(char *)(a1 + 199) < 0)
          {
            sub_10004FC84(__dst, *(void **)(a1 + 176), *(void *)(a1 + 184));
          }
          else
          {
            *(_OWORD *)long long __dst = *(_OWORD *)(a1 + 176);
            uint64_t v84 = *(void *)(a1 + 192);
          }
          goto LABEL_68;
        }
      }
      ServiceMap = (std::mutex *)Registry::getServiceMap(v15, *(Registry **)(a1 + 64));
      __int16 v22 = ServiceMap;
      if ((v23 & 0x8000000000000000) != 0)
      {
        __int16 v24 = (unsigned __int8 *)(v23 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v25 = 5381;
        do
        {
          std::string::size_type v23 = v25;
          unsigned int v26 = *v24++;
          uint64_t v25 = (33 * v25) ^ v26;
        }
        while (v26);
      }
      std::mutex::lock(ServiceMap);
      buf.__r_.__value_.__r.__words[0] = v23;
      uint64_t v27 = sub_10004D37C(&v22[1].__m_.__sig, (unint64_t *)&buf);
      if (v27)
      {
        uint64_t v29 = v27[3];
        __int16 v28 = (std::__shared_weak_count *)v27[4];
        if (v28)
        {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v22);
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v28);
          char v31 = 0;
          if (!v29) {
            goto LABEL_62;
          }
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v29 = 0;
      }
      std::mutex::unlock(v22);
      __int16 v28 = 0;
      char v31 = 1;
      if (!v29)
      {
LABEL_62:
        if ((v31 & 1) == 0) {
          sub_10004D2C8(v28);
        }
        if (!v29)
        {
          memset(__dst, 0, sizeof(__dst));
          uint64_t v84 = 0;
        }
LABEL_68:
        if (*(void *)(a1 + 368))
        {
LABEL_83:
          long long v76 = 0uLL;
          uint64_t v49 = *(void *)(a1 + 96);
          int v50 = *(NSObject **)(a1 + 32);
          dispatch_object_t object = v50;
          if (v50) {
            dispatch_retain(v50);
          }
          (*(void (**)(long long *__return_ptr, uint64_t, dispatch_object_t *))(*(void *)v49 + 64))(&v76, v49, &object);
          if (object) {
            dispatch_release(object);
          }
          if ((void)v76)
          {
            memset(v74, 0, sizeof(v74));
            (*(void (**)(dispatch_object_t *__return_ptr))(**(void **)(a1 + 152) + 24))(v74);
            int v51 = (*(uint64_t (**)(void, dispatch_object_t *))(**(void **)(a1 + 152) + 32))(*(void *)(a1 + 152), v74);
            if ((v51 & 3u) - 1 > 1)
            {
              uint64_t v54 = 3;
            }
            else
            {
              BOOL v52 = *v4;
              if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v53 = asString();
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v53;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#I Only one IP family %s is configured - limit DNS resolution to it", (uint8_t *)&buf, 0xCu);
              }
              if (v51 == 1) {
                uint64_t v54 = 1;
              }
              else {
                uint64_t v54 = 2;
              }
            }
            uint64_t v57 = *(std::__shared_weak_count **)(a1 + 24);
            if (!v57
              || (uint64_t v58 = v76,
                  int v59 = *(std::__shared_weak_count **)(a1 + 16),
                  (uint64_t v60 = std::__shared_weak_count::lock(v57)) == 0))
            {
              sub_100088B9C();
            }
            v71[0] = v59;
            v71[1] = v60;
            atomic_fetch_add_explicit(&v60->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v60);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              sub_10004FC84(&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else {
              std::string __p = __str;
            }
            int v73 = a2;
            CFTypeID v82 = 0;
            size_t v61 = (char *)operator new(0x38uLL);
            *(void *)size_t v61 = off_101A8C178;
            *(_OWORD *)(v61 + 8) = *(_OWORD *)v71;
            *((std::string *)v61 + 1) = __p;
            memset(&__p, 0, sizeof(__p));
            *((_DWORD *)v61 + 12) = a2;
            CFTypeID v82 = v61;
            (*(void (**)(uint64_t, std::string *, void *, uint64_t, uint8_t *, uint64_t))(*(void *)v58 + 24))(v58, &__str, v81, 1, __dst, v54);
            sub_10016D140(v81);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              sub_10004FC84(&buf, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
            }
            else {
              std::string buf = __str;
            }
            long long v80 = v76;
            if (*((void *)&v76 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v76 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            int v62 = (char **)(a1 + 264);
            int v63 = *v70;
            int v64 = (char **)(a1 + 264);
            if (!*v70) {
              goto LABEL_120;
            }
            int v64 = (char **)(a1 + 264);
            while (1)
            {
              while (1)
              {
                int v62 = (char **)v63;
                size_t v65 = v63 + 32;
                if ((sub_100046FE8(&buf, (void **)v63 + 4) & 0x80) == 0) {
                  break;
                }
                int v63 = *v62;
                int v64 = v62;
                if (!*v62) {
                  goto LABEL_120;
                }
              }
              if ((sub_100046FE8(v65, (void **)&buf.__r_.__value_.__l.__data_) & 0x80) == 0) {
                break;
              }
              int v64 = v62 + 1;
              int v63 = v62[1];
              if (!v63) {
                goto LABEL_120;
              }
            }
            if (!*v64)
            {
LABEL_120:
              int64_t v66 = (char *)operator new(0x48uLL);
              *(std::string *)(v66 + 32) = buf;
              memset(&buf, 0, sizeof(buf));
              *(_OWORD *)(v66 + 56) = v80;
              long long v80 = 0uLL;
              *(void *)int64_t v66 = 0;
              *((void *)v66 + 1) = 0;
              *((void *)v66 + 2) = v62;
              *int v64 = v66;
              uint64_t v67 = **(void **)(a1 + 256);
              if (v67)
              {
                *(void *)(a1 + 256) = v67;
                int64_t v66 = *v64;
              }
              sub_100046C90(*(uint64_t **)(a1 + 264), (uint64_t *)v66);
              ++*(void *)(a1 + 272);
            }
            if (*((void *)&v80 + 1)) {
              sub_10004D2C8(*((std::__shared_weak_count **)&v80 + 1));
            }
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(buf.__r_.__value_.__l.__data_);
            }
            buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
            sub_100047F64((void ***)&buf);
          }
          else
          {
            uint64_t v55 = *v4;
            if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v56 = &__str;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v56 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#N Failed to resolve P-CSCF %s", (uint8_t *)&buf, 0xCu);
            }
          }
          if (*((void *)&v76 + 1)) {
            sub_10004D2C8(*((std::__shared_weak_count **)&v76 + 1));
          }
          if ((SHIBYTE(v84) & 0x80000000) == 0) {
            goto LABEL_141;
          }
          int v68 = *(void **)__dst;
          goto LABEL_140;
        }
        long long v37 = (std::mutex *)Registry::getServiceMap(0, *(Registry **)(a1 + 64));
        uint64_t v38 = v37;
        if ((v39 & 0x8000000000000000) != 0)
        {
          long long v40 = (unsigned __int8 *)(v39 & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v41 = 5381;
          do
          {
            std::string::size_type v39 = v41;
            unsigned int v42 = *v40++;
            uint64_t v41 = (33 * v41) ^ v42;
          }
          while (v42);
        }
        std::mutex::lock(v37);
        buf.__r_.__value_.__r.__words[0] = v39;
        char v43 = sub_10004D37C(&v38[1].__m_.__sig, (unint64_t *)&buf);
        if (v43)
        {
          uint64_t v45 = v43[3];
          int v44 = (std::__shared_weak_count *)v43[4];
          if (v44)
          {
            atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
            std::mutex::unlock(v38);
            atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v44);
            char v46 = 0;
            goto LABEL_77;
          }
        }
        else
        {
          uint64_t v45 = 0;
        }
        std::mutex::unlock(v38);
        int v44 = 0;
        char v46 = 1;
LABEL_77:
        if (v45)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t, const char *, void))(*(void *)v45 + 8))(&buf, v45, "DNS Resolution", 0);
          long long v47 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          memset(&buf, 0, 16);
          int v48 = *(std::__shared_weak_count **)(a1 + 376);
          *(_OWORD *)(a1 + 368) = v47;
          if (v48)
          {
            sub_10004D2C8(v48);
            if (buf.__r_.__value_.__l.__size_) {
              sub_10004D2C8((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
            }
          }
        }
        if ((v46 & 1) == 0) {
          sub_10004D2C8(v44);
        }
        goto LABEL_83;
      }
LABEL_58:
      if (capabilities::ct::supportsGemini(v30))
      {
        uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 776))(v29);
        (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, void))(*(void *)v29 + 120))(__dst, v29, v35, 0);
      }
      else
      {
        (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 104) + 176))(&buf);
        (*(void (**)(uint8_t *__return_ptr, uint64_t, void, void))(*(void *)v29 + 120))(__dst, v29, *(unsigned int *)(buf.__r_.__value_.__r.__words[0] + 52), 0);
        if (buf.__r_.__value_.__l.__size_) {
          sub_10004D2C8((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
        }
      }
      goto LABEL_62;
    }
LABEL_144:
    if (!*(void *)(a1 + 272))
    {
      uint64_t v69 = *(std::__shared_weak_count **)(a1 + 376);
      *(void *)(a1 + 368) = 0;
      *(void *)(a1 + 376) = 0;
      if (v69) {
        sub_10004D2C8(v69);
      }
      sub_1010E20E8(a1);
    }
  }
}

void sub_1010E1DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,dispatch_object_t object,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  *(void *)(v42 + 288) = v43;
  if (*(char *)(v44 - 185) < 0) {
    operator delete(*(void **)(v44 - 208));
  }
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1010E1F38(_DWORD *result, int a2)
{
  if (result[53] == a2)
  {
    uint64_t v2 = (uint64_t)result;
    (*(void (**)(_DWORD *))(*(void *)result + 120))(result);
    sub_1010E20E8(v2);
    (*(void (**)(long long *__return_ptr))(**(void **)(v2 + 104) + 176))(&v7);
    uint64_t v3 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v2 + 56) + 16))(*(void *)(v2 + 56), *(unsigned int *)(v7 + 52));
    if (*((void *)&v7 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v7 + 1));
    }
    int v4 = *v3;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = asString();
      LODWORD(v7) = 136315138;
      *(void *)((char *)&v7 + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Data Connection %s is Down", (uint8_t *)&v7, 0xCu);
    }
    *(unsigned char *)(v2 + 208) = 0;
    *(_DWORD *)(v2 + 212) = 2;
    int v6 = *(std::__shared_weak_count **)(v2 + 224);
    *(void *)(v2 + 216) = 0;
    *(void *)(v2 + 224) = 0;
    if (v6) {
      sub_10004D2C8(v6);
    }
    return (_DWORD *)(*(uint64_t (**)(void))(**(void **)(v2 + 104) + 56))(*(void *)(v2 + 104));
  }
  return result;
}

void sub_1010E20C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E20E8(uint64_t a1)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (*(unsigned char *)(a1 + 168) && *(_DWORD *)(a1 + 172) == 1)
  {
    if (&v12 == (uint64_t *)(a1 + 304))
    {
      uint64_t v2 = 0;
    }
    else
    {
      sub_10005CA3C((uint64_t)&v12, *(std::string **)(a1 + 304), *(long long **)(a1 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 312) - *(void *)(a1 + 304)) >> 3));
      uint64_t v2 = v13;
    }
    sub_1010B8E28(&v12, v2, *(std::string **)(a1 + 280), *(long long **)(a1 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3));
  }
  else
  {
    if (&v12 == (uint64_t *)(a1 + 280))
    {
      uint64_t v3 = 0;
    }
    else
    {
      sub_10005CA3C((uint64_t)&v12, *(std::string **)(a1 + 280), *(long long **)(a1 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3));
      uint64_t v3 = v13;
    }
    sub_1010B8E28(&v12, v3, *(std::string **)(a1 + 304), *(long long **)(a1 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 312) - *(void *)(a1 + 304)) >> 3));
  }
  (*(void (**)(void ***__return_ptr))(**(void **)(a1 + 104) + 176))(&v10);
  int v4 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *((unsigned int *)v10 + 13));
  if (v11) {
    sub_10004D2C8(v11);
  }
  uint64_t v5 = v12;
  int v6 = v13;
  long long v7 = *v4;
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if ((std::string *)v5 == v6)
  {
    if (v8)
    {
      LOWORD(v10) = 0;
      uint64_t v9 = "#I Sending empty proxy list to controller";
      goto LABEL_18;
    }
  }
  else if (v8)
  {
    LOWORD(v10) = 0;
    uint64_t v9 = "#I All P-CSCF Addresses are resolved. Sending proxy update to controller";
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v10, 2u);
  }
  (*(void (**)(void, uint64_t *, void, uint64_t, void, void))(**(void **)(a1 + 104) + 96))(*(void *)(a1 + 104), &v12, *(unsigned int *)(a1 + 212), a1 + 336, *(unsigned int *)(a1 + 328), *(unsigned int *)(a1 + 332));
  long long v10 = (void **)&v12;
  sub_100047F64(&v10);
}

void sub_1010E230C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_100047F64(&a9);
  _Unwind_Resume(a1);
}

void sub_1010E234C(uint64_t a1, int a2, uint64_t a3)
{
  memset(&__str, 0, sizeof(__str));
  if (a2 && *(void *)a3 != *(void *)(a3 + 8))
  {
    std::string::operator=(&__str, *(const std::string **)a3);
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 104) + 176))(buf);
    uint64_t v5 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(*(void *)buf + 52));
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    int v6 = *v5;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      long long v7 = (void *)(a1 + 176);
      if (*(char *)(a1 + 199) < 0) {
        long long v7 = (void *)*v7;
      }
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = p_str;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I fWifiInterfaceName changes from %s to %s", buf, 0x16u);
    }
    std::string::operator=((std::string *)(a1 + 176), &__str);
  }
  int v9 = *(unsigned __int8 *)(a1 + 168);
  sub_1010E0B68((_DWORD *)a1, a2, *(unsigned __int8 *)(a1 + 169), a2);
  if (a2)
  {
    if (v9 == a2) {
      goto LABEL_24;
    }
    if (*(unsigned char *)(a1 + 209) && *(_DWORD *)(a1 + 172) == 1)
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 104) + 176))(buf);
      long long v10 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(*(void *)buf + 52));
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
      uint64_t v11 = *v10;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Reset pending transport sub switch", buf, 2u);
      }
      int v12 = 0;
      *(unsigned char *)(a1 + 209) = 0;
    }
    else
    {
      int v12 = 0;
    }
  }
  else
  {
    int v12 = 1;
  }
  sub_1010E1F38((_DWORD *)a1, v12);
LABEL_24:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1010E25CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_10004D2C8(a17);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E2610(uint64_t a1, int a2, uint64_t a3)
{
}

uint64_t sub_1010E2618(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 172);
  uint64_t v5 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = "NOT available.";
    if (a2) {
      int v6 = "available.";
    }
    LODWORD(v12) = 136315138;
    *(void *)((char *)&v12 + 4) = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Cellular Internet is %s", (uint8_t *)&v12, 0xCu);
  }
  if (a2)
  {
    if (*(unsigned char *)(a1 + 209) && *(_DWORD *)(a1 + 172) == 1 && !*(unsigned char *)(a1 + 168))
    {
      (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 104) + 176))(&v12);
      int v9 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(v12 + 52));
      if (*((void *)&v12 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v12 + 1));
      }
      long long v10 = *v9;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v12) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Reset pending transport sub switch", (uint8_t *)&v12, 2u);
      }
      int v4 = 0;
      *(unsigned char *)(a1 + 209) = 0;
    }
    else if (*(unsigned char *)(a1 + 210) && *(_DWORD *)(a1 + 172) == 1 && !*(unsigned char *)(a1 + 169))
    {
      (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 104) + 176))(&v12);
      long long v7 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(v12 + 52));
      if (*((void *)&v12 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v12 + 1));
      }
      BOOL v8 = *v7;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v12) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Reset pending cell transport switch", (uint8_t *)&v12, 2u);
      }
      int v4 = 0;
      *(unsigned char *)(a1 + 210) = 0;
    }
  }
  return sub_1010E0B68((_DWORD *)a1, *(unsigned char *)(a1 + 168), a2 != 0, v4);
}

void sub_1010E289C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010E28C0(uint64_t a1, int a2)
{
  return sub_1010E2618(a1 - 8, a2);
}

void sub_1010E28C8(uint64_t a1, int a2)
{
  int v2 = a2 != 0;
  int v3 = *(unsigned __int8 *)(a1 + 200);
  if (v3 != v2)
  {
    int v6 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      long long v7 = "Active";
      if (v3) {
        BOOL v8 = "Active";
      }
      else {
        BOOL v8 = "Inactive";
      }
      if (!a2) {
        long long v7 = "Inactive";
      }
      *(_DWORD *)int v9 = 136315394;
      *(void *)&_OWORD v9[4] = v8;
      *(_WORD *)&v9[12] = 2080;
      *(void *)&v9[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Cellular Internet %s->%s", v9, 0x16u);
    }
    *(unsigned char *)(a1 + 200) = v2;
    if (a2)
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 104) + 176))(v9);
      sub_1010E03C4(a1, *(_DWORD *)(*(void *)v9 + 52) != a2, 0);
      if (*(void *)&v9[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&v9[8]);
      }
    }
    else
    {
      sub_1010E1F38((_DWORD *)a1, 0);
    }
  }
}

void sub_1010E2A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E2A44(uint64_t a1, int a2)
{
}

_DWORD *sub_1010E2A4C(_DWORD *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    int v2 = result;
    if (!result[53])
    {
      (*(void (**)(long long *__return_ptr))(**((void **)result + 13) + 176))(&v6);
      int v3 = (NSObject **)(*(uint64_t (**)(void, void))(**((void **)v2 + 7) + 16))(*((void *)v2 + 7), *(unsigned int *)(v6 + 52));
      if (*((void *)&v6 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v6 + 1));
      }
      int v4 = *v3;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = CSIErrorString();
        LODWORD(v6) = 136315138;
        *(void *)((char *)&v6 + 4) = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Activate error for internet Pdn = %s", (uint8_t *)&v6, 0xCu);
      }
      return sub_1010E1F38(v2, 0);
    }
  }
  return result;
}

void sub_1010E2B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1010E2BA8(uint64_t a1, uint64_t a2)
{
  return sub_1010E2A4C((_DWORD *)(a1 - 8), a2);
}

void sub_1010E2BB0(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 104) + 176))(&v7);
  int v4 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(v7 + 52));
  if (v8) {
    sub_10004D2C8(v8);
  }
  uint64_t v5 = *v4;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I P-CSCF list update", (uint8_t *)&v7, 2u);
  }
  if (a1 + 232 != a2) {
    sub_10005CA3C(a1 + 232, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  sub_100047FB8((uint64_t *)(a1 + 304));
  sub_100047FB8((uint64_t *)(a1 + 280));
  if (*(char *)(a1 + 359) < 0)
  {
    **(unsigned char **)(a1 + 336) = 0;
    *(void *)(a1 + 344) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 336) = 0;
    *(unsigned char *)(a1 + 359) = 0;
  }
  *(void *)(a1 + 328) = 0;
  long long v6 = *(std::__shared_weak_count **)(a1 + 376);
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  if (v6) {
    sub_10004D2C8(v6);
  }
}

void sub_1010E2CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E2D10(CSIPacketAddress *a1, uint64_t a2, std::string::size_type a3)
{
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 104) + 176))(&__s);
  long long v6 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a2 + 56) + 16))(*(void *)(a2 + 56), *(unsigned int *)(__s.__r_.__value_.__r.__words[0] + 52));
  if (__s.__r_.__value_.__l.__size_) {
    sub_10004D2C8((std::__shared_weak_count *)__s.__r_.__value_.__l.__size_);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t v7 = *(void *)(a3 + 8);
    if (!v7) {
      goto LABEL_54;
    }
    BOOL v8 = *(unsigned char **)a3;
    if (**(unsigned char **)a3 != 91) {
      goto LABEL_54;
    }
    goto LABEL_9;
  }
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if (!*(unsigned char *)(a3 + 23)) {
    goto LABEL_55;
  }
  if (*(unsigned char *)a3 == 91)
  {
    BOOL v8 = (unsigned char *)a3;
LABEL_9:
    if (v7 >= 2)
    {
      int v9 = &v8[v7];
      long long v10 = v8;
      while (1)
      {
        uint64_t v11 = (char *)memchr(v10, 93, v7 - 1);
        if (!v11) {
          goto LABEL_54;
        }
        if (*(_WORD *)v11 == 14941) {
          break;
        }
        long long v10 = v11 + 1;
        uint64_t v7 = v9 - (unsigned char *)v10;
        if (v9 - (unsigned char *)v10 < 2) {
          goto LABEL_54;
        }
      }
      if (v11 == v9) {
        goto LABEL_54;
      }
      uint64_t v12 = v11 - v8;
      if (v11 - v8 == -1) {
        goto LABEL_54;
      }
      memset(&__s, 0, sizeof(__s));
      std::string::basic_string(&__s, (const std::string *)a3, v12 + 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
      char v13 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        size_t size = __s.__r_.__value_.__l.__size_;
        if (!__s.__r_.__value_.__l.__size_)
        {
LABEL_38:
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          goto LABEL_40;
        }
        p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((unsigned char *)&__s.__r_.__value_.__s + 23))
        {
LABEL_40:
          std::string::basic_string(&__s, (const std::string *)a3, 1uLL, v12 - 1, (std::allocator<char> *)&__p);
          if (*(char *)(a3 + 23) < 0) {
            operator delete(*(void **)a3);
          }
          *(std::string *)a3 = __s;
          int v21 = *(_DWORD *)(a2 + 332);
          os_log_t v22 = *v6;
          BOOL v23 = os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT);
          if (v21)
          {
            if (!v23) {
              goto LABEL_54;
            }
            if (*(char *)(a3 + 23) >= 0) {
              std::string::size_type v24 = a3;
            }
            else {
              std::string::size_type v24 = *(void *)a3;
            }
            int v25 = *(_DWORD *)(a2 + 328);
            LODWORD(__s.__r_.__value_.__l.__data_) = 136446722;
            *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = v24;
            WORD2(__s.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__s.__r_.__value_.__r.__words[1] + 6) = v25;
            WORD1(__s.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(__s.__r_.__value_.__r.__words[2]) = v21;
            unsigned int v26 = "#I P-CSCF addr: %{public}s, Cell port: %u, WiFi port: %u";
            uint64_t v27 = v22;
            uint32_t v28 = 24;
          }
          else
          {
            if (!v23) {
              goto LABEL_54;
            }
            if (*(char *)(a3 + 23) >= 0) {
              std::string::size_type v29 = a3;
            }
            else {
              std::string::size_type v29 = *(void *)a3;
            }
            int v30 = *(_DWORD *)(a2 + 328);
            LODWORD(__s.__r_.__value_.__l.__data_) = 136446466;
            *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = v29;
            WORD2(__s.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__s.__r_.__value_.__r.__words[1] + 6) = v30;
            unsigned int v26 = "#I P-CSCF addr: %{public}s, Port: %u";
            uint64_t v27 = v22;
            uint32_t v28 = 18;
          }
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v26, (uint8_t *)&__s, v28);
          goto LABEL_54;
        }
        p_s = &__s;
        size_t size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      uint64_t v16 = memchr(p_s, 58, size);
      if (!v16 || (std::string::size_type v17 = v16 - (unsigned char *)p_s, v17 == -1))
      {
        if (v13 >= 0) {
          long long v20 = &__s;
        }
        else {
          long long v20 = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)(a2 + 328) = strtoul((const char *)v20, 0, 0);
      }
      else
      {
        std::string::basic_string(&__p, &__s, 0, v17, (std::allocator<char> *)&v52);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)(a2 + 328) = strtoul((const char *)p_p, 0, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string::basic_string(&__p, &__s, v17 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v52);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v19 = &__p;
        }
        else {
          unint64_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)(a2 + 332) = strtoul((const char *)v19, 0, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      goto LABEL_38;
    }
  }
LABEL_54:
  LODWORD(v7) = *(char *)(a3 + 23);
  if ((v7 & 0x80000000) != 0)
  {
    if (*(void *)(a3 + 8)) {
      goto LABEL_56;
    }
LABEL_62:
    CSIPacketAddress::CSIPacketAddress(a1);
    return;
  }
LABEL_55:
  if (!(_BYTE)v7) {
    goto LABEL_62;
  }
LABEL_56:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  CSIPacketAddress::CSIPacketAddress();
  if (CSIPacketAddress::isZeroIP(a1))
  {
    std::string::size_type v31 = std::string::find((const std::string *)a3, 58, 0);
    if (v31 != -1)
    {
      std::string::size_type v32 = v31;
      memset(&__s, 0, sizeof(__s));
      std::string::basic_string(&__s, (const std::string *)a3, v31 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
      char v33 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        size_t v35 = __s.__r_.__value_.__l.__size_;
        if (!__s.__r_.__value_.__l.__size_)
        {
LABEL_81:
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
LABEL_83:
          std::string::basic_string(&__s, (const std::string *)a3, 0, v32, (std::allocator<char> *)&__p);
          if (*(char *)(a3 + 23) < 0) {
            operator delete(*(void **)a3);
          }
          *(std::string *)a3 = __s;
          int v41 = *(_DWORD *)(a2 + 332);
          uint64_t v42 = *v6;
          BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
          if (v41)
          {
            if (v43)
            {
              if (*(char *)(a3 + 23) >= 0) {
                std::string::size_type v44 = a3;
              }
              else {
                std::string::size_type v44 = *(void *)a3;
              }
              int v45 = *(_DWORD *)(a2 + 328);
              LODWORD(__s.__r_.__value_.__l.__data_) = 136446722;
              *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = v44;
              WORD2(__s.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&__s.__r_.__value_.__r.__words[1] + 6) = v45;
              WORD1(__s.__r_.__value_.__r.__words[2]) = 1024;
              HIDWORD(__s.__r_.__value_.__r.__words[2]) = v41;
              char v46 = "#I P-CSCF addr: %{public}s, Cell port: %u, WiFi port: %u";
              long long v47 = v42;
              uint32_t v48 = 24;
LABEL_96:
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v46, (uint8_t *)&__s, v48);
            }
          }
          else if (v43)
          {
            if (*(char *)(a3 + 23) >= 0) {
              std::string::size_type v49 = a3;
            }
            else {
              std::string::size_type v49 = *(void *)a3;
            }
            int v50 = *(_DWORD *)(a2 + 328);
            LODWORD(__s.__r_.__value_.__l.__data_) = 136446466;
            *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = v49;
            WORD2(__s.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__s.__r_.__value_.__r.__words[1] + 6) = v50;
            char v46 = "#I P-CSCF addr: %{public}s, Port: %u";
            long long v47 = v42;
            uint32_t v48 = 18;
            goto LABEL_96;
          }
          CSIPacketAddress::CSIPacketAddress();
          CSIPacketAddress::operator=();
          return;
        }
        uint64_t v34 = (std::string *)__s.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
          goto LABEL_83;
        }
        uint64_t v34 = &__s;
        size_t v35 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      }
      uint64_t v36 = memchr(v34, 58, v35);
      if (!v36 || (std::string::size_type v37 = v36 - (unsigned char *)v34, v37 == -1))
      {
        if (v33 >= 0) {
          long long v40 = &__s;
        }
        else {
          long long v40 = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)(a2 + 328) = strtoul((const char *)v40, 0, 0);
      }
      else
      {
        std::string::basic_string(&__p, &__s, 0, v37, (std::allocator<char> *)&v52);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v38 = &__p;
        }
        else {
          uint64_t v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)(a2 + 328) = strtoul((const char *)v38, 0, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string::basic_string(&__p, &__s, v37 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v52);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v39 = &__p;
        }
        else {
          std::string::size_type v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)(a2 + 332) = strtoul((const char *)v39, 0, 0);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      goto LABEL_81;
    }
  }
}

void sub_1010E3378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010E33BC(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  int v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_1010E33FC(uint64_t a1)
{
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 104) + 176))(buf);
  int v2 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(*(void *)buf + 52));
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  int v3 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "IMSConnectivityHelperLazuli";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "IMSConnectivityHelperLazuli";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I 5wi.lazuli:: ----------------- %s %s ==>> -------------------", buf, 0x16u);
  }
  uint64_t v132 = 0;
  long long v130 = 0u;
  long long v131 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v122 = 0u;
  long long v123 = 0u;
  *(_OWORD *)unsigned int v120 = 0u;
  long long v121 = 0u;
  memset(v119, 0, sizeof(v119));
  sub_10004DE24((uint64_t)v119);
  int v4 = sub_10004B96C(v119, (uint64_t)"\t", 1);
  uint64_t v5 = sub_10004B96C(v4, (uint64_t)"AccountId", 9);
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 104) + 176))(buf);
  uint64_t v6 = *(void *)buf + 24;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)buf + 47);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(*(void *)buf + 32);
  }
  if (v8 < 0) {
    uint64_t v6 = *(void *)(*(void *)buf + 24);
  }
  if (v7) {
    int v9 = (const char *)v6;
  }
  else {
    int v9 = "<invalid>";
  }
  size_t v10 = strlen(v9);
  uint64_t v11 = sub_10004B96C(v5, (uint64_t)v9, v10);
  uint64_t v12 = sub_10004B96C(v11, (uint64_t)", ", 2);
  char v13 = sub_10004B96C(v12, (uint64_t)"\t", 1);
  uint64_t v14 = sub_10004B96C(v13, (uint64_t)"fIsWifiAvailable=", 17);
  uint64_t v15 = (const char *)asStringBool(*(unsigned char *)(a1 + 168));
  size_t v16 = strlen(v15);
  std::string::size_type v17 = sub_10004B96C(v14, (uint64_t)v15, v16);
  BOOL v18 = sub_10004B96C(v17, (uint64_t)", ", 2);
  unint64_t v19 = sub_10004B96C(v18, (uint64_t)"\t", 1);
  long long v20 = sub_10004B96C(v19, (uint64_t)"fIsCellInternetAvailable=", 25);
  int v21 = (const char *)asStringBool(*(unsigned char *)(a1 + 169));
  size_t v22 = strlen(v21);
  BOOL v23 = sub_10004B96C(v20, (uint64_t)v21, v22);
  std::string::size_type v24 = sub_10004B96C(v23, (uint64_t)", ", 2);
  int v25 = sub_10004B96C(v24, (uint64_t)"\t", 1);
  unsigned int v26 = sub_10004B96C(v25, (uint64_t)"fPreferredTransportType=", 24);
  uint64_t v27 = (const char *)asString();
  size_t v28 = strlen(v27);
  std::string::size_type v29 = sub_10004B96C(v26, (uint64_t)v27, v28);
  int v30 = sub_10004B96C(v29, (uint64_t)", ", 2);
  std::string::size_type v31 = sub_10004B96C(v30, (uint64_t)"\t", 1);
  std::string::size_type v32 = sub_10004B96C(v31, (uint64_t)"fWifiInterfaceName=", 19);
  int v33 = *(char *)(a1 + 199);
  if (v33 >= 0) {
    uint64_t v34 = a1 + 176;
  }
  else {
    uint64_t v34 = *(void *)(a1 + 176);
  }
  if (v33 >= 0) {
    uint64_t v35 = *(unsigned __int8 *)(a1 + 199);
  }
  else {
    uint64_t v35 = *(void *)(a1 + 184);
  }
  uint64_t v36 = sub_10004B96C(v32, v34, v35);
  std::string::size_type v37 = sub_10004B96C(v36, (uint64_t)", ", 2);
  uint64_t v38 = sub_10004B96C(v37, (uint64_t)"\t", 1);
  sub_10004B96C(v38, (uint64_t)"fInternetConnectionActive=", 26);
  std::string::size_type v39 = (void *)std::ostream::operator<<();
  long long v40 = sub_10004B96C(v39, (uint64_t)", ", 2);
  int v41 = sub_10004B96C(v40, (uint64_t)"\t", 1);
  uint64_t v42 = sub_10004B96C(v41, (uint64_t)"fCurrentTransportType=", 22);
  BOOL v43 = (const char *)asString();
  size_t v44 = strlen(v43);
  int v45 = sub_10004B96C(v42, (uint64_t)v43, v44);
  char v46 = sub_10004B96C(v45, (uint64_t)", ", 2);
  long long v47 = sub_10004B96C(v46, (uint64_t)"\t", 1);
  uint32_t v48 = sub_10004B96C(v47, (uint64_t)"fIsIwlan=", 9);
  std::string::size_type v49 = (const char *)asStringBool(*(unsigned char *)(a1 + 208));
  size_t v50 = strlen(v49);
  int v51 = sub_10004B96C(v48, (uint64_t)v49, v50);
  char v52 = sub_10004B96C(v51, (uint64_t)", ", 2);
  uint64_t v53 = sub_10004B96C(v52, (uint64_t)"\t", 1);
  uint64_t v54 = sub_10004B96C(v53, (uint64_t)"fPendingTransportSubSwitch=", 27);
  uint64_t v55 = (const char *)asStringBool(*(unsigned char *)(a1 + 209));
  size_t v56 = strlen(v55);
  uint64_t v57 = sub_10004B96C(v54, (uint64_t)v55, v56);
  uint64_t v58 = sub_10004B96C(v57, (uint64_t)", ", 2);
  int v59 = sub_10004B96C(v58, (uint64_t)"\t", 1);
  uint64_t v60 = sub_10004B96C(v59, (uint64_t)"fPendingCellTransportSwitch=", 28);
  size_t v61 = (const char *)asStringBool(*(unsigned char *)(a1 + 210));
  size_t v62 = strlen(v61);
  int v63 = sub_10004B96C(v60, (uint64_t)v61, v62);
  int v64 = sub_10004B96C(v63, (uint64_t)", ", 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(void *)(*v64 - 24)));
  size_t v65 = std::locale::use_facet(v154, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v65->__vftable[2].~facet_0)(v65, 10);
  std::locale::~locale(v154);
  std::ostream::put();
  std::ostream::flush();
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  int64_t v66 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004BC98((uint64_t)v119 + 8, buf);
    uint64_t v67 = (buf[23] & 0x80u) == 0 ? (std::locale::__imp *)buf : *(std::locale::__imp **)buf;
    LODWORD(v154[0].__locale_) = 136315138;
    *(std::locale::__imp **)((char *)&v154[0].__locale_ + 4) = v67;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#I 5wi.lazuli:: %s", (uint8_t *)v154, 0xCu);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
  }
  uint64_t v185 = 0;
  long long v184 = 0u;
  long long v183 = 0u;
  long long v182 = 0u;
  long long v181 = 0u;
  long long v180 = 0u;
  long long v179 = 0u;
  long long v178 = 0u;
  long long v177 = 0u;
  long long v176 = 0u;
  long long v174 = 0u;
  long long v175 = 0u;
  long long v172 = 0u;
  *(_OWORD *)v173 = 0u;
  long long v170 = 0u;
  long long v171 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_10004BD84((uint64_t)buf);
  int v68 = sub_10004B96C(&buf[16], (uint64_t)"\tfPcscfResolverMap {", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(void *)(*v68 - 24)));
  uint64_t v69 = std::locale::use_facet(v154, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
  std::locale::~locale(v154);
  std::ostream::put();
  std::ostream::flush();
  char v70 = *(void **)(a1 + 256);
  if (v70 != (void *)(a1 + 264))
  {
    do
    {
      uint64_t v71 = sub_10004B96C(&buf[16], (uint64_t)"\t", 1);
      int v72 = *((char *)v70 + 55);
      if (v72 >= 0) {
        uint64_t v73 = (uint64_t)(v70 + 4);
      }
      else {
        uint64_t v73 = v70[4];
      }
      if (v72 >= 0) {
        uint64_t v74 = *((unsigned __int8 *)v70 + 55);
      }
      else {
        uint64_t v74 = v70[5];
      }
      BOOL v75 = sub_10004B96C(v71, v73, v74);
      sub_10004B96C(v75, (uint64_t)" - ", 3);
      std::ostream::operator<<();
      long long v76 = (void *)v70[1];
      if (v76)
      {
        do
        {
          uint64_t v77 = v76;
          long long v76 = (void *)*v76;
        }
        while (v76);
      }
      else
      {
        do
        {
          uint64_t v77 = (void *)v70[2];
          BOOL v78 = *v77 == (void)v70;
          char v70 = v77;
        }
        while (!v78);
      }
      char v70 = v77;
    }
    while (v77 != (void *)(a1 + 264));
  }
  uint64_t v79 = sub_10004B96C(&buf[16], (uint64_t)"\t}", 2);
  std::ios_base::getloc((const std::ios_base *)((char *)v79 + *(void *)(*v79 - 24)));
  long long v80 = std::locale::use_facet(v154, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10);
  std::locale::~locale(v154);
  std::ostream::put();
  std::ostream::flush();
  xpc_object_t v81 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004BC98((uint64_t)&buf[24], v154);
    CFTypeID v82 = (SBYTE7(v155[0]) & 0x80u) == 0 ? v154 : (std::locale *)v154[0].__locale_;
    *(_DWORD *)char v139 = 136315138;
    *(void *)&v139[4] = v82;
    _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "#I 5wi.lazuli:: %s", v139, 0xCu);
    if (SBYTE7(v155[0]) < 0) {
      operator delete(v154[0].__locale_);
    }
  }
  uint64_t v168 = 0;
  long long v166 = 0u;
  long long v167 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v160 = 0u;
  long long v161 = 0u;
  long long v158 = 0u;
  long long v159 = 0u;
  *(_OWORD *)unint64_t v156 = 0u;
  long long v157 = 0u;
  memset(v155, 0, sizeof(v155));
  *(_OWORD *)&v154[0].__locale_ = 0u;
  sub_10004BD84((uint64_t)v154);
  size_t v83 = sub_10004B96C(v155, (uint64_t)"\tfPcscfIPv4AddressList {", 24);
  std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(void *)(*v83 - 24)));
  uint64_t v84 = std::locale::use_facet((const std::locale *)v139, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
  std::locale::~locale((std::locale *)v139);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v85 = *(void *)(a1 + 304);
  for (uint64_t i = *(void *)(a1 + 312); v85 != i; v85 += 24)
  {
    int v87 = sub_10004B96C(v155, (uint64_t)"\t", 1);
    int v88 = *(char *)(v85 + 23);
    if (v88 >= 0) {
      uint64_t v89 = v85;
    }
    else {
      uint64_t v89 = *(void *)v85;
    }
    if (v88 >= 0) {
      uint64_t v90 = *(unsigned __int8 *)(v85 + 23);
    }
    else {
      uint64_t v90 = *(void *)(v85 + 8);
    }
    int v91 = sub_10004B96C(v87, v89, v90);
    std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(*v91 - 24)));
    std::string v92 = std::locale::use_facet((const std::locale *)v139, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
    std::locale::~locale((std::locale *)v139);
    std::ostream::put();
    std::ostream::flush();
  }
  std::string::size_type v93 = sub_10004B96C(v155, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v93 + *(void *)(*v93 - 24)));
  size_t v94 = std::locale::use_facet((const std::locale *)v139, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v94->__vftable[2].~facet_0)(v94, 10);
  std::locale::~locale((std::locale *)v139);
  std::ostream::put();
  std::ostream::flush();
  unsigned int v95 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004BC98((uint64_t)v155 + 8, v139);
    size_t v96 = (SBYTE7(v140[0]) & 0x80u) == 0 ? v139 : *(uint8_t **)v139;
    *(_DWORD *)BOOL v133 = 136315138;
    *(void *)&v133[4] = v96;
    _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "#I 5wi.lazuli:: %s", v133, 0xCu);
    if (SBYTE7(v140[0]) < 0) {
      operator delete(*(void **)v139);
    }
  }
  uint64_t v153 = 0;
  long long v151 = 0u;
  long long v152 = 0u;
  long long v149 = 0u;
  long long v150 = 0u;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v143 = 0u;
  long long v144 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v142 = 0u;
  memset(v140, 0, sizeof(v140));
  *(_OWORD *)char v139 = 0u;
  sub_10004BD84((uint64_t)v139);
  os_log_t v97 = sub_10004B96C(v140, (uint64_t)"\tfPcscfIPv6AddressList {", 24);
  std::ios_base::getloc((const std::ios_base *)((char *)v97 + *(void *)(*v97 - 24)));
  __int16 v98 = std::locale::use_facet((const std::locale *)v133, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v98->__vftable[2].~facet_0)(v98, 10);
  std::locale::~locale((std::locale *)v133);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v100 = *(void *)(a1 + 280);
  for (uint64_t j = *(void *)(a1 + 288); v100 != j; v100 += 24)
  {
    uint64_t v101 = sub_10004B96C(v140, (uint64_t)"\t", 1);
    int v102 = *(char *)(v100 + 23);
    if (v102 >= 0) {
      uint64_t v103 = v100;
    }
    else {
      uint64_t v103 = *(void *)v100;
    }
    if (v102 >= 0) {
      uint64_t v104 = *(unsigned __int8 *)(v100 + 23);
    }
    else {
      uint64_t v104 = *(void *)(v100 + 8);
    }
    int v105 = sub_10004B96C(v101, v103, v104);
    std::ios_base::getloc((const std::ios_base *)((char *)v105 + *(void *)(*v105 - 24)));
    uint64_t v106 = std::locale::use_facet((const std::locale *)v133, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10);
    std::locale::~locale((std::locale *)v133);
    std::ostream::put();
    std::ostream::flush();
  }
  uint64_t v107 = sub_10004B96C(v140, (uint64_t)"}", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v107 + *(void *)(*v107 - 24)));
  uint64_t v108 = std::locale::use_facet((const std::locale *)v133, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v108->__vftable[2].~facet_0)(v108, 10);
  std::locale::~locale((std::locale *)v133);
  std::ostream::put();
  std::ostream::flush();
  size_t v109 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004BC98((uint64_t)v155 + 8, v133);
    if (v136 >= 0) {
      long long v110 = v133;
    }
    else {
      long long v110 = *(unsigned char **)v133;
    }
    *(_DWORD *)uint64_t v137 = 136315138;
    uint64_t v138 = v110;
    _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "#I 5wi.lazuli:: %s", v137, 0xCu);
    if (v136 < 0) {
      operator delete(*(void **)v133);
    }
    size_t v109 = *v2;
  }
  if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v111 = (void *)(a1 + 336);
    if (*(char *)(a1 + 359) < 0) {
      uint64_t v111 = (void *)*v111;
    }
    *(_DWORD *)BOOL v133 = 136315138;
    *(void *)&v133[4] = v111;
    _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "#I 5wi.lazuli:: %s", v133, 0xCu);
    size_t v109 = *v2;
  }
  int v112 = *(_DWORD *)(a1 + 328);
  if (v112 && os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)BOOL v133 = 67109120;
    *(_DWORD *)&v133[4] = v112;
    _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "#I 5wi.lazuli:: %u", v133, 8u);
    size_t v109 = *v2;
  }
  int v113 = *(_DWORD *)(a1 + 332);
  if (v113 && os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)BOOL v133 = 67109120;
    *(_DWORD *)&v133[4] = v113;
    _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "#I 5wi.lazuli:: %u", v133, 8u);
    size_t v109 = *v2;
  }
  if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)BOOL v133 = 136315394;
    *(void *)&v133[4] = "IMSConnectivityHelperLazuli";
    __int16 v134 = 2080;
    unsigned int v135 = "IMSConnectivityHelperLazuli";
    _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "#I 5wi.lazuli:: ------------ <<== %s %s ------------------------", v133, 0x16u);
  }
  xpc_object_t v117 = v115;
  *(void *)&v140[0] = v115;
  if (SHIBYTE(v142) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  v154[0].__locale_ = v114;
  *(std::locale::__imp **)((char *)&v154[0].__locale_ + *((void *)v114 - 3)) = v116;
  *(void *)&v155[0] = v117;
  if (SHIBYTE(v157) < 0) {
    operator delete(v156[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  *(void *)std::string buf = v114;
  *(void *)&buf[*((void *)v114 - 3)] = v116;
  *(void *)&uint8_t buf[16] = v117;
  if (SHIBYTE(v174) < 0) {
    operator delete(v173[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if (SHIBYTE(v121) < 0) {
    operator delete(v120[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1010E4694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::locale a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::locale a51)
{
}

uint64_t sub_1010E4788()
{
  return 2;
}

uint64_t sub_1010E4790()
{
  return 0;
}

uint64_t sub_1010E47C4()
{
  return 2;
}

void *sub_1010E47F8(void *a1)
{
  *a1 = off_101A8BF98;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1010E4844(void *a1)
{
  *a1 = off_101A8BF98;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void *sub_1010E48B0(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = off_101A8BF98;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1010E490C(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A8BF98;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1010E4944(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1010E4954(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

const char *sub_1010E4994(uint64_t a1, int *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    int v4 = *a2;
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = *(unsigned __int8 **)(a1 + 8);
      if (v6)
      {
        int v7 = *((_DWORD *)v6 + 1);
        if (v7 < 0)
        {
          int v9 = "5wi.lzl.ct.x.X";
          goto LABEL_17;
        }
        int v8 = *v6;
        switch(v8)
        {
          case 2:
            int v9 = "5wi.lzl.ct.M";
            goto LABEL_17;
          case 1:
            goto LABEL_14;
          case 0:
            if (v4 == 2)
            {
              int v9 = off_101A8C078[v7 & 0xF];
              goto LABEL_17;
            }
            if (v4 == 1)
            {
              int v9 = off_101A8BFF8[v7 & 0xF];
LABEL_17:
              sub_10004D2C8(v5);
              return v9;
            }
LABEL_14:
            int v9 = "5wi.lzl.ct.T";
            goto LABEL_17;
        }
      }
      int v9 = "5wi.lzl.ct.?";
      goto LABEL_17;
    }
  }
  return "5wi.lzl.ct.?";
}

uint64_t sub_1010E4A68(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010E4AA8()
{
}

void sub_1010E4AB4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1010E4B80(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[4], v1, (dispatch_function_t)sub_1010E4C58);
  __cxa_rethrow();
}

void sub_1010E4BA8(_Unwind_Exception *a1)
{
}

void sub_1010E4BC0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010E4BF8(uint64_t a1)
{
}

uint64_t sub_1010E4C14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1010E4C58(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *sub_1010E4C84(void **a1)
{
  uint64_t v1 = *a1;
  int v30 = a1;
  std::string::size_type v31 = v1;
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (v2)
  {
    uint64_t v3 = *v1;
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (uint64_t *)v1[1];
      if (!v6)
      {
LABEL_31:
        sub_10004D2C8(v5);
        goto LABEL_32;
      }
      ServiceMap = (std::mutex *)Registry::getServiceMap(v6, *(Registry **)(v3 + 64));
      int v8 = ServiceMap;
      if (v9 < 0)
      {
        size_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v11 = 5381;
        do
        {
          uint64_t v9 = v11;
          unsigned int v12 = *v10++;
          uint64_t v11 = (33 * v11) ^ v12;
        }
        while (v12);
      }
      std::mutex::lock(ServiceMap);
      v37[0] = (void **)v9;
      char v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)v37);
      if (v13)
      {
        uint64_t v15 = v13[3];
        uint64_t v14 = (std::__shared_weak_count *)v13[4];
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v8);
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v14);
          char v16 = 0;
          if (!v15) {
            goto LABEL_28;
          }
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      std::mutex::unlock(v8);
      uint64_t v14 = 0;
      char v16 = 1;
      if (!v15)
      {
LABEL_28:
        if ((v16 & 1) == 0) {
          sub_10004D2C8(v14);
        }
        int v27 = *(unsigned __int8 *)(v3 + 168);
        *(_DWORD *)(v3 + 172) = v27;
        int v28 = (*(uint64_t (**)(void))(**(void **)(v3 + 136) + 464))(*(void *)(v3 + 136));
        sub_1010E0B68((_DWORD *)v3, v27 != 0, v28, *(_DWORD *)(v3 + 172));
        goto LABEL_31;
      }
LABEL_13:
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      unint64_t v36 = 0;
      if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 16))(v15))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v15 + 24))(__p, v15);
        std::string::size_type v17 = v35;
        if ((unint64_t)v35 >= v36)
        {
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v35[-v34] >> 3);
          unint64_t v20 = v19 + 1;
          if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1000D8578();
          }
          if (0x5555555555555556 * ((uint64_t)(v36 - v34) >> 3) > v20) {
            unint64_t v20 = 0x5555555555555556 * ((uint64_t)(v36 - v34) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - v34) >> 3) >= 0x555555555555555) {
            unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v21 = v20;
          }
          v37[4] = (void **)&v36;
          if (v21) {
            size_t v22 = (void **)sub_10004812C((uint64_t)&v36, v21);
          }
          else {
            size_t v22 = 0;
          }
          BOOL v23 = &v22[3 * v19];
          v37[0] = v22;
          v37[1] = v23;
          void v37[3] = &v22[3 * v21];
          long long v24 = *(_OWORD *)__p;
          uint64_t v23[2] = v33;
          *(_OWORD *)BOOL v23 = v24;
          __p[1] = 0;
          int v33 = 0;
          __p[0] = 0;
          v37[2] = v23 + 3;
          sub_100048204(&v34, v37);
          int v25 = v35;
          sub_100048174((uint64_t)v37);
          uint64_t v35 = v25;
          if (SHIBYTE(v33) < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          long long v18 = *(_OWORD *)__p;
          *((void *)v35 + 2) = v33;
          _OWORD *v17 = v18;
          uint64_t v35 = (char *)v17 + 24;
        }
      }
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 16))(v15);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 256))(v3, v26, &v34);
      v37[0] = (void **)&v34;
      sub_100047F64(v37);
      goto LABEL_28;
    }
  }
LABEL_32:
  sub_100004A84((uint64_t *)&v31);
  return sub_100046B58((uint64_t *)&v30);
}

void sub_1010E4FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_100048174((uint64_t)&a21);
  if (a17 < 0) {
    operator delete(__p);
  }
  std::string __p = &a18;
  sub_100047F64((void ***)&__p);
  if ((v23 & 1) == 0) {
    sub_10004D2C8(v22);
  }
  sub_10004D2C8(v21);
  sub_100004A84(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1010E504C(void **a1)
{
  uint64_t v1 = *a1;
  int v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (v2)
  {
    uint64_t v3 = *v1;
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (v1[1])
      {
        uint64_t v6 = *(void *)(v3 + 104);
        uint64_t v10 = 2;
        int v11 = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 72))(v6, &v10);
      }
      sub_10004D2C8(v5);
    }
  }
  sub_100004A84((uint64_t *)&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_1010E50F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10004D2C8(v10);
  sub_100004A84(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1010E5118(void **a1)
{
  uint64_t v1 = *a1;
  int v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (v2)
  {
    uint64_t v3 = *v1;
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (v1[1])
      {
        int v6 = *(_DWORD *)(v3 + 212);
        if (*(unsigned char *)(v3 + 200) || v6 == 1) {
          sub_1010E1F38((_DWORD *)v3, v6);
        }
      }
      sub_10004D2C8(v5);
    }
  }
  sub_100004A84((uint64_t *)&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_1010E51A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10004D2C8(v10);
  sub_100004A84(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1010E51C4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v9 = a1;
  uint64_t v10 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)v1;
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(v1 + 16))
      {
        uint64_t v6 = *(void *)(v3 + 104);
        int v7 = *(_DWORD *)(v1 + 8);
        v11[0] = *(unsigned __int8 *)(v3 + 168);
        v11[1] = v7;
        void v11[2] = v7;
        (*(void (**)(uint64_t, _DWORD *))(*(void *)v6 + 72))(v6, v11);
        if (!*(void *)(v3 + 272)) {
          sub_1010E20E8(v3);
        }
        sub_1010E0DEC((void **)v3);
      }
      sub_10004D2C8(v5);
    }
  }
  sub_100EE49B4(&v10);
  return sub_100046B58((uint64_t *)&v9);
}

void sub_1010E5284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10004D2C8(v10);
  sub_100EE49B4(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E52AC(uint64_t a1)
{
  *(void *)a1 = off_101A8C178;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1010E5308(uint64_t a1)
{
  *(void *)a1 = off_101A8C178;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete();
}

void *sub_1010E5384(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = off_101A8C178;
  sub_1010E5710((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1010E53D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E53EC(uint64_t a1, void *a2)
{
  *a2 = off_101A8C178;
  return sub_1010E5710((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1010E5418(uint64_t a1)
{
}

void sub_1010E5420(void *a1)
{
  sub_1010E579C((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1010E545C(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      int v7 = *(void **)(a1 + 8);
      if (v7)
      {
        unint64_t v19 = 0;
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        sub_1000302C0((char *)&v19, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 1174405120;
        v13[2] = sub_1010E57F0;
        void v13[3] = &unk_101A8C1D8;
        void v13[4] = v7;
        uint64_t v14 = v6;
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        if (*(char *)(a1 + 47) < 0)
        {
          sub_10004FC84(&__p, *(void **)(a1 + 24), *(void *)(a1 + 32));
        }
        else
        {
          long long __p = *(_OWORD *)(a1 + 24);
          uint64_t v16 = *(void *)(a1 + 40);
        }
        memset(v17, 0, sizeof(v17));
        sub_1000302C0((char *)v17, v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 3));
        int v18 = *(_DWORD *)(a1 + 48);
        int v8 = (std::__shared_weak_count *)v7[3];
        if (!v8 || (uint64_t v9 = (void **)v7[2], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
          sub_100088B9C();
        }
        int v11 = v10;
        unsigned int v12 = v7[4];
        block[0] = _NSConcreteStackBlock;
        block[1] = (void **)1174405120;
        block[2] = (void **)sub_1010E5EA8;
        block[3] = (void **)&unk_101A8C210;
        block[5] = v9;
        char v23 = v11;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        block[4] = (void **)v13;
        dispatch_async(v12, block);
        if (v23) {
          sub_10004D2C8(v23);
        }
        sub_10004D2C8(v11);
        block[0] = (void **)v17;
        sub_100047F64(block);
        if (SHIBYTE(v16) < 0) {
          operator delete((void *)__p);
        }
        if (v14) {
          sub_10004D2C8(v14);
        }
        block[0] = (void **)&v19;
        sub_100047F64(block);
      }
      sub_10004D2C8(v6);
    }
  }
}

void sub_1010E5670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a15) {
    sub_10004D2C8(a15);
  }
  *(void *)(v27 - 120) = &a26;
  sub_100047F64((void ***)(v27 - 120));
  sub_10004D2C8(v26);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E56C4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010E5704()
{
}

uint64_t sub_1010E5710(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (unsigned char *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_10004FC84(v5, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

void sub_1010E5784(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E579C(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1010E57F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 96);
  (*(void (**)(std::string *__return_ptr))(**(void **)(v2 + 104) + 176))(&buf);
  uint64_t v4 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(v2 + 56) + 16))(*(void *)(v2 + 56), *(unsigned int *)(buf.__r_.__value_.__r.__words[0] + 52));
  if (buf.__r_.__value_.__l.__size_) {
    sub_10004D2C8((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
  }
  uint64_t v5 = *(void **)(v2 + 264);
  if (!v5) {
    goto LABEL_16;
  }
  uint64_t v6 = v2 + 264;
  do
  {
    char v7 = sub_100046FE8(v5 + 4, (void **)(a1 + 48));
    if (v7 >= 0) {
      int v8 = v5;
    }
    else {
      int v8 = v5 + 1;
    }
    if (v7 >= 0) {
      uint64_t v6 = (uint64_t)v5;
    }
    uint64_t v5 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 + 264 || (sub_100046FE8((void *)(a1 + 48), (void **)(v6 + 32)) & 0x80) != 0)
  {
LABEL_16:
    int v11 = *v4;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "got callback without triggering DNS resolve?", (uint8_t *)&buf, 2u);
    }
    if (!*(void *)(v2 + 272))
    {
      unsigned int v12 = *(std::__shared_weak_count **)(v2 + 376);
      *(void *)(v2 + 368) = 0;
      *(void *)(v2 + 376) = 0;
      if (v12) {
        sub_10004D2C8(v12);
      }
    }
  }
  else
  {
    uint64_t v9 = *(void **)(v6 + 8);
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      char v13 = (void *)v6;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        char v13 = v10;
      }
      while (!v14);
    }
    if (*(void *)(v2 + 256) == v6) {
      *(void *)(v2 + 256) = v10;
    }
    uint64_t v15 = *(uint64_t **)(v2 + 264);
    --*(void *)(v2 + 272);
    sub_10005EE6C(v15, (uint64_t *)v6);
    sub_1001FEC1C(v6 + 32);
    operator delete((void *)v6);
    uint64_t v16 = *(long long **)(a1 + 72);
    for (i = *(long long **)(a1 + 80); v16 != i; uint64_t v16 = (long long *)((char *)v16 + 24))
    {
      memset(&buf, 0, sizeof(buf));
      CSIPacketAddress::CSIPacketAddress();
      if ((CSIPacketAddress::isZeroIP((CSIPacketAddress *)&buf) & 1) == 0)
      {
        if (CSIPacketAddress::isIPv4((CSIPacketAddress *)&buf))
        {
          unint64_t v18 = *(void *)(v2 + 312);
          if (v18 >= *(void *)(v2 + 320))
          {
            uint64_t v19 = sub_10030E9EC((uint64_t *)(v2 + 304), v16);
          }
          else
          {
            sub_1000D87F8((void *)(v2 + 304), v16);
            uint64_t v19 = v18 + 24;
          }
          *(void *)(v2 + 312) = v19;
        }
        else if (CSIPacketAddress::isIPv6((CSIPacketAddress *)&buf))
        {
          unint64_t v20 = *(void *)(v2 + 288);
          if (v20 >= *(void *)(v2 + 296))
          {
            uint64_t v21 = sub_10030E9EC((uint64_t *)(v2 + 280), v16);
          }
          else
          {
            sub_1000D87F8((void *)(v2 + 280), v16);
            uint64_t v21 = v20 + 24;
          }
          *(void *)(v2 + 288) = v21;
        }
      }
    }
    if (!*(void *)(v2 + 272))
    {
      size_t v22 = *(std::__shared_weak_count **)(v2 + 376);
      *(void *)(v2 + 368) = 0;
      *(void *)(v2 + 376) = 0;
      if (v22) {
        sub_10004D2C8(v22);
      }
      if (*(void *)(v2 + 280) != *(void *)(v2 + 288) || *(void *)(v2 + 304) != *(void *)(v2 + 312))
      {
        if (*(char *)(v2 + 359) < 0)
        {
          if (!*(void *)(v2 + 344)) {
            goto LABEL_49;
          }
        }
        else if (!*(unsigned char *)(v2 + 359))
        {
          goto LABEL_49;
        }
        if (*(_DWORD *)(v2 + 328))
        {
LABEL_65:
          sub_1010E20E8(v2);
          return;
        }
LABEL_49:
        char v23 = *(long long **)(v2 + 232);
        for (j = *(long long **)(v2 + 240); v23 != j; char v23 = (long long *)((char *)v23 + 24))
        {
          memset(&buf, 0, sizeof(buf));
          if (*((char *)v23 + 23) < 0)
          {
            sub_10004FC84(&buf, *(void **)v23, *((void *)v23 + 1));
          }
          else
          {
            long long v25 = *v23;
            buf.__r_.__value_.__r.__words[2] = *((void *)v23 + 2);
            *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v25;
          }
          uint64_t v26 = *v4;
          if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
          {
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_std::string buf = &buf;
            }
            else {
              p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)uint64_t v35 = 136446210;
            *(void *)&v35[4] = p_buf;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I P-CSCF: %{public}s", v35, 0xCu);
          }
          sub_1010E2D10((CSIPacketAddress *)v35, v2, (std::string::size_type)&buf);
          std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          char v29 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = buf.__r_.__value_.__l.__size_;
          }
          if (size)
          {
            std::string::operator=((std::string *)(v2 + 336), &buf);
            char v29 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          }
          if (v29 < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_65;
      }
      if ((v3 + 1) <= 4)
      {
        int v30 = *v4;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "got empty DNS results. Retrying...", (uint8_t *)&buf, 2u);
        }
        std::string::size_type v31 = *(std::__shared_weak_count **)(v2 + 24);
        if (v31)
        {
          std::string::size_type v32 = std::__shared_weak_count::lock(v31);
          if (v32)
          {
            atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v32);
            int v33 = *(std::__shared_weak_count **)(v2 + 24);
            if (v33 && std::__shared_weak_count::lock(v33)) {
              operator new();
            }
            sub_100088B9C();
          }
        }
        sub_100088B9C();
      }
    }
  }
}

void sub_1010E5D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1010E5D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 71) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  return sub_1000302C0((char *)(a1 + 72), *(long long **)(a2 + 72), *(long long **)(a2 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 3));
}

void sub_1010E5E24(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E5E54(uint64_t a1)
{
  int v3 = (void **)(a1 + 72);
  sub_100047F64(&v3);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_10004D2C8(v2);
  }
}

uint64_t sub_1010E5EA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1010E5EB8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1010E5ED4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

uint64_t *sub_1010E5EE4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)v1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (*(void *)(v1 + 8)) {
        sub_1010E121C(v3, *(_DWORD *)(v1 + 24));
      }
      sub_10004D2C8(v5);
    }
  }
  sub_1001BDE50(&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_1010E5F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10004D2C8(v10);
  sub_1001BDE50(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1010E5F80(uint64_t a1, uint64_t a2)
{
  __s1[0] = 0;
  __s1[1] = 0;
  uint64_t v26 = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10004FC84(__s1, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__s1 = *(_OWORD *)a1;
    uint64_t v26 = *(void *)(a1 + 16);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v24 = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v24 = *(void *)(a2 + 16);
  }
  if (v26 >= 0) {
    uint64_t v3 = (void **)((char *)__s1 + HIBYTE(v26));
  }
  else {
    uint64_t v3 = (void **)((char *)__s1[0] + (unint64_t)__s1[1]);
  }
  if (v26 >= 0) {
    uint64_t v4 = __s1;
  }
  else {
    uint64_t v4 = (void **)__s1[0];
  }
  while (v4 != v3)
  {
    *(unsigned char *)uint64_t v4 = __tolower(*(char *)v4);
    uint64_t v4 = (void **)((char *)v4 + 1);
  }
  long long v5 = (void *)HIBYTE(v24);
  char v6 = HIBYTE(v24);
  char v7 = __p[1];
  if (v24 >= 0) {
    uint64_t v8 = (void **)((char *)__p + HIBYTE(v24));
  }
  else {
    uint64_t v8 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (v24 >= 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if (v9 != v8)
  {
    do
    {
      *(unsigned char *)uint64_t v9 = __tolower(*(char *)v9);
      uint64_t v9 = (void **)((char *)v9 + 1);
    }
    while (v9 != v8);
    long long v5 = (void *)HIBYTE(v24);
    char v7 = __p[1];
    char v6 = HIBYTE(v24);
  }
  char v10 = HIBYTE(v26);
  if (v26 >= 0) {
    int v11 = (void *)HIBYTE(v26);
  }
  else {
    int v11 = __s1[1];
  }
  if (v6 < 0) {
    long long v5 = v7;
  }
  if (v11 != v5)
  {
    BOOL v21 = 0;
    if ((v6 & 0x80) == 0) {
      goto LABEL_46;
    }
    goto LABEL_49;
  }
  if (v6 >= 0) {
    unsigned int v12 = __p;
  }
  else {
    unsigned int v12 = (void **)__p[0];
  }
  if (SHIBYTE(v26) < 0)
  {
    BOOL v21 = memcmp(__s1[0], v12, (size_t)__s1[1]) == 0;
    goto LABEL_45;
  }
  if (HIBYTE(v26))
  {
    uint64_t v13 = HIBYTE(v26) - 1;
    BOOL v14 = __s1;
    do
    {
      int v16 = *(unsigned __int8 *)v14;
      BOOL v14 = (void **)((char *)v14 + 1);
      int v15 = v16;
      int v18 = *(unsigned __int8 *)v12;
      unsigned int v12 = (void **)((char *)v12 + 1);
      int v17 = v18;
      BOOL v20 = v13-- != 0;
      BOOL v21 = v15 == v17;
    }
    while (v15 == v17 && v20);
LABEL_45:
    if ((v6 & 0x80) == 0) {
      goto LABEL_46;
    }
LABEL_49:
    operator delete(__p[0]);
    if ((v26 & 0x8000000000000000) == 0) {
      return v21;
    }
LABEL_50:
    operator delete(__s1[0]);
    return v21;
  }
  BOOL v21 = 1;
  if (v6 < 0) {
    goto LABEL_49;
  }
LABEL_46:
  if (v10 < 0) {
    goto LABEL_50;
  }
  return v21;
}

void sub_1010E6150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010E6188(uint64_t a1, long long *a2)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v27 = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a1;
    uint64_t v27 = *(void *)(a1 + 16);
  }
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&v24, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v24 = *a2;
    uint64_t v25 = *((void *)a2 + 2);
  }
  if (v27 >= 0) {
    uint64_t v3 = (void **)((char *)__p + HIBYTE(v27));
  }
  else {
    uint64_t v3 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
  }
  if (v27 >= 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  while (v4 != v3)
  {
    *(unsigned char *)uint64_t v4 = __tolower(*(char *)v4);
    uint64_t v4 = (void **)((char *)v4 + 1);
  }
  int64_t v5 = HIBYTE(v25);
  char v6 = HIBYTE(v25);
  int64_t v7 = *((void *)&v24 + 1);
  uint64_t v8 = (char *)v24;
  uint64_t v9 = (char *)&v24;
  if (v25 >= 0) {
    char v10 = (char *)&v24 + HIBYTE(v25);
  }
  else {
    char v10 = (char *)(v24 + *((void *)&v24 + 1));
  }
  if (v25 >= 0) {
    int v11 = (char *)&v24;
  }
  else {
    int v11 = (char *)v24;
  }
  if (v11 != v10)
  {
    do
    {
      *int v11 = __tolower(*v11);
      ++v11;
    }
    while (v11 != v10);
    int64_t v5 = HIBYTE(v25);
    int64_t v7 = *((void *)&v24 + 1);
    uint64_t v8 = (char *)v24;
    char v6 = HIBYTE(v25);
  }
  char v12 = HIBYTE(v27);
  if (v27 >= 0) {
    uint64_t v13 = __p;
  }
  else {
    uint64_t v13 = (void **)__p[0];
  }
  if (v6 >= 0)
  {
    int64_t v14 = v5;
  }
  else
  {
    uint64_t v9 = v8;
    int64_t v14 = v7;
  }
  if (v14)
  {
    uint64_t v15 = (uint64_t)__p[1];
    if (v27 >= 0) {
      uint64_t v15 = HIBYTE(v27);
    }
    int v16 = (char *)v13 + v15;
    if (v15 >= v14)
    {
      int v20 = *v9;
      BOOL v21 = v13;
      do
      {
        uint64_t v22 = v15 - v14;
        if (v22 == -1) {
          break;
        }
        char v23 = (char *)memchr(v21, v20, v22 + 1);
        if (!v23) {
          break;
        }
        int v17 = v23;
        if (!memcmp(v23, v9, v14)) {
          goto LABEL_35;
        }
        BOOL v21 = (void **)(v17 + 1);
        uint64_t v15 = v16 - (v17 + 1);
      }
      while (v15 >= v14);
    }
    int v17 = v16;
LABEL_35:
    if (v17 == v16) {
      uint64_t v18 = -1;
    }
    else {
      uint64_t v18 = v17 - (char *)v13;
    }
    if (v6 < 0) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v18 = 0;
    if (v6 < 0)
    {
LABEL_39:
      operator delete(v8);
      char v12 = HIBYTE(v27);
    }
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  return v18 != -1;
}

void sub_1010E6384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E63BC(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6 = *((unsigned __int8 *)a1 + 23);
  size_t v7 = (size_t)a1[1];
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  if ((v6 & 0x80u) == 0) {
    size_t v8 = v6;
  }
  else {
    size_t v8 = v7;
  }
  __p.__r_.__value_.__r.__words[0] = 0;
  p_p = &__p;
  sub_1000C140C((uint64_t)&__p, v8 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v8)
  {
    if (*((char *)a1 + 23) >= 0) {
      char v10 = a1;
    }
    else {
      char v10 = *a1;
    }
    memmove(p_p, v10, v8);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v8) = 44;
  int v11 = *(char *)(a2 + 23);
  if (v11 >= 0) {
    char v12 = (const std::string::value_type *)a2;
  }
  else {
    char v12 = *(const std::string::value_type **)a2;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a2 + 8);
  }
  int64_t v14 = std::string::append(&__p, v12, v13);
  int v16 = (void *)v14->__r_.__value_.__r.__words[0];
  unint64_t size = v14->__r_.__value_.__l.__size_;
  *(_DWORD *)uint64_t v19 = v14->__r_.__value_.__r.__words[2];
  *(_DWORD *)&void v19[3] = *(_DWORD *)((char *)&v14->__r_.__value_.__r.__words[2] + 3);
  int v17 = SHIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (v17 < 0)
  {
    sub_10004FC84((unsigned char *)a3, v16, size);
    operator delete(v16);
  }
  else
  {
    *(void *)a3 = v16;
    *(void *)(a3 + 8) = size;
    *(_DWORD *)(a3 + 16) = *(_DWORD *)v19;
    *(_DWORD *)(a3 + 19) = *(_DWORD *)&v19[3];
    *(unsigned char *)(a3 + 23) = v17;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1010E64E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010E6514@<X0>(char *__s@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  uint64_t result = strlen(__s);
  int64_t v9 = result;
  if (result)
  {
    if ((v6 & 0x80u) == 0) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = *(void *)(a2 + 8);
    }
    if (v10 >= result)
    {
      uint64_t v11 = v7 + v10;
      int v12 = *__s;
      uint64_t result = v7;
      do
      {
        uint64_t v13 = v10 - v9;
        if (v13 == -1) {
          break;
        }
        uint64_t result = (uint64_t)memchr((void *)result, v12, v13 + 1);
        if (!result) {
          break;
        }
        uint64_t v14 = result;
        uint64_t result = memcmp((const void *)result, __s, v9);
        if (!result)
        {
          if (v14 == v11) {
            break;
          }
          int64_t v9 = v14 - v7;
          if (v14 - v7 == -1) {
            break;
          }
          goto LABEL_18;
        }
        uint64_t result = v14 + 1;
        uint64_t v10 = v11 - (v14 + 1);
      }
      while (v10 >= v9);
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 48) = 0;
  }
  else
  {
LABEL_18:
    std::string::basic_string(&v19, (const std::string *)a2, 0, v9, (std::allocator<char> *)&v18);
    size_t v15 = strlen(__s);
    uint64_t result = (uint64_t)std::string::basic_string(&v18, (const std::string *)a2, v15 + v9, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v20);
    std::string::size_type size = v19.__r_.__value_.__l.__size_;
    *(void *)a3 = v19.__r_.__value_.__r.__words[0];
    *(void *)(a3 + 8) = size;
    *(void *)(a3 + 15) = *(std::string::size_type *)((char *)&v19.__r_.__value_.__r.__words[1] + 7);
    LOBYTE(size) = *((unsigned char *)&v19.__r_.__value_.__s + 23);
    std::string::size_type v17 = v18.__r_.__value_.__l.__size_;
    *(void *)(a3 + 24) = v18.__r_.__value_.__r.__words[0];
    *(void *)(a3 + 32) = v17;
    *(void *)(a3 + 39) = *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 7);
    LOBYTE(v17) = *((unsigned char *)&v18.__r_.__value_.__s + 23);
    *(unsigned char *)(a3 + 23) = size;
    *(unsigned char *)(a3 + 47) = v17;
    *(unsigned char *)(a3 + 48) = 1;
  }
  return result;
}

void sub_1010E6674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E6690(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (!v3)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return;
  }
  BOOL v78 = 0;
  uint64_t v79 = 0;
  uint64_t v77 = &v78;
  sub_100058DB0(__p, "\r\n");
  uint64_t v5 = sub_100562738((char **)a1, (char *)__p);
  uint64_t v6 = v5;
  if ((SBYTE7(v73[0]) & 0x80000000) == 0)
  {
    if (v5) {
      goto LABEL_6;
    }
LABEL_10:
    memset(&__dst, 0, sizeof(__dst));
    if (*(char *)(a1 + 23) < 0) {
      sub_10004FC84(&__dst, *(void **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string __dst = *(std::string *)a1;
    }
    sub_100058DB0(&v75, "\r\n");
    char v21 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v75.__r_.__value_.__l.__size_;
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v23 = &v75;
    }
    else {
      char v23 = (std::string *)v75.__r_.__value_.__r.__words[0];
    }
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = __dst.__r_.__value_.__l.__size_;
    }
    if (v25 && size)
    {
      uint64_t v26 = (char *)v23 + size;
      uint64_t v27 = (std::string *)((char *)p_dst + v25);
      std::string::size_type v28 = size - 1;
      std::string::size_type v29 = v25 - 1;
      int v30 = p_dst;
      while (1)
      {
        uint64_t v31 = 0;
        while (v30->__r_.__value_.__s.__data_[v31] == v23->__r_.__value_.__s.__data_[v31])
        {
          uint64_t v32 = v31 + 1;
          if (v29 != v31)
          {
            BOOL v33 = v28 == v31++;
            if (!v33) {
              continue;
            }
          }
          uint64_t v34 = (char *)v23 + v32;
          uint64_t v35 = (std::string *)((char *)v30 + v32);
          goto LABEL_59;
        }
        uint64_t v34 = (char *)v23 + v31;
        uint64_t v35 = (std::string *)((char *)v30 + v31);
LABEL_59:
        if (v34 == v26) {
          break;
        }
        int v30 = (std::string *)((char *)v30 + 1);
        --v29;
        if (v30 == v27) {
          goto LABEL_138;
        }
      }
      if (v30 != v35)
      {
        memset(v73, 0, sizeof(v73));
        *(_OWORD *)std::string __p = 0u;
        uint64_t v42 = p_dst;
        do
        {
          BOOL v43 = v35;
          p_dst = (std::string *)sub_1010E7518((int64x2_t *)__p, p_dst, v42, v30);
          size_t v44 = (char *)__p[1] + 8 * ((*(void *)&v73[1] + *((void *)&v73[1] + 1)) >> 12);
          if (*(void **)&v73[0] == __p[1])
          {
            uint64_t v45 = 0;
            uint64_t v47 = 0;
            char v46 = (char *)__p[1] + 8 * (*(void *)&v73[1] >> 12);
          }
          else
          {
            uint64_t v45 = *(void *)v44 + ((LOWORD(v73[1]) + WORD4(v73[1])) & 0xFFF);
            char v46 = (char *)__p[1] + 8 * (*(void *)&v73[1] >> 12);
            uint64_t v47 = *(void *)v46 + (v73[1] & 0xFFF);
          }
          if (v45 == v47) {
            uint64_t v48 = 0;
          }
          else {
            uint64_t v48 = v45 + ((v44 - v46) << 9) - (v47 + *(void *)v44) + *(void *)v46;
          }
          if (*(void **)&v73[0] == __p[1]) {
            std::string::size_type v49 = 0;
          }
          else {
            std::string::size_type v49 = *(void *)v46 + (v73[1] & 0xFFF);
          }
          v80.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
          v80.__r_.__value_.__l.__size_ = v49;
          sub_100B24F18((uint64_t)&v80, v48);
          std::string::size_type v50 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v51 = &__dst;
          }
          else {
            int v51 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v50 = __dst.__r_.__value_.__l.__size_;
          }
          char v52 = (std::string *)((char *)v51 + v50);
          if (v52 == v43) {
            break;
          }
          int v30 = v43;
          while (1)
          {
            uint64_t v53 = 0;
            while (v30->__r_.__value_.__s.__data_[v53] == v23->__r_.__value_.__s.__data_[v53])
            {
              uint64_t v54 = v53 + 1;
              if ((std::string *)((char *)&v30->__r_.__value_.__l.__data_ + v53 + 1) != v52)
              {
                BOOL v33 = v28 == v53++;
                if (!v33) {
                  continue;
                }
              }
              uint64_t v55 = (char *)v23 + v54;
              uint64_t v35 = (std::string *)((char *)v30 + v54);
              goto LABEL_110;
            }
            uint64_t v55 = (char *)v23 + v53;
            uint64_t v35 = (std::string *)((char *)v30 + v53);
LABEL_110:
            if (v55 == v26) {
              break;
            }
            int v30 = (std::string *)((char *)v30 + 1);
            if (v30 == v52) {
              goto LABEL_114;
            }
          }
          uint64_t v42 = v43;
        }
        while (v30 != v35);
LABEL_114:
        size_t v56 = sub_1010E7518((int64x2_t *)__p, p_dst, v43, v52);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v57 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v57 = __dst.__r_.__value_.__l.__size_;
        }
        if (*((void *)&v73[1] + 1))
        {
          uint64_t v58 = (char *)__p[1] + 8 * (*(void *)&v73[1] >> 12);
          if (*(void **)&v73[0] == __p[1])
          {
            int v59 = 0;
            uint64_t v61 = 0;
            uint64_t v60 = (char *)__p[1] + 8 * ((*(void *)&v73[1] + *((void *)&v73[1] + 1)) >> 12);
          }
          else
          {
            int v59 = (std::string::value_type *)(*(void *)v58 + (v73[1] & 0xFFF));
            uint64_t v60 = (char *)__p[1] + 8 * ((*(void *)&v73[1] + *((void *)&v73[1] + 1)) >> 12);
            uint64_t v61 = *(void *)v60 + ((*(void *)&v73[1] + *((void *)&v73[1] + 1)) & 0xFFFLL);
          }
          if ((std::string::value_type *)v61 != v59)
          {
            std::string::size_type v63 = v61 + ((v60 - v58) << 9) - (void)&v59[*(void *)v60] + *(void *)v58;
            if (v63)
            {
              memset(&v80, 0, sizeof(v80));
              do
              {
                std::string::push_back(&v80, *v59++);
                if (&v59[-*(void *)v58] == (std::string::value_type *)4096)
                {
                  int v64 = (std::string::value_type *)*((void *)v58 + 1);
                  v58 += 8;
                  int v59 = v64;
                }
              }
              while (v59 != (std::string::value_type *)v61);
              std::string::size_type v65 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int64_t v66 = &v80;
              }
              else {
                int64_t v66 = (std::string *)v80.__r_.__value_.__r.__words[0];
              }
              if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v65 = v80.__r_.__value_.__l.__size_;
              }
              sub_1010E7650(&__dst, v63, v57, (char *)v66, (char *)v66 + v65);
              if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v80.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        else
        {
          size_t v62 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v62 = &__dst;
          }
          std::string::erase(&__dst, v56 - (unsigned char *)v62, (char *)v62 + v57 - v56);
        }
        sub_100B24550(__p);
        char v21 = HIBYTE(v75.__r_.__value_.__r.__words[2]);
      }
    }
LABEL_138:
    if (v21 < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    uint64_t v74 = 0;
    memset(v73, 0, sizeof(v73));
    *(_OWORD *)std::string __p = 0u;
    sub_1010E6514(": ", a1, (uint64_t)__p);
    char v67 = v74;
    if ((_BYTE)v74)
    {
      if (SBYTE7(v73[0]) < 0)
      {
        sub_10004FC84(&v80, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v80.__r_.__value_.__r.__words[2] = *(void *)&v73[0];
      }
      if (SHIBYTE(v73[1]) < 0) {
        sub_10004FC84(&v75, *((void **)&v73[0] + 1), *(unint64_t *)&v73[1]);
      }
      else {
        std::string v75 = *(std::string *)((char *)v73 + 8);
      }
      sub_1010E707C((uint64_t)&v77, (void **)&v80.__r_.__value_.__l.__data_, &v75);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v75.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v80.__r_.__value_.__l.__data_);
      }
      int v68 = v78;
      *(void *)a2 = v77;
      *(void *)(a2 + 8) = v68;
      uint64_t v69 = a2 + 8;
      uint64_t v70 = v79;
      *(void *)(a2 + 16) = v79;
      if (v70)
      {
        v68[2] = v69;
        uint64_t v77 = &v78;
        char v67 = 1;
        BOOL v78 = 0;
        uint64_t v79 = 0;
      }
      else
      {
        *(void *)a2 = v69;
        char v67 = 1;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
    }
    *(unsigned char *)(a2 + 24) = v67;
    sub_10013E528((uint64_t)__p);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    goto LABEL_157;
  }
  operator delete(__p[0]);
  if (!v6) {
    goto LABEL_10;
  }
LABEL_6:
  memset(&v80, 0, sizeof(v80));
  memset(&__dst, 0, sizeof(__dst));
  if (*(char *)(a1 + 23) < 0) {
    sub_10004FC84(&__dst, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __dst = *(std::string *)a1;
  }
  long long v7 = 0uLL;
LABEL_14:
  uint64_t v74 = 0;
  v73[0] = v7;
  v73[1] = v7;
  *(_OWORD *)std::string __p = v7;
  sub_1010E6514("\r\n", (uint64_t)&__dst, (uint64_t)__p);
  if ((_BYTE)v74)
  {
    size_t v8 = (_OWORD *)v80.__r_.__value_.__l.__size_;
    if (v80.__r_.__value_.__l.__size_ >= v80.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v10 = sub_100048008((uint64_t *)&v80, (long long *)__p);
    }
    else
    {
      if (SBYTE7(v73[0]) < 0)
      {
        sub_10004FC84((unsigned char *)v80.__r_.__value_.__l.__size_, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v9 = *(_OWORD *)__p;
        *(void *)(v80.__r_.__value_.__l.__size_ + 16) = *(void *)&v73[0];
        _OWORD *v8 = v9;
      }
      std::string::size_type v10 = (std::string::size_type)v8 + 24;
    }
    v80.__r_.__value_.__l.__size_ = v10;
    uint64_t v11 = HIBYTE(v73[1]);
    int v12 = SHIBYTE(v73[1]);
    uint64_t v14 = (void *)*((void *)&v73[0] + 1);
    unint64_t v13 = *(void *)&v73[1];
    if (v73[1] >= 0)
    {
      size_t v15 = (char *)v73 + 8;
    }
    else
    {
      uint64_t v11 = *(void *)&v73[1];
      size_t v15 = (char *)*((void *)&v73[0] + 1);
    }
    if (v11 >= 2)
    {
      int v16 = &v15[v11];
      std::string::size_type v17 = v15;
      do
      {
        std::string v18 = (char *)memchr(v17, 13, v11 - 1);
        if (!v18) {
          break;
        }
        if (*(_WORD *)v18 == 2573)
        {
          if (v18 != v16 && v18 - v15 != -1)
          {
            std::string::operator=(&__dst, (const std::string *)((char *)v73 + 8));
            sub_10013E528((uint64_t)__p);
            long long v7 = 0uLL;
            goto LABEL_14;
          }
          break;
        }
        std::string::size_type v17 = v18 + 1;
        uint64_t v11 = v16 - (unsigned char *)v17;
      }
      while (v16 - (unsigned char *)v17 >= 2);
    }
    if (v10 >= v80.__r_.__value_.__r.__words[2])
    {
      std::string::size_type v20 = sub_100048008((uint64_t *)&v80, (_OWORD *)((char *)v73 + 8));
    }
    else
    {
      if (v12 < 0)
      {
        sub_10004FC84((unsigned char *)v10, v14, v13);
      }
      else
      {
        long long v19 = *(_OWORD *)((char *)v73 + 8);
        *(void *)(v10 + 16) = *((void *)&v73[1] + 1);
        *(_OWORD *)std::string::size_type v10 = v19;
      }
      std::string::size_type v20 = v10 + 24;
    }
    v80.__r_.__value_.__l.__size_ = v20;
  }
  sub_10013E528((uint64_t)__p);
  std::string::size_type v37 = v80.__r_.__value_.__l.__size_;
  uint64_t v36 = v80.__r_.__value_.__r.__words[0];
  if (v80.__r_.__value_.__l.__size_ == v80.__r_.__value_.__r.__words[0])
  {
    char v41 = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    do
    {
      uint64_t v74 = 0;
      memset(v73, 0, sizeof(v73));
      *(_OWORD *)std::string __p = 0u;
      sub_1010E6514(": ", v36, (uint64_t)__p);
      if ((_BYTE)v74)
      {
        if (SBYTE7(v73[0]) < 0)
        {
          sub_10004FC84(&v75, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
          v75.__r_.__value_.__r.__words[2] = *(void *)&v73[0];
        }
        if (SHIBYTE(v73[1]) < 0) {
          sub_10004FC84(&v71, *((void **)&v73[0] + 1), *(unint64_t *)&v73[1]);
        }
        else {
          std::string v71 = *(std::string *)((char *)v73 + 8);
        }
        sub_1010E707C((uint64_t)&v77, (void **)&v75.__r_.__value_.__l.__data_, &v71);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v75.__r_.__value_.__l.__data_);
        }
      }
      sub_10013E528((uint64_t)__p);
      v36 += 24;
    }
    while (v36 != v37);
    uint64_t v38 = v78;
    *(void *)a2 = v77;
    *(void *)(a2 + 8) = v38;
    uint64_t v39 = a2 + 8;
    uint64_t v40 = v79;
    *(void *)(a2 + 16) = v79;
    if (v40)
    {
      v38[2] = v39;
      uint64_t v77 = &v78;
      char v41 = 1;
      BOOL v78 = 0;
      uint64_t v79 = 0;
    }
    else
    {
      *(void *)a2 = v39;
      char v41 = 1;
    }
  }
  *(unsigned char *)(a2 + 24) = v41;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  __p[0] = &v80;
  sub_100047F64((void ***)__p);
LABEL_157:
  sub_10010C0E0((uint64_t)&v77, v78);
}

void sub_1010E6EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (*(char *)(v39 - 89) < 0) {
    operator delete(*(void **)(v39 - 112));
  }
  sub_100B24550(&a16);
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  sub_10010C0E0(v39 - 136, *(void **)(v39 - 128));
  _Unwind_Resume(a1);
}

void sub_1010E707C(uint64_t a1, void **a2, const std::string *a3)
{
  if ((void **)(a1 + 8) == sub_100046F68(a1, a2))
  {
    *(void *)&long long v10 = a2;
    long long v9 = sub_1010E776C((uint64_t **)a1, a2, (uint64_t)&unk_10144E20E, (long long **)&v10);
    std::string::operator=((std::string *)(v9 + 7), a3);
  }
  else
  {
    uint64_t v6 = (const void **)sub_1010E71BC(a1, a2);
    sub_1010E63BC(v6, (uint64_t)a3, (uint64_t)&v10);
    int v12 = a2;
    long long v7 = sub_1010E776C((uint64_t **)a1, a2, (uint64_t)&unk_10144E20E, (long long **)&v12);
    size_t v8 = v7 + 7;
    if (*((char *)v7 + 79) < 0) {
      operator delete((void *)*v8);
    }
    *(_OWORD *)size_t v8 = v10;
    void v8[2] = v11;
  }
}

void sub_1010E7150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1010E716C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v4 = v3;
  }
  uint64_t v5 = sub_10004B96C(v2, a2, v4);

  return sub_10004B96C(v5, (uint64_t)"\r\n", 2);
}

uint64_t sub_1010E71BC(uint64_t a1, void **a2)
{
  uint64_t v4 = 0;
  uint64_t v2 = *sub_100046ED4(a1, &v4, a2);
  if (!v2) {
    sub_1000C14F0("map::at:  key not found");
  }
  return v2 + 56;
}

void *sub_1010E7200@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result + 1;
  uint64_t v5 = (void *)*result;
  if ((void *)*result == result + 1)
  {
LABEL_9:
    char v10 = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t result = (void *)sub_1010E5F80((uint64_t)(v5 + 4), a2);
      if (result) {
        break;
      }
      long long v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          long long v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
      if (v8 == v4) {
        goto LABEL_9;
      }
    }
    if (*((char *)v5 + 79) < 0)
    {
      uint64_t result = sub_10004FC84((unsigned char *)a3, (void *)v5[7], v5[8]);
    }
    else
    {
      long long v11 = *(_OWORD *)(v5 + 7);
      *(void *)(a3 + 16) = v5[9];
      *(_OWORD *)a3 = v11;
    }
    char v10 = 1;
  }
  *(unsigned char *)(a3 + 24) = v10;
  return result;
}

uint64_t sub_1010E72C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  *(_OWORD *)size_t v15 = 0u;
  long long v16 = 0u;
  memset(v14, 0, sizeof(v14));
  sub_10004BD84((uint64_t)v14);
  uint64_t v6 = (void *)*a1;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = v6;
  if (v6 != v4)
  {
    do
    {
      sub_100B8F608((uint64_t)v14, (uint64_t)(v5 + 4), (const std::string *)(v5 + 7));
      long long v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          long long v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v4);
  }
  sub_10004BC98((uint64_t)&v14[1] + 8, __p);
  if (SHIBYTE(v13) < 0)
  {
    sub_10004FC84((unsigned char *)a2, __p[0], (unint64_t)__p[1]);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(void *)(a2 + 16) = v13;
  }
  *(void *)((char *)v14
  *(void *)&v14[1] = v10;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1010E74E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10008248C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

unsigned char *sub_1010E7518(int64x2_t *a1, unsigned char *__dst, unsigned char *__src, unsigned char *a4)
{
  uint64_t v6 = __dst;
  uint64_t v8 = a1[2].i64[1];
  if (v8) {
    BOOL v9 = __dst == __src;
  }
  else {
    BOOL v9 = 1;
  }
  if (!v9)
  {
    do
    {
      *v6++ = *(unsigned char *)(*(void *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a1[2].i64[0] & 0xFFF));
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_10144F900);
      sub_100B2539C((uint64_t)a1, 1);
      uint64_t v8 = a1[2].i64[1];
    }
    while (v8 && v6 != __src);
  }
  if (v8)
  {
    while (v6 != a4)
    {
      sub_100B22AE8(a1, v6);
      *v6++ = *(unsigned char *)(*(void *)(a1->i64[1] + (((unint64_t)a1[2].i64[0] >> 9) & 0x7FFFFFFFFFFFF8))
                       + (a1[2].i64[0] & 0xFFF));
      a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_10144F900);
      sub_100B2539C((uint64_t)a1, 1);
    }
  }
  else if (v6 != __src)
  {
    size_t v10 = a4 - __src;
    if (v10) {
      memmove(v6, __src, v10);
    }
    return &v6[v10];
  }
  return a4;
}

uint64_t sub_1010E7650(std::string *this, std::string::size_type __n_add, std::string::size_type __n_copy, char *a4, char *a5)
{
  BOOL v9 = this;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    std::string::size_type v11 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v11 - size >= __n_add)
    {
      int v12 = (std::string *)this->__r_.__value_.__r.__words[0];
      goto LABEL_7;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = 22;
    int v12 = this;
    if (22 - size >= __n_add)
    {
LABEL_7:
      size_t v13 = size - __n_copy;
      if (size == __n_copy) {
        std::string::size_type size = __n_copy;
      }
      else {
        memmove((char *)v12 + __n_copy + __n_add, (char *)v12 + __n_copy, v13);
      }
      goto LABEL_10;
    }
  }
  std::string::__grow_by(this, v11, size + __n_add - v11, size, __n_copy, 0, __n_add);
  v9->__r_.__value_.__l.__size_ = size + __n_add;
  int v12 = (std::string *)v9->__r_.__value_.__r.__words[0];
LABEL_10:
  std::string::size_type v14 = size + __n_add;
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    v9->__r_.__value_.__l.__size_ = v14;
  }
  else {
    *((unsigned char *)&v9->__r_.__value_.__s + 23) = v14 & 0x7F;
  }
  v12->__r_.__value_.__s.__data_[v14] = 0;
  if (a4 != a5)
  {
    size_t v15 = (char *)v12 + __n_copy;
    do
    {
      char v16 = *a4++;
      *v15++ = v16;
    }
    while (a4 != a5);
  }
  if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0) {
    BOOL v9 = (std::string *)v9->__r_.__value_.__r.__words[0];
  }
  return (uint64_t)v9 + __n_copy;
}

uint64_t *sub_1010E776C(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1010E7824((uint64_t)a1, a4, v10);
    sub_100046C38(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_10010E764((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_1010E7824@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_10004FC84(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1010E78AC(_Unwind_Exception *a1)
{
  sub_10010E764(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1010E78C4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

char **sub_1010E79C0(uint64_t a1, char **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v6 = v4 - v3;
  if ((unint64_t)(v4 - v3) <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C154C(exception, "Invalid Payload");
    goto LABEL_8;
  }
  uint64_t result = (char **)(a1 + 16);
  if (result != a2)
  {
    uint64_t result = (char **)sub_10006E4A8(result, v3, v4, v6);
    unint64_t v6 = a2[1] - *a2;
  }
  long long v9 = *(unsigned char **)(a1 + 16);
  *(void *)(a1 + 40) = v9 + 1;
  *(unsigned char *)(a1 + 8) = *v9;
  *(void *)(a1 + 40) = v9 + 2;
  *(unsigned char *)(a1 + 9) = v9[1];
  *(void *)(a1 + 40) = v9 + 3;
  uint64_t v10 = v9[2];
  *(void *)(a1 + 40) = v9 + 4;
  if ((v9[3] | (unint64_t)(v10 << 8)) < v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C154C(exception, "Invalid Payload Length");
LABEL_8:
  }
  return result;
}

void sub_1010E7AA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1010E7AC0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (const void *)a1[2];
  uint64_t v4 = a1[3];
  if (v3 == (const void *)v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 40))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 32))(a1, v6);
    uint64_t v3 = (const void *)a1[2];
    uint64_t v4 = a1[3];
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;

  return sub_10005C928(a2, v3, v4, v4 - (void)v3);
}

uint64_t sub_1010E7B64()
{
  return 4;
}

uint64_t sub_1010E7B6C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (unint64_t *)(a1 + 16);
  *(void *)(a1 + 24) = *(void *)(a1 + 16);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) > a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003B79AC(exception, "Invalid Minimum Size");
    size_t v13 = (void (*)(void *))&std::invalid_argument::~invalid_argument;
    goto LABEL_12;
  }
  int v5 = *(unsigned __int8 *)(a1 + 8);
  if ((v5 - 5) <= 0xFFFFFFFB)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C154C(exception, "Invalid Code");
    size_t v13 = (void (*)(void *))&std::out_of_range::~out_of_range;
LABEL_12:
    __cxa_throw(exception, v12, v13);
  }
  uint64_t v6 = *(unsigned char **)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24) - (void)v6;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      *(void *)(a1 + 24) = &v6[a2];
    }
  }
  else
  {
    sub_10011FDF0(v4, a2 - v7);
    LOBYTE(v5) = *(unsigned char *)(a1 + 8);
    uint64_t v6 = *(unsigned char **)(a1 + 16);
  }
  unsigned char *v6 = v5;
  *(unsigned char *)(*(void *)(a1 + 16) + 1) = *(unsigned char *)(a1 + 9);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);

  return sub_1010E7CB4(v8, v9);
}

void sub_1010E7C9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E7CB4(uint64_t result, uint64_t a2)
{
  if (result + 2 == a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C154C(exception, "Invalid data length");
  }
  *(_WORD *)(result + 2) = bswap32(a2 - result) >> 16;
  return result;
}

void sub_1010E7D24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E7D38(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003B79AC(exception, "Invalid Payload");
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)a1 + 24);

  return v2();
}

void sub_1010E7DC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1010E7DD8(uint64_t a1, uint64_t a2)
{
  sub_1010EA0C0(&v2, a2);
}

void sub_1010E7E20()
{
}

void sub_1010E803C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E80D0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  memset(v13, 0, sizeof(v13));
  sub_10004DE24((uint64_t)v13);
  uint64_t v4 = sub_10004B96C(v13, (uint64_t)"Code: ", 6);
  if ((*(unsigned char *)(a1 + 8) - 1) > 3u) {
    int v5 = "????";
  }
  else {
    int v5 = off_101A8C538[(char)(*(unsigned char *)(a1 + 8) - 1)];
  }
  size_t v6 = strlen(v5);
  unint64_t v7 = sub_10004B96C(v4, (uint64_t)v5, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(void *)(*v7 - 24)));
  uint64_t v8 = std::locale::use_facet(&v27, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
  std::locale::~locale(&v27);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v9 = sub_10004B96C(v7, (uint64_t)"Ident: ", 7);
  LOBYTE(v27.__locale_) = *(unsigned char *)(a1 + 9);
  uint64_t v10 = sub_10004B96C(v9, (uint64_t)&v27, 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  uint64_t v11 = std::locale::use_facet(&v27, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v27);
  std::ostream::put();
  std::ostream::flush();
  sub_10004BC98((uint64_t)v13 + 8, a2);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1010E83AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::locale::~locale((std::locale *)(v9 - 56));
  sub_1000C937C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E83D4(uint64_t a1, int a2, char a3, char a4, uint64_t a5)
{
  if (a2) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 9) = a4;
  *(void *)a1 = off_101A8C2E0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  sub_10005C928((void *)(a1 + 56), *(const void **)a5, *(void *)(a5 + 8), *(void *)(a5 + 8) - *(void *)a5);
  *(unsigned char *)(a1 + 48) = a3;
  return a1;
}

void sub_1010E844C(_Unwind_Exception *exception_object)
{
  void *v1 = off_101A8C2A0;
  uint64_t v3 = (void *)v1[2];
  if (v3)
  {
    v1[3] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010E8484()
{
  return 5;
}

uint64_t sub_1010E848C(uint64_t a1, unint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) > a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003B79AC(exception, "Invalid Size");
    uint64_t v11 = (void (*)(void *))&std::invalid_argument::~invalid_argument;
    goto LABEL_10;
  }
  sub_1010E7B6C(a1, a2);
  if (!*(unsigned char *)(a1 + 48))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C154C(exception, "Invalid Type");
    uint64_t v11 = (void (*)(void *))&std::out_of_range::~out_of_range;
LABEL_10:
    __cxa_throw(exception, v10, v11);
  }
  *(unsigned char *)(*(void *)(a1 + 16) + 4) = *(unsigned char *)(a1 + 48);
  uint64_t v4 = *(char **)(a1 + 56);
  int v5 = *(char **)(a1 + 64);
  if (v4 != v5) {
    sub_10005C748(a1 + 16, *(char **)(a1 + 24), v4, v5, v5 - v4);
  }
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);

  return sub_1010E7CB4(v6, v7);
}

void sub_1010E8590(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char **sub_1010E85A8(uint64_t a1, char **a2)
{
  uint64_t result = sub_1010E79C0(a1, a2);
  if (*(void *)(a1 + 24) - *(void *)(a1 + 16) <= 4uLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C154C(exception, "Invalid Request/Response Payload");
  }
  uint64_t v4 = *(unsigned char **)(a1 + 40);
  *(void *)(a1 + 40) = v4 + 1;
  *(unsigned char *)(a1 + 48) = *v4;
  return result;
}

void sub_1010E8628(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E863C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)long long v17 = 0u;
  memset(v16, 0, sizeof(v16));
  sub_10004DE24((uint64_t)v16);
  sub_1010E80D0(a1, __p);
  if ((v15 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v5 = v15;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  uint64_t v6 = sub_10004B96C(v16, (uint64_t)v4, v5);
  uint64_t v7 = sub_10004B96C(v6, (uint64_t)"Type: ", 6);
  unsigned int v8 = *(unsigned __int8 *)(a1 + 48);
  if (v8 > 0x16)
  {
    switch(v8)
    {
      case 0x17u:
        uint64_t v9 = "EAP-AKA";
        break;
      case 0xFEu:
        uint64_t v9 = "Expanded";
        break;
      case 0xFFu:
        uint64_t v9 = "Experimental";
        break;
      default:
LABEL_20:
        uint64_t v9 = "????";
        break;
    }
  }
  else
  {
    uint64_t v9 = "Identity";
    switch(v8)
    {
      case 1u:
        break;
      case 2u:
        uint64_t v9 = "Notification";
        break;
      case 3u:
        uint64_t v9 = "NAK";
        break;
      case 4u:
        uint64_t v9 = "MD5Challenge";
        break;
      case 5u:
        uint64_t v9 = "OTP";
        break;
      case 6u:
        uint64_t v9 = "GTC";
        break;
      default:
        goto LABEL_20;
    }
  }
  size_t v10 = strlen(v9);
  uint64_t v11 = sub_10004B96C(v7, (uint64_t)v9, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  int v12 = std::locale::use_facet(&v30, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v30);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  sub_10004BC98((uint64_t)v16 + 8, a2);
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1010E8940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

const char *sub_1010E8998(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = "RAND";
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "AUTN";
      break;
    case 2:
      uint64_t result = "RES";
      break;
    case 3:
      uint64_t result = "AUTS";
      break;
    case 4:
    case 7:
    case 8:
    case 17:
LABEL_7:
      uint64_t result = "????";
      break;
    case 5:
      uint64_t result = "PADDING";
      break;
    case 6:
      uint64_t result = "NONCE_MT";
      break;
    case 9:
      uint64_t result = "PERMANENT ID REQ";
      break;
    case 10:
      uint64_t result = "MAC";
      break;
    case 11:
      uint64_t result = "NOTIFICATION";
      break;
    case 12:
      uint64_t result = "ANY ID REQ";
      break;
    case 13:
      uint64_t result = "IDENTITY";
      break;
    case 14:
      uint64_t result = "VERSION LIST";
      break;
    case 15:
      uint64_t result = "SELECTED VERSION";
      break;
    case 16:
      uint64_t result = "ID REQ";
      break;
    case 18:
      uint64_t result = "COUNTER";
      break;
    case 19:
      uint64_t result = "COUNTER TOO SMALL";
      break;
    case 20:
      uint64_t result = "NONCE S";
      break;
    case 21:
      uint64_t result = "CLIENT ERROR CODE";
      break;
    default:
      switch("RAND")
      {
        case 0x7Fu:
          uint64_t result = "MAX NON-SKIPPABLE";
          break;
        case 0x80u:
        case 0x83u:
          goto LABEL_7;
        case 0x81u:
          uint64_t result = "IV";
          break;
        case 0x82u:
          uint64_t result = "ENCR DATA";
          break;
        case 0x84u:
          uint64_t result = "NEXT PSEUDONYM";
          break;
        case 0x85u:
          uint64_t result = "NEXT REAUTH ID";
          break;
        case 0x86u:
          uint64_t result = "CHECKCODE";
          break;
        case 0x87u:
          uint64_t result = "RESULT IND";
          break;
        default:
          if ("RAND" != 255) {
            goto LABEL_7;
          }
          uint64_t result = "MAX";
          break;
      }
      break;
  }
  return result;
}

uint64_t sub_1010E8BB4(uint64_t a1, int a2, char a3, char a4, char a5, uint64_t a6)
{
  memset(v11, 0, sizeof(v11));
  uint64_t v9 = sub_1010E83D4(a1, a2, a3, a4, (uint64_t)v11);
  *(void *)uint64_t v9 = off_101A8C320;
  *(void *)(v9 + 96) = 0;
  *(void *)(v9 + 88) = v9 + 96;
  *(void *)(v9 + 104) = 0;
  *(unsigned char *)(v9 + 80) = a5;
  if (v9 + 88 != a6) {
    sub_100FAD4C4((uint64_t **)(v9 + 88), *(uint64_t **)a6, (uint64_t *)(a6 + 8));
  }
  return a1;
}

void sub_1010E8C4C(_Unwind_Exception *a1)
{
  sub_10026CF54(v2, *(void **)(v1 + 96));
  sub_100B63E7C((void *)v1);
  _Unwind_Resume(a1);
}

void sub_1010E8C6C(uint64_t a1, char **a2)
{
  sub_1010E85A8(a1, a2);
  uint64_t v3 = *(unsigned __int8 **)(a1 + 24);
  if ((unint64_t)&v3[-*(void *)(a1 + 16)] <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C154C(exception, "Invalid AKA Payload");
    long long v18 = (void (*)(void *))&std::out_of_range::~out_of_range;
    goto LABEL_52;
  }
  uint64_t v4 = *(unsigned char **)(a1 + 40);
  *(void *)(a1 + 40) = v4 + 1;
  char v6 = *v4;
  uint64_t v5 = v4 + 3;
  *(unsigned char *)(a1 + 80) = v6;
  *(void *)(a1 + 40) = v5;
  while (v5 != v3)
  {
    *(void *)(a1 + 40) = v5 + 1;
    uint64_t v7 = *v5;
    if (v5 + 1 == v3)
    {
      uint64_t v14 = *v5;
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1010E92E8(exception, v14);
      goto LABEL_51;
    }
    unsigned int v8 = v5 + 2;
    *(void *)(a1 + 40) = v5 + 2;
    uint64_t v9 = v5[1];
    uint64_t v10 = 5;
    switch((int)v7)
    {
      case 1:
      case 2:
      case 11:
      case 21:
        goto LABEL_7;
      case 3:
      case 14:
      case 15:
        goto LABEL_10;
      case 4:
        uint64_t v10 = 4;
        goto LABEL_7;
      case 5:
      case 6:
      case 8:
      case 9:
      case 18:
        goto LABEL_12;
      case 7:
      case 10:
      case 12:
      case 13:
      case 16:
      case 19:
      case 20:
      case 22:
        uint64_t v10 = 1;
        goto LABEL_7;
      case 17:
        uint64_t v10 = 0;
        goto LABEL_7;
      default:
        if ((v7 - 132) >= 2)
        {
          if (v7 == 129)
          {
LABEL_7:
            if (v10 != v9) {
              goto LABEL_50;
            }
          }
        }
        else
        {
LABEL_10:
          if (v8 == v3) {
            goto LABEL_50;
          }
          unsigned int v8 = v5 + 3;
          *(void *)(a1 + 40) = v5 + 3;
          uint64_t v9 = v5[2];
        }
LABEL_12:
        if (!v9 || (uint64_t v11 = 4 * v9, v12 = 4 * v9 - 2, v3 - v8 < v12))
        {
LABEL_50:
          uint64_t v16 = v7;
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_1010E92E8(exception, v16);
LABEL_51:
          long long v18 = (void (*)(void *))std::out_of_range::~out_of_range;
LABEL_52:
          __cxa_throw(exception, v17, v18);
        }
        switch((int)v7)
        {
          case 1:
            *(void *)(a1 + 40) = v8 + 2;
            int64_t v12 = v11 - 4;
            uint64_t v13 = a1;
            uint64_t v7 = 1;
            goto LABEL_46;
          case 2:
            *(void *)(a1 + 40) = v8 + 2;
            int64_t v12 = v11 - 4;
            uint64_t v13 = a1;
            uint64_t v7 = 2;
            goto LABEL_46;
          case 3:
            uint64_t v13 = a1;
            uint64_t v7 = 3;
            goto LABEL_46;
          case 4:
            uint64_t v13 = a1;
            uint64_t v7 = 4;
            goto LABEL_46;
          case 5:
          case 8:
          case 9:
          case 18:
LABEL_21:
            uint64_t v13 = a1;
            goto LABEL_46;
          case 6:
            uint64_t v13 = a1;
            uint64_t v7 = 6;
            goto LABEL_46;
          case 7:
            *(void *)(a1 + 40) = v8 + 2;
            int64_t v12 = v11 - 4;
            uint64_t v13 = a1;
            uint64_t v7 = 7;
            goto LABEL_46;
          case 10:
            *(void *)(a1 + 40) = v8 + 2;
            int64_t v12 = v11 - 4;
            uint64_t v13 = a1;
            uint64_t v7 = 10;
            goto LABEL_46;
          case 11:
            *(void *)(a1 + 40) = v8 + 2;
            int64_t v12 = v11 - 4;
            uint64_t v13 = a1;
            uint64_t v7 = 11;
            goto LABEL_46;
          case 12:
            uint64_t v13 = a1;
            uint64_t v7 = 12;
            goto LABEL_46;
          case 13:
            *(void *)(a1 + 40) = v8 + 2;
            int64_t v12 = v11 - 4;
            uint64_t v13 = a1;
            uint64_t v7 = 13;
            goto LABEL_46;
          case 14:
            uint64_t v13 = a1;
            uint64_t v7 = 14;
            goto LABEL_46;
          case 15:
            uint64_t v13 = a1;
            uint64_t v7 = 15;
            goto LABEL_46;
          case 16:
            uint64_t v13 = a1;
            uint64_t v7 = 16;
            goto LABEL_46;
          case 17:
            uint64_t v13 = a1;
            uint64_t v7 = 17;
            goto LABEL_46;
          case 19:
            uint64_t v13 = a1;
            uint64_t v7 = 19;
            goto LABEL_46;
          case 20:
            *(void *)(a1 + 40) = v8 + 2;
            int64_t v12 = v11 - 4;
            uint64_t v13 = a1;
            uint64_t v7 = 20;
            goto LABEL_46;
          case 21:
            *(void *)(a1 + 40) = v8 + 2;
            int64_t v12 = v11 - 4;
            uint64_t v13 = a1;
            uint64_t v7 = 21;
            goto LABEL_46;
          case 22:
            uint64_t v13 = a1;
            uint64_t v7 = 22;
LABEL_46:
            sub_1010E9144(v13, v7, v12);
            break;
          default:
            switch((int)v7)
            {
              case 127:
                goto LABEL_47;
              case 128:
              case 131:
                goto LABEL_21;
              case 129:
                uint64_t v13 = a1;
                uint64_t v7 = 129;
                goto LABEL_46;
              case 130:
                *(void *)(a1 + 40) = v8 + 2;
                int64_t v12 = v11 - 4;
                uint64_t v13 = a1;
                uint64_t v7 = 130;
                goto LABEL_46;
              case 132:
                uint64_t v13 = a1;
                uint64_t v7 = 132;
                goto LABEL_46;
              case 133:
                uint64_t v13 = a1;
                uint64_t v7 = 133;
                goto LABEL_46;
              case 134:
                *(void *)(a1 + 40) = v8 + 2;
                int64_t v12 = v11 - 4;
                uint64_t v13 = a1;
                uint64_t v7 = 134;
                goto LABEL_46;
              case 135:
                *(void *)(a1 + 40) = v8 + 2;
                int64_t v12 = v11 - 4;
                uint64_t v13 = a1;
                uint64_t v7 = 135;
                goto LABEL_46;
              default:
                if (v7 != 255) {
                  goto LABEL_21;
                }
                break;
            }
            break;
        }
LABEL_47:
        uint64_t v3 = *(unsigned __int8 **)(a1 + 24);
        uint64_t v5 = *(unsigned __int8 **)(a1 + 40);
        break;
    }
  }
}

void sub_1010E904C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double sub_1010E9144(uint64_t a1, uint64_t a2, int64_t __sz)
{
  if (__sz < 0 || (char v6 = *(char **)(a1 + 40), *(void *)(a1 + 24) - (void)v6 < __sz))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    sub_1010E92E8(exception, a2);
  }
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v17 = 0;
  if (__sz)
  {
    sub_10005C9F8(__dst, __sz);
    uint64_t v7 = (char *)__dst[1];
    memmove(__dst[1], v6, __sz);
    __dst[1] = &v7[__sz];
  }
  unsigned int v8 = *(uint64_t **)(a1 + 96);
  if (v8)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v9 = v8;
        unsigned int v10 = *((unsigned __int8 *)v8 + 32);
        if (v10 <= a2) {
          break;
        }
        unsigned int v8 = (uint64_t *)*v9;
        uint64_t v11 = (uint64_t **)v9;
        if (!*v9) {
          goto LABEL_13;
        }
      }
      if (v10 >= a2) {
        break;
      }
      unsigned int v8 = (uint64_t *)v9[1];
      if (!v8)
      {
        uint64_t v11 = (uint64_t **)(v9 + 1);
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v11 = (uint64_t **)(a1 + 96);
    uint64_t v9 = (uint64_t *)(a1 + 96);
LABEL_13:
    int64_t v12 = operator new(0x40uLL);
    v12[32] = a2;
    *((void *)v12 + 6) = 0;
    *((void *)v12 + 7) = 0;
    *((void *)v12 + 5) = 0;
    sub_100046C38((uint64_t **)(a1 + 88), (uint64_t)v9, v11, (uint64_t *)v12);
    uint64_t v9 = (uint64_t *)v12;
  }
  uint64_t v13 = (void *)v9[5];
  if (v13)
  {
    v9[6] = (uint64_t)v13;
    operator delete(v13);
    void v9[5] = 0;
    v9[6] = 0;
    v9[7] = 0;
  }
  double result = *(double *)__dst;
  *(_OWORD *)(v9 + 5) = *(_OWORD *)__dst;
  v9[7] = v17;
  *(void *)(a1 + 40) = &v6[__sz];
  return result;
}

void sub_1010E92B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E92F0(uint64_t a1, unint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) > a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003B79AC(exception, "Invalid size");
LABEL_112:
    long long v76 = (void (*)(void *))&std::invalid_argument::~invalid_argument;
    goto LABEL_104;
  }
  sub_1010E848C(a1, a2);
  if (*(unsigned char *)(a1 + 48) != 23)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1003B79AC(exception, "Invalid Type");
    goto LABEL_112;
  }
  int v4 = *(unsigned __int8 *)(a1 + 80);
  if ((v4 - 15) <= 0xFFFFFFF1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1000C154C(exception, "Invalid AKA SubType");
LABEL_103:
    long long v76 = (void (*)(void *))&std::out_of_range::~out_of_range;
LABEL_104:
    __cxa_throw(exception, v75, v76);
  }
  uint64_t v5 = (void *)(a1 + 16);
  *(_WORD *)(*(void *)(a1 + 16) + 5) = v4;
  *(unsigned char *)(*(void *)(a1 + 16) + 7) = 0;
  char v6 = *(void **)(a1 + 88);
  if (v6 != (void *)(a1 + 96))
  {
    while (1)
    {
      char v7 = *((unsigned char *)v6 + 32);
      if (!v7)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_1000C154C(exception, "Invalid Attribute Type");
        goto LABEL_103;
      }
      std::string __p = 0;
      std::string __dst = 0;
      unint64_t v80 = 0;
      uint64_t v9 = *(char **)(a1 + 24);
      unint64_t v8 = *(void *)(a1 + 32);
      if ((unint64_t)v9 >= v8)
      {
        uint64_t v11 = (char *)*v5;
        int64_t v12 = &v9[-*v5];
        unint64_t v13 = (unint64_t)(v12 + 1);
        if ((uint64_t)(v12 + 1) < 0) {
          sub_10006A748();
        }
        unint64_t v14 = v8 - (void)v11;
        if (2 * v14 > v13) {
          unint64_t v13 = 2 * v14;
        }
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v15 = v13;
        }
        if (v15) {
          uint64_t v16 = (char *)operator new(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = &v12[(void)v16];
        long long v18 = &v12[(void)v16];
        *long long v18 = v7;
        unsigned int v10 = v18 + 1;
        if (v9 != v11)
        {
          long long v19 = &v9[~(unint64_t)v11];
          do
          {
            char v20 = *--v9;
            (v19--)[(void)v16] = v20;
          }
          while (v9 != v11);
          uint64_t v9 = (char *)*v5;
          uint64_t v17 = v16;
        }
        *(void *)(a1 + 16) = v17;
        *(void *)(a1 + 24) = v10;
        *(void *)(a1 + 32) = &v16[v15];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        char *v9 = v7;
        unsigned int v10 = v9 + 1;
      }
      *(void *)(a1 + 24) = v10;
      int v21 = *((unsigned __int8 *)v6 + 32);
      if (v21 != 3) {
        break;
      }
      uint64_t v25 = v6[5];
      uint64_t v24 = v6[6];
      long long v26 = __p;
      int64_t v27 = (unsigned char *)__dst - (unsigned char *)__p;
      if ((unint64_t)((unsigned char *)__dst - (unsigned char *)__p) > 1)
      {
        if (v27 != 2) {
          std::string __dst = (char *)__p + 2;
        }
      }
      else
      {
        sub_10011FDF0((unint64_t *)&__p, 2 - v27);
        long long v26 = __p;
      }
      uint64_t v31 = v24 - v25;
      _WORD *v26 = bswap32(8 * v31) >> 16;
      sub_10005C748((uint64_t)&__p, (char *)__dst, (char *)v6[5], (char *)v6[6], v6[6] - v6[5]);
      unint64_t v32 = ((v31 + 5) & 0xFFFFFFFFFFFFFFFCLL) - 2;
      uint64_t v34 = __p;
      BOOL v33 = (char *)__dst;
      if (v32 <= (unsigned char *)__dst - (unsigned char *)__p)
      {
        if (v32 < (unsigned char *)__dst - (unsigned char *)__p)
        {
          BOOL v33 = (char *)__p + v32;
          std::string __dst = (char *)__p + v32;
        }
        goto LABEL_73;
      }
      sub_10011FDF0((unint64_t *)&__p, v32 - ((unsigned char *)__dst - (unsigned char *)__p));
LABEL_72:
      uint64_t v34 = __p;
      BOOL v33 = (char *)__dst;
LABEL_73:
      uint64_t v30 = v33 - v34;
LABEL_74:
      unint64_t v55 = v30 + 3;
      std::string::size_type v57 = *(char **)(a1 + 24);
      unint64_t v56 = *(void *)(a1 + 32);
      if ((unint64_t)v57 >= v56)
      {
        int v59 = (char *)*v5;
        uint64_t v60 = &v57[-*v5];
        unint64_t v61 = (unint64_t)(v60 + 1);
        if ((uint64_t)(v60 + 1) < 0) {
          sub_10006A748();
        }
        unint64_t v62 = v56 - (void)v59;
        if (2 * v62 > v61) {
          unint64_t v61 = 2 * v62;
        }
        if (v62 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v63 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v63 = v61;
        }
        if (v63) {
          int v64 = (char *)operator new(v63);
        }
        else {
          int v64 = 0;
        }
        std::string::size_type v65 = &v60[(void)v64];
        v60[(void)v64] = v55 >> 2;
        uint64_t v58 = &v60[(void)v64 + 1];
        if (v57 != v59)
        {
          int64_t v66 = &v57[~(unint64_t)v59];
          do
          {
            char v67 = *--v57;
            (v66--)[(void)v64] = v67;
          }
          while (v57 != v59);
          std::string::size_type v57 = (char *)*v5;
          std::string::size_type v65 = v64;
        }
        *(void *)(a1 + 16) = v65;
        *(void *)(a1 + 24) = v58;
        *(void *)(a1 + 32) = &v64[v63];
        if (v57) {
          operator delete(v57);
        }
      }
      else
      {
        *std::string::size_type v57 = v55 >> 2;
        uint64_t v58 = v57 + 1;
      }
      *(void *)(a1 + 24) = v58;
      sub_10005C748(a1 + 16, v58, (char *)__p, (char *)__dst, (unsigned char *)__dst - (unsigned char *)__p);
      if (__p)
      {
        std::string __dst = __p;
        operator delete(__p);
      }
      int v68 = (void *)v6[1];
      if (v68)
      {
        do
        {
          uint64_t v69 = v68;
          int v68 = (void *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          uint64_t v69 = (void *)v6[2];
          BOOL v70 = *v69 == (void)v6;
          char v6 = v69;
        }
        while (!v70);
      }
      char v6 = v69;
      if (v69 == (void *)(a1 + 96)) {
        goto LABEL_99;
      }
    }
    if (v21 != 11)
    {
      long long v28 = (char *)v6[5];
      uint64_t v29 = (char *)v6[6];
      uint64_t v30 = v29 - v28 + 2;
      if (&__p != v6 + 5) {
        sub_10006E4A8(&__p, v28, v29, v29 - v28);
      }
      goto LABEL_74;
    }
    if (v6[6] - v6[5] != 16)
    {
      uint64_t v77 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1010E9E10(v77, *((unsigned __int8 *)v6 + 32));
    }
    sub_100240658((unint64_t *)&__p, 0x12uLL);
    long long v22 = (char *)__dst;
    if ((unint64_t)__dst >= v80)
    {
      unint64_t v35 = (unint64_t)__p;
      int64_t v36 = (unsigned char *)__dst - (unsigned char *)__p;
      int64_t v37 = (unsigned char *)__dst - (unsigned char *)__p + 1;
      if (v37 < 0) {
        sub_10006A748();
      }
      unint64_t v38 = v80 - (void)__p;
      if (2 * (v80 - (unint64_t)__p) > v37) {
        int64_t v37 = 2 * v38;
      }
      if (v38 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v39 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v39 = v37;
      }
      if (v39) {
        uint64_t v40 = (char *)operator new(v39);
      }
      else {
        uint64_t v40 = 0;
      }
      char v41 = &v40[v36];
      uint64_t v42 = &v40[v36];
      char *v42 = 0;
      long long v23 = v42 + 1;
      if (v22 != (char *)v35)
      {
        BOOL v43 = &v22[~v35];
        do
        {
          char v44 = *--v22;
          (v43--)[(void)v40] = v44;
        }
        while (v22 != (char *)v35);
        long long v22 = (char *)__p;
        char v41 = v40;
      }
      std::string __p = v41;
      std::string __dst = v23;
      unint64_t v80 = (unint64_t)&v40[v39];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *(unsigned char *)std::string __dst = 0;
      long long v23 = v22 + 1;
    }
    std::string __dst = v23;
    if ((unint64_t)v23 >= v80)
    {
      unint64_t v46 = (unint64_t)__p;
      int64_t v47 = v23 - (unsigned char *)__p;
      uint64_t v48 = v23 - (unsigned char *)__p + 1;
      if (v48 < 0) {
        sub_10006A748();
      }
      unint64_t v49 = v80 - (void)__p;
      if (2 * (v80 - (unint64_t)__p) > v48) {
        uint64_t v48 = 2 * v49;
      }
      if (v49 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v50 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v50 = v48;
      }
      if (v50) {
        int v51 = operator new(v50);
      }
      else {
        int v51 = 0;
      }
      char v52 = (char *)v51 + v50;
      *((unsigned char *)v51 + v47) = 0;
      uint64_t v45 = (char *)v51 + v47 + 1;
      if (v23 == (char *)v46)
      {
        std::string __p = (char *)v51 + v47;
        std::string __dst = (char *)v51 + v47 + 1;
        unint64_t v80 = (unint64_t)v52;
      }
      else
      {
        uint64_t v53 = &v23[~v46];
        do
        {
          char v54 = *--v23;
          (v53--)[(void)v51] = v54;
        }
        while (v23 != (char *)v46);
        long long v23 = (char *)__p;
        std::string __p = v51;
        std::string __dst = (char *)v51 + v47 + 1;
        unint64_t v80 = (unint64_t)v52;
        if (!v23) {
          goto LABEL_71;
        }
      }
      operator delete(v23);
    }
    else
    {
      char *v23 = 0;
      uint64_t v45 = v23 + 1;
    }
LABEL_71:
    std::string __dst = v45;
    sub_10005C748((uint64_t)&__p, v45, (char *)v6[5], (char *)v6[6], v6[6] - v6[5]);
    goto LABEL_72;
  }
LABEL_99:
  uint64_t v71 = *(void *)(a1 + 16);
  uint64_t v72 = *(void *)(a1 + 24);

  return sub_1010E7CB4(v71, v72);
}

void sub_1010E991C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E9998()
{
  return 8;
}

uint64_t sub_1010E99A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v40 = 0;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)long long v28 = 0u;
  memset(v27, 0, sizeof(v27));
  sub_10004DE24((uint64_t)v27);
  sub_1010E863C(a1, __p);
  if ((v26 & 0x80u) == 0) {
    int v4 = __p;
  }
  else {
    int v4 = (void **)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v5 = v26;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  char v6 = sub_10004B96C(v27, (uint64_t)v4, v5);
  char v7 = sub_10004B96C(v6, (uint64_t)"Sub-Type: ", 10);
  unsigned int v8 = *(unsigned __int8 *)(a1 + 80) - 1;
  if (v8 > 0xD) {
    uint64_t v9 = "????";
  }
  else {
    uint64_t v9 = off_101A8C558[(char)v8];
  }
  size_t v10 = strlen(v9);
  uint64_t v11 = sub_10004B96C(v7, (uint64_t)v9, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(void *)(*v11 - 24)));
  int64_t v12 = std::locale::use_facet(&v41, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v13 = sub_10004B96C(v27, (uint64_t)"Attributes: ", 12);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
  unint64_t v14 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  size_t v15 = *(void **)(a1 + 88);
  if (v15 != (void *)(a1 + 96))
  {
    do
    {
      uint64_t v16 = sub_1010E8998(*((unsigned __int8 *)v15 + 32));
      size_t v17 = strlen(v16);
      long long v18 = sub_10004B96C(v27, (uint64_t)v16, v17);
      sub_10004B96C(v18, (uint64_t)" Length: ", 9);
      long long v19 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(void *)(*v19 - 24)));
      char v20 = std::locale::use_facet((const std::locale *)__p, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
      std::locale::~locale((std::locale *)__p);
      std::ostream::put();
      std::ostream::flush();
      int v21 = (void *)v15[1];
      if (v21)
      {
        do
        {
          long long v22 = v21;
          int v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          long long v22 = (void *)v15[2];
          BOOL v23 = *v22 == (void)v15;
          size_t v15 = v22;
        }
        while (!v23);
      }
      size_t v15 = v22;
    }
    while (v22 != (void *)(a1 + 96));
  }
  sub_10004BC98((uint64_t)v27 + 8, a2);
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1010E9DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

std::logic_error *sub_1010E9E10(std::logic_error *a1, int a2)
{
  sub_100058DB0(&v9, "Invalid Attribute Size for Type ");
  int v4 = sub_1010E8998(a2);
  size_t v5 = strlen(v4);
  char v6 = std::string::append(&v9, v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v10.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::logic_error::logic_error(a1, &v10);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  a1->__vftable = (std::logic_error_vtbl *)&off_101A8C378;
  return a1;
}

void sub_1010E9EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010E9F20(std::out_of_range *a1)
{
  std::out_of_range::~out_of_range(a1);

  operator delete();
}

void *sub_1010E9F58(void *a1)
{
  *a1 = off_101A8C2A0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1010E9FA8(void *a1)
{
  *a1 = off_101A8C2A0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

void sub_1010EA01C(void *a1)
{
  sub_100B63E7C(a1);

  operator delete();
}

void sub_1010EA054(uint64_t a1)
{
  *(void *)a1 = off_101A8C320;
  sub_10026CF54(a1 + 88, *(void **)(a1 + 96));
  sub_100B63E7C((void *)a1);

  operator delete();
}

void sub_1010EA0C0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1010EA128(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010EA164(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010EA19C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1010EA1CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1010EA214(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010EA24C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1010EA27C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1010EA2C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010EA2FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1010EA32C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1010EA370(uint64_t a1)
{
  *(void *)a1 = off_101A8C5D8;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v2 = (void *)(a1 + 40);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_100206334((uint64_t)v2, v3);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v5) {
    sub_100206334(a1 + 32, v5);
  }
  sub_100110A40((void ***)(a1 + 24), 0);
  sub_100110A40((void ***)(a1 + 16), 0);
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v6) {
    sub_100206334(a1 + 8, v6);
  }

  PB::Base::~Base((PB::Base *)a1);
}

void sub_1010EA414(uint64_t a1)
{
  sub_1010EA370(a1);

  operator delete();
}

uint64_t sub_1010EA44C(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(void *)uint64_t result = off_101A8C5D8;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 52) = 0;
  if (*(void *)(a2 + 40)) {
    operator new();
  }
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  if (*(void *)(a2 + 24)) {
    operator new();
  }
  if (*(void *)(a2 + 32)) {
    operator new();
  }
  if (*(void *)(a2 + 16)) {
    operator new();
  }
  if (*(unsigned char *)(a2 + 52))
  {
    int v2 = *(_DWORD *)(a2 + 48);
    *(unsigned char *)(result + 52) |= 1u;
    *(_DWORD *)(result + 48) = v2;
  }
  return result;
}

uint64_t sub_1010EA6A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 52)) {
    PB::TextFormatter::format(this, "error", *(_DWORD *)(a1 + 48));
  }
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format();
  }
  uint64_t v5 = *(const PB::Data **)(a1 + 16);
  if (v5) {
    PB::TextFormatter::format(this, "payload", v5);
  }
  uint64_t v6 = *(const PB::Data **)(a1 + 24);
  if (v6) {
    PB::TextFormatter::format(this, "senderEID", v6);
  }
  if (*(void *)(a1 + 32)) {
    PB::TextFormatter::format();
  }
  if (*(void *)(a1 + 40)) {
    PB::TextFormatter::format();
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1010EA77C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)this;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3) {
      break;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_22;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    unsigned __int8 v19 = 0;
    LODWORD(v20) = 0;
LABEL_20:
    uint64_t result = PB::Reader::skip(this, v20, v19, 0);
    if (!result) {
      return result;
    }
LABEL_47:
    unint64_t v2 = *((void *)this + 1);
    unint64_t v3 = *((void *)this + 2);
    int v4 = *((unsigned __int8 *)this + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v9 = 0;
  unsigned int v10 = 0;
  unint64_t v11 = 0;
  while (1)
  {
    unint64_t v12 = v2 + 1;
    *((void *)this + 1) = v2 + 1;
    char v13 = *(unsigned char *)(v8 + v2);
    v11 |= (unint64_t)(v13 & 0x7F) << v9;
    if ((v13 & 0x80) == 0) {
      break;
    }
    v9 += 7;
    unint64_t v2 = v12;
    BOOL v14 = v10++ > 8;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_22:
  unsigned __int8 v19 = v11 & 7;
  if ((v11 & 7) != 4)
  {
    unint64_t v20 = v11 >> 3;
    switch((v11 >> 3))
    {
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        operator new();
      case 4u:
        operator new();
      case 5u:
        operator new();
      case 6u:
        *(unsigned char *)(a1 + 52) |= 1u;
        unint64_t v22 = *((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        uint64_t v24 = *(void *)this;
        if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          do
          {
            unint64_t v28 = v22 + 1;
            *((void *)this + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              goto LABEL_46;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v14 = v26++ > 8;
          }
          while (!v14);
LABEL_42:
          LODWORD(v27) = 0;
          goto LABEL_46;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v27 = 0;
        if (v23 <= v22) {
          unint64_t v23 = *((void *)this + 1);
        }
        break;
      default:
        goto LABEL_20;
    }
    while (1)
    {
      if (v23 == v22)
      {
        LODWORD(v27) = 0;
        *((unsigned char *)this + 24) = 1;
        goto LABEL_46;
      }
      unint64_t v32 = v22 + 1;
      char v33 = *(unsigned char *)(v24 + v22);
      *((void *)this + 1) = v32;
      v27 |= (unint64_t)(v33 & 0x7F) << v30;
      if ((v33 & 0x80) == 0) {
        break;
      }
      v30 += 7;
      unint64_t v22 = v32;
      BOOL v14 = v31++ > 8;
      if (v14) {
        goto LABEL_42;
      }
    }
    if (*((unsigned char *)this + 24)) {
      LODWORD(v27) = 0;
    }
LABEL_46:
    *(_DWORD *)(a1 + 48) = v27;
    goto LABEL_47;
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t sub_1010EABA4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(void *)(result + 40)) {
    uint64_t result = PB::Writer::write();
  }
  if (*(void *)(v3 + 8)) {
    uint64_t result = PB::Writer::write();
  }
  int v4 = *(const PB::Data **)(v3 + 24);
  if (v4) {
    uint64_t result = PB::Writer::write(this, v4, 3u);
  }
  if (*(void *)(v3 + 32)) {
    uint64_t result = PB::Writer::write();
  }
  uint64_t v5 = *(const PB::Data **)(v3 + 16);
  if (v5) {
    uint64_t result = PB::Writer::write(this, v5, 5u);
  }
  if (*(unsigned char *)(v3 + 52))
  {
    unsigned int v6 = *(_DWORD *)(v3 + 48);
    return PB::Writer::writeVarInt(this, v6, 6u);
  }
  return result;
}

void sub_1010EAC5C()
{
}

void sub_1010EAD24(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  if (v2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1010EAD58(uint64_t a1)
{
  CFCalendarRef v2 = CFCalendarCreateWithIdentifier(kCFAllocatorDefault, kCFGregorianCalendar);
  CFTimeZoneRef v3 = *(const __CFTimeZone **)(a1 + 64);
  *(void *)(a1 + 64) = v2;
  CFTimeZoneRef v8 = v3;
  sub_1006020EC((const void **)&v8);
  CFTimeZoneRef v8 = CFTimeZoneCreateWithTimeIntervalFromGMT(kCFAllocatorSystemDefault, 0.0);
  CFCalendarSetTimeZone(*(CFCalendarRef *)(a1 + 64), v8);
  if (*(void *)(a1 + 64)) {
    int v4 = sub_100670388;
  }
  else {
    int v4 = 0;
  }
  if (!v4)
  {
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#N Could not create gregorian calendar", v7, 2u);
    }
  }
  return sub_1005653C4((const void **)&v8);
}

void sub_1010EAE38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1005653C4((const void **)va);
  _Unwind_Resume(a1);
}

void *sub_1010EAE4C(void *a1, uint64_t a2, NSObject **a3)
{
  unsigned int v6 = a1 + 1;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v11, kCtLoggingSystemName, "reg.not");
  void *v6 = 0;
  v6[1] = 0;
  long long v7 = *a3;
  a1[3] = *a3;
  if (v7) {
    dispatch_retain(v7);
  }
  a1[4] = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v12, &v11);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 5), (const ctu::OsLogLogger *)v12);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v11);
  *a1 = off_101A8C648;
  CFTimeZoneRef v8 = *(Registry **)a2;
  a1[6] = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  a1[7] = v9;
  if (v9)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    CFTimeZoneRef v8 = (Registry *)a1[6];
  }
  a1[8] = 0;
  Registry::getNotificationSenderFactory((uint64_t *)&v11, v8);
  (*(void (**)(char *))(*(void *)v11.var0 + 48))(v11.var0);
  if (v11.var1.fRef) {
    sub_10004D2C8((std::__shared_weak_count *)v11.var1.fRef);
  }
  return a1;
}

void sub_1010EAF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  sub_1006020EC(v14);
  unsigned int v16 = (std::__shared_weak_count *)*((void *)v11 + 7);
  if (v16) {
    sub_10004D2C8(v16);
  }
  ctu::OsLogLogger::~OsLogLogger(v13);
  sub_100087E88(v12);
  RegistrationNotificationInterface::~RegistrationNotificationInterface(v11);
  _Unwind_Resume(a1);
}

void sub_1010EB014(uint64_t a1)
{
  *(void *)a1 = off_101A8C648;
  CFCalendarRef v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_1006020EC((const void **)(a1 + 64));
  CFTimeZoneRef v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_10004D2C8(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));

  RegistrationNotificationInterface::~RegistrationNotificationInterface((RegistrationNotificationInterface *)a1);
}

void sub_1010EB09C(uint64_t a1)
{
  sub_1010EB014(a1);

  operator delete();
}

void sub_1010EB0D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 1)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a3;
      uint64_t v10 = *(void *)(a3 + 16);
    }
    unint64_t v12 = 0;
    uint64_t v5 = (char *)operator new(0x20uLL);
    *(void *)uint64_t v5 = off_101A8C7E8;
    *(_OWORD *)(v5 + 8) = *(_OWORD *)__p;
    *((void *)v5 + 3) = v10;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v10 = 0;
    unint64_t v12 = v5;
    sub_1010EB28C(a1, 45, v11);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(v7, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long v7 = *(_OWORD *)a3;
    uint64_t v8 = *(void *)(a3 + 16);
  }
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v6 + 16))(v6, a2, v7);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
}

void sub_1010EB240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, int a8, __int16 a9, char a10, char a11, ...)
{
  va_start(va, a11);
  sub_1010ECB78((uint64_t *)va);
  if (a11 < 0) {
    operator delete(a6);
  }
  _Unwind_Resume(a1);
}

void sub_1010EB28C(uint64_t a1, uint64_t a2, void *a3)
{
  int v4 = (void *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      long long v7 = v6;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v6);
    }
    else
    {
      long long v7 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    long long v7 = 0;
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010EB48C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1010EB4A8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010EB598(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_1010EB6A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (a2 == 1)
  {
    uint64_t v6 = *a3;
    int v7 = *((_DWORD *)a3 + 2);
    v9[0] = off_101A8C8F8;
    v9[1] = v6;
    int v10 = v7;
    OsLogContext v11 = v9;
    sub_1010EB7A8(a1, 0x10u, (uint64_t)v9);
    sub_1010ECB78(v9);
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t *))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72), a2, a3);
}

void sub_1010EB78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010ECB78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1010EB7A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  v6[0] = a1 + 40;
  v6[1] = a2;
  CFTimeZoneRef v3 = *(std::__shared_weak_count **)(a1 + 56);
  void v6[2] = *(void *)(a1 + 48);
  int v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = 0;
  uint64_t v4 = *(void *)(a3 + 24);
  if (!v4) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v6);
  sub_1008DDC74((uint64_t)v6, v5);
  sub_10005717C(&v8);
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1010EB84C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010EC71C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010EB860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 1)
  {
    uint64_t v4 = off_101A8C978;
    char v5 = a3;
    uint64_t v6 = &v4;
    sub_1010EB28C(a1, 94, &v4);
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 104))(*(void *)(a1 + 72), a2, a3);
}

void sub_1010EB93C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010ECB78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1010EB958(uint64_t a1)
{
  v1[0] = off_101A8C9F8;
  v1[3] = v1;
  sub_1010EB28C(a1, 41, v1);
}

void sub_1010EB9E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010ECB78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1010EB9F4(uint64_t a1, uint64_t a2, int a3, uint64_t *a4)
{
  if (a2 == 1)
  {
    xpc_object_t v8 = xpc_array_create(0, 0);
    if (v8 || (xpc_object_t v8 = xpc_null_create()) != 0)
    {
      if (xpc_get_type(v8) == (xpc_type_t)&_xpc_type_array)
      {
        xpc_retain(v8);
        xpc_object_t v9 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
    }
    int v27 = a3;
    xpc_release(v8);
    OsLogContext v11 = (NetworkListOperator *)*a4;
    int v10 = (NetworkListOperator *)a4[1];
    xpc_object_t v28 = v9;
    if ((NetworkListOperator *)*a4 == v10)
    {
LABEL_57:
      if (v9)
      {
        xpc_retain(v9);
        xpc_object_t v25 = v9;
      }
      else
      {
        xpc_object_t v25 = xpc_null_create();
      }
      xpc_object_t v45 = v25;
      unint64_t v46 = 0;
      BOOL v43 = off_101A8CA78;
      int v44 = v27;
      xpc_null_create();
      unint64_t v46 = &v43;
      sub_1010EB28C(a1, 49, &v43);
    }
    while (1)
    {
      unint64_t v12 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        NetworkListOperator::getCompositeName((uint64_t *)v41, v11);
        if (v42 >= 0) {
          char v13 = v41;
        }
        else {
          char v13 = (void **)v41[0];
        }
        NetworkListOperator::getRAT(v11);
        uint64_t v14 = asString();
        NetworkListOperator::getKey((uint64_t *)__p, v11);
        if (v40 >= 0) {
          char v15 = __p;
        }
        else {
          char v15 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v14;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v48 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Adding operator %s (%s) with code %s", buf, 0x20u);
        if (SHIBYTE(v40) < 0) {
          operator delete(__p[0]);
        }
        xpc_object_t v9 = v28;
        if (SHIBYTE(v42) < 0) {
          operator delete(v41[0]);
        }
      }
      xpc_object_t value = 0;
      xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v17 = v16;
      if (v16)
      {
        xpc_object_t value = v16;
      }
      else
      {
        xpc_object_t v17 = xpc_null_create();
        xpc_object_t value = v17;
        if (!v17)
        {
          xpc_object_t v18 = xpc_null_create();
          xpc_object_t v17 = 0;
          goto LABEL_27;
        }
      }
      if (xpc_get_type(v17) != (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v18 = xpc_null_create();
LABEL_27:
        xpc_object_t value = v18;
        goto LABEL_28;
      }
      xpc_retain(v17);
LABEL_28:
      xpc_release(v17);
      NetworkListOperator::getLocalizedCompositeName();
      if (v42 >= 0) {
        unsigned __int8 v19 = v41;
      }
      else {
        unsigned __int8 v19 = (void **)v41[0];
      }
      xpc_object_t v36 = xpc_string_create((const char *)v19);
      if (!v36) {
        xpc_object_t v36 = xpc_null_create();
      }
      memset(buf, 0, sizeof(buf));
      ctu::cf::assign();
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      uint64_t v40 = *(void *)&buf[16];
      unint64_t v20 = *(void ***)buf;
      if ((buf[23] & 0x80u) == 0) {
        unint64_t v20 = __p;
      }
      p_xpc_object_t value = &value;
      long long v35 = v20;
      sub_100035E70((uint64_t)&p_value, &v36, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      if (SHIBYTE(v40) < 0) {
        operator delete(__p[0]);
      }
      xpc_release(v36);
      xpc_object_t v36 = 0;
      if (SHIBYTE(v42) < 0) {
        operator delete(v41[0]);
      }
      NetworkListOperator::getKey((uint64_t *)v41, v11);
      if (v42 >= 0) {
        int v21 = v41;
      }
      else {
        int v21 = (void **)v41[0];
      }
      xpc_object_t v32 = xpc_string_create((const char *)v21);
      if (!v32) {
        xpc_object_t v32 = xpc_null_create();
      }
      memset(buf, 0, sizeof(buf));
      ctu::cf::assign();
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      uint64_t v40 = *(void *)&buf[16];
      unint64_t v22 = *(void ***)buf;
      if ((buf[23] & 0x80u) == 0) {
        unint64_t v22 = __p;
      }
      p_xpc_object_t value = &value;
      long long v35 = v22;
      sub_100035E70((uint64_t)&p_value, &v32, &v33);
      xpc_release(v33);
      xpc_object_t v33 = 0;
      if (SHIBYTE(v40) < 0) {
        operator delete(__p[0]);
      }
      xpc_release(v32);
      xpc_object_t v32 = 0;
      if (SHIBYTE(v42) < 0) {
        operator delete(v41[0]);
      }
      int RAT = NetworkListOperator::getRAT(v11);
      xpc_object_t v30 = xpc_int64_create(RAT);
      if (!v30) {
        xpc_object_t v30 = xpc_null_create();
      }
      memset(buf, 0, sizeof(buf));
      ctu::cf::assign();
      *(_OWORD *)std::locale v41 = *(_OWORD *)buf;
      uint64_t v42 = *(void *)&buf[16];
      uint64_t v24 = *(void ***)buf;
      if ((buf[23] & 0x80u) == 0) {
        uint64_t v24 = v41;
      }
      __p[0] = &value;
      __p[1] = v24;
      sub_100035E70((uint64_t)__p, &v30, &v31);
      xpc_release(v31);
      xpc_object_t v31 = 0;
      if (SHIBYTE(v42) < 0) {
        operator delete(v41[0]);
      }
      xpc_release(v30);
      xpc_object_t v30 = 0;
      xpc_array_append_value(v9, value);
      xpc_release(value);
      OsLogContext v11 = (NetworkListOperator *)((char *)v11 + 136);
      if (v11 == v10) {
        goto LABEL_57;
      }
    }
  }
  uint64_t v26 = *(void *)(a1 + 72);
  memset(v29, 0, sizeof(v29));
  sub_1004C3DEC(v29, *a4, a4[1], 0xF0F0F0F0F0F0F0F1 * ((a4[1] - *a4) >> 3));
  (*(void (**)(uint64_t, uint64_t, uint64_t, xpc_object_t *, BOOL))(*(void *)v26 + 96))(v26, a1 + 48, a2, v29, a3 != 0);
  *(void *)std::string buf = v29;
  sub_1004C3EF8((void ***)buf);
}

void sub_1010EBF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t a20,uint64_t a21,xpc_object_t a22,uint64_t a23,uint64_t a24,uint64_t a25,xpc_object_t a26,uint64_t a27,xpc_object_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1010EC118(uint64_t a1)
{
  v1[0] = off_101A8CAF8;
  v1[3] = v1;
  sub_1010EB28C(a1, 50, v1);
}

void sub_1010EC1A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010ECB78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1010EC1B4(uint64_t a1, char a2)
{
  CFCalendarRef v2 = off_101A8CB78;
  char v3 = a2;
  uint64_t v4 = &v2;
  sub_1010EB28C(a1, 110, &v2);
}

void sub_1010EC240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010ECB78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1010EC254(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = operator new(0x20uLL);
  void *v6 = off_101A8CBF8;
  v6[1] = a1;
  void v6[2] = a2;
  *((unsigned char *)v6 + 24) = a3;
  void v7[3] = v6;
  sub_1010EB28C(a1, 46, v7);
}

void sub_1010EC300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010ECB78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1010EC314(uint64_t a1, uint64_t a2, int a3)
{
  v3[0] = off_101A8CC78;
  v3[1] = a2;
  int v4 = a3;
  char v5 = v3;
  sub_1010EB28C(a1, 47, v3);
}

void sub_1010EC3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010ECB78((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010EC3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  if ((a3 & 0xFF000000000000) != 0) {
    LODWORD(v4) = 4;
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t *))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72), a2, &v4);
}

uint64_t sub_1010EC410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 1)
  {
    uint64_t v4 = off_101A8CCF8;
    int v5 = a3;
    uint64_t v6 = &v4;
    sub_1010EB28C(a1, 48, &v4);
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72), a2, a3);
}

void sub_1010EC4EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010ECB78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1010EC508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x48uLL);
  void *v4 = off_101A8CD78;
  v4[1] = a1;
  long long v5 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v4 + 1) = *(_OWORD *)a2;
  *((_OWORD *)v4 + 2) = v5;
  *((_OWORD *)v4 + 3) = *(_OWORD *)(a2 + 32);
  *((_DWORD *)v4 + 16) = *(_DWORD *)(a2 + 48);
  void v6[3] = v4;
  sub_1010EB28C(a1, 21, v6);
}

void sub_1010EC5B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010ECB78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1010EC5CC(uint64_t a1, unsigned int a2, int a3)
{
  char v3 = &_mh_execute_header;
  if (!a3) {
    char v3 = 0;
  }
  v4[0] = off_101A8CDF8;
  v4[1] = a1;
  _OWORD v4[2] = (unint64_t)v3 | a2;
  v4[3] = v4;
  sub_1010EB28C(a1, 21, v4);
}

void sub_1010EC668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010ECB78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1010EC67C(uint64_t a1, char a2)
{
  char v3 = off_101A8CE78;
  char v4 = a2;
  long long v5 = &v3;
  sub_1010EB7A8(a1, 0x16u, (uint64_t)&v3);
  return sub_1010ECB78(&v3);
}

void sub_1010EC708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010ECB78((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010EC71C(uint64_t a1)
{
  sub_10005717C((const void **)(a1 + 32));
  CFCalendarRef v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1010EC754(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1010EC820(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1010EC8F8);
  __cxa_rethrow();
}

void sub_1010EC848(_Unwind_Exception *a1)
{
}

void sub_1010EC860(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010EC898(uint64_t a1)
{
}

uint64_t sub_1010EC8B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1010EC8F8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1010EC924(uint64_t a1)
{
  *(void *)a1 = off_101A8C7E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1010EC974(uint64_t a1)
{
  *(void *)a1 = off_101A8C7E8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void *sub_1010EC9E4(uint64_t a1)
{
  CFCalendarRef v2 = operator new(0x20uLL);
  void *v2 = off_101A8C7E8;
  char v3 = v2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_10004FC84(v3, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)char v3 = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_1010ECA58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1010ECA6C(char *result, void *a2)
{
  *a2 = off_101A8C7E8;
  CFCalendarRef v2 = a2 + 1;
  if (result[31] < 0) {
    return (char *)sub_10004FC84(v2, *((void **)result + 1), *((void *)result + 2));
  }
  long long v3 = *(_OWORD *)(result + 8);
  void v2[2] = *((void *)result + 3);
  *(_OWORD *)CFCalendarRef v2 = v3;
  return result;
}

void sub_1010ECAB8(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void sub_1010ECACC(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

const void **sub_1010ECB10(uint64_t a1, uint64_t a2)
{
  return sub_1008DD9E0(a2, kCTRegistrationOperatorName, a1 + 8);
}

uint64_t sub_1010ECB2C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010ECB6C()
{
}

void *sub_1010ECB78(void *a1)
{
  CFCalendarRef v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1010ECBFC(unsigned int **a1)
{
  uint64_t v14 = a1;
  unint64_t v1 = *((void *)*a1 + 1);
  unint64_t v2 = **a1;
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(v1 + 48));
  char v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  v17[0] = v5;
  xpc_object_t v9 = sub_10004D37C(&v4[1].__m_.__sig, v17);
  if (v9)
  {
    uint64_t v11 = v9[3];
    int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      if (!v11)
      {
LABEL_13:
        if ((v12 & 1) == 0) {
          sub_10004D2C8(v10);
        }
        operator delete();
      }
LABEL_10:
      uint64_t v15 = 0;
      char v13 = *(NSObject **)(v1 + 24);
      if (v13) {
        dispatch_retain(*(dispatch_object_t *)(v1 + 24));
      }
      dispatch_object_t object = v13;
      v17[0] = (unint64_t)off_101A8C878;
      v17[1] = v1;
      void v17[2] = v2;
      void v17[3] = (unint64_t)v17;
      sub_1002BB4E4();
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  int v10 = 0;
  char v12 = 1;
  if (!v11) {
    goto LABEL_13;
  }
  goto LABEL_10;
}

void sub_1010ECE24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, dispatch_object_t object, uint64_t *a12)
{
  sub_1002BB62C(&a12, 0);
  sub_1002BB62C(&a10, 0);
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  operator delete();
}

void sub_1010ECEAC()
{
}

__n128 sub_1010ECEC0(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = off_101A8C878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1010ECF0C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A8C878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1010ECF3C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)a2;
  int v5 = v2;
  return sub_1010EB6A8(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16), &v4);
}

uint64_t sub_1010ECF7C(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A8C8D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010ECFBC()
{
  return &off_101A8C8D8;
}

void sub_1010ECFC8(uint64_t **a1)
{
  unint64_t v1 = a1;
  sub_1010EB6A8(**a1, *((unsigned int *)*a1 + 2), (uint64_t *)((char *)*a1 + 12));
  operator delete();
}

void sub_1010ED024()
{
}

void sub_1010ED054()
{
}

void *sub_1010ED068(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A8C8F8;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t sub_1010ED0B8(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A8C8F8;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

const void **sub_1010ED0F0(int *a1, uint64_t a2)
{
  sub_1008DDBA8(a2, kCTIndicatorsRawSignalStrength, 0);
  sub_1008DDBA8(a2, kCTIndicatorsSignalStrength, 100);
  sub_1008DDBA8(a2, kCTIndicatorsGradedSignalStrength, a1[2]);
  sub_1008DDBA8(a2, kCTIndicatorsSignalStrengthDisplayValue, a1[3]);
  uint64_t v4 = (const void *)kCTIndicatorsSignalStrengthMaxDisplayValue;
  int v5 = a1[4];

  return sub_1008DDBA8(a2, v4, v5);
}

uint64_t sub_1010ED198(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010ED1D8()
{
}

void sub_1010ED1E8()
{
}

unsigned char *sub_1010ED1FC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = off_101A8C978;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_1010ED248(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A8C978;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void sub_1010ED278(uint64_t a1, NSObject ***a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v2 = (const void **)&kCFBooleanTrue;
  }
  else {
    uint64_t v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1008DD72C(a2, kCTRegistrationNetworkSelectionMenu, *v2);
}

uint64_t sub_1010ED2B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010ED2F0()
{
}

void sub_1010ED300()
{
}

void *sub_1010ED314()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_101A8C9F8;
  return result;
}

void sub_1010ED34C(uint64_t a1, void *a2)
{
  *a2 = off_101A8C9F8;
}

uint64_t sub_1010ED378(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010ED3B8()
{
}

uint64_t sub_1010ED3C4(uint64_t a1)
{
  *(void *)a1 = off_101A8CA78;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1010ED414(uint64_t a1)
{
  *(void *)a1 = off_101A8CA78;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;

  operator delete();
}

void *sub_1010ED484(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x18uLL);
  void *v2 = off_101A8CA78;
  sub_1010ED6B8((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1010ED4D8(uint64_t a1, void *a2)
{
  *a2 = off_101A8CA78;
  return sub_1010ED6B8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1010ED504(uint64_t a1)
{
}

void sub_1010ED50C(void *a1)
{
  sub_1010ED704((uint64_t)a1 + 8);

  operator delete(a1);
}

const void **sub_1010ED548(uint64_t a1, NSObject ***a2)
{
  uint64_t v4 = (const void **)&kCFBooleanTrue;
  if (*(_DWORD *)(a1 + 8) == 1) {
    uint64_t v4 = (const void **)&kCFBooleanFalse;
  }
  sub_1008DD72C(a2, kCTRegistrationNetworkListComplete, *v4);
  uint64_t v11 = 0;
  sub_1008DD69C((uint64_t)a2, (const void **)&v11);
  int v10 = 0;
  int v5 = *(void **)(a1 + 16);
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  xpc::bridge((uint64_t *)&v9, (xpc *)&object, v6);
  sub_100044D6C(&v10, &v9);
  sub_1000577C4(&v9);
  xpc_release(object);
  CFDictionarySetValue(v11, kCTRegistrationNetworkList, v10);
  sub_100044D00(&v10);
  return sub_10005717C((const void **)&v11);
}

void sub_1010ED624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, char a10, int a11, const void *a12, const void *a13)
{
}

uint64_t sub_1010ED66C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010ED6AC()
{
}

uint64_t sub_1010ED6B8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    *(void *)(a1 + 8) = xpc_null_create();
  }
  return a1;
}

void sub_1010ED704(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
}

void sub_1010ED738()
{
}

void *sub_1010ED74C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_101A8CAF8;
  return result;
}

void sub_1010ED784(uint64_t a1, void *a2)
{
  *a2 = off_101A8CAF8;
}

uint64_t sub_1010ED7B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010ED7F0()
{
}

void sub_1010ED800()
{
}

unsigned char *sub_1010ED814(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = off_101A8CB78;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_1010ED860(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A8CB78;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void sub_1010ED890(uint64_t a1, NSObject ***a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v2 = (const void **)&kCFBooleanTrue;
  }
  else {
    uint64_t v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1008DD72C(a2, kCTEmergencyCallBackMode, *v2);
}

uint64_t sub_1010ED8C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010ED908()
{
}

void sub_1010ED918()
{
}

__n128 sub_1010ED92C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A8CBF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1010ED980(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A8CBF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010ED9B8(uint64_t a1, NSObject ***a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  sub_1010EDB3C(a2, *(_DWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 21), *(unsigned __int8 *)(a1 + 20), *(unsigned __int8 *)(a1 + 24));
  int v4 = *(_DWORD *)(a1 + 16);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v5, *(Registry **)(v3 + 48));
  uint64_t v7 = ServiceMap;
  unsigned int v8 = "N3awd7metrics14MetricCountersE";
  if (((unint64_t)"N3awd7metrics14MetricCountersE" & 0x8000000000000000) != 0)
  {
    xpc_object_t v9 = (unsigned __int8 *)((unint64_t)"N3awd7metrics14MetricCountersE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unsigned int v8 = (const char *)v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  xpc_object_t v16 = v8;
  char v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)&v16);
  if (!v12)
  {
    uint64_t v14 = 0;
LABEL_9:
    std::mutex::unlock(v7);
    char v13 = 0;
    char v15 = 1;
    if (!v14) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v14 = v12[3];
  char v13 = (std::__shared_weak_count *)v12[4];
  if (!v13) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v7);
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v13);
  char v15 = 0;
  if (v14) {
LABEL_10:
  }
    sub_100BAA4F4(*(void *)(v14 + 448), (v4 - 7) < 0xFFFFFFFD);
LABEL_11:
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v13);
  }
}

void sub_1010EDAD0(_Unwind_Exception *exception_object)
{
  char v3 = v1;
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010EDAF0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010EDB30()
{
}

void sub_1010EDB3C(NSObject ***a1, int a2, int a3, int a4, int a5)
{
  if ((a2 - 1) > 5) {
    xpc_object_t v9 = (const void **)&kCTRegistrationStatusUnknown;
  }
  else {
    xpc_object_t v9 = (const void **)*(&off_101A8CEE8 + a2 - 1);
  }
  sub_1008DD72C(a1, kCTRegistrationStatus, *v9);
  if (a4) {
    CFBooleanRef v10 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v10 = kCFBooleanFalse;
  }
  sub_1008DD72C(a1, kCTRegistrationInHomeCountry, v10);
  if (a3) {
    CFBooleanRef v11 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v11 = kCFBooleanFalse;
  }
  sub_1008DD72C(a1, kCTRegistrationChangedDueToSimRemoval, v11);
  char v12 = (const void *)kCTCampOnly;
  if (a5 == 6) {
    CFBooleanRef v13 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v13 = kCFBooleanFalse;
  }

  sub_1008DD72C(a1, v12, v13);
}

void sub_1010EDC30()
{
}

void *sub_1010EDC44(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A8CC78;
  result[1] = v3;
  *((_DWORD *)result + 4) = *(_DWORD *)(a1 + 16);
  return result;
}

uint64_t sub_1010EDC94(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A8CC78;
  uint64_t v2 = *(void *)(result + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
  *(void *)(a2 + 8) = v2;
  return result;
}

void sub_1010EDCCC(uint64_t a1, NSObject ***a2)
{
  sub_1010EDB3C(a2, *(_DWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 13), *(unsigned __int8 *)(a1 + 12), *(unsigned __int8 *)(a1 + 16));
  int v4 = *(_DWORD *)(a1 + 8) - 1;
  if (*(unsigned char *)(a1 + 14)) {
    int v4 = 3;
  }
  if (v4 > 5) {
    int v5 = (const void **)&kCTRegistrationStatusUnknown;
  }
  else {
    int v5 = (const void **)*(&off_101A8CEE8 + v4);
  }
  sub_1008DD72C(a2, kCTRegistrationDisplayStatus, *v5);
  uint64_t v6 = (const void *)kCTRegistrationIsForcedRegisteredHome;
  if (*(unsigned char *)(a1 + 14)) {
    uint64_t v7 = &kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &kCFBooleanFalse;
  }
  CFBooleanRef v8 = *v7;

  sub_1008DD72C(a2, v6, v8);
}

uint64_t sub_1010EDD98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010EDDD8()
{
}

void sub_1010EDDE8()
{
}

_DWORD *sub_1010EDDFC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = off_101A8CCF8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1010EDE48(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A8CCF8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

const void **sub_1010EDE78(uint64_t a1, uint64_t a2)
{
  return sub_1008DDBA8(a2, kCTRegistrationCauseCode, *(_DWORD *)(a1 + 8));
}

uint64_t sub_1010EDE94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010EDED4()
{
}

void sub_1010EDEE4()
{
}

__n128 sub_1010EDEF8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v2 = off_101A8CD78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1010EDF5C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A8CD78;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010EDFA4(uint64_t a1, NSObject ***a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *(__CFCalendar **)(v3 + 64);
  if (v4) {
    int v5 = sub_100670388;
  }
  else {
    int v5 = 0;
  }
  if (v5)
  {
    double v7 = (double)*(int *)(a1 + 24);
    CFAbsoluteTime at = 0.0;
    if (CFCalendarComposeAbsoluteTime(v4, &at, "yMdHms", *(unsigned int *)(a1 + 36), *(char *)(a1 + 32), *(char *)(a1 + 28), *(char *)(a1 + 16), *(char *)(a1 + 20), *(void *)&v7))
    {
      CFNumberRef v15 = 0;
      valuePtr[0] = *(const void **)&at;
      CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, valuePtr);
      if (v8)
      {
        CFNumberRef v9 = v15;
        CFNumberRef v15 = v8;
        valuePtr[0] = v9;
        sub_1000570E8(valuePtr);
      }
      CFNumberRef v10 = v15;
      CFNumberRef v13 = v15;
      CFNumberRef v15 = 0;
      sub_1000570E8((const void **)&v15);
      valuePtr[0] = v10;
      if (v10) {
        CFRetain(v10);
      }
      sub_1008DD878(a2, kCTIndicatorsTimeUpdateAbsoluteTime, valuePtr);
      sub_1000577C4(valuePtr);
      sub_1008DDBA8((uint64_t)a2, kCTIndicatorsTimeUpdateTimeZoneOffset, *(_DWORD *)(a1 + 40));
      sub_1010EC67C(v3, *(_DWORD *)(a1 + 64) != 0);
      sub_1000570E8((const void **)&v13);
    }
    else
    {
      char v12 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(valuePtr[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#N Could not compose absolute gregorian time", (uint8_t *)valuePtr, 2u);
      }
    }
  }
  else
  {
    CFBooleanRef v11 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(valuePtr[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid CFCalendar", (uint8_t *)valuePtr, 2u);
    }
  }
}

void sub_1010EE174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1000577C4((const void **)(v8 - 48));
  sub_1000570E8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010EE1A4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010EE1E4()
{
}

void sub_1010EE1F4()
{
}

__n128 sub_1010EE208(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A8CDF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1010EE254(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A8CDF8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *sub_1010EE284(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  sub_1008DDBA8(a2, kCTIndicatorsTimeUpdateTimeZoneOffset, *(_DWORD *)(a1 + 16));
  char v4 = *(unsigned char *)(a1 + 20);

  return sub_1010EC67C(v3, v4);
}

uint64_t sub_1010EE2DC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010EE31C()
{
}

void sub_1010EE32C()
{
}

unsigned char *sub_1010EE340(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = off_101A8CE78;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_1010EE38C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A8CE78;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void sub_1010EE3BC(uint64_t a1, NSObject ***a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v2 = (const void **)&kCFBooleanTrue;
  }
  else {
    uint64_t v2 = (const void **)&kCFBooleanFalse;
  }
  sub_1008DD72C(a2, kCTIndicatorsDstUpdateDstIsInEffect, *v2);
}

uint64_t sub_1010EE3F4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010EE434()
{
}

uint64_t *sub_1010EE440(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  sub_1010EB7A8(*(void *)v1, *(_DWORD *)(v1 + 8), v1 + 16);
  sub_1010EE4A8(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_1010EE48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_1010EE4A8(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_1010ECB78((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

void sub_1010EE4F8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1010EE604(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010EE674(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(NSObject **)(a1 + 24);
  dispatch_object_t v44 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  uint64_t v42 = 0;
  BOOL v43 = 0;
  (*(void (**)(long long *__return_ptr, uint64_t, dispatch_object_t *, uint64_t *))(*(void *)v2 + 392))(&v45, v2, &v44, &v42);
  long long v4 = v45;
  long long v45 = 0uLL;
  int v5 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v4;
  if (v5)
  {
    sub_10004D2C8(v5);
    if (*((void *)&v45 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  if (v43) {
    sub_10004D2C8(v43);
  }
  if (v44) {
    dispatch_release(v44);
  }
  uint64_t v6 = *(void *)(a1 + 88);
  double v7 = *(NSObject **)(a1 + 24);
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8 || (uint64_t v9 = *(void *)(a1 + 8), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v11 = v9 + 48;
  if (!v9) {
    uint64_t v11 = 0;
  }
  uint64_t v39 = v11;
  uint64_t v40 = v10;
  (*(void (**)(long long *__return_ptr, uint64_t, dispatch_object_t *, uint64_t *, void))(*(void *)v6 + 520))(&v45, v6, &object, &v39, 0);
  long long v12 = v45;
  long long v45 = 0uLL;
  CFNumberRef v13 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v12;
  if (v13)
  {
    sub_10004D2C8(v13);
    if (*((void *)&v45 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  if (v40) {
    sub_10004D2C8(v40);
  }
  if (object) {
    dispatch_release(object);
  }
  uint64_t v14 = *(void *)(a1 + 88);
  CFNumberRef v15 = *(NSObject **)(a1 + 24);
  dispatch_object_t v38 = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  xpc_object_t v16 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v16 || (v17 = *(void *)(a1 + 8), (xpc_object_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v19 = v17 + 48;
  if (!v17) {
    uint64_t v19 = 0;
  }
  uint64_t v39 = v19;
  uint64_t v40 = v18;
  (*(void (**)(long long *__return_ptr, uint64_t, dispatch_object_t *, uint64_t *, uint64_t))(*(void *)v14 + 520))(&v45, v14, &v38, &v39, 2);
  long long v20 = v45;
  long long v45 = 0uLL;
  int v21 = *(std::__shared_weak_count **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = v20;
  if (v21)
  {
    sub_10004D2C8(v21);
    if (*((void *)&v45 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  if (v40) {
    sub_10004D2C8(v40);
  }
  if (v38) {
    dispatch_release(v38);
  }
  uint64_t v22 = *(void *)(a1 + 88);
  unint64_t v23 = *(NSObject **)(a1 + 24);
  dispatch_object_t v37 = v23;
  if (v23) {
    dispatch_retain(v23);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v24 || (uint64_t v25 = *(void *)(a1 + 8), (v26 = std::__shared_weak_count::lock(v24)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v27 = v25 + 56;
  if (!v25) {
    uint64_t v27 = 0;
  }
  uint64_t v35 = v27;
  xpc_object_t v36 = v26;
  (*(void (**)(long long *__return_ptr, uint64_t, dispatch_object_t *, uint64_t *))(*(void *)v22 + 488))(&v45, v22, &v37, &v35);
  long long v28 = v45;
  long long v45 = 0uLL;
  char v29 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v28;
  if (v29)
  {
    sub_10004D2C8(v29);
    if (*((void *)&v45 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  if (v36) {
    sub_10004D2C8(v36);
  }
  if (v37) {
    dispatch_release(v37);
  }
  uint64_t v30 = *(void *)(a1 + 88);
  xpc_object_t v31 = *(NSObject **)(a1 + 24);
  dispatch_object_t v34 = v31;
  if (v31) {
    dispatch_retain(v31);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, dispatch_object_t *))(*(void *)v30 + 728))(&v45, v30, &v34);
  long long v32 = v45;
  long long v45 = 0uLL;
  xpc_object_t v33 = *(std::__shared_weak_count **)(a1 + 208);
  *(_OWORD *)(a1 + 200) = v32;
  if (v33)
  {
    sub_10004D2C8(v33);
    if (*((void *)&v45 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  if (v34) {
    dispatch_release(v34);
  }
}

void sub_1010EE9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010EEA80(uint64_t a1, dispatch_object_t *a2, void *a3, void *a4)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v15, kCtLoggingSystemName, "cp.ctr.watch");
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v8 = *a2;
  *(void *)(a1 + 24) = *a2;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v16, &v15);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v16);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v16);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v15);
  *(void *)a1 = off_101A8CF28;
  *(void *)(a1 + 48) = off_101A8D0F0;
  *(void *)(a1 + 56) = off_101A8D190;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = off_101A8D208;
  *(void *)(a1 + 88) = *a3;
  uint64_t v9 = a3[1];
  *(void *)(a1 + 96) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void))(*(void *)*a3 + 656))(*a3);
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 152) = *a4;
  uint64_t v10 = a4[1];
  *(void *)(a1 + 160) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 232) = 0uLL;
  *(_DWORD *)(a1 + 260) = 0;
  *(_OWORD *)(a1 + 168) = 0uLL;
  *(_OWORD *)(a1 + 184) = 0uLL;
  *(_OWORD *)(a1 + 200) = 0uLL;
  *(_OWORD *)(a1 + 216) = 0uLL;
  *(_OWORD *)(a1 + 241) = 0uLL;
  sub_100058DB0(&__p, "CellularPlanControllerWatch");
  long long v12 = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  ctu::RestModule::RestModule();
  if (v12) {
    dispatch_release(v12);
  }
  if (v14 < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 304) = 255;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(unsigned char *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 586) = 0u;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 392) = 0;
  *(void *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 633) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(unsigned char *)(a1 + 704) = 0;
  return a1;
}

void sub_1010EED1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (object) {
    dispatch_release(object);
  }
  if (a10) {
    dispatch_release(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1000C56F4((void ***)&a17);
  uint64_t v24 = (std::__shared_weak_count *)v19[28];
  if (v24) {
    sub_10004D2C8(v24);
  }
  uint64_t v25 = (std::__shared_weak_count *)v19[26];
  if (v25) {
    sub_10004D2C8(v25);
  }
  uint64_t v26 = (std::__shared_weak_count *)v19[24];
  if (v26) {
    sub_10004D2C8(v26);
  }
  uint64_t v27 = (std::__shared_weak_count *)v19[22];
  if (v27) {
    sub_10004D2C8(v27);
  }
  long long v28 = (std::__shared_weak_count *)v19[20];
  if (v28) {
    sub_10004D2C8(v28);
  }
  char v29 = (std::__shared_weak_count *)v19[18];
  if (v29) {
    sub_10004D2C8(v29);
  }
  uint64_t v30 = (std::__shared_weak_count *)v19[16];
  if (v30) {
    sub_10004D2C8(v30);
  }
  xpc_object_t v31 = (std::__shared_weak_count *)v19[14];
  if (v31) {
    sub_10004D2C8(v31);
  }
  long long v32 = (std::__shared_weak_count *)v19[12];
  if (v32) {
    sub_10004D2C8(v32);
  }
  xpc_object_t v33 = (std::__shared_weak_count *)v19[10];
  if (v33) {
    sub_10004D2C8(v33);
  }
  CellularPlanSubscriptionControllerDelegate::~CellularPlanSubscriptionControllerDelegate(v22);
  ctu::OsLogLogger::~OsLogLogger(v21);
  sub_100087E88(v20);
  _Unwind_Resume(a1);
}

void sub_1010EEE24(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I CellularPlanController initialized", buf, 2u);
  }
  (*(void (**)(void))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72));
  (***(void (****)(uint8_t *__return_ptr))(a1 + 88))(buf);
  Registry::createRestModuleOneTimeUseConnection(&v29, *(Registry **)buf);
  ctu::RestModule::connect();
  if (v30) {
    sub_10004D2C8(v30);
  }
  if (v36) {
    sub_10004D2C8(v36);
  }
  sub_100058DB0(&__p, "/cc/prefs-nb/imeis");
  *(void *)std::string buf = off_101A8D778;
  xpc_object_t v36 = (std::__shared_weak_count *)(a1 + 368);
  dispatch_object_t v37 = buf;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (v33 < 0) {
    operator delete(__p);
  }
  sub_100722258(a1 + 392);
  sub_100058DB0(&__p, "/cc/props/sims_in_use");
  uint64_t v3 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v3 = off_101A8D7F8;
  *((void *)v3 + 1) = a1 + 280;
  *((void *)v3 + 2) = a1;
  *((void *)v3 + 3) = sub_1010EF520;
  *((void *)v3 + 4) = 0;
  dispatch_object_t v37 = v3;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (v33 < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/props/carrier_bundles");
  long long v4 = (uint8_t *)operator new(0x28uLL);
  *(void *)long long v4 = off_101A8D878;
  *((void *)v4 + 1) = a1 + 304;
  *((void *)v4 + 2) = a1;
  *((void *)v4 + 3) = sub_1010EF6E0;
  *((void *)v4 + 4) = 0;
  dispatch_object_t v37 = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (v33 < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/events/dump_state");
  int v5 = (uint8_t *)operator new(0x20uLL);
  *(void *)int v5 = off_101A8D8F8;
  *((void *)v5 + 1) = a1;
  *((void *)v5 + 2) = sub_1010EF77C;
  *((void *)v5 + 3) = 0;
  dispatch_object_t v37 = v5;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (v33 < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/props/remote_paired_device_list");
  uint64_t v6 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v6 = off_101A8D978;
  *((void *)v6 + 1) = a1 + 424;
  *((void *)v6 + 2) = a1;
  *((void *)v6 + 3) = sub_1010EF8C8;
  *((void *)v6 + 4) = 0;
  dispatch_object_t v37 = v6;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (v33 < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/events/new_nanoregistry_device_configured");
  double v7 = (uint8_t *)operator new(0x20uLL);
  *(void *)double v7 = off_101A8D9F8;
  *((void *)v7 + 1) = a1;
  *((void *)v7 + 2) = sub_1010EFACC;
  *((void *)v7 + 3) = 0;
  dispatch_object_t v37 = v7;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (v33 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = *(void *)(a1 + 200);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  }
  (*(void (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
  (*(void (**)(void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120));
  (*(void (**)(void))(**(void **)(a1 + 136) + 16))(*(void *)(a1 + 136));
  std::string __p = 0;
  long long v32 = 0;
  uint64_t v10 = *(void **)(a1 + 8);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)std::string buf = v10;
  if (!v9 || (uint64_t v11 = std::__shared_weak_count::lock(v9), (v36 = v11) == 0)) {
    sub_100088B9C();
  }
  if (v10)
  {
    std::string __p = v10;
    long long v32 = v11;
    p_p = buf;
  }
  else
  {
    p_p = &__p;
  }
  void *p_p = 0;
  p_p[1] = 0;
  if (v36) {
    sub_10004D2C8(v36);
  }
  (***(void (****)(Registry **__return_ptr))(a1 + 88))(&v27);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v27);
  char v14 = ServiceMap;
  OsLogContext v15 = "N8cellplan36CellularPlanControllerWatchInterfaceE";
  if (((unint64_t)"N8cellplan36CellularPlanControllerWatchInterfaceE" & 0x8000000000000000) != 0)
  {
    xpc_object_t v16 = (unsigned __int8 *)((unint64_t)"N8cellplan36CellularPlanControllerWatchInterfaceE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = 5381;
    do
    {
      OsLogContext v15 = (const char *)v17;
      unsigned int v18 = *v16++;
      uint64_t v17 = (33 * v17) ^ v18;
    }
    while (v18);
  }
  std::mutex::lock(ServiceMap);
  uint64_t v19 = __p;
  long long v20 = v32;
  *(void *)std::string buf = __p;
  xpc_object_t v36 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_object_t v34 = v15;
  int v21 = v14 + 1;
  if (v19)
  {
    sub_100136784((uint64_t)v21, (unint64_t *)&v34, &v34, (uint64_t *)buf);
    char v23 = v22 & 1;
    uint64_t v24 = v36;
    if (!v36) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  sub_100136C98(v21, (unint64_t *)&v34);
  char v23 = 1;
  uint64_t v24 = v20;
  if (v20) {
LABEL_35:
  }
    sub_10004D2C8(v24);
LABEL_36:
  std::mutex::unlock(v14);
  if ((v23 & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "The given type is already in the map!");
  }
  if (v28) {
    sub_10004D2C8(v28);
  }
  uint64_t v25 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I CellularPlanControllerWatch bootstrapped", buf, 2u);
  }
  if (v20) {
    sub_10004D2C8(v20);
  }
}

void sub_1010EF458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *__p, std::__shared_weak_count *a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21)
{
  __cxa_free_exception(v21);
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(a1);
}

void sub_1010EF520(uint64_t a1)
{
  __s1 = 0;
  size_t __n = 0;
  uint64_t v18 = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 168) + 32))(&__s1);
  size_t v2 = HIBYTE(v18);
  char v3 = HIBYTE(v18);
  if (v18 < 0) {
    size_t v2 = __n;
  }
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 280);
    uint64_t v5 = *(void *)(a1 + 288);
    if (v4 != v5)
    {
      while (1)
      {
        uint64_t v6 = HIBYTE(v18);
        if (v18 >= 0) {
          size_t v7 = HIBYTE(v18);
        }
        else {
          size_t v7 = __n;
        }
        uint64_t v8 = *(unsigned __int8 *)(v4 + 95);
        int v9 = (char)v8;
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *(void *)(v4 + 80);
        }
        if (v7 != v8) {
          goto LABEL_24;
        }
        uint64_t v10 = v9 >= 0 ? (unsigned __int8 *)(v4 + 72) : *(unsigned __int8 **)(v4 + 72);
        if ((v18 & 0x8000000000000000) == 0) {
          break;
        }
        if (!memcmp(__s1, v10, __n)) {
          goto LABEL_21;
        }
LABEL_24:
        v4 += 168;
        if (v4 == v5)
        {
          char v3 = HIBYTE(v18);
          goto LABEL_26;
        }
      }
      if (HIBYTE(v18))
      {
        p_s1 = &__s1;
        while (*(unsigned __int8 *)p_s1 == *v10)
        {
          p_s1 = (void **)((char *)p_s1 + 1);
          ++v10;
          if (!--v6) {
            goto LABEL_21;
          }
        }
        goto LABEL_24;
      }
LABEL_21:
      long long v12 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)OsLogContext v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I iccid match selection", v15, 2u);
      }
      uint64_t v13 = *(void *)(a1 + 200);
      uint64_t isSimReady = subscriber::isSimReady();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 48))(v13, isSimReady);
      goto LABEL_24;
    }
  }
LABEL_26:
  if (v3 < 0) {
    operator delete(__s1);
  }
}

void sub_1010EF6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010EF6E0(uint64_t result)
{
  if (*(unsigned __int8 *)(result + 304) - 1 <= 2)
  {
    uint64_t v1 = result;
    size_t v2 = *(NSObject **)(result + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I cb change", v3, 2u);
    }
    return (*(uint64_t (**)(void))(**(void **)(v1 + 200) + 56))(*(void *)(v1 + 200));
  }
  return result;
}

float sub_1010EF77C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 608);
  if (v2)
  {
    char v3 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = *(_DWORD *)(v2 + 68) == 2;
      int v9 = 67109120;
      BOOL v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I fBasebandOnlineAssertion state : %d", (uint8_t *)&v9, 8u);
    }
  }
  if (*(void *)(a1 + 624))
  {
    uint64_t v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I probe in progress", (uint8_t *)&v9, 2u);
    }
  }
  if (*(unsigned char *)(a1 + 256))
  {
    size_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      char v8 = *(unsigned char *)(a1 + 257);
      int v9 = 16777472;
      LOBYTE(v10) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I fPendingInstallStatus: %hhu", (uint8_t *)&v9, 5u);
    }
  }
  return result;
}

uint64_t sub_1010EF8C8(uint64_t result)
{
  if (*(unsigned char *)(result + 424) == 2)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 184);
    if (!v2)
    {
      uint64_t v3 = *(void *)(v1 + 88);
      uint64_t v4 = *(NSObject **)(v1 + 24);
      dispatch_object_t object = v4;
      if (v4) {
        dispatch_retain(v4);
      }
      (*(void (**)(long long *__return_ptr, uint64_t, dispatch_object_t *))(*(void *)v3 + 816))(&v19, v3, &object);
      long long v5 = v19;
      long long v19 = 0uLL;
      uint64_t v6 = *(std::__shared_weak_count **)(v1 + 224);
      *(_OWORD *)(v1 + 216) = v5;
      if (v6)
      {
        sub_10004D2C8(v6);
        if (*((void *)&v19 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v19 + 1));
        }
      }
      if (object) {
        dispatch_release(object);
      }
      uint64_t v7 = *(void *)(v1 + 88);
      char v8 = *(NSObject **)(v1 + 24);
      dispatch_object_t v17 = v8;
      if (v8) {
        dispatch_retain(v8);
      }
      int v9 = *(std::__shared_weak_count **)(v1 + 16);
      if (!v9 || (v10 = *(void *)(v1 + 8), (uint64_t v11 = std::__shared_weak_count::lock(v9)) == 0)) {
        sub_100088B9C();
      }
      uint64_t v12 = v10 + 64;
      if (!v10) {
        uint64_t v12 = 0;
      }
      uint64_t v15 = v12;
      xpc_object_t v16 = v11;
      (*(void (**)(long long *__return_ptr, uint64_t, dispatch_object_t *, uint64_t *))(*(void *)v7 + 400))(&v19, v7, &v17, &v15);
      long long v13 = v19;
      long long v19 = 0uLL;
      char v14 = *(std::__shared_weak_count **)(v1 + 192);
      *(_OWORD *)(v1 + 184) = v13;
      if (v14)
      {
        sub_10004D2C8(v14);
        if (*((void *)&v19 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v19 + 1));
        }
      }
      if (v16) {
        sub_10004D2C8(v16);
      }
      if (v17) {
        dispatch_release(v17);
      }
      (*(void (**)(void))(**(void **)(v1 + 184) + 16))(*(void *)(v1 + 184));
      uint64_t v2 = *(void *)(v1 + 184);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  return result;
}

void sub_1010EFA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, dispatch_object_t object, uint64_t a12)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1010EFACC(uint64_t a1)
{
  float result = *(void **)(a1 + 184);
  if (result)
  {
    v2[3] = 0;
    (*(void (**)(void *, uint64_t, void, void *))(*result + 72))(result, 1, 0, v2);
    return sub_10032493C(v2);
  }
  return result;
}

void sub_1010EFB60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10032493C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010EFB74(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 168) + 24))(*(void *)(a1 + 168));

  return ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 264));
}

void sub_1010EFBD0(uint64_t a1, int a2, const std::string **a3)
{
  if (!a2) {
    goto LABEL_87;
  }
  (***(void (****)(std::string *__return_ptr))(a1 + 88))(&v54);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v5, (Registry *)v54.__r_.__value_.__l.__data_);
  uint64_t v7 = ServiceMap;
  if (v8 < 0)
  {
    int v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      uint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v8;
  uint64_t v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)buf);
  if (v12)
  {
    uint64_t v14 = v12[3];
    long long v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v13);
      char v15 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  long long v13 = 0;
  char v15 = 1;
LABEL_10:
  if (v54.__r_.__value_.__l.__size_) {
    sub_10004D2C8((std::__shared_weak_count *)v54.__r_.__value_.__l.__size_);
  }
  if (!v14) {
    goto LABEL_85;
  }
  HIBYTE(v55[2]) = 22;
  long long v56 = 0u;
  *(_OWORD *)std::string::size_type v57 = 0u;
  long long v58 = 0u;
  memset(&v54, 0, sizeof(v54));
  strcpy((char *)v55, "com.apple.NanoSettings");
  LOBYTE(v56) = 1;
  if (SHIBYTE((*a3)[3].__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = (*a3)[3].__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE((*a3)[3].__r_.__value_.__r.__words[2]);
  }
  if (size) {
    dispatch_object_t v17 = *a3 + 3;
  }
  else {
    dispatch_object_t v17 = *a3;
  }
  std::string::operator=(&v54, v17);
  uint64_t v18 = kCBMessageLocalizationTable;
  (*(void (**)(long long *__return_ptr, uint64_t, void, const __CFString *, const __CFString *))(*(void *)v14 + 40))(&__dst, v14, kCBMessageLocalizationTable, @"CELLULAR_PLAN_PENDING_FOR_INSTALL_TITLE", @"CELLULAR_PLAN_PENDING_FOR_INSTALL_TITLE");
  *(void *)std::string buf = *((void *)&v56 + 1);
  *((void *)&v56 + 1) = __dst;
  *(void *)&long long __dst = 0;
  sub_1000558F4((const void **)buf);
  sub_1000558F4((const void **)&__dst);
  CFStringRef v53 = 0;
  long long v19 = (void **)(a1 + 528);
  if (*(char *)(a1 + 551) < 0)
  {
    unint64_t v20 = *(void *)(a1 + 536);
    if (v20)
    {
      sub_10004FC84(__p, *v19, v20);
      goto LABEL_24;
    }
LABEL_26:
    CFStringRef v53 = @"iPhone";
    *(void *)std::string buf = 0;
    sub_1000558F4((const void **)buf);
    goto LABEL_39;
  }
  if (!*(unsigned char *)(a1 + 551)) {
    goto LABEL_26;
  }
  *(_OWORD *)std::string __p = *(_OWORD *)v19;
  std::string::size_type v51 = *(void *)(a1 + 544);
LABEL_24:
  if (SHIBYTE(v51) < 0)
  {
    sub_10004FC84(&__dst, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long __dst = *(_OWORD *)__p;
    std::string::size_type v61 = v51;
  }
  CFStringRef v59 = 0;
  if (SHIBYTE(v61) < 0)
  {
    sub_10004FC84(buf, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string buf = __dst;
    std::string::size_type v65 = v61;
  }
  CFStringRef v62 = 0;
  if (ctu::cf::convert_copy())
  {
    CFStringRef v21 = v59;
    CFStringRef v59 = v62;
    CFStringRef v63 = v21;
    sub_1000558F4((const void **)&v63);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(*(void **)buf);
  }
  CFStringRef v52 = v59;
  CFStringRef v59 = 0;
  sub_1000558F4((const void **)&v59);
  if (SHIBYTE(v61) < 0) {
    operator delete((void *)__dst);
  }
  *(void *)std::string buf = v53;
  CFStringRef v22 = v52;
  CFStringRef v52 = 0;
  CFStringRef v53 = v22;
  sub_1000558F4((const void **)buf);
  sub_1000558F4((const void **)&v52);
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
LABEL_39:
  if (SHIBYTE((*a3)[2].__r_.__value_.__r.__words[2]) < 0)
  {
    if ((*a3)[2].__r_.__value_.__l.__size_) {
      goto LABEL_41;
    }
LABEL_44:
    *(void *)&long long __dst = 0;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, const __CFString *, const __CFString *))(*(void *)v14 + 40))(&__dst, v14, v18, @"CELLULAR_PLAN_PENDING_FOR_INSTALL_MESSAGE_WATCH_NO_CARRIER_%@", @"CELLULAR_PLAN_PENDING_FOR_INSTALL_MESSAGE_WATCH_NO_CARRIER_%@");
    CFStringRef v24 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, (CFStringRef)__dst, v53);
    uint64_t v25 = v57[0];
    v57[0] = (void *)v24;
    *(void *)std::string buf = v25;
    sub_1000558F4((const void **)buf);
    p_dst = (const void **)&__dst;
    goto LABEL_61;
  }
  if (!*((unsigned char *)&(*a3)[2].__r_.__value_.__s + 23)) {
    goto LABEL_44;
  }
LABEL_41:
  CFStringRef v52 = 0;
  (*(void (**)(const __CFString **__return_ptr, uint64_t, uint64_t, const __CFString *, const __CFString *))(*(void *)v14 + 40))(&v52, v14, v18, @"CELLULAR_PLAN_PENDING_FOR_INSTALL_MESSAGE_WATCH_%@_%@", @"CELLULAR_PLAN_PENDING_FOR_INSTALL_MESSAGE_WATCH_%@_%@");
  CFStringRef v49 = 0;
  char v23 = *a3;
  if (SHIBYTE((*a3)[2].__r_.__value_.__r.__words[2]) < 0)
  {
    sub_10004FC84(v47, v23[2].__r_.__value_.__l.__data_, v23[2].__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)int64_t v47 = *(_OWORD *)&v23[2].__r_.__value_.__l.__data_;
    std::string::size_type v48 = v23[2].__r_.__value_.__r.__words[2];
  }
  if (SHIBYTE(v48) < 0)
  {
    sub_10004FC84(&__dst, v47[0], (unint64_t)v47[1]);
  }
  else
  {
    long long __dst = *(_OWORD *)v47;
    std::string::size_type v61 = v48;
  }
  CFStringRef v59 = 0;
  if (SHIBYTE(v61) < 0)
  {
    sub_10004FC84(buf, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string buf = __dst;
    std::string::size_type v65 = v61;
  }
  CFStringRef v62 = 0;
  if (ctu::cf::convert_copy())
  {
    CFStringRef v27 = v59;
    CFStringRef v59 = v62;
    CFStringRef v63 = v27;
    sub_1000558F4((const void **)&v63);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(*(void **)buf);
  }
  CFStringRef v49 = v59;
  CFStringRef v59 = 0;
  sub_1000558F4((const void **)&v59);
  if (SHIBYTE(v61) < 0) {
    operator delete((void *)__dst);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(v47[0]);
  }
  CFStringRef v28 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, v52, v49, v53);
  uint64_t v29 = v57[0];
  v57[0] = (void *)v28;
  *(void *)std::string buf = v29;
  sub_1000558F4((const void **)buf);
  sub_1000558F4((const void **)&v49);
  p_dst = (const void **)&v52;
LABEL_61:
  sub_1000558F4(p_dst);
  (***(void (****)(uint8_t *__return_ptr))(a1 + 88))(buf);
  xpc_object_t v31 = (std::mutex *)Registry::getServiceMap(v30, *(Registry **)buf);
  long long v32 = v31;
  if (v33 < 0)
  {
    dispatch_object_t v34 = (unsigned __int8 *)(v33 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v35 = 5381;
    do
    {
      uint64_t v33 = v35;
      unsigned int v36 = *v34++;
      uint64_t v35 = (33 * v35) ^ v36;
    }
    while (v36);
  }
  std::mutex::lock(v31);
  *(void *)&long long __dst = v33;
  dispatch_object_t v37 = sub_10004D37C(&v32[1].__m_.__sig, (unint64_t *)&__dst);
  if (!v37)
  {
    uint64_t v39 = 0;
    goto LABEL_68;
  }
  uint64_t v39 = v37[3];
  dispatch_object_t v38 = (std::__shared_weak_count *)v37[4];
  if (!v38)
  {
LABEL_68:
    std::mutex::unlock(v32);
    dispatch_object_t v38 = 0;
    char v40 = 1;
    goto LABEL_69;
  }
  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v32);
  atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v38);
  char v40 = 0;
LABEL_69:
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v39)
  {
    std::locale v41 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v42 = &v54;
      if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v42 = (std::string *)v54.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v42;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I Posting notification for (%s)", buf, 0xCu);
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v39 + 16))(v39, &v54);
  }
  if ((v40 & 1) == 0) {
    sub_10004D2C8(v38);
  }
  sub_1000558F4((const void **)&v53);
  if (SHIBYTE(v58) < 0) {
    operator delete(v57[1]);
  }
  sub_1000558F4((const void **)v57);
  sub_1000558F4((const void **)&v56 + 1);
  if (SHIBYTE(v55[2]) < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
LABEL_85:
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v13);
  }
LABEL_87:
  int v43 = *(unsigned __int8 *)(a1 + 424);
  if (v43 == 2)
  {
    uint64_t v45 = *(void *)(a1 + 232);
    if (*(void *)(a1 + 240) == v45) {
      sub_10015B728();
    }
    (*(void (**)(void, uint64_t, const std::string **))(**(void **)(a1 + 136) + 64))(*(void *)(a1 + 136), v45 + 16, a3);
  }
  else if (v43 == 1)
  {
    uint64_t v44 = *(void *)(a1 + 232);
    if (*(void *)(a1 + 240) == v44) {
      sub_10015B728();
    }
    (*(void (**)(void, uint64_t, const std::string **))(**(void **)(a1 + 120) + 64))(*(void *)(a1 + 120), v44 + 16, a3);
  }
  else
  {
    unint64_t v46 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v54.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "Cannot send PendingProfilesInd, unknown mode", (uint8_t *)&v54, 2u);
    }
  }
}

void sub_1010F0404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,const void *a25,const void *a26,__int16 a27,char a28,char a29,uint64_t a30)
{
  sub_1000558F4((const void **)(v32 - 168));
  if (*(char *)(v32 - 137) < 0) {
    operator delete(*(void **)(v32 - 160));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1000558F4(&a25);
  sub_1000558F4(&a26);
  sub_100D11A70((uint64_t)&a27);
  if ((v31 & 1) == 0) {
    sub_10004D2C8(v30);
  }
  _Unwind_Resume(a1);
}

void sub_1010F0560(uint64_t a1, int a2, const std::string **a3)
{
}

void sub_1010F056C(uint64_t a1, const std::string *a2)
{
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  sub_100324590(&v11);
  uint64_t v4 = v11;
  v11[5].__r_.__value_.__s.__data_[2] = 0;
  std::string::operator=(v4, a2);
  long long v5 = v11;
  uint64_t v6 = v11 + 4;
  uint64_t v7 = (long long *)&a2[3];
  std::string::size_type size = v11[4].__r_.__value_.__l.__size_;
  if (size >= v11[4].__r_.__value_.__r.__words[2])
  {
    uint64_t v9 = sub_10030E9EC((uint64_t *)v6, v7);
  }
  else
  {
    sub_1000D87F8(v6, v7);
    uint64_t v9 = size + 24;
  }
  v5[4].__r_.__value_.__l.__size_ = v9;
  std::string::operator=(v11 + 2, a2 + 1);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (v10)
  {
    if (std::__shared_weak_count::lock(v10)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010F06D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010F06F0(uint64_t a1, const std::string *a2)
{
}

uint64_t sub_1010F0700()
{
  return 0;
}

uint64_t sub_1010F0708()
{
  return 0;
}

uint64_t sub_1010F0710()
{
  return 0;
}

uint64_t sub_1010F0718()
{
  return 0;
}

void sub_1010F0738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (!v8)
  {
    char v15 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Missing session id", buf, 2u);
    }
    v65[0] = 2;
    LOBYTE(v66) = 1;
    uint64_t v16 = *(void *)(a6 + 24);
    if (!v16) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, char *))(*(void *)v16 + 48))(v16, v65);
    if (v65[0] != 1) {
      return;
    }
    uint64_t v14 = v66;
    if (!v66) {
      return;
    }
    char v67 = v66;
LABEL_103:
    operator delete(v14);
    return;
  }
  uint64_t v9 = *(void *)(a1 + 232);
  if (*(void *)(a1 + 240) == v9 || *(_DWORD *)(v9 + 12) != 3)
  {
    uint64_t v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "No vinyl info", buf, 2u);
    }
    v62[0] = 2;
    LOBYTE(v63) = 12;
    uint64_t v13 = *(void *)(a6 + 24);
    if (!v13) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, char *))(*(void *)v13 + 48))(v13, v62);
    if (v62[0] != 1) {
      return;
    }
    uint64_t v14 = v63;
    if (!v63) {
      return;
    }
    int v64 = v63;
    goto LABEL_103;
  }
  if (!*(void *)(a1 + 184))
  {
    dispatch_object_t v17 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "No subscription controller", buf, 2u);
    }
    v59[0] = 2;
    LOBYTE(v60) = 11;
    uint64_t v18 = *(void *)(a6 + 24);
    if (!v18) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, char *))(*(void *)v18 + 48))(v18, v59);
    if (v59[0] != 1) {
      return;
    }
    uint64_t v14 = v60;
    if (!v60) {
      return;
    }
    std::string::size_type v61 = v60;
    goto LABEL_103;
  }
  long long v56 = 0;
  std::string::size_type v57 = 0;
  uint64_t v58 = 0;
  uint64_t v55 = 0;
  memset(v54, 0, sizeof(v54));
  sub_10031009C(buf, "kSessionId", (long long *)a3);
  sub_100343A10((uint64_t)v54, buf, 1);
  if (v73 < 0) {
    operator delete(*(void **)&v72[16]);
  }
  if ((v72[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    unint64_t v19 = *(void *)(a4 + 8);
    if (!v19) {
      goto LABEL_36;
    }
    *(void *)std::string buf = "kTokenID";
    sub_10004FC84(v72, *(void **)a4, v19);
  }
  else
  {
    if (!*(unsigned char *)(a4 + 23)) {
      goto LABEL_36;
    }
    *(_OWORD *)uint64_t v72 = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 16);
    *(void *)std::string buf = "kTokenID";
    *(void *)&v72[16] = v11;
  }
  sub_100343E74(v54, (uint64_t)buf);
  if ((v72[23] & 0x80000000) != 0) {
    operator delete(*(void **)v72);
  }
LABEL_36:
  unint64_t v20 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0)
  {
    unint64_t v22 = *(void *)(a1 + 376);
    if (!v22) {
      goto LABEL_43;
    }
    *(void *)std::string buf = "kIMEI";
    sub_10004FC84(v72, *v20, v22);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 391)) {
      goto LABEL_43;
    }
    *(_OWORD *)uint64_t v72 = *(_OWORD *)v20;
    uint64_t v21 = *(void *)(a1 + 384);
    *(void *)std::string buf = "kIMEI";
    *(void *)&v72[16] = v21;
  }
  sub_100343E74(v54, (uint64_t)buf);
  if ((v72[23] & 0x80000000) != 0) {
    operator delete(*(void **)v72);
  }
LABEL_43:
  if (!*(unsigned char *)(a1 + 416)) {
    goto LABEL_51;
  }
  char v23 = (void **)(a1 + 392);
  if (*(char *)(a1 + 415) < 0)
  {
    unint64_t v25 = *(void *)(a1 + 400);
    if (!v25) {
      goto LABEL_51;
    }
    *(void *)std::string buf = "kMEID";
    sub_10004FC84(v72, *v23, v25);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 415)) {
      goto LABEL_51;
    }
    *(_OWORD *)uint64_t v72 = *(_OWORD *)v23;
    uint64_t v24 = *(void *)(a1 + 408);
    *(void *)std::string buf = "kMEID";
    *(void *)&v72[16] = v24;
  }
  sub_100343E74(v54, (uint64_t)buf);
  if ((v72[23] & 0x80000000) != 0) {
    operator delete(*(void **)v72);
  }
LABEL_51:
  (***(void (****)(uint8_t *__return_ptr))(a1 + 88))(buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v26, *(Registry **)buf);
  CFStringRef v28 = ServiceMap;
  if (v29 < 0)
  {
    uint64_t v30 = (unsigned __int8 *)(v29 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v31 = 5381;
    do
    {
      uint64_t v29 = v31;
      unsigned int v32 = *v30++;
      uint64_t v31 = (33 * v31) ^ v32;
    }
    while (v32);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v29;
  uint64_t v33 = sub_10004D37C(&v28[1].__m_.__sig, (unint64_t *)__p);
  if (v33)
  {
    uint64_t v35 = v33[3];
    dispatch_object_t v34 = (std::__shared_weak_count *)v33[4];
    if (v34)
    {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v28);
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v34);
      char v36 = 0;
      goto LABEL_59;
    }
  }
  else
  {
    uint64_t v35 = 0;
  }
  std::mutex::unlock(v28);
  dispatch_object_t v34 = 0;
  char v36 = 1;
LABEL_59:
  if (*(void *)v72) {
    sub_10004D2C8(*(std::__shared_weak_count **)v72);
  }
  if (v35)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v35 + 200))(__p, v35);
    *(_OWORD *)uint64_t v72 = *(_OWORD *)__p;
    *(void *)std::string buf = "kProductType";
    *(void **)&v72[16] = __p[2];
    memset(__p, 0, sizeof(__p));
    sub_100343E74(v54, (uint64_t)buf);
    if ((v72[23] & 0x80000000) != 0) {
      operator delete(*(void **)v72);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v35 + 208))(__p, v35);
    *(_OWORD *)uint64_t v72 = *(_OWORD *)__p;
    *(void *)std::string buf = "kOSVersion";
    *(void **)&v72[16] = __p[2];
    memset(__p, 0, sizeof(__p));
    sub_100343E74(v54, (uint64_t)buf);
    if ((v72[23] & 0x80000000) != 0) {
      operator delete(*(void **)v72);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    CFStringRef v53 = 0;
    (*(void (**)(const void **__return_ptr, uint64_t))(*(void *)v35 + 96))(&v53, v35);
    if (v53) {
      dispatch_object_t v37 = sub_1000810B8;
    }
    else {
      dispatch_object_t v37 = 0;
    }
    if (v37)
    {
      memset(__p, 0, sizeof(__p));
      ctu::cf::assign();
      *(void **)uint64_t v72 = __p[0];
      *(void **)&v72[8] = __p[1];
      *(void **)&v72[15] = *(void **)((char *)&__p[1] + 7);
      *(void *)std::string buf = "kSerialNumber";
      v72[23] = HIBYTE(__p[2]);
      sub_100343E74(v54, (uint64_t)buf);
      if ((v72[23] & 0x80000000) != 0) {
        operator delete(*(void **)v72);
      }
    }
    else
    {
      dispatch_object_t v38 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#E Serial Number not valid, skipping", buf, 2u);
      }
    }
    sub_1000558F4(&v53);
    CFStringRef v53 = 0;
    (*(void (**)(const void **__return_ptr, uint64_t))(*(void *)v35 + 104))(&v53, v35);
    if (v53) {
      uint64_t v39 = sub_1000810B8;
    }
    else {
      uint64_t v39 = 0;
    }
    if (v39)
    {
      memset(__p, 0, sizeof(__p));
      ctu::cf::assign();
      *(void **)uint64_t v72 = __p[0];
      *(void **)&v72[8] = __p[1];
      *(void **)&v72[15] = *(void **)((char *)&__p[1] + 7);
      *(void *)std::string buf = "kUDID";
      v72[23] = HIBYTE(__p[2]);
      sub_100343E74(v54, (uint64_t)buf);
      if ((v72[23] & 0x80000000) != 0) {
        operator delete(*(void **)v72);
      }
    }
    else
    {
      char v40 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#E UDID not valid, skipping", buf, 2u);
      }
    }
    sub_1000558F4(&v53);
  }
  if ((v36 & 1) == 0) {
    sub_10004D2C8(v34);
  }
  if ((*(uint64_t (**)(void, _OWORD *, void **))(**(void **)(a1 + 216) + 16))(*(void *)(a1 + 216), v54, &v56))
  {
    uint64_t v41 = *(void *)(a1 + 232);
    if (*(void *)(a1 + 240) == v41) {
      sub_10015B728();
    }
    uint64_t v42 = *(void *)(a1 + 72);
    uint64_t v43 = *(void *)(v41 + 16);
    uint64_t v44 = *(void *)(v41 + 24);
    int64_t v47 = 0;
    std::string::size_type v48 = 0;
    uint64_t v49 = 0;
    sub_10005C928(&v47, v56, (uint64_t)v57, v57 - (unsigned char *)v56);
    v69[0] = _NSConcreteStackBlock;
    v69[1] = 1174405120;
    v69[2] = sub_1010F12C8;
    v69[3] = &unk_101A8D2A8;
    v69[4] = a1;
    sub_1000C67C8((uint64_t)v70, a6);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void *))(*(void *)v42 + 56))(v42, v43, v44, &v47, v69);
    if (v47)
    {
      std::string::size_type v48 = v47;
      operator delete(v47);
    }
    sub_1000C6860(v70);
  }
  else
  {
    uint64_t v45 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#E Failed to encode device metadata", buf, 2u);
    }
    v50[0] = 2;
    LOBYTE(v51) = 3;
    uint64_t v46 = *(void *)(a6 + 24);
    if (!v46) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, char *))(*(void *)v46 + 48))(v46, v50);
    if (v50[0] == 1 && v51)
    {
      CFStringRef v52 = v51;
      operator delete(v51);
    }
    v50[0] = 0;
  }
  sub_100343DF4((uint64_t)v54);
  uint64_t v14 = v56;
  if (v56)
  {
    std::string::size_type v57 = v56;
    goto LABEL_103;
  }
}

void sub_1010F1104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_1010F12C8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1174405120;
  void v12[2] = sub_1010F147C;
  v12[3] = &unk_101A8D278;
  sub_1000C67C8((uint64_t)v13, a1 + 40);
  sub_1000C58F0((uint64_t)v14, a2);
  uint64_t v4 = (std::__shared_weak_count *)v3[2];
  if (!v4 || (uint64_t v5 = v3[1], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v6;
  uint64_t v8 = v3[3];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  void v10[2] = sub_1010F8AF4;
  v10[3] = &unk_101A8DAF0;
  void v10[5] = v5;
  uint64_t v11 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  v10[4] = v12;
  dispatch_async(v8, v10);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10004D2C8(v7);
  if (v14[0] == 1 && __p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  v14[0] = 0;
  return sub_1000C6860(v13);
}

void sub_1010F144C(_Unwind_Exception *a1)
{
  sub_1000C6860(v1);
  _Unwind_Resume(a1);
}

void sub_1010F147C(uint64_t a1)
{
  sub_1000C58F0((uint64_t)v3, (unsigned __int8 *)(a1 + 64));
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 48))(v2, v3);
  if (v3[0] == 1)
  {
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
}

void sub_1010F1504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *__p, uint64_t a11)
{
  if (a9 == 1)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010F152C(uint64_t a1, uint64_t a2)
{
  return sub_1000C58F0(a1 + 64, (unsigned __int8 *)(a2 + 64));
}

void sub_1010F1574(_Unwind_Exception *a1)
{
  sub_1000C6860(v1);
  _Unwind_Resume(a1);
}

void *sub_1010F1588(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64) == 1)
  {
    uint64_t v2 = *(void **)(a1 + 72);
    if (v2)
    {
      *(void *)(a1 + 80) = v2;
      operator delete(v2);
    }
  }
  *(unsigned char *)(a1 + 64) = 0;

  return sub_1000C6860((void *)(a1 + 32));
}

void sub_1010F15DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_1010F15EC()
{
  return 0;
}

uint64_t sub_1010F15F4()
{
  return 0;
}

void sub_1010F15FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 232);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(long long **)(a2 + 8);
  uint64_t v8 = a1;
  sub_1000C5DA8((uint64_t)&v9, v3);
  if ((long long *)v4 != v5)
  {
    while ((sub_1010F73E0((uint64_t)&v8, v4) & 1) == 0)
    {
      v4 += 312;
      if ((long long *)v4 == v5)
      {
        uint64_t v4 = (uint64_t)v5;
        goto LABEL_11;
      }
    }
    if ((long long *)v4 != v5)
    {
      for (uint64_t i = (long long *)(v4 + 312); i != v5; uint64_t i = (long long *)((char *)i + 312))
      {
        if ((sub_1010F73E0((uint64_t)&v8, (uint64_t)i) & 1) == 0)
        {
          sub_10031016C(v4, i);
          v4 += 312;
        }
      }
    }
  }
LABEL_11:
  sub_100301910(a2, v4, *(long long **)(a2 + 8));
  if (v12[24])
  {
    uint64_t v7 = (void **)v12;
    sub_1000C57C8(&v7);
  }
  if (v11 < 0) {
    operator delete(__p);
  }
}

void sub_1010F1714(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010F1738((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010F1738(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v3 = (void **)(a1 + 64);
    sub_1000C57C8(&v3);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

void sub_1010F178C(uint64_t a1, uint64_t a2)
{
}

void sub_1010F179C(void *a1, uint64_t a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  void v8[2] = sub_1010F18B4;
  v8[3] = &unk_101A8D320;
  void v8[4] = a2;
  void v8[5] = a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (v4 = a1[1], (uint64_t v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  uint64_t v7 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010F8AF4;
  block[3] = &unk_101A8DAF0;
  block[5] = v4;
  uint64_t v10 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v8;
  dispatch_async(v7, block);
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_10004D2C8(v6);
}

void sub_1010F18B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I sim connectivity probe", buf, 2u);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B13160, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_101B13160))
  {
    __cxa_atexit((void (*)(void *))sub_1010F1D60, &qword_101B13168, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101B13160);
  }
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(v2 + 168) + 32))(buf);
  if (v32 < 0)
  {
    uint64_t v6 = *(void *)&buf[8];
    operator delete(*(void **)buf);
    if (v6)
    {
LABEL_6:
      uint64_t v4 = *(void **)(a1 + 32);
      if (qword_101B13170 < (unint64_t)qword_101B13178)
      {
        uint64_t v5 = sub_1010F786C((void *)qword_101B13170, v4) + 1;
        goto LABEL_29;
      }
      uint64_t v8 = (qword_101B13170 - qword_101B13168) >> 3;
      if ((unint64_t)(v8 + 1) >> 61) {
        sub_10006A748();
      }
      unint64_t v9 = (qword_101B13178 - qword_101B13168) >> 2;
      if (v9 <= v8 + 1) {
        unint64_t v9 = v8 + 1;
      }
      if ((unint64_t)(qword_101B13178 - qword_101B13168) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10)
      {
        if (v10 >> 61) {
          sub_10006A7CC();
        }
        char v11 = operator new(8 * v10);
      }
      else
      {
        char v11 = 0;
      }
      uint64_t v12 = sub_1010F786C(&v11[v8], v4);
      uint64_t v13 = (void *)qword_101B13168;
      uint64_t v14 = qword_101B13170;
      if (qword_101B13170 == qword_101B13168)
      {
        uint64_t v5 = v12 + 1;
        qword_101B13168 = (uint64_t)v12;
        qword_101B13170 = (uint64_t)(v12 + 1);
        qword_101B13178 = (uint64_t)&v11[v10];
        if (v13) {
LABEL_28:
        }
          operator delete(v13);
      }
      else
      {
        char v15 = (void *)qword_101B13170;
        uint64_t v16 = (uint64_t)v12;
        do
        {
          uint64_t v17 = *--v15;
          *(void *)(v16 - 8) = v17;
          v16 -= 8;
          *char v15 = 0;
        }
        while (v15 != v13);
        uint64_t v5 = v12 + 1;
        qword_101B13168 = v16;
        qword_101B13170 = (uint64_t)(v12 + 1);
        qword_101B13178 = (uint64_t)&v11[v10];
        do
        {
          uint64_t v18 = *(const void **)(v14 - 8);
          v14 -= 8;
          sub_1010F784C(v18);
        }
        while ((void *)v14 != v13);
        if (v13) {
          goto LABEL_28;
        }
      }
LABEL_29:
      qword_101B13170 = (uint64_t)v5;
      if (!*(void *)(v2 + 624))
      {
        uint64_t v19 = *(void *)(v2 + 88);
        unint64_t v20 = *(NSObject **)(v2 + 24);
        dispatch_object_t object = v20;
        if (v20) {
          dispatch_retain(v20);
        }
        (*(void (**)(uint8_t *__return_ptr, uint64_t, dispatch_object_t *, void))(*(void *)v19 + 664))(buf, v19, &object, *(unsigned __int8 *)(v2 + 648));
        long long v21 = *(_OWORD *)buf;
        memset(buf, 0, sizeof(buf));
        unint64_t v22 = *(std::__shared_weak_count **)(v2 + 632);
        *(_OWORD *)(v2 + 624) = v21;
        if (v22)
        {
          sub_10004D2C8(v22);
          if (*(void *)&buf[8]) {
            sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
          }
        }
        if (object) {
          dispatch_release(object);
        }
        sub_100058DB0(buf, "/cc/assertions/baseband_online");
        ctu::rest::AssertionHandle::create();
        if (v32 < 0) {
          operator delete(*(void **)buf);
        }
        long long v23 = v29;
        long long v29 = 0uLL;
        uint64_t v24 = *(std::__shared_weak_count **)(v2 + 616);
        *(_OWORD *)(v2 + 608) = v23;
        if (v24)
        {
          sub_10004D2C8(v24);
          if (*((void *)&v29 + 1)) {
            sub_10004D2C8(*((std::__shared_weak_count **)&v29 + 1));
          }
        }
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 0x40000000;
        aBlock[2] = sub_1010F1DC0;
        aBlock[3] = &unk_101A8D2F8;
        aBlock[4] = v2;
        unint64_t v25 = _Block_copy(aBlock);
        uint64_t v26 = v25;
        if (v25) {
          CFStringRef v27 = _Block_copy(v25);
        }
        else {
          CFStringRef v27 = 0;
        }
        *(void *)std::string buf = off_101A8DB30;
        *(void *)&uint8_t buf[8] = v27;
        uint64_t v33 = buf;
        ctu::rest::AssertionHandle::setHandler_impl();
        sub_100060644(buf);
        if (v26) {
          _Block_release(v26);
        }
      }
      return;
    }
  }
  else if (v32)
  {
    goto LABEL_6;
  }
  uint64_t v7 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Subscription not active", buf, 2u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1010F1CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, dispatch_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1010F1D60(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (const void *)*((void *)v3 - 1);
        v3 -= 8;
        sub_1010F784C(v5);
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1010F1DC0(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I bb online granted: %d", buf, 8u);
  }
  if (a2) {
    (***(void (****)(void))(v3 + 624))();
  }
}

void sub_1010F1EF4(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109120;
    v12[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I sim connectivity probe finished : %d", (uint8_t *)v12, 8u);
  }
  uint64_t v5 = qword_101B13168;
  uint64_t v6 = qword_101B13170;
  if (qword_101B13168 != qword_101B13170)
  {
    do
    {
      (*(void (**)(void))(*(void *)v5 + 16))();
      v5 += 8;
    }
    while (v5 != v6);
    uint64_t v7 = qword_101B13168;
    uint64_t v5 = qword_101B13170;
    if (qword_101B13170 != qword_101B13168)
    {
      do
      {
        uint64_t v8 = *(const void **)(v5 - 8);
        v5 -= 8;
        sub_1010F784C(v8);
      }
      while (v5 != v7);
      uint64_t v5 = v7;
    }
  }
  qword_101B13170 = v5;
  unint64_t v9 = *(std::__shared_weak_count **)(v3 + 632);
  long long v10 = 0uLL;
  *(_OWORD *)(v3 + 624) = 0u;
  if (v9)
  {
    sub_10004D2C8(v9);
    long long v10 = 0uLL;
  }
  char v11 = *(std::__shared_weak_count **)(v3 + 616);
  *(_OWORD *)(v3 + 608) = v10;
  if (v11) {
    sub_10004D2C8(v11);
  }
}

void *sub_1010F2038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v6 = *(void *)(a1 + 168);
  if (aBlock) {
    uint64_t v7 = _Block_copy(aBlock);
  }
  else {
    uint64_t v7 = 0;
  }
  v9[0] = off_101A8DBA0;
  v9[1] = v7;
  v9[3] = v9;
  (*(void (**)(uint64_t, void *, uint64_t, void *))(*(void *)v6 + 72))(v6, v10, a4, v9);
  return sub_1000C752C(v9);
}

void sub_1010F210C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1010F2138(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void *sub_1010F216C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_1010F2038(a1 - 48, a2, a3, a4, a5);
}

void *sub_1010F2174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  uint64_t v6 = *(void *)(a1 + 168);
  v10[0] = a2;
  v10[1] = a3;
  char v11 = 1;
  if (aBlock) {
    uint64_t v7 = _Block_copy(aBlock);
  }
  else {
    uint64_t v7 = 0;
  }
  v9[0] = off_101A8DC20;
  v9[1] = v7;
  v9[3] = v9;
  (*(void (**)(uint64_t, void *, uint64_t, void *))(*(void *)v6 + 80))(v6, v10, a4, v9);
  return sub_1000C752C(v9);
}

void sub_1010F2250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1010F227C(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void *sub_1010F22B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return sub_1010F2174(a1 - 48, a2, a3, a4, a5);
}

void *sub_1010F22B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *aBlock)
{
  v14[0] = a2;
  v14[1] = a3;
  uint64_t v10 = *(void *)(a1 + 168);
  if (aBlock) {
    char v11 = _Block_copy(aBlock);
  }
  else {
    char v11 = 0;
  }
  v13[0] = off_101A8DCA0;
  v13[1] = v11;
  void v13[3] = v13;
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, void *))(*(void *)v10 + 88))(v10, v14, a4, a5, a6, v13);
  return sub_100060644(v13);
}

void sub_1010F23A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1010F23D0(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void *sub_1010F2404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return sub_1010F22B8(a1 - 48, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1010F240C()
{
  return 0;
}

uint64_t sub_1010F2414()
{
  return 0;
}

uint64_t sub_1010F241C()
{
  return 0;
}

uint64_t sub_1010F2424()
{
  return 0;
}

uint64_t sub_1010F2434()
{
  return 0;
}

uint64_t sub_1010F243C()
{
  return 0;
}

void sub_1010F2444(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v7 = a1[29];
  if (a1[30] == v7) {
    sub_10015B728();
  }
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v7 + 24);
  if (v25 == v10 && v26 == v9)
  {
    long long v21 = 0;
    unint64_t v22 = 0;
    uint64_t v13 = *a4;
    uint64_t v14 = (std::__shared_weak_count *)a4[1];
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)std::string buf = v13;
    unint64_t v20 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 0x40000000;
    aBlock[2] = sub_1010F2688;
    aBlock[3] = &unk_101A8D348;
    aBlock[4] = a5;
    char v15 = _Block_copy(aBlock);
    long long v21 = v15;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 0x40000000;
    void v17[2] = sub_1010F2698;
    void v17[3] = &unk_101A8D370;
    unint64_t v17[4] = a6;
    v17[5] = a1;
    uint64_t v16 = _Block_copy(v17);
    unint64_t v22 = v16;
    sub_1010F287C(a1 + 82, buf);
    sub_1010F2DC0((uint64_t)a1);
    if (v16) {
      _Block_release(v16);
    }
    if (v15) {
      _Block_release(v15);
    }
    if (v14) {
      sub_10004D2C8(v14);
    }
  }
  else
  {
    uint64_t v12 = a1[5];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CSN mismatched", buf, 2u);
    }
    __int16 v23 = 258;
    v24[0] = 0;
    (*(void (**)(uint64_t, __int16 *, unsigned char *))(a6 + 16))(a6, &v23, v24);
    sub_1000C60A0(v24);
  }
}

void sub_1010F2648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010F2688(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

unsigned char *sub_1010F2698(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (*a2 == 2 && a2[1] == 6)
  {
    *(_WORD *)(v6 + 256) = 257;
  }
  else if (*(unsigned char *)(v6 + 256))
  {
    *(unsigned char *)(v6 + 256) = 0;
  }
  if (*(unsigned char *)a3 && *(unsigned char *)(a3 + 88))
  {
    uint64_t v7 = *(void *)(a3 + 64);
    uint64_t v8 = *(void *)(a3 + 72);
    while (v7 != v8)
    {
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v6 + 168) + 64))(*(void *)(v6 + 168), v7 + 16))
      {
        if (!*(unsigned char *)a3) {
          __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
        }
        uint64_t v9 = *(void *)(a3 + 64);
        uint64_t v10 = *(void *)(a3 + 72);
        while (v9 != v10)
        {
          *(unsigned char *)(v9 + 89) = (*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 168) + 64))(*(void *)(v6 + 168), v9 + 16);
          v9 += 216;
        }
        break;
      }
      v7 += 216;
    }
  }
  uint64_t v11 = *(void *)(a1 + 32);
  __int16 v13 = 0;
  if (*a2 - 1 <= 1) {
    __int16 v13 = *(_WORD *)a2;
  }
  v14[0] = 0;
  if (*(unsigned char *)a3)
  {
    sub_1000C5DA8((uint64_t)&v15, a3 + 8);
    v14[0] = 1;
  }
  (*(void (**)(uint64_t, __int16 *, char *))(v11 + 16))(v11, &v13, v14);
  return sub_1000C60A0(v14);
}

void sub_1010F2860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void *sub_1010F287C(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 16 * (v5 - v4) - 1;
  }
  unint64_t v8 = a1[4];
  if (v7 != a1[5] + v8) {
    goto LABEL_38;
  }
  BOOL v9 = v8 >= 0x80;
  unint64_t v10 = v8 - 128;
  if (v9)
  {
    a1[4] = v10;
    uint64_t v13 = *(void *)v4;
    uint64_t v11 = v4 + 8;
    uint64_t v12 = v13;
    a1[1] = v11;
    if (v5 == (char *)a1[3])
    {
      uint64_t v14 = (uint64_t)&v11[-*a1];
      if ((unint64_t)v11 <= *a1)
      {
        if (v5 == (char *)*a1) {
          unint64_t v41 = 1;
        }
        else {
          unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
        }
        uint64_t v42 = (char *)sub_100048350(v41);
        uint64_t v44 = &v42[8 * (v41 >> 2)];
        uint64_t v45 = (uint64_t *)a1[1];
        uint64_t v5 = v44;
        uint64_t v46 = a1[2] - (void)v45;
        if (v46)
        {
          uint64_t v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v47 = 8 * (v46 >> 3);
          std::string::size_type v48 = &v42[8 * (v41 >> 2)];
          do
          {
            uint64_t v49 = *v45++;
            *(void *)std::string::size_type v48 = v49;
            v48 += 8;
            v47 -= 8;
          }
          while (v47);
        }
        size_t v50 = (char *)*a1;
        *a1 = v42;
        a1[1] = v44;
        a1[2] = v5;
        a1[3] = &v42[8 * v43];
        if (v50)
        {
          operator delete(v50);
          uint64_t v5 = (char *)a1[2];
        }
      }
      else
      {
        uint64_t v15 = v14 >> 3;
        BOOL v16 = v14 >> 3 < -1;
        uint64_t v17 = (v14 >> 3) + 2;
        if (v16) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = v15 + 1;
        }
        uint64_t v19 = -(v18 >> 1);
        uint64_t v20 = v18 >> 1;
        long long v21 = &v11[-8 * v20];
        int64_t v22 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v20], v11, v5 - v11);
          uint64_t v5 = (char *)a1[1];
        }
        __int16 v23 = &v5[8 * v19];
        uint64_t v5 = &v21[v22];
        a1[1] = v23;
        a1[2] = &v21[v22];
      }
    }
    *(void *)uint64_t v5 = v12;
  }
  else
  {
    uint64_t v24 = v6 >> 3;
    uint64_t v25 = (char *)a1[3];
    uint64_t v26 = (char *)*a1;
    uint64_t v27 = (uint64_t)&v25[-*a1];
    if (v6 >> 3 >= (unint64_t)(v27 >> 3))
    {
      uint64_t v30 = v27 >> 2;
      if (v25 == v26) {
        unint64_t v31 = 1;
      }
      else {
        unint64_t v31 = v30;
      }
      char v32 = (char *)sub_100048350(v31);
      uint64_t v34 = v33;
      uint64_t v35 = operator new(0x1000uLL);
      char v36 = &v32[8 * v24];
      dispatch_object_t v37 = &v32[8 * v34];
      if (v24 == v34)
      {
        uint64_t v38 = 8 * v24;
        if (v6 < 1)
        {
          BOOL v78 = v35;
          uint64_t v79 = v38 >> 2;
          if (v5 == v4) {
            unint64_t v80 = 1;
          }
          else {
            unint64_t v80 = v79;
          }
          xpc_object_t v81 = (char *)sub_100048350(v80);
          char v36 = &v81[8 * (v80 >> 2)];
          dispatch_object_t v37 = &v81[8 * v82];
          if (v32) {
            operator delete(v32);
          }
          char v32 = v81;
          uint64_t v35 = v78;
        }
        else
        {
          uint64_t v39 = v38 >> 3;
          if (v39 >= -1) {
            unint64_t v40 = v39 + 1;
          }
          else {
            unint64_t v40 = v39 + 2;
          }
          v36 -= 8 * (v40 >> 1);
        }
      }
      *(void *)char v36 = v35;
      uint64_t v5 = v36 + 8;
      for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
      {
        if (v36 == v32)
        {
          if (v5 >= v37)
          {
            if (v37 == v32) {
              unint64_t v88 = 1;
            }
            else {
              unint64_t v88 = (v37 - v32) >> 2;
            }
            uint64_t v89 = (char *)sub_100048350(v88);
            int v91 = v89;
            char v36 = &v89[(2 * v88 + 6) & 0xFFFFFFFFFFFFFFF8];
            uint64_t v93 = v5 - v32;
            BOOL v92 = v5 == v32;
            uint64_t v5 = v36;
            if (!v92)
            {
              uint64_t v5 = &v36[v93 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v94 = 8 * (v93 >> 3);
              unsigned int v95 = v36;
              size_t v96 = v32;
              do
              {
                uint64_t v97 = *(void *)v96;
                v96 += 8;
                *(void *)unsigned int v95 = v97;
                v95 += 8;
                v94 -= 8;
              }
              while (v94);
            }
            dispatch_object_t v37 = &v89[8 * v90];
            if (v32) {
              operator delete(v32);
            }
            char v32 = v91;
          }
          else
          {
            uint64_t v84 = (v37 - v5) >> 3;
            if (v84 >= -1) {
              uint64_t v85 = v84 + 1;
            }
            else {
              uint64_t v85 = v84 + 2;
            }
            uint64_t v86 = v85 >> 1;
            char v36 = &v32[8 * (v85 >> 1)];
            int v87 = v32;
            if (v5 != v32)
            {
              memmove(v36, v32, v5 - v32);
              int v87 = v5;
            }
            uint64_t v5 = &v87[8 * v86];
          }
        }
        uint64_t v98 = *(void *)(i - 8);
        *((void *)v36 - 1) = v98;
        v36 -= 8;
      }
      int v99 = (char *)*a1;
      *a1 = v32;
      a1[1] = v36;
      a1[2] = v5;
      a1[3] = v37;
      if (v99)
      {
        operator delete(v99);
        uint64_t v5 = (char *)a1[2];
      }
      goto LABEL_37;
    }
    CFStringRef v28 = operator new(0x1000uLL);
    long long v29 = v28;
    if (v25 == v5)
    {
      if (v4 == v26)
      {
        if (v5 == v4) {
          unint64_t v56 = 1;
        }
        else {
          unint64_t v56 = (v25 - v4) >> 2;
        }
        uint64_t v57 = 2 * v56;
        uint64_t v58 = (char *)sub_100048350(v56);
        uint64_t v4 = &v58[(v57 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v60 = (uint64_t *)a1[1];
        std::string::size_type v61 = v4;
        uint64_t v62 = a1[2] - (void)v60;
        if (v62)
        {
          std::string::size_type v61 = &v4[v62 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v63 = 8 * (v62 >> 3);
          int v64 = &v58[(v57 + 6) & 0xFFFFFFFFFFFFFFF8];
          do
          {
            uint64_t v65 = *v60++;
            *(void *)int v64 = v65;
            v64 += 8;
            v63 -= 8;
          }
          while (v63);
        }
        int64_t v66 = (char *)*a1;
        *a1 = v58;
        a1[1] = v4;
        a1[2] = v61;
        a1[3] = &v58[8 * v59];
        if (v66)
        {
          operator delete(v66);
          uint64_t v4 = (char *)a1[1];
        }
      }
      *((void *)v4 - 1) = v29;
      char v67 = (char *)a1[1];
      int v68 = (char *)a1[2];
      a1[1] = v67 - 8;
      uint64_t v69 = *((void *)v67 - 1);
      a1[1] = v67;
      if (v68 == (char *)a1[3])
      {
        uint64_t v70 = (uint64_t)&v67[-*a1];
        if ((unint64_t)v67 <= *a1)
        {
          if (v68 == (char *)*a1) {
            unint64_t v100 = 1;
          }
          else {
            unint64_t v100 = (uint64_t)&v68[-*a1] >> 2;
          }
          uint64_t v101 = (char *)sub_100048350(v100);
          uint64_t v103 = &v101[8 * (v100 >> 2)];
          uint64_t v104 = (uint64_t *)a1[1];
          int v68 = v103;
          uint64_t v105 = a1[2] - (void)v104;
          if (v105)
          {
            int v68 = &v103[v105 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v106 = 8 * (v105 >> 3);
            uint64_t v107 = &v101[8 * (v100 >> 2)];
            do
            {
              uint64_t v108 = *v104++;
              *(void *)uint64_t v107 = v108;
              v107 += 8;
              v106 -= 8;
            }
            while (v106);
          }
          size_t v109 = (char *)*a1;
          *a1 = v101;
          a1[1] = v103;
          a1[2] = v68;
          a1[3] = &v101[8 * v102];
          if (v109)
          {
            operator delete(v109);
            int v68 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v71 = v70 >> 3;
          BOOL v16 = v70 >> 3 < -1;
          uint64_t v72 = (v70 >> 3) + 2;
          if (v16) {
            uint64_t v73 = v72;
          }
          else {
            uint64_t v73 = v71 + 1;
          }
          uint64_t v74 = -(v73 >> 1);
          uint64_t v75 = v73 >> 1;
          long long v76 = &v67[-8 * v75];
          int64_t v77 = v68 - v67;
          if (v68 != v67)
          {
            memmove(&v67[-8 * v75], v67, v68 - v67);
            char v67 = (char *)a1[1];
          }
          int v68 = &v76[v77];
          a1[1] = &v67[8 * v74];
          a1[2] = &v76[v77];
        }
      }
      *(void *)int v68 = v69;
    }
    else
    {
      *(void *)uint64_t v5 = v28;
    }
  }
  uint64_t v5 = (char *)(a1[2] + 8);
  a1[2] = v5;
LABEL_37:
  uint64_t v4 = (char *)a1[1];
LABEL_38:
  if (v5 == v4)
  {
    CFStringRef v52 = 0;
  }
  else
  {
    unint64_t v51 = a1[5] + a1[4];
    CFStringRef v52 = (void *)(*(void *)&v4[(v51 >> 4) & 0xFFFFFFFFFFFFFF8] + 32 * (v51 & 0x7F));
  }
  uint64_t v53 = a2[1];
  void *v52 = *a2;
  v52[1] = v53;
  if (v53) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v54 = (void *)a2[2];
  if (v54) {
    std::string v54 = _Block_copy(v54);
  }
  v52[2] = v54;
  float result = (void *)a2[3];
  if (result) {
    float result = _Block_copy(result);
  }
  v52[3] = result;
  ++a1[5];
  return result;
}

void sub_1010F2D8C(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1010F2DC0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 704))
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Profile install already in progress", buf, 2u);
    }
    return;
  }
  long long v43 = 0u;
  *(_OWORD *)aBlock = 0u;
  if (!*(void *)(a1 + 696))
  {
    uint64_t v13 = 0;
    goto LABEL_37;
  }
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 664) + ((*(void *)(a1 + 688) >> 4) & 0xFFFFFFFFFFFFFF8));
    uint64_t v6 = *(void *)(a1 + 688) & 0x7FLL;
    uint64_t v7 = (uint64_t *)(v5 + 32 * v6);
    uint64_t v8 = *v7;
    BOOL v9 = (std::__shared_weak_count *)v7[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v43 = v8;
    *((void *)&v43 + 1) = v9;
    if (v4) {
      sub_10004D2C8(v4);
    }
    unint64_t v10 = *(const void **)(v5 + 32 * v6 + 16);
    if (v10) {
      uint64_t v11 = _Block_copy(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    aBlock[0] = v11;
    if (v3) {
      _Block_release(v3);
    }
    uint64_t v12 = *(const void **)(v5 + 32 * v6 + 24);
    if (v12) {
      uint64_t v13 = _Block_copy(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = aBlock[1];
    aBlock[1] = v13;
    if (v14) {
      _Block_release(v14);
    }
    uint64_t v15 = v43;
    if (*(void *)(v43 + 104) - *(void *)(v43 + 96) != 24) {
      break;
    }
    VinylInfo::findProfile();
    if (!v47[208]) {
      break;
    }
    sub_1000C584C((uint64_t)buf);
    if (v13)
    {
      uint64_t v16 = *(void *)(a1 + 232);
      __int16 v45 = 257;
      buf[0] = 0;
      sub_1000C5DA8((uint64_t)v47, v16);
      buf[0] = 1;
      (*((void (**)(void *, __int16 *, uint8_t *))v13 + 2))(v13, &v45, buf);
      sub_1000C60A0(buf);
    }
    sub_1010F6BB8(a1 + 656);
    uint64_t v3 = v11;
    uint64_t v4 = v9;
    if (!*(void *)(a1 + 696)) {
      goto LABEL_37;
    }
  }
  if (!*(void *)(a1 + 696))
  {
LABEL_37:
    *(unsigned char *)(a1 + 704) = 0;
    if (!v13) {
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  *(unsigned char *)(a1 + 704) = 1;
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v17 || (uint64_t v18 = *(void *)(a1 + 8), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v20 = v19;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v19);
  uint64_t v21 = *(void *)(a1 + 232);
  if (*(void *)(a1 + 240) == v21) {
    sub_10015B728();
  }
  uint64_t v22 = *(void *)(a1 + 72);
  uint64_t v24 = *(void *)(v21 + 16);
  uint64_t v23 = *(void *)(v21 + 24);
  uint64_t v41 = v15;
  uint64_t v42 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 1174405120;
  v35[2] = sub_1010F6C3C;
  void v35[3] = &unk_101A8D5C0;
  v35[4] = a1;
  void v35[5] = v18;
  char v36 = v20;
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v37 = v15;
  uint64_t v38 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (aBlock[0]) {
    uint64_t v25 = _Block_copy(aBlock[0]);
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v39 = v25;
  if (v13) {
    uint64_t v26 = _Block_copy(v13);
  }
  else {
    uint64_t v26 = 0;
  }
  unint64_t v40 = v26;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 1174405120;
  v29[2] = sub_1010F6FC0;
  xpc_object_t v29[3] = &unk_101A8D5F0;
  uint64_t v29[4] = a1;
  v29[5] = v18;
  uint64_t v30 = v20;
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v31 = v15;
  char v32 = (std::__shared_weak_count *)*((void *)&v43 + 1);
  if (*((void *)&v43 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v43 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (aBlock[0]) {
    uint64_t v27 = _Block_copy(aBlock[0]);
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v33 = v27;
  if (v13) {
    CFStringRef v28 = _Block_copy(v13);
  }
  else {
    CFStringRef v28 = 0;
  }
  uint64_t v34 = v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void *, void *))(*(void *)v22 + 40))(v22, v24, v23, &v41, v35, v29);
  if (v42) {
    sub_10004D2C8(v42);
  }
  if (v34) {
    _Block_release(v34);
  }
  if (v33) {
    _Block_release(v33);
  }
  if (v32) {
    sub_10004D2C8(v32);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  if (v40) {
    _Block_release(v40);
  }
  if (v39) {
    _Block_release(v39);
  }
  if (v38) {
    sub_10004D2C8(v38);
  }
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  std::__shared_weak_count::__release_weak(v20);
  if (!v13) {
    goto LABEL_71;
  }
LABEL_70:
  _Block_release(v13);
LABEL_71:
  if (aBlock[0]) {
    _Block_release(aBlock[0]);
  }
  if (*((void *)&v43 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v43 + 1));
  }
}

void sub_1010F326C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1010F3328(void *a1)
{
  uint64_t v2 = (const void *)a1[3];
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    sub_10004D2C8(v4);
  }
  return a1;
}

void sub_1010F3378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
}

uint64_t sub_1010F3380(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 1)
  {
    if (*(unsigned char *)(a1 + 704))
    {
      uint64_t v5 = *(void *)(a1 + 184);
      if (v5)
      {
        uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 664) + ((*(void *)(a1 + 688) >> 4) & 0xFFFFFFFFFFFFFF8))
                       + 32 * (*(void *)(a1 + 688) & 0x7FLL));
        if (*(void *)(v6 + 104) - *(void *)(v6 + 96) == 24) {
          (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
        }
      }
    }
  }
  uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 48);

  return v7();
}

uint64_t sub_1010F3470(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_1010F3380(a1 - 48, a2, a3, a4);
}

uint64_t sub_1010F3478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 72);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1010F3508;
  void v7[3] = &unk_101A8D398;
  void v7[4] = a5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v5 + 136))(v5, a2, a3, a4, v7);
}

uint64_t sub_1010F3508(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *a2 == 1 && a2[1] != 0;
  return (*(uint64_t (**)(uint64_t, BOOL))(v2 + 16))(v2, v3);
}

uint64_t sub_1010F3538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1010F3508;
  void v7[3] = &unk_101A8D398;
  void v7[4] = a5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v5 + 136))(v5, a2, a3, a4, v7);
}

uint64_t sub_1010F35C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 72);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1010F3658;
  void v7[3] = &unk_101A8D3C0;
  void v7[4] = a5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v5 + 144))(v5, a2, a3, a4, v7);
}

uint64_t sub_1010F3658(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *a2 == 1 && a2[1] != 0;
  return (*(uint64_t (**)(uint64_t, BOOL))(v2 + 16))(v2, v3);
}

uint64_t sub_1010F3688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 24);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1010F3658;
  void v7[3] = &unk_101A8D3C0;
  void v7[4] = a5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v5 + 144))(v5, a2, a3, a4, v7);
}

void sub_1010F3718(uint64_t a1, uint64_t a2, uint64_t *a3, _WORD *a4)
{
  if (*(unsigned char *)a2)
  {
    uint64_t v6 = *(void *)(a1 + 232);
    for (uint64_t i = *(void *)(a1 + 240); v6 != i; v6 += 88)
    {
      if (!*(unsigned char *)a2) {
        __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
      }
      if (*(void *)(v6 + 16) == *(void *)(a2 + 1) && *(void *)(v6 + 24) == *(void *)(a2 + 9))
      {
        unint64_t v11 = a3[1];
        unint64_t v10 = a3[2];
        if (v11 >= v10)
        {
          uint64_t v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v11 - *a3) >> 3);
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) > 0x2E8BA2E8BA2E8BALL) {
            sub_10006A748();
          }
          unint64_t v15 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - *a3) >> 3);
          if (2 * v15 > v14) {
            unint64_t v14 = 2 * v15;
          }
          if (v15 >= 0x1745D1745D1745DLL) {
            unint64_t v16 = 0x2E8BA2E8BA2E8BALL;
          }
          else {
            unint64_t v16 = v14;
          }
          uint64_t v23 = a3 + 2;
          if (v16) {
            uint64_t v17 = (char *)sub_10010C8A4((uint64_t)(a3 + 2), v16);
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v19 = v17;
          uint64_t v20 = &v17[88 * v13];
          uint64_t v21 = (uint64_t)v20;
          uint64_t v22 = &v17[88 * v16];
          sub_1000C5DA8((uint64_t)v20, v6);
          v21 += 88;
          sub_10010C82C(a3, &v19);
          uint64_t v12 = a3[1];
          sub_10010C988((uint64_t)&v19);
        }
        else
        {
          sub_1000C5DA8(a3[1], v6);
          uint64_t v12 = v11 + 88;
          a3[1] = v12;
        }
        a3[1] = v12;
      }
    }
  }
  else if ((uint64_t *)(a1 + 232) != a3)
  {
    sub_1003DB294((uint64_t)a3, *(void *)(a1 + 232), *(void *)(a1 + 240), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3));
  }
  *a4 = *(_WORD *)(a1 + 256);
}

void sub_1010F390C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_1010F392C(uint64_t a1, uint64_t a2, uint64_t *a3, _WORD *a4)
{
}

uint64_t sub_1010F3934(capabilities::ct *a1)
{
  uint64_t v2 = (capabilities::ct *)capabilities::ct::allowChinaWSKUWatchesToProvisionROWPlans(a1);
  if (!v2) {
    return 3;
  }
  int v3 = capabilities::ct::basebandGlobalSKU(v2);
  uint64_t v4 = *((void *)a1 + 5);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I China sku allowed to support Global (All) carriers", buf, 2u);
    }
    return 8;
  }
  else
  {
    if (v5)
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I China sku allowed to support RoW carriers", v7, 2u);
    }
    return 5;
  }
}

uint64_t sub_1010F39EC(capabilities::ct *a1)
{
  uint64_t v2 = (capabilities::ct *)capabilities::ct::disallowROWWSKUWatchesToProvisionChinaPlans(a1);
  if (!v2) {
    return 5;
  }
  int v3 = capabilities::ct::basebandGlobalSKU(v2);
  uint64_t v4 = *((void *)a1 + 5);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Global sku not allowed to provision China carriers", buf, 2u);
    }
    return 9;
  }
  else
  {
    if (v5)
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I ROW sku not allowed to provision China carriers", v7, 2u);
    }
    return 6;
  }
}

void sub_1010F3AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = 0;
  *(_OWORD *)uint64_t v55 = 0u;
  long long v56 = 0u;
  *(_OWORD *)uint64_t v53 = 0u;
  long long v54 = 0u;
  *(_OWORD *)unint64_t v51 = 0u;
  long long v52 = 0u;
  *(_OWORD *)uint64_t v49 = 0u;
  long long v50 = 0u;
  (***(void (****)(long long *__return_ptr))(a1 + 88))(&buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v4, (Registry *)buf);
  uint64_t v6 = ServiceMap;
  if (v7 < 0)
  {
    uint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  CFDataRef theData = (CFDataRef)v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)&theData);
  if (v11)
  {
    uint64_t v13 = v11[3];
    uint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  uint64_t v12 = 0;
  char v14 = 1;
LABEL_9:
  if (*((void *)&buf + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v13)
  {
    CFDataRef theData = 0;
    (*(void (**)(CFDataRef *__return_ptr, uint64_t))(*(void *)v13 + 168))(&theData, v13);
    if (theData) {
      unint64_t v15 = sub_10008324C;
    }
    else {
      unint64_t v15 = 0;
    }
    if (v15)
    {
      if (CFDataGetLength(theData) == 16)
      {
        BytePtr = CFDataGetBytePtr(theData);
        uint64_t v17 = (unsigned __int8 *)BytePtr;
        unsigned int v18 = BytePtr[8];
        if (v18 > 0x4D)
        {
          if (v18 != 82)
          {
            if (v18 == 78 && BytePtr[9] == 65 && !BytePtr[10] && !BytePtr[11])
            {
              char v19 = 1;
              goto LABEL_49;
            }
            goto LABEL_50;
          }
          if (!BytePtr[9] && !BytePtr[10] && !BytePtr[11])
          {
            char v28 = sub_1010F39EC((capabilities::ct *)a1);
            goto LABEL_45;
          }
        }
        else
        {
          if (v18 != 67)
          {
            if (v18 == 69 && BytePtr[9] == 85 && !BytePtr[10] && !BytePtr[11])
            {
              char v19 = 2;
LABEL_49:
              BYTE8(v54) = v19;
              goto LABEL_53;
            }
            goto LABEL_50;
          }
          int v27 = BytePtr[9];
          if (v27 == 77)
          {
            if (BytePtr[10] == 67 && BytePtr[11] == 67)
            {
              char v19 = 4;
              goto LABEL_49;
            }
          }
          else if (v27 == 85 && !BytePtr[10] && !BytePtr[11])
          {
            char v28 = sub_1010F3934((capabilities::ct *)a1);
LABEL_45:
            BYTE8(v54) = v28;
            goto LABEL_53;
          }
        }
LABEL_50:
        long long v29 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_53;
        }
        int v30 = v17[9];
        int v31 = v17[10];
        int v32 = v17[11];
        *(void *)&long long buf = __PAIR64__(v18, 67109888);
        WORD4(buf) = 1024;
        *(_DWORD *)((char *)&buf + 10) = v30;
        HIWORD(buf) = 1024;
        int v45 = v31;
        __int16 v46 = 1024;
        int v47 = v32;
        uint64_t v22 = "#I Invalid sku data [0x%x][0x%x][0x%x][0x%x]";
        uint64_t v23 = v29;
        uint32_t v24 = 26;
LABEL_52:
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v22, (uint8_t *)&buf, v24);
        goto LABEL_53;
      }
      uint64_t v25 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex Length = CFDataGetLength(theData);
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = Length;
        uint64_t v22 = "#I Invalid sku data length: %lu";
        uint64_t v23 = v25;
        uint32_t v24 = 12;
        goto LABEL_52;
      }
    }
    else
    {
      uint64_t v21 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        uint64_t v22 = "#E no sku data";
        uint64_t v23 = v21;
        uint32_t v24 = 2;
        goto LABEL_52;
      }
    }
LABEL_53:
    sub_100030068((const void **)&theData);
    goto LABEL_54;
  }
  uint64_t v20 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#E no gestaltutility", (uint8_t *)&buf, 2u);
  }
LABEL_54:
  if ((*(char *)(a1 + 391) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 391)) {
      goto LABEL_59;
    }
    goto LABEL_58;
  }
  if (*(void *)(a1 + 376)) {
LABEL_58:
  }
    sub_10032AFC0((unsigned char *)&v50 + 8, (const std::string *)(a1 + 368));
LABEL_59:
  sub_100D09934((char *)(a1 + 392), (uint64_t)&buf);
  sub_1003464A0((uint64_t)&v52 + 8, (uint64_t)&buf);
  if ((_BYTE)buf && v48 < 0) {
    operator delete(*((void **)&buf + 1));
  }
  HIDWORD(v56) = (*(uint64_t (**)(void))(**(void **)(a1 + 88) + 8))(*(void *)(a1 + 88));
  BYTE8(v56) = 1;
  HIDWORD(v57) = (*(uint64_t (**)(void))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88));
  LOBYTE(v57) = 1;
  sub_100313228((char *)__dst, (long long *)v49);
  (*(void (**)(uint64_t, void **))(a2 + 16))(a2, __dst);
  if (v43 < 0) {
    operator delete(v42);
  }
  if (v39)
  {
    if (v41 < 0) {
      operator delete(v40);
    }
    char v39 = 0;
  }
  if (v36)
  {
    if (v38 < 0) {
      operator delete(v37);
    }
    char v36 = 0;
  }
  if ((v35 & 0x80000000) == 0)
  {
    if (v14) {
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  operator delete(__dst[0]);
  if ((v14 & 1) == 0) {
LABEL_74:
  }
    sub_10004D2C8(v12);
LABEL_75:
  if (SBYTE7(v56) < 0) {
    operator delete(v55[0]);
  }
  if (BYTE8(v52))
  {
    if (SBYTE7(v54) < 0) {
      operator delete(v53[0]);
    }
    BYTE8(v52) = 0;
  }
  if (BYTE8(v50))
  {
    if (SBYTE7(v52) < 0) {
      operator delete(v51[0]);
    }
    BYTE8(v50) = 0;
  }
  if (SBYTE7(v50) < 0) {
    operator delete(v49[0]);
  }
}

void sub_1010F4060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_100030068(&a9);
  if ((v32 & 1) == 0) {
    sub_10004D2C8(v31);
  }
  sub_100309AC4((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_1010F40EC(uint64_t a1, uint64_t a2)
{
}

void sub_1010F40F4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  (*(void (**)(void))(**(void **)(a1 + 168) + 104))(*(void *)(a1 + 168));
  if (a3)
  {
    memset(v10, 0, sizeof(v10));
    uint64_t v7 = a4[3];
    if (!v7) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 48))(v7, v10);
    uint64_t v11 = (void **)v10;
    sub_10023FDC8(&v11);
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 168);
    uint64_t v9 = (void *)a4[3];
    if (v9)
    {
      if (v9 == a4)
      {
        uint64_t v13 = v12;
        (*(void (**)(void *, void *))(*a4 + 24))(a4, v12);
      }
      else
      {
        uint64_t v13 = (void *)(*(uint64_t (**)(void *))(*v9 + 16))(v9);
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    (*(void (**)(uint64_t, void *))(*(void *)v8 + 120))(v8, v12);
    sub_1005E6B5C(v12);
  }
}

void sub_1010F4288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_1010F42BC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
}

void sub_1010F42C4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 24);
  if (v4)
  {
    uint64_t v6 = a1[29];
    if (v6 == a1[30])
    {
      uint64_t v12 = a1[5];
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "No vinyl info available", buf, 2u);
        uint64_t v4 = *(void *)(a4 + 24);
        v32[0] = 2;
        char v33 = 0;
        if (!v4) {
          sub_10007B600();
        }
      }
      else
      {
        v32[0] = 2;
        char v33 = 0;
      }
      (*(void (**)(uint64_t, char *))(*(void *)v4 + 48))(v4, v32);
      if (v32[0] == 1)
      {
        if (v47 < 0) {
          operator delete(v46);
        }
        if (v45 < 0) {
          operator delete(v44);
        }
        if (v43 < 0) {
          operator delete(v42);
        }
        if (v41 < 0) {
          operator delete(v40);
        }
        if (v39 < 0) {
          operator delete(v38);
        }
        if (v37 < 0) {
          operator delete(v36);
        }
        if (v35 < 0)
        {
          uint64_t v11 = v34;
          goto LABEL_41;
        }
      }
    }
    else
    {
      uint64_t v8 = *(void *)(v6 + 16);
      uint64_t v7 = *(void *)(v6 + 24);
      if (*a2 == v8 && a2[1] == v7)
      {
        uint64_t v14 = a1[21];
        sub_10037DC40((uint64_t)v49, a4);
        unint64_t v51 = 0;
        unint64_t v15 = operator new(0x28uLL);
        *unint64_t v15 = off_101A8DD20;
        sub_10037E368((uint64_t)(v15 + 1), (uint64_t)v49);
        unint64_t v51 = v15;
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v14 + 96))(v14, a3, v50);
        sub_100F18AC4(v50);
        sub_10037DCD8(v49);
      }
      else
      {
        unsigned int v10 = a1[5];
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CSN mismatched", buf, 2u);
          uint64_t v4 = *(void *)(a4 + 24);
          v16[0] = 2;
          char v17 = 12;
          if (!v4) {
            sub_10007B600();
          }
        }
        else
        {
          v16[0] = 2;
          char v17 = 12;
        }
        (*(void (**)(uint64_t, char *))(*(void *)v4 + 48))(v4, v16);
        if (v16[0] == 1)
        {
          if (v31 < 0) {
            operator delete(__p);
          }
          if (v29 < 0) {
            operator delete(v28);
          }
          if (v27 < 0) {
            operator delete(v26);
          }
          if (v25 < 0) {
            operator delete(v24);
          }
          if (v23 < 0) {
            operator delete(v22);
          }
          if (v21 < 0) {
            operator delete(v20);
          }
          if (v19 < 0)
          {
            uint64_t v11 = v18;
LABEL_41:
            operator delete(v11);
          }
        }
      }
    }
  }
}

void sub_1010F4620(_Unwind_Exception *a1)
{
  sub_100F18AC4((void *)(v1 - 88));
  sub_10037DCD8((void *)(v1 - 120));
  _Unwind_Resume(a1);
}

void sub_1010F4674(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1010F467C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 184);
  if (v3)
  {
    sub_1010F9980((uint64_t)v11, a2);
    uint64_t v14 = 0;
    uint64_t v4 = operator new(0x28uLL);
    BOOL v5 = v4;
    void *v4 = off_101A8DDA0;
    if (v12)
    {
      if (v12 == v11)
      {
        void v4[4] = v4 + 1;
        (*(void (**)(void *))(v11[0] + 24))(v11);
        goto LABEL_12;
      }
      uint64_t v6 = &v12;
      void v4[4] = v12;
    }
    else
    {
      uint64_t v6 = v4 + 4;
    }
    void *v6 = 0;
LABEL_12:
    uint64_t v14 = v5;
    (*(void (**)(uint64_t, uint64_t, void, void *))(*(void *)v3 + 72))(v3, 1, 0, v13);
    sub_10032493C(v13);
    sub_1005E862C(v11);
    return;
  }
  uint64_t v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v9[0]) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "No subscription controller", (uint8_t *)v9, 2u);
  }
  memset(v9, 0, 24);
  uint64_t v8 = *(void *)(a2 + 24);
  if (!v8) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v8 + 48))(v8, v9);
  unsigned int v10 = (void **)v9;
  sub_1000C63B8(&v10);
}

void sub_1010F484C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010F48A0(uint64_t a1, uint64_t a2)
{
}

void sub_1010F48A8(void *a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1010F49C0;
  void v7[3] = &unk_101A8D3E0;
  void v7[4] = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (uint64_t v3 = a1[1], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    sub_100088B9C();
  }
  BOOL v5 = v4;
  uint64_t v6 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010F8AF4;
  block[3] = &unk_101A8DAF0;
  block[5] = v3;
  uint64_t v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v7;
  dispatch_async(v6, block);
  if (v9) {
    sub_10004D2C8(v9);
  }
  sub_10004D2C8(v5);
}

uint64_t sub_1010F49C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 200) + 64))();
}

uint64_t sub_1010F49EC(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 648) = a2;
  uint64_t result = *(void *)(a1 + 624);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

void sub_1010F4A20(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_1010F9C34;
  void v5[3] = &unk_101A8DE10;
  v5[4] = a1 + 8;
  v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    a2[12] = 0u;
    a2[13] = 0u;
    a2[10] = 0u;
    a2[11] = 0u;
    a2[8] = 0u;
    a2[9] = 0u;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1010F9C98;
    unsigned int v10 = &unk_101A8DE50;
    uint64_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    a2[12] = 0u;
    a2[13] = 0u;
    a2[10] = 0u;
    a2[11] = 0u;
    a2[8] = 0u;
    a2[9] = 0u;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_1010F9C44;
    unsigned int v10 = &unk_101A8DE30;
    uint64_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_sync(v2, &block);
  }
}

void sub_1010F4B74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_100337CDC((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010F4CAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

std::string *sub_1010F4CC4(std::string *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 232);
  uint64_t v4 = *(void *)(a2 + 240);
  *(_OWORD *)&result[8].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&result[8].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&result[6].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&result[7].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&result[5].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&result[6].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&result[4].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&result[4].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&result[2].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&result[3].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&result[1].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&result[2].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&result->__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&result->__r_.__value_.__r.__words[2] = 0u;
  if (v4 != v3)
  {
    uint64_t v6 = result;
    LODWORD(result->__r_.__value_.__l.__data_) = *(_DWORD *)(v3 + 4);
    ctu::hex((uint64_t *)&v9, (ctu *)(v3 + 16), (const void *)0x10, a3);
    p_std::string::size_type size = (void **)&v6[1].__r_.__value_.__l.__size_;
    if (v6[2].__r_.__value_.__s.__data_[7] < 0) {
      operator delete(*p_size);
    }
    *(_OWORD *)p_std::string::size_type size = v9;
    v6[2].__r_.__value_.__r.__words[0] = v10;
    uint64_t v8 = *(void *)(a2 + 232);
    if (*(void *)(a2 + 240) == v8) {
      sub_10015B728();
    }
    return std::string::operator=((std::string *)((char *)v6 + 128), (const std::string *)(v8 + 32));
  }
  return result;
}

void sub_1010F4D88(_Unwind_Exception *a1)
{
  sub_10030E938(v1);
  _Unwind_Resume(a1);
}

void sub_1010F4DA0(void *a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1010F4EB8;
  void v7[3] = &unk_101A8D400;
  void v7[4] = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (uint64_t v3 = a1[1], (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v5 = v4;
  uint64_t v6 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010F8AF4;
  block[3] = &unk_101A8DAF0;
  block[5] = v3;
  long long v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v7;
  dispatch_async(v6, block);
  if (v9) {
    sub_10004D2C8(v9);
  }
  sub_10004D2C8(v5);
}

uint64_t sub_1010F4EB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 200) + 72))();
}

void sub_1010F4EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = a1;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v11 = v7;
      uint64_t v12 = v8;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
      if (*(char *)(a2 + 23) < 0)
      {
        sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a2;
        xpc_object_t __p[2] = *(void **)(a2 + 16);
      }
      sub_1000DFC90((uint64_t)&v14, a3);
      long long v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        if (std::__shared_weak_count::lock(v9)) {
          operator new();
        }
      }
      sub_100088B9C();
    }
  }
  sub_100088B9C();
}

void sub_1010F50DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
  {
    char v21 = *(std::__shared_weak_count **)(v19 + 16);
    if (v21) {
      std::__shared_weak_count::__release_weak(v21);
    }
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010F513C(void *a1, uint64_t a2, uint64_t a3)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1174405120;
  void v11[2] = sub_1010F52A8;
  void v11[3] = &unk_101A8D428;
  void v11[5] = a1;
  char v12 = 0;
  if (*(unsigned char *)a2)
  {
    long long v13 = *(_OWORD *)(a2 + 1);
    char v12 = 1;
  }
  v11[4] = a3;
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (uint64_t v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v6;
  uint64_t v8 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010F8AF4;
  block[3] = &unk_101A8DAF0;
  block[5] = v5;
  uint64_t v10 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v11;
  dispatch_async(v8, block);
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_10004D2C8(v7);
}

void sub_1010F529C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1010F52A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  char v10 = 0;
  if (*(unsigned char *)(a1 + 48))
  {
    long long v11 = *(_OWORD *)(a1 + 49);
    char v10 = 1;
  }
  sub_1010F3718(v2, (uint64_t)&v10, &v6, &v5);
  uint64_t v3 = *(void *)(a1 + 32);
  memset(v4, 0, sizeof(v4));
  sub_100311ED8(v4, v6, v7, 0x2E8BA2E8BA2E8BA3 * ((v7 - v6) >> 3));
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  long long v9 = (void **)v4;
  sub_1000C56F4(&v9);
  long long v9 = (void **)&v6;
  sub_1000C56F4(&v9);
}

void sub_1010F539C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  sub_1000C56F4(&a16);
  _Unwind_Resume(a1);
}

__n128 sub_1010F53D0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    __n128 result = *(__n128 *)(a2 + 49);
    *(__n128 *)(a1 + 49) = result;
    *(unsigned char *)(a1 + 48) = 1;
  }
  return result;
}

uint64_t sub_1010F53F0(uint64_t result)
{
  if (*(unsigned char *)(result + 48)) {
    *(unsigned char *)(result + 48) = 0;
  }
  return result;
}

uint64_t sub_1010F5400(void *a1, _OWORD *a2, long long *a3, uint64_t a4)
{
  long long v21 = *a2;
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  sub_1003268E0((char *)v13, a3);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1174405120;
  void v17[2] = sub_1010F55EC;
  void v17[3] = &unk_101A8D540;
  v17[5] = a1;
  long long v20 = v21;
  sub_1003268E0(v18, v13);
  uint64_t v19 = a2;
  unint64_t v17[4] = a4;
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (!v7 || (v8 = a1[1], (long long v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    sub_100088B9C();
  }
  char v10 = v9;
  long long v11 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010F8AF4;
  block[3] = &unk_101A8DAF0;
  block[5] = v8;
  unint64_t v16 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v17;
  dispatch_async(v11, block);
  if (v16) {
    sub_10004D2C8(v16);
  }
  sub_10004D2C8(v10);
  sub_10030A89C((uint64_t)v18);
  return sub_10030A89C((uint64_t)v13);
}

void sub_1010F55BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1010F55EC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = v2[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I debug fetch profile - auto consent", buf, 2u);
  }
  uint64_t v4 = *(void *)(a1 + 320);
  uint64_t v5 = *(void *)(a1 + 328);
  uint64_t v6 = operator new(0x120uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = off_1019BB100;
  v10[0] = (uint64_t)sub_1003268E0((char *)v6 + 24, (long long *)(a1 + 48));
  v10[1] = (uint64_t)v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  void v9[2] = sub_1010F5780;
  v9[3] = &unk_101A8D4B8;
  uint64_t v7 = *(void *)(a1 + 312);
  void v9[4] = v2;
  void v9[5] = v7;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  void v8[2] = sub_1010F58DC;
  v8[3] = &unk_101A8D518;
  void v8[4] = *(void *)(a1 + 32);
  void v8[5] = v2;
  sub_1010F2444(v2, v4, v5, v10, (uint64_t)v9, (uint64_t)v8);
  sub_10004D2C8((std::__shared_weak_count *)v6);
}

void sub_1010F5758(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1010F5780(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  void v8[2] = sub_1010F58A0;
  v8[3] = &unk_101A8D498;
  void v8[4] = v2;
  void v8[5] = a2;
  void v8[6] = *(void *)(a1 + 40);
  uint64_t v3 = (std::__shared_weak_count *)v2[2];
  if (!v3 || (v4 = v2[1], (uint64_t v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  uint64_t v7 = v2[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010F8AF4;
  block[3] = &unk_101A8DAF0;
  block[5] = v4;
  char v10 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v8;
  dispatch_async(v7, block);
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_10004D2C8(v6);
}

uint64_t sub_1010F58A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v3 + 90) || *(unsigned char *)(v3 + 91)) {
    return sub_1010F3380(result, **(void **)(a1 + 48), *(void *)(*(void *)(a1 + 48) + 8), 1);
  }
  return result;
}

void sub_1010F58DC(uint64_t a1, unsigned __int8 *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1174405120;
  void v8[2] = sub_1010F5A14;
  v8[3] = &unk_101A8D4E0;
  uint64_t v2 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  __int16 v9 = 0;
  if (*a2 - 1 <= 1) {
    __int16 v9 = *(_WORD *)a2;
  }
  uint64_t v3 = (std::__shared_weak_count *)v2[2];
  if (!v3 || (v4 = v2[1], (uint64_t v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  uint64_t v7 = v2[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1010F8AF4;
  block[3] = &unk_101A8DAF0;
  block[5] = v4;
  long long v11 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v8;
  dispatch_async(v7, block);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10004D2C8(v6);
}

uint64_t sub_1010F5A14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  __int16 v4 = 0;
  if (*(unsigned __int8 *)(a1 + 40) - 1 <= 1) {
    __int16 v4 = *(_WORD *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(v2 + 16))(v2, &v4);
}

uint64_t sub_1010F5A68(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = 0;
  int v2 = *(unsigned __int8 *)(a2 + 40);
  if ((v2 - 1) <= 1)
  {
    *(unsigned char *)(result + 40) = v2;
    *(unsigned char *)(result + 41) = *(unsigned char *)(a2 + 41);
  }
  return result;
}

uint64_t sub_1010F5A8C(uint64_t result)
{
  *(unsigned char *)(result + 40) = 0;
  return result;
}

char *sub_1010F5A94(uint64_t a1, uint64_t a2)
{
  return sub_1003268E0((char *)(a1 + 48), (long long *)(a2 + 48));
}

uint64_t sub_1010F5AA0(uint64_t a1)
{
  return sub_10030A89C(a1 + 48);
}

void sub_1010F5AA8(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    _Block_copy(aBlock);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010F5BAC(uint64_t a1, uint64_t a2, void *aBlock)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
    if (aBlock) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    xpc_object_t __p[2] = *(void **)(a2 + 16);
    if (aBlock)
    {
LABEL_3:
      uint64_t v5 = _Block_copy(aBlock);
      goto LABEL_6;
    }
  }
  uint64_t v5 = 0;
LABEL_6:
  __p[3] = v5;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    if (std::__shared_weak_count::lock(v6)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010F5D30(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    _Block_copy(aBlock);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010F5E34(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    uint64_t v11 = *(void *)(a4 + 16);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  void v9[2] = sub_1010F5FA0;
  v9[3] = &unk_101A8D570;
  void v9[4] = a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void **, void *))(*(void *)v6 + 88))(v6, v7, v8, __dst, __p, v9);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1010F5F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010F5FA0(uint64_t a1, unsigned char *a2)
{
  if (*a2 == 2)
  {
    int v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315138;
      uint64_t v4 = asString();
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failure: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

void sub_1010F6058(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1010F6060(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *(void *)(a1 + 232);
  uint64_t v4 = a1 + 232;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v7 - *a2 != *(void *)(a1 + 240) - v5)
  {
LABEL_5:
    if ((uint64_t *)v4 != a2) {
      sub_1003DB294(v4, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
    }
    int v8 = *(unsigned __int8 *)(a1 + 424);
    if (v8 == 2)
    {
      uint64_t v11 = *(void *)(a1 + 136);
      memset(v13, 0, sizeof(v13));
      char v10 = v13;
      sub_100311ED8(v13, *(void *)(a1 + 232), *(void *)(a1 + 240), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3));
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v11 + 24))(v11, v13, a1 + 256);
    }
    else
    {
      if (v8 != 1)
      {
        char v12 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Cannot send VinylInfoInd, unknown mode", buf, 2u);
        }
        goto LABEL_14;
      }
      uint64_t v9 = *(void *)(a1 + 120);
      memset(v14, 0, sizeof(v14));
      char v10 = v14;
      sub_100311ED8(v14, *(void *)(a1 + 232), *(void *)(a1 + 240), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 3));
      (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v9 + 24))(v9, v14, a1 + 256);
    }
    *(void *)long long buf = v10;
    sub_1000C56F4((void ***)buf);
LABEL_14:
    (*(void (**)(void))(**(void **)(a1 + 152) + 16))(*(void *)(a1 + 152));
    sub_1010F6290();
    return;
  }
  while (v6 != v7)
  {
    if (!VinylInfo::operator==()) {
      goto LABEL_5;
    }
    v6 += 88;
    v5 += 88;
  }
}

void sub_1010F6274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1000C56F4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1010F6290()
{
  sub_100058DB0(&__p, "/cc/events/cellular_plan_info_changed");
  xpc_object_t object = xpc_null_create();
  ctu::RestModule::sendEvent();
  xpc_release(object);
  if (v2 < 0) {
    operator delete(__p);
  }
}

void sub_1010F6300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1010F6330(uint64_t a1, uint64_t *a2)
{
}

void sub_1010F6338(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 152) + 16))(*(void *)(a1 + 152));

  sub_1010F6290();
}

void sub_1010F6394(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 96) + 16))(*(void *)(a1 + 96));

  sub_1010F6290();
}

uint64_t sub_1010F63F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 16))();
}

uint64_t sub_1010F6418(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))();
}

uint64_t sub_1010F6440(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 32))();
}

uint64_t sub_1010F6468(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 32))();
}

uint64_t sub_1010F6490(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 40))();
}

uint64_t sub_1010F64B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 144) + 40))();
}

void sub_1010F64E0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a3 + 23))
    {
      uint64_t v5 = *(void *)(a1 + 72);
      uint64_t v6 = *a2;
      uint64_t v7 = a2[1];
      *(_OWORD *)std::string __p = *(_OWORD *)a3;
      uint64_t v17 = *(void *)(a3 + 16);
      goto LABEL_6;
    }
LABEL_8:
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    v14[0] = 0;
    v14[1] = 0;
    uint64_t v13 = v14;
    sub_1000C6AC0((uint64_t)v18, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, char ***, void *))(*(void *)v8 + 64))(v8, v9, v10, &v13, v18);
    sub_1000C6B58(v18);
    sub_10005CD2C((uint64_t)&v13, v14[0]);
    return;
  }
  if (!*(void *)(a3 + 8)) {
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
LABEL_6:
  sub_1000EA30C((uint64_t)v11, __p, 1);
  sub_1000C6AC0((uint64_t)v15, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *, void **))(*(void *)v5 + 64))(v5, v6, v7, v11, v15);
  sub_1000C6B58(v15);
  sub_10005CD2C((uint64_t)v11, v12);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1010F6674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void sub_1010F66E0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void *sub_1010F66E8(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  long long v12 = *a3;
  if (*((char *)a3 + 39) < 0)
  {
    sub_10004FC84(&__p, *((void **)a3 + 2), *((void *)a3 + 3));
  }
  else
  {
    long long __p = a3[1];
    uint64_t v14 = *((void *)a3 + 4);
  }
  char v15 = *((unsigned char *)a3 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  uint64_t v10[2] = sub_1010F6870;
  void v10[3] = &unk_101A8D590;
  sub_1000C7494((uint64_t)v11, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, long long *, void *))(*(void *)v6 + 72))(v6, v7, v8, &v12, v10);
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  return sub_1000C752C(v11);
}

void sub_1010F683C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

uint64_t sub_1010F6870(uint64_t a1, unsigned __int8 *a2)
{
  __int16 v4 = 0;
  if (*a2 - 1 <= 1) {
    __int16 v4 = *(_WORD *)a2;
  }
  uint64_t v2 = *(void *)(a1 + 56);
  if (!v2) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_1010F68E0(uint64_t a1, uint64_t a2)
{
  return sub_1000C7494(a1 + 32, a2 + 32);
}

void *sub_1010F68EC(uint64_t a1)
{
  return sub_1000C752C((void *)(a1 + 32));
}

void *sub_1010F68F4(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4)
{
  return sub_1010F66E8(a1 - 56, a2, a3, a4);
}

void sub_1010F68FC(void *a1, void *a2, uint64_t *a3)
{
  uint64_t v4 = a1[29];
  if (a1[30] == v4 || (uint64_t v5 = *a3) == 0)
  {
    uint64_t v9 = a1[5];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12[0]) = 0;
      uint64_t v10 = "No vinyl info present";
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 16);
    uint64_t v6 = *(void *)(v4 + 24);
    if (*a2 == v7 && a2[1] == v6)
    {
      _DWORD v12[2] = 0;
      void v12[3] = 0;
      uint64_t v11 = (std::__shared_weak_count *)a3[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v12[0] = v5;
      v12[1] = v11;
      sub_1010F287C(a1 + 82, v12);
      sub_1010F2DC0((uint64_t)a1);
      if (v11) {
        sub_10004D2C8(v11);
      }
    }
    else
    {
      uint64_t v9 = a1[5];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v12[0]) = 0;
        uint64_t v10 = "CSN mismatched";
LABEL_16:
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v10, (uint8_t *)v12, 2u);
      }
    }
  }
}

void sub_1010F69F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1010F6A0C(uint64_t a1, void *a2, uint64_t *a3)
{
}

void sub_1010F6A14(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 == a3[1]) {
    return;
  }
  int v3 = *(unsigned __int8 *)(a1 + 424);
  if (v3 == 2)
  {
    uint64_t v4 = *(void *)(a1 + 136);
    goto LABEL_6;
  }
  if (v3 == 1)
  {
    uint64_t v4 = *(void *)(a1 + 120);
LABEL_6:
    uint64_t v5 = *(void (**)(void))(*(void *)v4 + 48);
    v5();
    return;
  }
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Cannot send UpdateSubscriptionInd, unknown mode", v7, 2u);
  }
}

void sub_1010F6AE4(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1010F6AEC(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 424);
  if (v1 == 2)
  {
    uint64_t v2 = *(void *)(a1 + 136);
    goto LABEL_5;
  }
  if (v1 == 1)
  {
    uint64_t v2 = *(void *)(a1 + 120);
LABEL_5:
    int v3 = *(void (**)(void))(*(void *)v2 + 72);
    v3();
    return;
  }
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Cannot send ProfileStatusInd, unknown mode", v5, 2u);
  }
}

void sub_1010F6BB0(uint64_t a1)
{
}

void sub_1010F6BB8(uint64_t a1)
{
  sub_1010F7BD8((void *)(*(void *)(*(void *)(a1 + 8) + ((*(void *)(a1 + 32) >> 4) & 0xFFFFFFFFFFFFFF8))
                         + 32 * (*(void *)(a1 + 32) & 0x7FLL)));
  int64x2_t v2 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_10144F900);
  *(int64x2_t *)(a1 + 32) = v2;
  if (v2.i64[0] >= 0x100uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 128;
  }
}

void sub_1010F6C3C(uint64_t a1, unsigned char *a2)
{
  long long v9 = *(_OWORD *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(const void **)(a1 + 72);
  if (v6) {
    _Block_copy(v6);
  }
  uint64_t v7 = *(const void **)(a1 + 80);
  if (v7) {
    _Block_copy(v7);
  }
  v10[0] = 0;
  if (*a2) {
    sub_1000C5A48((uint64_t)v10, (uint64_t)(a2 + 8));
  }
  uint64_t v8 = *(std::__shared_weak_count **)(v9 + 16);
  if (v8)
  {
    if (std::__shared_weak_count::lock(v8)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010F6E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void *sub_1010F6ED4(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a2[8];
  a1[7] = a2[7];
  a1[8] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a2[9];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  a1[9] = v6;
  uint64_t result = (void *)a2[10];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[10] = result;
  return result;
}

void sub_1010F6F50(void *a1)
{
  int64x2_t v2 = (const void *)a1[10];
  if (v2) {
    _Block_release(v2);
  }
  int v3 = (const void *)a1[9];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[8];
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1010F6FC0(uint64_t a1, unsigned __int8 *a2, unsigned char *a3)
{
  long long v10 = *(_OWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  if (*a3) {
    sub_1000C5DA8((uint64_t)&v11, (uint64_t)(a3 + 8));
  }
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void **)(a1 + 72);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  aBlock = v7;
  uint64_t v8 = *(void **)(a1 + 80);
  if (v8) {
    uint64_t v8 = _Block_copy(v8);
  }
  char v15 = v8;
  __int16 v16 = 0;
  if (*a2 - 1 <= 1) {
    __int16 v16 = *(_WORD *)a2;
  }
  long long v9 = *(std::__shared_weak_count **)(v10 + 16);
  if (v9)
  {
    if (std::__shared_weak_count::lock(v9)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010F7290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1010F72DC(uint64_t a1)
{
  sub_1010F78AC(a1);

  operator delete();
}

uint64_t sub_1010F7314(uint64_t a1)
{
  return sub_1010F78AC(a1 - 48);
}

void sub_1010F731C(uint64_t a1)
{
  sub_1010F78AC(a1 - 48);

  operator delete();
}

uint64_t sub_1010F7358(uint64_t a1)
{
  return sub_1010F78AC(a1 - 56);
}

void sub_1010F7360(uint64_t a1)
{
  sub_1010F78AC(a1 - 56);

  operator delete();
}

uint64_t sub_1010F739C(uint64_t a1)
{
  return sub_1010F78AC(a1 - 64);
}

void sub_1010F73A4(uint64_t a1)
{
  sub_1010F78AC(a1 - 64);

  operator delete();
}

uint64_t sub_1010F73E0(uint64_t a1, uint64_t a2)
{
  int64x2_t v2 = *(void **)a1;
  if (!*(unsigned char *)(a2 + 120))
  {
    uint64_t v6 = *(unsigned __int8 *)(a2 + 95);
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(a2 + 80);
    }
    if (!v6) {
      return 0;
    }
    uint64_t v7 = (const void **)(a2 + 72);
    if (*(unsigned char *)(a1 + 88))
    {
      uint64_t v8 = *(void *)(a1 + 64);
      for (uint64_t i = *(void *)(a1 + 72); v8 != i; v8 += 216)
      {
        if (*(char *)(v8 + 39) < 0)
        {
          if (*(void *)(v8 + 24))
          {
LABEL_14:
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v49 = 0;
            sub_100CD7084(v8 + 16, (uint64_t)__p);
            long long v10 = (void *)HIBYTE(v49);
            char v11 = HIBYTE(v49);
            uint64_t v12 = __p[1];
            if (v49 >= 0) {
              uint64_t v13 = (void **)((char *)__p + HIBYTE(v49));
            }
            else {
              uint64_t v13 = (void **)((char *)__p[0] + (unint64_t)__p[1]);
            }
            if (v49 >= 0) {
              uint64_t v14 = __p;
            }
            else {
              uint64_t v14 = (void **)__p[0];
            }
            if (v14 != v13)
            {
              do
              {
                *(unsigned char *)uint64_t v14 = __tolower(*(char *)v14);
                uint64_t v14 = (void **)((char *)v14 + 1);
              }
              while (v14 != v13);
              long long v10 = (void *)HIBYTE(v49);
              uint64_t v12 = __p[1];
              char v11 = HIBYTE(v49);
            }
            uint64_t v15 = *(unsigned __int8 *)(a2 + 95);
            if ((v15 & 0x80u) == 0) {
              __int16 v16 = (void *)*(unsigned __int8 *)(a2 + 95);
            }
            else {
              __int16 v16 = *(void **)(a2 + 80);
            }
            if (v11 < 0) {
              long long v10 = v12;
            }
            if (v16 != v10) {
              goto LABEL_39;
            }
            if (v11 >= 0) {
              uint64_t v17 = __p;
            }
            else {
              uint64_t v17 = (void **)__p[0];
            }
            if ((v15 & 0x80) != 0)
            {
              if (memcmp(*v7, v17, *(void *)(a2 + 80))) {
                goto LABEL_39;
              }
            }
            else if (*(unsigned char *)(a2 + 95))
            {
              unsigned int v18 = (unsigned __int8 *)(a2 + 72);
              while (*v18 == *(unsigned __int8 *)v17)
              {
                ++v18;
                uint64_t v17 = (void **)((char *)v17 + 1);
                if (!--v15) {
                  goto LABEL_44;
                }
              }
LABEL_39:
              int v19 = 1;
              if (v11 < 0) {
LABEL_40:
              }
                operator delete(__p[0]);
LABEL_41:
              if (!v19) {
                return 1;
              }
              continue;
            }
LABEL_44:
            int v19 = 0;
            if (v11 < 0) {
              goto LABEL_40;
            }
            goto LABEL_41;
          }
        }
        else if (*(unsigned char *)(v8 + 39))
        {
          goto LABEL_14;
        }
      }
    }
    uint64_t v20 = v2[83];
    if (v2[84] == v20) {
      return 0;
    }
    unint64_t v21 = v2[86];
    uint64_t v22 = (uint64_t *)(v20 + 8 * (v21 >> 7));
    uint64_t v23 = *v22;
    uint64_t v24 = *v22 + 32 * (v21 & 0x7F);
    uint64_t v25 = *(void *)(v20 + (((v2[87] + v21) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((v2[87] + v21) & 0x7F);
    if (v24 == v25) {
      return 0;
    }
    while (*(void *)(*(void *)v24 + 104) - *(void *)(*(void *)v24 + 96) != 24)
    {
LABEL_101:
      v24 += 32;
      if (v24 - v23 == 4096)
      {
        uint64_t v44 = v22[1];
        ++v22;
        uint64_t v23 = v44;
        uint64_t v24 = v44;
      }
      if (v24 == v25) {
        return 0;
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v49 = 0;
    uint64_t v26 = *(long long **)(*(void *)v24 + 96);
    if (*((char *)v26 + 23) < 0)
    {
      sub_10004FC84(__p, *(void **)v26, *((void *)v26 + 1));
    }
    else
    {
      long long v27 = *v26;
      uint64_t v49 = *((void *)v26 + 2);
      *(_OWORD *)long long __p = v27;
    }
    uint64_t v28 = *(unsigned __int8 *)(a2 + 95);
    if ((v28 & 0x80u) == 0) {
      char v29 = (void *)*(unsigned __int8 *)(a2 + 95);
    }
    else {
      char v29 = *(void **)(a2 + 80);
    }
    int v30 = (void *)HIBYTE(v49);
    char v31 = HIBYTE(v49);
    if (v49 < 0) {
      int v30 = __p[1];
    }
    if (v29 == v30)
    {
      if (v49 >= 0) {
        char v32 = __p;
      }
      else {
        char v32 = (void **)__p[0];
      }
      if ((v28 & 0x80) != 0)
      {
        if (memcmp(*v7, v32, *(void *)(a2 + 80))) {
          goto LABEL_68;
        }
      }
      else if (*(unsigned char *)(a2 + 95))
      {
        char v33 = (unsigned __int8 *)(a2 + 72);
        while (*v33 == *(unsigned __int8 *)v32)
        {
          ++v33;
          char v32 = (void **)((char *)v32 + 1);
          if (!--v28) {
            goto LABEL_92;
          }
        }
        goto LABEL_68;
      }
LABEL_92:
      int v43 = 1;
      if (v31 < 0) {
        goto LABEL_98;
      }
      goto LABEL_99;
    }
LABEL_68:
    char v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    sub_100CD7084((uint64_t)__p, (uint64_t)&v45);
    uint64_t v34 = HIBYTE(v47);
    char v35 = HIBYTE(v47);
    uint64_t v36 = v46;
    if (v47 >= 0) {
      char v37 = (char *)&v45 + HIBYTE(v47);
    }
    else {
      char v37 = (char *)v45 + v46;
    }
    if (v47 >= 0) {
      char v38 = (char *)&v45;
    }
    else {
      char v38 = (char *)v45;
    }
    if (v38 != v37)
    {
      do
      {
        *char v38 = __tolower(*v38);
        ++v38;
      }
      while (v38 != v37);
      uint64_t v34 = HIBYTE(v47);
      uint64_t v36 = v46;
      char v35 = HIBYTE(v47);
    }
    uint64_t v39 = *(unsigned __int8 *)(a2 + 95);
    if ((v39 & 0x80u) == 0) {
      uint64_t v40 = *(unsigned __int8 *)(a2 + 95);
    }
    else {
      uint64_t v40 = *(void *)(a2 + 80);
    }
    if (v35 < 0) {
      uint64_t v34 = v36;
    }
    if (v40 != v34) {
      goto LABEL_95;
    }
    if (v35 >= 0) {
      char v41 = (unsigned __int8 *)&v45;
    }
    else {
      char v41 = (unsigned __int8 *)v45;
    }
    if ((v39 & 0x80) != 0)
    {
      if (memcmp(*v7, v41, *(void *)(a2 + 80))) {
        goto LABEL_95;
      }
    }
    else if (*(unsigned char *)(a2 + 95))
    {
      uint64_t v42 = (unsigned __int8 *)(a2 + 72);
      while (*v42 == *v41)
      {
        ++v42;
        ++v41;
        if (!--v39) {
          goto LABEL_105;
        }
      }
LABEL_95:
      int v43 = 0;
      if ((v35 & 0x80) == 0) {
        goto LABEL_97;
      }
      goto LABEL_96;
    }
LABEL_105:
    int v43 = 1;
    if ((v35 & 0x80) == 0)
    {
LABEL_97:
      if (v49 < 0) {
LABEL_98:
      }
        operator delete(__p[0]);
LABEL_99:
      if (v43) {
        return 1;
      }
      uint64_t v23 = *v22;
      goto LABEL_101;
    }
LABEL_96:
    operator delete(v45);
    goto LABEL_97;
  }
  int v3 = v2[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Received pending bootstrap profile", (uint8_t *)__p, 2u);
  }
  return 1;
}

void sub_1010F7814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010F784C(const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

void *sub_1010F786C(void *a1, void *aBlock)
{
  if (aBlock) {
    int v3 = _Block_copy(aBlock);
  }
  else {
    int v3 = 0;
  }
  *a1 = v3;
  return a1;
}

uint64_t sub_1010F78AC(uint64_t a1)
{
  *(void *)a1 = off_101A8CF28;
  *(void *)(a1 + 48) = off_101A8D0F0;
  *(void *)(a1 + 56) = off_101A8D190;
  int64x2_t v2 = (CellularPlanSubscriptionControllerDelegate *)(a1 + 64);
  *(void *)(a1 + 64) = off_101A8D208;
  int v3 = *(void ***)(a1 + 664);
  uint64_t v4 = *(void ***)(a1 + 672);
  if (v4 == v3)
  {
    uint64_t v8 = (void *)(a1 + 696);
    uint64_t v4 = *(void ***)(a1 + 664);
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 688);
    uint64_t v6 = &v3[v5 >> 7];
    uint64_t v7 = (char *)*v6 + 32 * (v5 & 0x7F);
    uint64_t v8 = (void *)(a1 + 696);
    uint64_t v9 = *(uint64_t *)((char *)v3 + (((*(void *)(a1 + 696) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(void *)(a1 + 696) + v5) & 0x7F);
    if (v7 != (char *)v9)
    {
      do
      {
        sub_1010F7BD8(v7);
        v7 += 32;
        if (v7 - (unsigned char *)*v6 == 4096)
        {
          long long v10 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != (char *)v9);
      uint64_t v4 = *(void ***)(a1 + 672);
      int v3 = *(void ***)(a1 + 664);
    }
  }
  void *v8 = 0;
  unint64_t v11 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      int v3 = (void **)(*(void *)(a1 + 664) + 8);
      *(void *)(a1 + 664) = v3;
      uint64_t v4 = *(void ***)(a1 + 672);
      unint64_t v11 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 64;
    goto LABEL_14;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 128;
LABEL_14:
    *(void *)(a1 + 688) = v13;
  }
  if (v3 != v4)
  {
    do
    {
      uint64_t v14 = *v3++;
      operator delete(v14);
    }
    while (v3 != v4);
    uint64_t v15 = *(void *)(a1 + 664);
    uint64_t v16 = *(void *)(a1 + 672);
    if (v16 != v15) {
      *(void *)(a1 + 672) = v16 + ((v15 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  uint64_t v17 = *(void **)(a1 + 656);
  if (v17) {
    operator delete(v17);
  }
  uint64_t v18 = *(void *)(a1 + 640);
  *(void *)(a1 + 640) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  int v19 = *(std::__shared_weak_count **)(a1 + 632);
  if (v19) {
    sub_10004D2C8(v19);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 616);
  if (v20) {
    sub_10004D2C8(v20);
  }
  sub_1001509E4(a1 + 424);
  if (*(unsigned char *)(a1 + 416) && *(char *)(a1 + 415) < 0) {
    operator delete(*(void **)(a1 + 392));
  }
  if (*(char *)(a1 + 391) < 0) {
    operator delete(*(void **)(a1 + 368));
  }
  sub_100087784(a1 + 304);
  char v33 = (void **)(a1 + 280);
  sub_10008A88C(&v33);
  unint64_t v21 = *(std::__shared_weak_count **)(a1 + 272);
  if (v21) {
    sub_10004D2C8(v21);
  }
  char v33 = (void **)(a1 + 232);
  sub_1000C56F4(&v33);
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 224);
  if (v22) {
    sub_10004D2C8(v22);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(a1 + 208);
  if (v23) {
    sub_10004D2C8(v23);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 192);
  if (v24) {
    sub_10004D2C8(v24);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(a1 + 176);
  if (v25) {
    sub_10004D2C8(v25);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 160);
  if (v26) {
    sub_10004D2C8(v26);
  }
  long long v27 = *(std::__shared_weak_count **)(a1 + 144);
  if (v27) {
    sub_10004D2C8(v27);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(a1 + 128);
  if (v28) {
    sub_10004D2C8(v28);
  }
  char v29 = *(std::__shared_weak_count **)(a1 + 112);
  if (v29) {
    sub_10004D2C8(v29);
  }
  int v30 = *(std::__shared_weak_count **)(a1 + 96);
  if (v30) {
    sub_10004D2C8(v30);
  }
  char v31 = *(std::__shared_weak_count **)(a1 + 80);
  if (v31) {
    sub_10004D2C8(v31);
  }
  CellularPlanSubscriptionControllerDelegate::~CellularPlanSubscriptionControllerDelegate(v2);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_1010F7BD8(void *a1)
{
  int64x2_t v2 = (const void *)a1[3];
  if (v2) {
    _Block_release(v2);
  }
  int v3 = (const void *)a1[2];
  if (v3) {
    _Block_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    sub_10004D2C8(v4);
  }
}

void sub_1010F7C3C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1010F7D08(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1010F7DE0);
  __cxa_rethrow();
}

void sub_1010F7D30(_Unwind_Exception *a1)
{
}

void sub_1010F7D48(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010F7D80(uint64_t a1)
{
}

uint64_t sub_1010F7D9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1010F7DE0(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1010F7E10()
{
}

void *sub_1010F7E24(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_101A8D778;
  result[1] = v3;
  return result;
}

uint64_t sub_1010F7E6C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A8D778;
  a2[1] = v2;
  return result;
}

void sub_1010F7E98(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v2 = *(std::string **)(a1 + 8);
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v15 = v16;
  sub_1000FF5C4((uint64_t)&v15, a2);
  sub_10008CF3C(&v13, (uint64_t)&v15);
  uint64_t v3 = (char *)v14[0];
  if (v14[0])
  {
    uint64_t v4 = v14;
    unint64_t v5 = (uint64_t *)v14[0];
    do
    {
      uint64_t v6 = v5;
      uint64_t v7 = v4;
      int v8 = *((_DWORD *)v5 + 8);
      if (v8 >= 1) {
        uint64_t v4 = v5;
      }
      else {
        ++v5;
      }
      unint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
    if (v4 != v14)
    {
      uint64_t v9 = (int *)(v8 >= 1 ? v6 : v7);
      if (v9[8] <= 1)
      {
        long long v10 = (const std::string *)(v7 + 5);
        unint64_t v11 = (const std::string *)(v6 + 5);
        if (v8 >= 1) {
          unint64_t v12 = v11;
        }
        else {
          unint64_t v12 = v10;
        }
        std::string::operator=(v2, v12);
        uint64_t v3 = (char *)v14[0];
      }
    }
  }
  sub_1000886C0((uint64_t)&v13, v3);
  sub_1000886C0((uint64_t)&v15, v16[0]);
}

void sub_1010F7F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, char a12, char *a13)
{
}

uint64_t sub_1010F7F98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010F7FD8()
{
}

void sub_1010F7FE8()
{
}

__n128 sub_1010F7FFC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A8D7F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010F8050(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A8D7F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1010F8088(uint64_t a1, xpc_object_t *a2)
{
  sub_100089CF0(*(uint64_t **)(a1 + 8), a2);
  uint64_t v3 = *(uint64_t (**)(void *))(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = (void *)(*(void *)(a1 + 16) + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_1010F8104(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010F8144()
{
}

void sub_1010F8154()
{
}

__n128 sub_1010F8168(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A8D878;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010F81BC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A8D878;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010F81F4(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v16 = &v17;
  sub_10008AAD8((uint64_t)&v16, a2);
  uint64_t v11 = 0;
  LOWORD(v11) = *(_WORD *)v3;
  uint64_t v4 = *(void *)(v3 + 24);
  *(_OWORD *)unint64_t v12 = *(_OWORD *)(v3 + 8);
  uint64_t v13 = v4;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 8) = 0;
  long long v5 = *(_OWORD *)(v3 + 32);
  uint64_t v15 = *(void *)(v3 + 48);
  *(_OWORD *)long long __p = v5;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  uint64_t v9 = v16;
  v10[0] = v17;
  v10[1] = v18;
  if (v18)
  {
    void v17[2] = v10;
    uint64_t v16 = &v17;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v9 = v10;
  }
  sub_1007D52CC((std::string *)v3, (uint64_t)&v9);
  sub_100087F94((uint64_t)&v9, v10[0]);
  if (rest::operator!=())
  {
    uint64_t v6 = (void (*)(void *))a1[3];
    uint64_t v7 = a1[4];
    int v8 = (void *)(a1[2] + (v7 >> 1));
    if (v7) {
      uint64_t v6 = *(void (**)(void *))(*v8 + v6);
    }
    v6(v8);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  sub_100087F94((uint64_t)&v16, v17);
}

void sub_1010F8348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_100087F94((uint64_t)&a10, a11);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  sub_100087F94(v25 - 56, *(void **)(v25 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_1010F839C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010F83DC()
{
}

void sub_1010F83EC()
{
}

__n128 sub_1010F8400(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A8D8F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1010F8454(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A8D8F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1010F848C(void *a1)
{
  int v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_1010F84D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010F8514()
{
}

void sub_1010F8524()
{
}

__n128 sub_1010F8538(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A8D978;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010F858C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A8D978;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010F85C4(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = a1[1];
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  sub_1008EA904((uint64_t *)&v24, a2);
  uint64_t v23 = 0;
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)unint64_t v21 = 0u;
  *(_OWORD *)int v19 = 0u;
  memset(v20, 0, sizeof(v20));
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)&BOOL v16[16] = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  v16[0] = *(unsigned char *)v3;
  uint64_t v4 = *(void *)(v3 + 24);
  *(_OWORD *)&char v16[8] = *(_OWORD *)(v3 + 8);
  *(void *)&v16[24] = v4;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 8) = 0;
  long long v5 = *(void **)(v3 + 48);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)(v3 + 32);
  v18[0] = v5;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  long long v6 = *(_OWORD *)(v3 + 56);
  xpc_object_t v18[3] = *(void **)(v3 + 72);
  *(_OWORD *)&v18[1] = v6;
  *(void *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  long long v7 = *(_OWORD *)(v3 + 80);
  v20[0] = *(void **)(v3 + 96);
  *(_OWORD *)int v19 = v7;
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 96) = 0;
  long long v8 = *(_OWORD *)(v3 + 104);
  void v20[3] = *(void **)(v3 + 120);
  *(_OWORD *)&v20[1] = v8;
  *(void *)(v3 + 104) = 0;
  *(void *)(v3 + 112) = 0;
  *(void *)(v3 + 120) = 0;
  long long v9 = *(_OWORD *)(v3 + 128);
  __p[0] = *(void **)(v3 + 144);
  *(_OWORD *)unint64_t v21 = v9;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 136) = 0;
  *(void *)(v3 + 144) = 0;
  long long v10 = *(_OWORD *)(v3 + 152);
  __p[3] = *(void **)(v3 + 168);
  *(_OWORD *)&__p[1] = v10;
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = 0;
  *(void *)(v3 + 168) = 0;
  LOWORD(v23) = *(_WORD *)(v3 + 176);
  long long v14 = v24;
  uint64_t v15 = v25;
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  sub_10064B404(v3, (uint64_t *)&v14);
  uint64_t v26 = (void **)&v14;
  sub_100150960(&v26);
  if (!sub_1008EA06C(v16, (unsigned __int8 *)v3))
  {
    uint64_t v11 = (void (*)(void *))a1[3];
    uint64_t v12 = a1[4];
    uint64_t v13 = (void *)(a1[2] + (v12 >> 1));
    if (v12) {
      uint64_t v11 = *(void (**)(void *))(*v13 + v11);
    }
    v11(v13);
  }
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v20[3]) < 0) {
    operator delete(v20[1]);
  }
  if (SHIBYTE(v20[0]) < 0) {
    operator delete(v19[0]);
  }
  if (SHIBYTE(v18[3]) < 0) {
    operator delete(v18[1]);
  }
  if (SHIBYTE(v18[0]) < 0) {
    operator delete(v17[0]);
  }
  if ((v16[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v16[8]);
  }
  *(void *)uint64_t v16 = &v24;
  sub_100150960((void ***)v16);
}

void sub_1010F87F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0) {
    operator delete(__p);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  a13 = v55 - 64;
  sub_100150960((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1010F8898(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010F88D8()
{
}

void sub_1010F88E8()
{
}

__n128 sub_1010F88FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A8D9F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1010F8950(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A8D9F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1010F8988(void *a1)
{
  int v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_1010F89D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010F8A10()
{
}

uint64_t *sub_1010F8A1C(void **a1)
{
  int v1 = *a1;
  long long v8 = a1;
  long long v9 = v1;
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 232);
  if (*(void *)(*v1 + 240) == v3) {
    sub_10015B728();
  }
  uint64_t v4 = *(void *)(v3 + 16);
  uint64_t v5 = *(void *)(v3 + 24);
  long long v6 = (std::__shared_weak_count *)v1[2];
  v10[0] = v1[1];
  v10[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1010F2444(v2, v4, v5, v10, (uint64_t)&stru_101A8DA88, (uint64_t)&stru_101A8DAC8);
  if (v6) {
    sub_10004D2C8(v6);
  }
  sub_1000E1A60((uint64_t *)&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_1010F8ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_1000E1A60(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1010F8AF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1010F8B04(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1010F8B20(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void *sub_1010F8B30(void *a1)
{
  *a1 = off_101A8DB30;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void sub_1010F8B80(void *a1)
{
  *a1 = off_101A8DB30;
  int v1 = (const void *)a1[1];
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void *sub_1010F8BF0(uint64_t a1)
{
  int v1 = (void **)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A8DB30;
  sub_1010F8D14(v2 + 1, v1);
  return v2;
}

void *sub_1010F8C44(uint64_t a1, void *a2)
{
  *a2 = off_101A8DB30;
  return sub_1010F8D14(a2 + 1, (void **)(a1 + 8));
}

void sub_1010F8C70(uint64_t a1)
{
}

void sub_1010F8C78(const void **a1)
{
  sub_1010F8D4C(a1 + 1);

  operator delete(a1);
}

uint64_t sub_1010F8CB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_1010F8CC8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1010F8D08()
{
}

void *sub_1010F8D14(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void sub_1010F8D4C(const void **a1)
{
  int v1 = *a1;
  if (v1) {
    _Block_release(v1);
  }
}

void *sub_1010F8D70(void *a1)
{
  *a1 = off_101A8DBA0;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void sub_1010F8DC0(void *a1)
{
  *a1 = off_101A8DBA0;
  int v1 = (const void *)a1[1];
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void *sub_1010F8E30(uint64_t a1)
{
  int v1 = (void **)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A8DBA0;
  sub_1010F8F98(v2 + 1, v1);
  return v2;
}

void *sub_1010F8E84(uint64_t a1, void *a2)
{
  *a2 = off_101A8DBA0;
  return sub_1010F8F98(a2 + 1, (void **)(a1 + 8));
}

void sub_1010F8EB0(uint64_t a1)
{
}

void sub_1010F8EB8(const void **a1)
{
  sub_1010F8FD0(a1[1]);

  operator delete(a1);
}

uint64_t sub_1010F8EF4(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 - 1 >= 2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    __int16 v5 = 0;
  }
  else
  {
    unsigned __int8 v2 = a2[1];
    uint64_t v3 = *(void *)(a1 + 8);
    LOBYTE(v5) = *a2;
    HIBYTE(v5) = v2;
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(v3 + 16))(v3, &v5);
}

uint64_t sub_1010F8F4C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010F8F8C()
{
}

void *sub_1010F8F98(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void sub_1010F8FD0(const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

void *sub_1010F8FF0(void *a1)
{
  *a1 = off_101A8DC20;
  unsigned __int8 v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void sub_1010F9040(void *a1)
{
  *a1 = off_101A8DC20;
  int v1 = (const void *)a1[1];
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void *sub_1010F90B0(uint64_t a1)
{
  int v1 = (void **)(a1 + 8);
  unsigned __int8 v2 = operator new(0x10uLL);
  void *v2 = off_101A8DC20;
  sub_1010F9218(v2 + 1, v1);
  return v2;
}

void *sub_1010F9104(uint64_t a1, void *a2)
{
  *a2 = off_101A8DC20;
  return sub_1010F9218(a2 + 1, (void **)(a1 + 8));
}

void sub_1010F9130(uint64_t a1)
{
}

void sub_1010F9138(const void **a1)
{
  sub_1010F9250(a1[1]);

  operator delete(a1);
}

uint64_t sub_1010F9174(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 - 1 >= 2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    __int16 v5 = 0;
  }
  else
  {
    unsigned __int8 v2 = a2[1];
    uint64_t v3 = *(void *)(a1 + 8);
    LOBYTE(v5) = *a2;
    HIBYTE(v5) = v2;
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(v3 + 16))(v3, &v5);
}

uint64_t sub_1010F91CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010F920C()
{
}

void *sub_1010F9218(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void sub_1010F9250(const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

void *sub_1010F9270(void *a1)
{
  *a1 = off_101A8DCA0;
  unsigned __int8 v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void sub_1010F92C0(void *a1)
{
  *a1 = off_101A8DCA0;
  int v1 = (const void *)a1[1];
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void *sub_1010F9330(uint64_t a1)
{
  int v1 = (void **)(a1 + 8);
  unsigned __int8 v2 = operator new(0x10uLL);
  void *v2 = off_101A8DCA0;
  sub_1010F9454(v2 + 1, v1);
  return v2;
}

void *sub_1010F9384(uint64_t a1, void *a2)
{
  *a2 = off_101A8DCA0;
  return sub_1010F9454(a2 + 1, (void **)(a1 + 8));
}

void sub_1010F93B0(uint64_t a1)
{
}

void sub_1010F93B8(const void **a1)
{
  sub_1010F948C(a1[1]);

  operator delete(a1);
}

uint64_t sub_1010F93F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_1010F9408(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010F9448()
{
}

void *sub_1010F9454(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void sub_1010F948C(const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

void *sub_1010F94AC(void *a1)
{
  *a1 = off_101A8DD20;
  sub_10037DCD8(a1 + 1);
  return a1;
}

void sub_1010F94F0(void *a1)
{
  *a1 = off_101A8DD20;
  sub_10037DCD8(a1 + 1);

  operator delete();
}

void *sub_1010F9554(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unsigned __int8 v2 = operator new(0x28uLL);
  void *v2 = off_101A8DD20;
  sub_10037DC40((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1010F95A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010F95BC(uint64_t a1, void *a2)
{
  *a2 = off_101A8DD20;
  return sub_10037DC40((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_1010F95E8(uint64_t a1)
{
  return sub_10037DCD8((void *)(a1 + 8));
}

void sub_1010F95F0(void *a1)
{
  sub_10037DCD8(a1 + 1);

  operator delete(a1);
}

void sub_1010F962C(uint64_t a1, uint64_t a2)
{
  sub_100F1B4F4(v6, a2);
  if (v21)
  {
    v36[0] = 0;
    sub_10037E4A8((uint64_t)v36, (uint64_t)v6);
    uint64_t v3 = *(void *)(a1 + 32);
    if (!v3) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 48))(v3, v36);
    if (v36[0] == 1)
    {
      if (v49 < 0) {
        operator delete(v48);
      }
      if (v47 < 0) {
        operator delete(v46);
      }
      if (v45 < 0) {
        operator delete(v44);
      }
      if (v43 < 0) {
        operator delete(v42);
      }
      if (v41 < 0) {
        operator delete(v40);
      }
      if (v39 < 0) {
        operator delete(v38);
      }
      if ((v37[23] & 0x80000000) != 0)
      {
        uint64_t v4 = (void **)v37;
LABEL_34:
        operator delete(*v4);
      }
    }
  }
  else
  {
    v22[0] = 2;
    v22[8] = 3;
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 48))(v5, v22);
    if (v22[0] == 1)
    {
      if (v35 < 0) {
        operator delete(__p);
      }
      if (v33 < 0) {
        operator delete(v32);
      }
      if (v31 < 0) {
        operator delete(v30);
      }
      if (v29 < 0) {
        operator delete(v28);
      }
      if (v27 < 0) {
        operator delete(v26);
      }
      if (v25 < 0) {
        operator delete(v24);
      }
      if ((v23[23] & 0x80000000) != 0)
      {
        uint64_t v4 = (void **)v23;
        goto LABEL_34;
      }
    }
  }
  if (v21)
  {
    if (v20 < 0) {
      operator delete(v19);
    }
    if (v18 < 0) {
      operator delete(v17);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    if (v12 < 0) {
      operator delete(v11);
    }
    if (v10 < 0) {
      operator delete(v9);
    }
    if (v8 < 0) {
      operator delete(v7);
    }
  }
}

void sub_1010F987C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *__p,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,char a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(unsigned char *)(v59 - 232) == 1) {
    sub_1000C62D8(v59 - 224);
  }
  if (a55)
  {
    if (a53 < 0) {
      operator delete(__p);
    }
    if (a47 < 0) {
      operator delete(a42);
    }
    if (a41 < 0) {
      operator delete(a36);
    }
    if (a35 < 0) {
      operator delete(a30);
    }
    if (a29 < 0) {
      operator delete(a24);
    }
    if (a22 < 0) {
      operator delete(a17);
    }
    if (a16 < 0) {
      operator delete(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010F9934(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010F9974()
{
}

uint64_t sub_1010F9980(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1010F9A18(void *a1)
{
  *a1 = off_101A8DDA0;
  sub_1005E862C(a1 + 1);
  return a1;
}

void sub_1010F9A5C(void *a1)
{
  *a1 = off_101A8DDA0;
  sub_1005E862C(a1 + 1);

  operator delete();
}

void *sub_1010F9AC0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unsigned __int8 v2 = operator new(0x28uLL);
  void *v2 = off_101A8DDA0;
  sub_1010F9980((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1010F9B14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010F9B28(uint64_t a1, void *a2)
{
  *a2 = off_101A8DDA0;
  return sub_1010F9980((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_1010F9B54(uint64_t a1)
{
  return sub_1005E862C((void *)(a1 + 8));
}

void sub_1010F9B5C(void *a1)
{
  sub_1005E862C(a1 + 1);

  operator delete(a1);
}

uint64_t sub_1010F9B98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    sub_10007B600();
  }
  unsigned __int8 v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_1010F9BE8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010F9C28()
{
}

std::string *sub_1010F9C34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, std::string *a3@<X8>)
{
  return sub_1010F4CC4(a3, **(void **)(a1 + 40), a2);
}

uint64_t sub_1010F9C44(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(v3);
  sub_100337AA4(*(void *)(a1 + 32), (uint64_t)v3);
  return sub_10030E938((uint64_t)v3);
}

uint64_t sub_1010F9C98(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(v3);
  sub_100337AA4(*(void *)(a1 + 32), (uint64_t)v3);
  return sub_10030E938((uint64_t)v3);
}

uint64_t *sub_1010F9CEC(uint64_t **a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = *a1;
  long long v6 = a1;
  long long v7 = v3;
  sub_1010F4CC4(v8, *v3, a3);
  uint64_t v4 = v3[4];
  if (!v4) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 48))(v4, v8);
  sub_10030E938((uint64_t)v8);
  sub_100337EA8((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_1010F9D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_1010F9DA0(void **a1)
{
  uint64_t v1 = *a1;
  char v8 = a1;
  long long v9 = v1;
  unsigned __int8 v2 = (std::__shared_weak_count *)v1[2];
  if (v2)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (v1[1])
      {
        char v6 = (*(uint64_t (**)(void, void *))(**(void **)(v3 + 168) + 48))(*(void *)(v3 + 168), v1 + 3);
        if (v1[9]) {
          sub_1000607A8((uint64_t)(v1 + 6), v6);
        }
      }
      sub_10004D2C8(v5);
    }
  }
  sub_1010F9E70((uint64_t *)&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_1010F9E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10004D2C8(v10);
  sub_1010F9E70(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1010F9E70(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_100060644((void *)(v1 + 48));
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    unsigned __int8 v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_1010F9EDC(void **a1)
{
  uint64_t v1 = *a1;
  char v6 = a1;
  long long v7 = v1;
  uint64_t v2 = *v1;
  (*(void (**)(void))(**(void **)(*v1 + 168) + 112))(*(void *)(*v1 + 168));
  (*(void (**)(const void **__return_ptr))(**(void **)(v2 + 168) + 40))(&v8);
  uint64_t v3 = v1[1];
  uint64_t v4 = v8;
  char v8 = 0;
  long long v9 = v4;
  (*(void (**)(void))(v3 + 16))();
  sub_100044D00(&v9);
  sub_100044D00(&v8);
  sub_1010F9FD4((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_1010F9FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12)
{
}

uint64_t *sub_1010F9FD4(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    uint64_t v2 = *(const void **)(v1 + 8);
    if (v2) {
      _Block_release(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_1010FA02C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 168);
  v13[0] = 0;
  v13[1] = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    sub_10004FC84(&__p, *(void **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(v1 + 8);
    uint64_t v11 = *(void *)(v1 + 24);
    long long __p = v3;
  }
  char v12 = 1;
  uint64_t v4 = *(void **)(v1 + 32);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  v8[0] = off_101A8DE80;
  v8[1] = v4;
  v8[3] = v8;
  (*(void (**)(uint64_t, void *, unsigned char *, void *))(*(void *)v2 + 72))(v2, v13, v9, v8);
  sub_1000C752C(v8);
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }
  sub_1010FA1A0(&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_1010FA154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

uint64_t *sub_1010FA1A0(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    uint64_t v2 = *(const void **)(v1 + 32);
    if (v2) {
      _Block_release(v2);
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void *sub_1010FA208(void *a1)
{
  *a1 = off_101A8DE80;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void sub_1010FA258(void *a1)
{
  *a1 = off_101A8DE80;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void *sub_1010FA2C8(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A8DE80;
  sub_1010FA3EC(v2 + 1, v1);
  return v2;
}

void *sub_1010FA31C(uint64_t a1, void *a2)
{
  *a2 = off_101A8DE80;
  return sub_1010FA3EC(a2 + 1, (void **)(a1 + 8));
}

void sub_1010FA348(uint64_t a1)
{
}

void sub_1010FA350(const void **a1)
{
  sub_1010FA424(a1[1]);

  operator delete(a1);
}

uint64_t sub_1010FA38C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_1010FA3A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010FA3E0()
{
}

void *sub_1010FA3EC(void *a1, void **a2)
{
  long long v3 = *a2;
  if (*a2) {
    long long v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void sub_1010FA424(const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

uint64_t *sub_1010FA444(void **a1)
{
  uint64_t v1 = *a1;
  char v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 168);
  v12[0] = 0;
  v12[16] = 0;
  sub_1002EF958((uint64_t)v9);
  uint64_t v4 = (void *)v1[1];
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  v8[0] = off_101A8DF00;
  v8[1] = v2;
  void v8[2] = v4;
  v8[3] = v8;
  (*(void (**)(uint64_t, unsigned char *, unsigned char *, void *))(*(void *)v3 + 80))(v3, v12, v9, v8);
  sub_1000C752C(v8);
  if (v11 < 0) {
    operator delete(__p);
  }
  sub_1010FA594((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_1010FA548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1010FA594(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    uint64_t v2 = *(const void **)(v1 + 8);
    if (v2) {
      _Block_release(v2);
    }
    operator delete();
  }
  return result;
}

void *sub_1010FA5EC(void *a1)
{
  *a1 = off_101A8DF00;
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void sub_1010FA63C(void *a1)
{
  *a1 = off_101A8DF00;
  uint64_t v1 = (const void *)a1[2];
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void *sub_1010FA6AC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x18uLL);
  void *v2 = off_101A8DF00;
  sub_1010FA894(v2 + 1, v1);
  return v2;
}

void *sub_1010FA700(uint64_t a1, void *a2)
{
  *a2 = off_101A8DF00;
  return sub_1010FA894(a2 + 1, (void *)(a1 + 8));
}

void sub_1010FA72C(uint64_t a1)
{
}

void sub_1010FA734(const void **a1)
{
  sub_1010FA8D0(a1[2]);

  operator delete(a1);
}

uint64_t sub_1010FA770(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if ((v3 - 1) > 1 || (v3 == 1 ? (BOOL v4 = a2[1] == 0) : (BOOL v4 = 1), v4))
  {
    uint64_t v5 = *(NSObject **)(*(void *)(a1 + 8) + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v8 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Erase all plans failed", v8, 2u);
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 16) + 16))();
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)(a1 + 16) + 16);
    return v7();
  }
}

uint64_t sub_1010FA848(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010FA888()
{
}

void *sub_1010FA894(void *a1, void *a2)
{
  int v3 = (void *)a2[1];
  *a1 = *a2;
  if (v3) {
    int v3 = _Block_copy(v3);
  }
  a1[1] = v3;
  return a1;
}

void sub_1010FA8D0(const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

uint64_t *sub_1010FA8F0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)v1;
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(v1 + 8) && *(unsigned char *)(v1 + 56))
      {
        uint64_t v6 = *(void *)(v1 + 40);
        if (v6)
        {
          (*(void (**)(uint64_t, uint64_t))(v6 + 16))(v6, v1 + 64);
          if (!*(unsigned char *)(v1 + 56)) {
            __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
          }
        }
        (*(void (**)(void, uint64_t, void))(**(void **)(v3 + 168) + 56))(*(void *)(v3 + 168), v1 + 80, *(unsigned __int8 *)(*(void *)(v1 + 24) + 122));
      }
      sub_10004D2C8(v5);
    }
  }
  sub_1010FAA00(&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_1010FA9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10004D2C8(v10);
  sub_1010FAA00(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1010FAA00(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_1000C5D34((unsigned char *)(v1 + 56));
    uint64_t v2 = *(const void **)(v1 + 48);
    if (v2) {
      _Block_release(v2);
    }
    uint64_t v3 = *(const void **)(v1 + 40);
    if (v3) {
      _Block_release(v3);
    }
    BOOL v4 = *(std::__shared_weak_count **)(v1 + 32);
    if (v4) {
      sub_10004D2C8(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_1010FAA88(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v11 = a1;
  uint64_t v12 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)v1;
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(v1 + 8))
      {
        uint64_t v6 = *(void *)(v1 + 144);
        if (v6)
        {
          int v7 = *(unsigned __int8 *)(v1 + 152);
          char v8 = *(unsigned char *)(v1 + 153);
          __int16 v13 = 0;
          if ((v7 - 1) <= 1)
          {
            LOBYTE(v13) = v7;
            HIBYTE(v13) = v8;
          }
          v14[0] = 0;
          if (*(unsigned char *)(v1 + 24))
          {
            sub_1000C5DA8((uint64_t)&v15, v1 + 32);
            v14[0] = 1;
          }
          (*(void (**)(uint64_t, __int16 *, char *))(v6 + 16))(v6, &v13, v14);
          sub_1000C60A0(v14);
        }
        *(unsigned char *)(v3 + 704) = 0;
        sub_1010F6BB8(v3 + 656);
        if (*(unsigned char *)(v1 + 152) == 1)
        {
          uint64_t v9 = *(void *)(v3 + 184);
          if (v9)
          {
            if (*(void *)(*(void *)(v1 + 120) + 104) - *(void *)(*(void *)(v1 + 120) + 96) == 24) {
              (*(void (**)(uint64_t))(*(void *)v9 + 88))(v9);
            }
          }
        }
        sub_1010F2DC0(v3);
      }
      sub_10004D2C8(v5);
    }
  }
  sub_1010FAC20(&v12);
  return sub_100046B58((uint64_t *)&v11);
}

void sub_1010FABEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_1000C60A0(&a12);
  sub_10004D2C8(v12);
  sub_1010FAC20(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1010FAC20(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    *(unsigned char *)(v1 + 152) = 0;
    uint64_t v2 = *(const void **)(v1 + 144);
    if (v2) {
      _Block_release(v2);
    }
    uint64_t v3 = *(const void **)(v1 + 136);
    if (v3) {
      _Block_release(v3);
    }
    BOOL v4 = *(std::__shared_weak_count **)(v1 + 128);
    if (v4) {
      sub_10004D2C8(v4);
    }
    sub_1000C60A0((unsigned char *)(v1 + 24));
    uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    operator delete();
  }
  return result;
}

void sub_1010FACAC(uint64_t a1, dispatch_object_t *a2)
{
  if (*a2) {
    dispatch_retain(*a2);
  }
  sub_10078709C();
}

void sub_1010FAD1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010FAD34(uint64_t a1, void *a2)
{
  *a2 = 0;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100B253FC();
}

void sub_1010FADBC(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010FADE0(SubscriberFactoryInterface *this)
{
  *(void *)this = off_101A8E000;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  SubscriberFactoryInterface::~SubscriberFactoryInterface(this);
}

void sub_1010FAE3C(SubscriberFactoryInterface *this)
{
  *(void *)this = off_101A8E000;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  SubscriberFactoryInterface::~SubscriberFactoryInterface(this);

  operator delete();
}

const char *sub_1010FAEAC(int a1)
{
  if (a1 > 200)
  {
    if (a1 > 211)
    {
      switch(a1)
      {
        case 302:
          return "kAWDInstrumentLTERRCMessageMsgType";
        case 303:
          return "kAWDInstrumentLTERRCMessageDir";
        case 304:
          return "Unknown Instrument ID?";
        case 305:
          return "kAWDInstrumentLTERRCState";
        case 306:
          return "kAWDInstrumentLTETxPower";
        case 307:
          return "kAWDInstrumentLTEFallback";
        default:
          if (a1 == 212)
          {
            __n128 result = "kAWDInstrumentEVDOEnd";
          }
          else
          {
            if (a1 != 221) {
              return "Unknown Instrument ID?";
            }
            __n128 result = "kAWDInstrument1xEVDOTxPower";
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 201:
          return "kAWDInstrument1xEVDOPSCallStart";
        case 202:
          return "kAWDInstrument1xEVDOPSCallEnd";
        case 211:
          return "kAWDInstrumentEVDOStart";
        default:
          return "Unknown Instrument ID?";
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 'e':
        __n128 result = "kAWDInstrumentWCDMARRCMessage";
        break;
      case 'f':
      case 'g':
      case 'h':
      case 'k':
      case 'l':
        return "Unknown Instrument ID?";
      case 'i':
        __n128 result = "kAWDInstrumentWCDMACellState";
        break;
      case 'j':
        __n128 result = "kAWDInstrumentWCDMATxPower";
        break;
      case 'm':
        __n128 result = "kAWDInstrumentsMultiRabCSVoice";
        break;
      case 'n':
        __n128 result = "kAWDInstrumentsMultiRabCSData";
        break;
      case 'o':
        __n128 result = "kAWDInstrumentsMultiRabPSData";
        break;
      case 'p':
        __n128 result = "kAWDInstrumentWDCMABearerRateRabId";
        break;
      case 'q':
        __n128 result = "kAWDInstrumentWDCMABearerRateRbId";
        break;
      case 'r':
        __n128 result = "kAWDInstrumentWDCMABearerRateDLRate";
        break;
      case 's':
        __n128 result = "kAWDInstrumentWDCMABearerRateULRate";
        break;
      case 't':
        __n128 result = "kAWDInstrumentWDCMABearerRateRbCount";
        break;
      default:
        __n128 result = "kAWDInstrumentUnknown";
        switch(a1)
        {
          case 0:
            return result;
          case 1:
            __n128 result = "kAWDInstrumentNetworkCondition";
            break;
          case 2:
            __n128 result = "kAWDInstrumentIpThroughPutUp";
            break;
          case 3:
            __n128 result = "kAWDInstrumentIpThroughPutDown";
            break;
          case 4:
            __n128 result = "kAWDInstrumentsCellularServiceStatus";
            break;
          case 5:
            __n128 result = "kAWDInstrumentIpv6ThroughPutUp";
            break;
          case 6:
            __n128 result = "kAWDInstrumentIpv6ThroughPutDown";
            break;
          default:
            return "Unknown Instrument ID?";
        }
        break;
    }
  }
  return result;
}

void AWDModel::create(capabilities::abs *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (capabilities::ct *)capabilities::abs::supportsWirelessTelemetryUsingMultiClientModel(a1);
  if (v3)
  {
    sub_1010FB6F4();
    BOOL v4 = qword_101B13188;
    if (os_log_type_enabled((os_log_t)qword_101B13188, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      uint64_t v5 = "#I AWDModel disabled; multiclient model will be used instead";
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&__p, 2u);
    }
  }
  else
  {
    if (capabilities::ct::getAWDBasebandComponent(v3))
    {
      *a2 = 0;
      a2[1] = 0;
      operator new();
    }
    sub_1010FB6F4();
    BOOL v4 = qword_101B13188;
    if (os_log_type_enabled((os_log_t)qword_101B13188, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      uint64_t v5 = "#I AWDModel disabled; no valid AWD baseband component";
      goto LABEL_8;
    }
  }
  *a2 = 0;
  a2[1] = 0;
}

void sub_1010FB530(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[2], v1, (dispatch_function_t)sub_1010FD804);
  __cxa_rethrow();
}

void sub_1010FB558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, ctu::OsLogLogger *a9, dispatch_object_t object, char a11, uint64_t a12, dispatch_object_t a13, dispatch_object_t a14, dispatch_object_t a15, dispatch_object_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_end_catch();
  if (v23)
  {
    dispatch_release(v23);
    if (!v22) {
      goto LABEL_3;
    }
  }
  else if (!v22)
  {
    goto LABEL_3;
  }
  dispatch_release(v22);
LABEL_3:
  _Unwind_Resume(a1);
}

void sub_1010FB6F4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B13190, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_101B13190))
  {
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&qword_101B13188, kCtLoggingSystemName, "awd.model");
    __cxa_guard_release(&qword_101B13190);
  }
}

void sub_1010FB774(_Unwind_Exception *a1)
{
}

void AWDModel::bootstrap(AWDModel *this, group_session a2)
{
  BOOL v4 = *((void *)this + 4);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Bootstrap AWDModel", (uint8_t *)&buf, 2u);
  }
  if (*((void *)this + 24))
  {
    uint64_t v5 = (void (***)(void, dispatch_group_t *))*((void *)this + 28);
    uint64_t v6 = *(NSObject **)a2.var0.fObj;
    dispatch_group_t group = v6;
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(group);
    }
    (**v5)(v5, &group);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    int v7 = (std::__shared_weak_count *)*((void *)this + 1);
    if (!v7 || (v8 = *(void *)this, (uint64_t v9 = std::__shared_weak_count::lock(v7)) == 0)) {
      sub_100088B9C();
    }
    char v10 = v9;
    p_shared_weak_owners = &v9->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v9);
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1174405120;
    aBlock[2] = sub_1010FC324;
    aBlock[3] = &unk_101A8E038;
    aBlock[4] = this;
    void aBlock[5] = v8;
    char v33 = v10;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    uint64_t v34 = _Block_copy(aBlock);
    awd::AppContext::setHandler();
    if (v34) {
      _Block_release(v34);
    }
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 1174405120;
    v29[2] = sub_1010FC448;
    xpc_object_t v29[3] = &unk_101A8E068;
    uint64_t v29[4] = this;
    v29[5] = v8;
    int v30 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v31 = _Block_copy(v29);
    awd::AppContext::setHandler();
    if (v31) {
      _Block_release(v31);
    }
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 1174405120;
    v26[2] = sub_100008298;
    _OWORD v26[3] = &unk_101A8E098;
    uint8_t v26[4] = this;
    v26[5] = v8;
    char v27 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v28 = _Block_copy(v26);
    awd::AppContext::setHandler();
    if (v28) {
      _Block_release(v28);
    }
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 1174405120;
    uint64_t v23[2] = sub_100008820;
    void v23[3] = &unk_101A8E0C8;
    v23[4] = this;
    v23[5] = v8;
    long long v24 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v25 = _Block_copy(v23);
    awd::AppContext::setHandler();
    if (v25) {
      _Block_release(v25);
    }
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 1174405120;
    v20[2] = sub_100017EF4;
    void v20[3] = &unk_101A8E0F8;
    _OWORD v20[4] = this;
    v20[5] = v8;
    char v21 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v22 = _Block_copy(v20);
    awd::AppContext::setHandler();
    if (v22) {
      _Block_release(v22);
    }
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1174405120;
    void v17[2] = sub_1000088C8;
    void v17[3] = &unk_101A8E128;
    unint64_t v17[4] = this;
    v17[5] = v8;
    char v18 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v19 = _Block_copy(v17);
    awd::AppContext::setHandler();
    if (v19) {
      _Block_release(v19);
    }
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    wis::WISServerConnection::registerCallBackForTrigger();
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    wis::WISServerConnection::registerCallBackForComponentConfiguration();
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    wis::WISServerConnection::registerCallBackForPIIOrLocationChange();
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    wis::WISServerConnection::registerCallBackForClearProfiles();
    uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 27);
    char v16 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    awd::AwdCommandDriver::checkIn();
    if (v16) {
      sub_10004D2C8(v16);
    }
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
    if (v21) {
      std::__shared_weak_count::__release_weak(v21);
    }
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
    if (v27) {
      std::__shared_weak_count::__release_weak(v27);
    }
    if (v30) {
      std::__shared_weak_count::__release_weak(v30);
    }
    if (v33) {
      std::__shared_weak_count::__release_weak(v33);
    }
    std::__shared_weak_count::__release_weak(v10);
  }
  char v37 = 0;
  __p[0] = _NSConcreteStackBlock;
  __p[1] = (void *)0x40000000;
  xpc_object_t __p[2] = sub_1010FD910;
  __p[3] = &unk_101A8E358;
  __p[4] = this;
  __p[5] = sub_1010FCBB8;
  __p[6] = 0;
  char v37 = _Block_copy(__p);
  __int16 v13 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v13)
  {
    char v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      uint64_t v15 = v14;
      sub_1001644F8(v38, &v37, *((dispatch_object_t *)this + 2));
      sub_100164540(&buf, v38);
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010FC088(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1010FC324(void *a1, int a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = (void *)a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int v7 = v6;
      if (a2 == 1 && a1[5])
      {
        sub_1010FD278((uint64_t)v5);
        uint64_t v8 = v5[4];
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v9 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband on, sending configuration", v9, 2u);
        }
        sub_1010FCFD0((uint64_t)v5);
        sub_1010FD348(v5);
        sub_1010FD410(v5, 1);
      }
      sub_10004D2C8(v7);
    }
  }
}

void sub_1010FC408(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010FC41C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1010FC438(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1010FC448(void *a1, uint64_t a2, int a3)
{
  BOOL v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v6 = a1[4];
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      if (a3 && a1[5]) {
        *(unsigned char *)(v6 + 129) = 0;
      }
      sub_10004D2C8(v7);
    }
  }
}

void sub_1010FC4B8(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (AWDModel *)a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      if (a1[5]) {
        AWDModel::sendQueriableMetric(v3);
      }
      sub_10004D2C8(v4);
    }
  }
}

void AWDModel::sendQueriableMetric(AWDModel *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010FC654(void *a1, const void *a2, size_t a3)
{
  BOOL v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      if (a1[5])
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v11 = 0;
        sub_1001E7940(__p, a2, (uint64_t)a2 + a3, a3);
        __p[1] = 0;
        uint64_t v11 = 0;
        __p[0] = 0;
        uint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
        if (v9)
        {
          if (std::__shared_weak_count::lock(v9)) {
            operator new();
          }
        }
        sub_100088B9C();
      }
      sub_10004D2C8(v8);
    }
  }
}

void sub_1010FC7C0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void AWDModel::enableMetricSubmissionInd(AWDModel *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1010FC8C8(void *a1, int a2, int a3)
{
  BOOL v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      if (a1[5])
      {
        uint64_t v9 = *(NSObject **)(v7 + 32);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = a3;
          __int16 v12 = 1024;
          int v13 = a2;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I ServerConn: received PII update: %d,%d", buf, 0xEu);
        }
        char v10 = *(std::__shared_weak_count **)(v7 + 8);
        if (v10)
        {
          if (std::__shared_weak_count::lock(v10)) {
            operator new();
          }
        }
        sub_100088B9C();
      }
      sub_10004D2C8(v8);
    }
  }
}

void sub_1010FCA68(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1010FCA78(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      if (a1[5])
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
        if (v5)
        {
          if (std::__shared_weak_count::lock(v5)) {
            operator new();
          }
        }
        sub_100088B9C();
      }
      sub_10004D2C8(v4);
    }
  }
}

void sub_1010FCBB8(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 129);
    int v4 = *(unsigned __int8 *)(a1 + 128);
    v6[0] = 67109376;
    v6[1] = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Woke from low power with fNeedToSendConfiguration: %d, fSubmissionAllowed: %d", (uint8_t *)v6, 0xEu);
  }
  if (*(unsigned char *)(a1 + 129) && *(unsigned char *)(a1 + 128))
  {
    sub_1010FD278(a1);
    uint64_t v5 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Woke from low power in dirty state; sending configuration again.",
        (uint8_t *)v6,
        2u);
    }
    sub_1010FCFD0(a1);
    sub_1010FD348((void *)a1);
    sub_1010FD410((void *)a1, 1);
  }
}

void sub_1010FCCD8(uint64_t a1, void *a2)
{
  if (a2[2] == *(void *)(a1 + 120))
  {
    int v4 = (void *)*a2;
    uint64_t v2 = a2 + 1;
    int v3 = v4;
    if (v4 == v2) {
      return;
    }
    uint64_t v5 = *(void **)(a1 + 104);
    while (1)
    {
      BOOL v6 = *((_DWORD *)v3 + 7) == *((_DWORD *)v5 + 7) && *((unsigned __int8 *)v3 + 32) == *((unsigned __int8 *)v5 + 32);
      if (!v6) {
        break;
      }
      __int16 v7 = (void *)v3[1];
      int v8 = v3;
      if (v7)
      {
        do
        {
          int v3 = v7;
          __int16 v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v3 = (void *)v8[2];
          BOOL v6 = *v3 == (void)v8;
          int v8 = v3;
        }
        while (!v6);
      }
      uint64_t v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          char v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          char v10 = (void *)v5[2];
          BOOL v6 = *v10 == (void)v5;
          uint64_t v5 = v10;
        }
        while (!v6);
      }
      uint64_t v5 = v10;
      if (v3 == v2) {
        return;
      }
    }
  }
  uint64_t v11 = *(void *)(a1 + 112);
  if (v11)
  {
    uint64_t v12 = a1 + 112;
    do
    {
      int v13 = *(_DWORD *)(v11 + 28);
      BOOL v14 = v13 < 1;
      if (v13 >= 1) {
        uint64_t v15 = (uint64_t *)v11;
      }
      else {
        uint64_t v15 = (uint64_t *)(v11 + 8);
      }
      if (!v14) {
        uint64_t v12 = v11;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
    if (v12 != a1 + 112 && *(int *)(v12 + 28) <= 1)
    {
      if (*(unsigned char *)(v12 + 32)) {
        sub_1010FD410((void *)a1, *(unsigned __int8 *)(a1 + 128));
      }
    }
  }
}

uint64_t AWDModel::shutdown(AWDModel *this, group_session a2)
{
  int v4 = *((void *)this + 4);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Shutdown AWDModel", buf, 2u);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 27);
  group[1] = *((dispatch_group_t *)this + 26);
  uint64_t v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  awd::AwdCommandDriver::checkOut();
  if (v11) {
    sub_10004D2C8(v11);
  }
  uint64_t v6 = *((void *)this + 28);
  __int16 v7 = *(NSObject **)a2.var0.fObj;
  group[0] = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v6 + 16))(v6, group);
  if (group[0])
  {
    dispatch_group_leave(group[0]);
    if (group[0]) {
      dispatch_release(group[0]);
    }
  }
  for (uint64_t i = (void *)*((void *)this + 31); i != (void *)((char *)this + 240); uint64_t i = (void *)i[1])
    sub_10016111C(i + 2);
  sub_100160A84((atomic_uint **)this + 30);
  return ctu::RestModule::disconnect((AWDModel *)((char *)this + 56));
}

void sub_1010FCF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group, uint64_t a11, uint64_t a12)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AWDModel::start(AWDModel *this)
{
  uint64_t v2 = *((void *)this + 4);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Start AWDModel", v4, 2u);
  }
  return (*(uint64_t (**)(void))(**((void **)this + 28) + 8))(*((void *)this + 28));
}

void sub_1010FCFD0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 200);
    *(_DWORD *)long long buf = 67109120;
    int v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Sending configuration for mode %d", buf, 8u);
  }
  *(unsigned char *)(a1 + 129) = 1;
  int v4 = *(std::__shared_weak_count **)(a1 + 216);
  uint64_t v5 = *(void *)(a1 + 224);
  uint64_t v9 = *(void *)(a1 + 208);
  char v10 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void *)(a1 + 72);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1010FD184;
  void v7[3] = &unk_101A8E218;
  void v7[4] = a1;
  aBlock = _Block_copy(v7);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void **))(*(void *)v5 + 32))(v5, &v9, 1, v6, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
}

void sub_1010FD144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, uint64_t a15, uint64_t a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1010FD184(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(NSObject **)(v3 + 32);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      int v6 = *(_DWORD *)(v3 + 200);
      int v8 = 67109120;
      int v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Sending configuration for mode %d :: success", (uint8_t *)&v8, 8u);
    }
    *(unsigned char *)(v3 + 129) = 0;
  }
  else if (v5)
  {
    int v7 = *(_DWORD *)(v3 + 200);
    int v8 = 67109120;
    int v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#E Sending configuration for mode %d :: failed", (uint8_t *)&v8, 8u);
  }
}

void sub_1010FD278(uint64_t a1)
{
  *(unsigned char *)(a1 + 129) = 1;
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 216);
  uint64_t v2 = *(void *)(a1 + 224);
  uint64_t v4 = *(void *)(a1 + 208);
  BOOL v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  aBlock = _Block_copy(&stru_101A8E258);
  (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v2 + 40))(v2, &v4, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
}

void sub_1010FD31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, uint64_t a11, std::__shared_weak_count *a12)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010FD348(void *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)a1[27];
  uint64_t v2 = a1[28];
  uint64_t v4 = a1[26];
  BOOL v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  aBlock = _Block_copy(&stru_101A8E298);
  (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)v2 + 48))(v2, &v4, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
}

void sub_1010FD3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, uint64_t a11, std::__shared_weak_count *a12)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010FD410(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[27];
  uint64_t v4 = a1[28];
  uint64_t v6 = a1[26];
  int v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  aBlock = _Block_copy(&stru_101A8E2D8);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void **))(*(void *)v4 + 24))(v4, &v6, a2, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1010FD4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, uint64_t a11, std::__shared_weak_count *a12)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void AWDModel::handleSignalBars(AWDModel *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_1010FD5DC(NSObject *a1, int a2, uint64_t a3, unint64_t a4)
{
  if (os_log_type_enabled(a1, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67110146;
    v8[1] = a2;
    __int16 v9 = 2080;
    char v10 = sub_1010FAEAC(a2);
    __int16 v11 = 1024;
    unsigned int v12 = a4 / 0x3E8;
    __int16 v13 = 1024;
    int v14 = 1000 * (a4 % 0x3E8);
    __int16 v15 = 1024;
    int v16 = dword_101B13180;
    _os_log_impl((void *)&_mh_execute_header, a1, OS_LOG_TYPE_DEFAULT, "#I Sending instrument id %d (%s), with timestamp %d.%06d, with Instrument serial number %d", (uint8_t *)v8, 0x24u);
  }
  ++dword_101B13180;
  return kdebug_trace();
}

void sub_1010FD76C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010FD7A4(uint64_t a1)
{
}

uint64_t sub_1010FD7C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1010FD804(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    sub_100160A84((atomic_uint **)(result + 240));
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 232);
    if (v2) {
      sub_10004D2C8(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 216);
    if (v3) {
      sub_10004D2C8(v3);
    }
    sub_1010FD8C0((wis::WISServerConnection **)(v1 + 192));
    sub_100019DF4((uint64_t *)(v1 + 152));
    sub_1000346F8(v1 + 104, *(void **)(v1 + 112));
    uint64_t v4 = *(void **)(v1 + 80);
    if (v4)
    {
      *(void *)(v1 + 88) = v4;
      operator delete(v4);
    }
    BOOL v5 = *(std::__shared_weak_count **)(v1 + 64);
    if (v5) {
      sub_10004D2C8(v5);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v1 + 48);
    if (v6) {
      sub_10004D2C8(v6);
    }
    ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(v1 + 32));
    sub_100087E88((void *)v1);
    operator delete();
  }
  return result;
}

wis::WISServerConnection *sub_1010FD8C0(wis::WISServerConnection **a1)
{
  __n128 result = *a1;
  *a1 = 0;
  if (result)
  {
    wis::WISServerConnection::~WISServerConnection(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1010FD910(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[5];
  uint64_t v2 = a1[6];
  uint64_t v3 = (void *)(a1[4] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

void *sub_1010FD938(void *a1)
{
  *a1 = off_101A8E388;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1010FD984(void *a1)
{
  *a1 = off_101A8E388;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void sub_1010FD9F0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::lock(v1);
  }
  operator new();
}

void sub_1010FDAA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010FDAB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  return !v1 || *(void *)(v1 + 8) == -1;
}

void sub_1010FDAD8()
{
}

void *sub_1010FDB44(void *a1)
{
  *a1 = off_101A8E3D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1010FDB90(void *a1)
{
  *a1 = off_101A8E3D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void sub_1010FDBFC()
{
}

void sub_1010FDC6C()
{
}

__n128 sub_1010FDC80(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A8E418;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010FDCD4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A8E418;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1010FDD0C(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  BOOL v5 = (void *)v3[1];
  __int16 v9 = (void **)*v3;
  char v10 = v5;
  if (v3[2])
  {
    void v5[2] = &v10;
    *uint64_t v3 = v4;
    void *v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    __int16 v9 = &v10;
  }
  sub_10003447C((uint64_t)v3, a2);
  uint64_t v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  int v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_1000346F8((uint64_t)&v9, v10);
}

void sub_1010FDDAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_1010FDDC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010FDE04()
{
}

uint64_t *sub_1010FDE10(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(void *)v1;
  sub_10005C9A4(*(void *)v1 + 80, (__n128 *)(v1 + 8));
  if (*(_DWORD *)(v2 + 200) != 1) {
    sub_1010FCFD0(v2);
  }
  sub_1010FDE88(&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_1010FDE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_1010FDE88(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 8);
    if (v2)
    {
      *(void *)(v1 + 16) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

void sub_1010FDEE0(uint64_t **a1)
{
  uint64_t v2 = a1;
  uint64_t v1 = **a1;
  *(void *)(v1 + 88) = *(void *)(v1 + 80);
  if (*(_DWORD *)(v1 + 200) != 1) {
    sub_1010FD278(v1);
  }
  operator delete();
}

void sub_1010FDF48()
{
}

void sub_1010FDF74(uint64_t **a1)
{
  uint64_t v4 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = *((unsigned __int8 *)v1 + 8);
  *(unsigned char *)(v2 + 128) = v3;
  sub_1010FD410((void *)v2, v3);
  operator delete();
}

void sub_1010FDFD0()
{
}

void sub_1010FDFFC(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *((void *)*a1 + 2);
  uint64_t v3 = *(void *)(v2 + 208);
  uint64_t v6 = v2 + 216;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 216);
  uint64_t v5 = *(void *)(v6 + 8);
  uint64_t v11 = v3;
  unsigned int v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *v1;
  uint64_t v8 = v1[1];
  uint64_t v9 = v1[2];
  aBlock = _Block_copy(&stru_101A8E4A8);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, void **))(*(void *)v5 + 56))(v5, &v11, v7, v8, v9, &aBlock);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
  operator delete();
}

void sub_1010FE0E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock, uint64_t a11, std::__shared_weak_count *a12)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  operator delete();
}

void sub_1010FE138(void ***a1)
{
  uint64_t v6 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = v2[4];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((unsigned __int8 *)v1 + 8);
    int v5 = *((unsigned __int8 *)v1 + 9);
    *(_DWORD *)long long buf = 67109376;
    int v8 = v4;
    char v9 = 0;
    char v10 = 4;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Setting pii=%d and location=%d.", buf, 0xEu);
  }
  *(_WORD *)long long buf = *((_WORD *)v1 + 4);
  awd::AppContext::setAppSettings_model();
  sub_1010FD348(v2);
  operator delete();
}

void sub_1010FE238()
{
}

void sub_1010FE264(uint64_t **a1)
{
  int v5 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = *(NSObject **)(v2 + 32);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((_DWORD *)v1 + 2);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Got Signal bars %d.", buf, 8u);
    uint64_t v3 = *(NSObject **)(v2 + 32);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "kAWDInstrumentNetworkCondition";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = dword_101B13180;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Sending instrument id %s, with Instrument serial number %d", buf, 0x12u);
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  gettimeofday((timeval *)buf, 0);
  ++dword_101B13180;
  kdebug_trace();
  operator delete();
}

void sub_1010FE418()
{
}

void sub_1010FE444(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1010FE4B8()
{
}

void *sub_1010FE4DC(void *a1, void *a2, int a3)
{
  int v4 = (void *)sub_100B34F98((uint64_t)a1, a2, a3, (uint64_t)"Roaming Info 3GPP");
  void *v4 = off_101A8E4D8;
  MCC::MCC((MCC *)(v4 + 9));
  MNC::MNC((MNC *)(a1 + 13));
  a1[17] = 0;
  a1[18] = 0;
  a1[19] = 0;
  a1[20] = 0xFFFFFFFF00000000;
  return a1;
}

void sub_1010FE540(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*(void **)(v1 + 80));
  }
  sub_100B350AC((void *)v1);
  _Unwind_Resume(a1);
}

void sub_1010FE56C(uint64_t a1)
{
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v26 = 0;
  v23[0] = 0;
  v23[1] = 0;
  uint64_t v24 = 0;
  memset(&__str, 0, sizeof(__str));
  char v21 = 0;
  int v20 = -1;
  sub_1011E3BC0(*(_DWORD *)(a1 + 48), &v19);
  uint64_t v2 = (os_log_t *)(a1 + 8);
  BOOL v3 = sub_100224850((os_log_t *)(a1 + 8), (CFStringRef *)&v19, (uint64_t)v25);
  sub_1000558F4(&v19);
  if (!v3) {
    goto LABEL_16;
  }
  sub_1011E3DAC(*(_DWORD *)(a1 + 48), &v18);
  BOOL v4 = sub_100224850((os_log_t *)(a1 + 8), (CFStringRef *)&v18, (uint64_t)v23);
  sub_1000558F4(&v18);
  if (!v4) {
    goto LABEL_16;
  }
  sub_1011E3F98(*(_DWORD *)(a1 + 48), &v17);
  BOOL v5 = sub_100224850((os_log_t *)(a1 + 8), (CFStringRef *)&v17, (uint64_t)&__str);
  sub_1000558F4(&v17);
  if (!v5) {
    goto LABEL_16;
  }
  sub_1011E4184(*(_DWORD *)(a1 + 48), &v16);
  BOOL v6 = sub_1010FE860((NSObject **)(a1 + 8), (CFStringRef *)&v16, &v21);
  sub_1000558F4(&v16);
  if (v6
    && (sub_1011E4370(*(_DWORD *)(a1 + 48), &v15),
        BOOL v7 = sub_1010FEB2C((NSObject **)(a1 + 8), (CFStringRef *)&v15, &v20),
        sub_1000558F4(&v15),
        v7))
  {
    int v8 = *v2;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Successfully retrieved cached 3GPP operator data", v12, 2u);
    }
    MCC::MCC();
    MCC::operator=();
    if (v14 < 0) {
      operator delete(__p);
    }
    MNC::MNC();
    MCC::operator=();
    if (v14 < 0) {
      operator delete(__p);
    }
    std::string::operator=((std::string *)(a1 + 136), &__str);
    if (v21) {
      int v9 = 4;
    }
    else {
      int v9 = 5;
    }
    int v10 = v20;
    *(_DWORD *)(a1 + 160) = v9;
    *(_DWORD *)(a1 + 164) = v10;
  }
  else
  {
LABEL_16:
    int v11 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#N Not all fields in 3GPP operator data are present", v12, 2u);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
}

void sub_1010FE7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v40 - 57) < 0) {
    operator delete(*(void **)(v40 - 80));
  }
  if (*(char *)(v40 - 33) < 0) {
    operator delete(*(void **)(v40 - 56));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010FE860(NSObject **a1, CFStringRef *a2, unsigned char *a3)
{
  char v18 = 0;
  v19.__r_.__value_.__r.__words[0] = (std::string::size_type)CFPreferencesCopyValue(*a2, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_1000BE34C(&v18, (CFTypeRef *)&v19.__r_.__value_.__l.__data_);
  if (v18) {
    BOOL v6 = sub_100084B4C;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    v19.__r_.__value_.__s.__data_[0] = 0;
    ctu::cf::assign((ctu::cf *)&v19, v18, v5);
    int v7 = v19.__r_.__value_.__s.__data_[0];
    *a3 = v19.__r_.__value_.__s.__data_[0];
    int v8 = *a1;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    memset(&v17, 0, sizeof(v17));
    v19.__r_.__value_.__r.__words[0] = 0;
    v19.__r_.__value_.__l.__size_ = (std::string::size_type)v19.__r_.__value_.__r.__words + 2;
    if (v7) {
      std::string::value_type v9 = 49;
    }
    else {
      std::string::value_type v9 = 48;
    }
    v19.__r_.__value_.__s.__data_[2] = v9;
    v19.__r_.__value_.__r.__words[2] = (std::string::size_type)v19.__r_.__value_.__r.__words + 3;
    sub_10006E5EC(&v17, &v19.__r_.__value_.__s.__data_[2], &v19.__r_.__value_.__s.__data_[3], 1uLL);
    int v10 = SHIBYTE(v17.__r_.__value_.__r.__words[2]);
    std::string::size_type v11 = v17.__r_.__value_.__r.__words[0];
    memset(&v19, 0, sizeof(v19));
    ctu::cf::assign();
    unsigned int v12 = &v17;
    if (v10 < 0) {
      unsigned int v12 = (std::string *)v11;
    }
    std::string __p = v19;
    p_p = &__p;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v22 = v12;
    __int16 v23 = 2080;
    uint64_t v24 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Retrieved value: %s for key %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    char v14 = *a1;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    memset(&v19, 0, sizeof(v19));
    ctu::cf::assign();
    std::string v17 = v19;
    __int16 v15 = &v17;
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#N Failed to retrieve value for key %s", (uint8_t *)&__p, 0xCu);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
LABEL_21:
  sub_100062778((const void **)&v18);
  return v6 != 0;
}

void sub_1010FEACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_100062778(&a16);
  _Unwind_Resume(a1);
}

BOOL sub_1010FEB2C(NSObject **a1, CFStringRef *a2, _DWORD *a3)
{
  int v20 = 0;
  *(void *)&long long v28 = CFPreferencesCopyValue(*a2, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_10086FCF0(&v20, (CFTypeRef *)&v28);
  if (v20) {
    BOOL v6 = sub_100081E58;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    LODWORD(v28) = 0;
    ctu::cf::assign((ctu::cf *)&v28, v20, v5);
    int v7 = v28;
    *a3 = v28;
    int v8 = *a1;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      memset(&v23, 0, sizeof(v23));
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      int v30 = (char *)&v28 + 2;
      char v31 = (char *)&v29 + 7;
      if (v7 >= 0) {
        int v9 = v7;
      }
      else {
        int v9 = -v7;
      }
      LODWORD(__p[0]) = v9;
      __p[1] = (char *)&v29 + 7;
      LOBYTE(v22) = 48;
      HIDWORD(v22) = 48;
      uint64_t v10 = sub_100DA1D8C((uint64_t)__p);
      std::string::size_type v11 = (std::string::value_type *)v10;
      if (v7 < 0)
      {
        *(unsigned char *)(v10 - 1) = 45;
        std::string::size_type v11 = (std::string::value_type *)(v10 - 1);
      }
      int v30 = v11;
      char v31 = (char *)&v29 + 7;
      sub_10006E5EC(&v23, v11, (std::string::value_type *)&v29 + 7, (char *)&v29 + 7 - v11);
      int v12 = SHIBYTE(v23.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = v23.__r_.__value_.__r.__words[0];
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      ctu::cf::assign();
      char v14 = &v23;
      if (v12 < 0) {
        char v14 = (std::string *)v13;
      }
      *(_OWORD *)std::string __p = v28;
      uint64_t v22 = v29;
      __int16 v15 = __p;
      if (v29 < 0) {
        __int16 v15 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315394;
      char v25 = v14;
      __int16 v26 = 2080;
      char v27 = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Retrieved value: %s for key %s", buf, 0x16u);
      if (SHIBYTE(v22) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      {
        int v16 = (void *)v23.__r_.__value_.__r.__words[0];
LABEL_24:
        operator delete(v16);
      }
    }
  }
  else
  {
    std::string v17 = *a1;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      long long v28 = 0uLL;
      uint64_t v29 = 0;
      ctu::cf::assign();
      *(_OWORD *)std::string __p = v28;
      uint64_t v22 = v29;
      char v18 = __p;
      if (v29 < 0) {
        char v18 = (void **)__p[0];
      }
      LODWORD(v23.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#N Failed to retrieve value for key %s", (uint8_t *)&v23, 0xCu);
      if (SHIBYTE(v22) < 0)
      {
        int v16 = __p[0];
        goto LABEL_24;
      }
    }
  }
  sub_1000570E8((const void **)&v20);
  return v6 != 0;
}

void sub_1010FEDD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 73) < 0) {
    operator delete(*(void **)(v2 - 96));
  }
  sub_1000570E8((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1010FEE38(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1010FEEE4()
{
}

void sub_1010FEF08(uint64_t a1)
{
  memset(&__str, 0, sizeof(__str));
  int v22 = -1;
  int v21 = -1;
  char v20 = 0;
  int v19 = -1;
  sub_1011E455C(*(_DWORD *)(a1 + 48), &v18);
  uint64_t v2 = (os_log_t *)(a1 + 8);
  BOOL v3 = sub_100224850((os_log_t *)(a1 + 8), (CFStringRef *)&v18, (uint64_t)&__str);
  sub_1000558F4(&v18);
  if (!v3) {
    goto LABEL_12;
  }
  sub_1011E4748(*(_DWORD *)(a1 + 48), &v17);
  BOOL v4 = sub_1010FEB2C((NSObject **)(a1 + 8), (CFStringRef *)&v17, &v22);
  sub_1000558F4(&v17);
  if (!v4) {
    goto LABEL_12;
  }
  sub_1011E4934(*(_DWORD *)(a1 + 48), &v16);
  BOOL v5 = sub_1010FEB2C((NSObject **)(a1 + 8), (CFStringRef *)&v16, &v21);
  sub_1000558F4(&v16);
  if (!v5) {
    goto LABEL_12;
  }
  sub_1011E4B20(*(_DWORD *)(a1 + 48), &v15);
  BOOL v6 = sub_1010FE860((NSObject **)(a1 + 8), (CFStringRef *)&v15, &v20);
  sub_1000558F4(&v15);
  if (v6
    && (sub_1011E4D0C(*(_DWORD *)(a1 + 48), &v14),
        BOOL v7 = sub_1010FEB2C((NSObject **)(a1 + 8), (CFStringRef *)&v14, &v19),
        sub_1000558F4(&v14),
        v7))
  {
    int v8 = *v2;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string::size_type v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Successfully retrieved cached 3GPP2 operator data", v13, 2u);
    }
    std::string::operator=((std::string *)(a1 + 72), &__str);
    int v9 = v21;
    *(_DWORD *)(a1 + 96) = v22;
    *(_DWORD *)(a1 + 100) = v9;
    if (v20) {
      int v10 = 4;
    }
    else {
      int v10 = 5;
    }
    int v11 = v19;
    *(_DWORD *)(a1 + 104) = v10;
    *(_DWORD *)(a1 + 108) = v11;
  }
  else
  {
LABEL_12:
    int v12 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string::size_type v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#N Not all fields in 3GPP2 operator data are present", v13, 2u);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1010FF0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000558F4((const void **)va);
  if (*(char *)(v3 - 33) < 0) {
    operator delete(*(void **)(v3 - 56));
  }
  _Unwind_Resume(a1);
}

const void **sub_1010FF180(NSObject **a1, CFStringRef *a2, int *a3)
{
  std::string::size_type v29 = 0;
  __p.__r_.__value_.__r.__words[0] = 0;
  LODWORD(valuePtr.__r_.__value_.__l.__data_) = *a3;
  CFNumberRef v6 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (v6)
  {
    std::string::size_type v7 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
    valuePtr.__r_.__value_.__r.__words[0] = v7;
    sub_1000570E8((const void **)&valuePtr.__r_.__value_.__l.__data_);
  }
  std::string::size_type v29 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  sub_1000570E8((const void **)&__p.__r_.__value_.__l.__data_);
  int v8 = (const void *)v29;
  if (v29) {
    int v9 = sub_100081E58;
  }
  else {
    int v9 = 0;
  }
  int v10 = *a1;
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      memset(&v28, 0, sizeof(v28));
      memset(&valuePtr, 0, sizeof(valuePtr));
      char v37 = &valuePtr.__r_.__value_.__s.__data_[2];
      char v38 = (char *)&valuePtr.__r_.__value_.__r.__words[2] + 7;
      int v12 = *a3;
      if (v12 >= 0) {
        int v13 = v12;
      }
      else {
        int v13 = -v12;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = v13;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&valuePtr.__r_.__value_.__r.__words[2] + 7;
      __p.__r_.__value_.__s.__data_[16] = 48;
      HIDWORD(__p.__r_.__value_.__r.__words[2]) = 48;
      uint64_t v14 = sub_100DA1D8C((uint64_t)&__p);
      __int16 v15 = (std::string::value_type *)v14;
      if (v12 < 0)
      {
        *(unsigned char *)(v14 - 1) = 45;
        __int16 v15 = (std::string::value_type *)(v14 - 1);
      }
      char v37 = v15;
      char v38 = (char *)&valuePtr.__r_.__value_.__r.__words[2] + 7;
      sub_10006E5EC(&v28, v15, (std::string::value_type *)&valuePtr.__r_.__value_.__r.__words[2] + 7, (char *)&valuePtr.__r_.__value_.__r.__words[2] + 7 - v15);
      int v16 = SHIBYTE(v28.__r_.__value_.__r.__words[2]);
      std::string::size_type v17 = v28.__r_.__value_.__r.__words[0];
      memset(&valuePtr, 0, sizeof(valuePtr));
      ctu::cf::assign();
      char v18 = &v28;
      if (v16 < 0) {
        char v18 = (std::string *)v17;
      }
      std::string __p = valuePtr;
      p_p = &__p;
      if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Saving value %s for key %s", (uint8_t *)&buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      int v8 = (const void *)v29;
    }
    CFStringRef v20 = (const __CFString *)kCommCenterPreferencesNoBackupAppID;
    CFPreferencesSetValue(*a2, v8, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    CFPreferencesSynchronize(v20, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  }
  else if (v11)
  {
    memset(&valuePtr, 0, sizeof(valuePtr));
    ctu::cf::assign();
    std::string v28 = valuePtr;
    int v21 = *a3;
    if ((valuePtr.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v28;
    }
    else {
      int v22 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    memset(&buf, 0, sizeof(buf));
    memset(&valuePtr, 0, sizeof(valuePtr));
    char v37 = &valuePtr.__r_.__value_.__s.__data_[2];
    char v38 = (char *)&valuePtr.__r_.__value_.__r.__words[2] + 7;
    if (v21 >= 0) {
      int v23 = v21;
    }
    else {
      int v23 = -v21;
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = v23;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&valuePtr.__r_.__value_.__r.__words[2] + 7;
    __p.__r_.__value_.__s.__data_[16] = 48;
    HIDWORD(__p.__r_.__value_.__r.__words[2]) = 48;
    uint64_t v24 = sub_100DA1D8C((uint64_t)&__p);
    char v25 = (std::string::value_type *)v24;
    if (v21 < 0)
    {
      *(unsigned char *)(v24 - 1) = 45;
      char v25 = (std::string::value_type *)(v24 - 1);
    }
    char v37 = v25;
    char v38 = (char *)&valuePtr.__r_.__value_.__r.__words[2] + 7;
    sub_10006E5EC(&buf, v25, (std::string::value_type *)&valuePtr.__r_.__value_.__r.__words[2] + 7, (char *)&valuePtr.__r_.__value_.__r.__words[2] + 7 - v25);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)char v32 = 136315394;
    char v33 = v22;
    __int16 v34 = 2080;
    char v35 = p_buf;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#N Failed to created CF object for key %s with value: %s", v32, 0x16u);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  return sub_1000570E8((const void **)&v29);
}

void sub_1010FF504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 - 89) < 0) {
    operator delete(*(void **)(v27 - 112));
  }
  sub_1000570E8(&a15);
  _Unwind_Resume(a1);
}

const void **sub_1010FF588(NSObject **a1, CFStringRef *a2, unsigned char *a3)
{
  if (*a3) {
    CFNumberRef v6 = &kCFBooleanTrue;
  }
  else {
    CFNumberRef v6 = &kCFBooleanFalse;
  }
  CFBooleanRef v7 = *v6;
  v27.__r_.__value_.__r.__words[0] = 0;
  sub_100062778((const void **)&v27.__r_.__value_.__l.__data_);
  CFBooleanRef v26 = v7;
  v27.__r_.__value_.__r.__words[0] = 0;
  sub_100062778((const void **)&v27.__r_.__value_.__l.__data_);
  if (v7) {
    int v8 = sub_100084B4C;
  }
  else {
    int v8 = 0;
  }
  int v9 = *a1;
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      memset(&v25, 0, sizeof(v25));
      v27.__r_.__value_.__r.__words[0] = 0;
      v27.__r_.__value_.__l.__size_ = (std::string::size_type)v27.__r_.__value_.__r.__words + 2;
      if (*a3) {
        std::string::value_type v11 = 49;
      }
      else {
        std::string::value_type v11 = 48;
      }
      v27.__r_.__value_.__s.__data_[2] = v11;
      v27.__r_.__value_.__r.__words[2] = (std::string::size_type)v27.__r_.__value_.__r.__words + 3;
      sub_10006E5EC(&v25, &v27.__r_.__value_.__s.__data_[2], &v27.__r_.__value_.__s.__data_[3], 1uLL);
      int v12 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
      std::string::size_type v13 = v25.__r_.__value_.__r.__words[0];
      memset(&v27, 0, sizeof(v27));
      ctu::cf::assign();
      uint64_t v14 = &v25;
      if (v12 < 0) {
        uint64_t v14 = (std::string *)v13;
      }
      std::string __p = v27;
      p_p = &__p;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315394;
      std::string::size_type v29 = v14;
      __int16 v30 = 2080;
      char v31 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Saving value %s for key %s", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      CFBooleanRef v7 = v26;
    }
    CFStringRef v16 = (const __CFString *)kCommCenterPreferencesNoBackupAppID;
    CFPreferencesSetValue(*a2, v7, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    CFPreferencesSynchronize(v16, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  }
  else if (v10)
  {
    memset(&v27, 0, sizeof(v27));
    ctu::cf::assign();
    std::string v25 = v27;
    int v17 = *a3;
    int v18 = SHIBYTE(v27.__r_.__value_.__r.__words[2]);
    std::string::size_type v19 = v27.__r_.__value_.__r.__words[0];
    memset(&__p, 0, sizeof(__p));
    v27.__r_.__value_.__r.__words[0] = 0;
    v27.__r_.__value_.__l.__size_ = (std::string::size_type)v27.__r_.__value_.__r.__words + 2;
    if (v17) {
      std::string::value_type v20 = 49;
    }
    else {
      std::string::value_type v20 = 48;
    }
    v27.__r_.__value_.__s.__data_[2] = v20;
    v27.__r_.__value_.__r.__words[2] = (std::string::size_type)v27.__r_.__value_.__r.__words + 3;
    sub_10006E5EC(&__p, &v27.__r_.__value_.__s.__data_[2], &v27.__r_.__value_.__s.__data_[3], 1uLL);
    int v21 = &v25;
    if (v18 < 0) {
      int v21 = (std::string *)v19;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &__p;
    }
    else {
      int v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    std::string::size_type v29 = v21;
    __int16 v30 = 2080;
    char v31 = v22;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#N Failed to created CF object for key %s with value: %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
  return sub_100062778((const void **)&v26);
}

void sub_1010FF88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,const void *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  sub_100062778(&a23);
  _Unwind_Resume(a1);
}

void sub_1010FF904(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    IntCFNumberRef Value = MCC::getIntValue((MCC *)(a1 + 72));
    int IntegerWidth = MNC::getIntegerWidth((MNC *)(a1 + 104));
    int v5 = MCC::getIntValue((MCC *)(a1 + 104));
    CFNumberRef v6 = (void *)(a1 + 136);
    if (*(char *)(a1 + 159) < 0) {
      CFNumberRef v6 = (void *)*v6;
    }
    v7[0] = 67110402;
    v7[1] = IntValue;
    __int16 v8 = 1024;
    int v9 = IntegerWidth;
    __int16 v10 = 1024;
    int v11 = v5;
    __int16 v12 = 2080;
    std::string::size_type v13 = v6;
    __int16 v14 = 2080;
    uint64_t v15 = asString();
    __int16 v16 = 2080;
    uint64_t v17 = asString();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I 3GPP Operator Roaming: Network MCC: %03d, Network MNC: %0.*d, Current operator bundle ID: %s, Roaming: %s, RAT: %s", (uint8_t *)v7, 0x32u);
  }
}

void sub_1010FFA34(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    int v4 = *(_DWORD *)(a1 + 96);
    int v5 = *(_DWORD *)(a1 + 100);
    int v6 = 136316162;
    CFBooleanRef v7 = v3;
    __int16 v8 = 1024;
    int v9 = v4;
    __int16 v10 = 1024;
    int v11 = v5;
    __int16 v12 = 2080;
    uint64_t v13 = asString();
    __int16 v14 = 2080;
    uint64_t v15 = asString();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I 3GPP2 Operator Roaming: Network ISO: %s, SID: %d, NID: %d, Roaming: %s, RAT: %s", (uint8_t *)&v6, 0x2Cu);
  }
}

void *sub_1010FFB30(uint64_t a1)
{
  *(void *)a1 = off_101A8E4D8;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }

  return sub_100B350AC((void *)a1);
}

void sub_1010FFBB0(uint64_t a1)
{
  *(void *)a1 = off_101A8E4D8;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  sub_100B350AC((void *)a1);

  operator delete();
}

void *sub_1010FFC44(uint64_t a1)
{
  *(void *)a1 = off_101A8E500;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }

  return sub_100B350AC((void *)a1);
}

void sub_1010FFCA4(uint64_t a1)
{
  *(void *)a1 = off_101A8E500;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  sub_100B350AC((void *)a1);

  operator delete();
}

void sub_1010FFD18(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1010FFD98(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010FFDD4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010FFE0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1010FFE3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1010FFE80(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1010FFF00(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010FFF3C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010FFF74(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1010FFFA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1011002F0(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_101100680(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_101100A00(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_101100D90(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_101100E18(uint64_t a1)
{
  return a1;
}

void sub_101100E44(uint64_t a1)
{
  operator delete();
}

void *sub_101100E90(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A8E648;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

void sub_101100EE8(id *a1)
{
  operator delete(a1);
}

uint64_t sub_101100F24(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A8E6A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_101100F64()
{
  return &off_101A8E6A8;
}

uint64_t sub_101100F70(uint64_t a1)
{
  return a1;
}

void sub_101100F9C(uint64_t a1)
{
  operator delete();
}

void *sub_101100FE8(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A8E6C8;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_101101040(uint64_t a1, void *a2)
{
  *a2 = off_101A8E6C8;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_101101088(uint64_t a1)
{
}

void sub_101101090(id *a1)
{
  operator delete(a1);
}

const void **sub_1011010CC(uint64_t a1, const void **a2)
{
  char v5 = *a2;
  *a2 = 0;
  uint64_t v3 = objc_opt_new();
  [v3 setLegacyInfo:v5];
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();

  return sub_100044D00(&v5);
}

void sub_10110113C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100044D00((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10110115C(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A8E728)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10110119C()
{
  return &off_101A8E728;
}

uint64_t sub_1011011A8(uint64_t a1)
{
  return a1;
}

void sub_1011011D4(uint64_t a1)
{
  operator delete();
}

void *sub_101101220(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A8E748;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_101101278(uint64_t a1, void *a2)
{
  *a2 = off_101A8E748;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1011012C0(uint64_t a1)
{
}

void sub_1011012C8(id *a1)
{
  operator delete(a1);
}

void sub_101101304(uint64_t a1, void *a2)
{
  id v3 = +[NSNumber numberWithUnsignedLongLong:*a2];
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_101101370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_101101384(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A8E7B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1011013C4()
{
  return &off_101A8E7B8;
}

uint64_t sub_1011013D0(uint64_t a1)
{
  return a1;
}

void sub_1011013FC(uint64_t a1)
{
  operator delete();
}

void *sub_101101448(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A8E7D8;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_1011014A0(uint64_t a1, void *a2)
{
  *a2 = off_101A8E7D8;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1011014E8(uint64_t a1)
{
}

void sub_1011014F0(id *a1)
{
  operator delete(a1);
}

void sub_10110152C(uint64_t a1, void *a2, unsigned int *a3)
{
  id v4 = +[CTCellIdInfo cellIdInfoFromCellId:*a2 baseId:*a3];
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_1011015A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1011015B4(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A8E848)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1011015F4()
{
  return &off_101A8E848;
}

uint64_t sub_101101600(uint64_t a1)
{
  return a1;
}

void sub_10110162C(uint64_t a1)
{
  operator delete();
}

void *sub_101101678(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A8E868;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_1011016D0(uint64_t a1, void *a2)
{
  *a2 = off_101A8E868;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_101101718(uint64_t a1)
{
}

void sub_101101720(id *a1)
{
  operator delete(a1);
}

void sub_10110175C(uint64_t a1, void *a2)
{
  id v3 = +[NSNumber numberWithUnsignedLongLong:*a2];
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_1011017C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1011017DC(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A8E8C8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10110181C()
{
  return &off_101A8E8C8;
}

void sub_101101828(void ***a1)
{
  *a1 = (void **)off_101A8E8E8;
  sub_100110A40(a1 + 1, 0);

  PB::Base::~Base((PB::Base *)a1);
}

void sub_101101880(void ***a1)
{
  *a1 = (void **)off_101A8E8E8;
  sub_100110A40(a1 + 1, 0);
  PB::Base::~Base((PB::Base *)a1);

  operator delete();
}

uint64_t sub_1011018EC(uint64_t result, uint64_t a2)
{
  *(void *)id result = off_101A8E8E8;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  if (*(unsigned char *)(a2 + 20))
  {
    int v2 = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(result + 20) |= 1u;
    *(_DWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_1011019B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(const PB::Data **)(a1 + 8);
  if (v5) {
    PB::TextFormatter::format(this, "csn", v5);
  }
  if (*(unsigned char *)(a1 + 20)) {
    PB::TextFormatter::format(this, "reason", *(_DWORD *)(a1 + 16));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101101A2C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      unsigned __int8 v19 = v11 & 7;
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v22 = *((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        uint64_t v24 = *(void *)this;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)this + 1);
          }
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v32 = v22 + 1;
            char v33 = *(unsigned char *)(v24 + v22);
            *((void *)this + 1) = v32;
            v27 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v22 = v32;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v27) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v27) = 0;
          }
        }
        else
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          while (1)
          {
            unint64_t v28 = v22 + 1;
            *((void *)this + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v14 = v26++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v27;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(this, v20, v19, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14)
      {
LABEL_19:
        unsigned __int8 v19 = 0;
        LODWORD(v20) = 0;
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101101CC0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Data **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::write(this, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(this, v5, 2u);
  }
  return result;
}

CellularUsageStoreInterface *sub_101101D28(CellularUsageStoreInterface *this)
{
  *(void *)this = &off_101A8E938;
  if (*((void *)this + 8)) {
    CPRecordStoreDestroy();
  }
  unint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v3) {
    sub_10004D2C8(v3);
  }
  CellularUsageStoreInterface::~CellularUsageStoreInterface(this);
  ctu::OsLogLogger::~OsLogLogger((CellularUsageStoreInterface *)((char *)this + 40));
  sub_100087E88((void *)this + 1);
  return this;
}

void sub_101101DB0(CellularUsageStoreInterface *a1)
{
  sub_101101D28(a1);

  operator delete();
}

uint64_t sub_101101DE8()
{
  CPRecordStoreCreateTablesForClass();
  CPRecordStoreCreateTablesForClass();
  CPRecordStoreCreateTablesForClass();
  CPSqliteConnectionSetIntegerForProperty();
  for (uint64_t i = 0; i != 32; i += 8)
  {
    uint64_t result = CPSqliteConnectionStatementForSQL();
    if (result)
    {
      CPSqliteStatementPerform();
      uint64_t result = CPSqliteStatementReset();
    }
  }
  return result;
}

uint64_t sub_101101E94(uint64_t a1, uint64_t a2)
{
  return _CPSqliteConnectionPerformSQL(a2, @"PRAGMA journal_mode = WAL;");
}

uint64_t sub_101101EA4(uint64_t a1)
{
  sub_101107E4C();
  unint64_t v2 = qword_101B131A8;
  if (os_log_type_enabled((os_log_t)qword_101B131A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Database corruption detected", v5, 2u);
  }
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      if (*(void *)(v3 + 8)) {
        CPSqliteDatabaseDelete();
      }
    }
  }
  return 1;
}

BOOL sub_101101F2C(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int v4 = (unsigned __int16)a3;
  sub_101107E4C();
  unsigned int v5 = qword_101B131A8;
  if (os_log_type_enabled((os_log_t)qword_101B131A8, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67110144;
    v7[1] = v4;
    __int16 v8 = 1024;
    int v9 = a3;
    __int16 v10 = 1024;
    int v11 = 7;
    __int16 v12 = 1024;
    int v13 = 327687;
    __int16 v14 = 1024;
    BOOL v15 = v4 < 7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Old database version: %d (%d), current database version: %d (%d), needs migration: %d", (uint8_t *)v7, 0x20u);
  }
  return v4 < 7;
}

uint64_t sub_10110201C(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  unsigned int v3 = a3;
  sub_101107E4C();
  unsigned int v4 = qword_101B131A8;
  if (os_log_type_enabled((os_log_t)qword_101B131A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Doing migration", v6, 2u);
  }
  if (v3 == 1)
  {
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    goto LABEL_7;
  }
  if (v3 - 1 <= 1)
  {
LABEL_7:
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    goto LABEL_14;
  }
  if (v3 == 3)
  {
LABEL_14:
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    goto LABEL_16;
  }
  if (v3 <= 4)
  {
LABEL_16:
    if (CPSqliteConnectionStatementForSQL())
    {
      CPSqliteStatementPerform();
      CPSqliteStatementReset();
    }
    goto LABEL_18;
  }
  if (v3 != 5)
  {
    if (v3 > 6) {
      return 0;
    }
    goto LABEL_22;
  }
LABEL_18:
  if (CPSqliteConnectionStatementForSQL())
  {
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  if (CPSqliteConnectionStatementForSQL())
  {
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
LABEL_22:
  if (CPSqliteConnectionStatementForSQL())
  {
    CPSqliteStatementPerform();
    CPSqliteStatementReset();
  }
  return 0;
}

void sub_101102218(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1011025EC()
{
}

void sub_101102688(_Unwind_Exception *a1)
{
}

void sub_101102698(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  char v25 = *(NSObject **)(v24 - 80);
  if (v25) {
    dispatch_release(v25);
  }
  unsigned int v26 = *(NSObject **)(v24 - 72);
  if (v26) {
    dispatch_release(v26);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  uint64_t v27 = (std::__shared_weak_count *)*((void *)v21 + 7);
  if (v27) {
    sub_10004D2C8(v27);
  }
  CellularUsageStoreInterface::~CellularUsageStoreInterface(v21);
  ctu::OsLogLogger::~OsLogLogger(v23);
  sub_100087E88(v22);
  operator delete();
}

void sub_101102744(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  memset(&v23, 0, sizeof(v23));
  WirelessUserDirectory = (char *)_GetWirelessUserDirectory();
  unsigned int v3 = &v23;
  sub_100058DB0(&v23, WirelessUserDirectory);
  std::string::append(&v23, "/Library/Databases/", 0x13uLL);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unsigned int v3 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  uid_t v4 = sub_1003F2870();
  gid_t v5 = sub_1003F28A8();
  sub_1003F28E0(v3, v4, v5, 0x1EDu);
  std::string::append(&v23, "CellularUsage.db", 0x10uLL);
  unint64_t v22 = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&v21, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string v21 = v23;
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&__dst, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = v21;
  }
  uint64_t v24 = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = __dst;
  }
  uint64_t v27 = 0;
  if (ctu::cf::convert_copy())
  {
    int v6 = v24;
    uint64_t v24 = v27;
    unint64_t v28 = v6;
    sub_1000558F4(&v28);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v22 = v24;
  uint64_t v24 = 0;
  sub_1000558F4(&v24);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  int SchemaVersionAtPath = CPSqliteUtilitiesGetSchemaVersionAtPath();
  if ((SchemaVersionAtPath & 0x80000000) == 0) {
    *(_DWORD *)(v1 + 72) = SchemaVersionAtPath;
  }
  uint64_t v8 = CPRecordStoreCreateWithPath();
  *(void *)(v1 + 64) = v8;
  if (v8)
  {
    CPRecordStoreSetSetupHandler();
    uint64_t v9 = 0;
    char v10 = 1;
    do
    {
      char v11 = v10;
      int v12 = CPRecordIndexOfPropertyNamed();
      char v10 = 0;
      dword_101B13198[v9] = v12;
      uint64_t v9 = 1;
    }
    while ((v11 & 1) != 0);
    uint64_t v13 = 0;
    char v14 = 1;
    do
    {
      char v15 = v14;
      int v16 = CPRecordIndexOfPropertyNamed();
      char v14 = 0;
      dword_101B13198[v13 + 2] = v16;
      uint64_t v13 = 1;
    }
    while ((v15 & 1) != 0);
    uint64_t v17 = 0;
    char v18 = &off_101A8EAE0;
    do
    {
      dword_101B13198[v17 + 8] = CPRecordIndexOfPropertyNamed();
      ++v17;
      v18 += 5;
    }
    while (v17 != 13);
    if (CPRecordStoreGetDatabase())
    {
      CPSqliteDatabaseSetVersion();
      CPSqliteDatabaseSetDatabaseInitializer();
      CPSqliteDatabaseSetCorruptionHandler();
      CPSqliteDatabaseSetMigrationHandlers();
      CPSqliteDatabaseConnectionForWriting();
      unsigned __int8 v19 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I Sucessfully created cellular usage database", (uint8_t *)&__p, 2u);
      }
    }
    else
    {
      unint64_t v20 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Cellular Usage database was not set up correctly", (uint8_t *)&__p, 2u);
      }
    }
  }
  sub_1000558F4(&v22);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_101102B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101102B90(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_101102BAC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_101102BBC(uint64_t a1@<X0>, void *a2@<X8>)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  _OWORD v4[2] = sub_101102D20;
  void v4[3] = &unk_101A8ED18;
  void v4[4] = a1;
  gid_t v5 = v4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  _DWORD v6[2] = sub_101108370;
  void v6[3] = &unk_101A8F278;
  void v6[4] = a1 + 8;
  v6[5] = &v5;
  CFBooleanRef v7 = v6;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    char v10 = sub_1011083F4;
    char v11 = &unk_101A8F2B8;
    int v12 = a2;
    uint64_t v13 = &v7;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    char v10 = sub_101108384;
    char v11 = &unk_101A8F298;
    int v12 = a2;
    uint64_t v13 = &v7;
    dispatch_sync(v2, &block);
  }
}

void *sub_101102D20@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)(*(void *)(a1 + 32) + 64);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (result)
  {
    v4[0] = off_101A8F788;
    void v4[3] = v4;
    v3[0] = off_101A8F818;
    v3[1] = a2;
    v3[3] = v3;
    sub_101106400((uint64_t)result, (uint64_t)&off_101A8EED0, @"SELECT * from bundle_info WHERE (flags & ? == 0) ORDER BY bundle_id DESC;",
      1,
      (uint64_t)v4,
      (uint64_t)v3);
    sub_100A10BB4(v3);
    return sub_10110A738(v4);
  }
  return result;
}

void sub_101102E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

void sub_101102E28(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 0x40000000;
  void v3[2] = sub_101102EEC;
  v3[3] = &unk_101A8ED38;
  void v3[4] = a1;
  uid_t v4 = v3;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_101108464;
  block[3] = &unk_101A8F2D8;
  block[4] = a1 + 8;
  block[5] = &v4;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

uint64_t sub_101102EEC(uint64_t a1)
{
  return sub_101102EF4(*(void *)(a1 + 32));
}

uint64_t sub_101102EF4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    CFErrorRef err = 0;
    CPRecordStoreSave();
    return CPRecordStoreInvalidateCaches();
  }
  return result;
}

void sub_101103044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101103084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_1011031FC;
  void v7[3] = &unk_101A8ED58;
  void v7[4] = a1;
  void v7[5] = a2;
  void v7[6] = a3;
  v7[7] = a4;
  uint64_t v8 = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  void v9[2] = sub_101108478;
  v9[3] = &unk_101A8F2F8;
  void v9[4] = a1 + 8;
  void v9[5] = &v8;
  char v10 = v9;
  uint64_t v5 = a1 + 24;
  uid_t v4 = *(NSObject **)(a1 + 24);
  if (*(void *)(v5 + 8))
  {
    char v17 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v12 = 0x40000000;
    uint64_t v13 = sub_10005B5CC;
    char v14 = &unk_101A8F338;
    char v15 = &v17;
    int v16 = &v10;
    dispatch_async_and_wait(v4, &block);
  }
  else
  {
    char v17 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v12 = 0x40000000;
    uint64_t v13 = sub_10005A868;
    char v14 = &unk_101A8F318;
    char v15 = &v17;
    int v16 = &v10;
    dispatch_sync(v4, &block);
  }
  return v17 != 0;
}

uint64_t sub_1011031FC(uint64_t a1)
{
  return sub_10110320C(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(_DWORD **)(a1 + 56));
}

uint64_t sub_10110320C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  uid_t v4 = *(NSObject **)(a1 + 40);
  if (*(void *)(a1 + 64))
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(void *)a2;
      }
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v10 = a3;
      }
      else {
        uint64_t v10 = *(void *)a3;
      }
      int v12 = 136315394;
      uint64_t v13 = v9;
      __int16 v14 = 2080;
      uint64_t v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Get subscriber tag for subscriber %s and mdn %s", (uint8_t *)&v12, 0x16u);
    }
    if (sub_101106938(a1, a2, a3, a4)) {
      return 1;
    }
    else {
      return sub_101106C28(a1, a2, a3, (uint64_t)a4, 0);
    }
  }
  else
  {
    uint64_t result = os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_ERROR);
    if (result)
    {
      LOWORD(v12) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "The store does not exist!", (uint8_t *)&v12, 2u);
      return 0;
    }
  }
  return result;
}

void sub_101103374(uint64_t a1, uint64_t a2, int a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_101103440;
  void v5[3] = &unk_101A8ED78;
  v5[4] = a1;
  v5[5] = a2;
  int v6 = a3;
  CFBooleanRef v7 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_101108464;
  block[3] = &unk_101A8F2D8;
  block[4] = a1 + 8;
  block[5] = &v7;
  uint64_t v4 = a1 + 24;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

uint64_t sub_101103440(uint64_t a1)
{
  return sub_101106520(*(void *)(a1 + 32), *(void *)(a1 + 40), *(_DWORD *)(a1 + 48));
}

void sub_101103450(uint64_t a1, uint64_t a2, int a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_10110351C;
  void v5[3] = &unk_101A8ED98;
  v5[4] = a1;
  v5[5] = a2;
  int v6 = a3;
  CFBooleanRef v7 = v5;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_101108464;
  block[3] = &unk_101A8F2D8;
  block[4] = a1 + 8;
  block[5] = &v7;
  uint64_t v4 = a1 + 24;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
}

uint64_t sub_10110351C(uint64_t a1)
{
  return sub_10110672C(*(void *)(a1 + 32), *(void *)(a1 + 40), *(_DWORD *)(a1 + 48));
}

void sub_10110352C(uint64_t a1@<X0>, void *a2@<X8>)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_101103694;
  void v5[3] = &unk_101A8EDB8;
  v5[4] = a1;
  int v6 = v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_10110848C;
  void v7[3] = &unk_101A8F358;
  void v7[4] = a1 + 8;
  void v7[5] = &v6;
  uint64_t v8 = v7;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  uint64_t v4 = a2 + 1;
  if (*(void *)(v3 + 8))
  {
    void *v4 = 0;
    a2[2] = 0;
    *a2 = v4;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    char v11 = sub_101108544;
    int v12 = &unk_101A8F398;
    uint64_t v13 = a2;
    __int16 v14 = &v8;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    void *v4 = 0;
    a2[2] = 0;
    *a2 = v4;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    char v11 = sub_1011084A0;
    int v12 = &unk_101A8F378;
    uint64_t v13 = a2;
    __int16 v14 = &v8;
    dispatch_sync(v2, &block);
  }
}

void *sub_101103694@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  uint64_t result = *(void **)(v3 + 64);
  if (result)
  {
    v6[0] = off_101A8FA98;
    void v6[3] = v6;
    v5[0] = off_101A8FB18;
    v5[1] = v3;
    void v5[2] = a2;
    void v5[3] = v5;
    sub_101106400((uint64_t)result, (uint64_t)&off_101A8EED0, @"SELECT * from bundle_info ORDER BY bundle_id DESC;",
      1,
      (uint64_t)v6,
      (uint64_t)v5);
    sub_100A10BB4(v5);
    return sub_10110A738(v6);
  }
  return result;
}

void sub_10110377C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_100A10BB4((uint64_t *)va);
  sub_10110A738((uint64_t *)va1);
  sub_10005CD2C(v2, *(char **)(v2 + 8));
  _Unwind_Resume(a1);
}

void sub_1011037A4(uint64_t a1@<X0>, void *a2@<X8>)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_10110390C;
  void v5[3] = &unk_101A8EDD8;
  void v5[4] = a1;
  uint64_t v6 = v5;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_10110848C;
  void v7[3] = &unk_101A8F358;
  void v7[4] = a1 + 8;
  void v7[5] = &v6;
  uint64_t v8 = v7;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  uint64_t v4 = a2 + 1;
  if (*(void *)(v3 + 8))
  {
    void *v4 = 0;
    a2[2] = 0;
    *a2 = v4;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    char v11 = sub_101108544;
    int v12 = &unk_101A8F398;
    uint64_t v13 = a2;
    __int16 v14 = &v8;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    void *v4 = 0;
    a2[2] = 0;
    *a2 = v4;
    block = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    char v11 = sub_1011084A0;
    int v12 = &unk_101A8F378;
    uint64_t v13 = a2;
    __int16 v14 = &v8;
    dispatch_sync(v2, &block);
  }
}

void *sub_10110390C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  uint64_t result = *(void **)(v3 + 64);
  if (result)
  {
    v6[0] = off_101A8FB98;
    void v6[3] = v6;
    v5[0] = off_101A8FC18;
    v5[1] = v3;
    void v5[2] = a2;
    void v5[3] = v5;
    sub_101106400((uint64_t)result, (uint64_t)&off_101A8EED0, @"SELECT * from bundle_info ORDER BY bundle_id DESC;",
      1,
      (uint64_t)v6,
      (uint64_t)v5);
    sub_100A10BB4(v5);
    return sub_10110A738(v6);
  }
  return result;
}

void sub_1011039F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_100A10BB4((uint64_t *)va);
  sub_10110A738((uint64_t *)va1);
  sub_10005CD2C(v2, *(char **)(v2 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_101103A1C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_101103B90;
  void v7[3] = &unk_101A8EDF8;
  void v7[4] = a1;
  void v7[5] = a2;
  void v7[6] = a3;
  v7[7] = a4;
  uint64_t v8 = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  void v9[2] = sub_1011085E8;
  v9[3] = &unk_101A8F3B8;
  void v9[4] = a1 + 8;
  void v9[5] = &v8;
  uint64_t v10 = v9;
  uint64_t v5 = a1 + 24;
  uint64_t v4 = *(NSObject **)(a1 + 24);
  if (*(void *)(v5 + 8))
  {
    unsigned int v17 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v12 = 0x40000000;
    uint64_t v13 = sub_101108638;
    __int16 v14 = &unk_101A8F3F8;
    uint64_t v15 = &v17;
    int v16 = &v10;
    dispatch_async_and_wait(v4, &block);
  }
  else
  {
    unsigned int v17 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v12 = 0x40000000;
    uint64_t v13 = sub_1011085FC;
    __int16 v14 = &unk_101A8F3D8;
    uint64_t v15 = &v17;
    int v16 = &v10;
    dispatch_sync(v4, &block);
  }
  return v17;
}

uint64_t sub_101103B90(uint64_t a1)
{
  return sub_101103BA0(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(_DWORD **)(a1 + 56));
}

uint64_t sub_101103BA0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unsigned int v24 = 0;
  if (!*(void *)(a1 + 64)) {
    return v24;
  }
  BOOL v8 = sub_101106938(a1, a2, a3, &v24);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v31 = *(void *)(a2 + 16);
  }
  int v9 = SlotIdFromPersonalityId();
  if ((SHIBYTE(v31) & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_20;
    }
LABEL_9:
    if ((sub_101106C28(a1, a2, a3, (uint64_t)&v24, 1u) & 1) == 0)
    {
      if (CPRecordStoreGetDatabase() && CPSqliteDatabaseConnectionForWriting())
      {
        uint64_t v10 = (void *)(CPSqliteConnectionIntegerForProperty() + 1);
        CPSqliteConnectionSetIntegerForProperty();
        CPSqliteDatabaseReleaseSqliteConnection();
        char v11 = (const void *)CPRecordCreate();
        sub_101106E04((uint64_t)v11, 0, a2);
        sub_101106E04((uint64_t)v11, 1, a3);
        v28[0] = 0;
        __p[0] = v10;
        CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, __p);
        if (v12)
        {
          uint64_t v13 = (void *)v28[0];
          v28[0] = v12;
          __p[0] = v13;
          sub_1000570E8((const void **)__p);
        }
        char v25 = v28[0];
        v28[0] = 0;
        sub_1000570E8(v28);
        CPRecordSetProperty();
        sub_1000570E8(&v25);
        double Current = CFAbsoluteTimeGetCurrent();
        sub_101106FBC(Current);
        v28[0] = 0;
        __p[0] = (void *)v9;
        CFNumberRef v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, __p);
        if (v15)
        {
          int v16 = (void *)v28[0];
          v28[0] = v15;
          __p[0] = v16;
          sub_1000570E8((const void **)__p);
        }
        char v25 = v28[0];
        v28[0] = 0;
        sub_1000570E8(v28);
        CPRecordSetProperty();
        sub_1000570E8(&v25);
        CPRecordStoreAddRecord();
        CFRelease(v11);
        unsigned int v17 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__p[0]) = 67109120;
          HIDWORD(__p[0]) = v10;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Adding new subscriber with tag: %u", (uint8_t *)__p, 8u);
        }
      }
      else
      {
        LODWORD(v10) = 0;
      }
      unsigned int v24 = v10;
    }
    goto LABEL_20;
  }
  operator delete(__p[0]);
  if (!v8) {
    goto LABEL_9;
  }
LABEL_20:
  sub_101102EF4(a1);
  int v26 = 0;
  int v27 = v9;
  if (v9) {
    BOOL v18 = v9 == 3;
  }
  else {
    BOOL v18 = 1;
  }
  uint64_t v19 = 3;
  if (v18) {
    uint64_t v19 = 0;
  }
  char v25 = (const void *)v19;
  uint64_t v20 = *(void *)(a1 + 64);
  __p[0] = off_101A8FD98;
  __p[1] = &v27;
  unint64_t v32 = __p;
  char v29 = 0;
  char v21 = operator new(0x28uLL);
  *char v21 = off_101A8FE18;
  v21[1] = a1;
  v21[2] = &v25;
  void v21[3] = &v27;
  v21[4] = &v26;
  char v29 = v21;
  sub_101106400(v20, (uint64_t)&off_101A8EF68, @"SELECT * from subscriber_info WHERE (slot_id == ?) ORDER BY last_update_time ASC;",
    0,
    (uint64_t)__p,
    (uint64_t)v28);
  sub_100A10BB4(v28);
  sub_10110A738(__p);
  int v22 = v26;
  *a4 = v26;
  if (v22) {
    sub_101102EF4(a1);
  }
  return v24;
}

void sub_101103F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void sub_101103F94(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2000000000;
  int v15 = 0;
  uint64_t v8 = 0;
  int v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  _DWORD v7[2] = sub_101104128;
  void v7[3] = &unk_101A8EE20;
  void v7[5] = &v8;
  void v7[6] = a1;
  void v7[4] = &v12;
  int v16 = v7;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_101108464;
  block[3] = &unk_101A8F2D8;
  block[4] = a1 + 8;
  block[5] = &v16;
  uint64_t v4 = a1 + 24;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  if (*(void *)(v4 + 8)) {
    dispatch_async_and_wait(v3, block);
  }
  else {
    dispatch_sync(v3, block);
  }
  int v5 = *((_DWORD *)v9 + 6);
  if (*((_DWORD *)v13 + 6) < v5)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    LODWORD(block[0]) = *((_DWORD *)v13 + 6);
    LODWORD(v16) = v5;
    if (!v6) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, void *, void **))(*(void *)v6 + 48))(v6, block, &v16);
  }
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
}

void sub_101104104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_101104128(void *a1)
{
  uint64_t v1 = a1[6];
  uint64_t v2 = *(void *)(a1[4] + 8);
  uint64_t v3 = *(void *)(a1[5] + 8);
  *(_DWORD *)(v2 + 24) = *(__int16 *)(v1 + 74);
  *(_DWORD *)(v3 + 24) = 5;
  if (*(int *)(v2 + 24) > 4)
  {
    uint64_t v10 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v11 = 67109120;
    int v12 = 5;
    uint64_t v7 = "#I DataUsage schema is current, not triggering migration: %d";
    uint64_t v8 = v10;
    uint32_t v9 = 8;
  }
  else
  {
    *(_DWORD *)(v1 + 72) = 327687;
    uint64_t v4 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v5 = *(_DWORD *)(v2 + 24);
    int v6 = *(_DWORD *)(v3 + 24);
    int v11 = 67109376;
    int v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    uint64_t v7 = "#I Need to migrate data usage store, old version: %d, new version: %d";
    uint64_t v8 = v4;
    uint32_t v9 = 14;
  }
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, v9);
}

const void **sub_101104260(uint64_t a1, const void **a2)
{
  uint64_t v3 = a1 + 8;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1174405120;
  _DWORD v6[2] = sub_101104354;
  void v6[3] = &unk_101A8EE40;
  void v6[4] = a1;
  sub_100083DA4(&v7, a2);
  uint64_t v8 = v6;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_101108464;
  block[3] = &unk_101A8F2D8;
  block[4] = v3;
  block[5] = &v8;
  uint64_t v4 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32)) {
    dispatch_async_and_wait(v4, block);
  }
  else {
    dispatch_sync(v4, block);
  }
  return sub_1000558F4(&v7);
}

void *sub_101104354(uint64_t a1)
{
  return sub_1011045D4(*(void *)(*(void *)(a1 + 32) + 64), *(void *)(a1 + 40), @"kCURecordCollpasingDate");
}

void sub_101104368(uint64_t a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  _OWORD v4[2] = sub_101104430;
  void v4[3] = &unk_101A8EE70;
  void v4[4] = a1;
  void v4[5] = a2;
  int v5 = v4;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_101108464;
  block[3] = &unk_101A8F2D8;
  block[4] = a1 + 8;
  block[5] = &v5;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8)) {
    dispatch_async_and_wait(v2, block);
  }
  else {
    dispatch_sync(v2, block);
  }
}

const void **sub_101104430(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(long long **)(a1 + 40);
  if (*((char *)v1 + 23) < 0)
  {
    sub_10004FC84(v7, *(void **)v1, *((void *)v1 + 1));
  }
  else
  {
    long long v3 = *v1;
    uint64_t v8 = *((void *)v1 + 2);
    *(_OWORD *)uint64_t v7 = v3;
  }
  if (SHIBYTE(v8) < 0)
  {
    sub_10004FC84(__p, v7[0], (unint64_t)v7[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)v7;
    uint64_t v12 = v8;
  }
  uint64_t v10 = 0;
  if (SHIBYTE(v12) < 0)
  {
    sub_10004FC84(&__dst, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long __dst = *(_OWORD *)__p;
    uint64_t v14 = v12;
  }
  int v15 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v4 = v10;
    uint64_t v10 = v15;
    int v16 = v4;
    sub_1000558F4(&v16);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v5 = (uint64_t)v10;
  uint32_t v9 = v10;
  uint64_t v10 = 0;
  sub_1000558F4(&v10);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  sub_1011045D4(*(void *)(v2 + 64), v5, @"kCUOSVersion");
  return sub_1000558F4(&v9);
}

void sub_101104570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, const void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

void *sub_1011045D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = off_101A8FE98;
  v4[1] = a2;
  _OWORD v4[2] = a3;
  void v4[3] = v4;
  sub_1011074D4(a1, (uint64_t)v4);
  return sub_10110C5FC(v4);
}

void sub_101104658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10110C5FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10110466C(uint64_t a1@<X0>, void *a2@<X8>)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  _OWORD v4[2] = sub_1011047D0;
  void v4[3] = &unk_101A8EE90;
  void v4[4] = a1;
  uint64_t v5 = v4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  _DWORD v6[2] = sub_101108674;
  void v6[3] = &unk_101A8F418;
  void v6[4] = a1 + 8;
  void v6[5] = &v5;
  uint64_t v7 = v6;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    uint64_t v10 = sub_101108688;
    int v11 = &unk_101A8F458;
    uint64_t v12 = a2;
    __int16 v13 = &v7;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    uint64_t v10 = sub_100004054;
    int v11 = &unk_101A8F438;
    uint64_t v12 = a2;
    __int16 v13 = &v7;
    dispatch_sync(v2, &block);
  }
}

const void **sub_1011047D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 64);
  uint64_t v5 = 0;
  sub_101104864((uint64_t *)&v5, v3);
  long long v6 = 0uLL;
  uint64_t v7 = 0;
  ctu::cf::assign();
  *(_OWORD *)a2 = v6;
  *(void *)(a2 + 16) = v7;
  return sub_1000558F4(&v5);
}

void sub_101104840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_1000558F4((const void **)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_101104864(uint64_t *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t result = CPRecordStoreGetDatabase();
    if (result)
    {
      *a1 = 0;
      uint64_t result = CPSqliteDatabaseCopyValueForProperty();
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *a1 = result;
  return result;
}