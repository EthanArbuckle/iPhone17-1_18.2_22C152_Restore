void sub_100850DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100850E28()
{
}

__n128 sub_100850E3C(uint64_t a1)
{
  v2 = (char *)operator new(0x18uLL);
  *(void *)v2 = off_101A10F28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100850E88(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A10F28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100850EB8(uint64_t a1)
{
  ctu::rest::read_rest_value();
  uint64_t v2 = *(void *)(a1 + 16);
  v3 = *(NSObject **)(v2 + 80);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = ctu::rest::asString();
    int v5 = *(_DWORD *)(v2 + 208);
    int v6 = 136315394;
    uint64_t v7 = v4;
    __int16 v8 = 1024;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I stewie mode assertion change: %s (%d)", (uint8_t *)&v6, 0x12u);
  }
  sub_10084ED64((void *)v2);
}

uint64_t sub_100850F80(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100850FC0()
{
}

void sub_100850FD0()
{
}

void *sub_100850FE4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A10FA8;
  result[1] = v3;
  return result;
}

uint64_t sub_10085102C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A10FA8;
  a2[1] = v2;
  return result;
}

void sub_100851058(uint64_t a1, xpc *this, BOOL a3)
{
  int v4 = xpc::dyn_cast_or_default(this, 0, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(unsigned __int8 *)(v5 + 116) != v4)
  {
    int v6 = v4;
    *(unsigned char *)(v5 + 116) = v4;
    uint64_t v7 = *(NSObject **)(v5 + 80);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v8 = "unblocked";
      if (v6) {
        __int16 v8 = "blocked due to regulatory";
      }
      int v9 = 136315138;
      v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I [CellularTx]: %s", (uint8_t *)&v9, 0xCu);
    }
    sub_10084ED64((void *)v5);
  }
}

uint64_t sub_100851140(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100851180()
{
}

void sub_100851190()
{
}

__n128 sub_1008511A4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A11028;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1008511F8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A11028;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100851230(void *a1, xpc *this, BOOL a3)
{
  int v4 = (unsigned char *)a1[1];
  *int v4 = xpc::dyn_cast_or_default(this, 0, a3);
  uint64_t v5 = (uint64_t (*)(void *))a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = (void *)(a1[2] + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(uint64_t (**)(void *))(*v7 + v5);
  }

  return v5(v7);
}

uint64_t sub_1008512B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008512F8()
{
}

void sub_100851308()
{
}

__n128 sub_10085131C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A110A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100851370(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A110A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1008513A8(void *a1)
{
  v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_1008513F0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100851430()
{
}

void sub_100851440()
{
}

__n128 sub_100851454(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A11128;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1008514A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A11128;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1008514D0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)v16 = *(_OWORD *)a2;
  uint64_t v17 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v3 = *(void **)(a1 + 8);
  int v4 = v3[10];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = asString();
    uint64_t v6 = v16;
    if (v17 < 0) {
      uint64_t v6 = (void **)v16[0];
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Sending %s notification; Assertion holders: %s",
      buf,
      0x16u);
  }
  xpc_object_t v26 = 0;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t v26 = v7;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v26 = v8;
    if (!v8)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
      goto LABEL_12;
    }
  }
  if (xpc_get_type(v8) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v8);
    goto LABEL_13;
  }
  xpc_object_t v9 = xpc_null_create();
LABEL_12:
  xpc_object_t v26 = v9;
LABEL_13:
  xpc_release(v8);
  if (v17 >= 0) {
    v10 = v16;
  }
  else {
    v10 = (void **)v16[0];
  }
  xpc_object_t v24 = xpc_string_create((const char *)v10);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)buf;
  uint64_t v23 = *(void *)&buf[16];
  v11 = *(void ***)buf;
  if ((buf[23] & 0x80u) == 0) {
    v11 = __p;
  }
  v18[0] = &v26;
  v18[1] = v11;
  sub_100035E70((uint64_t)v18, &v24, &v25);
  xpc_release(v25);
  xpc_object_t v25 = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(v24);
  xpc_object_t v24 = 0;
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)__p = *(_OWORD *)buf;
  uint64_t v23 = *(void *)&buf[16];
  if ((buf[23] & 0x80u) == 0) {
    v12 = __p;
  }
  else {
    v12 = (void **)__p[0];
  }
  xpc_object_t object = xpc_string_create((const char *)v12);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)v18 = *(_OWORD *)buf;
  uint64_t v19 = *(void *)&buf[16];
  v13 = *(void ***)buf;
  if ((buf[23] & 0x80u) == 0) {
    v13 = v18;
  }
  v20[0] = &v26;
  v20[1] = v13;
  sub_100035E70((uint64_t)v20, &object, (xpc_object_t *)buf);
  xpc_release(*(xpc_object_t *)buf);
  *(void *)buf = 0;
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(void *, xpc_object_t *))(*v3 + 56))(v3, &v26);
  xpc_object_t v14 = v26;
  __p[0] = v26;
  if (v26)
  {
    xpc_retain(v26);
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    __p[0] = v14;
  }
  xpc_object_t v15 = xpc_null_create();
  v18[0] = v15;
  sub_1000452AC(168, __p, v18);
  xpc_release(v15);
  xpc_release(v14);
  xpc_release(v26);
  sub_1008EF194((uint64_t)v3, 255, *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 16), (char *)v16);
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
}

void sub_100851874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,xpc_object_t object,char a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t sub_100851990(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1008519D0()
{
}

void sub_1008519E0()
{
}

void *sub_1008519F4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A111A8;
  result[1] = v3;
  return result;
}

uint64_t sub_100851A3C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A111A8;
  a2[1] = v2;
  return result;
}

void sub_100851A68(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  int v4 = v3[10];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*a2) {
      uint64_t v5 = "is";
    }
    else {
      uint64_t v5 = "is NOT";
    }
    int v6 = 136315138;
    xpc_object_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Booted baseband assertion %s granted", (uint8_t *)&v6, 0xCu);
  }
  sub_10084ED64(v3);
}

uint64_t sub_100851B34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100851B74()
{
}

void *sub_100851B80(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100851C04(void *a1)
{
  *a1 = off_101A11228;
  sub_10001E914(a1 + 3);
  return a1;
}

void sub_100851C48(void *a1)
{
  *a1 = off_101A11228;
  sub_10001E914(a1 + 3);

  operator delete();
}

char *sub_100851CAC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = off_101A11228;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  sub_1000278EC((uint64_t)(v2 + 24), a1 + 24);
  return v2;
}

void sub_100851D0C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100851D20(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A11228;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  return sub_1000278EC(a2 + 24, a1 + 24);
}

void *sub_100851D54(uint64_t a1)
{
  return sub_10001E914((void *)(a1 + 24));
}

void sub_100851D5C(void *a1)
{
  sub_10001E914(a1 + 3);

  operator delete(a1);
}

void sub_100851D98(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  int v4 = *(void **)(a1 + 8);
  sub_100058DB0(&v7, "/granted");
  uint64_t v5 = std::string::insert(&v7, 0, "/cc/assertions/airplane_mode", 0x1CuLL);
  std::string __p = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  object[0] = v4;
  object[1] = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    object[1] = xpc_null_create();
  }
  uint64_t v10 = *(void *)(a1 + 16);
  sub_1000278EC((uint64_t)v11, a1 + 24);
  v13 = 0;
  int v6 = (char *)operator new(0x40uLL);
  *(void *)int v6 = off_101A112A8;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)object;
  object[1] = xpc_null_create();
  *((void *)v6 + 3) = v10;
  sub_1000279CC((uint64_t)(v6 + 32), (uint64_t)v11);
  v13 = v6;
  sub_10084F460((uint64_t *)(a1 + 16), (uint64_t)"airplane mode", (long long *)&__p, (uint64_t)v12);
  sub_100851B80(v12);
  sub_10001E914(v11);
  xpc_release(object[1]);
  object[1] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  xpc_release(v3);
}

void sub_100851F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t sub_100851FDC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10085201C()
{
}

uint64_t sub_100852028(uint64_t a1)
{
  *(void *)a1 = off_101A112A8;
  sub_10001E914((void *)(a1 + 32));
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_10085207C(uint64_t a1)
{
  *(void *)a1 = off_101A112A8;
  sub_10001E914((void *)(a1 + 32));
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;

  operator delete();
}

void *sub_1008520F0(uint64_t a1)
{
  v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = off_101A112A8;
  sub_1008524BC(v2 + 1, v1);
  return v2;
}

void sub_100852144(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100852158(uint64_t a1, void *a2)
{
  *a2 = off_101A112A8;
  return sub_1008524BC(a2 + 1, (void *)(a1 + 8));
}

void sub_100852184(uint64_t a1)
{
}

void sub_10085218C(void *a1)
{
  sub_100852534((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1008521C8(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  int v4 = (void *)a1[1];
  sub_100058DB0(&v8, "/granted");
  uint64_t v5 = std::string::insert(&v8, 0, "/cc/assertions/baseband_camp_only_assertion", 0x2BuLL);
  std::string __p = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  int v6 = (void *)a1[2];
  v10[0] = v4;
  v10[1] = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    v10[1] = xpc_null_create();
  }
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v12 = a1[3];
  sub_1000278EC((uint64_t)v13, (uint64_t)(a1 + 4));
  xpc_object_t v15 = 0;
  std::string v7 = (char *)operator new(0x48uLL);
  *(void *)std::string v7 = off_101A11318;
  *(_OWORD *)(v7 + 8) = *(_OWORD *)v10;
  v10[1] = xpc_null_create();
  *((void *)v7 + 3) = object;
  xpc_object_t object = xpc_null_create();
  *((void *)v7 + 4) = v12;
  sub_1000279CC((uint64_t)(v7 + 40), (uint64_t)v13);
  xpc_object_t v15 = v7;
  sub_10084F460(a1 + 3, (uint64_t)"baseband camp only", (long long *)&__p, (uint64_t)v14);
  sub_100851B80(v14);
  sub_10001E914(v13);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v10[1]);
  v10[1] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  xpc_release(v3);
}

void sub_10085239C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,xpc_object_t a24,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t sub_100852470(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008524B0()
{
}

void *sub_1008524BC(void *a1, void *a2)
{
  int v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    a1[1] = xpc_null_create();
  }
  a1[2] = a2[2];
  sub_1000278EC((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
  return a1;
}

void sub_100852514(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(a1);
}

void sub_100852534(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
}

uint64_t sub_10085256C(uint64_t a1)
{
  *(void *)a1 = off_101A11318;
  sub_10001E914((void *)(a1 + 40));
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1008525D0(uint64_t a1)
{
  *(void *)a1 = off_101A11318;
  sub_10001E914((void *)(a1 + 40));
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;

  operator delete();
}

void *sub_100852654(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = off_101A11318;
  sub_100852A84(v2 + 1, v1);
  return v2;
}

void sub_1008526A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1008526BC(uint64_t a1, void *a2)
{
  *a2 = off_101A11318;
  return sub_100852A84(a2 + 1, (void *)(a1 + 8));
}

void sub_1008526E8(uint64_t a1)
{
}

void sub_1008526F0(void *a1)
{
  sub_100852B2C((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_10085272C(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  int v4 = (void *)a1[1];
  sub_100058DB0(&v9, "/granted");
  uint64_t v5 = std::string::insert(&v9, 0, "/cc/assertions/baseband_online", 0x1EuLL);
  std::string __p = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  int v6 = (void *)a1[2];
  v11[0] = v4;
  v11[1] = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    v11[1] = xpc_null_create();
  }
  std::string v7 = (void *)a1[3];
  xpc_object_t v12 = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v14 = a1[4];
  sub_1000278EC((uint64_t)v15, (uint64_t)(a1 + 5));
  uint64_t v17 = 0;
  std::string v8 = (char *)operator new(0x50uLL);
  *(void *)std::string v8 = off_101A11388;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)v11;
  v11[1] = xpc_null_create();
  *((void *)v8 + 3) = v12;
  xpc_object_t v12 = xpc_null_create();
  *((void *)v8 + 4) = object;
  xpc_object_t object = xpc_null_create();
  *((void *)v8 + 5) = v14;
  sub_1000279CC((uint64_t)(v8 + 48), (uint64_t)v15);
  uint64_t v17 = v8;
  sub_10084F460(a1 + 4, (uint64_t)"baseband online", (long long *)&__p, (uint64_t)v16);
  sub_100851B80(v16);
  sub_10001E914(v15);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  xpc_object_t v12 = 0;
  xpc_release(v11[1]);
  v11[1] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  xpc_release(v3);
}

void sub_100852938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,xpc_object_t a24,xpc_object_t a25,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t sub_100852A38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100852A78()
{
}

void *sub_100852A84(void *a1, void *a2)
{
  int v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    a1[1] = xpc_null_create();
  }
  uint64_t v5 = (void *)a2[2];
  a1[2] = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    a1[2] = xpc_null_create();
  }
  a1[3] = a2[3];
  sub_1000278EC((uint64_t)(a1 + 4), (uint64_t)(a2 + 4));
  return a1;
}

void sub_100852AF8(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 + 16));
  *(void *)(v1 + 16) = 0;
  xpc_release(*(xpc_object_t *)(v1 + 8));
  *(void *)(v1 + 8) = 0;
  _Unwind_Resume(a1);
}

void sub_100852B2C(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
}

uint64_t sub_100852B74(uint64_t a1)
{
  *(void *)a1 = off_101A11388;
  sub_10001E914((void *)(a1 + 48));
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_100852BE8(uint64_t a1)
{
  *(void *)a1 = off_101A11388;
  sub_10001E914((void *)(a1 + 48));
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;

  operator delete();
}

void *sub_100852C7C(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x50uLL);
  void *v2 = off_101A11388;
  sub_100853088(v2 + 1, v1);
  return v2;
}

void sub_100852CD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100852CE4(uint64_t a1, void *a2)
{
  *a2 = off_101A11388;
  return sub_100853088(a2 + 1, (void *)(a1 + 8));
}

void sub_100852D10(uint64_t a1)
{
}

void sub_100852D18(void *a1)
{
  sub_100853160((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100852D54(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  uint64_t v4 = a1[1];
  sub_100058DB0(&v12, "/granted");
  uint64_t v5 = std::string::insert(&v12, 0, "/cc/assertions/stewie_mode_assertion", 0x24uLL);
  std::string __p = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  int v6 = (void *)a1[2];
  *(void *)&long long v14 = v4;
  *((void *)&v14 + 1) = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    *((void *)&v14 + 1) = xpc_null_create();
  }
  std::string v7 = (void *)a1[3];
  xpc_object_t v15 = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v15 = xpc_null_create();
  }
  std::string v8 = (void *)a1[4];
  xpc_object_t v16 = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    xpc_object_t v16 = xpc_null_create();
  }
  std::string v9 = a1 + 5;
  uint64_t v17 = a1[5];
  xpc_object_t v18 = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v18 = xpc_null_create();
  }
  sub_1000278EC((uint64_t)v19, (uint64_t)(a1 + 6));
  v21 = 0;
  uint64_t v10 = (char *)operator new(0x58uLL);
  *(void *)uint64_t v10 = off_101A113F8;
  *(_OWORD *)(v10 + 8) = v14;
  *((void *)&v14 + 1) = xpc_null_create();
  *((void *)v10 + 3) = v15;
  xpc_object_t v15 = xpc_null_create();
  *((void *)v10 + 4) = v16;
  xpc_object_t v16 = xpc_null_create();
  xpc_object_t v11 = v18;
  *((void *)v10 + 5) = v17;
  *((void *)v10 + 6) = v11;
  xpc_object_t v18 = xpc_null_create();
  sub_1000279CC((uint64_t)(v10 + 56), (uint64_t)v19);
  v21 = v10;
  sub_10084F460(v9, (uint64_t)"stewie mode", (long long *)&__p, (uint64_t)v20);
  sub_100851B80(v20);
  sub_1008531B8((uint64_t)&v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  xpc_release(v3);
}

void sub_100852F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,xpc_object_t a24,xpc_object_t a25,xpc_object_t a26,uint64_t a27,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t sub_10085303C(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A114E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10085307C()
{
  return &off_101A114E8;
}

void *sub_100853088(void *a1, void *a2)
{
  uint64_t v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    a1[1] = xpc_null_create();
  }
  uint64_t v5 = (void *)a2[2];
  a1[2] = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    a1[2] = xpc_null_create();
  }
  int v6 = (void *)a2[3];
  a1[3] = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    a1[3] = xpc_null_create();
  }
  a1[4] = a2[4];
  sub_1000278EC((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

void sub_100853118(_Unwind_Exception *a1)
{
  xpc_release(v1[3]);
  v1[3] = 0;
  xpc_release(v1[2]);
  v1[2] = 0;
  xpc_release(v1[1]);
  v1[1] = 0;
  _Unwind_Resume(a1);
}

void sub_100853160(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
}

uint64_t sub_1008531B8(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void *sub_100853224(void *a1)
{
  *a1 = off_101A113F8;
  sub_1008531B8((uint64_t)(a1 + 1));
  return a1;
}

void sub_100853268(void *a1)
{
  *a1 = off_101A113F8;
  sub_1008531B8((uint64_t)(a1 + 1));

  operator delete();
}

void *sub_1008532CC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x58uLL);
  void *v2 = off_101A113F8;
  sub_10085371C(v2 + 1, v1);
  return v2;
}

void sub_100853320(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100853334(uint64_t a1, void *a2)
{
  *a2 = off_101A113F8;
  return sub_10085371C(a2 + 1, (void *)(a1 + 8));
}

uint64_t sub_100853360(uint64_t a1)
{
  return sub_1008531B8(a1 + 8);
}

void sub_100853368(void *a1)
{
  sub_1008531B8((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1008533A4(void *a1, void **a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (capabilities::ct *)xpc_null_create();
  *a2 = v5;
  uint64_t v6 = a1[1];
  capabilities::ct::supportsStewie(v5);
  sub_100058DB0(&v13, "/granted");
  std::string v7 = std::string::insert(&v13, 0, "/cc/assertions/emergency_online", 0x1FuLL);
  std::string __p = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::string v8 = (void *)a1[2];
  *(void *)&long long v15 = v6;
  *((void *)&v15 + 1) = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    *((void *)&v15 + 1) = xpc_null_create();
  }
  std::string v9 = (void *)a1[3];
  xpc_object_t v16 = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t v16 = xpc_null_create();
  }
  uint64_t v10 = (void *)a1[4];
  xpc_object_t v17 = v10;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v17 = xpc_null_create();
  }
  xpc_object_t v11 = (void *)a1[6];
  xpc_object_t v18 = v11;
  if (v11) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_object_t v19 = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    xpc_object_t v19 = xpc_null_create();
  }
  sub_1000278EC((uint64_t)v20, (uint64_t)(a1 + 7));
  v22 = 0;
  std::string v12 = (char *)operator new(0x58uLL);
  *(void *)std::string v12 = off_101A11468;
  *(_OWORD *)(v12 + 8) = v15;
  *((void *)&v15 + 1) = xpc_null_create();
  *((void *)v12 + 3) = v16;
  xpc_object_t v16 = xpc_null_create();
  *((void *)v12 + 4) = v17;
  xpc_object_t v17 = xpc_null_create();
  *((void *)v12 + 5) = v18;
  xpc_object_t v18 = xpc_null_create();
  *((void *)v12 + 6) = v19;
  xpc_object_t v19 = xpc_null_create();
  sub_1000279CC((uint64_t)(v12 + 56), (uint64_t)v20);
  v22 = v12;
  sub_10084F460(a1 + 5, (uint64_t)"emergency online", (long long *)&__p, (uint64_t)v21);
  sub_100851B80(v21);
  sub_100853824((uint64_t)&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  xpc_release(v4);
}

void sub_1008535D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,xpc_object_t a24,xpc_object_t a25,xpc_object_t a26,xpc_object_t a27,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t sub_1008536D0(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A114D8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100853710()
{
  return &off_101A114D8;
}

void *sub_10085371C(void *a1, void *a2)
{
  uint64_t v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    a1[1] = xpc_null_create();
  }
  uint64_t v5 = (void *)a2[2];
  a1[2] = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    a1[2] = xpc_null_create();
  }
  uint64_t v6 = (void *)a2[3];
  a1[3] = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    a1[3] = xpc_null_create();
  }
  a1[4] = a2[4];
  std::string v7 = (void *)a2[5];
  a1[5] = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    a1[5] = xpc_null_create();
  }
  sub_1000278EC((uint64_t)(a1 + 6), (uint64_t)(a2 + 6));
  return a1;
}

void sub_1008537C8(_Unwind_Exception *a1)
{
  xpc_release(v1[5]);
  v1[5] = 0;
  xpc_release(v1[3]);
  v1[3] = 0;
  xpc_release(v1[2]);
  v1[2] = 0;
  xpc_release(v1[1]);
  v1[1] = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_100853824(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void *sub_1008538A0(void *a1)
{
  *a1 = off_101A11468;
  sub_100853824((uint64_t)(a1 + 1));
  return a1;
}

void sub_1008538E4(void *a1)
{
  *a1 = off_101A11468;
  sub_100853824((uint64_t)(a1 + 1));

  operator delete();
}

void *sub_100853948(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x58uLL);
  void *v2 = off_101A11468;
  sub_100853D70(v2 + 1, v1);
  return v2;
}

void sub_10085399C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1008539B0(uint64_t a1, void *a2)
{
  *a2 = off_101A11468;
  return sub_100853D70(a2 + 1, (void *)(a1 + 8));
}

uint64_t sub_1008539DC(uint64_t a1)
{
  return sub_100853824(a1 + 8);
}

void sub_1008539E4(void *a1)
{
  sub_100853824((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100853A20(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t v18 = *a2;
  *a2 = xpc_null_create();
  memset(&v20, 0, sizeof(v20));
  sub_100853EA0(&__p, "Booted", (xpc_object_t *)(a1 + 16));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v20, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_100853EA0(&__p, "Airplane", (xpc_object_t *)(a1 + 24));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &__p;
  }
  else {
    uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v20, (const std::string::value_type *)v6, v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_100853EA0(&__p, "CampOnly", (xpc_object_t *)(a1 + 32));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v8 = &__p;
  }
  else {
    std::string v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::string::append(&v20, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (capabilities::ct::supportsStewie((capabilities::ct *)v10))
  {
    sub_100853EA0(&__p, "Stewie", (xpc_object_t *)(a1 + 48));
    xpc_object_t v11 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    std::string::size_type v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    std::string::append(&v20, (const std::string::value_type *)v11, v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  sub_100853EA0(&__p, "Online", (xpc_object_t *)(a1 + 40));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v13 = &__p;
  }
  else {
    std::string v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v20, (const std::string::value_type *)v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_100853EA0(&__p, "Emergency", &v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v15 = &__p;
  }
  else {
    long long v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(&v20, (const std::string::value_type *)v15, v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&__p, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v20;
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (!v17) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v17 + 48))(v17, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  xpc_release(v3);
}

void sub_100853CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  xpc_release(v22);
  _Unwind_Resume(a1);
}

uint64_t sub_100853D24(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A114C8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100853D64()
{
  return &off_101A114C8;
}

void *sub_100853D70(void *a1, void *a2)
{
  uint64_t v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    a1[1] = xpc_null_create();
  }
  uint64_t v5 = (void *)a2[2];
  a1[2] = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    a1[2] = xpc_null_create();
  }
  uint64_t v6 = (void *)a2[3];
  a1[3] = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    a1[3] = xpc_null_create();
  }
  std::string::size_type v7 = (void *)a2[4];
  a1[4] = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    a1[4] = xpc_null_create();
  }
  std::string v8 = (void *)a2[5];
  a1[5] = v8;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    a1[5] = xpc_null_create();
  }
  sub_1000278EC((uint64_t)(a1 + 6), (uint64_t)(a2 + 6));
  return a1;
}

void sub_100853E30(_Unwind_Exception *a1)
{
  xpc_release(v1[5]);
  v1[5] = 0;
  xpc_release(v1[4]);
  v1[4] = 0;
  xpc_release(v1[3]);
  v1[3] = 0;
  xpc_release(v1[2]);
  v1[2] = 0;
  xpc_release(v1[1]);
  v1[1] = 0;
  _Unwind_Resume(a1);
}

void sub_100853EA0(std::string *a1, char *a2, xpc_object_t *a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (xpc_get_type(*a3) == (xpc_type_t)&_xpc_type_array && xpc_array_get_count(*a3))
  {
    memset(&v28, 0, sizeof(v28));
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)*a3;
    if (__s.__r_.__value_.__r.__words[0]) {
      xpc_retain(__s.__r_.__value_.__l.__data_);
    }
    else {
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    sub_100048BF4((void **)&object.__r_.__value_.__l.__data_, (void **)&__s.__r_.__value_.__l.__data_, 0);
    xpc_release(__s.__r_.__value_.__l.__data_);
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)*a3;
    if (__s.__r_.__value_.__r.__words[0]) {
      xpc_retain(__s.__r_.__value_.__l.__data_);
    }
    else {
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    if (xpc_get_type(*a3) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(*a3);
    }
    else {
      count = 0;
    }
    sub_100048BF4((void **)&v25.__r_.__value_.__l.__data_, (void **)&__s.__r_.__value_.__l.__data_, count);
    xpc_release(__s.__r_.__value_.__l.__data_);
    memset(&v28, 0, sizeof(v28));
    if (object.__r_.__value_.__l.__size_ != v25.__r_.__value_.__l.__size_
      || (std::string::size_type v12 = (void *)object.__r_.__value_.__r.__words[0],
          object.__r_.__value_.__r.__words[0] != v25.__r_.__value_.__r.__words[0]))
    {
      v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      v27.__r_.__value_.__l.__size_ = object.__r_.__value_.__l.__size_;
      sub_100854358((uint64_t)&__s, (uint64_t)&v27);
      std::string v28 = __s;
      while (1)
      {
        if (++object.__r_.__value_.__l.__size_ == v25.__r_.__value_.__l.__size_)
        {
          std::string::size_type v12 = (void *)object.__r_.__value_.__r.__words[0];
          if (object.__r_.__value_.__r.__words[0] == v25.__r_.__value_.__r.__words[0]) {
            break;
          }
        }
        *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&__s, ", ");
        std::string::append(&v28, (const std::string::value_type *)&__s, 2uLL);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
        v27.__r_.__value_.__l.__size_ = object.__r_.__value_.__l.__size_;
        sub_100854358((uint64_t)&__s, (uint64_t)&v27);
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_s = &__s;
        }
        else {
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __s.__r_.__value_.__l.__size_;
        }
        std::string::append(&v28, (const std::string::value_type *)p_s, size);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
      }
    }
    xpc_release(v12);
    v25.__r_.__value_.__r.__words[0] = 0;
    xpc_release(object.__r_.__value_.__l.__data_);
    sub_100058DB0(&v25, a2);
    long long v15 = std::string::append(&v25, " [", 2uLL);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    object.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v17 = &v28;
    }
    else {
      uint64_t v17 = (std::string *)v28.__r_.__value_.__r.__words[0];
    }
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v18 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v18 = v28.__r_.__value_.__l.__size_;
    }
    xpc_object_t v19 = std::string::append(&object, (const std::string::value_type *)v17, v18);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v27, "] ", 2uLL);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    __s.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v23 = &__s;
    }
    else {
      uint64_t v23 = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v24 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v24 = __s.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(object.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v10 = (void *)v25.__r_.__value_.__r.__words[0];
      goto LABEL_55;
    }
  }
  else
  {
    sub_100058DB0(&v28, a2);
    uint64_t v6 = std::string::append(&v28, " [None] ", 8uLL);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    __s.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v8 = &__s;
    }
    else {
      std::string v8 = (std::string *)__s.__r_.__value_.__r.__words[0];
    }
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = __s.__r_.__value_.__l.__size_;
    }
    std::string::append(a1, (const std::string::value_type *)v8, v9);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t v10 = (void *)__s.__r_.__value_.__r.__words[0];
LABEL_55:
      operator delete(v10);
    }
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
}

void sub_100854228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, int a12, __int16 a13, char a14, char a15, xpc_object_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_release(a16);
  if (*(char *)(v35 + 23) < 0) {
    operator delete(*(void **)v35);
  }
  _Unwind_Resume(a1);
}

void sub_100854358(uint64_t a1, uint64_t a2)
{
  sub_1000492E0(a2, &object);
  std::string __p = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v5) < 0) {
    operator delete(__p);
  }
  xpc_release(object);
}

void sub_1008543C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void sub_1008543EC()
{
}

void *sub_100854400(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A11538;
  result[1] = v3;
  return result;
}

uint64_t sub_100854448(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A11538;
  a2[1] = v2;
  return result;
}

void sub_100854474(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v2 = *(NSObject **)(*(void *)(a1 + 8) + 80);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = asString();
    uint64_t v4 = __p;
    if (v6 < 0) {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315394;
    uint64_t v8 = v3;
    __int16 v9 = 2080;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Operating mode: %s; Assertion holders: %s",
      buf,
      0x16u);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100854560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10085457C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1008545BC()
{
}

void sub_1008545C8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100854634()
{
}

void *sub_100854658(void *a1, void *a2)
{
  uint64_t v4 = (ctu::OsLogLogger *)(a1 + 1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v7, kCtLoggingSystemName, "call.metrics");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v8, &v7);
  ctu::OsLogLogger::OsLogLogger(v4, (const ctu::OsLogLogger *)v8);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = off_101A11620;
  a1[4] = *a2;
  uint64_t v5 = a2[1];
  a1[5] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_100854734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  CallMetricsUtilityInterface::~CallMetricsUtilityInterface(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100854768(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (*(void *)a3 && *(unsigned char *)(*(void *)a3 + 292))
  {
    uint64_t v3 = result;
    v5[0] = 0;
    v5[1] = 524538;
    if (sub_10017B48C()) {
      operator new();
    }
    uint64_t v4 = v3[1];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Not submitting Thumper Handoff metric since it's not collectable", buf, 2u);
    }
    return sub_100855440(v5);
  }
  return result;
}

void sub_1008549E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100854A58(wis::MetricFactory *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v10 = _NSConcreteStackBlock;
  uint64_t v11 = 0x40000000;
  std::string::size_type v12 = sub_100854C7C;
  std::string v13 = &unk_101A11650;
  std::string::size_type v14 = a1;
  uint64_t v15 = a2;
  int v16 = a4;
  int v17 = a3;
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(a1);
  uint64_t v5 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, 0x800C6u);
  if (v5)
  {
    uint64_t v6 = (wis::MetricContainer *)v5;
    OsLogContext v7 = sub_10001C8F4(8);
    uint64_t v9 = *v7;
    uint64_t v8 = (std::__shared_weak_count *)v7[1];
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v9) {
      operator new();
    }
    if (v8) {
      sub_10004D2C8(v8);
    }
    wis::MetricContainer::~MetricContainer(v6);
    operator delete();
  }
}

void sub_100854BDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100854C7C(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Submit AWD Metric redialCallOverCS", v11, 2u);
  }
  uint64_t v5 = **(void **)(a1 + 40);
  int v6 = *(_DWORD *)(a1 + 52);
  if (*(unsigned char *)(v5 + 172) == 2) {
    int v7 = 1000;
  }
  else {
    int v7 = *(_DWORD *)(a1 + 48);
  }
  int v8 = a2[21];
  a2[4] = v7;
  a2[21] = v8 | 0x1002;
  int v9 = *(_DWORD *)(v5 + 256);
  a2[21] = v8 | 0x1022;
  int v10 = *(_DWORD *)(v5 + 168);
  a2[7] = *(_DWORD *)(v5 + 664);
  a2[8] = v9;
  a2[21] = v8 | 0x1832;
  a2[15] = v6;
  a2[16] = v10;
}

void sub_100854D4C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    if (*(unsigned char *)(*(void *)a2 + 488))
    {
      *(void *)buf = 0;
      uint64_t v7 = 524610;
      if (sub_10017B48C()) {
        operator new();
      }
      uint64_t v4 = *(NSObject **)(a1 + 8);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I CallMetricRedial: Not submitting redial delay metric since it's not collectable", v5, 2u);
      }
      sub_1008555F0((uint64_t *)buf);
    }
    else
    {
      uint64_t v3 = *(NSObject **)(a1 + 8);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "CallMetricRedial: No redial delay information found. Do not submit.", buf, 2u);
      }
    }
  }
}

void sub_100854FAC()
{
}

uint64_t *sub_100855014(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Submitting unciphered connection AWD metric", buf, 2u);
  }
  *(void *)buf = 0;
  uint64_t v7 = 524544;
  if (sub_10017B48C()) {
    operator new();
  }
  uint64_t v3 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Not submitting unciphered radio connection metric since it's not collectable", v5, 2u);
  }
  return sub_1008557A0((uint64_t *)buf);
}

void sub_100855178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1008557A0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1008551E4(void *a1)
{
  *a1 = off_101A11620;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 1));

  CallMetricsUtilityInterface::~CallMetricsUtilityInterface((CallMetricsUtilityInterface *)a1);
}

void sub_100855254(void *a1)
{
  *a1 = off_101A11620;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 1));
  CallMetricsUtilityInterface::~CallMetricsUtilityInterface((CallMetricsUtilityInterface *)a1);

  operator delete();
}

void sub_1008552D8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100855358(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100855394(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1008553CC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1008553FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *sub_100855440(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = sub_10001C8F4(8);
  uint64_t v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    uint64_t v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    int v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 56))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 56) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_1008555A0(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_1008555F0(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = sub_10001C8F4(8);
  uint64_t v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    uint64_t v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    int v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 72))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 72) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100855750(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_1008557A0(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = sub_10001C8F4(8);
  uint64_t v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    uint64_t v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    int v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 28))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 28) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100855900(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

void sub_100855950(NSObject **a1@<X1>, uint64_t a2@<X2>, long long *a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v7 = *(Registry **)a2;
  int v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_100894F88(a1, &v7, (uint64_t *)&v6, &v9);
  *a4 = v9;
  long long v9 = 0uLL;
  if (*((void *)&v6 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v6 + 1));
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
}

void sub_1008559D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008559F8(NSObject **a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, long long *a4@<X4>, _OWORD *a5@<X8>)
{
  long long v6 = *(std::__shared_weak_count **)(a2 + 8);
  int v8 = *(Registry **)a2;
  long long v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v7 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  sub_1004E9664(a1, &v8, a3, (uint64_t *)&v7, &v10);
  *a5 = v10;
  long long v10 = 0uLL;
  if (*((void *)&v7 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v7 + 1));
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_100855A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100855AA0(dispatch_object_t *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  long long v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100D6F344(a1, &v5, &v7);
  *a3 = v7;
  long long v7 = 0uLL;
  if (v6) {
    sub_10004D2C8(v6);
  }
}

void sub_100855B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100855B20(dispatch_object_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  long long v10 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  int v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100938900(a1, &v9, &v7, &v11);
  *a4 = v11;
  long long v11 = 0uLL;
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
}

void sub_100855BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100855BD4(dispatch_object_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v17 = *a2;
  std::string::size_type v18 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v8 = (std::__shared_weak_count *)a3[1];
  uint64_t v15 = *a3;
  int v16 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a1;
  long long v10 = (std::__shared_weak_count *)operator new(0x50uLL);
  long long v11 = v10;
  v10->__shared_owners_ = 0;
  v10->__shared_weak_owners_ = 0;
  v10->__vftable = (std::__shared_weak_count_vtbl *)off_101A117E0;
  uint64_t v12 = &v10[1].__vftable;
  long long v20 = v9;
  if (v9)
  {
    dispatch_retain(v9);
    sub_10078E0D0(v12, a2, &v20);
    dispatch_release(v9);
  }
  else
  {
    sub_10078E0D0(&v10[1].__vftable, a2, &v20);
  }
  std::string v13 = v12;
  std::string::size_type v14 = v11;
  sub_1001FD6B0(a1, &v17, &v15, (uint64_t *)&v13, &v19);
  *a4 = v19;
  long long v19 = 0uLL;
  if (v14) {
    sub_10004D2C8(v14);
  }
  if (v16) {
    sub_10004D2C8(v16);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
}

void sub_100855D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100855D3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a3 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a4) {
    operator new();
  }
  *a4 = 0;
  uint64_t v6 = *(void *)(a5 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10044B268();
}

void sub_100855E54(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100855E9C(dispatch_object_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _OWORD *a4@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  long long v10 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  int v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_101031958(a1, &v9, &v7, &v11);
  *a4 = v11;
  long long v11 = 0uLL;
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
}

void sub_100855F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100855F50(NSObject **a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v7 = *a2;
  int v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = operator new(0x48uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = off_101A87BE8;
  sub_1010B5AE8(v6 + 3, a1, &v7);
  *a3 = v6 + 3;
  a3[1] = v6;
  if (v8) {
    sub_10004D2C8(v8);
  }
}

void sub_100855FEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_100856004@<D0>(NSObject **a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  sub_10059EBE8(a2, a1, (std::__shared_weak_count **)&v5);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void sub_100856044(LazuliComponentsFactoryInterface *a1)
{
  LazuliComponentsFactoryInterface::~LazuliComponentsFactoryInterface(a1);

  operator delete();
}

void sub_10085607C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A117E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10085609C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A117E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1008560F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

void sub_10085611C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100856154(uint64_t a1)
{
}

uint64_t sub_10085615C(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void sub_1008561A0(uint64_t a1@<X0>, void *a2@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  sub_10003EAD0(a1, &__p);
  int v3 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __p.__r_.__value_.__l.__size_;
  }
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_1000C140C((uint64_t)a2, size + 12);
  if (*((char *)a2 + 23) < 0) {
    a2 = (void *)*a2;
  }
  if (size)
  {
    if (v3 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    memmove(a2, p_p, size);
  }
  strcpy((char *)a2 + size, " (old-style)");
  if (v3 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10085626C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (v9 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100856284(uint64_t a1, _OWORD *a2, uint64_t a3, const char ***a4)
{
  uint64_t v4 = *(Registry **)(a1 + 8);
  if (v4)
  {
    memset(&oslog, 0, sizeof(oslog));
    ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, v4);
    int v9 = ServiceMap;
    if (v10 < 0)
    {
      long long v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v12 = 5381;
      do
      {
        uint64_t v10 = v12;
        unsigned int v13 = *v11++;
        uint64_t v12 = (33 * v12) ^ v13;
      }
      while (v13);
    }
    std::mutex::lock(ServiceMap);
    *(void *)buf = v10;
    std::string::size_type v14 = sub_10004D37C(&v9[1].__m_.__sig, (unint64_t *)buf);
    if (v14)
    {
      uint64_t v16 = v14[3];
      uint64_t v15 = (std::__shared_weak_count *)v14[4];
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v9);
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v15);
        char v17 = 0;
LABEL_13:
        long long v20 = a2[1];
        v30[0] = *a2;
        v30[1] = v20;
        (*(void (**)(std::string *__return_ptr, uint64_t, _OWORD *))(*(void *)v16 + 96))(&oslog, v16, v30);
        if ((v17 & 1) == 0) {
          sub_10004D2C8(v15);
        }
        std::string::size_type size = HIBYTE(oslog.__r_.__value_.__r.__words[2]);
        if ((oslog.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = oslog.__r_.__value_.__l.__size_;
        }
        if (!size) {
          std::string::operator=(&oslog, (const std::string *)(a3 + 8));
        }
        long long v22 = *a4;
        uint64_t v23 = a4[1];
        buf[0] = 0;
        std::string::size_type v24 = sub_10004DCA4(v22, v23, (const void **)&oslog.__r_.__value_.__l.__data_);
        std::string v25 = a4[1];
        BOOL v19 = v24 != v25;
        if (v24 == v25)
        {
          os_log_t v29 = 0;
          ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&v29, kCtLoggingSystemName, "xpc.ent");
          xpc_object_t v26 = v29;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            p_std::string oslog = &oslog;
            if ((oslog.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_std::string oslog = (std::string *)oslog.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136380675;
            *(void *)&uint8_t buf[4] = p_oslog;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#N %{private}s not in access control list", buf, 0xCu);
          }
          ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&v29);
        }
        if (SHIBYTE(oslog.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(oslog.__r_.__value_.__l.__data_);
        }
        return v19;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    std::mutex::unlock(v9);
    uint64_t v15 = 0;
    char v17 = 1;
    goto LABEL_13;
  }
  oslog.__r_.__value_.__r.__words[0] = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&oslog, kCtLoggingSystemName, "xpc.ent");
  std::string::size_type v18 = oslog.__r_.__value_.__r.__words[0];
  if (os_log_type_enabled((os_log_t)oslog.__r_.__value_.__l.__data_, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "registry was not provided", buf, 2u);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&oslog);
  return 0;
}

void sub_100856530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100856628(void *a1)
{
  *a1 = off_101A11890;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  int v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

void *sub_100856684(void *a1)
{
  *a1 = off_101A11890;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  int v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

void sub_1008566E0(void *a1)
{
  *a1 = off_101A11890;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  int v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10004D2C8(v3);
  }

  operator delete();
}

BOOL sub_100856774(int *a1, int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_100050AC0(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_100054A64(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1008568F4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      int v8 = a1 + 2;
      sub_100050AC0(a1, a1 + 1, a1 + 2);
      int v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 12;
      break;
  }
  while (1)
  {
    int v12 = *v9;
    int v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 4;
        if (v14 == 4) {
          break;
        }
        int v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          uint64_t v16 = (int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      *uint64_t v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    int v8 = v9;
    v11 += 4;
    if (++v9 == a2) {
      return 1;
    }
  }
}

int *sub_1008568F4(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  BOOL result = sub_100054A64(a1, a2, a3, a4);
  int v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    int v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      int v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        int v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

void sub_100856998(PB::Base *this)
{
  *(void *)this = &off_101A11950;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    int v3 = (void *)*((void *)this + 7);
    uint64_t v4 = (void *)*((void *)this + 6);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7) {
    sub_100206334((uint64_t)this + 40, v7);
  }
  uint64_t v8 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v8) {
    sub_100206334((uint64_t)this + 32, v8);
  }
  int v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    int v10 = (void *)*((void *)this + 2);
    int v11 = (void *)*((void *)this + 1);
    if (v10 != v9)
    {
      do
      {
        uint64_t v13 = *--v10;
        uint64_t v12 = v13;
        void *v10 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
      }
      while (v10 != v9);
      int v11 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v9;
    operator delete(v11);
  }

  PB::Base::~Base(this);
}

void sub_100856AD4(PB::Base *a1)
{
  sub_100856998(a1);

  operator delete();
}

uint64_t sub_100856B0C(uint64_t result, void *a2)
{
  *(void *)BOOL result = &off_101A11950;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  if (a2[5]) {
    operator new();
  }
  if (a2[4]) {
    operator new();
  }
  if (a2[6] != a2[7]) {
    operator new();
  }
  if (a2[1] != a2[2]) {
    operator new();
  }
  return result;
}

void sub_100856E38(void *a1)
{
}

uint64_t sub_100856EC8(void *a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v6 = (uint64_t *)a1[2];
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "linkedInfos");
  }
  if (a1[4]) {
    PB::TextFormatter::format();
  }
  if (a1[5]) {
    PB::TextFormatter::format();
  }
  uint64_t v8 = (uint64_t *)a1[6];
  int v9 = (uint64_t *)a1[7];
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, this, "pairedDeviceInfo");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_100856FE4(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        BOOL v13 = v9++ > 8;
        if (v13) {
          goto LABEL_19;
        }
      }
LABEL_22:
      unsigned __int8 v18 = v10 & 7;
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v19 = v10 >> 3;
      switch((v10 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        default:
          break;
      }
LABEL_20:
      uint64_t result = PB::Reader::skip(this, v19, v18, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_22;
      }
      v14 += 7;
      unint64_t v2 = v16;
      BOOL v13 = v15++ > 8;
      if (v13)
      {
LABEL_19:
        unsigned __int8 v18 = 0;
        LODWORD(v19) = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_100857488(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *sub_1008574FC(void *result, PB::Writer *this)
{
  unint64_t v3 = result;
  if (result[5]) {
    uint64_t result = (void *)PB::Writer::write();
  }
  if (v3[4]) {
    uint64_t result = (void *)PB::Writer::write();
  }
  int v4 = (const PB::Base **)v3[6];
  uint64_t v5 = (const PB::Base **)v3[7];
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    uint64_t result = (void *)PB::Writer::writeSubmessage(this, v6, 4u);
  }
  char v8 = (const PB::Base **)v3[1];
  uint64_t v7 = (const PB::Base **)v3[2];
  while (v8 != v7)
  {
    unsigned int v9 = *v8++;
    uint64_t result = (void *)PB::Writer::writeSubmessage(this, v9, 5u);
  }
  return result;
}

uint64_t sub_100857590(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = off_101A119A0;
  int v4 = (void *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v8, kCtLoggingSystemName, "cp.pst");
  sub_1008576CC(v4, "CellularPlanPersistenceControllerImpl", QOS_CLASS_UTILITY, &v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v8);
  *(void *)a1 = off_101A119A0;
  uint64_t v5 = *a2;
  *(void *)(a1 + 48) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 56) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    uint64_t v5 = *(void *)(a1 + 48);
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 584))(v5);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  return a1;
}

void sub_10085768C(_Unwind_Exception *a1)
{
  int v4 = *(std::__shared_weak_count **)(v1 + 56);
  if (v4) {
    sub_10004D2C8(v4);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(v1 + 40));
  sub_100087E88(v2);
  _Unwind_Resume(a1);
}

void *sub_1008576CC(void *a1, const char *a2, dispatch_qos_class_t a3, const OsLogContext *a4)
{
  dispatch_object_t object = 0;
  sub_10058A678(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&object, a4);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), (const ctu::OsLogLogger *)&object);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&object);
  return a1;
}

void sub_100857734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&object);
  sub_100087E88(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_10085776C(uint64_t a1)
{
  *(void *)a1 = off_101A119A0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  unint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    sub_10004D2C8(v3);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 56);
  if (v4) {
    sub_10004D2C8(v4);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_1008577FC(uint64_t a1)
{
  sub_10085776C(a1);

  operator delete();
}

void sub_100857834(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100857914(uint64_t a1, uint64_t a2)
{
  sub_100860AEC((uint64_t)&v4 + 8, a2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100857B5C(std::string *a1)
{
  WirelessUserDirectory = (char *)_GetWirelessUserDirectory();
  sub_100058DB0(&v4, WirelessUserDirectory);
  unint64_t v3 = std::string::append(&v4, "/Library/Preferences/no_backup/", 0x1FuLL);
  *a1 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_100857BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100857BEC(uint64_t a1, void *a2)
{
  unint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::string v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100857DE0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100857DFC(unsigned char *a1, uint64_t a2)
{
  sub_100857B5C(&__dst);
  unint64_t v3 = std::string::append(&__dst, "com.apple.CommCenter.CellularPlan.plist", 0x27uLL);
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v101 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, void **))(*(void *)a2 + 880))(&v86, a2, __p);
  v66 = v86.__r_.__value_.__l.__data_;
  sub_100030068((const void **)&v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(v101) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (!v66)
  {
    *a1 = 0;
    a1[144] = 0;
    goto LABEL_126;
  }
  __p[1] = 0;
  __p[0] = &__p[1];
  v106[1] = 0;
  v106[0] = 0;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v104 = 0u;
  std::string::size_type v101 = 0;
  v105 = (uint64_t *)v106;
  memset(v108, 0, 40);
  v107 = (uint64_t *)v108;
  id v5 = objc_alloc((Class)NSKeyedUnarchiver);
  id v99 = 0;
  id v6 = [v5 initForReadingFromData:v66 error:&v99];
  id v7 = v99;
  v57 = v7;
  if (v6 && !v7)
  {
    v58 = v6;
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = objc_opt_class();
    v54 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v8, v9, v10, objc_opt_class(), 0);
    v59 = [v6 decodeObjectOfClass:objc_opt_class() forKey:@"version"];
    if (!v59 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
    {
      [v6 finishDecoding];
      sub_100860F94((uint64_t)a1, (uint64_t)__p);
LABEL_118:

      id v6 = v58;
      goto LABEL_119;
    }
    if ([v59 intValue] == 2)
    {
      id v62 = [v6 decodeObjectOfClass:objc_opt_class() forKey:@"lastSelectedIccid"];
      id v63 = 0;
      unint64_t v11 = 0;
      char v12 = 0;
      v64 = 0;
      v65 = 0;
      v60 = 0;
    }
    else if ([v59 intValue] == 3)
    {
      uint64_t v13 = [v6 decodeObjectOfClass:objc_opt_class() forKey:@"lastSelectedIccid"];
      unint64_t v11 = [v58 decodeObjectOfClass:objc_opt_class() forKey:@"userActiveDataSelectedPlanIccid"];
      uint64_t v14 = [v58 decodeObjectOfClass:objc_opt_class() forKey:@"userDefaultVoiceSelectedPlanIccid"];
      uint64_t v15 = [v58 decodeObjectOfClasses:v54 forKey:@"carrierNames"];
      uint64_t v16 = [v58 decodeObjectOfClasses:v54 forKey:@"carrierDescriptors"];
      uint64_t v17 = [v58 decodeObjectOfClasses:v54 forKey:@"userDisabledPhySimIccid"];
      [v58 decodeObjectOfClasses:v54 forKey:@"userEnabledIccids"];
      id v62 = (id)v13;
      id v63 = (id)v17;
      v64 = (void *)v15;
      v60 = v65 = (void *)v16;
      char v12 = (void *)v14;
    }
    else
    {
      id v62 = 0;
      id v63 = 0;
      unint64_t v11 = 0;
      char v12 = 0;
      v64 = 0;
      v65 = 0;
      v60 = 0;
    }
    id v55 = v12;
    id v56 = v11;
    [v58 finishDecoding];
    if (v62)
    {
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)[v62 UTF8String];
      sub_100495908((uint64_t **)__p, &__dst.__r_.__value_.__l.__data_);
    }
    else
    {
      unsigned __int8 v18 = v11;
      if (!v60)
      {
LABEL_30:
        if (v18) {
          sub_10003ED78((std::string *)&v102, (char *)[v11 UTF8String]);
        }
        if (v55) {
          sub_10003ED78((std::string *)((char *)&v103 + 8), (char *)[v55 UTF8String]);
        }
        if (v64)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            long long v93 = 0u;
            long long v94 = 0u;
            long long v91 = 0u;
            long long v92 = 0u;
            id v23 = v64;
            id v24 = [v23 countByEnumeratingWithState:&v91 objects:v111 count:16];
            if (v24)
            {
              uint64_t v25 = 0;
              uint64_t v26 = *(void *)v92;
              for (uint64_t i = *(void *)v92; ; uint64_t i = *(void *)v92)
              {
                if (i != v26) {
                  objc_enumerationMutation(v23);
                }
                id v28 = *(id *)(*((void *)&v91 + 1) + 8 * v25);
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  os_log_t v29 = [v23 objectForKey:v28];
                  objc_opt_class();
                  char isKindOfClass = objc_opt_isKindOfClass();

                  if (isKindOfClass)
                  {
                    id v31 = [v23 objectForKey:v28];
                    v32 = (char *)[v31 UTF8String];
                    sub_100058DB0(&__dst, (char *)[v28 UTF8String]);
                    v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
                    v33 = sub_100327F4C(&v105, (void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_10144E20E, &v86);
                    sub_10003ED78((std::string *)((char *)v33 + 56), v32);
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__dst.__r_.__value_.__l.__data_);
                    }
                  }
                }

                if (++v25 >= (unint64_t)v24)
                {
                  id v24 = [v23 countByEnumeratingWithState:&v91 objects:v111 count:16];
                  if (!v24) {
                    break;
                  }
                  uint64_t v25 = 0;
                }
              }
            }
          }
        }
        if (v65)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            long long v89 = 0u;
            long long v90 = 0u;
            long long v87 = 0u;
            long long v88 = 0u;
            id obj = v65;
            id v34 = [obj countByEnumeratingWithState:&v87 objects:v110 count:16];
            if (v34)
            {
              uint64_t v35 = *(void *)v88;
              do
              {
                for (j = 0; j != v34; j = (char *)j + 1)
                {
                  if (*(void *)v88 != v35) {
                    objc_enumerationMutation(obj);
                  }
                  v37 = *(void **)(*((void *)&v87 + 1) + 8 * (void)j);
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
                    v38 = [obj objectForKeyedSubscript:v37];
                    objc_opt_class();
                    if (objc_opt_isKindOfClass())
                    {
                      v39 = [v38 objectForKeyedSubscript:@"mcc"];
                      objc_opt_class();
                      if (objc_opt_isKindOfClass())
                      {
                        v40 = [v38 objectForKeyedSubscript:@"mnc"];
                        objc_opt_class();
                        if (objc_opt_isKindOfClass())
                        {
                          v41 = [v38 objectForKeyedSubscript:@"gid1"];
                          objc_opt_class();
                          if (objc_opt_isKindOfClass())
                          {
                            v42 = [v38 objectForKeyedSubscript:@"gid2"];
                            objc_opt_class();
                            char v43 = objc_opt_isKindOfClass();

                            if (v43)
                            {
                              memset(&v86, 0, sizeof(v86));
                              sub_100058DB0(&v86, (char *)[v37 UTF8String]);
                              v84[0] = 0;
                              v84[1] = 0;
                              uint64_t v85 = 0;
                              id v44 = [v38 objectForKeyedSubscript:@"mcc"];
                              sub_100058DB0(v84, (char *)[v44 UTF8String]);

                              long long v82 = 0uLL;
                              uint64_t v83 = 0;
                              id v45 = [v38 objectForKeyedSubscript:@"mnc"];
                              sub_100058DB0(&v82, (char *)[v45 UTF8String]);

                              v80[0] = 0;
                              v80[1] = 0;
                              uint64_t v81 = 0;
                              id v46 = [v38 objectForKeyedSubscript:@"gid1"];
                              sub_100058DB0(v80, (char *)[v46 UTF8String]);

                              long long v78 = 0uLL;
                              uint64_t v79 = 0;
                              id v47 = [v38 objectForKeyedSubscript:@"gid2"];
                              sub_100058DB0(&v78, (char *)[v47 UTF8String]);

                              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                                sub_10004FC84(&__dst, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
                              }
                              else {
                                std::string __dst = v86;
                              }
                              char v69 = 1;
                              if (SHIBYTE(v85) < 0)
                              {
                                sub_10004FC84(&v70, v84[0], (unint64_t)v84[1]);
                              }
                              else
                              {
                                long long v70 = *(_OWORD *)v84;
                                uint64_t v71 = v85;
                              }
                              if (SHIBYTE(v83) < 0)
                              {
                                sub_10004FC84(&v72, (void *)v82, *((unint64_t *)&v82 + 1));
                              }
                              else
                              {
                                long long v72 = v82;
                                uint64_t v73 = v83;
                              }
                              if (SHIBYTE(v81) < 0)
                              {
                                sub_10004FC84(&v74, v80[0], (unint64_t)v80[1]);
                              }
                              else
                              {
                                long long v74 = *(_OWORD *)v80;
                                uint64_t v75 = v81;
                              }
                              if (SHIBYTE(v79) < 0)
                              {
                                sub_10004FC84(&v76, (void *)v78, *((unint64_t *)&v78 + 1));
                              }
                              else
                              {
                                long long v76 = v78;
                                uint64_t v77 = v79;
                              }
                              v109 = &v86;
                              v48 = sub_10086299C(&v107, (void **)&v86.__r_.__value_.__l.__data_, (uint64_t)&unk_10144E20E, (long long **)&v109);
                              sub_100179CB0((uint64_t)(v48 + 7), (__n128 *)&__dst);
                              v49 = (void **)(v48 + 11);
                              if (*((char *)v48 + 111) < 0) {
                                operator delete(*v49);
                              }
                              v48[13] = v71;
                              *(_OWORD *)v49 = v70;
                              HIBYTE(v71) = 0;
                              LOBYTE(v70) = 0;
                              v50 = (void **)(v48 + 14);
                              if (*((char *)v48 + 135) < 0) {
                                operator delete(*v50);
                              }
                              v48[16] = v73;
                              *(_OWORD *)v50 = v72;
                              HIBYTE(v73) = 0;
                              LOBYTE(v72) = 0;
                              v51 = (void **)(v48 + 17);
                              if (*((char *)v48 + 159) < 0) {
                                operator delete(*v51);
                              }
                              v48[19] = v75;
                              *(_OWORD *)v51 = v74;
                              HIBYTE(v75) = 0;
                              LOBYTE(v74) = 0;
                              v52 = (void **)(v48 + 20);
                              if (*((char *)v48 + 183) < 0)
                              {
                                operator delete(*v52);
                                int v53 = SHIBYTE(v75);
                                *(_OWORD *)v52 = v76;
                                v48[22] = v77;
                                HIBYTE(v77) = 0;
                                LOBYTE(v76) = 0;
                                if (v53 < 0) {
                                  operator delete((void *)v74);
                                }
                              }
                              else
                              {
                                *(_OWORD *)v52 = v76;
                                v48[22] = v77;
                                HIBYTE(v77) = 0;
                                LOBYTE(v76) = 0;
                              }
                              if (SHIBYTE(v73) < 0) {
                                operator delete((void *)v72);
                              }
                              if (SHIBYTE(v71) < 0) {
                                operator delete((void *)v70);
                              }
                              if (v69 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(__dst.__r_.__value_.__l.__data_);
                              }
                              if (SHIBYTE(v79) < 0) {
                                operator delete((void *)v78);
                              }
                              if (SHIBYTE(v81) < 0) {
                                operator delete(v80[0]);
                              }
                              if (SHIBYTE(v83) < 0) {
                                operator delete((void *)v82);
                              }
                              if (SHIBYTE(v85) < 0) {
                                operator delete(v84[0]);
                              }
                              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                                operator delete(v86.__r_.__value_.__l.__data_);
                              }
                            }
                          }
                          else
                          {
                          }
                        }
                        else
                        {
                        }
                      }
                      else
                      {
                      }
                    }
                  }
                }
                id v34 = [obj countByEnumeratingWithState:&v87 objects:v110 count:16];
              }
              while (v34);
            }
          }
        }
        if (v63)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            sub_100058DB0(&__dst, (char *)[v63 UTF8String]);
            if (SBYTE7(v108[2]) < 0) {
              operator delete(*(void **)&v108[1]);
            }
            *(std::string *)&v108[1] = __dst;
          }
        }
        sub_100860F94((uint64_t)a1, (uint64_t)__p);

        goto LABEL_118;
      }
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      id v19 = v60;
      id v20 = [v19 countByEnumeratingWithState:&v95 objects:v112 count:16];
      if (v20)
      {
        uint64_t v21 = *(void *)v96;
        do
        {
          for (k = 0; k != v20; k = (char *)k + 1)
          {
            if (*(void *)v96 != v21) {
              objc_enumerationMutation(v19);
            }
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)[*(id *)(*((void *)&v95 + 1) + 8 * (void)k) UTF8String];
            sub_100495908((uint64_t **)__p, &__dst.__r_.__value_.__l.__data_);
          }
          id v20 = [v19 countByEnumeratingWithState:&v95 objects:v112 count:16];
        }
        while (v20);
      }
    }
    unsigned __int8 v18 = v11;
    goto LABEL_30;
  }
  sub_100860F94((uint64_t)a1, (uint64_t)__p);
LABEL_119:

  if (SBYTE7(v108[2]) < 0) {
    operator delete(*(void **)&v108[1]);
  }
  sub_10010E37C((uint64_t)&v107, *(void **)&v108[0]);
  sub_10010C0E0((uint64_t)&v105, v106[0]);
  if (SHIBYTE(v104) < 0) {
    operator delete(*((void **)&v103 + 1));
  }
  if (SBYTE7(v103) < 0) {
    operator delete((void *)v102);
  }
  sub_10005CD2C((uint64_t)__p, (char *)__p[1]);
LABEL_126:
}

void sub_100858D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,void *a29,void *a30,void *a31)
{
  sub_100859044((uint64_t)&STACK[0x290]);
  _Unwind_Resume(a1);
}

uint64_t sub_100859044(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  sub_10010E37C(a1 + 96, *(void **)(a1 + 104));
  sub_10010C0E0(a1 + 72, *(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  sub_10005CD2C(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_1008590BC(uint64_t a1, uint64_t *a2)
{
  memset(v4, 0, sizeof(v4));
  sub_100427CA0(v4, *a2, a2[1], 0x34F72C234F72C235 * ((a2[1] - *a2) >> 3));
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085921C(uint64_t a1, void *a2)
{
  unint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      id v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      id v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    id v6 = 0;
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100859410(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10085942C(uint64_t a1, uint64_t *a2)
{
  memset(v4, 0, sizeof(v4));
  sub_1003229A4(v4, *a2, a2[1], 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3));
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085958C(uint64_t a1, void *a2)
{
  unint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      id v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      id v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    id v6 = 0;
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100859780(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10085979C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    id v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v7);
      v9[0] = 0;
      v9[1] = 0;
      uint64_t v10 = 0;
      sub_10005C928(v9, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
      if (*(char *)(a3 + 23) < 0)
      {
        sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)a3;
        __p[2] = *(void **)(a3 + 16);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
      if (v8)
      {
        if (std::__shared_weak_count::lock(v8)) {
          operator new();
        }
      }
      sub_100088B9C();
    }
  }
  sub_100088B9C();
}

void sub_10085995C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100859994(uint64_t a1, void *a2)
{
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (id v5 = std::__shared_weak_count::lock(v3)) == 0) {
    sub_100088B9C();
  }
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v5);
  uint64_t v6 = a2[3];
  if (v6)
  {
    if ((void *)v6 == a2)
    {
      uint64_t v9 = v8;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v8);
LABEL_8:
      id v7 = *(std::__shared_weak_count **)(a1 + 16);
      if (v7)
      {
        if (std::__shared_weak_count::lock(v7)) {
          operator new();
        }
      }
      sub_100088B9C();
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  uint64_t v9 = (void *)v6;
  goto LABEL_8;
}

void sub_100859BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_100859BF0(uint64_t a1, unsigned __int8 **a2)
{
  id v4 = [objc_alloc((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  id v5 = +[NSNumber numberWithInt:3];
  [v4 encodeObject:v5 forKey:@"version"];

  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    id v7 = +[NSMutableArray arrayWithCapacity:0x6F96F96F96F96F97 * (v6 >> 5)];
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    while (v8 != v9)
    {
      uint64_t v10 = sub_1013EFFC4(v8);
      if (v10) {
        [v7 addObject:v10];
      }

      v8 += 1248;
    }
    if ([v7 count]) {
      id v11 = v7;
    }
    else {
      id v11 = 0;
    }
  }
  else
  {
    id v11 = 0;
  }
  [v4 encodeObject:v11 forKey:@"pendingTransferInfo"];
  id v12 = [v4 encodedData];
  uint64_t v13 = v12;
  if (v12)
  {
    CFRetain(v12);
    CFRetain(v13);
  }
  uint64_t v14 = *(void *)(a1 + 56);
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 16);
  if (v15 && std::__shared_weak_count::lock(v15)) {
    operator new();
  }
  sub_100088B9C();
}

void sub_100859E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100859E90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_100866390((uint64_t)&v5, a2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100859FC4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100859FD4(void *a1, uint64_t *a2, std::string *__str, char **a4, long long *a5, uint64_t a6)
{
  uint64_t v33 = 0;
  long long v32 = 0u;
  memset(v31, 0, sizeof(v31));
  std::string::operator=((std::string *)v31, __str);
  if (&v31[24] != (unsigned char *)a4) {
    sub_10006E4A8(&v31[24], *a4, a4[1], a4[1] - *a4);
  }
  id v12 = a1[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = v31;
    if (v31[23] < 0) {
      uint64_t v13 = *(unsigned char **)v31;
    }
    *(_DWORD *)buf = 136315394;
    v54 = v13;
    __int16 v55 = 2048;
    uint64_t v56 = v32 - *(void *)&v31[24];
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Upload to cloud for [%s] with [%ld] bytes", buf, 0x16u);
  }
  uint64_t v14 = a1[8];
  uint64_t v15 = *a2;
  if ((v31[23] & 0x80000000) != 0)
  {
    sub_10004FC84(v25, *(void **)v31, *(unint64_t *)&v31[8]);
  }
  else
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v31;
    uint64_t v26 = *(void *)&v31[16];
  }
  std::string __p = 0;
  id v28 = 0;
  uint64_t v29 = 0;
  sub_10005C928(&__p, *(const void **)&v31[24], v32, v32 - *(void *)&v31[24]);
  uint64_t v30 = v33;
  uint64_t v16 = (std::__shared_weak_count *)a1[2];
  if (!v16 || (uint64_t v17 = a1[1], (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    sub_100088B9C();
  }
  *(void *)&long long v34 = v17;
  *((void *)&v34 + 1) = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v18);
  uint64_t v35 = a1;
  if ((v31[23] & 0x80000000) != 0)
  {
    sub_10004FC84(&v36, *(void **)v31, *(unint64_t *)&v31[8]);
  }
  else
  {
    long long v36 = *(_OWORD *)v31;
    uint64_t v37 = *(void *)&v31[16];
  }
  long long v38 = 0uLL;
  uint64_t v39 = 0;
  sub_10005C928(&v38, *(const void **)&v31[24], v32, v32 - *(void *)&v31[24]);
  uint64_t v40 = v33;
  uint64_t v19 = a2[1];
  *(void *)&long long v41 = *a2;
  *((void *)&v41 + 1) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  long long v42 = 0uLL;
  uint64_t v43 = 0;
  sub_10005C928(&v42, *a4, (uint64_t)a4[1], a4[1] - *a4);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_10004FC84(&v44, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v44 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    std::string::size_type v45 = __str->__r_.__value_.__r.__words[2];
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_10004FC84(&v46, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v46 = *a5;
    uint64_t v47 = *((void *)a5 + 2);
  }
  long long v48 = *(long long *)((char *)a5 + 24);
  long long v49 = *(long long *)((char *)a5 + 40);
  sub_10042ECAC((uint64_t)v50, a6);
  v52 = 0;
  id v20 = operator new(0xF0uLL);
  uint64_t v21 = v20;
  *(_OWORD *)((char *)v20 + 8) = v34;
  void v20[2] = v36;
  *(_OWORD *)((char *)v20 + 56) = v38;
  *((void *)v20 + 10) = v40;
  long long v22 = v42;
  *(_OWORD *)((char *)v20 + 88) = v41;
  *(void *)id v20 = off_101A11C20;
  long long v34 = 0uLL;
  *((void *)v20 + 3) = v35;
  *((void *)v20 + 6) = v37;
  long long v36 = 0uLL;
  uint64_t v37 = 0;
  *((void *)v20 + 9) = v39;
  uint64_t v39 = 0;
  long long v38 = 0uLL;
  long long v41 = 0uLL;
  *(_OWORD *)((char *)v20 + 104) = v22;
  *((void *)v20 + 15) = v43;
  long long v42 = 0uLL;
  uint64_t v43 = 0;
  if (SHIBYTE(v45) < 0)
  {
    sub_10004FC84((unsigned char *)v20 + 128, (void *)v44, *((unint64_t *)&v44 + 1));
  }
  else
  {
    v20[8] = v44;
    *((void *)v20 + 18) = v45;
  }
  id v23 = (char *)v21 + 152;
  if (SHIBYTE(v47) < 0)
  {
    sub_10004FC84(v23, (void *)v46, *((unint64_t *)&v46 + 1));
  }
  else
  {
    *(_OWORD *)id v23 = v46;
    *((void *)v21 + 21) = v47;
  }
  long long v24 = v49;
  v21[11] = v48;
  v21[12] = v24;
  sub_10042E708((uint64_t)(v21 + 13), (uint64_t)v50);
  v52 = v21;
  (*(void (**)(uint64_t, uint64_t, void **, void *))(*(void *)v14 + 32))(v14, v15, v25, v51);
  sub_100322EB8(v51);
  sub_10085A594((uint64_t)&v34);
  if (__p)
  {
    id v28 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  if (*(void *)&v31[24])
  {
    *(void *)&long long v32 = *(void *)&v31[24];
    operator delete(*(void **)&v31[24]);
  }
  if ((v31[23] & 0x80000000) != 0) {
    operator delete(*(void **)v31);
  }
}

void sub_10085A434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,std::__shared_weak_count *a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (*(char *)(v57 + 151) < 0) {
    operator delete(*v58);
  }
  v60 = *(void **)(v57 + 104);
  if (v60)
  {
    *(void *)(v57 + 112) = v60;
    operator delete(v60);
  }
  v61 = *(std::__shared_weak_count **)(v57 + 96);
  if (v61) {
    sub_10004D2C8(v61);
  }
  id v62 = *(void **)(v57 + 56);
  if (v62)
  {
    *(void *)(v57 + 64) = v62;
    operator delete(v62);
  }
  if (*(char *)(v57 + 55) < 0) {
    operator delete(*(void **)(v57 + 32));
  }
  id v63 = *(std::__shared_weak_count **)(v57 + 16);
  if (v63) {
    std::__shared_weak_count::__release_weak(v63);
  }
  operator delete((void *)v57);
  sub_10085A594((uint64_t)&a28);
  sub_1002BEAFC((uint64_t)&a9);
  sub_1002BEAFC((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_10085A58C()
{
}

uint64_t sub_10085A594(uint64_t a1)
{
  sub_100322EB8((void *)(a1 + 200));
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  unint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(void *)(a1 + 104) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_10085A628(long long **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  long long v44 = 0;
  uint64_t v45 = 0;
  uint64_t v43 = &v44;
  if (*(void *)(a3 + 16)) {
    BOOL v5 = a4 == a5;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    uint64_t v7 = a4;
    uint64_t v10 = (os_log_t *)(a2 + 40);
    do
    {
      uint64_t v60 = 0;
      long long v58 = 0u;
      memset(v59, 0, sizeof(v59));
      long long v56 = 0u;
      *(_OWORD *)uint64_t v57 = 0u;
      long long v54 = 0u;
      *(_OWORD *)__int16 v55 = 0u;
      long long v52 = 0u;
      *(_OWORD *)int v53 = 0u;
      long long v50 = 0u;
      *(_OWORD *)v51 = 0u;
      long long v48 = 0u;
      *(_OWORD *)long long v49 = 0u;
      *(_OWORD *)uint64_t v47 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      *(_OWORD *)std::string __p = 0u;
      *(_OWORD *)uint64_t v37 = 0u;
      *(_OWORD *)long long v38 = 0u;
      *(_OWORD *)uint64_t v35 = 0u;
      long long v36 = 0u;
      *(_OWORD *)long long v34 = 0u;
      if (sub_1006D2F20(v10, (const unsigned __int8 **)(v7 + 24), (uint64_t)v47, (std::string *)v34))
      {
        uint64_t v12 = *((void *)&v41 + 1);
        uint64_t v11 = v42;
        while (v12 != v11)
        {
          if (sub_10010E128(a3, (void **)(v12 + 8)))
          {
            uint64_t v13 = *v10;
            if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v14 = v7;
              if (*(char *)(v7 + 23) < 0) {
                uint64_t v14 = *(void *)v7;
              }
              *(_DWORD *)buf = 136315138;
              *(void *)&uint8_t buf[4] = v14;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Found matched uuid: %s", buf, 0xCu);
            }
            sub_100046BAC((uint64_t **)&v43, (void **)v7, v7);
            break;
          }
          v12 += 80;
        }
      }
      *(void *)buf = (char *)&v41 + 8;
      sub_1000C5358((void ***)buf);
      if (SBYTE7(v41) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v39) < 0) {
        operator delete(v38[1]);
      }
      if (SHIBYTE(v38[0]) < 0) {
        operator delete(v37[0]);
      }
      if (SHIBYTE(v36) < 0) {
        operator delete(v35[1]);
      }
      if (SHIBYTE(v35[0]) < 0) {
        operator delete(v34[0]);
      }
      if ((_BYTE)v60)
      {
        v34[0] = (char *)v59 + 8;
        sub_1000C56F4((void ***)v34);
        if (SHIBYTE(v58) < 0) {
          operator delete(v57[1]);
        }
        if (SBYTE7(v56) < 0) {
          operator delete(v55[0]);
        }
        if (BYTE8(v52))
        {
          if (SBYTE7(v54) < 0) {
            operator delete(v53[0]);
          }
          BYTE8(v52) = 0;
        }
        if (BYTE8(v50))
        {
          if (SBYTE7(v52) < 0) {
            operator delete(v51[0]);
          }
          BYTE8(v50) = 0;
        }
        if (SBYTE7(v50) < 0) {
          operator delete(v49[0]);
        }
        if (LOBYTE(v47[0]) && SHIBYTE(v48) < 0) {
          operator delete(v47[1]);
        }
      }
      v7 += 56;
    }
    while (v7 != a5);
    if (v45)
    {
      uint64_t v15 = (uint64_t *)v43;
      if (v43 != &v44)
      {
        int64_t v16 = 0;
        uint64_t v17 = *a1;
        unsigned __int8 v18 = (uint64_t *)v43;
        do
        {
          int64_t v19 = v16;
          id v20 = (char *)v18[1];
          if (v20)
          {
            do
            {
              uint64_t v21 = (char **)v20;
              id v20 = *(char **)v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              uint64_t v21 = (char **)v18[2];
              BOOL v5 = *v21 == (char *)v18;
              unsigned __int8 v18 = (uint64_t *)v21;
            }
            while (!v5);
          }
          ++v16;
          unsigned __int8 v18 = (uint64_t *)v21;
        }
        while (v21 != &v44);
        long long v22 = a1[2];
        id v23 = (char *)a1[1];
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((char *)v22 - v23) >> 3)) <= v19)
        {
          unint64_t v26 = v16 - 0x5555555555555555 * ((v23 - (char *)v17) >> 3);
          if (v26 > 0xAAAAAAAAAAAAAAALL) {
            sub_1000D8578();
          }
          unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22 - (char *)v17) >> 3);
          if (2 * v27 > v26) {
            unint64_t v26 = 2 * v27;
          }
          if (v27 >= 0x555555555555555) {
            unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v28 = v26;
          }
          v49[0] = a1 + 2;
          if (v28) {
            uint64_t v29 = sub_10004812C((uint64_t)(a1 + 2), v28);
          }
          else {
            uint64_t v29 = 0;
          }
          v47[0] = v29;
          v47[1] = v29;
          *(void *)&long long v48 = v29;
          *((void *)&v48 + 1) = &v29[3 * v28];
          uint64_t v30 = &v29[3 * v16];
          do
          {
            if (*((char *)v15 + 55) < 0)
            {
              sub_10004FC84(v29, (void *)v15[4], v15[5]);
            }
            else
            {
              long long v31 = *((_OWORD *)v15 + 2);
              v29[2] = v15[6];
              *(_OWORD *)uint64_t v29 = v31;
            }
            long long v32 = (uint64_t *)v15[1];
            if (v32)
            {
              do
              {
                uint64_t v33 = v32;
                long long v32 = (uint64_t *)*v32;
              }
              while (v32);
            }
            else
            {
              do
              {
                uint64_t v33 = (uint64_t *)v15[2];
                BOOL v5 = *v33 == (void)v15;
                uint64_t v15 = v33;
              }
              while (!v5);
            }
            v29 += 3;
            uint64_t v15 = v33;
          }
          while (v29 != v30);
          *(void *)&long long v48 = v30;
          sub_100861100((uint64_t)a1, v47, v17);
          sub_100048174((uint64_t)v47);
        }
        else
        {
          v47[0] = v43;
          sub_100083E2C((void **)v47, v19 + 1);
          uint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (char *)v17) >> 3);
          if (v24 > v19)
          {
            uint64_t v25 = v47[0];
LABEL_66:
            sub_100861090((uint64_t)a1, (uint64_t)v17, (unint64_t)v23, (uint64_t)v17 + 24 * v16);
            sub_10086123C((int)buf, v15, v25, (std::string *)v17);
            goto LABEL_79;
          }
          v47[0] = v15;
          sub_100083E2C((void **)v47, v24);
          uint64_t v25 = v47[0];
          a1[1] = (long long *)sub_1000F0B60((uint64_t)(a1 + 2), (void *)v47[0], &v44, v23);
          if (v23 - (char *)v17 >= 1) {
            goto LABEL_66;
          }
        }
      }
    }
  }
LABEL_79:
  sub_10005CD2C((uint64_t)&v43, v44);
}

void sub_10085AAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,char *a31)
{
  *(void *)(v31 + 8) = v32;
  sub_10005CD2C((uint64_t)&a30, a31);
  a11 = (void **)v31;
  sub_100047F64(&a11);
  _Unwind_Resume(a1);
}

void sub_10085AB64(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(long long **)(a3 + 8);
  uint64_t v9 = *(std::string **)a3;
  uint64_t v10 = (uint64_t)v8 - *(void *)a3;
  if (v8 == *(long long **)a3)
  {
    uint64_t v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I No records to delete", buf, 2u);
    }
    sub_10006074C(a4, 0, 0);
  }
  else
  {
    *(void *)buf = 0;
    int64_t v19 = 0;
    uint64_t v20 = 0;
    if (buf == (uint8_t *)a3)
    {
      uint64_t v12 = 0;
      uint64_t v11 = 0;
    }
    else
    {
      sub_10005CA3C((uint64_t)buf, v9, v8, 0xAAAAAAAAAAAAAAABLL * (v10 >> 3));
      uint64_t v11 = *(long long **)buf;
      uint64_t v12 = v19;
    }
    uint64_t v14 = *(void *)(a1 + 64);
    uint64_t v15 = *a2;
    memset(v17, 0, sizeof(v17));
    sub_1000302C0((char *)v17, v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
    sub_100323910((uint64_t)v22, a4);
    uint64_t v24 = 0;
    int64_t v16 = operator new(0x28uLL);
    *int64_t v16 = off_101A11CA0;
    sub_100323910((uint64_t)(v16 + 1), (uint64_t)v22);
    uint64_t v24 = v16;
    (*(void (**)(uint64_t, uint64_t, void *, void *))(*(void *)v14 + 40))(v14, v15, v17, v23);
    sub_100060644(v23);
    sub_1000605C0(v22);
    uint64_t v21 = (uint8_t *)v17;
    sub_100047F64((void ***)&v21);
    uint64_t v21 = buf;
    sub_100047F64((void ***)&v21);
  }
}

void sub_10085AD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_10085AD90(uint64_t a1, char a2, uint64_t a3, const std::string **a4, uint64_t a5, uint64_t a6)
{
  *((void *)&v38 + 1) = 0;
  uint64_t v39 = 0;
  *(void *)&long long v38 = (char *)&v38 + 8;
  for (uint64_t i = *(void *)(a3 + 24); i != *(void *)(a3 + 32); i += 168)
  {
    uint64_t v13 = *(unsigned __int8 *)(i + 95);
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(i + 80);
    }
    if (v13)
    {
      uint64_t v14 = *(unsigned __int8 *)(i + 119);
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(i + 104);
      }
      if (!v14)
      {
        uint64_t v59 = 0;
        long long v57 = 0u;
        long long v58 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        memset(v52, 0, sizeof(v52));
        *(_OWORD *)v51 = 0u;
        sub_100857DFC(v51, *(void *)(a1 + 48));
        if ((_BYTE)v59)
        {
          sub_10010E37C((uint64_t)&v38, *((void **)&v38 + 1));
          long long v38 = v56;
          uint64_t v39 = v57;
          if ((void)v57)
          {
            *(void *)(*((void *)&v56 + 1) + 16) = (char *)&v38 + 8;
            *(void *)&long long v56 = (char *)&v56 + 8;
            *((void *)&v56 + 1) = 0;
            *(void *)&long long v57 = 0;
          }
          else
          {
            *(void *)&long long v38 = (char *)&v38 + 8;
          }
        }
        sub_1008613CC((uint64_t)v51);
        break;
      }
    }
  }
  long long v53 = 0u;
  long long v54 = 0u;
  memset(v52, 0, sizeof(v52));
  *(_OWORD *)v51 = 0u;
  uint64_t v15 = (NSObject **)(a1 + 40);
  sub_100CD40B4(a3, (void *)(a1 + 48), (os_log_t *)(a1 + 40), a4, a5, (uint64_t)&v38, (uint64_t)v51);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v37 = 0;
  sub_10005C928(__p, v51[0], (uint64_t)v51[1], (char *)v51[1] - (char *)v51[0]);
  uint64_t v40 = a1;
  sub_10086144C((uint64_t)v41, a3);
  long long v42 = *(_OWORD *)&v52[1];
  uint64_t v43 = v52[3];
  memset(&v52[1], 0, 24);
  long long v44 = v53;
  long long v45 = v54;
  sub_100869F0C((uint64_t)v46, a6);
  long long v47 = *(_OWORD *)v51;
  long long v48 = v52[0];
  v51[1] = 0;
  v52[0] = 0;
  uint64_t v50 = 0;
  v51[0] = 0;
  int64_t v16 = (char *)operator new(0x118uLL);
  uint64_t v17 = v40;
  *(void *)int64_t v16 = off_101A11F20;
  *((void *)v16 + 1) = v17;
  sub_10086144C((uint64_t)(v16 + 16), (uint64_t)v41);
  *(_OWORD *)(v16 + 168) = v42;
  *((void *)v16 + 23) = v43;
  uint64_t v43 = 0;
  long long v42 = 0uLL;
  long long v18 = v45;
  *((_OWORD *)v16 + 12) = v44;
  *((_OWORD *)v16 + 13) = v18;
  sub_100869F0C((uint64_t)(v16 + 224), (uint64_t)v46);
  *((_OWORD *)v16 + 16) = v47;
  *((void *)v16 + 34) = v48;
  long long v48 = 0;
  long long v47 = 0uLL;
  uint64_t v50 = (uint64_t)v16;
  (***(void (****)(uint8_t *__return_ptr))(a1 + 48))(v60);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v19, *(Registry **)v60);
  uint64_t v21 = ServiceMap;
  if (v22 < 0)
  {
    id v23 = (unsigned __int8 *)(v22 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v24 = 5381;
    do
    {
      uint64_t v22 = v24;
      unsigned int v25 = *v23++;
      uint64_t v24 = (33 * v24) ^ v25;
    }
    while (v25);
  }
  std::mutex::lock(ServiceMap);
  *(void *)buf = v22;
  unint64_t v26 = sub_10004D37C(&v21[1].__m_.__sig, (unint64_t *)buf);
  if (v26)
  {
    uint64_t v28 = v26[3];
    unint64_t v27 = (std::__shared_weak_count *)v26[4];
    if (v27)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v21);
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v27);
      char v29 = 0;
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v28 = 0;
  }
  std::mutex::unlock(v21);
  unint64_t v27 = 0;
  char v29 = 1;
LABEL_23:
  if (v61[0]) {
    sub_10004D2C8(v61[0]);
  }
  if ((v29 & 1) == 0)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v27);
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v28)
  {
    *(void *)uint64_t v60 = 0;
    (*(void (**)(uint8_t *__return_ptr, uint64_t, const __CFString *, void, const CFStringRef, const CFStringRef))(*(void *)v28 + 40))(buf, v28, @"kLastUploadTimestamp", kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    sub_100201EE4(v60, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    if (*(void *)v60) {
      uint64_t v30 = sub_1001908E4;
    }
    else {
      uint64_t v30 = 0;
    }
    if (v30)
    {
      double AbsoluteTime = CFDateGetAbsoluteTime(*(CFDateRef *)v60);
    }
    else
    {
      uint64_t v33 = *v15;
      double AbsoluteTime = 0.0;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I cannot load device info last upload timestamp from preferences", buf, 2u);
      }
    }
    sub_10007CA64((const void **)v60);
    if ((v29 & 1) == 0)
    {
LABEL_40:
      sub_10004D2C8(v27);
      if (a2) {
        goto LABEL_42;
      }
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v32 = *v15;
    double AbsoluteTime = 0.0;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v60 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "invalid CFPreferences", v60, 2u);
      if ((v29 & 1) == 0) {
        goto LABEL_40;
      }
    }
    else if ((v29 & 1) == 0)
    {
      goto LABEL_40;
    }
  }
  if (a2)
  {
LABEL_42:
    *(void *)uint64_t v60 = a1;
    sub_10086F584((uint64_t)v61, (uint64_t)v49);
    long long v62 = *(_OWORD *)__p;
    uint64_t v63 = v37;
    __p[1] = 0;
    uint64_t v37 = 0;
    __p[0] = 0;
    v65 = 0;
    long long v34 = operator new(0x48uLL);
    uint64_t v35 = *(Registry **)v60;
    *long long v34 = off_101A12330;
    v34[1] = v35;
    sub_10086FAD0((uint64_t)(v34 + 2), (uint64_t)v61);
    *((_OWORD *)v34 + 3) = v62;
    v34[8] = v63;
    uint64_t v63 = 0;
    long long v62 = 0uLL;
    v65 = v34;
    sub_10085B5AC(a1, (uint64_t)buf);
  }
LABEL_41:
  if (CFAbsoluteTimeGetCurrent() > AbsoluteTime + 2592000.0) {
    goto LABEL_42;
  }
  sub_10085D4D0(v50, 0);
  if ((v29 & 1) == 0) {
    sub_10004D2C8(v27);
  }
  sub_10031CBC4(v49);
  sub_10085B4B4((uint64_t)&v40);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v52[3]) < 0) {
    operator delete(v52[1]);
  }
  if (v51[0])
  {
    v51[1] = v51[0];
    operator delete(v51[0]);
  }
  sub_10010E37C((uint64_t)&v38, *((void **)&v38 + 1));
}

void sub_10085B3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t sub_10085B4B4(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 248);
  if (v2)
  {
    *(void *)(a1 + 256) = v2;
    operator delete(v2);
  }
  sub_10042AF74((void *)(a1 + 216));
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  sub_100330068(a1 + 136, *(void **)(a1 + 144));
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(unsigned char *)(a1 + 104) && *(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  sub_1000886C0(a1 + 56, *(char **)(a1 + 64));
  uint64_t v4 = (void **)(a1 + 32);
  sub_10008A88C(&v4);
  uint64_t v4 = (void **)(a1 + 8);
  sub_1000C56F4(&v4);
  return a1;
}

uint64_t sub_10085B568(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  unint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10085B5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_10080EC60((uint64_t)&v5, a2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085B6E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_10085B6FC(void *a1, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __dst = *a2;
    uint64_t v9 = *((void *)a2 + 2);
  }
  sub_1000EA30C((uint64_t)v5, (void **)&__dst, 1);
  sub_100323910((uint64_t)v7, a3);
  sub_10085B814(a1, (uint64_t)v5, (uint64_t)v7);
  sub_1000605C0(v7);
  sub_10005CD2C((uint64_t)v5, v6);
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_10085B7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_10085B814(void *a1, uint64_t a2, uint64_t a3)
{
  __p[0] = 0;
  __p[1] = 0;
  v12[0] = 0;
  sub_1000E9358((uint64_t **)a2, __p);
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    uint64_t v7 = *(uint64_t **)a2;
    __p[0] = a1;
    __p[1] = v7;
    v12[0] = *(void *)(a2 + 8);
    v12[1] = v6;
    *(void *)(v12[0] + 16) = v12;
    *(void *)a2 = a2 + 8;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 8) = 0;
    sub_100323910((uint64_t)&v13, a3);
    uint64_t v8 = (std::__shared_weak_count *)a1[2];
    if (v8)
    {
      if (std::__shared_weak_count::lock(v8)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v9 = a1[5];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "invalid IMEI", (uint8_t *)__p, 2u);
  }
  return sub_10006074C(a3, 0, 0);
}

void sub_10085BA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_10085BA78(void *a1, uint64_t *a2, uint64_t a3)
{
  sub_100CD990C(a2, (uint64_t)v5);
  sub_100323910((uint64_t)v6, a3);
  sub_10085B814(a1, (uint64_t)v5, (uint64_t)v6);
  sub_1000605C0(v6);
  sub_10005CD2C((uint64_t)v5, v5[1]);
}

void sub_10085BB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12)
{
}

void sub_10085BB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  sub_1000DFC90((uint64_t)&v8, a3);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085BCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_10085BD0C(unint64_t a1, uint64_t *a2)
{
  v4[0] = a1;
  v4[1] = 0uLL;
  sub_10030F964((void *)v4 + 1, *a2, a2[1], 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 3));
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085BE48(uint64_t a1, void *a2)
{
  unint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085C03C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10085C058(uint64_t a1, uint64_t *a2)
{
  memset(v4, 0, sizeof(v4));
  sub_1005E6A50(v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6));
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085C1A8(uint64_t a1, void *a2)
{
  unint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085C39C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10085C3B8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085C4E8(uint64_t a1, uint64_t a2)
{
  sub_1000278EC((uint64_t)v4, a2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085C604(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_10085C61C(uint64_t a1, uint64_t a2)
{
  __int16 v2 = 0;
  sub_10085C654(a1, a2, "kLocalMultiSimPreferencesKey", "com.apple.commcenter", &v2);
}

void sub_10085C654(uint64_t a1, uint64_t a2, const char *a3, const char *a4, unsigned char *a5)
{
  if (*(void *)(a2 + 16)) {
    goto LABEL_8;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 47);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 32);
  }
  if (v10) {
    goto LABEL_8;
  }
  uint64_t v11 = *(unsigned __int8 *)(a2 + 71);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a2 + 56);
  }
  if (v11)
  {
LABEL_8:
    +[NSMutableDictionary dictionary];
    unint64_t v27 = a4;
    v30 = uint64_t v28 = a5;
    uint64_t v12 = +[NSMutableArray arrayWithCapacity:*(void *)(a2 + 16)];
    uint64_t v29 = a2;
    uint64_t v13 = *(void **)a2;
    if (*(void *)a2 != a2 + 8)
    {
      do
      {
        uint64_t v14 = +[NSMutableDictionary dictionary];
        uint64_t v15 = v13 + 4;
        if (*((char *)v13 + 55) < 0) {
          uint64_t v15 = (void *)*v15;
        }
        int64_t v16 = +[NSString stringWithUTF8String:v15];
        [v14 setObject:v16 forKeyedSubscript:@"kActiveSimIdIccidKey"];
        uint64_t v17 = v13 + 7;

        if (*((char *)v13 + 79) < 0) {
          uint64_t v17 = (void *)*v17;
        }
        long long v18 = +[NSString stringWithUTF8String:v17];
        [v14 setObject:v18 forKeyedSubscript:@"kActiveSimIdPhNumKey"];

        [v12 addObject:v14];
        int64_t v19 = (void *)v13[1];
        if (v19)
        {
          do
          {
            uint64_t v20 = v19;
            int64_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v20 = (void *)v13[2];
            BOOL v21 = *v20 == (void)v13;
            uint64_t v13 = v20;
          }
          while (!v21);
        }
        uint64_t v13 = v20;
      }
      while (v20 != (void *)(a2 + 8));
    }
    uint64_t v22 = v30;
    if ([v12 count]) {
      [v30 setObject:v12 forKeyedSubscript:@"kActiveSimIdListKey"];
    }
    sub_10085D2E0(v30, @"kDataSimIccidKey", (uint64_t *)(v29 + 24));
    sub_10085D2E0(v30, @"kVoiceSimIccidKey", (uint64_t *)(v29 + 48));

    uint64_t v33 = v30;
    a5 = v28;
    a4 = v27;
    if (v30) {
      CFRetain(v30);
    }
  }
  else
  {
    uint64_t v22 = 0;
    uint64_t v33 = 0;
  }
  CFStringRef v32 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, a3, 0x8000100u, kCFAllocatorNull);
  CFStringRef applicationID = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, a4, 0x8000100u, kCFAllocatorNull);
  CFPreferencesSetValue(v32, v33, applicationID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  if (a5[1])
  {
    if (*a5) {
      id v23 = (CFPropertyListRef *)&kCFBooleanTrue;
    }
    else {
      id v23 = (CFPropertyListRef *)&kCFBooleanFalse;
    }
    CFPreferencesSetValue(@"kRestoredFlagKey", *v23, applicationID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  }
  int v24 = CFPreferencesSynchronize(applicationID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  unsigned int v25 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v26 = "yes";
    if (!v24) {
      unint64_t v26 = "no";
    }
    *(_DWORD *)buf = 138412802;
    CFStringRef v35 = v32;
    __int16 v36 = 2112;
    CFStringRef v37 = applicationID;
    __int16 v38 = 2080;
    uint64_t v39 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I written key (%@) to file (%@) successfully: %s", buf, 0x20u);
  }
  sub_1000558F4((const void **)&applicationID);
  sub_1000558F4((const void **)&v32);
  sub_100057D78(&v33);
}

void sub_10085CA10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_10085CAA8@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  return sub_10085CAC8(a2, a1, "kLocalMultiSimPreferencesKey", "com.apple.commcenter", 0);
}

const void **sub_10085CAC8(std::string *a1, uint64_t a2, char *cStr, const char *a4, unsigned char *a5)
{
  CFStringRef key = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, cStr, 0x8000100u, kCFAllocatorNull);
  uint64_t v33 = 0;
  CFStringRef applicationID = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, a4, 0x8000100u, kCFAllocatorNull);
  *(void *)buf = CFPreferencesCopyValue(key, applicationID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_100084068(&v33, (CFTypeRef *)buf);
  if (v33) {
    uint64_t v9 = sub_100080778;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9)
  {
    id v10 = v33;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&buf[16] = 0;
    *(void *)buf = &buf[8];
    memset(v38, 0, sizeof(v38));
    id v26 = v10;
    id v11 = [v10 objectForKeyedSubscript:@"kActiveSimIdListKey"];
    unsigned int v25 = v11;
    if (v11)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        id v11 = v25;
      }
      else {
        id v11 = 0;
      }
    }
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v13 = v11;
    id v14 = [v13 countByEnumeratingWithState:&v29 objects:v36 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v30;
      do
      {
        for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v30 != v15) {
            objc_enumerationMutation(v13);
          }
          uint64_t v17 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v18 = v17;
            memset(&v28, 0, sizeof(v28));
            memset(&__p, 0, sizeof(__p));
            sub_10085D3A4(v18, @"kActiveSimIdIccidKey", &v28);
            sub_10085D3A4(v18, @"kActiveSimIdPhNumKey", &__p);
            sub_10086F3C0((uint64_t **)buf, (void **)&v28.__r_.__value_.__l.__data_, (long long *)&v28, (long long *)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v28.__r_.__value_.__l.__data_);
            }
          }
        }
        id v14 = [v13 countByEnumeratingWithState:&v29 objects:v36 count:16];
      }
      while (v14);
    }

    sub_10085D3A4(v26, @"kDataSimIccidKey", v38);
    sub_10085D3A4(v26, @"kVoiceSimIccidKey", &v38[1]);
    if (a5)
    {
      *a5 = 0;
      v28.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)CFPreferencesCopyValue(@"kRestoredFlagKey", applicationID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
      sub_1000BE34C(&v28, (CFTypeRef *)&__p.__r_.__value_.__l.__data_);
      if (v28.__r_.__value_.__r.__words[0]) {
        uint64_t v20 = sub_100084B4C;
      }
      else {
        uint64_t v20 = 0;
      }
      if (v20)
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        ctu::cf::assign((ctu::cf *)&__p, (BOOL *)v28.__r_.__value_.__l.__data_, v19);
        *a5 = __p.__r_.__value_.__s.__data_[0];
      }
      sub_100062778((const void **)&v28.__r_.__value_.__l.__data_);
    }
    std::string::size_type v21 = *(void *)&buf[8];
    a1->__r_.__value_.__r.__words[0] = *(void *)buf;
    a1->__r_.__value_.__l.__size_ = v21;
    p_std::string::size_type size = &a1->__r_.__value_.__l.__size_;
    uint64_t v23 = *(void *)&buf[16];
    a1->__r_.__value_.__r.__words[2] = *(void *)&buf[16];
    if (v23)
    {
      *(void *)(v21 + 16) = p_size;
      *(void *)buf = &buf[8];
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&buf[16] = 0;
    }
    else
    {
      a1->__r_.__value_.__r.__words[0] = (std::string::size_type)p_size;
    }
    a1[1] = v38[0];
    memset(v38, 0, 24);
    a1[2] = v38[1];
    memset(&v38[1], 0, sizeof(std::string));
    a1[3].__r_.__value_.__s.__data_[0] = 1;

    if (SHIBYTE(v38[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38[1].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38[0].__r_.__value_.__l.__data_);
    }
    sub_10010C0E0((uint64_t)buf, *(void **)&buf[8]);
  }
  else
  {
    uint64_t v12 = *(NSObject **)(a2 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = key;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = applicationID;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I user preferences key (%@) not found in file %@", buf, 0x16u);
    }
    a1->__r_.__value_.__s.__data_[0] = 0;
    a1[3].__r_.__value_.__s.__data_[0] = 0;
  }
  sub_100057D78((const void **)&v33);
  sub_1000558F4((const void **)&applicationID);
  return sub_1000558F4((const void **)&key);
}

void sub_10085CF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,const void *a36,const void *a37,const void *a38)
{
  sub_100062778((const void **)&a21);

  sub_10085D480(v39 - 176);
  sub_100057D78(&a36);
  sub_1000558F4(&a37);
  sub_1000558F4(&a38);
  _Unwind_Resume(a1);
}

void sub_10085D018(uint64_t a1, uint64_t a2, std::string::value_type a3)
{
  sub_100857B5C(&v9);
  uint64_t v6 = std::string::append(&v9, "com.apple.CommCenter.RestoredMultiSimPreferences.plist", 0x36uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  int64_t v11 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (v11 >= 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  v9.__r_.__value_.__s.__data_[0] = a3;
  v9.__r_.__value_.__s.__data_[1] = 1;
  sub_10085C654(a1, a2, "kRestoredMultiSimPreferencesKey", (const char *)v8, &v9);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10085D0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10085D10C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100857B5C((std::string *)__p);
  uint64_t v4 = std::string::append((std::string *)__p, "com.apple.CommCenter.RestoredMultiSimPreferences.plist", 0x36uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v14 = v4->__r_.__value_.__r.__words[2];
  long long v13 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v9[0]) < 0) {
    operator delete(__p[0]);
  }
  char v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  memset(v9, 0, sizeof(v9));
  *(_OWORD *)std::string __p = 0u;
  if (v14 >= 0) {
    uint64_t v6 = (const char *)&v13;
  }
  else {
    uint64_t v6 = (const char *)v13;
  }
  sub_10085CAC8((std::string *)__p, a1, "kRestoredMultiSimPreferencesKey", v6, &v12);
  *(unsigned char *)a2 = v12;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  if (BYTE8(v11))
  {
    sub_100346B40(a2 + 8, (uint64_t)__p);
    if (SHIBYTE(v9[1]) < 0)
    {
      sub_10004FC84((unsigned char *)(a2 + 32), *((void **)&v9[0] + 1), *(unint64_t *)&v9[1]);
    }
    else
    {
      *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)v9 + 8);
      *(void *)(a2 + 48) = *((void *)&v9[1] + 1);
    }
    long long v7 = (unsigned char *)(a2 + 56);
    if (SBYTE7(v11) < 0)
    {
      sub_10004FC84(v7, (void *)v10, *((unint64_t *)&v10 + 1));
    }
    else
    {
      *(_OWORD *)long long v7 = v10;
      *(void *)(a2 + 72) = v11;
    }
    *(unsigned char *)(a2 + 80) = 1;
  }
  sub_1008618BC((uint64_t)__p);
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)v13);
  }
}

void sub_10085D26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 55) < 0) {
    operator delete(*v16);
  }
  sub_10010C0E0(v15, *(void **)(v14 + 16));
  sub_1008618BC(v15);
  sub_1008618BC((uint64_t)&__p);
  if (*(char *)(v17 - 41) < 0) {
    operator delete(*(void **)(v17 - 64));
  }
  _Unwind_Resume(a1);
}

void sub_10085D2E0(void *a1, void *a2, uint64_t *a3)
{
  id v8 = a1;
  id v5 = a2;
  if (v8 && v5)
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v6 = a3;
    }
    else {
      uint64_t v6 = (uint64_t *)*a3;
    }
    long long v7 = +[NSString stringWithUTF8String:v6];
    [v8 setObject:v7 forKeyedSubscript:v5];
  }
}

void sub_10085D380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10085D3A4(void *a1, void *a2, std::string *a3)
{
  id v7 = a1;
  id v5 = a2;
  if (v7 && v5)
  {
    uint64_t v6 = [v7 objectForKeyedSubscript:v5];
    if (v6)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        sub_10003ED78(a3, (char *)[v6 UTF8String]);
      }
    }
  }
}

void sub_10085D45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10085D480(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  sub_10010C0E0(a1, *(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10085D4D0(uint64_t a1, int a2)
{
  int v3 = a2;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

void *sub_10085D520(void *a1)
{
  __int16 v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  sub_10031CBC4(a1 + 1);
  return a1;
}

void sub_10085D55C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085D648(uint64_t a1, uint64_t a2)
{
  sub_10086F584((uint64_t)v4, a2);
  int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085D764(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_10085D77C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085D868(uint64_t a1, void *a2)
{
  int v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085DA4C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10085DA68(uint64_t a1, uint64_t a2)
{
  sub_10086F584((uint64_t)v4, a2);
  int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085DB84(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_10085DB9C(uint64_t a1, const void **a2)
{
  sub_100062740((const void **)&v4 + 1, a2);
  int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085DCA8(uint64_t a1@<X0>, const void **a2@<X8>)
{
  *a2 = 0;
  (***(void (****)(long long *__return_ptr))(a1 + 48))(&buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v4, (Registry *)buf);
  uint64_t v6 = ServiceMap;
  if (v7 < 0)
  {
    id v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  int v24 = (const void *)v7;
  long long v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)&v24);
  if (v11)
  {
    uint64_t v13 = v11[3];
    char v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  char v12 = 0;
  char v14 = 1;
LABEL_9:
  if (*((void *)&buf + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v13)
  {
    int v24 = 0;
    (*(void (**)(long long *__return_ptr, uint64_t, const __CFString *, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v13 + 40))(&buf, v13, @"AddOnRemotePlanList", @"no_backup/com.apple.CommCenter.AddOnRemotePlanList.plist", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    sub_1000C15D8(&v24, (CFTypeRef *)&buf);
    sub_1000577C4((const void **)&buf);
    if (v24) {
      uint64_t v15 = sub_10008324C;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v15)
    {
      uint64_t v16 = objc_opt_class();
      uint64_t v17 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v16, objc_opt_class(), 0);
      id v23 = 0;
      id v18 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:v17 fromData:v24 error:&v23];
      id v19 = v23;

      if (v19)
      {
        uint64_t v20 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v19;
          _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to unarchive %@", (uint8_t *)&buf, 0xCu);
        }
      }
      else if (v18)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          *(void *)&long long buf = v18;
          sub_1002824E4(a2, (CFTypeRef *)&buf);
          std::string::size_type v21 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            CFIndex Count = CFArrayGetCount((CFArrayRef)*a2);
            LODWORD(buf) = 134217984;
            *(void *)((char *)&buf + 4) = Count;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Loaded (%lu) add on remote devices", (uint8_t *)&buf, 0xCu);
          }
        }
      }
    }
    sub_100030068(&v24);
  }
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
}

void sub_10085DFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);

  sub_100030068((const void **)va);
  if ((v7 & 1) == 0) {
    sub_10004D2C8(v5);
  }
  sub_100044D00(v4);
  _Unwind_Resume(a1);
}

const void **sub_10085E06C(double a1)
{
  CFNumberRef v6 = 0;
  CFNumberRef valuePtr = *(CFNumberRef *)&a1;
  CFNumberRef v1 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  if (v1)
  {
    CFNumberRef v2 = v6;
    CFNumberRef v6 = v1;
    CFNumberRef valuePtr = v2;
    sub_1000570E8((const void **)&valuePtr);
  }
  CFNumberRef v3 = v6;
  CFNumberRef v5 = v6;
  CFNumberRef v6 = 0;
  sub_1000570E8((const void **)&v6);
  CFPreferencesSetValue(@"AddOnRemotePlanListExpiryTime", v3, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_1003F2A04();
  return sub_1000570E8((const void **)&v5);
}

void sub_10085E114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000570E8((const void **)va);
  _Unwind_Resume(a1);
}

double sub_10085E134()
{
  sub_1003F2A04();
  long long v4 = 0;
  CFTypeRef v5 = CFPreferencesCopyValue(@"AddOnRemotePlanListExpiryTime", kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_10086FCF0(&v4, &v5);
  if (v4) {
    CFNumberRef v1 = sub_100081E58;
  }
  else {
    CFNumberRef v1 = 0;
  }
  if (v1)
  {
    CFTypeRef v5 = 0;
    ctu::cf::assign((ctu::cf *)&v5, v4, v0);
    double v2 = *(double *)&v5;
  }
  else
  {
    double v2 = 0.0;
  }
  sub_1000570E8((const void **)&v4);
  return v2;
}

void sub_10085E1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **sub_10085E200(double a1)
{
  CFNumberRef v6 = 0;
  CFNumberRef valuePtr = *(CFNumberRef *)&a1;
  CFNumberRef v1 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  if (v1)
  {
    CFNumberRef v2 = v6;
    CFNumberRef v6 = v1;
    CFNumberRef valuePtr = v2;
    sub_1000570E8((const void **)&valuePtr);
  }
  CFNumberRef v3 = v6;
  CFNumberRef v5 = v6;
  CFNumberRef v6 = 0;
  sub_1000570E8((const void **)&v6);
  CFPreferencesSetValue(@"AccountCreationTimestamp", v3, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_1003F2A04();
  return sub_1000570E8((const void **)&v5);
}

void sub_10085E2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000570E8((const void **)va);
  _Unwind_Resume(a1);
}

double sub_10085E2C8()
{
  sub_1003F2A04();
  long long v4 = 0;
  CFTypeRef v5 = CFPreferencesCopyValue(@"AccountCreationTimestamp", kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_10086FCF0(&v4, &v5);
  if (v4) {
    CFNumberRef v1 = sub_100081E58;
  }
  else {
    CFNumberRef v1 = 0;
  }
  if (v1)
  {
    CFTypeRef v5 = 0;
    ctu::cf::assign((ctu::cf *)&v5, v4, v0);
    double v2 = *(double *)&v5;
  }
  else
  {
    double v2 = 0.0;
  }
  sub_1000570E8((const void **)&v4);
  return v2;
}

void sub_10085E380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **sub_10085E394(double a1)
{
  CFNumberRef v6 = 0;
  CFNumberRef valuePtr = *(CFNumberRef *)&a1;
  CFNumberRef v1 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  if (v1)
  {
    CFNumberRef v2 = v6;
    CFNumberRef v6 = v1;
    CFNumberRef valuePtr = v2;
    sub_1000570E8((const void **)&valuePtr);
  }
  CFNumberRef v3 = v6;
  CFNumberRef v5 = v6;
  CFNumberRef v6 = 0;
  sub_1000570E8((const void **)&v6);
  CFPreferencesSetValue(@"PrivateNetworkAllowDynamicDataSwitchWaitTimestamp", v3, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_1003F2A04();
  return sub_1000570E8((const void **)&v5);
}

void sub_10085E43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000570E8((const void **)va);
  _Unwind_Resume(a1);
}

double sub_10085E45C()
{
  sub_1003F2A04();
  long long v4 = 0;
  CFTypeRef v5 = CFPreferencesCopyValue(@"PrivateNetworkAllowDynamicDataSwitchWaitTimestamp", kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_10086FCF0(&v4, &v5);
  if (v4) {
    CFNumberRef v1 = sub_100081E58;
  }
  else {
    CFNumberRef v1 = 0;
  }
  if (v1)
  {
    CFTypeRef v5 = 0;
    ctu::cf::assign((ctu::cf *)&v5, v4, v0);
    double v2 = *(double *)&v5;
  }
  else
  {
    double v2 = 0.0;
  }
  sub_1000570E8((const void **)&v4);
  return v2;
}

void sub_10085E514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_10085E528(uint64_t a1, uint64_t a2, char a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  char v7 = a3;
  CFTypeRef v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085E690(uint64_t a1, void *a2)
{
  CFNumberRef v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      CFNumberRef v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      CFNumberRef v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    CFNumberRef v6 = 0;
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085E884(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_10085E8A0(uint64_t a1, uint64_t a2)
{
  sub_1006056FC((uint64_t *)&v5 + 1, a2);
  sub_100861998(v6, a2 + 24);
  long long v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085EA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  sub_100602474(v11, a11);
  _Unwind_Resume(a1);
}

void sub_10085EA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_100871558((uint64_t)v5, a2);
  CFNumberRef v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085EBC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_10085EBE8(uint64_t a1, void *a2)
{
  double v2 = a2 + 1;
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  v6[0] = v3;
  v6[1] = v4;
  if (v4)
  {
    *(void *)(v3 + 16) = v6;
    *a2 = v2;
    void *v2 = 0;
    a2[2] = 0;
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085ED44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_1008720D0((uint64_t)v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10085EED0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_10085EEF0(uint64_t a1, uint64_t a2)
{
  memset(v184, 0, 32);
  long long v183 = 0u;
  double v2 = *(NSObject **)(a1 + 40);
  os_signpost_id_t v3 = os_signpost_id_generate(v2);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_signpost_enabled(v4))
    {
      LOWORD(buf) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "LoadPrivateNetworkSettings", (const char *)&unk_1017DEDA7, (uint8_t *)&buf, 2u);
    }
  }
  *(void *)&long long buf = off_101A123B0;
  v170[0].__r_.__value_.__l.__size_ = (std::string::size_type)&buf;
  *(void *)&long long v183 = v3;
  *((void *)&v183 + 1) = os_retain(v2);
  sub_1000336E8((uint64_t)v184, (uint64_t)&buf);
  sub_100033A10(&buf);
  v160 = 0;
  uint64_t v159 = 0;
  (***(void (****)(long long *__return_ptr))(a1 + 48))(&buf);
  sub_100058DB0(&__p, "loadPrivateNetworkSettings_sync");
  long long v181 = v183;
  sub_1000336E8((uint64_t)&v182, (uint64_t)v184);
  long long v183 = 0uLL;
  sub_100033AF4(v184);
  Registry::createXpcJetsamAssertion();
  sub_1000339DC((uint64_t *)&v181);
  if (v158 < 0) {
    operator delete(__p);
  }
  if (*((void *)&buf + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
  }
  v156 = 0;
  uint64_t v5 = *(void *)(a1 + 48);
  sub_100857B5C(&v130);
  CFNumberRef v6 = std::string::append(&v130, "com.apple.CommCenter.PrivateNetworkData.plist", 0x2DuLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v170[0].__r_.__value_.__r.__words[0] = v6->__r_.__value_.__r.__words[2];
  long long buf = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr, uint64_t, long long *))(*(void *)v5 + 880))(&v156, v5, &buf);
  if (v170[0].__r_.__value_.__s.__data_[7] < 0) {
    operator delete((void *)buf);
  }
  if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v130.__r_.__value_.__l.__data_);
  }
  id v8 = v156;
  long long v88 = v8;
  if (v8)
  {
    id v152 = 0;
    id obj = +[NSJSONSerialization JSONObjectWithData:v8 options:0 error:&v152];
    id v9 = v152;
    if (!v9)
    {
      if (obj)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v86 = 0;
LABEL_17:
          unsigned int v10 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            id v11 = [obj count];
            LODWORD(buf) = 134217984;
            *(void *)((char *)&buf + 4) = v11;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Loading private network settings for iccids count: %lu", (uint8_t *)&buf, 0xCu);
          }
          long long v136 = 0u;
          long long v135 = 0u;
          long long v134 = 0u;
          long long v133 = 0u;
          memset(v132, 0, sizeof(v132));
          memset(v131, 0, sizeof(v131));
          *(_OWORD *)&v130.__r_.__value_.__r.__words[1] = 0u;
          v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&v130.__r_.__value_.__l.__size_;
          long long v126 = 0u;
          long long v127 = 0u;
          long long v128 = 0u;
          long long v129 = 0u;
          id obj = obj;
          id v101 = [obj countByEnumeratingWithState:&v126 objects:v180 count:16];
          if (v101)
          {
            uint64_t v110 = 0;
            uint64_t v98 = *(void *)v127;
            for (uint64_t i = *(void *)v127; ; uint64_t i = *(void *)v127)
            {
              if (i != v98) {
                objc_enumerationMutation(obj);
              }
              id v100 = *(id *)(*((void *)&v126 + 1) + 8 * v110);
              uint64_t v13 = objc_msgSend(obj, "objectForKey:");
              long long v178 = 0u;
              long long v179 = 0u;
              long long v176 = 0u;
              long long v177 = 0u;
              memset(v175, 0, sizeof(v175));
              long long v173 = 0u;
              memset(v174, 0, sizeof(v174));
              memset(v172, 0, sizeof(v172));
              memset(v171, 0, sizeof(v171));
              long long buf = 0u;
              memset(v170, 0, sizeof(v170));
              sub_1006015F0((uint64_t)&buf);
              char v14 = [v13 objectForKey:@"supportPrivateNetworkKey"];
              unsigned __int8 v15 = [v14 BOOLValue];

              BYTE8(v173) = v15;
              uint64_t v16 = [v13 objectForKey:@"mccKey"];
              if (v16)
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  sub_10003ED78(&v170[1], (char *)[v16 UTF8String]);
                }
              }
              id v109 = [v13 objectForKey:@"mncKey"];
              if (v109)
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  sub_10003ED78(v171, (char *)[v109 UTF8String]);
                }
              }
              id v108 = [v13 objectForKey:@"gid1Key"];
              if (v108)
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  sub_10003ED78(&v171[1], (char *)[v108 UTF8String]);
                }
              }
              id v107 = [v13 objectForKey:@"gid2Key"];
              if (v107)
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  sub_10003ED78((std::string *)v172, (char *)[v107 UTF8String]);
                }
              }
              v106 = [v13 objectForKey:@"allowsAutomaticToggling"];
              if (v106)
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass()) {
                  BYTE9(v173) = [v106 BOOLValue];
                }
              }
              id v105 = [v13 objectForKey:@"simCsgIdentifierKey"];
              if (v105)
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  *(void *)&long long v117 = [v105 UTF8String];
                  sub_1000791C0((std::string *)&v172[24], (char **)&v117);
                }
              }
              id v103 = [v13 objectForKey:@"simNidIdentifierKey"];
              if (v103)
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  *(void *)&long long v117 = [v103 UTF8String];
                  sub_1000791C0((std::string *)&v172[56], (char **)&v117);
                }
              }
              id v104 = [v13 objectForKey:@"pnwProfileNameKey"];
              if (v104)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & (BYTE8(v136) == 0)) == 1)
                {
                  uint64_t v125 = 0;
                  long long v123 = 0u;
                  long long v124 = 0u;
                  long long v121 = 0u;
                  long long v122 = 0u;
                  long long v119 = 0u;
                  long long v120 = 0u;
                  long long v117 = 0u;
                  long long v118 = 0u;
                  sub_100058DB0((void *)&v120 + 1, "");
                  sub_100058DB0(&v122, "");
                  WORD4(v123) = 0;
                  HIDWORD(v123) = 0;
                  *((void *)&v124 + 1) = 0;
                  uint64_t v125 = 0;
                  *(void *)&long long v124 = (char *)&v124 + 8;
                  sub_10003ED78((std::string *)((char *)&v117 + 8), (char *)[v104 UTF8String]);
                  id v95 = [v13 objectForKey:@"pnwProfileVersionKey"];
                  if (v95)
                  {
                    objc_opt_class();
                    if (objc_opt_isKindOfClass()) {
                      sub_10003ED78((std::string *)&v119, (char *)[v95 UTF8String]);
                    }
                  }
                  long long v93 = [v13 objectForKey:@"supportsCellOverWifiKey"];
                  if (v93)
                  {
                    objc_opt_class();
                    if (objc_opt_isKindOfClass()) {
                      BYTE9(v123) = [v93 BOOLValue];
                    }
                  }
                  long long v94 = [v13 objectForKey:@"5GStandaloneEnabled"];
                  if (v94)
                  {
                    objc_opt_class();
                    if (objc_opt_isKindOfClass()) {
                      HIDWORD(v123) = [v94 intValue];
                    }
                  }
                  long long v96 = [v13 objectForKey:@"pnwProfileTypeKey"];
                  if (v96)
                  {
                    objc_opt_class();
                    if (objc_opt_isKindOfClass()) {
                      LODWORD(v117) = [v96 integerValue];
                    }
                  }
                  long long v97 = [v13 objectForKey:@"geofenceListKey"];
                  if (v97)
                  {
                    objc_opt_class();
                    if (objc_opt_isKindOfClass())
                    {
                      v163 = 0;
                      memset(v162, 0, sizeof(v162));
                      long long v113 = 0u;
                      long long v114 = 0u;
                      long long v115 = 0u;
                      long long v116 = 0u;
                      id v17 = v97;
                      id v18 = [v17 countByEnumeratingWithState:&v113 objects:v168 count:16];
                      if (v18)
                      {
                        uint64_t v19 = 0;
                        uint64_t v20 = *(void *)v114;
                        for (uint64_t j = *(void *)v114; ; uint64_t j = *(void *)v114)
                        {
                          if (j != v20) {
                            objc_enumerationMutation(v17);
                          }
                          uint64_t v22 = [v17 objectForKeyedSubscript:*(void *)(*((void *)&v113 + 1) + 8 * v19)];
                          id v23 = [v22 objectForKeyedSubscript:@"radiusKey"];
                          [v23 doubleValue];
                          *(void *)v162 = v24;

                          unsigned int v25 = [v22 objectForKeyedSubscript:@"longitudeKey"];
                          [v25 doubleValue];
                          *(void *)&v162[8] = v26;

                          unint64_t v27 = [v22 objectForKeyedSubscript:@"latitudeKey"];
                          [v27 doubleValue];
                          *(void *)&v162[16] = v28;

                          id v29 = [v22 objectForKeyedSubscript:@"geofenceIdKey"];
                          sub_10003ED78((std::string *)&v162[24], (char *)[v29 UTF8String]);

                          sub_100606AD8((uint64_t **)&v124, (void **)&v162[24], (long long *)&v162[24], (long long *)v162);
                          if (++v19 >= (unint64_t)v18)
                          {
                            id v18 = [v17 countByEnumeratingWithState:&v113 objects:v168 count:16];
                            if (!v18) {
                              break;
                            }
                            uint64_t v19 = 0;
                          }
                        }
                      }

                      if (SHIBYTE(v163) < 0) {
                        operator delete(*(void **)&v162[48]);
                      }
                      if ((v162[47] & 0x80000000) != 0) {
                        operator delete(*(void **)&v162[24]);
                      }
                    }
                  }
                  if (BYTE8(v136))
                  {
                    LODWORD(v131[0]) = v117;
                    std::string::operator=((std::string *)&v131[1], (const std::string *)((char *)&v117 + 8));
                    std::string::operator=(v132, (const std::string *)&v119);
                    std::string::operator=(&v132[1], (const std::string *)((char *)&v120 + 8));
                    std::string::operator=((std::string *)&v133, (const std::string *)&v122);
                    *((void *)&v134 + 1) = *((void *)&v123 + 1);
                    sub_100601150((uint64_t **)&v135, (long long *)v124, (long long *)((char *)&v124 + 8));
                  }
                  else
                  {
                    sub_10006891C((uint64_t)v131, (uint64_t)&v117);
                    BYTE8(v136) = 1;
                  }
                  long long v30 = *(NSObject **)(a1 + 40);
                  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                  {
                    log = v30;
                    long long v91 = v16;
                    long long v92 = v13;
                    long long v31 = "???";
                    if (v117 <= 2) {
                      long long v31 = off_101A12520[(int)v117];
                    }
                    long long v89 = v31;
                    int v32 = SHIBYTE(v118);
                    uint64_t v33 = (char *)*((void *)&v117 + 1);
                    int v34 = SBYTE7(v120);
                    CFStringRef v35 = (long long *)v119;
                    int v36 = SHIBYTE(v121);
                    CFStringRef v37 = (char *)*((void *)&v120 + 1);
                    int v38 = SBYTE7(v123);
                    uint64_t v39 = (long long *)v122;
                    int v40 = BYTE8(v123);
                    int v41 = BYTE9(v123);
                    uint64_t v42 = asString();
                    if (v40) {
                      uint64_t v43 = "True";
                    }
                    else {
                      uint64_t v43 = "False";
                    }
                    *(_DWORD *)v162 = 136317186;
                    long long v45 = (char *)&v117 + 8;
                    long long v44 = &v122;
                    if (v38 < 0) {
                      long long v44 = v39;
                    }
                    *(void *)&v162[4] = v89;
                    long long v46 = (char *)&v120 + 8;
                    if (v36 < 0) {
                      long long v46 = v37;
                    }
                    *(_WORD *)&v162[12] = 2080;
                    long long v47 = &v119;
                    if (v34 < 0) {
                      long long v47 = v35;
                    }
                    if (v32 < 0) {
                      long long v45 = v33;
                    }
                    *(void *)&v162[14] = v45;
                    *(_WORD *)&v162[22] = 2080;
                    if (v41) {
                      long long v48 = "True";
                    }
                    else {
                      long long v48 = "False";
                    }
                    *(void *)&v162[24] = v47;
                    *(_WORD *)&v162[32] = 2080;
                    *(void *)&v162[34] = v46;
                    *(_WORD *)&v162[42] = 2080;
                    *(void *)&v162[44] = v44;
                    *(_WORD *)&v162[52] = 2080;
                    *(void *)&v162[54] = v43;
                    *(_WORD *)&v162[62] = 2080;
                    v163 = v48;
                    __int16 v164 = 2080;
                    uint64_t v165 = v42;
                    __int16 v166 = 2048;
                    uint64_t v167 = v125;
                    _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "#I profile migration case: profileType=%s, profileName=%s, profileVersion=%s, CsgIdentifier=%s, NidIdentifier=%s, isSetAside=%s, supportsCellularOverWifi=%s, 5GStandaloneEnabled=%s, geofenceSize=#%lu", v162, 0x5Cu);
                    id v8 = v88;
                    uint64_t v16 = v91;
                    uint64_t v13 = v92;
                  }

                  sub_10005CD90((uint64_t)&v124, *((void **)&v124 + 1));
                  if (SBYTE7(v123) < 0) {
                    operator delete((void *)v122);
                  }
                  if (SHIBYTE(v121) < 0) {
                    operator delete(*((void **)&v120 + 1));
                  }
                  if (SBYTE7(v120) < 0) {
                    operator delete((void *)v119);
                  }
                  if (SHIBYTE(v118) < 0) {
                    operator delete(*((void **)&v117 + 1));
                  }
                }
              }
              sub_100058DB0(v162, (char *)[v100 UTF8String]);
              uint64_t v161 = 0;
              long long v49 = (uint64_t **)sub_100046ED4((uint64_t)&v130, &v161, (void **)v162);
              uint64_t v50 = *v49;
              if (!*v49)
              {
                *(void *)&long long v118 = 0;
                v51 = operator new(0x198uLL);
                long long v52 = v51;
                *(void *)&long long v117 = v51;
                *((void *)&v117 + 1) = &v130.__r_.__value_.__l.__size_;
                LOBYTE(v118) = 0;
                if ((v162[23] & 0x80000000) != 0)
                {
                  sub_10004FC84(v51 + 32, *(void **)v162, *(unint64_t *)&v162[8]);
                }
                else
                {
                  *((_OWORD *)v51 + 2) = *(_OWORD *)v162;
                  *((void *)v51 + 6) = *(void *)&v162[16];
                }
                *(_OWORD *)(v52 + 56) = 0u;
                *(_OWORD *)(v52 + 376) = 0u;
                *(_OWORD *)(v52 + 392) = 0u;
                *(_OWORD *)(v52 + 344) = 0u;
                *(_OWORD *)(v52 + 360) = 0u;
                *(_OWORD *)(v52 + 312) = 0u;
                *(_OWORD *)(v52 + 328) = 0u;
                *(_OWORD *)(v52 + 296) = 0u;
                *(_OWORD *)(v52 + 232) = 0u;
                *(_OWORD *)(v52 + 248) = 0u;
                *(_OWORD *)(v52 + 200) = 0u;
                *(_OWORD *)(v52 + 216) = 0u;
                *(_OWORD *)(v52 + 168) = 0u;
                *(_OWORD *)(v52 + 184) = 0u;
                *(_OWORD *)(v52 + 136) = 0u;
                *(_OWORD *)(v52 + 152) = 0u;
                *(_OWORD *)(v52 + 104) = 0u;
                *(_OWORD *)(v52 + 120) = 0u;
                *(_OWORD *)(v52 + 72) = 0u;
                *(_OWORD *)(v52 + 88) = 0u;
                *(_OWORD *)(v52 + 280) = 0u;
                *(_OWORD *)(v52 + 264) = 0u;
                sub_1006015F0((uint64_t)(v52 + 56));
                LOBYTE(v118) = 1;
                uint64_t v53 = v161;
                long long v54 = (uint64_t *)v117;
                *(void *)long long v117 = 0;
                v54[1] = 0;
                v54[2] = v53;
                *long long v49 = v54;
                if (*(void *)v130.__r_.__value_.__l.__data_)
                {
                  v130.__r_.__value_.__r.__words[0] = *(void *)v130.__r_.__value_.__l.__data_;
                  long long v54 = *v49;
                }
                sub_100046C90((uint64_t *)v130.__r_.__value_.__l.__size_, v54);
                ++v130.__r_.__value_.__r.__words[2];
                uint64_t v50 = (uint64_t *)v117;
                *(void *)&long long v117 = 0;
                sub_100602D60((uint64_t)&v117, 0);
              }
              v50[7] = buf;
              if (v50 + 7 != (uint64_t *)&buf) {
                sub_1008619F0((uint64_t **)v50 + 8, *((void **)&buf + 1), v170);
              }
              *((_DWORD *)v50 + 22) = v170[0].__r_.__value_.__r.__words[2];
              *((unsigned char *)v50 + 92) = v170[0].__r_.__value_.__s.__data_[20];
              std::string::operator=((std::string *)v50 + 4, &v170[1]);
              std::string::operator=((std::string *)v50 + 5, v171);
              std::string::operator=((std::string *)v50 + 6, &v171[1]);
              std::string::operator=((std::string *)v50 + 7, (const std::string *)v172);
              sub_100179AF8((std::string *)v50 + 8, (const std::string *)&v172[24]);
              sub_100179AF8((std::string *)(v50 + 28), (const std::string *)&v172[56]);
              *((_WORD *)v50 + 128) = WORD4(v173);
              *((_DWORD *)v50 + 66) = v174[0];
              std::string::operator=((std::string *)(v50 + 34), (const std::string *)&v174[1]);
              std::string::operator=((std::string *)(v50 + 37), v175);
              std::string::operator=((std::string *)(v50 + 40), &v175[1]);
              std::string::operator=((std::string *)(v50 + 43), (const std::string *)&v176);
              v50[46] = *((void *)&v177 + 1);
              if (v50 + 7 != (uint64_t *)&buf) {
                sub_100601150((uint64_t **)v50 + 47, (long long *)v178, (long long *)((char *)&v178 + 8));
              }
              v50[50] = *((void *)&v179 + 1);
              if ((v162[23] & 0x80000000) != 0) {
                operator delete(*(void **)v162);
              }

              sub_10006544C((uint64_t)&buf);
              if (++v110 >= (unint64_t)v101)
              {
                id v101 = [obj countByEnumeratingWithState:&v126 objects:v180 count:16];
                if (!v101) {
                  break;
                }
                uint64_t v110 = 0;
              }
            }
          }

          sub_1006056FC(v111, (uint64_t)&v130);
          sub_100861998(v112, (uint64_t)v131);
          uint64_t v73 = *(void *)(a2 + 24);
          if (!v73) {
            sub_10007B600();
          }
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v73 + 48))(v73, v111);
          sub_10060222C((uint64_t)v112);
          sub_100602474((uint64_t)v111, (void *)v111[1]);
          sub_10060222C((uint64_t)v131);
          sub_100602474((uint64_t)&v130, (void *)v130.__r_.__value_.__l.__size_);
          goto LABEL_147;
        }
      }
    }
    long long v55 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#I Migration from NSKeyedUnarchiver to NSJSONSerialization decoding", (uint8_t *)&buf, 2u);
    }

    id v56 = objc_alloc((Class)NSKeyedUnarchiver);
    id v151 = 0;
    id v57 = [v56 initForReadingFromData:v8 error:&v151];
    id v58 = v151;
    if (!v57 || v58)
    {
      id v86 = v58;
      uint64_t v71 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v86;
        _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#I No unarchiver or error: %@", (uint8_t *)&buf, 0xCu);
      }
      v149[1] = 0;
      v149[0] = 0;
      v148 = v149;
      v150[0] = 0;
      v150[136] = 0;
      uint64_t v72 = *(void *)(a2 + 24);
      if (!v72) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, void ***))(*(void *)v72 + 48))(v72, &v148);
      sub_10060222C((uint64_t)v150);
      sub_100602474((uint64_t)&v148, v149[0]);
    }
    else
    {
      uint64_t v59 = [v57 decodeObjectOfClass:objc_opt_class() forKey:@"version"];
      if (v59 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        if ([v59 intValue] == 3)
        {
          uint64_t v60 = objc_opt_class();
          uint64_t v61 = objc_opt_class();
          uint64_t v62 = objc_opt_class();
          uint64_t v63 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v60, v61, v62, objc_opt_class(), 0);
          uint64_t v64 = [v57 decodeObjectOfClasses:v63 forKey:@"iccidProfileDictKey"];

          id obj = (id)v64;
          if (v64 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            [v57 finishDecoding];
            id v138 = 0;
            v65 = +[NSJSONSerialization dataWithJSONObject:v64 options:0 error:&v138];
            id v66 = v138;
            v67 = *(NSObject **)(a1 + 40);
            id v86 = v66;
            if (v66)
            {
              if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
              {
                id v84 = [v86 description];
                id v85 = [v84 UTF8String];
                LODWORD(buf) = 136315138;
                *(void *)((char *)&buf + 4) = v85;
                _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "NSJSONSerialization Encode Error: %s", (uint8_t *)&buf, 0xCu);
              }
              int v68 = 1;
            }
            else
            {
              if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
              {
                id v82 = [obj count];
                LODWORD(buf) = 134217984;
                *(void *)((char *)&buf + 4) = v82;
                _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "#I Saving private network settings for iccids count: %lu", (uint8_t *)&buf, 0xCu);
              }
              *(void *)&long long v117 = 0;
              sub_1000C163C(&v117, v65);
              uint64_t v83 = *(void *)(a1 + 48);
              sub_100857B5C(&v130);
              sub_10055B020("com.apple.CommCenter.PrivateNetworkData.plist", &v130, (std::string *)&buf);
              sub_10002FD9C(&v137, (const void **)&v117);
              (*(void (**)(uint64_t, long long *, const void **))(*(void *)v83 + 872))(v83, &buf, &v137);
              sub_100030068(&v137);
              if (v170[0].__r_.__value_.__s.__data_[7] < 0) {
                operator delete((void *)buf);
              }
              if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v130.__r_.__value_.__l.__data_);
              }
              sub_100030068((const void **)&v117);
              int v68 = 0;
            }
          }
          else
          {
            v80 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
            {
              LOWORD(buf) = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "NSKeyedUnarchiver decoding failure", (uint8_t *)&buf, 2u);
            }
            [v57 finishDecoding];
            v140[1] = 0;
            v140[0] = 0;
            v139 = v140;
            v141[0] = 0;
            v141[136] = 0;
            uint64_t v81 = *(void *)(a2 + 24);
            if (!v81) {
              sub_10007B600();
            }
            (*(void (**)(uint64_t, void ***))(*(void *)v81 + 48))(v81, &v139);
            sub_10060222C((uint64_t)v141);
            sub_100602474((uint64_t)&v139, v140[0]);
            id v86 = 0;
            int v68 = 1;
          }

          if (!v68) {
            goto LABEL_17;
          }
LABEL_147:

          goto LABEL_148;
        }
        uint64_t v77 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v78 = [v59 intValue];
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v78;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "#I Version mismatch [%d]", (uint8_t *)&buf, 8u);
        }
        [v57 finishDecoding];
        v143[1] = 0;
        v143[0] = 0;
        v142 = v143;
        v144[0] = 0;
        v144[136] = 0;
        uint64_t v79 = *(void *)(a2 + 24);
        if (!v79) {
          sub_10007B600();
        }
        (*(void (**)(uint64_t, void ***))(*(void *)v79 + 48))(v79, &v142);
        sub_10060222C((uint64_t)v144);
        sub_100602474((uint64_t)&v142, v143[0]);
      }
      else
      {
        long long v74 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#I Version decoding failure", (uint8_t *)&buf, 2u);
        }
        [v57 finishDecoding];
        v146[1] = 0;
        v146[0] = 0;
        v145 = v146;
        v147[0] = 0;
        v147[136] = 0;
        uint64_t v75 = *(void *)(a2 + 24);
        if (!v75) {
          sub_10007B600();
        }
        (*(void (**)(uint64_t, void ***))(*(void *)v75 + 48))(v75, &v145);
        sub_10060222C((uint64_t)v147);
        sub_100602474((uint64_t)&v145, v146[0]);
      }
      id v86 = 0;
    }

    goto LABEL_147;
  }
  char v69 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "#I loadPrivateNetworkSettings: No data", (uint8_t *)&buf, 2u);
  }
  v154[1] = 0;
  v154[0] = 0;
  v153 = v154;
  v155[0] = 0;
  v155[136] = 0;
  uint64_t v70 = *(void *)(a2 + 24);
  if (!v70) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void ***))(*(void *)v70 + 48))(v70, &v153);
  sub_10060222C((uint64_t)v155);
  sub_100602474((uint64_t)&v153, v154[0]);
LABEL_148:

  sub_100030068((const void **)&v156);
  if (v160) {
    sub_10004D2C8(v160);
  }
  return sub_1000339DC((uint64_t *)&v183);
}

void sub_1008606B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  sub_100030068((const void **)&STACK[0x7A8]);
  if (STACK[0x7D0]) {
    sub_10004D2C8((std::__shared_weak_count *)STACK[0x7D0]);
  }
  sub_1000339DC((uint64_t *)(v61 - 160));
  _Unwind_Resume(a1);
}

uint64_t sub_100860AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000C6BDC((uint64_t *)a1, a2);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_10004FC84((unsigned char *)v4 + 24, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    v4[5] = *(void *)(a2 + 40);
    *(_OWORD *)(v4 + 3) = v5;
  }
  if (*(char *)(a2 + 71) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v6;
  }
  sub_100346B40(a1 + 72, a2 + 72);
  sub_100860C44((uint64_t *)(a1 + 96), a2 + 96);
  long long v7 = (unsigned char *)(a1 + 120);
  if (*(char *)(a2 + 143) < 0)
  {
    sub_10004FC84(v7, *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)long long v7 = v8;
  }
  return a1;
}

void sub_100860BD4(_Unwind_Exception *a1)
{
  sub_10010E37C(v5, *(void **)(v1 + 104));
  sub_10010C0E0(v4, *(void **)(v1 + 80));
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  sub_10005CD2C(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100860C44(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100860C9C(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_100860C84(_Unwind_Exception *a1)
{
  sub_10010E37C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100860C9C(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = sub_100860D28(v5, v6, v4 + 4, (long long *)v4 + 2);
      long long v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          long long v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100860D28(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v6 = sub_1000C6D50(a1, a2, &v12, &v11, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_100860DCC((uint64_t)a1, a4, v10);
    sub_100046C38(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_100860EB8((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_100860DCC@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0xB8uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_100860E40(v6 + 4, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100860E28(_Unwind_Exception *a1)
{
  sub_100860EB8(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100860E40(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_10030B264((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_100860E9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100860EB8(uint64_t a1, uint64_t a2)
{
  double v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10010E3D8((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *sub_100860F10(void *a1)
{
  double v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

__n128 sub_100860F94(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  double v2 = (void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = a1 + 8;
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)a2 = v2;
    void *v2 = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
  long long v6 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v6;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 24) = 0;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v8 = (void *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(a1 + 80) = v9;
  uint64_t v10 = a1 + 80;
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v11;
  if (v11)
  {
    *(void *)(v9 + 16) = v10;
    *(void *)(a2 + 72) = v8;
    *long long v8 = 0;
    *(void *)(a2 + 88) = 0;
  }
  else
  {
    *(void *)(a1 + 72) = v10;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  char v12 = (void *)(a2 + 104);
  uint64_t v13 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v13;
  uint64_t v14 = a1 + 104;
  uint64_t v15 = *(void *)(a2 + 112);
  *(void *)(a1 + 112) = v15;
  if (v15)
  {
    *(void *)(v13 + 16) = v14;
    *(void *)(a2 + 96) = v12;
    *char v12 = 0;
    *(void *)(a2 + 112) = 0;
  }
  else
  {
    *(void *)(a1 + 96) = v14;
  }
  __n128 result = *(__n128 *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(__n128 *)(a1 + 120) = result;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 120) = 0;
  *(unsigned char *)(a1 + 144) = 1;
  return result;
}

uint64_t sub_100861090(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      long long v10 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      *(_OWORD *)uint64_t v8 = v10;
      v8 += 24;
      *(void *)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
      *(void *)unint64_t v9 = 0;
      v9 += 24;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_1008611B4((uint64_t)&v12, a2, v7, v6);
}

uint64_t sub_100861100(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_10004827C(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1008612C8(v7, a3, *(long long **)(a1 + 8), a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_1008611B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    do
    {
      uint64_t v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0) {
        operator delete(*(void **)v7);
      }
      long long v8 = *(_OWORD *)(v6 - 24);
      *(void *)(v7 + 16) = *(void *)(v6 - 8);
      *(_OWORD *)uint64_t v7 = v8;
      *(unsigned char *)(v6 - 1) = 0;
      *(unsigned char *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

void *sub_10086123C(int a1, void *a2, void *a3, std::string *this)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      std::string::operator=(this, (const std::string *)(v5 + 4));
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      ++this;
      uint64_t v5 = v8;
    }
    while (v8 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_1008612C8(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  uint64_t v8 = a4;
  v7[0] = a1;
  v7[1] = &v8;
  v7[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      long long v5 = *a2;
      *(void *)(v4 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v4 = v5;
      v4 += 24;
      *((void *)a2 + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      a2 = (long long *)((char *)a2 + 24);
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  v7[3] = 1;
  sub_10005E1C8((uint64_t)v7);
  return v4;
}

void *sub_100861348(void *a1)
{
  double v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1008613CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144))
  {
    if (*(char *)(a1 + 143) < 0) {
      operator delete(*(void **)(a1 + 120));
    }
    sub_10010E37C(a1 + 96, *(void **)(a1 + 104));
    sub_10010C0E0(a1 + 72, *(void **)(a1 + 80));
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    sub_10005CD2C(a1, *(char **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10086144C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_100311ED8((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_10010CB7C((void *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  sub_10008CF3C((uint64_t *)(a1 + 48), a2 + 48);
  sub_1000593FC(a1 + 72, (long long *)(a2 + 72));
  if (*(char *)(a2 + 127) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 104), *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v4;
  }
  sub_1008615C4((uint64_t *)(a1 + 128), a2 + 128);
  return a1;
}

void sub_10086154C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(unsigned char *)(v10 + 96))
  {
    if (*(char *)(v10 + 95) < 0) {
      operator delete(*v12);
    }
  }
  sub_1000886C0(v11, *(char **)(v10 + 56));
  sub_10008A88C(&a10);
  a10 = (void **)v10;
  sub_1000C56F4(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1008615C4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10086161C(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_100861604(_Unwind_Exception *a1)
{
  sub_100330068(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10086161C(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      __n128 result = sub_1008616A8(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1008616A8(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v6 = sub_1000C6D50(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_10086174C((uint64_t)a1, a4, v10);
    sub_100046C38(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_10032FFC0((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_10086174C@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x138uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = sub_1008617C0(v6 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1008617A8(_Unwind_Exception *a1)
{
  sub_10032FFC0(v1, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_1008617C0(unsigned char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_10030DA1C(__dst + 24, (long long *)((char *)a2 + 24));
  return __dst;
}

void sub_10086181C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100861838(void *a1)
{
  double v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1008618BC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    sub_10010C0E0(a1, *(void **)(a1 + 8));
  }
  return a1;
}

void *sub_100861914(void *a1)
{
  double v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unsigned char *sub_100861998(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[136] = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    sub_10006891C((uint64_t)a1, a2);
    a1[136] = 1;
  }
  return a1;
}

void sub_1008619DC(_Unwind_Exception *a1)
{
  sub_10060222C(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_1008619F0(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    id v17 = v8;
    if (v8)
    {
      uint64_t v16 = sub_1000EA590((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((unsigned char *)v8 + 56) = *((unsigned char *)v9 + 56);
          uint64_t v18 = 0;
          uint64_t v10 = (uint64_t **)sub_1000EA518((uint64_t)v5, &v18, v17 + 4);
          sub_100046C38(v5, v18, v10, v17);
          id v17 = v16;
          if (v16) {
            uint64_t v16 = sub_1000EA590((uint64_t)v16);
          }
          uint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          BOOL v9 = a2;
        }
        while (!v12);
      }
    }
    __n128 result = (uint64_t **)sub_1000EA5E4((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)sub_100861B80(v5, (uint64_t)(a2 + 4));
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_100861B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_100861B80(uint64_t **a1, uint64_t a2)
{
  memset(v6, 0, sizeof(v6));
  sub_10060153C((uint64_t)a1, a2, v6);
  uint64_t v5 = 0;
  uint64_t v3 = (uint64_t **)sub_1000EA518((uint64_t)a1, &v5, v6[0] + 4);
  sub_100046C38(a1, v5, v3, v6[0]);
  return v6[0];
}

void sub_100861BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    sub_1000C6EE8((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100861C08(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  long long v4 = (void **)(a2 + 1);
  uint64_t v5 = (void **)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v19 = 0;
      uint64_t v6 = *(uint64_t **)(a1 + 8);
      if (*(uint64_t **)a1 == v3)
      {
        uint64_t v8 = v3;
        if (!v6) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v7 = v3;
        if (v6)
        {
          do
          {
            uint64_t v8 = v6;
            uint64_t v6 = (uint64_t *)v6[1];
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v8 = (uint64_t *)v7[2];
            BOOL v9 = *v8 == (void)v7;
            uint64_t v7 = v8;
          }
          while (v9);
        }
        if ((sub_100046FE8(v8 + 4, v5 + 4) & 0x80) == 0)
        {
          uint64_t v10 = (uint64_t **)sub_100046ED4(a1, &v19, v5 + 4);
          goto LABEL_11;
        }
        if (!*v3)
        {
LABEL_14:
          uint64_t v19 = v3;
          uint64_t v10 = (uint64_t **)v3;
LABEL_15:
          uint64_t v18 = 0;
          uint64_t v11 = (uint64_t *)operator new(0xC0uLL);
          BOOL v12 = v11;
          v17[0] = v11;
          v17[1] = v3;
          if (*((char *)v5 + 55) < 0)
          {
            sub_10004FC84((unsigned char *)v11 + 32, v5[4], (unint64_t)v5[5]);
          }
          else
          {
            long long v13 = *((_OWORD *)v5 + 2);
            v11[6] = (uint64_t)v5[6];
            *((_OWORD *)v11 + 2) = v13;
          }
          sub_10006891C((uint64_t)(v12 + 7), (uint64_t)(v5 + 7));
          LOBYTE(v18) = 1;
          sub_100046C38((uint64_t **)a1, (uint64_t)v19, v10, v17[0]);
          v17[0] = 0;
          sub_100602860((uint64_t)v17, 0);
          goto LABEL_19;
        }
      }
      uint64_t v19 = v8;
      uint64_t v10 = (uint64_t **)(v8 + 1);
LABEL_11:
      if (!*v10) {
        goto LABEL_15;
      }
LABEL_19:
      uint64_t v14 = (void **)v5[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          uint64_t v14 = (void **)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void **)v5[2];
          BOOL v9 = *v15 == v5;
          uint64_t v5 = v15;
        }
        while (!v9);
      }
      uint64_t v5 = v15;
    }
    while (v15 != v4);
  }
  return a1;
}

void sub_100861DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100602860((uint64_t)&a9, 0);
  sub_100602520(v9, *(void **)(v9 + 8));
  _Unwind_Resume(a1);
}

void sub_100861DFC(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v9 = &off_101A0BD40;
  sub_100857B5C(&__p);
  unsigned __int8 v2 = sub_1007ECCD4((uint64_t)&v9, (uint64_t *)&__p);
  unsigned __int8 v3 = v2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v3) {
      goto LABEL_14;
    }
  }
  else if (v2)
  {
    goto LABEL_14;
  }
  sub_100857B5C(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  int v5 = sub_1007ED204((uint64_t)&v9, (uint64_t)p_p, 448, 1);
  int v6 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6) {
      goto LABEL_14;
    }
  }
  else if (!v5)
  {
    goto LABEL_14;
  }
  uint64_t v7 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = strerror(v6);
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#E Could not create directory: %s", (uint8_t *)&__p, 0xCu);
  }
LABEL_14:
  FileSystemInterface::~FileSystemInterface((FileSystemInterface *)&v9);
  operator delete();
}

void sub_100861F78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t *sub_100861FD0(void **a1)
{
  uint64_t v1 = *a1;
  long long v49 = a1;
  uint64_t v50 = v1;
  uint64_t v46 = *v1;
  sub_100860AEC((uint64_t)&v51, (uint64_t)(v1 + 1));
  id v48 = [objc_alloc((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  unsigned __int8 v2 = +[NSNumber numberWithInt:3];
  [v48 encodeObject:v2 forKey:@"version"];

  if (v52[1])
  {
    unsigned __int8 v3 = objc_opt_new();
    long long v4 = v51;
    if (v51 != v52)
    {
      do
      {
        int v5 = v4 + 4;
        if (*((char *)v4 + 55) < 0) {
          int v5 = (void *)*v5;
        }
        int v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5, v46);
        [v3 addObject:v6];

        uint64_t v7 = v4[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = (char **)v7;
            uint64_t v7 = *(char **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (char **)v4[2];
            BOOL v9 = *v8 == (char *)v4;
            long long v4 = v8;
          }
          while (!v9);
        }
        long long v4 = v8;
      }
      while (v8 != v52);
    }
    objc_msgSend(v48, "encodeObject:forKey:", v3, @"userEnabledIccids", v46);
  }
  if (v54 < 0)
  {
    if (!v53[1]) {
      goto LABEL_18;
    }
    uint64_t v10 = (void **)v53[0];
  }
  else
  {
    if (!v54) {
      goto LABEL_18;
    }
    uint64_t v10 = v53;
  }
  uint64_t v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v10, v46);
  [v48 encodeObject:v11 forKey:@"userActiveDataSelectedPlanIccid"];

LABEL_18:
  if (v56 < 0)
  {
    if (!v55[1]) {
      goto LABEL_24;
    }
    BOOL v12 = (void **)v55[0];
  }
  else
  {
    if (!v56) {
      goto LABEL_24;
    }
    BOOL v12 = v55;
  }
  long long v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12, v46);
  [v48 encodeObject:v13 forKey:@"userDefaultVoiceSelectedPlanIccid"];

LABEL_24:
  if (v58[1])
  {
    id v14 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v15 = v57;
    if (v57 != v58)
    {
      do
      {
        uint64_t v16 = v15 + 7;
        if (*((char *)v15 + 79) < 0) {
          uint64_t v16 = (void *)*v16;
        }
        id v17 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16, v46);
        uint64_t v18 = v15 + 4;
        if (*((char *)v15 + 55) < 0) {
          uint64_t v18 = (void *)*v18;
        }
        uint64_t v19 = +[NSString stringWithUTF8String:v18];
        [v14 setObject:v17 forKeyedSubscript:v19];

        uint64_t v20 = v15[1];
        if (v20)
        {
          do
          {
            std::string::size_type v21 = (void **)v20;
            uint64_t v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            std::string::size_type v21 = (void **)v15[2];
            BOOL v9 = *v21 == v15;
            uint64_t v15 = v21;
          }
          while (!v9);
        }
        uint64_t v15 = v21;
      }
      while (v21 != v58);
    }
    id v22 = objc_msgSend(v14, "copy", v46);
    [v48 encodeObject:v22 forKey:@"carrierNames"];
  }
  if (v60[1])
  {
    id v23 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v24 = v59;
    if (v59 != v60)
    {
      do
      {
        v68[0] = @"mcc";
        unsigned int v25 = v24 + 11;
        if (*((char *)v24 + 111) < 0) {
          unsigned int v25 = (void *)*v25;
        }
        uint64_t v26 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25, v46);
        v69[0] = v26;
        v68[1] = @"mnc";
        unint64_t v27 = v24 + 14;
        if (*((char *)v24 + 135) < 0) {
          unint64_t v27 = (void *)*v27;
        }
        uint64_t v28 = +[NSString stringWithUTF8String:v27];
        v69[1] = v28;
        v68[2] = @"gid1";
        id v29 = v24 + 17;
        if (*((char *)v24 + 159) < 0) {
          id v29 = (void *)*v29;
        }
        long long v30 = +[NSString stringWithUTF8String:v29];
        v69[2] = v30;
        v68[3] = @"gid2";
        long long v31 = v24 + 20;
        if (*((char *)v24 + 183) < 0) {
          long long v31 = (void *)*v31;
        }
        int v32 = +[NSString stringWithUTF8String:v31];
        v69[3] = v32;
        uint64_t v33 = +[NSDictionary dictionaryWithObjects:v69 forKeys:v68 count:4];
        int v34 = v24 + 4;
        if (*((char *)v24 + 55) < 0) {
          int v34 = (void *)*v34;
        }
        CFStringRef v35 = +[NSString stringWithUTF8String:v34];
        [v23 setObject:v33 forKeyedSubscript:v35];

        int v36 = v24[1];
        if (v36)
        {
          do
          {
            CFStringRef v37 = (void **)v36;
            int v36 = (void *)*v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            CFStringRef v37 = (void **)v24[2];
            BOOL v9 = *v37 == v24;
            uint64_t v24 = v37;
          }
          while (!v9);
        }
        uint64_t v24 = v37;
      }
      while (v37 != v60);
    }
    id v38 = objc_msgSend(v23, "copy", v46);
    [v48 encodeObject:v38 forKey:@"carrierDescriptors"];
  }
  if (v62 < 0)
  {
    if (!__p[1]) {
      goto LABEL_62;
    }
    uint64_t v39 = (void **)__p[0];
  }
  else
  {
    if (!v62) {
      goto LABEL_62;
    }
    uint64_t v39 = __p;
  }
  int v40 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v39, v46);
  [v48 encodeObject:v40 forKey:@"userDisabledPhySimIccid"];

LABEL_62:
  id v41 = objc_msgSend(v48, "encodedData", v46);
  v67 = v41;
  if (v41) {
    CFRetain(v41);
  }
  uint64_t v42 = *(void *)(v47 + 48);
  sub_100857B5C(&v64);
  uint64_t v43 = std::string::append(&v64, "com.apple.CommCenter.CellularPlan.plist", 0x27uLL);
  long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
  std::string::size_type v66 = v43->__r_.__value_.__r.__words[2];
  long long v65 = v44;
  v43->__r_.__value_.__l.__size_ = 0;
  v43->__r_.__value_.__r.__words[2] = 0;
  v43->__r_.__value_.__r.__words[0] = 0;
  uint64_t v63 = v67;
  if (v67) {
    CFRetain(v67);
  }
  (*(void (**)(uint64_t, long long *, const void **))(*(void *)v42 + 872))(v42, &v65, &v63);
  sub_100030068(&v63);
  if (SHIBYTE(v66) < 0) {
    operator delete((void *)v65);
  }
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  sub_100030068(&v67);

  if (v62 < 0) {
    operator delete(__p[0]);
  }
  sub_10010E37C((uint64_t)&v59, v60[0]);
  sub_10010C0E0((uint64_t)&v57, v58[0]);
  if (v56 < 0) {
    operator delete(v55[0]);
  }
  if (v54 < 0) {
    operator delete(v53[0]);
  }
  sub_10005CD2C((uint64_t)&v51, v52[0]);
  sub_1008627F8((uint64_t *)&v50);
  return sub_100046B58((uint64_t *)&v49);
}

void sub_10086261C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, uint64_t a11, uint64_t a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  sub_10010E37C((uint64_t)&a33, a34);
  sub_10010C0E0((uint64_t)&a30, a31);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_10005CD2C((uint64_t)&a13, a16);
  sub_1008627F8(&a12);
  sub_100046B58(&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_1008627F8(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 151) < 0) {
      operator delete(*(void **)(v1 + 128));
    }
    sub_10010E37C(v1 + 104, *(void **)(v1 + 112));
    sub_10010C0E0(v1 + 80, *(void **)(v1 + 88));
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    sub_10005CD2C(v1 + 8, *(char **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_100862894(void **a1)
{
  uint64_t v1 = *a1;
  long long v4 = a1;
  int v5 = v1;
  sub_100857DFC(v6, *(void *)(*v1 + 48));
  uint64_t v2 = v1[4];
  if (!v2) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 48))(v2, v6);
  sub_1008613CC((uint64_t)v6);
  sub_10086294C((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_100862920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_10086294C((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10086294C(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_100860F10((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t *sub_10086299C(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  int v6 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_100862A54((uint64_t)a1, a4, v10);
    sub_100046C38(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100860EB8((uint64_t)v10, 0);
  }
  return v7;
}

double sub_100862A54@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (char *)operator new(0xB8uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_10004FC84(v7, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t v7 = v9;
  }
  double result = 0.0;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100862AF8(_Unwind_Exception *a1)
{
  sub_100860EB8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_100862B10(void **a1)
{
  uint64_t v1 = *a1;
  id v38 = a1;
  uint64_t v39 = v1;
  uint64_t v2 = *v1;
  if (v1[2] == v1[1])
  {
    int v32 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "com.apple.CommCenter.TransferBlacklistInfo.plist";
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I Remove file: %s", buf, 0xCu);
    }
    uint64_t v33 = *(void *)(v2 + 48);
    sub_100857B5C(&v42);
    int v34 = std::string::append(&v42, "com.apple.CommCenter.TransferBlacklistInfo.plist", 0x30uLL);
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    std::string::size_type v44 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long buf = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v33 + 888))(v33, buf);
    if (SHIBYTE(v44) < 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    id v3 = [objc_alloc((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
    long long v4 = +[NSNumber numberWithInt:3];
    [v3 encodeObject:v4 forKey:@"version"];
    CFStringRef v37 = v3;

    uint64_t v5 = objc_opt_new();
    uint64_t v7 = (uint64_t *)v1[1];
    int v6 = (uint64_t *)v1[2];
    if (v7 != v6)
    {
      while (1)
      {
        uint64_t v8 = objc_opt_new();
        if (*((char *)v7 + 23) < 0) {
          break;
        }
        long long v9 = v7;
        if (*((unsigned char *)v7 + 23)) {
          goto LABEL_8;
        }
LABEL_9:
        uint64_t v11 = v7 + 3;
        if (*((char *)v7 + 47) < 0)
        {
          if (!v7[4]) {
            goto LABEL_15;
          }
          uint64_t v11 = (void *)*v11;
LABEL_14:
          BOOL v12 = +[NSString stringWithUTF8String:v11];
          [v8 setValue:v12 forKey:@"blacklistSourceEIDKey"];

          goto LABEL_15;
        }
        if (*((unsigned char *)v7 + 47)) {
          goto LABEL_14;
        }
LABEL_15:
        long long v13 = v7 + 6;
        if (*((char *)v7 + 71) < 0)
        {
          if (!v7[7]) {
            goto LABEL_21;
          }
          long long v13 = (void *)*v13;
LABEL_20:
          id v14 = +[NSString stringWithUTF8String:v13];
          [v8 setValue:v14 forKey:@"blacklistSourceICCIDKey"];

          goto LABEL_21;
        }
        if (*((unsigned char *)v7 + 71)) {
          goto LABEL_20;
        }
LABEL_21:
        uint64_t v15 = v7 + 9;
        if (*((char *)v7 + 95) < 0)
        {
          if (!v7[10]) {
            goto LABEL_27;
          }
          uint64_t v15 = (void *)*v15;
LABEL_26:
          uint64_t v16 = +[NSString stringWithUTF8String:v15];
          [v8 setValue:v16 forKey:@"blacklistTargetIMEIKey"];

          goto LABEL_27;
        }
        if (*((unsigned char *)v7 + 95)) {
          goto LABEL_26;
        }
LABEL_27:
        id v17 = v7 + 12;
        if (*((char *)v7 + 119) < 0)
        {
          if (!v7[13]) {
            goto LABEL_33;
          }
          id v17 = (void *)*v17;
LABEL_32:
          uint64_t v18 = +[NSString stringWithUTF8String:v17];
          [v8 setValue:v18 forKey:@"blacklistTargetEIDKey"];

          goto LABEL_33;
        }
        if (*((unsigned char *)v7 + 119)) {
          goto LABEL_32;
        }
LABEL_33:
        uint64_t v19 = v7 + 15;
        if (*((char *)v7 + 143) < 0)
        {
          if (!v7[16]) {
            goto LABEL_39;
          }
          uint64_t v19 = (void *)*v19;
LABEL_38:
          uint64_t v20 = +[NSString stringWithUTF8String:v19];
          [v8 setValue:v20 forKey:@"blacklistTargetICCIDKey"];

          goto LABEL_39;
        }
        if (*((unsigned char *)v7 + 143)) {
          goto LABEL_38;
        }
LABEL_39:
        std::string::size_type v21 = v7 + 18;
        if (*((char *)v7 + 167) < 0)
        {
          if (!v7[19]) {
            goto LABEL_45;
          }
          std::string::size_type v21 = (void *)*v21;
LABEL_44:
          id v22 = +[NSString stringWithUTF8String:v21];
          [v8 setValue:v22 forKey:@"blacklistCarrierNameKey"];

          goto LABEL_45;
        }
        if (*((unsigned char *)v7 + 167)) {
          goto LABEL_44;
        }
LABEL_45:
        id v23 = v7 + 21;
        if ((*((char *)v7 + 191) & 0x80000000) == 0)
        {
          if (!*((unsigned char *)v7 + 191)) {
            goto LABEL_51;
          }
          goto LABEL_50;
        }
        if (v7[22])
        {
          id v23 = (void *)*v23;
LABEL_50:
          uint64_t v24 = +[NSString stringWithUTF8String:v23];
          [v8 setValue:v24 forKey:@"blacklistPhoneNumberKey"];
        }
LABEL_51:
        unsigned int v25 = +[NSNumber numberWithInt:*((unsigned int *)v7 + 48)];
        [v8 setValue:v25 forKey:@"blacklistTriggerKey"];

        uint64_t v26 = +[NSNumber numberWithDouble:*((double *)v7 + 25)];
        [v8 setValue:v26 forKey:@"blocklistCreationDateKey"];

        [v5 addObject:v8];
        v7 += 29;
        if (v7 == v6) {
          goto LABEL_52;
        }
      }
      if (!v7[1]) {
        goto LABEL_9;
      }
      long long v9 = (uint64_t *)*v7;
LABEL_8:
      uint64_t v10 = +[NSString stringWithUTF8String:v9];
      [v8 setValue:v10 forKey:@"blacklistSourceIMEIKey"];

      goto LABEL_9;
    }
LABEL_52:
    [v37 encodeObject:v5 forKey:@"blacklistInfosKey"];
    id v27 = [v37 encodedData];
    CFTypeRef cf = v27;
    if (v27) {
      CFRetain(v27);
    }
    uint64_t v28 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = [v5 count];
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I saveBlacklistInfos: Saved [%lu] blacklist info", buf, 0xCu);
    }
    uint64_t v29 = *(void *)(v2 + 48);
    sub_100857B5C(&v42);
    long long v30 = std::string::append(&v42, "com.apple.CommCenter.TransferBlacklistInfo.plist", 0x30uLL);
    long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    std::string::size_type v44 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long buf = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    CFTypeRef v40 = cf;
    if (cf) {
      CFRetain(cf);
    }
    (*(void (**)(uint64_t, uint8_t *, CFTypeRef *))(*(void *)v29 + 864))(v29, buf, &v40);
    sub_100030068(&v40);
    if (SHIBYTE(v44) < 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    sub_100030068(&cf);
  }
  sub_100428710((uint64_t *)&v39);
  return sub_100046B58((uint64_t *)&v38);
}

void sub_100863104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, __int16 a14, char a15, char a16, int a17, const void *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_100030068(&a18);

  sub_100428710(&a13);
  sub_100046B58(&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_100863234(void **a1)
{
  uint64_t v1 = *a1;
  long long v74 = a1;
  uint64_t v75 = v1;
  int v68 = v1;
  uint64_t v2 = *v1;
  uint64_t v81 = 0;
  id v82 = 0;
  unint64_t v83 = 0;
  uint64_t v69 = v2;
  uint64_t v3 = *(void *)(v2 + 48);
  sub_100857B5C(&v93);
  long long v4 = std::string::append(&v93, "com.apple.CommCenter.TransferBlacklistInfo.plist", 0x30uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  *(void *)&v86[0] = *((void *)&v4->__r_.__value_.__l + 2);
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v3 + 880))(&v76, v3, __p);
  id v72 = (id)v76;
  sub_100030068((const void **)&v76);
  if (SBYTE7(v86[0]) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  if (v72)
  {
    id v6 = objc_alloc((Class)NSKeyedUnarchiver);
    id v80 = 0;
    id v7 = [v6 initForReadingFromData:v72 error:&v80];
    id v8 = v80;
    uint64_t v71 = v7;
    std::string v64 = v8;
    if (!v7 || v8)
    {
      uint64_t v46 = *(NSObject **)(v69 + 40);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I loadTransferBlacklistInfo: No unarchiver or error", (uint8_t *)__p, 2u);
      }
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&v86[0] = 0;
      sub_100427CA0(__p, v81, (uint64_t)v82, 0x34F72C234F72C235 * ((uint64_t)&v82[-v81] >> 3));
      uint64_t v47 = v68[4];
      if (!v47) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, void **))(*(void *)v47 + 48))(v47, __p);
      v93.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      sub_100426D90((void ***)&v93);
      uint64_t v73 = 0;
    }
    else
    {
      uint64_t v73 = [v7 decodeObjectOfClass:objc_opt_class() forKey:@"version"];
      if (v73 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
      {
        if ([v73 intValue] == 3)
        {
          uint64_t v9 = objc_opt_class();
          uint64_t v10 = objc_opt_class();
          uint64_t v11 = objc_opt_class();
          uint64_t v59 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v9, v10, v11, objc_opt_class(), 0);
          uint64_t v60 = [v7 decodeObjectOfClasses:v59 forKey:@"blacklistInfosKey"];
          if (v60 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
          {
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            id obj = v60;
            id v63 = [obj countByEnumeratingWithState:&v76 objects:&v93 count:16];
            if (v63)
            {
              uint64_t v70 = 0;
              uint64_t v61 = *(void *)v77;
              for (uint64_t i = *(void *)v77; ; uint64_t i = *(void *)v77)
              {
                if (i != v61) {
                  objc_enumerationMutation(obj);
                }
                id v13 = *(id *)(*((void *)&v76 + 1) + 8 * v70);
                uint64_t v92 = 0;
                long long v90 = 0u;
                long long v91 = 0u;
                memset(v89, 0, sizeof(v89));
                memset(v88, 0, sizeof(v88));
                memset(v87, 0, sizeof(v87));
                *(_OWORD *)std::string __p = 0u;
                memset(v86, 0, sizeof(v86));
                id v67 = [v13 objectForKeyedSubscript:@"blacklistSourceIMEIKey"];
                if (v67)
                {
                  id v14 = +[NSNull null];
                  BOOL v15 = v67 == v14;

                  if (!v15) {
                    sub_10003ED78((std::string *)__p, (char *)[v67 UTF8String]);
                  }
                }
                id v66 = [v13 objectForKeyedSubscript:@"blacklistSourceEIDKey"];
                if (v66)
                {
                  id v16 = +[NSNull null];
                  BOOL v17 = v66 == v16;

                  if (!v17) {
                    sub_10003ED78((std::string *)((char *)v86 + 8), (char *)[v66 UTF8String]);
                  }
                }
                id v65 = [v13 objectForKeyedSubscript:@"blacklistSourceICCIDKey"];
                if (v65)
                {
                  id v18 = +[NSNull null];
                  BOOL v19 = v65 == v18;

                  if (!v19) {
                    sub_10003ED78(v87, (char *)[v65 UTF8String]);
                  }
                }
                uint64_t v20 = [v13 objectForKeyedSubscript:@"blacklistTargetIMEIKey"];
                if (v20)
                {
                  std::string::size_type v21 = +[NSNull null];
                  BOOL v22 = v20 == v21;

                  if (!v22) {
                    sub_10003ED78(&v87[1], (char *)[v20 UTF8String]);
                  }
                }
                id v23 = [v13 objectForKeyedSubscript:@"blacklistTargetEIDKey"];
                if (v23)
                {
                  uint64_t v24 = +[NSNull null];
                  BOOL v25 = v23 == v24;

                  if (!v25) {
                    sub_10003ED78(v88, (char *)[v23 UTF8String]);
                  }
                }
                uint64_t v26 = [v13 objectForKeyedSubscript:@"blacklistTargetICCIDKey"];
                if (v26)
                {
                  id v27 = +[NSNull null];
                  BOOL v28 = v26 == v27;

                  if (!v28) {
                    sub_10003ED78(&v88[1], (char *)[v26 UTF8String]);
                  }
                }
                uint64_t v29 = [v13 objectForKeyedSubscript:@"blacklistCarrierNameKey"];
                if (v29)
                {
                  long long v30 = +[NSNull null];
                  BOOL v31 = v29 == v30;

                  if (!v31) {
                    sub_10003ED78(v89, (char *)[v29 UTF8String]);
                  }
                }
                int v32 = [v13 objectForKeyedSubscript:@"blacklistPhoneNumberKey"];
                if (v32)
                {
                  uint64_t v33 = +[NSNull null];
                  BOOL v34 = v32 == v33;

                  if (!v34) {
                    sub_10003ED78(&v89[1], (char *)[v32 UTF8String]);
                  }
                }
                long long v35 = [v13 objectForKeyedSubscript:@"blacklistTriggerKey"];
                if (v35)
                {
                  int v36 = +[NSNull null];
                  if (v35 == v36)
                  {
                  }
                  else
                  {
                    objc_opt_class();
                    char isKindOfClass = objc_opt_isKindOfClass();

                    if (isKindOfClass) {
                      LODWORD(v90) = [v35 intValue];
                    }
                  }
                }
                id v38 = [v13 objectForKeyedSubscript:@"blocklistCreationDateKey"];
                if (v38)
                {
                  uint64_t v39 = +[NSNull null];
                  if (v38 == v39)
                  {
                  }
                  else
                  {
                    objc_opt_class();
                    char v40 = objc_opt_isKindOfClass();

                    if (v40)
                    {
                      [v38 doubleValue];
                      *((void *)&v90 + 1) = v41;
                    }
                  }
                }
                std::string v42 = v82;
                if ((unint64_t)v82 >= v83)
                {
                  uint64_t v43 = (char *)sub_10042763C(&v81, (long long *)__p);
                }
                else
                {
                  sub_10042775C(v82, (long long *)__p);
                  uint64_t v43 = v42 + 232;
                }
                id v82 = v43;

                sub_100427BEC((uint64_t)__p);
                if (++v70 >= (unint64_t)v63)
                {
                  id v63 = [obj countByEnumeratingWithState:&v76 objects:&v93 count:16];
                  if (!v63) {
                    break;
                  }
                  uint64_t v70 = 0;
                }
              }
            }

            [v71 finishDecoding];
            long long v55 = *(NSObject **)(v69 + 40);
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
            {
              id v56 = [obj count];
              LODWORD(__p[0]) = 134217984;
              *(void **)((char *)__p + 4) = v56;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#I loadTransferBlacklistInfo: Loaded %lu items", (uint8_t *)__p, 0xCu);
            }
            __p[0] = 0;
            __p[1] = 0;
            *(void *)&v86[0] = 0;
            sub_100427CA0(__p, v81, (uint64_t)v82, 0x34F72C234F72C235 * ((uint64_t)&v82[-v81] >> 3));
            uint64_t v57 = v68[4];
            if (!v57) {
              sub_10007B600();
            }
            (*(void (**)(uint64_t, void **))(*(void *)v57 + 48))(v57, __p);
            id v84 = __p;
            sub_100426D90(&v84);
          }
          else
          {
            [v7 finishDecoding];
            __p[0] = 0;
            __p[1] = 0;
            *(void *)&v86[0] = 0;
            sub_100427CA0(__p, v81, (uint64_t)v82, 0x34F72C234F72C235 * ((uint64_t)&v82[-v81] >> 3));
            uint64_t v53 = v68[4];
            if (!v53) {
              sub_10007B600();
            }
            (*(void (**)(uint64_t, void **))(*(void *)v53 + 48))(v53, __p);
            v93.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            sub_100426D90((void ***)&v93);
            char v54 = *(NSObject **)(v69 + 40);
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v93.__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "#I loadTransferBlacklistInfo: Failed to decode (blacklistInfosKey)", (uint8_t *)&v93, 2u);
            }
          }
        }
        else
        {
          [v7 finishDecoding];
          uint64_t v50 = *(NSObject **)(v69 + 40);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v51 = [v73 intValue];
            LODWORD(__p[0]) = 67109120;
            HIDWORD(__p[0]) = v51;
            _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#I loadTransferBlacklistInfo: Version mismatch [%d]", (uint8_t *)__p, 8u);
          }
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&v86[0] = 0;
          sub_100427CA0(__p, v81, (uint64_t)v82, 0x34F72C234F72C235 * ((uint64_t)&v82[-v81] >> 3));
          uint64_t v52 = v68[4];
          if (!v52) {
            sub_10007B600();
          }
          (*(void (**)(uint64_t, void **))(*(void *)v52 + 48))(v52, __p);
          v93.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          sub_100426D90((void ***)&v93);
        }
      }
      else
      {
        [v7 finishDecoding];
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&v86[0] = 0;
        sub_100427CA0(__p, v81, (uint64_t)v82, 0x34F72C234F72C235 * ((uint64_t)&v82[-v81] >> 3));
        uint64_t v48 = v68[4];
        if (!v48) {
          sub_10007B600();
        }
        (*(void (**)(uint64_t, void **))(*(void *)v48 + 48))(v48, __p);
        v93.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        sub_100426D90((void ***)&v93);
        long long v49 = *(NSObject **)(v69 + 40);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v93.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#I loadTransferBlacklistInfo: Version decoding failure", (uint8_t *)&v93, 2u);
        }
      }
    }
  }
  else
  {
    std::string::size_type v44 = *(NSObject **)(v69 + 40);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#I loadTransferBlacklistInfo: No data", (uint8_t *)__p, 2u);
    }
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&v86[0] = 0;
    sub_100427CA0(__p, v81, (uint64_t)v82, 0x34F72C234F72C235 * ((uint64_t)&v82[-v81] >> 3));
    uint64_t v45 = v68[4];
    if (!v45) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v45 + 48))(v45, __p);
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    sub_100426D90((void ***)&v93);
  }

  id v84 = (void **)&v81;
  sub_100426D90(&v84);
  sub_100864154((uint64_t *)&v75);
  return sub_100046B58((uint64_t *)&v74);
}

void sub_100863F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,void *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char *a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  a50 = &a47;
  sub_100426D90((void ***)&a50);
  sub_100864154(&a36);
  sub_100046B58(&a35);
  _Unwind_Resume(a1);
}

uint64_t *sub_100864154(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    sub_100428830((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t *sub_1008641A4(void **a1)
{
  uint64_t v1 = *a1;
  BOOL v25 = a1;
  uint64_t v26 = v1;
  uint64_t v2 = *v1;
  (***(void (****)(uint8_t *__return_ptr))(*v1 + 48))(buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)buf);
  long long v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    id v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      std::string::size_type v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  v27.__r_.__value_.__r.__words[0] = v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)&v27);
  if (v10)
  {
    uint64_t v12 = v10[3];
    uint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v11 = 0;
  char v13 = 1;
LABEL_9:
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v12)
  {
    uint64_t v14 = v1[2] - v1[1];
    if (v14)
    {
      BOOL v15 = +[NSMutableArray arrayWithCapacity:0x8E38E38E38E38E39 * (v14 >> 3)];
      uint64_t v16 = v1[1];
      uint64_t v17 = v1[2];
      while (v16 != v17)
      {
        id v18 = codec::toJSONObject<rest::DeleteCloudCellularPlanBlacklistRecord>();
        if (v18) {
          [v15 addObject:v18];
        }

        v16 += 72;
      }
      if ([v15 count])
      {
        id v19 = v15;

        long long v30 = v19;
        if (v19) {
          CFRetain(v19);
        }
        goto LABEL_25;
      }
    }
    id v19 = 0;
    long long v30 = 0;
LABEL_25:
    sub_100857B5C(&v27);
    std::string::size_type v21 = std::string::append(&v27, "com.apple.CommCenter.DeleteBlocklistInfo.plist", 0x2EuLL);
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    int64_t v29 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long buf = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (v29 >= 0) {
      id v23 = buf;
    }
    else {
      id v23 = *(uint8_t **)buf;
    }
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, (const char *)v23, 0x8000100u, kCFAllocatorNull);
    (*(void (**)(uint64_t, const __CFString *, const void *, std::string::size_type, const CFStringRef, const CFStringRef))(*(void *)v12 + 16))(v12, @"kDeleteBlocklistKey", v30, v27.__r_.__value_.__r.__words[0], kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    sub_1000558F4((const void **)&v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29) < 0) {
      operator delete(*(void **)buf);
    }
    sub_100044D00(&v30);

    goto LABEL_33;
  }
  uint64_t v20 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "invalid CFPreferencesInterface!", buf, 2u);
  }
LABEL_33:
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  sub_100864568((uint64_t *)&v26);
  return sub_100046B58((uint64_t *)&v25);
}

void sub_1008644BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if ((v26 & 1) == 0) {
    sub_10004D2C8(v24);
  }
  sub_100864568(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100864568(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 8);
    sub_10030EC88(&v2);
    operator delete();
  }
  return result;
}

uint64_t *sub_1008645C8(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v48 = a1;
  long long v49 = v1;
  uint64_t v2 = *v1;
  (***(void (****)(std::string *__return_ptr))(*v1 + 48))(&v64);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, (Registry *)v64.__r_.__value_.__l.__data_);
  long long v5 = ServiceMap;
  if (v6 < 0)
  {
    id v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  v56[0] = (void *)v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)v56);
  if (v10)
  {
    uint64_t v12 = v10[3];
    uint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v47 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v11 = 0;
  char v47 = 1;
LABEL_9:
  if (v64.__r_.__value_.__l.__size_) {
    sub_10004D2C8((std::__shared_weak_count *)v64.__r_.__value_.__l.__size_);
  }
  if (v12)
  {
    v54[0] = 0;
    v54[1] = 0;
    int64_t v55 = 0;
    sub_100857B5C(&v64);
    char v13 = std::string::append(&v64, "com.apple.CommCenter.DeleteBlocklistInfo.plist", 0x2EuLL);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    int64_t v55 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)char v54 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v64.__r_.__value_.__l.__data_);
    }
    CFStringRef v53 = 0;
    if (v55 >= 0) {
      BOOL v15 = v54;
    }
    else {
      BOOL v15 = (void **)v54[0];
    }
    uint64_t v52 = 0;
    CFStringRef v53 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, (const char *)v15, 0x8000100u, kCFAllocatorNull);
    (*(void (**)(std::string *__return_ptr, uint64_t, const __CFString *, CFStringRef, const CFStringRef, const CFStringRef))(*(void *)v12 + 40))(&v64, v12, @"kDeleteBlocklistKey", v53, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    sub_100044D6C(&v52, (CFTypeRef *)&v64.__r_.__value_.__l.__data_);
    sub_1000577C4((const void **)&v64.__r_.__value_.__l.__data_);
    uint64_t v16 = v52;
    uint64_t v17 = v16;
    if (!v16)
    {
      memset(&v64, 0, sizeof(v64));
      uint64_t v34 = v1[4];
      if (!v34) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)v34 + 48))(v34, &v64);
      v56[0] = &v64;
      goto LABEL_62;
    }
    long long v50 = 0uLL;
    v51[0] = 0;
    id v46 = v16;
    id v18 = +[NSArray typecast:v46];
    id v19 = v18;
    if (v18)
    {
      unint64_t v20 = (unint64_t)[v18 count];
      if (0x8E38E38E38E38E39 * ((uint64_t)(v51[0] - v50) >> 3) < v20)
      {
        if (v20 >= 0x38E38E38E38E38FLL) {
          sub_10006A748();
        }
        *(void *)&long long v57 = v51;
        std::string::size_type v21 = (char *)sub_10016ACDC((uint64_t)v51, v20);
        long long v22 = &v21[*((void *)&v50 + 1) - v50];
        v56[0] = v21;
        v56[1] = v22;
        uint64_t v24 = &v21[72 * v23];
        v56[2] = v22;
        v56[3] = v24;
        uint64_t v25 = *((void *)&v50 + 1);
        uint64_t v26 = v50;
        if (*((void *)&v50 + 1) == (void)v50)
        {
          int64x2_t v31 = vdupq_n_s64(*((unint64_t *)&v50 + 1));
          std::string v27 = &v21[*((void *)&v50 + 1) - v50];
        }
        else
        {
          std::string v27 = &v21[*((void *)&v50 + 1) - v50];
          do
          {
            long long v28 = *(_OWORD *)(v25 - 72);
            *((void *)v27 - 7) = *(void *)(v25 - 56);
            *(_OWORD *)(v27 - 72) = v28;
            *(void *)(v25 - 64) = 0;
            *(void *)(v25 - 56) = 0;
            *(void *)(v25 - 72) = 0;
            long long v29 = *(_OWORD *)(v25 - 48);
            *((void *)v27 - 4) = *(void *)(v25 - 32);
            *((_OWORD *)v27 - 3) = v29;
            *(void *)(v25 - 40) = 0;
            *(void *)(v25 - 32) = 0;
            *(void *)(v25 - 48) = 0;
            long long v30 = *(_OWORD *)(v25 - 24);
            *((void *)v27 - 1) = *(void *)(v25 - 8);
            *(_OWORD *)(v27 - 24) = v30;
            v27 -= 72;
            *(void *)(v25 - 16) = 0;
            *(void *)(v25 - 8) = 0;
            *(void *)(v25 - 24) = 0;
            v25 -= 72;
          }
          while (v25 != v26);
          int64x2_t v31 = (int64x2_t)v50;
          long long v22 = (char *)v56[2];
          uint64_t v24 = (char *)v56[3];
        }
        *(void *)&long long v50 = v27;
        *((void *)&v50 + 1) = v22;
        *(int64x2_t *)&v56[1] = v31;
        long long v35 = (void *)v51[0];
        v51[0] = v24;
        v56[3] = v35;
        v56[0] = (void *)v31.i64[0];
        sub_10030EC38((uint64_t)v56);
      }
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      id v36 = v19;
      id v37 = [v36 countByEnumeratingWithState:&v60 objects:&v64 count:16];
      if (v37)
      {
        uint64_t v38 = *(void *)v61;
        while (2)
        {
          for (uint64_t i = 0; i != v37; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v61 != v38) {
              objc_enumerationMutation(v36);
            }
            id v40 = *(id *)(*((void *)&v60 + 1) + 8 * i);
            uint64_t v59 = 0;
            long long v57 = 0u;
            *(_OWORD *)std::string __p = 0u;
            memset(v56, 0, sizeof(v56));
            if ((codec::fromJSONObject<rest::DeleteCloudCellularPlanBlacklistRecord>() & 1) == 0)
            {
              if (SHIBYTE(v59) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v57) < 0) {
                operator delete(v56[3]);
              }
              if (SHIBYTE(v56[2]) < 0) {
                operator delete(v56[0]);
              }

              goto LABEL_57;
            }
            sub_1002FC1CC((uint64_t *)&v50, (long long *)v56);
            if (SHIBYTE(v59) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v57) < 0) {
              operator delete(v56[3]);
            }
            if (SHIBYTE(v56[2]) < 0) {
              operator delete(v56[0]);
            }
          }
          id v37 = [v36 countByEnumeratingWithState:&v60 objects:&v64 count:16];
          if (v37) {
            continue;
          }
          break;
        }
      }

      id v41 = [v36 count];
      BOOL v42 = v41 == (id)(0x8E38E38E38E38E39 * ((uint64_t)(*((void *)&v50 + 1) - v50) >> 3));

      if (v42)
      {
        memset(&v64, 0, sizeof(v64));
        sub_1003229A4(&v64, v50, *((uint64_t *)&v50 + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((void *)&v50 + 1) - v50) >> 3));
        uint64_t v43 = v1[4];
        if (!v43) {
          sub_10007B600();
        }
LABEL_61:
        (*(void (**)(uint64_t, std::string *))(*(void *)v43 + 48))(v43, &v64);
        v56[0] = &v64;
        sub_10030EC88((void ***)v56);
        v56[0] = &v50;
LABEL_62:
        sub_10030EC88((void ***)v56);

        sub_100044D00((const void **)&v52);
        sub_1000558F4((const void **)&v53);
        if (SHIBYTE(v55) < 0) {
          operator delete(v54[0]);
        }
        goto LABEL_64;
      }
    }
    else
    {
LABEL_57:
    }
    std::string::size_type v44 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v64.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "decode std::vector<rest::DeleteCloudCellularPlanBlacklistRecord> failure", (uint8_t *)&v64, 2u);
    }
    memset(&v64, 0, sizeof(v64));
    uint64_t v43 = v1[4];
    if (!v43) {
      sub_10007B600();
    }
    goto LABEL_61;
  }
  int v32 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v64.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "invalid CFPreferencesInterface!", (uint8_t *)&v64, 2u);
  }
  memset(&v64, 0, sizeof(v64));
  uint64_t v33 = v1[4];
  if (!v33) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, std::string *))(*(void *)v33 + 48))(v33, &v64);
  v56[0] = &v64;
  sub_10030EC88((void ***)v56);
LABEL_64:
  if ((v47 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  sub_100864EA0((uint64_t *)&v49);
  return sub_100046B58((uint64_t *)&v48);
}

void sub_100864D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, const void *a20,const void *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,__int16 *a28,uint64_t a29)
{
  a28 = &a14;
  sub_10030EC88((void ***)&a28);

  sub_100044D00(&a20);
  sub_1000558F4(&a21);
  if (a27 < 0) {
    operator delete(__p);
  }
  if ((a11 & 1) == 0) {
    sub_10004D2C8(v29);
  }
  sub_100864EA0(&a13);
  sub_100046B58(&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_100864EA0(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    sub_100428F9C((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t *sub_100864EF0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v24 = a1;
  uint64_t v25 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      long long v4 = v3;
      uint64_t v5 = *(void *)v1;
      if (*(void *)v1)
      {
        if (*(void *)(v1 + 24) == *(void *)(v1 + 16))
        {
          uint64_t v20 = *(void *)(v5 + 48);
          sub_100857B5C(&__p);
          std::string::size_type v21 = std::string::append(&__p, "com.apple.CommCenter.TransferDevicePlanInfo.plist", 0x31uLL);
          long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
          long long v30 = (void (*)(uint64_t, uint64_t))v21->__r_.__value_.__r.__words[2];
          *(_OWORD *)long long v29 = v22;
          v21->__r_.__value_.__l.__size_ = 0;
          v21->__r_.__value_.__r.__words[2] = 0;
          v21->__r_.__value_.__r.__words[0] = 0;
          (*(void (**)(uint64_t, void **))(*(void *)v20 + 888))(v20, v29);
          if (SHIBYTE(v30) < 0) {
            operator delete(v29[0]);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          *(void *)(v5 + 88) = *(void *)(v5 + 80);
          if (*(char *)(v5 + 127) < 0)
          {
            **(unsigned char **)(v5 + 104) = 0;
            *(void *)(v5 + 112) = 0;
          }
          else
          {
            *(unsigned char *)(v5 + 104) = 0;
            *(unsigned char *)(v5 + 127) = 0;
          }
        }
        else
        {
          id v6 = [objc_alloc((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
          id v7 = +[NSNumber numberWithInt:3];
          [v6 encodeObject:v7 forKey:@"version"];

          id v8 = objc_alloc_init((Class)NSMutableArray);
          unsigned int v9 = *(unsigned __int8 **)(v1 + 16);
          uint64_t v10 = *(unsigned __int8 **)(v1 + 24);
          v29[0] = _NSConcreteStackBlock;
          v29[1] = (void *)3221225472;
          long long v30 = sub_1008653D4;
          int64x2_t v31 = &unk_101A11BC8;
          id v11 = v8;
          id v32 = v11;
          uint64_t v12 = v29;
          while (v9 != v10)
            v30((uint64_t)v12, *v9++);
          char v13 = objc_retainBlock(v12);

          [v6 encodeObject:v11 forKey:@"transferDeviceInfo"];
          uint64_t v14 = v1 + 40;
          if (*(char *)(v1 + 63) < 0) {
            uint64_t v14 = *(void *)(v1 + 40);
          }
          BOOL v15 = +[NSString stringWithUTF8String:v14];
          [v6 encodeObject:v15 forKey:@"uuid"];

          id v16 = [v6 encodedData];
          CFTypeRef cf = v16;
          if (v16) {
            CFRetain(v16);
          }
          uint64_t v17 = *(void *)(v5 + 48);
          sub_100857B5C(&v27);
          id v18 = std::string::append(&v27, "com.apple.CommCenter.TransferDevicePlanInfo.plist", 0x31uLL);
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          CFTypeRef v26 = cf;
          if (cf) {
            CFRetain(cf);
          }
          (*(void (**)(uint64_t, std::string *, CFTypeRef *))(*(void *)v17 + 864))(v17, &__p, &v26);
          sub_100030068(&v26);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v27.__r_.__value_.__l.__data_);
          }
          if (v5 + 80 != v1 + 16) {
            sub_10006E4A8((void *)(v5 + 80), *(char **)(v1 + 16), *(char **)(v1 + 24), *(void *)(v1 + 24) - *(void *)(v1 + 16));
          }
          std::string::operator=((std::string *)(v5 + 104), (const std::string *)(v1 + 40));
          sub_100030068(&cf);
        }
      }
      sub_10004D2C8(v4);
    }
  }
  sub_100865360(&v25);
  return sub_100046B58((uint64_t *)&v24);
}

void sub_100865274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  sub_10004D2C8(v36);
  sub_100865360(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100865360(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    uint64_t v2 = *(void **)(v1 + 16);
    if (v2)
    {
      *(void *)(v1 + 24) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete();
  }
  return result;
}

void sub_1008653D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = +[NSNumber numberWithInt:a2];
  objc_msgSend(v2, "addObject:");
}

void sub_100865434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_100865448(void **a1)
{
  uint64_t v1 = *a1;
  id v36 = a1;
  id v37 = v1;
  uint64_t v2 = (std::__shared_weak_count *)v1[1];
  if (v2)
  {
    id v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *v1;
      if (*v1)
      {
        memset(&__str, 0, sizeof(__str));
        uint64_t v5 = *(void *)(v4 + 48);
        sub_100857B5C(&__dst);
        id v6 = std::string::append(&__dst, "com.apple.CommCenter.TransferDevicePlanInfo.plist", 0x31uLL);
        long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
        uint64_t v46 = v6->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v45 = v7;
        v6->__r_.__value_.__l.__size_ = 0;
        v6->__r_.__value_.__r.__words[2] = 0;
        v6->__r_.__value_.__r.__words[0] = 0;
        (*(void (**)(uint8_t *__return_ptr, uint64_t, uint8_t *))(*(void *)v5 + 880))(buf, v5, v45);
        id v8 = *(id *)buf;
        sub_100030068((const void **)buf);
        if (SHIBYTE(v46) < 0) {
          operator delete(*(void **)v45);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          if (v8)
          {
LABEL_8:
            id v9 = objc_alloc((Class)NSKeyedUnarchiver);
            id v42 = 0;
            id v10 = [v9 initForReadingFromData:v8 error:&v42];
            id v11 = v42;
            uint64_t v12 = v11;
            if (!v10 || v11)
            {
              uint64_t v23 = *(NSObject **)(v4 + 40);
              if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)uint64_t v45 = 0;
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I No unarchiver or error", v45, 2u);
              }
              memset(v45, 0, sizeof(v45));
              uint64_t v46 = 0;
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                sub_10004FC84(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
              }
              else {
                std::string __dst = __str;
              }
              uint64_t v25 = v1[5];
              if (!v25) {
                sub_10007B600();
              }
              (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v25 + 48))(v25, v45, &__dst);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__dst.__r_.__value_.__l.__data_);
              }
              if (*(void *)v45)
              {
                *(void *)&v45[8] = *(void *)v45;
                operator delete(*(void **)v45);
              }
              char v13 = 0;
            }
            else
            {
              char v13 = [v10 decodeObjectOfClass:objc_opt_class() forKey:@"version"];
              if (v13 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
              {
                if ([v13 intValue] == 3)
                {
                  uint64_t v14 = objc_opt_class();
                  uint64_t v15 = objc_opt_class();
                  id v16 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v14, v15, objc_opt_class(), 0);
                  uint64_t v17 = [v10 decodeObjectOfClasses:v16 forKey:@"transferDeviceInfo"];
                  if (v17 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
                  {
                    *(void *)uint64_t v45 = 0;
                    *(void *)&v45[8] = v45;
                    uint64_t v46 = 0x4812000000;
                    char v47 = sub_100866078;
                    uint64_t v48 = sub_10086609C;
                    long long v49 = "";
                    unsigned int v51 = 0;
                    uint64_t v52 = 0;
                    long long v50 = 0;
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
                    __dst.__r_.__value_.__l.__size_ = 3221225472;
                    __dst.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_1008660B4;
                    id v40 = &unk_101A11BF0;
                    id v41 = v45;
                    [v17 enumerateObjectsUsingBlock:&__dst];
                    if (v4 + 80 != *(void *)&v45[8] + 48) {
                      sub_10006E4A8((void *)(v4 + 80), *(char **)(*(void *)&v45[8] + 48), *(char **)(*(void *)&v45[8] + 56), *(void *)(*(void *)&v45[8] + 56) - *(void *)(*(void *)&v45[8] + 48));
                    }
                    id v35 = [v10 decodeObjectOfClass:objc_opt_class() forKey:@"uuid"];
                    if (v35)
                    {
                      objc_opt_class();
                      if (objc_opt_isKindOfClass()) {
                        sub_10003ED78(&__str, (char *)[v35 UTF8String]);
                      }
                    }
                    std::string::operator=((std::string *)(v4 + 104), &__str);
                    [v10 finishDecoding];
                    id v18 = *(NSObject **)(v4 + 40);
                    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                    {
                      id v19 = [v17 count];
                      p_str = &__str;
                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)long long buf = 134218242;
                      *(void *)&uint8_t buf[4] = v19;
                      *(_WORD *)&unsigned char buf[12] = 2080;
                      *(void *)&buf[14] = p_str;
                      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I Loaded %lu bytes for %s", buf, 0x16u);
                    }
                    memset(buf, 0, 24);
                    sub_10005C928(buf, *(const void **)(*(void *)&v45[8] + 48), *(void *)(*(void *)&v45[8] + 56), *(void *)(*(void *)&v45[8] + 56) - *(void *)(*(void *)&v45[8] + 48));
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                      sub_10004FC84(&__p, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string __p = __str;
                    }
                    uint64_t v33 = v1[5];
                    if (!v33) {
                      sub_10007B600();
                    }
                    (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v33 + 48))(v33, buf, &__p);
                    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__p.__r_.__value_.__l.__data_);
                    }
                    if (*(void *)buf)
                    {
                      *(void *)&uint8_t buf[8] = *(void *)buf;
                      operator delete(*(void **)buf);
                    }

                    _Block_object_dispose(v45, 8);
                    if (v50)
                    {
                      unsigned int v51 = v50;
                      operator delete(v50);
                    }
                  }
                  else
                  {
                    [v10 finishDecoding];
                    memset(v45, 0, sizeof(v45));
                    uint64_t v46 = 0;
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                      sub_10004FC84(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                    }
                    else {
                      std::string __dst = __str;
                    }
                    uint64_t v31 = v1[5];
                    if (!v31) {
                      sub_10007B600();
                    }
                    (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v31 + 48))(v31, v45, &__dst);
                    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__dst.__r_.__value_.__l.__data_);
                    }
                    if (*(void *)v45)
                    {
                      *(void *)&v45[8] = *(void *)v45;
                      operator delete(*(void **)v45);
                    }
                    id v32 = *(NSObject **)(v4 + 40);
                    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)long long buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I Failed to decode (kTransferDeviceInfoKey)", buf, 2u);
                    }
                  }
                }
                else
                {
                  [v10 finishDecoding];
                  long long v28 = *(NSObject **)(v4 + 40);
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
                  {
                    unsigned int v29 = [v13 intValue];
                    *(_DWORD *)uint64_t v45 = 67109120;
                    *(_DWORD *)&v45[4] = v29;
                    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I Version mismatch [%d]", v45, 8u);
                  }
                  memset(v45, 0, sizeof(v45));
                  uint64_t v46 = 0;
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    sub_10004FC84(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string __dst = __str;
                  }
                  uint64_t v30 = v1[5];
                  if (!v30) {
                    sub_10007B600();
                  }
                  (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v30 + 48))(v30, v45, &__dst);
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__dst.__r_.__value_.__l.__data_);
                  }
                  if (*(void *)v45)
                  {
                    *(void *)&v45[8] = *(void *)v45;
                    operator delete(*(void **)v45);
                  }
                }
              }
              else
              {
                [v10 finishDecoding];
                memset(v45, 0, sizeof(v45));
                uint64_t v46 = 0;
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  sub_10004FC84(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
                }
                else {
                  std::string __dst = __str;
                }
                uint64_t v26 = v1[5];
                if (!v26) {
                  sub_10007B600();
                }
                (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v26 + 48))(v26, v45, &__dst);
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                if (*(void *)v45)
                {
                  *(void *)&v45[8] = *(void *)v45;
                  operator delete(*(void **)v45);
                }
                std::string v27 = *(NSObject **)(v4 + 40);
                if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I Version decoding failure", buf, 2u);
                }
              }
            }

LABEL_96:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
LABEL_98:
            sub_10004D2C8(v3);
            goto LABEL_99;
          }
        }
        else if (v8)
        {
          goto LABEL_8;
        }
        long long v22 = *(NSObject **)(v4 + 40);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v45 = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I No data", v45, 2u);
        }
        memset(v45, 0, sizeof(v45));
        uint64_t v46 = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          sub_10004FC84(&__dst, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string __dst = __str;
        }
        uint64_t v24 = v1[5];
        if (!v24) {
          sub_10007B600();
        }
        (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v24 + 48))(v24, v45, &__dst);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        if (*(void *)v45)
        {
          *(void *)&v45[8] = *(void *)v45;
          operator delete(*(void **)v45);
        }
        goto LABEL_96;
      }
    }
  }
  else
  {
    id v3 = 0;
  }
  memset(v45, 0, sizeof(v45));
  uint64_t v46 = 0;
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v21 = v1[5];
  if (!v21) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, uint8_t *, std::string *))(*(void *)v21 + 48))(v21, v45, &__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (*(void *)v45)
  {
    *(void *)&v45[8] = *(void *)v45;
    operator delete(*(void **)v45);
  }
  if (v3) {
    goto LABEL_98;
  }
LABEL_99:
  sub_10086601C((uint64_t *)&v37);
  return sub_100046B58((uint64_t *)&v36);
}

void sub_100865E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39)
{
  if (__p)
  {
    a39 = (uint64_t)__p;
    operator delete(__p);
  }

  _Block_object_dispose((const void *)(v45 - 176), 8);
  char v47 = *(void **)(v45 - 128);
  if (v47)
  {
    *(void *)(v45 - 120) = v47;
    operator delete(v47);
  }

  if (a37 < 0) {
    operator delete(a32);
  }
  sub_10004D2C8(v39);
  sub_10086601C(&a14);
  sub_100046B58(&a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_10086601C(uint64_t *result)
{
  uint64_t v1 = *result;
  *double result = 0;
  if (v1)
  {
    sub_100429EAC((void *)(v1 + 16));
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

__n128 sub_100866078(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_10086609C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1008660B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 8);
  id v19 = v3;
  unsigned __int8 v5 = [v3 intValue];
  unsigned __int8 v6 = v5;
  id v8 = (unsigned __int8 *)v4[7];
  unint64_t v7 = v4[8];
  if ((unint64_t)v8 >= v7)
  {
    unint64_t v10 = v4[6];
    id v11 = &v8[-v10];
    uint64_t v12 = (uint64_t)&v8[-v10 + 1];
    if (v12 < 0) {
      sub_10006A748();
    }
    unint64_t v13 = v7 - v10;
    if (2 * v13 > v12) {
      uint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v14 = v12;
    }
    if (v14) {
      uint64_t v15 = (unsigned __int8 *)operator new(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    id v16 = (char *)&v15[v14];
    v11[(void)v15] = v6;
    uint64_t v9 = (uint64_t)&v11[(void)v15 + 1];
    if (v8 == (unsigned __int8 *)v10)
    {
      uint64_t v15 = &v11[(void)v15];
    }
    else
    {
      uint64_t v17 = &v8[~v10];
      do
      {
        unsigned __int8 v18 = *--v8;
        (v17--)[(void)v15] = v18;
      }
      while (v8 != (unsigned __int8 *)v10);
      id v8 = (unsigned __int8 *)v4[6];
    }
    v4[6] = v15;
    v4[7] = v9;
    v4[8] = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *id v8 = v5;
    uint64_t v9 = (uint64_t)(v8 + 1);
  }
  v4[7] = v9;
}

void sub_1008661E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_1008661F8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unsigned __int8 v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)(v1 + 8);
  sub_100857B5C(&v9);
  id v3 = std::string::append(&v9, "com.apple.CommCenter.PendingTransfer.plist", 0x2AuLL);
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v11 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_10002FD9C(&v8, (const void **)v1);
  (*(void (**)(uint64_t, void **, const void **))(*(void *)v2 + 872))(v2, __p, &v8);
  sub_100030068(&v8);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  sub_100866338(&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_1008662E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  sub_100866338(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100866338(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      sub_10004D2C8(v2);
    }
    sub_100030068((const void **)v1);
    operator delete();
  }
  return result;
}

uint64_t sub_100866390(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    id v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100866410(void **a1)
{
  uint64_t v1 = *a1;
  long long v62 = a1;
  long long v63 = v1;
  uint64_t v2 = *v1;
  long long v65 = 0uLL;
  v66[0] = 0;
  uint64_t v3 = *(void *)(v2 + 48);
  sub_100857B5C(&v75);
  uint64_t v4 = std::string::append(&v75, "com.apple.CommCenter.PendingTransfer.plist", 0x2AuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  id v72 = (void *)v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v3 + 880))(&v67, v3, __p);
  id v6 = (id)v67;
  sub_100030068((const void **)&v67);
  if (SHIBYTE(v72) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v75.__r_.__value_.__l.__data_);
    if (v6) {
      goto LABEL_5;
    }
  }
  else if (v6)
  {
LABEL_5:
    id v64 = 0;
    id v7 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v6 error:&v64];
    id v8 = v64;
    std::string v9 = v8;
    if (!v7 || v8)
    {
      uint64_t v20 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "failed to create unarchiver for pending transfer plans", (uint8_t *)__p, 2u);
      }
      __p[0] = 0;
      __p[1] = 0;
      id v72 = 0;
      sub_10030B7CC(__p, v65, *((uint64_t *)&v65 + 1), 0x6F96F96F96F96F97 * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 5));
      uint64_t v21 = v1[4];
      if (!v21) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, void **))(*(void *)v21 + 48))(v21, __p);
      v75.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
      sub_10030AFC8((void ***)&v75);
      goto LABEL_28;
    }
    long long v61 = [v7 decodeObjectOfClass:objc_opt_class() forKey:@"version"];
    if (v61 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      if ([v61 intValue] == 3)
      {
        uint64_t v10 = objc_opt_class();
        uint64_t v11 = objc_opt_class();
        uint64_t v12 = objc_opt_class();
        uint64_t v59 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v10, v11, v12, objc_opt_class(), 0);
        unint64_t v13 = objc_msgSend(v7, "decodeObjectOfClasses:forKey:");
        size_t v14 = v61;
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v26 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            long long v57 = v13;
            id v53 = [@"pendingTransferInfo" description];
            id v54 = [v53 UTF8String];
            LODWORD(__p[0]) = 136315138;
            *(void **)((char *)__p + 4) = v54;
            _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "failed to decode object for key %s", (uint8_t *)__p, 0xCu);

            unint64_t v13 = v57;
          }
          [v7 finishDecoding];
          __p[0] = 0;
          __p[1] = 0;
          id v72 = 0;
          sub_10030B7CC(__p, v65, *((uint64_t *)&v65 + 1), 0x6F96F96F96F96F97 * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 5));
          uint64_t v27 = v1[4];
          if (!v27) {
            sub_10007B600();
          }
          goto LABEL_75;
        }
        id v15 = v13;
        uint64_t v16 = *((void *)&v65 + 1);
        uint64_t v17 = v65;
        while (v16 != v17)
          uint64_t v16 = sub_10030D10C(v16 - 1248);
        *((void *)&v65 + 1) = v17;
        id v58 = v15;
        long long v28 = +[NSArray typecast:v15];
        unsigned int v29 = v28;
        if (v28)
        {
          int64_t v55 = v28;
          id v56 = v13;
          unint64_t v30 = (unint64_t)[v28 count];
          uint64_t v31 = v65;
          if (0x6F96F96F96F96F97 * ((uint64_t)(v66[0] - v65) >> 5) < v30)
          {
            if (v30 >= 0x34834834834835) {
              sub_10006A748();
            }
            uint64_t v32 = *((void *)&v65 + 1);
            long long v74 = v66;
            __p[0] = sub_10030B8AC((uint64_t)v66, v30);
            __p[1] = (char *)__p[0] + v32 - v31;
            id v72 = __p[1];
            uint64_t v73 = (char *)__p[0] + 1248 * v33;
            sub_1003253D8((uint64_t *)&v65, __p);
            sub_1003254E4((uint64_t)__p);
          }
          long long v69 = 0u;
          long long v70 = 0u;
          long long v67 = 0u;
          long long v68 = 0u;
          id v34 = v29;
          id obj = v34;
          id v35 = [v34 countByEnumeratingWithState:&v67 objects:&v75 count:16];
          if (v35)
          {
            uint64_t v36 = *(void *)v68;
            while (2)
            {
              for (uint64_t i = 0; i != v35; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v68 != v36) {
                  objc_enumerationMutation(obj);
                }
                id v38 = *(id *)(*((void *)&v67 + 1) + 8 * i);
                bzero(__p, 0x4E0uLL);
                if ((sub_1013EF4A4((uint64_t)__p, (uint64_t)v38) & 1) == 0)
                {
                  sub_10030D10C((uint64_t)__p);

                  unsigned int v29 = v55;
                  unint64_t v13 = v56;
                  goto LABEL_56;
                }
                uint64_t v39 = *((void *)&v65 + 1);
                if (*((void *)&v65 + 1) >= v66[0])
                {
                  uint64_t v40 = sub_1008676E4((uint64_t *)&v65, (long long *)__p);
                }
                else
                {
                  sub_1003115D8(*((uint64_t *)&v65 + 1), (long long *)__p);
                  uint64_t v40 = v39 + 1248;
                }
                *((void *)&v65 + 1) = v40;
                sub_10030D10C((uint64_t)__p);
              }
              id v34 = obj;
              id v35 = [obj countByEnumeratingWithState:&v67 objects:&v75 count:16];
              if (v35) {
                continue;
              }
              break;
            }
          }

          id v41 = [obj count];
          BOOL v42 = v41 == (id)(0x6F96F96F96F96F97 * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 5));

          size_t v14 = v61;
          unint64_t v13 = v56;
          if (v42) {
            goto LABEL_74;
          }
        }
        else
        {
LABEL_56:
        }
        uint64_t v43 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          LOWORD(__p[0]) = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "failure to decode vector<cellplan::PendingTransferPlan>, trying with std::map", (uint8_t *)__p, 2u);
        }
        __p[1] = 0;
        id v72 = 0;
        __p[0] = &__p[1];
        if (sub_1008670AC((uint64_t **)__p, v58))
        {
          std::string::size_type v44 = (void **)__p[0];
          if (__p[0] != &__p[1])
          {
            do
            {
              std::string::operator=((std::string *)(v44 + 61), (const std::string *)(v44 + 4));
              uint64_t v45 = (long long *)(v44 + 7);
              uint64_t v46 = *((void *)&v65 + 1);
              if (*((void *)&v65 + 1) >= v66[0])
              {
                uint64_t v47 = sub_1008676E4((uint64_t *)&v65, v45);
              }
              else
              {
                sub_1003115D8(*((uint64_t *)&v65 + 1), v45);
                uint64_t v47 = v46 + 1248;
              }
              *((void *)&v65 + 1) = v47;
              uint64_t v48 = (void **)v44[1];
              if (v48)
              {
                do
                {
                  long long v49 = v48;
                  uint64_t v48 = (void **)*v48;
                }
                while (v48);
              }
              else
              {
                do
                {
                  long long v49 = (void **)v44[2];
                  BOOL v50 = *v49 == v44;
                  std::string::size_type v44 = v49;
                }
                while (!v50);
              }
              std::string::size_type v44 = v49;
            }
            while (v49 != &__p[1]);
          }
        }
        else
        {
          unsigned int v51 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v75.__r_.__value_.__l.__data_) = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "failure to decode map<std::string, cellplan::PendingTransferPlan>", (uint8_t *)&v75, 2u);
          }
        }
        sub_100867500((void *)__p[1]);
        size_t v14 = v61;
LABEL_74:
        [v7 finishDecoding];
        *(_OWORD *)std::string __p = v65;
        id v72 = (void *)v66[0];
        v66[0] = 0;
        long long v65 = 0uLL;
        uint64_t v27 = v1[4];
        if (!v27) {
          sub_10007B600();
        }
LABEL_75:
        (*(void (**)(uint64_t, void **))(*(void *)v27 + 48))(v27, __p);
        v75.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        sub_10030AFC8((void ***)&v75);

        goto LABEL_27;
      }
      uint64_t v25 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        unsigned int v52 = [v61 intValue];
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v52;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "version (%d) mismatch for unarchiver for pending transfer plans", (uint8_t *)__p, 8u);
      }
      [v7 finishDecoding];
      __p[0] = 0;
      __p[1] = 0;
      id v72 = 0;
      sub_10030B7CC(__p, v65, *((uint64_t *)&v65 + 1), 0x6F96F96F96F96F97 * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 5));
      uint64_t v23 = v1[4];
      if (!v23) {
        sub_10007B600();
      }
    }
    else
    {
      long long v22 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "invalid version for unarchiver for pending transfer plans", (uint8_t *)__p, 2u);
      }
      [v7 finishDecoding];
      __p[0] = 0;
      __p[1] = 0;
      id v72 = 0;
      sub_10030B7CC(__p, v65, *((uint64_t *)&v65 + 1), 0x6F96F96F96F96F97 * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 5));
      uint64_t v23 = v1[4];
      if (!v23) {
        sub_10007B600();
      }
    }
    size_t v14 = v61;
    (*(void (**)(uint64_t, void **))(*(void *)v23 + 48))(v23, __p);
    v75.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    sub_10030AFC8((void ***)&v75);
LABEL_27:

LABEL_28:
    goto LABEL_29;
  }
  unsigned __int8 v18 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "failed to read pending transfer plans data from file", (uint8_t *)__p, 2u);
  }
  __p[0] = 0;
  __p[1] = 0;
  id v72 = 0;
  sub_10030B7CC(__p, v65, *((uint64_t *)&v65 + 1), 0x6F96F96F96F96F97 * ((uint64_t)(*((void *)&v65 + 1) - v65) >> 5));
  uint64_t v19 = v1[4];
  if (!v19) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v19 + 48))(v19, __p);
  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  sub_10030AFC8((void ***)&v75);
LABEL_29:

  v75.__r_.__value_.__r.__words[0] = (std::string::size_type)&v65;
  sub_10030AFC8((void ***)&v75);
  sub_10086705C((uint64_t *)&v63);
  return sub_100046B58((uint64_t *)&v62);
}

void sub_100866E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  sub_1003254E4((uint64_t)&__p);

  a26 = &a23;
  sub_10030AFC8((void ***)&a26);
  sub_10086705C(&a21);
  sub_100046B58(&a20);
  _Unwind_Resume(a1);
}

uint64_t *sub_10086705C(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_10031C92C((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

BOOL sub_1008670AC(uint64_t **a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (char **)(a1 + 1);
  sub_100867500(a1[1]);
  *a1 = (uint64_t *)(a1 + 1);
  a1[2] = 0;
  a1[1] = 0;
  uint64_t v23 = v3;
  long long v5 = +[NSArray typecast:v3];
  long long v22 = v5;
  if (!v5)
  {
LABEL_34:
    BOOL v20 = 0;
    goto LABEL_35;
  }
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id obj = v5;
  id v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v27, v35, 16, v22);
  if (!v6) {
    goto LABEL_27;
  }
  uint64_t v26 = *(void *)v28;
  while (2)
  {
    id v7 = 0;
    id v25 = v6;
    do
    {
      if (*(void *)v28 != v26) {
        objc_enumerationMutation(obj);
      }
      id v8 = *(id *)(*((void *)&v27 + 1) + 8 * (void)v7);
      bzero(&__p, 0x4F8uLL);
      std::string v9 = +[NSDictionary typecast:v8];
      if (!v9 || (sub_1008675A4(&__p, @"key", v9) & 1) == 0)
      {
        id v11 = v9;
LABEL_30:

LABEL_31:
        sub_10030D10C((uint64_t)v34);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }

        goto LABEL_34;
      }
      uint64_t v10 = @"value";
      id v11 = v9;
      if ((objc_opt_respondsToSelector() & 1) == 0)
      {

        goto LABEL_30;
      }
      uint64_t v12 = [v11 objectForKey:@"value"];
      char v13 = sub_1013EF4A4((uint64_t)v34, (uint64_t)v12);

      if ((v13 & 1) == 0) {
        goto LABEL_31;
      }
      size_t v14 = *v4;
      id v15 = (char **)(a1 + 1);
      uint64_t v16 = (char **)(a1 + 1);
      if (!*v4) {
        goto LABEL_20;
      }
      id v15 = (char **)(a1 + 1);
      while (1)
      {
        while (1)
        {
          uint64_t v16 = (char **)v14;
          uint64_t v17 = v14 + 32;
          if ((sub_100046FE8(&__p, (void **)v14 + 4) & 0x80) == 0) {
            break;
          }
          size_t v14 = *v16;
          id v15 = v16;
          if (!*v16) {
            goto LABEL_20;
          }
        }
        if ((sub_100046FE8(v17, (void **)&__p.__r_.__value_.__l.__data_) & 0x80) == 0) {
          break;
        }
        id v15 = v16 + 1;
        size_t v14 = v16[1];
        if (!v14) {
          goto LABEL_20;
        }
      }
      if (!*v15)
      {
LABEL_20:
        uint64_t v32 = 0;
        unsigned __int8 v18 = (char *)operator new(0x518uLL);
        v31[0] = v18;
        v31[1] = a1 + 1;
        *(std::string *)(v18 + 32) = __p;
        memset(&__p, 0, sizeof(__p));
        sub_1003115D8((uint64_t)(v18 + 56), v34);
        LOBYTE(v32) = 1;
        *(void *)unsigned __int8 v18 = 0;
        *((void *)v18 + 1) = 0;
        *((void *)v18 + 2) = v16;
        *id v15 = v18;
        uint64_t v19 = (uint64_t *)**a1;
        if (v19)
        {
          *a1 = v19;
          unsigned __int8 v18 = *v15;
        }
        sub_100046C90(a1[1], (uint64_t *)v18);
        a1[2] = (uint64_t *)((char *)a1[2] + 1);
        v31[0] = 0;
        sub_10086768C((uint64_t)v31);
      }
      sub_10030D10C((uint64_t)v34);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }

      id v7 = (char *)v7 + 1;
    }
    while (v7 != v25);
    id v6 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (v6) {
      continue;
    }
    break;
  }
LABEL_27:

  BOOL v20 = [obj count] == a1[2];
LABEL_35:

  return v20;
}

void sub_10086741C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1008674C4(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100867500(void *a1)
{
  if (a1)
  {
    sub_100867500(*a1);
    sub_100867500(a1[1]);
    sub_100867554((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_100867554(uint64_t a1)
{
  sub_10030D10C(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_1008675A4(std::string *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (objc_opt_respondsToSelector())
  {
    id v7 = [v6 objectForKey:v5];
    if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      sub_10003ED78(a1, (char *)[v7 UTF8String]);
      uint64_t v8 = 1;
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_100867668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10086768C(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100867554((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t sub_1008676E4(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6F96F96F96F96F97 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x34834834834834) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6F96F96F96F96F97 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1A41A41A41A41ALL) {
    unint64_t v9 = 0x34834834834834;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10030B8AC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  size_t v14 = &v10[1248 * v4];
  uint64_t v16 = &v10[1248 * v9];
  sub_1003115D8((uint64_t)v14, a2);
  id v15 = v14 + 1248;
  sub_1003253D8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1003254E4((uint64_t)&v13);
  return v11;
}

void sub_1008677F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003254E4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100867804(void *a1)
{
  *a1 = off_101A11C20;
  sub_10085A594((uint64_t)(a1 + 1));
  return a1;
}

void sub_100867848(void *a1)
{
  *a1 = off_101A11C20;
  sub_10085A594((uint64_t)(a1 + 1));

  operator delete();
}

void *sub_1008678AC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xF0uLL);
  void *v2 = off_101A11C20;
  sub_100867DB0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100867900(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100867914(uint64_t a1, void *a2)
{
  *a2 = off_101A11C20;
  return sub_100867DB0((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_100867940(uint64_t a1)
{
  return sub_10085A594(a1 + 8);
}

void sub_100867948(void *a1)
{
  sub_10085A594((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100867984(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
  {
    id v6 = 0;
LABEL_10:
    sub_100426B48(a1 + 208, v3);
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  id v6 = std::__shared_weak_count::lock(v4);
  if (!v6 || !*(void *)(a1 + 8)) {
    goto LABEL_10;
  }
  uint64_t v7 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v3 & 1;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Upload to cloud complete: %d", buf, 8u);
  }
  if (v3)
  {
    *(void *)long long buf = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    sub_10005C928(buf, *(const void **)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 112) - *(void *)(a1 + 104));
    if (*(char *)(a1 + 151) < 0)
    {
      sub_10004FC84(__p, *(void **)(a1 + 128), *(void *)(a1 + 136));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 128);
      uint64_t v9 = *(void *)(a1 + 144);
    }
    sub_10085979C(v5, (uint64_t)buf, (uint64_t)__p);
  }
  sub_100426B48(a1 + 208, v3);
LABEL_14:
  if (v6) {
    sub_10004D2C8(v6);
  }
}

void sub_100867CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v33 = *(void **)(v31 - 96);
  if (v33)
  {
    *(void *)(v31 - 88) = v33;
    operator delete(v33);
  }
  sub_10004D2C8(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_100867D64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100867DA4()
{
}

uint64_t sub_100867DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  if (*(char *)(a2 + 47) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 24), *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_10005C928((void *)(a1 + 48), *(const void **)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 56) - *(void *)(a2 + 48));
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  sub_10005C928((void *)(a1 + 96), *(const void **)(a2 + 96), *(void *)(a2 + 104), *(void *)(a2 + 104) - *(void *)(a2 + 96));
  if (*(char *)(a2 + 143) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 120), *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v7;
  }
  if (*(char *)(a2 + 167) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 144), *(void **)(a2 + 144), *(void *)(a2 + 152));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v8;
  }
  long long v9 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v9;
  sub_10042ECAC(a1 + 200, a2 + 200);
  return a1;
}

void sub_100867F14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v5);
  }
  long long v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 104) = v7;
    operator delete(v7);
  }
  long long v8 = *(std::__shared_weak_count **)(v1 + 88);
  if (v8) {
    sub_10004D2C8(v8);
  }
  long long v9 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 56) = v9;
    operator delete(v9);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(v1 + 8);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100867FB0(void *a1, CFAbsoluteTime a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    CFDateRef v5 = CFDateCreate(kCFAllocatorDefault, a2);
    (*(void (**)(void, const __CFString *, CFDateRef, void, const CFStringRef, const CFStringRef))(*(void *)*a1 + 16))(*a1, @"kLastUploadTimestamp", v5, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    sub_10007CA64((const void **)&v5);
  }
  return v2 != 0;
}

void sub_10086805C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10007CA64((const void **)va);
  _Unwind_Resume(a1);
}

void *sub_100868070(void *a1)
{
  *a1 = off_101A11CA0;
  sub_1000605C0(a1 + 1);
  return a1;
}

void sub_1008680B4(void *a1)
{
  *a1 = off_101A11CA0;
  sub_1000605C0(a1 + 1);

  operator delete();
}

void *sub_100868118(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_101A11CA0;
  sub_100323990((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10086816C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100868180(uint64_t a1, void *a2)
{
  *a2 = off_101A11CA0;
  return sub_100323990((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_1008681AC(uint64_t a1)
{
  return sub_1000605C0((void *)(a1 + 8));
}

void sub_1008681B4(void *a1)
{
  sub_1000605C0(a1 + 1);

  operator delete(a1);
}

uint64_t sub_1008681F0(uint64_t a1, char *a2)
{
  return sub_10006074C(a1 + 8, *a2, 1);
}

uint64_t sub_100868200(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100868240()
{
}

uint64_t *sub_10086824C(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v11 = a1;
  uint64_t v12 = v1;
  uint64_t v2 = *v1;
  long long v15 = 0uLL;
  v16[0] = (std::__shared_weak_count *)"CellularPlanPersistenceControllerImpl";
  sub_1002BFAE4((char **)v16, (dispatch_object_t *)(v2 + 24), &v15);
  (***(void (****)(std::__shared_weak_count **__return_ptr))(v2 + 48))(v16);
  Registry::createRestModuleOneTimeUseMobileHelperConnection(&v13, (Registry *)v16[0]);
  ctu::RestModule::connect();
  if (v14) {
    sub_10004D2C8(v14);
  }
  if (v16[1]) {
    sub_10004D2C8(v16[1]);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v3
    || (uint64_t v4 = *(void *)(v2 + 64),
        uint64_t v5 = v15,
        uint64_t v6 = *(std::__shared_weak_count **)(v2 + 8),
        (long long v7 = std::__shared_weak_count::lock(v3)) == 0))
  {
    sub_100088B9C();
  }
  v16[0] = v6;
  v16[1] = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v7);
  long long v17 = v15;
  if (*((void *)&v15 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000DFC90((uint64_t)v18, (uint64_t)(v1 + 1));
  BOOL v20 = 0;
  long long v8 = (char *)operator new(0x48uLL);
  *(void *)long long v8 = off_101A11D20;
  long long v9 = v17;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)v16;
  v16[0] = 0;
  v16[1] = 0;
  *(_OWORD *)(v8 + 24) = v9;
  long long v17 = 0uLL;
  sub_100023950((uint64_t)(v8 + 40), (uint64_t)v18);
  BOOL v20 = v8;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 8))(v4, v5, v19);
  sub_100060644(v19);
  sub_100060644(v18);
  if (*((void *)&v17 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (v16[1]) {
    std::__shared_weak_count::__release_weak(v16[1]);
  }
  if (*((void *)&v15 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v15 + 1));
  }
  sub_10031EA88((uint64_t *)&v12);
  return sub_100046B58((uint64_t *)&v11);
}

void sub_100868468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  sub_100060644((void *)(v19 - 88));
  sub_100060644(v18);
  if (a18) {
    sub_10004D2C8(a18);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  sub_10031EA88(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void *sub_100868504(void *a1)
{
  *a1 = off_101A11D20;
  sub_100060644(a1 + 5);
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_100868560(void *a1)
{
  *a1 = off_101A11D20;
  sub_100060644(a1 + 5);
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

void *sub_1008685DC(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = off_101A11D20;
  sub_100868814(v2 + 1, v1);
  return v2;
}

void sub_100868630(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100868644(uint64_t a1, void *a2)
{
  *a2 = off_101A11D20;
  return sub_100868814(a2 + 1, (void *)(a1 + 8));
}

void sub_100868670(uint64_t a1)
{
}

void sub_100868678(void *a1)
{
  sub_100868898(a1 + 1);

  operator delete(a1);
}

void sub_1008686B4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3)
  {
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  int v4 = *a2;
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5 || (uint64_t v6 = *(void *)(a1 + 8)) == 0)
  {
LABEL_8:
    sub_1000607A8(a1 + 40, 0);
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  long long v7 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I isZoneExisted: %d", (uint8_t *)v8, 8u);
  }
  sub_1000607A8(a1 + 40, v4 != 0);
LABEL_9:
  sub_10004D2C8(v5);
}

void sub_1008687A8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1008687C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100868808()
{
}

void *sub_100868814(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000DFC90((uint64_t)(a1 + 4), (uint64_t)(a2 + 4));
  return a1;
}

void sub_100868874(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100868898(void *a1)
{
  sub_100060644(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t sub_1008688F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100868988(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void sub_100868A08(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v15[0] = (Registry *)"CellularPlanPersistenceControllerImpl";
  sub_1002BFAE4((char **)v15, (dispatch_object_t *)(v2 + 24), &v13);
  (***(void (****)(Registry **__return_ptr))(v2 + 48))(v15);
  Registry::createRestModuleOneTimeUseMobileHelperConnection(&v11, v15[0]);
  ctu::RestModule::connect();
  if (v12) {
    sub_10004D2C8(v12);
  }
  if (v15[1]) {
    sub_10004D2C8((std::__shared_weak_count *)v15[1]);
  }
  v15[0] = (Registry *)v2;
  v15[1] = v13;
  uint64_t v16 = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000C6BDC((uint64_t *)&v17, (uint64_t)(v1 + 1));
  sub_1008688F0((uint64_t)v20, (uint64_t)(v1 + 4));
  long long v22 = 0;
  uint64_t v3 = (char *)operator new(0x58uLL);
  uint64_t v4 = v3;
  *(void *)uint64_t v3 = off_101A11DA0;
  *(_OWORD *)(v3 + 8) = *(_OWORD *)v15;
  uint64_t v5 = v16;
  uint64_t v6 = (uint64_t)v17;
  v15[1] = 0;
  uint64_t v16 = 0;
  *((void *)v3 + 3) = v5;
  *((void *)v3 + 4) = v6;
  uint64_t v7 = v18;
  uint64_t v8 = v19;
  *((void *)v3 + 5) = v18;
  long long v9 = v3 + 40;
  *((void *)v3 + 6) = v8;
  if (v8)
  {
    *(void *)(v7 + 16) = v9;
    long long v17 = &v18;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    *((void *)v3 + 4) = v9;
  }
  sub_100868988((uint64_t)(v3 + 56), (uint64_t)v20);
  long long v22 = v4;
  uint64_t v23 = v2;
  sub_1000DFC90((uint64_t)&v24, (uint64_t)v21);
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 16);
  if (v10)
  {
    if (std::__shared_weak_count::lock(v10)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100868CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100868D94(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_100861348((void *)(v1 + 32));
    sub_10005CD2C(v1 + 8, *(char **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t sub_100868DF0(uint64_t a1)
{
  *(void *)a1 = off_101A11DA0;
  sub_100861348((void *)(a1 + 56));
  sub_10005CD2C(a1 + 32, *(char **)(a1 + 40));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100868E4C(uint64_t a1)
{
  *(void *)a1 = off_101A11DA0;
  sub_100861348((void *)(a1 + 56));
  sub_10005CD2C(a1 + 32, *(char **)(a1 + 40));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

void *sub_100868EC8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x58uLL);
  void *v2 = off_101A11DA0;
  sub_1008692D4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100868F1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100868F30(uint64_t a1, void *a2)
{
  *a2 = off_101A11DA0;
  return sub_1008692D4((uint64_t)(a2 + 1), a1 + 8);
}

void sub_100868F5C(uint64_t a1)
{
}

void sub_100868F64(void *a1)
{
  sub_10086936C((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100868FA0(void **a1, unsigned char *a2)
{
  uint64_t v3 = a1[1];
  if (*a2)
  {
    uint64_t v4 = v3[8];
    uint64_t v5 = a1[2];
    __p[0] = a1[1];
    uint64_t v6 = (std::__shared_weak_count *)v3[2];
    if (!v6 || (uint64_t v7 = (void *)v3[1], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
      sub_100088B9C();
    }
    __p[1] = v7;
    long long v17 = v8;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v8);
    long long v9 = (atomic_ullong *)a1[3];
    *(void *)&long long v18 = a1[2];
    *((void *)&v18 + 1) = v9;
    if (v9) {
      atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
    }
    sub_1000C6BDC((uint64_t *)&v19, (uint64_t)(a1 + 4));
    int v22 = 0;
    sub_1008688F0((uint64_t)v23, (uint64_t)(a1 + 7));
    id v25 = 0;
    uint64_t v10 = (char *)operator new(0x70uLL);
    uint64_t v11 = v10;
    *(void *)uint64_t v10 = off_101A11E10;
    *(_OWORD *)(v10 + 8) = *(_OWORD *)__p;
    *((void *)v10 + 3) = v17;
    __p[1] = 0;
    long long v17 = 0;
    *((_OWORD *)v10 + 2) = v18;
    long long v18 = 0uLL;
    uint64_t v12 = v20;
    *((void *)v10 + 6) = v19;
    *((void *)v10 + 7) = v12;
    uint64_t v13 = v10 + 56;
    uint64_t v14 = v21;
    *((void *)v10 + 8) = v21;
    if (v14)
    {
      *((void *)v12 + 2) = v13;
      uint64_t v19 = &v20;
      BOOL v20 = 0;
      uint64_t v21 = 0;
    }
    else
    {
      *((void *)v10 + 6) = v13;
    }
    *((_DWORD *)v10 + 18) = v22;
    sub_100868988((uint64_t)(v10 + 80), (uint64_t)v23);
    id v25 = v11;
    (*(void (**)(uint64_t, void *, void *))(*(void *)v4 + 24))(v4, v5, v24);
    sub_1003425A0(v24);
    sub_100861348(v23);
    sub_10005CD2C((uint64_t)&v19, v20);
    if (*((void *)&v18 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v18 + 1));
    }
    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    long long v15 = v3[5];
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Zone not existed, skip cleanup", (uint8_t *)__p, 2u);
    }
    sub_100058DB0(__p, "");
    sub_1008693C4((uint64_t)a1[10], 1, (uint64_t)__p, 0, 0);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100869210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100869288(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008692C8()
{
}

uint64_t sub_1008692D4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000C6BDC((uint64_t *)(a1 + 24), a2 + 24);
  sub_1008688F0(a1 + 48, a2 + 48);
  return a1;
}

void sub_100869340(_Unwind_Exception *a1)
{
  sub_10005CD2C(v2, *(char **)(v1 + 32));
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    sub_10004D2C8(v4);
  }
  _Unwind_Resume(a1);
}

void sub_10086936C(uint64_t a1)
{
  sub_100861348((void *)(a1 + 48));
  sub_10005CD2C(a1 + 24, *(char **)(a1 + 32));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

uint64_t sub_1008693C4(uint64_t a1, char a2, uint64_t a3, int a4, char a5)
{
  char v8 = a2;
  int v7 = a4;
  char v6 = a5;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, int *, char *))(*(void *)a1 + 48))(a1, &v8, a3, &v7, &v6);
}

uint64_t sub_100869424(uint64_t a1)
{
  *(void *)a1 = off_101A11E10;
  sub_100861348((void *)(a1 + 80));
  sub_10005CD2C(a1 + 48, *(char **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_10086948C(uint64_t a1)
{
  *(void *)a1 = off_101A11E10;
  sub_100861348((void *)(a1 + 80));
  sub_10005CD2C(a1 + 48, *(char **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

void *sub_100869514(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x70uLL);
  void *v2 = off_101A11E10;
  sub_100869A24((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100869568(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086957C(uint64_t a1, void *a2)
{
  *a2 = off_101A11E10;
  return sub_100869A24((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1008695A8(uint64_t a1)
{
}

void sub_1008695B0(void *a1)
{
  sub_100869AE8((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1008695EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v18 = v3;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v19 = v5;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  char v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    uint64_t v17 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    char v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      if (v9)
      {
        if ((_BYTE)v4)
        {
          uint64_t v21 = 0;
          uint64_t v22 = 0;
          uint64_t v23 = 0;
          sub_10085A628(&v21, v7, a1 + 48, v3, v17);
          uint64_t v10 = v21;
          unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v22 - (uint64_t)v21) >> 3);
          if (v11 == 1)
          {
            uint64_t v13 = *(NSObject **)(v7 + 40);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I One matching recordID/uuid, keep it.", buf, 2u);
              uint64_t v10 = v21;
            }
            if (*((char *)v10 + 23) < 0)
            {
              sub_10004FC84(buf, *(void **)v10, *((void *)v10 + 1));
            }
            else
            {
              long long v14 = *v10;
              uint64_t v26 = (std::__shared_weak_count *)*((void *)v10 + 2);
              *(_OWORD *)long long buf = v14;
            }
            sub_1008693C4(*(void *)(a1 + 104), 1, (uint64_t)buf, *(_DWORD *)(a1 + 72), 0);
          }
          else
          {
            if (v11)
            {
              long long v15 = *(std::__shared_weak_count **)(a1 + 40);
              v20[0] = *(void *)(a1 + 32);
              v20[1] = (uint64_t)v15;
              if (v15) {
                atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              *(void *)long long buf = v7;
              *(void *)&uint8_t buf[8] = v9;
              uint64_t v26 = v8;
              atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
              sub_1008688F0((uint64_t)v27, a1 + 80);
              long long v29 = 0;
              uint64_t v16 = (char *)operator new(0x40uLL);
              *(void *)uint64_t v16 = off_101A11E80;
              *(_OWORD *)(v16 + 8) = *(_OWORD *)buf;
              *((void *)v16 + 3) = v26;
              *(void *)&uint8_t buf[8] = 0;
              uint64_t v26 = 0;
              sub_100868988((uint64_t)(v16 + 32), (uint64_t)v27);
              long long v29 = v16;
              sub_10085AB64(v7, v20, (uint64_t)&v21, (uint64_t)v28);
              sub_1000605C0(v28);
              sub_100861348(v27);
              if (v26) {
                sub_10004D2C8(v26);
              }
              if (v15) {
                sub_10004D2C8(v15);
              }
              goto LABEL_29;
            }
            uint64_t v12 = *(NSObject **)(v7 + 40);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I No matching recordID/uuid, abort cleanup.", buf, 2u);
            }
            sub_100058DB0(buf, "");
            sub_1008693C4(*(void *)(a1 + 104), 1, (uint64_t)buf, *(_DWORD *)(a1 + 72), 0);
          }
          if (SHIBYTE(v26) < 0) {
            operator delete(*(void **)buf);
          }
LABEL_29:
          uint64_t v24 = &v21;
          sub_100047F64((void ***)&v24);
LABEL_30:
          sub_10004D2C8(v8);
          goto LABEL_31;
        }
      }
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_100058DB0(buf, "");
  sub_1008693C4(*(void *)(a1 + 104), 0, (uint64_t)buf, *(_DWORD *)(a1 + 72), 0);
  if (SHIBYTE(v26) < 0) {
    operator delete(*(void **)buf);
  }
  if (v8) {
    goto LABEL_30;
  }
LABEL_31:
  *(void *)long long buf = &v18;
  sub_10034251C((void ***)buf);
}

void sub_100869920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  a20 = &a17;
  sub_100047F64((void ***)&a20);
  sub_10004D2C8(v26);
  sub_10034251C((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1008699D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100869A18()
{
}

uint64_t sub_100869A24(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000C6BDC((uint64_t *)(a1 + 40), a2 + 40);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  sub_1008688F0(a1 + 72, a2 + 72);
  return a1;
}

void sub_100869AB0(_Unwind_Exception *a1)
{
  sub_10005CD2C(v2, *(char **)(v1 + 48));
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 32);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

void sub_100869AE8(uint64_t a1)
{
  sub_100861348((void *)(a1 + 72));
  sub_10005CD2C(a1 + 40, *(char **)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_100869B4C(void *a1)
{
  *a1 = off_101A11E80;
  sub_100861348(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100869B9C(void *a1)
{
  *a1 = off_101A11E80;
  sub_100861348(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

void *sub_100869C0C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = off_101A11E80;
  sub_100869E58((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100869C60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100869C74(uint64_t a1, void *a2)
{
  *a2 = off_101A11E80;
  return sub_100869E58((uint64_t)(a2 + 1), a1 + 8);
}

void sub_100869CA0(uint64_t a1)
{
}

void sub_100869CA8(void *a1)
{
  sub_100869EC0((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100869CE4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4 = *a2;
  int v5 = *a3;
  char v6 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p) = 67109376;
    HIDWORD(__p) = v4;
    __int16 v8 = 1024;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Remove records result: %d, ckModified: %d", (uint8_t *)&__p, 0xEu);
  }
  sub_100058DB0(&__p, "");
  sub_1008693C4(*(void *)(a1 + 56), v4 != 0, (uint64_t)&__p, 8, v5 != 0);
  if (v10 < 0) {
    operator delete(__p);
  }
}

void sub_100869DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100869E0C(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A11EE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100869E4C()
{
  return &off_101A11EE0;
}

uint64_t sub_100869E58(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1008688F0(a1 + 24, a2 + 24);
  return a1;
}

void sub_100869EA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100869EC0(uint64_t a1)
{
  sub_100861348((void *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

uint64_t sub_100869F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_100869F8C(void *a1)
{
  *a1 = off_101A11F20;
  sub_10085B4B4((uint64_t)(a1 + 1));
  return a1;
}

void sub_100869FD0(void *a1)
{
  *a1 = off_101A11F20;
  sub_10085B4B4((uint64_t)(a1 + 1));

  operator delete();
}

void *sub_10086A034(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x118uLL);
  void *v2 = off_101A11F20;
  sub_10086A540((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10086A088(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086A09C(uint64_t a1, void *a2)
{
  *a2 = off_101A11F20;
  return sub_10086A540((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_10086A0C8(uint64_t a1)
{
  return sub_10085B4B4(a1 + 8);
}

void sub_10086A0D0(void *a1)
{
  sub_10085B4B4((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_10086A10C(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = *(void **)(a1 + 8);
  int v5 = *(unsigned char **)(a1 + 256);
  char v6 = *(unsigned char **)(a1 + 264);
  size_t v7 = v6 - v5;
  if (v6 != v5)
  {
    __int16 v8 = (const void *)v4[10];
    uint64_t v9 = v4[11] - (void)v8;
    BOOL v10 = v9 && v9 == v7;
    if (!v10 || memcmp(v8, v5, v7))
    {
      sub_100CD990C((uint64_t *)(a1 + 64), (uint64_t)v18);
      *(void *)long long buf = v4;
      *(void *)&uint8_t buf[8] = 0;
      long long v20 = 0uLL;
      sub_10005C928(&buf[8], *(const void **)(a1 + 256), *(void *)(a1 + 264), *(void *)(a1 + 264) - *(void *)(a1 + 256));
      if (*(char *)(a1 + 191) < 0)
      {
        sub_10004FC84(&__p, *(void **)(a1 + 168), *(void *)(a1 + 176));
      }
      else
      {
        long long __p = *(_OWORD *)(a1 + 168);
        uint64_t v22 = *(void *)(a1 + 184);
      }
      long long v13 = *(_OWORD *)(a1 + 208);
      long long v23 = *(_OWORD *)(a1 + 192);
      long long v24 = v13;
      int v25 = v3;
      sub_10086A68C((uint64_t)v26, a1 + 224);
      long long v28 = 0;
      long long v14 = (char *)operator new(0x88uLL);
      *(void *)long long v14 = off_101A11F90;
      long long v15 = v20;
      *(_OWORD *)(v14 + 8) = *(_OWORD *)buf;
      *(_OWORD *)(v14 + 24) = v15;
      long long v20 = 0uLL;
      *(void *)&uint8_t buf[8] = 0;
      *(_OWORD *)(v14 + 40) = __p;
      *((void *)v14 + 7) = v22;
      long long __p = 0uLL;
      uint64_t v22 = 0;
      long long v16 = v24;
      *((_OWORD *)v14 + 4) = v23;
      *((_OWORD *)v14 + 5) = v16;
      *((_DWORD *)v14 + 24) = v25;
      sub_100869F0C((uint64_t)(v14 + 104), (uint64_t)v26);
      long long v28 = v14;
      long long v29 = v4;
      sub_1000C6BDC(&v30, (uint64_t)v18);
      sub_1008688F0((uint64_t)&v31, (uint64_t)v27);
      uint64_t v17 = (std::__shared_weak_count *)v4[2];
      if (v17)
      {
        if (std::__shared_weak_count::lock(v17)) {
          operator new();
        }
      }
      sub_100088B9C();
    }
  }
  unint64_t v11 = v4[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I No data change, abort uploading.", buf, 2u);
  }
  return sub_10086A724(*(void *)(a1 + 248), 0x1388000000000, v3, 0);
}

void sub_10086A458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10005CD2C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_10086A4F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10086A534()
{
}

uint64_t sub_10086A540(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 160;
  sub_10086144C(a1 + 8, a2 + 8);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_10004FC84((unsigned char *)v4, *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 160);
    *(void *)(v4 + 16) = *(void *)(a2 + 176);
    *(_OWORD *)uint64_t v4 = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = v6;
  sub_10086A68C(a1 + 216, a2 + 216);
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  sub_10005C928((void *)(a1 + 248), *(const void **)(a2 + 248), *(void *)(a2 + 256), *(void *)(a2 + 256) - *(void *)(a2 + 248));
  return a1;
}

void sub_10086A5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  sub_100330068(v10 + 136, *(void **)(v10 + 144));
  if (*(char *)(v10 + 135) < 0) {
    operator delete(*(void **)(v10 + 112));
  }
  if (*(unsigned char *)(v10 + 104))
  {
    if (*(char *)(v10 + 103) < 0) {
      operator delete(*(void **)(v10 + 80));
    }
  }
  sub_1000886C0(v10 + 56, *(char **)(v10 + 64));
  a10 = (void **)(v10 + 32);
  sub_10008A88C(&a10);
  sub_1000C56F4(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10086A68C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10086A724(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = a2;
  int v5 = a4;
  int v6 = a3;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, int *, int *))(*(void *)a1 + 48))(a1, &v7, &v6, &v5);
}

uint64_t sub_10086A780(uint64_t a1)
{
  *(void *)a1 = off_101A11F90;
  sub_10042AF74((void *)(a1 + 104));
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10086A7E4(uint64_t a1)
{
  *(void *)a1 = off_101A11F90;
  sub_10042AF74((void *)(a1 + 104));
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }

  operator delete();
}

void *sub_10086A868(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = operator new(0x88uLL);
  void *v2 = off_101A11F90;
  sub_10086AF68((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10086A8BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086A8D0(uint64_t a1, void *a2)
{
  *a2 = off_101A11F90;
  return sub_10086AF68((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

void sub_10086A8FC(uint64_t a1)
{
}

void sub_10086A904(void *a1)
{
  sub_10086B048((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_10086A940(uint64_t a1, unsigned __int8 *a2, std::string *a3, int *a4, unsigned __int8 *a5)
{
  int v6 = *a2;
  std::string v33 = *a3;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  a3->__r_.__value_.__r.__words[0] = 0;
  int v7 = *a4;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v6)
  {
    std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    int v10 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      int v16 = 2;
      goto LABEL_31;
    }
    char v11 = *(unsigned char *)(v8 + 127);
    if (v11 < 0) {
      uint64_t v12 = *(void *)(v8 + 112);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v8 + 127);
    }
    uint64_t v17 = (const void **)(v8 + 104);
    if (v12)
    {
      if (v11 >= 0) {
        uint64_t v18 = *(unsigned __int8 *)(v8 + 127);
      }
      else {
        uint64_t v18 = *(void *)(v8 + 112);
      }
      if (v18 != size)
      {
LABEL_29:
        uint64_t v22 = *(NSObject **)(v8 + 40);
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          goto LABEL_30;
        }
        if (v11 < 0) {
          uint64_t v31 = *v17;
        }
        else {
          uint64_t v31 = (const void *)(v8 + 104);
        }
LABEL_68:
        uint64_t v32 = (std::string *)v33.__r_.__value_.__r.__words[0];
        if (v10 >= 0) {
          uint64_t v32 = &v33;
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v31;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v32;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Clobering cached UUID: [%s] with UUID found on cloud: [%s]", buf, 0x16u);
        goto LABEL_30;
      }
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v19 = &v33;
      }
      else {
        long long v19 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      if ((*(unsigned char *)(v8 + 127) & 0x80) != 0)
      {
        uint64_t v31 = *v17;
        if (!memcmp(*v17, v19, *(void *)(v8 + 112))) {
          goto LABEL_30;
        }
        uint64_t v22 = *(NSObject **)(v8 + 40);
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
          goto LABEL_30;
        }
        goto LABEL_68;
      }
      if (*(unsigned char *)(v8 + 127))
      {
        long long v20 = (unsigned __int8 *)(v8 + 104);
        uint64_t v21 = *(unsigned __int8 *)(v8 + 127);
        while (*v20 == v19->__r_.__value_.__s.__data_[0])
        {
          ++v20;
          long long v19 = (std::string *)((char *)v19 + 1);
          if (!--v21) {
            goto LABEL_30;
          }
        }
        goto LABEL_29;
      }
    }
LABEL_30:
    std::string::operator=((std::string *)(v8 + 104), &v33);
    int v16 = 4;
LABEL_31:
    uint64_t v41 = 0;
    BOOL v42 = 0;
    *(void *)long long buf = "CellularPlanPersistenceControllerImpl";
    sub_1002BFAE4((char **)buf, (dispatch_object_t *)(v8 + 24), &v41);
    (***(void (****)(unsigned char *__return_ptr))(v8 + 48))(buf);
    Registry::createRestModuleOneTimeUseMobileHelperConnection(&v39, *(Registry **)buf);
    ctu::RestModule::connect();
    if (v40) {
      sub_10004D2C8(v40);
    }
    long long v23 = *(CodingUtility **)&buf[8];
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    if (*(char *)(v8 + 127) < 0) {
      uint64_t v24 = *(void *)(v8 + 112);
    }
    else {
      uint64_t v24 = *(unsigned __int8 *)(v8 + 127);
    }
    int v25 = v16 | v7;
    uint64_t v26 = (void **)(v8 + 104);
    if (v24)
    {
      long long v27 = v42;
      uint64_t v37 = v41;
      id v38 = v42;
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long __p = 0;
      id v35 = 0;
      uint64_t v36 = 0;
      sub_10005C928(&__p, *(const void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 24) - *(void *)(a1 + 16));
      sub_10086A68C((uint64_t)buf, a1 + 104);
      LODWORD(v44) = *(_DWORD *)(a1 + 96);
      HIDWORD(v44) = v25;
      uint64_t v46 = 0;
      long long v28 = operator new(0x30uLL);
      *long long v28 = off_101A12010;
      sub_100869F0C((uint64_t)(v28 + 1), (uint64_t)buf);
      v28[5] = v44;
      uint64_t v46 = v28;
      sub_100859FD4((void *)v8, &v37, (std::string *)(v8 + 104), (char **)&__p, (long long *)(a1 + 40), (uint64_t)v45);
LABEL_49:
      sub_100322EB8(v45);
      sub_10042AF74(buf);
      if (__p)
      {
        id v35 = __p;
        operator delete(__p);
      }
      if (v27) {
        sub_10004D2C8(v27);
      }
LABEL_57:
      if (v42) {
        sub_10004D2C8(v42);
      }
      goto LABEL_59;
    }
    CodingUtility::generateUUID((uint64_t *)buf, v23);
    if (*(char *)(v8 + 127) < 0) {
      operator delete(*v26);
    }
    *(_OWORD *)uint64_t v26 = *(_OWORD *)buf;
    *(void *)(v8 + 120) = *(void *)&buf[16];
    if (*(char *)(v8 + 127) < 0)
    {
      if (*(void *)(v8 + 112)) {
        goto LABEL_46;
      }
    }
    else if (*(unsigned char *)(v8 + 127))
    {
LABEL_46:
      long long v27 = v42;
      uint64_t v37 = v41;
      id v38 = v42;
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long __p = 0;
      id v35 = 0;
      uint64_t v36 = 0;
      sub_10005C928(&__p, *(const void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 24) - *(void *)(a1 + 16));
      sub_10086A68C((uint64_t)buf, a1 + 104);
      LODWORD(v44) = *(_DWORD *)(a1 + 96);
      HIDWORD(v44) = v25;
      uint64_t v46 = 0;
      long long v29 = operator new(0x30uLL);
      *long long v29 = off_101A12090;
      sub_100869F0C((uint64_t)(v29 + 1), (uint64_t)buf);
      v29[5] = v44;
      uint64_t v46 = v29;
      sub_100859FD4((void *)v8, &v37, (std::string *)(v8 + 104), (char **)&__p, (long long *)(a1 + 40), (uint64_t)v45);
      goto LABEL_49;
    }
    uint64_t v30 = *(NSObject **)(v8 + 40);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to generate uuid.", buf, 2u);
    }
    sub_10086A724(*(void *)(a1 + 128), 0x1388000000000, *(_DWORD *)(a1 + 96), v25);
    goto LABEL_57;
  }
  int v13 = *a5;
  long long v14 = *(NSObject **)(v8 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed cleanup, abort uploading.", buf, 2u);
  }
  if (v13) {
    uint64_t v15 = 0x1388000000100;
  }
  else {
    uint64_t v15 = 0x1388000000000;
  }
  sub_10086A724(*(void *)(a1 + 128), v15, *(_DWORD *)(a1 + 96), v7);
LABEL_59:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_10086AE64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25)
{
  if (a23) {
    sub_10004D2C8(a23);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086AF1C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10086AF5C()
{
}

uint64_t sub_10086AF68(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_10005C928((void *)(a1 + 8), (const void *)a2[1], a2[2], a2[2] - a2[1]);
  if (*((char *)a2 + 55) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 32), (void *)a2[4], a2[5]);
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 2);
    *(void *)(a1 + 48) = a2[6];
    *(_OWORD *)(a1 + 32) = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(a1 + 56) = v6;
  *(_DWORD *)(a1 + 88) = *((_DWORD *)a2 + 22);
  sub_10086A68C(a1 + 96, (uint64_t)(a2 + 12));
  return a1;
}

void sub_10086B014(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_10086B048(uint64_t a1)
{
  sub_10042AF74((void *)(a1 + 96));
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void *sub_10086B0A8(void *a1)
{
  *a1 = off_101A12010;
  sub_10042AF74(a1 + 1);
  return a1;
}

void sub_10086B0EC(void *a1)
{
  *a1 = off_101A12010;
  sub_10042AF74(a1 + 1);

  operator delete();
}

void *sub_10086B150(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  void *v3 = off_101A12010;
  sub_10086A68C((uint64_t)(v3 + 1), v2);
  v3[5] = *(void *)(a1 + 40);
  return v3;
}

void sub_10086B1B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086B1CC(uint64_t a1, void *a2)
{
  *a2 = off_101A12010;
  uint64_t result = sub_10086A68C((uint64_t)(a2 + 1), a1 + 8);
  a2[5] = *(void *)(a1 + 40);
  return result;
}

void *sub_10086B220(uint64_t a1)
{
  return sub_10042AF74((void *)(a1 + 8));
}

void sub_10086B228(void *a1)
{
  sub_10042AF74(a1 + 1);

  operator delete(a1);
}

uint64_t sub_10086B264(uint64_t a1, uint64_t *a2)
{
  return sub_10086A724(*(void *)(a1 + 32), *a2, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44));
}

uint64_t sub_10086B274(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10086B2B4()
{
}

void *sub_10086B2C0(void *a1)
{
  *a1 = off_101A12090;
  sub_10042AF74(a1 + 1);
  return a1;
}

void sub_10086B304(void *a1)
{
  *a1 = off_101A12090;
  sub_10042AF74(a1 + 1);

  operator delete();
}

void *sub_10086B368(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  void *v3 = off_101A12090;
  sub_10086A68C((uint64_t)(v3 + 1), v2);
  v3[5] = *(void *)(a1 + 40);
  return v3;
}

void sub_10086B3D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086B3E4(uint64_t a1, void *a2)
{
  *a2 = off_101A12090;
  uint64_t result = sub_10086A68C((uint64_t)(a2 + 1), a1 + 8);
  a2[5] = *(void *)(a1 + 40);
  return result;
}

void *sub_10086B438(uint64_t a1)
{
  return sub_10042AF74((void *)(a1 + 8));
}

void sub_10086B440(void *a1)
{
  sub_10042AF74(a1 + 1);

  operator delete(a1);
}

uint64_t sub_10086B47C(uint64_t a1, uint64_t *a2)
{
  return sub_10086A724(*(void *)(a1 + 32), *a2, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44));
}

uint64_t sub_10086B48C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10086B4CC()
{
}

uint64_t *sub_10086B4D8(void **a1)
{
  uint64_t v1 = *a1;
  char v11 = a1;
  uint64_t v12 = v1;
  uint64_t v2 = *v1;
  long long v15 = 0uLL;
  v16[0] = (std::__shared_weak_count *)"CellularPlanPersistenceControllerImpl";
  sub_1002BFAE4((char **)v16, (dispatch_object_t *)(v2 + 24), &v15);
  (***(void (****)(std::__shared_weak_count **__return_ptr))(v2 + 48))(v16);
  Registry::createRestModuleOneTimeUseMobileHelperConnection(&v13, (Registry *)v16[0]);
  ctu::RestModule::connect();
  if (v14) {
    sub_10004D2C8(v14);
  }
  if (v16[1]) {
    sub_10004D2C8(v16[1]);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v3
    || (uint64_t v4 = *(void *)(v2 + 64),
        uint64_t v5 = v15,
        long long v6 = *(std::__shared_weak_count **)(v2 + 8),
        (int v7 = std::__shared_weak_count::lock(v3)) == 0))
  {
    sub_100088B9C();
  }
  v16[0] = v6;
  v16[1] = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v7);
  long long v17 = v15;
  if (*((void *)&v15 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_10080EC60((uint64_t)v18, (uint64_t)(v1 + 1));
  long long v20 = 0;
  uint64_t v8 = (char *)operator new(0x48uLL);
  *(void *)uint64_t v8 = off_101A12130;
  long long v9 = v17;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)v16;
  v16[0] = 0;
  v16[1] = 0;
  *(_OWORD *)(v8 + 24) = v9;
  long long v17 = 0uLL;
  sub_10080E824((uint64_t)(v8 + 40), (uint64_t)v18);
  long long v20 = v8;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 24))(v4, v5, v19);
  sub_1003425A0(v19);
  sub_1003425A0(v18);
  if (*((void *)&v17 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (v16[1]) {
    std::__shared_weak_count::__release_weak(v16[1]);
  }
  if (*((void *)&v15 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v15 + 1));
  }
  sub_10086B790((uint64_t *)&v12);
  return sub_100046B58((uint64_t *)&v11);
}

void sub_10086B6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  sub_1003425A0((void *)(v19 - 88));
  sub_1003425A0(v18);
  if (a18) {
    sub_10004D2C8(a18);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  sub_10086B790(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10086B790(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_1003425A0((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

void *sub_10086B7E0(void *a1)
{
  *a1 = off_101A12130;
  sub_1003425A0(a1 + 5);
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_10086B83C(void *a1)
{
  *a1 = off_101A12130;
  sub_1003425A0(a1 + 5);
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

void *sub_10086B8B8(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = off_101A12130;
  sub_10086BBC8(v2 + 1, v1);
  return v2;
}

void sub_10086B90C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10086B920(uint64_t a1, void *a2)
{
  *a2 = off_101A12130;
  return sub_10086BBC8(a2 + 1, (void *)(a1 + 8));
}

void sub_10086B94C(uint64_t a1)
{
}

void sub_10086B954(void *a1)
{
  sub_10086BC4C(a1 + 1);

  operator delete(a1);
}

void sub_10086B990(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v12 = v3;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v13 = v5;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  long long v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    uint64_t v11 = v5;
    int v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = a1[1];
      if (v8)
      {
        long long v9 = *(NSObject **)(v8 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 134217984;
          *(void *)((char *)&buf + 4) = 0x6DB6DB6DB6DB6DB7 * ((v11 - v3) >> 3);
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I fetched %ld records from cloud", (uint8_t *)&buf, 0xCu);
        }
      }
    }
    *(void *)&long long v5 = v11;
  }
  else
  {
    int v7 = 0;
  }
  long long buf = v4;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_1003422D4((void *)&buf + 1, v3, v5, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - v3) >> 3));
  uint64_t v10 = a1[8];
  if (!v10) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v10 + 48))(v10, &buf);
  long long v14 = (void **)&buf + 1;
  sub_10034251C(&v14);
  if (v7) {
    sub_10004D2C8(v7);
  }
  *(void *)&long long buf = &v12;
  sub_10034251C((void ***)&buf);
}

void sub_10086BB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (v8) {
    sub_10004D2C8(v8);
  }
  sub_10034251C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10086BB7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10086BBBC()
{
}

void *sub_10086BBC8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10080EC60((uint64_t)(a1 + 4), (uint64_t)(a2 + 4));
  return a1;
}

void sub_10086BC28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_10086BC4C(void *a1)
{
  sub_1003425A0(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t *sub_10086BCA4(std::string::size_type **a1)
{
  uint64_t v1 = *a1;
  long long v23 = a1;
  uint64_t v24 = v1;
  std::string::size_type v2 = *v1;
  long long v27 = 0uLL;
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)"CellularPlanPersistenceControllerImpl";
  sub_1002BFAE4(&v28.__r_.__value_.__l.__data_, (dispatch_object_t *)(v2 + 24), &v27);
  (***(void (****)(std::string *__return_ptr))(v2 + 48))(&v28);
  Registry::createRestModuleOneTimeUseMobileHelperConnection(&v25, (Registry *)v28.__r_.__value_.__l.__data_);
  ctu::RestModule::connect();
  if (v26) {
    sub_10004D2C8(v26);
  }
  if (v28.__r_.__value_.__l.__size_) {
    sub_10004D2C8((std::__shared_weak_count *)v28.__r_.__value_.__l.__size_);
  }
  uint64_t v3 = (std::string::size_type *)v1[1];
  memset(&v28, 0, sizeof(v28));
  if (v3 != v1 + 2)
  {
    do
    {
      if (*((char *)v3 + 55) >= 0) {
        size_t v4 = *((unsigned __int8 *)v3 + 55);
      }
      else {
        size_t v4 = v3[5];
      }
      std::string::size_type v35 = 0;
      uint64_t v36 = 0;
      id v34 = 0;
      sub_1000C140C((uint64_t)&v34, v4 + 2);
      if (v36 >= 0) {
        long long v5 = (void **)&v34;
      }
      else {
        long long v5 = v34;
      }
      if (v4)
      {
        if (*((char *)v3 + 55) >= 0) {
          long long v6 = v3 + 4;
        }
        else {
          long long v6 = (const void *)v3[4];
        }
        memmove(v5, v6, v4);
      }
      strcpy((char *)v5 + v4, ", ");
      if (v36 >= 0) {
        int v7 = (const std::string::value_type *)&v34;
      }
      else {
        int v7 = (const std::string::value_type *)v34;
      }
      if (v36 >= 0) {
        std::string::size_type v8 = HIBYTE(v36);
      }
      else {
        std::string::size_type v8 = v35;
      }
      std::string::append(&v28, v7, v8);
      if (SHIBYTE(v36) < 0) {
        operator delete(v34);
      }
      long long v9 = (std::string::size_type *)v3[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          long long v9 = (std::string::size_type *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (std::string::size_type *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }
        while (!v11);
      }
      uint64_t v3 = v10;
    }
    while (v10 != v1 + 2);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v12 = *(void *)(v2 + 64);
  uint64_t v13 = v27;
  v28.__r_.__value_.__r.__words[0] = v2;
  long long v14 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v14 || (std::string::size_type v15 = *(void *)(v2 + 8), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
    sub_100088B9C();
  }
  v28.__r_.__value_.__l.__size_ = v15;
  v28.__r_.__value_.__r.__words[2] = (std::string::size_type)v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v16);
  long long v29 = v27;
  if (*((void *)&v27 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000C6BDC((uint64_t *)&v30, (uint64_t)(v1 + 1));
  sub_100323990((uint64_t)v33, (uint64_t)(v1 + 4));
  uint64_t v37 = 0;
  uint64_t v17 = (char *)operator new(0x68uLL);
  uint64_t v18 = v17;
  *(void *)uint64_t v17 = off_101A121B0;
  *(std::string *)(v17 + 8) = v28;
  *(_OWORD *)&v28.__r_.__value_.__r.__words[1] = 0uLL;
  *((_OWORD *)v17 + 2) = v29;
  long long v29 = 0uLL;
  uint64_t v19 = v31;
  *((void *)v17 + 6) = v30;
  *((void *)v17 + 7) = v19;
  long long v20 = v17 + 56;
  uint64_t v21 = v32;
  *((void *)v17 + 8) = v32;
  if (v21)
  {
    *((void *)v19 + 2) = v20;
    uint64_t v30 = &v31;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    *((void *)v17 + 6) = v20;
  }
  sub_100323910((uint64_t)(v17 + 72), (uint64_t)v33);
  uint64_t v37 = v18;
  (*(void (**)(uint64_t, uint64_t, void ***))(*(void *)v12 + 24))(v12, v13, &v34);
  sub_1003425A0(&v34);
  sub_1000605C0(v33);
  sub_10005CD2C((uint64_t)&v30, v31);
  if (*((void *)&v29 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v29 + 1));
  }
  if (v28.__r_.__value_.__r.__words[2]) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v28.__r_.__value_.__r.__words[2]);
  }
  if (*((void *)&v27 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v27 + 1));
  }
  sub_10086C128((uint64_t *)&v24);
  return sub_100046B58((uint64_t *)&v23);
}

void sub_10086C048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *__p, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,char *a23)
{
  sub_1003425A0((void *)(v25 - 120));
  sub_1000605C0(v24);
  sub_10005CD2C(v23, a23);
  if (a21) {
    sub_10004D2C8(a21);
  }
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  if (a15) {
    sub_10004D2C8(a15);
  }
  sub_10086C128(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10086C128(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_1000605C0((void *)(v1 + 32));
    sub_10005CD2C(v1 + 8, *(char **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t sub_10086C184(uint64_t a1)
{
  *(void *)a1 = off_101A121B0;
  sub_1000605C0((void *)(a1 + 72));
  sub_10005CD2C(a1 + 48, *(char **)(a1 + 56));
  std::string::size_type v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_10086C1EC(uint64_t a1)
{
  *(void *)a1 = off_101A121B0;
  sub_1000605C0((void *)(a1 + 72));
  sub_10005CD2C(a1 + 48, *(char **)(a1 + 56));
  std::string::size_type v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

void *sub_10086C274(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  std::string::size_type v2 = operator new(0x68uLL);
  void *v2 = off_101A121B0;
  sub_10086C668((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10086C2C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086C2DC(uint64_t a1, void *a2)
{
  *a2 = off_101A121B0;
  return sub_10086C668((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10086C308(uint64_t a1)
{
}

void sub_10086C310(void *a1)
{
  sub_10086C724((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_10086C34C(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v14 = v3;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v15 = v5;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  long long v6 = (std::__shared_weak_count *)a1[3];
  if (!v6)
  {
    std::string::size_type v8 = 0;
    goto LABEL_13;
  }
  uint64_t v13 = v5;
  uint64_t v7 = a1[1];
  std::string::size_type v8 = std::__shared_weak_count::lock(v6);
  if (!v8 || (uint64_t v9 = a1[2]) == 0 || !(_BYTE)v4)
  {
LABEL_13:
    sub_10006074C((uint64_t)(a1 + 9), 0, 0);
    if (!v8) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  sub_10085A628(&v17, v7, (uint64_t)(a1 + 6), v3, v13);
  if (v17 == v18)
  {
    uint64_t v12 = *(NSObject **)(v7 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "No matching recordID/uuid, abort deletion.", buf, 2u);
    }
    sub_10006074C((uint64_t)(a1 + 9), 0, 0);
  }
  else
  {
    uint64_t v10 = (std::__shared_weak_count *)a1[5];
    v16[0] = a1[4];
    v16[1] = (uint64_t)v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)long long buf = v7;
    *(void *)&uint8_t buf[8] = v9;
    uint64_t v22 = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_100323990((uint64_t)v23, (uint64_t)(a1 + 9));
    uint64_t v25 = 0;
    BOOL v11 = (char *)operator new(0x40uLL);
    *(void *)BOOL v11 = off_101A12220;
    *(_OWORD *)(v11 + 8) = *(_OWORD *)buf;
    *((void *)v11 + 3) = v22;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v22 = 0;
    sub_100323910((uint64_t)(v11 + 32), (uint64_t)v23);
    uint64_t v25 = v11;
    sub_10085AB64(v7, v16, (uint64_t)&v17, (uint64_t)v24);
    sub_1000605C0(v24);
    sub_1000605C0(v23);
    if (v22) {
      sub_10004D2C8(v22);
    }
    if (v10) {
      sub_10004D2C8(v10);
    }
  }
  long long v20 = &v17;
  sub_100047F64((void ***)&v20);
LABEL_19:
  sub_10004D2C8(v8);
LABEL_20:
  *(void *)long long buf = &v14;
  sub_10034251C((void ***)buf);
}

void sub_10086C598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, void ***a20)
{
  a20 = &a17;
  sub_100047F64((void ***)&a20);
  sub_10004D2C8(v20);
  sub_10034251C(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10086C61C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10086C65C()
{
}

uint64_t sub_10086C668(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000C6BDC((uint64_t *)(a1 + 40), a2 + 40);
  sub_100323990(a1 + 64, a2 + 64);
  return a1;
}

void sub_10086C6EC(_Unwind_Exception *a1)
{
  sub_10005CD2C(v2, *(char **)(v1 + 48));
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 32);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(a1);
}

void sub_10086C724(uint64_t a1)
{
  sub_1000605C0((void *)(a1 + 64));
  sub_10005CD2C(a1 + 40, *(char **)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_10086C788(void *a1)
{
  *a1 = off_101A12220;
  sub_1000605C0(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_10086C7D8(void *a1)
{
  *a1 = off_101A12220;
  sub_1000605C0(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

void *sub_10086C848(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = off_101A12220;
  sub_10086CA40((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10086C89C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086C8B0(uint64_t a1, void *a2)
{
  *a2 = off_101A12220;
  return sub_10086CA40((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10086C8DC(uint64_t a1)
{
}

void sub_10086C8E4(void *a1)
{
  sub_10086CAA8((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_10086C920(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4 = *a2;
  int v5 = *a3;
  long long v6 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109376;
    v8[1] = v4;
    __int16 v9 = 1024;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Remove records result: %d, CK modifiled: %d", (uint8_t *)v8, 0xEu);
  }
  return sub_10006074C(a1 + 32, v4 != 0, v5 != 0);
}

uint64_t sub_10086C9F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10086CA34()
{
}

uint64_t sub_10086CA40(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100323990(a1 + 24, a2 + 24);
  return a1;
}

void sub_10086CA90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10086CAA8(uint64_t a1)
{
  sub_1000605C0((void *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

uint64_t *sub_10086CAF4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v16 = a1;
  uint64_t v17 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = (unsigned __int16 **)(v1 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(v1 + 16);
  }
  if (v4 == 3)
  {
    if (v5 >= 0) {
      __int16 v9 = (unsigned __int16 *)(v1 + 8);
    }
    else {
      __int16 v9 = *v3;
    }
    int v10 = *v9;
    int v11 = *((unsigned __int8 *)v9 + 2);
    if (v10 == 27745 && v11 == 108) {
      goto LABEL_9;
    }
  }
  else if (v4 == 1)
  {
    long long v6 = v5 >= 0 ? (unsigned __int16 *)(v1 + 8) : *v3;
    if (*(unsigned __int8 *)v6 - 48 < 3)
    {
LABEL_9:
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      *(void *)long long buf = "CellularPlanPersistenceControllerImpl";
      sub_1002BFAE4((char **)buf, (dispatch_object_t *)(v2 + 24), &v22);
      (***(void (****)(uint8_t *__return_ptr))(v2 + 48))(buf);
      Registry::createRestModuleOneTimeUseMobileHelperConnection(&v20, *(Registry **)buf);
      ctu::RestModule::connect();
      if (v21) {
        sub_10004D2C8(v21);
      }
      if (v26) {
        sub_10004D2C8(v26);
      }
      memset(&v19, 0, sizeof(v19));
      std::string::operator=(&v19, (const std::string *)(v1 + 8));
      uint64_t v7 = *(void *)(v2 + 64);
      uint64_t v8 = v22;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&__p, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v19;
      }
      sub_1000DFC90((uint64_t)v24, v1 + 32);
      long long v27 = 0;
      uint64_t v14 = operator new(0x28uLL);
      *uint64_t v14 = off_101A122B0;
      sub_100023950((uint64_t)(v14 + 1), (uint64_t)v24);
      long long v27 = v14;
      (*(void (**)(uint64_t, uint64_t, std::string *, uint8_t *))(*(void *)v7 + 48))(v7, v8, &__p, buf);
      sub_100060644(buf);
      sub_100060644(v24);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (v23) {
        sub_10004D2C8(v23);
      }
      goto LABEL_32;
    }
  }
  uint64_t v13 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "No matching zone, abort deletion.", buf, 2u);
  }
  sub_1000607A8(v1 + 32, 0);
LABEL_32:
  sub_10012C844(&v17);
  return sub_100046B58((uint64_t *)&v16);
}

void sub_10086CDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27)
{
  sub_100060644((void *)(v27 - 80));
  sub_100060644(&a27);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a26) {
    sub_10004D2C8(a26);
  }
  sub_10012C844(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void *sub_10086CE48(void *a1)
{
  *a1 = off_101A122B0;
  sub_100060644(a1 + 1);
  return a1;
}

void sub_10086CE8C(void *a1)
{
  *a1 = off_101A122B0;
  sub_100060644(a1 + 1);

  operator delete();
}

void *sub_10086CEF0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_101A122B0;
  sub_1000DFC90((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10086CF44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10086CF58(uint64_t a1, void *a2)
{
  *a2 = off_101A122B0;
  return sub_1000DFC90((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_10086CF84(uint64_t a1)
{
  return sub_100060644((void *)(a1 + 8));
}

void sub_10086CF8C(void *a1)
{
  sub_100060644(a1 + 1);

  operator delete(a1);
}

uint64_t sub_10086CFC8(uint64_t a1, char *a2)
{
  return sub_1000607A8(a1 + 8, *a2);
}

uint64_t sub_10086CFD4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10086D014()
{
}

uint64_t *sub_10086D020(uint64_t *a1)
{
  long long v15 = a1;
  uint64_t v16 = (int **)*a1;
  uint64_t v1 = *v16;
  if (v16[2] == v16[1])
  {
    uint64_t v11 = *((void *)v1 + 6);
    sub_100857B5C(&v20);
    uint64_t v12 = std::string::append(&v20, "com.apple.CommCenter.SubscriptionDetails.plist", 0x2EuLL);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    std::string::size_type v22 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long buf = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::string v19 = 0;
    (*(void (**)(uint64_t, uint8_t *, void **))(*(void *)v11 + 872))(v11, buf, &v19);
    sub_100030068((const void **)&v19);
    if (SHIBYTE(v22) < 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v19 = 0;
    sub_100CCED0C(v16 + 1, &v19);
    id v2 = objc_msgSend(objc_alloc((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1, v15);
    uint64_t v3 = +[NSNumber numberWithInt:3];
    [v2 encodeObject:v3 forKey:@"version"];

    uint64_t v4 = v19;
    [v2 encodeObject:v4 forKey:@"kSubscriptionDetailsKey"];
    id v5 = [v2 encodedData];
    CFTypeRef cf = v5;
    if (v5) {
      CFRetain(v5);
    }
    long long v6 = *((void *)v1 + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [v4 count];
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I saveSubscriptionDetails: Saved [%lu] subscription info", buf, 0xCu);
    }
    uint64_t v8 = *((void *)v1 + 6);
    sub_100857B5C(&v20);
    __int16 v9 = std::string::append(&v20, "com.apple.CommCenter.SubscriptionDetails.plist", 0x2EuLL);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v22 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long buf = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    CFTypeRef v17 = cf;
    if (cf) {
      CFRetain(cf);
    }
    (*(void (**)(uint64_t, uint8_t *, CFTypeRef *))(*(void *)v8 + 872))(v8, buf, &v17);
    sub_100030068(&v17);
    if (SHIBYTE(v22) < 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    sub_100030068(&cf);

    sub_100044D00((const void **)&v19);
  }
  sub_100318400((uint64_t *)&v16);
  return sub_100046B58((uint64_t *)&v15);
}

void sub_10086D2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, int a14, const void *a15, const void *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_100030068(&a15);

  sub_100044D00(&a16);
  sub_100318400(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10086D3E0(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v30 = a1;
  uint64_t v31 = v1;
  uint64_t v2 = *v1;
  long long v35 = 0uLL;
  std::string::size_type v36 = 0;
  uint64_t v3 = *(void *)(v2 + 48);
  sub_100857B5C(&v33);
  uint64_t v4 = std::string::append(&v33, "com.apple.CommCenter.SubscriptionDetails.plist", 0x2EuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v38 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v3 + 880))(&v34, v3, __p);
  long long v6 = v34;
  sub_100030068((const void **)&v34);
  if (SHIBYTE(v38) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v33.__r_.__value_.__l.__data_);
    if (v6)
    {
LABEL_5:
      id v7 = objc_alloc((Class)NSKeyedUnarchiver);
      id v34 = 0;
      id v8 = [v7 initForReadingFromData:v6 error:&v34];
      __int16 v9 = v34;
      long long v10 = v9;
      if (!v8 || v9)
      {
        std::string v20 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I loadSubscriptionDetails: No unarchiver or error", (uint8_t *)__p, 2u);
        }
        __p[0] = 0;
        __p[1] = 0;
        std::string::size_type v38 = 0;
        sub_10030F964(__p, v35, *((uint64_t *)&v35 + 1), 0x8F5C28F5C28F5C29 * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
        uint64_t v21 = v1[4];
        if (!v21) {
          sub_10007B600();
        }
        (*(void (**)(uint64_t, void **))(*(void *)v21 + 48))(v21, __p);
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        sub_100310018((void ***)&v33);
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = [v8 decodeObjectOfClass:objc_opt_class() forKey:@"version"];
        if (v11 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          if ([v11 intValue] == 3)
          {
            uint64_t v12 = objc_opt_class();
            long long v13 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v12, objc_opt_class(), 0);
            uint64_t v14 = [v8 decodeObjectOfClasses:v13 forKey:@"kSubscriptionDetailsKey"];

            if (v14 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              [v8 finishDecoding];
              long long v15 = *(NSObject **)(v2 + 40);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                id v16 = [v14 count];
                LODWORD(__p[0]) = 134217984;
                *(void **)((char *)__p + 4) = v16;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I loadSubscriptionDetails: Loaded %lu items", (uint8_t *)__p, 0xCu);
              }
              uint64_t v32 = v14;
              CFRetain(v14);
              sub_100CD02C4((id *)&v32, (uint64_t *)__p);
              sub_10086DD18((void **)&v35);
              long long v35 = *(_OWORD *)__p;
              std::string::size_type v36 = v38;
              __p[1] = 0;
              std::string::size_type v38 = 0;
              __p[0] = 0;
              v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              sub_100310018((void ***)&v33);
              sub_100044D00(&v32);
              __p[1] = 0;
              std::string::size_type v38 = 0;
              __p[0] = 0;
              sub_10030F964(__p, v35, *((uint64_t *)&v35 + 1), 0x8F5C28F5C28F5C29 * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
              uint64_t v17 = v1[4];
              if (!v17) {
                sub_10007B600();
              }
              (*(void (**)(uint64_t, void **))(*(void *)v17 + 48))(v17, __p);
              v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              sub_100310018((void ***)&v33);
            }
            else
            {
              [v8 finishDecoding];
              __p[0] = 0;
              __p[1] = 0;
              std::string::size_type v38 = 0;
              sub_10030F964(__p, v35, *((uint64_t *)&v35 + 1), 0x8F5C28F5C28F5C29 * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
              uint64_t v27 = v1[4];
              if (!v27) {
                sub_10007B600();
              }
              (*(void (**)(uint64_t, void **))(*(void *)v27 + 48))(v27, __p);
              v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
              sub_100310018((void ***)&v33);
              std::string v28 = *(NSObject **)(v2 + 40);
              if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v33.__r_.__value_.__l.__data_) = 0;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I loadSubscriptionDetails: Failed to decode (CTCellularPlanSubscription)", (uint8_t *)&v33, 2u);
              }
            }
          }
          else
          {
            [v8 finishDecoding];
            uint64_t v24 = *(NSObject **)(v2 + 40);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v25 = [v11 intValue];
              LODWORD(__p[0]) = 67109120;
              HIDWORD(__p[0]) = v25;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I loadSubscriptionDetails: Version mismatch [%d]", (uint8_t *)__p, 8u);
            }
            __p[0] = 0;
            __p[1] = 0;
            std::string::size_type v38 = 0;
            sub_10030F964(__p, v35, *((uint64_t *)&v35 + 1), 0x8F5C28F5C28F5C29 * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
            uint64_t v26 = v1[4];
            if (!v26) {
              sub_10007B600();
            }
            (*(void (**)(uint64_t, void **))(*(void *)v26 + 48))(v26, __p);
            v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
            sub_100310018((void ***)&v33);
          }
        }
        else
        {
          [v8 finishDecoding];
          __p[0] = 0;
          __p[1] = 0;
          std::string::size_type v38 = 0;
          sub_10030F964(__p, v35, *((uint64_t *)&v35 + 1), 0x8F5C28F5C28F5C29 * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
          uint64_t v22 = v1[4];
          if (!v22) {
            sub_10007B600();
          }
          (*(void (**)(uint64_t, void **))(*(void *)v22 + 48))(v22, __p);
          v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
          sub_100310018((void ***)&v33);
          uint64_t v23 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v33.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I loadSubscriptionDetails: Version decoding failure", (uint8_t *)&v33, 2u);
          }
        }
      }

      goto LABEL_37;
    }
  }
  else if (v6)
  {
    goto LABEL_5;
  }
  uint64_t v18 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I loadSubscriptionDetails: No data", (uint8_t *)__p, 2u);
  }
  __p[0] = 0;
  __p[1] = 0;
  std::string::size_type v38 = 0;
  sub_10030F964(__p, v35, *((uint64_t *)&v35 + 1), 0x8F5C28F5C28F5C29 * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
  uint64_t v19 = v1[4];
  if (!v19) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v19 + 48))(v19, __p);
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  sub_100310018((void ***)&v33);
LABEL_37:

  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  sub_100310018((void ***)&v33);
  sub_10086DCC8((uint64_t *)&v31);
  return sub_100046B58((uint64_t *)&v30);
}

void sub_10086DB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14, char a15, char a16, char *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  a17 = &a24;
  sub_100310018((void ***)&a17);
  sub_10086DCC8(&a13);
  sub_100046B58(&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_10086DCC8(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_100318460((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

void sub_10086DD18(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 200;
        sub_10030FF90(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *sub_10086DD80(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v19 = a1;
  std::string v20 = v1;
  uint64_t v2 = *v1;
  if (v1[2] == v1[1])
  {
    uint64_t v15 = *(void *)(v2 + 48);
    sub_100857B5C(&v23);
    id v16 = std::string::append(&v23, "com.apple.CommCenter.EntitlementSubscriptionDetails.plist", 0x39uLL);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(void *)&uint8_t buf[16] = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)long long buf = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    CFTypeRef cf = 0;
    (*(void (**)(uint64_t, unsigned char *, CFTypeRef *))(*(void *)v15 + 872))(v15, buf, &cf);
    sub_100030068(&cf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    id v3 = [objc_alloc((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
    uint64_t v4 = +[NSNumber numberWithInt:3];
    [v3 encodeObject:v4 forKey:@"version"];

    long long v5 = objc_opt_new();
    long long v6 = (std::string *)v1[1];
    for (uint64_t i = (std::string *)v1[2]; v6 != i; v6 += 8)
    {
      int v29 = 0;
      uint64_t v31 = 0;
      uint64_t v28 = 0;
      *(void *)long long buf = &off_1019ED3A0;
      int v30 = 0;
      *(_OWORD *)&uint8_t buf[8] = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      uint64_t v27 = 0;
      sub_100879964(v6, (uint64_t)buf);
      memset(&v23, 0, sizeof(v23));
      PB::Writer::Writer((PB::Writer *)&v23);
      sub_1005E9F60((uint64_t)buf, (PB::Writer *)&v23);
      CFTypeRef cf = 0;
      CFTypeRef cf = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)v23.__r_.__value_.__l.__size_, v23.__r_.__value_.__r.__words[0] - v23.__r_.__value_.__l.__size_);
      id v8 = (id)cf;
      [v5 addObject:v8];

      sub_100030068(&cf);
      PB::Writer::~Writer((PB::Writer *)&v23);
      sub_1005E94CC((PB::Base *)buf);
    }
    [v3 encodeObject:v5 forKey:@"kEntitlementSubscriptionsKey"];
    id v9 = [v3 encodedData];
    CFTypeRef cf = v9;
    if (v9) {
      CFRetain(v9);
    }
    long long v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = [v5 count];
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I saveEntitlementSubscriptionDetails: Saved [%lu] subscription info", buf, 0xCu);
    }
    uint64_t v12 = *(void *)(v2 + 48);
    sub_100857B5C(&v23);
    long long v13 = std::string::append(&v23, "com.apple.CommCenter.EntitlementSubscriptionDetails.plist", 0x39uLL);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(void *)&uint8_t buf[16] = *((void *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)long long buf = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    CFTypeRef v21 = cf;
    if (cf) {
      CFRetain(cf);
    }
    (*(void (**)(uint64_t, unsigned char *, CFTypeRef *))(*(void *)v12 + 872))(v12, buf, &v21);
    sub_100030068(&v21);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    sub_100030068(&cf);
  }
  sub_10086E244((uint64_t *)&v20);
  return sub_100046B58((uint64_t *)&v19);
}

void sub_10086E128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, __int16 a12, char a13, char a14, int a15, const void *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_100030068(&a16);

  sub_10086E244(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10086E244(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 8);
    sub_10023FDC8(&v2);
    operator delete();
  }
  return result;
}

uint64_t *sub_10086E2A4(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v45 = a1;
  uint64_t v46 = v1;
  uint64_t v2 = *v1;
  uint64_t v62 = 0;
  unint64_t v63 = 0;
  unint64_t v64 = 0;
  uint64_t v3 = *(void *)(v2 + 48);
  sub_100857B5C(&v78);
  uint64_t v4 = std::string::append(&v78, "com.apple.CommCenter.EntitlementSubscriptionDetails.plist", 0x39uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  *(void *)&long long v67 = *((void *)&v4->__r_.__value_.__l + 2);
  long long __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void ***__return_ptr, uint64_t, long long *))(*(void *)v3 + 880))(&v47, v3, &__p);
  long long v6 = v47;
  sub_100030068((const void **)&v47);
  if (SBYTE7(v67) < 0) {
    operator delete((void *)__p);
  }
  if ((SHIBYTE(v78.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v6) {
      goto LABEL_5;
    }
LABEL_42:
    long long v25 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I loadEntitlementSubscriptionDetails: No data", (uint8_t *)&__p, 2u);
    }
    long long __p = 0uLL;
    *(void *)&long long v67 = 0;
    sub_1005E6A50(&__p, v62, v63, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v62) >> 6));
    uint64_t v26 = v1[4];
    if (!v26) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, long long *))(*(void *)v26 + 48))(v26, &__p);
    v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_10023FDC8((void ***)&v78);
    goto LABEL_66;
  }
  operator delete(v78.__r_.__value_.__l.__data_);
  if (!v6) {
    goto LABEL_42;
  }
LABEL_5:
  id v7 = objc_alloc((Class)NSKeyedUnarchiver);
  id v61 = 0;
  id v8 = [v7 initForReadingFromData:v6 error:&v61];
  id v9 = v61;
  uint64_t v44 = v9;
  if (!v8 || v9)
  {
    uint64_t v27 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I loadEntitlementSubscriptionDetails: No unarchiver or error", (uint8_t *)&__p, 2u);
    }
    long long __p = 0uLL;
    *(void *)&long long v67 = 0;
    sub_1005E6A50(&__p, v62, v63, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v62) >> 6));
    uint64_t v28 = v1[4];
    if (!v28) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, long long *))(*(void *)v28 + 48))(v28, &__p);
    v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    sub_10023FDC8((void ***)&v78);
    long long v10 = 0;
  }
  else
  {
    long long v10 = [v8 decodeObjectOfClass:objc_opt_class() forKey:@"version"];
    if (v10 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      if ([v10 intValue] == 3)
      {
        uint64_t v43 = v6;
        uint64_t v11 = objc_opt_class();
        uint64_t v12 = objc_opt_class();
        long long v13 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v11, v12, objc_opt_class(), 0);
        uint64_t v39 = [v8 decodeObjectOfClasses:v13 forKey:@"kEntitlementSubscriptionsKey"];

        long long v14 = v39;
        if (v39 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          long long v59 = 0u;
          long long v60 = 0u;
          long long v57 = 0u;
          long long v58 = 0u;
          id obj = v39;
          id v15 = [obj countByEnumeratingWithState:&v57 objects:&v78 count:16];
          if (v15)
          {
            uint64_t v42 = *(void *)v58;
            while (2)
            {
              id v16 = 0;
              id v41 = v15;
              do
              {
                if (*(void *)v58 != v42) {
                  objc_enumerationMutation(obj);
                }
                CFDataRef v17 = (const __CFData *)*(id *)(*((void *)&v57 + 1) + 8 * (void)v16);
                memset(v56, 0, sizeof(v56));
                BytePtr = CFDataGetBytePtr(v17);
                CFIndex Length = CFDataGetLength(v17);
                PB::Reader::Reader((PB::Reader *)v56, BytePtr, Length);
                int v53 = 0;
                uint64_t v55 = 0;
                uint64_t v52 = 0;
                uint64_t v47 = (void **)&off_1019ED3A0;
                int v54 = 0;
                long long v48 = 0u;
                long long v49 = 0u;
                long long v50 = 0u;
                uint64_t v51 = 0;
                long long v6 = v43;
                if ((sub_1005E9978((uint64_t)&v47, (PB::Reader *)v56) & 1) == 0)
                {
                  std::string::size_type v36 = *(NSObject **)(v2 + 40);
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
                  {
                    LOWORD(__p) = 0;
                    _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Invalid request message format", (uint8_t *)&__p, 2u);
                  }
                  long long __p = 0uLL;
                  *(void *)&long long v67 = 0;
                  sub_1005E6A50(&__p, v62, v63, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v62) >> 6));
                  uint64_t v37 = v1[4];
                  if (!v37) {
                    sub_10007B600();
                  }
                  (*(void (**)(uint64_t, long long *))(*(void *)v37 + 48))(v37, &__p);
                  p_p = (void **)&__p;
                  sub_10023FDC8(&p_p);
                  sub_1005E94CC((PB::Base *)&v47);

                  long long v14 = v39;
                  goto LABEL_64;
                }
                long long v76 = 0u;
                long long v77 = 0u;
                long long v74 = 0u;
                long long v75 = 0u;
                long long v72 = 0u;
                long long v73 = 0u;
                long long v70 = 0u;
                long long v71 = 0u;
                long long v68 = 0u;
                long long v69 = 0u;
                long long __p = 0u;
                long long v67 = 0u;
                BYTE9(v77) = 1;
                sub_100879BA0((uint64_t)&v47, (uint64_t)&__p);
                unint64_t v20 = v63;
                if (v63 >= v64)
                {
                  uint64_t v21 = sub_1003DBC84(&v62, (uint64_t)&__p);
                }
                else
                {
                  sub_10023FB90(v63, (uint64_t)&__p);
                  uint64_t v21 = v20 + 192;
                }
                long long v6 = v43;
                unint64_t v63 = v21;
                if (SBYTE7(v77) < 0) {
                  operator delete((void *)v76);
                }
                if (SHIBYTE(v75) < 0) {
                  operator delete(*((void **)&v74 + 1));
                }
                if (SBYTE7(v74) < 0) {
                  operator delete((void *)v73);
                }
                if (SHIBYTE(v72) < 0) {
                  operator delete(*((void **)&v71 + 1));
                }
                if (SBYTE7(v71) < 0) {
                  operator delete((void *)v70);
                }
                if (SBYTE7(v69) < 0) {
                  operator delete((void *)v68);
                }
                if (SHIBYTE(v67) < 0) {
                  operator delete(*((void **)&__p + 1));
                }
                sub_1005E94CC((PB::Base *)&v47);

                id v16 = (char *)v16 + 1;
              }
              while (v41 != v16);
              id v15 = [obj countByEnumeratingWithState:&v57 objects:&v78 count:16];
              if (v15) {
                continue;
              }
              break;
            }
          }

          long long v14 = v39;
          [v8 finishDecoding];
          uint64_t v22 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            id v23 = [obj count];
            LODWORD(__p) = 134217984;
            *(void *)((char *)&__p + 4) = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I loadEntitlementSubscriptionDetails: Loaded %lu items", (uint8_t *)&__p, 0xCu);
          }
          long long __p = 0uLL;
          *(void *)&long long v67 = 0;
          sub_1005E6A50(&__p, v62, v63, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v62) >> 6));
          uint64_t v24 = v1[4];
          if (!v24) {
            sub_10007B600();
          }
          (*(void (**)(uint64_t, long long *))(*(void *)v24 + 48))(v24, &__p);
          uint64_t v47 = (void **)&__p;
          sub_10023FDC8(&v47);
        }
        else
        {
          [v8 finishDecoding];
          long long __p = 0uLL;
          *(void *)&long long v67 = 0;
          sub_1005E6A50(&__p, v62, v63, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v62) >> 6));
          uint64_t v34 = v1[4];
          if (!v34) {
            sub_10007B600();
          }
          (*(void (**)(uint64_t, long long *))(*(void *)v34 + 48))(v34, &__p);
          v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          sub_10023FDC8((void ***)&v78);
          long long v35 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v78.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I loadEntitlementSubscriptionDetails: Failed to decode kEntitlementSubscriptionsKey", (uint8_t *)&v78, 2u);
          }
        }
LABEL_64:
      }
      else
      {
        [v8 finishDecoding];
        uint64_t v31 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v32 = [v10 intValue];
          LODWORD(__p) = 67109120;
          DWORD1(__p) = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I loadEntitlementSubscriptionDetails: Version mismatch [%d]", (uint8_t *)&__p, 8u);
        }
        long long __p = 0uLL;
        *(void *)&long long v67 = 0;
        sub_1005E6A50(&__p, v62, v63, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v62) >> 6));
        uint64_t v33 = v1[4];
        if (!v33) {
          sub_10007B600();
        }
        (*(void (**)(uint64_t, long long *))(*(void *)v33 + 48))(v33, &__p);
        v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_10023FDC8((void ***)&v78);
      }
    }
    else
    {
      [v8 finishDecoding];
      long long __p = 0uLL;
      *(void *)&long long v67 = 0;
      sub_1005E6A50(&__p, v62, v63, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v62) >> 6));
      uint64_t v29 = v1[4];
      if (!v29) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, long long *))(*(void *)v29 + 48))(v29, &__p);
      v78.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_10023FDC8((void ***)&v78);
      int v30 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v78.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I loadEntitlementSubscriptionDetails: Version decoding failure", (uint8_t *)&v78, 2u);
      }
    }
  }

LABEL_66:
  uint64_t v47 = (void **)&v62;
  sub_10023FDC8(&v47);
  sub_10086EED8((uint64_t *)&v46);
  return sub_100046B58((uint64_t *)&v45);
}

void sub_10086ECBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  a20 = (uint64_t)&a45;
  sub_10023FDC8((void ***)&a20);
  sub_10086EED8(&a19);
  sub_100046B58(&a18);
  _Unwind_Resume(a1);
}

uint64_t *sub_10086EED8(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_100861838((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t *sub_10086EF28(uint64_t *a1)
{
  uint64_t v1 = *a1;
  id v7 = a1;
  uint64_t v8 = v1;
  if (*(char *)(v1 + 23) < 0)
  {
    unint64_t v3 = *(void *)(v1 + 8);
    if (v3)
    {
      sub_10004FC84(__dst, *(void **)v1, v3);
      goto LABEL_6;
    }
LABEL_8:
    CFPreferencesSetValue(@"SequoiaPurchaseIccid", 0, @"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    goto LABEL_22;
  }
  if (!*(unsigned char *)(v1 + 23)) {
    goto LABEL_8;
  }
  long long v2 = *(_OWORD *)v1;
  uint64_t v10 = *(void *)(v1 + 16);
  *(_OWORD *)std::string __dst = v2;
LABEL_6:
  if (SHIBYTE(v10) < 0)
  {
    sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)__dst;
    uint64_t v14 = v10;
  }
  uint64_t v12 = 0;
  if (SHIBYTE(v14) < 0)
  {
    sub_10004FC84(&v15, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long v15 = *(_OWORD *)__p;
    uint64_t v16 = v14;
  }
  CFDataRef v17 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v4 = v12;
    uint64_t v12 = v17;
    uint64_t v18 = v4;
    sub_1000558F4(&v18);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
  long long v5 = v12;
  uint64_t v11 = v12;
  uint64_t v12 = 0;
  sub_1000558F4(&v12);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
  CFPreferencesSetValue(@"SequoiaPurchaseIccid", v5, @"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_1000558F4(&v11);
LABEL_22:
  sub_1003F2A04();
  sub_10086F158(&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_10086F0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, int a19, const void *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_10086F158(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10086F158(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_10086F1B0(void **a1)
{
  uint64_t v1 = *a1;
  id v7 = a1;
  uint64_t v8 = v1;
  sub_1003F2A04();
  uint64_t v11 = 0;
  *(void *)&long long v12 = CFPreferencesCopyValue(@"SequoiaPurchaseIccid", @"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_100225AE0(&v11, (CFTypeRef *)&v12);
  if (v11) {
    long long v2 = sub_1000810B8;
  }
  else {
    long long v2 = 0;
  }
  if (v2)
  {
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    ctu::cf::assign();
    long long v9 = v12;
    uint64_t v10 = v13;
    uint64_t v3 = v1[3];
    if (!v3) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, long long *))(*(void *)v3 + 48))(v3, &v9);
    if (SHIBYTE(v10) < 0)
    {
      uint64_t v4 = (void **)&v9;
LABEL_11:
      operator delete(*v4);
    }
  }
  else
  {
    sub_100058DB0(&v12, "");
    uint64_t v5 = v1[3];
    if (!v5) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, long long *))(*(void *)v5 + 48))(v5, &v12);
    if (SHIBYTE(v13) < 0)
    {
      uint64_t v4 = (void **)&v12;
      goto LABEL_11;
    }
  }
  sub_1000558F4(&v11);
  sub_10086F378(&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_10086F31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15)
{
}

void **sub_10086F378(void **a1)
{
  long long v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_10001E914(v2);
    operator delete();
  }
  return a1;
}

char *sub_10086F3C0(uint64_t **a1, void **a2, long long *a3, long long *a4)
{
  uint64_t v12 = 0;
  id v7 = (char **)sub_100046ED4((uint64_t)a1, &v12, a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    long long v9 = (uint64_t **)v7;
    memset(v11, 0, sizeof(v11));
    sub_10086F470((uint64_t)a1, a3, a4, v11);
    sub_100046C38(a1, v12, v9, (uint64_t *)v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0;
    sub_10010E764((uint64_t)v11, 0);
  }
  return v8;
}

char *sub_10086F470@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, char **a4@<X8>)
{
  id v7 = (char *)(a1 + 8);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = (char *)operator new(0x50uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  uint64_t result = sub_10086F4EC(v8 + 32, a2, a3);
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_10086F4D4(_Unwind_Exception *a1)
{
  sub_10010E764(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_10086F4EC(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  long long v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)long long v6 = v7;
  }
  return __dst;
}

void sub_10086F568(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10086F584(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10086F61C(void *a1)
{
  *a1 = off_101A12330;
  long long v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  sub_10031CBC4(a1 + 2);
  return a1;
}

void sub_10086F674(void *a1)
{
  *a1 = off_101A12330;
  long long v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  sub_10031CBC4(a1 + 2);

  operator delete();
}

void *sub_10086F6EC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x48uLL);
  void *v2 = off_101A12330;
  sub_10086FB50(v2 + 1, v1);
  return v2;
}

void sub_10086F740(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10086F754(uint64_t a1, void *a2)
{
  *a2 = off_101A12330;
  return sub_10086FB50(a2 + 1, a1 + 8);
}

void *sub_10086F780(uint64_t a1)
{
  return sub_10086FBC0((void *)(a1 + 8));
}

void sub_10086F788(void *a1)
{
  sub_10086FBC0(a1 + 1);

  operator delete(a1);
}

void sub_10086F7C4(void *a1, uint64_t *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v3 = *a2;
  uint64_t v27 = v4;
  long long v5 = *((_OWORD *)a2 + 1);
  long long v28 = v5;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  if (!(_BYTE)v3)
  {
LABEL_10:
    int v12 = 0x4000;
    goto LABEL_11;
  }
  uint64_t v6 = a1[1];
  uint64_t v7 = v5;
  if (v4 == (void)v5)
  {
LABEL_7:
    uint64_t v11 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I force clear local cache of cellular plan information", buf, 2u);
    }
    *(void *)(v6 + 88) = *(void *)(v6 + 80);
    goto LABEL_10;
  }
  uint64_t v8 = (const void *)a1[6];
  size_t v9 = a1[7] - (void)v8;
  while (1)
  {
    uint64_t v10 = *(const void **)(v4 + 24);
    if (*(void *)(v4 + 32) - (void)v10 == v9 && !memcmp(v10, v8, v9)) {
      break;
    }
    v4 += 56;
    if (v4 == v7) {
      goto LABEL_7;
    }
  }
  uint64_t v13 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I manatee date is up to date. refresh last upload timestamp", buf, 2u);
  }
  (***(void (****)(uint8_t *__return_ptr))(v6 + 48))(v29);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v14, *(Registry **)v29);
  uint64_t v16 = ServiceMap;
  if (v17 < 0)
  {
    uint64_t v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v19 = 5381;
    do
    {
      uint64_t v17 = v19;
      unsigned int v20 = *v18++;
      uint64_t v19 = (33 * v19) ^ v20;
    }
    while (v20);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v17;
  uint64_t v21 = sub_10004D37C(&v16[1].__m_.__sig, (unint64_t *)buf);
  if (v21)
  {
    uint64_t v23 = v21[3];
    uint64_t v22 = (std::__shared_weak_count *)v21[4];
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v22 = 0;
  }
  std::mutex::unlock(v16);
  *(void *)long long buf = v23;
  unsigned int v32 = v22;
  if (v22)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v22);
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  BOOL v25 = sub_100867FB0(buf, Current);
  if (v22) {
    sub_10004D2C8(v22);
  }
  if (v30) {
    sub_10004D2C8(v30);
  }
  if (!v25)
  {
    uint64_t v26 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v29 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "persistent device info last upload timestamp failure", v29, 2u);
    }
  }
  int v12 = 0;
LABEL_11:
  sub_10085D4D0(a1[5], v12);
  *(void *)long long buf = &v27;
  sub_10034251C((void ***)buf);
}

void sub_10086FA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (a7) {
    sub_10004D2C8(a7);
  }
  sub_10034251C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10086FA84(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10086FAC4()
{
}

uint64_t sub_10086FAD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_10086FB50(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  sub_10086F584((uint64_t)(a1 + 1), a2 + 8);
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  sub_10005C928(a1 + 5, *(const void **)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 48) - *(void *)(a2 + 40));
  return a1;
}

void sub_10086FBAC(_Unwind_Exception *a1)
{
  sub_10031CBC4(v1);
  _Unwind_Resume(a1);
}

void *sub_10086FBC0(void *a1)
{
  long long v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }

  return sub_10031CBC4(a1 + 1);
}

uint64_t *sub_10086FC04(const void **a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *a1;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, *a1);
  CFPreferencesSetValue(@"kCKUploadCount", v4, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_1003F2A04();
  sub_1000570E8((const void **)&v4);
  if (v1) {
    operator delete();
  }
  return sub_100046B58((uint64_t *)&v3);
}

void sub_10086FCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    operator delete();
  }
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void *sub_10086FCF0(void *a1, CFTypeRef *a2)
{
  CFTypeRef v4 = *a2;
  if (*a2 && (CFTypeID v5 = CFGetTypeID(*a2), v5 == CFNumberGetTypeID()))
  {
    *a1 = v4;
  }
  else
  {
    *a1 = 0;
    if (*a2) {
      CFRelease(*a2);
    }
  }
  return a1;
}

uint64_t *sub_10086FD5C(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  sub_1003F2A04();
  uint64_t v9 = 0;
  CFTypeRef v8 = CFPreferencesCopyValue(@"kCKUploadCount", kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_10086FCF0(&v9, &v8);
  if (v9) {
    uint64_t v3 = sub_100081E58;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    LODWORD(v8) = 0;
    ctu::cf::assign((ctu::cf *)&v8, v9, v2);
    int v4 = (int)v8;
  }
  else
  {
    int v4 = 0;
  }
  sub_10085D4D0(v1[3], v4);
  sub_1000570E8((const void **)&v9);
  sub_10086FE54(&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_10086FE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, const void *a12)
{
}

void **sub_10086FE54(void **a1)
{
  CFNumberRef v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_10031CBC4(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_10086FE9C(const void **a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *a1;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, *a1);
  CFPreferencesSetValue(@"kCKUploadDate", v4, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_1003F2A04();
  sub_1000570E8((const void **)&v4);
  if (v1) {
    operator delete();
  }
  return sub_100046B58((uint64_t *)&v3);
}

void sub_10086FF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    operator delete();
  }
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10086FF88(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  sub_1003F2A04();
  CFTypeRef v8 = 0;
  uint64_t v9 = (uint64_t (*)(uint64_t))CFPreferencesCopyValue(@"kCKUploadDate", kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_10086FCF0(&v8, (CFTypeRef *)&v9);
  if (v8) {
    uint64_t v3 = sub_100081E58;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    uint64_t v9 = 0;
    ctu::cf::assign((ctu::cf *)&v9, v8, v2);
    uint64_t v3 = v9;
  }
  uint64_t v4 = v1[3];
  uint64_t v9 = v3;
  if (!v4) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, uint64_t (**)(uint64_t)))(*(void *)v4 + 48))(v4, &v9);
  sub_1000570E8((const void **)&v8);
  sub_1008700AC(&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_100870080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, const void *a11)
{
}

void **sub_1008700AC(void **a1)
{
  CFNumberRef v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_10031CE54(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_1008700F4(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  sub_10085D4D0(v1[3], 20);
  sub_10086FE54(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_10087013C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t *sub_100870158(CFArrayRef **a1)
{
  uint64_t v1 = *a1;
  uint64_t v23 = a1;
  uint64_t v24 = v1;
  CFArrayRef v2 = *v1;
  (***((void (****)(long long *__return_ptr))*v1 + 6))(&buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, (Registry *)buf);
  CFTypeID v5 = ServiceMap;
  if (v6 < 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  BOOL v25 = (NSData *)v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)&v25);
  if (v10)
  {
    uint64_t v12 = v10[3];
    uint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v11 = 0;
  char v13 = 1;
LABEL_9:
  if (*((void *)&buf + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v12)
  {
    CFArrayRef v14 = v1[1];
    if (v14) {
      long long v15 = sub_100083F10;
    }
    else {
      long long v15 = 0;
    }
    if (v15 && CFArrayGetCount(v14))
    {
      uint64_t v16 = +[NSKeyedArchiver archivedDataWithRootObject:v1[1] requiringSecureCoding:1 error:0];
      uint64_t v17 = v16;
      BOOL v25 = v16;
      if (v16) {
        CFRetain(v16);
      }
      CFStringRef v18 = kCFPreferencesCurrentUser;
      CFStringRef v19 = kCFPreferencesAnyHost;
      (*(void (**)(uint64_t, const __CFString *, NSData *, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v12 + 16))(v12, @"AddOnRemotePlanList", v17, @"no_backup/com.apple.CommCenter.AddOnRemotePlanList.plist", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
      unsigned int v20 = *((void *)v2 + 5);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        CFIndex Count = CFArrayGetCount(v1[1]);
        LODWORD(buf) = 134217984;
        *(void *)((char *)&buf + 4) = Count;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Saved (%lu) add on remote devices", (uint8_t *)&buf, 0xCu);
      }
      sub_100030068((const void **)&v25);
    }
    else
    {
      CFStringRef v18 = kCFPreferencesCurrentUser;
      CFStringRef v19 = kCFPreferencesAnyHost;
      (*(void (**)(uint64_t, const __CFString *, void, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v12 + 16))(v12, @"AddOnRemotePlanList", 0, @"no_backup/com.apple.CommCenter.AddOnRemotePlanList.plist", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    }
    (*(void (**)(uint64_t, const __CFString *, CFStringRef, CFStringRef))(*(void *)v12 + 48))(v12, @"no_backup/com.apple.CommCenter.AddOnRemotePlanList.plist", v18, v19);
  }
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  sub_1000E8EE4((uint64_t *)&v24);
  return sub_100046B58((uint64_t *)&v23);
}

void sub_100870464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void);
  sub_100030068((const void **)va2);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  sub_1000E8EE4((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1008704D4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  BOOL v25 = a1;
  uint64_t v26 = v1;
  uint64_t v2 = *(void *)v1;
  (***(void (****)(uint8_t *__return_ptr))(*(void *)v1 + 48))(buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)buf);
  uint64_t v5 = ServiceMap;
  if (v6 < 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)__p);
  if (v10)
  {
    uint64_t v12 = v10[3];
    uint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v11 = 0;
  char v13 = 1;
LABEL_9:
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v12)
  {
    long long v15 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Invalid CFPreferencesInterface!", buf, 2u);
      if (v13) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  if (*(char *)(v1 + 31) < 0) {
    uint64_t v14 = *(void *)(v1 + 16);
  }
  else {
    uint64_t v14 = *(unsigned __int8 *)(v1 + 31);
  }
  if (!v14)
  {
    __p[0] = 0;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      unsigned int v20 = __p[0];
      __p[0] = Mutable;
      *(void *)long long buf = v20;
      sub_1000440D4((const void **)buf);
    }
    sub_1001C6B94((__CFArray *)__p[0], @"monitorModeIccid");
    sub_1001C6B94((__CFArray *)__p[0], @"monitorModeEntitlement");
    (*(void (**)(uint64_t, void, void *, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v12 + 24))(v12, 0, __p[0], @"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    sub_1000440D4((const void **)__p);
LABEL_26:
    if (v13) {
      goto LABEL_28;
    }
LABEL_27:
    sub_10004D2C8(v11);
    goto LABEL_28;
  }
  *(void *)int v30 = 0;
  CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v16)
  {
    uint64_t v17 = *(__CFDictionary **)v30;
    *(void *)int v30 = v16;
    *(void *)long long buf = v17;
    sub_10005717C((const void **)buf);
  }
  if (*(char *)(v1 + 31) < 0)
  {
    sub_10004FC84(__dst, *(void **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v18 = *(_OWORD *)(v1 + 8);
    uint64_t v28 = *(void *)(v1 + 24);
    *(_OWORD *)std::string __dst = v18;
  }
  if (SHIBYTE(v28) < 0)
  {
    sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)__dst;
    uint64_t v33 = v28;
  }
  uint64_t v31 = 0;
  if (SHIBYTE(v33) < 0)
  {
    sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)long long buf = *(_OWORD *)__p;
    uint64_t v35 = v33;
  }
  std::string::size_type v36 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v22 = v31;
    uint64_t v31 = v36;
    uint64_t v37 = v22;
    sub_1000558F4(&v37);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v23 = (uint64_t)v31;
  uint64_t v29 = v31;
  uint64_t v31 = 0;
  sub_1000558F4(&v31);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  sub_10010F3F0(*(__CFDictionary **)v30, @"monitorModeIccid", v23);
  sub_1000558F4(&v29);
  if (SHIBYTE(v28) < 0) {
    operator delete(__dst[0]);
  }
  if (*(unsigned char *)(v1 + 32)) {
    uint64_t v24 = (uint64_t *)&kCFBooleanTrue;
  }
  else {
    uint64_t v24 = (uint64_t *)&kCFBooleanFalse;
  }
  sub_10012C97C(*(__CFDictionary **)v30, @"monitorModeEntitlement", *v24);
  (*(void (**)(uint64_t, void, void, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v12 + 24))(v12, *(void *)v30, 0, @"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_10005717C((const void **)v30);
  if ((v13 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_28:
  sub_10023CBF8(&v26);
  return sub_100046B58((uint64_t *)&v25);
}

void sub_100870910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, const void *a19, const void *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  sub_1000558F4(&a20);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_10005717C(&a19);
  if ((v34 & 1) == 0) {
    sub_10004D2C8(v33);
  }
  sub_10023CBF8(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1008709D4(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v28 = a1;
  uint64_t v29 = v1;
  uint64_t v2 = *v1;
  (***(void (****)(uint8_t *__return_ptr))(*v1 + 48))(buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)buf);
  uint64_t v5 = ServiceMap;
  if (v6 < 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  long long __p = (void *)v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)&__p);
  if (v10)
  {
    uint64_t v12 = v10[3];
    uint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v11 = 0;
  char v13 = 1;
LABEL_9:
  if (v43) {
    sub_10004D2C8(v43);
  }
  if (!v12)
  {
    uint64_t v14 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Invalid CFPreferencesInterface!", buf, 2u);
    }
    buf[0] = 0;
    char v45 = 0;
    uint64_t v15 = v1[4];
    if (!v15) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v15 + 48))(v15, buf);
    if (v45 && v44 < 0) {
      operator delete(*(void **)buf);
    }
  }
  *(_DWORD *)((char *)v41 + 3) = 0;
  v41[0] = 0;
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, const __CFString *, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v12 + 40))(cf, v12, @"monitorModeIccid", @"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  char v27 = v13;
  long long __p = 0;
  std::string::size_type v38 = 0;
  uint64_t v39 = 0;
  ctu::cf::assign();
  CFMutableDictionaryRef v16 = __p;
  uint64_t v17 = v38;
  v41[0] = v39;
  *(_DWORD *)((char *)v41 + 3) = *(_DWORD *)((char *)&v39 + 3);
  long long v18 = (void *)HIBYTE(v39);
  int v19 = SHIBYTE(v39);
  sub_1000577C4(cf);
  if (v19 >= 0) {
    unsigned int v20 = v18;
  }
  else {
    unsigned int v20 = v17;
  }
  if (!v20)
  {
    LOBYTE(__p) = 0;
    char v40 = 0;
    uint64_t v21 = v1[4];
    if (!v21) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v21 + 48))(v21, &__p);
    if (v40 && SHIBYTE(v39) < 0) {
      operator delete(__p);
    }
  }
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, const __CFString *, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v12 + 40))(cf, v12, @"monitorModeEntitlement", @"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  uint64_t v22 = (BOOL *)cf[0];
  LOBYTE(__dst[0]) = 0;
  if (cf[0])
  {
    CFTypeID v23 = CFGetTypeID(cf[0]);
    if (v23 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)__dst, v22, v24);
      LOBYTE(v22) = __dst[0];
    }
    else
    {
      LOBYTE(v22) = 0;
    }
  }
  sub_1000577C4(cf);
  if (v19 < 0)
  {
    sub_10004FC84(__dst, v16, (unint64_t)v17);
  }
  else
  {
    __dst[0] = v16;
    __dst[1] = v17;
    LODWORD(v31) = v41[0];
    *(_DWORD *)((char *)&v31 + 3) = *(_DWORD *)((char *)v41 + 3);
    HIBYTE(v31) = v19;
  }
  char v32 = (char)v22;
  *(_OWORD *)CFTypeRef cf = *(_OWORD *)__dst;
  uint64_t v34 = v31;
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v31 = 0;
  char v35 = (char)v22;
  char v36 = 1;
  uint64_t v25 = v1[4];
  if (!v25) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v25 + 48))(v25, cf);
  if (v36 && SHIBYTE(v34) < 0) {
    operator delete((void *)cf[0]);
  }
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__dst[0]);
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_39;
    }
  }
  else if ((v19 & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(v16);
LABEL_39:
  if ((v27 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  sub_100870F20((uint64_t *)&v29);
  return sub_100046B58((uint64_t *)&v28);
}

void sub_100870E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (v39 < 0) {
    operator delete(v38);
  }
  if ((a11 & 1) == 0) {
    sub_10004D2C8(v37);
  }
  sub_100870F20(&a13);
  sub_100046B58(&a12);
  _Unwind_Resume(a1);
}

void sub_100870F10()
{
  if (!*(void *)(v0 - 136)) {
    JUMPOUT(0x100870EF8);
  }
  JUMPOUT(0x100870EF4);
}

uint64_t *sub_100870F20(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_100861914((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t *sub_100870F70(void **a1)
{
  uint64_t v1 = *a1;
  char v35 = a1;
  char v36 = v1;
  uint64_t v2 = *v1;
  sub_1006056FC((uint64_t *)&v37, (uint64_t)(v1 + 1));
  sub_100861998(v39, (uint64_t)(v1 + 4));
  uint64_t v34 = v2;
  char v3 = objc_opt_new();
  uint64_t v4 = v37;
  if (v37 != v38)
  {
    do
    {
      uint64_t v5 = objc_opt_new();
      uint64_t v6 = +[NSNumber numberWithBool:*((unsigned __int8 *)v4 + 256)];
      [v5 setValue:v6 forKey:@"supportPrivateNetworkKey"];

      uint64_t v7 = v4 + 12;
      if (*((char *)v4 + 119) < 0) {
        uint64_t v7 = (void *)*v7;
      }
      uint64_t v8 = +[NSString stringWithUTF8String:v7];
      [v5 setValue:v8 forKey:@"mccKey"];

      unsigned int v9 = v4 + 15;
      if (*((char *)v4 + 143) < 0) {
        unsigned int v9 = (void *)*v9;
      }
      uint64_t v10 = +[NSString stringWithUTF8String:v9];
      [v5 setValue:v10 forKey:@"mncKey"];

      uint64_t v11 = v4 + 18;
      if (*((char *)v4 + 167) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      uint64_t v12 = +[NSString stringWithUTF8String:v11];
      [v5 setValue:v12 forKey:@"gid1Key"];

      char v13 = v4 + 21;
      if (*((char *)v4 + 191) < 0) {
        char v13 = (void *)*v13;
      }
      uint64_t v14 = +[NSString stringWithUTF8String:v13];
      [v5 setValue:v14 forKey:@"gid2Key"];

      uint64_t v15 = +[NSNumber numberWithBool:*((unsigned __int8 *)v4 + 257)];
      [v5 setValue:v15 forKey:@"allowsAutomaticToggling"];

      if (*((unsigned char *)v4 + 216))
      {
        CFMutableDictionaryRef v16 = v4 + 24;
        if (*((char *)v4 + 215) < 0) {
          CFMutableDictionaryRef v16 = (void *)*v16;
        }
        uint64_t v17 = +[NSString stringWithUTF8String:v16];
        [v5 setValue:v17 forKey:@"simCsgIdentifierKey"];
      }
      if (*((unsigned char *)v4 + 248))
      {
        long long v18 = v4 + 28;
        if (*((char *)v4 + 247) < 0) {
          long long v18 = (void *)*v18;
        }
        int v19 = +[NSString stringWithUTF8String:v18];
        [v5 setValue:v19 forKey:@"simNidIdentifierKey"];
      }
      unsigned int v20 = v4 + 4;
      if (*((char *)v4 + 55) < 0) {
        unsigned int v20 = (void *)*v20;
      }
      uint64_t v21 = +[NSString stringWithUTF8String:v20];
      [v3 setValue:v5 forKey:v21];

      uint64_t v22 = v4[1];
      if (v22)
      {
        do
        {
          CFTypeID v23 = (void **)v22;
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          CFTypeID v23 = (void **)v4[2];
          BOOL v24 = *v23 == v4;
          uint64_t v4 = v23;
        }
        while (!v24);
      }
      uint64_t v4 = v23;
    }
    while (v23 != v38);
  }
  id v43 = 0;
  uint64_t v25 = +[NSJSONSerialization dataWithJSONObject:v3 options:0 error:&v43];
  id v26 = v43;
  if (v26)
  {
    char v27 = *(NSObject **)(v34 + 40);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      id v28 = [v26 description];
      id v29 = [v28 UTF8String];
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v29;
      _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Encode Error: %s", (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    uint64_t v42 = v25;
    if (v25) {
      CFRetain(v25);
    }
    uint64_t v30 = *(void *)(v34 + 48);
    sub_100857B5C(&v41);
    uint64_t v31 = std::string::append(&v41, "com.apple.CommCenter.PrivateNetworkData.plist", 0x2DuLL);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    std::string::size_type v45 = v31->__r_.__value_.__r.__words[2];
    long long buf = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    char v40 = v42;
    if (v42) {
      CFRetain(v42);
    }
    (*(void (**)(uint64_t, long long *, const void **))(*(void *)v30 + 872))(v30, &buf, &v40);
    sub_100030068(&v40);
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)buf);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    sub_100030068(&v42);
  }

  sub_10060222C((uint64_t)v39);
  sub_100602474((uint64_t)&v37, v38[0]);
  sub_10060AFCC((uint64_t *)&v36);
  return sub_100046B58((uint64_t *)&v35);
}

void sub_100871410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100871558(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_1008715F0(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *v1;
  sub_100871558((uint64_t)v6, (uint64_t)(v1 + 1));
  sub_10085EEF0(v2, (uint64_t)v6);
  sub_10060B0E0(v6);
  sub_1008716A4((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_100871678(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  sub_10060B0E0((uint64_t *)va2);
  sub_1008716A4((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1008716A4(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_10060B0E0((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t *sub_1008716F4(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v51 = a1;
  uint64_t v52 = v1;
  uint64_t v2 = *v1;
  sub_100861C08((uint64_t)&v53, v1 + 1);
  memset(v68, 0, sizeof(v68));
  long long v67 = 0u;
  uint64_t v3 = *(NSObject **)(v2 + 40);
  os_signpost_id_t v4 = os_signpost_id_generate(v3);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = *(NSObject **)(v2 + 40);
    if (os_signpost_enabled(v5))
    {
      LOWORD(buf) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "SavePrivateNetworkProfiles", (const char *)&unk_1017DEDA7, (uint8_t *)&buf, 2u);
    }
  }
  *(void *)&long long buf = off_101A12430;
  v66[1] = &buf;
  *(void *)&long long v67 = v4;
  *((void *)&v67 + 1) = os_retain(v3);
  sub_1000336E8((uint64_t)v68, (uint64_t)&buf);
  sub_100033A10(&buf);
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  (***(void (****)(uint8_t *__return_ptr))(v2 + 48))(v63);
  sub_100058DB0(&__p, "savePrivateNetworkProfiles_sync");
  long long buf = v67;
  sub_1000336E8((uint64_t)v66, (uint64_t)v68);
  long long v67 = 0uLL;
  sub_100033AF4(v68);
  Registry::createXpcJetsamAssertion();
  sub_1000339DC((uint64_t *)&buf);
  if (v60 < 0) {
    operator delete(__p);
  }
  if (*(void *)&v63[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v63[8]);
  }
  uint64_t v47 = v2;
  long long v49 = objc_opt_new();
  uint64_t v6 = v53;
  if (v53 != v54)
  {
    do
    {
      long long v50 = objc_opt_new();
      uint64_t v7 = v6 + 8;
      if (*((char *)v6 + 87) < 0) {
        uint64_t v7 = (void *)*v7;
      }
      uint64_t v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7, v47);
      [v50 setValue:v8 forKey:@"pnwProfileNameKey"];

      unsigned int v9 = v6 + 11;
      if (*((char *)v6 + 111) < 0) {
        unsigned int v9 = (void *)*v9;
      }
      uint64_t v10 = +[NSString stringWithUTF8String:v9];
      [v50 setValue:v10 forKey:@"pnwProfileVersionKey"];

      uint64_t v11 = v6 + 14;
      if (*((char *)v6 + 135) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      uint64_t v12 = +[NSString stringWithUTF8String:v11];
      [v50 setValue:v12 forKey:@"profileCsgIdentifierKey"];

      char v13 = v6 + 17;
      if (*((char *)v6 + 159) < 0) {
        char v13 = (void *)*v13;
      }
      uint64_t v14 = +[NSString stringWithUTF8String:v13];
      [v50 setValue:v14 forKey:@"profileNidIdentifierKey"];

      uint64_t v15 = +[NSNumber numberWithBool:*((unsigned __int8 *)v6 + 161)];
      [v50 setValue:v15 forKey:@"supportsCellOverWifiKey"];

      CFMutableDictionaryRef v16 = +[NSNumber numberWithInt:*((unsigned int *)v6 + 41)];
      [v50 setValue:v16 forKey:@"5GStandaloneEnabled"];

      uint64_t v17 = +[NSNumber numberWithInt:*((unsigned int *)v6 + 14)];
      [v50 setValue:v17 forKey:@"pnwProfileTypeKey"];

      long long v18 = objc_opt_new();
      int v19 = v6[21];
      if (v19 != v6 + 22)
      {
        uint64_t v20 = 0;
        do
        {
          uint64_t v21 = objc_opt_new();
          uint64_t v22 = +[NSNumber numberWithDouble:*((double *)v19 + 9)];
          [v21 setValue:v22 forKey:@"latitudeKey"];

          CFTypeID v23 = +[NSNumber numberWithDouble:*((double *)v19 + 8)];
          [v21 setValue:v23 forKey:@"longitudeKey"];

          BOOL v24 = +[NSNumber numberWithDouble:*((double *)v19 + 7)];
          [v21 setValue:v24 forKey:@"radiusKey"];

          uint64_t v25 = v19 + 10;
          if (*((char *)v19 + 103) < 0) {
            uint64_t v25 = (void *)*v25;
          }
          id v26 = +[NSString stringWithUTF8String:v25];
          [v21 setValue:v26 forKey:@"geofenceIdKey"];

          char v27 = +[NSNumber numberWithUnsignedInt:v20];
          id v28 = [v27 stringValue];
          [v18 setValue:v21 forKey:v28];

          id v29 = (void *)v19[1];
          if (v29)
          {
            do
            {
              uint64_t v30 = v29;
              id v29 = (void *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              uint64_t v30 = (void *)v19[2];
              BOOL v31 = *v30 == (void)v19;
              int v19 = v30;
            }
            while (!v31);
          }
          uint64_t v20 = (v20 + 1);
          int v19 = v30;
        }
        while (v30 != v6 + 22);
      }
      [v50 setValue:v18 forKey:@"geofenceListKey"];
      long long v32 = v6 + 4;
      if (*((char *)v6 + 55) < 0) {
        long long v32 = (void *)*v32;
      }
      uint64_t v33 = +[NSString stringWithUTF8String:v32];
      [v49 setValue:v50 forKey:v33];

      uint64_t v34 = v6[1];
      if (v34)
      {
        do
        {
          char v35 = (void **)v34;
          uint64_t v34 = (void *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          char v35 = (void **)v6[2];
          BOOL v31 = *v35 == v6;
          uint64_t v6 = v35;
        }
        while (!v31);
      }
      uint64_t v6 = v35;
    }
    while (v35 != v54);
  }
  id v58 = 0;
  char v36 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v49, 0, &v58, v47);
  id v37 = v58;
  if (v37)
  {
    std::string::size_type v38 = *(NSObject **)(v48 + 40);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      id v39 = [v37 description];
      id v40 = [v39 UTF8String];
      *(_DWORD *)unint64_t v63 = 136315138;
      *(void *)&v63[4] = v40;
      _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "Save Private Network Profile Encode Error: %s", v63, 0xCu);
    }
  }
  else
  {
    CFTypeRef cf = v36;
    if (v36) {
      CFRetain(v36);
    }
    std::string v41 = *(NSObject **)(v48 + 40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      id v42 = [v49 count];
      *(_DWORD *)unint64_t v63 = 134217984;
      *(void *)&v63[4] = v42;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I Saving private network profiles count: %lu", v63, 0xCu);
    }
    uint64_t v43 = *(void *)(v48 + 48);
    sub_100857B5C(&v56);
    char v44 = std::string::append(&v56, "com.apple.CommCenter.PrivateNetworkProfiles.plist", 0x31uLL);
    long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    std::string::size_type v64 = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v63 = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    CFTypeRef v55 = cf;
    if (cf) {
      CFRetain(cf);
    }
    (*(void (**)(uint64_t, uint8_t *, CFTypeRef *))(*(void *)v43 + 872))(v43, v63, &v55);
    sub_100030068(&v55);
    if (SHIBYTE(v64) < 0) {
      operator delete(*(void **)v63);
    }
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v56.__r_.__value_.__l.__data_);
    }
    sub_100030068(&cf);
  }

  if (v62) {
    sub_10004D2C8(v62);
  }
  sub_1000339DC((uint64_t *)&v67);
  sub_100602520((uint64_t)&v53, v54[0]);
  sub_10087207C((uint64_t *)&v52);
  return sub_100046B58((uint64_t *)&v51);
}

void sub_100871E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,const void *a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,std::__shared_weak_count *a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44)
{
  sub_100030068(&a27);

  if (a36) {
    sub_10004D2C8(a36);
  }
  sub_1000339DC((uint64_t *)(v46 - 160));
  sub_100602520((uint64_t)&a15, a18);
  sub_10087207C(&a14);
  sub_100046B58(&a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_10087207C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_100602520(v1 + 8, *(void **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t sub_1008720D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_100872168(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v51 = a1;
  uint64_t v52 = v1;
  uint64_t v2 = *v1;
  sub_1008720D0((uint64_t)v75, (uint64_t)(v1 + 1));
  memset(v91, 0, sizeof(v91));
  long long v90 = 0u;
  uint64_t v3 = *(NSObject **)(v2 + 40);
  os_signpost_id_t v4 = os_signpost_id_generate(v3);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v5 = *(NSObject **)(v2 + 40);
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)long long buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_INTERVAL_BEGIN, v4, "LoadPrivateNetworkProfiles", (const char *)&unk_1017DEDA7, buf, 2u);
    }
  }
  *(void *)long long buf = off_101A124B0;
  *((void *)&v79 + 1) = buf;
  *(void *)&long long v90 = v4;
  *((void *)&v90 + 1) = os_retain(v3);
  sub_1000336E8((uint64_t)v91, (uint64_t)buf);
  sub_100033A10(buf);
  uint64_t v72 = 0;
  long long v73 = 0;
  (***(void (****)(uint8_t *__return_ptr))(v2 + 48))(buf);
  sub_100058DB0(&__p, "loadPrivateNetworkProfiles_sync");
  long long v88 = v90;
  sub_1000336E8((uint64_t)&v89, (uint64_t)v91);
  long long v90 = 0uLL;
  sub_100033AF4(v91);
  Registry::createXpcJetsamAssertion();
  sub_1000339DC((uint64_t *)&v88);
  if (v71 < 0) {
    operator delete(__p);
  }
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  long long v69 = 0;
  uint64_t v6 = *(void *)(v2 + 48);
  sub_100857B5C(&v87);
  uint64_t v7 = std::string::append(&v87, "com.apple.CommCenter.PrivateNetworkProfiles.plist", 0x31uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  *(void *)&long long v79 = *((void *)&v7->__r_.__value_.__l + 2);
  *(_OWORD *)long long buf = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr, uint64_t, uint8_t *))(*(void *)v6 + 880))(&v69, v6, buf);
  if (SBYTE7(v79) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
  unsigned int v9 = v69;
  std::string::size_type v38 = v9;
  if (v9)
  {
    id v68 = 0;
    id v37 = +[NSJSONSerialization JSONObjectWithData:v9 options:0 error:&v68];
    id v10 = v68;
    uint64_t v11 = *(NSObject **)(v2 + 40);
    id v36 = v10;
    if (v10)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        id v34 = [v36 description];
        id v35 = [v34 UTF8String];
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v35;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Load Private Network Profile Decode Error: %s", buf, 0xCu);
      }
      buf[0] = 0;
      BYTE8(v79) = 0;
      if (!v76) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v76 + 48))(v76, buf);
      if (!BYTE8(v79)) {
        goto LABEL_86;
      }
      uint64_t v12 = *(void **)&buf[8];
      char v13 = buf;
    }
    else
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = [v37 count];
        *(_DWORD *)long long buf = 134217984;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Loading private network profiles count: %lu", buf, 0xCu);
      }
      v67[0] = 0;
      v67[1] = 0;
      id v66 = v67;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      id obj = v37;
      id v41 = [obj countByEnumeratingWithState:&v62 objects:&v87 count:16];
      if (v41)
      {
        uint64_t v49 = 0;
        uint64_t v16 = *(void *)v63;
        uint64_t v39 = *(void *)v63;
        while (1)
        {
          if (v16 != v39) {
            objc_enumerationMutation(obj);
          }
          id v40 = *(id *)(*((void *)&v62 + 1) + 8 * v49);
          long long v50 = [obj objectForKey:v36];
          uint64_t v86 = 0;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v82 = 0u;
          *(_OWORD *)unint64_t v83 = 0u;
          *(_OWORD *)id v80 = 0u;
          *(_OWORD *)uint64_t v81 = 0u;
          *(_OWORD *)long long buf = 0u;
          long long v79 = 0u;
          sub_100058DB0(&v81[1], "");
          sub_100058DB0(v83, "");
          WORD4(v84) = 0;
          HIDWORD(v84) = 0;
          *((void *)&v85 + 1) = 0;
          uint64_t v86 = 0;
          *(void *)&long long v85 = (char *)&v85 + 8;
          id v48 = [v50 objectForKey:@"pnwProfileNameKey"];
          if (v48)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              sub_10003ED78((std::string *)&buf[8], (char *)[v48 UTF8String]);
            }
          }
          id v47 = [v50 objectForKey:@"pnwProfileVersionKey"];
          if (v47)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              sub_10003ED78((std::string *)v80, (char *)[v47 UTF8String]);
            }
          }
          id v46 = [v50 objectForKey:@"profileCsgIdentifierKey"];
          if (v46)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              sub_10003ED78((std::string *)&v81[1], (char *)[v46 UTF8String]);
            }
          }
          id v45 = [v50 objectForKey:@"profileNidIdentifierKey"];
          if (v45)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              sub_10003ED78((std::string *)v83, (char *)[v45 UTF8String]);
            }
          }
          uint64_t v43 = [v50 objectForKey:@"supportsCellOverWifiKey"];
          if (v43)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              BYTE9(v84) = [v43 BOOLValue];
            }
          }
          char v44 = [v50 objectForKey:@"5GStandaloneEnabled"];
          if (v44)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              HIDWORD(v84) = [v44 intValue];
            }
          }
          uint64_t v17 = [v50 objectForKey:@"pnwProfileTypeKey"];
          if (v17)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              *(_DWORD *)long long buf = [v17 integerValue];
            }
          }
          long long v18 = [v50 objectForKey:@"geofenceListKey"];
          if (v18)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              uint64_t v61 = 0;
              long long v59 = 0u;
              *(_OWORD *)char v60 = 0u;
              *(_OWORD *)long long v57 = 0u;
              *(_OWORD *)id v58 = 0u;
              long long v53 = 0u;
              long long v54 = 0u;
              long long v55 = 0u;
              long long v56 = 0u;
              id v19 = v18;
              id v20 = [v19 countByEnumeratingWithState:&v53 objects:v77 count:16];
              if (v20)
              {
                uint64_t v21 = 0;
                uint64_t v22 = *(void *)v54;
                for (uint64_t i = *(void *)v54; ; uint64_t i = *(void *)v54)
                {
                  if (i != v22) {
                    objc_enumerationMutation(v19);
                  }
                  BOOL v24 = [v19 objectForKeyedSubscript:*(void *)(*((void *)&v53 + 1) + 8 * v21)];
                  uint64_t v25 = [v24 objectForKeyedSubscript:@"radiusKey"];
                  [v25 doubleValue];
                  v57[0] = v26;

                  char v27 = [v24 objectForKeyedSubscript:@"longitudeKey"];
                  [v27 doubleValue];
                  v57[1] = v28;

                  id v29 = [v24 objectForKeyedSubscript:@"latitudeKey"];
                  [v29 doubleValue];
                  v58[0] = v30;

                  id v31 = [v24 objectForKeyedSubscript:@"geofenceIdKey"];
                  sub_10003ED78((std::string *)&v58[1], (char *)[v31 UTF8String]);

                  sub_100606AD8((uint64_t **)&v85, &v58[1], (long long *)&v58[1], (long long *)v57);
                  if (++v21 >= (unint64_t)v20)
                  {
                    id v20 = [v19 countByEnumeratingWithState:&v53 objects:v77 count:16];
                    if (!v20) {
                      break;
                    }
                    uint64_t v21 = 0;
                  }
                }
              }

              if (SHIBYTE(v61) < 0) {
                operator delete(v60[0]);
              }
              if (SHIBYTE(v59) < 0) {
                operator delete(v58[1]);
              }
            }
          }
          sub_100058DB0(v57, (char *)[v40 UTF8String]);
          long long v74 = v57;
          long long v32 = sub_100602610(&v66, v57, (uint64_t)&unk_10144E20E, (long long **)&v74);
          *((_DWORD *)v32 + 14) = *(_DWORD *)buf;
          std::string::operator=((std::string *)(v32 + 64), (const std::string *)&buf[8]);
          std::string::operator=((std::string *)(v32 + 88), (const std::string *)v80);
          std::string::operator=((std::string *)(v32 + 112), (const std::string *)&v81[1]);
          std::string::operator=((std::string *)(v32 + 136), (const std::string *)v83);
          *((void *)v32 + 20) = *((void *)&v84 + 1);
          if (v32 + 56 != (char *)buf) {
            sub_100601150((uint64_t **)v32 + 21, (long long *)v85, (long long *)((char *)&v85 + 8));
          }
          if (SHIBYTE(v58[0]) < 0) {
            operator delete(v57[0]);
          }

          sub_10005CD90((uint64_t)&v85, *((void **)&v85 + 1));
          if (SBYTE7(v84) < 0) {
            operator delete(v83[0]);
          }
          if (SHIBYTE(v82) < 0) {
            operator delete(v81[1]);
          }
          if (SHIBYTE(v81[0]) < 0) {
            operator delete(v80[0]);
          }
          if (SHIBYTE(v79) < 0) {
            operator delete(*(void **)&buf[8]);
          }

          if (++v49 >= (unint64_t)v41)
          {
            id v41 = [obj countByEnumeratingWithState:&v62 objects:&v87 count:16];
            if (!v41) {
              break;
            }
            uint64_t v49 = 0;
          }
          uint64_t v16 = *(void *)v63;
        }
      }

      sub_100861C08((uint64_t)buf, &v66);
      BYTE8(v79) = 1;
      if (!v76) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v76 + 48))(v76, buf);
      if (BYTE8(v79)) {
        sub_100602520((uint64_t)buf, *(void **)&buf[8]);
      }
      uint64_t v12 = (void *)v67[0];
      char v13 = (uint8_t *)&v66;
    }
    sub_100602520((uint64_t)v13, v12);
LABEL_86:

    goto LABEL_87;
  }
  uint64_t v14 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I loadPrivateNetworkSettings: No data", buf, 2u);
  }
  buf[0] = 0;
  BYTE8(v79) = 0;
  if (!v76) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v76 + 48))(v76, buf);
  if (BYTE8(v79)) {
    sub_100602520((uint64_t)buf, *(void **)&buf[8]);
  }
LABEL_87:

  sub_100030068((const void **)&v69);
  if (v73) {
    sub_10004D2C8(v73);
  }
  sub_1000339DC((uint64_t *)&v90);
  sub_100605338(v75);
  sub_100872FC8((uint64_t *)&v52);
  return sub_100046B58((uint64_t *)&v51);
}

void sub_100872CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,const void *a61,void *a62,uint64_t a63)
{
  sub_100030068(&a61);
  if (a66) {
    sub_10004D2C8((std::__shared_weak_count *)a66);
  }
  sub_1000339DC((uint64_t *)(v69 - 160));
  sub_100605338(&a69);
  sub_100872FC8(&a30);
  sub_100046B58(&a29);
  _Unwind_Resume(a1);
}

uint64_t *sub_100872FC8(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_100605338((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

void sub_10087301C()
{
}

void *sub_100873030()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_101A123B0;
  return result;
}

void sub_100873068(uint64_t a1, void *a2)
{
  *a2 = off_101A123B0;
}

void sub_100873090(uint64_t a1, os_log_t *a2, os_signpost_id_t *a3)
{
  os_signpost_id_t v3 = *a3;
  if (*a3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v4 = *a2;
    if (os_signpost_enabled(*a2))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v3, "LoadPrivateNetworkSettings", (const char *)&unk_1017DEDA7, v5, 2u);
    }
  }
}

uint64_t sub_100873108(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100873148()
{
}

void sub_100873158()
{
}

void *sub_10087316C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_101A12430;
  return result;
}

void sub_1008731A4(uint64_t a1, void *a2)
{
  *a2 = off_101A12430;
}

void sub_1008731CC(uint64_t a1, os_log_t *a2, os_signpost_id_t *a3)
{
  os_signpost_id_t v3 = *a3;
  if (*a3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v4 = *a2;
    if (os_signpost_enabled(*a2))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v3, "SavePrivateNetworkProfiles", (const char *)&unk_1017DEDA7, v5, 2u);
    }
  }
}

uint64_t sub_100873244(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100873284()
{
}

void sub_100873294()
{
}

void *sub_1008732A8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_101A124B0;
  return result;
}

void sub_1008732E0(uint64_t a1, void *a2)
{
  *a2 = off_101A124B0;
}

void sub_100873308(uint64_t a1, os_log_t *a2, os_signpost_id_t *a3)
{
  os_signpost_id_t v3 = *a3;
  if (*a3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v4 = *a2;
    if (os_signpost_enabled(*a2))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v3, "LoadPrivateNetworkProfiles", (const char *)&unk_1017DEDA7, v5, 2u);
    }
  }
}

uint64_t sub_100873380(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008733C0()
{
}

void sub_1008733CC()
{
}

uint64_t sub_1008733F4(uint64_t a1, NSObject **a2, int a3, uint64_t *a4)
{
  uint64_t v7 = *a2;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  long long v8 = (std::__shared_weak_count *)a4[1];
  uint64_t v10 = *a4;
  uint64_t v11 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100830924(a1, a3, &object, &v10);
  if (v11) {
    sub_10004D2C8(v11);
  }
  if (object) {
    dispatch_release(object);
  }
  *(void *)a1 = off_101A12548;
  *(void *)(a1 + 240) = off_101A12700;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 261) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  return a1;
}

void sub_1008734D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008734FC(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 248))
  {
    uint64_t v2 = *a2;
    if (!*a2) {
      __assert_rtn("setProbe", "ProbeDataPlanManager.cpp", 44, "\"probe is invalid\" && probe");
    }
    uint64_t v3 = a2[1];
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    os_signpost_id_t v4 = *(std::__shared_weak_count **)(a1 + 256);
    *(void *)(a1 + 248) = v2;
    *(void *)(a1 + 256) = v3;
    if (v4)
    {
      sub_10004D2C8(v4);
    }
  }
}

uint64_t sub_10087357C(uint64_t result)
{
  if (!*(void *)(result + 248)) {
    __assert_rtn("init_sync", "ProbeDataPlanManager.cpp", 51, "\"probe is invalid\" && fDataPlanProbe");
  }
  return result;
}

uint64_t sub_1008735B8(void *a1)
{
  *a1 = off_101A12548;
  a1[30] = off_101A12700;
  uint64_t v2 = (std::__shared_weak_count *)a1[32];
  if (v2) {
    sub_10004D2C8(v2);
  }

  return sub_100830DBC((uint64_t)a1);
}

uint64_t sub_100873638(uint64_t a1)
{
  return sub_1008735B8((void *)(a1 - 240));
}

void sub_100873640(void *a1)
{
  sub_1008735B8(a1);

  operator delete();
}

void sub_100873678(uint64_t a1)
{
  sub_1008735B8((void *)(a1 - 240));

  operator delete();
}

void sub_1008736B4(uint64_t a1, int a2)
{
  sub_100832A1C(a1, 0x3Fu);
  if (*(unsigned char *)(a1 + 268))
  {
    os_signpost_id_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - set probing state on context activation error [fProbingState:NotProbing;]",
        (uint8_t *)v7,
        2u);
    }
    *(unsigned char *)(a1 + 268) = 0;
  }
  if (*(unsigned char *)(a1 + 89) && *(unsigned char *)(a1 + 90))
  {
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = CSIErrorString();
      v7[0] = 67109378;
      v7[1] = a2;
      __int16 v8 = 2080;
      uint64_t v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Error (%d) activating internet PDP %s. Continuing Monitor Mode.", (uint8_t *)v7, 0x12u);
    }
    sub_100831FA4(a1, -1.0);
  }
}

void sub_1008737DC(uint64_t a1, unsigned __int8 **a2, int a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I PCO: got update", buf, 2u);
  }
  if (!*(unsigned char *)(a1 + 88))
  {
    char v60 = 0;
    (*(void (**)(ctu **__return_ptr))(**(void **)(a1 + 64) + 240))(&v60);
    xpc_object_t v59 = 0;
    ctu::cf_to_xpc((uint64_t *)buf, v60, v7);
    __int16 v8 = *(void **)buf;
    xpc_object_t v59 = *(xpc_object_t *)buf;
    if (*(void *)buf && xpc_get_type(*(xpc_object_t *)buf) == (xpc_type_t)&_xpc_type_dictionary) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t v59 = xpc_null_create();
    }
    xpc_release(*(xpc_object_t *)buf);
    if (xpc_get_type(v59) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc::object::to_string((uint64_t *)buf, (xpc::object *)&v59);
      if ((SBYTE7(v41[0]) & 0x80u) == 0) {
        uint64_t v11 = BYTE7(v41[0]);
      }
      else {
        uint64_t v11 = *(void *)&buf[8];
      }
      if (SBYTE7(v41[0]) < 0) {
        operator delete(*(void **)buf);
      }
      if (v11)
      {
        uint64_t v12 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          xpc::object::to_string((uint64_t *)buf, (xpc::object *)&v59);
          char v13 = (SBYTE7(v41[0]) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          LODWORD(v64) = 136315138;
          *(void *)((char *)&v64 + 4) = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I PCO: read data: %s", (uint8_t *)&v64, 0xCu);
          if (SBYTE7(v41[0]) < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
    }
    if (xpc_get_type(v59) == (xpc_type_t)&_xpc_type_dictionary && a3 && a2[1] != *a2)
    {
      *(void *)long long buf = &v59;
      *(void *)&uint8_t buf[8] = "ContainerId";
      sub_100048BAC((uint64_t)buf, &v64);
      unsigned __int16 v10 = xpc::dyn_cast_or_default((xpc *)&v64, 0, v9);
      xpc_release((xpc_object_t)v64);
      xpc_object_t v58 = 0;
      *(void *)long long buf = &v59;
      *(void *)&uint8_t buf[8] = "ExpiredValues";
      sub_10005107C((uint64_t)buf, &v58);
      long long v64 = 0uLL;
      uint64_t v65 = 0;
      *(void *)long long buf = v58;
      if (v58) {
        xpc_retain(v58);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      sub_100048BF4(&v56, (void **)buf, 0);
      xpc_release(*(xpc_object_t *)buf);
      *(void *)long long buf = v58;
      if (v58) {
        xpc_retain(v58);
      }
      else {
        *(void *)long long buf = xpc_null_create();
      }
      if (xpc_get_type(v58) == (xpc_type_t)&_xpc_type_array) {
        count = (void *)xpc_array_get_count(v58);
      }
      else {
        count = 0;
      }
      sub_100048BF4(v55, (void **)buf, count);
      xpc_release(*(xpc_object_t *)buf);
      v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v64;
      for (uint64_t i = v57; i != v55[1] || v56 != v55[0]; uint64_t i = ++v57)
      {
        *(void *)long long buf = &v56;
        *(void *)&uint8_t buf[8] = i;
        sub_1000492E0((uint64_t)buf, v62);
        char v61 = xpc::dyn_cast_or_default((xpc *)v62, 0, v16);
        sub_100240714((unint64_t **)&v63, &v61);
        xpc_release(*(xpc_object_t *)v62);
      }
      xpc_release(v56);
      v55[0] = 0;
      xpc_release(v56);
      long long v56 = 0;
      uint64_t v54 = 0;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      *(_OWORD *)long long __p = 0u;
      long long v43 = 0u;
      memset(v41, 0, sizeof(v41));
      *(_OWORD *)long long buf = 0u;
      sub_10004BD84((uint64_t)buf);
      sub_10004B96C(v41, (uint64_t)"cbdata-> containerid: ", 22);
      uint64_t v17 = (void *)std::ostream::operator<<();
      sub_10004B96C(v17, (uint64_t)", values: ", 10);
      id v19 = (unsigned __int8 *)*((void *)&v64 + 1);
      for (uint64_t j = (unsigned __int8 *)v64; j != v19; ++j)
      {
        std::to_string(&v63, *j);
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          id v20 = &v63;
        }
        else {
          id v20 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v63.__r_.__value_.__l.__size_;
        }
        uint64_t v22 = sub_10004B96C(v41, (uint64_t)v20, size);
        sub_10004B96C(v22, (uint64_t)" ", 1);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
      }
      sub_10004B96C(v41, (uint64_t)", received data-> containerid: ", 31);
      CFTypeID v23 = (void *)std::ostream::operator<<();
      sub_10004B96C(v23, (uint64_t)", values: ", 10);
      BOOL v24 = *a2;
      uint64_t v25 = a2[1];
      if (*a2 != v25)
      {
        do
        {
          std::to_string(&v63, *v24);
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            id v26 = &v63;
          }
          else {
            id v26 = (std::string *)v63.__r_.__value_.__r.__words[0];
          }
          if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v27 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v27 = v63.__r_.__value_.__l.__size_;
          }
          id v28 = sub_10004B96C(v41, (uint64_t)v26, v27);
          sub_10004B96C(v28, (uint64_t)" ", 1);
          if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v63.__r_.__value_.__l.__data_);
          }
          ++v24;
        }
        while (v24 != v25);
      }
      id v29 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        sub_10004BC98((uint64_t)v41 + 8, &v63);
        uint64_t v30 = (v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v63
            : (std::string *)v63.__r_.__value_.__r.__words[0];
        *(_DWORD *)long long v62 = 136315138;
        *(void *)&v62[4] = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I PCO: %s", v62, 0xCu);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v63.__r_.__value_.__l.__data_);
        }
      }
      int v39 = a3;
      if (a3 != v10
        || (long long v32 = (unsigned __int8 *)*((void *)&v64 + 1),
            id v31 = (unsigned __int8 *)v64,
            (void)v64 == *((void *)&v64 + 1)))
      {
LABEL_69:
        *(void *)&v41[0] = v37;
        if (SHIBYTE(v43) < 0) {
          operator delete(__p[1]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
        if ((void)v64)
        {
          *((void *)&v64 + 1) = v64;
          operator delete((void *)v64);
        }
      }
      else
      {
        while (1)
        {
          int v33 = *v31;
          int v34 = **a2;
          id v35 = *(NSObject **)(a1 + 40);
          BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
          if (v33 == v34) {
            break;
          }
          if (v36)
          {
            LOWORD(v63.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I PCO - No match for probe value.", (uint8_t *)&v63, 2u);
          }
          if (++v31 == v32) {
            goto LABEL_69;
          }
        }
        if (v36)
        {
          LODWORD(v63.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(v63.__r_.__value_.__r.__words[0]) = v33;
          LOWORD(v63.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&v63.__r_.__value_.__r.__words[1] + 2) = v39;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I PCO: Expired field received = %d, container id = %d", (uint8_t *)&v63, 0xEu);
          id v35 = *(NSObject **)(a1 + 40);
        }
        uint64_t v38 = *(void *)(a1 + 248);
        if (v38)
        {
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v63.__r_.__value_.__l.__data_) = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I PCO - ProbeDataPlanManager - starting probe[fProbingState:IsProbing;]",
              (uint8_t *)&v63,
              2u);
            uint64_t v38 = *(void *)(a1 + 248);
          }
          *(unsigned char *)(a1 + 268) = 2;
          (*(void (**)(uint64_t, void))(*(void *)v38 + 16))(v38, *(unsigned __int8 *)(a1 + 89));
        }
        else if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          LOWORD(v63.__r_.__value_.__l.__data_) = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "PCO - Data probe doesnt exist", (uint8_t *)&v63, 2u);
        }
        sub_10008248C((uint64_t)buf);
        if ((void)v64)
        {
          *((void *)&v64 + 1) = v64;
          operator delete((void *)v64);
        }
      }
      xpc_release(v58);
    }
    xpc_release(v59);
    sub_100057D78((const void **)&v60);
  }
}

void sub_10087403C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object)
{
  sub_10008248C((uint64_t)&object);
  char v13 = *(void **)(v11 - 128);
  if (v13)
  {
    *(void *)(v11 - 120) = v13;
    operator delete(v13);
  }
  xpc_release(*(xpc_object_t *)(v11 - 208));
  xpc_release(*(xpc_object_t *)(v11 - 200));
  sub_100057D78((const void **)(v11 - 192));
  _Unwind_Resume(a1);
}

void sub_100874188(uint64_t a1, int a2, int a3, unint64_t a4)
{
  if ((a4 & 1) == 0 || (*(_DWORD *)(a1 + 264) = a2, (a3 & 0xFFFFFFFD) != 0) || *(_DWORD *)(a1 + 280) == a3)
  {
    int v8 = 0;
    if (a3)
    {
LABEL_5:
      if (a3 == 2 && (a4 & 0x10000) != 0 && *(unsigned char *)(a1 + 268) == 1)
      {
        uint64_t v9 = *(void *)(a1 + 248);
        if (v9)
        {
          unsigned __int16 v10 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - starting probe[fProbingState:IsProbing;]",
              buf,
              2u);
            uint64_t v9 = *(void *)(a1 + 248);
          }
          *(unsigned char *)(a1 + 268) = 2;
          (*(void (**)(uint64_t, void))(*(void *)v9 + 16))(v9, *(unsigned __int8 *)(a1 + 89));
        }
      }
      return;
    }
  }
  else
  {
    uint64_t v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      asStringMask((uint64_t *)__p, a4);
      uint64_t v12 = v20 >= 0 ? __p : (void **)__p[0];
      int v13 = *(_DWORD *)(a1 + 280);
      int v14 = *(unsigned __int8 *)(a1 + 268);
      *(_DWORD *)long long buf = 67110146;
      int v22 = a2;
      __int16 v23 = 1024;
      *(_DWORD *)BOOL v24 = a3;
      *(_WORD *)&void v24[4] = 2080;
      *(void *)&v24[6] = v12;
      __int16 v25 = 1024;
      BOOL v26 = v13;
      __int16 v27 = 1024;
      int v28 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - PDP context change [context: %d; state:%d; mask:%s; fInternetConnectionState:%d; fProbingState:%d]",
        buf,
        0x24u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    *(_DWORD *)(a1 + 280) = a3;
    int v8 = 1;
    if (a3) {
      goto LABEL_5;
    }
  }
  if (v8)
  {
    int v15 = *(unsigned __int8 *)(a1 + 268);
    int v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      asStringMask((uint64_t *)__p, a4);
      uint64_t v17 = v20 >= 0 ? __p : (void **)__p[0];
      int v18 = *(unsigned __int8 *)(a1 + 268);
      *(_DWORD *)long long buf = 67109890;
      int v22 = a2;
      __int16 v23 = 2080;
      *(void *)BOOL v24 = v17;
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&v24[10] = v18;
      __int16 v25 = 1024;
      BOOL v26 = v15 != 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - PDP context down [context: %d; mask:%s; fProbingState:%d; resetProbingState:%d]",
        buf,
        0x1Eu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v15) {
      *(unsigned char *)(a1 + 268) = 0;
    }
  }
}

uint64_t sub_100874428(uint64_t a1, int a2, unint64_t a3, int a4)
{
  int v8 = *(NSObject **)(a1 + 40);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_6;
  }
  asStringMask((uint64_t *)__p, a3);
  uint64_t v9 = v27 >= 0 ? __p : (void **)__p[0];
  int v10 = *(unsigned __int8 *)(a1 + 268);
  *(_DWORD *)long long buf = 67110146;
  *(_DWORD *)&uint8_t buf[4] = a2;
  *(_WORD *)id v29 = 2080;
  *(void *)&v29[2] = v9;
  __int16 v30 = 2048;
  unint64_t v31 = a3;
  __int16 v32 = 1024;
  int v33 = a4;
  __int16 v34 = 1024;
  int v35 = v10;
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - checking if data probe is required for contextId=%d mask=%s(0x%llx) ipFamily=%d probingState=%d", buf, 0x28u);
  if (v27 < 0)
  {
    operator delete(__p[0]);
    if ((a3 & 0x10000) == 0) {
      return 0;
    }
  }
  else
  {
LABEL_6:
    if ((a3 & 0x10000) == 0) {
      return 0;
    }
  }
  if (*(_DWORD *)(a1 + 48) != 3) {
    return 0;
  }
  *(void *)long long buf = 0;
  *(void *)id v29 = 0;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 64) + 48))(buf);
  uint64_t v11 = *(void *)buf;
  if (!*(void *)buf)
  {
LABEL_19:
    uint64_t v17 = 0;
    goto LABEL_20;
  }
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)buf + 776))(*(void *)buf);
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 952))(v11, v12, 15);
  uint64_t v14 = *(void *)buf;
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)buf + 776))(*(void *)buf);
  if (v13 == (*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v14 + 952))(v14, v15, 0))
  {
    int v16 = *(NSObject **)(a1 + 40);
    uint64_t v17 = 0;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v13;
    int v18 = "#I ProbeDataPlanManager - Cannot allow data plan probe on the same Internet context %d";
    id v19 = v16;
    uint32_t v20 = 8;
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)__p, v20);
    goto LABEL_19;
  }
  if (*(unsigned char *)(a1 + 288))
  {
    int v22 = *(NSObject **)(a1 + 40);
    uint64_t v17 = 0;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    LOWORD(__p[0]) = 0;
    int v18 = "#I ProbeDataPlanManager - skipping data probe";
    id v19 = v22;
    uint32_t v20 = 2;
    goto LABEL_18;
  }
  if (a3) {
    *(_DWORD *)(a1 + 264) = a2;
  }
  unsigned int v23 = *(unsigned __int8 *)(a1 + 268);
  if (v23 >= 2)
  {
    if (v23 == 3) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 248);
    if (v24)
    {
      *(unsigned char *)(a1 + 268) = 2;
      *(_DWORD *)(a1 + 276) = a4;
      __int16 v25 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - starting preactivate probe[fProbingState:IsProbing;]",
          (uint8_t *)__p,
          2u);
        uint64_t v24 = *(void *)(a1 + 248);
      }
      (*(void (**)(uint64_t, void))(*(void *)v24 + 16))(v24, *(unsigned __int8 *)(a1 + 89));
    }
  }
  uint64_t v17 = 1;
LABEL_20:
  if (*(void *)v29) {
    sub_10004D2C8(*(std::__shared_weak_count **)v29);
  }
  return v17;
}

void sub_1008747C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008747E8(uint64_t a1, int a2)
{
  return a2 ^ 1u;
}

uint64_t sub_1008747F0()
{
  return 0;
}

BOOL sub_1008747F8(uint64_t a1, unsigned char *a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    sub_100832A1C(a1, 0x3Fu);
    os_signpost_id_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = atomic_load((unsigned int *)(a1 + 236));
      LODWORD(v10) = 67109120;
      HIDWORD(v10) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - allowInternetInterfaceActivate - changing last subscribed error to %d", (uint8_t *)&v10, 8u);
    }
    if (!*a2)
    {
      *a2 = 1;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 48))(&v10);
      uint64_t v6 = v10;
      if (v10)
      {
        uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 776))(v10);
        int v8 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v6 + 952))(v6, v7, 0);
      }
      else
      {
        int v8 = 0;
      }
      sub_100830EB8((void *)a1, v8);
      if (v11) {
        sub_10004D2C8(v11);
      }
    }
    return 0;
  }
  else
  {
    return !*(unsigned char *)(a1 + 89) || *(unsigned char *)(a1 + 90) != 0;
  }
}

void sub_1008749B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void sub_1008749D0(uint64_t a1)
{
  *(unsigned char *)(a1 + 92) = 0;
  if (*(unsigned char *)(a1 + 288) || *(unsigned char *)(a1 + 217))
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - skipping probe", (uint8_t *)&v8, 2u);
    }
    sub_100874C20(a1, 1, 0, 0);
  }
  else if (*(_DWORD *)(a1 + 48) == 3 && *(unsigned char *)(a1 + 268) == 3)
  {
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - activatedInternetTrigger - early probe was done successfully. Do nothing", (uint8_t *)&v8, 2u);
    }
  }
  else
  {
    os_signpost_id_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - activatedInternetTrigger - set probing state [fProbingState:WillProbe;]",
        (uint8_t *)&v8,
        2u);
    }
    *(unsigned char *)(a1 + 268) = 1;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 24))(&v8);
    if (v9)
    {
      unsigned int v5 = std::__shared_weak_count::lock(v9);
      if (v5) {
        uint64_t v6 = v8;
      }
      else {
        uint64_t v6 = 0;
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
      if (*(void *)(a1 + 248) && v6 && (*(unsigned int (**)(uint64_t))(*(void *)v6 + 56))(v6))
      {
        uint64_t v7 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v8) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - starting probe[fProbingState:IsProbing;]",
            (uint8_t *)&v8,
            2u);
        }
        *(unsigned char *)(a1 + 268) = 2;
        (*(void (**)(void, void))(**(void **)(a1 + 248) + 16))(*(void *)(a1 + 248), *(unsigned __int8 *)(a1 + 89));
      }
      if (v5) {
        sub_10004D2C8(v5);
      }
    }
  }
}

void sub_100874C08(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100874C20(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Got probe response wasSuccessful: %d", buf, 8u);
  }
  if (*(unsigned char *)(a1 + 268) == 2)
  {
    if (a3 == 1
      && (*(unsigned int (**)(void))(**(void **)(a1 + 64) + 256))(*(void *)(a1 + 64))
      && !*(unsigned char *)(a1 + 89))
    {
      uint64_t v24 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - Probe didn't receive deterministic response letting user use internet", buf, 2u);
      }
      sub_100875BBC(a1, 1);
    }
    else
    {
      sub_100875BBC(a1, a2);
      if ((a2 & 1) == 0)
      {
        unsigned __int16 v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 264))(*(void *)(a1 + 64));
        if ((_BYTE)v14) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = v14 > 0xFFu;
        }
        if (v15 && a3 == 1)
        {
          if (*(unsigned char *)(a1 + 89))
          {
            uint64_t v17 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v18 = atomic_load((unsigned int *)(a1 + 236));
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v18;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Error (%d) activating internet PDP context. Continuing Monitor Mode.", buf, 8u);
            }
            sub_100831FA4(a1, -1.0);
          }
          else
          {
            sub_100832A1C(a1, 1u);
          }
          __int16 v25 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - Probe was not performed, not considering the probe as failure", buf, 2u);
          }
          *(void *)long long buf = 0;
          v42[0] = 0;
          (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 64) + 48))(buf);
          uint64_t v26 = *(void *)buf;
          if (*(void *)buf)
          {
            uint64_t v27 = (*(uint64_t (**)(void))(**(void **)buf + 776))(*(void *)buf);
            if (((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v26 + 952))(v26, v27, 0) & 0x80000000) == 0)
            {
              uint64_t v28 = *(void *)buf;
              ++*(_DWORD *)(a1 + 272);
              (*(void (**)(uint64_t))(*(void *)v28 + 1056))(v28);
            }
          }
          id v29 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int v39 = 0;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager telling internet context to deactivate", v39, 2u);
          }
          sub_100833DB0(a1, 0, 1);
          if (v42[0]) {
            sub_10004D2C8(v42[0]);
          }
        }
        else
        {
          *(_DWORD *)(a1 + 272) = 0;
          id v19 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager telling internet context to deactivate", buf, 2u);
          }
          sub_100833DB0(a1, 0, 0);
          BOOL v20 = *(unsigned char *)(a1 + 89) == 0;
          sub_100830EB8((void *)a1, *(_DWORD *)(a1 + 264));
          if (v20)
          {
            sub_1008326F4(a1);
          }
          else if (*(unsigned char *)(a1 + 89))
          {
            uint64_t v21 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v22 = atomic_load((unsigned int *)(a1 + 236));
              unsigned int v23 = **(std::__shared_weak_count ***)(a1 + 168);
              *(_DWORD *)long long buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v22;
              LOWORD(v42[0]) = 2048;
              *(std::__shared_weak_count **)((char *)v42 + 2) = v23;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Error (%d) activating PDP context %lld:.Continuing Monitor Mode.", buf, 0x12u);
            }
            sub_100831FA4(a1, -1.0);
          }
          else
          {
            sub_100832A1C(a1, 1u);
          }
        }
        int v12 = 0;
        goto LABEL_58;
      }
    }
    *(_DWORD *)(a1 + 272) = 0;
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - probe determined we're provisioned , pushing cached notification", buf, 2u);
    }
    sub_100832A1C(a1, 0);
    if (*(unsigned char *)(a1 + 89))
    {
      sub_100831998(a1, 1);
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 272))(*(void *)(a1 + 64)))
      {
        (*(void (**)(void))(**(void **)(a1 + 64) + 136))(*(void *)(a1 + 64));
        if ((DataUtils::lteishDataMode() & 1) == 0)
        {
          uint64_t v10 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Not in LTEish after New Plan, Reset BaseBand.", buf, 2u);
          }
          (*(void (**)(void))(**(void **)(a1 + 64) + 144))(*(void *)(a1 + 64));
        }
      }
    }
    sub_10083552C();
    if (a4)
    {
      uint64_t v11 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - Setting [fShouldSkipProbe:true];",
          buf,
          2u);
      }
      *(unsigned char *)(a1 + 288) = 1;
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 64) + 128))(*(void *)(a1 + 64), 14);
    (*(void (**)(void))(**(void **)(a1 + 64) + 88))();
    int v12 = 1;
LABEL_58:
    *(void *)long long buf = 0;
    v42[0] = 0;
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 64) + 48))(buf);
    uint64_t v30 = *(void *)buf;
    if (*(void *)buf)
    {
      unint64_t v31 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v32 = " to clean up";
        if (v12) {
          __int16 v32 = "";
        }
        *(_DWORD *)int v39 = 136315138;
        id v40 = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - reactivating internet context %s", v39, 0xCu);
        uint64_t v30 = *(void *)buf;
      }
      uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 776))(v30);
      sub_100058DB0(__p, "Probe response triggering connection reactivation");
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, void, void))(*(void *)v30 + 80))(v30, v33, 1, 1, __p, 0, 0);
      if (v38 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v12) {
      unsigned int v34 = 1;
    }
    else {
      unsigned int v34 = 2;
    }
    unsigned int v35 = atomic_load((unsigned int *)(a1 + 284));
    if (v34 != v35)
    {
      BOOL v36 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int v39 = 67109120;
        LODWORD(v40) = v34;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#I previous probe result changed to: [%d]", v39, 8u);
      }
      atomic_store(v34, (unsigned int *)(a1 + 284));
    }
    if (v42[0]) {
      sub_10004D2C8(v42[0]);
    }
    return;
  }
  int v13 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Got probe response when state not IsProbing. bail!", buf, 2u);
  }
  *(unsigned char *)(a1 + 268) = 0;
}

void sub_100875494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    sub_10004D2C8(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008754D0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 268))
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - set probing state on internet context deactivation[fProbingState:NotProbing;]",
        v3,
        2u);
    }
    *(unsigned char *)(a1 + 268) = 0;
  }
}

uint64_t sub_100875544(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a1 + 268) - 1;
  os_signpost_id_t v4 = *(NSObject **)(a1 + 40);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3 > 1)
  {
    if (v5)
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - connectionMaskTrigger - overriding connection mask to internet+probing", v8, 2u);
    }
    uint64_t v6 = 65537;
  }
  else
  {
    if (v5)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - connectionMaskTrigger - overriding connection mask to probing", buf, 2u);
    }
    uint64_t v6 = 0x10000;
  }
  *a2 = v6;
  return 1;
}

void sub_100875600(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I current data plan type ProbeDataPlan", (uint8_t *)v10, 2u);
  }
  unsigned int v3 = atomic_load((unsigned int *)(a1 + 284));
  os_signpost_id_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 268);
    int v6 = *(_DWORD *)(a1 + 272);
    int v7 = *(_DWORD *)(a1 + 276);
    if (*(unsigned char *)(a1 + 217)) {
      uint64_t v8 = "true";
    }
    else {
      uint64_t v8 = "false";
    }
    v10[0] = 67110146;
    v10[1] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    unsigned int v14 = v3;
    __int16 v15 = 1024;
    int v16 = v7;
    __int16 v17 = 2080;
    unsigned int v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I fProbingState:%d, fProbeNumTimeoutErrors:%d, fPreviousProbeResult:%d, fPendingProbeIPFamily:%d, fSupressDataPlanProbe:%s", (uint8_t *)v10, 0x24u);
  }
  uint64_t v9 = *(_DWORD **)(a1 + 248);
  if (v9) {
    sub_1008EE9E8(v9);
  }
}

void sub_100875744(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I ProbeDataPlanManager - set probing state on scheduling monitor mode timer [fProbingState:NotProbing;]",
      v3,
      2u);
  }
  *(unsigned char *)(a1 + 268) = 0;
}

void sub_1008757AC(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 89))
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 64) + 40))(*(void *)(a1 + 64)))
    {
      int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 56))(*(void *)(a1 + 64));
      int v5 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64));
        int v7 = *(unsigned __int8 *)(a1 + 93);
        LODWORD(v12) = 67109632;
        HIDWORD(v12) = v4;
        LOWORD(v13) = 1024;
        *(_DWORD *)((char *)&v13 + 2) = v6;
        HIWORD(v13) = 1024;
        int v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I mm callback: isprovisioned: %d, radio resetting?:%d, fHaveResetBaseband:%d", (uint8_t *)&v12, 0x14u);
      }
      if (((*(uint64_t (**)(void))(**(void **)(a1 + 64) + 64))(*(void *)(a1 + 64)) & 1) != 0
        || (v4 & 1) == 0 && *(unsigned char *)(a1 + 93))
      {
        uint64_t v8 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I BB is currently resetting, rescheduling MonitorMode timer", (uint8_t *)&v12, 2u);
        }
        sub_100831FA4(a1, a2);
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 64) + 24))(&v12);
        if (v13)
        {
          uint64_t v10 = std::__shared_weak_count::lock(v13);
          if (v10) {
            uint64_t v11 = v12;
          }
          else {
            uint64_t v11 = 0;
          }
          if (v13) {
            std::__shared_weak_count::__release_weak(v13);
          }
          if (v11) {
            LODWORD(v11) = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
          }
        }
        else
        {
          uint64_t v10 = 0;
          LODWORD(v11) = 0;
        }
        if (((*(unsigned int (**)(void))(**(void **)(a1 + 64) + 120))(*(void *)(a1 + 64)) ^ 1 | v11))
        {
          sub_100831DB8(a1, 1);
          sub_100834404(a1);
        }
        else
        {
          sub_10079487C((uint64_t *)(a1 + 56), 169);
          sub_100831FA4(a1, -1.0);
        }
        if (v10) {
          sub_10004D2C8(v10);
        }
      }
    }
    else
    {
      uint64_t v9 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v12) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Monitor Mode timer callback with no radio module, fatal error", (uint8_t *)&v12, 2u);
      }
    }
  }
}

void sub_100875AC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100875AE4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 248);
  if (v2)
  {
    sub_1008EE79C((uint64_t *)(v2 + 72), 0);
    *(_DWORD *)(v2 + 64) = 0;
    *(unsigned char *)(v2 + 80) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  atomic_store(0, (unsigned int *)(v1 + 284));
  *(unsigned char *)(v1 + 288) = 0;
  *(unsigned char *)(v1 + 268) = 0;
  *(void *)(v1 + 272) = 0;
  *(_DWORD *)(v1 + 280) = 0;
  return result;
}

uint64_t sub_100875B60(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 384))(a1, a2, 0);
}

BOOL sub_100875B94(uint64_t a1)
{
  unsigned int v1 = atomic_load((unsigned int *)(a1 + 236));
  unsigned int v2 = atomic_load((unsigned int *)(a1 + 284));
  return v2 == 1 && v1 != 0 || v1 == 63;
}

void sub_100875BBC(uint64_t a1, int a2)
{
  if (a2 && *(_DWORD *)(a1 + 48) == 3)
  {
    *(unsigned char *)(a1 + 268) = 3;
    unsigned int v2 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v6 = 0;
    unsigned int v3 = "#I ProbeDataPlanManager - set probing state [fProbingState:EarlyProbeDone;]";
    int v4 = (uint8_t *)&v6;
  }
  else
  {
    *(unsigned char *)(a1 + 268) = 0;
    unsigned int v2 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    __int16 v5 = 0;
    unsigned int v3 = "#I ProbeDataPlanManager - set probing state [fProbingState:NotProbing;]";
    int v4 = (uint8_t *)&v5;
  }
  _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
}

void sub_100875C64(void *a1, char a2, int a3, char a4)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000;
  _DWORD v10[2] = sub_100875D88;
  v10[3] = &unk_101A12730;
  v10[4] = a1;
  char v12 = a2;
  int v11 = a3;
  char v13 = a4;
  __int16 v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (uint64_t v6 = a1[1], (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_100875EC8;
  block[3] = &unk_101A12790;
  block[5] = v6;
  __int16 v15 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v10;
  dispatch_async(v9, block);
  if (v15) {
    sub_10004D2C8(v15);
  }
  sub_10004D2C8(v8);
}

void sub_100875D88(uint64_t a1)
{
}

void sub_100875DA0(uint64_t a1, char a2, int a3, char a4)
{
}

uint64_t sub_100875DA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 288))();
}

uint64_t sub_100875DD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 - 176) + 288))();
}

uint64_t sub_100875E08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 296))();
}

uint64_t sub_100875E38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 - 176) + 296))();
}

uint64_t sub_100875E68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 304))();
}

uint64_t sub_100875E98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 - 176) + 304))();
}

uint64_t sub_100875EC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100875ED8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100875EF4(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100875F04()
{
}

void sub_100875F74()
{
}

uint64_t sub_100875F98(uint64_t a1, void *a2, int a3)
{
  uint64_t v6 = (ctu::OsLogLogger *)(a1 + 8);
  int v7 = "reg.mdl.c2k";
  if (a3 == 2) {
    int v7 = "reg.mdl.c2k.2";
  }
  if (a3 == 1) {
    uint64_t v8 = "reg.mdl.c2k.1";
  }
  else {
    uint64_t v8 = v7;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v11, kCtLoggingSystemName, v8);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v12, &v11);
  ctu::OsLogLogger::OsLogLogger(v6, (const ctu::OsLogLogger *)v12);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v11);
  *(void *)a1 = off_101A127D0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(_DWORD *)(a1 + 40) = 16776960;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 112) = *a2;
  uint64_t v9 = a2[1];
  *(void *)(a1 + 120) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 128) = a3;
  return a1;
}

void sub_1008760C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  C2KRegistrationModelInterface::~C2KRegistrationModelInterface(v2);
  _Unwind_Resume(a1);
}

void sub_1008760F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned int v3 = (uint64_t *)a2[1];
  if (v3) {
    atomic_fetch_add_explicit(v3 + 2, 1uLL, memory_order_relaxed);
  }
  __int16 v5 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v3;
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)(a1 + 112));
  int v7 = ServiceMap;
  if ((v8 & 0x8000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v27 = v8;
  char v12 = sub_10004D37C(&v7[1].__m_.__sig, &v27);
  if (v12)
  {
    uint64_t v14 = v12[3];
    char v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v13);
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  char v13 = 0;
LABEL_13:
  int v16 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 72) = v13;
  if (v16) {
    sub_10004D2C8(v16);
  }
  __int16 v17 = (std::mutex *)Registry::getServiceMap(v15, *(Registry **)(a1 + 112));
  unsigned int v18 = v17;
  if ((v19 & 0x8000000000000000) != 0)
  {
    BOOL v20 = (unsigned __int8 *)(v19 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v21 = 5381;
    do
    {
      unint64_t v19 = v21;
      unsigned int v22 = *v20++;
      uint64_t v21 = (33 * v21) ^ v22;
    }
    while (v22);
  }
  std::mutex::lock(v17);
  unint64_t v27 = v19;
  unsigned int v23 = sub_10004D37C(&v18[1].__m_.__sig, &v27);
  if (v23)
  {
    uint64_t v25 = v23[3];
    uint64_t v24 = (std::__shared_weak_count *)v23[4];
    if (v24)
    {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v18);
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v24);
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  std::mutex::unlock(v18);
  uint64_t v24 = 0;
LABEL_23:
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v25;
  *(void *)(a1 + 88) = v24;
  if (v26) {
    sub_10004D2C8(v26);
  }
}

uint64_t sub_10087629C(uint64_t a1)
{
  CFTypeRef cf = 0;
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 64) + 80))(&cf);
  uint64_t v2 = (unsigned __int8 *)cf;
  if (cf) {
    unsigned int v3 = sub_100080934;
  }
  else {
    unsigned int v3 = 0;
  }
  int v4 = 2;
  if (v3)
  {
    buf[0] = 2;
    if (cf)
    {
      CFTypeID v5 = CFGetTypeID(cf);
      if (v5 == CFNumberGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)buf, v2, v6);
        int v4 = buf[0];
      }
      else
      {
        int v4 = 2;
      }
    }
  }
  *(unsigned char *)(a1 + 42) = v4;
  int v7 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I fCarrierSpecifiedDefaultRI = %d", buf, 8u);
  }
  sub_1000577C4(&cf);
  unint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 104);

  return v8(a1);
}

void sub_100876424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100876440(uint64_t a1)
{
  *(void *)a1 = off_101A127D0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 120);
  if (v2) {
    sub_10004D2C8(v2);
  }
  unsigned int v3 = *(std::__shared_weak_count **)(a1 + 104);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 88);
  if (v4) {
    sub_10004D2C8(v4);
  }
  CFTypeID v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5) {
    sub_10004D2C8(v5);
  }
  sub_100057D78((const void **)(a1 + 48));
  sub_10005D144(*(void **)(a1 + 24));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 8));

  C2KRegistrationModelInterface::~C2KRegistrationModelInterface((C2KRegistrationModelInterface *)a1);
}

void sub_1008764DC(uint64_t a1)
{
  sub_100876440(a1);

  operator delete();
}

void sub_100876514(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 24);
  unsigned int v3 = *(void **)(a1 + 16);
  if (v3 != (void *)(a1 + 24))
  {
    do
    {
      int v4 = *(NSObject **)(a1 + 8);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = asString();
        int v6 = *((unsigned __int8 *)v3 + 32);
        *(_DWORD *)long long buf = 136315394;
        uint64_t v16 = v5;
        __int16 v17 = 1024;
        int v18 = v6;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I RAT %s: Roaming Indicator %u", buf, 0x12u);
      }
      int v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v3[2];
          BOOL v9 = *v8 == (void)v3;
          unsigned int v3 = v8;
        }
        while (!v9);
      }
      unsigned int v3 = v8;
    }
    while (v8 != v2);
  }
  uint64_t v10 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(a1 + 41);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v16) = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Default Roaming Indicator %u", buf, 8u);
    uint64_t v10 = *(NSObject **)(a1 + 8);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(unsigned __int8 *)(a1 + 42);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v16) = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Carrier Default Roaming Indicator %u", buf, 8u);
    uint64_t v10 = *(NSObject **)(a1 + 8);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 56)) {
      char v13 = "true";
    }
    else {
      char v13 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v16 = (uint64_t)v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Is in 1x home system: %s", buf, 0xCu);
    uint64_t v10 = *(NSObject **)(a1 + 8);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 40)) {
      uint64_t v14 = "true";
    }
    else {
      uint64_t v14 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v16 = (uint64_t)v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Is data supported: %s", buf, 0xCu);
  }
}

uint64_t **sub_10087679C(uint64_t *a1, int a2, char a3)
{
  int v6 = (uint64_t **)(a1 + 3);
  uint64_t v5 = a1[3];
  int v7 = (uint64_t **)(a1 + 2);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v5;
        int v9 = *(_DWORD *)(v5 + 28);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *(void *)v8;
        int v6 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_9;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = *(void *)(v8 + 8);
      if (!v5)
      {
        int v6 = (uint64_t **)(v8 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t)(a1 + 3);
LABEL_9:
    uint64_t v10 = operator new(0x28uLL);
    v10[7] = a2;
    *((unsigned char *)v10 + 32) = 0;
    a1 = sub_100046C38(v7, v8, v6, (uint64_t *)v10);
    uint64_t v8 = (uint64_t)v10;
  }
  *(unsigned char *)(v8 + 32) = a3;
  uint64_t result = (uint64_t **)capabilities::ct::supportsVoiceCall((capabilities::ct *)a1);
  if (result)
  {
    if (a2 != 3) {
      return result;
    }
    int v13 = 5;
    int v12 = &v13;
  }
  else
  {
    if (a2 != 4) {
      return result;
    }
    int v14 = 5;
    int v12 = &v14;
  }
  uint64_t result = sub_100877FD0(v7, 5, v12);
  *((unsigned char *)result + 32) = a3;
  return result;
}

uint64_t sub_100876894(void *a1, int a2)
{
  uint64_t v2 = a1[3];
  if (!v2) {
    return (*(uint64_t (**)(void))(*a1 + 56))();
  }
  unsigned int v3 = a1 + 3;
  do
  {
    int v4 = *(_DWORD *)(v2 + 28);
    BOOL v5 = v4 < a2;
    if (v4 >= a2) {
      int v6 = (uint64_t *)v2;
    }
    else {
      int v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      unsigned int v3 = (void *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 != a1 + 3 && *((_DWORD *)v3 + 7) <= a2) {
    return *((unsigned __int8 *)v3 + 32);
  }
  else {
    return (*(uint64_t (**)(void))(*a1 + 56))();
  }
}

void sub_100876900(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 41) != a2)
  {
    int v4 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Setting default roaming indicator to %u", (uint8_t *)v5, 8u);
    }
    *(unsigned char *)(a1 + 41) = a2;
  }
}

uint64_t sub_1008769B8(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 41);
  if (result == 255) {
    return *(unsigned __int8 *)(a1 + 42);
  }
  return result;
}

CFDictionaryRef sub_1008769D4(uint64_t a1)
{
  unsigned int v5 = 0;
  CFDictionaryRef result = *(const __CFDictionary **)(a1 + 48);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"version");
    if (result)
    {
      uint64_t v2 = (int *)result;
      CFTypeID v3 = CFGetTypeID(result);
      if (v3 == CFNumberGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)&v5, v2, v4);
        return (const __CFDictionary *)v5;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100876A44(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2)
  {
    CFTypeID v3 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I ERI: Clearing and re-initializing data", buf, 2u);
      uint64_t v2 = *(void *)(a1 + 48);
    }
    *(void *)(a1 + 48) = 0;
    *(void *)long long buf = v2;
    sub_100057D78((const void **)buf);
  }
  CFURLRef url = 0;
  (*(void (**)(CFURLRef *__return_ptr))(**(void **)(a1 + 80) + 120))(&url);
  if (url) {
    CFNumberRef v4 = sub_1000FCC20;
  }
  else {
    CFNumberRef v4 = 0;
  }
  if (v4)
  {
    CFURLRef v5 = CFURLCreateCopyAppendingPathComponent(kCFAllocatorDefault, url, @"ERI.plist", 0);
    if (v5)
    {
      CFURLRef v45 = v5;
      CFReadStreamRef v6 = CFReadStreamCreateWithFile(kCFAllocatorDefault, v5);
      int v7 = v6;
      if (!v6)
      {
        uint64_t v8 = 0;
LABEL_55:
        sub_1000FE824((const void **)&v45);
        goto LABEL_56;
      }
      CFReadStreamRef v44 = v6;
      if (CFReadStreamOpen(v6))
      {
        uint64_t v8 = (uint64_t)CFPropertyListCreateWithStream(kCFAllocatorDefault, v7, 0, 0, 0, 0);
        CFReadStreamClose(v7);
        if (!v8)
        {
LABEL_54:
          sub_1007EF408((const void **)&v44);
          goto LABEL_55;
        }
        CFTypeID v9 = CFGetTypeID((CFTypeRef)v8);
        CFTypeID TypeID = CFDictionaryGetTypeID();
        uint64_t v11 = *(void *)(a1 + 48);
        if (v9 == TypeID) {
          uint64_t v12 = v8;
        }
        else {
          uint64_t v12 = 0;
        }
        *(void *)(a1 + 48) = v12;
        *(void *)long long buf = v11;
        sub_100057D78((const void **)buf);
        CFDictionaryRef v13 = *(const __CFDictionary **)(a1 + 48);
        int v14 = *(NSObject **)(a1 + 8);
        BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        if (v13)
        {
          if (v15
            && (*(_WORD *)long long buf = 0,
                _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I ERI: Data initialized successfully", buf, 2u), (CFDictionaryRef v13 = *(const __CFDictionary **)(a1 + 48)) == 0))
          {
            long long v43 = *(NSObject **)(a1 + 8);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I ERI: No current data", buf, 2u);
            }
          }
          else
          {
            CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v13, @"name");
            CFStringRef v17 = Value;
            if (Value && (CFTypeID v18 = CFGetTypeID(Value), v18 == CFStringGetTypeID()))
            {
              long long v55 = 0u;
              long long v56 = 0u;
              long long v54 = 0u;
              long long v52 = 0u;
              long long v53 = 0u;
              long long v50 = 0u;
              long long v51 = 0u;
              *(_OWORD *)long long buf = 0u;
              CFStringGetCString(v17, (char *)buf, 128, 0x8000100u);
              unint64_t v19 = *(NSObject **)(a1 + 8);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)CFNumberRef valuePtr = 136315138;
                v48[0] = buf;
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I ERI: Name = %s", valuePtr, 0xCu);
              }
            }
            else
            {
              BOOL v20 = *(NSObject **)(a1 + 8);
              if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Could not get name from ERI data", buf, 2u);
              }
            }
            CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), @"version");
            CFNumberRef v22 = v21;
            if (v21 && (CFTypeID v23 = CFGetTypeID(v21), v23 == CFNumberGetTypeID()))
            {
              *(_DWORD *)CFNumberRef valuePtr = 0;
              CFNumberGetValue(v22, kCFNumberIntType, valuePtr);
              uint64_t v24 = *(NSObject **)(a1 + 8);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = *(_DWORD *)valuePtr;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I ERI: Version = %d", buf, 8u);
              }
            }
            else
            {
              uint64_t v25 = *(NSObject **)(a1 + 8);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Could not get version from ERI data", buf, 2u);
              }
            }
            CFDictionaryRef v26 = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 48), @"roaming_indicator_table");
            CFDictionaryRef v27 = v26;
            if (v26 && (CFTypeID v28 = CFGetTypeID(v26), v28 == CFDictionaryGetTypeID()))
            {
              CFIndex Count = CFDictionaryGetCount(v27);
              uint64_t v30 = *(NSObject **)(a1 + 8);
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = Count;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I ERI: RIT count = %d", buf, 8u);
              }
            }
            else
            {
              unint64_t v31 = *(NSObject **)(a1 + 8);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Could not get roaming indicator table from ERI data", buf, 2u);
              }
              CFDictionaryRef v27 = 0;
              CFIndex Count = 0;
            }
            __int16 v32 = (const void **)malloc_type_malloc(8 * Count, 0xC0040B8AA526DuLL);
            CFDictionaryGetKeysAndValues(v27, v32, 0);
            if (Count >= 1)
            {
              for (uint64_t i = 0; Count != i; ++i)
              {
                CFTypeID v34 = CFGetTypeID(v32[i]);
                if (v34 == CFStringGetTypeID())
                {
                  CFStringRef v35 = (const __CFString *)v32[i];
                  long long v55 = 0u;
                  long long v56 = 0u;
                  long long v54 = 0u;
                  long long v52 = 0u;
                  long long v53 = 0u;
                  long long v50 = 0u;
                  long long v51 = 0u;
                  *(_OWORD *)long long buf = 0u;
                  CFStringGetCString(v35, (char *)buf, 128, 0x8000100u);
                  BOOL v36 = *(NSObject **)(a1 + 8);
                  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)CFNumberRef valuePtr = 67109378;
                    LODWORD(v48[0]) = i;
                    WORD2(v48[0]) = 2080;
                    *(void *)((char *)v48 + 6) = buf;
                    xpc_object_t v37 = valuePtr;
                    char v38 = v36;
                    int v39 = "#I ERI: keys[%02d] = %s";
                    uint32_t v40 = 18;
LABEL_50:
                    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v39, v37, v40);
                  }
                }
                else
                {
                  id v41 = *(NSObject **)(a1 + 8);
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)long long buf = 67109120;
                    *(_DWORD *)&uint8_t buf[4] = i;
                    xpc_object_t v37 = buf;
                    char v38 = v41;
                    int v39 = "#I ERI: keys[%02d] = <non-string key type>";
                    uint32_t v40 = 8;
                    goto LABEL_50;
                  }
                }
              }
            }
            free(v32);
          }
          uint64_t v8 = 1;
          *(unsigned char *)(a1 + 43) = 1;
          goto LABEL_54;
        }
        if (v15)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#N ERI: Failed to initialize ERI data", buf, 2u);
        }
      }
      uint64_t v8 = 0;
      goto LABEL_54;
    }
  }
  uint64_t v8 = 0;
LABEL_56:
  sub_1000FE824((const void **)&url);
  return v8;
}

void sub_1008770E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, const void *);
  sub_1000FE824((const void **)va);
  sub_1000FE824((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100877120(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

void sub_100877128(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 56);
  if (v2 != a2)
  {
    CFURLRef v5 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      CFReadStreamRef v6 = "true";
      if (v2) {
        int v7 = "true";
      }
      else {
        int v7 = "false";
      }
      if (!a2) {
        CFReadStreamRef v6 = "false";
      }
      int v8 = 136315394;
      CFTypeID v9 = v7;
      __int16 v10 = 2080;
      uint64_t v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Is home system is changing from %s to %s", (uint8_t *)&v8, 0x16u);
    }
    *(unsigned char *)(a1 + 56) = a2;
  }
}

void sub_10087720C(uint64_t a1, int a2, uint64_t *a3, void **a4)
{
  unint64_t v31 = 0;
  value = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v30 = v31;
    CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 48);
    if (v8)
    {
      CFDictionaryRef v9 = (const __CFDictionary *)CFDictionaryGetValue(v8, @"roaming_indicator_table");
      CFDictionaryRef v10 = v9;
      if (v9)
      {
        CFTypeID v11 = CFGetTypeID(v9);
        if (v11 == CFDictionaryGetTypeID())
        {
          *(void *)CFStringRef key = 0;
          if (sub_1008774CC((CFStringRef *)key, v12, v13, v14, v15, v16, v17, v18, a2))
          {
            v33[0] = *(const void **)key;
            CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(v10, *(const void **)key);
            CFDictionaryRef v20 = v19;
            if (!v19 || (CFTypeID v21 = CFGetTypeID(v19), v21 != CFDictionaryGetTypeID()))
            {
              sub_1000558F4(v33);
              goto LABEL_20;
            }
            sub_1000558F4(v33);
            if (CFDictionaryGetValueIfPresent(v20, v30, (const void **)&value) && value)
            {
              *a4 = value;
LABEL_20:
              sub_1000558F4((const void **)&v30);
              return;
            }
            CFTypeID v28 = *(NSObject **)(a1 + 8);
            if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_20;
            }
            if (*((char *)a3 + 23) >= 0) {
              id v29 = a3;
            }
            else {
              id v29 = (uint64_t *)*a3;
            }
            *(_DWORD *)CFStringRef key = 136315394;
            *(void *)&key[4] = v29;
            __int16 v35 = 1024;
            int v36 = a2;
            uint64_t v24 = "#N ERI: Key \"%s\" not present for indicator %d";
            uint64_t v25 = key;
            CFDictionaryRef v26 = v28;
            uint32_t v27 = 18;
LABEL_19:
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v24, v25, v27);
            goto LABEL_20;
          }
          CFTypeID v23 = *(NSObject **)(a1 + 8);
          if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_20;
          }
          LOWORD(v33[0]) = 0;
          uint64_t v24 = "#N ERI: Couldn't create indicatorCFStr";
          uint64_t v25 = (uint8_t *)v33;
LABEL_18:
          CFDictionaryRef v26 = v23;
          uint32_t v27 = 2;
          goto LABEL_19;
        }
      }
      CFTypeID v23 = *(NSObject **)(a1 + 8);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_20;
      }
      *(_WORD *)CFStringRef key = 0;
      uint64_t v24 = "#N ERI: Couldn't load ERI table";
    }
    else
    {
      CFTypeID v23 = *(NSObject **)(a1 + 8);
      if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_20;
      }
      *(_WORD *)CFStringRef key = 0;
      uint64_t v24 = "#N ERI: ERI data not loaded";
    }
    uint64_t v25 = key;
    goto LABEL_18;
  }
  CFNumberRef v22 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CFStringRef key = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#N ERI: failed to create CF representation of key", key, 2u);
  }
}

void sub_1008774A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  CFTypeID v3 = va_arg(va1, const void *);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_1000558F4((const void **)va1);
  sub_1000558F4((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1008774CC(CFStringRef *a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFAllocator *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  CFStringRef format = 0;
  if (ctu::cf::convert_copy((ctu::cf *)&format, (const __CFString **)"%d", (const char *)0x8000100, kCFAllocatorDefault, a5)&& (CFStringRef v10 = CFStringCreateWithFormatAndArguments(kCFAllocatorDefault, 0, format, &a9)) != 0)
  {
    *a1 = v10;
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
  }
  if (format) {
    CFRelease(format);
  }
  return v11;
}

void sub_100877564(uint64_t a1)
{
  v53[0] = 0;
  v53[1] = 0;
  uint64_t v54 = 0;
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  unsigned __int8 v56 = 0;
  CFTypeRef cf = 0;
  sub_100058DB0(__p, "text");
  sub_10087720C(a1, v2, (uint64_t *)__p, (void **)&cf);
  if (v58 < 0) {
    operator delete(*(void **)__p);
  }
  CFTypeRef v3 = cf;
  if (!cf || (CFTypeID v4 = CFGetTypeID(cf), v4 != CFStringGetTypeID()))
  {
    CFTypeRef cf = 0;
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    sub_100058DB0(__p, "text");
    sub_10087720C(a1, v2, (uint64_t *)__p, (void **)&cf);
    if (v58 < 0) {
      operator delete(*(void **)__p);
    }
    CFTypeRef v3 = cf;
    if (!cf) {
      goto LABEL_35;
    }
  }
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 != CFStringGetTypeID())
  {
LABEL_35:
    CFTypeID v21 = *(std::__shared_weak_count **)(a1 + 104);
    if (v21)
    {
      CFNumberRef v22 = std::__shared_weak_count::lock(v21);
      if (v22)
      {
        uint64_t v23 = *(void *)(a1 + 96);
        if (v23)
        {
          uint64_t v24 = *(NSObject **)(a1 + 8);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long __p = 67109120;
            *(_DWORD *)&__p[4] = v2;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#N ERI: Couldn't load data for indicator %d, aborting", __p, 8u);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 304))(v23, 0xFFFFFFFFLL);
          goto LABEL_44;
        }
      }
    }
    else
    {
      CFNumberRef v22 = 0;
    }
    uint64_t v25 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long __p = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Could not lock parent RegistrationModel!", __p, 2u);
      if (!v22) {
        goto LABEL_45;
      }
    }
    else if (!v22)
    {
LABEL_45:
      uint64_t v18 = 0;
      goto LABEL_46;
    }
LABEL_44:
    sub_10004D2C8(v22);
    goto LABEL_45;
  }
  ctu::cf::assign();
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 104);
  if (v6)
  {
    int v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      CFDictionaryRef v8 = v7;
      uint64_t v9 = *(void *)(a1 + 96);
      if (v9)
      {
        CFStringRef v10 = *(NSObject **)(a1 + 8);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v9 + 424))(__p, v9);
          IntCFStringRef Value = MCC::getIntValue((MCC *)__p);
          *(_DWORD *)long long buf = 67109120;
          int v61 = IntValue;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I QMI_NAS_REGISTERED with roaming indicator and derived MCC = %03d", buf, 8u);
          if (v59 < 0) {
            operator delete(*(void **)&__p[8]);
          }
          CFStringRef v10 = *(NSObject **)(a1 + 8);
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = v53;
          if (v54 < 0) {
            uint64_t v12 = (void **)v53[0];
          }
          *(_DWORD *)long long __p = 67109378;
          *(_DWORD *)&__p[4] = v2;
          *(_WORD *)&__p[8] = 2080;
          *(void *)&__p[10] = v12;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I ERI: Indicator %d:\"text\" = \"%s\"", __p, 0x12u);
        }
      }
      sub_10004D2C8(v8);
    }
  }
  CFTypeRef cf = 0;
  sub_100058DB0(__p, "Data_Supported");
  sub_10087720C(a1, v2, (uint64_t *)__p, (void **)&cf);
  if (v58 < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v13 = (BOOL *)cf;
  if (cf)
  {
    CFTypeID v14 = CFGetTypeID(cf);
    if (v14 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v56, v13, v15);
      uint64_t v16 = *(NSObject **)(a1 + 8);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        if (v56) {
          uint64_t v17 = "true";
        }
        else {
          uint64_t v17 = "false";
        }
        *(_DWORD *)long long __p = 136315138;
        *(void *)&__p[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I fDataSupportedBasedOnRoamingIndicator = %s", __p, 0xCu);
      }
    }
  }
  CFTypeRef cf = 0;
  sub_100058DB0(__p, "is_home_system");
  sub_10087720C(a1, v2, (uint64_t *)__p, (void **)&cf);
  if (v58 < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v18 = (BOOL *)cf;
  __p[0] = 0;
  if (cf)
  {
    CFTypeID v19 = CFGetTypeID(cf);
    if (v19 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)__p, v18, v20);
      uint64_t v18 = (BOOL *)(__p[0] != 0);
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_46:
  int v26 = v56;
  int v27 = *(unsigned __int8 *)(a1 + 40);
  if (v27 != v56)
  {
    CFTypeID v28 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long __p = 67109376;
      *(_DWORD *)&__p[4] = v27;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = v26;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I ERI: Data_Supported Status:Current %d Applied %d", __p, 0xEu);
    }
    *(unsigned char *)(a1 + 40) = v26;
  }
  (*(void (**)(uint64_t, BOOL *))(*(void *)a1 + 120))(a1, v18);
  id v29 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v29)
  {
    unint64_t v31 = 0;
    goto LABEL_62;
  }
  unint64_t v31 = std::__shared_weak_count::lock(v29);
  if (!v31 || (uint64_t v32 = *(void *)(a1 + 96)) == 0)
  {
LABEL_62:
    CFReadStreamRef v44 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long __p = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Could not lock parent RegistrationModel for updating configuration", __p, 2u);
    }
    goto LABEL_64;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v30, *(Registry **)(a1 + 112));
  CFTypeID v34 = ServiceMap;
  if (v35 < 0)
  {
    int v36 = (unsigned __int8 *)(v35 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v37 = 5381;
    do
    {
      uint64_t v35 = v37;
      unsigned int v38 = *v36++;
      uint64_t v37 = (33 * v37) ^ v38;
    }
    while (v38);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long __p = v35;
  int v39 = sub_10004D37C(&v34[1].__m_.__sig, (unint64_t *)__p);
  if (!v39)
  {
    uint64_t v41 = 0;
LABEL_70:
    std::mutex::unlock(v34);
    uint32_t v40 = 0;
    char v42 = 1;
    if (!v41)
    {
LABEL_59:
      long long v43 = *(NSObject **)(a1 + 8);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long __p = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Could not get ActivationInterface for querying service provisioned state", __p, 2u);
      }
LABEL_80:
      if ((v42 & 1) == 0) {
        sub_10004D2C8(v40);
      }
      if (SHIBYTE(v54) < 0)
      {
        sub_10004FC84(__dst, v53[0], (unint64_t)v53[1]);
        if (SHIBYTE(v54) < 0)
        {
          sub_10004FC84(v49, v53[0], (unint64_t)v53[1]);
          goto LABEL_86;
        }
      }
      else
      {
        *(_OWORD *)std::string __dst = *(_OWORD *)v53;
        uint64_t v52 = v54;
      }
      *(_OWORD *)long long v49 = *(_OWORD *)v53;
      uint64_t v50 = v54;
LABEL_86:
      (*(void (**)(uint64_t, void **, void **, uint64_t))(*(void *)v32 + 344))(v32, __dst, v49, 7);
      if (SHIBYTE(v50) < 0) {
        operator delete(v49[0]);
      }
      if (SHIBYTE(v52) < 0) {
        operator delete(__dst[0]);
      }
      goto LABEL_64;
    }
    goto LABEL_71;
  }
  uint64_t v41 = v39[3];
  uint32_t v40 = (std::__shared_weak_count *)v39[4];
  if (!v40) {
    goto LABEL_70;
  }
  atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v34);
  atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v40);
  char v42 = 0;
  if (!v41) {
    goto LABEL_59;
  }
LABEL_71:
  int v45 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 768))(v32);
  long long v46 = (capabilities::ct *)(*(uint64_t (**)(uint64_t))(*(void *)v41 + 56))(v41);
  if (v45 == 2) {
    int v47 = 0;
  }
  else {
    int v47 = (int)v46;
  }
  if (v47 != 1 || !capabilities::ct::supportsVoiceCall(v46)) {
    goto LABEL_80;
  }
  long long v48 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long __p = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#N Aborting ERI operator name lookup, baseband is not provisioned", __p, 2u);
  }
  if ((v42 & 1) == 0) {
    sub_10004D2C8(v40);
  }
LABEL_64:
  if (v31) {
    sub_10004D2C8(v31);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(v53[0]);
  }
}

void sub_100877DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,void *a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_10004D2C8(v39);
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

void sub_100877E80(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100877EE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100877F24(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100877F5C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100877F8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t **sub_100877FD0(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  CFTypeID v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        CFTypeID v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      CFTypeID v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = operator new(0x28uLL);
    v9[7] = *a3;
    *((unsigned char *)v9 + 32) = 0;
    sub_100046C38(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

uint64_t sub_10087807C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v8 = (const std::string *)(a1 + 144);
  uint64_t v9 = *(std::string **)(a4 + 16);
  if (!v9) {
    operator new();
  }
  std::string::operator=(v9, v8);
  CFStringRef v10 = *(std::string **)(a4 + 24);
  if (!v10) {
    operator new();
  }
  std::string::operator=(v10, (const std::string *)(a1 + 168));
  uint64_t v11 = *(std::string **)(a4 + 32);
  if (!v11) {
    operator new();
  }
  std::string::operator=(v11, (const std::string *)(a1 + 16));
  uint64_t v12 = *(std::string **)(a4 + 56);
  if (!v12) {
    operator new();
  }
  std::string::operator=(v12, (const std::string *)(a1 + 96));
  uint64_t v13 = *(std::string **)(a4 + 64);
  if (!v13) {
    operator new();
  }
  std::string::operator=(v13, (const std::string *)(a1 + 120));
  CFTypeID v14 = *(std::string **)(a4 + 88);
  if (!v14) {
    operator new();
  }
  std::string::operator=(v14, (const std::string *)(a1 + 40));
  CFBooleanRef v15 = *(std::string **)(a4 + 96);
  char v16 = *(unsigned char *)(a1 + 89);
  char v17 = *(unsigned char *)(a4 + 128);
  *(unsigned char *)(a4 + 128) = v17 | 8;
  *(unsigned char *)(a4 + 123) = v16;
  char v18 = *(unsigned char *)(a1 + 88);
  *(unsigned char *)(a4 + 128) = v17 | 0x18;
  *(unsigned char *)(a4 + 124) = v18;
  char v19 = *(unsigned char *)(a1 + 91);
  *(unsigned char *)(a4 + 128) = v17 | 0x1C;
  *(unsigned char *)(a4 + 122) = v19;
  char v20 = *(unsigned char *)(a1 + 90);
  *(unsigned char *)(a4 + 128) = v17 | 0x1E;
  *(unsigned char *)(a4 + 121) = v20;
  CFTypeID v21 = (const std::string *)(a1 + 64);
  if (!v15) {
    operator new();
  }
  uint64_t result = (uint64_t)std::string::operator=(v15, v21);
  if (a2)
  {
    *(unsigned char *)(a4 + 128) |= 1u;
    *(unsigned char *)(a4 + 120) = 1;
  }
  if (*(unsigned char *)a3)
  {
    uint64_t v23 = *(std::string **)(a4 + 72);
    if (!v23) {
      operator new();
    }
    std::string::operator=(v23, (const std::string *)(a3 + 8));
    if (!*(unsigned char *)a3) {
      goto LABEL_54;
    }
    uint64_t v24 = *(std::string **)(a4 + 48);
    if (!v24) {
      operator new();
    }
    std::string::operator=(v24, (const std::string *)(a3 + 32));
    if (!*(unsigned char *)a3) {
      goto LABEL_54;
    }
    uint64_t v25 = *(std::string **)(a4 + 40);
    if (!v25) {
      operator new();
    }
    std::string::operator=(v25, (const std::string *)(a3 + 56));
    if (!*(unsigned char *)a3) {
      goto LABEL_54;
    }
    int v26 = *(std::string **)(a4 + 8);
    if (!v26) {
      operator new();
    }
    std::string::operator=(v26, (const std::string *)(a3 + 80));
    uint64_t result = sub_1007BBD98(a4);
    if (!*(unsigned char *)a3) {
      goto LABEL_54;
    }
    if (*(unsigned char *)(a3 + 177))
    {
      uint64_t v27 = *(void *)(a4 + 112);
      int v28 = *(unsigned __int8 *)(a3 + 176);
      *(unsigned char *)(v27 + 88) |= 8u;
      *(_DWORD *)(v27 + 80) = v28;
      if (!*(unsigned char *)a3) {
        goto LABEL_54;
      }
    }
    if (*(unsigned char *)(a3 + 208))
    {
      uint64_t v29 = *(void *)(a4 + 112);
      sub_1005E48E8(v29);
      uint64_t result = (uint64_t)std::string::operator=(*(std::string **)(v29 + 64), (const std::string *)(a3 + 184));
      if (!*(unsigned char *)a3) {
        goto LABEL_54;
      }
    }
    if (*(unsigned char *)(a3 + 240))
    {
      uint64_t v30 = *(void *)(a4 + 112);
      sub_1005E495C(v30);
      uint64_t result = (uint64_t)std::string::operator=(*(std::string **)(v30 + 40), (const std::string *)(a3 + 216));
      if (!*(unsigned char *)a3) {
        goto LABEL_54;
      }
    }
    if (*(unsigned char *)(a3 + 272))
    {
      uint64_t v31 = *(void *)(a4 + 112);
      sub_1005E49D0(v31);
      uint64_t result = (uint64_t)std::string::operator=(*(std::string **)(v31 + 32), (const std::string *)(a3 + 248));
      if (!*(unsigned char *)a3) {
        goto LABEL_54;
      }
    }
    if (*(unsigned char *)(a3 + 304))
    {
      uint64_t v32 = *(void *)(a4 + 112);
      sub_1005E4A44(v32);
      uint64_t result = (uint64_t)std::string::operator=(*(std::string **)(v32 + 56), (const std::string *)(a3 + 280));
      if (!*(unsigned char *)a3) {
        goto LABEL_54;
      }
    }
    if (*(unsigned char *)(a3 + 401))
    {
      uint64_t v33 = *(void *)(a4 + 112);
      char v34 = *(unsigned char *)(a3 + 400);
      *(unsigned char *)(v33 + 88) |= 0x20u;
      *(unsigned char *)(v33 + 85) = v34;
      if (!*(unsigned char *)a3) {
        goto LABEL_54;
      }
    }
    uint64_t v35 = *(void *)(a4 + 112);
    int v36 = *(unsigned __int8 *)(a3 + 344);
    *(unsigned char *)(v35 + 88) |= 2u;
    *(_DWORD *)(v35 + 72) = v36;
    if (!*(unsigned char *)a3) {
      goto LABEL_54;
    }
    uint64_t v37 = *(void *)(a4 + 112);
    char v38 = *(unsigned char *)(a3 + 345);
    *(unsigned char *)(v37 + 88) |= 0x10u;
    *(unsigned char *)(v37 + 84) = v38;
    if (!*(unsigned char *)a3) {
      goto LABEL_54;
    }
    uint64_t v39 = *(void *)(a4 + 112);
    int v40 = *(unsigned __int8 *)(a3 + 346);
    *(unsigned char *)(v39 + 88) |= 4u;
    *(_DWORD *)(v39 + 76) = v40;
    if (!*(unsigned char *)a3) {
      goto LABEL_54;
    }
    uint64_t v41 = *(unsigned __int8 *)(a3 + 343);
    if ((v41 & 0x80u) != 0) {
      uint64_t v41 = *(void *)(a3 + 328);
    }
    if (v41
      && (uint64_t v42 = *(void *)(a4 + 112),
          sub_1005E4AB8(v42),
          uint64_t result = (uint64_t)std::string::operator=(*(std::string **)(v42 + 48), (const std::string *)(a3 + 320)),
          !*(unsigned char *)a3)
      || *(unsigned char *)(a3 + 376)
      && (uint64_t v43 = *(void *)(a4 + 112),
          sub_1005E4B2C(v43),
          uint64_t result = (uint64_t)std::string::operator=(*(std::string **)(v43 + 16), (const std::string *)(a3 + 352)),
          !*(unsigned char *)a3))
    {
LABEL_54:
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    }
    if (*(unsigned char *)(a3 + 392))
    {
      uint64_t v44 = *(void *)(a4 + 112);
      uint64_t v45 = *(void *)(a3 + 384);
      *(unsigned char *)(v44 + 88) |= 1u;
      *(void *)(v44 + 8) = v45;
    }
  }
  return result;
}

BOOL sub_1008786BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  CFTypeRef v3 = *(const std::string **)(a1 + 32);
  if (!v3) {
    return v3 != 0;
  }
  std::string::operator=((std::string *)(a2 + 16), v3);
  int v7 = *(const std::string **)(a1 + 88);
  if (v7) {
    std::string::operator=((std::string *)(a2 + 40), v7);
  }
  int v8 = *(const std::string **)(a1 + 96);
  if (v8) {
    std::string::operator=((std::string *)(a2 + 64), v8);
  }
  *(unsigned char *)(a2 + 89) = *(unsigned char *)(a1 + 123) & (*(unsigned __int8 *)(a1 + 128) << 28 >> 31);
  *(unsigned char *)(a2 + 88) = *(unsigned char *)(a1 + 124) & (*(unsigned __int8 *)(a1 + 128) << 27 >> 31);
  *(unsigned char *)(a2 + 91) = *(unsigned char *)(a1 + 122) & (*(unsigned __int8 *)(a1 + 128) << 29 >> 31);
  *(unsigned char *)(a2 + 90) = *(unsigned char *)(a1 + 121) & (*(unsigned __int8 *)(a1 + 128) << 30 >> 31);
  uint64_t v9 = *(const std::string **)(a1 + 16);
  if (v9) {
    std::string::operator=((std::string *)(a2 + 144), v9);
  }
  CFStringRef v10 = *(const std::string **)(a1 + 24);
  if (v10) {
    std::string::operator=((std::string *)(a2 + 168), v10);
  }
  uint64_t v11 = *(const std::string **)(a1 + 56);
  if (v11) {
    std::string::operator=((std::string *)(a2 + 96), v11);
  }
  uint64_t v12 = *(const std::string **)(a1 + 64);
  if (v12) {
    std::string::operator=((std::string *)(a2 + 120), v12);
  }
  uint64_t v13 = *(const std::string **)(a1 + 72);
  if (v13) {
    std::string::operator=((std::string *)a3, v13);
  }
  CFTypeID v14 = *(const std::string **)(a1 + 48);
  if (v14) {
    std::string::operator=((std::string *)(a3 + 24), v14);
  }
  CFBooleanRef v15 = *(const std::string **)(a1 + 40);
  if (v15) {
    std::string::operator=((std::string *)(a3 + 48), v15);
  }
  char v16 = *(const std::string **)(a1 + 8);
  if (v16) {
    std::string::operator=((std::string *)(a3 + 72), v16);
  }
  uint64_t v17 = *(void *)(a1 + 112);
  if (!v17) {
    return v3 != 0;
  }
  if ((*(unsigned char *)(v17 + 88) & 8) != 0)
  {
    *(_WORD *)(a3 + 168) = *(unsigned __int8 *)(v17 + 80) | 0x100;
    uint64_t v17 = *(void *)(a1 + 112);
  }
  char v18 = *(const std::string **)(v17 + 64);
  if (v18)
  {
    sub_100093B44((std::string *)(a3 + 176), v18);
    uint64_t v17 = *(void *)(a1 + 112);
  }
  char v19 = *(const std::string **)(v17 + 40);
  if (v19)
  {
    sub_100093B44((std::string *)(a3 + 208), v19);
    uint64_t v17 = *(void *)(a1 + 112);
  }
  char v20 = *(const std::string **)(v17 + 32);
  if (v20)
  {
    sub_100093B44((std::string *)(a3 + 240), v20);
    uint64_t v17 = *(void *)(a1 + 112);
  }
  CFTypeID v21 = *(const std::string **)(v17 + 56);
  if (v21)
  {
    sub_100093B44((std::string *)(a3 + 272), v21);
    uint64_t v17 = *(void *)(a1 + 112);
  }
  char v22 = *(unsigned char *)(v17 + 88);
  if ((v22 & 2) != 0)
  {
    *(unsigned char *)(a3 + 336) = *(_DWORD *)(v17 + 72);
    char v22 = *(unsigned char *)(v17 + 88);
    if ((v22 & 0x10) == 0)
    {
LABEL_35:
      if ((v22 & 4) == 0) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
  }
  else if ((*(unsigned char *)(v17 + 88) & 0x10) == 0)
  {
    goto LABEL_35;
  }
  *(unsigned char *)(a3 + 337) = *(unsigned char *)(v17 + 84);
  if ((*(unsigned char *)(v17 + 88) & 4) != 0) {
LABEL_36:
  }
    *(unsigned char *)(a3 + 338) = *(_DWORD *)(v17 + 76);
LABEL_37:
  uint64_t v23 = *(const std::string **)(v17 + 48);
  if (v23)
  {
    std::string::operator=((std::string *)(a3 + 312), v23);
    uint64_t v17 = *(void *)(a1 + 112);
  }
  uint64_t v24 = *(const std::string **)(v17 + 16);
  if (v24)
  {
    sub_100093B44((std::string *)(a3 + 344), v24);
    uint64_t v17 = *(void *)(a1 + 112);
  }
  char v25 = *(unsigned char *)(v17 + 88);
  if ((v25 & 0x20) == 0)
  {
    if ((*(unsigned char *)(v17 + 88) & 1) == 0) {
      goto LABEL_43;
    }
LABEL_50:
    *(void *)(a3 + 376) = *(void *)(v17 + 8);
    *(unsigned char *)(a3 + 384) = 1;
    uint64_t v17 = *(void *)(a1 + 112);
    if ((*(unsigned char *)(v17 + 88) & 0x20) == 0) {
      return v3 != 0;
    }
    goto LABEL_44;
  }
  *(_WORD *)(a3 + 392) = *(unsigned __int8 *)(v17 + 85) | 0x100;
  uint64_t v17 = *(void *)(a1 + 112);
  char v25 = *(unsigned char *)(v17 + 88);
  if (v25) {
    goto LABEL_50;
  }
LABEL_43:
  if ((v25 & 0x20) != 0) {
LABEL_44:
  }
    *(_WORD *)(a3 + 392) = *(unsigned __int8 *)(v17 + 85) | 0x100;
  return v3 != 0;
}

void sub_100878924(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v7 = a1[3] == 3;
  int v8 = *(PB::Data **)(a4 + 8);
  char v9 = *(unsigned char *)(a4 + 88);
  *(unsigned char *)(a4 + 88) = v9 | 0x20;
  *(unsigned char *)(a4 + 84) = v7;
  int v10 = a1[3];
  *(unsigned char *)(a4 + 88) = v9 | 0x21;
  *(_DWORD *)(a4 + 64) = v10;
  int v11 = a1[1];
  *(unsigned char *)(a4 + 88) = v9 | 0x29;
  *(_DWORD *)(a4 + 76) = v11;
  if (!v8) {
    operator new();
  }
  PB::Data::assign(v8, (const unsigned __int8 *)a1 + 16, (const unsigned __int8 *)a1 + 32);
  int v12 = *a1;
  *(unsigned char *)(a4 + 88) |= 0x10u;
  *(_DWORD *)(a4 + 80) = v12;
  uint64_t v13 = *((unsigned __int8 *)a1 + 55);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *((void *)a1 + 5);
  }
  if (v13)
  {
    CFTypeID v14 = *(std::string **)(a4 + 56);
    if (!v14) {
      operator new();
    }
    std::string::operator=(v14, (const std::string *)(a1 + 8));
  }
  if (*(unsigned char *)a3 && *(_DWORD *)(a3 + 8) == a1[1])
  {
    uint64_t v15 = *(unsigned __int8 *)(a3 + 39);
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *(void *)(a3 + 24);
    }
    if (v15)
    {
      char v16 = *(std::string **)(a4 + 40);
      if (!v16) {
        operator new();
      }
      std::string::operator=(v16, (const std::string *)(a3 + 16));
      if (!*(unsigned char *)a3) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
    }
    uint64_t v17 = (void **)(a3 + 40);
    if (*(char *)(a3 + 63) < 0)
    {
      unint64_t v18 = *(void *)(a3 + 48);
      if (!v18) {
        goto LABEL_27;
      }
      sub_10004FC84(&__dst, *v17, v18);
    }
    else
    {
      if (!*(unsigned char *)(a3 + 63)) {
        goto LABEL_27;
      }
      long long __dst = *(_OWORD *)v17;
      uint64_t v24 = *(void *)(a3 + 56);
    }
    uint64_t v19 = *(void *)(a4 + 48);
    if (!v19) {
      operator new();
    }
    if (*(char *)(v19 + 23) < 0) {
      operator delete(*(void **)v19);
    }
    long long v20 = __dst;
    *(void *)(v19 + 16) = v24;
    *(_OWORD *)uint64_t v19 = v20;
  }
LABEL_27:
  int v21 = a1[2];
  *(unsigned char *)(a4 + 88) |= 4u;
  *(_DWORD *)(a4 + 72) = v21;
  if (*((unsigned char *)a1 + 80))
  {
    uint64_t v22 = *((void *)a1 + 7);
    if (v22 != *((void *)a1 + 8))
    {
      uint64_t v26 = 0;
      memset(v25, 0, sizeof(v25));
      sub_1000C5AB4((uint64_t)v25, v22);
      sub_1005EAFD8();
    }
  }
}

void sub_100878F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100878F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned char *)(a1 + 88) & 2) != 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4 || *(void *)(v4 + 8) != 16) {
    return 0;
  }
  *(_OWORD *)(a2 + 16) = *(_OWORD *)*(void *)v4;
  int v7 = *(_DWORD *)(a1 + 76) & (*(unsigned __int8 *)(a1 + 88) << 28 >> 31);
  *(_DWORD *)(a2 + 4) = v7;
  *(_DWORD *)a3 = v7;
  *(_DWORD *)(a2 + 12) = 0;
  int v8 = *(unsigned __int8 *)(a1 + 88);
  if (v8)
  {
    int v9 = *(_DWORD *)(a1 + 64);
  }
  else
  {
    if ((v8 & 0x20) == 0) {
      goto LABEL_13;
    }
    if (*(unsigned char *)(a1 + 84)) {
      int v9 = 3;
    }
    else {
      int v9 = 2;
    }
  }
  *(_DWORD *)(a2 + 12) = v9;
  int v8 = *(unsigned __int8 *)(a1 + 88);
LABEL_13:
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 80) & (v8 << 27 >> 31);
  if ((*(unsigned char *)(a1 + 88) & 4) != 0)
  {
    int v12 = *(_DWORD *)(a1 + 72);
    if ((v12 - 1) >= 3) {
      int v12 = 0;
    }
    *(_DWORD *)(a2 + 8) = v12;
  }
  uint64_t v13 = *(void *)(a1 + 56);
  if (v13)
  {
    if ((*(char *)(v13 + 23) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(v13 + 23)) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    if (*(void *)(v13 + 8)) {
LABEL_20:
    }
      std::string::operator=((std::string *)(a2 + 32), (const std::string *)v13);
  }
LABEL_21:
  uint64_t v14 = *(void *)(a1 + 40);
  if (!v14) {
    goto LABEL_25;
  }
  if ((*(char *)(v14 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v14 + 23)) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (*(void *)(v14 + 8)) {
LABEL_24:
  }
    std::string::operator=((std::string *)(a3 + 8), (const std::string *)v14);
LABEL_25:
  uint64_t v15 = *(void *)(a1 + 48);
  if (!v15) {
    goto LABEL_29;
  }
  if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v15 + 23)) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (*(void *)(v15 + 8)) {
LABEL_28:
  }
    std::string::operator=((std::string *)(a3 + 32), (const std::string *)v15);
LABEL_29:
  if (*(void *)(a1 + 24) == *(void *)(a1 + 16))
  {
    if (*(unsigned char *)(a2 + 80))
    {
      *(void *)&long long v32 = a2 + 56;
      sub_1000C57C8((void ***)&v32);
      *(unsigned char *)(a2 + 80) = 0;
    }
    return 1;
  }
  long long v32 = 0uLL;
  char v16 = (void *)(a2 + 56);
  *(void *)&long long v33 = 0;
  sub_1008793A4(a2 + 56, (uint64_t)&v32);
  *(void *)&v62[0] = &v32;
  sub_1000C57C8((void ***)v62);
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 24);
  if (v17 == v18) {
    return 1;
  }
  uint64_t v19 = (uint64_t **)(a3 + 56);
  uint64_t v20 = v17 + 8;
  do
  {
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v63 = 0;
    memset(v62, 0, sizeof(v62));
    long long v55 = 0u;
    long long v56 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v32 = 0u;
    BOOL v10 = sub_1008786BC(v21, (uint64_t)v62, (uint64_t)&v32);
    if (v10)
    {
      long long v57 = *(void ***)(v21 + 32);
      uint64_t v22 = sub_100879CE8(v19, v57, (uint64_t)&unk_10144E20E, (long long **)&v57);
      sub_100312ECC((uint64_t)(v22 + 7), (uint64_t)&v32);
      unint64_t v24 = *(void *)(a2 + 64);
      unint64_t v23 = *(void *)(a2 + 72);
      if (v24 >= v23)
      {
        unint64_t v26 = 0x84BDA12F684BDA13 * ((uint64_t)(v24 - *v16) >> 3);
        unint64_t v27 = v26 + 1;
        if (v26 + 1 > 0x12F684BDA12F684) {
          sub_10006A748();
        }
        unint64_t v28 = 0x84BDA12F684BDA13 * ((uint64_t)(v23 - *v16) >> 3);
        if (2 * v28 > v27) {
          unint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x97B425ED097B42) {
          unint64_t v29 = 0x12F684BDA12F684;
        }
        else {
          unint64_t v29 = v27;
        }
        uint64_t v61 = a2 + 72;
        if (v29) {
          uint64_t v30 = (long long *)sub_1000C5FD0(a2 + 72, v29);
        }
        else {
          uint64_t v30 = 0;
        }
        long long v57 = (void **)v30;
        uint64_t v58 = (uint64_t)v30 + 216 * v26;
        uint64_t v59 = v58;
        char v60 = (char *)v30 + 216 * v29;
        sub_1000C5AB4(v58, (uint64_t)v62);
        v59 += 216;
        sub_1003F229C((uint64_t *)(a2 + 56), &v57);
        unint64_t v25 = *(void *)(a2 + 64);
        sub_1003F2414((uint64_t)&v57);
      }
      else
      {
        sub_1000C5AB4(*(void *)(a2 + 64), (uint64_t)v62);
        unint64_t v25 = v24 + 216;
        *(void *)(a2 + 64) = v25;
      }
      *(void *)(a2 + 64) = v25;
    }
    else if (*(unsigned char *)(a2 + 80))
    {
      long long v57 = (void **)(a2 + 56);
      sub_1000C57C8(&v57);
      *(unsigned char *)(a2 + 80) = 0;
    }
    sub_1000C54EC((uint64_t)&v32);
    sub_1000C584C((uint64_t)v62);
    BOOL v31 = v20 != v18 && v10;
    v20 += 8;
  }
  while (v31);
  return v10;
}

void sub_100879354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000C57C8(&a65);
  _Unwind_Resume(a1);
}

uint64_t sub_1008793A4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    sub_1000C8948((void **)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

BOOL sub_100879420(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (v2)
  {
    sub_1005E4B2C(a2);
    std::string::operator=(*(std::string **)(a2 + 16), (const std::string *)a1);
    int v5 = *(_DWORD *)(a1 + 24);
    *(unsigned char *)(a2 + 40) |= 1u;
    *(_DWORD *)(a2 + 32) = v5;
    sub_1005E5534(a2);
    std::string::operator=(*(std::string **)(a2 + 8), (const std::string *)(a1 + 32));
    sub_100879C74(a2);
    std::string::operator=(*(std::string **)(a2 + 24), (const std::string *)(a1 + 56));
    int v6 = *(_DWORD *)(a1 + 80);
    *(unsigned char *)(a2 + 40) |= 2u;
    *(_DWORD *)(a2 + 36) = v6;
  }
  return v2 != 0;
}

uint64_t sub_1008794D8(uint64_t a1, std::string *this)
{
  CFTypeRef v3 = *(const std::string **)(a1 + 16);
  if (!v3) {
    return 0;
  }
  std::string::operator=(this, v3);
  uint64_t result = cellplan::deserializeRemotePlanSimSubscriptionStatus();
  if (result)
  {
    int v6 = *(const std::string **)(a1 + 8);
    if (v6) {
      std::string::operator=((std::string *)((char *)this + 32), v6);
    }
    int v7 = *(const std::string **)(a1 + 24);
    if (v7) {
      std::string::operator=((std::string *)((char *)this + 56), v7);
    }
    if ((*(unsigned char *)(a1 + 40) & 2) != 0) {
      LODWORD(this[3].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a1 + 36);
    }
    return 1;
  }
  return result;
}

void sub_100879558(std::string *__str, uint64_t a2, std::string *this)
{
  std::string::operator=(this, __str);
  int v5 = *(const std::string **)(a2 + 8);
  if (v5)
  {
    sub_10032AFC0(&this[1], v5);
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v13, kCtLoggingSystemName, "cp.r.msg.helper");
    int v6 = v14;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "missing remote imei", v13, 2u);
    }
  }
  int v7 = *(const std::string **)(a2 + 16);
  if (v7)
  {
    sub_10032AFC0(&this[2].__r_.__value_.__s.__data_[8], v7);
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v13, kCtLoggingSystemName, "cp.r.msg.helper");
    int v8 = v14;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "missing remote meid", v13, 2u);
    }
  }
  if ((*(unsigned char *)(a2 + 68) & 8) != 0)
  {
    unsigned int v10 = *(_DWORD *)(a2 + 60);
    if (v10 >= 0xA) {
      LOBYTE(v10) = 0;
    }
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v13, kCtLoggingSystemName, "cp.r.msg.helper");
    int v9 = v14;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "missing remote radio sku", v13, 2u);
    }
    LOBYTE(v10) = 0;
  }
  this[3].__r_.__value_.__s.__data_[16] = v10;
  if ((*(unsigned char *)(a2 + 68) & 2) != 0)
  {
    HIDWORD(this[5].__r_.__value_.__r.__words[0]) = *(_DWORD *)(a2 + 52);
    this[5].__r_.__value_.__s.__data_[0] = 1;
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v13, kCtLoggingSystemName, "cp.r.msg.helper");
    int v11 = v14;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "missing remote gsma sgp22 version", v13, 2u);
    }
  }
  if ((*(unsigned char *)(a2 + 68) & 0x10) != 0)
  {
    HIDWORD(this[5].__r_.__value_.__r.__words[1]) = *(_DWORD *)(a2 + 64);
    this[5].__r_.__value_.__s.__data_[8] = 1;
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v13, kCtLoggingSystemName, "cp.r.msg.helper");
    int v12 = v14;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "missing remote sim alliance profile version", v13, 2u);
    }
  }
}

std::string *sub_1008797E4(std::string *result, uint64_t a2)
{
  CFTypeRef v3 = result;
  std::string::size_type size = HIBYTE(result[3].__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = result[3].__r_.__value_.__l.__size_;
  }
  if (size)
  {
    sub_1005E4B2C(a2);
    uint64_t result = std::string::operator=(*(std::string **)(a2 + 16), v3 + 3);
  }
  std::string::size_type v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
  if ((v5 & 0x80u) != 0) {
    std::string::size_type v5 = v3->__r_.__value_.__l.__size_;
  }
  if (v5)
  {
    sub_1005E49D0(a2);
    uint64_t result = std::string::operator=(*(std::string **)(a2 + 32), v3);
  }
  std::string::size_type v6 = HIBYTE(v3[1].__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80u) != 0) {
    std::string::size_type v6 = v3[1].__r_.__value_.__l.__size_;
  }
  if (v6)
  {
    sub_100879C74(a2);
    uint64_t result = std::string::operator=(*(std::string **)(a2 + 24), v3 + 1);
  }
  std::string::size_type v7 = HIBYTE(v3[2].__r_.__value_.__r.__words[2]);
  if ((v7 & 0x80u) != 0) {
    std::string::size_type v7 = v3[2].__r_.__value_.__l.__size_;
  }
  if (v7)
  {
    sub_1005E5534(a2);
    int v8 = *(std::string **)(a2 + 8);
    return std::string::operator=(v8, v3 + 2);
  }
  return result;
}

std::string *sub_1008798E8(std::string *this, void *a2)
{
  CFTypeRef v3 = this;
  uint64_t v4 = (const std::string *)a2[2];
  if (v4) {
    this = std::string::operator=(this + 3, v4);
  }
  std::string::size_type v5 = (const std::string *)a2[4];
  if (v5) {
    this = std::string::operator=(v3, v5);
  }
  std::string::size_type v6 = (const std::string *)a2[3];
  if (v6) {
    this = std::string::operator=(v3 + 1, v6);
  }
  std::string::size_type v7 = (const std::string *)a2[1];
  if (v7)
  {
    return std::string::operator=(v3 + 2, v7);
  }
  return this;
}

std::string *sub_100879964(std::string *result, uint64_t a2)
{
  if (a2)
  {
    CFTypeRef v3 = result;
    uint64_t result = std::string::operator=((std::string *)(a2 + 8), (std::string *)((char *)result + 32));
    *(void *)(a2 + 64) = v3->__r_.__value_.__r.__words[0];
    std::string::pointer data = (std::string::pointer)v3[3].__r_.__value_.__s.__data_[15];
    if ((char)data < 0) {
      std::string::pointer data = v3[3].__r_.__value_.__l.__data_;
    }
    if (data)
    {
      std::string::size_type v5 = *(std::string **)(a2 + 48);
      if (!v5) {
        operator new();
      }
      uint64_t result = std::string::operator=(v5, (std::string *)((char *)v3 + 64));
    }
    std::string::pointer v6 = (std::string::pointer)v3[4].__r_.__value_.__s.__data_[15];
    if ((char)v6 < 0) {
      std::string::pointer v6 = v3[4].__r_.__value_.__l.__data_;
    }
    if (v6)
    {
      sub_1005E495C(a2);
      sub_1005E495C(a2);
      uint64_t result = std::string::operator=(*(std::string **)(a2 + 40), (std::string *)((char *)v3 + 88));
    }
    std::string::pointer v7 = (std::string::pointer)v3[5].__r_.__value_.__s.__data_[15];
    if ((char)v7 < 0) {
      std::string::pointer v7 = v3[5].__r_.__value_.__l.__data_;
    }
    if (v7)
    {
      int v8 = *(std::string **)(a2 + 56);
      if (!v8) {
        operator new();
      }
      uint64_t result = std::string::operator=(v8, (std::string *)((char *)v3 + 112));
    }
    std::string::pointer v9 = (std::string::pointer)v3[6].__r_.__value_.__s.__data_[15];
    if ((char)v9 < 0) {
      std::string::pointer v9 = v3[6].__r_.__value_.__l.__data_;
    }
    if (v9)
    {
      sub_1005EA054(a2);
      uint64_t result = std::string::operator=((std::string *)(*(void *)(a2 + 32) + 16), (std::string *)((char *)v3 + 136));
      std::string::pointer v10 = (std::string::pointer)v3[7].__r_.__value_.__s.__data_[15];
      if ((char)v10 < 0) {
        std::string::pointer v10 = v3[7].__r_.__value_.__l.__data_;
      }
      if (v10)
      {
        int v11 = *(std::string **)(*(void *)(a2 + 32) + 8);
        if (!v11) {
          operator new();
        }
        uint64_t result = std::string::operator=(v11, (std::string *)((char *)v3 + 160));
      }
      *(unsigned char *)(*(void *)(a2 + 32) + 40) = v3[7].__r_.__value_.__s.__data_[16];
    }
    int v12 = v3[2].__r_.__value_.__s.__data_[8];
    if (v3[2].__r_.__value_.__s.__data_[8])
    {
      char v13 = *(unsigned char *)(a2 + 84) | 1;
      *(unsigned char *)(a2 + 84) = v13;
      *(_DWORD *)(a2 + 72) = v12;
    }
    else
    {
      char v13 = *(unsigned char *)(a2 + 84);
    }
    std::string::value_type v14 = v3[7].__r_.__value_.__s.__data_[17];
    *(unsigned char *)(a2 + 84) = v13 | 4;
    *(unsigned char *)(a2 + 80) = v14;
    int v15 = v3[2].__r_.__value_.__s.__data_[9];
    if (v3[2].__r_.__value_.__s.__data_[9])
    {
      *(unsigned char *)(a2 + 84) = v13 | 6;
      *(_DWORD *)(a2 + 76) = v15;
    }
  }
  return result;
}

std::string *sub_100879BA0(uint64_t a1, uint64_t a2)
{
  uint64_t result = std::string::operator=((std::string *)(a2 + 32), (const std::string *)(a1 + 8));
  *(void *)a2 = *(void *)(a1 + 64);
  std::string::size_type v5 = *(const std::string **)(a1 + 48);
  if (v5) {
    uint64_t result = std::string::operator=((std::string *)(a2 + 64), v5);
  }
  std::string::pointer v6 = *(const std::string **)(a1 + 40);
  if (v6) {
    uint64_t result = std::string::operator=((std::string *)(a2 + 88), v6);
  }
  std::string::pointer v7 = *(const std::string **)(a1 + 56);
  if (v7) {
    uint64_t result = std::string::operator=((std::string *)(a2 + 112), v7);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t result = std::string::operator=((std::string *)(a2 + 136), (const std::string *)(v8 + 16));
    uint64_t v9 = *(void *)(a1 + 32);
    std::string::pointer v10 = *(const std::string **)(v9 + 8);
    if (v10)
    {
      uint64_t result = std::string::operator=((std::string *)(a2 + 160), v10);
      uint64_t v9 = *(void *)(a1 + 32);
    }
    *(unsigned char *)(a2 + 184) = *(unsigned char *)(v9 + 40);
  }
  *(unsigned char *)(a2 + 56) = (*(unsigned __int8 *)(a1 + 84) << 31 >> 31) & *(unsigned char *)(a1 + 72);
  int v11 = *(unsigned __int8 *)(a1 + 84);
  if ((v11 & 4) != 0)
  {
    *(unsigned char *)(a2 + 185) = *(unsigned char *)(a1 + 80);
    int v11 = *(unsigned __int8 *)(a1 + 84);
  }
  *(unsigned char *)(a2 + 57) = *(unsigned char *)(a1 + 76) & (v11 << 30 >> 31);
  return result;
}

uint64_t sub_100879C74(uint64_t result)
{
  if (!*(void *)(result + 24)) {
    operator new();
  }
  return result;
}

uint64_t *sub_100879CE8(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  std::string::pointer v6 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v11, a2);
  std::string::pointer v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_100879DA0((uint64_t)a1, a4, v10);
    sub_100046C38(a1, v11, v8, v10[0]);
    std::string::pointer v7 = v10[0];
    v10[0] = 0;
    sub_10031282C((uint64_t)v10, 0);
  }
  return v7;
}

double sub_100879DA0@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::string::pointer v6 = (char *)operator new(0x1C8uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  std::string::pointer v7 = v6 + 32;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_10004FC84(v7, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)std::string::pointer v7 = v9;
  }
  double result = 0.0;
  *(_OWORD *)(v6 + 56) = 0u;
  uint64_t v11 = v6 + 56;
  v11[23] = 0u;
  v11[24] = 0u;
  v11[21] = 0u;
  v11[22] = 0u;
  v11[19] = 0u;
  v11[20] = 0u;
  v11[17] = 0u;
  v11[18] = 0u;
  v11[15] = 0u;
  uint8_t v11[16] = 0u;
  v11[11] = 0u;
  v11[12] = 0u;
  v11[9] = 0u;
  v11[10] = 0u;
  v11[7] = 0u;
  v11[8] = 0u;
  v11[5] = 0u;
  v11[6] = 0u;
  v11[3] = 0u;
  void v11[4] = 0u;
  v11[1] = 0u;
  xpc_object_t v11[2] = 0u;
  v11[14] = 0u;
  v11[13] = 0u;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100879E60(_Unwind_Exception *a1)
{
  sub_10031282C(v1, 0);
  _Unwind_Resume(a1);
}

__CFString *sub_100879E78(int a1)
{
  double result = 0;
  switch(a1)
  {
    case 0:
      CFTypeRef v3 = kCTCellMonitorRadioAccessTechnologyGSM;
      goto LABEL_9;
    case 2:
      CFTypeRef v3 = kCTCellMonitorRadioAccessTechnologyUMTS;
      goto LABEL_9;
    case 3:
      CFTypeRef v3 = kCTCellMonitorRadioAccessTechnologyCDMA1x;
      goto LABEL_9;
    case 4:
      CFTypeRef v3 = kCTCellMonitorRadioAccessTechnologyCDMAEVDO;
      goto LABEL_9;
    case 7:
      CFTypeRef v3 = kCTCellMonitorRadioAccessTechnologyLTE;
      goto LABEL_9;
    case 9:
      CFTypeRef v3 = kCTCellMonitorRadioAccessTechnologyUTRAN2;
      goto LABEL_9;
    case 10:
      CFTypeRef v3 = kCTCellMonitorRadioAccessTechnologyNR;
LABEL_9:
      double result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

const void **sub_100879F30(const void **a1, const void *a2, double a3)
{
  CFNumberRef v11 = 0;
  CFNumberRef valuePtr = *(CFNumberRef *)&a3;
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &valuePtr);
  if (v5)
  {
    CFNumberRef v6 = v11;
    CFNumberRef v11 = v5;
    CFNumberRef valuePtr = v6;
    sub_1000570E8((const void **)&valuePtr);
  }
  CFNumberRef v7 = v11;
  CFNumberRef v10 = v11;
  CFNumberRef v11 = 0;
  sub_1000570E8((const void **)&v11);
  CFNumberRef v9 = v7;
  if (v7) {
    CFRetain(v7);
  }
  sub_10005711C(a1, a2, (const void **)&v9);
  sub_1000577C4((const void **)&v9);
  return sub_1000570E8((const void **)&v10);
}

void sub_100879FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

_DWORD *sub_10087A004(_DWORD *result, _DWORD *a2, void *a3)
{
  CFNumberRef v5 = (void *)*a3;
  CFTypeRef v3 = a3 + 1;
  uint64_t v4 = v5;
  if (v5 != v3)
  {
    while (1)
    {
      if (!*((_DWORD *)v4 + 8))
      {
        int v6 = *((_DWORD *)v4 + 9);
        CFNumberRef v7 = result;
        if (v6 == 1) {
          goto LABEL_6;
        }
        if (v6 == 2) {
          break;
        }
      }
LABEL_7:
      uint64_t v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          CFNumberRef v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          CFNumberRef v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
      if (v9 == v3) {
        return result;
      }
    }
    CFNumberRef v7 = a2;
LABEL_6:
    *CFNumberRef v7 = (int)*((double *)v4 + 5);
    goto LABEL_7;
  }
  return result;
}

_DWORD *sub_10087A07C(_DWORD *result, _DWORD *a2, void *a3)
{
  CFNumberRef v5 = (void *)*a3;
  CFTypeRef v3 = a3 + 1;
  uint64_t v4 = v5;
  if (v5 != v3)
  {
    while (1)
    {
      if (!*((_DWORD *)v4 + 8))
      {
        int v6 = *((_DWORD *)v4 + 9);
        CFNumberRef v7 = result;
        if (v6 == 4) {
          goto LABEL_6;
        }
        if (v6 == 3) {
          break;
        }
      }
LABEL_7:
      uint64_t v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          CFNumberRef v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          CFNumberRef v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
      if (v9 == v3) {
        return result;
      }
    }
    CFNumberRef v7 = a2;
LABEL_6:
    *CFNumberRef v7 = (int)*((double *)v4 + 5);
    goto LABEL_7;
  }
  return result;
}

_DWORD *sub_10087A0F4(_DWORD *result, _DWORD *a2, void *a3)
{
  CFNumberRef v5 = (void *)*a3;
  CFTypeRef v3 = a3 + 1;
  uint64_t v4 = v5;
  if (v5 != v3)
  {
    while (1)
    {
      if (*((_DWORD *)v4 + 8) == 3)
      {
        int v6 = *((_DWORD *)v4 + 9);
        CFNumberRef v7 = a2;
        if (v6 == 3) {
          goto LABEL_6;
        }
        if (v6 == 1) {
          break;
        }
      }
LABEL_7:
      uint64_t v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          CFNumberRef v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          CFNumberRef v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          uint64_t v4 = v9;
        }
        while (!v10);
      }
      uint64_t v4 = v9;
      if (v9 == v3) {
        return result;
      }
    }
    CFNumberRef v7 = result;
LABEL_6:
    *CFNumberRef v7 = (int)*((double *)v4 + 5);
    goto LABEL_7;
  }
  return result;
}

const void **sub_10087A170(uint64_t a1, const void **a2)
{
  IntCFStringRef Value = MCC::getIntValue((MCC *)(a1 + 8));
  sub_100057278(a2, @"kCTCellMonitorMCC", IntValue);
  unsigned int v5 = MCC::getIntValue((MCC *)(a1 + 40));
  sub_100057278(a2, @"kCTCellMonitorMNC", v5);
  sub_100057278(a2, @"kCTCellMonitorBandInfo", *(unsigned __int16 *)(a1 + 72));
  sub_100057010(a2, @"kCTCellMonitorTAC", *(_DWORD *)(a1 + 76));
  sub_1003BA948(a2, @"kCTCellMonitorCellId", *(const __CFNumber **)(a1 + 80));
  sub_100057010(a2, @"kCTCellMonitorNRARFCN", *(_DWORD *)(a1 + 88));
  sub_100057278(a2, @"kCTCellMonitorPID", *(unsigned __int16 *)(a1 + 92));
  sub_100056F3C(a2, @"kCTCellMonitorSectorLat", *(_DWORD *)(a1 + 96));
  sub_100056F3C(a2, @"kCTCellMonitorSectorLong", *(_DWORD *)(a1 + 100));
  sub_100057278(a2, @"kCTCellMonitorBandwidth", *(unsigned __int16 *)(a1 + 104));
  sub_100056E64(a2, @"kCTCellMonitorSCS", *(unsigned __int8 *)(a1 + 106));
  sub_100057010(a2, @"kCTCellMonitorGSCN", *(_DWORD *)(a1 + 108));
  sub_100056E64(a2, @"kCTCellMonitorBWPSupport", *(unsigned __int8 *)(a1 + 112));
  sub_100057010(a2, @"kCTCellMonitorThroughput", *(_DWORD *)(a1 + 116));
  __int16 v6 = *(_WORD *)(a1 + 120);

  return sub_100058670(a2, @"kCTCellMonitorPMax", v6);
}

void sub_10087A328()
{
}

void sub_10087A39C()
{
}

void sub_10087A3D8(LASDDatabaseIDSFactoryInterface *this)
{
  *(void *)this = off_101A12920;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  LASDDatabaseIDSFactoryInterface::~LASDDatabaseIDSFactoryInterface(this);
}

void sub_10087A434(LASDDatabaseIDSFactoryInterface *this)
{
  *(void *)this = off_101A12920;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  LASDDatabaseIDSFactoryInterface::~LASDDatabaseIDSFactoryInterface(this);

  operator delete();
}

void sub_10087A4A4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_10087A7A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, dispatch_object_t a17)
{
  if (a17) {
    (*((void (**)(dispatch_object_t))a17->isa + 1))(a17);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_10004D2C8(v17);
  _Unwind_Resume(a1);
}

void sub_10087A8F8(void *a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  v4[0] = 0;
  v4[1] = 0;
  sub_10003E168(v4, a1);
  operator new();
}

void sub_10087A9EC(void *a1, NSObject **a2)
{
  CFTypeRef v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    __int16 v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      CFNumberRef v7 = v6;
      uint64_t v8 = a1[5];
      if (v8)
      {
        *(unsigned char *)(v5 + 129) = 1;
        CFNumberRef v9 = dispatch_group_create();
        BOOL v10 = v9;
        if (*(unsigned char *)(v5 + 128))
        {
          if (v9)
          {
            dispatch_retain(v9);
            dispatch_group_enter(v10);
          }
          CFNumberRef v11 = *(NSObject **)(v5 + 120);
          *(void *)(v5 + 120) = v10;
          if (v11)
          {
            dispatch_group_leave(v11);
            dispatch_release(v11);
          }
        }
        if (v10)
        {
          int v12 = *(NSObject **)(v5 + 32);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v14[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Waiting for baseband manager shutdown transition", (uint8_t *)v14, 2u);
          }
          char v13 = *a2;
          v14[0] = v5;
          v14[1] = v13;
          if (v13)
          {
            dispatch_retain(v13);
            dispatch_group_enter(v13);
          }
          v14[2] = v8;
          void v14[3] = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          v14[4] = v10;
          dispatch_retain(v10);
          operator new();
        }
        if (*(void *)(v5 + 184)) {
          sub_10087AC10((void *)v5);
        }
        else {
          sub_10087AEF0(v5);
        }
      }
      sub_10004D2C8(v7);
    }
  }
}

void sub_10087AB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10087ABBC(&a9);
  dispatch_release(v10);
  sub_10004D2C8(v9);
  _Unwind_Resume(a1);
}

void *sub_10087ABBC(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2) {
    dispatch_release(v2);
  }
  CFTypeRef v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = a1[1];
  if (v4)
  {
    dispatch_group_leave(v4);
    uint64_t v5 = a1[1];
    if (v5) {
      dispatch_release(v5);
    }
  }
  return a1;
}

void sub_10087AC10(void *a1)
{
  uint64_t v2 = a1[23];
  a1[23] = 0;
  if (v2)
  {
    dispatch_group_leave(v2);
    dispatch_release(v2);
  }
  uint64_t v3 = a1[22];
  if (v3)
  {
    uint64_t v4 = a1[4];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I [....] cancel shutdown hysteresis timer", v8, 2u);
      uint64_t v3 = a1[22];
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    uint64_t v5 = a1[22];
    a1[22] = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  if (a1[24])
  {
    __int16 v6 = a1[4];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I [....] Release shutdown hysteresis power assertion", buf, 2u);
    }
    CFNumberRef v7 = (std::__shared_weak_count *)a1[25];
    a1[24] = 0;
    a1[25] = 0;
    if (v7) {
      sub_10004D2C8(v7);
    }
  }
}

uint64_t sub_10087AD50(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10087AD6C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_10087AD7C(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v3 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(int *)(a1 + 104);
    if (v4 > 5) {
      uint64_t v5 = "???";
    }
    else {
      uint64_t v5 = off_101A12C10[v4];
    }
    uint64_t v6 = asString();
    BOOL v7 = *(void *)(a1 + 112) != 0;
    BOOL v8 = *(void *)(a1 + 184) != 0;
    BOOL v9 = *(void *)(a1 + 192) != 0;
    int v11 = 136316162;
    int v12 = v5;
    __int16 v13 = 2080;
    uint64_t v14 = v6;
    __int16 v15 = 1024;
    BOOL v16 = v7;
    __int16 v17 = 1024;
    BOOL v18 = v8;
    __int16 v19 = 1024;
    BOOL v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I TransitionState=%s; mode=%s; group active=%d; hysteresis active=%d; power assertion held=%d",
      (uint8_t *)&v11,
      0x28u);
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72), v2);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 88) + 56))(*(void *)(a1 + 88), v2);
}

void sub_10087AEF0(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 104))
  {
    case 0:
    case 3:
      sub_10087AF4C(a1);
      break;
    case 1:
      sub_10087B2F4(a1);
      break;
    case 2:
      sub_10087B40C(a1);
      break;
    case 4:
      sub_10087B650(a1);
      break;
    case 5:
      sub_10087B788(a1);
      break;
    default:
      return;
  }
}

void sub_10087AF4C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72));
  uint64_t v3 = v2;
  if (v2 <= 3 && v2 != 1)
  {
    if (*(unsigned char *)(a1 + 129)) {
      uint64_t v3 = 2;
    }
    else {
      uint64_t v3 = v2;
    }
  }
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v5 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = asString();
      uint64_t v7 = asString();
      uint64_t v8 = *(int *)(a1 + 104);
      if (v8 > 5) {
        BOOL v9 = "???";
      }
      else {
        BOOL v9 = off_101A12C10[v8];
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v15 = 2080;
      uint64_t v16 = v7;
      __int16 v17 = 2080;
      BOOL v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I [----] Baseband Mode: Current=%s; Next=%s; Transition=%s",
        buf,
        0x20u);
    }
    if (*(unsigned char *)(a1 + 129) && *(_DWORD *)(a1 + 168) <= 2u)
    {
      sub_10087B788(a1);
      return;
    }
    if (*(_DWORD *)(a1 + 104) == 3)
    {
      if (v3 < 2) {
        return;
      }
      if (v3 == 3) {
        sub_10087AC10((void *)a1);
      }
    }
    if ((v3 == 3) != (*(_DWORD *)(a1 + 168) == 3))
    {
      if (v3 == 3)
      {
        sub_10087B40C(a1);
        return;
      }
      if ((*(uint64_t (**)(void))(**(void **)(a1 + 88) + 48))(*(void *)(a1 + 88)) <= 0
        || *(unsigned char *)(a1 + 129))
      {
        goto LABEL_46;
      }
      if (sub_10087B9E0(a1, 3u))
      {
        unsigned int v11 = *(_DWORD *)(a1 + 168);
        if (v11 >= 3)
        {
          if (v11 == 3)
          {
            *(void *)long long buf = 0;
            sub_10087BEE4((NSObject **)buf, a1);
            int v12 = *(NSObject **)buf;
            __int16 v13 = *(NSObject **)buf;
            if (*(void *)buf) {
              dispatch_retain(*(dispatch_object_t *)buf);
            }
            sub_10087BAE4((void *)a1, &v13);
            if (v12)
            {
              dispatch_release(v12);
              dispatch_release(v12);
            }
          }
        }
        else
        {
          sub_10087AF4C(a1);
        }
      }
      else if (!*(void *)(a1 + 184))
      {
LABEL_46:
        sub_10087B650(a1);
      }
    }
    else
    {
      BOOL v10 = *(NSObject **)(a1 + 32);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I [    ] baseband boot-state matches; committing new mode",
          buf,
          2u);
      }
      sub_10087BD0C(a1, v3);
      sub_10087B9E0(a1, 0);
    }
  }
  else if (v3 == 1)
  {
    sub_10087BD0C(a1, 1);
  }
  else if (v3 == 3 || v3 == 2 && !*(unsigned char *)(a1 + 129))
  {
    sub_10087B2F4(a1);
  }
}

void sub_10087B2CC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_release(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10087B2F4(uint64_t a1)
{
  if (!sub_10087B9E0(a1, 1u)) {
    goto LABEL_17;
  }
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(NSObject **)(a1 + 16);
  dispatch_object_t object = v3;
  dispatch_object_t v8 = 0;
  if (v3) {
    dispatch_retain(v3);
  }
  (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, dispatch_object_t *))(*(void *)v2 + 16))(&v8, v2, &object);
  if (object) {
    dispatch_release(object);
  }
  uint64_t v4 = v8;
  dispatch_object_t v6 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  BOOL v5 = sub_10087BAE4((void *)a1, &v6);
  if (v4) {
    dispatch_release(v4);
  }
  if (v8) {
    dispatch_release(v8);
  }
  if (!v5)
  {
LABEL_17:
    if (!*(void *)(a1 + 112))
    {
      *(unsigned char *)(a1 + 128) = 1;
      sub_10087AF4C(a1);
    }
  }
}

void sub_10087B3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object)
{
  if (v12) {
    dispatch_release(v12);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10087B40C(uint64_t a1)
{
  sub_10087AC10((void *)a1);
  if (!sub_10087B9E0(a1, 2u))
  {
LABEL_26:
    if (!*(void *)(a1 + 112))
    {
      sub_10087BD0C(a1, 3);
      sub_10087AF4C(a1);
    }
    return;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 168);
  if (v2 >= 3)
  {
    if (v2 == 3) {
      return;
    }
    goto LABEL_26;
  }
  sub_10087BD0C(a1, 0);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)(a1 + 40));
  BOOL v5 = ServiceMap;
  if (v6 < 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v6;
  BOOL v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)buf);
  if (v10)
  {
    uint64_t v12 = v10[3];
    unsigned int v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      if (!v12) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  unsigned int v11 = 0;
  char v13 = 1;
  if (!v12) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v14 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I Acquire EOS booted assertion prior to booting BB", buf, 2u);
  }
  (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
LABEL_17:
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  *(void *)long long buf = 0;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 88) + 32))(buf);
  __int16 v15 = *(NSObject **)buf;
  __int16 v17 = *(NSObject **)buf;
  if (*(void *)buf) {
    dispatch_retain(*(dispatch_object_t *)buf);
  }
  BOOL v16 = sub_10087BAE4((void *)a1, &v17);
  if (v15) {
    dispatch_release(v15);
  }
  if (*(void *)buf) {
    dispatch_release(*(dispatch_object_t *)buf);
  }
  if (!v16) {
    goto LABEL_26;
  }
}

void sub_10087B614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object)
{
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10087B650(uint64_t a1)
{
  sub_10087AC10((void *)a1);
  if (!sub_10087B9E0(a1, 4u)) {
    goto LABEL_18;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 168);
  if (v2 < 3)
  {
    sub_10087AF4C(a1);
    return;
  }
  if (v2 != 3) {
    goto LABEL_18;
  }
  sub_10087BD0C(a1, 0);
  dispatch_object_t object = 0;
  (*(void (**)(dispatch_object_t *__return_ptr))(**(void **)(a1 + 88) + 40))(&object);
  uint64_t v3 = object;
  dispatch_object_t v5 = object;
  if (object) {
    dispatch_retain(object);
  }
  BOOL v4 = sub_10087BAE4((void *)a1, &v5);
  if (v3) {
    dispatch_release(v3);
  }
  if (object) {
    dispatch_release(object);
  }
  if (!v4)
  {
LABEL_18:
    if (!*(void *)(a1 + 112))
    {
      sub_10087BD0C(a1, 2);
      sub_10087AF4C(a1);
    }
  }
}

void sub_10087B764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (v10) {
    dispatch_release(v10);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10087B788(uint64_t a1)
{
  sub_10087AC10((void *)a1);
  if (!sub_10087B9E0(a1, 5u) || !*(unsigned char *)(a1 + 128))
  {
LABEL_24:
    if (!*(void *)(a1 + 112))
    {
      *(unsigned char *)(a1 + 128) = 0;
      sub_10087BD0C(a1, 2);
      BOOL v16 = *(NSObject **)(a1 + 120);
      *(void *)(a1 + 120) = 0;
      if (v16)
      {
        dispatch_group_leave(v16);
        dispatch_release(v16);
      }
      sub_10087AF4C(a1);
    }
    return;
  }
  sub_10087BD0C(a1, 0);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v2, *(Registry **)(a1 + 40));
  BOOL v4 = ServiceMap;
  if (v5 < 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      uint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v5;
  unsigned int v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)buf);
  if (v9)
  {
    uint64_t v11 = v9[3];
    BOOL v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      if (!v11) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  BOOL v10 = 0;
  char v12 = 1;
  if (!v11) {
    goto LABEL_15;
  }
LABEL_12:
  char v13 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Releasing EOS booted assertion prior to BB shutdown", buf, 2u);
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
LABEL_15:
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  *(void *)long long buf = 0;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 88) + 24))(buf);
  uint64_t v14 = *(NSObject **)buf;
  __int16 v17 = *(NSObject **)buf;
  if (*(void *)buf) {
    dispatch_retain(*(dispatch_object_t *)buf);
  }
  BOOL v15 = sub_10087BAE4((void *)a1, &v17);
  if (v14) {
    dispatch_release(v14);
  }
  if (*(void *)buf) {
    dispatch_release(*(dispatch_object_t *)buf);
  }
  if (!v15) {
    goto LABEL_24;
  }
}

void sub_10087B9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object)
{
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10087B9E0(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(int *)(a1 + 104);
  if (v3 != a2)
  {
    uint64_t v5 = *(NSObject **)(a1 + 32);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (v3 > 5) {
        uint64_t v6 = "???";
      }
      else {
        uint64_t v6 = off_101A12C10[v3];
      }
      if (a2 > 5) {
        uint64_t v7 = "???";
      }
      else {
        uint64_t v7 = off_101A12C10[a2];
      }
      int v9 = 136315394;
      BOOL v10 = v6;
      __int16 v11 = 2080;
      char v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I BB mode transitioning from %s to %s", (uint8_t *)&v9, 0x16u);
    }
    *(_DWORD *)(a1 + 104) = a2;
  }
  return v3 != a2;
}

BOOL sub_10087BAE4(void *a1, NSObject **a2)
{
  unsigned int v2 = *a2;
  if (!*a2) {
    return v2 != 0;
  }
  if (a1[14])
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = *a2;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#E ERROR: Transition group was already set?!?", buf, 2u);
      uint64_t v6 = *a2;
      if (!*a2) {
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v6 = *a2;
  }
  dispatch_retain(v6);
LABEL_8:
  uint64_t v7 = a1[14];
  a1[14] = v6;
  if (v7) {
    dispatch_release(v7);
  }
  sub_10003E168(buf, a1);
  uint64_t v9 = *(void *)buf;
  unsigned int v8 = v16;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v8);
  }
  BOOL v10 = *a2;
  __int16 v11 = a1[2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10087BC4C;
  block[3] = &unk_101A12980;
  block[4] = a1;
  block[5] = v9;
  uint64_t v14 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_group_notify(v10, v11, block);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  return v2 != 0;
}

void sub_10087BC4C(void *a1)
{
  unsigned int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    BOOL v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 32);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)unsigned int v8 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Transition group completed; checking for next step",
            v8,
            2u);
        }
        uint64_t v7 = *(NSObject **)(v3 + 112);
        *(void *)(v3 + 112) = 0;
        if (v7) {
          dispatch_release(v7);
        }
        sub_10087AEF0(v3);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_10087BCF8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10087BD0C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(NSObject **)(a1 + 32);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      *(_DWORD *)uint64_t v9 = 136315394;
      *(void *)&v9[4] = asString();
      *(_WORD *)&v9[12] = 2080;
      *(void *)&v9[14] = asString();
      uint64_t v6 = "#I [ XX ] Baseband mode set to: %s (was %s)";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, v9, 0x16u);
    }
  }
  else if (v5)
  {
    *(_DWORD *)uint64_t v9 = 136315394;
    *(void *)&v9[4] = asString();
    *(_WORD *)&v9[12] = 2080;
    *(void *)&v9[14] = asString();
    uint64_t v6 = "#I [    ] Baseband mode set to: %s (was %s)";
    goto LABEL_6;
  }
  if (*(_DWORD *)(a1 + 168) != a2)
  {
    *(_DWORD *)(a1 + 168) = a2;
    uint64_t v7 = *(void *)(a1 + 160);
    if (v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a1 + 168);
    }
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72), a2);
  *(void *)uint64_t v9 = _NSConcreteStackBlock;
  *(void *)&v9[8] = 0x40000000;
  *(void *)&v9[16] = sub_100A04974;
  BOOL v10 = &unk_101A28E58;
  uint64_t v11 = a1;
  return sub_100A04794((wis::MetricFactory *)0x80105);
}

void sub_10087BEE4(NSObject **a1, uint64_t a2)
{
  sub_10087AC10((void *)a2);
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 88) + 48))(*(void *)(a2 + 88));
  BOOL v5 = dispatch_group_create();
  uint64_t v6 = v5;
  *a1 = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v6);
  }
  uint64_t v7 = *(NSObject **)(a2 + 184);
  *(void *)(a2 + 184) = v6;
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a2 + 88) + 48))(*(void *)(a2 + 88));
  ServiceMap = (std::mutex *)Registry::getServiceMap(v9, *(Registry **)(a2 + 40));
  uint64_t v11 = ServiceMap;
  if (v12 < 0)
  {
    char v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v12;
  BOOL v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)buf);
  if (v16)
  {
    uint64_t v18 = v16[3];
    __int16 v17 = (std::__shared_weak_count *)v16[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v17);
      char v19 = 0;
      if (!v18) {
        goto LABEL_17;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::mutex::unlock(v11);
  __int16 v17 = 0;
  char v19 = 1;
  if (!v18) {
    goto LABEL_17;
  }
LABEL_14:
  (*(void (**)(uint8_t *__return_ptr, uint64_t, const char *, uint64_t))(*(void *)v18 + 8))(buf, v18, "Shutdown hysteresis", v8);
  long long v20 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v21 = *(std::__shared_weak_count **)(a2 + 200);
  *(_OWORD *)(a2 + 192) = v20;
  if (v21)
  {
    sub_10004D2C8(v21);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
LABEL_17:
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v17);
  }
  sub_10003E168(buf, (void *)a2);
  uint64_t v23 = *(void *)buf;
  uint64_t v22 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
    sub_10004D2C8(v22);
  }
  Registry::getTimerService((uint64_t *)buf, *(Registry **)(a2 + 40));
  uint64_t v24 = *(void *)buf;
  sub_100058DB0(__p, "Baseband shutdown hysteresis");
  unint64_t v25 = *(NSObject **)(a2 + 16);
  dispatch_object_t object = v25;
  if (v25) {
    dispatch_retain(v25);
  }
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 1174405120;
  void v31[2] = sub_10087C404;
  v31[3] = &unk_101A129B0;
  v31[4] = a2;
  v31[5] = v23;
  long long v32 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_object_t v33 = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  aBlock = _Block_copy(v31);
  sub_100118A44(v24, (uint64_t)__p, 0, 1000000 * v4, &object, &aBlock);
  uint64_t v26 = v38;
  uint64_t v38 = 0;
  uint64_t v27 = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = v26;
  if (v27)
  {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    uint64_t v28 = v38;
    uint64_t v38 = 0;
    if (v28) {
      (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
    }
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  unint64_t v29 = *(NSObject **)(a2 + 32);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v30 = (*(uint64_t (**)(void))(**(void **)(a2 + 88) + 48))(*(void *)(a2 + 88));
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I [.   ]  shutdown hysteresis timer (%lld sec) started", buf, 0xCu);
  }
  if (v33) {
    dispatch_release(v33);
  }
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
}

void sub_10087C328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, dispatch_object_t object, void *aBlock, dispatch_object_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (object) {
    dispatch_release(object);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v27) {
    dispatch_release(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_10087C404(void *a1)
{
  unsigned int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = v3[4];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I [... ] shutdown hysteresis timer expired", buf, 2u);
        }
        uint64_t v7 = a1[7];
        if (!v7
          || (dispatch_retain(v7),
              dispatch_group_enter(v7),
              uint64_t v8 = v3[23],
              dispatch_group_leave(v7),
              dispatch_release(v7),
              v8 == v7))
        {
          sub_10087AC10(v3);
        }
        else
        {
          uint64_t v9 = v3[4];
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)BOOL v10 = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I [... ] another hysteresis timer was started right after previous timer expired; rare race!",
              v10,
              2u);
          }
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_10087C514(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_10087C528(void *a1, void *a2)
{
  uint64_t v2 = a2[6];
  a1[5] = a2[5];
  a1[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  a1[7] = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void sub_10087C558(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_10087C5A8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10087C630(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10087C668(uint64_t a1)
{
}

uint64_t sub_10087C684(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10087C6C8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = *(std::__shared_weak_count **)(result + 200);
    if (v2) {
      sub_10004D2C8(v2);
    }
    uint64_t v3 = v1[23];
    if (v3)
    {
      dispatch_group_leave(v3);
      uint64_t v4 = v1[23];
      if (v4) {
        dispatch_release(v4);
      }
    }
    uint64_t v5 = v1[22];
    v1[22] = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    sub_10087C5A8(v1 + 17);
    uint64_t v6 = v1[15];
    if (v6)
    {
      dispatch_group_leave(v6);
      uint64_t v7 = v1[15];
      if (v7) {
        dispatch_release(v7);
      }
    }
    uint64_t v8 = v1[14];
    if (v8) {
      dispatch_release(v8);
    }
    uint64_t v9 = (std::__shared_weak_count *)v1[12];
    if (v9) {
      sub_10004D2C8(v9);
    }
    BOOL v10 = (std::__shared_weak_count *)v1[10];
    if (v10) {
      sub_10004D2C8(v10);
    }
    uint64_t v11 = (std::__shared_weak_count *)v1[8];
    if (v11) {
      sub_10004D2C8(v11);
    }
    uint64_t v12 = (std::__shared_weak_count *)v1[6];
    if (v12) {
      sub_10004D2C8(v12);
    }
    ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(v1 + 4));
    sub_100087E88(v1);
    operator delete();
  }
  return result;
}

void sub_10087C7D0(ServiceManager::Service *this)
{
  *(void *)this = off_101A12A50;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_10087C82C(ServiceManager::Service *this)
{
  *(void *)this = off_101A12A50;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_10087C89C@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "BasebandModeManager");
}

unsigned char *sub_10087C8AC@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  unsigned char *v2 = 4;
  double result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_10087C8EC(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    sub_10087A8F8(v2, v3);
  }
  uint64_t v4 = *(void **)(a1 + 8);

  sub_10087A8F8(v4, 0);
}

uint64_t sub_10087C960()
{
  return 0;
}

uint64_t sub_10087C968()
{
  return 1;
}

uint64_t sub_10087C970()
{
  return 0;
}

void sub_10087C97C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  v2[0] = 0;
  v2[1] = 0;
  sub_10003E168(v2, v1);
  operator new();
}

void sub_10087CA58(uint64_t a1, int a2)
{
  if (a2 == 4)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    sub_10003E168(&v5, v2);
    uint64_t v4 = v5;
    uint64_t v3 = (std::__shared_weak_count *)v6;
    if (v6)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
      sub_10004D2C8(v3);
    }
    uint64_t v5 = _NSConcreteStackBlock;
    uint64_t v6 = 1174405120;
    uint64_t v7 = sub_10087A9EC;
    uint64_t v8 = &unk_101A12950;
    uint64_t v9 = v2;
    BOOL v10 = v4;
    uint64_t v11 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    ServiceStage::scheduleAction();
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10087CB48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_10087CB6C(uint64_t **a1)
{
  uint64_t v1 = **a1;
  Registry::createRestModuleOneTimeUseConnection(&v7, *(Registry **)(v1 + 40));
  ctu::RestModule::connect();
  if (v8) {
    sub_10004D2C8(v8);
  }
  uint64_t v2 = (uint64_t (***)())(v1 + 136);
  uint64_t v9 = off_101A12AD0;
  BOOL v10 = (std::__shared_weak_count *)(v1 + 56);
  uint64_t v11 = &v9;
  if (&v9 != (uint64_t (***)())(v1 + 136))
  {
    uint64_t v3 = *(uint64_t (****)())(v1 + 160);
    if (v3 == v2)
    {
      __p[1] = (void *)(v1 + 56);
      uint64_t v13 = 0;
      uint64_t v11 = 0;
      __p[0] = off_101A12AD0;
      ((void (*)(uint64_t, uint64_t (***)()))(*v2)[3])(v1 + 136, &v9);
      (*(void (**)(void))(**(void **)(v1 + 160) + 32))(*(void *)(v1 + 160));
      *(void *)(v1 + 160) = 0;
      uint64_t v11 = &v9;
      (*((void (**)(void **, uint64_t))__p[0] + 3))(__p, v1 + 136);
      (*((void (**)(void **))__p[0] + 4))(__p);
    }
    else
    {
      *(void *)(v1 + 136) = off_101A12AD0;
      *(void *)(v1 + 144) = v1 + 56;
      uint64_t v11 = v3;
    }
    *(void *)(v1 + 160) = v2;
  }
  sub_10087C5A8(&v9);
  uint64_t v4 = *(void *)(v1 + 160);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v1 + 168);
  }
  sub_100058DB0(__p, "/cc/events/dump_state");
  uint64_t v5 = (uint64_t (***)())operator new(0x20uLL);
  *uint64_t v5 = off_101A12B60;
  v5[1] = (uint64_t (**)())v1;
  _DWORD v5[2] = (uint64_t (**)())sub_10087AD7C;
  void v5[3] = 0;
  uint64_t v11 = v5;
  ctu::RestModule::observeEvent();
  sub_10003F600(&v9);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  sub_10003E168(&v9, (void *)v1);
  uint64_t v6 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v6);
  }
  operator new();
}

void sub_10087CEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10087CF40()
{
}

void *sub_10087CF54(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_101A12AD0;
  result[1] = v3;
  return result;
}

uint64_t sub_10087CF9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A12AD0;
  a2[1] = v2;
  return result;
}

void sub_10087CFC8(uint64_t a1, int *a2)
{
  int v2 = *a2;
  xpc_object_t v9 = 0;
  uint64_t v3 = (ctu::rest::detail *)v2;
  uint64_t v4 = asString();
  ctu::rest::detail::write_enum_string_value((uint64_t *)&v9, v3, v4, v5);
  sub_100058DB0(&__p, "/cc/props/baseband_mode");
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v8 < 0) {
    operator delete(__p);
  }
  xpc_release(v9);
}

void sub_10087D07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_10087D0C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10087D100()
{
}

void sub_10087D110()
{
}

__n128 sub_10087D124(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = off_101A12B60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_10087D178(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A12B60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10087D1B0(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_10087D1D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10087D218()
{
}

void sub_10087D224(BasebandModeEvaluator::DelegateBase *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  BasebandModeEvaluator::DelegateBase::~DelegateBase(this);
}

void sub_10087D264(BasebandModeEvaluator::DelegateBase *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  BasebandModeEvaluator::DelegateBase::~DelegateBase(this);

  operator delete();
}

void sub_10087D2B8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5) {
        sub_10087AEF0(v5);
      }
      sub_10004D2C8(v4);
    }
  }
}

void sub_10087D318(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_10087D32C(void ***a1)
{
  uint64_t v2 = a1;
  uint64_t v1 = **a1;
  sub_10087AEF0((uint64_t)v1);
  sub_100A044E0(v1);
  operator delete();
}

void sub_10087D38C()
{
}

void *sub_10087D3B8(void *result)
{
  uint64_t v1 = (void *)*result;
  *__n128 result = 0;
  if (v1)
  {
    uint64_t v2 = v1[4];
    if (v2) {
      dispatch_release(v2);
    }
    uint64_t v3 = (std::__shared_weak_count *)v1[3];
    if (v3) {
      sub_10004D2C8(v3);
    }
    uint64_t v4 = v1[1];
    if (v4)
    {
      dispatch_group_leave(v4);
      uint64_t v5 = v1[1];
      if (v5) {
        dispatch_release(v5);
      }
    }
    operator delete();
  }
  return result;
}

void *sub_10087D430(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *(NSObject **)(*(void *)a1 + 32);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#I Baseband manager shutdown complete", buf, 2u);
  }
  return sub_10087D3B8(&v3);
}

uint64_t sub_10087D4A0(uint64_t a1, void *a2, dispatch_object_t *a3)
{
  *(void *)a1 = off_101A12C50;
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v6 = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v19, kCtLoggingSystemName, "cu.metric");
  if (v6)
  {
    dispatch_retain(v6);
    uint64_t v7 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_BACKGROUND, 0);
    dispatch_retain(v6);
    dispatch_retain(v6);
    char v8 = dispatch_queue_create_with_target_V2("CellularUsageMetrics", v7, v6);
  }
  else
  {
    xpc_object_t v9 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_BACKGROUND, 0);
    char v8 = dispatch_queue_create("CellularUsageMetrics", v9);
  }
  BOOL v10 = v8;
  *uint64_t v5 = 0;
  v5[1] = 0;
  *(void *)(a1 + 24) = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)(a1 + 32) = v6;
  if (v6) {
    dispatch_retain(v6);
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v6)
  {
    dispatch_release(v6);
    dispatch_release(v6);
    dispatch_release(v6);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v20, &v19);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v20);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v20);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v19);
  if (v6) {
    dispatch_release(v6);
  }
  *(void *)a1 = off_101A12C50;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 104;
  *(_DWORD *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 20;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 225) = 0u;
  sub_100058DB0(&__p, "CellularUsageMetrics");
  uint64_t v11 = *(NSObject **)(a1 + 24);
  uint64_t v16 = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v12 = *(NSObject **)(a1 + 32);
  xpc_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  ctu::RestModule::RestModule();
  if (object) {
    dispatch_release(object);
  }
  if (v16) {
    dispatch_release(v16);
  }
  if (v18 < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = *a2;
  uint64_t v13 = a2[1];
  *(void *)(a1 + 304) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = a1 + 320;
  return a1;
}

void sub_10087D728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19)
{
  if (object) {
    dispatch_release(object);
  }
  if (a10) {
    dispatch_release(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1006020EC(v21);
  sub_100884AC0(*v24);
  sub_100884A1C(*v23);
  ctu::OsLogLogger::~OsLogLogger(v22);
  sub_100087E88(v20);
  CellularUsageMetricsInterface::~CellularUsageMetricsInterface(v19);
  _Unwind_Resume(a1);
}

void sub_10087D7D0(uint64_t a1)
{
  *(void *)a1 = off_101A12C50;
  sub_10005CD2C(a1 + 312, *(char **)(a1 + 320));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 304);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v4 = (void **)(a1 + 272);
  sub_10008A88C(&v4);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 264);
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_1006020EC((const void **)(a1 + 248));
  sub_100884AC0(*(void **)(a1 + 104));
  sub_100884A1C(*(void **)(a1 + 80));
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  CellularUsageMetricsInterface::~CellularUsageMetricsInterface((CellularUsageMetricsInterface *)a1);
}

void sub_10087D880(uint64_t a1)
{
  sub_10087D7D0(a1);

  operator delete();
}

void sub_10087D8B8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10087D998(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10087DA78(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10087DB58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(v1 + 296));
  uint64_t v3 = ServiceMap;
  if (v4 < 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      uint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v4;
  char v8 = sub_10004D37C(&v3[1].__m_.__sig, (unint64_t *)buf);
  if (!v8)
  {
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  uint64_t v10 = v8[3];
  xpc_object_t v9 = (std::__shared_weak_count *)v8[4];
  if (!v9)
  {
LABEL_8:
    std::mutex::unlock(v3);
    xpc_object_t v9 = 0;
    char v11 = 1;
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v3);
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v9);
  char v11 = 0;
LABEL_9:
  (*(void (**)(uint64_t, unint64_t *, uint64_t *))(*(void *)v10 + 72))(v10, &v50, &v49);
  uint64_t v12 = v49;
  unint64_t v13 = v50;
  unint64_t v14 = *(void *)(v1 + 152);
  uint64_t v15 = v50 - v14;
  if (v50 < v14 || (v16 = *(void *)(v1 + 160), uint64_t v17 = v49 - v16, v49 < v16))
  {
    char v18 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v36 = *(void *)(v1 + 160);
      *(_DWORD *)long long buf = 134218752;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v14;
      __int16 v52 = 2048;
      uint64_t v53 = v12;
      __int16 v54 = 2048;
      uint64_t v55 = v36;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Total cumulative usage lower than previous counts. Current home: %llu, previous home: %llu, current roaming: %llu, prev roaming: %llu", buf, 0x2Au);
      uint64_t v12 = v49;
      unint64_t v13 = v50;
    }
    *(void *)(v1 + 152) = v13;
    *(void *)(v1 + 160) = v12;
    goto LABEL_14;
  }
  *(void *)(v1 + 152) = v50;
  *(void *)(v1 + 160) = v12;
  uint64_t v19 = sub_100883B64(*(Registry **)(v1 + 296), (uint64_t *)(v1 + 200));
  long long v20 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v17;
    __int16 v52 = 2048;
    uint64_t v53 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Total data usage, domestic: %llu, roaming: %llu, duration:%llu", buf, 0x20u);
  }
  uint64_t v22 = (std::mutex *)Registry::getServiceMap(v21, *(Registry **)(v1 + 296));
  uint64_t v23 = v22;
  if (v24 < 0)
  {
    unint64_t v25 = (unsigned __int8 *)(v24 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v26 = 5381;
    do
    {
      uint64_t v24 = v26;
      unsigned int v27 = *v25++;
      uint64_t v26 = (33 * v26) ^ v27;
    }
    while (v27);
  }
  std::mutex::lock(v22);
  *(void *)long long buf = v24;
  uint64_t v28 = sub_10004D37C(&v23[1].__m_.__sig, (unint64_t *)buf);
  if (v28)
  {
    uint64_t v30 = v28[3];
    unint64_t v29 = (std::__shared_weak_count *)v28[4];
    if (v29)
    {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v23);
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v29);
      char v31 = 0;
      if (!v30) {
        goto LABEL_25;
      }
LABEL_29:
      xpc_object_t v48 = 0;
      xpc_object_t v33 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v34 = v33;
      if (v33)
      {
        xpc_object_t v48 = v33;
      }
      else
      {
        xpc_object_t v34 = xpc_null_create();
        xpc_object_t v48 = v34;
        if (!v34)
        {
          xpc_object_t v35 = xpc_null_create();
          xpc_object_t v34 = 0;
          goto LABEL_36;
        }
      }
      if (xpc_get_type(v34) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_retain(v34);
LABEL_37:
        xpc_release(v34);
        xpc_object_t v46 = xpc_uint64_create(v19);
        if (!v46) {
          xpc_object_t v46 = xpc_null_create();
        }
        *(void *)long long buf = &v48;
        *(void *)&uint8_t buf[8] = "duration";
        sub_100035E70((uint64_t)buf, &v46, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(v46);
        xpc_object_t v46 = 0;
        xpc_object_t v44 = xpc_uint64_create(v15);
        if (!v44) {
          xpc_object_t v44 = xpc_null_create();
        }
        *(void *)long long buf = &v48;
        *(void *)&uint8_t buf[8] = "domestic_bytes";
        sub_100035E70((uint64_t)buf, &v44, &v45);
        xpc_release(v45);
        xpc_object_t v45 = 0;
        xpc_release(v44);
        xpc_object_t v44 = 0;
        xpc_object_t v42 = xpc_uint64_create(v17);
        if (!v42) {
          xpc_object_t v42 = xpc_null_create();
        }
        *(void *)long long buf = &v48;
        *(void *)&uint8_t buf[8] = "roaming_bytes";
        sub_100035E70((uint64_t)buf, &v42, &v43);
        xpc_release(v43);
        xpc_object_t v43 = 0;
        xpc_release(v42);
        xpc_object_t v42 = 0;
        xpc_object_t v40 = xpc_uint64_create(v17 + v15);
        if (!v40) {
          xpc_object_t v40 = xpc_null_create();
        }
        *(void *)long long buf = &v48;
        *(void *)&uint8_t buf[8] = "total_bytes";
        sub_100035E70((uint64_t)buf, &v40, &v41);
        xpc_release(v41);
        xpc_object_t v41 = 0;
        xpc_release(v40);
        xpc_object_t v40 = 0;
        xpc_object_t v38 = xpc_int64_create(*(unsigned int *)(v1 + 48));
        if (!v38) {
          xpc_object_t v38 = xpc_null_create();
        }
        *(void *)long long buf = &v48;
        *(void *)&uint8_t buf[8] = "subscriber_tag";
        sub_100035E70((uint64_t)buf, &v38, &v39);
        xpc_release(v39);
        xpc_object_t v39 = 0;
        xpc_release(v38);
        xpc_object_t v38 = 0;
        char v37 = *(NSObject **)(v1 + 40);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#I Submit Total data usage event", buf, 2u);
        }
        *(void *)long long buf = v48;
        if (v48) {
          xpc_retain(v48);
        }
        else {
          *(void *)long long buf = xpc_null_create();
        }
        (*(void (**)(uint64_t, const char *, unsigned char *))(*(void *)v30 + 16))(v30, "commCenterDataUsageTotalUsageQueriable", buf);
        xpc_release(*(xpc_object_t *)buf);
        *(void *)long long buf = 0;
        xpc_release(v48);
        goto LABEL_53;
      }
      xpc_object_t v35 = xpc_null_create();
LABEL_36:
      xpc_object_t v48 = v35;
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v30 = 0;
  }
  std::mutex::unlock(v23);
  unint64_t v29 = 0;
  char v31 = 1;
  if (v30) {
    goto LABEL_29;
  }
LABEL_25:
  long long v32 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#E No Telephony Analytics Service", buf, 2u);
  }
LABEL_53:
  if ((v31 & 1) == 0) {
    sub_10004D2C8(v29);
  }
LABEL_14:
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
}

void sub_10087E138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t a20,uint64_t a21,uint64_t a22,xpc_object_t object)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_10087E20C(uint64_t a1)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  _OWORD v9[2] = sub_10087E34C;
  v9[3] = &unk_101A12D10;
  long long v1 = *(_OWORD *)(a1 + 32);
  long long v10 = v1;
  uint64_t v2 = v1;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  char v11 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v4 || (uint64_t v5 = *(void *)(v1 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  unsigned int v7 = v6;
  char v8 = *(NSObject **)(v2 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v5;
  unint64_t v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v9;
  dispatch_async(v8, block);
  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10004D2C8(v7);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_10087E34C(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Call back for Since Last Sample", buf, 2u);
          uint64_t v6 = *(NSObject **)(v3 + 40);
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Sampling cellular usage statistics", buf, 2u);
        }
        v7[0] = 0;
        v7[1] = 524409;
        if (sub_10017B48C()) {
          operator new();
        }
        sub_100886E68(v7);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_10087EB08(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  unint64_t v14 = va_arg(va1, const void *);
  sub_10007CA64((const void **)va);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(a3);
  }
  sub_100886E68((uint64_t *)va1);
  sub_10004D2C8(a5);
  _Unwind_Resume(a1);
}

uint64_t sub_10087EC00(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10087EC1C(uint64_t a1)
{
  long long v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10087EC2C(uint64_t a1)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  _OWORD v9[2] = sub_10087ED6C;
  v9[3] = &unk_101A12D70;
  long long v1 = *(_OWORD *)(a1 + 32);
  long long v10 = v1;
  uint64_t v2 = v1;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  char v11 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v4 || (uint64_t v5 = *(void *)(v1 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  unsigned int v7 = v6;
  char v8 = *(NSObject **)(v2 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v5;
  unint64_t v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v9;
  dispatch_async(v8, block);
  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10004D2C8(v7);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_10087ED6C(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = v3[5];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Call back for Top Consuming Apps", buf, 2u);
          uint64_t v6 = v3[5];
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = v3[16];
          *(_DWORD *)long long buf = 134217984;
          *(void *)&uint8_t buf[4] = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Requested to sample %zd top consuming apps", buf, 0xCu);
        }
        if (v3[11])
        {
          v9[0] = 0;
          v9[1] = 524408;
          if (sub_10017B48C()) {
            operator new();
          }
          sub_1008871C8(v9);
        }
        else
        {
          char v8 = v3[5];
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I No app usage, not sending top consuming apps metrice", buf, 2u);
          }
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_10087F4D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
}

void sub_10087F5DC(uint64_t a1)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  uint64_t v9[2] = sub_10087F71C;
  v9[3] = &unk_101A12DD0;
  long long v1 = *(_OWORD *)(a1 + 32);
  long long v10 = v1;
  uint64_t v2 = v1;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  char v11 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v4 || (uint64_t v5 = *(void *)(v1 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v6;
  char v8 = *(NSObject **)(v2 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v5;
  unint64_t v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v9;
  dispatch_async(v8, block);
  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10004D2C8(v7);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_10087F71C(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = v3[5];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)char v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Call back for Tethering Data", v11, 2u);
        }
        unint64_t v8 = v3[17];
        unint64_t v7 = v3[18];
        if (v8 >= v7)
        {
          long long v10 = v3[5];
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)char v11 = 134217984;
            *(void *)&void v11[4] = v8 - v7;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Data usage for tethering, bytes consumed: %llu", v11, 0xCu);
          }
          *(void *)char v11 = 0;
          *(void *)&v11[8] = 524410;
          if (sub_10017B48C()) {
            operator new();
          }
          sub_100887018((uint64_t *)v11);
        }
        else
        {
          xpc_object_t v9 = v3[5];
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)char v11 = 134218240;
            *(void *)&void v11[4] = v8;
            *(_WORD *)&v11[12] = 2048;
            *(void *)&v11[14] = v7;
            _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Incorrect tethering counts. fTetheringBytesConsumed: %llu, fTetheringBytesConsumedLastSample: %llu", v11, 0x16u);
            unint64_t v7 = v3[18];
          }
          v3[17] = v7;
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_10087F970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100887018(&a9);
  sub_10004D2C8(v9);
  _Unwind_Resume(a1);
}

void sub_10087F9E4(uint64_t a1, int a2)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  _DWORD v10[2] = sub_10087FB28;
  v10[3] = &unk_101A12E30;
  long long v2 = *(_OWORD *)(a1 + 32);
  long long v11 = v2;
  uint64_t v3 = v2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  char v12 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = a2;
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v5 || (uint64_t v6 = *(void *)(v2 + 8), (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    sub_100088B9C();
  }
  unint64_t v8 = v7;
  xpc_object_t v9 = *(NSObject **)(v3 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v6;
  uint64_t v15 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v10;
  dispatch_async(v9, block);
  if (v15) {
    sub_10004D2C8(v15);
  }
  sub_10004D2C8(v8);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_10087FB28(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(a1 + 40))
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)unint64_t v7 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Call back for App Consumption", v7, 2u);
        }
        sub_10087FBE0(v3, *(_DWORD *)(a1 + 56));
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_10087FBCC(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10087FBE0(uint64_t a1, unsigned int a2)
{
  v3[0] = 0;
  v3[1] = a2;
  if (sub_10017B48C()) {
    operator new();
  }
  return sub_100886278(v3);
}

void sub_10087FDA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100886278((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10087FE1C(uint64_t a1)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  uint64_t v9[2] = sub_10087FF5C;
  v9[3] = &unk_101A12E90;
  long long v1 = *(_OWORD *)(a1 + 32);
  long long v10 = v1;
  uint64_t v2 = v1;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  long long v11 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v4 || (uint64_t v5 = *(void *)(v1 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  unint64_t v7 = v6;
  unint64_t v8 = *(NSObject **)(v2 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v5;
  int v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v9;
  dispatch_async(v8, block);
  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10004D2C8(v7);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_10087FF5C(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Call back for data usage recent N days", buf, 2u);
        }
        v9[0] = 0;
        v9[1] = 524422;
        if (sub_10017B48C()) {
          operator new();
        }
        unint64_t v7 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Metric is not collectable", buf, 2u);
        }
        sub_1008875D0(v9);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_100880488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if ((v9 & 1) == 0) {
    sub_10004D2C8(v8);
  }
  sub_1008875D0((uint64_t *)va);
  sub_10004D2C8(v7);
  _Unwind_Resume(a1);
}

void sub_10088057C(uint64_t a1)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  uint64_t v9[2] = sub_1008806BC;
  v9[3] = &unk_101A12EF0;
  long long v1 = *(_OWORD *)(a1 + 32);
  long long v10 = v1;
  uint64_t v2 = v1;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  long long v11 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v4 || (uint64_t v5 = *(void *)(v1 + 8), (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  unint64_t v7 = v6;
  unint64_t v8 = *(NSObject **)(v2 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v5;
  int v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v9;
  dispatch_async(v8, block);
  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10004D2C8(v7);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

void sub_1008806BC(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v8) = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Call back for data usage for process with empty bundle id", (uint8_t *)&v8, 2u);
        }
        v9[0] = 0;
        v9[1] = 524423;
        if (sub_10017B48C()) {
          operator new();
        }
        unint64_t v7 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v8) = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Metric is not collectable", (uint8_t *)&v8, 2u);
        }
        sub_100887780(v9);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_100880AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if ((v7 & 1) == 0) {
    sub_10004D2C8(v6);
  }
  sub_100887780((uint64_t *)va);
  sub_10004D2C8(v5);
  _Unwind_Resume(a1);
}

void sub_100880BBC(void *a1, int a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  _DWORD v8[2] = sub_100880CD8;
  void v8[3] = &unk_101A12F50;
  v8[4] = a1;
  int v9 = a2;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (uint64_t v4 = a1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  char v7 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v4;
  long long v11 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v8;
  dispatch_async(v7, block);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10004D2C8(v6);
}

void sub_100880CD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 40);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Setting total disabled bundles count to: %u", (uint8_t *)v5, 8u);
  }
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(a1 + 40);
}

void sub_100880D8C(uint64_t a1)
{
  long long v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100880E94(void *a1, long long *a2, char a3)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  _DWORD v10[2] = sub_100880FF0;
  v10[3] = &unk_101A12F70;
  void v10[4] = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *a2;
    uint64_t v12 = *((void *)a2 + 2);
  }
  char v13 = a3;
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (uint64_t v6 = a1[1], (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v8 = v7;
  int v9 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v6;
  uint64_t v15 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v10;
  dispatch_async(v9, block);
  if (v15) {
    sub_10004D2C8(v15);
  }
  sub_10004D2C8(v8);
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)__p);
  }
}

uint64_t *sub_100880FF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      int v4 = (void *)*v4;
    }
    uint64_t v5 = "true";
    if (!*(unsigned char *)(a1 + 64)) {
      uint64_t v5 = "false";
    }
    *(_DWORD *)unint64_t v29 = 136446466;
    *(void *)&v29[4] = v4;
    *(_WORD *)uint64_t v30 = 2080;
    *(void *)&int v30[2] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I App data switch toggled for bundleID: %{public}s, dataAllowed: %s", v29, 0x16u);
  }
  *(void *)unint64_t v29 = 0;
  *(_DWORD *)uint64_t v30 = 0;
  *(_DWORD *)&uint8_t v29[8] = 524403;
  if (sub_10017B48C()) {
    operator new();
  }
  uint64_t v6 = *(void *)v29;
  if (*(void *)v29)
  {
    *(_DWORD *)(*(void *)v29 + 60) |= 2u;
    char v7 = *(std::string **)(v6 + 16);
    if (v7 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v7, (const std::string *)(a1 + 40));
    uint64_t v8 = *(void *)v29;
    char v9 = *(unsigned char *)(a1 + 64);
    int v10 = *(_DWORD *)(*(void *)v29 + 60);
    *(_DWORD *)(*(void *)v29 + 60) = v10 | 4;
    *(unsigned char *)(v8 + 40) = v9;
    int v11 = *(_DWORD *)(v2 + 48);
    *(_DWORD *)(v8 + 60) = v10 | 0x44;
    *(_DWORD *)(v8 + 44) = v11;
    uint64_t v12 = *(void **)(v2 + 72);
    if (v12 != (void *)(v2 + 80))
    {
      int v13 = *(char *)(a1 + 63);
      if (v13 >= 0) {
        uint64_t v14 = *(unsigned __int8 *)(a1 + 63);
      }
      else {
        uint64_t v14 = *(void *)(a1 + 48);
      }
      do
      {
        uint64_t v15 = *((unsigned __int8 *)v12 + 103);
        if ((v15 & 0x80u) == 0) {
          uint64_t v16 = *((unsigned __int8 *)v12 + 103);
        }
        else {
          uint64_t v16 = v12[11];
        }
        if (v16 == v14)
        {
          uint64_t v17 = (const void **)(v12 + 10);
          if (v13 >= 0) {
            char v18 = (unsigned __int8 *)(a1 + 40);
          }
          else {
            char v18 = *(unsigned __int8 **)(a1 + 40);
          }
          if ((v15 & 0x80) != 0)
          {
            if (!memcmp(*v17, v18, v12[11]))
            {
LABEL_36:
              float v22 = *((float *)v12 + 31);
              float v23 = *((float *)v12 + 32);
              *(_DWORD *)(v8 + 60) = v10 | 0x7C;
              long long v24 = *(_OWORD *)((char *)v12 + 108);
              unint64_t v25 = (unint64_t)(float)(COERCE_FLOAT(HIDWORD(*(void *)((char *)v12 + 108))) - v23);
              *(void *)(v8 + 24) = (unint64_t)(float)(*(float *)&v24 - v22);
              *(void *)(v8 + 32) = v25;
              *(void *)(v8 + 48) = (unint64_t)(float)(vaddv_f32(*(float32x2_t *)&v24) - (float)(v22 + v23));
              *(_OWORD *)((char *)v12 + 124) = v24;
              break;
            }
          }
          else
          {
            if (!*((unsigned char *)v12 + 103)) {
              goto LABEL_36;
            }
            while (*(unsigned __int8 *)v17 == *v18)
            {
              uint64_t v17 = (const void **)((char *)v17 + 1);
              ++v18;
              if (!--v15) {
                goto LABEL_36;
              }
            }
          }
        }
        uint64_t v19 = (void *)v12[1];
        if (v19)
        {
          do
          {
            long long v20 = v19;
            uint64_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            long long v20 = (void *)v12[2];
            BOOL v21 = *v20 == (void)v12;
            uint64_t v12 = v20;
          }
          while (!v21);
        }
        uint64_t v12 = v20;
      }
      while (v20 != (void *)(v2 + 80));
    }
  }
  ++*(_DWORD *)(v2 + 56);
  int v26 = *(_DWORD *)(v2 + 64);
  if (!*(unsigned char *)(a1 + 64))
  {
    int v27 = 1;
    goto LABEL_41;
  }
  if (v26)
  {
    int v27 = -1;
LABEL_41:
    *(_DWORD *)(v2 + 64) = v27 + v26;
  }
  return sub_100885D68((uint64_t *)v29);
}

void sub_100881318()
{
}

void sub_100881384(void *a1, long long *a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1174405120;
  _DWORD v8[2] = sub_1008814D8;
  void v8[3] = &unk_101A12FA0;
  v8[4] = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *a2;
    uint64_t v10 = *((void *)a2 + 2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (uint64_t v4 = a1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  char v7 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v4;
  uint64_t v12 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v8;
  dispatch_async(v7, block);
  if (v12) {
    sub_10004D2C8(v12);
  }
  sub_10004D2C8(v6);
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)__p);
  }
}

uint64_t *sub_1008814D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    LODWORD(v6) = 136446210;
    *(void *)((char *)&v6 + 4) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Data usage paned viewed by client: %{public}s", (uint8_t *)&v6, 0xCu);
  }
  *(void *)&long long v6 = 0;
  *((void *)&v6 + 1) = 524404;
  if (sub_10017B48C()) {
    operator new();
  }
  ++*(_DWORD *)(v2 + 60);
  return sub_100885F18((uint64_t *)&v6);
}

void sub_100881680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1008816EC(void *a1, uint64_t a2, uint64_t a3)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  uint64_t v9[2] = sub_100881808;
  v9[3] = &unk_101A12FD0;
  void v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (uint64_t v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  char v7 = v6;
  uint64_t v8 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v5;
  int v11 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v9;
  dispatch_async(v8, block);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10004D2C8(v7);
}

uint64_t *sub_100881808(void *a1)
{
  uint64_t v2 = *(NSObject **)(a1[4] + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = a1[6];
    *(_DWORD *)long long v6 = 134218240;
    *(void *)&void v6[4] = v3;
    *(_WORD *)char v7 = 2048;
    *(void *)&uint64_t v7[2] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Data usage has been reset. Current total home: %llu, roaming: %llu", v6, 0x16u);
  }
  *(void *)long long v6 = 0;
  *(_DWORD *)char v7 = 0;
  *(_DWORD *)&v6[8] = 524405;
  if (sub_10017B48C()) {
    operator new();
  }
  return sub_1008860C8((uint64_t *)v6);
}

void sub_10088199C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *sub_100881A08(std::string *result, const std::string *a2, float *a3, int *a4, uint64_t a5)
{
  unint64_t v5 = (unint64_t)(float)(*a3 - a3[4]);
  unint64_t v6 = (unint64_t)(float)(a3[1] - a3[5]);
  int v7 = *a4;
  if (v6 + v5) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = v7 == 0;
  }
  if (!v8)
  {
    if (!a5) {
      sub_10007B600();
    }
    int v11 = result;
    float v12 = a3[2];
    float v13 = a3[3];
    float v14 = a3[6];
    float v15 = a3[7];
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a5 + 48))(a5);
    *(_DWORD *)(v16 + 104) |= 1u;
    uint64_t v17 = *(std::string **)(v16 + 8);
    if (v17 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    std::string::operator=(v17, a2);
    *(_DWORD *)(v16 + 104) |= 2u;
    char v18 = *(std::string **)(v16 + 16);
    if (v18 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
      operator new();
    }
    float v19 = v13 - v15;
    __n128 result = std::string::operator=(v18, v11);
    int v20 = *(_DWORD *)(v16 + 104);
    if (v5)
    {
      v20 |= 4u;
      *(void *)(v16 + 24) = v5;
    }
    unint64_t v21 = (unint64_t)v19;
    if (v6)
    {
      v20 |= 8u;
      *(void *)(v16 + 32) = v6;
    }
    unint64_t v22 = (unint64_t)(float)(v12 - v14);
    if (v21)
    {
      v20 |= 0x10u;
      *(void *)(v16 + 40) = v21;
    }
    if (v22)
    {
      v20 |= 0x40u;
      *(void *)(v16 + 56) = v22;
    }
    int v23 = v20 | 0x80;
    *(_DWORD *)(v16 + 104) = v20 | 0x80;
    *(void *)(v16 + 64) = v6 + v5;
    int v24 = a4[2];
    if (v24)
    {
      int v23 = v20 | 0x180;
      *(_DWORD *)(v16 + 104) = v20 | 0x180;
      *(_DWORD *)(v16 + 72) = v24;
    }
    int v25 = a4[1];
    if (v25)
    {
      v23 |= 0x400u;
      *(_DWORD *)(v16 + 80) = v25;
    }
    *(_DWORD *)(v16 + 104) = v23 | 0x800;
    *(_DWORD *)(v16 + 84) = v7;
  }
  return result;
}

void sub_100881BD8(void *a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  uint64_t v7[2] = sub_100881CF0;
  v7[3] = &unk_101A12FF0;
  void v7[4] = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = a1[1], (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    sub_100088B9C();
  }
  unint64_t v5 = v4;
  unint64_t v6 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v3;
  char v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v7;
  dispatch_async(v6, block);
  if (v9) {
    sub_10004D2C8(v9);
  }
  sub_10004D2C8(v5);
}

uint64_t *sub_100881CF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Data usage threshold reached for internet context", v4, 2u);
  }
  return sub_10087FBE0(v1, 0x80083u);
}

void sub_100881D68(void *a1, uint64_t a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  _DWORD v8[2] = sub_100881E80;
  void v8[3] = &unk_101A13010;
  v8[4] = a1;
  void v8[5] = a2;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (uint64_t v4 = a1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  unint64_t v6 = v5;
  int v7 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v4;
  uint64_t v10 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v8;
  dispatch_async(v7, block);
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_10004D2C8(v6);
}

void sub_100881E80(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 136) + *(void *)(a1 + 40);
  *(void *)(v2 + 136) = v3;
  uint64_t v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 134218240;
    uint64_t v7 = v5;
    __int16 v8 = 2048;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Data usage threshold reached for tethering, bytes consumed: %llu total consumed:: %llu", (uint8_t *)&v6, 0x16u);
  }
}

void sub_100881F44(void *a1, uint64_t a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  _DWORD v8[2] = sub_10088205C;
  void v8[3] = &unk_101A13030;
  v8[4] = a1;
  void v8[5] = a2;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (uint64_t v4 = a1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  int v6 = v5;
  uint64_t v7 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v4;
  uint64_t v10 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v8;
  dispatch_async(v7, block);
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_10004D2C8(v6);
}

void sub_10088205C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 134217984;
    uint64_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Resetting tethering bytes to: %llu", (uint8_t *)&v5, 0xCu);
  }
  v2[17] = *(void *)(a1 + 40);
  v2[18] = *(void *)(a1 + 40);
}

void sub_100882118(void *a1, int a2, int a3)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  uint64_t v9[2] = sub_100882234;
  v9[3] = &unk_101A13050;
  void v9[4] = a1;
  int v10 = a2;
  int v11 = a3;
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (uint64_t v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v6;
  __int16 v8 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v5;
  float v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v9;
  dispatch_async(v8, block);
  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10004D2C8(v7);
}

void sub_100882234(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 48);
  int v3 = *(_DWORD *)(a1 + 40);
  if (v2 == v3) {
    return;
  }
  uint64_t v5 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v20 = 67109376;
    *(_DWORD *)&v20[4] = v2;
    *(_WORD *)&unsigned char v20[8] = 1024;
    *(_DWORD *)&v20[10] = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Changing subscriber tag from: %u to: %u", v20, 0xEu);
    int v3 = *(_DWORD *)(a1 + 40);
  }
  *(_DWORD *)(v1 + 48) = v3;
  *(_DWORD *)(v1 + 52) = *(_DWORD *)(a1 + 44);
  sub_100884A1C(*(void **)(v1 + 80));
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 72) = v1 + 80;
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 88) = 0;
  uint64_t v6 = (uint64_t *)(*(_DWORD *)(v1 + 120) + 1);
  *(_DWORD *)(v1 + 120) = v6;
  *(void *)(v1 + 160) = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v6, *(Registry **)(v1 + 296));
  __int16 v8 = ServiceMap;
  if (v9 < 0)
  {
    int v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)int v20 = v9;
  float v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)v20);
  if (!v13)
  {
    uint64_t v15 = 0;
    goto LABEL_11;
  }
  uint64_t v15 = v13[3];
  float v14 = (std::__shared_weak_count *)v13[4];
  if (!v14)
  {
LABEL_11:
    std::mutex::unlock(v8);
    float v14 = 0;
    char v16 = 1;
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v8);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v14);
  char v16 = 0;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 72))(v15, v1 + 152, v1 + 160);
  uint64_t v17 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void *)(v1 + 152);
    uint64_t v19 = *(void *)(v1 + 160);
    *(_DWORD *)int v20 = 134218240;
    *(void *)&v20[4] = v18;
    *(_WORD *)&v20[12] = 2048;
    uint64_t v21 = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I New total usage home: %llu roaming: %llu", v20, 0x16u);
  }
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_10088247C(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008824AC(void *a1, char a2)
{
  block.tv_sec = 0;
  *(void *)&block.tv_usec = 0;
  gettimeofday(&block, 0);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  uint64_t v9[2] = sub_100882608;
  v9[3] = &unk_101A13070;
  char v10 = a2;
  void v9[4] = a1;
  void v9[5] = 1000 * block.tv_sec + block.tv_usec / 0x3E8uLL;
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (uint64_t v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v6;
  __int16 v8 = a1[3];
  block.tv_sec = (__darwin_time_t)_NSConcreteStackBlock;
  *(void *)&block.tv_usec = 1174405120;
  unsigned int v12 = sub_1008855C0;
  float v13 = &unk_101A131C0;
  uint64_t v15 = v5;
  char v16 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  float v14 = v9;
  dispatch_async(v8, &block);
  if (v16) {
    sub_10004D2C8(v16);
  }
  sub_10004D2C8(v7);
}

void sub_100882608(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 48))
  {
    if (!sub_10017B48C()) {
      return;
    }
    int v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Starting to collect data usage while on call", buf, 2u);
    }
    *(unsigned char *)(v1 + 240) = 1;
    uint64_t v4 = *(void *)(a1 + 40);
  }
  else
  {
    if (*(unsigned char *)(v1 + 240))
    {
      uint64_t v5 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Stopping collection of data usage while on call", buf, 2u);
      }
    }
    v11[0] = 0;
    v11[1] = 524420;
    if (sub_10017B48C()) {
      operator new();
    }
    uint64_t v6 = *(void **)(v1 + 72);
    if (v6 != (void *)(v1 + 80))
    {
      do
      {
        *((_DWORD *)v6 + 92) = 0;
        v6[45] = 0;
        uint64_t v7 = v6[47];
        v6[47] = 0;
        *(void *)long long buf = v7;
        sub_100030068((const void **)buf);
        __int16 v8 = (void *)v6[1];
        if (v8)
        {
          do
          {
            uint64_t v9 = v8;
            __int16 v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            uint64_t v9 = (void *)v6[2];
            BOOL v10 = *v9 == (void)v6;
            uint64_t v6 = v9;
          }
          while (!v10);
        }
        uint64_t v6 = v9;
      }
      while (v9 != (void *)(v1 + 80));
    }
    sub_100886900(v11);
    uint64_t v4 = 0;
    *(unsigned char *)(v1 + 240) = 0;
  }
  *(void *)(v1 + 232) = v4;
}

void sub_100882BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100882C80(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100882DCC(void *a1, long long *a2, long long *a3, const void **a4)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1174405120;
  v13[2] = sub_100882FB4;
  v13[3] = &unk_101A13090;
  v13[4] = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&v14, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v14 = *a2;
    uint64_t v15 = *((void *)a2 + 2);
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v17 = *((void *)a3 + 2);
  }
  long long v7 = *((_OWORD *)a4 + 1);
  long long v18 = *(_OWORD *)a4;
  long long v19 = v7;
  long long v20 = *((_OWORD *)a4 + 2);
  sub_10002FD9C(&v21, a4 + 6);
  __int16 v8 = (std::__shared_weak_count *)a1[2];
  if (!v8 || (uint64_t v9 = a1[1], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v11 = v10;
  unsigned int v12 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v9;
  int v23 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v13;
  dispatch_async(v12, block);
  if (v23) {
    sub_10004D2C8(v23);
  }
  sub_10004D2C8(v11);
  sub_100030068(&v21);
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
}

void sub_100882F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100882FB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::string::size_type v3 = a1 + 40;
  sub_10060C178((const void **)(a1 + 40), 47, &__dst);
  int v4 = *(char *)(a1 + 87);
  if (v4 >= 0) {
    uint64_t v5 = (const std::string::value_type *)(a1 + 64);
  }
  else {
    uint64_t v5 = *(const std::string::value_type **)(a1 + 64);
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    std::string::size_type v6 = *(void *)(a1 + 72);
  }
  long long v7 = std::string::append(&__dst, v5, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  BOOL v10 = (char *)(v2 + 80);
  uint64_t v9 = *(void **)(v2 + 80);
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v11 = (char *)(v2 + 80);
  do
  {
    char v12 = sub_100046FE8(v9 + 4, (void **)&__p.__r_.__value_.__l.__data_);
    if (v12 >= 0) {
      float v13 = v9;
    }
    else {
      float v13 = v9 + 1;
    }
    if (v12 >= 0) {
      uint64_t v11 = (char *)v9;
    }
    uint64_t v9 = (void *)*v13;
  }
  while (*v13);
  if (v11 == v10 || (sub_100046FE8(&__p, (void **)v11 + 4) & 0x80) != 0)
  {
LABEL_19:
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    memset(v39, 0, sizeof(v39));
    long long v38 = 0u;
    long long v36 = 0u;
    memset(v37, 0, sizeof(v37));
    long long v34 = 0u;
    long long v35 = 0u;
    memset(v33, 0, sizeof(v33));
    int v14 = *(_DWORD *)(v2 + 120) + 1;
    *(_DWORD *)(v2 + 120) = v14;
    if (*(char *)(a1 + 63) < 0)
    {
      sub_10004FC84(v33, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      v33[0] = *(_OWORD *)v3;
      *(void *)&v33[1] = *(void *)(v3 + 16);
    }
    if (*(char *)(a1 + 87) < 0)
    {
      sub_10004FC84((unsigned char *)&v33[1] + 8, *(void **)(a1 + 64), *(void *)(a1 + 72));
    }
    else
    {
      *(long long *)((char *)&v33[1] + 8) = *(_OWORD *)(a1 + 64);
      *((void *)&v33[2] + 1) = *(void *)(a1 + 80);
    }
    LODWORD(v33[3]) = v14;
    *((void *)&v33[7] + 1) = 0;
    LODWORD(v34) = 0;
    long long v35 = 0uLL;
    memset((char *)&v33[3] + 4, 0, 64);
    *((void *)&v34 + 1) = &v35;
    long long v36 = 0u;
    memset(v37, 0, 28);
    long long v38 = (unint64_t)&v38 + 8;
    long long v40 = 0uLL;
    memset(v39, 0, 52);
    *((void *)&v39[3] + 1) = &v40;
    uint64_t v42 = 0;
    *(void *)&long long v41 = 0;
    DWORD2(v41) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = __p;
    }
    sub_10088471C((char *)v47, v33);
    uint64_t v15 = *(char **)v10;
    char v16 = (char **)(v2 + 80);
    uint64_t v17 = (char **)(v2 + 80);
    if (!*(void *)v10) {
      goto LABEL_37;
    }
    char v16 = (char **)(v2 + 80);
    while (1)
    {
      while (1)
      {
        uint64_t v17 = (char **)v15;
        long long v18 = v15 + 32;
        if ((sub_100046FE8(&__dst, (void **)v15 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v15 = *v17;
        char v16 = v17;
        if (!*v17) {
          goto LABEL_37;
        }
      }
      if ((sub_100046FE8(v18, (void **)&__dst.__r_.__value_.__l.__data_) & 0x80) == 0) {
        break;
      }
      char v16 = v17 + 1;
      uint64_t v15 = v17[1];
      if (!v15) {
        goto LABEL_37;
      }
    }
    uint64_t v11 = *v16;
    if (!*v16)
    {
LABEL_37:
      uint64_t v45 = 0;
      long long v19 = (char *)operator new(0x180uLL);
      long long v20 = v19;
      v44[0] = v19;
      v44[1] = v2 + 80;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(v19 + 32, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)(v19 + 32) = __dst;
      }
      sub_10088471C(v20 + 56, v47);
      LOBYTE(v45) = 1;
      *(void *)long long v20 = 0;
      *((void *)v20 + 1) = 0;
      *((void *)v20 + 2) = v17;
      *char v16 = v20;
      uint64_t v21 = **(void **)(v2 + 72);
      if (v21)
      {
        *(void *)(v2 + 72) = v21;
        long long v20 = *v16;
      }
      sub_100046C90(*(uint64_t **)(v2 + 80), (uint64_t *)v20);
      ++*(void *)(v2 + 88);
      uint64_t v11 = (char *)v44[0];
      v44[0] = 0;
      sub_100886C60((uint64_t)v44);
    }
    sub_1008846B8((uint64_t)v47);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    sub_1008846B8((uint64_t)v33);
  }
  sub_100883818((uint64_t)(v11 + 108), a1 + 88);
  sub_100883818((uint64_t)(v11 + 140), a1 + 88);
  sub_10088385C((uint64_t)(v11 + 176), a1 + 88);
  sub_100883818((uint64_t)(v11 + 216), a1 + 88);
  sub_10088385C((uint64_t)(v11 + 248), a1 + 88);
  sub_100883818((uint64_t)(v11 + 288), a1 + 88);
  sub_10088385C((uint64_t)(v11 + 320), a1 + 88);
  if (*(unsigned char *)(v2 + 240))
  {
    if (*(unsigned char *)(a1 + 110))
    {
      *((float *)v11 + 90) = *((float *)v11 + 90) + (float)*(unint64_t *)(a1 + 96);
      if (*(unsigned char *)(a1 + 109))
      {
        ++*((_DWORD *)v11 + 91);
        if (!(*((void *)v11 + 47) ? sub_10008324C : 0))
        {
          CFDataRef v27 = *(const __CFData **)(a1 + 136);
          if (v27 ? sub_10008324C : 0)
          {
            BytePtr = CFDataGetBytePtr(v27);
            if (BytePtr)
            {
              int v30 = BytePtr[1];
              if (v30 == 30)
              {
                if (!*((_DWORD *)BytePtr + 2)
                  && !*((_DWORD *)BytePtr + 3)
                  && !*((_DWORD *)BytePtr + 4)
                  && (*((_DWORD *)BytePtr + 5) | 0x1000000) == 0x1000000)
                {
                  goto LABEL_53;
                }
                char v31 = 3;
              }
              else
              {
                if (v30 != 2 || !*((_DWORD *)BytePtr + 1) || *((_DWORD *)BytePtr + 1) == 127) {
                  goto LABEL_53;
                }
                char v31 = 2;
              }
              *((_WORD *)v11 + 184) = bswap32(*((unsigned __int16 *)BytePtr + 1)) >> 16;
              v11[371] = v31;
              sub_1003C5CD0((const void **)v11 + 47, (const void **)(a1 + 136));
              v11[370] = 1;
              if (*(unsigned char *)(a1 + 111))
              {
                char v32 = 2;
LABEL_87:
                v11[370] = v32;
                goto LABEL_53;
              }
              if (*(unsigned char *)(a1 + 112))
              {
                char v32 = 3;
                goto LABEL_87;
              }
            }
          }
        }
      }
    }
  }
LABEL_53:
  if (*(unsigned char *)(a1 + 108))
  {
    uint64_t v23 = *(void *)(a1 + 120);
    if (v23)
    {
      int v24 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 63) >= 0) {
          std::string::size_type v25 = v3;
        }
        else {
          std::string::size_type v25 = *(void *)(a1 + 40);
        }
        if (*(char *)(a1 + 87) >= 0) {
          std::string::size_type v26 = a1 + 64;
        }
        else {
          std::string::size_type v26 = *(void *)(a1 + 64);
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = v25;
        WORD2(__dst.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 6) = v26;
        HIWORD(__dst.__r_.__value_.__r.__words[2]) = 2048;
        *(void *)&v47[0] = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#N Process: %s with bundleID: %s is disabled from cell data but still consumed: %llu bytes", (uint8_t *)&__dst, 0x20u);
      }
      __dst.__r_.__value_.__r.__words[0] = 0;
      __dst.__r_.__value_.__l.__size_ = 524417;
      if (sub_10017B48C()) {
        operator new();
      }
      sub_100886CB8((uint64_t *)&__dst);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1008836C0()
{
}

uint64_t sub_1008837DC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

float sub_100883818(uint64_t a1, uint64_t a2)
{
  float result = (float)*(unint64_t *)(a2 + 8);
  *(float *)(a1 + 4 * *(unsigned __int8 *)(a2 + 16)) = *(float *)(a1 + 4 * *(unsigned __int8 *)(a2 + 16)) + result;
  if (*(unsigned char *)(a2 + 17)) {
    *(float *)(a1 + 12) = *(float *)(a1 + 12) + result;
  }
  if (*(unsigned char *)(a2 + 18))
  {
    float result = *(float *)(a1 + 8) + result;
    *(float *)(a1 + 8) = result;
  }
  return result;
}

void sub_10088385C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t **)(a1 + 24);
  int v4 = *(uint64_t **)(a1 + 24);
  if (*(unsigned char *)(a2 + 20))
  {
    if (v4)
    {
      unint64_t v6 = *(void *)a2;
      long long v7 = (uint64_t *)v5;
      long long v8 = v4;
      do
      {
        unint64_t v9 = v8[4];
        BOOL v10 = v9 >= v6;
        if (v9 >= v6) {
          uint64_t v11 = (uint64_t **)v8;
        }
        else {
          uint64_t v11 = (uint64_t **)(v8 + 1);
        }
        if (v10) {
          long long v7 = v8;
        }
        long long v8 = *v11;
      }
      while (*v11);
      if (v7 != (uint64_t *)v5 && v7[4] <= v6)
      {
        char v12 = (uint64_t *)v7[1];
        if (v12)
        {
          do
          {
            float v13 = v12;
            char v12 = (uint64_t *)*v12;
          }
          while (v12);
        }
        else
        {
          uint64_t v21 = v7;
          do
          {
            float v13 = (uint64_t *)v21[2];
            BOOL v19 = *v13 == (void)v21;
            uint64_t v21 = v13;
          }
          while (!v19);
        }
        if (*(uint64_t **)(a1 + 16) == v7) {
          *(void *)(a1 + 16) = v13;
        }
        --*(void *)(a1 + 32);
        sub_10005EE6C(v4, v7);
        operator delete(v7);
      }
    }
  }
  else
  {
    unint64_t v14 = *(void *)a2;
    uint64_t v15 = (uint64_t)v5;
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v15 = (uint64_t)v4;
          unint64_t v16 = v4[4];
          if (v16 <= v14) {
            break;
          }
          int v4 = (uint64_t *)*v4;
          uint64_t v5 = (uint64_t **)v15;
          if (!*(void *)v15) {
            goto LABEL_23;
          }
        }
        if (v16 >= v14) {
          break;
        }
        int v4 = (uint64_t *)v4[1];
        if (!v4)
        {
          uint64_t v5 = (uint64_t **)(v15 + 8);
          goto LABEL_23;
        }
      }
    }
    else
    {
LABEL_23:
      uint64_t v17 = operator new(0x30uLL);
      v17[4] = v14;
      *((unsigned char *)v17 + 40) = 0;
      sub_100046C38((uint64_t **)(a1 + 16), v15, v5, v17);
      ++*(_DWORD *)a1;
      uint64_t v15 = (uint64_t)v17;
    }
    char v18 = *(unsigned char *)(v15 + 40);
    if (*(unsigned char *)(a2 + 19)) {
      BOOL v19 = (v18 & 1) == 0;
    }
    else {
      BOOL v19 = 0;
    }
    char v20 = *(unsigned char *)(v15 + 40);
    if (v19)
    {
      ++*(_DWORD *)(a1 + 4);
      char v20 = v18 | 1;
      *(unsigned char *)(v15 + 40) = v18 | 1;
    }
    if (*(unsigned char *)(a2 + 17) && (v18 & 2) == 0)
    {
      ++*(_DWORD *)(a1 + 8);
      *(unsigned char *)(v15 + 40) = v20 | 2;
    }
  }
}

const void **sub_100883A30(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  uint64_t v5 = (unsigned char *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_10004FC84(v5, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t v5 = v6;
  }
  long long v7 = *(_OWORD *)(a2 + 88);
  long long v8 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v8;
  *(_OWORD *)(a1 + 88) = v7;

  return sub_10002FD9C((const void **)(a1 + 136), (const void **)(a2 + 136));
}

void sub_100883AE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100883B04(uint64_t a1)
{
  sub_100030068((const void **)(a1 + 136));
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

uint64_t sub_100883B64(Registry *a1, uint64_t *a2)
{
  long long v6 = 0;
  long long v7 = 0;
  Registry::getTimerService((uint64_t *)&v6, a1);
  if (v6)
  {
    uint64_t v3 = (**v6)(v6);
    uint64_t v4 = (v3 - *a2) / 1000000;
    *a2 = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
  return v4;
}

void sub_100883C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100883C1C(void *a1, int a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  _DWORD v8[2] = sub_100883D38;
  void v8[3] = &unk_101A130C0;
  v8[4] = a1;
  int v9 = a2;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (uint64_t v4 = a1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  long long v6 = v5;
  long long v7 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008855C0;
  block[3] = &unk_101A131C0;
  block[5] = v4;
  uint64_t v11 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  block[4] = v8;
  dispatch_async(v7, block);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10004D2C8(v6);
}

void sub_100883D38(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 40);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Collecting max of %u top consuming apps", (uint8_t *)v5, 8u);
  }
  *(void *)(v2 + 128) = *(unsigned int *)(a1 + 40);
}

uint64_t sub_100883DEC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100883E38(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a4, *(Registry **)(a1 + 296));
  long long v8 = ServiceMap;
  if (v9 < 0)
  {
    BOOL v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v9;
  float v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)buf);
  if (v13)
  {
    uint64_t v15 = v13[3];
    unint64_t v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v16 = 0;
      if (!v15) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  unint64_t v14 = 0;
  char v16 = 1;
  if (!v15)
  {
LABEL_7:
    uint64_t v17 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#E Failed to send bootstrap data usage metric : (no analytics interface)", buf, 2u);
    }
    goto LABEL_32;
  }
LABEL_11:
  xpc_object_t v31 = 0;
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v19 = v18;
  if (v18)
  {
    xpc_object_t v31 = v18;
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
    xpc_object_t v31 = v19;
    if (!v19)
    {
      xpc_object_t v20 = xpc_null_create();
      xpc_object_t v19 = 0;
      goto LABEL_18;
    }
  }
  if (xpc_get_type(v19) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v20 = xpc_null_create();
LABEL_18:
    xpc_object_t v31 = v20;
    goto LABEL_19;
  }
  xpc_retain(v19);
LABEL_19:
  xpc_release(v19);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v21 = (const char *)a2;
  }
  else {
    uint64_t v21 = *(const char **)a2;
  }
  xpc_object_t v29 = xpc_string_create(v21);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  *(void *)long long buf = &v31;
  uint64_t v28 = "carrierIdentifier";
  sub_100035E70((uint64_t)buf, &v29, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v29);
  xpc_object_t v29 = 0;
  xpc_object_t v25 = xpc_uint64_create(*a3);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  *(void *)long long buf = &v31;
  uint64_t v28 = "totalDataUsed";
  sub_100035E70((uint64_t)buf, &v25, &v26);
  xpc_release(v26);
  xpc_object_t v26 = 0;
  xpc_release(v25);
  xpc_object_t v25 = 0;
  xpc_object_t v23 = xpc_uint64_create(a3[1]);
  if (!v23) {
    xpc_object_t v23 = xpc_null_create();
  }
  *(void *)long long buf = &v31;
  uint64_t v28 = "roamingDataUsed";
  sub_100035E70((uint64_t)buf, &v23, &v24);
  xpc_release(v24);
  xpc_object_t v24 = 0;
  xpc_release(v23);
  xpc_object_t v22 = v31;
  xpc_object_t v23 = 0;
  if (v31) {
    xpc_retain(v31);
  }
  else {
    xpc_object_t v22 = xpc_null_create();
  }
  (*(void (**)(uint64_t, const char *, xpc_object_t *))(*(void *)v15 + 16))(v15, "commCenterBootstrapUsageSummary", &v22);
  xpc_release(v22);
  xpc_object_t v22 = 0;
  xpc_release(v31);
LABEL_32:
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_100884150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v12 - 72));
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(a1);
}

void sub_1008841BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a6, *(Registry **)(a1 + 296));
  uint64_t v12 = ServiceMap;
  if (v13 < 0)
  {
    unint64_t v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v15 = 5381;
    do
    {
      uint64_t v13 = v15;
      unsigned int v16 = *v14++;
      uint64_t v15 = (33 * v15) ^ v16;
    }
    while (v16);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v13;
  uint64_t v17 = sub_10004D37C(&v12[1].__m_.__sig, (unint64_t *)buf);
  if (v17)
  {
    uint64_t v19 = v17[3];
    xpc_object_t v18 = (std::__shared_weak_count *)v17[4];
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v12);
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v18);
      char v20 = 0;
      if (!v19) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  std::mutex::unlock(v12);
  xpc_object_t v18 = 0;
  char v20 = 1;
  if (!v19)
  {
LABEL_7:
    uint64_t v21 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#E Failed to send bootstrap top apps data usage metric : (no analytics interface)", buf, 2u);
    }
    goto LABEL_48;
  }
LABEL_11:
  xpc_object_t v48 = 0;
  xpc_object_t v22 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v23 = v22;
  if (v22)
  {
    xpc_object_t v48 = v22;
  }
  else
  {
    xpc_object_t v23 = xpc_null_create();
    xpc_object_t v48 = v23;
    if (!v23)
    {
      xpc_object_t v24 = xpc_null_create();
      xpc_object_t v23 = 0;
      goto LABEL_18;
    }
  }
  if (xpc_get_type(v23) != (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v24 = xpc_null_create();
LABEL_18:
    xpc_object_t v48 = v24;
    goto LABEL_19;
  }
  xpc_retain(v23);
LABEL_19:
  xpc_release(v23);
  if (*(char *)(a2 + 23) >= 0) {
    xpc_object_t v25 = (const char *)a2;
  }
  else {
    xpc_object_t v25 = *(const char **)a2;
  }
  xpc_object_t object = xpc_string_create(v25);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  *(void *)long long buf = &v48;
  uint64_t v45 = "carrierIdentifier";
  sub_100035E70((uint64_t)buf, &object, &v47);
  xpc_release(v47);
  xpc_object_t v47 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  if (*(char *)(a3 + 23) >= 0) {
    xpc_object_t v26 = (const char *)a3;
  }
  else {
    xpc_object_t v26 = *(const char **)a3;
  }
  xpc_object_t v42 = xpc_string_create(v26);
  if (!v42) {
    xpc_object_t v42 = xpc_null_create();
  }
  *(void *)long long buf = &v48;
  uint64_t v45 = "fBundleName";
  sub_100035E70((uint64_t)buf, &v42, &v43);
  xpc_release(v43);
  xpc_object_t v43 = 0;
  xpc_release(v42);
  xpc_object_t v42 = 0;
  if (*(char *)(a4 + 23) >= 0) {
    CFDataRef v27 = (const char *)a4;
  }
  else {
    CFDataRef v27 = *(const char **)a4;
  }
  xpc_object_t v40 = xpc_string_create(v27);
  if (!v40) {
    xpc_object_t v40 = xpc_null_create();
  }
  *(void *)long long buf = &v48;
  uint64_t v45 = "fProcessName";
  sub_100035E70((uint64_t)buf, &v40, &v41);
  xpc_release(v41);
  xpc_object_t v41 = 0;
  xpc_release(v40);
  xpc_object_t v40 = 0;
  uint64_t v28 = a5[1];
  if (__CFADD__(v28, *a5)) {
    uint64_t v29 = -1;
  }
  else {
    uint64_t v29 = v28 + *a5;
  }
  xpc_object_t v38 = xpc_uint64_create(v29);
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  *(void *)long long buf = &v48;
  uint64_t v45 = "totalDataUsedHome";
  sub_100035E70((uint64_t)buf, &v38, &v39);
  xpc_release(v39);
  xpc_object_t v39 = 0;
  xpc_release(v38);
  xpc_object_t v38 = 0;
  uint64_t v30 = a5[2];
  uint64_t v31 = a5[3];
  BOOL v32 = __CFADD__(v31, v30);
  uint64_t v33 = v31 + v30;
  if (v32) {
    uint64_t v34 = -1;
  }
  else {
    uint64_t v34 = v33;
  }
  xpc_object_t v36 = xpc_uint64_create(v34);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  *(void *)long long buf = &v48;
  uint64_t v45 = "totalDataUsedRoaming";
  sub_100035E70((uint64_t)buf, &v36, &v37);
  xpc_release(v37);
  xpc_object_t v37 = 0;
  xpc_release(v36);
  xpc_object_t v35 = v48;
  xpc_object_t v36 = 0;
  if (v48) {
    xpc_retain(v48);
  }
  else {
    xpc_object_t v35 = xpc_null_create();
  }
  (*(void (**)(uint64_t, const char *, xpc_object_t *))(*(void *)v19 + 16))(v19, "commCenterBootstrapUsagePerProcess", &v35);
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_release(v48);
LABEL_48:
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v18);
  }
}

void sub_1008845B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v12 - 88));
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100884638(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)float result = v1;
  uint64_t v2 = *(void **)(result + 16);
  if (v2 != (void *)(result + 24))
  {
    int v3 = 0;
    int v4 = 0;
    do
    {
      char v5 = *((unsigned char *)v2 + 40);
      if (v5)
      {
        *(_DWORD *)(result + 4) = ++v4;
        char v5 = *((unsigned char *)v2 + 40);
      }
      if ((v5 & 2) != 0) {
        *(_DWORD *)(result + 8) = ++v3;
      }
      long long v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          long long v7 = v6;
          long long v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != (void *)(result + 24));
  }
  return result;
}

uint64_t sub_1008846B8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_10088471C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  *((_OWORD *)__dst + 3) = a2[3];
  long long v6 = a2[4];
  long long v7 = a2[5];
  long long v8 = a2[6];
  *((_DWORD *)__dst + 28) = *((_DWORD *)a2 + 28);
  *((_OWORD *)__dst + 5) = v7;
  *((_OWORD *)__dst + 6) = v8;
  *((_OWORD *)__dst + 4) = v6;
  uint64_t v9 = *((void *)a2 + 15);
  *((_DWORD *)__dst + 32) = *((_DWORD *)a2 + 32);
  *((void *)__dst + 15) = v9;
  sub_1008848A0((uint64_t)(__dst + 136), (void *)a2 + 17);
  long long v10 = a2[11];
  *((_OWORD *)__dst + 10) = a2[10];
  *((_OWORD *)__dst + 11) = v10;
  uint64_t v11 = *((void *)a2 + 24);
  *((_DWORD *)__dst + 50) = *((_DWORD *)a2 + 50);
  *((void *)__dst + 24) = v11;
  sub_1008848A0((uint64_t)(__dst + 208), (void *)a2 + 26);
  long long v12 = *(long long *)((char *)a2 + 232);
  *(_OWORD *)(__dst + 248) = *(long long *)((char *)a2 + 248);
  *(_OWORD *)(__dst + 232) = v12;
  uint64_t v13 = *((void *)a2 + 33);
  *((_DWORD *)__dst + 68) = *((_DWORD *)a2 + 68);
  *((void *)__dst + 33) = v13;
  sub_1008848A0((uint64_t)(__dst + 280), (void *)a2 + 35);
  uint64_t v14 = *((void *)a2 + 38);
  *((_DWORD *)__dst + 78) = *((_DWORD *)a2 + 78);
  *((void *)__dst + 38) = v14;
  sub_10002FD9C((const void **)__dst + 40, (const void **)a2 + 40);
  return __dst;
}

void sub_10088484C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008848A0(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  int v3 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  long long v4 = a2 + 1;
  long long v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      unint64_t v6 = v5[4];
      uint64_t v7 = *(void *)(a1 + 8);
      long long v8 = v3;
      if (*(void **)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v9 = *(void **)(a1 + 8);
      long long v10 = v3;
      if (v7)
      {
        do
        {
          long long v8 = v9;
          uint64_t v9 = (void *)v9[1];
        }
        while (v9);
      }
      else
      {
        do
        {
          long long v8 = (void *)v10[2];
          BOOL v11 = *v8 == (void)v10;
          long long v10 = v8;
        }
        while (v11);
      }
      if (v8[4] < v6)
      {
LABEL_8:
        if (v7) {
          long long v12 = (uint64_t **)v8;
        }
        else {
          long long v12 = (uint64_t **)v3;
        }
        if (v7) {
          uint64_t v13 = (uint64_t **)(v8 + 1);
        }
        else {
          uint64_t v13 = (uint64_t **)v3;
        }
        if (*v13) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v13 = (uint64_t **)v3;
        long long v12 = (uint64_t **)v3;
        if (v7)
        {
          uint64_t v14 = *(uint64_t **)(a1 + 8);
          while (1)
          {
            while (1)
            {
              long long v12 = (uint64_t **)v14;
              unint64_t v15 = v14[4];
              if (v15 <= v6) {
                break;
              }
              uint64_t v14 = *v12;
              uint64_t v13 = v12;
              if (!*v12) {
                goto LABEL_24;
              }
            }
            if (v15 >= v6) {
              goto LABEL_25;
            }
            uint64_t v14 = v12[1];
            if (!v14)
            {
              uint64_t v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      unsigned int v16 = (uint64_t *)operator new(0x30uLL);
      *((_OWORD *)v16 + 2) = *((_OWORD *)v5 + 2);
      sub_100046C38((uint64_t **)a1, (uint64_t)v12, v13, v16);
LABEL_25:
      uint64_t v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          xpc_object_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          xpc_object_t v18 = (void *)v5[2];
          BOOL v11 = *v18 == (void)v5;
          long long v5 = v18;
        }
        while (!v11);
      }
      long long v5 = v18;
    }
    while (v18 != v4);
  }
  return a1;
}

void sub_100884A08(_Unwind_Exception *a1)
{
  sub_10005D144(v1);
  _Unwind_Resume(a1);
}

void sub_100884A1C(void *a1)
{
  if (a1)
  {
    sub_100884A1C(*a1);
    sub_100884A1C(a1[1]);
    sub_100884A70((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_100884A70(uint64_t a1)
{
  sub_1008846B8(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100884AC0(void *a1)
{
  if (a1)
  {
    sub_100884AC0(*a1);
    sub_100884AC0(a1[1]);
    sub_1002B2A44((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_100884B14(uint64_t **a1)
{
  int v3 = a1;
  uint64_t v1 = **a1;
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Shutdown", buf, 2u);
  }
  ctu::RestModule::disconnect((ctu::RestModule *)(v1 + 256));
  operator delete();
}

void sub_100884BB0()
{
}

void sub_100884BDC(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping", buf, 2u);
  }
  CFCalendarRef v3 = CFCalendarCreateWithIdentifier(kCFAllocatorDefault, kCFGregorianCalendar);
  uint64_t v4 = *(void *)(v1 + 248);
  *(void *)(v1 + 248) = v3;
  *(void *)long long buf = v4;
  sub_1006020EC((const void **)buf);
  if (*(void *)(v1 + 248)) {
    long long v5 = sub_100670388;
  }
  else {
    long long v5 = 0;
  }
  if (!v5)
  {
    unint64_t v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#N Could not create gregorian calendar", buf, 2u);
    }
  }
  sub_10035B5E0(v1 + 272);
  Registry::createRestModuleOneTimeUseConnection((uint64_t *)buf, *(Registry **)(v1 + 296));
  ctu::RestModule::connect();
  if (v8) {
    sub_10004D2C8(v8);
  }
  operator delete();
}

void sub_100884D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  operator delete();
}

void sub_100884D70(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
  }
  Registry::getTimerService((uint64_t *)buf, *(Registry **)(v1 + 296));
  uint64_t v3 = (***(uint64_t (****)(void))buf)(*(void *)buf);
  if (v31) {
    sub_10004D2C8((std::__shared_weak_count *)v31);
  }
  *(void *)(v1 + 168) = v3 / 1000000;
  *(void *)(v1 + 176) = v3;
  *(void *)(v1 + 184) = v3;
  *(void *)(v1 + 192) = v3;
  *(void *)(v1 + 200) = v3;
  *(void *)(v1 + 208) = v3;
  *(void *)(v1 + 216) = v3;
  *(void *)(v1 + 224) = v3;
  ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)(v3 / 1000000), *(Registry **)(v1 + 296));
  long long v5 = ServiceMap;
  if (v6 < 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v6;
  long long v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)buf);
  if (v10)
  {
    uint64_t v12 = v10[3];
    BOOL v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  BOOL v11 = 0;
  char v13 = 1;
LABEL_13:
  if (v12)
  {
    uint64_t v14 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v14 || (uint64_t v15 = *(void *)(v1 + 8), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
      sub_100088B9C();
    }
    uint64_t v17 = v16;
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v16);
    xpc_object_t v18 = *(NSObject **)(v1 + 24);
    if (v18) {
      dispatch_retain(*(dispatch_object_t *)(v1 + 24));
    }
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 0x40000000;
    aBlock[2] = sub_10087DB58;
    aBlock[3] = &unk_101A12CF0;
    aBlock[4] = v1;
    if (v18)
    {
      uint64_t v19 = _Block_copy(aBlock);
      char v20 = v19;
      object[0] = v18;
      *(void *)long long buf = _NSConcreteStackBlock;
      uint64_t v31 = 1174405120;
      BOOL v32 = sub_100885494;
      uint64_t v33 = &unk_101A13188;
      uint64_t v34 = v15;
      xpc_object_t v35 = v17;
      atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (v19) {
        uint64_t v21 = (std::__shared_weak_count *)_Block_copy(v19);
      }
      else {
        uint64_t v21 = 0;
      }
      xpc_object_t v36 = v21;
      (*(void (**)(uint64_t, const char *, uint64_t, dispatch_object_t *, uint8_t *))(*(void *)v12 + 40))(v12, "commCenterDataUsageTotalUsageQueriable", 1, object, buf);
      if (object[0]) {
        dispatch_release(object[0]);
      }
      if (v36) {
        _Block_release(v36);
      }
      if (v35) {
        std::__shared_weak_count::__release_weak(v35);
      }
      if (v20) {
        _Block_release(v20);
      }
    }
    std::__shared_weak_count::__release_weak(v17);
  }
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  xpc_object_t v22 = *(std::__shared_weak_count **)(v1 + 16);
  if (v22)
  {
    xpc_object_t v23 = *(std::__shared_weak_count **)(v1 + 8);
    xpc_object_t v24 = std::__shared_weak_count::lock(v22);
    if (v24)
    {
      xpc_object_t v25 = v24;
      p_shared_weak_owners = &v24->__shared_weak_owners_;
      atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v24);
      *(void *)long long buf = _NSConcreteStackBlock;
      uint64_t v31 = 1174405120;
      BOOL v32 = sub_10087E20C;
      uint64_t v33 = &unk_101A12D40;
      uint64_t v34 = v1;
      xpc_object_t v35 = v23;
      xpc_object_t v36 = v25;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      sub_10017B514();
      object[0] = (dispatch_object_t)_NSConcreteStackBlock;
      object[1] = (dispatch_object_t)1174405120;
      xpc_object_t object[2] = (dispatch_object_t)sub_10087EC2C;
      object[3] = (dispatch_object_t)&unk_101A12DA0;
      object[4] = (dispatch_object_t)v1;
      object[5] = (dispatch_object_t)v23;
      uint64_t v28 = v25;
      atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
      sub_10017B514();
      atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10017B514();
      atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10017B514();
      atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10017B514();
      atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10017B514();
      std::__shared_weak_count::__release_weak(v25);
      std::__shared_weak_count::__release_weak(v25);
      std::__shared_weak_count::__release_weak(v25);
      std::__shared_weak_count::__release_weak(v25);
      if (v28) {
        std::__shared_weak_count::__release_weak(v28);
      }
      if (v36) {
        std::__shared_weak_count::__release_weak(v36);
      }
      std::__shared_weak_count::__release_weak(v25);
      operator delete();
    }
  }
  sub_100088B9C();
}

void sub_100885374(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,dispatch_object_t object,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45)
{
  unint64_t v50 = *(const void **)(v49 - 112);
  if (v50) {
    _Block_release(v50);
  }
  long long v51 = *(std::__shared_weak_count **)(v49 - 120);
  if (v51) {
    std::__shared_weak_count::__release_weak(v51);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v47) {
    _Block_release(v47);
  }
  std::__shared_weak_count::__release_weak(v46);
  if ((v48 & 1) == 0) {
    sub_10004D2C8(v45);
  }
  operator delete();
}

void sub_100885494(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    long long v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      if (a1[4]) {
        sub_10041DE0C(a1 + 6, a2);
      }
      sub_10004D2C8(v6);
    }
  }
}

void sub_10088550C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void *sub_100885520(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  float result = (void *)a2[6];
  if (result) {
    float result = _Block_copy(result);
  }
  a1[6] = result;
  return result;
}

void sub_10088556C(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t sub_1008855C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1008855D0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1008855EC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_1008855FC(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (!subscriber::isValidSimSlot() || (subscriber::isValidSimSlot() & 1) == 0)
  {
    char v20 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = subscriber::asString();
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Invalid preferred data sim change (%s -> %s)", (uint8_t *)&buf, 0x16u);
    }
LABEL_26:
    operator delete();
  }
  uint64_t v3 = *((unsigned int *)v1 + 2);
  xpc_object_t v35 = 0;
  getCarrierNameForSimSlot((Registry **)(v2 + 296), v3, (uint64_t *)&v35, (uint64_t *)&__p);
  memset(&buf, 0, sizeof(buf));
  ctu::cf::assign();
  std::string __str = buf;
  sub_1000558F4((const void **)&__p.__r_.__value_.__l.__data_);
  sub_1000558F4(&v35);
  uint64_t v4 = *((unsigned int *)v1 + 3);
  BOOL v32 = 0;
  getCarrierNameForSimSlot((Registry **)(v2 + 296), v4, (uint64_t *)&v32, (uint64_t *)&v33);
  memset(&buf, 0, sizeof(buf));
  ctu::cf::assign();
  std::string __p = buf;
  sub_1000558F4(&v33);
  sub_1000558F4(&v32);
  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  int v6 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (!size) {
    goto LABEL_15;
  }
  std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
  }
  if (v7)
  {
    std::string::size_type v8 = v1[2];
    std::string::size_type v9 = *(void *)(v2 + 152);
    std::string::size_type v10 = v8 - v9;
    if (v8 >= v9)
    {
      unint64_t v11 = v1[3];
      unint64_t v12 = *(void *)(v2 + 160);
      std::string::size_type v13 = v11 - v12;
      if (v11 >= v12)
      {
        xpc_object_t v24 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134218240;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v8 - v9;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v13;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I Submit current data usage on preferred data sim change. domestic: %llu, roaming: %llu", (uint8_t *)&buf, 0x16u);
        }
        buf.__r_.__value_.__r.__words[0] = 0;
        buf.__r_.__value_.__l.__size_ = 524566;
        if (sub_10017B48C()) {
          operator new();
        }
        std::string::size_type v25 = buf.__r_.__value_.__r.__words[0];
        if (buf.__r_.__value_.__r.__words[0])
        {
          int v26 = *(_DWORD *)(buf.__r_.__value_.__r.__words[0] + 64);
          *(_DWORD *)(buf.__r_.__value_.__r.__words[0] + 56) = *(_DWORD *)(v2 + 48);
          *(_DWORD *)(v25 + 64) = v26 | 0x42;
          CFDataRef v27 = *(std::string **)(v25 + 16);
          if (v27 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          std::string::operator=(v27, &__str);
          std::string::size_type v28 = buf.__r_.__value_.__r.__words[0];
          *(_DWORD *)(buf.__r_.__value_.__r.__words[0] + 64) |= 4u;
          uint64_t v29 = *(std::string **)(v28 + 24);
          if (v29 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          std::string::operator=(v29, &__p);
          std::string::size_type v30 = buf.__r_.__value_.__r.__words[0];
          int v31 = *(_DWORD *)(buf.__r_.__value_.__r.__words[0] + 64);
          *(void *)(buf.__r_.__value_.__r.__words[0] + 32) = v10;
          *(void *)(v30 + 40) = v13;
          *(_DWORD *)(v30 + 64) = v31 | 0x38;
          *(void *)(v30 + 48) = v13 + v10;
        }
        sub_100885BB8((uint64_t *)&buf);
        goto LABEL_22;
      }
    }
    uint64_t v14 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = v1[3];
      uint64_t v16 = *(void *)(v2 + 160);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134218752;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v8;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v9;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
      uint64_t v38 = v15;
      __int16 v39 = 2048;
      uint64_t v40 = v16;
      uint64_t v17 = "#I Skip current data usage on preferred data sim change due to inconsistent cumulative usage. Current home: "
            "%llu, previous home: %llu, current roaming: %llu, prev roaming: %llu";
      xpc_object_t v18 = v14;
      uint32_t v19 = 42;
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&buf, v19);
    }
  }
  else
  {
LABEL_15:
    uint64_t v21 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v6 >= 0) {
        p_str = &__str;
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
      uint64_t v17 = "#I Skip current data usage on preferred data sim change due to missing carrier name ('%s' -> '%s')";
      xpc_object_t v18 = v21;
      uint32_t v19 = 22;
      goto LABEL_21;
    }
  }
LABEL_22:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  goto LABEL_26;
}

void sub_100885AA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

uint64_t *sub_100885BB8(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 64))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 64) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100885D18(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_100885D68(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 60))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 60) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100885EC8(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_100885F18(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 32))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 32) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100886078(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_1008860C8(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 56))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 56) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100886228(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_100886278(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 60))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 60) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_1008863D8(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

void sub_10088642C()
{
}

void *sub_100886440(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = off_101A13200;
  result[1] = v3;
  return result;
}

uint64_t sub_100886488(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A13200;
  a2[1] = v2;
  return result;
}

uint64_t sub_1008864B4(uint64_t a1)
{
  uint64_t v1 = **(int ***)(a1 + 8);
  int v2 = v1[9];
  uint64_t v3 = v1[8];
  if ((int)v3 >= v2)
  {
    if (v2 == v1[10])
    {
      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 6), v2 + 1);
      int v2 = v1[9];
    }
    v1[9] = v2 + 1;
    sub_100886584();
  }
  uint64_t v4 = *((void *)v1 + 3);
  v1[8] = v3 + 1;
  return *(void *)(v4 + 8 * v3);
}

uint64_t sub_100886538(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100886578()
{
}

void sub_100886584()
{
}

void sub_1008865C4()
{
}

void *sub_1008865E8(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_10088666C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  std::string::size_type v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(char *)(v1 + 31) < 0)
  {
    sub_10004FC84(&__str, *(void **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(v1 + 8);
    __str.__r_.__value_.__r.__words[2] = *(void *)(v1 + 24);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v3;
  }
  uint64_t v4 = (uint64_t **)(v2 + 312);
  if ((void **)(v2 + 320) == sub_100046F68(v2 + 312, (void **)&__str.__r_.__value_.__l.__data_))
  {
    long long v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = p_str;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#N bundleID: %s used data when it was not expected to", (uint8_t *)&buf, 0xCu);
    }
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = 524593;
    if (sub_10017B48C()) {
      operator new();
    }
    sub_100046BAC(v4, (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&__str);
    sub_100886AB0((uint64_t *)&buf);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  sub_1001102C4(&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_100886864(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
}

uint64_t *sub_100886900(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  long long v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 52))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 52) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100886A60(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_100886AB0(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  long long v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 28))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 28) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100886C10(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

void sub_100886C60(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100884A70((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t *sub_100886CB8(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  long long v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 56))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 56) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100886E18(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_100886E68(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  long long v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 136))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 136) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100886FC8(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_100887018(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  long long v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 44))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 44) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100887178(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_1008871C8(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  long long v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 56))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 56) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100887328(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

void sub_100887378(void *a1)
{
  if (a1)
  {
    sub_100887378(*a1);
    sub_100887378(a1[1]);
    sub_1008873CC((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_1008873CC(uint64_t a1)
{
  sub_10005D144(*(void **)(a1 + 104));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_10088742C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1008873CC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_100887478()
{
}

void *sub_10088748C(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = off_101A13290;
  result[1] = v3;
  return result;
}

uint64_t sub_1008874D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A13290;
  a2[1] = v2;
  return result;
}

uint64_t sub_100887500(uint64_t a1)
{
  uint64_t v1 = **(int ***)(a1 + 8);
  int v2 = v1[9];
  uint64_t v3 = v1[8];
  if ((int)v3 >= v2)
  {
    if (v2 == v1[10])
    {
      wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(v1 + 6), v2 + 1);
      int v2 = v1[9];
    }
    v1[9] = v2 + 1;
    sub_100886584();
  }
  uint64_t v4 = *((void *)v1 + 3);
  v1[8] = v3 + 1;
  return *(void *)(v4 + 8 * v3);
}

uint64_t sub_100887584(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1008875C4()
{
}

uint64_t *sub_1008875D0(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 44))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 44) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_100887730(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_100887780(uint64_t *a1)
{
  if (!*a1) {
    goto LABEL_17;
  }
  unsigned int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = sub_10001C8F4(8);
  long long v5 = (wis::WISServerConnection *)*v3;
  uint64_t v4 = (std::__shared_weak_count *)v3[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory((wis::MetricFactory *)v3);
    std::string::size_type v7 = (wis *)wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v2);
    std::string::size_type v8 = v7;
    if (v7)
    {
      uint64_t v9 = *a1;
      *a1 = 0;
      if (v9)
      {
        if (*(unsigned char *)(v9 + 44))
        {
          unint64_t WISTimestamp = *(void *)(v9 + 8);
        }
        else
        {
          unint64_t WISTimestamp = wis::getWISTimestamp(v7);
          *(_DWORD *)(v9 + 44) |= 1u;
          *(void *)(v9 + 8) = WISTimestamp;
        }
        wis::MetricContainer::storeMetric(v8, WISTimestamp, *(_DWORD *)v8, (const wireless_diagnostics::google::protobuf::MessageLite *)v9);
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      wis::WISServerConnection::SubmitMetric(v5, v8);
    }
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v11 = *a1;
  *a1 = 0;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = *a1;
    *a1 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  else
  {
LABEL_17:
    *a1 = 0;
  }
  return a1;
}

void sub_1008878E0(void *a1)
{
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  if (v1) {
    sub_10004D2C8(v1);
  }
  sub_10006A6AC(a1);
}

uint64_t sub_100887930(uint64_t a1, void *a2, NSObject **a3, const char *a4, int a5)
{
  PersonalitySpecificImpl::PersonalitySpecificImpl();
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v13, kCtLoggingSystemName, a4);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  std::string::size_type v10 = *a3;
  *(void *)(a1 + 40) = *a3;
  if (v10) {
    dispatch_retain(v10);
  }
  *(void *)(a1 + 48) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v14, &v13);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 56), (const ctu::OsLogLogger *)v14);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v14);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v13);
  *(void *)a1 = off_101A13338;
  *(void *)(a1 + 64) = off_101A133E0;
  *(void *)(a1 + 72) = *a2;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 80) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 88) = a5;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = a1 + 248;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return a1;
}

void sub_100887AAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  sub_100087E88(v3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  PersonalitySpecificImpl::~PersonalitySpecificImpl(v2);
  PersonalitySpecific::~PersonalitySpecific(v2);
  _Unwind_Resume(a1);
}

void sub_100887B00()
{
}

void sub_100887BE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  if (v2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void sub_100887C14(uint64_t a1)
{
  *(void *)a1 = off_101A13338;
  *(void *)(a1 + 64) = off_101A133E0;
  sub_100887D34(a1, 1);
  uint64_t v2 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  sub_10005CD2C(a1 + 240, *(char **)(a1 + 248));
  sub_10088E624((void *)(a1 + 192));
  sub_10088E624((void *)(a1 + 144));
  sub_10005D144(*(void **)(a1 + 112));

  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    sub_10004D2C8(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 56));
  sub_100087E88((void *)(a1 + 24));

  PersonalitySpecificImpl::~PersonalitySpecificImpl((PersonalitySpecificImpl *)a1);
}

void sub_100887D34(uint64_t a1, char a2)
{
  if (*(void *)(a1 + 120) || *(void *)(a1 + 184) || *(void *)(a1 + 232) || *(_DWORD *)(a1 + 296))
  {
    uint64_t v4 = (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (v4)
    {
      char v39 = a2;
      while (*(void *)(a1 + 184))
      {
        unint64_t v5 = *(void *)(a1 + 176);
        uint64_t v6 = *(void *)(*(void *)(a1 + 152) + 8 * (v5 / 0x66));
        unint64_t v7 = v5 % 0x66;
        std::string::size_type v8 = (uint64_t *)(v6 + 40 * (v5 % 0x66));
        unsigned __int8 v9 = [v4 removePolicyWithID:*v8];
        std::string::size_type v10 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          sub_100888294(__p, *(void **)(a1 + 280));
          if (v41 >= 0) {
            uint64_t v11 = __p;
          }
          else {
            uint64_t v11 = (void **)__p[0];
          }
          uint64_t v12 = v6 + 40 * v7;
          OsLogContext v13 = (void *)(v12 + 8);
          if (*(char *)(v12 + 31) < 0) {
            OsLogContext v13 = (void *)*v13;
          }
          uint64_t v14 = *v8;
          uint64_t v15 = asStringBool(v9);
          *(_DWORD *)long long buf = 136315906;
          xpc_object_t v43 = v11;
          __int16 v44 = 2080;
          uint64_t v45 = v13;
          __int16 v46 = 2048;
          uint64_t v47 = v14;
          __int16 v48 = 2080;
          uint64_t v49 = v15;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I (unset) removed fTmpPolicies for NWAgent %s: key=%s, id=%lu, result is %s", buf, 0x2Au);
          if (v41 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_10088EA00(a1 + 144);
      }
      while (*(void *)(a1 + 232))
      {
        unint64_t v16 = *(void *)(a1 + 224);
        uint64_t v17 = *(void *)(*(void *)(a1 + 200) + 8 * (v16 / 0x66));
        unint64_t v18 = v16 % 0x66;
        uint32_t v19 = (uint64_t *)(v17 + 40 * (v16 % 0x66));
        unsigned __int8 v20 = [v4 removePolicyWithID:*v19];
        uint64_t v21 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          sub_100888294(__p, *(void **)(a1 + 280));
          if (v41 >= 0) {
            xpc_object_t v22 = __p;
          }
          else {
            xpc_object_t v22 = (void **)__p[0];
          }
          uint64_t v23 = v17 + 40 * v18;
          xpc_object_t v24 = (void *)(v23 + 8);
          if (*(char *)(v23 + 31) < 0) {
            xpc_object_t v24 = (void *)*v24;
          }
          uint64_t v25 = *v19;
          uint64_t v26 = asStringBool(v20);
          *(_DWORD *)long long buf = 136315906;
          xpc_object_t v43 = v22;
          __int16 v44 = 2080;
          uint64_t v45 = v24;
          __int16 v46 = 2048;
          uint64_t v47 = v25;
          __int16 v48 = 2080;
          uint64_t v49 = v26;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I (unset) removed fTmpPoliciesLong for NWAgent %s: key=%s, id=%lu, result is %s", buf, 0x2Au);
          if (v41 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_10088EA00(a1 + 192);
      }
      sub_10005CD2C(a1 + 240, *(char **)(a1 + 248));
      *(void *)(a1 + 240) = a1 + 248;
      *(void *)(a1 + 248) = 0;
      *(void *)(a1 + 256) = 0;
      CFDataRef v27 = *(void **)(a1 + 104);
      std::string::size_type v28 = (void *)(a1 + 112);
      if (v27 != (void *)(a1 + 112))
      {
        do
        {
          uint64_t v29 = (void *)v27[4];
          unsigned __int8 v30 = [v4 removePolicyWithID:v29];
          int v31 = *(NSObject **)(a1 + 56);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            sub_100888294(__p, *(void **)(a1 + 280));
            int v32 = v41;
            uint64_t v33 = (void **)__p[0];
            uint64_t v34 = asStringBool(v30);
            *(_DWORD *)long long buf = 136315650;
            xpc_object_t v35 = __p;
            if (v32 < 0) {
              xpc_object_t v35 = v33;
            }
            xpc_object_t v43 = v35;
            __int16 v44 = 2048;
            uint64_t v45 = v29;
            __int16 v46 = 2080;
            uint64_t v47 = v34;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I removed fPolicies for NWAgent %s: %lu, result is %s", buf, 0x20u);
            if (v41 < 0) {
              operator delete(__p[0]);
            }
          }
          xpc_object_t v36 = (void *)v27[1];
          if (v36)
          {
            do
            {
              xpc_object_t v37 = v36;
              xpc_object_t v36 = (void *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              xpc_object_t v37 = (void *)v27[2];
              BOOL v38 = *v37 == (void)v27;
              CFDataRef v27 = v37;
            }
            while (!v38);
          }
          CFDataRef v27 = v37;
        }
        while (v37 != v28);
      }
      sub_10005D144(*(void **)(a1 + 112));
      *(void *)(a1 + 112) = 0;
      *(void *)(a1 + 120) = 0;
      *(void *)(a1 + 104) = v28;
      if (v39) {
        sub_100888824(a1, 0);
      }
      else {
        *(_DWORD *)(a1 + 296) = 0;
      }
    }
  }
}

void sub_1008881AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

void sub_1008881FC(uint64_t a1)
{
  sub_100887C14(a1);

  PersonalitySpecific::~PersonalitySpecific(v1);
}

void sub_100888224(uint64_t a1)
{
  sub_100887C14(a1 - 64);

  PersonalitySpecific::~PersonalitySpecific(v1);
}

void sub_100888250(uint64_t a1)
{
  sub_100887C14(a1);
  PersonalitySpecific::~PersonalitySpecific(v1);

  operator delete();
}

void sub_10088828C(uint64_t a1)
{
}

void sub_100888294(void *a1, void *a2)
{
  if (a2)
  {
    id v3 = [a2 UUIDString];
    sub_100058DB0(a1, (char *)[v3 UTF8String]);
  }
  else
  {
    sub_100058DB0(a1, "empty");
  }
}

void sub_100888324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100888338(void *a1, void *a2)
{
  if (a2)
  {
    id v3 = [a2 UUIDString];
    sub_100058DB0(a1, (char *)[v3 UTF8String]);
  }
  else
  {
    sub_100058DB0(a1, "empty");
  }
}

void sub_1008883C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1008883DC(uint64_t a1)
{
  return *(id *)(a1 + 96);
}

id sub_1008883E4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1008883EC(uint64_t a1, void *a2)
{
}

void sub_1008883F4(uint64_t a1, void *a2)
{
}

void sub_1008883FC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v19 = a2;
  id v8 = a3;
  id v9 = a4;
  id v11 = *(id *)(a1 + 280);
  if (v11) {
    BOOL v12 = v11 == v9;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12) {
    sub_100887D34(a1, 1);
  }
  OsLogContext v13 = (void **)(a1 + 280);
  if (v9)
  {
    uint64_t v14 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = [v9 UUIDString];
      *(_DWORD *)long long buf = 136315138;
      id v21 = [v15 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I set agent UUID %s", buf, 0xCu);
    }
  }
  else
  {
    unint64_t v16 = *v13;
    if (*v13)
    {
      uint64_t v17 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        id v18 = [v16 UUIDString];
        *(_DWORD *)long long buf = 136315138;
        id v21 = [v18 UTF8String];
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I removed agent UUID %s", buf, 0xCu);
      }
    }
  }
  objc_storeStrong((id *)(a1 + 280), a4);
  objc_storeStrong((id *)(a1 + 264), a2);
  objc_storeStrong((id *)(a1 + 272), a3);
}

void sub_1008885D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10088860C(uint64_t a1, void *a2, void *a3, void *a4)
{
}

void sub_100888614(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v6 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [v4 UUIDString];
    int v8 = 136315138;
    id v9 = [v7 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I set agent slice UUID %s", (uint8_t *)&v8, 0xCu);
  }
  objc_storeStrong((id *)(a1 + 288), a2);
}

void sub_100888708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100888730(uint64_t a1, void *a2)
{
}

void sub_100888738(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 296))
  {
    uint64_t v2 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      sub_100888294(__p, *(void **)(a1 + 280));
      if (v5 >= 0) {
        id v3 = __p;
      }
      else {
        id v3 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315138;
      id v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Do not need policy for NWAgent %s", buf, 0xCu);
      if (v5 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_100887D34(a1, 1);
  }
}

void sub_100888824(uint64_t a1, unsigned int a2)
{
  id v4 = (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  char v5 = v4;
  if (v4)
  {
    unsigned __int8 v6 = [v4 apply];
    id v7 = *(NSObject **)(a1 + 56);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    if (a2 > 6) {
      int v8 = "Unknown PolicyType";
    }
    else {
      int v8 = off_101A137B8[a2];
    }
    sub_100888294(__p, *(void **)(a1 + 280));
    int v9 = v18;
    std::string::size_type v10 = *(unsigned char **)__p;
    uint64_t v11 = asStringBool(v6);
    BOOL v12 = __p;
    *(_DWORD *)long long buf = 136315650;
    if (v9 < 0) {
      BOOL v12 = v10;
    }
    *(void *)&uint8_t buf[4] = v8;
    __int16 v20 = 2080;
    id v21 = v12;
    __int16 v22 = 2080;
    uint64_t v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Applied policy %s for NWAgent %s: result=%s", buf, 0x20u);
    if (v18 < 0)
    {
      operator delete(*(void **)__p);
      if ((v6 & 1) == 0)
      {
LABEL_10:
        OsLogContext v13 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          sub_100888294(buf, *(void **)(a1 + 280));
          uint64_t v14 = v22 >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)std::string __p = 136315138;
          *(void *)&__p[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#E error in policy appling for NWAgent %s, trying again...", __p, 0xCu);
          if (SHIBYTE(v22) < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (([v5 apply] & 1) == 0)
        {
          id v15 = *(NSObject **)(a1 + 56);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            sub_100888294(buf, *(void **)(a1 + 280));
            if (v22 >= 0) {
              unint64_t v16 = buf;
            }
            else {
              unint64_t v16 = *(unsigned char **)buf;
            }
            *(_DWORD *)std::string __p = 136315138;
            *(void *)&__p[4] = v16;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#E error in policy applying for NWAgent %s final", __p, 0xCu);
            if (SHIBYTE(v22) < 0) {
              operator delete(*(void **)buf);
            }
          }
          a2 = 6;
        }
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 1) == 0) {
        goto LABEL_10;
      }
    }
    *(_DWORD *)(a1 + 296) = a2;
  }
}

void sub_100888A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_100888AD4(uint64_t a1, BOOL a2, uint64_t *a3)
{
  if (*(void *)(a1 + 280))
  {
    unsigned __int8 v6 = (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!v6) {
      goto LABEL_50;
    }
    id v7 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      sub_100888294(__p, *(void **)(a1 + 280));
      int v8 = v35;
      int v9 = *(unsigned char **)__p;
      uint64_t v10 = asStringBool(a2);
      uint64_t v11 = __p;
      if (v8 < 0) {
        uint64_t v11 = v9;
      }
      if (*((char *)a3 + 23) >= 0) {
        BOOL v12 = a3;
      }
      else {
        BOOL v12 = (uint64_t *)*a3;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v11;
      __int16 v37 = 2080;
      uint64_t v38 = v10;
      __int16 v39 = 2080;
      uint64_t v40 = v12;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I IMS protection for NWAgent %s: active=%s, interface=%s", buf, 0x20u);
      if (v35 < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (*(void *)(a1 + 280))
    {
      OsLogContext v13 = (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
      uint64_t v14 = v13;
      if (v13 && *(unsigned char *)(a1 + 136))
      {
        [v13 removePolicyWithID:*(void *)(a1 + 128)];
        *(unsigned char *)(a1 + 128) = 0;
        *(unsigned char *)(a1 + 136) = 0;
        int v15 = 1;
      }
      else
      {
        int v15 = 0;
      }

      uint64_t v16 = *((unsigned __int8 *)a3 + 23);
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = a3[1];
      }
      if (!v16 || !a2)
      {
        if (v15)
        {
          uint64_t v17 = *(NSObject **)(a1 + 56);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I IMS protection for NWAgent: clean applied", buf, 2u);
          }
LABEL_49:
          sub_100888824(a1, *(_DWORD *)(a1 + 296));
        }
LABEL_50:

        return;
      }
    }
    else
    {
      uint64_t v18 = *((unsigned __int8 *)a3 + 23);
      if ((v18 & 0x80u) != 0) {
        uint64_t v18 = a3[1];
      }
      if (!v18 || !a2) {
        goto LABEL_50;
      }
    }
    id v19 = +[CCNEPolicyResult drop];
    if (*((char *)a3 + 23) >= 0) {
      __int16 v20 = a3;
    }
    else {
      __int16 v20 = (uint64_t *)*a3;
    }
    id v21 = +[NSString stringWithUTF8String:v20];
    __int16 v22 = +[CCNEPolicyCondition scopedInterface:v21];

    uint64_t v23 = +[CCNEPolicyCondition platformBinary];
    [v23 setNegative:1];
    xpc_object_t v24 = +[CCNEPolicyCondition ipProtocol:58];
    [v24 setNegative:1];
    id v25 = objc_alloc_init((Class)NSMutableArray);
    [v25 addObject:v22];
    [v25 addObject:v23];
    [v25 addObject:v24];
    uint64_t v26 = [[CCNEPolicy alloc] initWithOrder:990000 result:v19 conditions:v25];
    id v27 = [v6 addPolicy:v26];
    std::string::size_type v28 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      sub_100888294(buf, *(void **)(a1 + 280));
      if (v39 >= 0) {
        uint64_t v29 = buf;
      }
      else {
        uint64_t v29 = *(unsigned char **)buf;
      }
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = v29;
      __int16 v33 = 2048;
      id v34 = v27;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I Adding IMS protection DROP policy for NWAgent %s: id=%lu", __p, 0x16u);
      if (SHIBYTE(v39) < 0) {
        operator delete(*(void **)buf);
      }
      std::string::size_type v28 = *(NSObject **)(a1 + 56);
    }
    BOOL v30 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    if (v27)
    {
      if (v30)
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v27;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", buf, 8u);
      }
      *(void *)(a1 + 128) = v27;
      *(unsigned char *)(a1 + 136) = 1;
    }
    else if (v30)
    {
      sub_100888294(buf, *(void **)(a1 + 280));
      int v31 = v39 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v31;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#E Adding IMS protection drop policy for NWAgent %s: policy is invalid", __p, 0xCu);
      if (SHIBYTE(v39) < 0) {
        operator delete(*(void **)buf);
      }
    }

    if (!v27) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }
}

void sub_100888FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_10088905C(uint64_t a1, BOOL a2, uint64_t *a3)
{
}

uint64_t sub_100889064(uint64_t a1, _DWORD *a2, unsigned int a3)
{
  long long v7 = 0u;
  __p[0] = (void *)a3;
  long long v6 = 0uLL;
  __p[1] = 0;
  LODWORD(v7) = 100 * *a2 + 100;
  BYTE8(v7) = 1;
  uint64_t v3 = sub_100889100(a1, (uint64_t)a2, (uint64_t)__p, *(void **)(a1 + 288), &v8);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[1]);
  }
  return v3;
}

void sub_1008890E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100889100(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned char *a5)
{
  id v8 = a4;
  v236 = a5;
  *a5 = 0;
  if (!*(unsigned char *)(a2 + 72)) {
    goto LABEL_15;
  }
  uint64_t v9 = *(unsigned __int8 *)(a2 + 71);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a2 + 56);
  }
  if (v9 != 18
    || (v10 >= 0 ? (uint64_t v11 = (uint64_t *)(a2 + 48)) : (uint64_t v11 = *(uint64_t **)(a2 + 48)),
        (v12 = *v11, v13 = v11[1], uint64_t v14 = (uint64_t *)*((unsigned __int16 *)v11 + 8), v12 == 0x6C7070612E6D6F63)
      ? (BOOL v15 = v13 == 0x6974656361662E65)
      : (BOOL v15 = 0),
        v15 ? (BOOL v16 = v14 == 25965) : (BOOL v16 = 0),
        !v16))
  {
LABEL_15:
    int v17 = 0;
    goto LABEL_16;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v14, *(Registry **)(a1 + 72));
  uint64_t v61 = ServiceMap;
  if (v62 < 0)
  {
    uint64_t v63 = (unsigned __int8 *)(v62 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v64 = 5381;
    do
    {
      uint64_t v62 = v64;
      unsigned int v65 = *v63++;
      uint64_t v64 = (33 * v64) ^ v65;
    }
    while (v65);
  }
  std::mutex::lock(ServiceMap);
  buf[0] = v62;
  id v66 = sub_10004D37C(&v61[1].__m_.__sig, buf);
  if (!v66)
  {
    uint64_t v68 = 0;
LABEL_244:
    std::mutex::unlock(v61);
    long long v67 = 0;
    char v69 = 1;
    if (!v68) {
      goto LABEL_247;
    }
    goto LABEL_245;
  }
  uint64_t v68 = v66[3];
  long long v67 = (std::__shared_weak_count *)v66[4];
  if (!v67) {
    goto LABEL_244;
  }
  atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v61);
  atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v67);
  char v69 = 0;
  if (!v68) {
    goto LABEL_247;
  }
LABEL_245:
  uint64_t v145 = (*(uint64_t (**)(uint64_t))(*(void *)v68 + 872))(v68);
  if (v145 && ((*(uint64_t (**)(uint64_t))(*(void *)v145 + 48))(v145) & 1) == 0)
  {
    v175 = *(NSObject **)(a1 + 56);
    int v146 = 0;
    if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_DEFAULT, "#N IDS/SlicedCellularInterface feature not enabled, do not allow Facetime slicing", (uint8_t *)buf, 2u);
      int v146 = 0;
    }
    goto LABEL_248;
  }
LABEL_247:
  int v146 = 1;
LABEL_248:
  if (v69)
  {
    if (!v146) {
      goto LABEL_440;
    }
  }
  else
  {
    sub_10004D2C8(v67);
    if (!v146) {
      goto LABEL_440;
    }
  }
  int v17 = 1;
LABEL_16:
  if (*(_DWORD *)(a1 + 88)) {
    BOOL v18 = 1;
  }
  else {
    BOOL v18 = *(unsigned char *)(a3 + 42) == 0;
  }
  if (!v18 && !*(void *)(a1 + 304))
  {
    v248 = 0;
    v249 = 0;
    Registry::getTimerService((uint64_t *)&v248, *(Registry **)(a1 + 72));
    if (v248)
    {
      id v19 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I Internet agent timer: to be created...", (uint8_t *)buf, 2u);
      }
      memset(buf, 0, 32);
      __int16 v20 = *(std::__shared_weak_count **)(a1 + 32);
      if (!v20 || (v21 = *(void *)(a1 + 24), (__int16 v22 = std::__shared_weak_count::lock(v20)) == 0)) {
        sub_100088B9C();
      }
      uint64_t v23 = v22;
      atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v22);
      buf[3] = 0;
      xpc_object_t v24 = operator new(0x20uLL);
      *xpc_object_t v24 = off_101A13710;
      v24[1] = a1;
      v24[2] = v21;
      void v24[3] = v23;
      buf[3] = v24;
      id v25 = v248;
      sub_100058DB0(__p, "Internet agent timer");
      sub_1003B0CB8((uint64_t)v25, (uint64_t)__p, 0, 30000000, (uint64_t)buf);
      std::string::size_type v26 = v247.__r_.__value_.__r.__words[0];
      v247.__r_.__value_.__r.__words[0] = 0;
      uint64_t v27 = *(void *)(a1 + 304);
      *(void *)(a1 + 304) = v26;
      if (v27)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
        std::string::size_type v28 = v247.__r_.__value_.__r.__words[0];
        v247.__r_.__value_.__r.__words[0] = 0;
        if (v28) {
          (*(void (**)(std::string::size_type))(*(void *)v28 + 8))(v28);
        }
      }
      if (v252 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v29 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v247.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I Internet agent timer: created", (uint8_t *)&v247, 2u);
      }
      sub_10003B34C(buf);
    }
    if (v249) {
      sub_10004D2C8(v249);
    }
  }
  int v241 = 0;
  int v239 = *(unsigned __int8 *)(a3 + 40);
  int v237 = *(unsigned __int8 *)(a3 + 41);
  if (*(unsigned char *)(a2 + 232) && !*(unsigned char *)(a2 + 8) && !*(unsigned char *)(a2 + 40)) {
    int v241 = TrafficDescriptor::hasAccountInfo((TrafficDescriptor *)a2) ^ 1;
  }
  v240 = (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (!v240)
  {
    uint64_t v58 = 0;
    int v59 = 1;
    goto LABEL_439;
  }
  v248 = 0;
  v249 = 0;
  uint64_t v250 = 0;
  TrafficDescriptor::toKey((uint64_t *)&v248, (TrafficDescriptor *)a2);
  BOOL v30 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v242 = a2;
    int v31 = v17;
    id v234 = v8;
    sub_100888294(&v247, *(void **)(a1 + 280));
    int v32 = SHIBYTE(v247.__r_.__value_.__r.__words[2]);
    std::string::size_type v33 = v247.__r_.__value_.__r.__words[0];
    int v34 = SHIBYTE(v250);
    char v35 = (void **)v248;
    uint64_t v36 = *(void *)(a3 + 8);
    int v37 = *(char *)(a3 + 31);
    uint64_t v38 = asStringBool(*(unsigned char *)(a3 + 42));
    if (v37 >= 0) {
      uint64_t v39 = a3 + 8;
    }
    else {
      uint64_t v39 = v36;
    }
    LODWORD(buf[0]) = 136315906;
    uint64_t v40 = &v248;
    if (v34 < 0) {
      uint64_t v40 = v35;
    }
    char v41 = &v247;
    if (v32 < 0) {
      char v41 = (std::string *)v33;
    }
    *(void *)((char *)buf + 4) = v41;
    WORD2(buf[1]) = 2080;
    *(void *)((char *)&buf[1] + 6) = v40;
    HIWORD(buf[2]) = 2080;
    buf[3] = v39;
    LOWORD(buf[4]) = 2080;
    *(void *)((char *)&buf[4] + 2) = v38;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I Preparing slice Internet policy for NWAgent %s td %s interface <%s> (temp %s)", (uint8_t *)buf, 0x2Au);
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v247.__r_.__value_.__l.__data_);
    }
    id v8 = v234;
    int v17 = v31;
    a2 = v242;
  }
  memset(&v247, 0, sizeof(v247));
  memset(&v246, 0, sizeof(v246));
  memset(&v245, 0, sizeof(v245));
  if (*(unsigned char *)(a3 + 42))
  {
    uint64_t v272 = 0;
    long long v270 = 0u;
    long long v271 = 0u;
    long long v268 = 0u;
    long long v269 = 0u;
    long long v266 = 0u;
    long long v267 = 0u;
    long long v264 = 0u;
    long long v265 = 0u;
    long long v262 = 0u;
    long long v263 = 0u;
    *(_OWORD *)v260 = 0u;
    long long v261 = 0u;
    long long v259 = 0u;
    memset(buf, 0, sizeof(buf));
    sub_10004DE24((uint64_t)buf);
    if (v250 >= 0) {
      xpc_object_t v42 = &v248;
    }
    else {
      xpc_object_t v42 = v248;
    }
    if (v250 >= 0) {
      uint64_t v43 = HIBYTE(v250);
    }
    else {
      uint64_t v43 = (uint64_t)v249;
    }
    __int16 v44 = sub_10004B96C(buf, (uint64_t)v42, v43);
    v257.__r_.__value_.__s.__data_[0] = 124;
    uint64_t v45 = sub_10004B96C(v44, (uint64_t)&v257, 1);
    std::to_string(&v257, *(_DWORD *)a3);
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v46 = &v257;
    }
    else {
      __int16 v46 = (std::string *)v257.__r_.__value_.__r.__words[0];
    }
    if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v257.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v257.__r_.__value_.__l.__size_;
    }
    sub_10004B96C(v45, (uint64_t)v46, size);
    if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v257.__r_.__value_.__l.__data_);
    }
    sub_10004BC98((uint64_t)&buf[1], &v257);
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v247.__r_.__value_.__l.__data_);
    }
    std::string v247 = v257;
    if (*(unsigned char *)(a3 + 40))
    {
      if ((void **)(a1 + 248) != sub_100046F68(a1 + 240, (void **)&v247.__r_.__value_.__l.__data_))
      {
        __int16 v48 = *(NSObject **)(a1 + 56);
        int v239 = 0;
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v49 = &v247;
          if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v49 = (std::string *)v247.__r_.__value_.__r.__words[0];
          }
          unint64_t v50 = &v248;
          if (v250 < 0) {
            unint64_t v50 = v248;
          }
          LODWORD(v257.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v49;
          WORD2(v257.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v257.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v50;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#I CFStringRef key = %s already present (td = %s)", (uint8_t *)&v257, 0x16u);
          int v239 = 0;
        }
      }
    }
    if (*(unsigned char *)(a3 + 41))
    {
      std::operator+<char>();
      if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v246.__r_.__value_.__l.__data_);
      }
      std::string v246 = v257;
      if ((void **)(a1 + 248) != sub_100046F68(a1 + 240, (void **)&v246.__r_.__value_.__l.__data_))
      {
        long long v51 = *(NSObject **)(a1 + 56);
        int v237 = 0;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v52 = &v246;
          if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            __int16 v52 = (std::string *)v246.__r_.__value_.__r.__words[0];
          }
          uint64_t v53 = &v248;
          if (v250 < 0) {
            uint64_t v53 = v248;
          }
          LODWORD(v257.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
          WORD2(v257.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v257.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v53;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#I CFStringRef key = %s already present (td = %s)", (uint8_t *)&v257, 0x16u);
          int v237 = 0;
        }
      }
    }
    if (v241)
    {
      std::operator+<char>();
      if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v245.__r_.__value_.__l.__data_);
      }
      std::string v245 = v257;
      __int16 v54 = sub_100046F68(a1 + 240, (void **)&v245.__r_.__value_.__l.__data_);
      uint64_t v55 = *(NSObject **)(a1 + 56);
      if ((void **)(a1 + 248) == v54)
      {
        int v241 = 1;
LABEL_113:
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          sub_100888294(&v257, *(void **)(a1 + 280));
          if ((v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v70 = &v257;
          }
          else {
            long long v70 = (std::string *)v257.__r_.__value_.__r.__words[0];
          }
          char v71 = &v247;
          if ((v247.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v71 = (std::string *)v247.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)v253 = 136315394;
          *(void *)&v253[4] = v70;
          __int16 v254 = 2080;
          v255 = v71;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#I Creating Internet specific policy for NWAgent %s: key is new: %s", v253, 0x16u);
          if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v257.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v261) < 0) {
          operator delete(v260[1]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        std::ios::~ios();
        goto LABEL_124;
      }
      if (os_log_type_enabled(*(os_log_t *)(a1 + 56), OS_LOG_TYPE_DEFAULT))
      {
        long long v56 = &v245;
        if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v56 = (std::string *)v245.__r_.__value_.__r.__words[0];
        }
        long long v57 = &v248;
        if (v250 < 0) {
          long long v57 = v248;
        }
        LODWORD(v257.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
        WORD2(v257.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&v257.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v57;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#I CFStringRef key = %s already present (td = %s)", (uint8_t *)&v257, 0x16u);
      }
    }
    uint64_t v55 = *(NSObject **)(a1 + 56);
    if (!(v237 | v239))
    {
      if (os_log_type_enabled(*(os_log_t *)(a1 + 56), OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v257.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#I nothing to add in policy", (uint8_t *)&v257, 2u);
      }
      if (SHIBYTE(v261) < 0) {
        operator delete(v260[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      uint64_t v58 = 0;
      int v59 = 1;
      goto LABEL_431;
    }
    int v241 = 0;
    goto LABEL_113;
  }
LABEL_124:
  id v243 = objc_alloc_init((Class)NSMutableArray);
  if (*(unsigned char *)(a2 + 40))
  {
    id v72 = objc_alloc((Class)NSUUID);
    if (!*(unsigned char *)(a2 + 40)) {
      sub_10016C840();
    }
    long long v73 = v72;
    if (*(char *)(a2 + 39) >= 0) {
      uint64_t v74 = a2 + 16;
    }
    else {
      uint64_t v74 = *(void *)(a2 + 16);
    }
    long long v75 = +[NSString stringWithUTF8String:v74];
    id v76 = [v73 initWithUUIDString:v75];

    long long v77 = +[CCNEPolicyCondition effectiveApplication:v76];
    [v243 addObject:v77];
  }
  int v78 = *(unsigned __int8 *)(a2 + 8);
  if (*(unsigned char *)(a2 + 8))
  {
    long long v79 = +[CCNEPolicyCondition effectivePID:*(unsigned int *)(a2 + 4)];
    [v243 addObject:v79];

    int v78 = *(unsigned __int8 *)(a2 + 8);
  }
  if (*(unsigned char *)(a2 + 40) || v78 || TrafficDescriptor::hasIPTupleInfo((TrafficDescriptor *)a2))
  {
    id v80 = +[CCNEPolicyCondition allInterfaces];
    [v243 addObject:v80];
  }
  if (v17)
  {
    uint64_t v81 = +[NSString stringWithUTF8String:"FTSlice"];
    long long v82 = +[CCNEPolicyCondition accountIdentifier:v81];
    [v243 addObject:v82];
  }
  if (TrafficDescriptor::hasAccountInfo((TrafficDescriptor *)a2))
  {
    if (!*(unsigned char *)(a2 + 136)) {
      sub_10016C840();
    }
    if (*(char *)(a2 + 135) >= 0) {
      uint64_t v83 = a2 + 112;
    }
    else {
      uint64_t v83 = *(void *)(a2 + 112);
    }
    long long v84 = +[NSString stringWithUTF8String:v83];
    long long v85 = +[CCNEPolicyCondition accountIdentifier:v84];
    [v243 addObject:v85];

    uint64_t v86 = +[CCNEPolicyCondition allInterfaces];
    [v243 addObject:v86];
  }
  if (*(unsigned char *)(a2 + 176))
  {
    if (*(char *)(a2 + 175) >= 0) {
      uint64_t v87 = a2 + 152;
    }
    else {
      uint64_t v87 = *(void *)(a2 + 152);
    }
    long long v88 = +[NSString stringWithUTF8String:v87];
    memset(&v257, 0, sizeof(v257));
    if (!*(unsigned char *)(a2 + 176)) {
      sub_10016C840();
    }
    CSIPacketAddress::CSIPacketAddress();
    if (CSIPacketAddress::isZeroIP((CSIPacketAddress *)&v257)) {
      goto LABEL_150;
    }
    if (*(unsigned char *)(a2 + 214))
    {
      id v91 = objc_alloc((Class)NSString);
      if (!*(unsigned char *)(a2 + 214)) {
        sub_10016C840();
      }
      id v89 = objc_msgSend(v91, "initWithFormat:", @"%d", *(unsigned __int16 *)(a2 + 212));
      uint64_t v92 = +[NWAddressEndpoint endpointWithHostname:v88 port:v89];
      id v93 = +[CCNEPolicyCondition flowRemoteAddress:v92 prefix:128];
      long long v94 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        sub_100888294(buf, *(void **)(a1 + 280));
        id v95 = buf[2] >= 0 ? buf : (void *)buf[0];
        *(_DWORD *)v253 = 136315394;
        *(void *)&v253[4] = v95;
        __int16 v254 = 2112;
        v255 = v92;
        _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "#I Creating Internet specific policy for NWAgent %s: endpoint is %@ (1)", v253, 0x16u);
        if (SHIBYTE(buf[2]) < 0) {
          operator delete((void *)buf[0]);
        }
      }
      [v243 addObject:v93];
    }
    else
    {
      if (!*(unsigned char *)(a2 + 220))
      {
LABEL_150:
        id v89 = +[CCNEPolicyCondition domain:v88];
        [v243 addObject:v89];
        int v90 = 1;
LABEL_172:

        goto LABEL_173;
      }
      id v96 = objc_alloc((Class)NSString);
      if (!*(unsigned char *)(a2 + 220)) {
        sub_10016C840();
      }
      id v89 = objc_msgSend(v96, "initWithFormat:", @"%d", *(unsigned __int16 *)(a2 + 216));
      uint64_t v92 = +[NWAddressEndpoint endpointWithHostname:v88 port:v89];
      id v97 = objc_alloc((Class)NSString);
      if (!*(unsigned char *)(a2 + 220)) {
        sub_10016C840();
      }
      id v93 = objc_msgSend(v97, "initWithFormat:", @"%d", *(unsigned __int16 *)(a2 + 218));
      uint64_t v98 = +[NWAddressEndpoint endpointWithHostname:v88 port:v93];
      id v99 = +[CCNEPolicyCondition flowRemoteAddressStart:v92 end:v98];
      id v100 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
      {
        sub_100888294(v253, *(void **)(a1 + 280));
        id v101 = v256 >= 0 ? v253 : *(unsigned char **)v253;
        LODWORD(buf[0]) = 136315650;
        *(void *)((char *)buf + 4) = v101;
        WORD2(buf[1]) = 2112;
        *(void *)((char *)&buf[1] + 6) = v92;
        HIWORD(buf[2]) = 2112;
        buf[3] = v98;
        _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "#I Creating Internet specific policy for NWAgent %s: endpoint1 is %@, endpoint2 is %@ (1)", (uint8_t *)buf, 0x20u);
        if (v256 < 0) {
          operator delete(*(void **)v253);
        }
      }
      [v243 addObject:v99];
    }
    int v90 = 0;
    goto LABEL_172;
  }
  int v90 = 1;
LABEL_173:
  if (*(unsigned char *)(a2 + 208) && (CSIPacketAddress::isZeroIP((CSIPacketAddress *)(a2 + 184)) & 1) == 0)
  {
    memset(buf, 0, 24);
    if (!*(unsigned char *)(a2 + 208)) {
      sub_10016C840();
    }
    CSIPacketAddress::operator std::string();
    if (buf[2] >= 0) {
      long long v102 = buf;
    }
    else {
      long long v102 = (void *)buf[0];
    }
    id v103 = +[NSString stringWithUTF8String:v102];
    int v104 = *(unsigned __int8 *)(a2 + 214);
    unsigned int v105 = *(unsigned __int16 *)(a2 + 212);
    if (*(unsigned char *)(a2 + 214)) {
      char v106 = 0;
    }
    else {
      char v106 = v90;
    }
    id v107 = objc_alloc((Class)NSString);
    if (v104) {
      uint64_t v108 = v105;
    }
    else {
      uint64_t v108 = 0;
    }
    id v109 = objc_msgSend(v107, "initWithFormat:", @"%d", v108);
    uint64_t v110 = +[NWAddressEndpoint endpointWithHostname:v103 port:v109];
    if (!*(unsigned char *)(a2 + 208)) {
      sub_10016C840();
    }
    int PrefixLen = CSIPacketAddress::getPrefixLen((CSIPacketAddress *)(a2 + 184));
    if (PrefixLen) {
      unsigned __int8 v112 = PrefixLen;
    }
    else {
      unsigned __int8 v112 = 0x80;
    }
    long long v113 = +[CCNEPolicyCondition flowRemoteAddress:v110 prefix:v112];
    long long v114 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
    {
      sub_100888294(&v257, *(void **)(a1 + 280));
      long long v115 = (v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v257
           : (std::string *)v257.__r_.__value_.__r.__words[0];
      *(_DWORD *)v253 = 136315394;
      *(void *)&v253[4] = v115;
      __int16 v254 = 2112;
      v255 = v110;
      _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "#I Creating Internet specific policy for NWAgent %s: endpoint is %@ (1.5)", v253, 0x16u);
      if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v257.__r_.__value_.__l.__data_);
      }
    }
    [v243 addObject:v113];

    if (SHIBYTE(buf[2]) < 0)
    {
      operator delete((void *)buf[0]);
      if ((v106 & 1) == 0) {
        goto LABEL_230;
      }
    }
    else if ((v106 & 1) == 0)
    {
      goto LABEL_230;
    }
  }
  else if (!v90)
  {
    goto LABEL_230;
  }
  if (*(unsigned char *)(a2 + 214))
  {
    if (*(_DWORD *)a3 == 2) {
      long long v116 = @"::";
    }
    else {
      long long v116 = @"0.0.0.0";
    }
    long long v117 = v116;
    id v118 = objc_alloc((Class)NSString);
    if (!*(unsigned char *)(a2 + 214)) {
      sub_10016C840();
    }
    id v119 = objc_msgSend(v118, "initWithFormat:", @"%d", *(unsigned __int16 *)(a2 + 212));
    long long v120 = +[NWAddressEndpoint endpointWithHostname:v117 port:v119];
    long long v121 = +[CCNEPolicyCondition flowRemoteAddress:v120 prefix:0];
    long long v122 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
    {
      sub_100888294(buf, *(void **)(a1 + 280));
      long long v123 = buf[2] >= 0 ? buf : (void *)buf[0];
      LODWORD(v257.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v123;
      WORD2(v257.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&v257.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v120;
      _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEFAULT, "#I Creating Internet specific policy for NWAgent %s: endpoint is %@ (2)", (uint8_t *)&v257, 0x16u);
      if (SHIBYTE(buf[2]) < 0) {
        operator delete((void *)buf[0]);
      }
    }
    [v243 addObject:v121];
LABEL_229:

    uint64_t v58 = 1;
    goto LABEL_231;
  }
  if (*(unsigned char *)(a2 + 220))
  {
    if (*(_DWORD *)a3 == 2) {
      long long v124 = @"::";
    }
    else {
      long long v124 = @"0.0.0.0";
    }
    long long v117 = v124;
    id v125 = objc_alloc((Class)NSString);
    if (!*(unsigned char *)(a2 + 220)) {
      sub_10016C840();
    }
    id v119 = objc_msgSend(v125, "initWithFormat:", @"%d", *(unsigned __int16 *)(a2 + 216));
    long long v120 = +[NWAddressEndpoint endpointWithHostname:v117 port:v119];
    if (*(_DWORD *)a3 == 2) {
      long long v126 = @"FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF";
    }
    else {
      long long v126 = @"255.255.255.255";
    }
    long long v121 = v126;
    id v127 = objc_alloc((Class)NSString);
    if (!*(unsigned char *)(a2 + 220)) {
      sub_10016C840();
    }
    id v233 = objc_msgSend(v127, "initWithFormat:", @"%d", *(unsigned __int16 *)(a2 + 218));
    long long v128 = +[NWAddressEndpoint endpointWithHostname:v121 port:v233];
    long long v129 = +[CCNEPolicyCondition flowRemoteAddressStart:v120 end:v128];
    std::string v130 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
    {
      sub_100888294(&v257, *(void **)(a1 + 280));
      v131 = (v257.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &v257
           : (std::string *)v257.__r_.__value_.__r.__words[0];
      LODWORD(buf[0]) = 136315650;
      *(void *)((char *)buf + 4) = v131;
      WORD2(buf[1]) = 2112;
      *(void *)((char *)&buf[1] + 6) = v120;
      HIWORD(buf[2]) = 2112;
      buf[3] = v128;
      _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEFAULT, "#I Creating Internet specific policy for NWAgent %s: endpoint1 is %@, endpoint2 is %@ (2)", (uint8_t *)buf, 0x20u);
      if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v257.__r_.__value_.__l.__data_);
      }
    }
    [v243 addObject:v129];

    goto LABEL_229;
  }
LABEL_230:
  uint64_t v58 = 0;
LABEL_231:
  if (*(unsigned char *)(a2 + 224))
  {
    v132 = +[CCNEPolicyCondition ipProtocol:*(unsigned __int16 *)(a2 + 222)];
    [v243 addObject:v132];
  }
  if (*(unsigned char *)(a2 + 232))
  {
    long long v133 = +[CCNEPolicyCondition trafficClassStart:*(unsigned int *)(a2 + 228) end:*(unsigned int *)(a2 + 228)];
    [v243 addObject:v133];

    if (v239)
    {
      if ((TrafficDescriptor::hasAccountInfo((TrafficDescriptor *)a2) & 1) == 0)
      {
        long long v135 = (std::mutex *)Registry::getServiceMap(v134, *(Registry **)(a1 + 72));
        long long v136 = v135;
        if (v137 < 0)
        {
          id v138 = (unsigned __int8 *)(v137 & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v139 = 5381;
          do
          {
            uint64_t v137 = v139;
            unsigned int v140 = *v138++;
            uint64_t v139 = (33 * v139) ^ v140;
          }
          while (v140);
        }
        std::mutex::lock(v135);
        buf[0] = v137;
        v141 = sub_10004D37C(&v136[1].__m_.__sig, buf);
        if (v141)
        {
          uint64_t v143 = v141[3];
          v142 = (std::__shared_weak_count *)v141[4];
          if (v142)
          {
            atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
            std::mutex::unlock(v136);
            atomic_fetch_add_explicit(&v142->__shared_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v142);
            char v144 = 0;
            if (!v143)
            {
LABEL_258:
              if ((v144 & 1) == 0) {
                sub_10004D2C8(v142);
              }
              goto LABEL_260;
            }
LABEL_255:
            uint64_t v147 = (*(uint64_t (**)(uint64_t))(*(void *)v143 + 872))(v143);
            if (v147)
            {
              uint64_t v148 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
              if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v147 + 128))(v147, v148) & 1) == 0)
              {
                v149 = +[CCNEPolicyCondition usesModernNetworkAPI];
                [v243 addObject:v149];
              }
            }
            goto LABEL_258;
          }
        }
        else
        {
          uint64_t v143 = 0;
        }
        std::mutex::unlock(v136);
        v142 = 0;
        char v144 = 1;
        if (!v143) {
          goto LABEL_258;
        }
        goto LABEL_255;
      }
    }
  }
LABEL_260:
  id v150 = [v243 count];
  id v151 = *(NSObject **)(a1 + 56);
  if (!v150)
  {
    if (os_log_type_enabled(*(os_log_t *)(a1 + 56), OS_LOG_TYPE_ERROR))
    {
      sub_100888294(buf, *(void **)(a1 + 280));
      v195 = buf[2] >= 0 ? buf : (void *)buf[0];
      LODWORD(v257.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v195;
      _os_log_error_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_ERROR, "Creating slice Internet policy for NWAgent %s: conditions are empty !", (uint8_t *)&v257, 0xCu);
      if (SHIBYTE(buf[2]) < 0) {
        operator delete((void *)buf[0]);
      }
    }
    if (!*(unsigned char *)(a3 + 42)) {
      sub_100888738(a1);
    }
    goto LABEL_429;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 56), OS_LOG_TYPE_DEFAULT))
  {
    sub_100888294(buf, *(void **)(a1 + 280));
    id v152 = buf[2] >= 0 ? buf : (void *)buf[0];
    LODWORD(v257.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v152;
    _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEFAULT, "#I Created slice Internet policy for NWAgent %s", (uint8_t *)&v257, 0xCu);
    if (SHIBYTE(buf[2]) < 0) {
      operator delete((void *)buf[0]);
    }
  }
  v153.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (!v239)
  {
LABEL_375:
    if (v237)
    {
      v235 = +[CCNEPolicyResult skipWithOrder:0];
      v201 = [[CCNEPolicy alloc] initWithOrder:*(unsigned int *)(a3 + 36) result:v235 conditions:v243];
      if (!v201)
      {
        v205 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
        {
          sub_100888294(buf, *(void **)(a1 + 280));
          v206 = buf[2] >= 0 ? buf : (void *)buf[0];
          LODWORD(v257.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v206;
          _os_log_error_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_ERROR, "Creating Internet slice SKIP policy for NWAgent %s: skip policy id is null", (uint8_t *)&v257, 0xCu);
          if (SHIBYTE(buf[2]) < 0) {
            operator delete((void *)buf[0]);
          }
        }
        goto LABEL_428;
      }
      id v202 = [v240 addPolicy:v201];
      v203 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
      {
        sub_100888294(buf, *(void **)(a1 + 280));
        v204 = buf[2] >= 0 ? buf : (void *)buf[0];
        LODWORD(v257.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v204;
        WORD2(v257.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v257.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v202;
        _os_log_impl((void *)&_mh_execute_header, v203, OS_LOG_TYPE_DEFAULT, "#I Adding Internet slice SKIP policy for NWAgent %s: id=%lu", (uint8_t *)&v257, 0x16u);
        if (SHIBYTE(buf[2]) < 0) {
          operator delete((void *)buf[0]);
        }
      }
      if (!v202)
      {
        v207 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v207, OS_LOG_TYPE_ERROR))
        {
          sub_100888294(buf, *(void **)(a1 + 280));
          v229 = buf[2] >= 0 ? buf : (void *)buf[0];
          LODWORD(v257.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v229;
          _os_log_error_impl((void *)&_mh_execute_header, v207, OS_LOG_TYPE_ERROR, "Adding Internet slice SKIP policy for NWAgent %s: policy id is invalid", (uint8_t *)&v257, 0xCu);
          if (SHIBYTE(buf[2]) < 0) {
            operator delete((void *)buf[0]);
          }
        }

        goto LABEL_428;
      }
      if (*(unsigned char *)(a3 + 42))
      {
        memset(&buf[1], 0, 32);
        buf[0] = v202;
        if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0) {
          sub_10004FC84(&buf[1], v246.__r_.__value_.__l.__data_, v246.__r_.__value_.__l.__size_);
        }
        else {
          *(std::string *)&buf[1] = v246;
        }
        uint8_t buf[4] = v153.__d_.__rep_;
        int v209 = *(unsigned __int8 *)(a3 + 43);
        v210 = *(NSObject **)(a1 + 56);
        BOOL v211 = os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT);
        if (v209)
        {
          if (v211)
          {
            LODWORD(v257.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v257.__r_.__value_.__r.__words[0]) = v202;
            _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEFAULT, "#I Add fTmpPolicies: %d", (uint8_t *)&v257, 8u);
          }
          v212 = (void *)(a1 + 144);
        }
        else
        {
          if (v211)
          {
            LODWORD(v257.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v257.__r_.__value_.__r.__words[0]) = v202;
            _os_log_impl((void *)&_mh_execute_header, v210, OS_LOG_TYPE_DEFAULT, "#I Add fTmpPoliciesLong: %d", (uint8_t *)&v257, 8u);
          }
          v212 = (void *)(a1 + 192);
        }
        sub_10088F2F8(v212, (uint64_t)buf);
        if (SHIBYTE(buf[3]) < 0) {
          operator delete((void *)buf[1]);
        }
      }
      else
      {
        v208 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf[0]) = 67109120;
          HIDWORD(buf[0]) = v202;
          _os_log_impl((void *)&_mh_execute_header, v208, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", (uint8_t *)buf, 8u);
        }
        sub_10088E954((uint64_t *)(a1 + 104), (unint64_t)v202, (uint64_t)v202);
      }
    }
    if (!v241)
    {
LABEL_457:
      if (*(unsigned char *)(a3 + 42))
      {
        if (v239) {
          sub_100046BAC((uint64_t **)(a1 + 240), (void **)&v247.__r_.__value_.__l.__data_, (uint64_t)&v247);
        }
        if (v237) {
          sub_100046BAC((uint64_t **)(a1 + 240), (void **)&v246.__r_.__value_.__l.__data_, (uint64_t)&v246);
        }
        if (v241) {
          sub_100046BAC((uint64_t **)(a1 + 240), (void **)&v245.__r_.__value_.__l.__data_, (uint64_t)&v245);
        }
      }
      int v59 = 0;
      goto LABEL_430;
    }
    v235 = +[CCNEPolicyResult skipWithOrder:(*(_DWORD *)(a3 + 32) + 1)];
    v213 = +[CCNEPolicyCondition platformBinary];
    [v243 addObject:v213];
    v214 = [[CCNEPolicy alloc] initWithOrder:(*(_DWORD *)(a3 + 32) - 1) result:v235 conditions:v243];
    if (v214)
    {
      id v215 = [v240 addPolicy:v214];
      v216 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
      {
        sub_100888294(buf, *(void **)(a1 + 280));
        v217 = buf[2] >= 0 ? buf : (void *)buf[0];
        LODWORD(v257.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v217;
        WORD2(v257.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&v257.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v215;
        _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_DEFAULT, "#I Adding Internet slice SKIP prefix policy for NWAgent %s: id=%lu", (uint8_t *)&v257, 0x16u);
        if (SHIBYTE(buf[2]) < 0) {
          operator delete((void *)buf[0]);
        }
      }
      if (v215)
      {
        if (*(unsigned char *)(a3 + 42))
        {
          memset(&buf[1], 0, 32);
          buf[0] = v215;
          if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
            sub_10004FC84(&buf[1], v245.__r_.__value_.__l.__data_, v245.__r_.__value_.__l.__size_);
          }
          else {
            *(std::string *)&buf[1] = v245;
          }
          uint8_t buf[4] = v153.__d_.__rep_;
          int v223 = *(unsigned __int8 *)(a3 + 43);
          v224 = *(NSObject **)(a1 + 56);
          BOOL v225 = os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT);
          if (v223)
          {
            if (v225)
            {
              LODWORD(v257.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(v257.__r_.__value_.__r.__words[0]) = v215;
              _os_log_impl((void *)&_mh_execute_header, v224, OS_LOG_TYPE_DEFAULT, "#I Add fTmpPolicies: %d", (uint8_t *)&v257, 8u);
            }
            v226 = (void *)(a1 + 144);
          }
          else
          {
            if (v225)
            {
              LODWORD(v257.__r_.__value_.__l.__data_) = 67109120;
              HIDWORD(v257.__r_.__value_.__r.__words[0]) = v215;
              _os_log_impl((void *)&_mh_execute_header, v224, OS_LOG_TYPE_DEFAULT, "#I Add fTmpPoliciesLong: %d", (uint8_t *)&v257, 8u);
            }
            v226 = (void *)(a1 + 192);
          }
          sub_10088F2F8(v226, (uint64_t)buf);
          if (SHIBYTE(buf[3]) < 0) {
            operator delete((void *)buf[1]);
          }
        }
        else
        {
          v222 = *(NSObject **)(a1 + 56);
          if (os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf[0]) = 67109120;
            HIDWORD(buf[0]) = v215;
            _os_log_impl((void *)&_mh_execute_header, v222, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", (uint8_t *)buf, 8u);
          }
          sub_10088E954((uint64_t *)(a1 + 104), (unint64_t)v215, (uint64_t)v215);
        }

        goto LABEL_457;
      }
      v218 = *(NSObject **)(a1 + 56);
      if (!os_log_type_enabled(v218, OS_LOG_TYPE_ERROR)) {
        goto LABEL_427;
      }
      sub_100888294(buf, *(void **)(a1 + 280));
      if (buf[2] >= 0) {
        v231 = buf;
      }
      else {
        v231 = (void *)buf[0];
      }
      LODWORD(v257.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v231;
      v220 = "Adding Internet slice SKIP prefix policy for NWAgent %s: policy id is invalid";
    }
    else
    {
      v218 = *(NSObject **)(a1 + 56);
      if (!os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
      {
LABEL_427:

        goto LABEL_428;
      }
      sub_100888294(buf, *(void **)(a1 + 280));
      if (buf[2] >= 0) {
        v219 = buf;
      }
      else {
        v219 = (void *)buf[0];
      }
      LODWORD(v257.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v219;
      v220 = "Creating Internet slice SKIP prefix policy for NWAgent %s: skip prefix policy id is null";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v218, OS_LOG_TYPE_ERROR, v220, (uint8_t *)&v257, 0xCu);
    if (SHIBYTE(buf[2]) < 0) {
      operator delete((void *)buf[0]);
    }
    goto LABEL_427;
  }
  v235 = +[NSMutableArray arrayWithArray:v243];
  if (*(unsigned char *)(a2 + 147) && *(unsigned char *)(a2 + 146) && !*(unsigned char *)(a2 + 224))
  {
    v154 = +[CCNEPolicyCondition ipProtocol:17];
    [v235 addObject:v154];

    id v155 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"%d", 443);
    v156 = +[NWAddressEndpoint endpointWithHostname:@"0.0.0.0" port:v155];
    v157 = +[CCNEPolicyCondition flowRemoteAddress:v156 prefix:0];
    [v157 setNegative:1];
    char v158 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
    {
      sub_100888294(buf, *(void **)(a1 + 280));
      uint64_t v159 = buf[2] >= 0 ? buf : (void *)buf[0];
      LODWORD(v257.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v159;
      WORD2(v257.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&v257.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v156;
      _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEFAULT, "#I Creating Internet specific policy for NWAgent %s: endpoint is %@ (3.1)", (uint8_t *)&v257, 0x16u);
      if (SHIBYTE(buf[2]) < 0) {
        operator delete((void *)buf[0]);
      }
    }
    [v235 addObject:v157];

    id v160 = objc_msgSend(objc_alloc((Class)NSString), "initWithFormat:", @"%d", 443);
    uint64_t v161 = +[NWAddressEndpoint endpointWithHostname:@"::" port:v160];
    v162 = +[CCNEPolicyCondition flowRemoteAddress:v161 prefix:0];
    [v162 setNegative:1];
    v163 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
    {
      sub_100888294(buf, *(void **)(a1 + 280));
      __int16 v164 = buf[2] >= 0 ? buf : (void *)buf[0];
      LODWORD(v257.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v164;
      WORD2(v257.__r_.__value_.__r.__words[1]) = 2112;
      *(std::string::size_type *)((char *)&v257.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v161;
      _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_DEFAULT, "#I Creating Internet specific policy for NWAgent %s: endpoint is %@ (3.2)", (uint8_t *)&v257, 0x16u);
      if (SHIBYTE(buf[2]) < 0) {
        operator delete((void *)buf[0]);
      }
    }
    [v235 addObject:v162];
  }
  uint64_t v165 = +[CCNEPolicyResult netAgentUUID:v8];
  __int16 v166 = [[CCNEPolicy alloc] initWithOrder:*(unsigned int *)(a3 + 32) result:v165 conditions:v235];
  if (!v166)
  {
    v172 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
    {
      sub_100888294(buf, *(void **)(a1 + 280));
      v227 = buf[2] >= 0 ? buf : (void *)buf[0];
      LODWORD(v257.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v227;
      _os_log_error_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_ERROR, "Creating slice Internet policy (agent) for NWAgent %s: policy is null", (uint8_t *)&v257, 0xCu);
      if (SHIBYTE(buf[2]) < 0) {
        operator delete((void *)buf[0]);
      }
    }
    if (!*(unsigned char *)(a3 + 42)) {
      sub_100888738(a1);
    }

    goto LABEL_428;
  }
  id v167 = [v240 addPolicy:v166];
  v168 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
  {
    sub_100888294(buf, *(void **)(a1 + 280));
    v169 = buf[2] >= 0 ? buf : (void *)buf[0];
    LODWORD(v257.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v169;
    WORD2(v257.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v257.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v167;
    _os_log_impl((void *)&_mh_execute_header, v168, OS_LOG_TYPE_DEFAULT, "#I Adding slice Internet policy (agent) for NWAgent %s: id=%lu", (uint8_t *)&v257, 0x16u);
    if (SHIBYTE(buf[2]) < 0) {
      operator delete((void *)buf[0]);
    }
  }
  if (!v167)
  {
    long long v173 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
    {
      sub_100888294(buf, *(void **)(a1 + 280));
      v228 = buf[2] >= 0 ? buf : (void *)buf[0];
      LODWORD(v257.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v228;
      _os_log_error_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_ERROR, "Adding slice Internet policy (agent) for NWAgent %s: policy is invalid", (uint8_t *)&v257, 0xCu);
      if (SHIBYTE(buf[2]) < 0) {
        operator delete((void *)buf[0]);
      }
    }
    if (!*(unsigned char *)(a3 + 42)) {
      sub_100888738(a1);
    }

    goto LABEL_428;
  }
  if (*(unsigned char *)(a3 + 42))
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = v153.__d_.__rep_;
    memset(&buf[1], 0, 32);
    buf[0] = v167;
    id v171 = v8;
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&buf[1], v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)&buf[1] = v247;
    }
    uint8_t buf[4] = rep;
    int v176 = *(unsigned __int8 *)(a3 + 43);
    long long v177 = *(NSObject **)(a1 + 56);
    BOOL v178 = os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT);
    if (v176)
    {
      id v8 = v171;
      if (v178)
      {
        LODWORD(v257.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(v257.__r_.__value_.__r.__words[0]) = v167;
        _os_log_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_DEFAULT, "#I Add fTmpPolicies: %d", (uint8_t *)&v257, 8u);
      }
      long long v179 = (void *)(a1 + 144);
    }
    else
    {
      id v8 = v171;
      if (v178)
      {
        LODWORD(v257.__r_.__value_.__l.__data_) = 67109120;
        HIDWORD(v257.__r_.__value_.__r.__words[0]) = v167;
        _os_log_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_DEFAULT, "#I Add fTmpPoliciesLong: %d", (uint8_t *)&v257, 8u);
      }
      long long v179 = (void *)(a1 + 192);
    }
    v153.__d_.__rep_ = rep;
    sub_10088F2F8(v179, (uint64_t)buf);
    if (SHIBYTE(buf[3]) < 0) {
      operator delete((void *)buf[1]);
    }
  }
  else
  {
    v174 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0]) = 67109120;
      HIDWORD(buf[0]) = v167;
      _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", (uint8_t *)buf, 8u);
    }
    sub_10088E954((uint64_t *)(a1 + 104), (unint64_t)v167, (uint64_t)v167);
  }

  uint64_t v180 = *(unsigned __int8 *)(a3 + 31);
  char v181 = v180;
  if ((v180 & 0x80u) != 0) {
    uint64_t v180 = *(void *)(a3 + 16);
  }
  if (!v180)
  {
LABEL_374:

    goto LABEL_375;
  }
  uint64_t v182 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
  {
    sub_100888294(buf, *(void **)(a1 + 280));
    if (buf[2] >= 0) {
      long long v183 = buf;
    }
    else {
      long long v183 = (void *)buf[0];
    }
    if (*(char *)(a3 + 31) >= 0) {
      std::string::size_type v184 = a3 + 8;
    }
    else {
      std::string::size_type v184 = *(void *)(a3 + 8);
    }
    LODWORD(v257.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v183;
    WORD2(v257.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&v257.__r_.__value_.__r.__words[1] + 6) = v184;
    _os_log_impl((void *)&_mh_execute_header, v182, OS_LOG_TYPE_DEFAULT, "#I Creating slice Internet policy for NWAgent %s interface %s", (uint8_t *)&v257, 0x16u);
    if (SHIBYTE(buf[2]) < 0) {
      operator delete((void *)buf[0]);
    }
    char v181 = *(unsigned char *)(a3 + 31);
  }
  if (v181 >= 0) {
    uint64_t v185 = a3 + 8;
  }
  else {
    uint64_t v185 = *(void *)(a3 + 8);
  }
  v186 = +[NSString stringWithUTF8String:v185];
  v187 = +[CCNEPolicyResult scopeSocketToInterfaceName:v186];
  v188 = [[CCNEPolicy alloc] initWithOrder:(*(_DWORD *)(a3 + 32) + 1) result:v187 conditions:v235];
  if (!v188)
  {
    v193 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
    {
      sub_100888294(buf, *(void **)(a1 + 280));
      v230 = buf[2] >= 0 ? buf : (void *)buf[0];
      LODWORD(v257.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v230;
      _os_log_error_impl((void *)&_mh_execute_header, v193, OS_LOG_TYPE_ERROR, "Creating slice Internet policy (socket) for NWAgent %s: policy is null", (uint8_t *)&v257, 0xCu);
      if (SHIBYTE(buf[2]) < 0) {
        operator delete((void *)buf[0]);
      }
    }
    if (*(unsigned char *)(a3 + 42)) {
      goto LABEL_354;
    }
    goto LABEL_353;
  }
  id v189 = [v240 addPolicy:v188];
  v190 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
  {
    sub_100888294(buf, *(void **)(a1 + 280));
    v191 = buf[2] >= 0 ? buf : (void *)buf[0];
    LODWORD(v257.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v191;
    WORD2(v257.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v257.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v189;
    _os_log_impl((void *)&_mh_execute_header, v190, OS_LOG_TYPE_DEFAULT, "#I Adding slice Internet policy (socket) for NWAgent %s: id=%lu", (uint8_t *)&v257, 0x16u);
    if (SHIBYTE(buf[2]) < 0) {
      operator delete((void *)buf[0]);
    }
  }
  if (v189)
  {
    if (*(unsigned char *)(a3 + 42))
    {
      memset(&buf[1], 0, 32);
      buf[0] = v189;
      v192 = v187;
      if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&buf[1], v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)&buf[1] = v247;
      }
      uint8_t buf[4] = v153.__d_.__rep_;
      int v197 = *(unsigned __int8 *)(a3 + 43);
      v198 = *(NSObject **)(a1 + 56);
      BOOL v199 = os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT);
      if (v197)
      {
        v187 = v192;
        if (v199)
        {
          LODWORD(v257.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(v257.__r_.__value_.__r.__words[0]) = v189;
          _os_log_impl((void *)&_mh_execute_header, v198, OS_LOG_TYPE_DEFAULT, "#I Add fTmpPolicies: %d", (uint8_t *)&v257, 8u);
        }
        v200 = (void *)(a1 + 144);
      }
      else
      {
        v187 = v192;
        if (v199)
        {
          LODWORD(v257.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(v257.__r_.__value_.__r.__words[0]) = v189;
          _os_log_impl((void *)&_mh_execute_header, v198, OS_LOG_TYPE_DEFAULT, "#I Add fTmpPoliciesLong: %d", (uint8_t *)&v257, 8u);
        }
        v200 = (void *)(a1 + 192);
      }
      sub_10088F2F8(v200, (uint64_t)buf);
      if (SHIBYTE(buf[3]) < 0) {
        operator delete((void *)buf[1]);
      }
    }
    else
    {
      v196 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf[0]) = 67109120;
        HIDWORD(buf[0]) = v189;
        _os_log_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", (uint8_t *)buf, 8u);
      }
      sub_10088E954((uint64_t *)(a1 + 104), (unint64_t)v189, (uint64_t)v189);
    }

    goto LABEL_374;
  }
  v194 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
  {
    sub_100888294(buf, *(void **)(a1 + 280));
    v232 = buf[2] >= 0 ? buf : (void *)buf[0];
    LODWORD(v257.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v257.__r_.__value_.__r.__words + 4) = (std::string::size_type)v232;
    _os_log_error_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_ERROR, "Adding slice Internet policy (socket) for NWAgent %s: policy is invalid", (uint8_t *)&v257, 0xCu);
    if (SHIBYTE(buf[2]) < 0) {
      operator delete((void *)buf[0]);
    }
  }
  if (!*(unsigned char *)(a3 + 42)) {
LABEL_353:
  }
    sub_100888738(a1);
LABEL_354:

LABEL_428:
LABEL_429:
  int v59 = 1;
LABEL_430:

LABEL_431:
  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v245.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v246.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v247.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v250) < 0) {
    operator delete(v248);
  }
LABEL_439:

  if (!v59)
  {
    unsigned char *v236 = 1;
    goto LABEL_442;
  }
LABEL_440:
  uint64_t v58 = 0;
LABEL_442:

  return v58;
}

void sub_10088BBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a47 < 0) {
    operator delete(a42);
  }

  _Unwind_Resume(a1);
}

void sub_10088C160(uint64_t a1, TrafficDescriptor *this, int a3, uint64_t a4)
{
  BOOL v9 = 0;
  if (a3) {
    char v7 = a3;
  }
  else {
    char v7 = 3;
  }
  if ((v7 & 2) == 0)
  {
    if ((v7 & 1) == 0) {
      goto LABEL_10;
    }
LABEL_9:
    sub_10088C220(a1, this, 1, &v9, a4);
    goto LABEL_10;
  }
  char v8 = sub_10088C220(a1, this, 2, &v9, a4);
  if (v7 & 1) != 0 && (v8) {
    goto LABEL_9;
  }
LABEL_10:
  if (v9)
  {
    sub_100888824(a1, 3u);
  }
}

uint64_t sub_10088C220(uint64_t a1, TrafficDescriptor *this, int a3, BOOL *a4, uint64_t a5)
{
  if (*(_DWORD *)this == -1) {
    int v10 = 0;
  }
  else {
    int v10 = (100 * *(_DWORD *)this) | 2;
  }
  int v11 = *(_DWORD *)(a1 + 88);
  unsigned __int8 v18 = 0;
  char hasIPTupleInfo = TrafficDescriptor::hasIPTupleInfo(this);
  if (v11) {
    char v13 = hasIPTupleInfo;
  }
  else {
    char v13 = 1;
  }
  long long v17 = 0u;
  memset(__p, 0, sizeof(__p));
  LODWORD(__p[0]) = a3;
  if (*(char *)(a5 + 23) < 0)
  {
    sub_10004FC84(&__p[1], *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)&__p[1] = *(_OWORD *)a5;
    __p[3] = *(void **)(a5 + 16);
  }
  LODWORD(v17) = v10;
  DWORD1(v17) = v10 + 2;
  BYTE8(v17) = v11 != 0;
  *(_WORD *)((char *)&v17 + 9) = 257;
  BYTE11(v17) = v13;
  uint64_t v14 = sub_100889100(a1, (uint64_t)this, (uint64_t)__p, *(void **)(a1 + 280), &v18);
  *a4 = (*a4 | v18) != 0;
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  return v14;
}

void sub_10088C34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10088C368(uint64_t a1, TrafficDescriptor *a2, int a3, uint64_t a4)
{
}

void sub_10088C370(uint64_t a1, int a2, uint64_t a3, int a4, BOOL a5, TrafficDescriptor **a6, int a7, uint64_t a8, int a9)
{
  if (!*(_DWORD *)(a1 + 88))
  {
    if (a7) {
      sub_100887D34(a1, 0);
    }
    long long v17 = *a6;
    unsigned __int8 v18 = a6[1];
    while (1)
    {
      if (v17 == v18)
      {
        if (a2 || (a4 & 1) == 0) {
          goto LABEL_133;
        }
        if (*(_DWORD *)(a1 + 296) != 1)
        {
          int v59 = (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
          if (v59)
          {
            char v60 = *(NSObject **)(a1 + 56);
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
            {
              sub_100888294(v153, *(void **)(a1 + 280));
              uint64_t v61 = v153[23] >= 0 ? v153 : *(unsigned char **)v153;
              *(_DWORD *)long long buf = 136315906;
              *(void *)&uint8_t buf[4] = v61;
              __int16 v145 = 2080;
              uint64_t v146 = asStringBool(0);
              __int16 v147 = 2080;
              uint64_t v148 = asStringBool(1);
              __int16 v149 = 2080;
              uint64_t v150 = asStringBool(a5);
              _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#I Creating inactive Internet policy for NWAgent %s (active %s forDefaultSimSlot %s saveDataMode %s)", buf, 0x2Au);
              if ((v153[23] & 0x80000000) != 0) {
                operator delete(*(void **)v153);
              }
            }
            uint64_t v62 = +[CCNEPolicyResult netAgentUUID:*(void *)(a1 + 280)];
            if (a5)
            {
              uint64_t v63 = +[CCNEPolicyCondition clientProhibitsConstrained];
              [v63 setNegative:1];
              *(void *)&long long __p = v63;
              uint64_t v64 = +[NSArray arrayWithObjects:&__p count:1];
            }
            else
            {
              uint64_t v64 = &__NSArray0__struct;
            }
            int v104 = [[CCNEPolicy alloc] initWithOrder:0 result:v62 conditions:v64];
            if (v104)
            {
              sub_100887D34(a1, 0);
              unsigned int v105 = *(NSObject **)(a1 + 56);
              if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
              {
                sub_100888294(buf, *(void **)(a1 + 280));
                char v106 = v147 >= 0 ? buf : *(unsigned char **)buf;
                *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315138;
                *(void *)&v153[4] = v106;
                _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_DEFAULT, "#I Created inactive Internet policy for NWAgent %s", v153, 0xCu);
                if (SHIBYTE(v147) < 0) {
                  operator delete(*(void **)buf);
                }
              }
              id v107 = [v59 addPolicy:v104];
              uint64_t v108 = *(NSObject **)(a1 + 56);
              if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
              {
                sub_100888294(buf, *(void **)(a1 + 280));
                if (v147 >= 0) {
                  id v109 = buf;
                }
                else {
                  id v109 = *(unsigned char **)buf;
                }
                *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315394;
                *(void *)&v153[4] = v109;
                *(_WORD *)&v153[12] = 2048;
                *(void *)&v153[14] = v107;
                _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "#I Adding non-active Internet policy for NWAgent %s: id=%lu", v153, 0x16u);
                if (SHIBYTE(v147) < 0) {
                  operator delete(*(void **)buf);
                }
                uint64_t v108 = *(NSObject **)(a1 + 56);
              }
              BOOL v110 = os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT);
              if (v107)
              {
                if (v110)
                {
                  *(_DWORD *)long long buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v107;
                  _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", buf, 8u);
                }
                sub_10088E954((uint64_t *)(a1 + 104), (unint64_t)v107, (uint64_t)v107);
                sub_100888824(a1, 1u);
              }
              else
              {
                if (v110)
                {
                  sub_100888294(buf, *(void **)(a1 + 280));
                  long long v113 = v147 >= 0 ? buf : *(unsigned char **)buf;
                  *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315138;
                  *(void *)&v153[4] = v113;
                  _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "#E Adding inactive Internet policy for NWAgent %s: policy is invalid", v153, 0xCu);
                  if (SHIBYTE(v147) < 0) {
                    operator delete(*(void **)buf);
                  }
                }
                sub_100888738(a1);
              }
            }
            else
            {
              v111 = *(NSObject **)(a1 + 56);
              if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
              {
                sub_100888294(buf, *(void **)(a1 + 280));
                unsigned __int8 v112 = v147 >= 0 ? buf : *(unsigned char **)buf;
                *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315138;
                *(void *)&v153[4] = v112;
                _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "#E Creating inactive Internet policy for NWAgent %s: policy is null", v153, 0xCu);
                if (SHIBYTE(v147) < 0) {
                  operator delete(*(void **)buf);
                }
              }
            }
          }
        }
        goto LABEL_134;
      }
      if ((TrafficDescriptor::empty(v17) & 1) == 0) {
        break;
      }
      long long v17 = (TrafficDescriptor *)((char *)v17 + 304);
    }
    if (*(_DWORD *)(a1 + 296) == 2) {
      goto LABEL_134;
    }
    unsigned int v65 = (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
    if (!v65)
    {
LABEL_190:

      goto LABEL_134;
    }
    sub_100887D34(a1, 0);
    id v66 = *a6;
    long long v67 = a6[1];
    if (v66 != v67)
    {
      if (a9) {
        int v68 = a9;
      }
      else {
        int v68 = 3;
      }
      do
      {
        if ((TrafficDescriptor::empty(v66) & 1) == 0)
        {
          if ((v68 & 2) == 0)
          {
            if ((v68 & 1) == 0) {
              goto LABEL_82;
            }
LABEL_81:
            sub_100889064(a1, v66, 1u);
            goto LABEL_82;
          }
          if (v68 & sub_100889064(a1, v66, 2u)) {
            goto LABEL_81;
          }
        }
LABEL_82:
        id v66 = (TrafficDescriptor *)((char *)v66 + 304);
      }
      while (v66 != v67);
    }
    if ((a2 & 1) == 0)
    {
      char v69 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
        sub_100888338(buf, *(void **)(a1 + 288));
        long long v70 = v147 >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315138;
        *(void *)&v153[4] = v70;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "#I Creating rest Internet policy for NWAgent %s", v153, 0xCu);
        if (SHIBYTE(v147) < 0) {
          operator delete(*(void **)buf);
        }
      }
      char v71 = +[CCNEPolicyResult netAgentUUID:*(void *)(a1 + 280)];
      id v72 = [[CCNEPolicy alloc] initWithOrder:1000000 result:v71 conditions:&__NSArray0__struct];
      if (v72)
      {

        long long v73 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
        {
          sub_100888294(buf, *(void **)(a1 + 280));
          uint64_t v74 = v147 >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315138;
          *(void *)&v153[4] = v74;
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#I Created rest Internet policy for NWAgent %s", v153, 0xCu);
          if (SHIBYTE(v147) < 0) {
            operator delete(*(void **)buf);
          }
        }
        id v75 = [v65 addPolicy:v72];
        id v76 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          sub_100888338(buf, *(void **)(a1 + 288));
          if (v147 >= 0) {
            long long v77 = buf;
          }
          else {
            long long v77 = *(unsigned char **)buf;
          }
          *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315394;
          *(void *)&v153[4] = v77;
          *(_WORD *)&v153[12] = 2048;
          *(void *)&v153[14] = v75;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#I Adding rest Internet policy for NWAgent %s: id=%lu", v153, 0x16u);
          if (SHIBYTE(v147) < 0) {
            operator delete(*(void **)buf);
          }
          id v76 = *(NSObject **)(a1 + 56);
        }
        if (v75)
        {
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v75;
            _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", buf, 8u);
          }
          sub_10088E954((uint64_t *)(a1 + 104), (unint64_t)v75, (uint64_t)v75);

          goto LABEL_108;
        }
        if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
        {
          sub_100888338(buf, *(void **)(a1 + 288));
          long long v122 = v147 >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315138;
          *(void *)&v153[4] = v122;
          _os_log_error_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "Adding rest Internet policy for NWAgent %s: policy is invalid", v153, 0xCu);
          if (SHIBYTE(v147) < 0) {
            operator delete(*(void **)buf);
          }
        }
        sub_100888738(a1);
      }
      else
      {
        long long v114 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
        {
          sub_100888338(buf, *(void **)(a1 + 288));
          long long v121 = v147 >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315138;
          *(void *)&v153[4] = v121;
          _os_log_error_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_ERROR, "Creating rest Internet policy for NWAgent %s: policy is null", v153, 0xCu);
          if (SHIBYTE(v147) < 0) {
            operator delete(*(void **)buf);
          }
        }
        sub_100888738(a1);
        id v72 = v71;
      }

      goto LABEL_190;
    }
LABEL_108:
    sub_100888824(a1, 2u);
    goto LABEL_190;
  }
  BOOL v16 = (capabilities::ct *)isSlice();
  if (!v16)
  {
    if (capabilities::ct::supportsGemini(v16))
    {
      if (a7) {
        sub_100887D34(a1, 0);
      }
      if (a4)
      {
        if (*(void *)(a1 + 280))
        {
          if (*(_DWORD *)(a1 + 296) != 5)
          {
            id v19 = (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
            if (v19)
            {
              sub_100887D34(a1, 0);
              long long v134 = +[CCNEPolicyResult scopedNetworkAgent:*(void *)(a1 + 280)];
              __int16 v20 = +[CCNEPolicyCondition requiredAgentDomain:*(void *)(a1 + 264) agentType:*(void *)(a1 + 272)];
              uint64_t v21 = [CCNEPolicy alloc];
              __int16 v22 = +[CCNEPolicyCondition allInterfaces];
              *(void *)&long long __p = v22;
              *((void *)&__p + 1) = v20;
              uint64_t v23 = +[NSArray arrayWithObjects:&__p count:2];
              long long v136 = [(CCNEPolicy *)v21 initWithOrder:1000003 result:v134 conditions:v23];

              id v24 = [v19 addPolicy:v136];
              id v25 = *(NSObject **)(a1 + 56);
              if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
              {
                sub_100888294(v153, *(void **)(a1 + 280));
                if (v153[23] >= 0) {
                  std::string::size_type v26 = v153;
                }
                else {
                  std::string::size_type v26 = *(unsigned char **)v153;
                }
                id v27 = [*(id *)(a1 + 264) UTF8String];
                id v28 = [*(id *)(a1 + 272) UTF8String];
                *(_DWORD *)long long buf = 136315906;
                *(void *)&uint8_t buf[4] = v26;
                __int16 v145 = 2048;
                uint64_t v146 = (uint64_t)v24;
                __int16 v147 = 2080;
                uint64_t v148 = (uint64_t)v27;
                __int16 v149 = 2080;
                uint64_t v150 = (uint64_t)v28;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I Adding default non-Internet policy for NWAgent %s: id=%lu, domain=%s, type=%s", buf, 0x2Au);
                if ((v153[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v153);
                }
                id v25 = *(NSObject **)(a1 + 56);
              }
              BOOL v29 = os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
              if (v24)
              {
                if (v29)
                {
                  *(_DWORD *)long long buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v24;
                  _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", buf, 8u);
                }
                sub_10088E954((uint64_t *)(a1 + 104), (unint64_t)v24, (uint64_t)v24);
                std::string v130 = +[CCNEPolicyResult skipWithOrder:0];
                BOOL v30 = [CCNEPolicy alloc];
                int v31 = +[CCNEPolicyCondition allInterfaces];
                *(void *)&long long v140 = v31;
                *((void *)&v140 + 1) = v20;
                int v32 = +[NSArray arrayWithObjects:&v140 count:2];
                v132 = [(CCNEPolicy *)v30 initWithOrder:1000004 result:v130 conditions:v32];

                id v33 = [v19 addPolicy:v132];
                int v34 = *(NSObject **)(a1 + 56);
                if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                {
                  char v35 = v153;
                  sub_100888294(v153, *(void **)(a1 + 280));
                  if (v153[23] < 0) {
                    char v35 = *(unsigned char **)v153;
                  }
                  id v36 = [*(id *)(a1 + 264) UTF8String];
                  id v37 = [*(id *)(a1 + 272) UTF8String];
                  *(_DWORD *)long long buf = 136315906;
                  *(void *)&uint8_t buf[4] = v35;
                  __int16 v145 = 2048;
                  uint64_t v146 = (uint64_t)v33;
                  __int16 v147 = 2080;
                  uint64_t v148 = (uint64_t)v36;
                  __int16 v149 = 2080;
                  uint64_t v150 = (uint64_t)v37;
                  _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I Adding default non-Internet SKIP policy for NWAgent %s: id=%lu, domain=%s, type=%s", buf, 0x2Au);
                  if ((v153[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v153);
                  }
                  int v34 = *(NSObject **)(a1 + 56);
                }
                BOOL v38 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
                if (v33)
                {
                  if (v38)
                  {
                    *(_DWORD *)long long buf = 67109120;
                    *(_DWORD *)&uint8_t buf[4] = v33;
                    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", buf, 8u);
                  }
                  sub_10088E954((uint64_t *)(a1 + 104), (unint64_t)v33, (uint64_t)v33);
                  if (*(_DWORD *)(a1 + 88) != 4) {
                    goto LABEL_224;
                  }
                  long long v124 = +[CCNEPolicyResult scopedNetworkAgent:*(void *)(a1 + 280)];
                  long long v128 = +[CCNEPolicyCondition accountIdentifier:kTerminusTetheringProxyFallbackAccount];
                  uint64_t v39 = [CCNEPolicy alloc];
                  uint64_t v40 = +[CCNEPolicyCondition allInterfaces];
                  v139[0] = v40;
                  v139[1] = v128;
                  char v41 = +[NSArray arrayWithObjects:v139 count:2];
                  long long v126 = [(CCNEPolicy *)v39 initWithOrder:1000003 result:v124 conditions:v41];

                  id v42 = [v19 addPolicy:v126];
                  uint64_t v43 = *(NSObject **)(a1 + 56);
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                  {
                    __int16 v44 = v153;
                    sub_100888294(v153, *(void **)(a1 + 280));
                    if (v153[23] < 0) {
                      __int16 v44 = *(unsigned char **)v153;
                    }
                    id v45 = [*(id *)(a1 + 264) UTF8String];
                    id v46 = [*(id *)(a1 + 272) UTF8String];
                    *(_DWORD *)long long buf = 136315906;
                    *(void *)&uint8_t buf[4] = v44;
                    __int16 v145 = 2048;
                    uint64_t v146 = (uint64_t)v42;
                    __int16 v147 = 2080;
                    uint64_t v148 = (uint64_t)v45;
                    __int16 v149 = 2080;
                    uint64_t v150 = (uint64_t)v46;
                    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I Adding default Tethering policy for NWAgent %s: id=%lu, domain=%s, type=%s", buf, 0x2Au);
                    if ((v153[23] & 0x80000000) != 0) {
                      operator delete(*(void **)v153);
                    }
                    uint64_t v43 = *(NSObject **)(a1 + 56);
                  }
                  BOOL v47 = os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
                  if (v42)
                  {
                    if (v47)
                    {
                      *(_DWORD *)long long buf = 67109120;
                      *(_DWORD *)&uint8_t buf[4] = v42;
                      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", buf, 8u);
                    }
                    sub_10088E954((uint64_t *)(a1 + 104), (unint64_t)v42, (uint64_t)v42);
                    __int16 v48 = +[CCNEPolicyResult skipWithOrder:0];
                    uint64_t v49 = [CCNEPolicy alloc];
                    unint64_t v50 = +[CCNEPolicyCondition allInterfaces];
                    v138[0] = v50;
                    v138[1] = v128;
                    long long v51 = +[NSArray arrayWithObjects:v138 count:2];
                    long long v123 = [(CCNEPolicy *)v49 initWithOrder:1000004 result:v48 conditions:v51];

                    id v52 = [v19 addPolicy:v123];
                    uint64_t v53 = *(NSObject **)(a1 + 56);
                    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                    {
                      __int16 v54 = v153;
                      sub_100888294(v153, *(void **)(a1 + 280));
                      if (v153[23] < 0) {
                        __int16 v54 = *(unsigned char **)v153;
                      }
                      id v55 = objc_msgSend(*(id *)(a1 + 264), "UTF8String", v123);
                      id v56 = [*(id *)(a1 + 272) UTF8String];
                      *(_DWORD *)long long buf = 136315906;
                      *(void *)&uint8_t buf[4] = v54;
                      __int16 v145 = 2048;
                      uint64_t v146 = (uint64_t)v52;
                      __int16 v147 = 2080;
                      uint64_t v148 = (uint64_t)v55;
                      __int16 v149 = 2080;
                      uint64_t v150 = (uint64_t)v56;
                      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#I Adding default non-Internet Tethering SKIP policy for NWAgent %s: id=%lu, domain=%s, type=%s", buf, 0x2Au);
                      if ((v153[23] & 0x80000000) != 0) {
                        operator delete(*(void **)v153);
                      }
                      uint64_t v53 = *(NSObject **)(a1 + 56);
                    }
                    BOOL v57 = os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
                    if (v52)
                    {
                      if (v57)
                      {
                        *(_DWORD *)long long buf = 67109120;
                        *(_DWORD *)&uint8_t buf[4] = v52;
                        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", buf, 8u);
                      }
                      sub_10088E954((uint64_t *)(a1 + 104), (unint64_t)v52, (uint64_t)v52);
                      int v58 = 0;
                    }
                    else
                    {
                      if (v57)
                      {
                        sub_100888294(buf, *(void **)(a1 + 280));
                        long long v120 = v147 >= 0 ? buf : *(unsigned char **)buf;
                        *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315138;
                        *(void *)&v153[4] = v120;
                        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#E Adding other default tethering skip policy for NWAgent %s: policy is invalid", v153, 0xCu);
                        if (SHIBYTE(v147) < 0) {
                          operator delete(*(void **)buf);
                        }
                      }
                      sub_100888738(a1);
                      int v58 = 1;
                    }
                  }
                  else
                  {
                    if (v47)
                    {
                      sub_100888294(buf, *(void **)(a1 + 280));
                      id v119 = v147 >= 0 ? buf : *(unsigned char **)buf;
                      *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315138;
                      *(void *)&v153[4] = v119;
                      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#E Adding other default Tethering policy for NWAgent %s: policy is invalid", v153, 0xCu);
                      if (SHIBYTE(v147) < 0) {
                        operator delete(*(void **)buf);
                      }
                    }
                    sub_100888738(a1);
                    int v58 = 1;
                  }

                  if (!v58) {
LABEL_224:
                  }
                    sub_100888824(a1, 5u);
                }
                else
                {
                  if (v38)
                  {
                    sub_100888294(buf, *(void **)(a1 + 280));
                    long long v117 = v147 >= 0 ? buf : *(unsigned char **)buf;
                    *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315138;
                    *(void *)&v153[4] = v117;
                    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#E Adding other default skip policy for NWAgent %s: policy is invalid", v153, 0xCu);
                    if (SHIBYTE(v147) < 0) {
                      operator delete(*(void **)buf);
                    }
                  }
                  sub_100888738(a1);
                }
              }
              else
              {
                if (v29)
                {
                  sub_100888294(buf, *(void **)(a1 + 280));
                  long long v115 = v147 >= 0 ? buf : *(unsigned char **)buf;
                  *(_DWORD *)std::chrono::steady_clock::time_point v153 = 136315138;
                  *(void *)&v153[4] = v115;
                  _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#E Adding other default policy for NWAgent %s: policy is invalid", v153, 0xCu);
                  if (SHIBYTE(v147) < 0) {
                    operator delete(*(void **)buf);
                  }
                }
                sub_100888738(a1);
              }
            }
          }
          goto LABEL_134;
        }
      }
      else if (*(void *)(a1 + 280))
      {
        if (*(_DWORD *)(a1 + 296) != 4)
        {
          int v78 = (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
          if (v78)
          {
            sub_100887D34(a1, 0);
            long long v135 = +[CCNEPolicyResult scopedNetworkAgent:*(void *)(a1 + 280)];
            id v79 = objc_alloc((Class)NSUUID);
            PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
            subscriber::generateUuidStrFromSlotId();
            id v80 = [v79 initWithUUIDString:*(void *)buf];
            sub_1000558F4((const void **)buf);
            v131 = v80;
            uint64_t v81 = [v80 UUIDString];
            uint64_t v137 = +[CCNEPolicyCondition accountIdentifier:v81];

            long long v129 = +[CCNEPolicyCondition requiredAgentDomain:*(void *)(a1 + 264) agentType:*(void *)(a1 + 272)];
            long long v82 = [CCNEPolicy alloc];
            uint64_t v83 = +[CCNEPolicyCondition allInterfaces];
            *(void *)std::chrono::steady_clock::time_point v153 = v83;
            *(void *)&v153[8] = v137;
            *(void *)&v153[16] = v129;
            long long v84 = +[NSArray arrayWithObjects:v153 count:3];
            long long v133 = [(CCNEPolicy *)v82 initWithOrder:1000001 result:v135 conditions:v84];

            id v85 = [v78 addPolicy:v133];
            uint64_t v86 = *(NSObject **)(a1 + 56);
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
            {
              sub_100888294(&__p, *(void **)(a1 + 280));
              if (SHIBYTE(v143) >= 0) {
                p_p = &__p;
              }
              else {
                p_p = (long long *)__p;
              }
              id v88 = [v131 UUIDString];
              id v89 = [v88 UTF8String];
              id v90 = [*(id *)(a1 + 264) UTF8String];
              id v91 = [*(id *)(a1 + 272) UTF8String];
              *(_DWORD *)long long buf = 136316162;
              *(void *)&uint8_t buf[4] = p_p;
              __int16 v145 = 2048;
              uint64_t v146 = (uint64_t)v85;
              __int16 v147 = 2080;
              uint64_t v148 = (uint64_t)v89;
              __int16 v149 = 2080;
              uint64_t v150 = (uint64_t)v90;
              __int16 v151 = 2080;
              id v152 = v91;
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "#I Adding non-default non-Internet policy for NWAgent %s: id=%lu, account=%s, domain=%s, type=%s", buf, 0x34u);

              if (SHIBYTE(v143) < 0) {
                operator delete((void *)__p);
              }
              uint64_t v86 = *(NSObject **)(a1 + 56);
            }
            BOOL v92 = os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT);
            if (v85)
            {
              if (v92)
              {
                *(_DWORD *)long long buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v85;
                _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", buf, 8u);
              }
              sub_10088E954((uint64_t *)(a1 + 104), (unint64_t)v85, (uint64_t)v85);
              id v125 = +[CCNEPolicyResult skipWithOrder:0];
              id v93 = [CCNEPolicy alloc];
              long long v94 = +[CCNEPolicyCondition allInterfaces];
              *(void *)&long long __p = v94;
              *((void *)&__p + 1) = v137;
              uint64_t v143 = v129;
              id v95 = +[NSArray arrayWithObjects:&__p count:3];
              id v127 = [(CCNEPolicy *)v93 initWithOrder:1000002 result:v125 conditions:v95];

              id v96 = [v78 addPolicy:v127];
              id v97 = *(NSObject **)(a1 + 56);
              if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
              {
                sub_100888294(&v140, *(void **)(a1 + 280));
                if (v141 >= 0) {
                  uint64_t v98 = &v140;
                }
                else {
                  uint64_t v98 = (long long *)v140;
                }
                id v99 = [v131 UUIDString];
                id v100 = [v99 UTF8String];
                id v101 = [*(id *)(a1 + 264) UTF8String];
                id v102 = [*(id *)(a1 + 272) UTF8String];
                *(_DWORD *)long long buf = 136316162;
                *(void *)&uint8_t buf[4] = v98;
                __int16 v145 = 2048;
                uint64_t v146 = (uint64_t)v96;
                __int16 v147 = 2080;
                uint64_t v148 = (uint64_t)v100;
                __int16 v149 = 2080;
                uint64_t v150 = (uint64_t)v101;
                __int16 v151 = 2080;
                id v152 = v102;
                _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "#I Adding non-default non-Internet SKIP policy for NWAgent %s: id=%lu, account=%s, domain=%s, type=%s", buf, 0x34u);

                if (v141 < 0) {
                  operator delete((void *)v140);
                }
                id v97 = *(NSObject **)(a1 + 56);
              }
              BOOL v103 = os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT);
              if (v96)
              {
                if (v103)
                {
                  *(_DWORD *)long long buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v96;
                  _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "#I Add fPolicies: %d", buf, 8u);
                }
                sub_10088E954((uint64_t *)(a1 + 104), (unint64_t)v96, (uint64_t)v96);
                sub_100888824(a1, 4u);
              }
              else
              {
                if (v103)
                {
                  sub_100888294(buf, *(void **)(a1 + 280));
                  id v118 = v147 >= 0 ? buf : *(unsigned char **)buf;
                  LODWORD(v140) = 136315138;
                  *(void *)((char *)&v140 + 4) = v118;
                  _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "#E Adding other non-default skip policy for NWAgent %s: policy is invalid", (uint8_t *)&v140, 0xCu);
                  if (SHIBYTE(v147) < 0) {
                    operator delete(*(void **)buf);
                  }
                }
                sub_100888738(a1);
              }
            }
            else
            {
              if (v92)
              {
                sub_100888294(buf, *(void **)(a1 + 280));
                long long v116 = v147 >= 0 ? buf : *(unsigned char **)buf;
                LODWORD(__p) = 136315138;
                *(void *)((char *)&__p + 4) = v116;
                _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "#E Adding other non-default policy for NWAgent %s: policy is invalid", (uint8_t *)&__p, 0xCu);
                if (SHIBYTE(v147) < 0) {
                  operator delete(*(void **)buf);
                }
              }
              sub_100888738(a1);
            }
          }
        }
        goto LABEL_134;
      }
    }
LABEL_133:
    sub_100888738(a1);
    goto LABEL_134;
  }
  if ((a7 & 1) != 0 || *(_DWORD *)(a1 + 296) != 3) {
    goto LABEL_133;
  }
LABEL_134:
}

void sub_10088DBB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  _Unwind_Resume(a1);
}

void sub_10088DF20(uint64_t a1, int a2, uint64_t a3, int a4, BOOL a5, TrafficDescriptor **a6, int a7, uint64_t a8, int a9)
{
}

void sub_10088DF38(uint64_t a1)
{
}

void sub_10088DF40(uint64_t a1)
{
}

void sub_10088DF4C(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "nwpolicy";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: ------------ NEPolicy: %s ------------------>>", buf, 0xCu);
  }
  id v4 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfConnectionType=%s", buf, 0xCu);
    id v4 = *(NSObject **)(a1 + 56);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = asStringBool(*(void *)(a1 + 96) != 0);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfSession=%s", buf, 0xCu);
  }
  uint64_t v7 = *(void *)(a1 + 120);
  if (v7)
  {
    char v8 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfPolicies=%lu", buf, 0xCu);
    }
    BOOL v9 = *(void **)(a1 + 104);
    if (v9 != (void *)(a1 + 112))
    {
      do
      {
        int v10 = *(NSObject **)(a1 + 56);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = v9[4];
          *(_DWORD *)long long buf = 134217984;
          *(void *)&uint8_t buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t%lu", buf, 0xCu);
        }
        uint64_t v12 = (void *)v9[1];
        if (v12)
        {
          do
          {
            char v13 = v12;
            uint64_t v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            char v13 = (void *)v9[2];
            BOOL v14 = *v13 == (void)v9;
            BOOL v9 = v13;
          }
          while (!v14);
        }
        BOOL v9 = v13;
      }
      while (v13 != (void *)(a1 + 112));
    }
  }
  BOOL v15 = *(NSObject **)(a1 + 56);
  if (*(unsigned char *)(a1 + 136) && os_log_type_enabled(*(os_log_t *)(a1 + 56), OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 128);
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\tfPolicyIMSDrop=%lu", buf, 0xCu);
    BOOL v15 = *(NSObject **)(a1 + 56);
  }
  uint64_t v17 = *(void *)(a1 + 184);
  if (v17)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfTmpPolicies=%lu", buf, 0xCu);
    }
    long long v33 = 0u;
    long long v34 = 0u;
    *(_OWORD *)long long buf = 0u;
    sub_10088F99C((uint64_t)buf, (void *)(a1 + 144));
    while (*((void *)&v34 + 1))
    {
      unsigned __int8 v18 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(*(void *)(*(void *)&buf[8] + 8 * ((unint64_t)v34 / 0x66))
                        + 40 * ((unint64_t)v34 % 0x66));
        *(_DWORD *)BOOL v30 = 134217984;
        uint64_t v31 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t%lu", v30, 0xCu);
      }
      sub_10088EA00((uint64_t)buf);
    }
    sub_10088E624(buf);
    BOOL v15 = *(NSObject **)(a1 + 56);
  }
  uint64_t v20 = *(void *)(a1 + 232);
  if (v20)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfTmpPoliciesLong=%lu", buf, 0xCu);
    }
    long long v33 = 0u;
    long long v34 = 0u;
    *(_OWORD *)long long buf = 0u;
    sub_10088F99C((uint64_t)buf, (void *)(a1 + 192));
    while (*((void *)&v34 + 1))
    {
      uint64_t v21 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = *(void *)(*(void *)(*(void *)&buf[8] + 8 * ((unint64_t)v34 / 0x66))
                        + 40 * ((unint64_t)v34 % 0x66));
        *(_DWORD *)BOOL v30 = 134217984;
        uint64_t v31 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\t%lu", v30, 0xCu);
      }
      sub_10088EA00((uint64_t)buf);
    }
    sub_10088E624(buf);
    BOOL v15 = *(NSObject **)(a1 + 56);
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = *(void *)(a1 + 264);
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v23;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfDomain=%@", buf, 0xCu);
    BOOL v15 = *(NSObject **)(a1 + 56);
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = *(void *)(a1 + 272);
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfType=%@", buf, 0xCu);
    BOOL v15 = *(NSObject **)(a1 + 56);
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = *(void *)(a1 + 280);
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v25;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfAgentUUID=%@", buf, 0xCu);
    BOOL v15 = *(NSObject **)(a1 + 56);
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v26 = *(void *)(a1 + 288);
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfAgentSliceUUID=%@", buf, 0xCu);
    BOOL v15 = *(NSObject **)(a1 + 56);
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = *(int *)(a1 + 296);
    if (v27 > 6) {
      id v28 = "Unknown PolicyType";
    }
    else {
      id v28 = off_101A137B8[v27];
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfCurrentPolicyType=%s", buf, 0xCu);
    BOOL v15 = *(NSObject **)(a1 + 56);
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = asStringBool(*(void *)(a1 + 304) != 0);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v29;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfInternetTimer=%s", buf, 0xCu);
  }
}

void sub_10088E61C(uint64_t a1)
{
}

uint64_t sub_10088E624(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    id v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    id v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 / 0x66];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    unint64_t v9 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 31) < 0)
        {
          operator delete(*(void **)(v8 + 8));
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 40;
        if (v8 - v7 == 4080)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *id v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 51;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 102;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    BOOL v14 = *v2++;
    operator delete(v14);
  }

  return sub_10005EE1C((uint64_t)a1);
}

void sub_10088E784(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10088E850(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[5], v1, (dispatch_function_t)sub_10088E928);
  __cxa_rethrow();
}

void sub_10088E878(_Unwind_Exception *a1)
{
}

void sub_10088E890(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10088E8C8(uint64_t a1)
{
}

uint64_t sub_10088E8E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10088E928(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *sub_10088E954(uint64_t *result, unint64_t a2, uint64_t a3)
{
  id v4 = (uint64_t **)result;
  uint64_t v6 = (uint64_t **)(result + 1);
  unint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    unint64_t v9 = (uint64_t *)operator new(0x28uLL);
    void v9[4] = a3;
    return sub_100046C38(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void sub_10088EA00(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8 * (v2 / 0x66));
  if (*(char *)(v3 + 40 * (v2 % 0x66) + 31) < 0)
  {
    operator delete(*(void **)(v3 + 40 * (v2 % 0x66) + 8));
    unint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v4 = *(void *)(a1 + 40) - 1;
  unint64_t v5 = v2 + 1;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  if (v5 >= 0xCC)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 102;
  }
}

void *sub_10088EAAC(void *a1)
{
  *a1 = off_101A13710;
  unint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10088EAF8(void *a1)
{
  *a1 = off_101A13710;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_10088EB64(uint64_t a1)
{
  float result = (char *)operator new(0x20uLL);
  *(void *)float result = off_101A13710;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10088EBC8(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A13710;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10088EC08(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10088EC18(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_10088EC58(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      unint64_t v5 = v4;
      if (a1[2])
      {
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472;
        v13[2] = sub_10088EE08;
        v13[3] = &unk_1019A1BF8;
        v13[4] = v3;
        uint64_t v6 = v13;
        unint64_t v7 = (std::__shared_weak_count *)v3[4];
        if (!v7 || (uint64_t v8 = v3[3], (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
          sub_100088B9C();
        }
        unint64_t v10 = v9;
        unint64_t v11 = v3[5];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3321888768;
        block[2] = sub_10088F2BC;
        block[3] = &unk_101A13778;
        uint64_t v16 = v8;
        uint64_t v17 = v9;
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v12 = v6;
        id v15 = v12;
        dispatch_async(v11, block);

        if (v17) {
          sub_10004D2C8(v17);
        }
        sub_10004D2C8(v10);
      }
      sub_10004D2C8(v5);
    }
  }
}

uint64_t sub_10088EDBC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10088EDFC()
{
}

void sub_10088EE08(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 56);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Internet agent timer: fired", buf, 2u);
  }
  uint64_t v3 = (*(void (**)(uint64_t))(*(void *)v1 + 40))(v1);
  uint64_t v4 = v3;
  if (v3)
  {
    long long v33 = v3;
    id v5 = v3;
    v6.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    char v7 = 0;
    if (*(void *)(v1 + 184))
    {
      while (1)
      {
        unint64_t v8 = *(void *)(v1 + 176);
        uint64_t v9 = *(void *)(*(void *)(v1 + 152) + 8 * (v8 / 0x66));
        unint64_t v10 = v8 % 0x66;
        unint64_t v11 = (void *)(v9 + 40 * v10);
        if (v6.__d_.__rep_ - v11[4] < 0x6FC23AC01) {
          goto LABEL_20;
        }
        uint64_t v12 = v9 + 40 * v10;
        uint64_t v13 = (void *)(v12 + 8);
        int v14 = *(char *)(v12 + 31);
        if ((v14 & 0x80000000) == 0) {
          break;
        }
        if (v13[1]) {
          goto LABEL_10;
        }
LABEL_11:
        unsigned __int8 v15 = [v5 removePolicyWithID:*v11];
        uint64_t v16 = *(NSObject **)(v1 + 56);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          sub_100888294(__p, *(void **)(v1 + 280));
          if (v35 >= 0) {
            uint64_t v17 = __p;
          }
          else {
            uint64_t v17 = (void **)__p[0];
          }
          if (*((char *)v13 + 23) < 0) {
            uint64_t v13 = (void *)*v13;
          }
          uint64_t v18 = *v11;
          uint64_t v19 = asStringBool(v15);
          *(_DWORD *)long long buf = 136315906;
          id v37 = v17;
          __int16 v38 = 2080;
          uint64_t v39 = v13;
          __int16 v40 = 2048;
          uint64_t v41 = v18;
          __int16 v42 = 2080;
          uint64_t v43 = v19;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I (timeout) removed fTmpPolicies for NWAgent %s: key=%s, id=%lu, result is %s", buf, 0x2Au);
          if (v35 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_10088EA00(v1 + 144);
        char v7 = 1;
        if (!*(void *)(v1 + 184)) {
          goto LABEL_20;
        }
      }
      if (!(_BYTE)v14) {
        goto LABEL_11;
      }
LABEL_10:
      sub_1000E9358((uint64_t **)(v1 + 240), (void **)v13);
      goto LABEL_11;
    }
LABEL_20:
    if (*(void *)(v1 + 232))
    {
      while (1)
      {
        unint64_t v20 = *(void *)(v1 + 224);
        uint64_t v21 = *(void *)(*(void *)(v1 + 200) + 8 * (v20 / 0x66));
        unint64_t v22 = v20 % 0x66;
        uint64_t v23 = (void *)(v21 + 40 * v22);
        if (v6.__d_.__rep_ - v23[4] < 0x4E94914F0001) {
          goto LABEL_37;
        }
        uint64_t v24 = v21 + 40 * v22;
        uint64_t v25 = (void *)(v24 + 8);
        int v26 = *(char *)(v24 + 31);
        if ((v26 & 0x80000000) == 0) {
          break;
        }
        if (v25[1]) {
          goto LABEL_26;
        }
LABEL_27:
        unsigned __int8 v27 = [v5 removePolicyWithID:*v23];
        id v28 = *(NSObject **)(v1 + 56);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          sub_100888294(__p, *(void **)(v1 + 280));
          if (v35 >= 0) {
            uint64_t v29 = __p;
          }
          else {
            uint64_t v29 = (void **)__p[0];
          }
          if (*((char *)v25 + 23) < 0) {
            uint64_t v25 = (void *)*v25;
          }
          uint64_t v30 = *v23;
          uint64_t v31 = asStringBool(v27);
          *(_DWORD *)long long buf = 136315906;
          id v37 = v29;
          __int16 v38 = 2080;
          uint64_t v39 = v25;
          __int16 v40 = 2048;
          uint64_t v41 = v30;
          __int16 v42 = 2080;
          uint64_t v43 = v31;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I (timeout) removed fTmpPoliciesLong for NWAgent %s: key=%s, id=%lu, result is %s", buf, 0x2Au);
          if (v35 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_10088EA00(v1 + 192);
        char v7 = 1;
        if (!*(void *)(v1 + 232))
        {

          uint64_t v4 = v33;
          goto LABEL_38;
        }
      }
      if (!(_BYTE)v26) {
        goto LABEL_27;
      }
LABEL_26:
      sub_1000E9358((uint64_t **)(v1 + 240), (void **)v25);
      goto LABEL_27;
    }
LABEL_37:

    uint64_t v4 = v33;
    if (v7) {
LABEL_38:
    }
      sub_100888824(v1, *(_DWORD *)(v1 + 296));
    int v32 = *(NSObject **)(v1 + 56);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I Internet agent timer: completed", buf, 2u);
    }
  }
}

void sub_10088F268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10088F2BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10088F2CC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10088F2E8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void *sub_10088F2F8(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1[1];
  id v5 = (char *)a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 102 * v6 - 1;
  }
  unint64_t v8 = a1[4];
  if (v7 != a1[5] + v8) {
    goto LABEL_37;
  }
  BOOL v9 = v8 >= 0x66;
  unint64_t v10 = v8 - 102;
  if (v9)
  {
    a1[4] = v10;
    uint64_t v13 = *(void *)v4;
    unint64_t v11 = v4 + 8;
    uint64_t v12 = v13;
    a1[1] = v11;
    if (v5 == (char *)a1[3])
    {
      uint64_t v14 = (uint64_t)&v11[-*a1];
      if ((unint64_t)v11 <= *a1)
      {
        if (v5 == (char *)*a1) {
          unint64_t v35 = 1;
        }
        else {
          unint64_t v35 = (uint64_t)&v5[-*a1] >> 2;
        }
        id v36 = (char *)sub_100048350(v35);
        __int16 v38 = &v36[8 * (v35 >> 2)];
        uint64_t v39 = (uint64_t *)a1[1];
        id v5 = v38;
        uint64_t v40 = a1[2] - (void)v39;
        if (v40)
        {
          id v5 = &v38[v40 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v41 = 8 * (v40 >> 3);
          __int16 v42 = &v36[8 * (v35 >> 2)];
          do
          {
            uint64_t v43 = *v39++;
            *(void *)__int16 v42 = v43;
            v42 += 8;
            v41 -= 8;
          }
          while (v41);
        }
        __int16 v44 = (char *)*a1;
        *a1 = v36;
        a1[1] = v38;
        a1[2] = v5;
        a1[3] = &v36[8 * v37];
        if (v44)
        {
          operator delete(v44);
          id v5 = (char *)a1[2];
        }
      }
      else
      {
        uint64_t v15 = v14 >> 3;
        BOOL v16 = v14 >> 3 < -1;
        uint64_t v17 = (v14 >> 3) + 2;
        if (v16) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = v15 + 1;
        }
        uint64_t v19 = -(v18 >> 1);
        uint64_t v20 = v18 >> 1;
        uint64_t v21 = &v11[-8 * v20];
        int64_t v22 = v5 - v11;
        if (v5 != v11)
        {
          memmove(&v11[-8 * v20], v11, v5 - v11);
          id v5 = (char *)a1[1];
        }
        uint64_t v23 = &v5[8 * v19];
        id v5 = &v21[v22];
        a1[1] = v23;
        a1[2] = &v21[v22];
      }
    }
    *(void *)id v5 = v12;
  }
  else
  {
    uint64_t v24 = (char *)a1[3];
    uint64_t v25 = (char *)*a1;
    uint64_t v26 = (uint64_t)&v24[-*a1];
    if (v6 >= v26 >> 3)
    {
      uint64_t v29 = v26 >> 2;
      if (v24 == v25) {
        unint64_t v30 = 1;
      }
      else {
        unint64_t v30 = v29;
      }
      uint64_t v83 = a1 + 3;
      *(void *)&long long v81 = sub_100048350(v30);
      *((void *)&v81 + 1) = v81 + 8 * v6;
      *(void *)&long long v82 = *((void *)&v81 + 1);
      *((void *)&v82 + 1) = v81 + 8 * v31;
      id v80 = operator new(0xFF0uLL);
      sub_10088F710(&v81, &v80);
      for (uint64_t i = (void *)a1[2]; i != (void *)a1[1]; sub_10088F824((uint64_t)&v81, i))
        --i;
      long long v33 = (char *)*a1;
      long long v34 = v82;
      *(_OWORD *)a1 = v81;
      *((_OWORD *)a1 + 1) = v34;
      if (v33)
      {
        operator delete(v33);
        id v5 = (char *)a1[2];
      }
      else
      {
        id v5 = (char *)v34;
      }
      goto LABEL_36;
    }
    unsigned __int8 v27 = operator new(0xFF0uLL);
    id v28 = v27;
    if (v24 == v5)
    {
      if (v4 == v25)
      {
        if (v5 == v4) {
          unint64_t v48 = 1;
        }
        else {
          unint64_t v48 = (v24 - v4) >> 2;
        }
        uint64_t v49 = 2 * v48;
        unint64_t v50 = (char *)sub_100048350(v48);
        uint64_t v4 = &v50[(v49 + 6) & 0xFFFFFFFFFFFFFFF8];
        id v52 = (uint64_t *)a1[1];
        uint64_t v53 = v4;
        uint64_t v54 = a1[2] - (void)v52;
        if (v54)
        {
          uint64_t v53 = &v4[v54 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v55 = 8 * (v54 >> 3);
          id v56 = v4;
          do
          {
            uint64_t v57 = *v52++;
            *(void *)id v56 = v57;
            v56 += 8;
            v55 -= 8;
          }
          while (v55);
        }
        int v58 = (char *)*a1;
        *a1 = v50;
        a1[1] = v4;
        a1[2] = v53;
        a1[3] = &v50[8 * v51];
        if (v58)
        {
          operator delete(v58);
          uint64_t v4 = (char *)a1[1];
        }
      }
      *((void *)v4 - 1) = v28;
      int v59 = (char *)a1[1];
      char v60 = (char *)a1[2];
      a1[1] = v59 - 8;
      uint64_t v61 = *((void *)v59 - 1);
      a1[1] = v59;
      if (v60 == (char *)a1[3])
      {
        uint64_t v62 = (uint64_t)&v59[-*a1];
        if ((unint64_t)v59 <= *a1)
        {
          if (v60 == (char *)*a1) {
            unint64_t v70 = 1;
          }
          else {
            unint64_t v70 = (uint64_t)&v60[-*a1] >> 2;
          }
          char v71 = (char *)sub_100048350(v70);
          long long v73 = &v71[8 * (v70 >> 2)];
          uint64_t v74 = (uint64_t *)a1[1];
          char v60 = v73;
          uint64_t v75 = a1[2] - (void)v74;
          if (v75)
          {
            char v60 = &v73[v75 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v76 = 8 * (v75 >> 3);
            long long v77 = &v71[8 * (v70 >> 2)];
            do
            {
              uint64_t v78 = *v74++;
              *(void *)long long v77 = v78;
              v77 += 8;
              v76 -= 8;
            }
            while (v76);
          }
          id v79 = (char *)*a1;
          *a1 = v71;
          a1[1] = v73;
          a1[2] = v60;
          a1[3] = &v71[8 * v72];
          if (v79)
          {
            operator delete(v79);
            char v60 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v63 = v62 >> 3;
          BOOL v16 = v62 >> 3 < -1;
          uint64_t v64 = (v62 >> 3) + 2;
          if (v16) {
            uint64_t v65 = v64;
          }
          else {
            uint64_t v65 = v63 + 1;
          }
          uint64_t v66 = -(v65 >> 1);
          uint64_t v67 = v65 >> 1;
          int v68 = &v59[-8 * v67];
          int64_t v69 = v60 - v59;
          if (v60 != v59)
          {
            memmove(&v59[-8 * v67], v59, v60 - v59);
            int v59 = (char *)a1[1];
          }
          char v60 = &v68[v69];
          a1[1] = &v59[8 * v66];
          a1[2] = &v68[v69];
        }
      }
      *(void *)char v60 = v61;
    }
    else
    {
      *(void *)id v5 = v27;
    }
  }
  id v5 = (char *)(a1[2] + 8);
  a1[2] = v5;
LABEL_36:
  uint64_t v4 = (char *)a1[1];
LABEL_37:
  if (v5 == v4)
  {
    id v46 = 0;
  }
  else
  {
    unint64_t v45 = a1[5] + a1[4];
    id v46 = (void *)(*(void *)&v4[8 * (v45 / 0x66)] + 40 * (v45 % 0x66));
  }
  float result = sub_10088F93C(v46, a2);
  ++a1[5];
  return result;
}

void sub_10088F6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10088F710(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    id v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_100048350(v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      uint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_10088F824(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_100048350(v11);
      id v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        id v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      id v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    id v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void *sub_10088F93C(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v4 = a1 + 1;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84(v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    void v4[2] = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  a1[4] = *(void *)(a2 + 32);
  return a1;
}

uint64_t sub_10088F99C(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v3 = a2[4];
  uint64_t v4 = a2[1];
  if (a2[2] == v4)
  {
    uint64_t v5 = 0;
    unint64_t v8 = 0;
    uint64_t v7 = (void *)(v4 + 8 * ((a2[5] + v3) / 0x66));
  }
  else
  {
    uint64_t v5 = *(void *)(v4 + 8 * (v3 / 0x66)) + 40 * (v3 % 0x66);
    unint64_t v6 = a2[5] + v3;
    uint64_t v7 = (void *)(v4 + 8 * (v6 / 0x66));
    unint64_t v8 = *v7 + 40 * (v6 % 0x66);
  }
  if (v8 != v5)
  {
    uint64_t v9 = (void *)(v4 + 8 * (v3 / 0x66));
    uint64_t v10 = 102 * (v7 - v9) - 0x3333333333333333 * ((uint64_t)(v8 - *v7) >> 3) + 0x3333333333333333 * ((v5 - *v9) >> 3);
    if (v10)
    {
      unint64_t v11 = (char *)((v10 + 1) % 0x66uLL ? (v10 + 1) / 0x66uLL + 1 : (v10 + 1) / 0x66uLL);
      if (v11)
      {
        uint64_t v34 = a1 + 24;
        uint64_t v31 = (char *)sub_100048350((unint64_t)v11);
        int v32 = v31;
        *(void *)&long long v33 = v31;
        *((void *)&v33 + 1) = &v31[8 * v12];
        do
        {
          unint64_t v30 = operator new(0xFF0uLL);
          sub_10088F710(&v31, &v30);
          --v11;
        }
        while (v11);
        for (uint64_t i = *(void **)(a1 + 16); i != *(void **)(a1 + 8); sub_10088F824((uint64_t)&v31, i))
          --i;
        uint64_t v14 = *(void **)a1;
        uint64_t v15 = v32;
        *(void *)a1 = v31;
        *(void *)(a1 + 8) = v15;
        unint64_t v16 = (char *)v33;
        *(_OWORD *)(a1 + 16) = v33;
        if (v14)
        {
          operator delete(v14);
          uint64_t v15 = *(char **)(a1 + 8);
          uint64_t v17 = *(char **)(a1 + 16);
        }
        else
        {
          uint64_t v17 = v16;
        }
        uint64_t v19 = *(void *)(a1 + 40);
        unint64_t v20 = *(void *)(a1 + 32) + v19;
        unint64_t v11 = &v15[8 * (v20 / 0x66)];
        unint64_t v18 = v17 == v15 ? 0 : *(void *)v11 + 40 * (v20 % 0x66);
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
      }
      uint64_t v21 = v10 - 0x3333333333333333 * ((uint64_t)(v18 - *(void *)v11) >> 3);
      if (v21 < 1)
      {
        unint64_t v24 = 101 - v21;
        uint64_t v22 = &v11[-8 * (v24 / 0x66)];
        unint64_t v23 = *(void *)v22 + 40 * (102 * (v24 / 0x66) - v24) + 4040;
      }
      else
      {
        uint64_t v22 = &v11[8 * (v21 / 0x66uLL)];
        unint64_t v23 = *(void *)v22 + 40 * (v21 % 0x66uLL);
      }
      if (v18 != v23)
      {
        do
        {
          uint64_t v25 = v23;
          if (v11 != v22) {
            uint64_t v25 = *(void *)v11 + 4080;
          }
          if (v18 == v25)
          {
            uint64_t v25 = v18;
          }
          else
          {
            uint64_t v26 = 0;
            do
            {
              sub_10088F93C((void *)(v18 + v26), v5);
              v5 += 40;
              if (v5 - *v9 == 4080)
              {
                uint64_t v27 = v9[1];
                ++v9;
                uint64_t v5 = v27;
              }
              v26 += 40;
            }
            while (v18 + v26 != v25);
            uint64_t v19 = *(void *)(a1 + 40);
          }
          v19 -= 0x3333333333333333 * ((uint64_t)(v25 - v18) >> 3);
          *(void *)(a1 + 40) = v19;
          if (v11 == v22) {
            break;
          }
          unint64_t v28 = *((void *)v11 + 1);
          v11 += 8;
          unint64_t v18 = v28;
        }
        while (v28 != v23);
      }
    }
  }
  return a1;
}

void sub_10088FCF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  sub_10005EE1C(v12);
  _Unwind_Resume(a1);
}

const char *sub_10088FD6C(int a1)
{
  uint64_t v1 = "lazuli.cache.?";
  if (a1 == 2) {
    uint64_t v1 = "lazuli.cache.2";
  }
  if (a1 == 1) {
    return "lazuli.cache.1";
  }
  else {
    return v1;
  }
}

void *sub_10088FD98(uint64_t a1)
{
  sub_1001F7124(a1 + 32, *(void **)(a1 + 40));

  return sub_100894D58((void *)a1);
}

void sub_10088FDD8(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Powering on", buf, 2u);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 112), v5 = *(void *)(a1 + 8), (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v5 + 56;
  if (!v5) {
    uint64_t v7 = 0;
  }
  uint64_t v26 = v7;
  uint64_t v27 = v6;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 88))(v4, &v26);
  if (v27) {
    sub_10004D2C8(v27);
  }
  sub_100058DB0(__p, "/cc/props/carrier_bundles");
  unint64_t v8 = (uint8_t *)operator new(0x28uLL);
  *(void *)unint64_t v8 = off_101A13A08;
  *((void *)v8 + 1) = a1 + 136;
  *((void *)v8 + 2) = a1;
  *((void *)v8 + 3) = sub_10089077C;
  *((void *)v8 + 4) = 0;
  unint64_t v30 = v8;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/internet_status");
  uint64_t v9 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v9 = off_101A13A88;
  *((void *)v9 + 1) = a1 + 185;
  *((void *)v9 + 2) = a1;
  *((void *)v9 + 3) = sub_100890A14;
  *((void *)v9 + 4) = 0;
  unint64_t v30 = v9;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/sims_in_use");
  uint64_t v10 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v10 = off_101A13B08;
  *((void *)v10 + 1) = a1 + 160;
  *((void *)v10 + 2) = a1;
  *((void *)v10 + 3) = sub_100890AE4;
  *((void *)v10 + 4) = 0;
  unint64_t v30 = v10;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/internet_reachability_interface");
  unint64_t v11 = (uint8_t *)operator new(0x28uLL);
  *(void *)unint64_t v11 = off_101A13B88;
  *((void *)v11 + 1) = a1 + 184;
  *((void *)v11 + 2) = a1;
  *((void *)v11 + 3) = sub_100890DFC;
  *((void *)v11 + 4) = 0;
  unint64_t v30 = v11;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/prefs-nb/imeis");
  uint64_t v12 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v12 = off_101A13C08;
  *((void *)v12 + 1) = a1 + 192;
  *((void *)v12 + 2) = a1;
  *((void *)v12 + 3) = sub_100890ECC;
  *((void *)v12 + 4) = 0;
  unint64_t v30 = v12;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/phone_numbers");
  uint64_t v13 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v13 = off_101A13C88;
  *((void *)v13 + 1) = a1 + 272;
  *((void *)v13 + 2) = a1;
  *((void *)v13 + 3) = sub_1008910E0;
  *((void *)v13 + 4) = 0;
  unint64_t v30 = v13;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/connection_state");
  uint64_t v14 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v14 = off_101A13D08;
  *((void *)v14 + 1) = a1 + 296;
  *((void *)v14 + 2) = a1;
  *((void *)v14 + 3) = sub_1008912A0;
  *((void *)v14 + 4) = 0;
  unint64_t v30 = v14;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/baseband_service_provisioned_states");
  uint64_t v15 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v15 = off_101A13D88;
  *((void *)v15 + 1) = a1 + 368;
  *((void *)v15 + 2) = a1;
  *((void *)v15 + 3) = sub_1008914A8;
  *((void *)v15 + 4) = 0;
  unint64_t v30 = v15;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v16 = (uint8_t *)(a1 + 216);
  *(void *)long long buf = off_101A13E08;
  uint64_t v29 = a1 + 64;
  unint64_t v30 = buf;
  if (buf != (uint8_t *)(a1 + 216))
  {
    uint64_t v17 = *(uint8_t **)(a1 + 240);
    if (v17 == v16)
    {
      __p[1] = (void *)(a1 + 64);
      uint64_t v32 = 0;
      unint64_t v30 = 0;
      __p[0] = off_101A13E08;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v16 + 24))(a1 + 216, buf);
      (*(void (**)(void))(**(void **)(a1 + 240) + 32))(*(void *)(a1 + 240));
      *(void *)(a1 + 240) = 0;
      unint64_t v30 = buf;
      (*((void (**)(void **, uint64_t))__p[0] + 3))(__p, a1 + 216);
      (*((void (**)(void **))__p[0] + 4))(__p);
    }
    else
    {
      *(void *)(a1 + 216) = off_101A13E08;
      *(void *)(a1 + 224) = a1 + 64;
      unint64_t v30 = v17;
    }
    *(void *)(a1 + 240) = v16;
  }
  sub_100894D58(buf);
  uint64_t v18 = *(void *)(a1 + 240);
  if (v18) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 48))(v18, a1 + 248);
  }
  *(void *)long long buf = off_101A13E98;
  uint64_t v29 = a1 + 64;
  unint64_t v30 = buf;
  sub_10041CA0C(buf, (void *)(a1 + 392));
  sub_10041A760(buf);
  uint64_t v19 = *(void *)(a1 + 416);
  if (v19) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 48))(v19, a1 + 424);
  }
  sub_100058DB0(__p, "/cc/props/sms_online");
  unint64_t v20 = (uint8_t *)operator new(0x28uLL);
  *(void *)unint64_t v20 = off_101A13F18;
  *((void *)v20 + 1) = a1 + 320;
  *((void *)v20 + 2) = a1;
  *((void *)v20 + 3) = sub_10089164C;
  *((void *)v20 + 4) = 0;
  unint64_t v30 = v20;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/imsi_identity_ready");
  uint64_t v21 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v21 = off_101A13F98;
  *((void *)v21 + 1) = a1 + 344;
  *((void *)v21 + 2) = a1;
  *((void *)v21 + 3) = sub_100891718;
  *((void *)v21 + 4) = 0;
  unint64_t v30 = v21;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/first_unlock_since_boot");
  uint64_t v22 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v22 = off_101A14018;
  *((void *)v22 + 1) = a1 + 128;
  *((void *)v22 + 2) = a1;
  *((void *)v22 + 3) = sub_1008919E0;
  *((void *)v22 + 4) = 0;
  unint64_t v30 = v22;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/events/managed_configuration_changed");
  unint64_t v23 = (uint8_t *)operator new(0x20uLL);
  *(void *)unint64_t v23 = off_101A14098;
  *((void *)v23 + 1) = a1;
  *((void *)v23 + 2) = sub_100891AF0;
  *((void *)v23 + 3) = 0;
  unint64_t v30 = v23;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  if ((ctu::RestModule::isConnected((ctu::RestModule *)(a1 + 64)) & 1) == 0)
  {
    Registry::createRestModuleOneTimeUseConnection(&v24, *(Registry **)(a1 + 80));
    ctu::RestModule::connect();
    if (v25) {
      sub_10004D2C8(v25);
    }
  }
}

void sub_1008906BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10089077C(uint64_t a1, uint64_t a2)
{
  if ((rest::operator==() & 1) == 0)
  {
    uint64_t v4 = *(void **)(a1 + 136);
    if (v4 != (void *)(a1 + 144))
    {
      uint64_t v5 = (uint64_t *)(a2 + 8);
      do
      {
        uint64_t v6 = *v5;
        if (*v5)
        {
          int v7 = *((_DWORD *)v4 + 8);
          uint64_t v8 = a2 + 8;
          do
          {
            int v9 = *(_DWORD *)(v6 + 32);
            BOOL v10 = v9 < v7;
            if (v9 >= v7) {
              unint64_t v11 = (uint64_t *)v6;
            }
            else {
              unint64_t v11 = (uint64_t *)(v6 + 8);
            }
            if (!v10) {
              uint64_t v8 = v6;
            }
            uint64_t v6 = *v11;
          }
          while (*v11);
          if ((uint64_t *)v8 != v5 && v7 >= *(_DWORD *)(v8 + 32))
          {
            if (rest::operator==()) {
              goto LABEL_28;
            }
            int v12 = *((_DWORD *)v4 + 8);
            if (*((char *)v4 + 71) < 0)
            {
              sub_10004FC84(&v17, (void *)v4[6], v4[7]);
            }
            else
            {
              long long v17 = *((_OWORD *)v4 + 3);
              uint64_t v18 = v4[8];
            }
            if (*((char *)v4 + 95) < 0)
            {
              sub_10004FC84(&v19, (void *)v4[9], v4[10]);
            }
            else
            {
              long long v19 = *(_OWORD *)(v4 + 9);
              uint64_t v20 = v4[11];
            }
            sub_100891C70(a1, v12);
            if (SHIBYTE(v20) < 0) {
              operator delete((void *)v19);
            }
            uint64_t v13 = (void **)&v17;
            if ((SHIBYTE(v18) & 0x80000000) == 0) {
              goto LABEL_28;
            }
            goto LABEL_27;
          }
        }
        else
        {
          int v7 = *((_DWORD *)v4 + 8);
        }
        __int16 v21 = *((_WORD *)v4 + 20);
        if (*((char *)v4 + 71) < 0)
        {
          sub_10004FC84(&v22, (void *)v4[6], v4[7]);
        }
        else
        {
          long long v22 = *((_OWORD *)v4 + 3);
          uint64_t v23 = v4[8];
        }
        if (*((char *)v4 + 95) < 0)
        {
          sub_10004FC84(&__p, (void *)v4[9], v4[10]);
        }
        else
        {
          long long __p = *(_OWORD *)(v4 + 9);
          uint64_t v25 = v4[11];
        }
        sub_100891C70(a1, v7);
        if (SHIBYTE(v25) < 0) {
          operator delete((void *)__p);
        }
        uint64_t v13 = (void **)&v22;
        if ((SHIBYTE(v23) & 0x80000000) == 0) {
          goto LABEL_28;
        }
LABEL_27:
        operator delete(*v13);
LABEL_28:
        uint64_t v14 = (void *)v4[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (void *)v4[2];
            BOOL v16 = *v15 == (void)v4;
            uint64_t v4 = v15;
          }
          while (!v16);
        }
        uint64_t v4 = v15;
      }
      while (v15 != (void *)(a1 + 144));
    }
  }
}

void sub_1008909B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(*v34);
  }
  _Unwind_Resume(exception_object);
}

void sub_100890A14(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 != *(unsigned __int8 *)(a1 + 185))
  {
    subscriber::makeSimSlotRange();
    unint64_t v3 = v5;
    if (v5 != v6)
    {
      while ((v7(*v3) & 1) == 0)
      {
        if (++v3 == v6)
        {
          unint64_t v3 = v6;
          break;
        }
      }
LABEL_6:
      while (v3 != v6)
      {
        uint64_t v4 = v3 + 1;
        sub_100891C70(a1, *v3);
        unint64_t v3 = v6;
        if (v4 != v6)
        {
          unint64_t v3 = v4;
          while ((v7(*v3) & 1) == 0)
          {
            if (++v3 == v6)
            {
              unint64_t v3 = v6;
              goto LABEL_6;
            }
          }
        }
      }
    }
  }
}

void sub_100890AE4(uint64_t a1, void *a2)
{
  if (a2[2] == *(void *)(a1 + 176))
  {
    uint64_t v4 = a2 + 1;
    uint64_t v5 = (void *)*a2;
    if ((void *)*a2 == a2 + 1) {
      return;
    }
    uint64_t v6 = *(void **)(a1 + 160);
    while (*((_DWORD *)v5 + 8) == *((_DWORD *)v6 + 8) && BasicSimInfo::operator==())
    {
      int v7 = (void *)v5[1];
      uint64_t v8 = v5;
      if (v7)
      {
        do
        {
          uint64_t v5 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v8[2];
          BOOL v9 = *v5 == (void)v8;
          uint64_t v8 = v5;
        }
        while (!v9);
      }
      BOOL v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          BOOL v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = (void *)v6[2];
          BOOL v9 = *v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v9);
      }
      uint64_t v6 = v11;
      if (v5 == v4) {
        return;
      }
    }
  }
  int v12 = *(void **)(a1 + 160);
  if (v12 != (void *)(a1 + 168))
  {
    uint64_t v13 = a2 + 1;
    while (1)
    {
      uint64_t v14 = *v13;
      if (!*v13) {
        break;
      }
      int v15 = *((_DWORD *)v12 + 8);
      BOOL v16 = v13;
      do
      {
        int v17 = *(_DWORD *)(v14 + 32);
        BOOL v18 = v17 < v15;
        if (v17 >= v15) {
          long long v19 = (uint64_t *)v14;
        }
        else {
          long long v19 = (uint64_t *)(v14 + 8);
        }
        if (!v18) {
          BOOL v16 = (void *)v14;
        }
        uint64_t v14 = *v19;
      }
      while (*v19);
      if (v16 == v13 || v15 < *((_DWORD *)v16 + 8)) {
        goto LABEL_42;
      }
      if (BasicSimInfo::operator==()) {
        goto LABEL_53;
      }
      int v20 = *((_DWORD *)v12 + 8);
      sub_10002E664((uint64_t)v24, (uint64_t)(v12 + 5));
      sub_100891C70(a1, v20);
      if (v35 < 0) {
        operator delete(__p);
      }
      if (v33 < 0) {
        operator delete(v32);
      }
      if (v31 < 0) {
        operator delete(v30);
      }
      if (v29 < 0) {
        operator delete(v28);
      }
      unint64_t v48 = (void **)&v27;
      sub_10002E39C(&v48);
      __int16 v21 = v25;
      if (!v25) {
        goto LABEL_53;
      }
      uint64_t v26 = v25;
LABEL_52:
      operator delete(v21);
LABEL_53:
      long long v22 = (void *)v12[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          long long v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (void *)v12[2];
          BOOL v9 = *v23 == (void)v12;
          int v12 = v23;
        }
        while (!v9);
      }
      int v12 = v23;
      if (v23 == (void *)(a1 + 168)) {
        return;
      }
    }
    int v15 = *((_DWORD *)v12 + 8);
LABEL_42:
    sub_10002E664((uint64_t)v36, (uint64_t)(v12 + 5));
    sub_100891C70(a1, v15);
    if (v47 < 0) {
      operator delete(v46);
    }
    if (v45 < 0) {
      operator delete(v44);
    }
    if (v43 < 0) {
      operator delete(v42);
    }
    if (v41 < 0) {
      operator delete(v40);
    }
    unint64_t v48 = (void **)&v39;
    sub_10002E39C(&v48);
    __int16 v21 = v37;
    if (!v37) {
      goto LABEL_53;
    }
    __int16 v38 = v37;
    goto LABEL_52;
  }
}

void sub_100890D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  *(void *)(v42 - 88) = &a15;
  sub_10002E39C((void ***)(v42 - 88));
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void sub_100890DFC(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 != *(unsigned __int8 *)(a1 + 184))
  {
    subscriber::makeSimSlotRange();
    unint64_t v3 = v5;
    if (v5 != v6)
    {
      while ((v7(*v3) & 1) == 0)
      {
        if (++v3 == v6)
        {
          unint64_t v3 = v6;
          break;
        }
      }
LABEL_6:
      while (v3 != v6)
      {
        uint64_t v4 = v3 + 1;
        sub_100891C70(a1, *v3);
        unint64_t v3 = v6;
        if (v4 != v6)
        {
          unint64_t v3 = v4;
          while ((v7(*v3) & 1) == 0)
          {
            if (++v3 == v6)
            {
              unint64_t v3 = v6;
              goto LABEL_6;
            }
          }
        }
      }
    }
  }
}

void sub_100890ECC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 192);
  unint64_t v3 = (void *)(a1 + 200);
  if (v2 != (void *)(a1 + 200))
  {
    uint64_t v5 = (void *)(a2 + 8);
    while (1)
    {
      uint64_t v6 = *v5;
      if (!*v5) {
        break;
      }
      int v7 = *((_DWORD *)v2 + 8);
      uint64_t v8 = v5;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < v7;
        if (v9 >= v7) {
          unint64_t v11 = (uint64_t *)v6;
        }
        else {
          unint64_t v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          uint64_t v8 = (void *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 == v5 || v7 < *((_DWORD *)v8 + 8)) {
        goto LABEL_28;
      }
      int v12 = (void **)(v2 + 5);
      uint64_t v13 = *((unsigned __int8 *)v8 + 63);
      size_t v14 = v8[6];
      if ((v13 & 0x80u) == 0) {
        uint64_t v15 = *((unsigned __int8 *)v8 + 63);
      }
      else {
        uint64_t v15 = v8[6];
      }
      uint64_t v16 = *((unsigned __int8 *)v2 + 63);
      int v17 = (char)v16;
      unint64_t v18 = v2[6];
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = v2[6];
      }
      if (v15 != v16) {
        goto LABEL_42;
      }
      long long v19 = (const void **)(v8 + 5);
      if (v17 >= 0) {
        int v20 = (unsigned __int8 *)(v2 + 5);
      }
      else {
        int v20 = (unsigned __int8 *)*v12;
      }
      if ((v13 & 0x80) != 0)
      {
        if (!memcmp(*v19, v20, v14)) {
          goto LABEL_34;
        }
LABEL_42:
        if (v17 < 0)
        {
          sub_10004FC84(&v25, *v12, v18);
        }
        else
        {
          long long v25 = *(_OWORD *)v12;
          uint64_t v26 = v2[7];
        }
        sub_100891C70(a1, v7);
        if ((SHIBYTE(v26) & 0x80000000) == 0) {
          goto LABEL_34;
        }
        p_dst = (void **)&v25;
LABEL_33:
        operator delete(*p_dst);
        goto LABEL_34;
      }
      if (v13)
      {
        while (*(unsigned __int8 *)v19 == *v20)
        {
          long long v19 = (const void **)((char *)v19 + 1);
          ++v20;
          if (!--v13) {
            goto LABEL_34;
          }
        }
        goto LABEL_42;
      }
LABEL_34:
      long long v22 = (void *)v2[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          long long v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (void *)v2[2];
          BOOL v24 = *v23 == (void)v2;
          uint64_t v2 = v23;
        }
        while (!v24);
      }
      uint64_t v2 = v23;
      if (v23 == v3) {
        return;
      }
    }
    int v7 = *((_DWORD *)v2 + 8);
LABEL_28:
    if (*((char *)v2 + 63) < 0)
    {
      sub_10004FC84(&__dst, (void *)v2[5], v2[6]);
    }
    else
    {
      long long __dst = *(_OWORD *)(v2 + 5);
      uint64_t v28 = v2[7];
    }
    sub_100891C70(a1, v7);
    if ((SHIBYTE(v28) & 0x80000000) == 0) {
      goto LABEL_34;
    }
    p_dst = (void **)&__dst;
    goto LABEL_33;
  }
}

void sub_1008910AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008910E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 272);
  unint64_t v3 = (void *)(a1 + 280);
  if (v2 != (void *)(a1 + 280))
  {
    uint64_t v5 = (void *)(a2 + 8);
    while (1)
    {
      uint64_t v6 = *v5;
      if (!*v5) {
        break;
      }
      int v7 = *((_DWORD *)v2 + 8);
      uint64_t v8 = v5;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < v7;
        if (v9 >= v7) {
          unint64_t v11 = (uint64_t *)v6;
        }
        else {
          unint64_t v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          uint64_t v8 = (void *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 == v5 || v7 < *((_DWORD *)v8 + 8)) {
        goto LABEL_21;
      }
      if (rest::operator==()) {
        goto LABEL_28;
      }
      int v12 = *((_DWORD *)v2 + 8);
      sub_100897414(v17, (long long *)(v2 + 5));
      sub_100891C70(a1, v12);
      if (v21 < 0) {
        operator delete(__p);
      }
      if (v19 < 0) {
        operator delete(v18);
      }
      if ((v17[23] & 0x80000000) == 0) {
        goto LABEL_28;
      }
      uint64_t v13 = v17;
LABEL_27:
      operator delete(*(void **)v13);
LABEL_28:
      size_t v14 = (void *)v2[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          size_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v2[2];
          BOOL v16 = *v15 == (void)v2;
          uint64_t v2 = v15;
        }
        while (!v16);
      }
      uint64_t v2 = v15;
      if (v15 == v3) {
        return;
      }
    }
    int v7 = *((_DWORD *)v2 + 8);
LABEL_21:
    sub_100897414(__dst, (long long *)(v2 + 5));
    sub_100891C70(a1, v7);
    if (v26 < 0) {
      operator delete(v25);
    }
    if (v24 < 0) {
      operator delete(v23);
    }
    if ((__dst[23] & 0x80000000) == 0) {
      goto LABEL_28;
    }
    uint64_t v13 = __dst;
    goto LABEL_27;
  }
}

void sub_100891254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (SHIBYTE(a18) < 0) {
    operator delete(a16);
  }
  if (SHIBYTE(a14) < 0) {
    operator delete(a12);
  }
  if (SHIBYTE(a11) < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008912A0(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 312) == a2[2])
  {
    unint64_t v3 = *(void **)(a1 + 296);
    uint64_t v4 = (void *)(a1 + 304);
    if (v3 == (void *)(a1 + 304)) {
      return;
    }
    uint64_t v5 = (void *)*a2;
    while (*((_DWORD *)v3 + 8) == *((_DWORD *)v5 + 8) && v3[7] == v5[7])
    {
      uint64_t v6 = (void *)v3[5];
      if (v6 != v3 + 6)
      {
        int v7 = (void *)v5[5];
        while (sub_1005C18C4((uint64_t)&v22, (uint64_t)(v6 + 4), (uint64_t)(v7 + 4)))
        {
          uint64_t v8 = (void *)v6[1];
          int v9 = v6;
          if (v8)
          {
            do
            {
              uint64_t v6 = v8;
              uint64_t v8 = (void *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              uint64_t v6 = (void *)v9[2];
              BOOL v10 = *v6 == (void)v9;
              int v9 = v6;
            }
            while (!v10);
          }
          unint64_t v11 = (void *)v7[1];
          if (v11)
          {
            do
            {
              int v12 = v11;
              unint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              int v12 = (void *)v7[2];
              BOOL v10 = *v12 == (void)v7;
              int v7 = v12;
            }
            while (!v10);
          }
          int v7 = v12;
          if (v6 == v3 + 6) {
            goto LABEL_20;
          }
        }
        break;
      }
LABEL_20:
      uint64_t v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          size_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          size_t v14 = (void *)v3[2];
          BOOL v10 = *v14 == (void)v3;
          unint64_t v3 = v14;
        }
        while (!v10);
      }
      uint64_t v15 = (void *)v5[1];
      if (v15)
      {
        do
        {
          BOOL v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          BOOL v16 = (void *)v5[2];
          BOOL v10 = *v16 == (void)v5;
          uint64_t v5 = v16;
        }
        while (!v10);
      }
      uint64_t v5 = v16;
      unint64_t v3 = v14;
      if (v14 == v4) {
        return;
      }
    }
  }
  subscriber::makeSimSlotRange();
  unint64_t v18 = v22;
  int v17 = v23;
  if (v22 != v23)
  {
    char v19 = v24;
    while ((v19(*v18) & 1) == 0)
    {
      if (++v18 == v17)
      {
        unint64_t v18 = v17;
        break;
      }
    }
    int v20 = v23;
LABEL_38:
    while (v18 != v20)
    {
      char v21 = v18 + 1;
      sub_100891C70(a1, *v18);
      unint64_t v18 = v17;
      if (v21 != v17)
      {
        unint64_t v18 = v21;
        while ((v19(*v18) & 1) == 0)
        {
          if (++v18 == v17)
          {
            unint64_t v18 = v17;
            goto LABEL_38;
          }
        }
      }
    }
  }
}

void sub_1008914A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 368);
  unint64_t v3 = (void *)(a1 + 376);
  if (v2 != (void *)(a1 + 376))
  {
    uint64_t v5 = (void *)(a2 + 8);
    do
    {
      uint64_t v6 = *v5;
      int v7 = *((_DWORD *)v2 + 7);
      if (!*v5) {
        goto LABEL_14;
      }
      uint64_t v8 = v5;
      do
      {
        int v9 = *(_DWORD *)(v6 + 28);
        BOOL v10 = v9 < v7;
        if (v9 >= v7) {
          unint64_t v11 = (uint64_t *)v6;
        }
        else {
          unint64_t v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          uint64_t v8 = (void *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 == v5 || v7 < *((_DWORD *)v8 + 7) || *((unsigned __int8 *)v8 + 32) != *((unsigned __int8 *)v2 + 32))
      {
LABEL_14:
        (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 96) + 96))(&cf);
        int v12 = (BOOL *)cf;
        unsigned __int8 v20 = 0;
        if (cf && (CFTypeID v13 = CFGetTypeID(cf), v13 == CFBooleanGetTypeID()))
        {
          ctu::cf::assign((ctu::cf *)&v20, v12, v14);
          int v15 = v20;
          sub_1000577C4(&cf);
          if (v15) {
            sub_100891C70(a1, v7);
          }
        }
        else
        {
          sub_1000577C4(&cf);
        }
      }
      BOOL v16 = (void *)v2[1];
      if (v16)
      {
        do
        {
          int v17 = v16;
          BOOL v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          int v17 = (void *)v2[2];
          BOOL v18 = *v17 == (void)v2;
          uint64_t v2 = v17;
        }
        while (!v18);
      }
      uint64_t v2 = v17;
    }
    while (v17 != v3);
  }
}

void sub_100891638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_10089164C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 320);
  unint64_t v3 = (void *)(a1 + 328);
  if (v2 != (void *)(a1 + 328))
  {
    uint64_t v5 = (void *)(a2 + 8);
    do
    {
      uint64_t v6 = *v5;
      int v7 = *((_DWORD *)v2 + 7);
      if (!*v5) {
        goto LABEL_14;
      }
      uint64_t v8 = v5;
      do
      {
        int v9 = *(_DWORD *)(v6 + 28);
        BOOL v10 = v9 < v7;
        if (v9 >= v7) {
          unint64_t v11 = (uint64_t *)v6;
        }
        else {
          unint64_t v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          uint64_t v8 = (void *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 == v5 || v7 < *((_DWORD *)v8 + 7) || *((unsigned __int8 *)v8 + 32) != *((unsigned __int8 *)v2 + 32)) {
LABEL_14:
      }
        sub_100891C70(a1, v7);
      int v12 = (void *)v2[1];
      if (v12)
      {
        do
        {
          CFTypeID v13 = v12;
          int v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          CFTypeID v13 = (void *)v2[2];
          BOOL v14 = *v13 == (void)v2;
          uint64_t v2 = v13;
        }
        while (!v14);
      }
      uint64_t v2 = v13;
    }
    while (v13 != v3);
  }
}

void sub_100891718(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 344);
  unint64_t v3 = (void *)(a1 + 352);
  if (v2 != (void *)(a1 + 352))
  {
    uint64_t v6 = (void **)(a2 + 8);
    do
    {
      int v7 = (long long *)(v2 + 4);
      if (v6 == sub_100046F68(a2, (void **)v2 + 4))
      {
        if (*((char *)v2 + 55) < 0)
        {
          sub_10004FC84(&__dst, (void *)v2[4], v2[5]);
        }
        else
        {
          long long __dst = *v7;
          uint64_t v33 = v2[6];
        }
        sub_10039CAC4((char *)&v24, (long long *)(v2 + 7));
        int v8 = SlotIdFromPersonalityId();
        sub_100891C70(a1, v8);
        if (v31 < 0) {
          operator delete(__p);
        }
        if (v29 < 0) {
          operator delete(v28);
        }
        if (v27 < 0) {
          operator delete(v26);
        }
        if (v25 < 0) {
          operator delete(v24);
        }
        if ((SHIBYTE(v33) & 0x80000000) == 0) {
          goto LABEL_32;
        }
        p_dst = (void **)&__dst;
      }
      else
      {
        if (operator==()) {
          goto LABEL_32;
        }
        if (*((char *)v2 + 55) < 0)
        {
          sub_10004FC84(&v22, (void *)v2[4], v2[5]);
        }
        else
        {
          long long v22 = *v7;
          uint64_t v23 = v2[6];
        }
        sub_10039CAC4((char *)&v14, (long long *)(v2 + 7));
        int v10 = SlotIdFromPersonalityId();
        sub_100891C70(a1, v10);
        if (v21 < 0) {
          operator delete(v20);
        }
        if (v19 < 0) {
          operator delete(v18);
        }
        if (v17 < 0) {
          operator delete(v16);
        }
        if (v15 < 0) {
          operator delete(v14);
        }
        if ((SHIBYTE(v23) & 0x80000000) == 0) {
          goto LABEL_32;
        }
        p_dst = (void **)&v22;
      }
      operator delete(*p_dst);
LABEL_32:
      unint64_t v11 = (void *)v2[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (void *)v2[2];
          BOOL v13 = *v12 == (void)v2;
          uint64_t v2 = v12;
        }
        while (!v13);
      }
      uint64_t v2 = v12;
    }
    while (v12 != v3);
  }
}

void sub_10089191C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a38 < 0) {
    operator delete(a33);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008919E0(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v12) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Handling first unlock change", (uint8_t *)&v12, 2u);
  }
  int v5 = *(unsigned __int8 *)(a1 + 128);
  if (v5 != a2 && v5 != 0)
  {
    subscriber::makeSimSlotRange();
    int v8 = v12;
    int v7 = v13;
    if (v12 != v13)
    {
      int v9 = v14;
      while ((v9(*v8) & 1) == 0)
      {
        if (++v8 == v7)
        {
          int v8 = v7;
          break;
        }
      }
      int v10 = v13;
LABEL_13:
      while (v8 != v10)
      {
        unint64_t v11 = v8 + 1;
        sub_100891C70(a1, *v8);
        int v8 = v7;
        if (v11 != v7)
        {
          int v8 = v11;
          while ((v9(*v8) & 1) == 0)
          {
            if (++v8 == v7)
            {
              int v8 = v7;
              goto LABEL_13;
            }
          }
        }
      }
    }
  }
}

void sub_100891AF0(uint64_t a1)
{
  subscriber::makeSimSlotRange();
  uint64_t v2 = v4;
  if (v4 != v5)
  {
    while ((v6(*v2) & 1) == 0)
    {
      if (++v2 == v5)
      {
        uint64_t v2 = v5;
        break;
      }
    }
LABEL_5:
    while (v2 != v5)
    {
      unint64_t v3 = v2 + 1;
      sub_100891C70(a1, *v2);
      uint64_t v2 = v5;
      if (v3 != v5)
      {
        uint64_t v2 = v3;
        while ((v6(*v2) & 1) == 0)
        {
          if (++v2 == v5)
          {
            uint64_t v2 = v5;
            goto LABEL_5;
          }
        }
      }
    }
  }
}

void sub_100891BB0(uint64_t a1)
{
  subscriber::makeSimSlotRange();
  uint64_t v2 = v4;
  if (v4 != v5)
  {
    while ((v6(*v2) & 1) == 0)
    {
      if (++v2 == v5)
      {
        uint64_t v2 = v5;
        break;
      }
    }
LABEL_5:
    while (v2 != v5)
    {
      unint64_t v3 = v2 + 1;
      sub_100891C70(a1, *v2);
      uint64_t v2 = v5;
      if (v3 != v5)
      {
        uint64_t v2 = v3;
        while ((v6(*v2) & 1) == 0)
        {
          if (++v2 == v5)
          {
            uint64_t v2 = v5;
            goto LABEL_5;
          }
        }
      }
    }
  }
}

void sub_100891C70(uint64_t a1, int a2)
{
  int v162 = a2;
  memset(v161, 0, sizeof(v161));
  long long v159 = 0u;
  *(_OWORD *)id v160 = 0u;
  *(_OWORD *)v157 = 0u;
  *(_OWORD *)char v158 = 0u;
  *(_OWORD *)id v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  *(_OWORD *)v154 = 0u;
  memset(v152, 0, sizeof(v152));
  BYTE12(v161[0]) = 1;
  *(_DWORD *)((char *)&v161[1] + 7) = 0;
  unint64_t v3 = (uint64_t **)(a1 + 256);
  uint64_t v4 = *(uint64_t **)(a1 + 256);
  if (v4)
  {
    int v5 = v3;
    uint64_t v6 = v4;
    do
    {
      int v7 = *((_DWORD *)v6 + 8);
      BOOL v8 = v7 < a2;
      if (v7 >= a2) {
        int v9 = (uint64_t **)v6;
      }
      else {
        int v9 = (uint64_t **)(v6 + 1);
      }
      if (!v8) {
        int v5 = (uint64_t **)v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v3 && *((_DWORD *)v5 + 8) <= a2)
    {
      int v10 = sub_1000389F8(v4, a2);
      std::string::operator=((std::string *)v152, (const std::string *)v10);
      std::string::operator=((std::string *)&v152[24], (const std::string *)v10 + 1);
      std::string::operator=((std::string *)v154, (const std::string *)v10 + 2);
      std::string::operator=((std::string *)&v155[1], (const std::string *)v10 + 3);
      std::string::operator=((std::string *)v157, (const std::string *)v10 + 4);
      std::string::operator=((std::string *)&v158[1], (const std::string *)v10 + 5);
      std::string::operator=((std::string *)v160, (const std::string *)v10 + 6);
      long long v11 = *(_OWORD *)(v10 + 21);
      *(_DWORD *)((char *)&v161[1] + 7) = *(_DWORD *)((char *)v10 + 183);
      *(_OWORD *)((char *)v161 + 8) = v11;
    }
  }
  BYTE8(v161[1]) = *(unsigned char *)(a1 + 128);
  int v12 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  uint64_t v13 = *(void *)(a1 + 200);
  if (!v13) {
    goto LABEL_22;
  }
  uint64_t v14 = a1 + 200;
  do
  {
    int v15 = *(_DWORD *)(v13 + 32);
    BOOL v16 = v15 < v162;
    if (v15 >= v162) {
      char v17 = (uint64_t *)v13;
    }
    else {
      char v17 = (uint64_t *)(v13 + 8);
    }
    if (!v16) {
      uint64_t v14 = v13;
    }
    uint64_t v13 = *v17;
  }
  while (*v17);
  if (v14 != a1 + 200 && v162 >= *(_DWORD *)(v14 + 32))
  {
    std::string::operator=((std::string *)&v152[24], (const std::string *)(v14 + 40));
  }
  else
  {
LABEL_22:
    if (SHIBYTE(v153) < 0)
    {
      **(unsigned char **)&v152[24] = 0;
      *(void *)&long long v153 = 0;
    }
    else
    {
      v152[24] = 0;
      HIBYTE(v153) = 0;
    }
  }
  v150[0] = 0;
  v150[1] = 0;
  uint64_t v151 = 0;
  BOOL v18 = (Registry **)(a1 + 80);
  PersonalityIdFromSlotId();
  char v19 = sub_100046F68(a1 + 344, v150);
  if ((void **)(a1 + 352) != v19)
  {
    char v20 = *((unsigned char *)v19 + 103);
    if (v20 < 0)
    {
      if (!v19[11]) {
        goto LABEL_54;
      }
    }
    else if (!*((unsigned char *)v19 + 103))
    {
      goto LABEL_54;
    }
    char v21 = (const std::string *)(v19 + 10);
    if (v20 >= 0) {
      long long v22 = (void *)*((unsigned __int8 *)v19 + 103);
    }
    else {
      long long v22 = v19[11];
    }
    uint64_t v23 = (void *)v152[23];
    int v24 = v152[23];
    if (v152[23] < 0) {
      uint64_t v23 = *(void **)&v152[8];
    }
    if (v22 == v23)
    {
      if (v152[23] >= 0) {
        char v25 = v152;
      }
      else {
        char v25 = *(unsigned __int8 **)v152;
      }
      if ((*((unsigned char *)v19 + 103) & 0x80) != 0)
      {
        if (!memcmp(v21->__r_.__value_.__l.__data_, v25, (size_t)v19[11])) {
          goto LABEL_54;
        }
      }
      else
      {
        if (!*((unsigned char *)v19 + 103)) {
          goto LABEL_54;
        }
        char v26 = (unsigned __int8 *)(v19 + 10);
        uint64_t v27 = *((unsigned __int8 *)v19 + 103);
        while (*v26 == *v25)
        {
          ++v26;
          ++v25;
          if (!--v27) {
            goto LABEL_54;
          }
        }
      }
    }
    uint64_t v28 = *v12;
    if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      char v29 = v152;
      if (v24 < 0) {
        char v29 = *(unsigned char **)v152;
      }
      unint64_t v30 = v21;
      if (v20 < 0) {
        unint64_t v30 = (const std::string *)v21->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 141558787;
      *(void *)&uint8_t buf[4] = 1752392040;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&buf[14] = v29;
      *(_WORD *)&unsigned char buf[22] = 2160;
      *(void *)&unsigned char buf[24] = 1752392040;
      LOWORD(v166) = 2081;
      *(void *)((char *)&v166 + 2) = v30;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I IMSI changed %{private, mask.hash}s ==> %{private, mask.hash}s", buf, 0x2Au);
    }
    std::string::operator=((std::string *)v152, v21);
  }
LABEL_54:
  uint64_t v31 = *(void *)(a1 + 168);
  uint64_t v32 = v162;
  if (v31)
  {
    uint64_t v33 = a1 + 168;
    do
    {
      int v34 = *(_DWORD *)(v31 + 32);
      BOOL v35 = v34 < v162;
      if (v34 >= v162) {
        id v36 = (uint64_t *)v31;
      }
      else {
        id v36 = (uint64_t *)(v31 + 8);
      }
      if (!v35) {
        uint64_t v33 = v31;
      }
      uint64_t v31 = *v36;
    }
    while (*v36);
    if (v33 != a1 + 168 && v162 >= *(_DWORD *)(v33 + 32))
    {
      *(void *)&v174[0] = 0;
      long long v172 = 0u;
      *(_OWORD *)long long __p = 0u;
      *(_OWORD *)v170 = 0u;
      *(_OWORD *)id v171 = 0u;
      *(_OWORD *)v168 = 0u;
      long long v169 = 0u;
      long long v166 = 0u;
      *(_OWORD *)id v167 = 0u;
      memset(buf, 0, sizeof(buf));
      sub_10002E664((uint64_t)buf, v33 + 40);
      uint64_t v37 = HIBYTE(v172);
      if (v172 < 0) {
        uint64_t v37 = v172;
      }
      if (v37) {
        std::string::operator=((std::string *)&v158[1], (const std::string *)&v171[1]);
      }
      __int16 v38 = (void *)BYTE7(v174[0]);
      char v39 = BYTE7(v174[0]);
      if (SBYTE7(v174[0]) < 0) {
        __int16 v38 = __p[1];
      }
      if (v38)
      {
        std::string::operator=((std::string *)v160, (const std::string *)__p);
        char v39 = BYTE7(v174[0]);
      }
      if (v39 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v172) < 0) {
        operator delete(v171[1]);
      }
      if (SHIBYTE(v171[0]) < 0) {
        operator delete(v170[0]);
      }
      if (SHIBYTE(v169) < 0) {
        operator delete(v168[1]);
      }
      v131[0] = (char *)&v166 + 8;
      sub_10002E39C((void ***)v131);
      if (*(void *)&buf[16])
      {
        *(void *)&unsigned char buf[24] = *(void *)&buf[16];
        operator delete(*(void **)&buf[16]);
      }
      uint64_t v32 = v162;
    }
  }
  memset(__str, 0, sizeof(__str));
  sub_100893C64((std::string *)__str, a1, v32, (uint64_t)v152);
  if (__str[24])
  {
    std::string::operator=((std::string *)v154, (const std::string *)__str);
  }
  else
  {
    uint64_t v40 = (uint64_t *)SHIBYTE(v155[0]);
    if ((v40 & 0x80000000) != 0)
    {
      uint64_t v40 = (uint64_t *)v154[0];
      *(unsigned char *)v154[0] = 0;
      v154[1] = 0;
    }
    else
    {
      LOBYTE(v154[0]) = 0;
      HIBYTE(v155[0]) = 0;
    }
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v40, *v18);
  uint64_t v42 = ServiceMap;
  if (v43 < 0)
  {
    __int16 v44 = (unsigned __int8 *)(v43 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v45 = 5381;
    do
    {
      uint64_t v43 = v45;
      unsigned int v46 = *v44++;
      uint64_t v45 = (33 * v45) ^ v46;
    }
    while (v46);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v43;
  char v47 = sub_10004D37C(&v42[1].__m_.__sig, (unint64_t *)buf);
  if (!v47)
  {
    uint64_t v49 = 0;
LABEL_96:
    std::mutex::unlock(v42);
    unint64_t v48 = 0;
    char v51 = 1;
    if (!v49) {
      goto LABEL_98;
    }
    goto LABEL_97;
  }
  uint64_t v49 = v47[3];
  unint64_t v48 = (std::__shared_weak_count *)v47[4];
  if (!v48) {
    goto LABEL_96;
  }
  atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v42);
  atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v48);
  char v51 = 0;
  if (v49)
  {
LABEL_97:
    int v52 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 80))(v49);
    unint64_t v50 = (uint64_t *)(v52 ^ 1u);
    BYTE9(v161[1]) = v52 ^ 1;
  }
LABEL_98:
  if ((v51 & 1) == 0) {
    sub_10004D2C8(v48);
  }
  uint64_t v53 = (std::mutex *)Registry::getServiceMap(v50, *v18);
  uint64_t v54 = v53;
  uint64_t v55 = "24MobileStoreDemoInterface";
  if (((unint64_t)"24MobileStoreDemoInterface" & 0x8000000000000000) != 0)
  {
    id v56 = (unsigned __int8 *)((unint64_t)"24MobileStoreDemoInterface" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v57 = 5381;
    do
    {
      uint64_t v55 = (const char *)v57;
      unsigned int v58 = *v56++;
      uint64_t v57 = (33 * v57) ^ v58;
    }
    while (v58);
  }
  std::mutex::lock(v53);
  *(void *)long long buf = v55;
  int v59 = sub_10004D37C(&v54[1].__m_.__sig, (unint64_t *)buf);
  if (!v59)
  {
    uint64_t v61 = 0;
LABEL_108:
    std::mutex::unlock(v54);
    char v60 = 0;
    char v62 = 1;
    if (!v61) {
      goto LABEL_110;
    }
    goto LABEL_109;
  }
  uint64_t v61 = v59[3];
  char v60 = (std::__shared_weak_count *)v59[4];
  if (!v60) {
    goto LABEL_108;
  }
  atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v54);
  atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v60);
  char v62 = 0;
  if (v61) {
LABEL_109:
  }
    BYTE10(v161[1]) = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 16))(v61);
LABEL_110:
  if ((v62 & 1) == 0) {
    sub_10004D2C8(v60);
  }
  WORD4(v161[0]) = (*(uint64_t (**)(void, void))(**(void **)(a1 + 112) + 16))(*(void *)(a1 + 112), v162);
  BYTE11(v161[0]) = (*(uint64_t (**)(void, void))(**(void **)(a1 + 112) + 40))(*(void *)(a1 + 112), v162);
  uint64_t v63 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v162);
  if (*(void *)(a1 + 96))
  {
    BOOL v64 = sub_100562B1C(a1 + 96);
    uint64_t v65 = *v63;
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v64;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#I Carrier-based service evaluated to: %{BOOL}d", buf, 8u);
    }
  }
  else
  {
    uint64_t v66 = *v63;
    if (os_log_type_enabled(*v63, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "[...] Invalid Carrier interface", buf, 2u);
    }
    LOBYTE(v64) = 1;
  }
  BYTE12(v161[0]) = v64;
  BYTE13(v161[0]) = (*(uint64_t (**)(void, void))(**(void **)(a1 + 112) + 48))(*(void *)(a1 + 112), v162);
  int v67 = v162;
  *(void *)&v161[1] = 0;
  int v68 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v162);
  id v69 = objc_alloc_init((Class)CWFInterface);
  [v69 activate];
  unint64_t v70 = [v69 currentKnownNetworkProfile];
  char v71 = v70;
  if (v70)
  {
    unsigned int v72 = [v70 isCaptiveStateDetermined];
    long long v73 = *v68;
    if (os_log_type_enabled(*v68, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v74 = "false";
      if (v72) {
        uint64_t v74 = "true";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v74;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#I Network profile is captive state determined: %s", buf, 0xCu);
    }
    if (v72)
    {
      unsigned int v72 = [v71 isCaptive];
      uint64_t v75 = *v68;
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v76 = "false";
        if (v72) {
          uint64_t v76 = "true";
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v76;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#I Network profile is captive: %s", buf, 0xCu);
      }
    }
  }
  else
  {
    long long v77 = *v68;
    unsigned int v72 = 0;
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "#I Couldn't obtain network profile", buf, 2u);
      unsigned int v72 = 0;
    }
  }
  [v69 invalidate];

  if (*(unsigned char *)(a1 + 185) == 1)
  {
    BOOL v78 = sub_1008933BC(a1 + 296, v67);
    int v79 = *(unsigned __int8 *)(a1 + 184);
    if (v79 == 1) {
      int v80 = v72 ^ 1;
    }
    else {
      int v80 = 0;
    }
    if ((v78 & v80) != 0) {
      int v81 = 4;
    }
    else {
      int v81 = 1;
    }
    if (!v78) {
      int v81 = 3;
    }
    if (v78 || (v80 & 1) != 0) {
      goto LABEL_146;
    }
    if (v67 == 1) {
      int v82 = 2;
    }
    else {
      int v82 = 1;
    }
    if (sub_1008933BC(a1 + 296, v82))
    {
      int v81 = 2;
LABEL_146:
      LODWORD(v161[1]) = v81;
    }
  }
  else
  {
    int v79 = *(unsigned __int8 *)(a1 + 184);
  }
  if (v79 == 2)
  {
    int v83 = 1;
    goto LABEL_152;
  }
  if (v79 == 1)
  {
    int v83 = 3;
LABEL_152:
    DWORD1(v161[1]) = v83;
  }
  uint64_t v84 = *(void *)(a1 + 328);
  if (!v84) {
    goto LABEL_163;
  }
  uint64_t v85 = a1 + 328;
  do
  {
    int v86 = *(_DWORD *)(v84 + 28);
    BOOL v87 = v86 < v162;
    if (v86 >= v162) {
      id v88 = (uint64_t *)v84;
    }
    else {
      id v88 = (uint64_t *)(v84 + 8);
    }
    if (!v87) {
      uint64_t v85 = v84;
    }
    uint64_t v84 = *v88;
  }
  while (*v88);
  if (v85 != a1 + 328 && v162 >= *(_DWORD *)(v85 + 28)) {
    char v89 = *(unsigned char *)(v85 + 32);
  }
  else {
LABEL_163:
  }
    char v89 = 0;
  BYTE10(v161[0]) = v89;
  uint64_t v90 = *(void *)(a1 + 280);
  if (!v90) {
    goto LABEL_174;
  }
  uint64_t v91 = a1 + 280;
  do
  {
    int v92 = *(_DWORD *)(v90 + 32);
    BOOL v93 = v92 < v162;
    if (v92 >= v162) {
      long long v94 = (uint64_t *)v90;
    }
    else {
      long long v94 = (uint64_t *)(v90 + 8);
    }
    if (!v93) {
      uint64_t v91 = v90;
    }
    uint64_t v90 = *v94;
  }
  while (*v94);
  if (v91 != a1 + 280 && v162 >= *(_DWORD *)(v91 + 32))
  {
    if (BYTE12(v161[0]))
    {
      if (*(char *)(v91 + 63) < 0) {
        uint64_t v95 = *(void *)(v91 + 48);
      }
      else {
        uint64_t v95 = *(unsigned __int8 *)(v91 + 63);
      }
      if (v95) {
        id v96 = (const std::string *)(v91 + 40);
      }
      else {
        id v96 = (const std::string *)(v91 + 96);
      }
    }
    else
    {
      id v96 = (const std::string *)(v91 + 96);
    }
    std::string::operator=((std::string *)&v155[1], v96);
    id v97 = (char *)asString();
    sub_10003ED78((std::string *)v157, v97);
  }
  else
  {
LABEL_174:
    if (SHIBYTE(v156) < 0)
    {
      *(unsigned char *)v155[1] = 0;
      *(void *)&long long v156 = 0;
    }
    else
    {
      LOBYTE(v155[1]) = 0;
      HIBYTE(v156) = 0;
    }
    if (SHIBYTE(v158[0]) < 0)
    {
      *(unsigned char *)v157[0] = 0;
      v157[1] = 0;
    }
    else
    {
      LOBYTE(v157[0]) = 0;
      HIBYTE(v158[0]) = 0;
    }
  }
  LODWORD(v176) = v162;
  char v98 = (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 40))(*(void *)(a1 + 112));
  *(void *)long long buf = 1;
  *(_OWORD *)&uint8_t buf[16] = 0u;
  *(void *)&long long v166 = 0;
  *(void *)&uint8_t buf[8] = a1 + 392;
  id v99 = sub_10005DF14((uint64_t *)&buf[16], a1 + 424);
  v131[0] = &v176;
  *((unsigned char *)sub_10005CE78((uint64_t **)v99, (int *)&v176, (uint64_t)&unk_10144E20E, (_DWORD **)v131) + 32) = v98;
  sub_10089750C((uint64_t)buf);
  uint64_t v175 = 0;
  memset(v174, 0, sizeof(v174));
  long long v172 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)v170 = 0u;
  *(_OWORD *)id v171 = 0u;
  *(_OWORD *)v168 = 0u;
  long long v169 = 0u;
  long long v166 = 0u;
  *(_OWORD *)id v167 = 0u;
  memset(buf, 0, sizeof(buf));
  if (*v3)
  {
    id v100 = v3;
    id v101 = *v3;
    do
    {
      int v102 = *((_DWORD *)v101 + 8);
      BOOL v103 = v102 < v162;
      if (v102 >= v162) {
        int v104 = v101;
      }
      else {
        int v104 = v101 + 1;
      }
      if (!v103) {
        id v100 = (uint64_t **)v101;
      }
      id v101 = (uint64_t *)*v104;
    }
    while (*v104);
    if (v100 != v3 && v162 >= *((_DWORD *)v100 + 8))
    {
      unsigned int v105 = sub_1000389F8(*v3, v162);
      if ((_BYTE)v175)
      {
        std::string::operator=((std::string *)buf, (const std::string *)v105);
        std::string::operator=((std::string *)&buf[24], (const std::string *)v105 + 1);
        std::string::operator=((std::string *)v167, (const std::string *)v105 + 2);
        std::string::operator=((std::string *)&v168[1], (const std::string *)v105 + 3);
        std::string::operator=((std::string *)v170, (const std::string *)v105 + 4);
        std::string::operator=((std::string *)&v171[1], (const std::string *)v105 + 5);
        std::string::operator=((std::string *)__p, (const std::string *)v105 + 6);
        long long v106 = *(_OWORD *)(v105 + 21);
        *(_DWORD *)((char *)&v174[1] + 7) = *(_DWORD *)((char *)v105 + 183);
        *(_OWORD *)((char *)v174 + 8) = v106;
      }
      else
      {
        sub_1001FE050(buf, (long long *)v105);
        LOBYTE(v175) = 1;
      }
    }
  }
  id v107 = *v12;
  if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
  {
    LOBYTE(__dst[0]) = 0;
    char v148 = 0;
    if ((_BYTE)v175)
    {
      sub_1001FE050((char *)__dst, (long long *)buf);
      char v148 = 1;
    }
    sub_1007ABF84(v152, (unsigned __int8 *)__dst, v131);
    if ((SBYTE7(v132) & 0x80u) == 0) {
      uint64_t v108 = v131;
    }
    else {
      uint64_t v108 = (void **)v131[0];
    }
    LODWORD(v176) = 136446210;
    *(void *)((char *)&v176 + 4) = v108;
    _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "#I DataCache ==> %{public}s", (uint8_t *)&v176, 0xCu);
    if (SBYTE7(v132) < 0) {
      operator delete(v131[0]);
    }
    if (v148)
    {
      if (v147 < 0) {
        operator delete(v146);
      }
      if (v145 < 0) {
        operator delete(v144);
      }
      if (v143 < 0) {
        operator delete(v142);
      }
      if (v141 < 0) {
        operator delete(v140);
      }
      if (v139 < 0) {
        operator delete(v138);
      }
      if (v137 < 0) {
        operator delete(v136);
      }
      if (v135 < 0) {
        operator delete(__dst[0]);
      }
    }
  }
  v131[0] = (void *)1;
  long long v132 = 0u;
  uint64_t v133 = 0;
  v131[1] = (void *)(a1 + 216);
  id v109 = sub_1001FDE4C((uint64_t *)&v132, a1 + 248);
  uint64_t v110 = *((void *)&v132 + 1);
  v111 = (uint64_t *)&v132 + 1;
  if (!*((void *)&v132 + 1)) {
    goto LABEL_237;
  }
  int v112 = v162;
  long long v113 = (uint64_t *)&v132 + 1;
  do
  {
    uint64_t v114 = v110;
    long long v115 = v113;
    int v116 = *(_DWORD *)(v110 + 32);
    if (v116 >= v162) {
      long long v113 = (uint64_t *)v110;
    }
    else {
      v110 += 8;
    }
    uint64_t v110 = *(void *)v110;
  }
  while (v110);
  v111 = (uint64_t *)&v132 + 1;
  if (v113 != (uint64_t *)((char *)&v132 + 8)
    && (v116 >= v162 ? (long long v117 = (uint64_t *)v114) : (long long v117 = v115), v111 = v113, v162 >= *((_DWORD *)v117 + 8)))
  {
    if (v116 >= v162) {
      long long v123 = (std::string *)(v114 + 40);
    }
    else {
      long long v123 = (std::string *)(v115 + 5);
    }
    std::string::operator=(v123, (const std::string *)v152);
    if (v116 >= v112) {
      long long v124 = (std::string *)(v114 + 64);
    }
    else {
      long long v124 = (std::string *)(v115 + 8);
    }
    std::string::operator=(v124, (const std::string *)&v152[24]);
    if (v116 >= v112) {
      id v125 = (std::string *)(v114 + 88);
    }
    else {
      id v125 = (std::string *)(v115 + 11);
    }
    std::string::operator=(v125, (const std::string *)v154);
    if (v116 >= v112) {
      long long v126 = (std::string *)(v114 + 112);
    }
    else {
      long long v126 = (std::string *)(v115 + 14);
    }
    std::string::operator=(v126, (const std::string *)&v155[1]);
    if (v116 >= v112) {
      id v127 = (std::string *)(v114 + 136);
    }
    else {
      id v127 = (std::string *)(v115 + 17);
    }
    std::string::operator=(v127, (const std::string *)v157);
    if (v116 >= v112) {
      long long v128 = (std::string *)(v114 + 160);
    }
    else {
      long long v128 = (std::string *)(v115 + 20);
    }
    std::string::operator=(v128, (const std::string *)&v158[1]);
    if (v116 >= v112) {
      long long v129 = (std::string *)(v114 + 184);
    }
    else {
      long long v129 = (std::string *)(v115 + 23);
    }
    std::string::operator=(v129, (const std::string *)v160);
    std::string v130 = v115 + 26;
    if (v116 >= v112) {
      std::string v130 = (uint64_t *)(v114 + 208);
    }
    *(_OWORD *)std::string v130 = *(_OWORD *)((char *)v161 + 8);
    *(_DWORD *)((char *)v130 + 15) = *(_DWORD *)((char *)&v161[1] + 7);
  }
  else
  {
LABEL_237:
    __int16 v164 = 0;
    uint64_t v163 = 0;
    id v118 = sub_1000262C0(v109, v111, &v164, &v163, &v162);
    if (!*v118)
    {
      int v119 = v162;
      uint64_t v177 = 0;
      long long v120 = operator new(0xE8uLL);
      *(void *)&long long v176 = v120;
      *((void *)&v176 + 1) = (char *)&v132 + 8;
      *((_DWORD *)v120 + 8) = v119;
      sub_1001FE050((char *)v120 + 40, (long long *)v152);
      LOBYTE(v177) = 1;
      long long v121 = v164;
      long long v122 = (uint64_t *)v176;
      *(void *)long long v176 = 0;
      v122[1] = 0;
      v122[2] = (uint64_t)v121;
      *id v118 = (uint64_t)v122;
      if (*(void *)v132)
      {
        *(void *)&long long v132 = *(void *)v132;
        long long v122 = (uint64_t *)*v118;
      }
      sub_100046C90(*((uint64_t **)&v132 + 1), v122);
      ++v133;
      *(void *)&long long v176 = 0;
      sub_1001FE278((uint64_t)&v176, 0);
    }
  }
  sub_1008973CC((uint64_t)v131);
  if ((_BYTE)v175)
  {
    if (SBYTE7(v174[0]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v172) < 0) {
      operator delete(v171[1]);
    }
    if (SHIBYTE(v171[0]) < 0) {
      operator delete(v170[0]);
    }
    if (SHIBYTE(v169) < 0) {
      operator delete(v168[1]);
    }
    if (SHIBYTE(v168[0]) < 0) {
      operator delete(v167[0]);
    }
    if (SHIBYTE(v166) < 0) {
      operator delete(*(void **)&buf[24]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (__str[24] && (__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  if (SHIBYTE(v151) < 0) {
    operator delete(v150[0]);
  }
  if (SBYTE7(v161[0]) < 0) {
    operator delete(v160[0]);
  }
  if (SHIBYTE(v159) < 0) {
    operator delete(v158[1]);
  }
  if (SHIBYTE(v158[0]) < 0) {
    operator delete(v157[0]);
  }
  if (SHIBYTE(v156) < 0) {
    operator delete(v155[1]);
  }
  if (SHIBYTE(v155[0]) < 0) {
    operator delete(v154[0]);
  }
  if (SHIBYTE(v153) < 0) {
    operator delete(*(void **)&v152[24]);
  }
  if ((v152[23] & 0x80000000) != 0) {
    operator delete(*(void **)v152);
  }
}

void sub_100892DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  sub_1001F7180((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_100892F20(void *a1, int a2)
{
  int v30 = a2;
  uint64_t v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v26) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Shutting down", (uint8_t *)&v26, 2u);
  }
  if (a2 == 3)
  {
    GetDefaultLazuliProvisioningInitializerMap(&v26);
    sub_100893234((uint64_t)(a1 + 27), &v26);
    sub_1001F7124((uint64_t)&v26, v27);
    ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 8));
  }
  else
  {
    uint64_t v26 = 1;
    long long v28 = 0u;
    uint64_t v29 = 0;
    uint64_t v27 = a1 + 27;
    sub_1001FDE4C((uint64_t *)&v28, (uint64_t)(a1 + 31));
    DefaultLazuliProvisioningInitializer = GetDefaultLazuliProvisioningInitializer();
    uint64_t v6 = (uint64_t *)&v28 + 1;
    uint64_t v7 = *((void *)&v28 + 1);
    if (!*((void *)&v28 + 1)) {
      goto LABEL_16;
    }
    BOOL v8 = (uint64_t *)&v28 + 1;
    do
    {
      uint64_t v9 = v7;
      int v10 = v8;
      int v11 = *(_DWORD *)(v7 + 32);
      if (v11 >= a2) {
        BOOL v8 = (uint64_t *)v7;
      }
      else {
        v7 += 8;
      }
      uint64_t v7 = *(void *)v7;
    }
    while (v7);
    if (v8 != (uint64_t *)((char *)&v28 + 8)
      && (v11 >= a2 ? (v12 = (uint64_t *)v9) : (v12 = v10), uint64_t v6 = v8, *((_DWORD *)v12 + 8) <= a2))
    {
      if (v11 >= a2) {
        BOOL v16 = (std::string *)(v9 + 40);
      }
      else {
        BOOL v16 = (std::string *)(v10 + 5);
      }
      std::string::operator=(v16, (const std::string *)DefaultLazuliProvisioningInitializer);
      if (v11 >= a2) {
        char v17 = (std::string *)(v9 + 64);
      }
      else {
        char v17 = (std::string *)(v10 + 8);
      }
      std::string::operator=(v17, (const std::string *)DefaultLazuliProvisioningInitializer + 1);
      if (v11 >= a2) {
        BOOL v18 = (std::string *)(v9 + 88);
      }
      else {
        BOOL v18 = (std::string *)(v10 + 11);
      }
      std::string::operator=(v18, (const std::string *)DefaultLazuliProvisioningInitializer + 2);
      if (v11 >= a2) {
        char v19 = (std::string *)(v9 + 112);
      }
      else {
        char v19 = (std::string *)(v10 + 14);
      }
      std::string::operator=(v19, (const std::string *)DefaultLazuliProvisioningInitializer + 3);
      if (v11 >= a2) {
        char v20 = (std::string *)(v9 + 136);
      }
      else {
        char v20 = (std::string *)(v10 + 17);
      }
      std::string::operator=(v20, (const std::string *)DefaultLazuliProvisioningInitializer + 4);
      if (v11 >= a2) {
        char v21 = (std::string *)(v9 + 160);
      }
      else {
        char v21 = (std::string *)(v10 + 20);
      }
      std::string::operator=(v21, (const std::string *)DefaultLazuliProvisioningInitializer + 5);
      if (v11 >= a2) {
        long long v22 = (std::string *)(v9 + 184);
      }
      else {
        long long v22 = (std::string *)(v10 + 23);
      }
      std::string::operator=(v22, (const std::string *)DefaultLazuliProvisioningInitializer + 6);
      uint64_t v23 = v10 + 26;
      long long v24 = *(_OWORD *)(DefaultLazuliProvisioningInitializer + 21);
      if (v11 >= a2) {
        uint64_t v23 = (uint64_t *)(v9 + 208);
      }
      *(_DWORD *)((char *)v23 + 15) = *(_DWORD *)((char *)DefaultLazuliProvisioningInitializer + 183);
      *(_OWORD *)uint64_t v23 = v24;
    }
    else
    {
LABEL_16:
      uint64_t v33 = 0;
      uint64_t v32 = 0;
      uint64_t v13 = sub_1000262C0(&v28, v6, &v33, &v32, &v30);
      if (!*v13)
      {
        memset(v31, 0, sizeof(v31));
        sub_10021D170((uint64_t)&v28, &v30, (long long *)DefaultLazuliProvisioningInitializer, v31);
        uint64_t v14 = v33;
        int v15 = (uint64_t *)v31[0];
        *(void *)v31[0] = 0;
        v15[1] = 0;
        v15[2] = (uint64_t)v14;
        uint64_t *v13 = (uint64_t)v15;
        if (*(void *)v28)
        {
          *(void *)&long long v28 = *(void *)v28;
          int v15 = (uint64_t *)*v13;
        }
        sub_100046C90(*((uint64_t **)&v28 + 1), v15);
        ++v29;
        v31[0] = 0;
        sub_1001FE278((uint64_t)v31, 0);
      }
    }
    sub_1008973CC((uint64_t)&v26);
  }
  char v25 = a1[5];
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v26) = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I Shut down complete", (uint8_t *)&v26, 2u);
  }
}

void sub_10089320C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t sub_100893234(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  if (*(void *)(result + 48) == a2[2])
  {
    uint64_t v4 = *(unsigned __int8 **)(result + 32);
    uint64_t v5 = result + 40;
    if (v4 == (unsigned __int8 *)(result + 40)) {
      return result;
    }
    uint64_t v6 = (unsigned __int8 *)*a2;
    while (*((_DWORD *)v4 + 8) == *((_DWORD *)v6 + 8))
    {
      float result = sub_1007ABCE8(v4 + 40, v6 + 40);
      if (!result) {
        break;
      }
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
      BOOL v8 = v4;
      if (v7)
      {
        do
        {
          uint64_t v4 = v7;
          uint64_t v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v4 = (unsigned __int8 *)*((void *)v8 + 2);
          BOOL v9 = *(void *)v4 == (void)v8;
          BOOL v8 = v4;
        }
        while (!v9);
      }
      int v10 = (unsigned __int8 *)*((void *)v6 + 1);
      if (v10)
      {
        do
        {
          int v11 = v10;
          int v10 = *(unsigned __int8 **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v11 = (unsigned __int8 *)*((void *)v6 + 2);
          BOOL v9 = *(void *)v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v9);
      }
      uint64_t v6 = v11;
      if (v4 == (unsigned __int8 *)v5) {
        return result;
      }
    }
  }
  uint64_t v12 = v3 + 40;
  sub_1001F7124(v3 + 32, *(void **)(v3 + 40));
  *(void *)(v3 + 32) = *a2;
  uint64_t v13 = a2 + 1;
  uint64_t v14 = a2[1];
  *(void *)(v3 + 40) = v14;
  uint64_t v15 = a2[2];
  *(void *)(v3 + 48) = v15;
  if (v15)
  {
    *(void *)(v14 + 16) = v12;
    *a2 = v13;
    void *v13 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)(v3 + 32) = v12;
  }
  float result = *(void *)(v3 + 24);
  if (result)
  {
    BOOL v16 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v16();
  }
  return result;
}

BOOL sub_1008933BC(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v2;
  do
  {
    int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      BOOL v8 = (uint64_t *)v3;
    }
    else {
      BOOL v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2) {
    return 0;
  }
  if (*(_DWORD *)(v5 + 32) > a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(v5 + 48);
  uint64_t v9 = v5 + 48;
  uint64_t v10 = v11;
  if (!v11) {
    return 0;
  }
  uint64_t v12 = v9;
  do
  {
    int v13 = *(_DWORD *)(v10 + 32);
    BOOL v14 = v13 < 0;
    if (v13 >= 0) {
      uint64_t v15 = (uint64_t *)v10;
    }
    else {
      uint64_t v15 = (uint64_t *)(v10 + 8);
    }
    if (!v14) {
      uint64_t v12 = v10;
    }
    uint64_t v10 = *v15;
  }
  while (*v15);
  return v12 != v9 && *(int *)(v12 + 32) <= 0 && *(_DWORD *)(v12 + 44) == 2;
}

void sub_10089344C(uint64_t a1, int a2, char *a3)
{
  int v6 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  ServiceMap = (std::mutex *)Registry::getServiceMap(v7, *(Registry **)(a1 + 80));
  uint64_t v9 = ServiceMap;
  if (v10 < 0)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      uint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v10;
  BOOL v14 = sub_10004D37C(&v9[1].__m_.__sig, (unint64_t *)buf);
  if (!v14)
  {
    uint64_t v16 = 0;
LABEL_10:
    std::mutex::unlock(v9);
    uint64_t v15 = 0;
    char v17 = 1;
    if (!v16) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
  uint64_t v16 = v14[3];
  uint64_t v15 = (std::__shared_weak_count *)v14[4];
  if (!v15) {
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v9);
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v15);
  char v17 = 0;
  if (!v16)
  {
LABEL_7:
    BOOL v18 = *v6;
    if (!os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_56;
    }
    *(_WORD *)long long buf = 0;
    char v19 = "Could not get preferences";
LABEL_19:
    _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v19, buf, 2u);
    goto LABEL_56;
  }
LABEL_11:
  if (a2 == 2)
  {
    if (a3[23] < 0)
    {
      sub_10004FC84(v29, *(void **)a3, *((void *)a3 + 1));
    }
    else
    {
      *(_OWORD *)uint64_t v29 = *(_OWORD *)a3;
      uint64_t v30 = *((void *)a3 + 2);
    }
    if (SHIBYTE(v30) < 0)
    {
      sub_10004FC84(__p, v29[0], (unint64_t)v29[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)v29;
      uint64_t v36 = v30;
    }
    int v34 = 0;
    if (SHIBYTE(v36) < 0)
    {
      sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)__p;
      *(void *)&uint8_t buf[16] = v36;
    }
    uint64_t v37 = 0;
    if (ctu::cf::convert_copy())
    {
      char v25 = v34;
      int v34 = v37;
      __int16 v38 = v25;
      sub_1000558F4(&v38);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v26 = v34;
    uint64_t v33 = v34;
    int v34 = 0;
    sub_1000558F4(&v34);
    if (SHIBYTE(v36) < 0) {
      operator delete(__p[0]);
    }
    CFStringRef v22 = kCFPreferencesCurrentUser;
    CFStringRef v23 = kCFPreferencesAnyHost;
    (*(void (**)(uint64_t, const __CFString *, const void *, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v16 + 16))(v16, @"SlotTwoRCSProvisioningUrl", v26, @"com.apple.commcenter.device_specific_nobackup", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    sub_1000558F4(&v33);
    if ((SHIBYTE(v30) & 0x80000000) == 0) {
      goto LABEL_51;
    }
    long long v24 = v29[0];
    goto LABEL_50;
  }
  if (a2 != 1)
  {
    BOOL v18 = *v6;
    if (!os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_56;
    }
    *(_WORD *)long long buf = 0;
    char v19 = "Invalid slot when storing custom RCS configuration server URL";
    goto LABEL_19;
  }
  if (a3[23] < 0)
  {
    sub_10004FC84(&__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __dst = *(_OWORD *)a3;
    uint64_t v32 = *((void *)a3 + 2);
  }
  if (SHIBYTE(v32) < 0)
  {
    sub_10004FC84(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)long long __p = __dst;
    uint64_t v36 = v32;
  }
  int v34 = 0;
  if (SHIBYTE(v36) < 0)
  {
    sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)long long buf = *(_OWORD *)__p;
    *(void *)&uint8_t buf[16] = v36;
  }
  uint64_t v37 = 0;
  if (ctu::cf::convert_copy())
  {
    char v20 = v34;
    int v34 = v37;
    __int16 v38 = v20;
    sub_1000558F4(&v38);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  char v21 = v34;
  uint64_t v33 = v34;
  int v34 = 0;
  sub_1000558F4(&v34);
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }
  CFStringRef v22 = kCFPreferencesCurrentUser;
  CFStringRef v23 = kCFPreferencesAnyHost;
  (*(void (**)(uint64_t, const __CFString *, const void *, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v16 + 16))(v16, @"SlotOneRCSProvisioningUrl", v21, @"com.apple.commcenter.device_specific_nobackup", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_1000558F4(&v33);
  if (SHIBYTE(v32) < 0)
  {
    long long v24 = (void *)__dst;
LABEL_50:
    operator delete(v24);
  }
LABEL_51:
  (*(void (**)(uint64_t, const __CFString *, CFStringRef, CFStringRef))(*(void *)v16 + 48))(v16, @"com.apple.commcenter.device_specific_nobackup", v22, v23);
  uint64_t v27 = *v6;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    if (a3[23] < 0) {
      a3 = *(char **)a3;
    }
    uint64_t v28 = subscriber::asString();
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = a3;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I Successfully stored custom RCS configuration server URL: %{public}s for slot: %s", buf, 0x16u);
  }
  sub_100891C70(a1, a2);
LABEL_56:
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v15);
  }
}

void sub_100893990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,int a24,const void *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  sub_1000558F4(&a25);
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if ((v41 & 1) == 0) {
    sub_10004D2C8(v40);
  }
  _Unwind_Resume(a1);
}

void sub_100893A84(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  memset(v24, 0, sizeof(v24));
  long long v22 = 0u;
  *(_OWORD *)CFStringRef v23 = 0u;
  *(_OWORD *)char v20 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)BOOL v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  *(_OWORD *)char v17 = 0u;
  *(_OWORD *)BOOL v14 = 0u;
  *(_OWORD *)uint64_t v15 = 0u;
  BYTE12(v24[0]) = 1;
  *(_DWORD *)((char *)&v24[1] + 7) = 0;
  uint64_t v5 = *(uint64_t **)(a1 + 256);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v7 = a1 + 256;
  BOOL v8 = v5;
  do
  {
    int v9 = *((_DWORD *)v8 + 8);
    BOOL v10 = v9 < (int)a2;
    if (v9 >= (int)a2) {
      uint64_t v11 = (uint64_t **)v8;
    }
    else {
      uint64_t v11 = (uint64_t **)(v8 + 1);
    }
    if (!v10) {
      uint64_t v7 = (uint64_t)v8;
    }
    BOOL v8 = *v11;
  }
  while (*v11);
  if (v7 != a1 + 256 && *(_DWORD *)(v7 + 32) <= (int)a2)
  {
    uint64_t v12 = sub_1000389F8(v5, a2);
    std::string::operator=((std::string *)v14, (const std::string *)v12);
    std::string::operator=((std::string *)&v15[1], (const std::string *)v12 + 1);
    std::string::operator=((std::string *)v17, (const std::string *)v12 + 2);
    std::string::operator=((std::string *)&v18[1], (const std::string *)v12 + 3);
    std::string::operator=((std::string *)v20, (const std::string *)v12 + 4);
    std::string::operator=((std::string *)&__p[1], (const std::string *)v12 + 5);
    std::string::operator=((std::string *)v23, (const std::string *)v12 + 6);
    long long v13 = *(_OWORD *)(v12 + 21);
    *(_DWORD *)((char *)&v24[1] + 7) = *(_DWORD *)((char *)v12 + 183);
    *(_OWORD *)((char *)v24 + 8) = v13;
    sub_100893C64(a3, a1, a2, (uint64_t)v14);
    if (SBYTE7(v24[0]) < 0) {
      operator delete(v23[0]);
    }
  }
  else
  {
LABEL_11:
    a3->__r_.__value_.__s.__data_[0] = 0;
    a3[1].__r_.__value_.__s.__data_[0] = 0;
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[1]);
  }
  if (SHIBYTE(v18[0]) < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  if (SHIBYTE(v15[0]) < 0) {
    operator delete(v14[0]);
  }
}

void sub_100893C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100893C64(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v8 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 16))(*(void *)(a2 + 48), a3);
  int v9 = v8;
  uint64_t v10 = *(unsigned __int8 *)(a4 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a4 + 8);
  }
  if (!v10)
  {
    char v21 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(cf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Unable to provision: (Empty IMSI)", (uint8_t *)cf, 2u);
    }
    goto LABEL_22;
  }
  uint64_t v11 = a2 + 96;
  (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 96) + 96))(cf);
  uint64_t v12 = (BOOL *)cf[0].__r_.__value_.__r.__words[0];
  LOBYTE(v84[0]) = 0;
  if (!cf[0].__r_.__value_.__r.__words[0])
  {
    sub_1000577C4((const void **)&cf[0].__r_.__value_.__l.__data_);
    goto LABEL_24;
  }
  CFTypeID v13 = CFGetTypeID(cf[0].__r_.__value_.__l.__data_);
  if (v13 == CFBooleanGetTypeID()) {
    ctu::cf::assign((ctu::cf *)v84, v12, v14);
  }
  int v15 = LOBYTE(v84[0]);
  sub_1000577C4((const void **)&cf[0].__r_.__value_.__l.__data_);
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 376);
    if (!v16) {
      goto LABEL_22;
    }
    uint64_t v17 = a2 + 376;
    do
    {
      int v18 = *(_DWORD *)(v16 + 28);
      BOOL v19 = v18 < (int)a3;
      if (v18 >= (int)a3) {
        char v20 = (uint64_t *)v16;
      }
      else {
        char v20 = (uint64_t *)(v16 + 8);
      }
      if (!v19) {
        uint64_t v17 = v16;
      }
      uint64_t v16 = *v20;
    }
    while (*v20);
    if (v17 == a2 + 376 || *(_DWORD *)(v17 + 28) > (int)a3 || *(unsigned char *)(v17 + 32) != 2)
    {
LABEL_22:
      a1->__r_.__value_.__s.__data_[0] = 0;
      a1[1].__r_.__value_.__s.__data_[0] = 0;
      return;
    }
  }
LABEL_24:
  *(_OWORD *)uint64_t v84 = 0u;
  long long v85 = 0u;
  long long v22 = (NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 48) + 16))(*(void *)(a2 + 48), a3);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v23, *(Registry **)(a2 + 80));
  char v25 = ServiceMap;
  if ((v26 & 0x8000000000000000) != 0)
  {
    uint64_t v27 = (unsigned __int8 *)(v26 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v28 = 5381;
    do
    {
      std::string::size_type v26 = v28;
      unsigned int v29 = *v27++;
      uint64_t v28 = (33 * v28) ^ v29;
    }
    while (v29);
  }
  std::mutex::lock(ServiceMap);
  cf[0].__r_.__value_.__r.__words[0] = v26;
  uint64_t v30 = sub_10004D37C(&v25[1].__m_.__sig, (unint64_t *)cf);
  if (v30)
  {
    uint64_t v32 = v30[3];
    uint64_t v31 = (std::__shared_weak_count *)v30[4];
    if (v31)
    {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v25);
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v11 = a2 + 96;
      sub_10004D2C8(v31);
      char v33 = 0;
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v32 = 0;
  }
  std::mutex::unlock(v25);
  uint64_t v31 = 0;
  char v33 = 1;
LABEL_32:
  if (!v32)
  {
    char v39 = *v22;
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    LOWORD(cf[0].__r_.__value_.__l.__data_) = 0;
    uint64_t v40 = "Could not get preferences";
    goto LABEL_105;
  }
  if ((a3 - 1) >= 2)
  {
    char v39 = *v22;
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      goto LABEL_49;
    }
    LOWORD(cf[0].__r_.__value_.__l.__data_) = 0;
    uint64_t v40 = "Invalid slot when searching for custom RCS configuration server URL";
LABEL_105:
    _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, v40, (uint8_t *)cf, 2u);
LABEL_49:
    int v38 = 0;
    int v41 = 0;
    LOBYTE(v84[0]) = 0;
    BYTE8(v85) = 0;
    if (v33)
    {
LABEL_61:
      memset(&__p, 0, sizeof(__p));
      sub_100058DB0(&__p, "config.rcs.mnc$mnc.mcc$mcc.pub.3gppnetwork.org");
      CFDictionaryRef theDict = 0;
      sub_100562A8C(v11, &theDict);
      if (theDict) {
        uint64_t v43 = sub_100080778;
      }
      else {
        uint64_t v43 = 0;
      }
      if (!v43) {
        goto LABEL_84;
      }
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"ProvisioningData");
      CFDictionaryRef v45 = Value;
      if (!Value) {
        goto LABEL_84;
      }
      CFTypeID v46 = CFGetTypeID(Value);
      if (v46 != CFDictionaryGetTypeID()) {
        goto LABEL_84;
      }
      if (CFDictionaryContainsKey(v45, @"ServerURL"))
      {
        CFDictionaryGetValue(v45, @"ServerURL");
        memset(cf, 0, 24);
        ctu::cf::assign();
        long long v47 = *(_OWORD *)&cf[0].__r_.__value_.__l.__data_;
        LODWORD(v81[0]) = cf[0].__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v81 + 3) = *(_DWORD *)((char *)&cf[0].__r_.__value_.__r.__words[2] + 3);
        std::string::size_type size = HIBYTE(cf[0].__r_.__value_.__r.__words[2]);
        int v49 = SHIBYTE(cf[0].__r_.__value_.__r.__words[2]);
        if ((cf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = cf[0].__r_.__value_.__l.__size_;
        }
        if (!size)
        {
          if (SHIBYTE(cf[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(cf[0].__r_.__value_.__l.__data_);
          }
          goto LABEL_84;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v47;
        LODWORD(__p.__r_.__value_.__r.__words[2]) = v81[0];
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v81 + 3);
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = v49;
        os_log_t v50 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
        {
          p_p = &__p;
          if (v49 < 0) {
            p_p = (std::string *)v47;
          }
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)cf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
          int v52 = "#I Using provisioning URL from bundle: %{public}s";
          uint64_t v53 = v50;
LABEL_81:
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, v52, (uint8_t *)cf, 0xCu);
        }
      }
      else
      {
        os_log_t v54 = *v9;
        if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v55 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)cf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v55;
          int v52 = "#I Using default provisioning URL: %{public}s";
          uint64_t v53 = v54;
          goto LABEL_81;
        }
      }
LABEL_84:
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v56 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t v56 = __p.__r_.__value_.__l.__size_;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v57 = &__p;
      }
      else {
        uint64_t v57 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v56 >= 4)
      {
        unsigned int v58 = (char *)v57 + v56;
        int64_t v59 = v56;
        char v60 = v57;
        do
        {
          uint64_t v61 = (char *)memchr(v60, 36, v59 - 3);
          if (!v61) {
            break;
          }
          if (*(_DWORD *)v61 == 1668181284)
          {
            if (v61 != v58 && v61 - (char *)v57 != -1)
            {
              char v62 = v57;
              while (v56 != 3)
              {
                uint64_t v63 = (char *)memchr(v62, 36, v56 - 3);
                if (!v63) {
                  break;
                }
                if (*(_DWORD *)v63 == 1667460388)
                {
                  if (v63 == v58 || v63 - (char *)v57 == -1) {
                    goto LABEL_111;
                  }
                  v81[0] = 0;
                  v81[1] = 0;
                  uint64_t v82 = 0;
                  PersonalityIdFromSlotId();
                  BOOL v64 = sub_100046F68(a2 + 344, v81);
                  uint64_t v65 = v64;
                  if ((void **)(a2 + 352) != v64)
                  {
                    char v66 = *((unsigned char *)v64 + 127);
                    if (v66 < 0) {
                      int v67 = v64[14];
                    }
                    else {
                      int v67 = (void *)*((unsigned __int8 *)v64 + 127);
                    }
                    if (v67)
                    {
                      int v69 = *((char *)v64 + 151);
                      if (v69 < 0 ? v64[17] : (void *)*((unsigned __int8 *)v64 + 151))
                      {
                        __dst[0] = 0;
                        __dst[1] = 0;
                        int v80 = 0;
                        if (v66 < 0)
                        {
                          sub_10004FC84(__dst, v64[13], (unint64_t)v64[14]);
                          LOBYTE(v69) = *((unsigned char *)v65 + 151);
                        }
                        else
                        {
                          *(_OWORD *)long long __dst = *(_OWORD *)(v64 + 13);
                          int v80 = v64[15];
                        }
                        memset(v78, 0, 24);
                        if ((v69 & 0x80) != 0)
                        {
                          sub_10004FC84(v78, v65[16], (unint64_t)v65[17]);
                        }
                        else
                        {
                          *(_OWORD *)BOOL v78 = *((_OWORD *)v65 + 8);
                          v78[2] = v65[18];
                        }
                        unsigned int v72 = (void *)HIBYTE(v78[2]);
                        if (SHIBYTE(v78[2]) < 0) {
                          unsigned int v72 = v78[1];
                        }
                        if (v72 == (void *)2)
                        {
                          sub_100058DB0(cf, "0");
                          if (SHIBYTE(v78[2]) >= 0) {
                            long long v73 = v78;
                          }
                          else {
                            long long v73 = (void **)v78[0];
                          }
                          if (SHIBYTE(v78[2]) >= 0) {
                            std::string::size_type v74 = HIBYTE(v78[2]);
                          }
                          else {
                            std::string::size_type v74 = (std::string::size_type)v78[1];
                          }
                          uint64_t v75 = std::string::append(cf, (const std::string::value_type *)v73, v74);
                          uint64_t v76 = (void *)v75->__r_.__value_.__r.__words[0];
                          *(void *)&long long v88 = v75->__r_.__value_.__l.__size_;
                          *(void *)((char *)&v88 + 7) = *(std::string::size_type *)((char *)&v75->__r_.__value_.__r.__words[1]
                                                                                    + 7);
                          char v77 = HIBYTE(v75->__r_.__value_.__r.__words[2]);
                          v75->__r_.__value_.__l.__size_ = 0;
                          v75->__r_.__value_.__r.__words[2] = 0;
                          v75->__r_.__value_.__r.__words[0] = 0;
                          if (SHIBYTE(v78[2]) < 0) {
                            operator delete(v78[0]);
                          }
                          v78[0] = v76;
                          v78[1] = (void *)v88;
                          *(void **)((char *)&v78[1] + 7) = *(void **)((char *)&v88 + 7);
                          HIBYTE(v78[2]) = v77;
                          if (SHIBYTE(cf[0].__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(cf[0].__r_.__value_.__l.__data_);
                          }
                        }
                        sub_10056D028((std::locale *)cf, "\\$mcc", 0);
                      }
                    }
                    char v71 = *v9;
                    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(cf[0].__r_.__value_.__l.__data_) = 0;
                      _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "MCC / MNC for home IMSI not available", (uint8_t *)cf, 2u);
                    }
                  }
                  a1->__r_.__value_.__s.__data_[0] = 0;
                  a1[1].__r_.__value_.__s.__data_[0] = 0;
                  if (SHIBYTE(v82) < 0) {
                    operator delete(v81[0]);
                  }
                  goto LABEL_114;
                }
                char v62 = (std::string *)(v63 + 1);
                int64_t v56 = v58 - (char *)v62;
                if (v58 - (char *)v62 < 4) {
                  goto LABEL_111;
                }
              }
            }
            break;
          }
          char v60 = (std::string *)(v61 + 1);
          int64_t v59 = v58 - (char *)v60;
        }
        while (v58 - (char *)v60 >= 4);
      }
LABEL_111:
      int v68 = *v9;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(cf[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#I MCC and MNC URL template not found in server URL, using as-is", (uint8_t *)cf, 2u);
      }
      *a1 = __p;
      memset(&__p, 0, sizeof(__p));
      a1[1].__r_.__value_.__s.__data_[0] = 1;
LABEL_114:
      sub_100057D78((const void **)&theDict);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_116;
    }
    goto LABEL_53;
  }
  if (a3 == 1) {
    CFStringRef v34 = @"SlotOneRCSProvisioningUrl";
  }
  else {
    CFStringRef v34 = @"SlotTwoRCSProvisioningUrl";
  }
  v81[0] = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, const __CFString *, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v32 + 40))(cf, v32, v34, @"com.apple.commcenter.device_specific_nobackup", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  sub_100056248(v81, (CFTypeRef *)&cf[0].__r_.__value_.__l.__data_);
  sub_1000577C4((const void **)&cf[0].__r_.__value_.__l.__data_);
  if (v81[0]) {
    BOOL v35 = sub_1000810B8;
  }
  else {
    BOOL v35 = 0;
  }
  if (v35)
  {
    memset(cf, 0, 24);
    ctu::cf::assign();
    std::string __p = cf[0];
    uint64_t v36 = *v22;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(cf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)cf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#I Found custom RCS configuration server URL: %{public}s", (uint8_t *)cf, 0xCu);
    }
    *(_OWORD *)uint64_t v84 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)&long long v85 = *((void *)&__p.__r_.__value_.__l + 2);
    int v38 = 1;
    BYTE8(v85) = 1;
  }
  else
  {
    int v38 = 0;
    LOBYTE(v84[0]) = 0;
    BYTE8(v85) = 0;
  }
  sub_1000558F4((const void **)v81);
  if ((v33 & 1) == 0) {
LABEL_53:
  }
    sub_10004D2C8(v31);
  if (!v38)
  {
    int v41 = 0;
    goto LABEL_61;
  }
  uint64_t v42 = (void *)BYTE7(v85);
  if (SBYTE7(v85) < 0) {
    uint64_t v42 = v84[1];
  }
  if (!v42)
  {
    int v41 = 1;
    goto LABEL_61;
  }
  sub_1000593FC((uint64_t)a1, (long long *)v84);
  int v41 = BYTE8(v85);
LABEL_116:
  if (v41)
  {
    if (SBYTE7(v85) < 0) {
      operator delete(v84[0]);
    }
  }
}

void sub_1008947C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,const void *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,std::locale a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_100057D78(&a31);
  if (a44 < 0) {
    operator delete(a39);
  }
  if (v51)
  {
    if (a37 < 0) {
      operator delete(a32);
    }
  }
  _Unwind_Resume(a1);
}

std::string *sub_100894920(std::string *a1, uint64_t a2, uint64_t a3, char *a4)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v4 & 0x80u) != 0)
  {
    a2 = *(void *)a2;
    uint64_t v4 = v5;
  }
  if (a4[23] >= 0) {
    int v6 = a4;
  }
  else {
    int v6 = *(char **)a4;
  }
  return sub_10056C78C(a1, a2, a2 + v4, a3, v6, 0);
}

void sub_100894984(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008949A0(uint64_t a1, int a2, __int16 a3)
{
  int v6 = a3;
  int v7 = HIBYTE(a3);
  BOOL v8 = *(NSObject **)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = "Enabled";
    if (!v6) {
      int v9 = "Disabled";
    }
    if (!v7) {
      int v9 = "Unknown";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I [.  ] Switch state changed to: %s", buf, 0xCu);
  }
  uint64_t v10 = *(void *)(a1 + 256);
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t v11 = a1 + 256;
  do
  {
    int v12 = *(_DWORD *)(v10 + 32);
    BOOL v13 = v12 < a2;
    if (v12 >= a2) {
      CFBooleanRef v14 = (uint64_t *)v10;
    }
    else {
      CFBooleanRef v14 = (uint64_t *)(v10 + 8);
    }
    if (!v13) {
      uint64_t v11 = v10;
    }
    uint64_t v10 = *v14;
  }
  while (*v14);
  if (v11 != a1 + 256 && *(_DWORD *)(v11 + 32) <= a2)
  {
    if (v7 && *(unsigned char *)(v11 + 209))
    {
      if (*(unsigned __int8 *)(v11 + 208) == v6) {
        return;
      }
    }
    else if ((v7 != 0) == (*(unsigned char *)(v11 + 209) != 0))
    {
      return;
    }
    *(void *)long long buf = 1;
    long long v25 = 0u;
    uint64_t v26 = 0;
    *(void *)&uint8_t buf[8] = a1 + 216;
    sub_1001FDE4C((uint64_t *)&v25, a1 + 248);
    uint64_t v16 = (uint64_t *)*((void *)&v25 + 1);
    uint64_t v17 = (uint64_t **)&v25 + 1;
    int v18 = (uint64_t **)&v25 + 1;
    if (*((void *)&v25 + 1))
    {
      do
      {
        while (1)
        {
          int v18 = (uint64_t **)v16;
          int v19 = *((_DWORD *)v16 + 8);
          if (v19 <= a2) {
            break;
          }
          uint64_t v16 = *v18;
          uint64_t v17 = v18;
          if (!*v18) {
            goto LABEL_33;
          }
        }
        if (v19 >= a2)
        {
          long long v22 = (char *)v18;
          goto LABEL_36;
        }
        uint64_t v16 = v18[1];
      }
      while (v16);
      uint64_t v17 = v18 + 1;
    }
LABEL_33:
    v23[2] = 1;
    long long v22 = (char *)operator new(0xE8uLL);
    v23[1] = (char *)&v25 + 8;
    *((_DWORD *)v22 + 8) = a2;
    *(_OWORD *)(v22 + 200) = 0u;
    *(_OWORD *)(v22 + 216) = 0u;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 56) = 0u;
    *(_OWORD *)(v22 + 72) = 0u;
    *(_OWORD *)(v22 + 88) = 0u;
    *(_OWORD *)(v22 + 104) = 0u;
    *(_OWORD *)(v22 + 120) = 0u;
    *(_OWORD *)(v22 + 136) = 0u;
    *(_OWORD *)(v22 + 152) = 0u;
    *(_OWORD *)(v22 + 168) = 0u;
    *(_OWORD *)(v22 + 184) = 0u;
    v22[212] = 1;
    *(_DWORD *)(v22 + 223) = 0;
    *((void *)v22 + 27) = 0;
    *(void *)long long v22 = 0;
    *((void *)v22 + 1) = 0;
    *((void *)v22 + 2) = v18;
    *uint64_t v17 = (uint64_t *)v22;
    char v20 = (uint64_t *)v22;
    if (*(void *)v25)
    {
      *(void *)&long long v25 = *(void *)v25;
      char v20 = *v17;
    }
    sub_100046C90(*((uint64_t **)&v25 + 1), v20);
    ++v26;
    v23[0] = 0;
    sub_1001FE278((uint64_t)v23, 0);
LABEL_36:
    *((_WORD *)v22 + 104) = a3;
    sub_1008973CC((uint64_t)buf);
  }
  else
  {
LABEL_17:
    int v15 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = subscriber::asString();
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Provisioning information not found for: %s", buf, 0xCu);
    }
  }
}

void sub_100894CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1008973CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100894CC4(uint64_t a1, int a2, __int16 a3)
{
}

void sub_100894CDC(uint64_t a1)
{
  sub_100894DDC(a1);

  operator delete();
}

uint64_t sub_100894D14(uint64_t a1)
{
  return sub_100894DDC(a1 - 56);
}

void sub_100894D1C(uint64_t a1)
{
  sub_100894DDC(a1 - 56);

  operator delete();
}

void *sub_100894D58(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100894DDC(uint64_t a1)
{
  *(void *)a1 = off_101A13800;
  uint64_t v2 = (LazuliFeatureSettingsModelObserverInterface *)(a1 + 56);
  *(void *)(a1 + 56) = off_101A13870;
  sub_1000886C0(a1 + 456, *(char **)(a1 + 464));
  sub_1000346F8(a1 + 424, *(void **)(a1 + 432));
  sub_10041A760((void *)(a1 + 392));
  sub_1000346F8(a1 + 368, *(void **)(a1 + 376));
  sub_100399174(a1 + 344, *(void **)(a1 + 352));
  sub_1000346F8(a1 + 320, *(void **)(a1 + 328));
  sub_10024D10C(a1 + 296, *(void **)(a1 + 304));
  sub_100087ED0(a1 + 272, *(void **)(a1 + 280));
  sub_1001F7124(a1 + 248, *(void **)(a1 + 256));
  sub_100894D58((void *)(a1 + 216));
  sub_1000886C0(a1 + 192, *(char **)(a1 + 200));
  sub_100088048(a1 + 160, *(void **)(a1 + 168));
  sub_100087F94(a1 + 136, *(void **)(a1 + 144));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 120);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 104);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  if (v5) {
    sub_10004D2C8(v5);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 72);
  if (v6) {
    sub_10004D2C8(v6);
  }
  LazuliFeatureSettingsModelObserverInterface::~LazuliFeatureSettingsModelObserverInterface(v2);
  LazuliLifetimeInterface::~LazuliLifetimeInterface((LazuliLifetimeInterface *)a1);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_100894F68()
{
}

uint64_t sub_100894F7C(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

void sub_100894F88(NSObject **a1@<X1>, Registry **a2@<X2>, uint64_t *a3@<X3>, void *a4@<X8>)
{
  BOOL v8 = operator new(0x1F8uLL);
  sub_100895014(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;

  sub_1000B3BC8((uint64_t)a4, v8 + 4, (uint64_t)(v8 + 3));
}

void sub_100895000(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100895014(void *a1, NSObject **a2, Registry **a3, uint64_t *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_101A139B8;
  sub_10089510C((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_10089505C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100895070(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A139B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100895090(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A139B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1008950E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 48))();
}

uint64_t sub_10089510C(uint64_t a1, NSObject **a2, Registry **a3, uint64_t *a4)
{
  int v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v28 = *a3;
  unsigned int v29 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v36, kCtLoggingSystemName, "lazuli.cache");
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  int v9 = *a2;
  *(void *)(a1 + 24) = *a2;
  if (v9) {
    dispatch_retain(v9);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v35, &v36);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v35);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v35);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v36);
  v35[0] = off_101999E18;
  v35[1] = sub_10088FD6C;
  v35[3] = v35;
  *(void *)(a1 + 48) = 0;
  if ((capabilities::ct::supportsGemini(v10) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 48)) {
    operator new();
  }
  sub_10008863C(v35);
  *(void *)a1 = off_101A13800;
  *(void *)(a1 + 56) = off_101A13870;
  sub_100058DB0(&v36, "LazuliDataCache");
  uint64_t v11 = *(NSObject **)(a1 + 24);
  dispatch_object_t v34 = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  dispatch_object_t object = 0;
  ctu::RestModule::RestModule();
  if (v34) {
    dispatch_release(v34);
  }
  if (v37 < 0) {
    operator delete(v36.var0);
  }
  int v12 = v28;
  add_explicit = (uint64_t *)v29;
  *(void *)(a1 + 80) = v28;
  *(void *)(a1 + 88) = v29;
  if (v29)
  {
    add_explicit = (uint64_t *)atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    int v12 = *(Registry **)(a1 + 80);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(add_explicit, v12);
  int v15 = ServiceMap;
  if ((v16 & 0x8000000000000000) != 0)
  {
    uint64_t v17 = (unsigned __int8 *)(v16 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v18 = 5381;
    do
    {
      unint64_t v16 = v18;
      unsigned int v19 = *v17++;
      uint64_t v18 = (33 * v18) ^ v19;
    }
    while (v19);
  }
  std::mutex::lock(ServiceMap);
  uint64_t v30 = (void *)v16;
  char v20 = sub_10004D37C(&v15[1].__m_.__sig, (unint64_t *)&v30);
  if (v20)
  {
    uint64_t v21 = v20[3];
    long long v22 = (std::__shared_weak_count *)v20[4];
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v21 = 0;
    long long v22 = 0;
  }
  std::mutex::unlock(v15);
  *(void *)(a1 + 96) = v21;
  *(void *)(a1 + 104) = v22;
  if (v22)
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v22);
  }
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 120) = v7;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 208) = 0;
  GetDefaultLazuliProvisioningInitializerMap(&v30);
  unint64_t v24 = (unint64_t)v30;
  CFStringRef v23 = v31;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = v24;
  uint64_t v25 = a1 + 256;
  uint64_t v26 = v32;
  *(void *)(a1 + 256) = v23;
  *(void *)(a1 + 264) = v26;
  if (v26)
  {
    v23[2] = v25;
    uint64_t v30 = &v31;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    CFStringRef v23 = 0;
  }
  else
  {
    *(void *)(a1 + 248) = v25;
  }
  sub_1001F7124((uint64_t)&v30, v23);
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = a1 + 304;
  *(void *)(a1 + 320) = a1 + 328;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = a1 + 352;
  sub_100313408((uint64_t *)(a1 + 368), (uint64_t)&kDefaultBasebandServiceProvisionedStates);
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = a1 + 432;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 456) = a1 + 464;
  if (v29) {
    sub_10004D2C8(v29);
  }
  return a1;
}

void sub_10089559C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, LazuliFeatureSettingsModelObserverInterface *a13, ctu::OsLogLogger *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,dispatch_object_t object,dispatch_object_t a22,char a23)
{
  sub_10008863C((void *)(v23 - 128));
  operator delete();
}

void sub_1008957A8()
{
}

__n128 sub_1008957BC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A13A08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100895810(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A13A08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100895848(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  int v9 = (void **)*v3;
  uint64_t v10 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v10;
    void *v3 = v4;
    *uint64_t v4 = 0;
    uint64_t v3[2] = 0;
  }
  else
  {
    int v9 = &v10;
  }
  sub_10008AAD8((uint64_t)v3, a2);
  int v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_100087F94((uint64_t)&v9, v10);
}

void sub_100895908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_100895920(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100895960()
{
}

void sub_100895970()
{
}

__n128 sub_100895984(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A13A88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1008959D8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A13A88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100895A10(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (char *)a1[1];
  char v13 = *v4;
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    char v14 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v14, (unsigned __int8 *)a2, v6);
    *uint64_t v4 = v14;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v6);
  }
  int v9 = (uint64_t (*)(void *, char *))a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = (void *)(a1[2] + (v10 >> 1));
  if (v10) {
    int v9 = *(uint64_t (**)(void *, char *))(*v11 + v9);
  }
  return v9(v11, &v13);
}

uint64_t sub_100895B0C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100895B4C()
{
}

void sub_100895B5C()
{
}

__n128 sub_100895B70(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A13B08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100895BC4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A13B08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100895BFC(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (std::string *)a1[1];
  long long v21 = 0uLL;
  uint64_t v22 = 0;
  sub_100089CF0((uint64_t *)&v21, a2);
  p_std::string::size_type size = &v3->__r_.__value_.__l.__size_;
  std::string::size_type size = (void *)v3->__r_.__value_.__l.__size_;
  uint64_t v18 = (void **)v3->__r_.__value_.__r.__words[0];
  unsigned int v19 = size;
  std::string::size_type v20 = v3->__r_.__value_.__r.__words[2];
  if (v20)
  {
    size[2] = &v19;
    v3->__r_.__value_.__r.__words[0] = (std::string::size_type)p_size;
    *p_std::string::size_type size = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    uint64_t v18 = (void **)&v19;
  }
  long long v16 = v21;
  uint64_t v17 = v22;
  uint64_t v22 = 0;
  long long v21 = 0uLL;
  sub_10008A04C(v3, (uint64_t *)&v16);
  uint64_t v23 = (void **)&v16;
  sub_10008A88C(&v23);
  if (v20 == v3->__r_.__value_.__r.__words[2])
  {
    int v6 = v18;
    if (v18 == (void **)&v19) {
      goto LABEL_24;
    }
    uint64_t v7 = (void *)v3->__r_.__value_.__r.__words[0];
    while (*((_DWORD *)v6 + 8) == *((_DWORD *)v7 + 8) && BasicSimInfo::operator==())
    {
      uint64_t v8 = (void **)v6[1];
      int v9 = (void ***)v6;
      if (v8)
      {
        do
        {
          int v6 = v8;
          uint64_t v8 = (void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v6 = v9[2];
          BOOL v10 = *v6 == v9;
          int v9 = (void ***)v6;
        }
        while (!v10);
      }
      uint64_t v11 = (void *)v7[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (void *)v7[2];
          BOOL v10 = *v12 == (void)v7;
          uint64_t v7 = v12;
        }
        while (!v10);
      }
      uint64_t v7 = v12;
      if (v6 == (void **)&v19) {
        goto LABEL_24;
      }
    }
  }
  char v13 = (void (*)(void *, void ***))a1[3];
  uint64_t v14 = a1[4];
  int v15 = (void *)(a1[2] + (v14 >> 1));
  if (v14) {
    char v13 = *(void (**)(void *, void ***))(*v15 + v13);
  }
  v13(v15, &v18);
LABEL_24:
  sub_100088048((uint64_t)&v18, v19);
  uint64_t v18 = (void **)&v21;
  sub_10008A88C(&v18);
}

void sub_100895DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13, uint64_t a14, char a15)
{
  a12 = (void **)&a15;
  sub_10008A88C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100895E08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100895E48()
{
}

void sub_100895E58()
{
}

__n128 sub_100895E6C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A13B88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100895EC0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A13B88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100895EF8(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (char *)a1[1];
  char v13 = *v4;
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    char v14 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v14, (unsigned __int8 *)a2, v6);
    *uint64_t v4 = v14;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v6);
  }
  int v9 = (uint64_t (*)(void *, char *))a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = (void *)(a1[2] + (v10 >> 1));
  if (v10) {
    int v9 = *(uint64_t (**)(void *, char *))(*v11 + v9);
  }
  return v9(v11, &v13);
}

uint64_t sub_100895FF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100896034()
{
}

void sub_100896044()
{
}

__n128 sub_100896058(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A13C08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1008960AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A13C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1008960E4(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v3[1];
  int v9 = (char **)*v3;
  uint64_t v10 = (char *)v5;
  if (v3[2])
  {
    *(void *)(v5 + 16) = &v10;
    void *v3 = v4;
    *uint64_t v4 = 0;
    uint64_t v3[2] = 0;
  }
  else
  {
    int v9 = &v10;
  }
  sub_1000FF5C4((uint64_t)v3, a2);
  int v6 = (void (*)(void *, char ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(void (**)(void *, char ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_1000886C0((uint64_t)&v9, v10);
}

void sub_1008961A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t sub_1008961BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008961FC()
{
}

void sub_10089620C()
{
}

__n128 sub_100896220(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A13C88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100896274(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A13C88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1008962AC(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  int v9 = (void **)*v3;
  uint64_t v10 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v10;
    void *v3 = v4;
    *uint64_t v4 = 0;
    uint64_t v3[2] = 0;
  }
  else
  {
    int v9 = &v10;
  }
  sub_10008B2E4((uint64_t)v3, a2);
  int v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_100087ED0((uint64_t)&v9, v10);
}

void sub_10089636C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_100896384(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008963C4()
{
}

void sub_1008963D4()
{
}

__n128 sub_1008963E8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A13D08;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10089643C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A13D08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100896474(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  int v9 = (void **)*v3;
  uint64_t v10 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v10;
    void *v3 = v4;
    *uint64_t v4 = 0;
    uint64_t v3[2] = 0;
  }
  else
  {
    int v9 = &v10;
  }
  sub_100318E34((uint64_t)v3, a2);
  int v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_10024D10C((uint64_t)&v9, v10);
}

void sub_100896534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_10089654C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10089658C()
{
}

void sub_10089659C()
{
}

__n128 sub_1008965B0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A13D88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100896604(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A13D88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10089663C(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  int v9 = (void **)*v3;
  uint64_t v10 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v10;
    void *v3 = v4;
    *uint64_t v4 = 0;
    uint64_t v3[2] = 0;
  }
  else
  {
    int v9 = &v10;
  }
  sub_10031B0B4((uint64_t)v3, a2);
  int v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_1000346F8((uint64_t)&v9, v10);
}

void sub_1008966FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_100896714(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100896754()
{
}

void sub_100896764()
{
}

void *sub_100896778(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A13E08;
  result[1] = v3;
  return result;
}

uint64_t sub_1008967C0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A13E08;
  a2[1] = v2;
  return result;
}

void sub_1008967EC(uint64_t a1, void *a2)
{
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  uint64_t v7 = (void *)*a2;
  uint64_t v5 = a2 + 1;
  int v6 = v7;
  if (v7 != v5)
  {
    do
    {
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v26 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v26 = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_15;
        }
      }
      if (xpc_get_type(v9) != (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v10 = xpc_null_create();
LABEL_15:
        xpc_object_t v26 = v10;
        goto LABEL_16;
      }
      xpc_retain(v9);
LABEL_16:
      xpc_release(v9);
      int v11 = *((_DWORD *)v6 + 8);
      uint64_t v12 = subscriber::asString();
      ctu::rest::detail::write_enum_string_value((uint64_t *)&v24, (ctu::rest::detail *)v11, v12, v13);
      std::string __p = &v26;
      std::string::size_type v20 = "first";
      sub_100035E70((uint64_t)&__p, &v24, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v24);
      xpc_object_t v24 = 0;
      write_rest_value((uint64_t)(v6 + 5), &v22);
      std::string __p = &v26;
      std::string::size_type v20 = "second";
      sub_100035E70((uint64_t)&__p, &v22, &v23);
      xpc_release(v23);
      xpc_object_t v23 = 0;
      xpc_release(v22);
      xpc_object_t v22 = 0;
      xpc_object_t v14 = v26;
      if (v26) {
        xpc_retain(v26);
      }
      else {
        xpc_object_t v14 = xpc_null_create();
      }
      xpc_release(v26);
      xpc_array_append_value(v4, v14);
      xpc_release(v14);
      int v15 = (void *)v6[1];
      if (v15)
      {
        do
        {
          long long v16 = v15;
          int v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          long long v16 = (void *)v6[2];
          BOOL v17 = *v16 == (void)v6;
          int v6 = v16;
        }
        while (!v17);
      }
      int v6 = v16;
    }
    while (v16 != v5);
  }
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v18 = v4;
  }
  else
  {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_release(v4);
  sub_100058DB0(&__p, "/cc/props/lazuli_provisioning_initializer");
  xpc_object_t v26 = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    xpc_object_t v26 = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(v26);
  xpc_object_t v26 = 0;
  if (v21 < 0) {
    operator delete(__p);
  }
  xpc_release(v18);
}

void sub_100896AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  xpc_release(object);
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_100896B6C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100896BAC()
{
}

void sub_100896BBC()
{
}

void *sub_100896BD0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A13E98;
  result[1] = v3;
  return result;
}

uint64_t sub_100896C18(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A13E98;
  a2[1] = v2;
  return result;
}

void sub_100896C44(uint64_t a1, void *a2)
{
  xpc_object_t v5 = 0;
  sub_100014264(a2, &v5);
  sub_100058DB0(&__p, "/cc/props/lazuli_feature_supported");
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v4 < 0) {
    operator delete(__p);
  }
  xpc_release(v5);
}

void sub_100896CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_100896D2C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100896D6C()
{
}

void sub_100896D7C()
{
}

__n128 sub_100896D90(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A13F18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100896DE4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A13F18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100896E1C(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  char v4 = v3 + 1;
  xpc_object_t v5 = (void *)v3[1];
  xpc_object_t v9 = (void **)*v3;
  xpc_object_t v10 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v10;
    void *v3 = v4;
    *char v4 = 0;
    uint64_t v3[2] = 0;
  }
  else
  {
    xpc_object_t v9 = &v10;
  }
  sub_10003447C((uint64_t)v3, a2);
  int v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  xpc_object_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_1000346F8((uint64_t)&v9, v10);
}

void sub_100896EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_100896EF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100896F34()
{
}

void sub_100896F44()
{
}

__n128 sub_100896F58(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A13F98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100896FAC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A13F98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100896FE4(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  char v4 = v3 + 1;
  xpc_object_t v5 = (void *)v3[1];
  xpc_object_t v9 = (void **)*v3;
  xpc_object_t v10 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v10;
    void *v3 = v4;
    *char v4 = 0;
    uint64_t v3[2] = 0;
  }
  else
  {
    xpc_object_t v9 = &v10;
  }
  sub_10039A458((uint64_t)v3, a2);
  int v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  xpc_object_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_100399174((uint64_t)&v9, v10);
}

void sub_1008970A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_1008970BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008970FC()
{
}

void sub_10089710C()
{
}

__n128 sub_100897120(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A14018;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100897174(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A14018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1008971AC(void *a1, xpc *this, BOOL a3)
{
  char v4 = (unsigned char *)a1[1];
  int v5 = *v4;
  *char v4 = xpc::dyn_cast_or_default(this, 0, a3);
  int v6 = (uint64_t (*)(void *, BOOL))a1[3];
  uint64_t v7 = a1[4];
  xpc_object_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(uint64_t (**)(void *, BOOL))(*v8 + v6);
  }

  return v6(v8, v5 != 0);
}

uint64_t sub_100897248(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100897288()
{
}

void sub_100897298()
{
}

__n128 sub_1008972AC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A14098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100897300(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A14098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100897338(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_100897380(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008973C0()
{
}

uint64_t sub_1008973CC(uint64_t a1)
{
  if (*(unsigned char *)a1) {
    sub_100893234(*(void *)(a1 + 8), (void *)(a1 + 16));
  }
  sub_1001F7124(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

char *sub_100897414(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  *((_DWORD *)__dst + 12) = *((_DWORD *)a2 + 12);
  int v6 = __dst + 56;
  if (*((char *)a2 + 79) < 0)
  {
    sub_10004FC84(v6, *((void **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 56);
    *((void *)__dst + 9) = *((void *)a2 + 9);
    *(_OWORD *)int v6 = v7;
  }
  __dst[80] = *((unsigned char *)a2 + 80);
  return __dst;
}

void sub_1008974D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10089750C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    uint64_t v3 = (void *)(a1 + 16);
    if (v2[6] == *(void *)(a1 + 32))
    {
      long long v4 = (void *)v2[4];
      if (v4 == v2 + 5) {
        goto LABEL_24;
      }
      long long v5 = (void *)*v3;
      while (1)
      {
        BOOL v6 = *((_DWORD *)v4 + 7) == *((_DWORD *)v5 + 7)
          && *((unsigned __int8 *)v4 + 32) == *((unsigned __int8 *)v5 + 32);
        if (!v6) {
          break;
        }
        long long v7 = (void *)v4[1];
        xpc_object_t v8 = v4;
        if (v7)
        {
          do
          {
            long long v4 = v7;
            long long v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            long long v4 = (void *)v8[2];
            BOOL v6 = *v4 == (void)v8;
            xpc_object_t v8 = v4;
          }
          while (!v6);
        }
        xpc_object_t v9 = (void *)v5[1];
        if (v9)
        {
          do
          {
            xpc_object_t v10 = v9;
            xpc_object_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            xpc_object_t v10 = (void *)v5[2];
            BOOL v6 = *v10 == (void)v5;
            long long v5 = v10;
          }
          while (!v6);
        }
        long long v5 = v10;
        if (v4 == v2 + 5) {
          goto LABEL_24;
        }
      }
    }
    sub_10041F480((uint64_t)(v2 + 4), v3);
    uint64_t v11 = v2[3];
    if (v11) {
      (*(void (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v2 + 4);
    }
  }
LABEL_24:
  sub_1000346F8(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

uint64_t sub_100897640(void *a1, id *a2, void *a3)
{
  if (!a3)
  {
    long long v5 = sub_100200FB4(a2);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[OS version] Parsing failed: Empty dictionary passed", buf, 2u);
    }
    goto LABEL_16;
  }
  long long v5 = a3;
  if (!sub_1008977F4(v5, @"major_version", a1))
  {
    long long v7 = sub_100200FB4(a2);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    __int16 v13 = 0;
    xpc_object_t v8 = "Couldn't parse major_version";
    xpc_object_t v9 = (uint8_t *)&v13;
LABEL_14:
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, v8, v9, 2u);
    goto LABEL_15;
  }
  if (!sub_1008977F4(v5, @"minor_version", a1 + 1))
  {
    long long v7 = sub_100200FB4(a2);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_15;
    }
    __int16 v12 = 0;
    xpc_object_t v8 = "Couldn't parse minor_version";
    xpc_object_t v9 = (uint8_t *)&v12;
    goto LABEL_14;
  }
  if (!sub_1008977F4(v5, @"patch_version", a1 + 2))
  {
    long long v7 = sub_100200FB4(a2);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = 0;
      xpc_object_t v8 = "Couldn't parse patch_version";
      xpc_object_t v9 = (uint8_t *)&v11;
      goto LABEL_14;
    }
LABEL_15:

LABEL_16:
    uint64_t v6 = 0;
    goto LABEL_17;
  }
  uint64_t v6 = 1;
LABEL_17:

  return v6;
}

void sub_1008977D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1008977F4(void *a1, uint64_t a2, void *a3)
{
  long long v4 = [a1 valueForKey:a2];
  long long v5 = v4;
  if (v4)
  {
    *a3 = [v4 integerValue];
  }
  return v5 != 0;
}

void sub_100897840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100897850(long long *a1)
{
  uint64_t v2 = +[NSProcessInfo processInfo];
  long long v5 = *a1;
  uint64_t v6 = *((void *)a1 + 2);
  id v3 = [v2 isOperatingSystemAtLeastVersion:&v5];

  return v3;
}

void sub_1008978B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008978C0(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  sub_100058DB0(&v24, "[Major version: ");
  std::to_string(&v23, *a1);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v4 = &v23;
  }
  else {
    long long v4 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v23.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = std::string::append(&v24, (const std::string::value_type *)v4, size);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  xpc_object_t v8 = std::string::append(&v25, ", Minor version: ", 0x11uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v22, a1[1]);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v10 = &v22;
  }
  else {
    xpc_object_t v10 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v22.__r_.__value_.__l.__size_;
  }
  __int16 v12 = std::string::append(&v26, (const std::string::value_type *)v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  xpc_object_t v14 = std::string::append(&v27, ", Patch version: ", 0x11uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
  }
  xpc_object_t v18 = std::string::append(&v28, (const std::string::value_type *)p_p, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v20 = std::string::append(&v29, "]", 1uLL);
  *a2 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_100897AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (*(char *)(v45 - 41) < 0) {
    operator delete(*(void **)(v45 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v45 - 73) < 0) {
    operator delete(*(void **)(v45 - 96));
  }
  if (*(char *)(v45 - 105) < 0) {
    operator delete(*(void **)(v45 - 128));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void RegistrationModel::create()
{
}

void sub_100897CE0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    dispatch_release(v2);
    if (!v1)
    {
LABEL_3:
      if (v3) {
        goto LABEL_4;
      }
      goto LABEL_5;
    }
  }
  else if (!v1)
  {
    goto LABEL_3;
  }
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v3) {
LABEL_4:
  }
    operator delete();
LABEL_5:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100897D4C(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)(a1 + 24);
  int v3 = *(NSObject **)(a1 + 24);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = asString();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Adjusted Status: %s", buf, 0xCu);
    int v3 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Actual Status: %s", buf, 0xCu);
    int v3 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Registration Cause code: %d", buf, 8u);
    int v3 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I RAT: %s", buf, 0xCu);
    int v3 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Previous RAT: %s", buf, 0xCu);
    int v3 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Baseband service provisioned: %s", buf, 0xCu);
  }
  int v9 = *(_DWORD *)(a1 + 60);
  if (!v9)
  {
    uint64_t v16 = *v2;
    if (!os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_38;
    }
    *(_WORD *)long long buf = 0;
    std::string::size_type v17 = "#I Last seen wireless tech: Unknown";
    goto LABEL_37;
  }
  if (v9)
  {
    xpc_object_t v10 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Last seen wireless tech: baseband on", buf, 2u);
      int v9 = *(_DWORD *)(a1 + 60);
    }
  }
  if ((v9 & 2) != 0)
  {
    std::string::size_type v11 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Last seen wireless tech: wireless on", buf, 2u);
      int v9 = *(_DWORD *)(a1 + 60);
    }
  }
  if ((v9 & 4) != 0)
  {
    __int16 v12 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Last seen wireless tech: GSM/UMTS", buf, 2u);
      int v9 = *(_DWORD *)(a1 + 60);
    }
  }
  if ((v9 & 8) != 0)
  {
    long long v13 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Last seen wireless tech: C2K/EVDO", buf, 2u);
      int v9 = *(_DWORD *)(a1 + 60);
    }
  }
  if ((v9 & 0x20) != 0)
  {
    xpc_object_t v14 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I Last seen wireless tech: LTE", buf, 2u);
      int v9 = *(_DWORD *)(a1 + 60);
    }
  }
  if ((v9 & 0x40) != 0)
  {
    long long v15 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Last seen wireless tech: NRNSA", buf, 2u);
      int v9 = *(_DWORD *)(a1 + 60);
    }
  }
  if ((v9 & 0x80) != 0)
  {
    uint64_t v16 = *v2;
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      std::string::size_type v17 = "#I Last seen wireless tech: NR";
LABEL_37:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 2u);
    }
  }
LABEL_38:
  xpc_object_t v18 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    long long v19 = "true";
    if (*(unsigned char *)(a1 + 72)) {
      std::string::size_type v20 = "true";
    }
    else {
      std::string::size_type v20 = "false";
    }
    if (!*(unsigned char *)(a1 + 73)) {
      long long v19 = "false";
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v20;
    *(_WORD *)&unsigned char buf[12] = 2080;
    uint64_t v102 = (uint64_t)v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I RAT selection: in progress (%s) is internal (%s)", buf, 0x16u);
  }
  RatSelectionType::dumpState((RatSelectionType *)(a1 + 64), (const ctu::OsLogLogger *)v2);
  char v21 = *(NSObject **)(a1 + 24);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 74)) {
      std::string v22 = "true";
    }
    else {
      std::string v22 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I CS Attached: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 522)) {
      std::string v23 = "true";
    }
    else {
      std::string v23 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v23;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I PS Attached: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 75)) {
      std::string v24 = "true";
    }
    else {
      std::string v24 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v24;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I IMS Registered: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 80)) {
      std::string v25 = "true";
    }
    else {
      std::string v25 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v25;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I IMS Registration started: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 82)) {
      std::string v26 = "true";
    }
    else {
      std::string v26 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I WLAN Mode: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 84)) {
      std::string v27 = "true";
    }
    else {
      std::string v27 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v27;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Cellular fallback: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 85)) {
      std::string v28 = "true";
    }
    else {
      std::string v28 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v28;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I IMS Voice Service: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = sd::asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v29;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I IMS Service mask: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 92)) {
      uint64_t v30 = "true";
    }
    else {
      uint64_t v30 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v30;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I IMS deregistering for LTE: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 93)) {
      uint64_t v31 = "true";
    }
    else {
      uint64_t v31 = "false";
    }
    uint64_t v32 = asString();
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v31;
    *(_WORD *)&unsigned char buf[12] = 2080;
    uint64_t v102 = v32;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Saved enable LTE setting: %s (%s)", buf, 0x16u);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v33;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Data mode raw: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 100)) {
      dispatch_object_t v34 = "true";
    }
    else {
      dispatch_object_t v34 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v34;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Data mode hidden: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v35 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v35;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Data mode reported: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v36 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v36;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Data mode adjusted: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    char v37 = (void *)(a1 + 112);
    if (*(char *)(a1 + 135) < 0) {
      char v37 = (void *)*v37;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v37;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Operator long name: %{public}s", buf, 0xCu);
    char v21 = *v2;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v38 = (void *)(a1 + 136);
    if (*(char *)(a1 + 159) < 0) {
      int v38 = (void *)*v38;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v38;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Operator short name: %{public}s", buf, 0xCu);
    char v21 = *v2;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    char v39 = (void *)(a1 + 160);
    if (*(char *)(a1 + 183) < 0) {
      char v39 = (void *)*v39;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v39;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Operator name displayed: %{public}s", buf, 0xCu);
    char v21 = *v2;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v40 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v40;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Operator name source: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v41 = *(const __CFString **)(a1 + 184);
    if (v41) {
      uint64_t v42 = sub_1000810B8;
    }
    else {
      uint64_t v42 = 0;
    }
    if (!v42) {
      CFStringRef v41 = &stru_101AC1B28;
    }
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v41;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Operator name for WiFi calling: %{public}@", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 1552)) {
      uint64_t v43 = "true";
    }
    else {
      uint64_t v43 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v43;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Call active: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v44 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v44;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Last call is type: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    IntCFDictionaryRef Value = MCC::getIntValue((MCC *)(a1 + 208));
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = IntValue;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Network MCC: %d", buf, 8u);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v46 = MCC::getIntValue((MCC *)(a1 + 240));
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v46;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Network MNC: %d", buf, 8u);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v47 = MCC::getIntValue((MCC *)(a1 + 272));
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Last known MCC: %03d", buf, 8u);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int IntegerWidth = MNC::getIntegerWidth((MNC *)(a1 + 304));
    int v49 = MCC::getIntValue((MCC *)(a1 + 304));
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = IntegerWidth;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v49;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Last known MNC: %0.*d", buf, 0xEu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v50 = MCC::getIntValue((MCC *)(a1 + 336));
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v50;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Last valid MCC: %03d", buf, 8u);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v51 = MNC::getIntegerWidth((MNC *)(a1 + 368));
    int v52 = MCC::getIntValue((MCC *)(a1 + 368));
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v51;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v52;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Last valid MNC: %0.*d", buf, 0xEu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 400)) {
      uint64_t v53 = "true";
    }
    else {
      uint64_t v53 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v53;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Is in home country: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v54 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v54;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Is roaming: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v55 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v55;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Is roaming definite: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  uint64_t v56 = *(void *)(a1 + 200);
  if (v56) {
    uint64_t v57 = sub_1000810B8;
  }
  else {
    uint64_t v57 = 0;
  }
  if (v57 && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v56;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Operator display name PLMN: %{public}@", buf, 0xCu);
    char v21 = *v2;
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v58 = MCC::getIntValue((MCC *)(a1 + 432));
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v58;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Network MCC for time update: %d", buf, 8u);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    int v59 = MCC::getIntValue((MCC *)(a1 + 464));
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v59;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Network MNC for time update: %d", buf, 8u);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (*(unsigned char *)(a1 + 500) && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v60 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v60;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Reg Notification Status: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (*(unsigned char *)(a1 + 508) && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v61 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v61;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Reg Notification RAT: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (*(unsigned char *)(a1 + 513) && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 512)) {
      char v62 = "true";
    }
    else {
      char v62 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v62;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Reg Notification SIM removal: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (*(unsigned char *)(a1 + 515) && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 514)) {
      uint64_t v63 = "true";
    }
    else {
      uint64_t v63 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v63;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Reg Notification in home country: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (*(unsigned char *)(a1 + 517) && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 516)) {
      BOOL v64 = "true";
    }
    else {
      BOOL v64 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v64;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Reg Notification call active: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (*(unsigned char *)(a1 + 519) && os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 518)) {
      uint64_t v65 = "true";
    }
    else {
      uint64_t v65 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v65;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Reg Notification is satellite system: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v66 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v66;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Reg Notification last call type: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 520)) {
      int v67 = "true";
    }
    else {
      int v67 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v67;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I WiFi IMS Registered: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 523)) {
      int v68 = "true";
    }
    else {
      int v68 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v68;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I LTE limited service: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v69 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v69;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I LTE Emergency Bearer Support: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v70 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v70;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I LTE Emergency Access Barred: %s", buf, 0xCu);
    char v21 = *(NSObject **)(a1 + 24);
  }
  BOOL v71 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if (v71)
  {
    if (*(unsigned char *)(a1 + 532)) {
      unsigned int v72 = "true";
    }
    else {
      unsigned int v72 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v72;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I IMS support for voice on LTE: %s", buf, 0xCu);
  }
  int v73 = capabilities::ct::supportsVoNR((capabilities::ct *)v71);
  std::string::size_type v74 = *v2;
  if (v73)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 533)) {
        uint64_t v75 = "true";
      }
      else {
        uint64_t v75 = "false";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v75;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#I NR limited service: %s", buf, 0xCu);
      std::string::size_type v74 = *(NSObject **)(a1 + 24);
    }
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v76 = asString();
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v76;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#I NR Emergency Support: %s", buf, 0xCu);
      std::string::size_type v74 = *(NSObject **)(a1 + 24);
    }
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v77 = asString();
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v77;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#I NR Emergency Fallback Support: %s", buf, 0xCu);
      std::string::size_type v74 = *(NSObject **)(a1 + 24);
    }
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 544)) {
        BOOL v78 = "true";
      }
      else {
        BOOL v78 = "false";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v78;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#I IMS support for voice on NR: %s", buf, 0xCu);
      std::string::size_type v74 = *(NSObject **)(a1 + 24);
    }
  }
  if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v79 = asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v79;
    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#I Encryption Status: %s", buf, 0xCu);
    std::string::size_type v74 = *(NSObject **)(a1 + 24);
  }
  BOOL v80 = os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT);
  if (v80)
  {
    if (*(unsigned char *)(a1 + 83)) {
      int v81 = "true";
    }
    else {
      int v81 = "false";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v81;
    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#I fIsOnIWLanOverCellular: %s", buf, 0xCu);
  }
  int v82 = capabilities::ct::supports5G((capabilities::ct *)v80);
  int v83 = *v2;
  if (v82)
  {
    if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v84 = printers::asString();
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v84;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#I Show 5G Standalone switch: %s", buf, 0xCu);
      int v83 = *(NSObject **)(a1 + 24);
    }
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v85 = printers::asString();
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v85;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#I 5G Standalone user setting: %s", buf, 0xCu);
      int v83 = *(NSObject **)(a1 + 24);
    }
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v86 = printers::asString();
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v86;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#I 5G Standalone carrier setting: %s", buf, 0xCu);
      int v83 = *(NSObject **)(a1 + 24);
    }
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
    {
      asStringUiMask((uint64_t *)buf, *(_DWORD *)(a1 + 1592));
      if (v103 >= 0) {
        BOOL v87 = buf;
      }
      else {
        BOOL v87 = *(unsigned char **)buf;
      }
      int v99 = 136446210;
      id v100 = v87;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#I fDataUiModifierMask: %{public}s", (uint8_t *)&v99, 0xCu);
      if (SHIBYTE(v103) < 0) {
        operator delete(*(void **)buf);
      }
      int v83 = *v2;
    }
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
    {
      rest::SlicingSupportInfo::toString((uint64_t *)buf, (rest::SlicingSupportInfo *)(a1 + 1608));
      if (v103 >= 0) {
        long long v88 = buf;
      }
      else {
        long long v88 = *(unsigned char **)buf;
      }
      int v99 = 136446210;
      id v100 = v88;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#I Slicing Configuration: %{public}s", (uint8_t *)&v99, 0xCu);
      if (SHIBYTE(v103) < 0) {
        operator delete(*(void **)buf);
      }
      int v83 = *v2;
    }
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
    {
      rest::SlicingSupportInfo::toString((uint64_t *)buf, (rest::SlicingSupportInfo *)(a1 + 1612));
      if (v103 >= 0) {
        char v89 = buf;
      }
      else {
        char v89 = *(unsigned char **)buf;
      }
      int v99 = 136446210;
      id v100 = v89;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#I Slicing Support: %{public}s", (uint8_t *)&v99, 0xCu);
      if (SHIBYTE(v103) < 0) {
        operator delete(*(void **)buf);
      }
      int v83 = *v2;
    }
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v90 = asStringBool(*(unsigned char *)(a1 + 1616));
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v90;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#I fSlicingActive: %{public}s", buf, 0xCu);
      int v83 = *(NSObject **)(a1 + 24);
    }
  }
  uint64_t v91 = *(unsigned __int8 **)(a1 + 1600);
  if (v91 && os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
  {
    int v92 = *v91;
    if (v91[1]) {
      BOOL v93 = "true";
    }
    else {
      BOOL v93 = "false";
    }
    *(_DWORD *)long long buf = 136315906;
    BOOL v94 = v92 == 0;
    if (v92) {
      uint64_t v95 = "true";
    }
    else {
      uint64_t v95 = "false";
    }
    *(void *)&uint8_t buf[4] = v95;
    if (v94) {
      id v96 = "false";
    }
    else {
      id v96 = v93;
    }
    *(_WORD *)&unsigned char buf[12] = 2080;
    uint64_t v102 = (uint64_t)v93;
    __int16 v103 = 2080;
    int v104 = v95;
    __int16 v105 = 2080;
    long long v106 = v96;
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#I SA controlled by entitlement: %s, SA provisioned: %s, visible: %s, provisioned: %s", buf, 0x2Au);
    int v83 = *v2;
  }
  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v97 = printers::asString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v97;
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#I Camp Only Result: %s", buf, 0xCu);
  }
  RegisteredNetworkInfo::dumpState((RegisteredNetworkInfo *)(a1 + 552), "RegisteredNetworkInfo", (const ctu::OsLogLogger *)v2);
  return (*(uint64_t (**)(void))(**(void **)(a1 + 416) + 72))(*(void *)(a1 + 416));
}

void sub_10089987C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  Registry::createRestModuleOneTimeUseConnection(&v53, *(Registry **)(a1 + 1400));
  ctu::RestModule::connect();
  if (v54) {
    sub_10004D2C8(v54);
  }
  sub_100058DB0(__p, "/cc/props/baseband_activated");
  xpc_object_t v10 = operator new(0x28uLL);
  void *v10 = off_101A145E8;
  v10[1] = a1 + 1504;
  _DWORD v10[2] = a1;
  v10[3] = sub_100899D10;
  void v10[4] = 0;
  int v58 = v10;
  ctu::RestModule::observeProperty();
  sub_10003F600(v57);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1432) = v12;
  long long v13 = *(std::__shared_weak_count **)(a1 + 1440);
  *(void *)(a1 + 1440) = v11;
  if (v13) {
    sub_10004D2C8(v13);
  }
  uint64_t v15 = *a5;
  uint64_t v14 = a5[1];
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1384) = v15;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 1392);
  *(void *)(a1 + 1392) = v14;
  if (v16) {
    sub_10004D2C8(v16);
  }
  uint64_t v18 = *a3;
  uint64_t v17 = a3[1];
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1448) = v18;
  long long v19 = *(std::__shared_weak_count **)(a1 + 1456);
  *(void *)(a1 + 1456) = v17;
  if (v19) {
    sub_10004D2C8(v19);
  }
  uint64_t v21 = *a4;
  std::string::size_type v20 = (uint64_t *)a4[1];
  if (v20) {
    atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1464) = v21;
  std::string v22 = *(std::__shared_weak_count **)(a1 + 1472);
  *(void *)(a1 + 1472) = v20;
  if (v22) {
    sub_10004D2C8(v22);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v20, *(Registry **)(a1 + 1400));
  std::string v24 = ServiceMap;
  if ((v25 & 0x8000000000000000) != 0)
  {
    std::string v26 = (unsigned __int8 *)(v25 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v27 = 5381;
    do
    {
      unint64_t v25 = v27;
      unsigned int v28 = *v26++;
      uint64_t v27 = (33 * v27) ^ v28;
    }
    while (v28);
  }
  std::mutex::lock(ServiceMap);
  v57[0] = v25;
  uint64_t v29 = sub_10004D37C(&v24[1].__m_.__sig, v57);
  if (v29)
  {
    uint64_t v31 = v29[3];
    uint64_t v30 = (std::__shared_weak_count *)v29[4];
    if (v30)
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v24);
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v30);
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v31 = 0;
  }
  std::mutex::unlock(v24);
  uint64_t v30 = 0;
LABEL_29:
  *(void *)(a1 + 1352) = v31;
  uint64_t v32 = *(std::__shared_weak_count **)(a1 + 1360);
  *(void *)(a1 + 1360) = v30;
  if (v32) {
    sub_10004D2C8(v32);
  }
  uint64_t v33 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v33
    || (v34 = *(void *)(a1 + 416), uint64_t v35 = *(void *)(a1 + 8), (v36 = std::__shared_weak_count::lock(v33)) == 0))
  {
    sub_100088B9C();
  }
  char v37 = v36;
  uint64_t v51 = v35;
  int v52 = v36;
  atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v34 + 16))(v34, &v51);
  if (v52) {
    std::__shared_weak_count::__release_weak(v52);
  }
  sub_10004D2C8(v37);
  char v39 = (std::__shared_weak_count *)capabilities::ct::supportsGemini(v38);
  if (v39)
  {
    CFStringRef v41 = (std::mutex *)Registry::getServiceMap(v40, *(Registry **)(a1 + 1400));
    uint64_t v42 = v41;
    if ((v43 & 0x8000000000000000) != 0)
    {
      uint64_t v44 = (unsigned __int8 *)(v43 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v45 = 5381;
      do
      {
        unint64_t v43 = v45;
        unsigned int v46 = *v44++;
        uint64_t v45 = (33 * v45) ^ v46;
      }
      while (v46);
    }
    std::mutex::lock(v41);
    v57[0] = v43;
    int v47 = sub_10004D37C(&v42[1].__m_.__sig, v57);
    if (v47)
    {
      uint64_t v49 = v47[3];
      unint64_t v48 = (std::__shared_weak_count *)v47[4];
      if (v48)
      {
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v42);
        atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v48);
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v49 = 0;
    }
    std::mutex::unlock(v42);
    unint64_t v48 = 0;
LABEL_44:
    *(void *)(a1 + 1368) = v49;
    char v39 = *(std::__shared_weak_count **)(a1 + 1376);
    *(void *)(a1 + 1376) = v48;
    if (v39) {
      sub_10004D2C8(v39);
    }
  }
  if (capabilities::ct::getProvisioningProfileSupport((capabilities::ct *)v39) == 1) {
    sub_100899E4C(a1 + 1508);
  }
  sub_100058DB0(__p, "/cc/props/domestic_roamings");
  int v50 = operator new(0x28uLL);
  *int v50 = off_101A146E8;
  v50[1] = a1 + 1568;
  v50[2] = a1;
  v50[3] = sub_100899F2C;
  v50[4] = 0;
  int v58 = v50;
  ctu::RestModule::observeProperty();
  sub_10003F600(v57);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100899C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100899D10(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1504);
  if (v2 != a2)
  {
    uint64_t v4 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "activated";
      if (!v2) {
        int v5 = "not activated";
      }
      int v7 = 136315138;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Baseband is now %s", (uint8_t *)&v7, 0xCu);
      int v2 = *(unsigned __int8 *)(a1 + 1504);
    }
    if (v2)
    {
      uint64_t v6 = *(NSObject **)(a1 + 24);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v7) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Evaluating operator name after baseband activated", (uint8_t *)&v7, 2u);
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 352))(a1);
    }
  }
}

void sub_100899E4C(uint64_t a1)
{
  sub_100058DB0(&__p, "/cc/props/cellular_plan_bootstrap_status");
  v4[0] = off_101A14668;
  v4[1] = a1;
  void v4[3] = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(v4);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_100899F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100899F2C(uint64_t result, void *a2)
{
  int v2 = (_DWORD *)result;
  if (a2[2] == *(void *)(result + 1584))
  {
    char v3 = (void *)*a2;
    if ((void *)*a2 == a2 + 1) {
      return result;
    }
    uint64_t v4 = *(void **)(result + 1568);
    int v5 = v4;
    while (1)
    {
      BOOL v6 = *((_DWORD *)v3 + 7) == *((_DWORD *)v5 + 7) && *((unsigned __int8 *)v3 + 32) == *((unsigned __int8 *)v5 + 32);
      if (!v6) {
        break;
      }
      int v7 = (void *)v3[1];
      uint64_t v8 = v3;
      if (v7)
      {
        do
        {
          char v3 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          char v3 = (void *)v8[2];
          BOOL v6 = *v3 == (void)v8;
          uint64_t v8 = v3;
        }
        while (!v6);
      }
      int v9 = (void *)v5[1];
      if (v9)
      {
        do
        {
          xpc_object_t v10 = v9;
          int v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          xpc_object_t v10 = (void *)v5[2];
          BOOL v6 = *v10 == (void)v5;
          int v5 = v10;
        }
        while (!v6);
      }
      int v5 = v10;
      if (v3 == a2 + 1) {
        return result;
      }
    }
  }
  else
  {
    uint64_t v4 = *(void **)(result + 1568);
  }
  uint64_t v11 = (void *)(result + 1576);
  if (v4 != (void *)(result + 1576))
  {
    uint64_t v12 = a2 + 1;
    do
    {
      uint64_t v13 = *v12;
      int v14 = *((_DWORD *)v4 + 7);
      if (!*v12) {
        goto LABEL_35;
      }
      uint64_t v15 = v12;
      do
      {
        int v16 = *(_DWORD *)(v13 + 28);
        BOOL v17 = v16 < v14;
        if (v16 >= v14) {
          uint64_t v18 = (uint64_t *)v13;
        }
        else {
          uint64_t v18 = (uint64_t *)(v13 + 8);
        }
        if (!v17) {
          uint64_t v15 = (void *)v13;
        }
        uint64_t v13 = *v18;
      }
      while (*v18);
      if (v15 == v12 || v14 < *((_DWORD *)v15 + 7) || *((unsigned __int8 *)v15 + 32) != *((unsigned __int8 *)v4 + 32))
      {
LABEL_35:
        if (v2[370] == v14) {
          __n128 result = (*(uint64_t (**)(_DWORD *))(*(void *)v2 + 352))(v2);
        }
      }
      long long v19 = (void *)v4[1];
      if (v19)
      {
        do
        {
          std::string::size_type v20 = v19;
          long long v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          std::string::size_type v20 = (void *)v4[2];
          BOOL v6 = *v20 == (void)v4;
          uint64_t v4 = v20;
        }
        while (!v6);
      }
      uint64_t v4 = v20;
    }
    while (v20 != v11);
  }
  return result;
}

uint64_t sub_10089A0DC(uint64_t a1)
{
  uint64_t v55 = 0;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 1416) + 40))(buf);
  sub_1000842D0(&v55, (CFTypeRef *)buf);
  sub_1000577C4((const void **)buf);
  if (v55) {
    char v3 = sub_100081E58;
  }
  else {
    char v3 = 0;
  }
  if (v3)
  {
    LOWORD(v58) = 0;
    ctu::cf::assign((ctu::cf *)&v58, v55, v2);
    MCC::MCC((MCC *)buf, (unsigned __int16)v58);
    MCC::operator=();
    if (SHIBYTE(v63) < 0) {
      operator delete(*(void **)&v61[4]);
    }
  }
  sub_1000570E8((const void **)&v55);
  uint64_t v55 = 0;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 1416) + 40))(buf);
  sub_1000842D0(&v55, (CFTypeRef *)buf);
  sub_1000577C4((const void **)buf);
  if (v55) {
    int v5 = sub_100081E58;
  }
  else {
    int v5 = 0;
  }
  if (v5)
  {
    LOWORD(v58) = 0;
    ctu::cf::assign((ctu::cf *)&v58, v55, v4);
    MNC::MNC((MNC *)buf, (unsigned __int16)v58, (const MCC *)(a1 + 272));
    MCC::operator=();
    if (SHIBYTE(v63) < 0) {
      operator delete(*(void **)&v61[4]);
    }
  }
  BOOL v6 = sub_1000570E8((const void **)&v55);
  int v7 = (const void **)capabilities::ct::supportsGemini((capabilities::ct *)v6);
  if (v7)
  {
    if (*(void *)(a1 + 1368))
    {
      int v8 = *(_DWORD *)(a1 + 1480);
      CFStringRef v9 = @"5GStandaloneEnabled?";
      if (v8 == 2) {
        CFStringRef v9 = @"5GStandaloneEnabled2";
      }
      if (v8 == 1) {
        CFStringRef v10 = @"5GStandaloneEnabled";
      }
      else {
        CFStringRef v10 = v9;
      }
      int v58 = 0;
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 1416) + 40))(buf);
      sub_1000057AC(&v58, (CFTypeRef *)buf);
      sub_1000577C4((const void **)buf);
      if (v58) {
        uint64_t v11 = sub_100084B4C;
      }
      else {
        uint64_t v11 = 0;
      }
      if (v11)
      {
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        PersonalityIdFromSlotId();
        if (isReal())
        {
          uint64_t v12 = *(NSObject **)(a1 + 24);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v14 = HIBYTE(v57);
            uint64_t v15 = v55;
            uint64_t v16 = v56;
            char v59 = 0;
            ctu::cf::assign((ctu::cf *)&v59, v58, v13);
            if ((v14 & 0x80u) == 0) {
              uint64_t v17 = v14;
            }
            else {
              uint64_t v17 = v16;
            }
            uint64_t v18 = &v55;
            if ((v14 & 0x80u) != 0) {
              uint64_t v18 = (unsigned __int16 **)v15;
            }
            if (v17) {
              long long v19 = (const char *)v18;
            }
            else {
              long long v19 = "<invalid>";
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)uint64_t v61 = v19;
            if (v59) {
              std::string::size_type v20 = "true";
            }
            else {
              std::string::size_type v20 = "false";
            }
            *(_WORD *)&v61[8] = 2114;
            *(void *)&v61[10] = v10;
            __int16 v62 = 2080;
            uint64_t v63 = v20;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Migration -- %s : key: %{public}@, value: %s", buf, 0x20u);
          }
          if ((*(unsigned int (**)(void, unsigned __int16 **, const __CFString *, BOOL *, const __CFString *, void, uint64_t, void))(**(void **)(a1 + 1368) + 48))(*(void *)(a1 + 1368), &v55, @"5GStandaloneEnabled", v58, @"RegistrationModel", 0, 1, 0))
          {
            uint64_t v21 = *(NSObject **)(a1 + 24);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              uint64_t v48 = HIBYTE(v57);
              uint64_t v49 = v55;
              uint64_t v50 = v56;
              char v59 = 0;
              ctu::cf::assign((ctu::cf *)&v59, v58, v22);
              if ((v48 & 0x80u) == 0) {
                uint64_t v51 = v48;
              }
              else {
                uint64_t v51 = v50;
              }
              int v52 = &v55;
              if ((v48 & 0x80u) != 0) {
                int v52 = (unsigned __int16 **)v49;
              }
              if (v51) {
                uint64_t v53 = (const char *)v52;
              }
              else {
                uint64_t v53 = "<invalid>";
              }
              uint64_t v54 = "true";
              if (!v59) {
                uint64_t v54 = "false";
              }
              *(_DWORD *)long long buf = 136315394;
              *(void *)uint64_t v61 = v53;
              *(_WORD *)&v61[8] = 2080;
              *(void *)&v61[10] = v54;
              _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s : failed to store 5G Standalone enabled user setting : %s", buf, 0x16u);
            }
          }
        }
        std::string v23 = *(NSObject **)(a1 + 24);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          *(void *)uint64_t v61 = v10;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I Erase : key : %{public}@", buf, 0xCu);
        }
        (*(void (**)(void, const __CFString *, void, const __CFString *, const CFStringRef, const CFStringRef))(**(void **)(a1 + 1416) + 16))(*(void *)(a1 + 1416), v10, 0, @"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
        if (SHIBYTE(v57) < 0) {
          operator delete(v55);
        }
      }
      else
      {
        unint64_t v25 = *(NSObject **)(a1 + 24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          *(void *)uint64_t v61 = v10;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I No migration for existing 5G Standalone enabled user setting with key : %{public}@", buf, 0xCu);
        }
      }
      int v7 = sub_100062778((const void **)&v58);
    }
    else
    {
      std::string v24 = *(NSObject **)(a1 + 24);
      int v7 = (const void **)os_log_type_enabled(v24, OS_LOG_TYPE_FAULT);
      if (v7)
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "PersonalWallet interface not available", buf, 2u);
      }
    }
  }
  if (capabilities::ct::supports5G((capabilities::ct *)v7))
  {
    sub_10089AAEC(a1);
    uint64_t v55 = 0;
    (*(void (**)(unsigned __int16 **__return_ptr))(**(void **)(a1 + 1352) + 80))(&v55);
    std::string v26 = v55;
    if (v55) {
      uint64_t v27 = sub_100080934;
    }
    else {
      uint64_t v27 = 0;
    }
    unsigned int v28 = *(NSObject **)(a1 + 24);
    BOOL v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    if (v27)
    {
      if (v29)
      {
        LOBYTE(v58) = 0;
        if (v26)
        {
          CFTypeID v30 = CFGetTypeID(v26);
          if (v30 == CFBooleanGetTypeID()) {
            ctu::cf::assign((ctu::cf *)&v58, (BOOL *)v26, v31);
          }
        }
        if ((_BYTE)v58) {
          uint64_t v32 = "true";
        }
        else {
          uint64_t v32 = "false";
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)uint64_t v61 = v32;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I Restored carrier 5G Standalone enabled by default value: %s", buf, 0xCu);
        std::string v26 = v55;
      }
      buf[0] = 0;
      if (v26 && (CFTypeID v33 = CFGetTypeID(v26), v33 == CFBooleanGetTypeID()))
      {
        ctu::cf::assign((ctu::cf *)buf, (BOOL *)v26, v34);
        __int16 v35 = buf[0];
      }
      else
      {
        __int16 v35 = 0;
      }
      *(_WORD *)(a1 + 1556) = v35 | 0x100;
    }
    else if (v29)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I Missing carrier 5G Standalone enabled by default value", buf, 2u);
    }
    sub_1000577C4((const void **)&v55);
    uint64_t v55 = 0;
    (*(void (**)(unsigned __int16 **__return_ptr))(**(void **)(a1 + 1352) + 80))(&v55);
    uint64_t v36 = (BOOL *)v55;
    if (v55) {
      char v37 = sub_100080934;
    }
    else {
      char v37 = 0;
    }
    int v38 = *(NSObject **)(a1 + 24);
    BOOL v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
    if (v37)
    {
      if (v39)
      {
        LOBYTE(v58) = 0;
        if (v36 && (CFTypeID v40 = CFGetTypeID(v36), v40 == CFBooleanGetTypeID()))
        {
          ctu::cf::assign((ctu::cf *)&v58, v36, v41);
          if ((_BYTE)v58) {
            uint64_t v42 = "true";
          }
          else {
            uint64_t v42 = "false";
          }
        }
        else
        {
          uint64_t v42 = "false";
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)uint64_t v61 = v42;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I Restored carrier 5G Standalone show switch value: %s", buf, 0xCu);
        uint64_t v36 = (BOOL *)v55;
      }
      buf[0] = 0;
      if (v36 && (CFTypeID v43 = CFGetTypeID(v36), v43 == CFBooleanGetTypeID()))
      {
        ctu::cf::assign((ctu::cf *)buf, v36, v44);
        __int16 v45 = buf[0];
      }
      else
      {
        __int16 v45 = 0;
      }
      *(_WORD *)(a1 + 1558) = v45 | 0x100;
    }
    else if (v39)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I Missing carrier 5G Standalone show switch value", buf, 2u);
    }
    sub_1000577C4((const void **)&v55);
  }
  (*(void (**)(void))(**(void **)(a1 + 416) + 24))(*(void *)(a1 + 416));
  unsigned int v46 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 864);

  return v46(a1);
}

void sub_10089AA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, uint64_t a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100062778(&a16);
  _Unwind_Resume(a1);
}

const void **sub_10089AAEC(uint64_t a1)
{
  uint64_t v17 = 0;
  if (capabilities::ct::supportsGemini((capabilities::ct *)a1))
  {
    if (*(void *)(a1 + 1368))
    {
      long long v19 = 0uLL;
      uint64_t v20 = 0;
      PersonalityIdFromSlotId();
      if (isReal())
      {
        (*(void (**)(const void **__return_ptr))(**(void **)(a1 + 1368) + 64))(&v15);
        sub_1000057AC(&v16, &v15);
        CFNumberRef v2 = v17;
        uint64_t v17 = v16;
        *(void *)long long buf = v2;
        uint64_t v16 = 0;
        sub_100062778((const void **)buf);
        sub_100062778((const void **)&v16);
        sub_1000577C4(&v15);
        if (v17) {
          CFNumberRef v4 = sub_100084B4C;
        }
        else {
          CFNumberRef v4 = 0;
        }
        if (v4)
        {
          buf[0] = 0;
          ctu::cf::assign((ctu::cf *)buf, v17, v3);
          *(_WORD *)(a1 + 1554) = buf[0] | 0x100;
          int v5 = *(NSObject **)(a1 + 24);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v6 = printers::asString();
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v6;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Restored 5G Standalone enabled user setting to %s", buf, 0xCu);
          }
        }
        else
        {
          uint64_t v14 = *(NSObject **)(a1 + 24);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I Clear cached value of 5G Standalone user setting", buf, 2u);
          }
          if (*(unsigned char *)(a1 + 1555)) {
            *(unsigned char *)(a1 + 1555) = 0;
          }
        }
      }
      else
      {
        uint64_t v12 = *(NSObject **)(a1 + 24);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Personality unknown", buf, 2u);
        }
      }
      if (SHIBYTE(v20) < 0) {
        operator delete((void *)v19);
      }
    }
    else
    {
      uint64_t v11 = *(NSObject **)(a1 + 24);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v19) = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "PersonalWallet interface not available", (uint8_t *)&v19, 2u);
      }
    }
  }
  else
  {
    (*(void (**)(BOOL **__return_ptr))(**(void **)(a1 + 1416) + 40))(&v16);
    sub_1000057AC(buf, (CFTypeRef *)&v16);
    *(void *)&long long v19 = v17;
    uint64_t v17 = *(BOOL **)buf;
    *(void *)long long buf = 0;
    sub_100062778((const void **)&v19);
    sub_100062778((const void **)buf);
    sub_1000577C4((const void **)&v16);
    if (v17) {
      int v8 = sub_100084B4C;
    }
    else {
      int v8 = 0;
    }
    if (v8)
    {
      LOBYTE(v19) = 0;
      ctu::cf::assign((ctu::cf *)&v19, v17, v7);
      *(_WORD *)(a1 + 1554) = v19 | 0x100;
      CFStringRef v9 = *(NSObject **)(a1 + 24);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = printers::asString();
        LODWORD(v19) = 136315138;
        *(void *)((char *)&v19 + 4) = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Restored 5G Standalone enabled user setting to %s", (uint8_t *)&v19, 0xCu);
      }
    }
  }
  return sub_100062778((const void **)&v17);
}

void sub_10089AE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, const void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_100062778(&a16);
  _Unwind_Resume(a1);
}

void sub_10089AF00(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)*(unsigned int *)(a1 + 1480);
  if (v1 == 1)
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(v1, *(Registry **)(a1 + 1400));
    CFNumberRef v4 = ServiceMap;
    if (v5 < 0)
    {
      uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v7 = 5381;
      do
      {
        uint64_t v5 = v7;
        unsigned int v8 = *v6++;
        uint64_t v7 = (33 * v7) ^ v8;
      }
      while (v8);
    }
    std::mutex::lock(ServiceMap);
    *(void *)long long buf = v5;
    CFStringRef v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)buf);
    if (v9)
    {
      uint64_t v11 = v9[3];
      uint64_t v10 = (std::__shared_weak_count *)v9[4];
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v4);
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v10);
        char v12 = 0;
        if (!v11) {
          goto LABEL_8;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    std::mutex::unlock(v4);
    uint64_t v10 = 0;
    char v12 = 1;
    if (!v11)
    {
LABEL_8:
      CFBooleanRef v13 = *(NSObject **)(a1 + 24);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Could not migrate last known PLMN", buf, 2u);
      }
      goto LABEL_34;
    }
LABEL_12:
    *(void *)BOOL v29 = 0;
    sub_100058DB0(buf, "RegistrationModel::fLastKnownServingMCC");
    int v14 = (*(uint64_t (**)(uint64_t, uint8_t *, unsigned __int16 *))(*(void *)v11 + 24))(v11, buf, v29);
    int v15 = v14;
    if (SBYTE7(v35) < 0)
    {
      operator delete(*(void **)buf);
      if (!v15) {
        goto LABEL_22;
      }
    }
    else if (!v14)
    {
      goto LABEL_22;
    }
    uint64_t v16 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = *(void *)v29;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Migrating last known MCC from %03lld", buf, 0xCu);
    }
    sub_100058DB0(buf, "RegistrationModel::fLastKnownServingMCC");
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v11 + 96))(v11, buf);
    if (SBYTE7(v35) < 0) {
      operator delete(*(void **)buf);
    }
    MCC::MCC((MCC *)v26, v29[0]);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)a1 + 408))(a1, v26);
    if (v28 < 0) {
      operator delete(__p);
    }
LABEL_22:
    *(void *)unint64_t v25 = 0;
    sub_100058DB0(buf, "RegistrationModel::fLastKnownServingMNC");
    int v17 = (*(uint64_t (**)(uint64_t, uint8_t *, unsigned __int16 *))(*(void *)v11 + 24))(v11, buf, v25);
    int v18 = v17;
    if (SBYTE7(v35) < 0)
    {
      operator delete(*(void **)buf);
      if (!v18) {
        goto LABEL_34;
      }
    }
    else if (!v17)
    {
LABEL_34:
      if ((v12 & 1) == 0) {
        sub_10004D2C8(v10);
      }
      return;
    }
    *(_OWORD *)long long buf = 0u;
    long long v35 = 0u;
    MNC::MNC((MNC *)buf, v25[0], (const MCC *)(a1 + 272));
    long long v19 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int IntegerWidth = MNC::getIntegerWidth((MNC *)buf);
      IntCFDictionaryRef Value = MCC::getIntValue((MCC *)buf);
      *(_DWORD *)CFTypeID v30 = 67109376;
      *(_DWORD *)&uint8_t v30[4] = IntegerWidth;
      __int16 v31 = 1024;
      int v32 = IntValue;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I Migrating last known MNC from %0.*d", v30, 0xEu);
    }
    sub_100058DB0(v30, "RegistrationModel::fLastKnownServingMNC");
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v11 + 96))(v11, v30);
    if (v33 < 0) {
      operator delete(*(void **)v30);
    }
    MCC::MCC((MCC *)&v22, (const MCC *)buf);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 416))(a1, &v22);
    if (v24 < 0) {
      operator delete(v23);
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(*(void **)&buf[8]);
    }
    goto LABEL_34;
  }
}

void sub_10089B334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 65) < 0) {
    operator delete(*(void **)(v32 - 88));
  }
  if ((v31 & 1) == 0) {
    sub_10004D2C8(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_10089B3D8(void *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  JUMPOUT(0x10089B3D0);
}

uint64_t sub_10089B3E8(uint64_t a1)
{
  return ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 1488));
}

uint64_t RegistrationModel::RegistrationModel(uint64_t a1, void *a2, void *a3, dispatch_object_t *a4, uint64_t a5)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v10 = "reg.mdl";
  if (a5 == 2) {
    uint64_t v10 = "reg.mdl.2";
  }
  if (a5 == 1) {
    uint64_t v11 = "reg.mdl.1";
  }
  else {
    uint64_t v11 = v10;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v19, kCtLoggingSystemName, v11);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v20, &v19);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 24), (const ctu::OsLogLogger *)v20);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v20);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v19);
  *(void *)a1 = off_101A14118;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_101504B40;
  RatSelectionType::RatSelectionType((RatSelectionType *)(a1 + 64));
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 72) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 100) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 91) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 180) = 0u;
  MCC::MCC((MCC *)(a1 + 208));
  MNC::MNC((MNC *)(a1 + 240));
  MCC::MCC((MCC *)(a1 + 272));
  MNC::MNC((MNC *)(a1 + 304));
  MCC::MCC((MCC *)(a1 + 336));
  MNC::MNC((MNC *)(a1 + 368));
  *(unsigned char *)(a1 + 400) = 0;
  *(void *)(a1 + 404) = 0;
  (*(void (**)(void, uint64_t))(*(void *)*a3 + 88))(*a3, a5);
  MCC::MCC((MCC *)(a1 + 432));
  MNC::MNC((MNC *)(a1 + 464));
  *(unsigned char *)(a1 + 496) = 0;
  *(unsigned char *)(a1 + 500) = 0;
  *(unsigned char *)(a1 + 504) = 0;
  *(unsigned char *)(a1 + 508) = 0;
  *(void *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  *(_WORD *)(a1 + 521) = 1;
  *(unsigned char *)(a1 + 523) = 0;
  *(void *)(a1 + 524) = 2;
  *(_WORD *)(a1 + 532) = 0;
  *(void *)(a1 + 536) = 0x200000002;
  *(_WORD *)(a1 + 544) = 0;
  RegisteredNetworkInfo::RegisteredNetworkInfo((RegisteredNetworkInfo *)(a1 + 552));
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(void *)(a1 + 1400) = *a2;
  uint64_t v12 = a2[1];
  *(void *)(a1 + 1408) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void))(*(void *)*a3 + 96))();
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_DWORD *)(a1 + 1480) = a5;
  if (a5 > 3) {
    CFBooleanRef v13 = "???";
  }
  else {
    CFBooleanRef v13 = off_101A14758[(int)a5];
  }
  sub_100058DB0(&__p, v13);
  uint64_t v16 = *a4;
  if (*a4) {
    dispatch_retain(*a4);
  }
  ctu::RestModule::RestModule();
  int v14 = (capabilities::ct *)v16;
  if (v16) {
    dispatch_release(v16);
  }
  if (v18 < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 1504) = 0;
  *(_OWORD *)(a1 + 1508) = 0u;
  *(_OWORD *)(a1 + 1524) = 0u;
  *(unsigned char *)(a1 + 1544) = 4;
  *(_DWORD *)(a1 + 1548) = 0;
  *(_WORD *)(a1 + 1552) = 256;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(void *)(a1 + 1554) = 0;
  *(void *)(a1 + 1568) = a1 + 1576;
  *(_DWORD *)(a1 + 1592) = 0;
  *(_OWORD *)(a1 + 1600) = 0u;
  *(_DWORD *)(a1 + 1616) = 0;
  if (capabilities::ct::supports5G(v14)) {
    operator new();
  }
  return a1;
}

void sub_10089B788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v23 = *v21;
  uint64_t *v21 = 0;
  if (v23) {
    operator delete();
  }
  sub_1000346F8(v20, *(void **)(v16 + 1576));
  char v24 = *(void **)(v16 + 1512);
  if (v24)
  {
    *(void *)(v16 + 1520) = v24;
    operator delete(v24);
  }
  unint64_t v25 = *(std::__shared_weak_count **)(v16 + 1496);
  if (v25) {
    sub_10004D2C8(v25);
  }
  std::string v26 = *(std::__shared_weak_count **)(v16 + 1472);
  if (v26) {
    sub_10004D2C8(v26);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v16 + 1456);
  if (v27) {
    sub_10004D2C8(v27);
  }
  char v28 = *(std::__shared_weak_count **)(v16 + 1440);
  if (v28) {
    sub_10004D2C8(v28);
  }
  BOOL v29 = *(std::__shared_weak_count **)(v16 + 1424);
  if (v29) {
    sub_10004D2C8(v29);
  }
  CFTypeID v30 = *(std::__shared_weak_count **)(v16 + 1408);
  if (v30) {
    sub_10004D2C8(v30);
  }
  char v31 = *(std::__shared_weak_count **)(v16 + 1392);
  if (v31) {
    sub_10004D2C8(v31);
  }
  uint64_t v32 = *(std::__shared_weak_count **)(v16 + 1376);
  if (v32) {
    sub_10004D2C8(v32);
  }
  char v33 = *(std::__shared_weak_count **)(v16 + 1360);
  if (v33) {
    sub_10004D2C8(v33);
  }
  sub_100136194(v19);
  if (*(char *)(v16 + 495) < 0) {
    operator delete(*(void **)(v16 + 472));
  }
  if (*(char *)(v16 + 463) < 0) {
    operator delete(*(void **)(v16 + 440));
  }
  CFBooleanRef v34 = *(std::__shared_weak_count **)(v16 + 424);
  if (v34) {
    sub_10004D2C8(v34);
  }
  if (*(char *)(v16 + 399) < 0) {
    operator delete(*(void **)(v16 + 376));
  }
  if (*(char *)(v16 + 367) < 0) {
    operator delete(*(void **)(v16 + 344));
  }
  if (*(char *)(v16 + 335) < 0) {
    operator delete(*(void **)(v16 + 312));
  }
  if (*(char *)(v16 + 303) < 0) {
    operator delete(*(void **)(v16 + 280));
  }
  if (*(char *)(v16 + 271) < 0) {
    operator delete(*(void **)(v16 + 248));
  }
  if (*(char *)(v16 + 239) < 0) {
    operator delete(*(void **)(v16 + 216));
  }
  sub_1000558F4(v18);
  sub_1000558F4(v18 - 2);
  if (*(char *)(v16 + 183) < 0) {
    operator delete(*(void **)(v16 + 160));
  }
  if (*(char *)(v16 + 159) < 0) {
    operator delete(*(void **)(v16 + 136));
  }
  if (*(char *)(v16 + 135) < 0) {
    operator delete(*(void **)(v16 + 112));
  }
  uint64_t v35 = *(void *)(v16 + 40);
  *(void *)(v16 + 40) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  ctu::OsLogLogger::~OsLogLogger(v17);
  uint64_t v36 = *(std::__shared_weak_count **)(v16 + 16);
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  RegistrationModelInterface::~RegistrationModelInterface((RegistrationModelInterface *)v16);
  _Unwind_Resume(a1);
}

void sub_10089B9C4()
{
}

void sub_10089B9CC()
{
}

void sub_10089B9D4()
{
}

void sub_10089B9DC()
{
}

void sub_10089B9E4()
{
}

void sub_10089B9EC()
{
}

void sub_10089B9F4()
{
}

void sub_10089B9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  JUMPOUT(0x10089B9A8);
}

void sub_10089BA1C()
{
}

void sub_10089BA24(uint64_t a1)
{
  *(void *)a1 = off_101A14118;
  uint64_t v2 = *(void *)(a1 + 1600);
  *(void *)(a1 + 1600) = 0;
  if (v2) {
    operator delete();
  }
  sub_1000346F8(a1 + 1568, *(void **)(a1 + 1576));
  CFBooleanRef v3 = *(void **)(a1 + 1512);
  if (v3)
  {
    *(void *)(a1 + 1520) = v3;
    operator delete(v3);
  }
  CFNumberRef v4 = *(std::__shared_weak_count **)(a1 + 1496);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 1472);
  if (v5) {
    sub_10004D2C8(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 1456);
  if (v6) {
    sub_10004D2C8(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 1440);
  if (v7) {
    sub_10004D2C8(v7);
  }
  unsigned int v8 = *(std::__shared_weak_count **)(a1 + 1424);
  if (v8) {
    sub_10004D2C8(v8);
  }
  CFStringRef v9 = *(std::__shared_weak_count **)(a1 + 1408);
  if (v9) {
    sub_10004D2C8(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 1392);
  if (v10) {
    sub_10004D2C8(v10);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 1376);
  if (v11) {
    sub_10004D2C8(v11);
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 1360);
  if (v12) {
    sub_10004D2C8(v12);
  }
  if (*(unsigned char *)(a1 + 1336) && *(char *)(a1 + 1303) < 0) {
    operator delete(*(void **)(a1 + 1280));
  }
  sub_10002B2D8(a1 + 1152);
  sub_10002B28C(a1 + 1008);
  sub_10002B1F4(a1 + 872);
  sub_10002B1A8(a1 + 768);
  sub_10002B1A8(a1 + 664);
  sub_10002B240(a1 + 568);
  if (*(char *)(a1 + 495) < 0) {
    operator delete(*(void **)(a1 + 472));
  }
  if (*(char *)(a1 + 463) < 0) {
    operator delete(*(void **)(a1 + 440));
  }
  CFBooleanRef v13 = *(std::__shared_weak_count **)(a1 + 424);
  if (v13) {
    sub_10004D2C8(v13);
  }
  if (*(char *)(a1 + 399) < 0) {
    operator delete(*(void **)(a1 + 376));
  }
  if (*(char *)(a1 + 367) < 0) {
    operator delete(*(void **)(a1 + 344));
  }
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  sub_1000558F4((const void **)(a1 + 200));
  sub_1000558F4((const void **)(a1 + 184));
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  uint64_t v14 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 24));
  int v15 = *(std::__shared_weak_count **)(a1 + 16);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }

  RegistrationModelInterface::~RegistrationModelInterface((RegistrationModelInterface *)a1);
}

void sub_10089BC78(uint64_t a1)
{
  sub_10089BA24(a1);

  operator delete();
}

void sub_10089BCB0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = MCC::getIntValue((MCC *)(a1 + 336));
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Resetting the last known valid MCC: %03d", (uint8_t *)v3, 8u);
  }
  MCC::MCC((MCC *)v3);
  MCC::operator=();
  if (v5 < 0) {
    operator delete(__p);
  }
}

void sub_10089BD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10089BD9C(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109376;
    v3[1] = MNC::getIntegerWidth((MNC *)(a1 + 368));
    LOWORD(__p) = 1024;
    *(_DWORD *)((char *)&__p + 2) = MCC::getIntValue((MCC *)(a1 + 368));
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Resetting the last known valid MNC: %0.*d", (uint8_t *)v3, 0xEu);
  }
  MNC::MNC((MNC *)v3);
  MCC::operator=();
  if (v5 < 0) {
    operator delete(__p);
  }
}

void sub_10089BE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_10089BEAC(uint64_t a1, MCC *a2)
{
  CFNumberRef v4 = (MCC *)(a1 + 272);
  __n128 result = (const void **)MCC::operator!=();
  if (result)
  {
    uint64_t v6 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = MCC::getIntValue(a2);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Setting last known MCC to %03d", buf, 8u);
    }
    MCC::operator=();
    __int16 valuePtr = MCC::getIntValue(v4);
    CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
    *(void *)long long buf = v7;
    int v8 = *(_DWORD *)(a1 + 1480);
    CFStringRef v9 = @"LastKnownServingMcc?";
    if (v8 == 2) {
      CFStringRef v9 = @"LastKnownServingMcc2";
    }
    if (v8 == 1) {
      CFStringRef v10 = @"LastKnownServingMcc";
    }
    else {
      CFStringRef v10 = v9;
    }
    (*(void (**)(void, const __CFString *, CFNumberRef, const __CFString *, const CFStringRef, const CFStringRef))(**(void **)(a1 + 1416) + 16))(*(void *)(a1 + 1416), v10, v7, @"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    return sub_1000570E8((const void **)buf);
  }
  return result;
}

void sub_10089C024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000570E8((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_10089C040(uint64_t a1, MNC *a2)
{
  CFNumberRef v4 = (MCC *)(a1 + 304);
  __n128 result = (const void **)MCC::operator!=();
  if (result)
  {
    uint64_t v6 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = MNC::getIntegerWidth(a2);
      __int16 v13 = 1024;
      IntCFDictionaryRef Value = MCC::getIntValue(a2);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Setting last known MNC to %0.*d", buf, 0xEu);
    }
    MCC::operator=();
    __int16 valuePtr = MCC::getIntValue(v4);
    CFNumberRef v7 = CFNumberCreate(kCFAllocatorDefault, kCFNumberShortType, &valuePtr);
    *(void *)long long buf = v7;
    int v8 = *(_DWORD *)(a1 + 1480);
    CFStringRef v9 = @"LastKnownServingMnc?";
    if (v8 == 2) {
      CFStringRef v9 = @"LastKnownServingMnc2";
    }
    if (v8 == 1) {
      CFStringRef v10 = @"LastKnownServingMnc";
    }
    else {
      CFStringRef v10 = v9;
    }
    (*(void (**)(void, const __CFString *, CFNumberRef, const __CFString *, const CFStringRef, const CFStringRef))(**(void **)(a1 + 1416) + 16))(*(void *)(a1 + 1416), v10, v7, @"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    return sub_1000570E8((const void **)buf);
  }
  return result;
}

void sub_10089C1D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000570E8((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10089C1F0(unsigned char *a1)
{
  if (a1[82] && a1[75]) {
    return 4;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
  }
}

void sub_10089C22C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
  int v4 = *(_DWORD *)(v2 + 32);
  char v5 = *(NSObject **)(v2 + 24);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4 == v3)
  {
    if (v6)
    {
      int v12 = 136315138;
      uint64_t v13 = asString();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Registration status adjust timer has expired with adjusted status: %s matching current status", (uint8_t *)&v12, 0xCu);
    }
  }
  else
  {
    if (v6)
    {
      int v12 = 136315394;
      uint64_t v13 = asString();
      __int16 v14 = 2080;
      uint64_t v15 = asString();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Adjust timer has expired, changing adjusted registration status from %s to %s", (uint8_t *)&v12, 0x16u);
    }
    *(_DWORD *)(v2 + 32) = v3;
    uint64_t v7 = *(void *)(a1 + 64);
    if (!v7) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
    uint64_t v8 = *(unsigned int *)(v2 + 32);
    if (*(unsigned char *)(v2 + 508)) {
      uint64_t v9 = *(unsigned int *)(v2 + 504);
    }
    else {
      uint64_t v9 = 11;
    }
    if (*(unsigned char *)(v2 + 513)) {
      BOOL v10 = *(unsigned char *)(v2 + 512) != 0;
    }
    else {
      BOOL v10 = 0;
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 112))(v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t))(*(void *)v2 + 648))(v2, v8, v9, v10, v11);
  }
}

void sub_10089C448(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 400);
  if (v2 != a2)
  {
    char v5 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v6 = "true";
      if (v2) {
        uint64_t v7 = "true";
      }
      else {
        uint64_t v7 = "false";
      }
      if (!a2) {
        BOOL v6 = "false";
      }
      int v8 = 136315394;
      uint64_t v9 = v7;
      __int16 v10 = 2080;
      uint64_t v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Changing in home country status from %s to %s", (uint8_t *)&v8, 0x16u);
    }
    *(unsigned char *)(a1 + 400) = a2;
  }
}

uint64_t sub_10089C52C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 404);
}

uint64_t sub_10089C534(uint64_t a1)
{
  return *(unsigned int *)(a1 + 408);
}

void sub_10089C53C(unsigned __int8 *a1, int a2, int a3)
{
  if ((*(unsigned int (**)(unsigned __int8 *))(*(void *)a1 + 536))(a1)) {
    int v6 = a1[1544] == 2;
  }
  else {
    int v6 = 0;
  }
  int v7 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 536))(a1);
  if (v6 != a2)
  {
    int v8 = *((void *)a1 + 3);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = "false";
      if (a2) {
        __int16 v10 = "true";
      }
      else {
        __int16 v10 = "false";
      }
      if (v6) {
        uint64_t v11 = "true";
      }
      else {
        uint64_t v11 = "false";
      }
      int v30 = 136315650;
      uint64_t v31 = (uint64_t)v10;
      __int16 v32 = 2080;
      uint64_t v33 = (uint64_t)v11;
      if (v7) {
        uint64_t v9 = "true";
      }
      __int16 v34 = 2080;
      uint64_t v35 = (uint64_t)v9;
      int v12 = "#I Sending data attached event due to data attached change from %s to %s, dataAttachedRaw %s";
      uint64_t v13 = v8;
      uint32_t v14 = 32;
LABEL_38:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v30, v14);
      goto LABEL_39;
    }
    goto LABEL_39;
  }
  int v15 = a1[1544];
  uint64_t v16 = *((void *)a1 + 3);
  BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if (v15 != a3)
  {
    if (v17)
    {
      if (v6) {
        uint64_t v23 = "true";
      }
      else {
        uint64_t v23 = "false";
      }
      uint64_t v24 = asString();
      uint64_t v25 = asString();
      int v30 = 136315906;
      if (v7) {
        std::string v26 = "true";
      }
      else {
        std::string v26 = "false";
      }
      uint64_t v31 = (uint64_t)v23;
      __int16 v32 = 2080;
      uint64_t v33 = v24;
      __int16 v34 = 2080;
      uint64_t v35 = v25;
      __int16 v36 = 2080;
      char v37 = v26;
      int v12 = "#I Sending data attached event %s due to service provisioned change from %s to %s, dataAttachedRaw %s";
      uint64_t v13 = v16;
      uint32_t v14 = 42;
      goto LABEL_38;
    }
LABEL_39:
    uint64_t v27 = *((void *)a1 + 181);
    uint64_t v28 = *((unsigned int *)a1 + 370);
    uint64_t v29 = (*(uint64_t (**)(unsigned __int8 *))(*(void *)a1 + 528))(a1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 48))(v27, v28, v29);
    return;
  }
  if (v17)
  {
    LOWORD(v30) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Not sending data attached or not attached event", (uint8_t *)&v30, 2u);
    uint64_t v16 = *((void *)a1 + 3);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    char v18 = "false";
    if (a2) {
      uint64_t v19 = "true";
    }
    else {
      uint64_t v19 = "false";
    }
    if (v6) {
      uint64_t v20 = "true";
    }
    else {
      uint64_t v20 = "false";
    }
    int v30 = 136315650;
    uint64_t v31 = (uint64_t)v19;
    __int16 v32 = 2080;
    uint64_t v33 = (uint64_t)v20;
    if (v7) {
      char v18 = "true";
    }
    __int16 v34 = 2080;
    uint64_t v35 = (uint64_t)v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Previous data attached status (%s) matches current (%s), dataAttachedRaw %s", (uint8_t *)&v30, 0x20u);
    uint64_t v16 = *((void *)a1 + 3);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = asString();
    uint64_t v22 = asString();
    int v30 = 136315394;
    uint64_t v31 = v21;
    __int16 v32 = 2080;
    uint64_t v33 = v22;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Previous service provisioned status (%s) matches current (%s)", (uint8_t *)&v30, 0x16u);
  }
}

void sub_10089C8DC(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 76) != a2)
  {
    int v4 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      uint64_t v6 = Lazuli::asString();
      __int16 v7 = 2080;
      uint64_t v8 = Lazuli::asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Changing Lazuli registration status from %s to %s", (uint8_t *)&v5, 0x16u);
    }
    *(_DWORD *)(a1 + 76) = a2;
  }
}

uint64_t sub_10089C9B4(uint64_t a1, int a2, int a3, int a4, int a5)
{
  int v9 = *(unsigned __int8 *)(a1 + 75);
  if (v9 != a2)
  {
    uint64_t v11 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = "true";
      if (v9) {
        uint64_t v13 = "true";
      }
      else {
        uint64_t v13 = "false";
      }
      if (a2) {
        uint32_t v14 = "true";
      }
      else {
        uint32_t v14 = "false";
      }
      int v29 = 136315650;
      int v30 = v13;
      __int16 v31 = 2080;
      __int16 v32 = v14;
      if (!a4) {
        int v12 = "false";
      }
      __int16 v33 = 2080;
      __int16 v34 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Changing IMS registration status from %s to %s (iTech %s)", (uint8_t *)&v29, 0x20u);
    }
    *(unsigned char *)(a1 + 75) = a2;
    if (a2 && *(unsigned char *)(a1 + 80))
    {
      int v15 = *(NSObject **)(a1 + 24);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v29) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Reset IMS registration started", (uint8_t *)&v29, 2u);
      }
      *(unsigned char *)(a1 + 80) = 0;
    }
  }
  int v16 = *(unsigned __int8 *)(a1 + 81);
  if (v16 != a3)
  {
    BOOL v17 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      char v18 = "true";
      if (v16) {
        uint64_t v19 = "true";
      }
      else {
        uint64_t v19 = "false";
      }
      if (!a3) {
        char v18 = "false";
      }
      int v29 = 136315394;
      int v30 = v19;
      __int16 v31 = 2080;
      __int16 v32 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Changing IMS disabled from %s to %s", (uint8_t *)&v29, 0x16u);
    }
    *(unsigned char *)(a1 + 81) = a3;
    if (a3 && *(unsigned char *)(a1 + 80))
    {
      uint64_t v20 = *(NSObject **)(a1 + 24);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v29) = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Reset IMS registration started", (uint8_t *)&v29, 2u);
      }
      *(unsigned char *)(a1 + 80) = 0;
    }
  }
  int v21 = *(unsigned __int8 *)(a1 + 83);
  if (v21 != a5)
  {
    uint64_t v22 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = "true";
      if (v21) {
        uint64_t v24 = "true";
      }
      else {
        uint64_t v24 = "false";
      }
      if (!a5) {
        uint64_t v23 = "false";
      }
      int v29 = 136315394;
      int v30 = v24;
      __int16 v31 = 2080;
      __int16 v32 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Changing IMS iWLAN over cellular from %s to %s", (uint8_t *)&v29, 0x16u);
    }
    *(unsigned char *)(a1 + 83) = a5;
  }
  *(unsigned char *)(a1 + 82) = a4;
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 464))(a1);
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)a1 + 648))(a1, v25, v26, 0, v27);
}

void sub_10089CD48(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 80);
  if (v2 != a2)
  {
    int v5 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = "true";
      if (v2) {
        __int16 v7 = "true";
      }
      else {
        __int16 v7 = "false";
      }
      if (!a2) {
        uint64_t v6 = "false";
      }
      int v8 = 136315394;
      int v9 = v7;
      __int16 v10 = 2080;
      uint64_t v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Changing IMS reg started from %s to %s", (uint8_t *)&v8, 0x16u);
    }
    *(unsigned char *)(a1 + 80) = a2;
  }
}

void sub_10089CE2C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 88) != a2)
  {
    int v4 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      uint64_t v6 = sd::asString();
      __int16 v7 = 2080;
      uint64_t v8 = sd::asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Changing IMS registration service mask from [%s] to [%s]", (uint8_t *)&v5, 0x16u);
    }
    *(_DWORD *)(a1 + 88) = a2;
    *(unsigned char *)(a1 + 85) = a2 & (*(unsigned char *)(a1 + 75) != 0);
  }
}

uint64_t sub_10089CF18(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 93);
}

uint64_t sub_10089CF20(uint64_t a1)
{
  v5[0] = 0;
  char v2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 680))(a1, 11);
  LOBYTE(v5[0]) = v2;
  v5[1] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 704))(a1, 11);
  _DWORD v5[2] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 712))(a1, 11);
  int v3 = *(NSObject **)(a1 + 24);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315650;
    uint64_t v7 = asStringBool(v2);
    __int16 v8 = 2080;
    uint64_t v9 = asString();
    __int16 v10 = 2080;
    uint64_t v11 = asString();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Updating emergency IMS support: LimitedService: %s, BearerSupport: %s, AccessBarred: %s", buf, 0x20u);
  }
  return (*(uint64_t (**)(void, void, _DWORD *))(**(void **)(a1 + 1448) + 296))(*(void *)(a1 + 1448), *(unsigned int *)(a1 + 1480), v5);
}

void sub_10089D104(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 56) != a2)
  {
    int v4 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315394;
      uint64_t v6 = asString();
      __int16 v7 = 2080;
      uint64_t v8 = asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Previous RAT changing from %s to %s", (uint8_t *)&v5, 0x16u);
    }
    *(_DWORD *)(a1 + 56) = a2;
  }
}

uint64_t sub_10089D1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  int v3 = (RatSelectionType *)(a1 + 64);
  uint64_t v4 = RatSelectionType::operator!=();
  if (v4)
  {
    __int16 v7 = *(NSObject **)(a1 + 24);
    int v5 = (const ctu::OsLogLogger *)(a1 + 24);
    uint64_t v6 = v7;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I RAT selection result changing", v9, 2u);
    }
    RatSelectionType::dumpState(v3, v5);
    RatSelectionType::dumpState((RatSelectionType *)&v10, v5);
    *(void *)int v3 = v10;
  }
  return v4;
}

uint64_t sub_10089D288(uint64_t a1, int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 532);
  if (v3 != a2)
  {
    int v5 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = "true";
      if (v3) {
        __int16 v7 = "true";
      }
      else {
        __int16 v7 = "false";
      }
      if (!a2) {
        uint64_t v6 = "false";
      }
      int v12 = 136315394;
      uint64_t v13 = v7;
      __int16 v14 = 2080;
      int v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I IMS voice support on LTE is changing from %s to %s", (uint8_t *)&v12, 0x16u);
    }
    *(unsigned char *)(a1 + 532) = a2;
  }
  uint64_t v8 = *(void *)(a1 + 1448);
  uint64_t v9 = *(unsigned int *)(a1 + 1480);
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 608))(a1)) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = 2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 128))(v8, v9, v10);
}

void sub_10089D3DC(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 1592) == a2) {
    return;
  }
  *(_DWORD *)(a1 + 1592) = a2;
  if (!capabilities::ct::supports5G((capabilities::ct *)a1)) {
    return;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)(a1 + 1400));
  int v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    __int16 v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v15 = v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, &v15);
  if (!v10)
  {
    uint64_t v12 = 0;
    goto LABEL_10;
  }
  uint64_t v12 = v10[3];
  uint64_t v11 = (std::__shared_weak_count *)v10[4];
  if (!v11)
  {
LABEL_10:
    std::mutex::unlock(v5);
    uint64_t v11 = 0;
    goto LABEL_11;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v5);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v11);
LABEL_11:
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
  char v14 = v13;
  if (v11)
  {
    sub_10004D2C8(v11);
    if ((v14 & 1) == 0) {
      return;
    }
  }
  else if (!v13)
  {
    return;
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 352))(a1);
}

void sub_10089D538(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_10089D554@<D0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (!*(_DWORD *)(a1 + 1508))
  {
    if (*(unsigned char *)(a1 + 1544) != 2)
    {
      uint64_t v4 = *(NSObject **)(a1 + 24);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v5) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#N Device is not provisioned, returning empty short operator name", (uint8_t *)&v5, 2u);
      }
      return result;
    }
    if (*(char *)(a1 + 159) < 0)
    {
      if (*(void *)(a1 + 144)) {
        goto LABEL_6;
      }
    }
    else if (*(unsigned char *)(a1 + 159))
    {
LABEL_6:
      std::string::operator=(a2, (const std::string *)(a1 + 136));
      return result;
    }
    (*(void (**)(long long *__return_ptr))(*(void *)a1 + 312))(&v5);
    double result = *(double *)&v5;
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
    a2->__r_.__value_.__r.__words[2] = v6;
  }
  return result;
}

void sub_10089D644(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10089D660(uint64_t a1, const std::string *a2, const std::string *a3, int a4)
{
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  HIDWORD(v28) = 11;
  BYTE8(v33) = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  __int16 v34 = 0;
  std::string::operator=((std::string *)&v24, a2);
  std::string::operator=((std::string *)((char *)&v25 + 8), a3);
  DWORD2(v28) = a4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 424))(&v21, a1);
  if ((_BYTE)v31)
  {
    MCC::operator=();
  }
  else
  {
    MCC::MCC((MCC *)&v29, (const MCC *)&v21);
    LOBYTE(v31) = 1;
  }
  if (v23 < 0) {
    operator delete(__p);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 432))(&v21, a1);
  if (BYTE8(v33))
  {
    MCC::operator=();
  }
  else
  {
    MCC::MCC((MCC *)((char *)&v31 + 8), (const MCC *)&v21);
    BYTE8(v33) = 1;
  }
  if (v23 < 0) {
    operator delete(__p);
  }
  HIDWORD(v28) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 464))(a1);
  sub_1003FB348((char *)__dst, &v24);
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 336))(a1, __dst);
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 && v17 < 0) {
    operator delete(v16);
  }
  if (v15 && v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(v34);
  }
  if (BYTE8(v33) && SBYTE7(v33) < 0) {
    operator delete((void *)v32);
  }
  if ((_BYTE)v31 && SHIBYTE(v30) < 0) {
    operator delete(*((void **)&v29 + 1));
  }
  if (SBYTE7(v28) < 0) {
    operator delete((void *)v27);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(*((void **)&v25 + 1));
  }
  if (SBYTE7(v25) < 0) {
    operator delete((void *)v24);
  }
}

void sub_10089D914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
}

void sub_10089D95C(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2[112])
  {
    long long v31 = *(NSObject **)(a1 + 24);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    long long v32 = "#N Invalid MCC given for operator name update";
    goto LABEL_51;
  }
  if (!a2[152])
  {
    long long v31 = *(NSObject **)(a1 + 24);
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    long long v32 = "#N Invalid MNC given for operator name update";
LABEL_51:
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v32, buf, 2u);
    return;
  }
  uint64_t v4 = (const MCC *)(a2 + 80);
  long long v5 = (const MNC *)(a2 + 120);
  uint64_t v64 = 0;
  long long v63 = 0u;
  memset(__str, 0, sizeof(__str));
  uint64_t v6 = *(void *)(a1 + 1464);
  uint64_t v7 = *(unsigned int *)(a1 + 1480);
  int v8 = *((_DWORD *)a2 + 19);
  MCCAndMNC::MCCAndMNC((MCCAndMNC *)v56, (const MCC *)(a2 + 80), (const MNC *)(a2 + 120));
  int v61 = v8;
  (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, char *, void))(*(void *)v6 + 16))(__str, v6, v7, v56, *((unsigned int *)a2 + 18));
  if (v60 < 0) {
    operator delete(__p);
  }
  if (v58 < 0) {
    operator delete(v57);
  }
  if ((_BYTE)v64)
  {
    uint64_t v9 = __str[23];
    int v10 = __str[23];
    if (__str[23] < 0) {
      uint64_t v9 = *(void *)&__str[8];
    }
    if (v9)
    {
      uint64_t v11 = *(NSObject **)(a1 + 24);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        char v12 = a2 + 24;
        if ((char)a2[47] < 0) {
          char v12 = (void *)*v12;
        }
        int v13 = *(unsigned char **)__str;
        if (v10 >= 0) {
          int v13 = __str;
        }
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&unsigned char buf[14] = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Short name is being overridden from %{public}s to %{public}s", buf, 0x16u);
        if (!(_BYTE)v64) {
          goto LABEL_129;
        }
      }
      std::string::operator=((std::string *)a2 + 1, (const std::string *)__str);
      if (!(_BYTE)v64) {
        goto LABEL_129;
      }
    }
    uint64_t v14 = HIBYTE(v63);
    int v15 = SHIBYTE(v63);
    if (v63 < 0) {
      uint64_t v14 = v63;
    }
    if (v14)
    {
      int v16 = *(NSObject **)(a1 + 24);
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_27;
      }
      char v17 = a2;
      if ((char)a2[23] < 0) {
        char v17 = *(unsigned __int8 **)a2;
      }
      char v18 = *(unsigned char **)&__str[24];
      if (v15 >= 0) {
        char v18 = &__str[24];
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = v17;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Long name is being overridden from %{public}s to %{public}s", buf, 0x16u);
      if ((_BYTE)v64)
      {
LABEL_27:
        std::string::operator=((std::string *)a2, (const std::string *)&__str[24]);
        goto LABEL_28;
      }
LABEL_129:
      sub_10016C840();
    }
  }
LABEL_28:
  int v19 = *((_DWORD *)a2 + 18);
  if (*(_DWORD *)(a1 + 192) != v19)
  {
    char v20 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = asString();
      uint64_t v22 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Operator name source is changing from %s to %s", buf, 0x16u);
      int v19 = *((_DWORD *)a2 + 18);
    }
    *(_DWORD *)(a1 + 192) = v19;
  }
  char v23 = (unsigned __int8 **)(a1 + 112);
  signed __int8 v24 = a2[23];
  if (v24 >= 0) {
    uint64_t v25 = a2[23];
  }
  else {
    uint64_t v25 = *((void *)a2 + 1);
  }
  uint64_t v26 = *(unsigned __int8 *)(a1 + 135);
  int v27 = (char)v26;
  if ((v26 & 0x80u) != 0) {
    uint64_t v26 = *(void *)(a1 + 120);
  }
  if (v25 == v26)
  {
    if (v27 >= 0) {
      long long v28 = (unsigned __int8 *)(a1 + 112);
    }
    else {
      long long v28 = *v23;
    }
    if ((a2[23] & 0x80) != 0)
    {
      __int16 v34 = *(unsigned __int8 **)a2;
      if (!memcmp(*(const void **)a2, v28, *((void *)a2 + 1))) {
        goto LABEL_79;
      }
      long long v33 = *(NSObject **)(a1 + 24);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (!a2[23]) {
      goto LABEL_79;
    }
    long long v29 = a2;
    uint64_t v30 = a2[23];
    while (*v29 == *v28)
    {
      ++v29;
      ++v28;
      if (!--v30) {
        goto LABEL_79;
      }
    }
  }
  long long v33 = *(NSObject **)(a1 + 24);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    if (v24 < 0) {
      __int16 v34 = *(unsigned __int8 **)a2;
    }
    else {
      __int16 v34 = a2;
    }
LABEL_59:
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v34;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I Setting operator name to %{public}s", buf, 0xCu);
  }
LABEL_60:
  std::string::operator=((std::string *)(a1 + 112), (const std::string *)a2);
  if (*(char *)(a1 + 135) < 0)
  {
    sub_10004FC84(__dst, *(void **)(a1 + 112), *(void *)(a1 + 120));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)v23;
    uint64_t v55 = *(void *)(a1 + 128);
  }
  if (SHIBYTE(v55) < 0)
  {
    sub_10004FC84(&v68, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    long long v68 = *(_OWORD *)__dst;
    uint64_t v69 = v55;
  }
  uint64_t v70 = 0;
  if (SHIBYTE(v69) < 0)
  {
    sub_10004FC84(buf, (void *)v68, *((unint64_t *)&v68 + 1));
  }
  else
  {
    *(_OWORD *)long long buf = v68;
    *(void *)&uint8_t buf[16] = v69;
  }
  BOOL v71 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v35 = v70;
    uint64_t v70 = v71;
    v66[0] = v35;
    sub_1000558F4((const void **)v66);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v65 = v70;
  uint64_t v70 = 0;
  sub_1000558F4((const void **)&v70);
  if (SHIBYTE(v69) < 0) {
    operator delete((void *)v68);
  }
  uint64_t v36 = (void *)(a1 + 184);
  if ((void **)(a1 + 184) != &v65)
  {
    *(void *)long long buf = *v36;
    *uint64_t v36 = v65;
    uint64_t v65 = 0;
    sub_1000558F4((const void **)buf);
  }
  sub_1000558F4((const void **)&v65);
  if (SHIBYTE(v55) < 0) {
    operator delete(__dst[0]);
  }
LABEL_79:
  signed __int8 v37 = a2[47];
  if (v37 < 0)
  {
    if (!*((void *)a2 + 4)) {
      goto LABEL_107;
    }
  }
  else if (!a2[47])
  {
    goto LABEL_107;
  }
  int v38 = (const std::string *)(a2 + 24);
  if (v37 >= 0) {
    uint64_t v39 = a2[47];
  }
  else {
    uint64_t v39 = *((void *)a2 + 4);
  }
  uint64_t v40 = *(unsigned __int8 *)(a1 + 159);
  int v41 = (char)v40;
  if ((v40 & 0x80u) != 0) {
    uint64_t v40 = *(void *)(a1 + 144);
  }
  if (v39 != v40)
  {
LABEL_98:
    __int16 v45 = *(NSObject **)(a1 + 24);
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
LABEL_106:
      std::string::operator=((std::string *)(a1 + 136), v38);
      goto LABEL_107;
    }
    if (v37 < 0) {
      unsigned int v46 = (const std::string *)v38->__r_.__value_.__r.__words[0];
    }
    else {
      unsigned int v46 = v38;
    }
LABEL_105:
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v46;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#I Setting operator short name to %{public}s", buf, 0xCu);
    goto LABEL_106;
  }
  if (v41 >= 0) {
    uint64_t v42 = (unsigned __int8 *)(a1 + 136);
  }
  else {
    uint64_t v42 = *(unsigned __int8 **)(a1 + 136);
  }
  if ((a2[47] & 0x80) != 0)
  {
    unsigned int v46 = (const std::string *)v38->__r_.__value_.__r.__words[0];
    if (memcmp(v38->__r_.__value_.__l.__data_, v42, *((void *)a2 + 4)))
    {
      __int16 v45 = *(NSObject **)(a1 + 24);
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_106;
      }
      goto LABEL_105;
    }
  }
  else if (a2[47])
  {
    CFTypeID v43 = a2 + 24;
    uint64_t v44 = a2[47];
    while (*v43 == *v42)
    {
      ++v43;
      ++v42;
      if (!--v44) {
        goto LABEL_107;
      }
    }
    goto LABEL_98;
  }
LABEL_107:
  MCCAndMNC::MCCAndMNC((MCCAndMNC *)buf, v4, v5);
  MCCAndMNC::getStringValue((uint64_t *)v51, v47);
  if (SHIBYTE(v52) < 0)
  {
    sub_10004FC84(v66, v51[0], (unint64_t)v51[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v66 = *(_OWORD *)v51;
    uint64_t v67 = v52;
  }
  uint64_t v65 = 0;
  if (SHIBYTE(v67) < 0)
  {
    sub_10004FC84(&v68, v66[0], (unint64_t)v66[1]);
  }
  else
  {
    long long v68 = *(_OWORD *)v66;
    uint64_t v69 = v67;
  }
  uint64_t v70 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v48 = v65;
    uint64_t v65 = v70;
    BOOL v71 = v48;
    sub_1000558F4((const void **)&v71);
  }
  if (SHIBYTE(v69) < 0) {
    operator delete((void *)v68);
  }
  uint64_t v49 = v65;
  uint64_t v53 = v65;
  uint64_t v65 = 0;
  sub_1000558F4((const void **)&v65);
  if (SHIBYTE(v67) < 0) {
    operator delete(v66[0]);
  }
  uint64_t v50 = (void *)(a1 + 200);
  if ((const void **)(a1 + 200) != &v53)
  {
    *(void *)&long long v68 = *v50;
    *uint64_t v50 = v49;
    uint64_t v53 = 0;
    sub_1000558F4((const void **)&v68);
  }
  sub_1000558F4(&v53);
  if (SHIBYTE(v52) < 0) {
    operator delete(v51[0]);
  }
  if (v75 < 0) {
    operator delete(v74);
  }
  if (v73 < 0) {
    operator delete(*(void **)&buf[8]);
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 352))(a1);
  sub_10013E528((uint64_t)__str);
}

void sub_10089E180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  sub_1000558F4((const void **)(v44 - 176));
  if (*(char *)(v44 - 185) < 0) {
    operator delete(*(void **)(v44 - 208));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_10013E528((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_10089E268(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a2 + 184)) {
    long long v5 = sub_1000810B8;
  }
  else {
    long long v5 = 0;
  }
  if (v5)
  {
    CFStringRef v7 = (const __CFString *)(*(uint64_t (**)(void, void, const __CFString *, const __CFString *, void))(**(void **)(a2 + 1384) + 48))(*(void *)(a2 + 1384), kCBMessageLocalizationTable, @"WIFI_OPERATOR_NAME_WITH_SUFFIX_FORMAT_OBJ_PLACEHOLDER", @"%@ %@", 0);
    if (v7)
    {
      CFStringRef v8 = v7;
      CFStringRef v11 = CFStringCreateWithFormat(0, 0, v7, *(void *)(a2 + 184), *a3);
      CFRelease(v8);
      memset(buf, 0, sizeof(buf));
      uint64_t v13 = 0;
      ctu::cf::assign();
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 16) = v13;
      sub_1000558F4((const void **)&v11);
      return;
    }
    int v10 = *(NSObject **)(a2 + 24);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Unable to get wifi calling string format", buf, 2u);
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(a2 + 24);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Operator name for wifi calling is empty", buf, 2u);
    }
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
}

void sub_10089E3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_1000558F4(&a12);
  _Unwind_Resume(a1);
}

__n128 sub_10089E41C(std::string *a1, uint64_t a2, std::string *this)
{
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v6 = *(const std::string::value_type **)a2;
  }
  if (v5 >= 0) {
    std::string::size_type v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v7 = *(void *)(a2 + 8);
  }
  CFStringRef v8 = (__n128 *)std::string::insert(this, 0, v6, v7);
  __n128 result = *v8;
  *a1 = *(std::string *)v8->n128_u8;
  v8->n128_u64[0] = 0;
  v8->n128_u64[1] = 0;
  v8[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_10089E47C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 1448) + 64))(*(void *)(a1 + 1448), *(unsigned int *)(a1 + 1480), a2);
}

void sub_10089E4B0(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  (*(void (**)(void **__return_ptr))(*a1 + 424))(buf);
  (*(void (**)(void **__return_ptr, void *))(*a1 + 432))(v6, a1);
  formPLMN((const MCC *)buf, (const MNC *)v6);
  if (v7 < 0) {
    operator delete(v6[1]);
  }
  if (v9 < 0) {
    operator delete(buf[1]);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4)
  {
    int v5 = a1[3];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#N Failed to create PLMN", (uint8_t *)buf, 2u);
    }
  }
}

void sub_10089E5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10089E60C(_DWORD *a1, int a2)
{
  if (a2 == 11) {
    a2 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 464))(a1);
  }
  if (a2 == 10)
  {
    if (a1[134] == 1)
    {
      int v3 = (unsigned __int8 *)a1 + 533;
      return *v3 != 0;
    }
    if (a1[135] == 1)
    {
LABEL_5:
      int v3 = (unsigned __int8 *)a1 + 523;
      return *v3 != 0;
    }
  }
  else if (a2 == 7)
  {
    goto LABEL_5;
  }
  return 0;
}

uint64_t sub_10089E6B0(unsigned int *a1, int a2)
{
  if (a2 == 11) {
    a2 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 464))(a1);
  }
  if (a2 == 7) {
    return a1[131];
  }
  if (a2 != 10) {
    return 2;
  }
  uint64_t result = a1[134];
  if (!result)
  {
    if (a1[135] == 1) {
      return a1[131];
    }
    return 0;
  }
  return result;
}

uint64_t sub_10089E744(unsigned int *a1, int a2)
{
  if (a2 == 11) {
    a2 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 464))(a1);
  }
  if (a2 != 10)
  {
    if (a2 == 7) {
      return a1[132];
    }
    return 2;
  }
  unsigned int v4 = a1[134];
  if (v4 == 1) {
    return 0;
  }
  if (v4) {
    return 2;
  }
  if (a1[135] == 1) {
    return a1[132];
  }
  return 1;
}

uint64_t sub_10089E7E8(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 1544) != a2)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(NSObject **)(result + 24);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 136315394;
      uint64_t v20 = asString();
      __int16 v21 = 2080;
      uint64_t v22 = asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Baseband service provisioned state changing from %s to %s", (uint8_t *)&v19, 0x16u);
    }
    (*(void (**)(void, void, BOOL))(**(void **)(v3 + 1448) + 176))(*(void *)(v3 + 1448), *(unsigned int *)(v3 + 1480), a2 == 2);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 536))(v3);
    int v6 = *(unsigned __int8 *)(v3 + 1544);
    if (v6 == 2) {
      int v7 = v5;
    }
    else {
      int v7 = 0;
    }
    *(unsigned char *)(v3 + 1544) = a2;
    sub_10089C53C((unsigned __int8 *)v3, v7, v6);
    if (a2 != 2)
    {
      unsigned int v9 = *(_DWORD *)(v3 + 32) - 7;
      int v10 = (*(uint64_t (**)(void))(**(void **)(v3 + 1432) + 128))(*(void *)(v3 + 1432));
      if (v9 < 0xFFFFFFFD || v10)
      {
        int v12 = *(_DWORD *)(v3 + 32);
        if (v12 == 2) {
          unsigned int v13 = 2;
        }
        else {
          unsigned int v13 = 1;
        }
        if (v12) {
          uint64_t v11 = v13;
        }
        else {
          uint64_t v11 = 0;
        }
      }
      else
      {
        uint64_t v11 = 6;
      }
      uint64_t v14 = *(NSObject **)(v3 + 24);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = asString();
        int v16 = "true";
        if (v9 < 0xFFFFFFFD) {
          int v16 = "false";
        }
        int v19 = 136315394;
        uint64_t v20 = v15;
        __int16 v21 = 2080;
        uint64_t v22 = (uint64_t)v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I Registration status reported is %s, as report emergency only is %s", (uint8_t *)&v19, 0x16u);
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 464))(v3);
      uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 112))(v3);
      CFStringRef v8 = (capabilities::ct *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v3 + 648))(v3, v11, v17, 0, v18);
    }
    uint64_t result = capabilities::ct::supportsVoiceCall(v8);
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 352))(v3);
    }
  }
  return result;
}

uint64_t sub_10089EAFC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1544);
}

uint64_t sub_10089EB04(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1548);
}

uint64_t sub_10089EB0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1548) = a2;
  return result;
}

uint64_t sub_10089EB14(uint64_t result, int a2)
{
  if (a2 != 16)
  {
    char v2 = a2;
    uint64_t v3 = (unsigned char *)result;
    if (*(unsigned __int8 *)(result + 1553) != a2)
    {
      unsigned int v4 = *(NSObject **)(result + 24);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 136315394;
        uint64_t v9 = asString();
        __int16 v10 = 2080;
        uint64_t v11 = asString();
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Phone call type changing from %s to %s", (uint8_t *)&v8, 0x16u);
      }
      v3[1553] = v2;
      uint64_t v5 = (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 72))(v3);
      uint64_t v6 = (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 464))(v3);
      uint64_t v7 = (*(uint64_t (**)(unsigned char *))(*(void *)v3 + 112))(v3);
      return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, void, uint64_t))(*(void *)v3 + 648))(v3, v5, v6, 0, v7);
    }
  }
  return result;
}

uint64_t sub_10089ECD4(uint64_t result, int a2)
{
  int v2 = *(unsigned __int8 *)(result + 1552);
  if (v2 != a2)
  {
    unsigned int v4 = (unsigned char *)result;
    uint64_t v5 = *(NSObject **)(result + 24);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = "true";
      if (v2) {
        uint64_t v7 = "true";
      }
      else {
        uint64_t v7 = "false";
      }
      if (!a2) {
        uint64_t v6 = "false";
      }
      int v11 = 136315394;
      int v12 = v7;
      __int16 v13 = 2080;
      uint64_t v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Call active changing from %s to %s", (uint8_t *)&v11, 0x16u);
    }
    v4[1552] = a2;
    uint64_t v8 = (*(uint64_t (**)(unsigned char *))(*(void *)v4 + 72))(v4);
    uint64_t v9 = (*(uint64_t (**)(unsigned char *))(*(void *)v4 + 464))(v4);
    uint64_t v10 = (*(uint64_t (**)(unsigned char *))(*(void *)v4 + 112))(v4);
    return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, void, uint64_t))(*(void *)v4 + 648))(v4, v8, v9, 0, v10);
  }
  return result;
}

uint64_t sub_10089EE98(uint64_t a1, int *a2)
{
  int v4 = *a2;
  if (v4 == (*(unsigned int (**)(uint64_t))(*(void *)a1 + 656))(a1))
  {
    if (!*(unsigned char *)(a1 + 1561))
    {
      LOWORD(v5) = *((unsigned __int8 *)a2 + 4);
LABEL_9:
      *(_WORD *)(a1 + 1560) = v5 | 0x100;
      return 1;
    }
    int v5 = *((unsigned __int8 *)a2 + 4);
    if (*(unsigned __int8 *)(a1 + 1560) != v5) {
      goto LABEL_9;
    }
    return 0;
  }
  if (!*(unsigned char *)(a1 + 1561)) {
    return 0;
  }
  *(unsigned char *)(a1 + 1561) = 0;
  return 1;
}

uint64_t sub_10089EF40(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1559)) {
    BOOL v1 = *(unsigned char *)(a1 + 1558) != 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (*(unsigned char *)(a1 + 1561))
  {
    BOOL v2 = 0;
  }
  else
  {
    uint64_t v3 = *(unsigned char **)(a1 + 1600);
    if (v3)
    {
      BOOL v2 = v1;
      if (*v3)
      {
        BOOL v2 = v3[1] != 0;
        BOOL v1 = 1;
      }
    }
    else
    {
      BOOL v2 = v1;
    }
    if (*(unsigned char *)(a1 + 1609) && *(unsigned char *)(a1 + 1608)) {
      BOOL v2 = 0;
    }
  }
  SwitchStatus::SwitchStatus((SwitchStatus *)&v5, v1, v2);
  return v5;
}

uint64_t sub_10089EFD8(uint64_t a1)
{
  BOOL v1 = *(unsigned __int8 **)(a1 + 1600);
  if (v1)
  {
    int v2 = *v1;
    if (*v1)
    {
      LODWORD(v1) = v1[1];
      int v2 = 1;
    }
    else
    {
      LODWORD(v1) = 0;
    }
  }
  else
  {
    int v2 = 0;
  }
  return v1 | (v2 << 8);
}

void sub_10089F008(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 1555)) {
    BOOL v2 = *(unsigned __int8 *)(a1 + 1554) == a2;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2)
  {
    unsigned __int16 v5 = *(NSObject **)(a1 + 24);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      uint64_t v7 = "false";
      if (a2) {
        uint64_t v7 = "true";
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Setting 5G Standalone enabled user setting to %s", (uint8_t *)&buf, 0xCu);
    }
    *(_WORD *)(a1 + 1554) = a2 | 0x100;
    if (capabilities::ct::supportsGemini((capabilities::ct *)v6))
    {
      if (*(void *)(a1 + 1368))
      {
        long long buf = 0uLL;
        uint64_t v25 = 0;
        PersonalityIdFromSlotId();
        if (isReal())
        {
          uint64_t v8 = &kCFBooleanTrue;
          if (!a2) {
            uint64_t v8 = &kCFBooleanFalse;
          }
          CFBooleanRef v9 = *v8;
          *(void *)__int16 v21 = 0;
          sub_100062778((const void **)v21);
          CFBooleanRef v20 = v9;
          *(void *)__int16 v21 = 0;
          sub_100062778((const void **)v21);
          if ((*(unsigned int (**)(void, long long *, const __CFString *, CFBooleanRef, const __CFString *, void, uint64_t, void))(**(void **)(a1 + 1368) + 48))(*(void *)(a1 + 1368), &buf, @"5GStandaloneEnabled", v9, @"RegistrationModel", 0, 1, 0))
          {
            uint64_t v10 = *(NSObject **)(a1 + 24);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              uint64_t v18 = *((void *)&buf + 1);
              p_long long buf = (const char *)buf;
              if (v25 >= 0)
              {
                uint64_t v18 = HIBYTE(v25);
                p_long long buf = (const char *)&buf;
              }
              BOOL v2 = v18 == 0;
              int v19 = "false";
              if (v2) {
                p_long long buf = "<invalid>";
              }
              if (a2) {
                int v19 = "true";
              }
              *(_DWORD *)__int16 v21 = 136315394;
              *(void *)&v21[4] = p_buf;
              __int16 v22 = 2080;
              char v23 = v19;
              _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "%s : failed to store 5G Standalone enabled user setting : %s", v21, 0x16u);
            }
          }
          sub_100062778((const void **)&v20);
        }
        else
        {
          int v16 = *(NSObject **)(a1 + 24);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)__int16 v21 = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Personality unknown", v21, 2u);
          }
        }
        if (SHIBYTE(v25) < 0) {
          operator delete((void *)buf);
        }
      }
      else
      {
        uint64_t v15 = *(NSObject **)(a1 + 24);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
        {
          LOWORD(buf) = 0;
          _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "PersonalWallet interface not available", (uint8_t *)&buf, 2u);
        }
      }
    }
    else
    {
      CFStringRef v11 = @"5GStandaloneEnabled?";
      int v12 = *(_DWORD *)(a1 + 1480);
      if (v12 == 2) {
        CFStringRef v11 = @"5GStandaloneEnabled2";
      }
      if (v12 == 1) {
        CFStringRef v13 = @"5GStandaloneEnabled";
      }
      else {
        CFStringRef v13 = v11;
      }
      uint64_t v14 = &kCFBooleanTrue;
      if (!a2) {
        uint64_t v14 = &kCFBooleanFalse;
      }
      (*(void (**)(void, const __CFString *, const CFBooleanRef, const __CFString *, const CFStringRef, const CFStringRef))(**(void **)(a1 + 1416) + 16))(*(void *)(a1 + 1416), v13, *v14, @"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    }
  }
}

void sub_10089F368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10089F39C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1561))
  {
    BOOL v2 = *(NSObject **)(a1 + 24);
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT)
      || (*(unsigned char *)(a1 + 1560) ? (uint64_t v3 = "enabled") : (uint64_t v3 = "disabled"),
          int v16 = 136315138,
          uint64_t v17 = v3,
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I 5G Standalone %s by MDM", (uint8_t *)&v16, 0xCu), *(unsigned char *)(a1 + 1561)))
    {
      int v4 = *(unsigned __int8 *)(a1 + 1560);
LABEL_8:
      int v5 = 1;
      return v4 | (v5 << 8);
    }
    goto LABEL_40;
  }
  uint64_t v7 = *(unsigned char **)(a1 + 1600);
  if (v7 && *v7 && !v7[1])
  {
    uint64_t v15 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I 5G Standalone disabled by entitlement", (uint8_t *)&v16, 2u);
    }
    int v4 = 0;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 1609) && *(unsigned char *)(a1 + 1608))
  {
    uint64_t v8 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I 5G Standalone enabled by enterprise slicing", (uint8_t *)&v16, 2u);
    }
    int v4 = 1;
    goto LABEL_8;
  }
  if ((!*(unsigned char *)(a1 + 1559) || *(unsigned char *)(a1 + 1558)) && *(unsigned char *)(a1 + 1555))
  {
    CFBooleanRef v9 = *(NSObject **)(a1 + 24);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)
      || (*(unsigned char *)(a1 + 1554) ? (uint64_t v10 = "true") : (uint64_t v10 = "false"),
          int v16 = 136315138,
          uint64_t v17 = v10,
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I 5G Standalone enabled user setting: %s", (uint8_t *)&v16, 0xCu), *(unsigned char *)(a1 + 1555)))
    {
      int v4 = *(unsigned __int8 *)(a1 + 1554);
      goto LABEL_8;
    }
LABEL_40:
    sub_10016C840();
  }
  int v11 = *(unsigned __int8 *)(a1 + 1557);
  int v12 = *(NSObject **)(a1 + 24);
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (!v13
      || (*(unsigned char *)(a1 + 1556) ? (uint64_t v14 = "true") : (uint64_t v14 = "false"),
          int v16 = 136315138,
          uint64_t v17 = v14,
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I 5G Standalone enabled carrier default: %s", (uint8_t *)&v16, 0xCu), *(unsigned char *)(a1 + 1557)))
    {
      int v4 = *(unsigned __int8 *)(a1 + 1556);
      goto LABEL_8;
    }
    goto LABEL_40;
  }
  if (v13)
  {
    LOWORD(v16) = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#N Carrier bundle not yet setup to determine 5G Standalone enabled support", (uint8_t *)&v16, 2u);
  }
  int v4 = 0;
  int v5 = 0;
  return v4 | (v5 << 8);
}

void sub_10089F66C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(unsigned char *)(a1 + 1555))
  {
    BOOL v2 = *(NSObject **)(a1 + 24);
    a1 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    if (!a1
      || (*(unsigned char *)(v1 + 1554) ? (uint64_t v3 = "true") : (uint64_t v3 = "false"),
          LODWORD(buf) = 136315138,
          *(void *)((char *)&buf + 4) = v3,
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Resetting 5G Standalone enabled user setting of: %s", (uint8_t *)&buf, 0xCu), *(unsigned char *)(v1 + 1555)))
    {
      *(unsigned char *)(v1 + 1555) = 0;
    }
  }
  if (capabilities::ct::supportsGemini((capabilities::ct *)a1))
  {
    if (*(void *)(v1 + 1368))
    {
      long long buf = 0uLL;
      uint64_t v19 = 0;
      PersonalityIdFromSlotId();
      if (isReal())
      {
        if (!(*(unsigned int (**)(void, long long *, const __CFString *, const __CFString *, void, uint64_t))(**(void **)(v1 + 1368) + 72))(*(void *)(v1 + 1368), &buf, @"5GStandaloneEnabled", @"RegistrationModel", 0, 1))goto LABEL_30; {
        int v4 = *(NSObject **)(v1 + 24);
        }
        if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
          goto LABEL_30;
        }
        uint64_t v5 = HIBYTE(v19);
        if (v19 < 0) {
          uint64_t v5 = *((void *)&buf + 1);
        }
        p_long long buf = (const char *)&buf;
        if (v19 < 0) {
          p_long long buf = (const char *)buf;
        }
        if (v5) {
          uint64_t v7 = p_buf;
        }
        else {
          uint64_t v7 = "<invalid>";
        }
        int v16 = 136315138;
        uint64_t v17 = v7;
        uint64_t v8 = "%s : failed to remove 5G Standalone key";
        CFBooleanRef v9 = v4;
        uint32_t v10 = 12;
      }
      else
      {
        uint64_t v15 = *(NSObject **)(v1 + 24);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
          goto LABEL_30;
        }
        LOWORD(v16) = 0;
        uint64_t v8 = "Personality unknown";
        CFBooleanRef v9 = v15;
        uint32_t v10 = 2;
      }
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v16, v10);
LABEL_30:
      if (SHIBYTE(v19) < 0) {
        operator delete((void *)buf);
      }
      return;
    }
    uint64_t v14 = *(NSObject **)(v1 + 24);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf) = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "PersonalWallet interface not available", (uint8_t *)&buf, 2u);
    }
  }
  else
  {
    int v11 = *(_DWORD *)(v1 + 1480);
    CFStringRef v12 = @"5GStandaloneEnabled?";
    if (v11 == 2) {
      CFStringRef v12 = @"5GStandaloneEnabled2";
    }
    if (v11 == 1) {
      CFStringRef v13 = @"5GStandaloneEnabled";
    }
    else {
      CFStringRef v13 = v12;
    }
    (*(void (**)(void, const __CFString *, void, const __CFString *, const CFStringRef, const CFStringRef))(**(void **)(v1 + 1416) + 16))(*(void *)(v1 + 1416), v13, 0, @"com.apple.commcenter", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  }
}

void sub_10089F934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10089F95C(uint64_t a1, int a2)
{
  uint64_t result = 0;
  if (a2 == -1 || a2 == 5) {
    return result;
  }
  if (!*(void *)(a1 + 1600)) {
    goto LABEL_8;
  }
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 1352) + 80))(cf);
  int v4 = *(BOOL **)cf;
  LOBYTE(v43) = 0;
  if (*(void *)cf)
  {
    CFTypeID v5 = CFGetTypeID(*(CFTypeRef *)cf);
    if (v5 == CFBooleanGetTypeID()) {
      ctu::cf::assign((ctu::cf *)&v43, v4, v6);
    }
  }
  int v7 = v43;
  sub_1000577C4((const void **)cf);
  uint64_t v8 = *(unsigned char **)(a1 + 1600);
  int v9 = *v8;
  *uint64_t v8 = v7;
  if (v9 != v7)
  {
    int v11 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v12 = "controlled";
      if (!v7) {
        CFStringRef v12 = "NOT controlled";
      }
      *(_DWORD *)CFTypeRef cf = 136315138;
      *(void *)&cf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I 5G Standalone is now %s by entitlement", cf, 0xCu);
    }
    int v10 = 1;
  }
  else
  {
LABEL_8:
    int v10 = 0;
  }
  unsigned __int16 v44 = *(_WORD *)(a1 + 1556);
  if (v44 >= 0x100u) {
    *(unsigned char *)(a1 + 1557) = 0;
  }
  CFTypeRef v43 = 0;
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 1352) + 80))(&v43);
  CFStringRef v13 = (BOOL *)v43;
  if (v43) {
    uint64_t v14 = sub_100080934;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14)
  {
    cf[0] = 0;
    if (v43)
    {
      CFTypeID v15 = CFGetTypeID(v43);
      if (v15 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)cf, v13, v16);
      }
    }
    int v17 = cf[0];
    if (HIBYTE(v44))
    {
      if (v44 == cf[0]) {
        goto LABEL_34;
      }
      uint64_t v18 = *(NSObject **)(a1 + 24);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      uint64_t v19 = printers::asString();
      uint64_t v20 = asString();
      __int16 v21 = "true";
      *(_DWORD *)CFTypeRef cf = 136315650;
      *(void *)&cf[4] = v19;
      __int16 v46 = 2080;
      if (!v17) {
        __int16 v21 = "false";
      }
      int v47 = v21;
      __int16 v48 = 2080;
      uint64_t v49 = v20;
      __int16 v22 = "#I Resetting previous 5G Standalone enabled carrier support (%s) to %s due to bundle change type: %s";
      char v23 = v18;
      uint32_t v24 = 32;
    }
    else
    {
      uint64_t v25 = *(NSObject **)(a1 + 24);
      if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
LABEL_34:
        *(_WORD *)(a1 + 1556) = v17 | 0x100;
        goto LABEL_35;
      }
      uint64_t v26 = "true";
      if (!v17) {
        uint64_t v26 = "false";
      }
      *(_DWORD *)CFTypeRef cf = 136315138;
      *(void *)&cf[4] = v26;
      __int16 v22 = "#I Using carrier 5G Standalone enabled by default value: %s";
      char v23 = v25;
      uint32_t v24 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v22, cf, v24);
    goto LABEL_34;
  }
LABEL_35:
  sub_1000577C4(&v43);
  unsigned __int16 v42 = *(_WORD *)(a1 + 1558);
  if (v42 >= 0x100u) {
    *(unsigned char *)(a1 + 1559) = 0;
  }
  CFTypeRef v43 = 0;
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 1352) + 80))(&v43);
  int v27 = (BOOL *)v43;
  if (v43) {
    long long v28 = sub_100080934;
  }
  else {
    long long v28 = 0;
  }
  if (!v28) {
    goto LABEL_57;
  }
  cf[0] = 0;
  if (v43 && (CFTypeID v29 = CFGetTypeID(v43), v29 == CFBooleanGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)cf, v27, v30);
    int v31 = cf[0];
  }
  else
  {
    int v31 = 0;
  }
  if (v42 >= 0x100u)
  {
    if (v31 == v42) {
      goto LABEL_56;
    }
    signed __int8 v37 = *(NSObject **)(a1 + 24);
    if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_56;
    }
    uint64_t v38 = printers::asString();
    uint64_t v39 = asString();
    uint64_t v40 = "true";
    *(_DWORD *)CFTypeRef cf = 136315650;
    *(void *)&cf[4] = v38;
    __int16 v46 = 2080;
    if (!v31) {
      uint64_t v40 = "false";
    }
    int v47 = v40;
    __int16 v48 = 2080;
    uint64_t v49 = v39;
    __int16 v34 = "#I Resetting previous 5G Standalone show switch value (%s) to %s due to bundle change type: %s";
    uint64_t v35 = v37;
    uint32_t v36 = 32;
    goto LABEL_55;
  }
  long long v32 = *(NSObject **)(a1 + 24);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    long long v33 = "true";
    if (!v31) {
      long long v33 = "false";
    }
    *(_DWORD *)CFTypeRef cf = 136315138;
    *(void *)&cf[4] = v33;
    __int16 v34 = "#I Using carrier 5G Standalone show switch value: %s";
    uint64_t v35 = v32;
    uint32_t v36 = 12;
LABEL_55:
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v34, cf, v36);
  }
LABEL_56:
  *(_WORD *)(a1 + 1558) = v31 | 0x100;
LABEL_57:
  sub_1000577C4(&v43);
  if (HIBYTE(v44) && *(unsigned char *)(a1 + 1557))
  {
    if (v44 != *(unsigned __int8 *)(a1 + 1556)) {
      return 1;
    }
  }
  else if ((HIBYTE(v44) != 0) != (*(unsigned char *)(a1 + 1557) != 0))
  {
    return 1;
  }
  int v41 = (HIBYTE(v42) != 0) ^ (*(unsigned char *)(a1 + 1559) != 0);
  if (HIBYTE(v42))
  {
    if (*(unsigned char *)(a1 + 1559)) {
      int v41 = v42 != *(unsigned __int8 *)(a1 + 1558);
    }
  }
  return v10 | v41;
}

void sub_10089FEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000577C4((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10089FF10(capabilities::ct *a1)
{
  uint64_t result = capabilities::ct::supportsGemini(a1);
  if (result)
  {
    uint64_t result = capabilities::ct::supports5G((capabilities::ct *)result);
    if (result)
    {
      unsigned __int16 v3 = (*(uint64_t (**)(capabilities::ct *))(*(void *)a1 + 832))(a1);
      char v4 = v3;
      unsigned int v5 = v3;
      sub_10089AAEC((uint64_t)a1);
      unsigned __int16 v6 = (*(uint64_t (**)(capabilities::ct *))(*(void *)a1 + 832))(a1);
      char v7 = v6;
      unsigned int v8 = v6;
      uint64_t result = (v5 > 0xFF) ^ (v6 > 0xFFu);
      if (v5 >= 0x100 && v8 >= 0x100) {
        return v4 != v7;
      }
    }
  }
  return result;
}

const void **sub_10089FFFC(uint64_t a1)
{
  int v9 = 0;
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 1352) + 80))(buf);
  sub_100056248(&v9, (CFTypeRef *)buf);
  sub_1000577C4((const void **)buf);
  if (v9) {
    BOOL v2 = sub_1000810B8;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    unsigned __int16 v3 = (uint64_t *)(a1 + 184);
    sub_100083EB8((const void **)(a1 + 184), &v9);
    char v4 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *v3;
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Operator name for wifi calling from cb: %{public}@", buf, 0xCu);
    }
  }
  else
  {
    unsigned __int16 v6 = *(NSObject **)(a1 + 24);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Clearing operator name for wifi calling", buf, 2u);
    }
    uint64_t v7 = *(void *)(a1 + 184);
    *(void *)(a1 + 184) = 0;
    *(void *)long long buf = v7;
    sub_1000558F4((const void **)buf);
  }
  return sub_1000558F4(&v9);
}

void sub_1008A0184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000577C4((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_1008A01A0(void *a1, uint64_t a2)
{
  if (!a1[200]) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = v3;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < 15;
      if (v7 >= 15) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != v3 && *(int *)(v6 + 32) <= 15)
    {
      uint64_t v11 = *(void *)(v6 + 40);
      uint64_t v10 = *(void *)(v6 + 48);
      while (v11 != v10)
      {
        if (*(unsigned char *)(v11 + 57) && *(unsigned char *)(v11 + 56))
        {
          int v12 = 1;
          goto LABEL_18;
        }
        v11 += 64;
      }
    }
  }
  int v12 = 0;
LABEL_18:
  unsigned __int16 v13 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 832))(a1, v3);
  uint64_t v14 = a1[200];
  int v15 = *(unsigned __int8 *)(v14 + 1);
  *(unsigned char *)(v14 + 1) = v12;
  if (v15 != v12) {
    return 1;
  }
  unsigned __int16 v16 = v13;
  unsigned __int16 v17 = (*(uint64_t (**)(void *))(*a1 + 832))(a1);
  unsigned __int8 v18 = v17;
  unsigned int v19 = v17;
  BOOL result = (v16 > 0xFFu) ^ (v17 > 0xFFu);
  if (v16 >= 0x100u && v19 >= 0x100) {
    return v16 != v18;
  }
  return result;
}

uint64_t sub_1008A0300(_DWORD *a1, _DWORD *a2)
{
  unsigned __int16 v4 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 832))(a1);
  unsigned __int8 v5 = v4;
  unsigned int v6 = v4;
  a1[402] = *a2;
  unsigned __int16 v7 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 832))(a1);
  if (v7 >= 0x100u) {
    unsigned int v8 = v5 != v7;
  }
  else {
    unsigned int v8 = (v6 > 0xFF) ^ (v7 > 0xFFu);
  }
  if (v6 >= 0x100) {
    return v8;
  }
  else {
    return (v6 > 0xFF) ^ (v7 > 0xFFu);
  }
}

void sub_1008A03D8(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  *(unsigned char *)(a1 + 1616) = a2;
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, *(Registry **)(a1 + 1400));
  unsigned __int8 v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    unsigned __int16 v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v15 = v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, &v15);
  if (v10)
  {
    uint64_t v12 = v10[3];
    uint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v11 = 0;
  char v13 = 1;
LABEL_9:
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)a1 + 352))(a1);
  }
}

void sub_1008A0518(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008A0534(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = (uint64_t *)*a2;
  *(_DWORD *)(a1 + 1612) = v3;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)(a1 + 1400));
  unsigned __int8 v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    unsigned __int16 v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v15 = v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, &v15);
  if (v10)
  {
    uint64_t v12 = v10[3];
    uint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v11 = 0;
  char v13 = 1;
LABEL_9:
  int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12);
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)a1 + 352))(a1);
  }
}

void sub_1008A0678(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008A0694(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 1618) = a2;
  return result;
}

uint64_t sub_1008A069C(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 1618);
}

BOOL sub_1008A06A4(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 64))(a1) == 4;
}

uint64_t sub_1008A06E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 75);
}

uint64_t sub_1008A06EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_1008A06F4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t sub_1008A06FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_1008A0704(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 85);
}

uint64_t sub_1008A070C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 92);
}

uint64_t sub_1008A0714(uint64_t result, char a2)
{
  *(unsigned char *)(result + 92) = a2;
  return result;
}

uint64_t sub_1008A071C(uint64_t result, char a2, char a3)
{
  *(unsigned char *)(result + 93) = a2;
  *(unsigned char *)(result + 94) = a3;
  return result;
}

uint64_t sub_1008A0728(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 84);
}

uint64_t sub_1008A0730(uint64_t result, char a2)
{
  *(unsigned char *)(result + 84) = a2;
  return result;
}

uint64_t sub_1008A0738(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1008A0740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t sub_1008A0748(uint64_t a1)
{
  return *(unsigned int *)(a1 + 192);
}

void sub_1008A0750(uint64_t a1@<X0>, MCC *a2@<X8>)
{
}

void sub_1008A075C(uint64_t a1@<X0>, MCC *a2@<X8>)
{
}

uint64_t sub_1008A0768(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_1008A0770(uint64_t result, char a2)
{
  *(unsigned char *)(result + 72) = a2;
  return result;
}

uint64_t sub_1008A0778(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 72);
}

uint64_t sub_1008A0780(uint64_t result, char a2)
{
  *(unsigned char *)(result + 73) = a2;
  return result;
}

uint64_t sub_1008A0788(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 73);
}

uint64_t sub_1008A0790(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void *sub_1008A0798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL result = sub_1003FB56C((void *)a2, *(const void **)(a1 + 1512), *(void *)(a1 + 1520), (uint64_t)(*(void *)(a1 + 1520) - *(void *)(a1 + 1512)) >> 2);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 1536);
  return result;
}

char *sub_1008A07E4(uint64_t a1, uint64_t a2)
{
  BOOL result = (char *)(a1 + 1512);
  if (result != (char *)a2) {
    BOOL result = sub_10008A534(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  *(_DWORD *)(a1 + 1536) = *(_DWORD *)(a2 + 24);
  return result;
}

void sub_1008A082C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1008A08AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008A08E8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1008A0920(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1008A0950(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1008A0998()
{
}

__n128 sub_1008A09AC(uint64_t a1)
{
  char v2 = (char *)operator new(0x28uLL);
  *(void *)char v2 = off_101A145E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1008A0A00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A145E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1008A0A38(void *a1, xpc *this, BOOL a3)
{
  unsigned __int16 v4 = (unsigned char *)a1[1];
  int v5 = *v4;
  *unsigned __int16 v4 = xpc::dyn_cast_or_default(this, 0, a3);
  unint64_t v6 = (uint64_t (*)(void *, BOOL))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    unint64_t v6 = *(uint64_t (**)(void *, BOOL))(*v8 + v6);
  }

  return v6(v8, v5 != 0);
}

uint64_t sub_1008A0AD4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008A0B14()
{
}

void sub_1008A0B24()
{
}

void *sub_1008A0B38(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A14668;
  result[1] = v3;
  return result;
}

uint64_t sub_1008A0B80(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A14668;
  a2[1] = v2;
  return result;
}

xpc_type_t sub_1008A0BAC(uint64_t a1, xpc_object_t *a2)
{
  return sub_10041DCE4((int **)(a1 + 8), a2);
}

uint64_t sub_1008A0BB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008A0BF4()
{
}

void sub_1008A0C04()
{
}

__n128 sub_1008A0C18(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A146E8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1008A0C6C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A146E8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1008A0CA4(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  unsigned __int16 v4 = v3 + 1;
  int v5 = (void *)v3[1];
  unsigned int v9 = (void **)*v3;
  uint64_t v10 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v10;
    void *v3 = v4;
    *unsigned __int16 v4 = 0;
    _DWORD v3[2] = 0;
  }
  else
  {
    unsigned int v9 = &v10;
  }
  sub_10003447C((uint64_t)v3, a2);
  unint64_t v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    unint64_t v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_1000346F8((uint64_t)&v9, v10);
}

void sub_1008A0D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_1008A0D7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008A0DBC()
{
}

uint64_t sub_1008A0DC8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    MCC::operator=();
    MCC::operator=();
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  }
  else
  {
    sub_1003A3838(a1, a2);
    *(unsigned char *)(a1 + 88) = 1;
  }
  return a1;
}

uint64_t sub_1008A0E38(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 96))
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    MCC::operator=();
    MCC::operator=();
    int v4 = *(_DWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 88) = v4;
  }
  else
  {
    sub_1003A38B4(a1, a2);
    *(unsigned char *)(a1 + 96) = 1;
  }
  return a1;
}

uint64_t sub_1008A0EB0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 96))
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    MCC::operator=();
    MCC::operator=();
    int v4 = *(_DWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_DWORD *)(a1 + 88) = v4;
  }
  else
  {
    sub_1003A39CC(a1, a2);
    *(unsigned char *)(a1 + 96) = 1;
  }
  return a1;
}

uint64_t sub_1008A0F28(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 136))
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    MCC::operator=();
    MCC::operator=();
    long long v4 = *(_OWORD *)(a2 + 88);
    long long v5 = *(_OWORD *)(a2 + 104);
    long long v6 = *(_OWORD *)(a2 + 116);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 116) = v6;
    *(_OWORD *)(a1 + 104) = v5;
    *(_OWORD *)(a1 + 88) = v4;
  }
  else
  {
    sub_1003A3938(a1, a2);
    *(unsigned char *)(a1 + 136) = 1;
  }
  return a1;
}

void sub_1008A0FB0()
{
}

void sub_1008A1018()
{
}

uint64_t sub_1008A103C(uint64_t a1, void *a2)
{
  long long v4 = (ctu::OsLogLogger *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v7, kCtLoggingSystemName, "reg.time");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v8, &v7);
  ctu::OsLogLogger::OsLogLogger(v4, (const ctu::OsLogLogger *)v8);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  *(void *)a1 = off_101A14788;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 45) = 0;
  *(_DWORD *)(a1 + 72) = -1;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 96) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1008A1134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  RegistrationTimeInterface::~RegistrationTimeInterface(v2);
  _Unwind_Resume(a1);
}

__n128 sub_1008A1168@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(a2 + 32) = result;
  *(void *)(a2 + 48) = *(void *)(a1 + 72);
  return result;
}

uint64_t sub_1008A1188(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  long long v5 = a2[2];
  uint64_t v6 = (uint64_t *)*((unsigned int *)a2 + 12);
  *(_DWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 24) = v3;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v6, *(Registry **)(a1 + 88));
  uint64_t v8 = ServiceMap;
  if ((v9 & 0x8000000000000000) != 0)
  {
    uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      unint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v18 = v9;
  char v13 = sub_10004D37C(&v8[1].__m_.__sig, &v18);
  if (v13)
  {
    uint64_t v15 = v13[3];
    int v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v16 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  int v14 = 0;
  char v16 = 1;
LABEL_9:
  *(_DWORD *)(a1 + 80) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 88))(v15);
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
}

void sub_1008A12DC(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008A12F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 48) = a2;
  return result;
}

uint64_t sub_1008A1300(uint64_t result, unsigned int a2)
{
  *(_DWORD *)(result + 72) = a2;
  if (a2 <= 1) {
    *(unsigned char *)(result + 52) = a2 == 1;
  }
  return result;
}

uint64_t sub_1008A1318(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)*(unsigned __int8 *)(a1 + 16), *(Registry **)(a1 + 88));
  long long v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    OsLogContext v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v24 = v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, &v24);
  if (!v10)
  {
    uint64_t v12 = 0;
    goto LABEL_10;
  }
  uint64_t v12 = v10[3];
  uint64_t v11 = (std::__shared_weak_count *)v10[4];
  if (!v11)
  {
LABEL_10:
    std::mutex::unlock(v5);
    uint64_t v11 = 0;
    char v13 = 1;
    goto LABEL_11;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v5);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v11);
  char v13 = 0;
LABEL_11:
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 88))(v12);
  int v16 = *(_DWORD *)(a1 + 80);
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  unsigned int v17 = CSIDateToSeconds();
  unsigned int v18 = v15 - v16;
  unsigned int v19 = v17 + v15 - v16;
  uint64_t v20 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v24) = 67109120;
    HIDWORD(v24) = v18;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Deriving from network time received %d seconds ago", (uint8_t *)&v24, 8u);
  }
  if (v19 >= v17 && v19 >= v18)
  {
    CSISecondsToDate();
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 48);
    unsigned int v23 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a2 + 48) = v23;
    if (v23 <= 1) {
      *(unsigned char *)(a2 + 28) = v23 == 1;
    }
    return 1;
  }
  else
  {
    __int16 v22 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v24) = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#N Sorry, summed time causes overflow - cannot derive", (uint8_t *)&v24, 2u);
    }
    uint64_t result = 0;
    *(unsigned char *)(a1 + 16) = 0;
  }
  return result;
}

void sub_1008A154C(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

double sub_1008A157C(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v5) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Resetting the RegistrationTimeModel Model", (uint8_t *)&v5, 2u);
  }
  long long v7 = 0uLL;
  *(void *)&long long v6 = 0;
  *(void *)((char *)&v6 + 5) = 0;
  long long v3 = v6;
  *(_OWORD *)(a1 + 24) = 0uLL;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 40) = v3;
  double result = *(double *)&v7;
  *(_OWORD *)(a1 + 56) = v7;
  *(_DWORD *)(a1 + 72) = -1;
  *(_DWORD *)(a1 + 80) = 0;
  return result;
}

void sub_1008A1614(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 80);
    int v14 = 67109120;
    *(_DWORD *)int v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Last update time stamp: %d", (uint8_t *)&v14, 8u);
    char v2 = *(NSObject **)(a1 + 8);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 16)) {
      long long v4 = "true";
    }
    else {
      long long v4 = "false";
    }
    int v14 = 136315138;
    *(void *)int v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Last time update valid: %s", (uint8_t *)&v14, 0xCu);
    char v2 = *(NSObject **)(a1 + 8);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 24);
    int v6 = *(_DWORD *)(a1 + 28);
    int v7 = *(_DWORD *)(a1 + 32);
    int v8 = *(_DWORD *)(a1 + 36);
    int v9 = *(_DWORD *)(a1 + 40);
    int v10 = *(_DWORD *)(a1 + 44);
    int v11 = *(_DWORD *)(a1 + 48);
    if (*(unsigned char *)(a1 + 52)) {
      uint64_t v12 = "DST";
    }
    else {
      uint64_t v12 = "ST";
    }
    int v13 = *(_DWORD *)(a1 + 72);
    int v14 = 67111170;
    *(_DWORD *)int v15 = v5;
    *(_WORD *)&void v15[4] = 1024;
    *(_DWORD *)&v15[6] = v6;
    __int16 v16 = 1024;
    int v17 = v7;
    __int16 v18 = 1024;
    int v19 = v9;
    __int16 v20 = 1024;
    int v21 = v8;
    __int16 v22 = 1024;
    int v23 = v10;
    __int16 v24 = 1024;
    int v25 = v11;
    __int16 v26 = 2080;
    int v27 = v12;
    __int16 v28 = 1024;
    int v29 = v13;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Last time update %02d:%02d:%02d %02d/%02d/%04d %d %s, (%d)", (uint8_t *)&v14, 0x3Cu);
  }
}

void sub_1008A17D8(void *a1)
{
  *a1 = off_101A14788;
  char v2 = (std::__shared_weak_count *)a1[12];
  if (v2) {
    sub_10004D2C8(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 1));

  RegistrationTimeInterface::~RegistrationTimeInterface((RegistrationTimeInterface *)a1);
}

void sub_1008A183C(void *a1)
{
  *a1 = off_101A14788;
  char v2 = (std::__shared_weak_count *)a1[12];
  if (v2) {
    sub_10004D2C8(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 1));
  RegistrationTimeInterface::~RegistrationTimeInterface((RegistrationTimeInterface *)a1);

  operator delete();
}

void sub_1008A18B4(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1008A191C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008A1958(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1008A1990(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1008A19C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1008A1A04(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, long long *a5, long long *a6, uint64_t a7)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_100311ED8((void *)a1, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_10010CB7C((void *)(a1 + 24), *a3, a3[1], 0xCF3CF3CF3CF3CF3DLL * ((a3[1] - *a3) >> 3));
  sub_10008CF3C((uint64_t *)(a1 + 48), a4);
  sub_1000593FC(a1 + 72, a5);
  if (*((char *)a6 + 23) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 104), *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v13 = *a6;
    *(void *)(a1 + 120) = *((void *)a6 + 2);
    *(_OWORD *)(a1 + 104) = v13;
  }
  sub_1008615C4((uint64_t *)(a1 + 128), a7);
  return a1;
}

void sub_1008A1B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(unsigned char *)(v10 + 96))
  {
    if (*(char *)(v10 + 95) < 0) {
      operator delete(*v12);
    }
  }
  sub_1000886C0(v11, *(char **)(v10 + 56));
  sub_10008A88C(&a10);
  a10 = (void **)v10;
  sub_1000C56F4(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1008A1B90@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)int v27 = 0u;
  long long v28 = 0u;
  memset(v26, 0, sizeof(v26));
  long long v25 = 0u;
  sub_10004BD84((uint64_t)&v25);
  long long v4 = sub_10004B96C(v26, (uint64_t)"tappedTransferPlan IMEI: [", 26);
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)a1;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  int v8 = sub_10004B96C(v4, v6, v7);
  sub_10004B96C(v8, (uint64_t)"]", 1);
  int v9 = sub_10004B96C(v26, (uint64_t)", CSN: [", 8);
  sCardSerialNumberAsString();
  if ((v24 & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    uint64_t v11 = v24;
  }
  else {
    uint64_t v11 = (uint64_t)__p[1];
  }
  uint64_t v12 = sub_10004B96C(v9, (uint64_t)v10, v11);
  sub_10004B96C(v12, (uint64_t)"]", 1);
  if ((char)v24 < 0) {
    operator delete(__p[0]);
  }
  long long v13 = sub_10004B96C(v26, (uint64_t)", ICCID: [", 10);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v15 = a1 + 40;
  uint64_t v14 = v16;
  int v17 = *(char *)(v15 + 23);
  if (v17 >= 0) {
    uint64_t v18 = v15;
  }
  else {
    uint64_t v18 = v14;
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(v15 + 23);
  }
  else {
    uint64_t v19 = *(void *)(v15 + 8);
  }
  __int16 v20 = sub_10004B96C(v13, v18, v19);
  sub_10004B96C(v20, (uint64_t)"]", 1);
  sub_10004BC98((uint64_t)v26 + 8, a2);
  *(void *)((char *)&v26[-1]
  *(void *)&v26[0] = v21;
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1008A1E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

const char *sub_1008A1E44(int a1)
{
  uint64_t result = "kUnknown";
  if (a1 > 127)
  {
    int v3 = "kNotAllowedTargetSW";
    long long v4 = "kNotAllowedSourceSW";
    if (a1 != 130) {
      long long v4 = "kUnknown";
    }
    if (a1 != 129) {
      int v3 = v4;
    }
    if (a1 == 128) {
      return "kNotAllowedHW";
    }
    else {
      return v3;
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
        uint64_t result = "kOneClick";
        break;
      case 2:
        uint64_t result = "kOutOfBand";
        break;
      case 3:
        uint64_t result = "kWebsheet";
        break;
      case 4:
        uint64_t result = "kNoOp";
        break;
      case 5:
        uint64_t result = "kOngoing";
        break;
      case 6:
        uint64_t result = "kNotAllowed";
        break;
      case 7:
        uint64_t result = "kOnDeviceTransferred";
        break;
      case 8:
        uint64_t result = "kCarrierDirect";
        break;
      case 9:
        uint64_t result = "kOneClickTc";
        break;
      case 10:
        uint64_t result = "kOneClickOtp";
        break;
      case 11:
        uint64_t result = "kOneClickTcOtp";
        break;
      case 16:
        uint64_t result = "kIneligibleToTransfer";
        break;
      case 17:
        uint64_t result = "kActivationPolicyMismatch";
        break;
      case 32:
        uint64_t result = "kUseWebService";
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1008A1FE0(char a1)
{
  if ((a1 - 1) > 0xFu) {
    return 32;
  }
  else {
    return byte_101505300[(char)(a1 - 1)];
  }
}

BOOL sub_1008A200C(unsigned int a1)
{
  return (a1 > 0x20 || ((1 << a1) & 0x1000301FDLL) == 0) && a1 - 128 >= 3;
}

uint64_t sub_1008A2050(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    int v3 = (unsigned char *)*a1;
    char v2 = (unsigned char *)(*a1 + a1[1]);
  }
  else
  {
    char v2 = (char *)a1 + *((unsigned __int8 *)a1 + 23);
    int v3 = a1;
  }
  if (v3 == v2)
  {
    LOBYTE(v4) = *((unsigned char *)a1 + 23);
  }
  else
  {
    do
    {
      unsigned char *v3 = __tolower((char)*v3);
      ++v3;
    }
    while (v3 != v2);
    LOBYTE(v4) = *((unsigned char *)a1 + 23);
  }
  int v5 = (char)v4;
  uint64_t v4 = v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  switch(v4)
  {
    case 23:
      if (v5 >= 0) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = (void *)*a1;
      }
      if (*v11 ^ 0x2D676E69646E6570 | v11[1] ^ 0x2D656C69666F7270 | *(void *)((char *)v11 + 15) ^ 0x657361656C65722DLL) {
        return 0;
      }
      else {
        return 3;
      }
    case 11:
      if (v5 >= 0) {
        long long v13 = a1;
      }
      else {
        long long v13 = (uint64_t *)*a1;
      }
      uint64_t v14 = *v13;
      uint64_t v15 = *(uint64_t *)((char *)v13 + 3);
      BOOL v17 = v14 == 0x72676F72702D6E69 && v15 == 0x73736572676F7270;
      return (2 * v17);
    case 6:
      if (v5 >= 0) {
        uint64_t v6 = a1;
      }
      else {
        uint64_t v6 = (uint64_t *)*a1;
      }
      if (*(_DWORD *)v6 == 1769235297 && *((_WORD *)v6 + 2) == 25974)
      {
        return 1;
      }
      else
      {
        unsigned int v8 = 1970496813;
        unsigned int v9 = bswap32(*(_DWORD *)v6);
        if (v9 == 1970496813 && (v9 = bswap32(*((unsigned __int16 *)v6 + 2)) >> 16, unsigned int v8 = 25715, v9 == 25715))
        {
          int v10 = 0;
        }
        else if (v9 < v8)
        {
          int v10 = -1;
        }
        else
        {
          int v10 = 1;
        }
        return 4 * (v10 == 0);
      }
    default:
      return 0;
  }
}

const char *sub_1008A2228(int a1)
{
  if ((a1 - 1) > 0xC) {
    return "kUnknown";
  }
  else {
    return off_101A148C0[(char)(a1 - 1)];
  }
}

const char *sub_1008A2254(int a1)
{
  if ((a1 - 70001) > 0x47) {
    return "kNoError";
  }
  else {
    return off_101A14928[a1 - 70001];
  }
}

BOOL sub_1008A2280(uint64_t a1, os_log_t *a2)
{
  if (*(char *)(a1 + 455) < 0)
  {
    if (!*(void *)(a1 + 440)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(a1 + 455))
  {
LABEL_11:
    char v2 = *a2;
    BOOL v7 = os_log_type_enabled(*a2, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v7)
    {
      *(_WORD *)long long buf = 0;
      int v5 = "#I Empty source iccid or target iccid";
      uint64_t v6 = buf;
      goto LABEL_13;
    }
    return result;
  }
  if (*(char *)(a1 + 479) < 0)
  {
    if (!*(void *)(a1 + 464)) {
      goto LABEL_11;
    }
  }
  else if (!*(unsigned char *)(a1 + 479))
  {
    goto LABEL_11;
  }
  if (*(unsigned char *)a1 == 7)
  {
    char v2 = *a2;
    BOOL v3 = os_log_type_enabled(*a2, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v3)
    {
      __int16 v11 = 0;
      int v5 = "#I Skip status report for on device transferred plan";
      uint64_t v6 = (uint8_t *)&v11;
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
      return 0;
    }
  }
  else
  {
    unsigned int v8 = *(unsigned __int8 *)(a1 + 1);
    if (v8 <= 0xC && ((1 << v8) & 0x1280) != 0)
    {
      return *(unsigned char *)(a1 + 13) == 0;
    }
    else
    {
      char v2 = *a2;
      BOOL v9 = os_log_type_enabled(*a2, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (v9)
      {
        __int16 v10 = 0;
        int v5 = "#I Skip status report for incomplete terminal states";
        uint64_t v6 = (uint8_t *)&v10;
        goto LABEL_13;
      }
    }
  }
  return result;
}

void sub_1008A23CC(uint64_t a1, os_log_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 455);
  if (v3 < 0)
  {
    if (*(void *)(a1 + 440)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 455))
  {
LABEL_3:
    os_log_t v4 = *a2;
    if (!os_log_type_enabled(*a2, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v5 = (void *)(a1 + 432);
    if (v3 < 0) {
      int v5 = (void *)*v5;
    }
    uint64_t v6 = (const char *)(a1 + 456);
    if (*(char *)(a1 + 479) < 0) {
      uint64_t v6 = *(const char **)v6;
    }
    BOOL v7 = sub_1008A2228(*(unsigned __int8 *)(a1 + 1));
    unsigned int v8 = sub_1008A2228(*(unsigned __int8 *)(a1 + 2));
    BOOL v9 = (void *)(a1 + 168);
    if (*(char *)(a1 + 191) < 0) {
      BOOL v9 = (void *)*v9;
    }
    __int16 v10 = (void *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0) {
      __int16 v10 = (void *)*v10;
    }
    __int16 v11 = (void *)(a1 + 264);
    if (*(char *)(a1 + 287) < 0) {
      __int16 v11 = (void *)*v11;
    }
    int v12 = *(unsigned __int8 *)(a1 + 1225);
    int v28 = 136316930;
    long long v29 = v5;
    __int16 v30 = 2080;
    long long v31 = v6;
    __int16 v32 = 2080;
    long long v33 = v7;
    __int16 v34 = 2080;
    long long v35 = v8;
    __int16 v36 = 2080;
    long long v37 = v9;
    __int16 v38 = 2080;
    uint64_t v39 = v10;
    __int16 v40 = 2080;
    int v41 = v11;
    __int16 v42 = 1024;
    int v43 = v12;
    long long v13 = "#I pending transfer plan (%s), target iccid (%s), terminal state %s, display state %s, label (%s : %s), mdn (%"
          "s), recoveryWithoutIccid %{BOOL}d";
    uint64_t v14 = v4;
    uint32_t v15 = 78;
    goto LABEL_29;
  }
  char v16 = *(unsigned char *)(a1 + 479);
  if (v16 < 0) {
    uint64_t v17 = *(void *)(a1 + 464);
  }
  else {
    uint64_t v17 = *(unsigned __int8 *)(a1 + 479);
  }
  os_log_t v18 = *a2;
  BOOL v19 = os_log_type_enabled(*a2, OS_LOG_TYPE_DEFAULT);
  if (v17)
  {
    if (!v19) {
      return;
    }
    __int16 v20 = (void *)(a1 + 456);
    if (v16 < 0) {
      __int16 v20 = (void *)*v20;
    }
    xpc_object_t v21 = sub_1008A2228(*(unsigned __int8 *)(a1 + 1));
    __int16 v22 = sub_1008A2228(*(unsigned __int8 *)(a1 + 2));
    int v23 = *(unsigned __int8 *)(a1 + 1225);
    int v28 = 136315906;
    long long v29 = v20;
    __int16 v30 = 2080;
    long long v31 = v21;
    __int16 v32 = 2080;
    long long v33 = v22;
    __int16 v34 = 1024;
    LODWORD(v35) = v23;
    long long v13 = "#I pending install iccid plan target iccid (%s), terminal state %s, display state %s, recoveryWithoutIccid %{BOOL}d";
  }
  else
  {
    if (!v19) {
      return;
    }
    unsigned __int8 v24 = (void *)(a1 + 240);
    if (*(char *)(a1 + 263) < 0) {
      unsigned __int8 v24 = (void *)*v24;
    }
    long long v25 = sub_1008A2228(*(unsigned __int8 *)(a1 + 1));
    __int16 v26 = sub_1008A2228(*(unsigned __int8 *)(a1 + 2));
    int v27 = *(unsigned __int8 *)(a1 + 1225);
    int v28 = 136315906;
    long long v29 = v24;
    __int16 v30 = 2080;
    long long v31 = v25;
    __int16 v32 = 2080;
    long long v33 = v26;
    __int16 v34 = 1024;
    LODWORD(v35) = v27;
    long long v13 = "#I pending install without iccid plan carrier (%s), terminal state %s, display state %s, recoveryWithoutIccid %{BOOL}d";
  }
  uint64_t v14 = v18;
  uint32_t v15 = 38;
LABEL_29:
  _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v28, v15);
}

uint64_t sub_1008A2650@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v47 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)long long v35 = 0u;
  long long v36 = 0u;
  memset(v34, 0, sizeof(v34));
  long long v33 = 0u;
  sub_10004BD84((uint64_t)&v33);
  os_log_t v4 = sub_10004B96C(v34, (uint64_t)"sim ids: [", 10);
  int v5 = (void *)(a1 + 8);
  uint64_t v6 = *(void **)a1;
  memset(&__p, 0, sizeof(__p));
  if (v6 != (void *)(a1 + 8))
  {
    sub_1008A2CAC(&__s, (uint64_t)(v6 + 4));
    BOOL v7 = (void *)v6[1];
    std::string __p = __s;
    if (v7)
    {
      do
      {
        unsigned int v8 = v7;
        BOOL v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        unsigned int v8 = (void *)v6[2];
        BOOL v9 = *v8 == (void)v6;
        uint64_t v6 = v8;
      }
      while (!v9);
    }
    if (v8 != v5)
    {
      do
      {
        *((unsigned char *)&__s.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&__s, ", ");
        std::string::append(&__p, (const std::string::value_type *)&__s, 2uLL);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        sub_1008A2CAC(&__s, (uint64_t)(v8 + 4));
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_s = &__s;
        }
        else {
          p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
        }
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __s.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)p_s, size);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s.__r_.__value_.__l.__data_);
        }
        int v12 = (void *)v8[1];
        if (v12)
        {
          do
          {
            long long v13 = v12;
            int v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            long long v13 = (void *)v8[2];
            BOOL v9 = *v13 == (void)v8;
            unsigned int v8 = v13;
          }
          while (!v9);
        }
        unsigned int v8 = v13;
      }
      while (v13 != v5);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  char v16 = sub_10004B96C(v4, (uint64_t)p_p, v15);
  sub_10004B96C(v16, (uint64_t)"]", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = sub_10004B96C(v34, (uint64_t)", data sim: [", 13);
  int v18 = *(char *)(a1 + 47);
  if (v18 >= 0) {
    uint64_t v19 = a1 + 24;
  }
  else {
    uint64_t v19 = *(void *)(a1 + 24);
  }
  if (v18 >= 0) {
    uint64_t v20 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v20 = *(void *)(a1 + 32);
  }
  xpc_object_t v21 = sub_10004B96C(v17, v19, v20);
  sub_10004B96C(v21, (uint64_t)"]", 1);
  __int16 v22 = sub_10004B96C(v34, (uint64_t)", voice sim: [", 14);
  uint64_t v25 = *(void *)(a1 + 48);
  uint64_t v24 = a1 + 48;
  uint64_t v23 = v25;
  int v26 = *(char *)(v24 + 23);
  if (v26 >= 0) {
    uint64_t v27 = v24;
  }
  else {
    uint64_t v27 = v23;
  }
  if (v26 >= 0) {
    uint64_t v28 = *(unsigned __int8 *)(v24 + 23);
  }
  else {
    uint64_t v28 = *(void *)(v24 + 8);
  }
  long long v29 = sub_10004B96C(v22, v27, v28);
  sub_10004B96C(v29, (uint64_t)"]", 1);
  sub_10004BC98((uint64_t)v34 + 8, a2);
  *(void *)((char *)&v34[-1]
  *(void *)&v34[0] = v30;
  if (SHIBYTE(v36) < 0) {
    operator delete(v35[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1008A29F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10008248C((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_1008A2A44(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(void *)(a1 + 8)) {
      goto LABEL_5;
    }
  }
  else if (!*(unsigned char *)(a1 + 23))
  {
LABEL_5:
    if (*(char *)(a1 + 47) < 0)
    {
      if (*(void *)(a1 + 32)) {
        goto LABEL_7;
      }
    }
    else if (*(unsigned char *)(a1 + 47))
    {
      goto LABEL_7;
    }
    return 1;
  }
LABEL_7:
  if (*(char *)(a1 + 71) < 0) {
    uint64_t v1 = *(void *)(a1 + 56);
  }
  else {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 71);
  }
  return v1 == 0;
}

void sub_1008A2AA0(uint64_t *a1, os_log_t *a2)
{
  char v3 = *a2;
  if (os_log_type_enabled(*a2, OS_LOG_TYPE_DEFAULT))
  {
    os_log_t v4 = a1;
    if (*((char *)a1 + 23) < 0) {
      os_log_t v4 = (uint64_t *)*a1;
    }
    int v5 = a1 + 3;
    if (*((char *)a1 + 47) < 0) {
      int v5 = (void *)*v5;
    }
    uint64_t v6 = a1 + 6;
    if (*((char *)a1 + 71) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    BOOL v7 = a1 + 9;
    if (*((char *)a1 + 95) < 0) {
      BOOL v7 = (void *)*v7;
    }
    unsigned int v8 = a1 + 12;
    if (*((char *)a1 + 119) < 0) {
      unsigned int v8 = (void *)*v8;
    }
    BOOL v9 = a1 + 15;
    if (*((char *)a1 + 143) < 0) {
      BOOL v9 = (void *)*v9;
    }
    __int16 v10 = a1 + 18;
    if (*((char *)a1 + 167) < 0) {
      __int16 v10 = (void *)*v10;
    }
    __int16 v11 = a1 + 21;
    if (*((char *)a1 + 191) < 0) {
      __int16 v11 = (void *)*v11;
    }
    uint64_t v12 = a1[25];
    int v13 = 136317186;
    uint64_t v14 = v4;
    __int16 v15 = 2080;
    char v16 = v5;
    __int16 v17 = 2080;
    int v18 = v6;
    __int16 v19 = 2080;
    uint64_t v20 = v7;
    __int16 v21 = 2080;
    __int16 v22 = v8;
    __int16 v23 = 2080;
    uint64_t v24 = v9;
    __int16 v25 = 2080;
    int v26 = v10;
    __int16 v27 = 2080;
    uint64_t v28 = v11;
    __int16 v29 = 2048;
    uint64_t v30 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I BlocklistInfo{ sourceIMEI:[%s], sourceEID:[%s], sourceICCID:[%s], targetIMEI:[%s], targetEID:[%s], targetICCID:[%s], carrierName:[%s], phoneNumber:[%s], creationDate:[%f] }", (uint8_t *)&v13, 0x5Cu);
  }
}

const char *sub_1008A2C08(int a1)
{
  if ((a1 - 1) > 0xA) {
    return "kCPMetricsTransferFailureInternal";
  }
  else {
    return off_101A14B68[(char)(a1 - 1)];
  }
}

uint64_t sub_1008A2C34(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 36) && *(_DWORD *)(a1 + 32)) {
    return 1;
  }
  char v2 = *(void **)(a1 + 8);
  if (v2 != (void *)(a1 + 16))
  {
    while (!*((unsigned char *)v2 + 88) && !*((unsigned char *)v2 + 83))
    {
      char v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          os_log_t v4 = v3;
          char v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          os_log_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          char v2 = v4;
        }
        while (!v5);
      }
      char v2 = v4;
      if (v4 == (void *)(a1 + 16)) {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

void sub_1008A2CAC(std::string *a1, uint64_t a2)
{
  std::operator+<char>();
  os_log_t v4 = std::string::append(&v15, ", ", 2uLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  unsigned int v8 = *(const std::string::value_type **)(a2 + 24);
  uint64_t v7 = a2 + 24;
  uint64_t v6 = v8;
  int v9 = *(char *)(v7 + 23);
  if (v9 >= 0) {
    __int16 v10 = (const std::string::value_type *)v7;
  }
  else {
    __int16 v10 = v6;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(v7 + 8);
  }
  uint64_t v12 = std::string::append(&v16, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  uint64_t v14 = std::string::append(&v17, ")", 1uLL);
  *a1 = *v14;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1008A2DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008A2DF8(uint64_t a1)
{
  sub_10003E168(&v2, (void *)(a1 + 8));
  uint64_t v1 = v3;
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v1);
  }
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10017B514();
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10017B514();
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10017B514();
  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1008A2FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008A3008(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    os_log_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (a1[5])
      {
        v7[0] = _NSConcreteStackBlock;
        v7[1] = 0x40000000;
        uint64_t v7[2] = sub_1008A3144;
        v7[3] = &unk_101A14BC0;
        void v7[4] = v3;
        uint64_t v10 = 0;
        std::string::size_type v11 = 0;
        sub_10003E168(&v10, (void *)(v3 + 8));
        uint64_t v6 = *(NSObject **)(v3 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 1174405120;
        block[2] = sub_1008A4F1C;
        block[3] = &unk_101A14DD8;
        block[5] = v10;
        int v9 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        void block[4] = v7;
        dispatch_async(v6, block);
        if (v9) {
          sub_10004D2C8(v9);
        }
        if (v11) {
          sub_10004D2C8(v11);
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_1008A3144(wis::MetricFactory *a1)
{
  uint64_t v1 = *((void *)a1 + 4);
  unsigned int v8 = _NSConcreteStackBlock;
  uint64_t v9 = 0x40000000;
  uint64_t v10 = sub_1008A3918;
  std::string::size_type v11 = &unk_101A14CB0;
  uint64_t v12 = v1;
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(a1);
  uint64_t v3 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, 0x800A0u);
  if (v3)
  {
    os_log_t v4 = (wis::MetricContainer *)v3;
    long long v5 = sub_10001C8F4(8);
    uint64_t v7 = *v5;
    uint64_t v6 = (std::__shared_weak_count *)v5[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7) {
      operator new();
    }
    if (v6) {
      sub_10004D2C8(v6);
    }
    wis::MetricContainer::~MetricContainer(v4);
    operator delete();
  }
}

void sub_1008A32C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008A3368(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1008A3384(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1008A3394(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    os_log_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (a1[5])
      {
        v7[0] = _NSConcreteStackBlock;
        v7[1] = 0x40000000;
        uint64_t v7[2] = sub_1008A34D0;
        v7[3] = &unk_101A14C10;
        void v7[4] = v3;
        uint64_t v10 = 0;
        std::string::size_type v11 = 0;
        sub_10003E168(&v10, (void *)(v3 + 8));
        uint64_t v6 = *(NSObject **)(v3 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 1174405120;
        block[2] = sub_1008A4F1C;
        block[3] = &unk_101A14DD8;
        block[5] = v10;
        uint64_t v9 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        void block[4] = v7;
        dispatch_async(v6, block);
        if (v9) {
          sub_10004D2C8(v9);
        }
        if (v11) {
          sub_10004D2C8(v11);
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_1008A34D0(wis::MetricFactory *a1)
{
  uint64_t v1 = *((void *)a1 + 4);
  unsigned int v8 = _NSConcreteStackBlock;
  uint64_t v9 = 0x40000000;
  uint64_t v10 = sub_1008A3C5C;
  std::string::size_type v11 = &unk_101A14CD0;
  uint64_t v12 = v1;
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(a1);
  uint64_t v3 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, 0x800A6u);
  if (v3)
  {
    os_log_t v4 = (wis::MetricContainer *)v3;
    long long v5 = sub_10001C8F4(8);
    uint64_t v7 = *v5;
    uint64_t v6 = (std::__shared_weak_count *)v5[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7) {
      operator new();
    }
    if (v6) {
      sub_10004D2C8(v6);
    }
    wis::MetricContainer::~MetricContainer(v4);
    operator delete();
  }
}

void sub_1008A3654(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008A36F4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    os_log_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (a1[5])
      {
        v7[0] = _NSConcreteStackBlock;
        v7[1] = 0x40000000;
        uint64_t v7[2] = sub_1008A3830;
        v7[3] = &unk_101A14C60;
        void v7[4] = v3;
        uint64_t v10 = 0;
        std::string::size_type v11 = 0;
        sub_10003E168(&v10, (void *)(v3 + 8));
        uint64_t v6 = *(NSObject **)(v3 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 1174405120;
        block[2] = sub_1008A4F1C;
        block[3] = &unk_101A14DD8;
        block[5] = v10;
        uint64_t v9 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        void block[4] = v7;
        dispatch_async(v6, block);
        if (v9) {
          sub_10004D2C8(v9);
        }
        if (v11) {
          sub_10004D2C8(v11);
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_1008A3830(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 168);
  uint64_t v3 = *(void **)(v1 + 176);
  while (v2 != v3)
  {
    uint64_t v4 = *v2;
    if (*(_DWORD *)(*v2 + 32) == 1)
    {
      long long v5 = (std::__shared_weak_count *)v2[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v6 = *(_DWORD *)(v4 + 40);
      uint64_t v7 = _NSConcreteStackBlock;
      uint64_t v8 = 0x40000000;
      uint64_t v9 = sub_1008A4134;
      uint64_t v10 = &unk_101A14CF0;
      std::string::size_type v11 = &v6;
      sub_1008A3F54((wis::MetricFactory *)0x800A1);
      if (v5) {
        sub_10004D2C8(v5);
      }
      return;
    }
    v2 += 2;
  }
}

void sub_1008A3900(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008A3918(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 168);
  uint64_t v4 = *(void **)(v2 + 176);
  if (v3 != v4)
  {
    while (*(_DWORD *)(*v3 + 36) != 1)
    {
      v3 += 2;
      if (v3 == v4) {
        return;
      }
    }
    if (v3 != v4)
    {
      long long v5 = (std::__shared_weak_count *)v3[1];
      v6[0] = *v3;
      v6[1] = (uint64_t)v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1008A39E4(v6, *(unsigned int *)(v2 + 440), *(unsigned int *)(v2 + 456), v2 + 840, a2);
      if (v5)
      {
        sub_10004D2C8(v5);
      }
    }
  }
}

void sub_1008A39CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008A39E4(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = a3;
  int v8 = a2;
  unsigned int v10 = sub_1013B85B4(*a1, a2, a3) - 1;
  if (v10 > 8) {
    int v11 = 0;
  }
  else {
    int v11 = dword_101505310[v10];
  }
  *(_DWORD *)(a5 + 80) |= 8u;
  *(_DWORD *)(a5 + 32) = v11;
  sub_1013B8724(*a1, &v34);
  uint64_t v12 = v34;
  long long v13 = v35;
  if (v34 != v35)
  {
    do
    {
      int v14 = *(_DWORD *)v12 - 1;
      if (v14 > 4) {
        int v15 = 0;
      }
      else {
        int v15 = dword_101505334[v14];
      }
      int v16 = *(_DWORD *)(a5 + 24);
      if (v16 == *(_DWORD *)(a5 + 28))
      {
        sub_1008A4E70(a5 + 16, v16 + 1);
        int v16 = *(_DWORD *)(a5 + 24);
      }
      uint64_t v17 = *(void *)(a5 + 16);
      *(_DWORD *)(a5 + 24) = v16 + 1;
      *(_DWORD *)(v17 + 4 * v16) = v15;
      v12 += 4;
    }
    while (v12 != v13);
    uint64_t v12 = v34;
  }
  if (v12)
  {
    long long v35 = v12;
    operator delete(v12);
  }
  uint64_t v18 = *a1;
  int v19 = *(_DWORD *)(a5 + 80);
  *(unsigned char *)(a5 + 72) = *(unsigned char *)(*a1 + 58);
  BOOL v20 = (*(_DWORD *)(v18 + 52) - 2) < 4;
  *(_DWORD *)(a5 + 80) = v19 | 0x14;
  *(unsigned char *)(a5 + 73) = v20;
  int v21 = *(_DWORD *)(v18 + 36);
  uint64_t result = subscriber::simSlotAsInstance();
  int v23 = *(_DWORD *)(a5 + 80);
  int v24 = v23 | 0x20;
  *(_DWORD *)(a5 + 80) = v23 | 0x20;
  *(_DWORD *)(a5 + 36) = result;
  uint64_t v27 = *(void *)(a4 + 8);
  uint64_t v26 = a4 + 8;
  uint64_t v25 = v27;
  if (v27)
  {
    uint64_t v28 = v26;
    do
    {
      int v29 = *(_DWORD *)(v25 + 32);
      BOOL v30 = v29 < v21;
      if (v29 >= v21) {
        long long v31 = (uint64_t *)v25;
      }
      else {
        long long v31 = (uint64_t *)(v25 + 8);
      }
      if (!v30) {
        uint64_t v28 = v25;
      }
      uint64_t v25 = *v31;
    }
    while (*v31);
    if (v28 != v26 && v21 >= *(_DWORD *)(v28 + 32))
    {
      *(_DWORD *)(a5 + 80) = v23 | 0x60;
      __int16 v32 = *(std::string **)(a5 + 40);
      if (v32 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v32, (const std::string *)(v28 + 40));
      *(_DWORD *)(a5 + 80) |= 0x80u;
      long long v33 = *(std::string **)(a5 + 48);
      if (v33 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      uint64_t result = (uint64_t)std::string::operator=(v33, (const std::string *)(v28 + 64));
      int v24 = *(_DWORD *)(a5 + 80);
    }
  }
  *(unsigned char *)(a5 + 74) = v21 == v8;
  *(_DWORD *)(a5 + 80) = v24 | 0x300;
  *(unsigned char *)(a5 + 75) = v21 == v7;
  return result;
}

void sub_1008A3C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008A3C5C(capabilities::ct *a1, int *a2)
{
  uint64_t v3 = *((void *)a1 + 4);
  uint64_t v4 = (capabilities::ct *)capabilities::ct::supportsGemini(a1);
  if (v4)
  {
    int v5 = *(_DWORD *)(v3 + 832);
    if (v5 == 2) {
      int v6 = 3;
    }
    else {
      int v6 = 2 * (v5 == 1);
    }
  }
  else
  {
    int v6 = 1;
  }
  a2[12] |= 2u;
  a2[10] = v6;
  if (capabilities::ct::supportsGemini(v4))
  {
    int v7 = *(char **)(v3 + 168);
    int v8 = *(char **)(v3 + 176);
    if ((unint64_t)(v8 - v7) < 0x20) {
      return;
    }
  }
  else
  {
    int v7 = *(char **)(v3 + 168);
    int v8 = *(char **)(v3 + 176);
  }
  if (v7 != v8)
  {
    uint64_t v9 = (uint64_t *)(v3 + 872);
    do
    {
      int v10 = *(_DWORD *)(*(void *)v7 + 36);
      if (v10)
      {
        int v11 = a2[7];
        uint64_t v12 = a2[6];
        if ((int)v12 >= v11)
        {
          if (v11 == a2[8])
          {
            wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 4), v11 + 1);
            int v11 = a2[7];
          }
          a2[7] = v11 + 1;
          operator new();
        }
        uint64_t v13 = *((void *)a2 + 2);
        a2[6] = v12 + 1;
        uint64_t v14 = *(void *)(v13 + 8 * v12);
        if (v14)
        {
          uint64_t v15 = *v9;
          if (!*v9) {
            goto LABEL_29;
          }
          uint64_t v16 = v3 + 872;
          do
          {
            int v17 = *(_DWORD *)(v15 + 32);
            BOOL v18 = v17 < v10;
            if (v17 >= v10) {
              int v19 = (uint64_t *)v15;
            }
            else {
              int v19 = (uint64_t *)(v15 + 8);
            }
            if (!v18) {
              uint64_t v16 = v15;
            }
            uint64_t v15 = *v19;
          }
          while (*v19);
          if ((uint64_t *)v16 != v9 && v10 >= *(_DWORD *)(v16 + 32))
          {
            *(_DWORD *)(v14 + 80) |= 0x400u;
            int v21 = *(std::string **)(v14 + 56);
            if (v21 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
              operator new();
            }
            std::string::operator=(v21, (const std::string *)(v16 + 48));
            *(_DWORD *)(v14 + 80) |= 0x800u;
            __int16 v22 = *(std::string **)(v14 + 64);
            if (v22 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
              operator new();
            }
            std::string::operator=(v22, (const std::string *)(v16 + 72));
          }
          else
          {
LABEL_29:
            BOOL v20 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Could not find carrier bundle!", buf, 2u);
            }
          }
          int v23 = (std::__shared_weak_count *)*((void *)v7 + 1);
          v24[0] = *(void *)v7;
          v24[1] = (uint64_t)v23;
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_1008A39E4(v24, *(unsigned int *)(v3 + 440), *(unsigned int *)(v3 + 456), v3 + 840, v14);
          if (v23) {
            sub_10004D2C8(v23);
          }
        }
      }
      v7 += 16;
    }
    while (v7 != v8);
  }
}

void sub_1008A3F1C()
{
}

uint64_t sub_1008A3F54(wis::MetricFactory *a1)
{
  unsigned int v1 = a1;
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(a1);
  uint64_t v3 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v1);
  if (v3)
  {
    uint64_t v4 = (wis::MetricContainer *)v3;
    int v5 = sub_10001C8F4(8);
    uint64_t v7 = *v5;
    int v6 = (std::__shared_weak_count *)v5[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7) {
      operator new();
    }
    if (v6) {
      sub_10004D2C8(v6);
    }
    wis::MetricContainer::~MetricContainer(v4);
    operator delete();
  }
  return 0;
}

void sub_1008A40B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100129880((wis::MetricContainer **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1008A4134(uint64_t result, uint64_t a2)
{
  int v2 = **(_DWORD **)(result + 32);
  switch(v2)
  {
    case 3:
      int v3 = *(_DWORD *)(a2 + 24);
      __int16 v4 = 1;
LABEL_7:
      *(_WORD *)(a2 + 16) = v4;
      *(_DWORD *)(a2 + 24) = v3 | 6;
      return result;
    case 2:
      int v3 = *(_DWORD *)(a2 + 24);
      __int16 v4 = 257;
      goto LABEL_7;
    case 1:
      *(_DWORD *)(a2 + 24) |= 2u;
      *(unsigned char *)(a2 + 16) = 0;
      break;
  }
  return result;
}

uint64_t sub_1008A418C(wis::MetricFactory *a1)
{
  unsigned int v1 = a1;
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(a1);
  uint64_t v3 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v1);
  if (v3)
  {
    __int16 v4 = (wis::MetricContainer *)v3;
    int v5 = sub_10001C8F4(8);
    uint64_t v7 = *v5;
    int v6 = (std::__shared_weak_count *)v5[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7) {
      operator new();
    }
    if (v6) {
      sub_10004D2C8(v6);
    }
    wis::MetricContainer::~MetricContainer(v4);
    operator delete();
  }
  return 0;
}

void sub_1008A42E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100129880((wis::MetricContainer **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1008A436C(uint64_t a1, uint64_t a2)
{
  uint64_t result = subscriber::simSlotAsInstance();
  *(_DWORD *)(a2 + 24) |= 2u;
  *(_DWORD *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1008A43A4(wis::MetricFactory *a1)
{
  unsigned int v1 = a1;
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(a1);
  uint64_t v3 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v1);
  if (v3)
  {
    __int16 v4 = (wis::MetricContainer *)v3;
    int v5 = sub_10001C8F4(8);
    uint64_t v7 = *v5;
    int v6 = (std::__shared_weak_count *)v5[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7) {
      operator new();
    }
    if (v6) {
      sub_10004D2C8(v6);
    }
    wis::MetricContainer::~MetricContainer(v4);
    operator delete();
  }
  return 0;
}

void sub_1008A4500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100129880((wis::MetricContainer **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1008A4584(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 36);
  *(_DWORD *)(a2 + 28) |= 2u;
  *(unsigned char *)(a2 + 16) = v3;
  uint64_t result = subscriber::simSlotAsInstance();
  *(_DWORD *)(a2 + 28) |= 4u;
  *(_DWORD *)(a2 + 20) = result;
  return result;
}

uint64_t sub_1008A45D0(wis::MetricFactory *a1)
{
  unsigned int v1 = a1;
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(a1);
  uint64_t v3 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v1);
  if (v3)
  {
    __int16 v4 = (wis::MetricContainer *)v3;
    int v5 = sub_10001C8F4(8);
    uint64_t v7 = *v5;
    int v6 = (std::__shared_weak_count *)v5[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7) {
      operator new();
    }
    if (v6) {
      sub_10004D2C8(v6);
    }
    wis::MetricContainer::~MetricContainer(v4);
    operator delete();
  }
  return 0;
}

void sub_1008A472C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100129880((wis::MetricContainer **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1008A47B0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 36);
  *(_DWORD *)(a2 + 28) |= 2u;
  *(unsigned char *)(a2 + 16) = v3;
  uint64_t result = subscriber::simSlotAsInstance();
  *(_DWORD *)(a2 + 28) |= 4u;
  *(_DWORD *)(a2 + 20) = result;
  return result;
}

void sub_1008A47FC(void *a1, int a2, uint64_t a3)
{
  int v6 = subscriber::simSlotAsInstance();
  int v7 = *(_DWORD *)(a3 + 44) | 8;
  *(_DWORD *)(a3 + 44) = v7;
  *(_DWORD *)(a3 + 20) = v6;
  for (uint64_t i = (void *)a1[21]; ; i += 2)
  {
    if (i == (void *)a1[22])
    {
      int v10 = 0;
      BOOL v11 = 0;
      goto LABEL_15;
    }
    uint64_t v9 = *i;
    if (*(_DWORD *)(*i + 36) == a2) {
      break;
    }
  }
  int v10 = (std::__shared_weak_count *)i[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v11 = *(_DWORD *)(v9 + 52) < 6u && (*(_DWORD *)(v9 + 52) & 0x3F) == 1;
  int v7 = *(_DWORD *)(a3 + 44);
LABEL_15:
  *(_DWORD *)(a3 + 44) = v7 | 0x10;
  *(unsigned char *)(a3 + 18) = v11;
  uint64_t v13 = a1[106];
  if (v13)
  {
    uint64_t v14 = a1 + 106;
    uint64_t v15 = a1 + 106;
    do
    {
      int v16 = *(_DWORD *)(v13 + 32);
      BOOL v17 = v16 < a2;
      if (v16 >= a2) {
        BOOL v18 = (uint64_t *)v13;
      }
      else {
        BOOL v18 = (uint64_t *)(v13 + 8);
      }
      if (!v17) {
        uint64_t v15 = (void *)v13;
      }
      uint64_t v13 = *v18;
    }
    while (*v18);
    if (v15 != v14 && *((_DWORD *)v15 + 8) <= a2)
    {
      *(_DWORD *)(a3 + 44) = v7 | 0x30;
      int v19 = *(std::string **)(a3 + 24);
      if (v19 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v19, (const std::string *)(v15 + 5));
      *(_DWORD *)(a3 + 44) |= 0x40u;
      BOOL v20 = *(std::string **)(a3 + 32);
      if (v20 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v20, (const std::string *)(v15 + 8));
    }
  }
  if (v10)
  {
    sub_10004D2C8(v10);
  }
}

void sub_1008A49A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008A49B8(wis::MetricFactory *a1)
{
  unsigned int v1 = a1;
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(a1);
  uint64_t v3 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v1);
  if (v3)
  {
    __int16 v4 = (wis::MetricContainer *)v3;
    int v5 = sub_10001C8F4(8);
    uint64_t v7 = *v5;
    int v6 = (std::__shared_weak_count *)v5[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7) {
      operator new();
    }
    if (v6) {
      sub_10004D2C8(v6);
    }
    wis::MetricContainer::~MetricContainer(v4);
    operator delete();
  }
  return 0;
}

void sub_1008A4B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100129880((wis::MetricContainer **)va, 0);
  _Unwind_Resume(a1);
}

void sub_1008A4B98(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 32);
  *(_DWORD *)(a2 + 44) |= 4u;
  *(unsigned char *)(a2 + 17) = 1;
  sub_1008A47FC(v2, *(_DWORD *)(a1 + 40), a2);
}

void sub_1008A4BC0(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 32);
  int v3 = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 44);
  *(_DWORD *)(a2 + 44) = v3 | 6;
  *(unsigned char *)(a2 + 17) = 0;
  sub_1008A47FC(v2, *(_DWORD *)(a1 + 40), a2);
}

uint64_t sub_1008A4BEC(wis::MetricFactory *a1)
{
  unsigned int v1 = a1;
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(a1);
  uint64_t v3 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v1);
  if (v3)
  {
    __int16 v4 = (wis::MetricContainer *)v3;
    int v5 = sub_10001C8F4(8);
    uint64_t v7 = *v5;
    int v6 = (std::__shared_weak_count *)v5[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7) {
      operator new();
    }
    if (v6) {
      sub_10004D2C8(v6);
    }
    wis::MetricContainer::~MetricContainer(v4);
    operator delete();
  }
  return 0;
}

void sub_1008A4D48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100129880((wis::MetricContainer **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1008A4DCC(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 40);
  *(_DWORD *)(a2 + 40) |= 2u;
  *(unsigned char *)(a2 + 24) = v3;
  unsigned int v4 = *(_DWORD *)(a1 + 32);
  if (v4 - 1 >= 5) {
    int v5 = 0;
  }
  else {
    int v5 = (awd::metrics *)v4;
  }
  if ((awd::metrics::CommCenterSimAuthenticationType_IsValid(v5, a2) & 1) == 0) {
    __assert_rtn("set_type", "CCMetricsAdHoc.pb.h", 27376, "::awd::metrics::CommCenterSimAuthenticationType_IsValid(value)");
  }
  *(_DWORD *)(a2 + 40) |= 8u;
  *(_DWORD *)(a2 + 28) = v5;
  uint64_t result = subscriber::simSlotAsInstance();
  *(_DWORD *)(a2 + 40) |= 0x10u;
  *(_DWORD *)(a2 + 32) = result;
  return result;
}

uint64_t sub_1008A4E70(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 12);
  if (v2 < a2)
  {
    int v3 = 2 * v2;
    if (v3 <= a2) {
      int v3 = a2;
    }
    if (v3 <= 4) {
      int v3 = 4;
    }
    *(_DWORD *)(result + 12) = v3;
    operator new[]();
  }
  return result;
}

uint64_t sub_1008A4F1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1008A4F2C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1008A4F48(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

BOOL isSame(const void **a1, const void **a2)
{
  uint64_t v2 = *a1;
  if (v2) {
    int v3 = sub_100080778;
  }
  else {
    int v3 = 0;
  }
  unsigned int v4 = *a2;
  if (v4) {
    int v5 = sub_100080778;
  }
  else {
    int v5 = 0;
  }
  BOOL v6 = ((unint64_t)v3 | (unint64_t)v5) == 0;
  if (v3) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    return CFEqual(v2, v4) != 0;
  }
  return v6;
}

void sub_1008A4FBC(const void **a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v26 = v27;
  uint64_t v28 = off_101A14F08;
  uint64_t v29 = a2;
  BOOL v30 = &v26;
  long long v31 = &v28;
  CarrierBundleHandler::loadKeyValuesTableFrom_sync(a2, a2 + 336, (uint64_t)&v28);
  sub_1008A81CC(&v28);
  BOOL v6 = v27[0];
  if (!v27[0]) {
    goto LABEL_11;
  }
  unsigned int v7 = *(unsigned __int16 *)(a3 + 76);
  int v8 = v27;
  do
  {
    uint64_t v9 = v6;
    int v10 = v8;
    unsigned int v11 = *((unsigned __int16 *)v6 + 54);
    uint64_t v12 = v6 + 1;
    if (v11 >= v7)
    {
      uint64_t v12 = v9;
      int v8 = (void **)v9;
    }
    BOOL v6 = (void *)*v12;
  }
  while (v6);
  if (v8 != v27 && (v11 >= v7 ? (uint64_t v13 = v9) : (uint64_t v13 = v10), v7 >= *((unsigned __int16 *)v13 + 54)))
  {
    int v16 = sub_1008A7860((uint64_t **)(a2 + 312), *(_WORD *)(a3 + 76), a3) + 17;
    if (v11 >= v7) {
      BOOL v17 = (long long **)(v9 + 17);
    }
    else {
      BOOL v17 = (long long **)(v10 + 17);
    }
    sub_100179D50((uint64_t)v16, (uint64_t)v17);
    Cdma1xCell::dumpState((Cdma1xCell *)a3, (const ctu::OsLogLogger *)(a2 + 40));
    CarrierBundleHandler::validateBundleNamesResult_sync(a2, v17, &v25);
    if (&v25 != a1)
    {
      uint64_t v28 = (uint64_t (**)())*a1;
      *a1 = v25;
      uint64_t v25 = 0;
      sub_100057D78((const void **)&v28);
    }
    sub_100057D78(&v25);
  }
  else
  {
LABEL_11:
    Cdma1xCell::dumpState((Cdma1xCell *)a3, (const ctu::OsLogLogger *)(a2 + 40));
    uint64_t v14 = sub_1008A7860((uint64_t **)(a2 + 312), *(_WORD *)(a3 + 76), a3);
    uint64_t v15 = v14;
    if (*((unsigned char *)v14 + 160))
    {
      uint64_t v28 = (uint64_t (**)())(v14 + 17);
      sub_100047F64((void ***)&v28);
      *((unsigned char *)v15 + 160) = 0;
    }
  }
  BOOL v18 = *(uint64_t (**)())(a2 + 296);
  int v19 = (uint64_t (**)())(a2 + 296);
  BOOL v20 = (uint64_t (**)())(a2 + 296);
  if (v18)
  {
    unsigned int v21 = *(unsigned __int16 *)(a3 + 76);
    while (1)
    {
      while (1)
      {
        BOOL v20 = (uint64_t (**)())v18;
        unsigned int v22 = *((unsigned __int16 *)v18 + 54);
        if (v22 <= v21) {
          break;
        }
        BOOL v18 = *v20;
        int v19 = v20;
        if (!*v20) {
          goto LABEL_27;
        }
      }
      if (v22 >= v21) {
        break;
      }
      BOOL v18 = v20[1];
      if (!v18)
      {
        int v19 = v20 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
LABEL_27:
    BOOL v30 = 0;
    int v23 = (char *)operator new(0x90uLL);
    uint64_t v28 = (uint64_t (**)())v23;
    uint64_t v29 = a2 + 296;
    *((_WORD *)v23 + 16) = *(_WORD *)a3;
    MCC::MCC((MCC *)(v23 + 40), (const MCC *)(a3 + 8));
    MCC::MCC((MCC *)(v23 + 72), (const MCC *)(a3 + 40));
    *(_OWORD *)(v23 + 114) = *(_OWORD *)(a3 + 82);
    *(_OWORD *)(v23 + 104) = *(_OWORD *)(a3 + 72);
    *((void *)v23 + 17) = 0;
    LOBYTE(v30) = 1;
    *(void *)int v23 = 0;
    *((void *)v23 + 1) = 0;
    *((void *)v23 + 2) = v20;
    *int v19 = (uint64_t (*)())v23;
    uint64_t v24 = **(void **)(a2 + 288);
    if (v24)
    {
      *(void *)(a2 + 288) = v24;
      int v23 = (char *)*v19;
    }
    sub_100046C90(*(uint64_t **)(a2 + 296), (uint64_t *)v23);
    ++*(void *)(a2 + 304);
    BOOL v20 = v28;
    uint64_t v28 = 0;
    sub_1008A7A0C((uint64_t)&v28);
  }
  sub_100058140((const void **)v20 + 17, a1);
  sub_100688A7C((uint64_t)&v26, v27[0]);
}

void sub_1008A5280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
  sub_100688A7C((uint64_t)&a11, a12);
  sub_100057D78(v12);
  _Unwind_Resume(a1);
}

void CarrierBundleHandler::validateBundleNamesResult_sync(uint64_t a1@<X0>, long long **a2@<X1>, const void **a3@<X8>)
{
  *a3 = 0;
  if (*((unsigned char *)a2 + 24))
  {
    unsigned int v4 = *a2;
    int v5 = a2[1];
    if (*a2 != v5)
    {
      BOOL v6 = (os_log_t *)(a1 + 40);
      long long v35 = (Registry **)(a1 + 104);
      CFStringRef key = (void *)qword_101B13ED0;
      while (1)
      {
        value = 0;
        if (*((char *)v4 + 23) < 0)
        {
          sub_10004FC84(&__dst, *(void **)v4, *((void *)v4 + 1));
        }
        else
        {
          long long v7 = *v4;
          __int16 v48 = (void *)*((void *)v4 + 2);
          long long __dst = v7;
        }
        if (SHIBYTE(v48) < 0)
        {
          sub_10004FC84(&buf, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          long long buf = __dst;
          uint64_t v54 = v48;
        }
        CFMutableDictionaryRef v50 = 0;
        if (SHIBYTE(v54) < 0)
        {
          sub_10004FC84(__p, (void *)buf, *((unint64_t *)&buf + 1));
        }
        else
        {
          *(_OWORD *)std::string __p = buf;
          v42[0] = v54;
        }
        CFMutableDictionaryRef Mutable = 0;
        if (ctu::cf::convert_copy())
        {
          int v8 = v50;
          CFMutableDictionaryRef v50 = Mutable;
          uint64_t v52 = v8;
          sub_1000558F4((const void **)&v52);
        }
        if (SHIBYTE(v42[0]) < 0) {
          operator delete(__p[0]);
        }
        value = v50;
        CFMutableDictionaryRef v50 = 0;
        sub_1000558F4((const void **)&v50);
        if (SHIBYTE(v54) < 0) {
          operator delete((void *)buf);
        }
        if (SHIBYTE(v48) < 0) {
          operator delete((void *)__dst);
        }
        uint64_t v52 = 0;
        uint64_t v9 = sub_1006B3B68((os_log_t *)(a1 + 40), (const __CFString *)value);
        uint64_t v52 = v9;
        long long v46 = 0u;
        *(_OWORD *)long long v45 = 0u;
        *(_OWORD *)long long v43 = 0u;
        memset(v44, 0, sizeof(v44));
        memset(v42, 0, sizeof(v42));
        *(_OWORD *)std::string __p = 0u;
        long long v40 = v9;
        if (v9) {
          CFRetain(v9);
        }
        CarrierBundleHandler::lookupBundle_sync(a1, 1u, (const void **)&v40, (uint64_t)__p);
        sub_100057D78((const void **)&v40);
        sub_1000292E0((uint64_t)&buf);
        if (SHIBYTE(v42[0]) >= 0) {
          int v10 = (void *)HIBYTE(v42[0]);
        }
        else {
          int v10 = __p[1];
        }
        unsigned int v11 = (void *)HIBYTE(v54);
        int v12 = SHIBYTE(v54);
        if (SHIBYTE(v54) < 0) {
          unsigned int v11 = (void *)*((void *)&buf + 1);
        }
        if (v10 != v11)
        {
          BOOL v22 = 0;
          if ((SHIBYTE(v54) & 0x80000000) == 0) {
            goto LABEL_45;
          }
          goto LABEL_66;
        }
        uint64_t v13 = SHIBYTE(v54) >= 0 ? &buf : (long long *)buf;
        if ((HIBYTE(v42[0]) & 0x80) != 0) {
          break;
        }
        if (HIBYTE(v42[0]))
        {
          uint64_t v14 = HIBYTE(v42[0]) - 1;
          uint64_t v15 = __p;
          do
          {
            int v17 = *(unsigned __int8 *)v15;
            uint64_t v15 = (void **)((char *)v15 + 1);
            int v16 = v17;
            int v19 = *(unsigned __int8 *)v13;
            uint64_t v13 = (long long *)((char *)v13 + 1);
            int v18 = v19;
            BOOL v21 = v14-- != 0;
            BOOL v22 = v16 == v18;
          }
          while (v16 == v18 && v21);
LABEL_44:
          if ((v12 & 0x80000000) == 0) {
            goto LABEL_45;
          }
          goto LABEL_66;
        }
        BOOL v22 = 1;
        if ((SHIBYTE(v54) & 0x80000000) == 0)
        {
LABEL_45:
          if (v22) {
            goto LABEL_46;
          }
          goto LABEL_67;
        }
LABEL_66:
        operator delete((void *)buf);
        if (v22)
        {
LABEL_46:
          CFMutableDictionaryRef Mutable = 0;
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFDictionaryAddValue(Mutable, key, value);
          sub_10004EFE4(&v39, (CFTypeRef *)&Mutable);
          CarrierBundleHandler::lookupBundle_sync(a1, 1u, &v39, (uint64_t)&buf);
          if (SHIBYTE(v42[0]) < 0) {
            operator delete(__p[0]);
          }
          *(_OWORD *)std::string __p = buf;
          v42[0] = v54;
          HIBYTE(v54) = 0;
          LOBYTE(buf) = 0;
          if (SHIBYTE(v42[3]) < 0) {
            operator delete(v42[1]);
          }
          *(_OWORD *)&v42[1] = v55;
          v42[3] = v56;
          HIBYTE(v56) = 0;
          LOBYTE(v55) = 0;
          if (SHIBYTE(v44[0]) < 0) {
            operator delete(v43[0]);
          }
          *(_OWORD *)long long v43 = v57;
          v44[0] = v58;
          HIBYTE(v58) = 0;
          LOBYTE(v57) = 0;
          if (SHIBYTE(v44[3]) < 0) {
            operator delete(v44[1]);
          }
          char v23 = 0;
          *(_OWORD *)&v44[1] = v59;
          v44[3] = v60;
          HIBYTE(v60) = 0;
          LOBYTE(v59) = 0;
          if (SBYTE7(v46) < 0)
          {
            operator delete(v45[0]);
            char v23 = HIBYTE(v60);
          }
          *(_OWORD *)long long v45 = v61;
          *(void *)&long long v46 = v62;
          HIBYTE(v62) = 0;
          LOBYTE(v61) = 0;
          BYTE8(v46) = v63;
          if (v23 < 0) {
            operator delete((void *)v59);
          }
          if (SHIBYTE(v58) < 0) {
            operator delete((void *)v57);
          }
          if (SHIBYTE(v56) < 0) {
            operator delete((void *)v55);
          }
          if (SHIBYTE(v54) < 0) {
            operator delete((void *)buf);
          }
          sub_100057D78(&v39);
          sub_10004EFE4(&v50, (CFTypeRef *)&Mutable);
          uint64_t v24 = v52;
          uint64_t v52 = v50;
          *(void *)&long long buf = v24;
          CFMutableDictionaryRef v50 = 0;
          sub_100057D78((const void **)&buf);
          sub_100057D78((const void **)&v50);
          sub_10005717C((const void **)&Mutable);
          goto LABEL_77;
        }
LABEL_67:
        CFMutableDictionaryRef Mutable = 0;
        if (SHIBYTE(v44[0]) >= 0) {
          uint64_t v25 = v43;
        }
        else {
          uint64_t v25 = (void **)v43[0];
        }
        if (SHIBYTE(v44[0]) >= 0) {
          CFIndex v26 = HIBYTE(v44[0]);
        }
        else {
          CFIndex v26 = (CFIndex)v43[1];
        }
        CFURLRef v27 = CFURLCreateFromFileSystemRepresentation(kCFAllocatorDefault, (const UInt8 *)v25, v26, 1u);
        CFMutableDictionaryRef Mutable = v27;
        CFURLRef v38 = v27;
        if (v27) {
          CFRetain(v27);
        }
        char v28 = sub_1004D276C((os_log_t *)(a1 + 40), v35, (const void **)&v38);
        sub_1000FE824((const void **)&v38);
        if ((v28 & 1) == 0)
        {
          __int16 v32 = *v6;
          if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
          {
            long long v33 = __p;
            if (SHIBYTE(v42[0]) < 0) {
              long long v33 = (void **)__p[0];
            }
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = v33;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I Matched bundle is not allowed for this device, %s", (uint8_t *)&buf, 0xCu);
          }
          sub_1000FE824((const void **)&Mutable);
          int v31 = 5;
          goto LABEL_89;
        }
        sub_1000FE824((const void **)&Mutable);
LABEL_77:
        uint64_t v29 = (void *)HIBYTE(v42[0]);
        if (SHIBYTE(v42[0]) < 0) {
          uint64_t v29 = __p[1];
        }
        if (v29)
        {
          BOOL v30 = *v6;
          if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = v52;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I Found bundle matching is %@", (uint8_t *)&buf, 0xCu);
          }
          sub_100058140(a3, (const void **)&v52);
          int v31 = 4;
        }
        else
        {
          int v31 = 0;
        }
LABEL_89:
        if (SBYTE7(v46) < 0) {
          operator delete(v45[0]);
        }
        if (SHIBYTE(v44[3]) < 0) {
          operator delete(v44[1]);
        }
        if (SHIBYTE(v44[0]) < 0) {
          operator delete(v43[0]);
        }
        if (SHIBYTE(v42[3]) < 0) {
          operator delete(v42[1]);
        }
        if (SHIBYTE(v42[0]) < 0) {
          operator delete(__p[0]);
        }
        sub_100057D78((const void **)&v52);
        sub_1000558F4((const void **)&value);
        if (v31 == 5 || !v31)
        {
          unsigned int v4 = (long long *)((char *)v4 + 24);
          if (v4 != v5) {
            continue;
          }
        }
        return;
      }
      BOOL v22 = memcmp(__p[0], v13, (size_t)__p[1]) == 0;
      goto LABEL_44;
    }
  }
  else
  {
    __int16 v34 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I No results when validating bundle names", (uint8_t *)__p, 2u);
    }
  }
}

void sub_1008A5990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,char a51,int a52,__int16 a53,char a54,char a55)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008A5A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_100057D78((const void **)va);
  JUMPOUT(0x1008A5A10);
}

void sub_1008A5A40()
{
}

void sub_1008A5A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,...)
{
  va_start(va, a43);
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_1000558F4((const void **)va);
  if (*(char *)(v43 - 217) < 0) {
    operator delete(*(void **)(v43 - 240));
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  JUMPOUT(0x1008A5A20);
}

void CarrierBundleHandler::loadTableAndLookupBundleNameForMccAndMnc_sync(uint64_t **this@<X0>, const MCCAndMNC *a2@<X1>, const void **a3@<X8>)
{
  *a3 = 0;
  v10[0] = 0;
  v10[1] = 0;
  uint64_t v9 = v10;
  CarrierBundleHandler::loadEquivalentTableFrom_sync((uint64_t)this, (uint64_t)(this + 48), (uint64_t)&v9);
  BOOL v6 = (long long **)sub_10013E278((uint64_t)&v9);
  if (v10 != (void **)v6)
  {
    CarrierBundleHandler::validateBundleNamesResult_sync((uint64_t)this, v6 + 12, &v8);
    if (&v8 != a3)
    {
      unsigned int v11 = *a3;
      *a3 = v8;
      int v8 = 0;
      sub_100057D78(&v11);
    }
    sub_100057D78(&v8);
  }
  unsigned int v11 = a2;
  long long v7 = sub_1008A7B20(this + 45, (uint64_t)a2, (uint64_t)&unk_10144E20E, (uint64_t *)&v11);
  sub_100058140((const void **)v7 + 12, a3);
  sub_1008A7A64((uint64_t)&v9, v10[0]);
}

void sub_1008A5B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
  sub_1008A7A64((uint64_t)&a11, a12);
  sub_100057D78(v12);
  _Unwind_Resume(a1);
}

void *CarrierBundleHandler::loadEquivalentTableFrom_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = off_101A14E78;
  v4[1] = a1;
  void v4[2] = a3;
  void v4[3] = v4;
  CarrierBundleHandler::loadKeyValuesTableFrom_sync(a1, a2, (uint64_t)v4);
  return sub_1008A81CC(v4);
}

void sub_1008A5C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1008A81CC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void CarrierBundleHandler::getBundleNamesForSID(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  uint64_t v6[2] = sub_1008A7CFC;
  v6[3] = &unk_101A14E08;
  void v6[4] = a1 + 8;
  v6[5] = v5;
  long long v7 = v6;
  uint64_t v4 = a1 + 24;
  int v3 = *(NSObject **)(a1 + 24);
  if (*(void *)(v4 + 8))
  {
    *a3 = 0u;
    a3[1] = 0u;
    timeval block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    int v10 = sub_1008A7E64;
    unsigned int v11 = &unk_101A14E48;
    int v12 = a3;
    uint64_t v13 = &v7;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    timeval block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    int v10 = sub_1008A7DFC;
    unsigned int v11 = &unk_101A14E28;
    int v12 = a3;
    uint64_t v13 = &v7;
    dispatch_sync(v3, &block);
  }
}

char *sub_1008A5D54(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 320);
  if (!v6) {
    goto LABEL_12;
  }
  unsigned int v7 = *(unsigned __int16 *)(a3 + 76);
  uint64_t v8 = a2 + 320;
  do
  {
    unsigned int v9 = *(unsigned __int16 *)(v6 + 108);
    BOOL v10 = v9 >= v7;
    if (v9 >= v7) {
      unsigned int v11 = (uint64_t *)v6;
    }
    else {
      unsigned int v11 = (uint64_t *)(v6 + 8);
    }
    if (v10) {
      uint64_t v8 = v6;
    }
    uint64_t v6 = *v11;
  }
  while (*v11);
  if (v8 != a2 + 320 && v7 >= *(unsigned __int16 *)(v8 + 108))
  {
    return sub_10019F19C(a1, v8 + 136);
  }
  else
  {
LABEL_12:
    sub_1008A4FBC(&v13, a2, a3);
    sub_100057D78(&v13);
    return (char *)sub_1008A5D54(a1, a2, a3);
  }
}

uint64_t CarrierBundleHandler::loadKeyValuesTableFrom_sync(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    int v5 = (char *)a2;
    uint64_t v6 = result;
    bzero(v96, 0x240uLL);
    sub_10013DD0C(v96);
    if (v96[17])
    {
      memset(&v93, 0, sizeof(v93));
      unsigned int v7 = v96[0];
      uint64_t v8 = (const std::ios_base *)((char *)v96 + (unint64_t)*(v96[0] - 3));
      if (!v8->__rdstate_)
      {
        std::ios_base::getloc(v8);
        unsigned int v9 = std::locale::use_facet(v94, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
        std::locale::~locale(v94);
        sub_10013EA34((uint64_t)v96);
        unsigned int v7 = v96[0];
      }
      BOOL v10 = (const std::ios_base *)((char *)v96 + (void)*(v7 - 3));
      if (!v10->__rdstate_)
      {
        uint64_t v79 = v5;
        do
        {
          std::ios_base::getloc(v10);
          unsigned int v11 = std::locale::use_facet(v94, &std::ctype<char>::id);
          ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
          std::locale::~locale(v94);
          sub_10013EA34((uint64_t)v96);
          std::locale::locale(&v90);
          LODWORD(v94[0].__locale_) = 0x4000;
          std::locale::locale(&v94[1], &v90);
          sub_10013EC28(&v93, v94);
          std::locale::~locale(&v94[1]);
          std::locale::~locale(&v90);
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v93.__r_.__value_.__l.__size_)
            {
              int v12 = (std::string *)v93.__r_.__value_.__r.__words[0];
LABEL_14:
              if (v12->__r_.__value_.__s.__data_[0] != 35)
              {
                v90.__locale_ = 0;
                uint64_t v91 = 0;
                uint64_t v92 = 0;
                ctu::tokenize();
                if (0xAAAAAAAAAAAAAAABLL * ((int64_t)(v91 - (unint64_t)v90.__locale_) >> 3) > 1)
                {
                  memset(&v89, 0, sizeof(v89));
                  if (*((char *)v90.__locale_ + 23) < 0)
                  {
                    sub_10004FC84(&__dst, *(void **)v90.__locale_, *((void *)v90.__locale_ + 1));
                  }
                  else
                  {
                    long long v16 = *(_OWORD *)v90.__locale_;
                    __dst.__r_.__value_.__r.__words[2] = *((void *)v90.__locale_ + 2);
                    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v16;
                  }
                  p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    p_dst = &__dst;
                  }
                  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
                  }
                  if (size)
                  {
                    std::string::size_type v19 = size;
                    while (1)
                    {
                      BOOL v20 = (std::string *)((char *)p_dst + v19);
                      unsigned int v21 = p_dst->__r_.__value_.__s.__data_[v19 - 1];
                      BOOL v22 = v21 > 0x22;
                      uint64_t v23 = (1 << v21) & 0x500000200;
                      if (v22 || v23 == 0) {
                        break;
                      }
                      if (!--v19) {
                        goto LABEL_37;
                      }
                    }
                  }
                  else
                  {
LABEL_37:
                    BOOL v20 = p_dst;
                  }
                  std::string::erase(&__dst, (char *)v20 - (char *)p_dst, (char *)p_dst + size - (char *)v20);
                  std::string::size_type v26 = __dst.__r_.__value_.__l.__size_;
                  uint64_t v25 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  {
                    uint64_t v25 = &__dst;
                    std::string::size_type v26 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                  }
                  if (v26)
                  {
                    CFURLRef v27 = (std::string *)((char *)v25 + v26);
                    char v28 = v25;
                    while (1)
                    {
                      unsigned int v29 = v28->__r_.__value_.__s.__data_[0];
                      BOOL v22 = v29 > 0x22;
                      uint64_t v30 = (1 << v29) & 0x500000200;
                      if (v22 || v30 == 0) {
                        break;
                      }
                      char v28 = (std::string *)((char *)v28 + 1);
                      if (!--v26)
                      {
                        char v28 = v27;
                        break;
                      }
                    }
                  }
                  else
                  {
                    char v28 = v25;
                  }
                  std::string::erase(&__dst, 0, (char *)v28 - (char *)v25);
                  std::string v89 = __dst;
                  memset(&__dst, 0, sizeof(__dst));
                  int v32 = *((char *)v90.__locale_ + 47);
                  memset(&v87, 0, sizeof(v87));
                  if (v32 < 0) {
                    sub_10004FC84(&v86, *((void **)v90.__locale_ + 3), *((void *)v90.__locale_ + 4));
                  }
                  else {
                    std::string v86 = *(std::string *)((unsigned char *)v90.__locale_ + 1);
                  }
                  long long v33 = (std::string *)v86.__r_.__value_.__r.__words[0];
                  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    long long v33 = &v86;
                  }
                  std::string::size_type v34 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
                  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v34 = v86.__r_.__value_.__l.__size_;
                  }
                  if (v34)
                  {
                    std::string::size_type v35 = v34;
                    while (1)
                    {
                      long long v36 = (std::string *)((char *)v33 + v35);
                      unsigned int v37 = v33->__r_.__value_.__s.__data_[v35 - 1];
                      BOOL v22 = v37 > 0x22;
                      uint64_t v38 = (1 << v37) & 0x500000200;
                      if (v22 || v38 == 0) {
                        break;
                      }
                      if (!--v35) {
                        goto LABEL_63;
                      }
                    }
                  }
                  else
                  {
LABEL_63:
                    long long v36 = v33;
                  }
                  std::string::erase(&v86, (char *)v36 - (char *)v33, (char *)v33 + v34 - (char *)v36);
                  std::string::size_type v41 = v86.__r_.__value_.__l.__size_;
                  long long v40 = (std::string *)v86.__r_.__value_.__r.__words[0];
                  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  {
                    long long v40 = &v86;
                    std::string::size_type v41 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
                  }
                  if (v41)
                  {
                    long long v42 = (std::string *)((char *)v40 + v41);
                    uint64_t v43 = v40;
                    while (1)
                    {
                      unsigned int v44 = v43->__r_.__value_.__s.__data_[0];
                      BOOL v22 = v44 > 0x22;
                      uint64_t v45 = (1 << v44) & 0x500000200;
                      if (v22 || v45 == 0) {
                        break;
                      }
                      uint64_t v43 = (std::string *)((char *)v43 + 1);
                      if (!--v41)
                      {
                        uint64_t v43 = v42;
                        break;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v43 = v40;
                  }
                  std::string::erase(&v86, 0, (char *)v43 - (char *)v40);
                  std::string v87 = v86;
                  memset(&v86, 0, sizeof(v86));
                  std::string::size_type v47 = v89.__r_.__value_.__l.__size_;
                  int v48 = SHIBYTE(v89.__r_.__value_.__r.__words[2]);
                  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v47 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
                  }
                  if (!v47) {
                    goto LABEL_124;
                  }
                  std::string::size_type v49 = HIBYTE(v87.__r_.__value_.__r.__words[2]);
                  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v49 = v87.__r_.__value_.__l.__size_;
                  }
                  if (v49)
                  {
                    uint64_t v50 = a3;
                    uint64_t v95 = 1;
                    memset(v94, 0, sizeof(v94));
                    uint64_t v84 = 0;
                    uint64_t v85 = 0;
                    int v83 = 0;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
                    sub_100047F64((void ***)&__p);
                    int v83 = 0;
                    uint64_t v84 = 0;
                    uint64_t v85 = 0;
                    ctu::tokenize();
                    uint64_t v52 = v83;
                    uint64_t v51 = v84;
                    while (v52 != v51)
                    {
                      memset(&__p, 0, sizeof(__p));
                      if (*((char *)v52 + 23) < 0)
                      {
                        sub_10004FC84(&v81, *v52, (unint64_t)v52[1]);
                      }
                      else
                      {
                        long long v53 = *(_OWORD *)v52;
                        v81.__r_.__value_.__r.__words[2] = (std::string::size_type)v52[2];
                        *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v53;
                      }
                      uint64_t v54 = (std::string *)v81.__r_.__value_.__r.__words[0];
                      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v54 = &v81;
                      }
                      std::string::size_type v55 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
                      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        std::string::size_type v55 = v81.__r_.__value_.__l.__size_;
                      }
                      if (v55)
                      {
                        std::string::size_type v56 = v55;
                        while (1)
                        {
                          long long v57 = (std::string *)((char *)v54 + v56);
                          unsigned int v58 = v54->__r_.__value_.__s.__data_[v56 - 1];
                          BOOL v22 = v58 > 0x22;
                          uint64_t v59 = (1 << v58) & 0x500000200;
                          if (v22 || v59 == 0) {
                            break;
                          }
                          if (!--v56) {
                            goto LABEL_97;
                          }
                        }
                      }
                      else
                      {
LABEL_97:
                        long long v57 = v54;
                      }
                      std::string::erase(&v81, (char *)v57 - (char *)v54, (char *)v54 + v55 - (char *)v57);
                      std::string::size_type v62 = v81.__r_.__value_.__l.__size_;
                      long long v61 = (std::string *)v81.__r_.__value_.__r.__words[0];
                      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      {
                        long long v61 = &v81;
                        std::string::size_type v62 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
                      }
                      if (v62)
                      {
                        char v63 = (std::string *)((char *)v61 + v62);
                        uint64_t v64 = v61;
                        while (1)
                        {
                          unsigned int v65 = v64->__r_.__value_.__s.__data_[0];
                          BOOL v22 = v65 > 0x22;
                          uint64_t v66 = (1 << v65) & 0x500000200;
                          if (v22 || v66 == 0) {
                            break;
                          }
                          uint64_t v64 = (std::string *)((char *)v64 + 1);
                          if (!--v62)
                          {
                            uint64_t v64 = v63;
                            break;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v64 = v61;
                      }
                      std::string::erase(&v81, 0, (char *)v64 - (char *)v61);
                      std::string __p = v81;
                      memset(&v81, 0, sizeof(v81));
                      std::string::size_type v68 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        std::string::size_type v68 = __p.__r_.__value_.__l.__size_;
                      }
                      if (v68)
                      {
                        locale = v94[1].__locale_;
                        if (v94[1].__locale_ >= v94[2].__locale_)
                        {
                          unsigned int v72 = (std::locale::__imp *)sub_1000D8CE8((uint64_t *)v94, (long long *)&__p);
                        }
                        else
                        {
                          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                          {
                            sub_10004FC84((unsigned char *)v94[1].__locale_, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                          }
                          else
                          {
                            long long v70 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                            *((void *)v94[1].__locale_ + 2) = *((void *)&__p.__r_.__value_.__l + 2);
                            *(_OWORD *)locale = v70;
                          }
                          unsigned int v72 = (std::locale::__imp *)((char *)locale + 24);
                        }
                        v94[1].__locale_ = v72;
                      }
                      else
                      {
                        BOOL v71 = *(NSObject **)(v6 + 40);
                        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)long long buf = 0;
                          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#E Empty Bundle Name value", buf, 2u);
                        }
                      }
                      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p.__r_.__value_.__l.__data_);
                      }
                      v52 += 3;
                    }
                    uint64_t v76 = *(void *)(v50 + 24);
                    if (!v76) {
                      sub_10007B600();
                    }
                    a3 = v50;
                    (*(void (**)(uint64_t, std::string *, std::locale *))(*(void *)v76 + 48))(v76, &v89, v94);
                    int v5 = v79;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v83;
                    sub_100047F64((void ***)&__p);
                    if ((_BYTE)v95)
                    {
                      int v83 = (void **)v94;
                      sub_100047F64(&v83);
                    }
                  }
                  else
                  {
LABEL_124:
                    char v73 = *(NSObject **)(v6 + 40);
                    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
                    {
                      std::string::size_type v74 = (std::locale::__imp *)v89.__r_.__value_.__r.__words[0];
                      if (v48 >= 0) {
                        std::string::size_type v74 = (std::locale::__imp *)&v89;
                      }
                      char v75 = (std::locale::__imp *)&v87;
                      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        char v75 = (std::locale::__imp *)v87.__r_.__value_.__r.__words[0];
                      }
                      LODWORD(v94[0].__locale_) = 136446466;
                      *(std::locale::__imp **)((char *)&v94[0].__locale_ + 4) = v74;
                      WORD2(v94[1].__locale_) = 2082;
                      *(std::locale::__imp **)((char *)&v94[1].__locale_ + 6) = v75;
                      _os_log_error_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "Empty strings in the file (%{public}s), (%{public}s)", (uint8_t *)v94, 0x16u);
                    }
                  }
                  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v87.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v89.__r_.__value_.__l.__data_);
                  }
                }
                else
                {
                  uint64_t v13 = *(NSObject **)(v6 + 40);
                  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v14 = (std::locale::__imp *)&v93;
                    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      uint64_t v14 = (std::locale::__imp *)v93.__r_.__value_.__r.__words[0];
                    }
                    if (v5[23] >= 0) {
                      uint64_t v15 = (std::locale::__imp *)v5;
                    }
                    else {
                      uint64_t v15 = *(std::locale::__imp **)v5;
                    }
                    LODWORD(v94[0].__locale_) = 136446466;
                    *(std::locale::__imp **)((char *)&v94[0].__locale_ + 4) = v14;
                    WORD2(v94[1].__locale_) = 2082;
                    *(std::locale::__imp **)((char *)&v94[1].__locale_ + 6) = v15;
                    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Not able to parse the line %{public}s in the %{public}s file", (uint8_t *)v94, 0x16u);
                  }
                }
                v94[0].__locale_ = (std::locale::__imp *)&v90;
                sub_100047F64((void ***)v94);
              }
            }
          }
          else if (*((unsigned char *)&v93.__r_.__value_.__s + 23))
          {
            int v12 = &v93;
            goto LABEL_14;
          }
          BOOL v10 = (const std::ios_base *)((char *)v96 + (unint64_t)*(v96[0] - 3));
        }
        while (!v10->__rdstate_);
      }
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v77 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      {
        if (v5[23] >= 0) {
          BOOL v78 = (std::locale::__imp *)v5;
        }
        else {
          BOOL v78 = *(std::locale::__imp **)v5;
        }
        LODWORD(v94[0].__locale_) = 136446210;
        *(std::locale::__imp **)((char *)&v94[0].__locale_ + 4) = v78;
        _os_log_error_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "Failed to open the file %{public}s", (uint8_t *)v94, 0xCu);
      }
    }
    std::filebuf::~filebuf();
    std::istream::~istream();
    return std::ios::~ios();
  }
  return result;
}

void sub_1008A67F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,std::locale a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  a53.__locale_ = (std::locale::__imp *)&a44;
  sub_100047F64((void ***)&a53);
  if (a52 < 0) {
    operator delete(a47);
  }
  sub_10013DEDC(&a58);
  _Unwind_Resume(a1);
}

void CarrierBundleHandler::evaluateBestPathToPLMNTable_sync(uint64_t a1, uint64_t a2)
{
  memset(&__s1, 0, sizeof(__s1));
  sub_1008A6B2C(&__s1, a1, @"SIDTableFileName", @"SIDTableVersion", (std::string::size_type)"SID Table", a2);
  uint64_t v3 = (uint64_t *)(a1 + 336);
  uint64_t v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  int v5 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 359);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 344);
  }
  if (size == v7)
  {
    if (v8 >= 0) {
      unsigned int v9 = (unsigned __int8 *)(a1 + 336);
    }
    else {
      unsigned int v9 = (unsigned __int8 *)*v3;
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      unsigned int v11 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v9, __s1.__r_.__value_.__l.__size_))
      {
LABEL_26:
        operator delete(v11);
        return;
      }
    }
    else
    {
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
        return;
      }
      p_s1 = &__s1;
      while (p_s1->__r_.__value_.__s.__data_[0] == *v9)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v9;
        if (!--v4)
        {
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            return;
          }
          goto LABEL_25;
        }
      }
    }
  }
  int v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = a1 + 336;
    if (v8 < 0) {
      uint64_t v13 = *v3;
    }
    uint64_t v14 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    if (v5 >= 0) {
      uint64_t v14 = &__s1;
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v17 = v13;
    __int16 v18 = 2082;
    std::string::size_type v19 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I CDMA 1x SID lookup table path is changing from '%{public}s' to '%{public}s'", buf, 0x16u);
  }
  std::string::operator=((std::string *)(a1 + 336), &__s1);
  sub_1006889C0(a1 + 288, *(void **)(a1 + 296));
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = a1 + 296;
  sub_100688A7C(a1 + 312, *(void **)(a1 + 320));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = a1 + 320;
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
LABEL_25:
    unsigned int v11 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_26;
  }
}

void sub_1008A6B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1008A6B2C(std::string *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::string::size_type a5, uint64_t a6)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  char v75 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a2 + 104));
  unsigned int v11 = ServiceMap;
  std::string::size_type v13 = v12;
  if ((v12 & 0x8000000000000000) != 0)
  {
    uint64_t v14 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v15 = 5381;
    do
    {
      std::string::size_type v13 = v15;
      unsigned int v16 = *v14++;
      uint64_t v15 = (33 * v15) ^ v16;
    }
    while (v16);
  }
  std::mutex::lock(ServiceMap);
  __dst.__r_.__value_.__r.__words[0] = v13;
  uint64_t v17 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)&__dst);
  if (v17)
  {
    uint64_t v19 = v17[3];
    __int16 v18 = (std::__shared_weak_count *)v17[4];
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v18);
      char v20 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  std::mutex::unlock(v11);
  __int16 v18 = 0;
  char v20 = 1;
LABEL_9:
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v19 + 80))(&__p, v19, a6, 1, a4, 0, 0);
  sub_100056248(&v75, (CFTypeRef *)&__p.__r_.__value_.__l.__data_);
  sub_1000577C4((const void **)&__p.__r_.__value_.__l.__data_);
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v18);
  }
  if (v75) {
    unsigned int v21 = sub_1000810B8;
  }
  else {
    unsigned int v21 = 0;
  }
  if (v21)
  {
    BOOL v22 = *(NSObject **)(a2 + 40);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      memset(&__dst, 0, sizeof(__dst));
      ctu::cf::assign();
      std::string __p = __dst;
      p_p = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = a5;
      __int16 v78 = 2082;
      uint64_t v79 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %{public}s File version in carrier bundle: %{public}s", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  std::string::size_type v74 = 0;
  uint64_t v24 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a2 + 104));
  uint64_t v25 = v24;
  std::string::size_type v26 = v12;
  if ((v12 & 0x8000000000000000) != 0)
  {
    CFURLRef v27 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v28 = 5381;
    do
    {
      std::string::size_type v26 = v28;
      unsigned int v29 = *v27++;
      uint64_t v28 = (33 * v28) ^ v29;
    }
    while (v29);
  }
  std::mutex::lock(v24);
  __dst.__r_.__value_.__r.__words[0] = v26;
  uint64_t v30 = sub_10004D37C(&v25[1].__m_.__sig, (unint64_t *)&__dst);
  if (v30)
  {
    uint64_t v32 = v30[3];
    int v31 = (std::__shared_weak_count *)v30[4];
    if (v31)
    {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v25);
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v31);
      char v33 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v32 = 0;
  }
  std::mutex::unlock(v25);
  int v31 = 0;
  char v33 = 1;
LABEL_28:
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v32 + 80))(&__p, v32, a6, 4, a4, 0, 0);
  sub_100056248(&v74, (CFTypeRef *)&__p.__r_.__value_.__l.__data_);
  sub_1000577C4((const void **)&__p.__r_.__value_.__l.__data_);
  if ((v33 & 1) == 0) {
    sub_10004D2C8(v31);
  }
  std::string::size_type v34 = v74;
  if (v74) {
    std::string::size_type v35 = sub_1000810B8;
  }
  else {
    std::string::size_type v35 = 0;
  }
  if (v35)
  {
    long long v36 = *(NSObject **)(a2 + 40);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      memset(&__dst, 0, sizeof(__dst));
      ctu::cf::assign();
      std::string __p = __dst;
      unsigned int v37 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v37 = &__p;
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = a5;
      __int16 v78 = 2082;
      uint64_t v79 = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#I %{public}s File version in default bundle: %{public}s", buf, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string::size_type v34 = v74;
    }
  }
  if (v75) {
    uint64_t v38 = sub_1000810B8;
  }
  else {
    uint64_t v38 = 0;
  }
  if (v34) {
    long long v39 = sub_1000810B8;
  }
  else {
    long long v39 = 0;
  }
  if (v38)
  {
    if (v39) {
      BOOL v40 = _CompareBundleVersionStrings(v75, v34) != -1;
    }
    else {
      BOOL v40 = 1;
    }
LABEL_52:
    std::string::size_type v72 = 0;
    char v73 = 0;
    std::string::size_type v41 = *(NSObject **)(a2 + 40);
    BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
    if (v40)
    {
      if (v42)
      {
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = a5;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I Choosing %s file inside the carrier bundle", (uint8_t *)&__dst, 0xCu);
      }
      sub_100083EB8(&v73, (const void **)&v75);
      uint64_t v43 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a2 + 104));
      unsigned int v44 = v43;
      if ((v12 & 0x8000000000000000) != 0)
      {
        uint64_t v45 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v46 = 5381;
        do
        {
          std::string::size_type v12 = v46;
          unsigned int v47 = *v45++;
          uint64_t v46 = (33 * v46) ^ v47;
        }
        while (v47);
      }
      std::mutex::lock(v43);
      __dst.__r_.__value_.__r.__words[0] = v12;
      int v48 = sub_10004D37C(&v44[1].__m_.__sig, (unint64_t *)&__dst);
      if (v48)
      {
        uint64_t v50 = v48[3];
        std::string::size_type v49 = (std::__shared_weak_count *)v48[4];
        if (v49)
        {
          atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v44);
          atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v49);
          char v51 = 0;
LABEL_71:
          (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v50 + 80))(buf, v50, a6, 1, a3, 0, 0);
          sub_100056248(&__p, (CFTypeRef *)buf);
          __dst.__r_.__value_.__r.__words[0] = v72;
          std::string::size_type v72 = __p.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 0;
          sub_1000558F4((const void **)&__dst.__r_.__value_.__l.__data_);
          sub_1000558F4((const void **)&__p.__r_.__value_.__l.__data_);
          sub_1000577C4((const void **)buf);
          if ((v51 & 1) == 0) {
            sub_10004D2C8(v49);
          }
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 128))(&__dst, a2, a6);
          goto LABEL_79;
        }
      }
      else
      {
        uint64_t v50 = 0;
      }
      std::mutex::unlock(v44);
      std::string::size_type v49 = 0;
      char v51 = 1;
      goto LABEL_71;
    }
    if (v42)
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = a5;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I Choosing %s file inside the default bundle", (uint8_t *)&__dst, 0xCu);
    }
    sub_100083EB8(&v73, (const void **)&v74);
    uint64_t v52 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a2 + 104));
    long long v53 = v52;
    if ((v12 & 0x8000000000000000) != 0)
    {
      uint64_t v54 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v55 = 5381;
      do
      {
        std::string::size_type v12 = v55;
        unsigned int v56 = *v54++;
        uint64_t v55 = (33 * v55) ^ v56;
      }
      while (v56);
    }
    std::mutex::lock(v52);
    __dst.__r_.__value_.__r.__words[0] = v12;
    long long v57 = sub_10004D37C(&v53[1].__m_.__sig, (unint64_t *)&__dst);
    if (v57)
    {
      uint64_t v59 = v57[3];
      unsigned int v58 = (std::__shared_weak_count *)v57[4];
      if (v58)
      {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v53);
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v58);
        char v60 = 0;
LABEL_76:
        (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(*(void *)v59 + 80))(buf, v59, a6, 4, a3, 0, 0);
        sub_100056248(&__p, (CFTypeRef *)buf);
        __dst.__r_.__value_.__r.__words[0] = v72;
        std::string::size_type v72 = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[0] = 0;
        sub_1000558F4((const void **)&__dst.__r_.__value_.__l.__data_);
        sub_1000558F4((const void **)&__p.__r_.__value_.__l.__data_);
        sub_1000577C4((const void **)buf);
        if ((v60 & 1) == 0) {
          sub_10004D2C8(v58);
        }
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a2 + 152))(&__dst, a2);
LABEL_79:
        long long v61 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        *(_DWORD *)BOOL v71 = __dst.__r_.__value_.__r.__words[2];
        *(_DWORD *)&v71[3] = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3);
        char v62 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if (v72) {
          char v63 = sub_1000810B8;
        }
        else {
          char v63 = 0;
        }
        if (!v63) {
          goto LABEL_95;
        }
        memset(&__dst, 0, sizeof(__dst));
        *(void *)long long buf = v72;
        sub_1000292E0((uint64_t)&__p);
        memset(&__dst, 0, sizeof(__dst));
        if (v62 < 0)
        {
          sub_10004FC84(&__dst, (void *)v61, *((unint64_t *)&v61 + 1));
        }
        else
        {
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v61;
          LODWORD(__dst.__r_.__value_.__r.__words[2]) = *(_DWORD *)v71;
          *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)&v71[3];
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v62;
        }
        ctu::path_join_impl();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_101A0BD40;
        unsigned __int8 v64 = sub_1007ECCD4((uint64_t)&__p, (uint64_t *)&__dst);
        FileSystemInterface::~FileSystemInterface((FileSystemInterface *)&__p);
        if (v64)
        {
          std::string::operator=(a1, &__dst);
        }
        else
        {
          unsigned int v65 = *(NSObject **)(a2 + 40);
          if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
          {
            p_dst = &__dst;
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            LODWORD(__p.__r_.__value_.__l.__data_) = 136446466;
            *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = a5;
            WORD2(__p.__r_.__value_.__r.__words[1]) = 2082;
            *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_dst;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#I %{public}s file %{public}s does not exist", (uint8_t *)&__p, 0x16u);
          }
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__dst.__r_.__value_.__l.__data_);
          if ((v62 & 0x80) == 0) {
            goto LABEL_97;
          }
        }
        else
        {
LABEL_95:
          if ((v62 & 0x80) == 0)
          {
LABEL_97:
            sub_1000558F4((const void **)&v72);
            sub_1000558F4(&v73);
            goto LABEL_98;
          }
        }
        operator delete((void *)v61);
        goto LABEL_97;
      }
    }
    else
    {
      uint64_t v59 = 0;
    }
    std::mutex::unlock(v53);
    unsigned int v58 = 0;
    char v60 = 1;
    goto LABEL_76;
  }
  if (v39)
  {
    BOOL v40 = 0;
    goto LABEL_52;
  }
  std::string::size_type v68 = *(NSObject **)(a2 + 40);
  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = a5;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#I No %{public}s file in carrier or default bundles", (uint8_t *)&__dst, 0xCu);
  }
LABEL_98:
  sub_1000558F4((const void **)&v74);
  return sub_1000558F4((const void **)&v75);
}

void sub_1008A74AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, const void *a14, const void *a15, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  sub_1000558F4(&a13);
  sub_1000558F4(&a14);
  sub_1000558F4(&a15);
  sub_1000558F4(&a16);
  if (*(char *)(a10 + 23) < 0) {
    operator delete(*(void **)a10);
  }
  _Unwind_Resume(a1);
}

void sub_1008A7634()
{
}

void CarrierBundleHandler::evaluateBestPathToEquivalentBundleTable_sync(uint64_t a1, uint64_t a2)
{
  memset(&__s1, 0, sizeof(__s1));
  sub_1008A6B2C(&__s1, a1, @"EquivalentBundleTableFileName", @"EquivalentBundleTableVersion", (std::string::size_type)"Equivalent Bundle Table", a2);
  uint64_t v3 = (uint64_t *)(a1 + 384);
  uint64_t v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  int v5 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 407);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 392);
  }
  if (size == v7)
  {
    if (v8 >= 0) {
      unsigned int v9 = (unsigned __int8 *)(a1 + 384);
    }
    else {
      unsigned int v9 = (unsigned __int8 *)*v3;
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      unsigned int v11 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v9, __s1.__r_.__value_.__l.__size_))
      {
LABEL_26:
        operator delete(v11);
        return;
      }
    }
    else
    {
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
        return;
      }
      p_s1 = &__s1;
      while (p_s1->__r_.__value_.__s.__data_[0] == *v9)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v9;
        if (!--v4)
        {
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            return;
          }
          goto LABEL_25;
        }
      }
    }
  }
  std::string::size_type v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = a1 + 384;
    if (v8 < 0) {
      uint64_t v13 = *v3;
    }
    uint64_t v14 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    if (v5 >= 0) {
      uint64_t v14 = &__s1;
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v17 = v13;
    __int16 v18 = 2082;
    uint64_t v19 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Equivalent bundle table path is changing from '%{public}s' to '%{public}s'", buf, 0x16u);
  }
  std::string::operator=((std::string *)(a1 + 384), &__s1);
  sub_100688B38(a1 + 360, *(void **)(a1 + 368));
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 360) = a1 + 368;
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
LABEL_25:
    unsigned int v11 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_26;
  }
}

void sub_1008A77FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CarrierBundleHandler::handleRegisteredNetwork2InfoRest_sync(CarrierBundleHandler *this, const RegisteredNetworkInfo *a2)
{
}

char **sub_1008A7860(uint64_t **a1, unsigned __int16 a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = (char *)a1[1];
  uint64_t v7 = (char **)(a1 + 1);
  int v8 = (char **)(a1 + 1);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v8 = (char **)v5;
        unsigned int v9 = *((unsigned __int16 *)v5 + 54);
        if (v9 <= a2) {
          break;
        }
        int v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    uint64_t v14 = 0;
    BOOL v10 = (char *)operator new(0xA8uLL);
    v13[0] = v10;
    v13[1] = v6;
    *((_WORD *)v10 + 16) = *(_WORD *)a3;
    MCC::MCC((MCC *)(v10 + 40), (const MCC *)(a3 + 8));
    MCC::MCC((MCC *)(v10 + 72), (const MCC *)(a3 + 40));
    *(_OWORD *)(v10 + 104) = *(_OWORD *)(a3 + 72);
    *(_OWORD *)(v10 + 114) = *(_OWORD *)(a3 + 82);
    v10[136] = 0;
    v10[160] = 0;
    LOBYTE(v14) = 1;
    *(void *)BOOL v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v8;
    *uint64_t v7 = v10;
    unsigned int v11 = (uint64_t *)**a1;
    if (v11)
    {
      *a1 = v11;
      BOOL v10 = *v7;
    }
    sub_100046C90(a1[1], (uint64_t *)v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    int v8 = (char **)v13[0];
    v13[0] = 0;
    sub_1008A79B4((uint64_t)v13);
  }
  return v8;
}

void sub_1008A7988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*(void **)(v2 + 48));
  }
  sub_1008A79B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1008A79B4(uint64_t a1)
{
  unsigned int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100688AD8((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_1008A7A0C(uint64_t a1)
{
  unsigned int v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100688A1C((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_1008A7A64(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1008A7A64(a1, *a2);
    sub_1008A7A64(a1, a2[1]);
    sub_1008A7AC0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1008A7AC0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v2 = (void **)(a1 + 64);
    sub_100047F64(&v2);
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

uint64_t *sub_1008A7B20(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)sub_10013E948((uint64_t)a1, &v11);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1008A7BD8((uint64_t)a1, a4, v10);
    sub_100046C38(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_1008A7CA4((uint64_t)v10, 0);
  }
  return v7;
}

MCC *sub_1008A7BD8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x68uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_1008A7C4C((MCC *)(v6 + 32), *a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1008A7C34(_Unwind_Exception *a1)
{
  sub_1008A7CA4(v1, 0);
  _Unwind_Resume(a1);
}

MCC *sub_1008A7C4C(MCC *a1, uint64_t a2)
{
  MCC::MCC(a1, (const MCC *)a2);
  MCC::MCC((MCC *)(v4 + 32), (const MCC *)(a2 + 32));
  *((void *)a1 + 8) = 0;
  return a1;
}

void sub_1008A7C88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_1008A7CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100688B94((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_1008A7CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *v3;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  sub_1008A5D54((char *)a2, v4, v3[1]);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(unsigned __int16 *)(v3[1] + 76);
      v8[0] = 67109120;
      v8[1] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#N Did not find bundle names for CDMA 1x SID %d", (uint8_t *)v8, 8u);
    }
  }
  return Cdma1xCell::dumpState((Cdma1xCell *)v3[1], (const ctu::OsLogLogger *)(v4 + 40));
}

void sub_1008A7DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (*(unsigned char *)(v9 + 24))
  {
    a9 = v9;
    sub_100047F64((void ***)&a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008A7DFC(uint64_t a1)
{
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 40) + 16))(&v2);
  sub_100179A54(*(void *)(a1 + 32), &v2);
  if (v3)
  {
    uint64_t v4 = &v2;
    sub_100047F64((void ***)&v4);
  }
}

void sub_1008A7E64(uint64_t a1)
{
  (*(void (**)(__n128 *__return_ptr))(**(void **)(a1 + 40) + 16))(&v2);
  sub_100179A54(*(void *)(a1 + 32), &v2);
  if (v3)
  {
    uint64_t v4 = &v2;
    sub_100047F64((void ***)&v4);
  }
}

void sub_1008A7ED0()
{
}

__n128 sub_1008A7EE4(uint64_t a1)
{
  __n128 v2 = (char *)operator new(0x18uLL);
  *(void *)__n128 v2 = off_101A14E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1008A7F30(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A14E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1008A7F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  *(_OWORD *)std::string::size_type v12 = 0u;
  long long v13 = 0u;
  MCCAndMNC::MCCAndMNC();
  uint64_t v5 = *(uint64_t ***)(a1 + 16);
  int v6 = (char *)v5[1];
  uint64_t v7 = (char **)(v5 + 1);
  int v8 = (char **)(v5 + 1);
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t v7 = (char **)(v5 + 1);
  while (1)
  {
    while (1)
    {
      int v8 = (char **)v6;
      if (!MCCAndMNC::operator<()) {
        break;
      }
      int v6 = *v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if (!MCCAndMNC::operator<()) {
      break;
    }
    uint64_t v7 = v8 + 1;
    int v6 = v8[1];
    if (!v6) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = *v7;
  if (!*v7)
  {
LABEL_10:
    uint64_t v17 = 0;
    BOOL v10 = (char *)operator new(0x80uLL);
    v16[0] = v10;
    v16[1] = v5 + 1;
    MCC::MCC((MCC *)(v10 + 32), (const MCC *)v12);
    MCC::MCC((MCC *)(v10 + 64), (const MCC *)__p);
    v10[96] = 0;
    v10[120] = 0;
    LOBYTE(v17) = 1;
    *(void *)BOOL v10 = 0;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = v8;
    *uint64_t v7 = v10;
    uint64_t v11 = (uint64_t *)**v5;
    if (v11)
    {
      *uint64_t v5 = v11;
      BOOL v10 = *v7;
    }
    sub_100046C90(v5[1], (uint64_t *)v10);
    void v5[2] = (uint64_t *)((char *)v5[2] + 1);
    uint64_t v9 = (char *)v16[0];
    v16[0] = 0;
    sub_1008A8174((uint64_t)v16);
  }
  sub_100179D50((uint64_t)(v9 + 96), a3);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
}

void sub_1008A80D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (*(char *)(v24 + 63) < 0) {
    operator delete(*(void **)(v24 + 40));
  }
  sub_1008A8174((uint64_t)&a24);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1008A8128(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008A8168()
{
}

void sub_1008A8174(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1008A7AC0((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *sub_1008A81CC(void *a1)
{
  __n128 v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1008A8254()
{
}

__n128 sub_1008A8268(uint64_t a1)
{
  __n128 v2 = (char *)operator new(0x18uLL);
  *(void *)__n128 v2 = off_101A14F08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1008A82B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A14F08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1008A82E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v9 = 0u;
  *(_OWORD *)BOOL v10 = 0u;
  MCC::MCC((MCC *)((char *)&v9 + 8));
  MNC::MNC((MNC *)((char *)&v11 + 8));
  BYTE8(v13) = 0;
  LOWORD(v15) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v7 = (const char *)a2;
  }
  else {
    uint64_t v7 = *(const char **)a2;
  }
  WORD6(v13) = atoi(v7);
  Cdma1xCell::dumpState((Cdma1xCell *)&v9, (const ctu::OsLogLogger *)(v6 + 40));
  int v8 = sub_1008A7860(*(uint64_t ***)(a1 + 16), WORD6(v13), (uint64_t)&v9);
  sub_100179D50((uint64_t)(v8 + 17), a3);
  if (SBYTE7(v13) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v11) < 0) {
    operator delete(v10[0]);
  }
}

void sub_1008A83B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008A83EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1008A842C()
{
}

MCC *sub_1008A8438(MCC *this, const MCC *a2)
{
  if (*((unsigned char *)this + 32))
  {
    MCC::operator=();
  }
  else
  {
    MCC::MCC(this, a2);
    *((unsigned char *)this + 32) = 1;
  }
  return this;
}

MCC *sub_1008A8480(MCC *this, const MCC *a2)
{
  if (*((unsigned char *)this + 32))
  {
    MCC::operator=();
  }
  else
  {
    MCC::MCC(this, a2);
    *((unsigned char *)this + 32) = 1;
  }
  return this;
}

const void **sub_1008A84C8@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_100058DB0(__p, "generateKeyPair");
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(theDict, kSecAttrKeyType, kSecAttrKeyTypeRSA);
  __n128 v2 = theDict;
  v14[0] = 0;
  __p[0] = (void *)2048;
  CFNumberRef v3 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, __p);
  if (v3)
  {
    uint64_t v4 = v14[0];
    v14[0] = v3;
    __p[0] = v4;
    sub_1000570E8((const void **)__p);
  }
  value = v14[0];
  v14[0] = 0;
  sub_1000570E8((const void **)v14);
  CFDictionaryAddValue(v2, kSecAttrKeySizeInBits, value);
  sub_1000570E8((const void **)&value);
  CFDictionaryAddValue(theDict, kSecUseDataProtectionKeychain, kCFBooleanTrue);
  CFErrorRef error = 0;
  uint64_t v5 = SecKeyCreateRandomKey(theDict, &error);
  uint64_t v6 = v5;
  if (v5)
  {
    SecKeyRef v7 = SecKeyCopyPublicKey(v5);
    sub_10005717C((const void **)&theDict);
    memset(__p, 0, 24);
    sub_1008A87EC(a1, (uint64_t)__p);
    sub_100127DDC((const void **)&__p[1]);
    sub_100127DDC((const void **)__p);
    int v8 = *(void **)a1;
    *(void *)a1 = v7;
    __p[0] = v8;
    sub_100127DDC((const void **)__p);
    long long v9 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v6;
    __p[0] = v9;
    return sub_100127DDC((const void **)__p);
  }
  else
  {
    sub_100058DB0(v14, "ps.cer");
    sCTLogServer();
    ctu::StaticLogger::StaticLogger();
    long long v11 = __p[4];
    ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)__p);
    if (v13) {
      sub_10004D2C8(v13);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "";
      WORD2(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 6) = "";
      HIWORD(__p[2]) = 2112;
      __p[3] = error;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#W %s%sFailed to generate key pair with %@", (uint8_t *)__p, 0x20u);
    }
    if (error) {
      CFRelease(error);
    }
    return sub_10005717C((const void **)&theDict);
  }
}

void sub_1008A8774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, const void *a19)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10005717C(&a19);
  sub_1008AC324(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_1008A87EC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (a1 != a2)
    {
      uint64_t v4 = *(const void **)a1;
      *(void *)a1 = 0;
      SecKeyRef v7 = v4;
      *(void *)a1 = *(void *)a2;
      *(void *)a2 = 0;
      sub_100127DDC(&v7);
      uint64_t v5 = *(const void **)(a1 + 8);
      *(void *)(a1 + 8) = 0;
      SecKeyRef v7 = v5;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      sub_100127DDC(&v7);
    }
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1008A88A8(uint64_t a1@<X1>, const char *a2@<X2>, const char *a3@<X3>, const char *a4@<X4>, const char *a5@<X5>, const char *a6@<X6>, const char *a7@<X7>, const void **a8@<X8>)
{
  *a8 = 0;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a1 + 8);
  }
  if (v9)
  {
    std::string::size_type v59 = 0;
    sub_1008A9550((const void **)&v59, (const char *)a1);
    unsigned int v58 = 0;
    sub_1008A9550(&v58, a2);
    long long v57 = 0;
    sub_1008A9550(&v57, a3);
    unsigned int v56 = 0;
    sub_1008A9550(&v56, a4);
    uint64_t v55 = 0;
    sub_1008A9550(&v55, a5);
    uint64_t v54 = 0;
    sub_1008A9550(&v54, a6);
    long long v53 = 0;
    sub_1008A9550(&v53, a7);
    uint64_t v76 = kSecOidCommonName;
    uint64_t v77 = (std::__shared_weak_count *)SecASN1UTF8String;
    std::string::size_type v78 = v59;
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = 0;
    v75[0] = kSecOidCountryName;
    v75[1] = SecASN1UTF8String;
    v75[2] = v58;
    memset(&v75[3], 0, 24);
    v74[0] = kSecOidStateProvinceName;
    v74[1] = SecASN1UTF8String;
    v74[2] = v57;
    memset(&v74[3], 0, 24);
    v73[0] = kSecOidLocalityName;
    v73[1] = SecASN1UTF8String;
    unsigned int v16 = v55;
    uint64_t v17 = v56;
    v73[2] = v56;
    memset(&v73[3], 0, 24);
    v72[0] = kSecOidOrganization;
    v72[1] = SecASN1UTF8String;
    v72[2] = v55;
    memset(&v72[3], 0, 24);
    v71[0] = kSecOidOrganizationalUnit;
    v71[1] = SecASN1UTF8String;
    __int16 v18 = v54;
    v71[2] = v54;
    memset(&v71[3], 0, 24);
    v70[0] = @"1.2.840.113549.1.9.1";
    v70[1] = SecASN1UTF8String;
    uint64_t v19 = v53;
    v70[2] = v53;
    memset(&v70[3], 0, 24);
    long long v84 = 0u;
    long long v83 = 0u;
    *(_OWORD *)&uint8_t buf[8] = 0u;
    uint64_t v85 = 0;
    *(void *)long long buf = &v76;
    if (v58) {
      char v20 = sub_1000810B8;
    }
    else {
      char v20 = 0;
    }
    if (v20)
    {
      *(void *)&uint8_t buf[8] = v75;
      uint64_t v21 = 2;
    }
    else
    {
      uint64_t v21 = 1;
    }
    if (v57) {
      uint64_t v24 = sub_1000810B8;
    }
    else {
      uint64_t v24 = 0;
    }
    if (v24) {
      *(void *)&buf[8 * v21++] = v74;
    }
    if (v17) {
      char v25 = sub_1000810B8;
    }
    else {
      char v25 = 0;
    }
    if (v25) {
      *(void *)&buf[8 * v21++] = v73;
    }
    if (v16) {
      std::string::size_type v26 = sub_1000810B8;
    }
    else {
      std::string::size_type v26 = 0;
    }
    if (v26) {
      *(void *)&buf[8 * v21++] = v72;
    }
    if (v18) {
      CFURLRef v27 = sub_1000810B8;
    }
    else {
      CFURLRef v27 = 0;
    }
    if (v27) {
      *(void *)&buf[8 * v21++] = v71;
    }
    if (v19) {
      uint64_t v28 = sub_1000810B8;
    }
    else {
      uint64_t v28 = 0;
    }
    if (v28) {
      *(void *)&buf[8 * v21++] = v70;
    }
    *(void *)&buf[8 * v21] = 0;
    CFMutableDictionaryRef theDict = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFMutableDictionaryRef v30 = theDict;
      CFMutableDictionaryRef theDict = Mutable;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
      sub_10005717C((const void **)&__p.__r_.__value_.__l.__data_);
    }
    LODWORD(valuePtr.__r_.__value_.__l.__data_) = 7;
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(theDict, kSecCertificateKeyUsage, __p.__r_.__value_.__l.__data_);
    sub_1000570E8((const void **)&__p.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)@"dnsName";
    valuePtr.__r_.__value_.__r.__words[0] = v59;
    __str.__r_.__value_.__r.__words[0] = 0;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)CFDictionaryCreate(0, (const void **)&__p.__r_.__value_.__l.__data_, (const void **)&valuePtr.__r_.__value_.__l.__data_, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(theDict, kSecSubjectAltName, __str.__r_.__value_.__l.__data_);
    sub_100057D78((const void **)&__str.__r_.__value_.__l.__data_);
    uint64_t CertificateRequestWithParameters = SecGenerateCertificateRequestWithParameters();
    std::string::size_type v32 = (std::string::size_type)*a8;
    *a8 = (const void *)CertificateRequestWithParameters;
    __p.__r_.__value_.__r.__words[0] = v32;
    sub_100030068((const void **)&__p.__r_.__value_.__l.__data_);
    if (*a8) {
      char v33 = sub_10008324C;
    }
    else {
      char v33 = 0;
    }
    if (v33)
    {
      memset(&__str, 0, sizeof(__str));
      memset(&__p, 0, sizeof(__p));
      ctu::cf::assign();
      std::string valuePtr = __p;
      ctu::base64::encode();
      if (valuePtr.__r_.__value_.__r.__words[0])
      {
        valuePtr.__r_.__value_.__l.__size_ = valuePtr.__r_.__value_.__r.__words[0];
        operator delete(valuePtr.__r_.__value_.__l.__data_);
      }
      memset(&v62, 0, sizeof(v62));
      sub_100058DB0(&__p, "-----BEGIN CERTIFICATE REQUEST-----");
      std::string::size_type v34 = std::string::append(&__p, "\n", 1uLL);
      long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v35;
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        for (std::string::size_type i = 0; i < size; i += 64)
        {
          std::string::basic_string(&valuePtr, &__str, i, 0x40uLL, (std::allocator<char> *)&__dst);
          uint64_t v38 = std::string::append(&valuePtr, "\n", 1uLL);
          long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          __p.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v41 = __p.__r_.__value_.__l.__size_;
          }
          std::string::append(&v62, (const std::string::value_type *)p_p, v41);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(valuePtr.__r_.__value_.__l.__data_);
          }
        }
      }
      sub_100058DB0(&valuePtr, "-----END CERTIFICATE REQUEST-----");
      BOOL v42 = std::string::append(&valuePtr, "\n", 1uLL);
      long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v44 = &__p;
      }
      else {
        unsigned int v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v45 = __p.__r_.__value_.__l.__size_;
      }
      std::string::append(&v62, (const std::string::value_type *)v44, v45);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(valuePtr.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&__dst, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
      }
      else {
        std::string __dst = v62;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&valuePtr, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string valuePtr = __dst;
      }
      CFStringRef v64 = 0;
      if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&__p, valuePtr.__r_.__value_.__l.__data_, valuePtr.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = valuePtr;
      }
      CFStringRef v66 = 0;
      if (ctu::cf::convert_copy())
      {
        CFStringRef v48 = v64;
        CFStringRef v64 = v66;
        CFStringRef v67 = v48;
        sub_1000558F4((const void **)&v67);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      CFStringRef v49 = v64;
      CFStringRef v61 = v64;
      CFStringRef v64 = 0;
      sub_1000558F4((const void **)&v64);
      if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(valuePtr.__r_.__value_.__l.__data_);
      }
      CFDataRef ExternalRepresentation = CFStringCreateExternalRepresentation(0, v49, 0x8000100u, 0x20u);
      sub_1000558F4((const void **)&v61);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v62.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (&ExternalRepresentation != (CFDataRef *)a8)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)*a8;
        *a8 = ExternalRepresentation;
        CFDataRef ExternalRepresentation = 0;
        sub_100030068((const void **)&__p.__r_.__value_.__l.__data_);
      }
      sub_100030068((const void **)&ExternalRepresentation);
      if (*a8) {
        uint64_t v50 = sub_10008324C;
      }
      else {
        uint64_t v50 = 0;
      }
      if (v50)
      {
        sub_100058DB0(&valuePtr, "ps.cer");
        sCTLogServer();
        ctu::StaticLogger::StaticLogger();
        uint64_t v46 = v69;
        ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)&__p);
        if (__str.__r_.__value_.__l.__size_) {
          sub_10004D2C8((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(valuePtr.__r_.__value_.__l.__data_);
        }
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_123;
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        unsigned int v47 = "#I %s%sCSR was successfully created";
      }
      else
      {
        sub_100058DB0(&valuePtr, "ps.cer");
        sCTLogServer();
        ctu::StaticLogger::StaticLogger();
        uint64_t v46 = v69;
        ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)&__p);
        if (__str.__r_.__value_.__l.__size_) {
          sub_10004D2C8((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
        if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(valuePtr.__r_.__value_.__l.__data_);
        }
        if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_123;
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        unsigned int v47 = "#I %s%screateCsrPemFromDer - failed";
      }
    }
    else
    {
      sub_100058DB0(&valuePtr, "ps.cer");
      sCTLogServer();
      ctu::StaticLogger::StaticLogger();
      uint64_t v46 = v69;
      ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)&__p);
      if (__str.__r_.__value_.__l.__size_) {
        sub_10004D2C8((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(valuePtr.__r_.__value_.__l.__data_);
      }
      if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_123;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
      unsigned int v47 = "#I %s%sSecGenerateCertificateRequestWithParameters - failed";
    }
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, v47, (uint8_t *)&__p, 0x16u);
LABEL_123:
    sub_10005717C((const void **)&theDict);
    sub_1000558F4(&v53);
    sub_1000558F4(&v54);
    sub_1000558F4(&v55);
    sub_1000558F4(&v56);
    sub_1000558F4(&v57);
    sub_1000558F4(&v58);
    sub_1000558F4((const void **)&v59);
    return;
  }
  sub_100058DB0(&__p, "ps.cer");
  sCTLogServer();
  BOOL v22 = (ctu::StaticLogger *)ctu::StaticLogger::StaticLogger();
  uint64_t v23 = *((void *)&v83 + 1);
  ctu::StaticLogger::~StaticLogger(v22);
  if (v77) {
    sub_10004D2C8(v77);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = "";
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I %s%sCSR cannot be created without CN", buf, 0x16u);
  }
}

void sub_1008A931C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12, const void *a13, const void *a14, const void *a15, const void *a16, const void *a17, const void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a28) {
    sub_10004D2C8((std::__shared_weak_count *)a28);
  }
  if (a36 < 0) {
    operator delete(__p);
  }
  sub_10005717C(&a11);
  sub_1000558F4(&a12);
  sub_1000558F4(&a13);
  sub_1000558F4(&a14);
  sub_1000558F4(&a15);
  sub_1000558F4(&a16);
  sub_1000558F4(&a17);
  sub_1000558F4(&a18);
  sub_100030068(v36);
  _Unwind_Resume(a1);
}

const void **sub_1008A9550(const void **result, const char *a2)
{
  *__n128 result = 0;
  if (a2[23] < 0)
  {
    if (!*((void *)a2 + 1)) {
      return result;
    }
    a2 = *(const char **)a2;
    goto LABEL_6;
  }
  if (a2[23])
  {
LABEL_6:
    *__n128 result = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
    __n128 v2 = 0;
    return sub_1000558F4(&v2);
  }
  return result;
}

void sub_1008A95C0(_Unwind_Exception *a1)
{
  sub_1000558F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1008A95D4(uint64_t a1)
{
  return *(void *)a1;
}

void sub_1008A95DC()
{
}

void sub_1008A9F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  sub_100120040((const void **)(v39 - 176));
  if (__p) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_10004D2C8(v38);
  _Unwind_Resume(a1);
}

const void **sub_1008AA0A4(void *a1)
{
  sub_100058DB0(__p, "cleanupKey");
  if (SHIBYTE(v19) < 0) {
    operator delete(*(void **)__p);
  }
  keys[0] = (void *)kSecClass;
  keys[1] = (void *)kSecAttrLabel;
  keys[2] = (void *)kSecAttrAccessGroup;
  values[0] = (void *)kSecClassKey;
  values[1] = a1;
  values[2] = @"com.apple.identities";
  CFDictionaryRef v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef v13 = v2;
  int v3 = 0;
  if (v2) {
    uint64_t v4 = sub_100080778;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    do
    {
      OSStatus v5 = SecItemDelete(v2);
      sub_1008ABA38((uint64_t)"delete key by label", v5, 0);
      if (!v5) {
        ++v3;
      }
      CFDictionaryRef v2 = v13;
      if (v13) {
        uint64_t v6 = sub_100080778;
      }
      else {
        uint64_t v6 = 0;
      }
      if (v6) {
        BOOL v7 = v5 == 0;
      }
      else {
        BOOL v7 = 0;
      }
    }
    while (v7);
  }
  sub_100058DB0(v14, "ps.cer");
  sCTLogServer();
  ctu::StaticLogger::StaticLogger();
  int v8 = v21;
  ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)__p);
  if (v11[1]) {
    sub_10004D2C8((std::__shared_weak_count *)v11[1]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 0;
    v14[1] = 0;
    uint64_t v15 = 0;
    ctu::cf::assign();
    *(_OWORD *)long long v11 = *(_OWORD *)v14;
    uint64_t v12 = v15;
    uint64_t v9 = v11;
    if (v15 < 0) {
      uint64_t v9 = (void **)v14[0];
    }
    *(_DWORD *)std::string __p = 136315906;
    *(void *)&__p[4] = "";
    __int16 v17 = 2080;
    __int16 v18 = "";
    __int16 v19 = 2080;
    char v20 = v9;
    LOWORD(v21) = 1024;
    *(_DWORD *)((char *)&v21 + 2) = v3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%scleanupKey: '%s' - %d key(s) removed\n", __p, 0x26u);
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
  }
  return sub_100057D78((const void **)&v13);
}

void sub_1008AA30C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a13);
  _Unwind_Resume(a1);
}

const void **sub_1008AA35C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  keys[0] = (void *)kSecClass;
  keys[1] = (void *)kSecAttrLabel;
  keys[2] = (void *)kSecAttrAccessGroup;
  keys[3] = (void *)kSecReturnRef;
  values[0] = (void *)kSecClassKey;
  values[1] = a1;
  values[2] = @"com.apple.identities";
  values[3] = kCFBooleanTrue;
  CFDictionaryRef v3 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef v22 = v3;
  if (v3) {
    uint64_t v4 = sub_100080778;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v4) {
    goto LABEL_46;
  }
  CFTypeRef result = 0;
  OSStatus v5 = SecItemCopyMatching(v3, &result);
  if (v5 || !result)
  {
    if (v5 == -25300) {
      goto LABEL_46;
    }
    goto LABEL_24;
  }
  CFTypeID v6 = CFGetTypeID(result);
  if (v6 != SecKeyGetTypeID())
  {
LABEL_24:
    sub_100058DB0(__p, "ps.cer");
    sCTLogServer();
    ctu::StaticLogger::StaticLogger();
    long long v14 = v27;
    ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)buf);
    if (v19[1]) {
      sub_10004D2C8((std::__shared_weak_count *)v19[1]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v24 = 0;
      ctu::cf::assign();
      *(_OWORD *)__int16 v19 = *(_OWORD *)__p;
      uint64_t v20 = v24;
      uint64_t v15 = v19;
      if (v24 < 0) {
        uint64_t v15 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 2080;
      CFTypeRef v26 = v15;
      LOWORD(v27) = 1024;
      *(_DWORD *)((char *)&v27 + 2) = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#W %s%sSecItemCopyMatching failed to return key '%s' with %d", buf, 0x26u);
      if (SHIBYTE(v20) < 0) {
        operator delete(v19[0]);
      }
    }
    goto LABEL_46;
  }
  sub_100058DB0(__p, "ps.cer");
  sCTLogServer();
  ctu::StaticLogger::StaticLogger();
  BOOL v7 = v27;
  ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)buf);
  if (v19[1]) {
    sub_10004D2C8((std::__shared_weak_count *)v19[1]);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2112;
    CFTypeRef v26 = result;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s%sfound key result: %@", buf, 0x20u);
  }
  memset(buf, 0, sizeof(buf));
  sub_1008A87EC(a2, (uint64_t)buf);
  sub_100127DDC((const void **)&buf[8]);
  sub_100127DDC((const void **)buf);
  uint64_t v8 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = result;
  *(void *)long long buf = v8;
  sub_100127DDC((const void **)buf);
  uint64_t v9 = *(__SecKey **)(a2 + 8);
  if (v9) {
    BOOL v10 = sub_1008A95D4;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    SecKeyRef v11 = SecKeyCopyPublicKey(v9);
    uint64_t v12 = *(void *)a2;
    *(void *)a2 = v11;
    *(void *)long long buf = v12;
    sub_100127DDC((const void **)buf);
    if (*(void *)a2) {
      CFDictionaryRef v13 = sub_1008A95D4;
    }
    else {
      CFDictionaryRef v13 = 0;
    }
    if (v13)
    {
      *(unsigned char *)(a2 + 16) = 1;
      goto LABEL_46;
    }
    sub_100058DB0(__p, "ps.cer");
    sCTLogServer();
    ctu::StaticLogger::StaticLogger();
    unsigned int v16 = v27;
    ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)buf);
    if (v19[1]) {
      sub_10004D2C8((std::__shared_weak_count *)v19[1]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = "";
      __int16 v17 = "#W %s%spublic key cannot be retrieved from private key";
      goto LABEL_45;
    }
  }
  else
  {
    sub_100058DB0(__p, "ps.cer");
    sCTLogServer();
    ctu::StaticLogger::StaticLogger();
    unsigned int v16 = v27;
    ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)buf);
    if (v19[1]) {
      sub_10004D2C8((std::__shared_weak_count *)v19[1]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = "";
      __int16 v17 = "#W %s%sprivate key cannot be retrieved from keychain";
LABEL_45:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x16u);
    }
  }
LABEL_46:
  if (*(unsigned char *)(a2 + 24) && !*(unsigned char *)(a2 + 16)) {
    sub_1008AA8F4((const void **)a2);
  }
  return sub_100057D78((const void **)&v22);
}

void sub_1008AA874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a13);
  sub_1008AC324(v19);
  _Unwind_Resume(a1);
}

const void **sub_1008AA8F4(const void **result)
{
  if (*((unsigned char *)result + 24))
  {
    uint64_t v1 = result;
    sub_100127DDC(result + 1);
    CFTypeRef result = sub_100127DDC(v1);
    *((unsigned char *)v1 + 24) = 0;
  }
  return result;
}

const void **sub_1008AA930@<X0>(void *a1@<X0>, CFTypeRef *a2@<X8>)
{
  *a2 = 0;
  keys[0] = (void *)kSecClass;
  keys[1] = (void *)kSecAttrLabel;
  keys[2] = (void *)kSecAttrAccessGroup;
  keys[3] = (void *)kSecReturnRef;
  values[0] = (void *)kSecClassCertificate;
  values[1] = a1;
  values[2] = @"com.apple.identities";
  values[3] = kCFBooleanTrue;
  CFDictionaryRef v3 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef v14 = v3;
  if (v3) {
    uint64_t v4 = sub_100080778;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v4) {
    return sub_100057D78((const void **)&v14);
  }
  CFTypeRef result = 0;
  OSStatus v5 = SecItemCopyMatching(v3, &result);
  if (v5 || !result)
  {
    if (v5 == -25300) {
      return sub_100057D78((const void **)&v14);
    }
  }
  else
  {
    CFTypeID v6 = CFGetTypeID(result);
    if (v6 == SecCertificateGetTypeID())
    {
      sub_100058DB0(__p, "ps.cer");
      sCTLogServer();
      ctu::StaticLogger::StaticLogger();
      BOOL v7 = v22;
      ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)buf);
      if (v11[1]) {
        sub_10004D2C8((std::__shared_weak_count *)v11[1]);
      }
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "";
        __int16 v18 = 2080;
        uint64_t v19 = "";
        __int16 v20 = 2112;
        CFTypeRef v21 = result;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s%sfound certificate result: %@", buf, 0x20u);
      }
      *a2 = result;
      *(void *)long long buf = 0;
      sub_100120040((const void **)buf);
      return sub_100057D78((const void **)&v14);
    }
  }
  sub_100058DB0(__p, "ps.cer");
  sCTLogServer();
  ctu::StaticLogger::StaticLogger();
  uint64_t v8 = v22;
  ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)buf);
  if (v11[1]) {
    sub_10004D2C8((std::__shared_weak_count *)v11[1]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
    ctu::cf::assign();
    *(_OWORD *)SecKeyRef v11 = *(_OWORD *)__p;
    uint64_t v12 = v16;
    uint64_t v9 = v11;
    if (v16 < 0) {
      uint64_t v9 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "";
    __int16 v18 = 2080;
    uint64_t v19 = "";
    __int16 v20 = 2080;
    CFTypeRef v21 = v9;
    LOWORD(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 2) = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#W %s%sSecItemCopyMatching failed to return certificate '%s' with %d", buf, 0x26u);
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[0]);
    }
  }
  return sub_100057D78((const void **)&v14);
}

void sub_1008AAC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a13);
  sub_100120040(v19);
  _Unwind_Resume(a1);
}

BOOL sub_1008AACBC(void *a1, __CFString *a2, uint64_t a3)
{
  CFTypeID v6 = *(__SecKey **)(a3 + 8);
  sub_1008AB784(@"ThumperLocalIdentity", @"com.apple.identities");
  sub_1008AA0A4(@"ThumperLocalIdentity");
  trust[0] = 0;
  CFTypeRef cf1 = SecKeyCopyPublicKey(v6);
  if (cf1) {
    BOOL v7 = sub_1008A95D4;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    SecPolicyRef BasicX509 = SecPolicyCreateBasicX509();
    OSStatus v9 = SecTrustCreateWithCertificates(a2, BasicX509, trust);
    if ((sub_1008ABA38((uint64_t)"checkCertificateKeyMatch.SecTrustCreateWithCertificates", v9, 1) & 1) == 0)
    {
      int v12 = 0;
      goto LABEL_41;
    }
    SecKeyRef v51 = 0;
    SecKeyRef v10 = SecTrustCopyKey(trust[0]);
    SecKeyRef v51 = v10;
    if (v10) {
      SecKeyRef v11 = sub_1008A95D4;
    }
    else {
      SecKeyRef v11 = 0;
    }
    if (v11)
    {
      if (CFEqual(cf1, v10))
      {
        int v12 = 1;
LABEL_40:
        sub_100127DDC((const void **)&v51);
LABEL_41:
        sub_100127DDC(&cf1);
        if (BasicX509) {
          CFRelease(BasicX509);
        }
        goto LABEL_43;
      }
      CFTypeRef result = 0;
      __int16 v17 = (const void *)SecKeyCopyModulus();
      uint64_t v49 = 0;
      CFTypeRef result = v17;
      uint64_t v49 = SecKeyCopyModulus();
      sub_100058DB0(__p, "ps.cer");
      sCTLogServer();
      __int16 v18 = (ctu::StaticLogger *)ctu::StaticLogger::StaticLogger();
      uint64_t v19 = *(NSObject **)v66;
      ctu::StaticLogger::~StaticLogger(v18);
      if (values[1]) {
        sub_10004D2C8((std::__shared_weak_count *)values[1]);
      }
      if (SHIBYTE(v59) < 0) {
        operator delete(__p[0]);
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315906;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 2112;
        CFTypeRef v65 = result;
        *(_WORD *)CFStringRef v66 = 2112;
        *(void *)&void v66[2] = v49;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I %s%scheckCertificateKeyMatch, mismatch, modulus1: [%@], modulus2: [%@]", buf, 0x2Au);
      }
      sub_100058DB0(__p, "ps.cer");
      sCTLogServer();
      __int16 v20 = (ctu::StaticLogger *)ctu::StaticLogger::StaticLogger();
      CFTypeRef v21 = *(NSObject **)v66;
      ctu::StaticLogger::~StaticLogger(v20);
      if (values[1]) {
        sub_10004D2C8((std::__shared_weak_count *)values[1]);
      }
      if (SHIBYTE(v59) < 0) {
        operator delete(__p[0]);
      }
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315906;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 2112;
        CFTypeRef v65 = cf1;
        *(_WORD *)CFStringRef v66 = 2112;
        *(void *)&void v66[2] = v51;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I %s%scheckCertificateKeyMatch, mismatch, local: [%@], from cert: [%@]", buf, 0x2Au);
      }
      sub_100030068((const void **)&v49);
      sub_100030068(&result);
    }
    else
    {
      sub_100058DB0(__p, "ps.cer");
      sCTLogServer();
      uint64_t v15 = (ctu::StaticLogger *)ctu::StaticLogger::StaticLogger();
      uint64_t v16 = *(NSObject **)v66;
      ctu::StaticLogger::~StaticLogger(v15);
      if (values[1]) {
        sub_10004D2C8((std::__shared_weak_count *)values[1]);
      }
      if (SHIBYTE(v59) < 0) {
        operator delete(__p[0]);
      }
      int v12 = 0;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_40;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = "";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I %s%scheckCertificateKeyMatch, cannot extract key from certificate", buf, 0x16u);
    }
    int v12 = 0;
    goto LABEL_40;
  }
  sub_100058DB0(__p, "ps.cer");
  sCTLogServer();
  CFDictionaryRef v13 = (ctu::StaticLogger *)ctu::StaticLogger::StaticLogger();
  CFDictionaryRef v14 = *(NSObject **)v66;
  ctu::StaticLogger::~StaticLogger(v13);
  if (values[1]) {
    sub_10004D2C8((std::__shared_weak_count *)values[1]);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(__p[0]);
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = "";
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s%scheckCertificateKeyMatch, cannot extract public key from private", buf, 0x16u);
  }
  sub_100127DDC(&cf1);
  int v12 = 0;
LABEL_43:
  if (trust[0]) {
    CFRelease(trust[0]);
  }
  if (v12)
  {
    if (*(unsigned char *)(a3 + 16))
    {
      BOOL v22 = 0;
      CFStringRef v23 = kSecClass;
      CFStringRef v24 = kSecAttrLabel;
      CFStringRef v25 = kSecValueRef;
      CFStringRef v26 = kSecAttrAccessGroup;
      CFStringRef v27 = kSecAttrAccessible;
      CFStringRef v28 = (const __CFString *)kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
    }
    else
    {
      sub_1008AA0A4(a1);
      CFStringRef v23 = kSecClass;
      CFStringRef v24 = kSecAttrLabel;
      __p[0] = (void *)kSecClass;
      __p[1] = (void *)kSecAttrLabel;
      CFStringRef v25 = kSecValueRef;
      CFStringRef v59 = kSecAttrIsPermanent;
      CFStringRef v60 = kSecValueRef;
      CFStringRef v26 = kSecAttrAccessGroup;
      CFStringRef v61 = kSecAttrAccessGroup;
      CFStringRef v62 = kSecReturnPersistentRef;
      CFStringRef v27 = kSecAttrAccessible;
      CFStringRef v63 = kSecAttrAccessible;
      values[0] = (void *)kSecClassKey;
      values[1] = a1;
      CFBooleanRef v53 = kCFBooleanTrue;
      uint64_t v54 = v6;
      CFStringRef v55 = @"com.apple.identities";
      CFBooleanRef v56 = kCFBooleanTrue;
      CFStringRef v28 = (const __CFString *)kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
      uint64_t v57 = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
      SecKeyRef v51 = 0;
      CFDictionaryRef v30 = CFDictionaryCreate(0, (const void **)__p, (const void **)values, 7, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      SecKeyRef v51 = v30;
      if (v30) {
        int v31 = sub_100080778;
      }
      else {
        int v31 = 0;
      }
      if (v31)
      {
        CFTypeRef result = 0;
        OSStatus v32 = SecItemAdd(v30, &result);
        sub_1008ABA38((uint64_t)"save key SecItemAdd", v32, 1);
        BOOL v22 = v32 == 0;
        if (result)
        {
          sub_100058DB0(trust, "ps.cer");
          sCTLogServer();
          unsigned int v44 = a2;
          char v33 = (ctu::StaticLogger *)ctu::StaticLogger::StaticLogger();
          std::string::size_type v34 = *(NSObject **)v66;
          ctu::StaticLogger::~StaticLogger(v33);
          if (v46) {
            sub_10004D2C8(v46);
          }
          if (SHIBYTE(v48) < 0) {
            operator delete(trust[0]);
          }
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "";
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&unsigned char buf[14] = "";
            *(_WORD *)&unsigned char buf[22] = 2112;
            CFTypeRef v65 = result;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I %s%ssave key result: %@", buf, 0x20u);
          }
          CFRelease(result);
          a2 = v44;
        }
      }
      else
      {
        BOOL v22 = 0;
      }
      sub_100057D78((const void **)&v51);
      *(unsigned char *)(a3 + 16) = v22;
    }
    sub_1008AB784(a1, @"com.apple.identities");
    *(void *)long long buf = v23;
    *(void *)&uint8_t buf[8] = v24;
    *(void *)&uint8_t buf[16] = v25;
    CFTypeRef v65 = v26;
    *(void *)CFStringRef v66 = v27;
    __p[0] = (void *)kSecClassCertificate;
    __p[1] = a1;
    CFStringRef v59 = a2;
    CFStringRef v60 = @"com.apple.identities";
    CFStringRef v61 = v28;
    values[0] = 0;
    CFDictionaryRef v35 = CFDictionaryCreate(0, (const void **)buf, (const void **)__p, 5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    values[0] = v35;
    if (v35) {
      long long v36 = sub_100080778;
    }
    else {
      long long v36 = 0;
    }
    if (v36)
    {
      trust[0] = 0;
      OSStatus v37 = SecItemAdd(v35, (CFTypeRef *)trust);
      sub_1008ABA38((uint64_t)"save certificate SecItemAdd", v37, 1);
      BOOL v22 = v37 == 0;
    }
    sub_100057D78((const void **)values);
    BOOL v29 = v22;
  }
  else
  {
    BOOL v29 = 0;
  }
  sub_100058DB0(__p, "ps.cer");
  sCTLogServer();
  uint64_t v38 = (ctu::StaticLogger *)ctu::StaticLogger::StaticLogger();
  uint64_t v39 = *(NSObject **)v66;
  ctu::StaticLogger::~StaticLogger(v38);
  if (values[1]) {
    sub_10004D2C8((std::__shared_weak_count *)values[1]);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete(__p[0]);
  }
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    __p[0] = 0;
    __p[1] = 0;
    CFStringRef v59 = 0;
    ctu::cf::assign();
    *(_OWORD *)values = *(_OWORD *)__p;
    CFBooleanRef v53 = (CFBooleanRef)v59;
    if (SHIBYTE(v59) >= 0) {
      BOOL v40 = values;
    }
    else {
      BOOL v40 = (void **)__p[0];
    }
    CFTypeRef cf1 = SecCertificateCopySubjectSummary((SecCertificateRef)a2);
    __p[0] = 0;
    __p[1] = 0;
    CFStringRef v59 = 0;
    ctu::cf::assign();
    *(_OWORD *)trust = *(_OWORD *)__p;
    CFStringRef v48 = v59;
    std::string::size_type v41 = trust;
    if (SHIBYTE(v59) < 0) {
      std::string::size_type v41 = (SecTrustRef *)__p[0];
    }
    if (v29) {
      BOOL v42 = "succeed";
    }
    else {
      BOOL v42 = "failed";
    }
    *(_DWORD *)long long buf = 136316162;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    CFTypeRef v65 = v40;
    *(_WORD *)CFStringRef v66 = 2080;
    *(void *)&void v66[2] = v41;
    __int16 v67 = 2080;
    std::string::size_type v68 = v42;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I %s%ssaveIdentity lbl:%s name:'%s' %s", buf, 0x34u);
    if (SHIBYTE(v48) < 0) {
      operator delete(trust[0]);
    }
    sub_1000558F4(&cf1);
    if (SHIBYTE(v53) < 0) {
      operator delete(values[0]);
    }
  }
  return v29;
}

void sub_1008AB5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, const void *a19, const void *a20,const void *a21,void *a22,std::__shared_weak_count *a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23) {
    sub_10004D2C8(a23);
  }
  if (a37 < 0) {
    operator delete(__p);
  }
  sub_100030068(&a19);
  sub_100030068(&a20);
  sub_100127DDC(&a21);
  sub_100127DDC(&a11);
  _Unwind_Resume(a1);
}

const void **sub_1008AB784(void *a1, void *a2)
{
  sub_100058DB0(__p, "removeCertificatesByLabel");
  if (SHIBYTE(v21) < 0) {
    operator delete(*(void **)__p);
  }
  keys[0] = (void *)kSecClass;
  keys[1] = (void *)kSecAttrLabel;
  keys[2] = (void *)kSecAttrAccessGroup;
  values[0] = (void *)kSecClassCertificate;
  values[1] = a1;
  values[2] = a2;
  CFDictionaryRef v4 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryRef v15 = v4;
  int v5 = 0;
  if (v4) {
    CFTypeID v6 = sub_100080778;
  }
  else {
    CFTypeID v6 = 0;
  }
  if (v6)
  {
    do
    {
      OSStatus v7 = SecItemDelete(v4);
      sub_1008ABA38((uint64_t)"delete certificates by label", v7, 0);
      if (!v7) {
        ++v5;
      }
      CFDictionaryRef v4 = v15;
      if (v15) {
        uint64_t v8 = sub_100080778;
      }
      else {
        uint64_t v8 = 0;
      }
      if (v8) {
        BOOL v9 = v7 == 0;
      }
      else {
        BOOL v9 = 0;
      }
    }
    while (v9);
  }
  sub_100058DB0(v16, "ps.cer");
  sCTLogServer();
  ctu::StaticLogger::StaticLogger();
  SecKeyRef v10 = v23;
  ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)__p);
  if (v13[1]) {
    sub_10004D2C8((std::__shared_weak_count *)v13[1]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v16[0] = 0;
    v16[1] = 0;
    uint64_t v17 = 0;
    ctu::cf::assign();
    *(_OWORD *)CFDictionaryRef v13 = *(_OWORD *)v16;
    uint64_t v14 = v17;
    SecKeyRef v11 = v13;
    if (v17 < 0) {
      SecKeyRef v11 = (void **)v16[0];
    }
    *(_DWORD *)std::string __p = 136315906;
    *(void *)&__p[4] = "";
    __int16 v19 = 2080;
    __int16 v20 = "";
    __int16 v21 = 2080;
    BOOL v22 = v11;
    LOWORD(v23) = 1024;
    *(_DWORD *)((char *)&v23 + 2) = v5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%sCertificate '%s' removing -> %d certificate(s) removed\n", __p, 0x26u);
    if (SHIBYTE(v14) < 0) {
      operator delete(v13[0]);
    }
  }
  return sub_100057D78((const void **)&v15);
}

void sub_1008AB9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1008ABA38(uint64_t a1, OSStatus status, int a3)
{
  if (!status || status == -25300 && !a3) {
    return 1;
  }
  CFStringRef v10 = SecCopyErrorMessageString(status, 0);
  sub_100058DB0(&__p, "ps.cer");
  sCTLogServer();
  ctu::StaticLogger::StaticLogger();
  int v5 = v17;
  ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)buf);
  if (v7) {
    sub_10004D2C8(v7);
  }
  if (v9 < 0) {
    operator delete(__p);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136316162;
    int v12 = "";
    __int16 v13 = 2080;
    uint64_t v14 = "";
    __int16 v15 = 2080;
    uint64_t v16 = a1;
    LOWORD(v17) = 1024;
    *(_DWORD *)((char *)&v17 + 2) = status;
    HIWORD(v17) = 2112;
    CFStringRef v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s%s%s failed with %d '%@'", buf, 0x30u);
  }
  sub_1000558F4((const void **)&v10);
  return 0;
}

void sub_1008ABB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1000558F4(&a17);
  _Unwind_Resume(a1);
}

const void **sub_1008ABBDC(void *a1)
{
  sub_1008AA0A4(a1);

  return sub_1008AB784(a1, @"com.apple.identities");
}

const void **sub_1008ABC1C(uint64_t *a1)
{
  sub_100800E2C(@"com.apple.callservices.identifier.", a1, (CFStringRef *)&v3);
  uint64_t v1 = v3;
  sub_1008AA0A4(v3);
  sub_1008AB784(v1, @"com.apple.identities");
  return sub_1000558F4((const void **)&v3);
}

void sub_1008ABC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000558F4((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1008ABC8C(uint64_t *a1, uint64_t *a2)
{
  sub_100047FB8(a2);
  uint64_t v4 = *a1;
  if (a1[1] == *a1) {
    return 1;
  }
  unint64_t v5 = 0;
  uint64_t v6 = kSecAttrAccessibleAlwaysThisDeviceOnlyPrivate;
  while (1)
  {
    OSStatus v7 = *(__SecCertificate **)(v4 + 8 * v5);
    int v31 = 0;
    int v31 = (__CFString *)SecCertificateCopySubjectSummary(v7);
    memset(__p, 0, sizeof(__p));
    ctu::cf::assign();
    uint64_t v8 = __p[0];
    values[0] = __p[1];
    *(void **)((char *)values + 7) = *(void **)((char *)&__p[1] + 7);
    char v9 = HIBYTE(__p[2]);
    unint64_t v10 = a2[1];
    unint64_t v11 = a2[2];
    if (v10 >= v11)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *a2) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *a2) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      unint64_t v16 = v15 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v14;
      CFStringRef v34 = (CFStringRef)(a2 + 2);
      uint64_t v17 = v16 ? (char *)sub_10004812C((uint64_t)(a2 + 2), v16) : 0;
      CFStringRef v18 = &v17[24 * v13];
      __p[0] = v17;
      __p[1] = v18;
      CFStringRef v33 = (CFStringRef)&v17[24 * v16];
      *(void *)CFStringRef v18 = v8;
      *((void **)v18 + 1) = values[0];
      *(void **)(v18 + 15) = *(void **)((char *)values + 7);
      v18[23] = v9;
      __p[2] = v18 + 24;
      sub_100048204(a2, __p);
      uint64_t v12 = a2[1];
      sub_100048174((uint64_t)__p);
    }
    else
    {
      *(void **)unint64_t v10 = __p[0];
      *(void **)(v10 + 8) = values[0];
      *(void **)(v10 + 15) = *(void **)((char *)values + 7);
      *(unsigned char *)(v10 + 23) = v9;
      uint64_t v12 = v10 + 24;
      a2[1] = v10 + 24;
    }
    a2[1] = v12;
    sub_1008AB784(v31, @"com.apple.certificates");
    __int16 v19 = v31;
    sub_100058DB0(__p, "saveCertificate");
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = (void *)kSecClass;
    __p[1] = (void *)kSecValueRef;
    __p[2] = (void *)kSecAttrLabel;
    CFStringRef v33 = kSecAttrAccessGroup;
    CFStringRef v34 = kSecAttrAccessible;
    values[0] = (void *)kSecClassCertificate;
    values[1] = v7;
    long long v36 = v19;
    CFStringRef v37 = @"com.apple.certificates";
    uint64_t v38 = v6;
    CFDictionaryRef v20 = CFDictionaryCreate(0, (const void **)__p, (const void **)values, 5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    v29[0] = v20;
    if (!(v20 ? sub_100080778 : 0)) {
      break;
    }
    OSStatus v22 = SecItemAdd(v20, 0);
    sub_1008ABA38((uint64_t)"saveCertificate.SecItemAdd", v22, 1);
    sub_100057D78((const void **)v29);
    if (v22) {
      goto LABEL_34;
    }
    sub_100058DB0(values, "ps.cer");
    sCTLogServer();
    ctu::StaticLogger::StaticLogger();
    CFStringRef v23 = v34;
    ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)__p);
    if (v29[1]) {
      sub_10004D2C8((std::__shared_weak_count *)v29[1]);
    }
    if (SHIBYTE(v36) < 0) {
      operator delete(values[0]);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      values[0] = 0;
      values[1] = 0;
      long long v36 = 0;
      ctu::cf::assign();
      *(_OWORD *)BOOL v29 = *(_OWORD *)values;
      CFDictionaryRef v30 = v36;
      CFStringRef v24 = (void **)values[0];
      if (SHIBYTE(v36) >= 0) {
        CFStringRef v24 = v29;
      }
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "";
      WORD2(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 6) = "";
      HIWORD(__p[2]) = 2080;
      CFStringRef v33 = (CFStringRef)v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I %s%sCertificate '%s' installed", (uint8_t *)__p, 0x20u);
      if (SHIBYTE(v30) < 0) {
        operator delete(v29[0]);
      }
    }
    sub_1000558F4((const void **)&v31);
    ++v5;
    uint64_t v4 = *a1;
    if (v5 >= (a1[1] - *a1) >> 3) {
      return 1;
    }
  }
  sub_100057D78((const void **)v29);
LABEL_34:
  sub_100058DB0(values, "ps.cer");
  sCTLogServer();
  ctu::StaticLogger::StaticLogger();
  CFStringRef v26 = v34;
  ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)__p);
  if (v29[1]) {
    sub_10004D2C8((std::__shared_weak_count *)v29[1]);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(values[0]);
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 136315650;
    *(void **)((char *)__p + 4) = "";
    WORD2(__p[1]) = 2080;
    *(void **)((char *)&__p[1] + 6) = "";
    HIWORD(__p[2]) = 2048;
    CFStringRef v33 = (CFStringRef)v5;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I %s%sCertificate chain installation interrupted on %zu(th) element - rollback", (uint8_t *)__p, 0x20u);
  }
  sub_1000558F4((const void **)&v31);
  if (v5)
  {
    for (CFStringRef i = 0; i != (const __CFString *)v5; CFStringRef i = (const __CFString *)((char *)i + 1))
    {
      sub_100058DB0(values, "ps.cer");
      sCTLogServer();
      ctu::StaticLogger::StaticLogger();
      CFStringRef v28 = v34;
      ctu::StaticLogger::~StaticLogger((ctu::StaticLogger *)__p);
      if (v29[1]) {
        sub_10004D2C8((std::__shared_weak_count *)v29[1]);
      }
      if (SHIBYTE(v36) < 0) {
        operator delete(values[0]);
      }
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 136315650;
        *(void **)((char *)__p + 4) = "";
        WORD2(__p[1]) = 2080;
        *(void **)((char *)&__p[1] + 6) = "";
        HIWORD(__p[2]) = 2048;
        CFStringRef v33 = i;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I %s%sNot implemented - remove certificate %zu of the chain", (uint8_t *)__p, 0x20u);
      }
    }
  }
  return 0;
}

void sub_1008AC250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, ...)
{
  va_start(va, a14);
  if (a13) {
    sub_10004D2C8(a13);
  }
  if (*(char *)(v14 - 113) < 0) {
    operator delete(*(void **)(v14 - 136));
  }
  sub_1000558F4((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1008AC31C()
{
}

uint64_t sub_1008AC324(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    sub_100127DDC((const void **)(a1 + 8));
    sub_100127DDC((const void **)a1);
  }
  return a1;
}

void sub_1008AC364(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1008AC39C(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    uint64_t v1 = *(void ***)(result + 24);
    sub_1008AC44C(&v1);
    operator delete();
  }
  return result;
}

uint64_t sub_1008AC408(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1008AC44C(void ***a1)
{
  uint64_t v1 = *a1;
  CFDictionaryRef v2 = (const void **)**a1;
  if (v2)
  {
    uint64_t v4 = (const void **)v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_100120040(v4 - 1);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***sub_1008AC4D0(void ***result)
{
  uint64_t v1 = *result;
  *CFTypeRef result = 0;
  if (v1)
  {
    CFDictionaryRef v2 = v1;
    sub_1008AC44C(&v2);
    operator delete();
  }
  return result;
}

void *sub_1008AC540(void *a1)
{
  *a1 = off_101A15010;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1008AC5B0(void *a1)
{
  *a1 = off_101A15010;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  operator delete();
}

void sub_1008AC640(uint64_t a1, char *a2)
{
  sub_10035F2D0(a2, &v2);
}

BOOL sub_1008AC6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100FEEC44(a2);
  uint64_t v4 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    uint64_t v3 = *(void *)(a1 + 24);
  }
  return v3 != 0;
}

uint64_t sub_1008AC750(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 40))();
  }
  return result;
}

void sub_1008AC780()
{
}

void sub_1008AC7E0()
{
}

void sub_1008AC874()
{
}

uint64_t sub_1008AC898(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return sub_10035F71C(v2, a2);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    *(void *)(a2 + 8) = 3;
    a2 = *(void *)a2;
  }
  else
  {
    *(unsigned char *)(a2 + 23) = 3;
  }
  *(_DWORD *)a2 = 2764586;
  return 1;
}

const char *sub_1008AC8D8()
{
  return "content-type";
}

void sub_1008AC8EC()
{
}

void sub_1008AC970()
{
}

uint64_t sub_1008AC9DC(uint64_t a1, int a2, void *a3, long long *a4)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v15, kCtLoggingSystemName, "lazuli.svr");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&v13, &v15);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, (const ctu::OsLogLogger *)&v13);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&v13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v15);
  v14[0] = off_101999E18;
  v14[1] = sub_1008ACD10;
  void v14[3] = v14;
  *(void *)(a1 + 8) = 0;
  if ((capabilities::ct::supportsGemini(v8) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 8)) {
    operator new();
  }
  sub_10008863C(v14);
  *(_DWORD *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = *a3;
  uint64_t v9 = a3[1];
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = (unsigned char *)(a1 + 40);
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(v10, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v11 = *a4;
    *(void *)(a1 + 56) = *((void *)a4 + 2);
    *(_OWORD *)unint64_t v10 = v11;
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return a1;
}

void sub_1008ACC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10008863C((uint64_t *)va);
  operator delete();
}

const char *sub_1008ACD10(int a1)
{
  uint64_t v1 = "lazuli.svr.col.??";
  if (a1 == 2) {
    uint64_t v1 = "lazuli.svr.col.2";
  }
  if (a1 == 1) {
    return "lazuli.svr.col.1";
  }
  else {
    return v1;
  }
}

BOOL sub_1008ACD3C(uint64_t a1)
{
  uint64_t v2 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3 && !sub_100599BE8(v3, v2))
  {
    uint64_t v12 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v13) {
      return result;
    }
    uint64_t v14 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v14 = (void *)*v14;
    }
    int v29 = 136446466;
    CFDictionaryRef v30 = v14;
    __int16 v31 = 2080;
    OSStatus v32 = "Unauthorized.xml";
    long long v11 = "#I [%{public}s] Declaring IMS not ready. Unexpired : %s";
    goto LABEL_25;
  }
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4 && !sub_100F79928(v4, v2))
  {
    uint64_t v12 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    BOOL v15 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v15) {
      return result;
    }
    unint64_t v16 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      unint64_t v16 = (void *)*v16;
    }
    int v29 = 136446466;
    CFDictionaryRef v30 = v16;
    __int16 v31 = 2080;
    OSStatus v32 = "Banned.xml";
    long long v11 = "#I [%{public}s] Declaring IMS not ready. Unexpired : %s";
    goto LABEL_25;
  }
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5 && !sub_1006B4B18(v5, v2))
  {
    uint64_t v12 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    BOOL v17 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v17) {
      return result;
    }
    CFStringRef v18 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      CFStringRef v18 = (void *)*v18;
    }
    int v29 = 136446466;
    CFDictionaryRef v30 = v18;
    __int16 v31 = 2080;
    OSStatus v32 = "UserInteractionRequired.xml";
    long long v11 = "#I [%{public}s] Declaring IMS not ready. Unexpired : %s";
    goto LABEL_25;
  }
  uint64_t v6 = *(void *)(a1 + 104);
  if (!v6)
  {
    OSStatus v7 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    BOOL v21 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v21) {
      return result;
    }
    OSStatus v22 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      OSStatus v22 = (void *)*v22;
    }
    int v29 = 136446210;
    CFDictionaryRef v30 = v22;
    long long v11 = "#I [%{public}s] Declaring IMS not ready. No IMS XML";
    goto LABEL_30;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    OSStatus v7 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v8) {
      return result;
    }
    unint64_t v10 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      unint64_t v10 = (void *)*v10;
    }
    int v29 = 136446210;
    CFDictionaryRef v30 = v10;
    long long v11 = "#I [%{public}s] Declaring IMS not ready - refresh pending on 403";
    goto LABEL_30;
  }
  if ((sub_10092B988(v6, v2) & 1) == 0) {
    return *(unsigned char *)(*(void *)(a1 + 104) + 680) != 0;
  }
  uint64_t v23 = *(void *)(a1 + 120);
  if (!v23)
  {
    OSStatus v7 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    BOOL v26 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v26)
    {
      CFStringRef v27 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        CFStringRef v27 = (void *)*v27;
      }
      int v29 = 136446210;
      CFDictionaryRef v30 = v27;
      long long v11 = "#I [%{public}s] Declaring IMS not ready. Full XML expired, no refresh XML";
LABEL_30:
      __int16 v19 = v7;
      uint32_t v20 = 12;
      goto LABEL_31;
    }
    return result;
  }
  char v24 = sub_1007BA460(v23, v2);
  uint64_t v12 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  BOOL result = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if ((v24 & 1) == 0)
  {
    if (result)
    {
      CFStringRef v28 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        CFStringRef v28 = (void *)*v28;
      }
      int v29 = 136446466;
      CFDictionaryRef v30 = v28;
      __int16 v31 = 2080;
      OSStatus v32 = "Config_refresh.xml";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] Refresh XML not expired: %s", (uint8_t *)&v29, 0x16u);
    }
    return *(unsigned char *)(*(void *)(a1 + 104) + 680) != 0;
  }
  if (result)
  {
    CFStringRef v25 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      CFStringRef v25 = (void *)*v25;
    }
    int v29 = 136446466;
    CFDictionaryRef v30 = v25;
    __int16 v31 = 2080;
    OSStatus v32 = "Config_refresh.xml";
    long long v11 = "#I [%{public}s] Refresh XML has expired: %s";
LABEL_25:
    __int16 v19 = v12;
    uint32_t v20 = 22;
LABEL_31:
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v29, v20);
    return 0;
  }
  return result;
}

void sub_1008AD278(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5 && !sub_100599BE8(v5, v4))
  {
    unint64_t v10 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      long long v11 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        long long v11 = (void *)*v11;
      }
      int v19 = 136446466;
      uint32_t v20 = v11;
      __int16 v21 = 2080;
      OSStatus v22 = "Unauthorized.xml";
      uint64_t v12 = "#I [%{public}s] Full XML not allowed. Unexpired : %s";
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6 && !sub_100F79928(v6, v4))
  {
    unint64_t v10 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v13 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        BOOL v13 = (void *)*v13;
      }
      int v19 = 136446466;
      uint32_t v20 = v13;
      __int16 v21 = 2080;
      OSStatus v22 = "Banned.xml";
      uint64_t v12 = "#I [%{public}s] Full XML not allowed. Unexpired : %s";
      goto LABEL_21;
    }
LABEL_23:
    char v9 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_24;
  }
  uint64_t v7 = *(void *)(a1 + 152);
  if (v7 && !sub_1006B4B18(v7, v4))
  {
    unint64_t v10 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      int v19 = 136446466;
      uint32_t v20 = v14;
      __int16 v21 = 2080;
      OSStatus v22 = "UserInteractionRequired.xml";
      uint64_t v12 = "#I [%{public}s] Full XML not allowed. Unexpired : %s";
LABEL_21:
      BOOL v15 = v10;
      uint32_t v16 = 22;
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v19, v16);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  uint64_t v8 = *(void *)(a1 + 104);
  if (!v8)
  {
    BOOL v17 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_23;
    }
    CFStringRef v18 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      CFStringRef v18 = (void *)*v18;
    }
    int v19 = 136446210;
    uint32_t v20 = v18;
    uint64_t v12 = "#I [%{public}s] Full XML not available";
    BOOL v15 = v17;
    uint32_t v16 = 12;
    goto LABEL_22;
  }
  sub_1008B0378(a2, v8 + 32);
  *(void *)(a2 + 1184) = *(void *)(v8 + 1216);
  char v9 = 1;
LABEL_24:
  *(unsigned char *)(a2 + 1192) = v9;
}

unint64_t sub_1008AD5A0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v2 = sub_1008AD620(a1, &v4, (uint64_t)"Full");
  if (v5) {
    sub_10004D2C8(v5);
  }
  return v2;
}

void sub_1008AD608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1008AD620(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7 && !sub_100599BE8(v7, v6))
  {
    uint32_t v16 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v17 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        BOOL v17 = (void *)*v17;
      }
      int v44 = 136446722;
      std::string::size_type v45 = v17;
      __int16 v46 = 2082;
      uint64_t v47 = a3;
      __int16 v48 = 2080;
      uint64_t v49 = "Unauthorized.xml";
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  uint64_t v8 = *(void *)(a1 + 88);
  if (v8 && !sub_100F79928(v8, v6))
  {
    uint32_t v16 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v18 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        CFStringRef v18 = (void *)*v18;
      }
      int v44 = 136446722;
      std::string::size_type v45 = v18;
      __int16 v46 = 2082;
      uint64_t v47 = a3;
      __int16 v48 = 2080;
      uint64_t v49 = "Banned.xml";
      goto LABEL_27;
    }
LABEL_28:
    unint64_t v20 = 0;
    unsigned __int8 v21 = 0;
    return v21 | v20;
  }
  uint64_t v9 = *(void *)(a1 + 152);
  if (v9 && !sub_1006B4B18(v9, v6))
  {
    uint32_t v16 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        int v19 = (void *)*v19;
      }
      int v44 = 136446722;
      std::string::size_type v45 = v19;
      __int16 v46 = 2082;
      uint64_t v47 = a3;
      __int16 v48 = 2080;
      uint64_t v49 = "UserInteractionRequired.xml";
LABEL_27:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] [%{public}s] not applicable: %s", (uint8_t *)&v44, 0x20u);
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  uint64_t v11 = *a2;
  unint64_t v10 = (std::__shared_weak_count *)a2[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  if (!v11) {
    goto LABEL_47;
  }
  if (sub_10092B988(v11, v12))
  {
    BOOL v13 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      int v44 = 136446466;
      std::string::size_type v45 = v14;
      __int16 v46 = 2082;
      uint64_t v47 = a3;
      BOOL v15 = "#I [%{public}s] [%{public}s] has expired.";
LABEL_44:
      CFStringRef v33 = v13;
      uint32_t v34 = 22;
LABEL_45:
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v44, v34);
    }
  }
  else
  {
    if (*(unsigned char *)(v11 + 88))
    {
      OSStatus v22 = *(const char **)(v11 + 24);
      if (v22)
      {
        uint64_t v23 = *(void *)(v11 + 80);
        char v24 = *(std::__shared_weak_count **)(a1 + 32);
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v25 = (uint64_t)((double)std::chrono::system_clock::now().__d_.__rep_ / 1000000.0);
        if (v24) {
          sub_10004D2C8(v24);
        }
        uint64_t v26 = v25 - (void)v22;
        if (v25 >= (uint64_t)v22)
        {
          uint64_t v38 = v23 - v26;
          if (v23 >= v26)
          {
            std::string::size_type v41 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              BOOL v42 = (void *)(a1 + 40);
              if (*(char *)(a1 + 63) < 0) {
                BOOL v42 = (void *)*v42;
              }
              int v44 = 136447490;
              std::string::size_type v45 = v42;
              __int16 v46 = 2082;
              uint64_t v47 = a3;
              __int16 v48 = 2048;
              uint64_t v49 = (const char *)v38;
              __int16 v50 = 2048;
              SecKeyRef v51 = v22;
              __int16 v52 = 2048;
              uint64_t v53 = v23;
              __int16 v54 = 2048;
              uint64_t v55 = v25;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] [%{public}s]  [value: %zu]: [creation ts: %zu] [validity: %zu seconds] [now ts: %zu]", (uint8_t *)&v44, 0x3Eu);
            }
            unint64_t v20 = v38 & 0xFFFFFFFFFFFFFF00;
            char v36 = v38;
            goto LABEL_48;
          }
          uint64_t v39 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v40 = (void *)(a1 + 40);
            if (*(char *)(a1 + 63) < 0) {
              BOOL v40 = (void *)*v40;
            }
            int v44 = 136447234;
            std::string::size_type v45 = v40;
            __int16 v46 = 2082;
            uint64_t v47 = a3;
            __int16 v48 = 2048;
            uint64_t v49 = v22;
            __int16 v50 = 2048;
            SecKeyRef v51 = (const char *)v23;
            __int16 v52 = 2048;
            uint64_t v53 = v25;
            BOOL v15 = "#I [%{public}s] [%{public}s] EXPIRED: [creation ts: %zu] [validity: %zu seconds] [now ts: %zu]";
            CFStringRef v33 = v39;
            uint32_t v34 = 52;
            goto LABEL_45;
          }
          goto LABEL_47;
        }
        CFStringRef v27 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          goto LABEL_47;
        }
        CFStringRef v28 = (void *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          CFStringRef v28 = (void *)*v28;
        }
        int v44 = 136447234;
        std::string::size_type v45 = v28;
        __int16 v46 = 2082;
        uint64_t v47 = a3;
        __int16 v48 = 2048;
        uint64_t v49 = v22;
        __int16 v50 = 2048;
        SecKeyRef v51 = (const char *)v23;
        __int16 v52 = 2048;
        uint64_t v53 = v25;
        int v29 = "[%{public}s] [%{public}s] invalid timestamps: [creation ts: %zu] [validity: %zu seconds] [now ts: %zu]";
        CFDictionaryRef v30 = v27;
        uint32_t v31 = 52;
      }
      else
      {
        CFDictionaryRef v35 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
          goto LABEL_47;
        }
        long long v43 = (void *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          long long v43 = (void *)*v43;
        }
        int v44 = 136446466;
        std::string::size_type v45 = v43;
        __int16 v46 = 2082;
        uint64_t v47 = a3;
        int v29 = "[%{public}s] [%{public}s] failed to determine creation timestamp for XML expiry timer";
        CFDictionaryRef v30 = v35;
        uint32_t v31 = 22;
      }
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, v29, (uint8_t *)&v44, v31);
      goto LABEL_47;
    }
    BOOL v13 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      OSStatus v32 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        OSStatus v32 = (void *)*v32;
      }
      int v44 = 136446466;
      std::string::size_type v45 = v32;
      __int16 v46 = 2082;
      uint64_t v47 = a3;
      BOOL v15 = "#I [%{public}s] [%{public}s] not applicable. Missing Full XML and valid validity";
      goto LABEL_44;
    }
  }
LABEL_47:
  char v36 = 0;
  unint64_t v20 = 0;
LABEL_48:
  unsigned __int8 v21 = v20 | v36;
  if (v10) {
    sub_10004D2C8(v10);
  }
  return v21 | v20;
}

void sub_1008ADD78(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1008ADD90(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 128);
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v2 = sub_1008ADE10(a1, &v4, (uint64_t)"Refresh");
  if (v5) {
    sub_10004D2C8(v5);
  }
  return v2;
}

void sub_1008ADDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1008ADE10(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7 && !sub_100599BE8(v7, v6))
  {
    CFStringRef v18 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        int v19 = (void *)*v19;
      }
      int v43 = 136446722;
      int v44 = v19;
      __int16 v45 = 2082;
      uint64_t v46 = a3;
      __int16 v47 = 2080;
      __int16 v48 = "Unauthorized.xml";
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  uint64_t v8 = *(void *)(a1 + 88);
  if (v8 && !sub_100F79928(v8, v6))
  {
    CFStringRef v18 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v20 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        unint64_t v20 = (void *)*v20;
      }
      int v43 = 136446722;
      int v44 = v20;
      __int16 v45 = 2082;
      uint64_t v46 = a3;
      __int16 v47 = 2080;
      __int16 v48 = "Banned.xml";
      goto LABEL_28;
    }
LABEL_29:
    unint64_t v22 = 0;
    unsigned __int8 v23 = 0;
    return v23 | v22;
  }
  uint64_t v9 = *(void *)(a1 + 152);
  if (v9 && !sub_1006B4B18(v9, v6))
  {
    CFStringRef v18 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v21 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        unsigned __int8 v21 = (void *)*v21;
      }
      int v43 = 136446722;
      int v44 = v21;
      __int16 v45 = 2082;
      uint64_t v46 = a3;
      __int16 v47 = 2080;
      __int16 v48 = "UserInteractionRequired.xml";
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] [%{public}s] not applicable: %s", (uint8_t *)&v43, 0x20u);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  uint64_t v11 = *a2;
  unint64_t v10 = (std::__shared_weak_count *)a2[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  if (!v11) {
    goto LABEL_41;
  }
  if (sub_1007BA460(v11, v12))
  {
    BOOL v13 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      int v43 = 136446466;
      int v44 = v14;
      __int16 v45 = 2082;
      uint64_t v46 = a3;
      BOOL v15 = "#I [%{public}s] [%{public}s] has expired.";
      uint32_t v16 = v13;
      uint32_t v17 = 22;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v43, v17);
      goto LABEL_41;
    }
    goto LABEL_41;
  }
  char v24 = *(const char **)(v11 + 24);
  if (!v24)
  {
    uint32_t v34 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      goto LABEL_41;
    }
    BOOL v42 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      BOOL v42 = (void *)*v42;
    }
    int v43 = 136446466;
    int v44 = v42;
    __int16 v45 = 2082;
    uint64_t v46 = a3;
    uint32_t v31 = "[%{public}s] [%{public}s] failed to determine creation timestamp for XML expiry timer";
    OSStatus v32 = v34;
    uint32_t v33 = 22;
    goto LABEL_58;
  }
  uint64_t v25 = *(void *)(v11 + 72);
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 32);
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = (uint64_t)((double)std::chrono::system_clock::now().__d_.__rep_ / 1000000.0);
  if (v26) {
    sub_10004D2C8(v26);
  }
  uint64_t v28 = v27 - (void)v24;
  if (v27 < (uint64_t)v24)
  {
    int v29 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      goto LABEL_41;
    }
    CFDictionaryRef v30 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      CFDictionaryRef v30 = (void *)*v30;
    }
    int v43 = 136447234;
    int v44 = v30;
    __int16 v45 = 2082;
    uint64_t v46 = a3;
    __int16 v47 = 2048;
    __int16 v48 = v24;
    __int16 v49 = 2048;
    __int16 v50 = (const char *)v25;
    __int16 v51 = 2048;
    uint64_t v52 = v27;
    uint32_t v31 = "[%{public}s] [%{public}s] invalid timestamps: [creation ts: %zu] [validity: %zu seconds] [now ts: %zu]";
    OSStatus v32 = v29;
    uint32_t v33 = 52;
LABEL_58:
    _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&v43, v33);
    goto LABEL_41;
  }
  uint64_t v37 = v25 - v28;
  if (v25 >= v28)
  {
    BOOL v40 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v41 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        std::string::size_type v41 = (void *)*v41;
      }
      int v43 = 136447490;
      int v44 = v41;
      __int16 v45 = 2082;
      uint64_t v46 = a3;
      __int16 v47 = 2048;
      __int16 v48 = (const char *)v37;
      __int16 v49 = 2048;
      __int16 v50 = v24;
      __int16 v51 = 2048;
      uint64_t v52 = v25;
      __int16 v53 = 2048;
      uint64_t v54 = v27;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] [%{public}s]  [value: %zu]: [creation ts: %zu] [validity: %zu seconds] [now ts: %zu]", (uint8_t *)&v43, 0x3Eu);
    }
    unint64_t v22 = v37 & 0xFFFFFFFFFFFFFF00;
    char v35 = v37;
    goto LABEL_42;
  }
  uint64_t v38 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v39 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v39 = (void *)*v39;
    }
    int v43 = 136447234;
    int v44 = v39;
    __int16 v45 = 2082;
    uint64_t v46 = a3;
    __int16 v47 = 2048;
    __int16 v48 = v24;
    __int16 v49 = 2048;
    __int16 v50 = (const char *)v25;
    __int16 v51 = 2048;
    uint64_t v52 = v27;
    BOOL v15 = "#I [%{public}s] [%{public}s] EXPIRED: [creation ts: %zu] [validity: %zu seconds] [now ts: %zu]";
    uint32_t v16 = v38;
    uint32_t v17 = 52;
    goto LABEL_15;
  }
LABEL_41:
  char v35 = 0;
  unint64_t v22 = 0;
LABEL_42:
  unsigned __int8 v23 = v22 | v35;
  if (v10) {
    sub_10004D2C8(v10);
  }
  return v23 | v22;
}

void sub_1008AE4E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1008AE4F8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v2 = sub_1008AE578(a1, &v4, (uint64_t)"Unauthorized");
  if (v5) {
    sub_10004D2C8(v5);
  }
  return v2;
}

void sub_1008AE560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1008AE578(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  if (!*a2) {
    goto LABEL_25;
  }
  if (sub_100599BE8(*a2, v6))
  {
    uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      int v33 = 136446466;
      uint32_t v34 = v8;
      __int16 v35 = 2082;
      uint64_t v36 = a3;
      uint64_t v9 = "#I [%{public}s] [%{public}s] has expired.";
LABEL_22:
      unsigned __int8 v21 = v7;
      uint32_t v22 = 22;
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v33, v22);
      goto LABEL_25;
    }
    goto LABEL_25;
  }
  uint64_t v10 = *(void *)(*a2 + 40);
  if (!v10)
  {
    uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v20 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        unint64_t v20 = (void *)*v20;
      }
      int v33 = 136446466;
      uint32_t v34 = v20;
      __int16 v35 = 2082;
      uint64_t v36 = a3;
      uint64_t v9 = "#I [%{public}s] [%{public}s] not applicable. Missing Full XML and valid validity";
      goto LABEL_22;
    }
LABEL_25:
    uint64_t v24 = 0;
    unint64_t v25 = 0;
    return v25 | v24;
  }
  uint64_t v11 = *(void *)(*a2 + 24);
  if (!v11)
  {
    unsigned __int8 v23 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      goto LABEL_25;
    }
    OSStatus v32 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      OSStatus v32 = (void *)*v32;
    }
    int v33 = 136446466;
    uint32_t v34 = v32;
    __int16 v35 = 2082;
    uint64_t v36 = a3;
    uint32_t v17 = "[%{public}s] [%{public}s] failed to determine creation timestamp for XML expiry timer";
    CFStringRef v18 = v23;
    uint32_t v19 = 22;
    goto LABEL_40;
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 32);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (uint64_t)((double)std::chrono::system_clock::now().__d_.__rep_ / 1000000.0);
  if (v12) {
    sub_10004D2C8(v12);
  }
  uint64_t v14 = v13 - v11;
  if (v13 < v11)
  {
    BOOL v15 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      goto LABEL_25;
    }
    uint32_t v16 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint32_t v16 = (void *)*v16;
    }
    int v33 = 136447234;
    uint32_t v34 = v16;
    __int16 v35 = 2082;
    uint64_t v36 = a3;
    __int16 v37 = 2048;
    uint64_t v38 = v11;
    __int16 v39 = 2048;
    uint64_t v40 = v10;
    __int16 v41 = 2048;
    uint64_t v42 = v13;
    uint32_t v17 = "[%{public}s] [%{public}s] invalid timestamps: [creation ts: %zu] [validity: %zu seconds] [now ts: %zu]";
    CFStringRef v18 = v15;
    uint32_t v19 = 52;
LABEL_40:
    _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v33, v19);
    goto LABEL_25;
  }
  uint64_t v27 = v10 - v14;
  if (v10 < v14)
  {
    uint64_t v28 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    int v29 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      int v29 = (void *)*v29;
    }
    int v33 = 136447234;
    uint32_t v34 = v29;
    __int16 v35 = 2082;
    uint64_t v36 = a3;
    __int16 v37 = 2048;
    uint64_t v38 = v11;
    __int16 v39 = 2048;
    uint64_t v40 = v10;
    __int16 v41 = 2048;
    uint64_t v42 = v13;
    uint64_t v9 = "#I [%{public}s] [%{public}s] EXPIRED: [creation ts: %zu] [validity: %zu seconds] [now ts: %zu]";
    unsigned __int8 v21 = v28;
    uint32_t v22 = 52;
    goto LABEL_23;
  }
  CFDictionaryRef v30 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    uint32_t v31 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint32_t v31 = (void *)*v31;
    }
    int v33 = 136447490;
    uint32_t v34 = v31;
    __int16 v35 = 2082;
    uint64_t v36 = a3;
    __int16 v37 = 2048;
    uint64_t v38 = v27;
    __int16 v39 = 2048;
    uint64_t v40 = v11;
    __int16 v41 = 2048;
    uint64_t v42 = v10;
    __int16 v43 = 2048;
    uint64_t v44 = v13;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] [%{public}s]  [value: %zu]: [creation ts: %zu] [validity: %zu seconds] [now ts: %zu]", (uint8_t *)&v33, 0x3Eu);
  }
  unint64_t v25 = v27 & 0xFFFFFFFFFFFFFF00;
  uint64_t v24 = v27;
  return v25 | v24;
}

BOOL sub_1008AEA5C(uint64_t a1)
{
  unint64_t v2 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3 && !sub_100599BE8(v3, v2))
  {
    uint64_t v14 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v15) {
      return result;
    }
    uint32_t v16 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint32_t v16 = (void *)*v16;
    }
    int v37 = 136446466;
    uint64_t v38 = v16;
    __int16 v39 = 2080;
    uint64_t v40 = "Unauthorized.xml";
    uint32_t v17 = "#I [%{public}s] Does not need provisioning: %s";
LABEL_26:
    uint32_t v22 = v14;
    uint32_t v23 = 22;
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v37, v23);
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4 && !sub_100F79928(v4, v2))
  {
    uint64_t v14 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    BOOL v18 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v18) {
      return result;
    }
    uint32_t v19 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint32_t v19 = (void *)*v19;
    }
    int v37 = 136446466;
    uint64_t v38 = v19;
    __int16 v39 = 2080;
    uint64_t v40 = "Banned.xml";
    uint32_t v17 = "#I [%{public}s] Does not need provisioning: %s";
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)(a1 + 152);
  if (v5 && !sub_1006B4B18(v5, v2))
  {
    uint64_t v14 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    BOOL v20 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v20) {
      return result;
    }
    unsigned __int8 v21 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      unsigned __int8 v21 = (void *)*v21;
    }
    int v37 = 136446466;
    uint64_t v38 = v21;
    __int16 v39 = 2080;
    uint64_t v40 = "UserInteractionRequired.xml";
    uint32_t v17 = "#I [%{public}s] Full XML not allowed. Unexpired : %s";
    goto LABEL_26;
  }
  uint64_t v6 = *(void *)(a1 + 136);
  if (v6)
  {
    int v7 = sub_10047EF18(v6, v2);
    uint64_t v8 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (result)
      {
        uint64_t v10 = (void *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          uint64_t v10 = (void *)*v10;
        }
        int v37 = 136446466;
        uint64_t v38 = v10;
        __int16 v39 = 2080;
        uint64_t v40 = "AccessControl.xml";
        uint64_t v11 = "#I [%{public}s] Needs provisioning. Expired : %s";
LABEL_13:
        uint64_t v12 = v8;
        uint32_t v13 = 22;
LABEL_44:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v37, v13);
      }
LABEL_45:
      sub_1008AF0E0(a1);
      return 1;
    }
    if (!result) {
      return result;
    }
    uint64_t v27 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v27 = (void *)*v27;
    }
    int v37 = 136446210;
    uint64_t v38 = v27;
    uint32_t v17 = "#I [%{public}s] Access control XML is still active - Provisioning not needed";
    goto LABEL_38;
  }
  uint64_t v24 = *(void *)(a1 + 104);
  if (!v24)
  {
    uint64_t v28 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_45;
    }
    int v29 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      int v29 = (void *)*v29;
    }
    int v37 = 136446210;
    uint64_t v38 = v29;
    uint64_t v11 = "#I [%{public}s] Needs provisioning - No XML";
    goto LABEL_43;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    unint64_t v25 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v26 = (void *)*v26;
      }
      int v37 = 136446210;
      uint64_t v38 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] Needs provisioning: Refresh was pending", (uint8_t *)&v37, 0xCu);
    }
    return 1;
  }
  if (sub_10092B988(v24, v2))
  {
    uint64_t v30 = *(void *)(a1 + 120);
    if (v30)
    {
      int v31 = sub_1007BA460(v30, v2);
      uint64_t v8 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
      BOOL result = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      if (v31)
      {
        if (!result) {
          goto LABEL_45;
        }
        OSStatus v32 = (void *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          OSStatus v32 = (void *)*v32;
        }
        int v37 = 136446466;
        uint64_t v38 = v32;
        __int16 v39 = 2080;
        uint64_t v40 = "Config_refresh.xml";
        uint64_t v11 = "#I [%{public}s] Needs provisioning. Expired : %s";
        goto LABEL_13;
      }
      if (result)
      {
        uint64_t v36 = (void *)(a1 + 40);
        if (*(char *)(a1 + 63) < 0) {
          uint64_t v36 = (void *)*v36;
        }
        int v37 = 136446210;
        uint64_t v38 = v36;
        uint32_t v17 = "#I [%{public}s] Does not need provisioning. Refresh XML is still active - Provisioning not needed";
LABEL_38:
        uint32_t v22 = v8;
        uint32_t v23 = 12;
        goto LABEL_27;
      }
      return result;
    }
    uint64_t v28 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_45;
    }
    __int16 v35 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      __int16 v35 = (void *)*v35;
    }
    int v37 = 136446210;
    uint64_t v38 = v35;
    uint64_t v11 = "#I [%{public}s] Needs provisioning. (no refresh xml)";
LABEL_43:
    uint64_t v12 = v28;
    uint32_t v13 = 12;
    goto LABEL_44;
  }
  uint64_t v8 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  BOOL v33 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v33)
  {
    uint32_t v34 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint32_t v34 = (void *)*v34;
    }
    int v37 = 136446210;
    uint64_t v38 = v34;
    uint32_t v17 = "#I [%{public}s] Does not need provisioning. XML is still active - Provisioning not needed";
    goto LABEL_38;
  }
  return result;
}

void sub_1008AF0E0(uint64_t a1)
{
  uint64_t v95 = 0;
  id v96 = 0;
  unint64_t v97 = 0;
  unint64_t v2 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  if (*(void *)(a1 + 72))
  {
    sub_100058DB0(&v101, "[Unauthorized] ->");
    BOOL v3 = sub_100599BE8(*(void *)(a1 + 72), v2);
    if (v3) {
      uint64_t v4 = "expired";
    }
    else {
      uint64_t v4 = "valid";
    }
    if (v3) {
      std::string::size_type v5 = 7;
    }
    else {
      std::string::size_type v5 = 5;
    }
    uint64_t v6 = std::string::append(&v101, v4, v5);
    std::string::size_type v7 = v6->__r_.__value_.__r.__words[0];
    v102[0] = v6->__r_.__value_.__l.__size_;
    *(void *)((char *)v102 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    char v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = v96;
    if ((unint64_t)v96 >= v97)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)v95) >> 3) + 1;
      if (v12 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3) > v12) {
        unint64_t v12 = 0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (void)v95) >> 3) >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      id v100 = &v97;
      if (v13) {
        uint64_t v14 = (char *)sub_10004812C((uint64_t)&v97, v13);
      }
      else {
        uint64_t v14 = 0;
      }
      std::string::size_type v15 = (std::string::size_type)&v14[8 * (((char *)v96 - (char *)v95) >> 3)];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      __p.__r_.__value_.__l.__size_ = v15;
      int v99 = &v14[24 * v13];
      uint64_t v16 = v102[0];
      *(void *)std::string::size_type v15 = v7;
      *(void *)(v15 + 8) = v16;
      *(void *)(v15 + 15) = *(void *)((char *)v102 + 7);
      *(unsigned char *)(v15 + 23) = v8;
      __p.__r_.__value_.__r.__words[2] = v15 + 24;
      sub_100048204((uint64_t *)&v95, &__p);
      uint64_t v11 = v96;
      sub_100048174((uint64_t)&__p);
    }
    else
    {
      std::string::size_type v10 = v102[0];
      v96->__r_.__value_.__r.__words[0] = v7;
      v9->__r_.__value_.__l.__size_ = v10;
      *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v102 + 7);
      *((unsigned char *)&v9->__r_.__value_.__s + 23) = v8;
      uint64_t v11 = v9 + 1;
    }
    id v96 = v11;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
  }
  if (*(void *)(a1 + 88))
  {
    sub_100058DB0(&v101, "[Banned] ->");
    BOOL v17 = sub_100F79928(*(void *)(a1 + 88), v2);
    if (v17) {
      BOOL v18 = "expired";
    }
    else {
      BOOL v18 = "valid";
    }
    if (v17) {
      std::string::size_type v19 = 7;
    }
    else {
      std::string::size_type v19 = 5;
    }
    BOOL v20 = std::string::append(&v101, v18, v19);
    std::string::size_type v21 = v20->__r_.__value_.__r.__words[0];
    v102[0] = v20->__r_.__value_.__l.__size_;
    *(void *)((char *)v102 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
    char v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    uint32_t v23 = v96;
    if ((unint64_t)v96 >= v97)
    {
      unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)v95) >> 3);
      unint64_t v27 = v26 + 1;
      if (v26 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3) > v27) {
        unint64_t v27 = 0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (void)v95) >> 3) >= 0x555555555555555) {
        unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v28 = v27;
      }
      id v100 = &v97;
      if (v28) {
        int v29 = (char *)sub_10004812C((uint64_t)&v97, v28);
      }
      else {
        int v29 = 0;
      }
      std::string::size_type v30 = (std::string::size_type)&v29[24 * v26];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
      __p.__r_.__value_.__l.__size_ = v30;
      int v99 = &v29[24 * v28];
      uint64_t v31 = v102[0];
      *(void *)std::string::size_type v30 = v21;
      *(void *)(v30 + 8) = v31;
      *(void *)(v30 + 15) = *(void *)((char *)v102 + 7);
      *(unsigned char *)(v30 + 23) = v22;
      __p.__r_.__value_.__r.__words[2] = v30 + 24;
      sub_100048204((uint64_t *)&v95, &__p);
      unint64_t v25 = v96;
      sub_100048174((uint64_t)&__p);
    }
    else
    {
      std::string::size_type v24 = v102[0];
      v96->__r_.__value_.__r.__words[0] = v21;
      v23->__r_.__value_.__l.__size_ = v24;
      *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v102 + 7);
      *((unsigned char *)&v23->__r_.__value_.__s + 23) = v22;
      unint64_t v25 = v23 + 1;
    }
    id v96 = v25;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
  }
  if (*(void *)(a1 + 152))
  {
    sub_100058DB0(&v101, "[User-interaction] ->");
    BOOL v32 = sub_1006B4B18(*(void *)(a1 + 152), v2);
    if (v32) {
      BOOL v33 = "expired";
    }
    else {
      BOOL v33 = "valid";
    }
    if (v32) {
      std::string::size_type v34 = 7;
    }
    else {
      std::string::size_type v34 = 5;
    }
    __int16 v35 = std::string::append(&v101, v33, v34);
    std::string::size_type v36 = v35->__r_.__value_.__r.__words[0];
    v102[0] = v35->__r_.__value_.__l.__size_;
    *(void *)((char *)v102 + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
    char v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    uint64_t v38 = v96;
    if ((unint64_t)v96 >= v97)
    {
      unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)v95) >> 3);
      unint64_t v42 = v41 + 1;
      if (v41 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3) > v42) {
        unint64_t v42 = 0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (void)v95) >> 3) >= 0x555555555555555) {
        unint64_t v43 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v43 = v42;
      }
      id v100 = &v97;
      if (v43) {
        uint64_t v44 = (char *)sub_10004812C((uint64_t)&v97, v43);
      }
      else {
        uint64_t v44 = 0;
      }
      std::string::size_type v45 = (std::string::size_type)&v44[24 * v41];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v44;
      __p.__r_.__value_.__l.__size_ = v45;
      int v99 = &v44[24 * v43];
      uint64_t v46 = v102[0];
      *(void *)std::string::size_type v45 = v36;
      *(void *)(v45 + 8) = v46;
      *(void *)(v45 + 15) = *(void *)((char *)v102 + 7);
      *(unsigned char *)(v45 + 23) = v37;
      __p.__r_.__value_.__r.__words[2] = v45 + 24;
      sub_100048204((uint64_t *)&v95, &__p);
      uint64_t v40 = v96;
      sub_100048174((uint64_t)&__p);
    }
    else
    {
      std::string::size_type v39 = v102[0];
      v96->__r_.__value_.__r.__words[0] = v36;
      v38->__r_.__value_.__l.__size_ = v39;
      *(std::string::size_type *)((char *)&v38->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v102 + 7);
      *((unsigned char *)&v38->__r_.__value_.__s + 23) = v37;
      uint64_t v40 = v38 + 1;
    }
    id v96 = v40;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
  }
  if (*(void *)(a1 + 136))
  {
    sub_100058DB0(&v101, "[AccessControl] ->");
    int v47 = sub_10047EF18(*(void *)(a1 + 136), v2);
    if (v47) {
      __int16 v48 = "expired";
    }
    else {
      __int16 v48 = "valid";
    }
    if (v47) {
      std::string::size_type v49 = 7;
    }
    else {
      std::string::size_type v49 = 5;
    }
    __int16 v50 = std::string::append(&v101, v48, v49);
    std::string::size_type v51 = v50->__r_.__value_.__r.__words[0];
    v102[0] = v50->__r_.__value_.__l.__size_;
    *(void *)((char *)v102 + 7) = *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7);
    char v52 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    __int16 v53 = v96;
    if ((unint64_t)v96 >= v97)
    {
      unint64_t v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)v95) >> 3);
      unint64_t v57 = v56 + 1;
      if (v56 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3) > v57) {
        unint64_t v57 = 0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (void)v95) >> 3) >= 0x555555555555555) {
        unint64_t v58 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v58 = v57;
      }
      id v100 = &v97;
      if (v58) {
        CFStringRef v59 = (char *)sub_10004812C((uint64_t)&v97, v58);
      }
      else {
        CFStringRef v59 = 0;
      }
      std::string::size_type v60 = (std::string::size_type)&v59[24 * v56];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
      __p.__r_.__value_.__l.__size_ = v60;
      int v99 = &v59[24 * v58];
      uint64_t v61 = v102[0];
      *(void *)std::string::size_type v60 = v51;
      *(void *)(v60 + 8) = v61;
      *(void *)(v60 + 15) = *(void *)((char *)v102 + 7);
      *(unsigned char *)(v60 + 23) = v52;
      __p.__r_.__value_.__r.__words[2] = v60 + 24;
      sub_100048204((uint64_t *)&v95, &__p);
      uint64_t v55 = v96;
      sub_100048174((uint64_t)&__p);
    }
    else
    {
      std::string::size_type v54 = v102[0];
      v96->__r_.__value_.__r.__words[0] = v51;
      v53->__r_.__value_.__l.__size_ = v54;
      *(std::string::size_type *)((char *)&v53->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v102 + 7);
      *((unsigned char *)&v53->__r_.__value_.__s + 23) = v52;
      uint64_t v55 = v53 + 1;
    }
    id v96 = v55;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
  }
  if (*(void *)(a1 + 104))
  {
    sub_100058DB0(&v101, "[Full] ->");
    int v62 = sub_10092B988(*(void *)(a1 + 104), v2);
    if (v62) {
      CFStringRef v63 = "expired";
    }
    else {
      CFStringRef v63 = "valid";
    }
    if (v62) {
      std::string::size_type v64 = 7;
    }
    else {
      std::string::size_type v64 = 5;
    }
    CFTypeRef v65 = std::string::append(&v101, v63, v64);
    std::string::size_type v66 = v65->__r_.__value_.__r.__words[0];
    v102[0] = v65->__r_.__value_.__l.__size_;
    *(void *)((char *)v102 + 7) = *(std::string::size_type *)((char *)&v65->__r_.__value_.__r.__words[1] + 7);
    char v67 = HIBYTE(v65->__r_.__value_.__r.__words[2]);
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v68 = v96;
    if ((unint64_t)v96 >= v97)
    {
      unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)v95) >> 3);
      unint64_t v72 = v71 + 1;
      if (v71 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3) > v72) {
        unint64_t v72 = 0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (void)v95) >> 3) >= 0x555555555555555) {
        unint64_t v73 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v73 = v72;
      }
      id v100 = &v97;
      if (v73) {
        std::string::size_type v74 = (char *)sub_10004812C((uint64_t)&v97, v73);
      }
      else {
        std::string::size_type v74 = 0;
      }
      std::string::size_type v75 = (std::string::size_type)&v74[24 * v71];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v74;
      __p.__r_.__value_.__l.__size_ = v75;
      int v99 = &v74[24 * v73];
      uint64_t v76 = v102[0];
      *(void *)std::string::size_type v75 = v66;
      *(void *)(v75 + 8) = v76;
      *(void *)(v75 + 15) = *(void *)((char *)v102 + 7);
      *(unsigned char *)(v75 + 23) = v67;
      __p.__r_.__value_.__r.__words[2] = v75 + 24;
      sub_100048204((uint64_t *)&v95, &__p);
      long long v70 = v96;
      sub_100048174((uint64_t)&__p);
    }
    else
    {
      std::string::size_type v69 = v102[0];
      v96->__r_.__value_.__r.__words[0] = v66;
      v68->__r_.__value_.__l.__size_ = v69;
      *(std::string::size_type *)((char *)&v68->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v102 + 7);
      *((unsigned char *)&v68->__r_.__value_.__s + 23) = v67;
      long long v70 = v68 + 1;
    }
    id v96 = v70;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
  }
  if (*(void *)(a1 + 120))
  {
    sub_100058DB0(&v101, "[Refresh] ->");
    int v77 = sub_1007BA460(*(void *)(a1 + 120), v2);
    if (v77) {
      std::string::size_type v78 = "expired";
    }
    else {
      std::string::size_type v78 = "valid";
    }
    if (v77) {
      std::string::size_type v79 = 7;
    }
    else {
      std::string::size_type v79 = 5;
    }
    uint64_t v80 = std::string::append(&v101, v78, v79);
    std::string::size_type v81 = v80->__r_.__value_.__r.__words[0];
    v102[0] = v80->__r_.__value_.__l.__size_;
    *(void *)((char *)v102 + 7) = *(std::string::size_type *)((char *)&v80->__r_.__value_.__r.__words[1] + 7);
    char v82 = HIBYTE(v80->__r_.__value_.__r.__words[2]);
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    long long v83 = v96;
    if ((unint64_t)v96 >= v97)
    {
      unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * (((char *)v96 - (char *)v95) >> 3);
      unint64_t v87 = v86 + 1;
      if (v86 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3) > v87) {
        unint64_t v87 = 0x5555555555555556 * ((uint64_t)(v97 - (void)v95) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - (void)v95) >> 3) >= 0x555555555555555) {
        unint64_t v88 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v88 = v87;
      }
      id v100 = &v97;
      if (v88) {
        std::string v89 = (char *)sub_10004812C((uint64_t)&v97, v88);
      }
      else {
        std::string v89 = 0;
      }
      std::string::size_type v90 = (std::string::size_type)&v89[24 * v86];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
      __p.__r_.__value_.__l.__size_ = v90;
      int v99 = &v89[24 * v88];
      uint64_t v91 = v102[0];
      *(void *)std::string::size_type v90 = v81;
      *(void *)(v90 + 8) = v91;
      *(void *)(v90 + 15) = *(void *)((char *)v102 + 7);
      *(unsigned char *)(v90 + 23) = v82;
      __p.__r_.__value_.__r.__words[2] = v90 + 24;
      sub_100048204((uint64_t *)&v95, &__p);
      uint64_t v85 = v96;
      sub_100048174((uint64_t)&__p);
    }
    else
    {
      std::string::size_type v84 = v102[0];
      v96->__r_.__value_.__r.__words[0] = v81;
      v83->__r_.__value_.__l.__size_ = v84;
      *(std::string::size_type *)((char *)&v83->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v102 + 7);
      *((unsigned char *)&v83->__r_.__value_.__s + 23) = v82;
      uint64_t v85 = v83 + 1;
    }
    id v96 = v85;
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v101.__r_.__value_.__l.__data_);
    }
  }
  if (v96 != v95)
  {
    uint64_t v92 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
    {
      std::string v93 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        std::string v93 = (void *)*v93;
      }
      sub_100062B40(v95, v96, ", ", 2uLL, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(v101.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)v101.__r_.__value_.__r.__words + 4) = (std::string::size_type)v93;
      WORD2(v101.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v101.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_p;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] %{public}s", (uint8_t *)&v101, 0x16u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v95;
  sub_100047F64((void ***)&__p);
}

void sub_1008AFA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::string __p = &a9;
  sub_100047F64((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1008AFB1C(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v5 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      std::string::size_type v5 = (void *)*v5;
    }
    int v6 = 136446466;
    std::string::size_type v7 = v5;
    __int16 v8 = 1024;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] Refresh pending: %{BOOL}d", (uint8_t *)&v6, 0x12u);
  }
  *(unsigned char *)(a1 + 64) = a2;
}

unint64_t sub_1008AFC10(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 144);
  uint64_t v4 = *(void *)(a1 + 136);
  std::string::size_type v5 = v1;
  if (v1) {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v2 = sub_1008AFC90(a1, &v4, (uint64_t)"AccessControl");
  if (v5) {
    sub_10004D2C8(v5);
  }
  return v2;
}

void sub_1008AFC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1008AFC90(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7 && !sub_100599BE8(v7, v6))
  {
    BOOL v18 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v19 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        std::string::size_type v19 = (void *)*v19;
      }
      int v43 = 136446722;
      uint64_t v44 = v19;
      __int16 v45 = 2082;
      uint64_t v46 = a3;
      __int16 v47 = 2080;
      __int16 v48 = "Unauthorized.xml";
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  uint64_t v8 = *(void *)(a1 + 88);
  if (v8 && !sub_100F79928(v8, v6))
  {
    BOOL v18 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v20 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        BOOL v20 = (void *)*v20;
      }
      int v43 = 136446722;
      uint64_t v44 = v20;
      __int16 v45 = 2082;
      uint64_t v46 = a3;
      __int16 v47 = 2080;
      __int16 v48 = "Banned.xml";
      goto LABEL_28;
    }
LABEL_29:
    unint64_t v22 = 0;
    unsigned __int8 v23 = 0;
    return v23 | v22;
  }
  uint64_t v9 = *(void *)(a1 + 152);
  if (v9 && !sub_1006B4B18(v9, v6))
  {
    BOOL v18 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v21 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        std::string::size_type v21 = (void *)*v21;
      }
      int v43 = 136446722;
      uint64_t v44 = v21;
      __int16 v45 = 2082;
      uint64_t v46 = a3;
      __int16 v47 = 2080;
      __int16 v48 = "UserInteractionRequired.xml";
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] [%{public}s] not applicable: %s", (uint8_t *)&v43, 0x20u);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  uint64_t v11 = *a2;
  std::string::size_type v10 = (std::__shared_weak_count *)a2[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v12 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  if (!v11) {
    goto LABEL_41;
  }
  if (sub_10047EF18(v11, v12))
  {
    unint64_t v13 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      int v43 = 136446466;
      uint64_t v44 = v14;
      __int16 v45 = 2082;
      uint64_t v46 = a3;
      std::string::size_type v15 = "#I [%{public}s] [%{public}s] has expired.";
      uint64_t v16 = v13;
      uint32_t v17 = 22;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v43, v17);
      goto LABEL_41;
    }
    goto LABEL_41;
  }
  std::string::size_type v24 = *(const char **)(v11 + 24);
  if (!v24)
  {
    std::string::size_type v34 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR)) {
      goto LABEL_41;
    }
    unint64_t v42 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      unint64_t v42 = (void *)*v42;
    }
    int v43 = 136446466;
    uint64_t v44 = v42;
    __int16 v45 = 2082;
    uint64_t v46 = a3;
    uint64_t v31 = "[%{public}s] [%{public}s] failed to determine creation timestamp for XML expiry timer";
    BOOL v32 = v34;
    uint32_t v33 = 22;
    goto LABEL_58;
  }
  uint64_t v25 = *(void *)(v11 + 88);
  unint64_t v26 = *(std::__shared_weak_count **)(a1 + 32);
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v27 = (uint64_t)((double)std::chrono::system_clock::now().__d_.__rep_ / 1000000.0);
  if (v26) {
    sub_10004D2C8(v26);
  }
  uint64_t v28 = v27 - (void)v24;
  if (v27 < (uint64_t)v24)
  {
    int v29 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
      goto LABEL_41;
    }
    std::string::size_type v30 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      std::string::size_type v30 = (void *)*v30;
    }
    int v43 = 136447234;
    uint64_t v44 = v30;
    __int16 v45 = 2082;
    uint64_t v46 = a3;
    __int16 v47 = 2048;
    __int16 v48 = v24;
    __int16 v49 = 2048;
    __int16 v50 = (const char *)v25;
    __int16 v51 = 2048;
    uint64_t v52 = v27;
    uint64_t v31 = "[%{public}s] [%{public}s] invalid timestamps: [creation ts: %zu] [validity: %zu seconds] [now ts: %zu]";
    BOOL v32 = v29;
    uint32_t v33 = 52;
LABEL_58:
    _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, v31, (uint8_t *)&v43, v33);
    goto LABEL_41;
  }
  uint64_t v37 = v25 - v28;
  if (v25 >= v28)
  {
    uint64_t v40 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v41 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        unint64_t v41 = (void *)*v41;
      }
      int v43 = 136447490;
      uint64_t v44 = v41;
      __int16 v45 = 2082;
      uint64_t v46 = a3;
      __int16 v47 = 2048;
      __int16 v48 = (const char *)v37;
      __int16 v49 = 2048;
      __int16 v50 = v24;
      __int16 v51 = 2048;
      uint64_t v52 = v25;
      __int16 v53 = 2048;
      uint64_t v54 = v27;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] [%{public}s]  [value: %zu]: [creation ts: %zu] [validity: %zu seconds] [now ts: %zu]", (uint8_t *)&v43, 0x3Eu);
    }
    unint64_t v22 = v37 & 0xFFFFFFFFFFFFFF00;
    char v35 = v37;
    goto LABEL_42;
  }
  uint64_t v38 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *(unsigned int *)(a1 + 16));
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v39 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      std::string::size_type v39 = (void *)*v39;
    }
    int v43 = 136447234;
    uint64_t v44 = v39;
    __int16 v45 = 2082;
    uint64_t v46 = a3;
    __int16 v47 = 2048;
    __int16 v48 = v24;
    __int16 v49 = 2048;
    __int16 v50 = (const char *)v25;
    __int16 v51 = 2048;
    uint64_t v52 = v27;
    std::string::size_type v15 = "#I [%{public}s] [%{public}s] EXPIRED: [creation ts: %zu] [validity: %zu seconds] [now ts: %zu]";
    uint64_t v16 = v38;
    uint32_t v17 = 52;
    goto LABEL_15;
  }
LABEL_41:
  char v35 = 0;
  unint64_t v22 = 0;
LABEL_42:
  unsigned __int8 v23 = v22 | v35;
  if (v10) {
    sub_10004D2C8(v10);
  }
  return v23 | v22;
}

void sub_1008B0360(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008B0378(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1008B0474((unsigned char *)a1, a2);
  long long v5 = *(_OWORD *)(a2 + 40);
  *((void *)v4 + 7) = *(void *)(a2 + 56);
  *(_OWORD *)(v4 + 40) = v5;
  sub_1008B0530((uint64_t)(v4 + 64), a2 + 64);
  sub_1008B05F8((char *)(a1 + 120), a2 + 120);
  sub_1008B0BF0(a1 + 656, (long long *)(a2 + 656));
  sub_1008B0C74((unsigned char *)(a1 + 720), a2 + 720);
  long long v6 = *(_OWORD *)(a2 + 1144);
  long long v7 = *(_OWORD *)(a2 + 1160);
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  *(_OWORD *)(a1 + 1144) = v6;
  *(_OWORD *)(a1 + 1160) = v7;
  return a1;
}

void sub_1008B040C(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v1 + 712)) {
    sub_10005CD2C(v1 + 688, *(char **)(v1 + 696));
  }
  if (*(unsigned char *)(v1 + 648)) {
    sub_10020F650(v3);
  }
  sub_10020F7A4(v2);
  if (*(unsigned char *)(v1 + 32))
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_1008B0474(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[32] = 0;
  if (*(unsigned char *)(a2 + 32)) {
    sub_1008B04D4((uint64_t)a1, a2);
  }
  return a1;
}

void sub_1008B04B0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 32))
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_1008B04D4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  BOOL result = (void *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    BOOL result = sub_10004FC84(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    result[2] = *(void *)(a2 + 24);
    *(_OWORD *)BOOL result = v4;
  }
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

uint64_t sub_1008B0530(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 48) = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    sub_1008B0588((uint64_t *)a1, a2);
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

void sub_1008B0574(_Unwind_Exception *a1)
{
  sub_10020F7A4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1008B0588(uint64_t *a1, uint64_t a2)
{
  long long v4 = sub_1000C6BDC(a1, a2);
  void v4[3] = 0;
  void v4[4] = 0;
  v4 += 3;
  void v4[2] = 0;
  sub_10047F114(v4, *(void *)(a2 + 24), *(void *)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  return a1;
}

void sub_1008B05E0(_Unwind_Exception *a1)
{
  sub_10005CD2C(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_1008B05F8(char *__dst, uint64_t a2)
{
  *std::string __dst = 0;
  __dst[528] = 0;
  if (*(unsigned char *)(a2 + 528))
  {
    sub_1008B0658(__dst, (long long *)a2);
    __dst[528] = 1;
  }
  return __dst;
}

void sub_1008B063C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 528)) {
    sub_10020F650(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1008B0658(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  sub_1000593FC((uint64_t)(__dst + 24), (long long *)((char *)a2 + 24));
  sub_1000C6BDC((uint64_t *)__dst + 7, (uint64_t)a2 + 56);
  sub_1000C6BDC((uint64_t *)__dst + 10, (uint64_t)(a2 + 5));
  if (*((char *)a2 + 127) < 0)
  {
    sub_10004FC84(__dst + 104, *((void **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 104);
    *((void *)__dst + 15) = *((void *)a2 + 15);
    *(_OWORD *)(__dst + 104) = v5;
  }
  if (*((char *)a2 + 151) < 0)
  {
    sub_10004FC84(__dst + 128, *((void **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v6 = a2[8];
    *((void *)__dst + 18) = *((void *)a2 + 18);
    *((_OWORD *)__dst + 8) = v6;
  }
  long long v7 = *(long long *)((char *)a2 + 152);
  *((void *)__dst + 21) = *((void *)a2 + 21);
  *(_OWORD *)(__dst + 152) = v7;
  if (*((char *)a2 + 199) < 0)
  {
    sub_10004FC84(__dst + 176, *((void **)a2 + 22), *((void *)a2 + 23));
  }
  else
  {
    long long v8 = a2[11];
    *((void *)__dst + 24) = *((void *)a2 + 24);
    *((_OWORD *)__dst + 11) = v8;
  }
  if (*((char *)a2 + 223) < 0)
  {
    sub_10004FC84(__dst + 200, *((void **)a2 + 25), *((void *)a2 + 26));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 200);
    *((void *)__dst + 27) = *((void *)a2 + 27);
    *(_OWORD *)(__dst + 200) = v9;
  }
  if (*((char *)a2 + 247) < 0)
  {
    sub_10004FC84(__dst + 224, *((void **)a2 + 28), *((void *)a2 + 29));
  }
  else
  {
    long long v10 = a2[14];
    *((void *)__dst + 30) = *((void *)a2 + 30);
    *((_OWORD *)__dst + 14) = v10;
  }
  if (*((char *)a2 + 271) < 0)
  {
    sub_10004FC84(__dst + 248, *((void **)a2 + 31), *((void *)a2 + 32));
  }
  else
  {
    long long v11 = *(long long *)((char *)a2 + 248);
    *((void *)__dst + 33) = *((void *)a2 + 33);
    *(_OWORD *)(__dst + 248) = v11;
  }
  if (*((char *)a2 + 295) < 0)
  {
    sub_10004FC84(__dst + 272, *((void **)a2 + 34), *((void *)a2 + 35));
  }
  else
  {
    long long v12 = a2[17];
    *((void *)__dst + 36) = *((void *)a2 + 36);
    *((_OWORD *)__dst + 17) = v12;
  }
  if (*((char *)a2 + 319) < 0)
  {
    sub_10004FC84(__dst + 296, *((void **)a2 + 37), *((void *)a2 + 38));
  }
  else
  {
    long long v13 = *(long long *)((char *)a2 + 296);
    *((void *)__dst + 39) = *((void *)a2 + 39);
    *(_OWORD *)(__dst + 296) = v13;
  }
  if (*((char *)a2 + 343) < 0)
  {
    sub_10004FC84(__dst + 320, *((void **)a2 + 40), *((void *)a2 + 41));
  }
  else
  {
    long long v14 = a2[20];
    *((void *)__dst + 42) = *((void *)a2 + 42);
    *((_OWORD *)__dst + 20) = v14;
  }
  if (*((char *)a2 + 367) < 0)
  {
    sub_10004FC84(__dst + 344, *((void **)a2 + 43), *((void *)a2 + 44));
  }
  else
  {
    long long v15 = *(long long *)((char *)a2 + 344);
    *((void *)__dst + 45) = *((void *)a2 + 45);
    *(_OWORD *)(__dst + 344) = v15;
  }
  if (*((char *)a2 + 391) < 0)
  {
    sub_10004FC84(__dst + 368, *((void **)a2 + 46), *((void *)a2 + 47));
  }
  else
  {
    long long v16 = a2[23];
    *((void *)__dst + 48) = *((void *)a2 + 48);
    *((_OWORD *)__dst + 23) = v16;
  }
  if (*((char *)a2 + 415) < 0)
  {
    sub_10004FC84(__dst + 392, *((void **)a2 + 49), *((void *)a2 + 50));
  }
  else
  {
    long long v17 = *(long long *)((char *)a2 + 392);
    *((void *)__dst + 51) = *((void *)a2 + 51);
    *(_OWORD *)(__dst + 392) = v17;
  }
  if (*((char *)a2 + 439) < 0)
  {
    sub_10004FC84(__dst + 416, *((void **)a2 + 52), *((void *)a2 + 53));
  }
  else
  {
    long long v18 = a2[26];
    *((void *)__dst + 54) = *((void *)a2 + 54);
    *((_OWORD *)__dst + 26) = v18;
  }
  if (*((char *)a2 + 463) < 0)
  {
    sub_10004FC84(__dst + 440, *((void **)a2 + 55), *((void *)a2 + 56));
  }
  else
  {
    long long v19 = *(long long *)((char *)a2 + 440);
    *((void *)__dst + 57) = *((void *)a2 + 57);
    *(_OWORD *)(__dst + 440) = v19;
  }
  BOOL v20 = __dst + 464;
  if (*((char *)a2 + 487) < 0)
  {
    sub_10004FC84(v20, *((void **)a2 + 58), *((void *)a2 + 59));
  }
  else
  {
    long long v21 = a2[29];
    *((void *)__dst + 60) = *((void *)a2 + 60);
    *(_OWORD *)BOOL v20 = v21;
  }
  long long v22 = *(long long *)((char *)a2 + 488);
  long long v23 = *(long long *)((char *)a2 + 504);
  *((_WORD *)__dst + 260) = *((_WORD *)a2 + 260);
  *(_OWORD *)(__dst + 488) = v22;
  *(_OWORD *)(__dst + 504) = v23;
  return __dst;
}

void sub_1008B0A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, uint64_t a17, uint64_t a18)
{
  if (*(char *)(v18 + 463) < 0) {
    operator delete(*v19);
  }
  if (*(char *)(v18 + 439) < 0) {
    operator delete(*v26);
  }
  if (*(char *)(v18 + 415) < 0) {
    operator delete(*v25);
  }
  if (*(char *)(v18 + 391) < 0) {
    operator delete(*v24);
  }
  if (*(char *)(v18 + 367) < 0) {
    operator delete(*v23);
  }
  if (*(char *)(v18 + 343) < 0) {
    operator delete(*v22);
  }
  if (*(char *)(v18 + 319) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v18 + 295) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v18 + 271) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v18 + 247) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v18 + 223) < 0) {
    operator delete(*a12);
  }
  if (*(char *)(v18 + 199) < 0) {
    operator delete(*a13);
  }
  if (*(char *)(v18 + 151) < 0) {
    operator delete(*a14);
  }
  if (*(char *)(v18 + 127) < 0) {
    operator delete(*a15);
  }
  sub_10005CD2C(a17, *(char **)(v18 + 88));
  sub_10005CD2C(a18, *(char **)(v18 + 64));
  if (*(unsigned char *)(v18 + 48) && *(char *)(v18 + 47) < 0) {
    operator delete(*a16);
  }
  if (*(char *)(v18 + 23) < 0) {
    operator delete(*(void **)v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1008B0BF0(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v3 = *a2;
    *(_OWORD *)(a1 + 11) = *(long long *)((char *)a2 + 11);
    *(_OWORD *)a1 = v3;
    sub_1000C6BDC((uint64_t *)(a1 + 32), (uint64_t)(a2 + 2));
    *(unsigned char *)(a1 + 56) = 1;
  }
  return a1;
}

void sub_1008B0C54(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 56)) {
    sub_10005CD2C(v2, *(char **)(v1 + 40));
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1008B0C74(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[416] = 0;
  if (*(unsigned char *)(a2 + 416))
  {
    sub_1008B0CCC((uint64_t)a1, (long long *)a2);
    a1[416] = 1;
  }
  return a1;
}

void sub_1008B0CB8(_Unwind_Exception *a1)
{
  sub_10020F4D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1008B0CCC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  sub_1008B0D84((char *)(a1 + 24), (uint64_t)a2 + 24);
  sub_1008B0ED4((unsigned char *)(a1 + 120), (uint64_t)a2 + 120);
  sub_1008B1084((unsigned char *)(a1 + 264), (uint64_t)a2 + 264);
  sub_1008B1174((char *)(a1 + 368), a2 + 23);
  return a1;
}

void sub_1008B0D50(_Unwind_Exception *a1)
{
  sub_10020F534(v3);
  sub_10020F588(v2);
  sub_10020F5F4(v1);
  _Unwind_Resume(a1);
}

char *sub_1008B0D84(char *__dst, uint64_t a2)
{
  *std::string __dst = 0;
  __dst[88] = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    sub_1008B0DDC(__dst, (long long *)a2);
    __dst[88] = 1;
  }
  return __dst;
}

void sub_1008B0DC8(_Unwind_Exception *a1)
{
  sub_10020F5F4(v1);
  _Unwind_Resume(a1);
}

char *sub_1008B0DDC(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  long long v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(v6, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *(_OWORD *)long long v6 = v7;
  }
  uint64_t v8 = *((void *)a2 + 9);
  *((_WORD *)__dst + 40) = *((_WORD *)a2 + 40);
  *((void *)__dst + 9) = v8;
  return __dst;
}

void sub_1008B0EA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1008B0ED4(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[136] = 0;
  if (*(unsigned char *)(a2 + 136))
  {
    sub_1008B0F2C((uint64_t)a1, (long long *)a2);
    a1[136] = 1;
  }
  return a1;
}

void sub_1008B0F18(_Unwind_Exception *a1)
{
  sub_10020F588(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1008B0F2C(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 24), *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 48), *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 72), *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v7;
  }
  uint64_t v8 = (unsigned char *)(a1 + 96);
  if (*((char *)a2 + 119) < 0)
  {
    sub_10004FC84(v8, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v9 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)uint64_t v8 = v9;
  }
  *(_OWORD *)(a1 + 120) = *(long long *)((char *)a2 + 120);
  return a1;
}

void sub_1008B1038(_Unwind_Exception *exception_object)
{
  if (v1[95] < 0) {
    operator delete(*v4);
  }
  if (v1[71] < 0) {
    operator delete(*v3);
  }
  if (v1[47] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1008B1084(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[96] = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    sub_1008B10DC((uint64_t)a1, (long long *)a2);
    a1[96] = 1;
  }
  return a1;
}

void sub_1008B10C8(_Unwind_Exception *a1)
{
  sub_10020F534(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1008B10DC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  if (*((char *)a2 + 63) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 40), *((void **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 40);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(_OWORD *)(a1 + 40) = v6;
  }
  sub_1000593FC(a1 + 64, a2 + 4);
  return a1;
}

void sub_1008B1158(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1008B1174(char *a1, long long *a2)
{
  *a1 = 0;
  a1[40] = 0;
  sub_1008B11C8(a1, a2);
  return a1;
}

void sub_1008B11A4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 40))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1008B11C8(char *__dst, long long *a2)
{
  if (*((unsigned char *)a2 + 40))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *(_OWORD *)std::string __dst = v4;
    }
    __n128 result = *(__n128 *)((char *)a2 + 24);
    *(__n128 *)(__dst + 24) = result;
    __dst[40] = 1;
  }
  return result;
}

void sub_1008B1230()
{
}

uint64_t sub_1008B1244(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_1008B138C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008B14B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008B159C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008B15D4(uint64_t a1, void *a2, char a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1008B5E88;
  _DWORD v5[3] = &unk_101A15660;
  char v8 = a3;
  id v6 = a2;
  uint64_t v7 = a1;
  id v4 = v6;
  sub_1008BEED4((id *)(a1 + 32), v5);
}

void sub_1008B168C(uint64_t a1, void *a2, char a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1008B7C88;
  _DWORD v5[3] = &unk_101A15660;
  char v8 = a3;
  id v6 = a2;
  uint64_t v7 = a1;
  id v4 = v6;
  sub_1008BEED4((id *)(a1 + 32), v5);
}

void sub_1008B18A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008B1910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1008B1984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008B19EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1008B1AEC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 objectForKey:NWNetworkAgentStartOptionClientUUID];
  uint64_t v3 = v2;
  if (v2)
  {
    v20[0] = 0;
    v20[1] = 0;
    [v2 getUUIDBytes:v20];
    id v4 = (void *)nw_path_copy_path_for_client();
    if (v4)
    {
      long long v5 = nw_path_copy_parameters();
      int pid = nw_parameters_get_pid();
      *(_OWORD *)long long v16 = 0u;
      long long v17 = 0u;
      xpc_generate_audit_token();
      id v7 = (id)xpc_copy_entitlement_for_token();
      id v15 = v7;
      xpc_object_t v8 = v7;
      if (!v7)
      {
        xpc_object_t v8 = xpc_null_create();
        id v15 = v8;
      }

      if (xpc_get_type(v8) == (xpc_type_t)&_xpc_type_null || xpc::is_logically_false((xpc *)&v15, v9))
      {
        sub_1008BE67C();
        long long v10 = sub_100200FB4(&qword_101B0E108);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          int v19 = pid;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#N NWAgent Bootstrap start forbidden as originating process is not entitled!! (pid %d)", buf, 8u);
        }

        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v11 = 1;
      }
      id v13 = v15;
      id v15 = 0;
    }
    else
    {
      sub_1008BE67C();
      long long v5 = sub_100200FB4(&qword_101B0E108);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#N NWAgent Bootstrap start forbidden as originating process cannot be found", v16, 2u);
      }
      uint64_t v11 = 0;
    }
  }
  else
  {
    sub_1008BE67C();
    long long v12 = sub_100200FB4(&qword_101B0E108);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#N NWAgent Bootstrap start forbidden as originating process UUID cannot be found", v16, 2u);
    }

    uint64_t v11 = 0;
  }

  return v11;
}

void sub_1008B1D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DataConnectionAgent::DataConnectionAgent(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, uint64_t a5, uint64_t a6, id *a7, void *a8)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)((char *)a8 + *(void *)(*a8 - 56)) + 16))(&v25);
  PersonalitySpecificImpl::PersonalitySpecificImpl();
  if (v26) {
    sub_10004D2C8(v26);
  }
  long long v14 = (std::__shared_weak_count *)a3[1];
  uint64_t v23 = *a3;
  std::string::size_type v24 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v22 = *a7;
  DataConnectionAgentInterface::DataConnectionAgentInterface();
  id v15 = v22;
  id v22 = 0;

  if (v24) {
    sub_10004D2C8(v24);
  }
  *(void *)(a1 + 104) = off_101A158F0;
  uint64_t v16 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v16 - 56)) = a2[5];
  uint64_t v17 = a2[6];
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 24) = v17;
  *(void *)(a1 + 104) = off_101A15890;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 155) = 0u;
  uint64_t v18 = *a3;
  int v19 = (std::__shared_weak_count *)a3[1];
  v21[0] = v18;
  v21[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)((char *)a8 + *(void *)(*a8 - 56)) + 16))(&v25);
  DataConnectionAgentPolicyInterface::create((uint64_t)v21, (uint64_t)&v25, (void *)(a1 + 200));
  if (v26) {
    sub_10004D2C8(v26);
  }
  if (v19) {
    sub_10004D2C8(v19);
  }
  *(unsigned char *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 220) = a4;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = *a7;
  *(_DWORD *)(a1 + 240) = 0;
  *(unsigned char *)(a1 + 244) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 248) = a4;
  *(_DWORD *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 260) = a4;
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 272) = a8;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  sub_1008BBC38(a1, 0, 0, 0);
  DataConnectionAgent::updateAgent((DataConnectionAgent *)a1, 1);
  return a1;
}

void sub_1008B21D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  if (*(char *)(v16 + 199) < 0) {
    operator delete(*v19);
  }
  if (*(char *)(v16 + 167) < 0) {
    operator delete(*(void **)(v16 + 144));
  }

  DataConnectionAgentInterface::~DataConnectionAgentInterface(v17);
  PersonalitySpecificImpl::~PersonalitySpecificImpl((PersonalitySpecificImpl *)v16);
  _Unwind_Resume(a1);
}

void DataConnectionAgent::~DataConnectionAgent(DataConnectionAgent *this, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v3 - 56)) = a2[5];
  *((void *)this + 3) = a2[6];
  *((void *)this + 13) = off_101A15890;
  uint64_t v4 = *((void *)this + 25);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 80))(v4);
  }
  sub_1008BBB00((uint64_t)this);
  long long v5 = (void *)*((void *)this + 28);
  *((void *)this + 28) = 0;

  sub_1008BA478((uint64_t *)this + 39, 0);
  sub_1008B7BDC((uint64_t *)this + 35, 0);
  id v6 = (void *)*((void *)this + 29);
  *((void *)this + 29) = 0;

  id v7 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v7) {
    sub_10004D2C8(v7);
  }
  if (*((char *)this + 199) < 0) {
    operator delete(*((void **)this + 22));
  }
  if (*((char *)this + 167) < 0) {
    operator delete(*((void **)this + 18));
  }

  DataConnectionAgentInterface::~DataConnectionAgentInterface((DataConnectionAgent *)((char *)this + 24));

  PersonalitySpecificImpl::~PersonalitySpecificImpl(this);
}

uint64_t sub_1008B24B8(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3, int a4, uint64_t a5, id *a6, void *a7, int a8)
{
  v16[0] = a2;
  v16[1] = (uint64_t)a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a8) {
    long long v14 = "DATA.agent.provisioning2";
  }
  else {
    long long v14 = "DATA.agent.provisioning";
  }
  DataConnectionAgent::DataConnectionAgent(a1, (uint64_t *)off_101A15370, v16, a4, (uint64_t)v14, a5, a6, a7);
  if (a3) {
    sub_10004D2C8(a3);
  }
  *(void *)a1 = off_101A15178;
  *(void *)(a1 + 24) = off_101A15288;
  *(void *)(a1 + 104) = off_101A15350;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(unsigned char *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 369) = a8;
  return a1;
}

void sub_1008B25D8(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  PersonalitySpecific::~PersonalitySpecific(v1);
  _Unwind_Resume(a1);
}

void sub_1008B25F8(uint64_t a1)
{
  *(void *)a1 = off_101A15178;
  *(void *)(a1 + 24) = off_101A15288;
  *(void *)(a1 + 104) = off_101A15350;
  uint64_t v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(void *)(a1 + 328) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 336);
  if (v3)
  {
    *(void *)(a1 + 336) = 0;
  }
  uint64_t v4 = *(void **)(a1 + 352);
  if (v4)
  {
    *(void *)(a1 + 352) = 0;
  }
  long long v5 = *(void **)(a1 + 360);
  if (v5)
  {
    *(void *)(a1 + 360) = 0;
  }
  id v6 = *(void **)(a1 + 344);
  if (v6)
  {
    *(void *)(a1 + 344) = 0;
  }
  sub_100057D78((const void **)(a1 + 320));

  DataConnectionAgent::~DataConnectionAgent((DataConnectionAgent *)a1, (uint64_t *)off_101A15370);
}

void sub_1008B2710(uint64_t a1)
{
  sub_1008B25F8(a1);

  PersonalitySpecific::~PersonalitySpecific(v1);
}

void sub_1008B2738(uint64_t a1)
{
  sub_1008B25F8(a1 - 24);

  PersonalitySpecific::~PersonalitySpecific(v1);
}

void sub_1008B2764(uint64_t a1)
{
  sub_1008B25F8(a1 - 104);

  PersonalitySpecific::~PersonalitySpecific(v1);
}

void sub_1008B2790(uint64_t a1)
{
  sub_1008B25F8(a1);
  PersonalitySpecific::~PersonalitySpecific(v1);

  operator delete();
}

void sub_1008B27CC(uint64_t a1)
{
}

void sub_1008B27D4(uint64_t a1)
{
}

void sub_1008B27DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 369))
  {
    if (!*(unsigned char *)(a1 + 368)) {
      return;
    }
  }
  else if (*(unsigned char *)(a1 + 368))
  {
    return;
  }
  if (!*(void *)(a1 + 352))
  {
    id v2 = objc_alloc((Class)NEPathControllerNetworkAgent);
    if (*(unsigned char *)(a1 + 369)) {
      CFStringRef v3 = @"CellularDataPlanProvisioning2";
    }
    else {
      CFStringRef v3 = @"CellularDataPlanProvisioning";
    }
    id v4 = [v2 initWithAdvisoryAgentDomain:@"Cellular" agentType:v3 advisoryMode:3];
    long long v5 = *(void **)(a1 + 352);
    *(void *)(a1 + 352) = v4;

    [*(id *)(a1 + 352) setActive:1];
    [*(id *)(a1 + 352) setVoluntary:0];
    [*(id *)(a1 + 352) setUserActivated:0];
    [*(id *)(a1 + 352) setKernelActivated:0];
    id v6 = +[NSUUID UUID];
    [*(id *)(a1 + 352) setAgentUUID:v6];

    id v7 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v8 = [*(id *)(a1 + 352) agentUUID];
      id v9 = [v8 UUIDString];
      int v16 = 136446210;
      id v17 = [v9 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I NWAgent: created fallback agent: %{public}s", (uint8_t *)&v16, 0xCu);
    }
  }
  if (!*(void *)(a1 + 360))
  {
    id v10 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
    uint64_t v11 = *(void **)(a1 + 360);
    *(void *)(a1 + 360) = v10;

    unsigned int v12 = [*(id *)(a1 + 360) registerNetworkAgent:*(void *)(a1 + 352)];
    id v13 = sub_100200FB4((id *)(a1 + 64));
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (v14)
      {
        LOWORD(v16) = 0;
        id v15 = "#I NWAgent: registered fallback agent";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v16, 2u);
      }
    }
    else if (v14)
    {
      LOWORD(v16) = 0;
      id v15 = "#N NWAgent: fallback agent registration failed";
      goto LABEL_18;
    }
  }

  sub_1008B2A9C(a1);
}

void sub_1008B2A68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008B2A9C(uint64_t a1)
{
  if (!*(void *)(a1 + 344))
  {
    id v2 = objc_alloc_init((Class)NEPolicySession);
    CFStringRef v3 = *(void **)(a1 + 344);
    *(void *)(a1 + 344) = v2;

    [*(id *)(a1 + 344) setPriority:301];
    id v4 = +[NEPolicyCondition accountIdentifier:@"com.apple.CommCenter.DataPlanProvisioning"];
    long long v5 = [*(id *)(a1 + 352) agentUUID];
    id v6 = +[NEPolicyResult netAgentUUID:v5];

    id v7 = objc_alloc((Class)NEPolicy);
    uint64_t v27 = v4;
    xpc_object_t v8 = +[NSArray arrayWithObjects:&v27 count:1];
    id v9 = [v7 initWithOrder:10 result:v6 conditions:v8];

    [*(id *)(a1 + 344) addPolicy:v9];
    if (*(void *)(a1 + 328))
    {
      id v10 = +[NEPolicyCondition accountIdentifier:@"com.apple.CommCenter.DataPlanProvisioning"];
      uint64_t v11 = [*(id *)(a1 + 328) agentUUID];
      unsigned int v12 = +[NEPolicyResult netAgentUUID:v11];

      id v13 = objc_alloc((Class)NEPolicy);
      BOOL v14 = +[NEPolicyCondition allInterfaces];
      v26[0] = v14;
      v26[1] = v10;
      id v15 = +[NSArray arrayWithObjects:v26 count:2];
      id v16 = [v13 initWithOrder:15 result:v12 conditions:v15];

      [*(id *)(a1 + 344) addPolicy:v16];
    }
    if (([*(id *)(a1 + 344) apply] & 1) == 0)
    {
      id v17 = sub_100200FB4((id *)(a1 + 64));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v22) = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#N NWAgent: policy apply failed", (uint8_t *)&v22, 2u);
      }
    }
    uint64_t v18 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        int v19 = (void *)*v19;
      }
      id v20 = [*(id *)(a1 + 344) description];
      id v21 = [v20 UTF8String];
      int v22 = 136446466;
      uint64_t v23 = v19;
      __int16 v24 = 2080;
      id v25 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I NWAgent: registered fallback policy uuid %{public}s, session %s", (uint8_t *)&v22, 0x16u);
    }
  }
}

void sub_1008B2D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008B2E28(uint64_t a1)
{
  id v1 = *(void **)(a1 + 344);
  if (v1)
  {
    *(void *)(a1 + 344) = 0;

    CFStringRef v3 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I NWAgent: unregistered fallback policy", v4, 2u);
    }
  }
}

void sub_1008B2EA8(id *a1, id *a2)
{
  id v4 = (const void **)(a1 + 40);
  id v26 = a1[40];
  id v5 = *a2;
  if (a1[40]) {
    id v6 = sub_100080778;
  }
  else {
    id v6 = 0;
  }
  if (*a2) {
    id v7 = sub_100080778;
  }
  else {
    id v7 = 0;
  }
  if (v6)
  {
    if (!v7) {
      goto LABEL_17;
    }
  }
  else if (v7)
  {
    goto LABEL_17;
  }
  if (v26) {
    BOOL v8 = v5 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8 || ([v26 isEqualToDictionary:v5] & 1) != 0)
  {
    sub_100058140(v4, (const void **)a2);
    goto LABEL_42;
  }
LABEL_17:
  sub_100058140(v4, (const void **)a2);
  if (*v4) {
    id v9 = sub_100080778;
  }
  else {
    id v9 = 0;
  }
  if (!v9)
  {
    id v23 = a1[42];
    if (v23)
    {
      [v23 unregisterNetworkAgent];
      __int16 v24 = sub_100200FB4(a1 + 8);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I NWAgent: provisioning: proxy agent unregistered", buf, 2u);
      }

      id v25 = a1[42];
      a1[42] = 0;
    }
    id v20 = a1[41];
    if (!v20) {
      goto LABEL_41;
    }
    a1[41] = 0;
    goto LABEL_40;
  }
  if (!a1[41])
  {
    id v10 = [objc_alloc((Class)NEProxyConfigurationNetworkAgent) initWithProxyConfiguration:*v4];
    id v11 = a1[41];
    a1[41] = v10;

    [a1[41] setActive:1];
    [a1[41] setVoluntary:0];
    [a1[41] setUserActivated:0];
    [a1[41] setKernelActivated:0];
    unsigned int v12 = +[NSUUID UUID];
    [a1[41] setAgentUUID:v12];

    id v13 = sub_100200FB4(a1 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v14 = [a1[41] agentUUID];
      id v15 = [v14 UUIDString];
      *(_DWORD *)long long buf = 136446210;
      id v28 = [v15 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I NWAgent: provisioning: proxy agent created %{public}s", buf, 0xCu);
    }
  }
  id v16 = a1[42];
  if (!v16)
  {
    id v17 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
    id v18 = a1[42];
    a1[42] = v17;

    id v16 = a1[42];
  }
  if ([v16 isRegistered]) {
    goto LABEL_41;
  }
  unsigned __int8 v19 = [a1[42] registerNetworkAgent:a1[41]];
  id v20 = sub_100200FB4(a1 + 8);
  BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
  if (v19)
  {
    if (v21)
    {
      *(_WORD *)long long buf = 0;
      int v22 = "#I NWAgent: provisioning: registered proxy agent";
LABEL_39:
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v22, buf, 2u);
    }
  }
  else if (v21)
  {
    *(_WORD *)long long buf = 0;
    int v22 = "#I NWAgent: provisioning: proxy agent add to pdp 0 fail";
    goto LABEL_39;
  }
LABEL_40:

LABEL_41:
  sub_1008B2E28((uint64_t)a1);
  sub_1008B2A9C((uint64_t)a1);
LABEL_42:
}

void sub_1008B3214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1008B325C(uint64_t a1, id *a2)
{
}

void sub_1008B3264(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 368) != a2)
  {
    BOOL v2 = a2;
    id v4 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = asStringBool(*(unsigned char *)(a1 + 368));
      int v6 = 136315394;
      uint64_t v7 = v5;
      __int16 v8 = 2080;
      uint64_t v9 = asStringBool(v2);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I NWAgent: switchFallbackPolicy: fIsSecondaryEnabled: %s->%s", (uint8_t *)&v6, 0x16u);
    }

    *(unsigned char *)(a1 + 368) = v2;
    DataConnectionAgent::initPolicy((DataConnectionAgent *)a1, 0);
  }
}

void sub_1008B3354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DataConnectionAgent::initPolicy(DataConnectionAgent *this, BOOL a2)
{
  id v4 = (id *)((char *)this + 64);
  uint64_t v5 = sub_100200FB4((id *)this + 8);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = (void *)((char *)this + 144);
    if (*((char *)this + 167) < 0) {
      int v6 = (void *)*v6;
    }
    int v10 = 136315650;
    id v11 = "initPolicy";
    __int16 v12 = 2082;
    id v13 = v6;
    __int16 v14 = 2080;
    uint64_t v15 = asStringBool(a2);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s, Initializing network policy (reset %s)", (uint8_t *)&v10, 0x20u);
  }

  sub_1008BA670(this);
  DataConnectionAgent::setPolicy((uint64_t)this, 0, (uint64_t)"init policy", *((_DWORD *)this + 74));
  uint64_t v7 = *((void *)this + 39);
  if (v7 && *(void *)(v7 + 16))
  {
    __int16 v8 = sub_100200FB4(v4);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      id v11 = "initPolicy";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: cleaning pending traffic descriptors", (uint8_t *)&v10, 0xCu);
    }

    uint64_t v9 = *((void *)this + 39);
    sub_10005D9E0(v9, *(void **)(v9 + 8));
    *(void *)uint64_t v9 = v9 + 8;
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + 8) = 0;
  }
  *((unsigned char *)this + 216) = 1;
  if (a2) {
    sub_1008B400C((uint64_t)this);
  }
}

void sub_1008B3524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008B353C(uint64_t a1, int a2)
{
}

void sub_1008B3544(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(void *)(a1 + 328) = 0;
  }
  CFStringRef v3 = *(void **)(a1 + 336);
  if (v3)
  {
    *(void *)(a1 + 336) = 0;
  }
  id v4 = *(void **)(a1 + 344);
  if (v4)
  {
    *(void *)(a1 + 344) = 0;
  }
  uint64_t v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(void *)(a1 + 352) = 0;
  }
  int v6 = *(void **)(a1 + 360);
  if (v6)
  {
    *(void *)(a1 + 360) = 0;

    uint64_t v7 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v8 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        __int16 v8 = (void *)*v8;
      }
      int v9 = 136446210;
      int v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I NWAgent %{public}s: unregistered fallback policy", (uint8_t *)&v9, 0xCu);
    }
  }
}

void sub_1008B3650(uint64_t a1)
{
  if (!*(void *)(a1 + 344))
  {
    id v2 = [objc_alloc((Class)NEPathControllerNetworkAgent) initWithAdvisoryAgentDomain:@"Cellular" agentType:@"BootstrapProvisioning" advisoryMode:3];
    CFStringRef v3 = *(void **)(a1 + 344);
    *(void *)(a1 + 344) = v2;

    [*(id *)(a1 + 344) setActive:1];
    [*(id *)(a1 + 344) setVoluntary:0];
    [*(id *)(a1 + 344) setUserActivated:0];
    [*(id *)(a1 + 344) setKernelActivated:0];
    id v4 = objc_opt_new();
    [*(id *)(a1 + 344) setAgentUUID:v4];

    uint64_t v5 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = [*(id *)(a1 + 344) agentUUID];
      id v8 = [v7 UUIDString];
      *(_DWORD *)long long buf = 136446466;
      BOOL v32 = v6;
      __int16 v33 = 2082;
      id v34 = [v8 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I NWAgent %{public}s: created fallback agent %{public}s", buf, 0x16u);
    }
  }
  if (!*(void *)(a1 + 352))
  {
    id v9 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
    int v10 = *(void **)(a1 + 352);
    *(void *)(a1 + 352) = v9;

    unsigned int v11 = [*(id *)(a1 + 352) registerNetworkAgent:*(void *)(a1 + 344)];
    __int16 v12 = sub_100200FB4((id *)(a1 + 64));
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (v11)
    {
      if (v13)
      {
        __int16 v14 = (void *)(a1 + 144);
        if (*(char *)(a1 + 167) < 0) {
          __int16 v14 = (void *)*v14;
        }
        *(_DWORD *)long long buf = 136446210;
        BOOL v32 = v14;
        uint64_t v15 = "#I NWAgent %{public}s: registered fallback agent";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
      }
    }
    else if (v13)
    {
      id v16 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        id v16 = (void *)*v16;
      }
      *(_DWORD *)long long buf = 136446210;
      BOOL v32 = v16;
      uint64_t v15 = "#N NWAgent %{public}s: fallback agent registration failed";
      goto LABEL_17;
    }
  }
  if (!*(void *)(a1 + 360))
  {
    id v17 = +[NEPolicyCondition accountIdentifier:@"com.apple.CommCenter.CellularPlanProvisioning"];
    id v18 = [*(id *)(a1 + 344) agentUUID];
    unsigned __int8 v19 = +[NEPolicyResult netAgentUUID:v18];

    id v20 = objc_alloc((Class)NEPolicy);
    std::string::size_type v30 = v17;
    BOOL v21 = +[NSArray arrayWithObjects:&v30 count:1];
    id v22 = [v20 initWithOrder:10 result:v19 conditions:v21];

    id v23 = objc_alloc_init((Class)NEPolicySession);
    __int16 v24 = *(void **)(a1 + 360);
    *(void *)(a1 + 360) = v23;

    [*(id *)(a1 + 360) setPriority:301];
    [*(id *)(a1 + 360) addPolicy:v22];
    if (([*(id *)(a1 + 360) apply] & 1) == 0)
    {
      id v25 = sub_100200FB4((id *)(a1 + 64));
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        id v26 = (void *)(a1 + 144);
        if (*(char *)(a1 + 167) < 0) {
          id v26 = (void *)*v26;
        }
        *(_DWORD *)long long buf = 136446210;
        BOOL v32 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#N NWAgent %{public}s: policy apply failed", buf, 0xCu);
      }
    }
    uint64_t v27 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      id v28 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        id v28 = (void *)*v28;
      }
      int v29 = *(void **)(a1 + 360);
      *(_DWORD *)long long buf = 136446466;
      BOOL v32 = v28;
      __int16 v33 = 2112;
      id v34 = v29;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I NWAgent : registered fallback policy uuid %{public}s, session %@", buf, 0x16u);
    }
  }
}

void sub_1008B3A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008B3B04(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 320)) {
    CFStringRef v3 = sub_100080778;
  }
  else {
    CFStringRef v3 = 0;
  }
  if (v3) {
    BOOL v4 = a2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    uint64_t v5 = *(void **)(a1 + 336);
    if (!v5) {
      return;
    }
    [v5 unregisterNetworkAgent];
    int v6 = sub_100200FB4((id *)(a1 + 64));
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_42;
    }
    uint64_t v7 = (void *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    int v26 = 136446210;
    id v27 = v7;
    id v8 = "#I NWAgent %{public}s: proxy agent unregistered";
    goto LABEL_36;
  }
  if (!*(void *)(a1 + 328))
  {
    id v9 = [objc_alloc((Class)NEProxyConfigurationNetworkAgent) initWithProxyConfiguration:*(void *)(a1 + 320)];
    int v10 = *(void **)(a1 + 328);
    *(void *)(a1 + 328) = v9;

    [*(id *)(a1 + 328) setActive:1];
    [*(id *)(a1 + 328) setVoluntary:0];
    [*(id *)(a1 + 328) setUserActivated:0];
    [*(id *)(a1 + 328) setKernelActivated:0];
    unsigned int v11 = +[NSUUID UUID];
    [*(id *)(a1 + 328) setAgentUUID:v11];

    __int16 v12 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v13 = [*(id *)(a1 + 328) agentUUID];
      id v14 = [v13 UUIDString];
      int v26 = 136446210;
      id v27 = [v14 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I NWAgent: proxy agent created %{public}s", (uint8_t *)&v26, 0xCu);
    }
  }
  uint64_t v15 = *(void **)(a1 + 336);
  if (!v15)
  {
    id v16 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
    id v17 = *(void **)(a1 + 336);
    *(void *)(a1 + 336) = v16;

    uint64_t v15 = *(void **)(a1 + 336);
  }
  if (([v15 isRegistered] & 1) == 0)
  {
    unsigned __int8 v18 = [*(id *)(a1 + 336) registerNetworkAgent:*(void *)(a1 + 328)];
    int v6 = sub_100200FB4((id *)(a1 + 64));
    BOOL v19 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v18)
    {
      if (v19)
      {
        id v20 = (void *)(a1 + 144);
        if (*(char *)(a1 + 167) < 0) {
          id v20 = (void *)*v20;
        }
        int v26 = 136446210;
        id v27 = v20;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I NWAgent %{public}s: registered proxy agent", (uint8_t *)&v26, 0xCu);
      }

      int v6 = +[NSString stringWithUTF8String:"pdp_ip0"];
      if ([*(id *)(a1 + 336) addNetworkAgentToInterfaceNamed:v6])
      {
        BOOL v21 = sub_100200FB4((id *)(a1 + 64));
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          id v22 = (void *)(a1 + 144);
          if (*(char *)(a1 + 167) < 0) {
            id v22 = (void *)*v22;
          }
          int v26 = 136446210;
          id v27 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I NWAgent %{public}s: added proxy to pdp 0", (uint8_t *)&v26, 0xCu);
        }
      }
      else
      {
        __int16 v24 = sub_100200FB4((id *)(a1 + 64));
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          id v25 = (void *)(a1 + 144);
          if (*(char *)(a1 + 167) < 0) {
            id v25 = (void *)*v25;
          }
          int v26 = 136446210;
          id v27 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#N NWAgent %{public}s: failed to register proxy to pdp", (uint8_t *)&v26, 0xCu);
        }

        [*(id *)(a1 + 336) unregisterNetworkAgent];
      }
      goto LABEL_42;
    }
    if (!v19)
    {
LABEL_42:

      return;
    }
    id v23 = (void *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0) {
      id v23 = (void *)*v23;
    }
    int v26 = 136446210;
    id v27 = v23;
    id v8 = "#I NWAgent %{public}s: proxy agent add to pdp 0 fail";
LABEL_36:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v26, 0xCu);
    goto LABEL_42;
  }
}

void sub_1008B3EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008B3F40(uint64_t a1, const void **a2)
{
  sub_100058140((const void **)(a1 + 320), a2);
  CFStringRef v3 = sub_100200FB4((id *)(a1 + 64));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v4 = (void *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0) {
      BOOL v4 = (void *)*v4;
    }
    int v5 = 136446210;
    int v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I NWAgent %{public}s: bootstrap: will reset agent due to proxy setup", (uint8_t *)&v5, 0xCu);
  }

  sub_1008B400C(a1);
}

void sub_1008B400C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 264))
  {
    *(unsigned char *)(a1 + 264) = 0;
    *(void *)(a1 + 240) = *(void *)(a1 + 252);
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a1 + 260);
  }
  uint64_t v2 = *(void *)(a1 + 312);
  if (v2 && *(void *)(v2 + 16))
  {
    CFStringRef v3 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315138;
      id v17 = "resetAgent";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: cleaning traffic descriptors", (uint8_t *)&v16, 0xCu);
    }

    uint64_t v4 = *(void *)(a1 + 312);
    sub_10005D9E0(v4, *(void **)(v4 + 8));
    *(void *)uint64_t v4 = v4 + 8;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 8) = 0;
  }
  *(void *)(a1 + 288) = 0;
  int v5 = sub_100200FB4((id *)(a1 + 64));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(const char **)(a1 + 288);
    int v16 = 134217984;
    id v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I NWAgent: fSliceAssertCount: %lu (reset)", (uint8_t *)&v16, 0xCu);
  }

  if (sub_1008B58AC(a1))
  {
    uint64_t v7 = *(void *)(a1 + 120);
    if (v7)
    {
      id v8 = [*(id *)(a1 + 120) isNetworkProvider];
      id v9 = [*(id *)(a1 + 120) isUserActivated];
    }
    else
    {
      id v8 = 0;
      id v9 = 0;
    }
    sub_1008BA670((void *)a1);
    sub_1008BBB00(a1);
    uint64_t v10 = a1;
    BOOL v11 = v7 != 0;
    uint64_t v12 = (uint64_t)v8;
    BOOL v13 = (BOOL)v9;
  }
  else
  {
    sub_1008BA670((void *)a1);
    sub_1008BBB00(a1);
    uint64_t v10 = a1;
    BOOL v11 = 0;
    uint64_t v12 = 0;
    BOOL v13 = 0;
  }
  sub_1008BBC38(v10, v11, v12, v13);
  if (*(unsigned char *)(a1 + 216)) {
    DataConnectionAgent::setPolicy(a1, 0, (uint64_t)"reset agent", *(_DWORD *)(a1 + 296));
  }
  id v14 = *(void **)(a1 + 120);
  if (v14) {
    id v15 = [v14 isActive];
  }
  else {
    id v15 = 0;
  }
  DataConnectionAgent::updateAgentState(a1, (BOOL)v15, *(unsigned __int8 *)(a1 + 168), a1 + 176, 1, 0);
}

void sub_1008B4244(uint64_t a1, const void **a2)
{
}

void sub_1008B424C(uint64_t a1)
{
  *(void *)a1 = off_101A153F0;
  *(void *)(a1 + 24) = off_101A15500;
  *(void *)(a1 + 104) = off_101A155C8;
  uint64_t v2 = *(void **)(a1 + 328);
  if (v2)
  {
    *(void *)(a1 + 328) = 0;
  }
  CFStringRef v3 = *(void **)(a1 + 336);
  if (v3)
  {
    *(void *)(a1 + 336) = 0;
  }
  uint64_t v4 = *(void **)(a1 + 344);
  if (v4)
  {
    *(void *)(a1 + 344) = 0;
  }
  int v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(void *)(a1 + 352) = 0;
  }
  int v6 = *(void **)(a1 + 360);
  if (v6)
  {
    *(void *)(a1 + 360) = 0;

    int v6 = *(void **)(a1 + 360);
  }

  sub_100057D78((const void **)(a1 + 320));

  DataConnectionAgent::~DataConnectionAgent((DataConnectionAgent *)a1, (uint64_t *)off_101A155E8);
}

void sub_1008B4364(uint64_t a1)
{
  sub_1008B424C(a1);

  PersonalitySpecific::~PersonalitySpecific(v1);
}

void sub_1008B438C(uint64_t a1)
{
  sub_1008B424C(a1 - 24);

  PersonalitySpecific::~PersonalitySpecific(v1);
}

void sub_1008B43B8(uint64_t a1)
{
  sub_1008B424C(a1 - 104);

  PersonalitySpecific::~PersonalitySpecific(v1);
}

void sub_1008B43E4(uint64_t a1)
{
  sub_1008B424C(a1);
  PersonalitySpecific::~PersonalitySpecific(v1);

  operator delete();
}

void sub_1008B4420(uint64_t a1)
{
}

void sub_1008B4428(uint64_t a1)
{
}

void DataConnectionAgentInterface::createDataConnectionAgent(uint64_t a1, int a2)
{
  if (a2 > 22)
  {
    if (a2 == 23) {
      operator new();
    }
    if (a2 == 24) {
      operator new();
    }
  }
  else
  {
    if (a2 == 6) {
      operator new();
    }
    if (a2 == 19)
    {
      uint64_t v2 = *(void *)(a1 + 8);
      if (v2) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
      }
      CFTypeRef cf = 0;
      operator new();
    }
  }
  operator new();
}

void sub_1008B4BD0(void *a1)
{
  __cxa_begin_catch(a1);
  sub_1008BED5C(v1);
  __cxa_rethrow();
}

void sub_1008B4BE0()
{
}

void sub_1008B4CD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, DataConnectionAgentInterface *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  __cxa_end_catch();
  if (v15) {
    sub_10004D2C8(v15);
  }
  if (v16) {
    JUMPOUT(0x1008B4DB0);
  }
  JUMPOUT(0x1008B4E38);
}

void sub_1008B4DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_10004D2C8(a20);
  }
  JUMPOUT(0x1008B4D58);
}

void sub_1008B4DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_10004D2C8(a20);
  }
  JUMPOUT(0x1008B4D68);
}

void sub_1008B4DF4()
{
}

void sub_1008B4DFC()
{
  if (v0) {
    JUMPOUT(0x1008B4DACLL);
  }
  JUMPOUT(0x1008B4E38);
}

void sub_1008B4E08()
{
  if (v0) {
    sub_10004D2C8(v0);
  }
  if (v1) {
    JUMPOUT(0x1008B4E2CLL);
  }
  JUMPOUT(0x1008B4E38);
}

void sub_1008B4E40()
{
  sub_1008BA478(v3, 0);
  sub_1008B7BDC(v2, 0);
  sub_100200A44(v1);

  if (!*(void *)(v0 + 208)) {
    JUMPOUT(0x1008B4D08);
  }
  JUMPOUT(0x1008B4D04);
}

void DataConnectionAgent::handleRegistrationStatusChanged(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100200FB4((id *)(a1 + 64));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    id v8 = "handleRegistrationStatusChanged";
    __int16 v9 = 1024;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: registrationState=%d fAgentData.change", (uint8_t *)&v7, 0x12u);
  }

  *(unsigned char *)(a1 + 252) = a2 != 0;
  if (!*(unsigned char *)(a1 + 264))
  {
    *(void *)(a1 + 240) = *(void *)(a1 + 252);
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a1 + 260);
  }
  int v5 = *(void **)(a1 + 120);
  if (v5)
  {
    int v6 = [v5 getAgentData];
    if ((char)*v6 != a2)
    {
      *int v6 = a2;
      DataConnectionAgent::updateAgentIfReady((DataConnectionAgent *)a1);
    }
  }
}

void DataConnectionAgent::updateAgentIfReady(DataConnectionAgent *this)
{
  if (DataConnectionAgent::connectionReady(this))
  {
    uint64_t v2 = (void *)*((void *)this + 15);
    if (v2)
    {
      if ([v2 isActive])
      {
        uint64_t v3 = *((void *)this + 34);
        if (v3)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 56))(v3))
          {
            DataConnectionAgent::updateAgent(this, 0);
          }
        }
      }
    }
  }
}

void non-virtual thunk to'DataConnectionAgent::handleRegistrationStatusChanged(uint64_t a1, char a2)
{
}

void DataConnectionAgent::handleInHomeCountry_sync(DataConnectionAgent *this, int a2)
{
  uint64_t v4 = sub_100200FB4((id *)this + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    id v8 = "handleInHomeCountry_sync";
    __int16 v9 = 1024;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: restEvent: inHomeCountry=%d fAgentData.change", (uint8_t *)&v7, 0x12u);
  }

  *((unsigned char *)this + 253) = a2;
  if (!*((unsigned char *)this + 264))
  {
    *((void *)this + 30) = *(void *)((char *)this + 252);
    *((_DWORD *)this + 62) = *((_DWORD *)this + 65);
  }
  int v5 = (void *)*((void *)this + 15);
  if (v5)
  {
    int v6 = [v5 getAgentData];
    if ((char)v6[1] != a2)
    {
      v6[1] = a2;
      DataConnectionAgent::updateAgentIfReady(this);
    }
  }
}

void non-virtual thunk to'DataConnectionAgent::handleInHomeCountry_sync(DataConnectionAgent *this, int a2)
{
}

void non-virtual thunk to'DataConnectionAgent::handleDNSReady(DataConnectionAgent *this)
{
}

id DataConnectionAgent::connectionReady(DataConnectionAgent *this)
{
  uint64_t v2 = (void *)*((void *)this + 28);
  if (v2)
  {
    return [v2 pathSatisfied];
  }
  else
  {
    uint64_t v3 = sub_100200FB4((id *)this + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      int v6 = "connectionReady";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#E %s: NWAgent: fInterfaceObserver is empty", (uint8_t *)&v5, 0xCu);
    }

    return 0;
  }
}

id non-virtual thunk to'DataConnectionAgent::connectionReady(DataConnectionAgent *this)
{
  return DataConnectionAgent::connectionReady((DataConnectionAgent *)((char *)this - 24));
}

void DataConnectionAgent::dumpState(DataConnectionAgent *this)
{
  uint64_t v2 = (id *)((char *)this + 64);
  uint64_t v3 = sub_100200FB4((id *)this + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((void *)this + 12);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I DATA:: ------------ NWAgent: %s ------------------>>", buf, 0xCu);
  }

  unsigned __int8 v6 = sub_1008B58AC((uint64_t)this);
  int v7 = (void *)*((void *)this + 15);
  if (v7)
  {
    unsigned __int8 v8 = [v7 isNetworkProvider];
    __int16 v9 = (void *)*((void *)this + 15);
    if (v9)
    {
      unsigned __int8 v10 = [v9 isUserActivated];
      BOOL v11 = (void *)*((void *)this + 15);
      if (v11)
      {
        unsigned __int8 v12 = [v11 isKernelActivated];
        goto LABEL_10;
      }
    }
    else
    {
      unsigned __int8 v10 = 0;
    }
  }
  else
  {
    unsigned __int8 v10 = 0;
    unsigned __int8 v8 = 0;
  }
  unsigned __int8 v12 = 0;
LABEL_10:
  BOOL v13 = sub_100200FB4(v2);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    char v67 = v5;
    id v14 = (void *)*((void *)this + 15);
    if (v14) {
      LOBYTE(v14) = [v14 isActive];
    }
    uint64_t v66 = asStringBool((BOOL)v14);
    uint64_t v65 = asStringBool(*((unsigned char *)this + 168));
    uint64_t v64 = asStringBool(v6);
    uint64_t v63 = asStringBool(*((void *)this + 15) != 0);
    uint64_t v62 = asStringBool(v8);
    uint64_t v61 = asStringBool(v10);
    uint64_t v60 = asStringBool(v12);
    uint64_t v15 = asStringBool(*((unsigned char *)this + 169));
    uint64_t v16 = (void *)((char *)this + 176);
    if (*((char *)this + 199) < 0) {
      uint64_t v16 = (void *)*v16;
    }
    id v17 = (void *)((char *)this + 144);
    if (*((char *)this + 167) < 0) {
      id v17 = (void *)*v17;
    }
    uint64_t v18 = asStringBool(*((unsigned char *)this + 170));
    uint64_t v19 = *((void *)this + 36);
    uint64_t v20 = asString();
    uint64_t v21 = asString();
    uint64_t v22 = asString();
    *(_DWORD *)long long buf = 136318722;
    *(void *)&uint8_t buf[4] = v66;
    __int16 v71 = 2080;
    *(void *)unint64_t v72 = v65;
    *(_WORD *)&v72[8] = 2080;
    uint64_t v73 = v64;
    *(_WORD *)std::string::size_type v74 = 2080;
    *(void *)&v74[2] = v63;
    __int16 v75 = 2080;
    uint64_t v76 = v62;
    __int16 v77 = 2080;
    uint64_t v78 = v61;
    __int16 v79 = 2080;
    uint64_t v80 = v60;
    __int16 v81 = 2080;
    uint64_t v82 = v15;
    __int16 v83 = 2080;
    std::string::size_type v84 = v16;
    __int16 v85 = 2082;
    unint64_t v86 = v17;
    __int16 v87 = 2080;
    uint64_t v88 = v18;
    __int16 v89 = 2048;
    uint64_t v90 = v19;
    __int16 v91 = 2080;
    uint64_t v92 = v20;
    __int16 v93 = 2080;
    uint64_t v94 = v21;
    __int16 v95 = 2080;
    uint64_t v96 = v22;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t NWAgent: isAgentActive() = %s, fAvailable = %s, persistentAgent = %s, fAgent = %s, networkProvider = %s, userActivated = %s, kernelActivated = %s, fFailure = %s, fInterface = %s, UUID = %{public}s, fPathSatisfied = %s fSliceAssertCFIndex Count = %lu fConnectionState = %s fConfiguredFamily=%s fActiveFamily=%s", buf, 0x98u);
    int v5 = v67;
  }

  id v23 = (void *)*((void *)this + 15);
  if (v23)
  {
    __int16 v24 = (char *)[v23 getAgentData];
    if (v24)
    {
      id v25 = sub_100200FB4(v2);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        id v26 = [*((id *)this + 15) agentDescription];
        id v27 = [v26 UTF8String];
        int v28 = *v24;
        int v29 = v24[1];
        int v30 = v24[2];
        int v31 = v24[3];
        *(_DWORD *)long long buf = 136316162;
        *(void *)&uint8_t buf[4] = v27;
        __int16 v71 = 1024;
        *(_DWORD *)unint64_t v72 = v28;
        *(_WORD *)&v72[4] = 1024;
        *(_DWORD *)&void v72[6] = v29;
        LOWORD(v73) = 1024;
        *(_DWORD *)((char *)&v73 + 2) = v30;
        HIWORD(v73) = 1024;
        *(_DWORD *)std::string::size_type v74 = v31;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t NWAgent: description = %s, regStatus = %d, inHomeCountry = %d, dch = %d, utbf = %d", buf, 0x24u);
      }
    }
  }
  BOOL v32 = (void *)*((void *)this + 17);
  if (v32)
  {
    __int16 v33 = (char *)[v32 getAgentData];
    if (v33)
    {
      id v34 = sub_100200FB4(v2);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        id v35 = [*((id *)this + 15) agentDescription];
        id v36 = [v35 UTF8String];
        int v37 = *v33;
        int v38 = v33[1];
        int v39 = v33[2];
        int v40 = v33[3];
        *(_DWORD *)long long buf = 136316162;
        *(void *)&uint8_t buf[4] = v36;
        __int16 v71 = 1024;
        *(_DWORD *)unint64_t v72 = v37;
        *(_WORD *)&v72[4] = 1024;
        *(_DWORD *)&void v72[6] = v38;
        LOWORD(v73) = 1024;
        *(_DWORD *)((char *)&v73 + 2) = v39;
        HIWORD(v73) = 1024;
        *(_DWORD *)std::string::size_type v74 = v40;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t NWAgentSliceRouter: description = %s, regStatus = %d, inHomeCountry = %d, dch = %d, utbf = %d", buf, 0x24u);
      }
    }
  }
  unint64_t v41 = (void *)*((void *)this + 35);
  if (v41)
  {
    uint64_t v44 = (void *)*v41;
    unint64_t v42 = v41 + 1;
    int v43 = v44;
    if (v44 != v42)
    {
      do
      {
        __int16 v45 = sub_100200FB4(v2);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v46 = v43 + 4;
          if (*((char *)v43 + 55) < 0) {
            uint64_t v46 = (void *)*v46;
          }
          __int16 v47 = v43 + 7;
          if (*((char *)v43 + 79) < 0) {
            __int16 v47 = (void *)*v47;
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v46;
          __int16 v71 = 2080;
          *(void *)unint64_t v72 = v47;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t NWAgent: uuid = %s, bundleId = %s", buf, 0x16u);
        }

        __int16 v48 = (void *)v43[1];
        if (v48)
        {
          do
          {
            __int16 v49 = v48;
            __int16 v48 = (void *)*v48;
          }
          while (v48);
        }
        else
        {
          do
          {
            __int16 v49 = (void *)v43[2];
            BOOL v50 = *v49 == (void)v43;
            int v43 = v49;
          }
          while (!v50);
        }
        int v43 = v49;
      }
      while (v49 != v42);
    }
  }
  __int16 v51 = (void *)*((void *)this + 39);
  if (v51)
  {
    uint64_t v54 = (void *)*v51;
    uint64_t v52 = v51 + 1;
    __int16 v53 = v54;
    if (v54 != v52)
    {
      do
      {
        uint64_t v55 = sub_100200FB4(v2);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          TrafficDescriptor::toString((uint64_t *)buf, (TrafficDescriptor *)(v53 + 4));
          unint64_t v56 = v72[9] >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)std::string::size_type v68 = 136315138;
          std::string::size_type v69 = v56;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t NWAgent: pending td = %s", v68, 0xCu);
          if ((v72[9] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }

        unint64_t v57 = (void *)v53[1];
        if (v57)
        {
          do
          {
            unint64_t v58 = v57;
            unint64_t v57 = (void *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            unint64_t v58 = (void *)v53[2];
            BOOL v50 = *v58 == (void)v53;
            __int16 v53 = v58;
          }
          while (!v50);
        }
        __int16 v53 = v58;
      }
      while (v58 != v52);
    }
  }
  uint64_t v59 = *((void *)this + 25);
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 104))(v59);
  }
}

void sub_1008B5870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1008B58AC(uint64_t a1)
{
  if (!*(void *)(a1 + 120)) {
    return 0;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v3 = ServiceMap;
  if ((v4 & 0x8000000000000000) != 0)
  {
    int v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v15 = v4;
  unsigned __int8 v8 = sub_10004D37C(&v3[1].__m_.__sig, &v15);
  if (v8)
  {
    uint64_t v10 = v8[3];
    __int16 v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      char v11 = 0;
      if (!v10) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v3);
  __int16 v9 = 0;
  char v11 = 1;
  if (v10)
  {
LABEL_11:
    uint64_t v12 = *(void *)(a1 + 272) + *(void *)(**(void **)(a1 + 272) - 56);
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 24))(v12);
    if (v13 == (*(unsigned int (**)(uint64_t))(*(void *)v10 + 776))(v10)) {
      goto LABEL_12;
    }
    if ((v11 & 1) == 0) {
      sub_10004D2C8(v9);
    }
    return 0;
  }
LABEL_12:
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
  return [*(id *)(a1 + 120) isPersistent];
}

void sub_1008B5A34(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'DataConnectionAgent::dumpState(DataConnectionAgent *this)
{
}

void sub_1008B5A54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void **)(v2 + 120);
  if (v3)
  {
    if ([v3 isActive]) {
      return;
    }
    int v5 = sub_100200FB4((id *)(v2 + 64));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (void *)(v2 + 144);
      if (*(char *)(v2 + 167) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v26 = 2112;
      uint64_t v27 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I NWAgent %{public}s, client is being asked to come up: %@", buf, 0x16u);
    }

    uint64_t v8 = *(unsigned __int8 *)(v2 + 264);
    if (!*(unsigned char *)(v2 + 264))
    {
      uint64_t v8 = 1;
      *(unsigned char *)(v2 + 264) = 1;
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)v8, *(Registry **)(v2 + 72));
    uint64_t v10 = ServiceMap;
    if (v11 < 0)
    {
      uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v13 = 5381;
      do
      {
        uint64_t v11 = v13;
        unsigned int v14 = *v12++;
        uint64_t v13 = (33 * v13) ^ v14;
      }
      while (v14);
    }
    std::mutex::lock(ServiceMap);
    *(void *)long long buf = v11;
    unint64_t v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
    if (v15)
    {
      uint64_t v17 = v15[3];
      uint64_t v16 = (std::__shared_weak_count *)v15[4];
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v10);
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v16);
        char v18 = 0;
        if (!v17)
        {
LABEL_23:
          if ((v18 & 1) == 0) {
            sub_10004D2C8(v16);
          }
          return;
        }
LABEL_21:
        uint64_t v20 = *(void *)(v2 + 272) + *(void *)(**(void **)(v2 + 272) - 56);
        uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 24))(v20);
        unsigned __int8 v22 = [*(id *)(v2 + 120) connectionType];
        sub_100058DB0(__p, "NWNetworkAgent");
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t, void))(*(void *)v17 + 80))(v17, v21, 1 << v22, 1, __p, 1, 0);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    std::mutex::unlock(v10);
    uint64_t v16 = 0;
    char v18 = 1;
    if (!v17) {
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  uint64_t v19 = sub_100200FB4((id *)(v2 + 64));
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "NWAgent: NWNetworkAgent reference is empty, somehow", buf, 2u);
  }
}

void sub_1008B5D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008B5D58(uint64_t a1, char a2)
{
  if (!isSlice()) {
    return;
  }
  uint64_t v4 = *(void *)(a1 + 288);
  if (a2)
  {
    uint64_t v5 = 1;
LABEL_6:
    *(void *)(a1 + 288) = v5 + v4;
    goto LABEL_7;
  }
  if (v4)
  {
    uint64_t v5 = -1;
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v6 = sub_100200FB4((id *)(a1 + 64));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 288);
    int v9 = 134217984;
    uint64_t v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I NWAgent: fSliceAssertCount: %lu", (uint8_t *)&v9, 0xCu);
  }

  if ((v4 == 0) == (*(void *)(a1 + 288) != 0))
  {
    uint64_t v8 = *(void *)(a1 + 272);
    if (v8) {
      (*(void (**)(uint64_t, void))(*(void *)v8 + 64))(v8, 0);
    }
  }
}

void sub_1008B5E88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1008B5D58(v2, 1);
  uint64_t v3 = *(void **)(v2 + 120);
  if (!v3)
  {
    int v38 = sub_100200FB4((id *)(v2 + 64));
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "NWAgent: NWNetworkAgent reference is empty, somehow", buf, 2u);
    }

    return;
  }
  if (!*(unsigned char *)(a1 + 48))
  {
LABEL_195:
    if ([v3 isActive]) {
      return;
    }
LABEL_196:
    uint64_t v145 = *(unsigned __int8 *)(v2 + 264);
    if (!*(unsigned char *)(v2 + 264))
    {
      uint64_t v145 = 1;
      *(unsigned char *)(v2 + 264) = 1;
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)v145, *(Registry **)(v2 + 72));
    char v147 = ServiceMap;
    if (v148 < 0)
    {
      __int16 v149 = (unsigned __int8 *)(v148 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v150 = 5381;
      do
      {
        uint64_t v148 = v150;
        unsigned int v151 = *v149++;
        uint64_t v150 = (33 * v150) ^ v151;
      }
      while (v151);
    }
    std::mutex::lock(ServiceMap);
    *(void *)long long buf = v148;
    id v152 = sub_10004D37C(&v147[1].__m_.__sig, (unint64_t *)buf);
    if (v152)
    {
      uint64_t v154 = v152[3];
      long long v153 = (std::__shared_weak_count *)v152[4];
      if (v153)
      {
        atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v147);
        atomic_fetch_add_explicit(&v153->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v153);
        char v155 = 0;
        if (!v154)
        {
LABEL_209:
          if ((v155 & 1) == 0) {
            sub_10004D2C8(v153);
          }
          return;
        }
LABEL_207:
        uint64_t v156 = *(void *)(v2 + 272) + *(void *)(**(void **)(v2 + 272) - 56);
        uint64_t v157 = (*(uint64_t (**)(uint64_t))(*(void *)v156 + 24))(v156);
        unsigned __int8 v158 = [*(id *)(v2 + 120) connectionType];
        sub_100058DB0(v201, "NWNetworkAgent assert");
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t, void))(*(void *)v154 + 80))(v154, v157, 1 << v158, 1, v201, 1, 0);
        if (v202 < 0) {
          operator delete(v201[0]);
        }
        goto LABEL_209;
      }
    }
    else
    {
      uint64_t v154 = 0;
    }
    std::mutex::unlock(v147);
    long long v153 = 0;
    char v155 = 1;
    if (!v154) {
      goto LABEL_209;
    }
    goto LABEL_207;
  }
  uint64_t v4 = (id *)(v2 + 64);
  uint64_t v5 = sub_100200FB4((id *)(v2 + 64));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = asStringBool(*(unsigned char *)(a1 + 48));
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "assertDataAgentWithOptions_block_invoke";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v6;
    *(_WORD *)&unsigned char buf[22] = 2112;
    *(void *)&unsigned char buf[24] = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent slice router %s: options %@", buf, 0x20u);
  }

  v200 = [*(id *)(a1 + 32) objectForKeyedSubscript:NWNetworkAgentStartOptionClientUUID];
  BOOL v199 = [*(id *)(a1 + 32) objectForKeyedSubscript:NWNetworkAgentStartOptionProcessUUID];
  memset(&v205, 0, sizeof(v205));
  sub_100058DB0(&v205, "");
  memset(&__str, 0, sizeof(__str));
  sub_100058DB0(&__str, kDefaultAppBundleId);
  memset(&__p, 0, sizeof(__p));
  if (v200)
  {
    uint64_t v8 = +[NWPath pathForClientID:v200];
    if (!v8)
    {
      loga = sub_100200FB4((id *)(v2 + 64));
      if (os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v41 = (void *)(v2 + 144);
        if (*(char *)(v2 + 167) < 0) {
          unint64_t v41 = (void *)*v41;
        }
        uint64_t v42 = asStringBool(*(unsigned char *)(a1 + 48));
        *(_DWORD *)long long buf = 136315906;
        *(void *)&uint8_t buf[4] = "assertDataAgentWithOptions_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&unsigned char buf[14] = v41;
        *(_WORD *)&unsigned char buf[22] = 2080;
        *(void *)&unsigned char buf[24] = v42;
        *(_WORD *)&unsigned char buf[32] = 2112;
        *(void *)&buf[34] = v200;
        _os_log_impl((void *)&_mh_execute_header, loga, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s slice %s: client UUID %@, path is null", buf, 0x2Au);
      }
      id v195 = 0;
      uint64_t v193 = 0;
      unsigned __int16 v196 = 0;
      goto LABEL_114;
    }
    int v9 = sub_100200FB4((id *)(v2 + 64));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = asStringBool(*(unsigned char *)(a1 + 48));
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "assertDataAgentWithOptions_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v10;
      *(_WORD *)&unsigned char buf[22] = 2112;
      *(void *)&unsigned char buf[24] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent slice %s: path %@", buf, 0x20u);
    }

    uint64_t v11 = [v8 parameters];
    BOOL v12 = v11 == 0;

    if (v12)
    {
      char v16 = sub_100200FB4((id *)(v2 + 64));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v53 = (void *)(v2 + 144);
        if (*(char *)(v2 + 167) < 0) {
          __int16 v53 = (void *)*v53;
        }
        uint64_t v54 = asStringBool(*(unsigned char *)(a1 + 48));
        *(_DWORD *)long long buf = 136315906;
        *(void *)&uint8_t buf[4] = "assertDataAgentWithOptions_block_invoke";
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&unsigned char buf[14] = v53;
        *(_WORD *)&unsigned char buf[22] = 2080;
        *(void *)&unsigned char buf[24] = v54;
        *(_WORD *)&unsigned char buf[32] = 2112;
        *(void *)&buf[34] = v200;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s slice %s: client UUID %@, path parameters are null", buf, 0x2Au);
      }
      id v195 = 0;
      HIDWORD(v193) = 0;
      unsigned __int16 v196 = 0;
      goto LABEL_63;
    }
    uint64_t v13 = [v8 parameters];
    HIDWORD(v193) = [v13 ipProtocol];

    unsigned int v14 = [v8 parameters];
    id v195 = [v14 trafficClass];

    unint64_t v15 = [v8 parameters];
    char v16 = [v15 account];

    if (v16)
    {
      memset(buf, 0, 24);
      ctu::cf::assign();
      std::string::size_type v17 = *(void *)buf;
      v216.__r_.__value_.__r.__words[0] = *(void *)&buf[8];
      *(std::string::size_type *)((char *)v216.__r_.__value_.__r.__words + 7) = *(void *)&buf[15];
      char v18 = buf[23];
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[0] = v17;
      __p.__r_.__value_.__l.__size_ = v216.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v216.__r_.__value_.__r.__words + 7);
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v18;
    }
    uint64_t v19 = [v8 parameters];
    uint64_t v20 = [v19 sanitizedURL];
    BOOL v21 = v20 == 0;

    if (v21) {
      goto LABEL_34;
    }
    unsigned __int8 v22 = [v8 parameters];
    id v23 = [v22 sanitizedURL];
    char v24 = [v23 host];
    BOOL v25 = v24 == 0;

    if (!v25)
    {
      os_log_t log = [v8 parameters];
      __int16 v26 = [log sanitizedURL];
      uint64_t v27 = [v26 host];
      int v28 = v16;
      memset(buf, 0, 24);
      ctu::cf::assign();
      std::string::size_type v29 = *(void *)buf;
      v216.__r_.__value_.__r.__words[0] = *(void *)&buf[8];
      *(std::string::size_type *)((char *)v216.__r_.__value_.__r.__words + 7) = *(void *)&buf[15];
      char v30 = buf[23];
      if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v205.__r_.__value_.__l.__data_);
      }
      v205.__r_.__value_.__r.__words[0] = v29;
      v205.__r_.__value_.__l.__size_ = v216.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v205.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v216.__r_.__value_.__r.__words + 7);
      *((unsigned char *)&v205.__r_.__value_.__s + 23) = v30;

      char v16 = v28;
    }
    int v31 = [v8 parameters];
    BOOL v32 = [v31 sanitizedURL];
    __int16 v33 = [v32 port];
    BOOL v34 = v33 == 0;

    if (v34)
    {
LABEL_34:
      unsigned __int16 v196 = 0;
    }
    else
    {
      id v35 = [v8 parameters];
      id v36 = [v35 sanitizedURL];
      int v37 = [v36 port];
      unsigned __int16 v196 = (unsigned __int16)[v37 unsignedShortValue];
    }
    int v43 = [v8 parameters];
    uint64_t v44 = [v43 effectiveProcessUUID];
    BOOL v45 = v44 == 0;

    if (v45)
    {
LABEL_61:
      char v67 = [v8 parameters];
      BOOL v68 = [v67 pid] == 0;

      if (!v68)
      {
        std::string::size_type v69 = [v8 parameters];
        LODWORD(v193) = [v69 pid];

        goto LABEL_64;
      }
LABEL_63:
      LODWORD(v193) = 0;
LABEL_64:

      long long v70 = [v8 effectiveLocalEndpoint];
      objc_opt_class();
      char isKindOfClass = objc_opt_isKindOfClass();

      if (isKindOfClass)
      {
        loga = [v8 effectiveLocalEndpoint];
      }
      else
      {
        loga = 0;
      }
      unint64_t v72 = [v8 effectiveRemoteEndpoint];
      objc_opt_class();
      char v73 = objc_opt_isKindOfClass();

      if (v73)
      {
        std::string::size_type v74 = [v8 effectiveRemoteEndpoint];
        __int16 v75 = [v74 port];
        BOOL v76 = v75 == 0;

        if (!v76)
        {
          __int16 v77 = [v74 port];
          unsigned __int16 v196 = (unsigned __int16)[v77 intValue];
        }
        uint64_t v78 = [v74 hostname];
        BOOL v79 = v78 == 0;

        if (!v79)
        {
          memset(&v216, 0, sizeof(v216));
          uint64_t v80 = [v74 hostname];
          memset(buf, 0, 24);
          ctu::cf::assign();
          std::string v216 = *(std::string *)buf;

          std::string::size_type size = HIBYTE(v216.__r_.__value_.__r.__words[2]);
          char v82 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
          if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v216.__r_.__value_.__l.__size_;
          }
          if (size)
          {
            std::string::operator=(&v205, &v216);
            char v82 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
          }
          if (v82 < 0) {
            operator delete(v216.__r_.__value_.__l.__data_);
          }
        }
      }
      else
      {
        std::string::size_type v74 = 0;
      }
      __int16 v83 = [v8 parameters];
      if (v83)
      {
        if (loga)
        {
          if (v74)
          {
            std::string::size_type v84 = [loga hostname];
            if (v84)
            {
              __int16 v85 = [loga port];
              if (v85)
              {
                unint64_t v86 = [v74 hostname];
                if (v86)
                {
                  __int16 v87 = [v74 port];
                  BOOL v88 = v87 == 0;

                  if (!v88)
                  {
                    v191 = sub_100200FB4(v4);
                    if (os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT))
                    {
                      __int16 v89 = (void *)(v2 + 144);
                      if (*(char *)(v2 + 167) < 0) {
                        __int16 v89 = (void *)*v89;
                      }
                      BOOL v178 = v89;
                      uint64_t v176 = asStringBool(*(unsigned char *)(a1 + 48));
                      uint64_t v165 = [v8 parameters];
                      id v189 = [v165 processUUID];
                      p_str = &__str;
                      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                      }
                      long long v173 = p_str;
                      id v167 = [v8 parameters];
                      unsigned int v171 = [v167 pid];
                      uint64_t v161 = [v8 interface];
                      v187 = [v161 interfaceName];
                      uint64_t v163 = [v8 interface];
                      id v169 = [v163 type];
                      std::string::size_type v184 = [loga hostname];
                      uint64_t v182 = [loga port];
                      uint64_t v180 = [v74 hostname];
                      uint64_t v185 = [v74 port];
                      __int16 v91 = [v8 parameters];
                      uint64_t v92 = [v91 sanitizedURL];
                      __int16 v93 = [v8 parameters];
                      unsigned int v94 = [v93 ipProtocol];
                      __int16 v95 = [v8 parameters];
                      id v96 = [v95 trafficClass];
                      unint64_t v97 = &v205;
                      if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        unint64_t v97 = (std::string *)v205.__r_.__value_.__r.__words[0];
                      }
                      p_p = &__p;
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                      }
                      *(_DWORD *)long long buf = 136320002;
                      *(void *)&uint8_t buf[4] = "assertDataAgentWithOptions_block_invoke";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&unsigned char buf[14] = v178;
                      *(_WORD *)&unsigned char buf[22] = 2080;
                      *(void *)&unsigned char buf[24] = v176;
                      *(_WORD *)&unsigned char buf[32] = 2112;
                      *(void *)&buf[34] = v200;
                      *(_WORD *)&buf[42] = 2112;
                      *(void *)&buf[44] = v199;
                      *(_WORD *)&buf[52] = 2112;
                      *(void *)&buf[54] = v189;
                      *(_WORD *)&buf[62] = 2080;
                      *(void *)&long long v208 = v173;
                      WORD4(v208) = 1024;
                      *(_DWORD *)((char *)&v208 + 10) = v171;
                      HIWORD(v208) = 2112;
                      *(void *)int v209 = v187;
                      *(_WORD *)&v209[8] = 2048;
                      *(void *)&v209[10] = v169;
                      *(_WORD *)&v209[18] = 2112;
                      *(void *)&v209[20] = v184;
                      *(_WORD *)&v209[28] = 2112;
                      *(void *)&v209[30] = v182;
                      *(_WORD *)&v209[38] = 2112;
                      *(void *)&v209[40] = v180;
                      *(_WORD *)&v209[48] = 2112;
                      *(void *)&v209[50] = v185;
                      *(_WORD *)&v209[58] = 2112;
                      *(void *)&v209[60] = v92;
                      *(_WORD *)&v209[68] = 1024;
                      *(_DWORD *)&v209[70] = v94;
                      *(_WORD *)&v209[74] = 2048;
                      *(void *)&v209[76] = v96;
                      *(_WORD *)&v209[84] = 2080;
                      *(void *)&v209[86] = v97;
                      *(_WORD *)&v209[94] = 1024;
                      *(_DWORD *)&v209[96] = v196;
                      *(_WORD *)&v209[100] = 2080;
                      *(void *)&v209[102] = p_p;
                      _os_log_impl((void *)&_mh_execute_header, v191, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s slice %s, client UUID %@, effective process UUID %@, process UUID %@, bundleID %s, pid %d, interface %@ %ld, local host %@, local port %@, remote host %@, remote port %@, URL %@, IP protocol %d, traffic class %lu, host(1) %s, port(1) %d, accountId %s", buf, 0xBEu);
                    }
                    int v99 = sub_100200FB4(v4);
                    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
                    {
                      id v100 = (void *)(v2 + 144);
                      std::string v101 = v99;
                      if (*(char *)(v2 + 167) < 0) {
                        id v100 = (void *)*v100;
                      }
                      uint64_t v159 = asStringBool(*(unsigned char *)(a1 + 48));
                      id v160 = [v8 privateDescription];
                      *(_DWORD *)long long buf = 136315906;
                      *(void *)&uint8_t buf[4] = "assertDataAgentWithOptions_block_invoke";
                      *(_WORD *)&unsigned char buf[12] = 2082;
                      *(void *)&unsigned char buf[14] = v100;
                      *(_WORD *)&unsigned char buf[22] = 2080;
                      *(void *)&unsigned char buf[24] = v159;
                      *(_WORD *)&unsigned char buf[32] = 2112;
                      *(void *)&buf[34] = v160;
                      int v99 = v101;
                      _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s slice %s, description %@", buf, 0x2Au);
                    }
                    goto LABEL_112;
                  }
LABEL_101:
                  uint64_t v102 = [v8 parameters];
                  BOOL v103 = v102 == 0;

                  if (v103)
                  {
LABEL_113:

LABEL_114:
                    goto LABEL_115;
                  }
                  int v99 = sub_100200FB4(v4);
                  if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
                  {
                    int v104 = (void *)(v2 + 144);
                    if (*(char *)(v2 + 167) < 0) {
                      int v104 = (void *)*v104;
                    }
                    v188 = v104;
                    v190 = v99;
                    uint64_t v105 = asStringBool(*(unsigned char *)(a1 + 48));
                    long long v172 = [v8 parameters];
                    uint64_t v106 = [v172 processUUID];
                    id v107 = &__str;
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      id v107 = (std::string *)__str.__r_.__value_.__r.__words[0];
                    }
                    long long v183 = v107;
                    v186 = (void *)v106;
                    v174 = [v8 parameters];
                    unsigned int v179 = [v174 pid];
                    v168 = [v8 interface];
                    char v181 = [v168 interfaceName];
                    v170 = [v8 interface];
                    id v177 = [v170 type];
                    __int16 v164 = [v8 parameters];
                    os_log_t v192 = [v164 sanitizedURL];
                    uint64_t v175 = v74;
                    long long v166 = [v8 parameters];
                    unsigned int v162 = [v166 ipProtocol];
                    uint64_t v108 = [v8 parameters];
                    id v109 = [v108 trafficClass];
                    int v110 = SHIBYTE(v205.__r_.__value_.__r.__words[2]);
                    std::string::size_type v111 = v205.__r_.__value_.__r.__words[0];
                    uint64_t v112 = [v8 parameters];
                    long long v113 = (void *)v112;
                    *(void *)&uint8_t buf[4] = "assertDataAgentWithOptions_block_invoke";
                    uint64_t v114 = &__p;
                    *(_DWORD *)long long buf = 136319234;
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                      uint64_t v114 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    *(_WORD *)&unsigned char buf[12] = 2082;
                    long long v115 = &v205;
                    *(void *)&unsigned char buf[14] = v188;
                    if (v110 < 0) {
                      long long v115 = (std::string *)v111;
                    }
                    *(_WORD *)&unsigned char buf[22] = 2080;
                    *(void *)&unsigned char buf[24] = v105;
                    *(_WORD *)&unsigned char buf[32] = 2112;
                    *(void *)&buf[34] = v200;
                    *(_WORD *)&buf[42] = 2112;
                    *(void *)&buf[44] = v199;
                    *(_WORD *)&buf[52] = 2112;
                    *(void *)&buf[54] = v186;
                    *(_WORD *)&buf[62] = 2080;
                    *(void *)&long long v208 = v183;
                    WORD4(v208) = 1024;
                    *(_DWORD *)((char *)&v208 + 10) = v179;
                    HIWORD(v208) = 2112;
                    *(void *)int v209 = v181;
                    *(_WORD *)&v209[8] = 2048;
                    *(void *)&v209[10] = v177;
                    *(_WORD *)&v209[18] = 2112;
                    int v99 = v190;
                    *(void *)&v209[20] = v192;
                    *(_WORD *)&v209[28] = 1024;
                    *(_DWORD *)&v209[30] = v162;
                    *(_WORD *)&v209[34] = 2048;
                    *(void *)&v209[36] = v109;
                    *(_WORD *)&v209[44] = 2080;
                    *(void *)&v209[46] = v115;
                    *(_WORD *)&v209[54] = 1024;
                    *(_DWORD *)&v209[56] = v196;
                    *(_WORD *)&v209[60] = 2080;
                    *(void *)&v209[62] = v114;
                    *(_WORD *)&v209[70] = 2112;
                    *(void *)&v209[72] = v112;
                    _os_log_impl((void *)&_mh_execute_header, v190, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s slice %s, client UUID %@, process effective UUID %@, process UUID %@, bundleID %s, pid %d, interface %@ %ld, URL %@, IP protocol %d, traffic class %lu, remote host %s, remote port %d, accountId %s, path parameters %@", buf, 0xA0u);

                    std::string::size_type v74 = v175;
                  }
LABEL_112:

                  goto LABEL_113;
                }
              }
            }
          }
        }
      }

      goto LABEL_101;
    }
    uint64_t v46 = [v8 parameters];
    __int16 v47 = [v46 effectiveProcessUUID];

    memset(buf, 0, 24);
    BOOL v199 = v47;
    id v48 = [v47 UUIDString];
    sub_100058DB0(buf, (char *)[v48 UTF8String]);

    __int16 v49 = (uint64_t ***)(v2 + 280);
    uint64_t v50 = *(void *)(v2 + 280);
    if (!v50) {
      operator new();
    }
    __int16 v51 = sub_100046F68(v50, (void **)buf);
    uint64_t v52 = (uint64_t *)(*v49 + 1);
    if (v52 != (uint64_t *)v51)
    {
      std::string::operator=(&__str, (const std::string *)(v51 + 7));
LABEL_59:
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_61;
    }
    uint64_t v55 = (std::mutex *)Registry::getServiceMap(v52, *(Registry **)(v2 + 72));
    unint64_t v56 = v55;
    if ((v57 & 0x8000000000000000) != 0)
    {
      unint64_t v58 = (unsigned __int8 *)(v57 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v59 = 5381;
      do
      {
        std::string::size_type v57 = v59;
        unsigned int v60 = *v58++;
        uint64_t v59 = (33 * v59) ^ v60;
      }
      while (v60);
    }
    std::mutex::lock(v55);
    v216.__r_.__value_.__r.__words[0] = v57;
    uint64_t v61 = sub_10004D37C(&v56[1].__m_.__sig, (unint64_t *)&v216);
    if (v61)
    {
      uint64_t v63 = v61[3];
      uint64_t v62 = (std::__shared_weak_count *)v61[4];
      if (v62)
      {
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v56);
        atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (id *)(v2 + 64);
        sub_10004D2C8(v62);
        char v64 = 0;
LABEL_53:
        if (v63)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t, unsigned char *))(*(void *)v63 + 64))(&v216, v63, buf);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = v216;
          uint64_t v65 = *v49;
          v216.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
          uint64_t v66 = sub_100366370(v65, (void **)buf, (uint64_t)&unk_10144E20E, (long long **)&v216);
          std::string::operator=((std::string *)(v66 + 7), &__str);
        }
        if ((v64 & 1) == 0) {
          sub_10004D2C8(v62);
        }
        goto LABEL_59;
      }
    }
    else
    {
      uint64_t v63 = 0;
    }
    std::mutex::unlock(v56);
    uint64_t v62 = 0;
    char v64 = 1;
    goto LABEL_53;
  }
  uint64_t v8 = sub_100200FB4((id *)(v2 + 64));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v39 = (void *)(v2 + 144);
    if (*(char *)(v2 + 167) < 0) {
      int v39 = (void *)*v39;
    }
    uint64_t v40 = asStringBool(*(unsigned char *)(a1 + 48));
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "assertDataAgentWithOptions_block_invoke";
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v39;
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&unsigned char buf[24] = v40;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s slice %s: clientUUID is null", buf, 0x20u);
  }
  id v195 = 0;
  uint64_t v193 = 0;
  unsigned __int16 v196 = 0;
LABEL_115:

  if (!*(unsigned char *)(a1 + 48))
  {
    int v122 = 0;
    int v116 = v199;
    goto LABEL_187;
  }
  long long v214 = 0u;
  long long v215 = 0u;
  long long v212 = 0u;
  long long v213 = 0u;
  long long v210 = 0u;
  long long v211 = 0u;
  memset(v209, 0, sizeof(v209));
  long long v208 = 0u;
  memset(buf, 0, sizeof(buf));
  int v116 = v199;
  TrafficDescriptor::TrafficDescriptor((TrafficDescriptor *)buf);
  std::string::size_type v117 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v117 = __str.__r_.__value_.__l.__size_;
  }
  unsigned __int16 v118 = v196;
  if (v117) {
    sub_100093B44((std::string *)&buf[48], &__str);
  }
  if (v199)
  {
    id v119 = [v199 UUIDString];
    v216.__r_.__value_.__r.__words[0] = (std::string::size_type)[v119 UTF8String];
    sub_1000791C0((std::string *)&buf[16], &v216.__r_.__value_.__l.__data_);

    int v116 = v199;
    unsigned __int16 v118 = v196;
  }
  if (v193)
  {
    *(_DWORD *)&uint8_t buf[4] = v193;
    uint8_t buf[8] = 1;
  }
  std::string::size_type v120 = HIBYTE(v205.__r_.__value_.__r.__words[2]);
  if ((v205.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v120 = v205.__r_.__value_.__l.__size_;
  }
  if (v120)
  {
    memset(&v216, 0, sizeof(v216));
    long long v121 = (CSIPacketAddress *)CSIPacketAddress::CSIPacketAddress();
    if (CSIPacketAddress::isZeroIP(v121)) {
      sub_100093B44((std::string *)&v209[72], &v205);
    }
    else {
      sub_1008B7C40((CSIPacketAddress *)&v209[104], (const CSIPacketAddress *)&v216);
    }
  }
  if (v118)
  {
    WORD2(v210) = v118;
    BYTE6(v210) = 1;
  }
  if (HIDWORD(v193))
  {
    HIWORD(v210) = WORD2(v193);
    LOBYTE(v211) = 1;
  }
  if (v195)
  {
    if (!BYTE8(v211)) {
      BYTE8(v211) = 1;
    }
    DWORD1(v211) = v195;
  }
  std::string::size_type v123 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v123 = __p.__r_.__value_.__l.__size_;
  }
  if (v123)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B0E100, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_101B0E100))
    {
      sub_100058DB0(&qword_101B0E118, "com.apple.networkrelay.tethering.");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_101B0E118, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101B0E100);
      int v116 = v199;
    }
    std::string::size_type v123 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v123 = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v124 = byte_101B0E12F < 0 ? qword_101B0E120 : byte_101B0E12F;
    if (v123 > v124)
    {
      std::string::basic_string(&v216, &__p, 0, v124, (std::allocator<char> *)&v206);
      std::string::size_type v123 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
      if ((v216.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v125 = HIBYTE(v216.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v125 = v216.__r_.__value_.__l.__size_;
      }
      uint64_t v126 = qword_101B0E120;
      if (byte_101B0E12F >= 0) {
        uint64_t v126 = byte_101B0E12F;
      }
      if (v125 == v126)
      {
        if (byte_101B0E12F >= 0) {
          id v127 = &qword_101B0E118;
        }
        else {
          id v127 = (uint64_t *)qword_101B0E118;
        }
        if ((*((unsigned char *)&v216.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          long long v132 = (void *)v216.__r_.__value_.__r.__words[0];
          int v133 = memcmp(v216.__r_.__value_.__l.__data_, v127, v216.__r_.__value_.__l.__size_);
          operator delete(v132);
          if (v133) {
            goto LABEL_172;
          }
        }
        else if (*((unsigned char *)&v216.__r_.__value_.__s + 23))
        {
          uint64_t v128 = 0;
          std::string::size_type v123 = HIBYTE(v216.__r_.__value_.__r.__words[2]) - 1;
          do
          {
            int v129 = v216.__r_.__value_.__s.__data_[v128];
            int v130 = *((unsigned __int8 *)v127 + v128);
          }
          while (v129 == v130 && v123 != v128++);
          if (v129 != v130) {
            goto LABEL_172;
          }
        }
        *(_WORD *)&v209[64] = 257;
        sub_100093B44((std::string *)&v209[32], &__p);
        goto LABEL_172;
      }
      if ((*((unsigned char *)&v216.__r_.__value_.__s + 23) & 0x80) != 0) {
        operator delete(v216.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_172:
  long long v134 = (std::mutex *)Registry::getServiceMap((uint64_t *)v123, *(Registry **)(v2 + 72));
  char v135 = v134;
  if ((v136 & 0x8000000000000000) != 0)
  {
    char v137 = (unsigned __int8 *)(v136 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v138 = 5381;
    do
    {
      std::string::size_type v136 = v138;
      unsigned int v139 = *v137++;
      uint64_t v138 = (33 * v138) ^ v139;
    }
    while (v139);
  }
  std::mutex::lock(v134);
  v216.__r_.__value_.__r.__words[0] = v136;
  long long v140 = sub_10004D37C(&v135[1].__m_.__sig, (unint64_t *)&v216);
  if (v140)
  {
    uint64_t v142 = v140[3];
    char v141 = (std::__shared_weak_count *)v140[4];
    if (v141)
    {
      atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v135);
      atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v141);
      char v143 = 0;
      if (!v142) {
        goto LABEL_184;
      }
      goto LABEL_181;
    }
  }
  else
  {
    uint64_t v142 = 0;
  }
  std::mutex::unlock(v135);
  char v141 = 0;
  char v143 = 1;
  if (!v142) {
    goto LABEL_184;
  }
LABEL_181:
  uint64_t v144 = (*(uint64_t (**)(uint64_t))(*(void *)v142 + 872))(v142);
  if (v144)
  {
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v144 + 16))(v144, buf);
    int v122 = 0;
    if ((v143 & 1) == 0) {
      goto LABEL_185;
    }
    goto LABEL_186;
  }
LABEL_184:
  int v122 = 1;
  if ((v143 & 1) == 0) {
LABEL_185:
  }
    sub_10004D2C8(v141);
LABEL_186:
  TrafficDescriptor::~TrafficDescriptor((TrafficDescriptor *)buf);
LABEL_187:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v205.__r_.__value_.__l.__data_);
  }

  if (((*(unsigned char *)(a1 + 48) != 0) & ~v122) == 0)
  {
    uint64_t v3 = *(void **)(v2 + 120);
    if (!v3) {
      goto LABEL_196;
    }
    goto LABEL_195;
  }
}

void sub_1008B76AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,void *a32,void *a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,void *a56)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a54 < 0) {
    operator delete(a49);
  }

  _Unwind_Resume(a1);
}

uint64_t *sub_1008B7BDC(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    sub_10010C0E0(v2, *(void **)(v2 + 8));
    operator delete();
  }
  return result;
}

CSIPacketAddress *sub_1008B7C40(CSIPacketAddress *this, const CSIPacketAddress *a2)
{
  if (*((unsigned char *)this + 24))
  {
    CSIPacketAddress::operator=();
  }
  else
  {
    CSIPacketAddress::CSIPacketAddress(this, a2);
    *((unsigned char *)this + 24) = 1;
  }
  return this;
}

void sub_1008B7C88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1008B5D58(v2, 0);
  if (*(void *)(v2 + 120))
  {
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:NWNetworkAgentStartOptionClientUUID];
      uint64_t v5 = sub_100200FB4((id *)(v2 + 64));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void **)(a1 + 32);
        int v16 = 136315394;
        std::string::size_type v17 = "unassertDataAgentWithOptions_block_invoke";
        __int16 v18 = 2112;
        uint64_t v19 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: unassert options %@", (uint8_t *)&v16, 0x16u);
      }

      if (v4)
      {
        uint64_t v7 = +[NWPath pathForClientID:v4];
        uint64_t v8 = sub_100200FB4((id *)(v2 + 64));
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = (void *)(v2 + 144);
          if (*(char *)(v2 + 167) < 0) {
            int v9 = (void *)*v9;
          }
          uint64_t v10 = asStringBool(*(unsigned char *)(a1 + 48));
          int v16 = 136316162;
          std::string::size_type v17 = "unassertDataAgentWithOptions_block_invoke";
          __int16 v18 = 2082;
          uint64_t v19 = v9;
          __int16 v20 = 2080;
          uint64_t v21 = v10;
          __int16 v22 = 2112;
          id v23 = v4;
          __int16 v24 = 2112;
          BOOL v25 = v7;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: unassert NWAgent %{public}s slice %s, client UUID %@, path %@", (uint8_t *)&v16, 0x34u);
        }

        uint64_t v11 = sub_100200FB4((id *)(v2 + 64));
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v12 = (void *)(v2 + 144);
          if (*(char *)(v2 + 167) < 0) {
            BOOL v12 = (void *)*v12;
          }
          uint64_t v13 = asStringBool(*(unsigned char *)(a1 + 48));
          unsigned int v14 = [v7 privateDescription];
          int v16 = 136315906;
          std::string::size_type v17 = "unassertDataAgentWithOptions_block_invoke";
          __int16 v18 = 2082;
          uint64_t v19 = v12;
          __int16 v20 = 2080;
          uint64_t v21 = v13;
          __int16 v22 = 2112;
          id v23 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s: unassert NWAgent %{public}s slice %s, description %@", (uint8_t *)&v16, 0x2Au);
        }
      }
    }
  }
  else
  {
    unint64_t v15 = sub_100200FB4((id *)(v2 + 64));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v16) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "NWAgent: unassert NWNetworkAgent reference is empty, somehow", (uint8_t *)&v16, 2u);
    }
  }
}

void sub_1008B7F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DataConnectionAgent::handleStartFailure(DataConnectionAgent *this)
{
  if (!*((void *)this + 14))
  {
    uint64_t v4 = sub_100200FB4((id *)this + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (void *)((char *)this + 144);
      if (*((char *)this + 167) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      int v11 = 136315394;
      BOOL v12 = "handleStartFailure";
      __int16 v13 = 2082;
      unsigned int v14 = v8;
      uint64_t v7 = "#I %s: NWAgent %{public}s !fRegistration";
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  uint64_t v2 = (void *)*((void *)this + 15);
  if (!v2)
  {
    uint64_t v4 = sub_100200FB4((id *)this + 8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = (void *)((char *)this + 144);
      if (*((char *)this + 167) < 0) {
        int v9 = (void *)*v9;
      }
      int v11 = 136315394;
      BOOL v12 = "handleStartFailure";
      __int16 v13 = 2082;
      unsigned int v14 = v9;
      uint64_t v7 = "#I %s: NWAgent %{public}s  !fAgent";
      goto LABEL_16;
    }
LABEL_17:

    return;
  }
  unsigned __int8 v3 = [v2 isActive];
  uint64_t v4 = sub_100200FB4((id *)this + 8);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = (void *)((char *)this + 144);
      if (*((char *)this + 167) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      int v11 = 136315394;
      BOOL v12 = "handleStartFailure";
      __int16 v13 = 2082;
      unsigned int v14 = v6;
      uint64_t v7 = "#I %s: NWAgent %{public}s, we don't post failures in active state";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, 0x16u);
      goto LABEL_17;
    }
    goto LABEL_17;
  }
  if (v5)
  {
    uint64_t v10 = (void *)((char *)this + 144);
    if (*((char *)this + 167) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    int v11 = 136315394;
    BOOL v12 = "handleStartFailure";
    __int16 v13 = 2082;
    unsigned int v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Updating NWAgent %{public}s to notify failure to start", (uint8_t *)&v11, 0x16u);
  }

  DataConnectionAgent::updateAgent(this, 0);
  if (*((unsigned char *)this + 264))
  {
    *((unsigned char *)this + 264) = 0;
    *((void *)this + 30) = *(void *)((char *)this + 252);
    *((_DWORD *)this + 62) = *((_DWORD *)this + 65);
  }
}

void DataConnectionAgent::updateAgent(DataConnectionAgent *this, int a2)
{
  uint64_t v4 = (void *)*((void *)this + 14);
  if (v4 && [v4 isRegistered])
  {
    BOOL v5 = sub_100200FB4((id *)this + 8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (void *)((char *)this + 144);
      if (*((char *)this + 167) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)__int16 v33 = "updateAgent";
      *(_WORD *)&long long v33[8] = 2082;
      BOOL v34 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Updating NWAgent %{public}s", buf, 0x16u);
    }

    uint64_t v7 = sub_100200FB4((id *)this + 8);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = [*((id *)this + 15) isNetworkProvider];
      unsigned int v30 = [*((id *)this + 15) isUserActivated];
      unsigned int v29 = [*((id *)this + 15) isKernelActivated];
      int v9 = [*((id *)this + 15) agentUUID];
      id v27 = [v9 description];
      int v28 = v9;
      id v10 = [v27 UTF8String];
      id v11 = [*((id *)this + 15) agentDescription];
      id v12 = [v11 UTF8String];
      unsigned int v13 = [*((id *)this + 15) isActive];
      unsigned int v14 = [*((id *)this + 15) isVoluntary];
      unsigned int v15 = [*((id *)this + 15) isSpecificUseOnly];
      int v16 = *((_DWORD *)this + 62);
      int v17 = *((char *)this + 242);
      int v18 = *((char *)this + 241);
      int v19 = *((char *)this + 240);
      int v20 = *((char *)this + 243);
      int v21 = *((char *)this + 244);
      *(_DWORD *)long long buf = 67112450;
      *(_DWORD *)__int16 v33 = v8;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v30;
      LOWORD(v34) = 1024;
      *(_DWORD *)((char *)&v34 + 2) = v29;
      HIWORD(v34) = 2082;
      id v35 = v10;
      __int16 v36 = 2080;
      id v37 = v12;
      __int16 v38 = 1024;
      unsigned int v39 = v13;
      __int16 v40 = 1024;
      unsigned int v41 = v14;
      __int16 v42 = 1024;
      unsigned int v43 = v15;
      __int16 v44 = 1024;
      int v45 = v16;
      __int16 v46 = 1024;
      int v47 = v17;
      __int16 v48 = 1024;
      int v49 = v18;
      __int16 v50 = 1024;
      int v51 = v19;
      __int16 v52 = 1024;
      int v53 = v20;
      __int16 v54 = 1024;
      int v55 = v21;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I NWAgent: agent flags networkprovider:%d useractivated:%d kernelactivated:%d uuid:%{public}s desc:%s active:%d, voluntary:%d, specificuse:%d\n Agent data type:%d, dch:%d, inhome:%d, reg:%d, utbf:%d ho:%d", buf, 0x5Eu);
    }
    unsigned __int8 v22 = [*((id *)this + 14) updateNetworkAgent:*((void *)this + 15)];
    if ((v22 & 1) == 0)
    {
      id v23 = sub_100200FB4((id *)this + 8);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v24 = (void *)((char *)this + 144);
        if (*((char *)this + 167) < 0) {
          __int16 v24 = (void *)*v24;
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)__int16 v33 = "updateAgent";
        *(_WORD *)&long long v33[8] = 2082;
        BOOL v34 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I %s: fAgent.change Failed to update NWAgent %{public}s", buf, 0x16u);
      }

      sub_1008B85F8((uint64_t)this, a2);
    }
  }
  else
  {
    BOOL v25 = sub_100200FB4((id *)this + 8);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v26 = (void *)((char *)this + 144);
      if (*((char *)this + 167) < 0) {
        __int16 v26 = (void *)*v26;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)__int16 v33 = "updateAgent";
      *(_WORD *)&long long v33[8] = 2082;
      BOOL v34 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s is not ready to be updated", buf, 0x16u);
    }
  }
}

void sub_1008B85AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void non-virtual thunk to'DataConnectionAgent::handleStartFailure(DataConnectionAgent *this)
{
}

void sub_1008B85F8(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 169) = 1;
  uint64_t v4 = sub_100200FB4((id *)(a1 + 64));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      uint64_t v6 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      int v8 = 136315394;
      int v9 = "handleFailure";
      __int16 v10 = 2082;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s, Failed to recover, just giving up", (uint8_t *)&v8, 0x16u);
    }
  }
  else
  {
    if (v5)
    {
      uint64_t v7 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        uint64_t v7 = (void *)*v7;
      }
      int v8 = 136315394;
      int v9 = "handleFailure";
      __int16 v10 = 2082;
      id v11 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s, Failure detected, trying to recover", (uint8_t *)&v8, 0x16u);
    }

    sub_1008B400C(a1);
  }
}

void DataConnectionAgent::updateAgentState(uint64_t a1, BOOL a2, int a3, uint64_t a4)
{
}

void DataConnectionAgent::updateAgentState(uint64_t a1, BOOL a2, int a3, uint64_t a4, BOOL a5, BOOL a6)
{
  memset(&__s1, 0, sizeof(__s1));
  if (*(char *)(a4 + 23) < 0) {
    sub_10004FC84(&__s1, *(void **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __s1 = *(std::string *)a4;
  }
  if (a3)
  {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __s1.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      id v11 = *(void **)(a1 + 120);
      if (v11) {
        [v11 connectionType];
      }
      ActiveFakePositiveInterfaceName = (char *)getActiveFakePositiveInterfaceName();
      sub_10003ED78(&__s1, ActiveFakePositiveInterfaceName);
    }
  }
  if (!*(void *)(a1 + 112))
  {
    int v17 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        int v18 = (void *)*v18;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
      int v19 = "#I %s: NWAgent %{public}s !fRegistration";
      goto LABEL_28;
    }
LABEL_29:

    goto LABEL_290;
  }
  unsigned int v13 = *(void **)(a1 + 120);
  if (!v13)
  {
    int v17 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        int v20 = (void *)*v20;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v20;
      int v19 = "#I %s: NWAgent %{public}s  !fAgent";
LABEL_28:
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v19, (uint8_t *)&buf, 0x16u);
      goto LABEL_29;
    }
    goto LABEL_29;
  }
  if ([v13 isActive] == a2)
  {
    int v21 = 0;
    goto LABEL_92;
  }
  if (!a2)
  {
    *(void *)(a1 + 288) = 0;
    unsigned int v14 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v15 = *(void *)(a1 + 288);
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I NWAgent: fSliceAssertCount: %lu (inactive)", (uint8_t *)&buf, 0xCu);
    }
  }
  (*(void (**)(uint64_t, BOOL))(*(void *)a1 + 200))(a1, a2);
  int v16 = *(void **)(a1 + 120);
  if (v16) {
    unsigned __int8 v150 = [v16 isActive];
  }
  else {
    unsigned __int8 v150 = 0;
  }
  unsigned __int8 v22 = sub_100200FB4((id *)(a1 + 64));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v23 = *(void *)(a1 + 96);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v23;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    LODWORD(v158) = a2;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: setting agent %s active:%d ", (uint8_t *)&buf, 0x1Cu);
  }

  if (*(unsigned char *)(a1 + 264))
  {
    *(unsigned char *)(a1 + 264) = 0;
    *(void *)(a1 + 240) = *(void *)(a1 + 252);
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a1 + 260);
  }
  __int16 v24 = *(void **)(a1 + 120);
  if (!v24) {
    goto LABEL_86;
  }
  [v24 setActive:a2];
  uint64_t v25 = *(void *)(a1 + 200);
  if (v25 && *(_DWORD *)(a1 + 220) == 17)
  {
    uint64_t v26 = *(void *)(a1 + 272);
    if (v26
      && (v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 88))(v26), uint64_t v25 = *(void *)(a1 + 200), !v27))
    {
      (*(void (**)(void, BOOL, std::string *))(*(void *)v25 + 96))(*(void *)(a1 + 200), a2, &__s1);
    }
    else
    {
      sub_100058DB0(&buf, "");
      (*(void (**)(uint64_t, void, std::string *))(*(void *)v25 + 96))(v25, 0, &buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
  }
  uint64_t v28 = *(void *)(a1 + 312);
  if (v28 && *(void *)(v28 + 16))
  {
    unsigned int v29 = *(void **)(a1 + 120);
    if (v29)
    {
      if ([v29 isActive] && *(void *)(a1 + 200))
      {
        int v30 = *(unsigned __int8 *)(a1 + 170);
        int v31 = sub_100200FB4((id *)(a1 + 64));
        BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        if (v30)
        {
          if (v32)
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"setAgentActive";
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: processing traffic descriptors", (uint8_t *)&buf, 0xCu);
          }

          BOOL v34 = *(void **)(a1 + 312);
          id v37 = (void *)*v34;
          id v35 = v34 + 1;
          __int16 v36 = v37;
          if (v37 != v35)
          {
            *(void *)&long long v33 = 136315394;
            long long v149 = v33;
            do
            {
              __int16 v38 = sub_100200FB4((id *)(a1 + 64));
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                TrafficDescriptor::toString((uint64_t *)&buf, (TrafficDescriptor *)(v36 + 4));
                p_std::string buf = &buf;
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)long long v153 = v149;
                uint64_t v154 = "setAgentActive";
                __int16 v155 = 2080;
                uint64_t v156 = p_buf;
                _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: forwarding traffic descriptor: %s", v153, 0x16u);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
              }

              int v40 = *(_DWORD *)(a1 + 300);
              unsigned int v41 = *(_DWORD *)(a1 + 296);
              if (v41) {
                int v42 = *(_DWORD *)(a1 + 296);
              }
              else {
                int v42 = -1;
              }
              unsigned int v43 = v42 & v40;
              if (v40) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v41;
              }
              (*(void (**)(void, void *, uint64_t, uint64_t))(**(void **)(a1 + 200) + 88))(*(void *)(a1 + 200), v36 + 4, v44, a1 + 176);
              int v45 = (void *)v36[1];
              if (v45)
              {
                do
                {
                  __int16 v46 = v45;
                  int v45 = (void *)*v45;
                }
                while (v45);
              }
              else
              {
                do
                {
                  __int16 v46 = (void *)v36[2];
                  BOOL v47 = *v46 == (void)v36;
                  __int16 v36 = v46;
                }
                while (!v47);
              }
              __int16 v36 = v46;
            }
            while (v46 != v35);
          }
          __int16 v48 = sub_100200FB4((id *)(a1 + 64));
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"setAgentActive";
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: Cleaning traffic descriptors", (uint8_t *)&buf, 0xCu);
          }

          uint64_t v49 = *(void *)(a1 + 312);
          sub_10005D9E0(v49, *(void **)(v49 + 8));
          *(void *)uint64_t v49 = v49 + 8;
          *(void *)(v49 + 16) = 0;
          *(void *)(v49 + 8) = 0;
          goto LABEL_83;
        }
        if (v32)
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"setAgentActive";
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: not processing traffic descriptors, path is not satisfied yet", (uint8_t *)&buf, 0xCu);
        }
LABEL_82:

        goto LABEL_83;
      }
      __int16 v50 = *(void **)(a1 + 120);
      if (v50 && ([v50 isActive] & 1) != 0)
      {
        if (*(void *)(a1 + 200)) {
          goto LABEL_83;
        }
        int v31 = sub_100200FB4((id *)(a1 + 64));
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"setAgentActive";
          _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "%s: NWAgent: not processing traffic descriptors: no policy", (uint8_t *)&buf, 0xCu);
        }
        goto LABEL_82;
      }
    }
    int v31 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"setAgentActive";
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: not processing traffic descriptors: agent is not active", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_82;
  }
LABEL_83:
  int v51 = *(void **)(a1 + 120);
  if (v51 && [v51 isActive] && !*(unsigned char *)(a1 + 170))
  {
    int v21 = 0;
    goto LABEL_87;
  }
LABEL_86:
  int v21 = 1;
LABEL_87:
  __int16 v52 = sub_100200FB4((id *)(a1 + 64));
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    int v53 = (void *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0) {
      int v53 = (void *)*v53;
    }
    std::string::size_type v54 = asStringBool(v150);
    uint64_t v55 = asStringBool(a2);
    uint64_t v56 = asStringBool(*(unsigned char *)(a1 + 170));
    uint64_t v57 = asStringBool(v21);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136447234;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v53;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v54;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    unsigned __int8 v158 = (void *)v55;
    __int16 v159 = 2080;
    uint64_t v160 = v56;
    __int16 v161 = 2080;
    uint64_t v162 = v57;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#I NWAgent %{public}s AgentActive %s->%s fPathSatisfied: %s willUpdate: %s", (uint8_t *)&buf, 0x34u);
  }

LABEL_92:
  if (*(unsigned __int8 *)(a1 + 168) != a3)
  {
    unint64_t v58 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v59 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        uint64_t v59 = (void *)*v59;
      }
      uint64_t v60 = asStringBool(*(unsigned char *)(a1 + 168));
      uint64_t v61 = asStringBool(a3);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v59;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      unsigned __int8 v158 = (void *)v60;
      __int16 v159 = 2080;
      uint64_t v160 = v61;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s fAvailable %s->%s", (uint8_t *)&buf, 0x2Au);
    }

    *(unsigned char *)(a1 + 168) = a3;
  }
  if ((a3 & 1) != 0
    || (uint64_t v62 = *(capabilities::ct **)(a1 + 120)) != 0
    && (uint64_t v62 = (capabilities::ct *)[(capabilities::ct *)v62 isActive], v62))
  {
    if (sub_1008B58AC(a1)) {
      v21 |= sub_1008BAD68(a1, 1);
    }
    if (!objc_msgSend(*(id *)(a1 + 112), "isRegistered", v149))
    {
      int v21 = 0;
      int v75 = 1;
      goto LABEL_188;
    }
    if (!a6)
    {
      uint64_t v63 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v64 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v64 = __s1.__r_.__value_.__l.__size_;
      }
      uint64_t v65 = *(unsigned __int8 *)(a1 + 199);
      int v66 = (char)v65;
      if ((v65 & 0x80u) != 0) {
        uint64_t v65 = *(void *)(a1 + 184);
      }
      if (v64 == v65)
      {
        if (v66 >= 0) {
          char v67 = (unsigned __int8 *)(a1 + 176);
        }
        else {
          char v67 = *(unsigned __int8 **)(a1 + 176);
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v67, __s1.__r_.__value_.__l.__size_)) {
            goto LABEL_272;
          }
        }
        else
        {
          if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
            goto LABEL_272;
          }
          p_s1 = &__s1;
          while (p_s1->__r_.__value_.__s.__data_[0] == *v67)
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            ++v67;
            if (!--v63) {
              goto LABEL_272;
            }
          }
        }
      }
    }
    __int16 v81 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
    {
      char v82 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        char v82 = (void *)*v82;
      }
      __int16 v83 = (void *)(a1 + 176);
      if (*(char *)(a1 + 199) < 0) {
        __int16 v83 = (void *)*v83;
      }
      std::string::size_type v84 = &__s1;
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v84 = (std::string *)__s1.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v82;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      unsigned __int8 v158 = v83;
      __int16 v159 = 2080;
      uint64_t v160 = (uint64_t)v84;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s has to be registered; Already registered but interface changed [%s]->[%s]",
        (uint8_t *)&buf,
        0x2Au);
    }
  }
  else
  {
    if ((capabilities::ct::supportsIPCInterfaceConfig(v62) & a6) != 1) {
      goto LABEL_134;
    }
    std::string::size_type v69 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v69 = __s1.__r_.__value_.__l.__size_;
    }
    if (v69)
    {
      long long v70 = sub_100200FB4((id *)(a1 + 64));
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v71 = (void *)(a1 + 144);
        if (*(char *)(a1 + 167) < 0) {
          __int16 v71 = (void *)*v71;
        }
        unint64_t v72 = (void *)(a1 + 176);
        if (*(char *)(a1 + 199) < 0) {
          unint64_t v72 = (void *)*v72;
        }
        char v73 = &__s1;
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v73 = (std::string *)__s1.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v71;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        unsigned __int8 v158 = v72;
        __int16 v159 = 2080;
        uint64_t v160 = (uint64_t)v73;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s: Already registered but interface changed [%s]->[%s]", (uint8_t *)&buf, 0x2Au);
      }

      int v74 = 1;
    }
    else
    {
LABEL_134:
      int v74 = 0;
    }
    if (objc_msgSend(*(id *)(a1 + 112), "isRegistered", v149))
    {
      if (sub_1008B58AC(a1))
      {
        int v21 = sub_1008BAD68(a1, 0);
        if (!v74) {
          goto LABEL_272;
        }
        goto LABEL_164;
      }
      BOOL v76 = sub_100200FB4((id *)(a1 + 64));
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v77 = (void *)(a1 + 144);
        if (*(char *)(a1 + 167) < 0) {
          __int16 v77 = (void *)*v77;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v77;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#I %s: Unregistering NWAgent %{public}s", (uint8_t *)&buf, 0x16u);
      }

      if (([*(id *)(a1 + 112) unregisterNetworkAgent] & 1) == 0)
      {
        uint64_t v78 = sub_100200FB4((id *)(a1 + 64));
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v79 = (void *)(a1 + 144);
          if (*(char *)(a1 + 167) < 0) {
            BOOL v79 = (void *)*v79;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v79;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "#E %s: Failed to unregister NWAgent %{public}s", (uint8_t *)&buf, 0x16u);
        }

        uint64_t v80 = *(void **)(a1 + 120);
        if (!v80 || ([v80 isActive] & 1) == 0) {
          sub_1008B85F8(a1, a5);
        }
      }
    }
    int v21 = 0;
    if (!v74) {
      goto LABEL_272;
    }
  }
LABEL_164:
  if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 199)) {
      goto LABEL_187;
    }
LABEL_168:
    __int16 v85 = sub_100200FB4((id *)(a1 + 64));
    unint64_t v86 = (uint64_t *)(a1 + 176);
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v87 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        __int16 v87 = (void *)*v87;
      }
      BOOL v88 = (void *)(a1 + 176);
      if (*(char *)(a1 + 199) < 0) {
        BOOL v88 = (void *)*v86;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v87;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      unsigned __int8 v158 = v88;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "#I %s: Removing NWAgent %{public}s from old interface [%s]", (uint8_t *)&buf, 0x20u);
    }

    id v89 = objc_alloc((Class)NSString);
    uint64_t v90 = a1 + 176;
    if (*(char *)(a1 + 199) < 0) {
      uint64_t v90 = *v86;
    }
    id v91 = [v89 initWithUTF8String:v90];
    if (([*(id *)(a1 + 112) removeNetworkAgentFromInterfaceNamed:v91] & 1) == 0)
    {
      uint64_t v92 = sub_100200FB4((id *)(a1 + 64));
      if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v93 = (void *)(a1 + 144);
        if (*(char *)(a1 + 167) < 0) {
          __int16 v93 = (void *)*v93;
        }
        if (*(char *)(a1 + 199) < 0) {
          unint64_t v86 = (uint64_t *)*v86;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v93;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        unsigned __int8 v158 = v86;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "#E %s: Failed to remove NWAgent %{public}s from network Interface [%s]", (uint8_t *)&buf, 0x20u);
      }

      unsigned int v94 = *(void **)(a1 + 120);
      if (!v94 || ([v94 isActive] & 1) == 0) {
        sub_1008B85F8(a1, a5);
      }
    }

    goto LABEL_187;
  }
  if (*(void *)(a1 + 184)) {
    goto LABEL_168;
  }
LABEL_187:
  int v75 = 0;
LABEL_188:
  __int16 v95 = (const void **)(a1 + 176);
  uint64_t v96 = *(unsigned __int8 *)(a1 + 199);
  if ((v96 & 0x80u) == 0) {
    uint64_t v97 = *(unsigned __int8 *)(a1 + 199);
  }
  else {
    uint64_t v97 = *(void *)(a1 + 184);
  }
  std::string::size_type v98 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v98 = __s1.__r_.__value_.__l.__size_;
  }
  if (v97 != v98) {
    goto LABEL_205;
  }
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v99 = &__s1;
  }
  else {
    int v99 = (std::string *)__s1.__r_.__value_.__r.__words[0];
  }
  if ((v96 & 0x80) != 0)
  {
    if (memcmp(*v95, v99, *(void *)(a1 + 184))) {
      goto LABEL_205;
    }
  }
  else if (*(unsigned char *)(a1 + 199))
  {
    id v100 = (unsigned __int8 *)(a1 + 176);
    while (*v100 == v99->__r_.__value_.__s.__data_[0])
    {
      ++v100;
      int v99 = (std::string *)((char *)v99 + 1);
      if (!--v96) {
        goto LABEL_204;
      }
    }
    goto LABEL_205;
  }
LABEL_204:
  if (!a6) {
    goto LABEL_235;
  }
LABEL_205:
  std::string v101 = sub_100200FB4((id *)(a1 + 64));
  if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v102 = (void *)(a1 + 144);
    BOOL v103 = a6;
    if (*(char *)(a1 + 167) < 0) {
      uint64_t v102 = (void *)*v102;
    }
    int v104 = v21;
    uint64_t v105 = (void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      uint64_t v105 = *v95;
    }
    int v106 = SHIBYTE(__s1.__r_.__value_.__r.__words[2]);
    std::string::size_type v107 = __s1.__r_.__value_.__r.__words[0];
    uint64_t v108 = asStringBool(v103);
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"setInterfaceName";
    id v109 = &__s1;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    if (v106 < 0) {
      id v109 = (std::string *)v107;
    }
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v102;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    unsigned __int8 v158 = v105;
    __int16 v159 = 2080;
    uint64_t v160 = (uint64_t)v109;
    __int16 v161 = 2080;
    uint64_t v162 = v108;
    _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent %{public}s: interface changed from %s to %s (forced %s)", (uint8_t *)&buf, 0x34u);
    int v21 = v104;
  }

  std::string::operator=((std::string *)(a1 + 176), &__s1);
  sub_1008BB4CC(a1, 0);
  if (*(void *)(a1 + 224))
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
    std::string::size_type v111 = ServiceMap;
    if ((v112 & 0x8000000000000000) != 0)
    {
      long long v113 = (unsigned __int8 *)(v112 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v114 = 5381;
      do
      {
        std::string::size_type v112 = v114;
        unsigned int v115 = *v113++;
        uint64_t v114 = (33 * v114) ^ v115;
      }
      while (v115);
    }
    std::mutex::lock(ServiceMap);
    buf.__r_.__value_.__r.__words[0] = v112;
    int v116 = sub_10004D37C(&v111[1].__m_.__sig, (unint64_t *)&buf);
    if (v116)
    {
      uint64_t v118 = v116[3];
      std::string::size_type v117 = (std::__shared_weak_count *)v116[4];
      if (v117)
      {
        atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v111);
        atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v117);
        char v119 = 0;
        if (!v118)
        {
LABEL_233:
          if ((v119 & 1) == 0) {
            sub_10004D2C8(v117);
          }
          goto LABEL_235;
        }
LABEL_226:
        long long v121 = sub_100200FB4((id *)(a1 + 64));
        if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"setInterfaceName";
          _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: fInterfaceObserver updating interface", (uint8_t *)&buf, 0xCu);
        }

        int v122 = *(void **)(a1 + 224);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          sub_10004FC84(&buf, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
        }
        else {
          std::string buf = __s1;
        }
        [v122 doUpdateInterface:&buf];
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        goto LABEL_233;
      }
    }
    else
    {
      uint64_t v118 = 0;
    }
    std::mutex::unlock(v111);
    std::string::size_type v117 = 0;
    char v119 = 1;
    if (!v118) {
      goto LABEL_233;
    }
    goto LABEL_226;
  }
  std::string::size_type v120 = sub_100200FB4((id *)(a1 + 64));
  if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"setInterfaceName";
    _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "#E %s: NWAgent: fInterfaceObserver is empty!", (uint8_t *)&buf, 0xCu);
  }

LABEL_235:
  if (v75)
  {
    std::string::size_type v123 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v124 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        std::string::size_type v124 = (void *)*v124;
      }
      std::string::size_type v125 = (void *)(a1 + 176);
      if (*(char *)(a1 + 199) < 0) {
        std::string::size_type v125 = *v95;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v124;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      unsigned __int8 v158 = v125;
      _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "#I %s: Registering NWAgent %{public}s, interface [%s]", (uint8_t *)&buf, 0x20u);
    }

    if (([*(id *)(a1 + 112) registerNetworkAgent:*(void *)(a1 + 120)] & 1) == 0)
    {
      uint64_t v126 = sub_100200FB4((id *)(a1 + 64));
      if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
      {
        id v127 = (void *)(a1 + 144);
        if (*(char *)(a1 + 167) < 0) {
          id v127 = (void *)*v127;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v127;
        _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "#I %s: fAgent.change Failed to register NWAgent %{public}s", (uint8_t *)&buf, 0x16u);
      }

      uint64_t v128 = *(void **)(a1 + 120);
      if (!v128 || ![v128 isActive])
      {
        sub_1008B85F8(a1, a5);
        goto LABEL_290;
      }
    }
  }
  if (*(char *)(a1 + 199) < 0)
  {
    if (!*(void *)(a1 + 184)) {
      goto LABEL_272;
    }
  }
  else if (!*(unsigned char *)(a1 + 199))
  {
    goto LABEL_272;
  }
  if (sub_1008BB038(a1))
  {
    int v129 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      int v130 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        int v130 = (void *)*v130;
      }
      if (*(char *)(a1 + 199) < 0) {
        __int16 v95 = (const void **)*v95;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v130;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      unsigned __int8 v158 = v95;
      _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "#I %s: Not adding Slice-capable NWAgent %{public}s to interface [%s]", (uint8_t *)&buf, 0x20u);
    }
  }
  else
  {
    v131 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
    {
      long long v132 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        long long v132 = (void *)*v132;
      }
      int v133 = (void *)(a1 + 176);
      if (*(char *)(a1 + 199) < 0) {
        int v133 = *v95;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v132;
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      unsigned __int8 v158 = v133;
      _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_DEFAULT, "#I %s: Adding NWAgent %{public}s to interface [%s]", (uint8_t *)&buf, 0x20u);
    }

    id v134 = objc_alloc((Class)NSString);
    char v135 = (const void *)(a1 + 176);
    if (*(char *)(a1 + 199) < 0) {
      char v135 = *v95;
    }
    int v129 = [v134 initWithUTF8String:v135];
    if (([*(id *)(a1 + 112) addNetworkAgentToInterfaceNamed:v129] & 1) == 0)
    {
      std::string::size_type v136 = sub_100200FB4((id *)(a1 + 64));
      if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
      {
        uint64_t v148 = (void *)(a1 + 144);
        if (*(char *)(a1 + 167) < 0) {
          uint64_t v148 = (void *)*v148;
        }
        if (*(char *)(a1 + 199) < 0) {
          __int16 v95 = (const void **)*v95;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"updateAgentState";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v148;
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        unsigned __int8 v158 = v95;
        _os_log_error_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_ERROR, "%s: Failed to add NWAgent %{public}s to network Interface [%s]", (uint8_t *)&buf, 0x20u);
      }
    }
  }

LABEL_272:
  [*(id *)(a1 + 120) connectionType];
  if (isSlice())
  {
    char v137 = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
    uint64_t v138 = v137;
    if ((v139 & 0x8000000000000000) != 0)
    {
      long long v140 = (unsigned __int8 *)(v139 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v141 = 5381;
      do
      {
        std::string::size_type v139 = v141;
        unsigned int v142 = *v140++;
        uint64_t v141 = (33 * v141) ^ v142;
      }
      while (v142);
    }
    std::mutex::lock(v137);
    buf.__r_.__value_.__r.__words[0] = v139;
    char v143 = sub_10004D37C(&v138[1].__m_.__sig, (unint64_t *)&buf);
    if (v143)
    {
      uint64_t v145 = v143[3];
      uint64_t v144 = (std::__shared_weak_count *)v143[4];
      if (v144)
      {
        atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v138);
        atomic_fetch_add_explicit(&v144->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v144);
        char v146 = 0;
        if (!v145)
        {
LABEL_284:
          if ((v146 & 1) == 0) {
            sub_10004D2C8(v144);
          }
          goto LABEL_286;
        }
LABEL_282:
        uint64_t v147 = (*(uint64_t (**)(uint64_t))(*(void *)v145 + 872))(v145);
        if (v147) {
          (*(void (**)(uint64_t))(*(void *)v147 + 160))(v147);
        }
        goto LABEL_284;
      }
    }
    else
    {
      uint64_t v145 = 0;
    }
    std::mutex::unlock(v138);
    uint64_t v144 = 0;
    char v146 = 1;
    if (!v145) {
      goto LABEL_284;
    }
    goto LABEL_282;
  }
LABEL_286:
  if (v21) {
    DataConnectionAgent::updateAgent((DataConnectionAgent *)a1, a5);
  }
  if (*(unsigned char *)(a1 + 216)) {
    DataConnectionAgent::setPolicy(a1, 0, (uint64_t)"update agent state", *(_DWORD *)(a1 + 296));
  }
LABEL_290:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_1008B9D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'DataConnectionAgent::updateAgentState(uint64_t a1, BOOL a2, int a3, uint64_t a4)
{
}

void DataConnectionAgent::forcedInterfaceNameUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 120);
  if (v4) {
    id v5 = [v4 isActive];
  }
  else {
    id v5 = 0;
  }
  int v6 = *(unsigned __int8 *)(a1 + 168);

  DataConnectionAgent::updateAgentState(a1, (BOOL)v5, v6, a2, 0, 1);
}

void non-virtual thunk to'DataConnectionAgent::forcedInterfaceNameUpdate(uint64_t a1, uint64_t a2)
{
}

uint64_t DataConnectionAgent::getInterfaceName(DataConnectionAgent *this)
{
  return (uint64_t)this + 176;
}

uint64_t non-virtual thunk to'DataConnectionAgent::getInterfaceName(DataConnectionAgent *this)
{
  return (uint64_t)this + 152;
}

uint64_t DataConnectionAgent::isAvailable(DataConnectionAgent *this)
{
  return *((unsigned __int8 *)this + 168);
}

uint64_t non-virtual thunk to'DataConnectionAgent::isAvailable(DataConnectionAgent *this)
{
  return *((unsigned __int8 *)this + 144);
}

void *DataConnectionAgent::setTrafficForwardingPoliciesForTd(void *result, TrafficDescriptor *a2, int a3)
{
  if (!result[25]) {
    return result;
  }
  uint64_t v4 = result;
  *((_DWORD *)result + 74) = a3;
  id v5 = result + 39;
  if (!result[39]) {
    operator new();
  }
  int v6 = (void *)result[15];
  if (!v6 || ([v6 isActive] & 1) == 0)
  {
    __n128 result = sub_1008BF00C(*v5);
    if ((void *)(*v5 + 8) != result) {
      return result;
    }
    uint64_t v14 = *((unsigned __int8 *)v4 + 264);
    if (!*((unsigned char *)v4 + 264))
    {
      uint64_t v14 = 1;
      *((unsigned char *)v4 + 264) = 1;
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)v14, (Registry *)v4[9]);
    int v16 = ServiceMap;
    if (v17 < 0)
    {
      int v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v19 = 5381;
      do
      {
        uint64_t v17 = v19;
        unsigned int v20 = *v18++;
        uint64_t v19 = (33 * v19) ^ v20;
      }
      while (v20);
    }
    std::mutex::lock(ServiceMap);
    __p[0] = (void *)v17;
    int v21 = sub_10004D37C(&v16[1].__m_.__sig, (unint64_t *)__p);
    if (v21)
    {
      uint64_t v23 = v21[3];
      unsigned __int8 v22 = (std::__shared_weak_count *)v21[4];
      if (v22)
      {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v16);
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v22);
        char v24 = 0;
        if (!v23) {
          goto LABEL_42;
        }
        goto LABEL_40;
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    std::mutex::unlock(v16);
    unsigned __int8 v22 = 0;
    char v24 = 1;
    if (!v23)
    {
LABEL_42:
      if ((v24 & 1) == 0) {
        sub_10004D2C8(v22);
      }
      uint64_t v25 = sub_100200FB4((id *)v4 + 8);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        TrafficDescriptor::toString((uint64_t *)__p, a2);
        int v30 = v32 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136315394;
        __int16 v36 = "setTrafficForwardingPoliciesForTd";
        __int16 v37 = 2080;
        __int16 v38 = v30;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: Pending traffic descriptor (1): %s", buf, 0x16u);
        if (v32 < 0) {
          operator delete(__p[0]);
        }
      }
LABEL_50:

      return (void *)sub_1003816BC((uint64_t **)*v5, (uint64_t)a2, a2);
    }
LABEL_40:
    uint64_t v27 = v4[34] + *(void *)(*(void *)v4[34] - 56);
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 24))(v27);
    unsigned __int8 v29 = [(id)v4[15] connectionType];
    sub_100058DB0(v33, "NWNetworkAgent slice");
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **, uint64_t, void))(*(void *)v23 + 80))(v23, v28, 1 << v29, 1, v33, 1, 0);
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    goto LABEL_42;
  }
  if (!*((unsigned char *)v4 + 170))
  {
    __n128 result = sub_1008BF00C(*v5);
    if ((void *)(*v5 + 8) != result) {
      return result;
    }
    uint64_t v25 = sub_100200FB4((id *)v4 + 8);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      TrafficDescriptor::toString((uint64_t *)__p, a2);
      uint64_t v26 = v32 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136315394;
      __int16 v36 = "setTrafficForwardingPoliciesForTd";
      __int16 v37 = 2080;
      __int16 v38 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: Pending traffic descriptor (2): %s", buf, 0x16u);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_50;
  }
  uint64_t v7 = sub_100200FB4((id *)v4 + 8);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    TrafficDescriptor::toString((uint64_t *)__p, a2);
    int v8 = v32 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315394;
    __int16 v36 = "setTrafficForwardingPoliciesForTd";
    __int16 v37 = 2080;
    __int16 v38 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: Directly forwarding traffic descriptor: %s", buf, 0x16u);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
  }

  int v9 = *((_DWORD *)v4 + 75);
  unsigned int v10 = *((_DWORD *)v4 + 74);
  if (v10) {
    int v11 = *((_DWORD *)v4 + 74);
  }
  else {
    int v11 = -1;
  }
  unsigned int v12 = v11 & v9;
  if (v9) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = v10;
  }
  return (void *)(*(uint64_t (**)(void, TrafficDescriptor *, uint64_t, void *))(*(void *)v4[25] + 88))(v4[25], a2, v13, v4 + 22);
}

void sub_1008BA40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

uint64_t *sub_1008BA478(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    sub_10005D9E0(v2, *(void **)(v2 + 8));
    operator delete();
  }
  return result;
}

void *non-virtual thunk to'DataConnectionAgent::setTrafficForwardingPoliciesForTd(uint64_t a1, TrafficDescriptor *a2, int a3)
{
  return DataConnectionAgent::setTrafficForwardingPoliciesForTd((void *)(a1 - 24), a2, a3);
}

BOOL DataConnectionAgent::connectionStateUpdate(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 304);
  if (v3 != a2)
  {
    id v5 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        int v6 = (void *)*v6;
      }
      int v9 = 136315906;
      unsigned int v10 = "connectionStateUpdate";
      __int16 v11 = 2082;
      unsigned int v12 = v6;
      __int16 v13 = 2080;
      uint64_t v14 = asString();
      __int16 v15 = 2080;
      uint64_t v16 = asString();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent:  %{public}s: (chage states) %s -->> %s", (uint8_t *)&v9, 0x2Au);
    }

    *(_DWORD *)(a1 + 304) = a2;
    if (a2 == 2) {
      int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 272) + 72))(*(void *)(a1 + 272));
    }
    else {
      int v7 = 0;
    }
    *(_DWORD *)(a1 + 300) = v7;
  }
  return v3 != a2;
}

void sub_1008BA640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL non-virtual thunk to'DataConnectionAgent::connectionStateUpdate(uint64_t a1, int a2)
{
  return DataConnectionAgent::connectionStateUpdate(a1 - 24, a2);
}

uint64_t DataConnectionAgent::hasDataAssertions(DataConnectionAgent *this)
{
  return 0;
}

uint64_t non-virtual thunk to'DataConnectionAgent::hasDataAssertions(DataConnectionAgent *this)
{
  return 0;
}

uint64_t sub_1008BA670(void *a1)
{
  uint64_t v2 = a1[25];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
  }
  int v3 = *(uint64_t (**)(void *))(*a1 + 184);

  return v3(a1);
}

void DataConnectionAgent::setPolicy(uint64_t a1, BOOL a2, uint64_t a3, int a4)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 192))(a1);
  if (*(void *)(a1 + 120) && *(void *)(a1 + 200))
  {
    *(_DWORD *)(a1 + 296) = a4;
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
    int v9 = ServiceMap;
    if (v10 < 0)
    {
      __int16 v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v12 = 5381;
      do
      {
        uint64_t v10 = v12;
        unsigned int v13 = *v11++;
        uint64_t v12 = (33 * v12) ^ v13;
      }
      while (v13);
    }
    std::mutex::lock(ServiceMap);
    *(void *)std::string buf = v10;
    uint64_t v14 = sub_10004D37C(&v9[1].__m_.__sig, (unint64_t *)buf);
    if (!v14)
    {
      std::mutex::unlock(v9);
      return;
    }
    uint64_t v15 = v14[3];
    uint64_t v16 = (std::__shared_weak_count *)v14[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v9);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      if (!v15)
      {
LABEL_39:
        sub_10004D2C8(v16);
        return;
      }
    }
    else
    {
      std::mutex::unlock(v9);
      if (!v15) {
        return;
      }
    }
    unsigned int v41 = v16;
    uint64_t v17 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = asStringBool(a2);
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "setPolicy";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v18;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v46 = a3;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: reset=%s, reason=%s", buf, 0x20u);
    }

    uint64_t v19 = (*(void (**)(void))(**(void **)(a1 + 200) + 40))(*(void *)(a1 + 200));
    BOOL v20 = v19 == 0;

    if (v20)
    {
      *(void *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v15 + 800))(buf, v15);
      long long v42 = 0uLL;
      (*(void (**)(long long *__return_ptr))(**(void **)buf + 16))(&v42);
      int v21 = (*(void (**)(void))(*(void *)v42 + 16))(v42);
      if (!v21)
      {
        unsigned __int8 v22 = sub_100200FB4((id *)(a1 + 64));
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v44 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "NWAgent: NEPolicySession cannot be found !", v44, 2u);
        }
      }
      (*(void (**)(void, void *))(**(void **)(a1 + 200) + 48))(*(void *)(a1 + 200), v21);
      if (*((void *)&v42 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v42 + 1));
      }
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    BOOL v23 = sub_1008BB038(a1);
    memset(buf, 0, sizeof(buf));
    if (v23)
    {
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 872))(v15);
      if (v24)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v24 + 72))(&v42);
        sub_1008BE714((void **)buf);
        *(_OWORD *)std::string buf = v42;
        *(void *)&uint8_t buf[16] = v43;
        uint64_t v43 = 0;
        long long v42 = 0uLL;
        *(void *)uint64_t v44 = &v42;
        sub_1008BE774((void ***)v44);
      }
    }
    uint64_t v25 = *(void *)(a1 + 200);
    uint64_t v26 = *(void **)(a1 + 120);
    if (v26) {
      id v27 = [v26 isActive];
    }
    else {
      id v27 = 0;
    }
    int v28 = *(unsigned __int8 *)(a1 + 168);
    uint64_t v29 = *(void *)(a1 + 272) + *(void *)(**(void **)(a1 + 272) - 56);
    int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 24))(v29);
    int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 776))(v15);
    uint64_t v32 = *(void *)(a1 + 272) + *(void *)(**(void **)(a1 + 272) - 56);
    uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 24))(v32);
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 840))(v15, v33);
    uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 216))(v15);
    int v36 = *(_DWORD *)(a1 + 300);
    if (*(_DWORD *)(a1 + 296)) {
      int v37 = *(_DWORD *)(a1 + 296);
    }
    else {
      int v37 = -1;
    }
    int v38 = v37 & v36;
    if (v36) {
      int v39 = v38;
    }
    else {
      int v39 = *(_DWORD *)(a1 + 296);
    }
    (*(void (**)(uint64_t, id, BOOL, BOOL, uint64_t, uint8_t *, BOOL, uint64_t, int))(*(void *)v25 + 72))(v25, v27, v28 != 0, v30 == v31, v34, buf, a2, v35, v39);
    int v40 = *(void **)(a1 + 224);
    if (v40) {
      [v40 slicingSupport:v23];
    }
    *(void *)&long long v42 = buf;
    sub_1008BE774((void ***)&v42);
    uint64_t v16 = v41;
    if (v41) {
      goto LABEL_39;
    }
  }
}

void sub_1008BACB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  if (a18) {
    sub_10004D2C8(a18);
  }

  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'DataConnectionAgent::initPolicy(DataConnectionAgent *this, BOOL a2)
{
}

uint64_t sub_1008BAD68(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = [*(id *)(a1 + 120) isNetworkProvider];
  unsigned int v5 = [*(id *)(a1 + 120) isUserActivated];
  if ([*(id *)(a1 + 120) isNetworkProvider] != a2)
  {
    [*(id *)(a1 + 120) setNetworkProvider:a2];
    int v6 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v7 = [*(id *)(a1 + 120) isNetworkProvider];
      int v20 = 67109120;
      LODWORD(v21) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I NWAgent: fAgent.change updated as network provider: %d", (uint8_t *)&v20, 8u);
    }
  }
  unsigned int v8 = [*(id *)(a1 + 120) isUserActivated];
  if (v8 != [*(id *)(a1 + 120) isNetworkProvider])
  {
    objc_msgSend(*(id *)(a1 + 120), "setUserActivated:", objc_msgSend(*(id *)(a1 + 120), "isNetworkProvider"));
    int v9 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v10 = [*(id *)(a1 + 120) isUserActivated];
      int v20 = 67109120;
      LODWORD(v21) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I NWAgent: fAgent.change updated user activated: %d", (uint8_t *)&v20, 8u);
    }
  }
  if (v4 == [*(id *)(a1 + 120) isNetworkProvider]
    && v5 == [*(id *)(a1 + 120) isUserActivated])
  {
    return 0;
  }
  __int16 v11 = sub_100200FB4((id *)(a1 + 64));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = (void *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0) {
      uint64_t v12 = (void *)*v12;
    }
    if (v4) {
      unsigned int v13 = "true";
    }
    else {
      unsigned int v13 = "false";
    }
    unsigned int v14 = [*(id *)(a1 + 120) isNetworkProvider];
    unsigned int v15 = [*(id *)(a1 + 120) isUserActivated];
    int v21 = "updatePersistentAgentAvailability";
    if (v5) {
      uint64_t v16 = "true";
    }
    else {
      uint64_t v16 = "false";
    }
    int v20 = 136316418;
    __int16 v22 = 2082;
    if (v14) {
      uint64_t v17 = "true";
    }
    else {
      uint64_t v17 = "false";
    }
    BOOL v23 = v12;
    if (v15) {
      uint64_t v18 = "true";
    }
    else {
      uint64_t v18 = "false";
    }
    __int16 v24 = 2080;
    uint64_t v25 = v13;
    __int16 v26 = 2080;
    id v27 = v17;
    __int16 v28 = 2080;
    uint64_t v29 = v16;
    __int16 v30 = 2080;
    int v31 = v18;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s: fAgent.change NWAgent %{public}s networkProvider %s->%s userActivated %s->%s", (uint8_t *)&v20, 0x3Eu);
  }

  return 1;
}

void sub_1008BB008(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1008BB038(uint64_t a1)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  int v3 = ServiceMap;
  if ((v4 & 0x8000000000000000) != 0)
  {
    unsigned int v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v19 = v4;
  unsigned int v8 = sub_10004D37C(&v3[1].__m_.__sig, &v19);
  if (v8)
  {
    uint64_t v10 = v8[3];
    int v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      char v11 = 0;
      if (!v10) {
        goto LABEL_13;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v3);
  int v9 = 0;
  char v11 = 1;
  if (!v10) {
    goto LABEL_13;
  }
LABEL_10:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 872))(v10);
  if (v12)
  {
    uint64_t v13 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
    if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v12 + 32))(v12, v13, 0))
    {
      if (!*(_DWORD *)(a1 + 220))
      {
        uint64_t v16 = *(void **)(a1 + 120);
        if (v16)
        {
          if ([v16 isActive])
          {
            uint64_t v17 = *(void *)(a1 + 272) + *(void *)(**(void **)(a1 + 272) - 56);
            int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
            BOOL v14 = v18 == (*(unsigned int (**)(uint64_t))(*(void *)v10 + 776))(v10);
            if (v11) {
              return v14;
            }
            goto LABEL_14;
          }
        }
      }
    }
  }
LABEL_13:
  BOOL v14 = 0;
  if ((v11 & 1) == 0) {
LABEL_14:
  }
    sub_10004D2C8(v9);
  return v14;
}

void sub_1008BB238(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void DataConnectionAgent::updateAgentOnHandover(uint64_t a1, int a2, uint64_t a3)
{
  ++*(unsigned char *)(a1 + 256);
  if (!*(unsigned char *)(a1 + 264))
  {
    *(void *)(a1 + 240) = *(void *)(a1 + 252);
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a1 + 260);
  }
  unsigned int v7 = *(void **)(a1 + 120);
  if (v7)
  {
    unsigned int v8 = [v7 getAgentData];
    int v9 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = (char)v8[4];
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = "updateAgentOnHandover";
      __int16 v17 = 1024;
      int v18 = v10;
      __int16 v19 = 1024;
      int v20 = v10 + 1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: HO version %d->%d fAgentData.change", __p, 0x18u);
    }

    ++v8[4];
  }
  if (*(void *)(a1 + 120))
  {
    if (DataConnectionAgent::connectionReady((DataConnectionAgent *)a1))
    {
      char v11 = *(void **)(a1 + 120);
      if (v11)
      {
        if ([v11 isActive])
        {
          uint64_t v12 = *(void *)(a1 + 272);
          if (v12)
          {
            if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 56))(v12))
            {
              uint64_t v13 = *(void *)(a1 + 200);
              if (v13)
              {
                if (*(_DWORD *)(a1 + 220) == 17)
                {
                  if (a2 || !*(void *)(a1 + 272))
                  {
                    sub_100058DB0(__p, "");
                    (*(void (**)(uint64_t, void, unsigned char *))(*(void *)v13 + 96))(v13, 0, __p);
                    if (SHIBYTE(v20) < 0) {
                      operator delete(*(void **)__p);
                    }
                  }
                  else
                  {
                    BOOL v14 = *(void **)(a1 + 120);
                    if (v14) {
                      id v15 = [v14 isActive];
                    }
                    else {
                      id v15 = 0;
                    }
                    (*(void (**)(uint64_t, id, uint64_t))(*(void *)v13 + 96))(v13, v15, a3);
                  }
                }
              }
            }
          }
        }
      }
    }
    DataConnectionAgent::updateAgentIfReady((DataConnectionAgent *)a1);
  }
}

void sub_1008BB498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'DataConnectionAgent::updateAgentOnHandover(uint64_t a1, int a2, uint64_t a3)
{
}

void non-virtual thunk to'DataConnectionAgent::setPolicy(uint64_t a1, BOOL a2, uint64_t a3, int a4)
{
}

void sub_1008BB4CC(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 170) != a2)
  {
    BOOL v2 = a2;
    unint64_t v4 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v5 = (void *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0) {
        unsigned int v5 = (void *)*v5;
      }
      uint64_t v6 = asStringBool(*(unsigned char *)(a1 + 170));
      int v7 = 136446722;
      unsigned int v8 = v5;
      __int16 v9 = 2080;
      uint64_t v10 = v6;
      __int16 v11 = 2080;
      uint64_t v12 = asStringBool(v2);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I NWAgent %{public}s: fPathSatisfied from %s to %s", (uint8_t *)&v7, 0x20u);
    }

    *(unsigned char *)(a1 + 170) = v2;
  }
}

void sub_1008BB5D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DataConnectionAgent::handlePathSatisfied(DataConnectionAgent *this, int a2, int a3)
{
  if (*((unsigned __int8 *)this + 170) == a2)
  {
    uint64_t v4 = *((void *)this + 34);
    if (v4) {
      BOOL v5 = a3 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      uint64_t v6 = *(void (**)(void))(*(void *)v4 + 48);
      v6();
    }
    return;
  }
  sub_1008BB4CC((uint64_t)this, a2);
  DataConnectionAgent::updateAgentIfReady(this);
  if (*((void *)this + 34))
  {
    id v7 = DataConnectionAgent::connectionReady(this);
    unsigned int v8 = sub_100200FB4((id *)this + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v9 = (void *)((char *)this + 144);
      if (*((char *)this + 167) < 0) {
        __int16 v9 = (void *)*v9;
      }
      *(_DWORD *)std::string buf = 136446466;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v31 = 2080;
      uint64_t v32 = asStringBool((BOOL)v7);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I NWAgent %{public}s: Path satisfaction update: %s: notifying", buf, 0x16u);
    }

    (*(void (**)(void, id))(**((void **)this + 34) + 40))(*((void *)this + 34), v7);
    if (*((unsigned char *)this + 170))
    {
      uint64_t v10 = *((void *)this + 39);
      if (v10)
      {
        if (*(void *)(v10 + 16))
        {
          __int16 v11 = (void *)*((void *)this + 15);
          if (!v11) {
            goto LABEL_49;
          }
          if ([v11 isActive] && *((void *)this + 25))
          {
            uint64_t v12 = sub_100200FB4((id *)this + 8);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = "handlePathSatisfied";
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: processing traffic descriptors", buf, 0xCu);
            }

            uint64_t v13 = (void *)*((void *)this + 39);
            uint64_t v16 = (void *)*v13;
            BOOL v14 = v13 + 1;
            id v15 = v16;
            if (v16 != v14)
            {
              do
              {
                __int16 v17 = sub_100200FB4((id *)this + 8);
                if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                {
                  TrafficDescriptor::toString((uint64_t *)buf, (TrafficDescriptor *)(v15 + 4));
                  int v18 = buf;
                  if (v33 < 0) {
                    int v18 = *(unsigned char **)buf;
                  }
                  *(_DWORD *)uint64_t v34 = 136315394;
                  uint64_t v35 = "handlePathSatisfied";
                  __int16 v36 = 2080;
                  int v37 = v18;
                  _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: forwarding traffic descriptor: %s", v34, 0x16u);
                  if (v33 < 0) {
                    operator delete(*(void **)buf);
                  }
                }

                int v19 = *((_DWORD *)this + 75);
                unsigned int v20 = *((_DWORD *)this + 74);
                if (v20) {
                  int v21 = *((_DWORD *)this + 74);
                }
                else {
                  int v21 = -1;
                }
                unsigned int v22 = v21 & v19;
                if (v19) {
                  uint64_t v23 = v22;
                }
                else {
                  uint64_t v23 = v20;
                }
                (*(void (**)(void, void *, uint64_t, char *))(**((void **)this + 25) + 88))(*((void *)this + 25), v15 + 4, v23, (char *)this + 176);
                __int16 v24 = (void *)v15[1];
                if (v24)
                {
                  do
                  {
                    uint64_t v25 = v24;
                    __int16 v24 = (void *)*v24;
                  }
                  while (v24);
                }
                else
                {
                  do
                  {
                    uint64_t v25 = (void *)v15[2];
                    BOOL v5 = *v25 == (void)v15;
                    id v15 = v25;
                  }
                  while (!v5);
                }
                id v15 = v25;
              }
              while (v25 != v14);
            }
            __int16 v26 = sub_100200FB4((id *)this + 8);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = "handlePathSatisfied";
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: Cleaning traffic descriptors", buf, 0xCu);
            }

            uint64_t v27 = *((void *)this + 39);
            sub_10005D9E0(v27, *(void **)(v27 + 8));
            *(void *)uint64_t v27 = v27 + 8;
            *(void *)(v27 + 16) = 0;
            *(void *)(v27 + 8) = 0;
            return;
          }
          __int16 v28 = (void *)*((void *)this + 15);
          if (v28 && ([v28 isActive] & 1) != 0)
          {
            if (*((void *)this + 25)) {
              return;
            }
            uint64_t v29 = sub_100200FB4((id *)this + 8);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = "handlePathSatisfied";
              _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "%s: NWAgent: not processing traffic descriptors: no policy", buf, 0xCu);
            }
          }
          else
          {
LABEL_49:
            uint64_t v29 = sub_100200FB4((id *)this + 8);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = "handlePathSatisfied";
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: not processing traffic descriptors: agent is not active", buf, 0xCu);
            }
          }
        }
      }
    }
  }
}

void sub_1008BBAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void non-virtual thunk to'DataConnectionAgent::handlePathSatisfied(DataConnectionAgent *this, int a2, int a3)
{
}

void sub_1008BBB00(uint64_t a1)
{
  if (*(void *)(a1 + 120))
  {
    BOOL v2 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I NWAgent: fAgent.change deinit", buf, 2u);
    }

    int v3 = *(void **)(a1 + 120);
    *(void *)(a1 + 120) = 0;

    if (*(char *)(a1 + 167) < 0)
    {
      **(unsigned char **)(a1 + 144) = 0;
      *(void *)(a1 + 152) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 144) = 0;
      *(unsigned char *)(a1 + 167) = 0;
    }
    uint64_t v4 = *(void *)(a1 + 200);
    if (v4) {
      (*(void (**)(uint64_t, void, void, void))(*(void *)v4 + 56))(v4, 0, 0, 0);
    }
  }
  if (*(void *)(a1 + 112))
  {
    BOOL v5 = sub_100200FB4((id *)(a1 + 64));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I NWAgent: fRegistration.change deinit", v7, 2u);
    }

    uint64_t v6 = *(void **)(a1 + 112);
    *(void *)(a1 + 112) = 0;
  }
}

void sub_1008BBC38(uint64_t a1, int a2, uint64_t a3, BOOL a4)
{
  unsigned int v8 = sub_100200FB4((id *)(a1 + 64));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315906;
    char v206 = "initAgent";
    __int16 v207 = 1024;
    *(_DWORD *)long long v208 = a2;
    *(_WORD *)&v208[4] = 1024;
    *(_DWORD *)&v208[6] = a3;
    LOWORD(v209) = 1024;
    *(_DWORD *)((char *)&v209 + 2) = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: useSavedParams=%d, networkProvider=%d, userActivated=%d", buf, 0x1Eu);
  }

  uint64_t v9 = *(unsigned int *)(a1 + 220);
  switch((int)v9)
  {
    case 0:
      id v50 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      int v51 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v50;

      __int16 v52 = [[DataConnectionNetworkAgentInternet alloc] initWithType:0];
      int v53 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v52;

      if (!*(void *)(a1 + 136))
      {
        uint64_t v54 = *(void *)(a1 + 272);
        if (v54)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v54 + 80))(v54))
          {
            id v55 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
            uint64_t v56 = *(void **)(a1 + 128);
            *(void *)(a1 + 128) = v55;

            uint64_t v57 = [[DataConnectionNetworkAgentInternetSliceRouter alloc] initWithType:0];
            unint64_t v58 = *(void **)(a1 + 136);
            *(void *)(a1 + 136) = v57;

            [*(id *)(a1 + 136) setDataAgent:a1];
            [*(id *)(a1 + 136) setActive:0];
            [*(id *)(a1 + 136) setNetworkProvider:1];
            [*(id *)(a1 + 136) setUserActivated:1];
            [*(id *)(a1 + 136) setKernelActivated:1];
            [*(id *)(a1 + 136) setVoluntary:0];
            [*(id *)(a1 + 136) setSpecificUseOnly:0];
            uint64_t v59 = +[NSUUID UUID];
            [*(id *)(a1 + 136) setAgentUUID:v59];

            LODWORD(v59) = [*(id *)(a1 + 128) registerNetworkAgent:*(void *)(a1 + 136)];
            uint64_t v60 = sub_100200FB4((id *)(a1 + 64));
            uint64_t v61 = v60;
            if (v59)
            {
              if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 136315138;
                char v206 = "initAgent";
                _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#I %s: NWAgent: registered slice agent", buf, 0xCu);
              }
            }
            else if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 136315138;
              char v206 = "initAgent";
              _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "%s: NWAgent: slice agent registration failed", buf, 0xCu);
            }

            uint64_t v195 = *(void *)(a1 + 200);
            if (v195)
            {
              unsigned __int16 v196 = [*(id *)(a1 + 136) agentUUID];
              (*(void (**)(uint64_t, void *))(*(void *)v195 + 64))(v195, v196);
            }
            [*(id *)(a1 + 128) updateNetworkAgent:*(void *)(a1 + 136)];
          }
        }
      }
      goto LABEL_47;
    case 1:
      id v62 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      uint64_t v63 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v62;

      std::string::size_type v64 = [[DataConnectionNetworkAgentVVM alloc] initWithType:1];
      uint64_t v65 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v64;

      goto LABEL_47;
    case 2:
      id v66 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      char v67 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v66;

      BOOL v68 = [[DataConnectionNetworkAgentMMS alloc] initWithType:2];
      std::string::size_type v69 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v68;

      goto LABEL_47;
    case 3:
      id v70 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      __int16 v71 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v70;

      unint64_t v72 = [[DataConnectionNetworkAgentPushEmail alloc] initWithType:3];
      char v73 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v72;

      goto LABEL_47;
    case 4:
      id v14 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      id v15 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v14;

      uint64_t v16 = [[DataConnectionNetworkAgentWirelessModemTraffic alloc] initWithType:4];
      __int16 v17 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v16;

      goto LABEL_47;
    case 5:
      id v74 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      int v75 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v74;

      BOOL v76 = [[DataConnectionNetworkAgentWirelessModemAuthentication alloc] initWithType:5];
      __int16 v77 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v76;

      goto LABEL_47;
    case 6:
      id v78 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      BOOL v79 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v78;

      uint64_t v80 = [[DataConnectionNetworkAgentCellularDataPlanProvisioning alloc] initWithType:6];
      __int16 v81 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v80;

      goto LABEL_47;
    case 7:
      id v82 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      __int16 v83 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v82;

      std::string::size_type v84 = [[DataConnectionNetworkAgentAppleWirelessDiagnostics alloc] initWithType:7];
      __int16 v85 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v84;

      goto LABEL_47;
    case 8:
      id v86 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      __int16 v87 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v86;

      BOOL v88 = [[DataConnectionNetworkAgentDataTest alloc] initWithType:8];
      id v89 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v88;

      goto LABEL_47;
    case 9:
      id v90 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      id v91 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v90;

      uint64_t v92 = [[DataConnectionNetworkAgentOTAActivation alloc] initWithType:9];
      __int16 v93 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v92;

      goto LABEL_47;
    case 10:
      id v94 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      __int16 v95 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v94;

      uint64_t v96 = [[DataConnectionNetworkAgent3GFaceTimeTraffic alloc] initWithType:10];
      uint64_t v97 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v96;

      goto LABEL_47;
    case 11:
      id v18 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      int v19 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v18;

      unsigned int v20 = [[DataConnectionNetworkAgent3GFaceTimeAuthentication alloc] initWithType:11];
      int v21 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v20;

      goto LABEL_47;
    case 12:
    case 13:
      id v10 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      __int16 v11 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v10;

      uint64_t v12 = [[DataConnectionNetworkAgentOTAInternet alloc] initWithType:v9];
      uint64_t v13 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v12;

      goto LABEL_47;
    case 14:
      id v22 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      uint64_t v23 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v22;

      __int16 v24 = [[DataConnectionNetworkAgentZeroRated alloc] initWithType:14];
      uint64_t v25 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v24;

      goto LABEL_47;
    case 15:
      id v98 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      int v99 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v98;

      id v100 = [[DataConnectionNetworkAgentEntitlementTraffic alloc] initWithType:15];
      std::string v101 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v100;

      goto LABEL_47;
    case 16:
      id v26 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      uint64_t v27 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v26;

      __int16 v28 = [[DataConnectionNetworkAgentInternalDataProbe alloc] initWithType:16];
      uint64_t v29 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v28;

      goto LABEL_47;
    case 17:
      id v102 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      BOOL v103 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v102;

      int v104 = [[DataConnectionNetworkAgentIM alloc] initWithType:17];
      uint64_t v105 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v104;

      goto LABEL_47;
    case 18:
      id v106 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      std::string::size_type v107 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v106;

      uint64_t v108 = [[DataConnectionNetworkAgentEm alloc] initWithType:18];
      id v109 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v108;

      goto LABEL_47;
    case 19:
      id v110 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      std::string::size_type v111 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v110;

      std::string::size_type v112 = [[DataConnectionNetworkAgentBootstrap alloc] initWithType:19];
      long long v113 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v112;

      goto LABEL_47;
    case 20:
      id v114 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      unsigned int v115 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v114;

      int v116 = [[DataConnectionNetworkAgentUT alloc] initWithType:20];
      std::string::size_type v117 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v116;

      goto LABEL_47;
    case 21:
      id v118 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      char v119 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v118;

      std::string::size_type v120 = [[DataConnectionNetworkAgentBootstrapRoamingInternetBypass alloc] initWithType:21];
      long long v121 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v120;

      goto LABEL_47;
    case 22:
      id v122 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      std::string::size_type v123 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v122;

      std::string::size_type v124 = [[DataConnectionNetworkAgentEmLoc alloc] initWithType:22];
      std::string::size_type v125 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v124;

      goto LABEL_47;
    case 23:
      id v126 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      id v127 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v126;

      uint64_t v128 = [[DataConnectionNetworkAgentCellularDataPlanProvisioning2 alloc] initWithType:23];
      int v129 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v128;

      goto LABEL_47;
    case 24:
      id v130 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      v131 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v130;

      long long v132 = [[DataConnectionNetworkAgentCarrierSpace alloc] initWithType:24];
      int v133 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v132;

      goto LABEL_47;
    case 25:
      id v134 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      char v135 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v134;

      std::string::size_type v136 = [[DataConnectionNetworkAgentInternetProbe alloc] initWithType:25];
      char v137 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v136;

      goto LABEL_47;
    case 26:
      id v138 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      std::string::size_type v139 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v138;

      long long v140 = [[DataConnectionNetworkAgentIM alloc] initWithType:26];
      uint64_t v141 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v140;

      goto LABEL_47;
    case 27:
      id v30 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      __int16 v31 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v30;

      uint64_t v32 = [[DataConnectionNetworkAgentLLWirelessModemTraffic alloc] initWithType:27];
      char v33 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v32;

      goto LABEL_47;
    case 28:
      id v142 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      char v143 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v142;

      uint64_t v144 = [[DataConnectionNetworkAgentInternetSlice1 alloc] initWithType:28];
      uint64_t v145 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v144;

      goto LABEL_47;
    case 29:
      id v146 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      uint64_t v147 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v146;

      uint64_t v148 = [[DataConnectionNetworkAgentInternetSlice2 alloc] initWithType:29];
      long long v149 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v148;

      goto LABEL_47;
    case 30:
      id v150 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      unsigned int v151 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v150;

      id v152 = [[DataConnectionNetworkAgentInternetSlice3 alloc] initWithType:30];
      long long v153 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v152;

      goto LABEL_47;
    case 31:
      id v154 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      __int16 v155 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v154;

      uint64_t v156 = [[DataConnectionNetworkAgentInternetSlice4 alloc] initWithType:31];
      uint64_t v157 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v156;

      goto LABEL_47;
    case 32:
      id v158 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      __int16 v159 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v158;

      uint64_t v160 = [[DataConnectionNetworkAgentInternetSlice5 alloc] initWithType:32];
      __int16 v161 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v160;

      goto LABEL_47;
    case 33:
      id v34 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      uint64_t v35 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v34;

      __int16 v36 = [[DataConnectionNetworkAgentInternetSlice6 alloc] initWithType:33];
      int v37 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v36;

      goto LABEL_47;
    case 34:
      id v38 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      int v39 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v38;

      int v40 = [[DataConnectionNetworkAgentInternetSlice7 alloc] initWithType:34];
      unsigned int v41 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v40;

      goto LABEL_47;
    case 35:
      id v42 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      uint64_t v43 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v42;

      uint64_t v44 = [[DataConnectionNetworkAgentInternetSlice8 alloc] initWithType:35];
      int v45 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v44;

      goto LABEL_47;
    case 36:
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315650;
        char v206 = "Wrong Connection type";
        __int16 v207 = 2080;
        *(void *)long long v208 = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataConnectionAgent.mm";
        *(_WORD *)&v208[8] = 1024;
        LODWORD(v209) = 2100;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT false\n %s\n at %s:%d\n**********", buf, 0x1Cu);
      }
      __TUAssertTrigger();
      id v46 = [objc_alloc((Class)NWNetworkAgentRegistration) initWithNetworkAgentClass:objc_opt_class()];
      BOOL v47 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v46;

      __int16 v48 = [[DataConnectionNetworkAgent alloc] initWithType:36];
      uint64_t v49 = *(NSObject **)(a1 + 120);
      *(void *)(a1 + 120) = v48;
      goto LABEL_112;
    default:
LABEL_47:
      if (!*(void *)(a1 + 120)) {
        goto LABEL_113;
      }
      uint64_t v162 = +[NSUUID UUID];
      [*(id *)(a1 + 120) setAgentUUID:v162];

      uint64_t v163 = *(void *)(a1 + 200);
      if (v163)
      {
        __int16 v164 = [(id)objc_opt_class() agentDomain];
        uint64_t v165 = [(id)objc_opt_class() agentType];
        long long v166 = [*(id *)(a1 + 120) agentUUID];
        (*(void (**)(uint64_t, void *, void *, void *))(*(void *)v163 + 56))(v163, v164, v165, v166);
      }
      id v167 = [*(id *)(a1 + 120) agentUUID];
      id v168 = [v167 UUIDString];
      id v169 = (_OWORD *)(a1 + 144);
      sub_10003ED78((std::string *)(a1 + 144), (char *)[v168 UTF8String]);

      [*(id *)(a1 + 120) setDataAgent:a1];
      v170 = *(void **)(a1 + 120);
      if (a2)
      {
        [v170 setNetworkProvider:a3];
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 120), "setNetworkProvider:", objc_msgSend(v170, "connectionType") != 0);
        a4 = [*(id *)(a1 + 120) connectionType] != 0;
      }
      [*(id *)(a1 + 120) setUserActivated:a4];
      [*(id *)(a1 + 120) setVoluntary:1];
      [*(id *)(a1 + 120) connectionType];
      if (isSlice())
      {
        [*(id *)(a1 + 120) setVoluntary:0];
        [*(id *)(a1 + 120) setKernelActivated:1];
      }
      objc_msgSend(*(id *)(a1 + 120), "setSpecificUseOnly:", objc_msgSend(*(id *)(a1 + 120), "connectionType") != 0);
      if ([*(id *)(a1 + 120) connectionType] == 4) {
        [*(id *)(a1 + 120) setVoluntary:0];
      }
      unsigned int v171 = [*(id *)(a1 + 120) getAgentData];
      uint64_t v172 = *(void *)(a1 + 240);
      std::string v171[2] = *(_DWORD *)(a1 + 248);
      *(void *)unsigned int v171 = v172;
      if (*(void *)(a1 + 224))
      {
        long long v173 = sub_100200FB4((id *)(a1 + 64));
        if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315138;
          char v206 = "initAgent";
          _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_DEFAULT, "#I %s: fInterfaceObserver updated UUID", buf, 0xCu);
        }

        v174 = *(void **)(a1 + 224);
        if (*(char *)(a1 + 167) < 0)
        {
          sub_10004FC84(__p, *(void **)(a1 + 144), *(void *)(a1 + 152));
        }
        else
        {
          *(_OWORD *)std::string __p = *v169;
          uint64_t v200 = *(void *)(a1 + 160);
        }
        [v174 doUpdateUUID:__p];
        if (SHIBYTE(v200) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        uint64_t v175 = [DataConnectionAgentInterfaceObserver alloc];
        uint64_t v176 = [(id)objc_opt_class() agentDomain];
        id v177 = [(id)objc_opt_class() agentType];
        uint64_t v178 = objc_opt_class();
        uint64_t v179 = *(void *)(a1 + 88);
        if (*(char *)(a1 + 167) < 0)
        {
          sub_10004FC84(__dst, *(void **)(a1 + 144), *(void *)(a1 + 152));
        }
        else
        {
          *(_OWORD *)std::string __dst = *v169;
          uint64_t v204 = *(void *)(a1 + 160);
        }
        uint64_t v180 = *(std::__shared_weak_count **)(a1 + 80);
        uint64_t v201 = *(void *)(a1 + 72);
        char v202 = v180;
        if (v180) {
          atomic_fetch_add_explicit(&v180->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        LODWORD(v197) = v9;
        char v181 = -[DataConnectionAgentInterfaceObserver initWithPathSatisfactionObserver:domain:agentType:agentClass:logName:uuid:queue:registry:connectionType:](v175, "initWithPathSatisfactionObserver:domain:agentType:agentClass:logName:uuid:queue:registry:connectionType:", a1 + 104, v176, v177, v178, v179, __dst, a1 + 232, &v201, v197, context);
        uint64_t v182 = *(void **)(a1 + 224);
        *(void *)(a1 + 224) = v181;

        if (v202) {
          sub_10004D2C8(v202);
        }
        if (SHIBYTE(v204) < 0) {
          operator delete(__dst[0]);
        }

        BOOL v183 = *(void *)(a1 + 224) == 0;
        std::string::size_type v184 = sub_100200FB4((id *)(a1 + 64));
        uint64_t v185 = v184;
        if (v183)
        {
          if (os_log_type_enabled(v184, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315138;
            char v206 = "initAgent";
            _os_log_error_impl((void *)&_mh_execute_header, v185, OS_LOG_TYPE_ERROR, "%s: fInterfaceObserver creation failed", buf, 0xCu);
          }
        }
        else if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315138;
          char v206 = "initAgent";
          _os_log_impl((void *)&_mh_execute_header, v185, OS_LOG_TYPE_DEFAULT, "#I %s: fInterfaceObserver created", buf, 0xCu);
        }
      }
      if (!*(void *)(a1 + 112) || !sub_1008B58AC(a1)) {
        goto LABEL_113;
      }
      unsigned __int8 v186 = [*(id *)(a1 + 112) registerNetworkAgent:*(void *)(a1 + 120)];
      uint64_t v49 = sub_100200FB4((id *)(a1 + 64));
      BOOL v187 = os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
      if (v186)
      {
        if (v187)
        {
          uint64_t v188 = a1 + 144;
          if (*(char *)(a1 + 167) < 0) {
            uint64_t v188 = *(void *)v169;
          }
          *(_DWORD *)std::string buf = 136315394;
          char v206 = "initAgent";
          __int16 v207 = 2082;
          *(void *)long long v208 = v188;
          _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#I %s: Registered NWAgent %{public}s", buf, 0x16u);
        }

        if (*(char *)(a1 + 199) < 0)
        {
          if (!*(void *)(a1 + 184)) {
            goto LABEL_113;
          }
        }
        else if (!*(unsigned char *)(a1 + 199))
        {
          goto LABEL_113;
        }
        id v189 = sub_100200FB4((id *)(a1 + 64));
        v190 = (uint64_t *)(a1 + 176);
        if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v191 = a1 + 144;
          if (*(char *)(a1 + 167) < 0) {
            uint64_t v191 = *(void *)v169;
          }
          os_log_t v192 = (uint64_t *)(a1 + 176);
          if (*(char *)(a1 + 199) < 0) {
            os_log_t v192 = (uint64_t *)*v190;
          }
          *(_DWORD *)std::string buf = 136315650;
          char v206 = "initAgent";
          __int16 v207 = 2082;
          *(void *)long long v208 = v191;
          *(_WORD *)&v208[8] = 2080;
          int v209 = v192;
          _os_log_impl((void *)&_mh_execute_header, v189, OS_LOG_TYPE_DEFAULT, "#I %s: Adding NWAgent %{public}s to interface [%s]", buf, 0x20u);
        }

        uint64_t v193 = a1 + 176;
        if (*(char *)(a1 + 199) < 0) {
          uint64_t v193 = *v190;
        }
        uint64_t v49 = +[NSString stringWithUTF8String:v193];
        if (([*(id *)(a1 + 112) addNetworkAgentToInterfaceNamed:v49] & 1) == 0)
        {
          v194 = sub_100200FB4((id *)(a1 + 64));
          if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(a1 + 167) < 0) {
              id v169 = *(_OWORD **)v169;
            }
            if (*(char *)(a1 + 199) < 0) {
              v190 = (uint64_t *)*v190;
            }
            *(_DWORD *)std::string buf = 136315650;
            char v206 = "initAgent";
            __int16 v207 = 2082;
            *(void *)long long v208 = v169;
            *(_WORD *)&v208[8] = 2080;
            int v209 = v190;
            _os_log_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_DEFAULT, "#I %s: Failed to add NWAgent %{public}s to network Interface [%s] on initAgent", buf, 0x20u);
          }
        }
      }
      else if (v187)
      {
        if (*(char *)(a1 + 167) < 0) {
          id v169 = *(_OWORD **)v169;
        }
        *(_DWORD *)std::string buf = 136315394;
        char v206 = "initAgent";
        __int16 v207 = 2082;
        *(void *)long long v208 = v169;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#I %s: Failed to register NWAgent %{public}s", buf, 0x16u);
      }
LABEL_112:

LABEL_113:
      return;
  }
}

void sub_1008BD270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _Unwind_Resume(a1);
}

void DataConnectionAgent::~DataConnectionAgent(DataConnectionAgent *this)
{
  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  PersonalitySpecific *v1;
  uint64_t vars8;

  PersonalitySpecific::~PersonalitySpecific(v1);

  operator delete();
}

void non-virtual thunk to'DataConnectionAgent::~DataConnectionAgent(DataConnectionAgent *this)
{
  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  DataConnectionAgent::~DataConnectionAgent((DataConnectionAgent *)((char *)this - 24));
}

void sub_1008BD438(uint64_t a1)
{
  PersonalitySpecific::~PersonalitySpecific(v1);
}

void sub_1008BD4B8(uint64_t a1)
{
}

void sub_1008BD6DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_1008BD820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008BDF3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008BE0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DataConnectionAgentInterfaceObserver;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1008BE578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008BE67C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B0E110, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_101B0E110))
  {
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&unk_101B0E108, kCtLoggingSystemName, "DATA.agent.bootstrap");
    __cxa_guard_release(&qword_101B0E110);
  }
}

void sub_1008BE6FC(_Unwind_Exception *a1)
{
}

void sub_1008BE714(void **a1)
{
  int v1 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint64_t v4 = v1;
    if (v3 != v1)
    {
      do
        TrafficDescriptor::~TrafficDescriptor((TrafficDescriptor *)(v3 - 304));
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1008BE774(void ***a1)
{
  int v1 = *a1;
  BOOL v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    BOOL v5 = v2;
    if (v4 != v2)
    {
      do
        TrafficDescriptor::~TrafficDescriptor((TrafficDescriptor *)(v4 - 304));
      while (v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1008BE7F8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1008BE8CC(void *a1)
{
  __cxa_begin_catch(a1);
  sub_1008BE8F4(v1);
  __cxa_rethrow();
}

void sub_1008BE8E0(_Unwind_Exception *a1)
{
}

void sub_1008BE8F4(id *a1)
{
  BOOL v2 = sub_100200FB4(a1 + 6);
  dispatch_barrier_async_f(v2, a1, (dispatch_function_t)sub_1008BEA40);
}

void sub_1008BE95C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1008BE994(uint64_t a1)
{
  int v1 = *(id **)(a1 + 24);
  BOOL v2 = sub_100200FB4(v1 + 6);
  dispatch_barrier_async_f(v2, v1, (dispatch_function_t)sub_1008BEA40);
}

uint64_t sub_1008BE9FC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1008BEA40(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1008BEA6C(id *a1)
{
  BOOL v2 = sub_100200FB4(a1 + 6);
  dispatch_barrier_async_f(v2, a1, (dispatch_function_t)sub_1008BEBB8);
}

void sub_1008BEAD4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1008BEB0C(uint64_t a1)
{
  int v1 = *(id **)(a1 + 24);
  BOOL v2 = sub_100200FB4(v1 + 6);
  dispatch_barrier_async_f(v2, v1, (dispatch_function_t)sub_1008BEBB8);
}

uint64_t sub_1008BEB74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1008BEBB8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1008BEBE4(id *a1)
{
  BOOL v2 = sub_100200FB4(a1 + 6);
  dispatch_barrier_async_f(v2, a1, (dispatch_function_t)sub_1008BED30);
}

void sub_1008BEC4C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1008BEC84(uint64_t a1)
{
  int v1 = *(id **)(a1 + 24);
  BOOL v2 = sub_100200FB4(v1 + 6);
  dispatch_barrier_async_f(v2, v1, (dispatch_function_t)sub_1008BED30);
}

uint64_t sub_1008BECEC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1008BED30(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1008BED5C(id *a1)
{
  BOOL v2 = sub_100200FB4(a1 + 6);
  dispatch_barrier_async_f(v2, a1, (dispatch_function_t)sub_1008BEEA8);
}

void sub_1008BEDC4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1008BEDFC(uint64_t a1)
{
  int v1 = *(id **)(a1 + 24);
  BOOL v2 = sub_100200FB4(v1 + 6);
  dispatch_barrier_async_f(v2, v1, (dispatch_function_t)sub_1008BEEA8);
}

uint64_t sub_1008BEE64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1008BEEA8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1008BEED4(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || (id v5 = *a1, (v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  id v7 = v6;
  unsigned int v8 = sub_100200FB4(a1 + 2);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1008BEFD0;
  block[3] = &unk_101A163C8;
  id v12 = v5;
  uint64_t v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  id v9 = v3;
  id v11 = v9;
  dispatch_async(v8, block);

  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10004D2C8(v7);
}

uint64_t sub_1008BEFD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1008BEFE0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1008BEFFC(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void *sub_1008BF00C(uint64_t a1)
{
  int v1 = (void *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return v1;
  }
  id v3 = (void *)(a1 + 8);
  do
  {
    int v4 = TrafficDescriptor::operator<();
    id v5 = v2 + 1;
    if (!v4)
    {
      id v5 = v2;
      id v3 = v2;
    }
    uint64_t v2 = (void *)*v5;
  }
  while (*v5);
  if (v3 == v1 || TrafficDescriptor::operator<()) {
    return v1;
  }
  return v3;
}

id **sub_1008BF088(id **result)
{
  int v1 = *result;
  *__n128 result = 0;
  if (v1)
  {

    operator delete();
  }
  return result;
}

id **sub_1008BF0D8(id *a1)
{
  char v33 = a1;
  uint64_t v2 = *a1;
  if (a1[1])
  {
    id v3 = (void *)v2[1];
    if (!v3) {
      goto LABEL_26;
    }
    int v4 = [v3 path];
    id v5 = [v4 status];

    id v6 = *a1;
    *((unsigned char *)v6 + 88) = v5 == (id)1;
    id v7 = sub_100200FB4(*((id **)v6 + 16));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v8 = (char *)*a1;
      id v9 = (char *)*a1 + 96;
      if (*((char *)*a1 + 119) < 0) {
        id v9 = (void *)*v9;
      }
      id v10 = v8 + 32;
      if (v8[55] < 0) {
        id v10 = (void *)*v10;
      }
      id v11 = v8 + 56;
      uint64_t v32 = v9;
      if (v8[79] < 0) {
        id v11 = (void *)*v11;
      }
      uint64_t v12 = asStringBool(v8[140]);
      int v13 = *((unsigned __int8 *)*a1 + 89);
      int v14 = *((unsigned __int8 *)*a1 + 88);
      id v15 = [*((id *)*a1 + 1) path];
      uint64_t v16 = [v15 description];
      *(_DWORD *)std::string buf = 136316930;
      uint64_t v35 = v32;
      __int16 v36 = 2080;
      int v37 = v10;
      __int16 v38 = 2080;
      int v39 = v11;
      __int16 v40 = 2080;
      uint64_t v41 = v12;
      __int16 v42 = 1024;
      int v43 = v13;
      __int16 v44 = 1024;
      int v45 = v14;
      __int16 v46 = 1024;
      LODWORD(v47[0]) = v5;
      WORD2(v47[0]) = 2114;
      *(void *)((char *)v47 + 6) = v16;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I observeValueForKeyPath: NWAgent %s Observe: DataConnectionAgentInterfaceObserver agent domain = %s, xpc_type_t type = %s, fSlicingSupported = %s: fAvailability = %d, check satisfied path = %d, status = %d, path.path=%{public}@", buf, 0x46u);
    }
  }
  else
  {
    __int16 v17 = (void *)v2[2];
    if (!v17) {
      goto LABEL_26;
    }
    id v18 = [v17 path];
    *((unsigned char *)*a1 + 89) = [v18 usesNetworkAgentType:*((void *)*a1 + 10)];

    id v19 = *a1;
    if (*((unsigned char *)*a1 + 89))
    {
      BOOL v20 = 1;
    }
    else if (*((_DWORD *)v19 + 34))
    {
      BOOL v20 = 0;
    }
    else
    {
      BOOL v20 = *((unsigned char *)v19 + 140) != 0;
    }
    *((unsigned char *)v19 + 89) = v20;
    id v7 = sub_100200FB4(*((id **)v19 + 16));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = (char *)*a1;
      id v22 = (char *)*a1 + 96;
      if (*((char *)*a1 + 119) < 0) {
        id v22 = (void *)*v22;
      }
      uint64_t v23 = v21 + 32;
      if (v21[55] < 0) {
        uint64_t v23 = (void *)*v23;
      }
      __int16 v24 = v21 + 56;
      if (v21[79] < 0) {
        __int16 v24 = (void *)*v24;
      }
      uint64_t v25 = asStringBool(v21[140]);
      int v26 = *((unsigned __int8 *)*a1 + 89);
      int v27 = *((unsigned __int8 *)*a1 + 88);
      __int16 v28 = [*((id *)*a1 + 2) path];
      uint64_t v29 = [v28 description];
      *(_DWORD *)std::string buf = 136316674;
      uint64_t v35 = v22;
      __int16 v36 = 2080;
      int v37 = v23;
      __int16 v38 = 2080;
      int v39 = v24;
      __int16 v40 = 2080;
      uint64_t v41 = v25;
      __int16 v42 = 1024;
      int v43 = v26;
      __int16 v44 = 1024;
      int v45 = v27;
      __int16 v46 = 2114;
      v47[0] = v29;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I observeValueForKeyPath: NWAgent %s Observe: DataConnectionAgentInterfaceObserver agent domain = %s, xpc_type_t type = %s, fSlicingSupported = %s: fAvailability = %d, check satisfied path = %d, agent.path = %{public}@", buf, 0x40u);
    }
  }

  uint64_t v2 = *a1;
LABEL_26:
  if (*((unsigned char *)v2 + 88)) {
    BOOL v30 = *((unsigned __int8 *)v2 + 89) != 0;
  }
  else {
    BOOL v30 = 0;
  }
  (*(void (**)(void, BOOL, uint64_t))(*(void *)v2[3] + 16))(v2[3], v30, 1);
  return sub_1008BF088(&v33);
}

void sub_1008BF44C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  sub_1008BF088((id **)va);
  _Unwind_Resume(a1);
}

id **sub_1008BF498(id *a1)
{
  uint64_t v2 = a1;
  (*(void (**)(void, uint64_t, void))(**((void **)*a1 + 3) + 16))(*((void *)*a1 + 3), 1, 0);
  return sub_1001217C8(&v2);
}

void sub_1008BF4FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001217C8((id **)va);
  _Unwind_Resume(a1);
}

void sub_1008BF510(void *a1@<X8>)
{
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  initially_inactive = dispatch_queue_attr_make_initially_inactive(v2);
  int v4 = dispatch_queue_create_with_target_V2("CTXPCServer", initially_inactive, 0);
  dispatch_set_qos_class_floor(v4, QOS_CLASS_UTILITY, 0);
  dispatch_activate(v4);
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1008BF86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, ctu::OsLogLogger *a9, dispatch_object_t object, char a11, std::__shared_weak_count *a12)
{
  if (object) {
    (*((void (**)(dispatch_object_t))object->isa + 1))(object);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_10004D2C8(v12);
  _Unwind_Resume(a1);
}

void sub_1008BF9E8()
{
  if (v0) {
    dispatch_release(v0);
  }
  JUMPOUT(0x1008BF9E0);
}

void sub_1008BF9FC(void *a1)
{
  *a1 = off_101A16450;
  uint64_t v2 = (id *)a1[6];
  a1[6] = 0;
  if (v2)
  {

    operator delete();
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 5));
  sub_100087E88(a1 + 1);

  CTXPCServerInterface::~CTXPCServerInterface((CTXPCServerInterface *)a1);
}

void sub_1008BFA90(void *a1)
{
  sub_1008BF9FC(a1);

  operator delete();
}

void sub_1008BFAC8(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v3 = [**(id **)(a1 + 48) notificationProxy];
  int v4 = operator new(0x20uLL);
  v4[1] = 0;
  void v4[2] = 0;
  *int v4 = off_101A16610;
  id v5 = v3;
  void v4[3] = v5;
  *a2 = v4 + 3;
  a2[1] = v4;
}

void sub_1008BFB50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008BFB60(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v4 = **(void ***)(a1 + 48);
  id v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  id v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [v4 setAssertionForConnection:&v6 dataConnectionType:a3 enable:a4];
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1008BFBC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008BFBD8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v3 = **(void ***)(a1 + 48);
  int v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [v3 setApplicationCategory:&v5 category:a3];
  if (v6) {
    sub_10004D2C8(v6);
  }
}

void sub_1008BFC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008BFC50(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1008BFC88(uint64_t a1)
{
}

uint64_t sub_1008BFCA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1008BFCE8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1008BFD14(ServiceManager::Service *this)
{
  *(void *)this = off_101A16590;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_1008BFD70(ServiceManager::Service *this)
{
  *(void *)this = off_101A16590;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_1008BFDE0@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "CTXPCServer");
}

unsigned char *sub_1008BFDF0@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  unsigned char *v2 = 2;
  __n128 result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_1008BFE30(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    int v4 = **(void ***)(v2 + 48);
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  else
  {
    int v4 = **(void ***)(v2 + 48);
  }
  dispatch_group_t group = v3;
  [v4 bootstrap:&group];
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_1008BFEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (v10) {
    dispatch_release(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008BFF0C()
{
  return 0;
}

uint64_t sub_1008BFF14()
{
  return 1;
}

uint64_t sub_1008BFF1C()
{
  return 0;
}

id sub_1008BFF28(uint64_t a1)
{
  return [**(id **)(*(void *)(a1 + 8) + 48) start];
}

void sub_1008BFF38(uint64_t a1, int a2, ServiceStage *this)
{
  if (a2 == 2)
  {
    id v3 = **(void ***)(*(void *)(a1 + 8) + 48);
    ServiceStage::holdOffStage((uint64_t *)&group, this);
    [v3 shutdown:&group];
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
  }
}

void sub_1008BFFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008BFFC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A16610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1008BFFE4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A16610;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1008C0038(uint64_t a1)
{
}

uint64_t sub_1008C0044(std::string *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (objc_opt_respondsToSelector())
  {
    id v7 = [v6 objectForKey:v5];
    uint64_t v8 = sub_1008C23BC(a1, v7);
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_1008C00CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008C00EC(_WORD *a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (objc_opt_respondsToSelector())
  {
    id v6 = [v5 objectForKey:v7];
    if (v6)
    {
      BOOL v8 = 0;
      if (sub_1008C24B0(&v8, v6)) {
        *a1 = v8 | 0x100;
      }
    }
  }
}

void sub_1008C019C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1008C01C4(uint64_t *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (*((char *)a1 + 23) >= 0) {
    id v7 = a1;
  }
  else {
    id v7 = (uint64_t *)*a1;
  }
  BOOL v8 = +[NSString stringWithUTF8String:v7];
  uint64_t v10 = codec::setItem(v8, v5, v6, v9);

  return v10;
}

void sub_1008C0244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1008C0264(uint64_t *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  sub_1008C2544(a1);
  id v7 = (codec *)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = codec::setItem(v7, v5, v6, v8);

  return v9;
}

void sub_1008C02D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008C02F0(unsigned char *a1, void *a2, void *a3)
{
  uint64_t v9 = a2;
  id v6 = a3;
  if (a1[1])
  {
    if (*a1) {
      id v7 = &__kCFBooleanTrue;
    }
    else {
      id v7 = &__kCFBooleanFalse;
    }
    BOOL v8 = v7;
  }
  else
  {
    BOOL v8 = 0;
  }
  codec::setItem(v8, v9, v6, v5);
}

void sub_1008C0394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id codec::toJSONObject(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  sub_1008C0264((uint64_t *)a1, @"authorization-token", v2);
  sub_1008C02F0((unsigned char *)(a1 + 32), @"retrieve-otp", v2);
  sub_1008C02F0((unsigned char *)(a1 + 34), @"retrieve-tc", v2);
  sub_1008C02F0((unsigned char *)(a1 + 36), @"retrieve-transfer-type", v2);
  sub_1008C02F0((unsigned char *)(a1 + 38), @"retrieve-token", v2);
  id v3 = @"target-device";
  id v5 = v2;
  if (*(unsigned char *)(a1 + 192))
  {
    sub_1008C259C(a1 + 40);
    id v6 = (codec *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v6 = 0;
  }
  codec::setItem(v6, (objc_object *)@"target-device", v5, v4);

  id v7 = @"supported-capabilities";
  uint64_t v9 = v5;
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v10 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 200)];
  }
  else
  {
    uint64_t v10 = 0;
  }
  codec::setItem(v10, (objc_object *)@"supported-capabilities", v9, v8);

  id v11 = +[NSDictionary typecast:v9];

  return v11;
}

{
  void *v2;
  __CFString *v3;
  NSString *v4;
  void *v5;
  NSMutableDictionary *v6;
  __CFString *v7;
  NSString *v8;
  codec *v9;
  NSMutableDictionary *v10;
  void *v11;
  uint64_t vars8;

  uint64_t v2 = objc_opt_new();
  sub_1008C0264((uint64_t *)a1, @"authorization-token", v2);
  id v3 = @"source-device";
  int v4 = v2;
  id v5 = objc_opt_new();
  sub_1008C1C20((uint64_t *)(a1 + 32), v5);
  sub_1008C0264((uint64_t *)(a1 + 56), @"eid", v5);
  codec::setItem((codec *)v5, (objc_object *)@"source-device", v4, v6);

  id v7 = @"target-device";
  BOOL v8 = v4;
  sub_1008C259C(a1 + 88);
  uint64_t v9 = (codec *)objc_claimAutoreleasedReturnValue();
  codec::setItem(v9, (objc_object *)@"target-device", v8, v10);

  sub_1008C02F0((unsigned char *)(a1 + 240), @"webview", v8);
  sub_1008C0264((uint64_t *)(a1 + 248), @"transfer-flow-type", v8);
  sub_1008C1088((uint64_t *)(a1 + 280), v8);
  id v11 = +[NSDictionary typecast:v8];

  return v11;
}

void sub_1008C0548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL codec::fromJSONObject<entitlements::TransferAuthorizationResponse>(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSDictionary typecast:a2];
  if (v3)
  {
    int v4 = @"transfer-type";
    id v5 = v3;
    if (objc_opt_respondsToSelector())
    {
      id v6 = [v5 objectForKey:@"transfer-type"];
      id v7 = v6;
      if (v6)
      {
        id v8 = v6;
        objc_opt_class();
        if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_respondsToSelector())
        {
          unsigned __int8 v9 = [v8 unsignedLongLongValue];

          *(_WORD *)a1 = v9 | 0x100;
        }
        else
        {
        }
      }
    }
    sub_1008C0044((std::string *)(a1 + 8), @"transfer-token", v5);
    sub_1008C0044((std::string *)(a1 + 40), @"expiration-time", v5);
    uint64_t v10 = @"target-device";
    id v11 = v5;
    if (objc_opt_respondsToSelector())
    {
      id v12 = [v11 objectForKey:@"target-device"];
      if (v12)
      {
        uint64_t v29 = 0;
        *(_OWORD *)std::string __p = 0u;
        long long v28 = 0u;
        *(_OWORD *)uint64_t v25 = 0u;
        long long v26 = 0u;
        *(_OWORD *)uint64_t v23 = 0u;
        long long v24 = 0u;
        memset(v22, 0, sizeof(v22));
        *(_OWORD *)int v21 = 0u;
        int v13 = +[NSDictionary typecast:v12];
        if (v13)
        {
          sub_1008675A4((std::string *)v21, @"eid", v13);
          sub_1008C153C((uint64_t *)v22 + 1, v13);
          sub_1008C0044((std::string *)v23, @"device-type", v13);
          int v14 = @"associated-subscription";
          id v15 = v13;
          if (objc_opt_respondsToSelector())
          {
            id v16 = [v15 objectForKey:@"associated-subscription"];
            __int16 v17 = v16;
            if (v16)
            {
              id v18 = v16;
              objc_opt_class();
              if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_respondsToSelector())
              {
                unsigned int v19 = [v18 unsignedLongLongValue];

                LODWORD(v25[0]) = v19;
                BYTE4(v25[0]) = 1;
              }
              else
              {
              }
            }
          }
          sub_1008C0044((std::string *)&v25[1], @"sim-alliance-profile-version", v15);
          sub_1008C0044((std::string *)&__p[1], @"gsma-sgp22-version", v15);

          sub_1008C26DC((std::string *)(a1 + 72), (std::string *)v21);
        }
        if ((_BYTE)v29 && SHIBYTE(v28) < 0) {
          operator delete(__p[1]);
        }
        if (LOBYTE(__p[0]) && SHIBYTE(v26) < 0) {
          operator delete(v25[1]);
        }
        if (BYTE8(v24) && SBYTE7(v24) < 0) {
          operator delete(v23[0]);
        }
        BOOL v30 = (void **)v22 + 1;
        sub_1001A010C(&v30);
        if (SBYTE7(v22[0]) < 0) {
          operator delete(v21[0]);
        }
      }
    }
    sub_1008C0044((std::string *)(a1 + 232), @"carrier-transfer-data", v11);
    sub_1008C0044((std::string *)(a1 + 456), @"web-service-url", v11);
    sub_1008C0044((std::string *)(a1 + 488), @"web-service-post-data", v11);
    sub_1008C0044((std::string *)(a1 + 520), @"error-code", v11);
    sub_1008C00EC((_WORD *)(a1 + 584), @"is-webview", v11);
    sub_1008C0A40((std::string *)(a1 + 264), v11);
    sub_1008C0C58(a1 + 368, v11);
  }

  return v3 != 0;
}

void sub_1008C09A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10019FD98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1008C0A40(std::string *a1, void *a2)
{
  int v4 = @"tc-content";
  id v5 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v6 = [v5 objectForKey:@"tc-content"];
    if (v6)
    {
      *(_OWORD *)std::string __p = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      *(_OWORD *)id v11 = 0u;
      *(_OWORD *)id v8 = 0u;
      *(_OWORD *)unsigned __int8 v9 = 0u;
      id v7 = +[NSDictionary typecast:v6];
      if (v7)
      {
        sub_1008675A4((std::string *)v8, @"main-text", v7);
        sub_1008675A4((std::string *)&v9[1], @"user-choice-url", v7);
        sub_1008675A4((std::string *)v11, @"accept-tc-post-data", v7);
        sub_1008675A4((std::string *)&__p[1], @"reject-tc-post-data", v7);

        if (a1[4].__r_.__value_.__s.__data_[0])
        {
          std::string::operator=(a1, (const std::string *)v8);
          std::string::operator=(a1 + 1, (const std::string *)&v9[1]);
          std::string::operator=(a1 + 2, (const std::string *)v11);
          std::string::operator=(a1 + 3, (const std::string *)&__p[1]);
        }
        else
        {
          sub_100778F94((char *)a1, (long long *)v8);
          a1[4].__r_.__value_.__s.__data_[0] = 1;
        }
      }
      if (SHIBYTE(v13) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v11[0]);
      }
      if (SHIBYTE(v10) < 0) {
        operator delete(v9[1]);
      }
      if (SHIBYTE(v9[0]) < 0) {
        operator delete(v8[0]);
      }
    }
  }
}

void sub_1008C0C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100169704((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1008C0C58(uint64_t a1, void *a2)
{
  int v4 = @"otp-content";
  id v5 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v6 = [v5 objectForKey:@"otp-content"];
    if (v6)
    {
      *(_OWORD *)std::string __p = 0u;
      long long v15 = 0u;
      memset(v13, 0, sizeof(v13));
      *(_OWORD *)id v12 = 0u;
      id v7 = +[NSDictionary typecast:v6];
      if (v7)
      {
        sub_1008675A4((std::string *)v12, @"last-four-number", v7);
        sub_1008675A4((std::string *)&v13[1], @"otp-url", v7);
        sub_1008675A4((std::string *)__p, @"otp-post-data", v7);
        id v8 = @"otp-code-state";
        id v9 = v7;
        if (objc_opt_respondsToSelector())
        {
          id v10 = [v9 objectForKey:@"otp-code-state"];
          if (v10)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_respondsToSelector()) {
              BYTE8(v15) = [v10 unsignedLongLongValue];
            }
          }
        }
        if (*(unsigned char *)(a1 + 80))
        {
          std::string::operator=((std::string *)a1, (const std::string *)v12);
          std::string::operator=((std::string *)(a1 + 24), (const std::string *)&v13[1]);
          std::string::operator=((std::string *)(a1 + 48), (const std::string *)__p);
          *(unsigned char *)(a1 + 72) = BYTE8(v15);
        }
        else
        {
          if (SHIBYTE(v13[0]) < 0)
          {
            sub_10004FC84((unsigned char *)a1, v12[0], (unint64_t)v12[1]);
          }
          else
          {
            *(_OWORD *)a1 = *(_OWORD *)v12;
            *(void **)(a1 + 16) = v13[0];
          }
          if (SHIBYTE(v13[3]) < 0)
          {
            sub_10004FC84((unsigned char *)(a1 + 24), v13[1], (unint64_t)v13[2]);
          }
          else
          {
            *(_OWORD *)(a1 + 24) = *(_OWORD *)&v13[1];
            *(void **)(a1 + 40) = v13[3];
          }
          id v11 = (unsigned char *)(a1 + 48);
          if (SBYTE7(v15) < 0)
          {
            sub_10004FC84(v11, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            *(_OWORD *)id v11 = *(_OWORD *)__p;
            *(void *)(a1 + 64) = v15;
          }
          *(unsigned char *)(a1 + 72) = BYTE8(v15);
          *(unsigned char *)(a1 + 80) = 1;
        }
      }
      if (SBYTE7(v15) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v13[3]) < 0) {
        operator delete(v13[1]);
      }
      if (SHIBYTE(v13[0]) < 0) {
        operator delete(v12[0]);
      }
    }
  }
}

void sub_1008C0F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v11 + 47) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v11 + 23) < 0) {
    operator delete(*(void **)v11);
  }
  sub_1001F78F8((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1008C0FA8(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  memset(v8, 0, sizeof(v8));
  *(_OWORD *)std::string __p = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  *(_OWORD *)id v3 = 0u;
  if (sub_1008C2E2C((uint64_t)v3, a1))
  {
    sub_1008C3130((uint64_t)a2, (uint64_t)v3);
  }
  else
  {
    *a2 = 0;
    a2[272] = 0;
  }
  sub_100777CB4((uint64_t)&v8[6] + 8);
  sub_1005ADA04((uint64_t)v8);
  if (BYTE8(v7) && SBYTE7(v7) < 0) {
    operator delete(__p[0]);
  }
  if ((_BYTE)v5)
  {
    if (SHIBYTE(v4) < 0) {
      operator delete(v3[1]);
    }
  }
}

void sub_1008C1074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1008C1088(uint64_t *a1, void *a2)
{
  long long v4 = @"transfer-properties";
  id v6 = a2;
  if (*((unsigned char *)a1 + 56))
  {
    long long v7 = objc_opt_new();
    id v8 = @"transfer-metadata";
    id v10 = v7;
    uint64_t v11 = a1[1] - *a1;
    if (v11)
    {
      id v12 = +[NSMutableArray arrayWithCapacity:0xAAAAAAAAAAAAAAABLL * (v11 >> 3)];
      long long v13 = (uint64_t *)*a1;
      int v14 = (uint64_t *)a1[1];
      if ((uint64_t *)*a1 != v14)
      {
        do
        {
          if (*((char *)v13 + 23) >= 0) {
            long long v15 = v13;
          }
          else {
            long long v15 = (uint64_t *)*v13;
          }
          id v16 = +[NSString stringWithUTF8String:v15];
          if (v16) {
            [v12 addObject:v16];
          }

          v13 += 3;
        }
        while (v13 != v14);
      }
      if ([v12 count]) {
        __int16 v17 = v12;
      }
      else {
        __int16 v17 = 0;
      }
    }
    else
    {
      __int16 v17 = 0;
    }
    codec::setItem(v17, (objc_object *)@"transfer-metadata", v10, v9);

    sub_1008C0264(a1 + 3, @"service", v10);
  }
  else
  {
    id v10 = 0;
  }
  codec::setItem((codec *)v10, (objc_object *)@"transfer-properties", v6, v5);
}

void sub_1008C1224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008C1400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL codec::fromJSONObject<entitlements::TransferSIMResponse>(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSDictionary typecast:a2];
  if (v3)
  {
    sub_1008C153C((uint64_t *)a1, v3);
    sub_1008C0044((std::string *)(a1 + 24), @"transfer-url", v3);
    sub_1008C0044((std::string *)(a1 + 56), @"transfer-url-post-data", v3);
    sub_1008C0044((std::string *)(a1 + 88), @"alt-smdp-fqdn", v3);
    sub_1008C00EC((_WORD *)(a1 + 120), @"use-ds", v3);
    sub_1008C00EC((_WORD *)(a1 + 122), @"is-webview", v3);
    sub_1008675A4((std::string *)(a1 + 128), @"error-code", v3);
  }

  return v3 != 0;
}

void sub_1008C152C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008C153C(uint64_t *a1, void *a2)
{
  long long v4 = @"iccid-profile";
  id v35 = a2;
  if (objc_opt_respondsToSelector())
  {
    id v34 = [v35 objectForKey:@"iccid-profile"];
    uint64_t v6 = *a1;
    for (uint64_t i = a1[1]; i != v6; sub_1001A0094(i))
      i -= 96;
    a1[1] = v6;
    char v33 = +[NSArray typecast:v34];
    if (v33)
    {
      unint64_t v7 = (unint64_t)[v33 count];
      uint64_t v36 = (uint64_t)(a1 + 2);
      uint64_t v8 = *a1;
      if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) < v7)
      {
        if (v7 > 0x2AAAAAAAAAAAAAALL) {
          sub_10006A748();
        }
        uint64_t v9 = a1[1];
        id v50 = a1 + 2;
        __int16 v46 = (char *)sub_100157260(v36, v7);
        BOOL v47 = &v46[v9 - v8];
        __int16 v48 = v47;
        uint64_t v49 = &v46[96 * v10];
        sub_1008C329C(a1, &v46);
        sub_1008C33BC((uint64_t)&v46);
      }
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      id obj = v33;
      id v11 = [obj countByEnumeratingWithState:&v41 objects:&v46 count:16];
      if (v11)
      {
        uint64_t v12 = *(void *)v42;
        while (2)
        {
          for (uint64_t j = 0; j != v11; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v42 != v12) {
              objc_enumerationMutation(obj);
            }
            id v14 = *(id *)(*((void *)&v41 + 1) + 8 * (void)j);
            long long v40 = 0u;
            *(_OWORD *)__int16 v38 = 0u;
            memset(v39, 0, sizeof(v39));
            long long v15 = +[NSDictionary typecast:v14];
            if (!v15)
            {
              if ((_BYTE)v40 && SHIBYTE(v39[7]) < 0) {
                operator delete(v39[5]);
              }
              if (LOBYTE(v39[4]) && SHIBYTE(v39[3]) < 0) {
                operator delete(v39[1]);
              }
              if (SHIBYTE(v39[0]) < 0) {
                operator delete(v38[0]);
              }

              goto LABEL_55;
            }
            sub_1008675A4((std::string *)v38, @"iccid", v15);
            sub_1008C0044((std::string *)&v39[1], @"imei", v15);
            sub_1008C0044((std::string *)&v39[5], @"meid", v15);
            sub_1008C00EC((_WORD *)&v40 + 4, @"profile-released", v15);

            unint64_t v16 = a1[1];
            unint64_t v17 = a1[2];
            if (v16 >= v17)
            {
              unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a1) >> 5);
              unint64_t v23 = v22 + 1;
              if (v22 + 1 > 0x2AAAAAAAAAAAAAALL) {
                sub_10006A748();
              }
              unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a1) >> 5);
              if (2 * v24 > v23) {
                unint64_t v23 = 2 * v24;
              }
              if (v24 >= 0x155555555555555) {
                unint64_t v25 = 0x2AAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v25 = v23;
              }
              v45[4] = a1 + 2;
              if (v25) {
                long long v26 = sub_100157260(v36, v25);
              }
              else {
                long long v26 = 0;
              }
              int v27 = (char *)&v26[48 * v22];
              v45[0] = v26;
              v45[1] = v27;
              void v45[3] = &v26[48 * v25];
              long long v28 = *(_OWORD *)v38;
              *((void **)v27 + 2) = v39[0];
              *(_OWORD *)int v27 = v28;
              v38[1] = 0;
              v39[0] = 0;
              v38[0] = 0;
              char v27[24] = 0;
              v27[48] = 0;
              if (LOBYTE(v39[4]))
              {
                long long v29 = *(_OWORD *)&v39[1];
                *((void **)v27 + 5) = v39[3];
                *(_OWORD *)(v27 + 24) = v29;
                memset(&v39[1], 0, 24);
                v27[48] = 1;
              }
              BOOL v30 = (char *)&v26[48 * v22];
              v30[56] = 0;
              __int16 v31 = v30 + 56;
              v31[24] = 0;
              if ((_BYTE)v40)
              {
                long long v32 = *(_OWORD *)&v39[5];
                *((void **)v31 + 2) = v39[7];
                *(_OWORD *)__int16 v31 = v32;
                memset(&v39[5], 0, 24);
                v31[24] = 1;
              }
              v26[48 * v22 + 44] = WORD4(v40);
              v45[2] = v27 + 96;
              sub_1008C329C(a1, v45);
              uint64_t v21 = a1[1];
              sub_1008C33BC((uint64_t)v45);
            }
            else
            {
              long long v18 = *(_OWORD *)v38;
              *(void **)(v16 + 16) = v39[0];
              *(_OWORD *)unint64_t v16 = v18;
              v38[1] = 0;
              v39[0] = 0;
              v38[0] = 0;
              *(unsigned char *)(v16 + 24) = 0;
              *(unsigned char *)(v16 + 48) = 0;
              if (LOBYTE(v39[4]))
              {
                long long v19 = *(_OWORD *)&v39[1];
                *(void **)(v16 + 40) = v39[3];
                *(_OWORD *)(v16 + 24) = v19;
                memset(&v39[1], 0, 24);
                *(unsigned char *)(v16 + 48) = 1;
              }
              *(unsigned char *)(v16 + 56) = 0;
              *(unsigned char *)(v16 + 80) = 0;
              if ((_BYTE)v40)
              {
                long long v20 = *(_OWORD *)&v39[5];
                *(void **)(v16 + 72) = v39[7];
                *(_OWORD *)(v16 + 56) = v20;
                memset(&v39[5], 0, 24);
                *(unsigned char *)(v16 + 80) = 1;
              }
              *(_WORD *)(v16 + 88) = WORD4(v40);
              uint64_t v21 = v16 + 96;
              a1[1] = v16 + 96;
            }
            a1[1] = v21;
            if ((_BYTE)v40 && SHIBYTE(v39[7]) < 0) {
              operator delete(v39[5]);
            }
            if (LOBYTE(v39[4]) && SHIBYTE(v39[3]) < 0) {
              operator delete(v39[1]);
            }
            if (SHIBYTE(v39[0]) < 0) {
              operator delete(v38[0]);
            }
          }
          id v11 = [obj countByEnumeratingWithState:&v41 objects:&v46 count:16];
          if (v11) {
            continue;
          }
          break;
        }
      }

      [obj count];
    }
LABEL_55:
  }
}

void sub_1008C1A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  sub_1008C33BC(v12 - 224);

  _Unwind_Resume(a1);
}

id codec::toJSONObject<entitlements::TransferSIMResponse>(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  sub_1008C1C20((uint64_t *)a1, v2);
  sub_1008C0264((uint64_t *)(a1 + 24), @"transfer-url", v2);
  sub_1008C0264((uint64_t *)(a1 + 56), @"transfer-url-post-data", v2);
  sub_1008C0264((uint64_t *)(a1 + 88), @"alt-smdp-fqdn", v2);
  sub_1008C02F0((unsigned char *)(a1 + 120), @"use-ds", v2);
  sub_1008C02F0((unsigned char *)(a1 + 122), @"is-webview", v2);
  sub_1008C01C4((uint64_t *)(a1 + 128), @"error-code", v2);

  return v2;
}

void sub_1008C1C10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008C1C20(uint64_t *a1, void *a2)
{
  long long v4 = @"iccid-profile";
  uint64_t v6 = a2;
  uint64_t v7 = a1[1] - *a1;
  if (v7)
  {
    uint64_t v8 = +[NSMutableArray arrayWithCapacity:0xAAAAAAAAAAAAAAABLL * (v7 >> 5)];
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    if (*a1 != v10)
    {
      do
      {
        id v11 = objc_opt_new();
        uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
        if ((v12 & 0x80u) != 0) {
          uint64_t v12 = *(void *)(v9 + 8);
        }
        if (v12) {
          sub_1008C01C4((uint64_t *)v9, @"iccid", v11);
        }
        sub_1008C0264((uint64_t *)(v9 + 24), @"imei", v11);
        sub_1008C0264((uint64_t *)(v9 + 56), @"meid", v11);
        sub_1008C02F0((unsigned char *)(v9 + 88), @"profile-released", v11);
        if (v11) {
          [v8 addObject:v11];
        }

        v9 += 96;
      }
      while (v9 != v10);
    }
    if ([v8 count]) {
      long long v13 = v8;
    }
    else {
      long long v13 = 0;
    }
  }
  else
  {
    long long v13 = 0;
  }
  codec::setItem(v13, (objc_object *)@"iccid-profile", v6, v5);
}

void sub_1008C1DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008C1E00(uint64_t a1)
{
  codec::toJSONObject<entitlements::TransferSIMResponse>(a1);
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  +[NSObject jsonStringWithObject:](NSObject, "jsonStringWithObject:");
}

void sub_1008C1E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL codec::fromJSONObject<entitlements::TransferSIMViaWebServiceResponse>(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSDictionary typecast:a2];
  if (v3)
  {
    long long v4 = @"transfer-state";
    id v5 = v3;
    if (objc_opt_respondsToSelector())
    {
      id v6 = [v5 objectForKey:@"transfer-state"];
      if (v6)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_respondsToSelector()) {
          *(unsigned char *)a1 = [v6 unsignedLongLongValue];
        }
      }
    }
    sub_1008C0044((std::string *)(a1 + 8), @"iccid", v5);
    sub_1008C0044((std::string *)(a1 + 40), @"iccid-state", v5);
    sub_1008C0044((std::string *)(a1 + 72), @"alt-smdp-fqdn", v5);
    sub_1008C00EC((_WORD *)(a1 + 104), @"use-ds", v5);
    sub_1008675A4((std::string *)(a1 + 112), @"reason-code", v5);
    sub_1008675A4((std::string *)(a1 + 136), @"reason-code-url", v5);
  }

  return v3 != 0;
}

void sub_1008C1FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSString *codec::toJSONObject<entitlements::TransferSIMViaWebServiceResponse>(uint64_t *a1)
{
  uint64_t v2 = objc_opt_new();
  id v3 = @"transfer-state";
  long long v4 = v2;
  id v5 = +[NSNumber numberWithUnsignedLongLong:*(unsigned __int8 *)a1];
  codec::setItem(v5, (objc_object *)@"transfer-state", v4, v6);

  sub_1008C0264(a1 + 1, @"iccid", v4);
  sub_1008C0264(a1 + 5, @"iccid-state", v4);
  sub_1008C0264(a1 + 9, @"alt-smdp-fqdn", v4);
  sub_1008C02F0((unsigned char *)a1 + 104, @"use-ds", v4);
  sub_1008C01C4(a1 + 14, @"reason-code", v4);
  sub_1008C01C4(a1 + 17, @"reason-code-url", v4);

  return v4;
}

void sub_1008C2124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1008C2158(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  *(_OWORD *)uint64_t v10 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)id v5 = 0u;
  long long v6 = 0u;
  *(_OWORD *)id v3 = 0u;
  long long v4 = 0u;
  if (sub_1008C349C((uint64_t)v3, a1))
  {
    sub_1008C3588((uint64_t)a2, (uint64_t)v3);
  }
  else
  {
    *a2 = 0;
    a2[160] = 0;
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v10[0]);
  }
  if ((_BYTE)v9 && SHIBYTE(v8) < 0) {
    operator delete(v7[1]);
  }
  if (LOBYTE(v7[0]) && SHIBYTE(v6) < 0) {
    operator delete(v5[1]);
  }
  if (LOBYTE(v5[0]))
  {
    if (SHIBYTE(v4) < 0) {
      operator delete(v3[1]);
    }
  }
}

void sub_1008C2228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1008C223C(uint64_t *a1)
{
  codec::toJSONObject<entitlements::TransferSIMViaWebServiceResponse>(a1);
  id v1 = (id)objc_claimAutoreleasedReturnValue();
  +[NSObject jsonStringWithObject:](NSObject, "jsonStringWithObject:");
}

void sub_1008C229C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1008C22B0(uint64_t *a1)
{
  id v2 = (id)objc_opt_new();
  sub_1008C0264(a1, @"web-service-post-data", v2);
  sub_1008C0264(a1 + 4, @"carrierPostData", v2);
  sub_1008C0264(a1 + 8, @"otp-code", v2);
  sub_1008C0264(a1 + 12, @"otp-post-data", v2);
  sub_1008C0264(a1 + 16, @"tc-post-data", v2);
  sub_1008C0264(a1 + 20, @"user-choice", v2);
  sub_1008C1088(a1 + 24, v2);
  +[NSObject jsonStringWithObject:v2];
}

void sub_1008C23A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1008C23BC(std::string *a1, void *a2)
{
  id v3 = a2;
  long long v4 = v3;
  if (v3)
  {
    memset(&__p, 0, sizeof(__p));
    id v5 = v3;
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass)
    {
      id v7 = v5;
      sub_10003ED78(&__p, (char *)[v7 UTF8String]);

      sub_100093B44(a1, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
    }
  }
  else
  {
    char isKindOfClass = 1;
  }

  return isKindOfClass & 1;
}

void sub_1008C2484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1008C24B0(BOOL *a1, void *a2)
{
  id v3 = a2;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    *a1 = [v3 unsignedLongLongValue] != 0;
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_1008C2534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1008C2544(uint64_t *a1)
{
  if (*((unsigned char *)a1 + 24))
  {
    if (*((char *)a1 + 23) >= 0) {
      id v1 = a1;
    }
    else {
      id v1 = (uint64_t *)*a1;
    }
    id v2 = +[NSString stringWithUTF8String:v1];
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

NSString *sub_1008C259C(uint64_t a1)
{
  id v2 = objc_opt_new();
  sub_1008C01C4((uint64_t *)a1, @"eid", v2);
  sub_1008C1C20((uint64_t *)(a1 + 24), v2);
  sub_1008C0264((uint64_t *)(a1 + 48), @"device-type", v2);
  id v3 = @"associated-subscription";
  id v5 = v2;
  if (*(unsigned char *)(a1 + 84))
  {
    long long v6 = +[NSNumber numberWithUnsignedLongLong:*(unsigned int *)(a1 + 80)];
  }
  else
  {
    long long v6 = 0;
  }
  codec::setItem(v6, (objc_object *)@"associated-subscription", v5, v4);

  sub_1008C0264((uint64_t *)(a1 + 88), @"sim-alliance-profile-version", v5);
  sub_1008C0264((uint64_t *)(a1 + 120), @"gsma-sgp22-version", v5);

  return v5;
}

void sub_1008C26A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *sub_1008C26DC(std::string *__dst, std::string *__str)
{
  if (__dst[6].__r_.__value_.__s.__data_[8])
  {
    std::string::operator=(__dst, __str);
    if (__dst != __str) {
      sub_1008C278C((uint64_t)&__dst[1], (std::string *)__str[1].__r_.__value_.__l.__data_, (std::string *)__str[1].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(__str[1].__r_.__value_.__l.__size_ - __str[1].__r_.__value_.__r.__words[0]) >> 5));
    }
    sub_100179AF8(__dst + 2, __str + 2);
    int v4 = __str[3].__r_.__value_.__r.__words[1];
    __dst[3].__r_.__value_.__s.__data_[12] = __str[3].__r_.__value_.__s.__data_[12];
    LODWORD(__dst[3].__r_.__value_.__r.__words[1]) = v4;
    sub_100179AF8((std::string *)((char *)__dst + 88), (std::string *)((char *)__str + 88));
    sub_100179AF8(__dst + 5, __str + 5);
  }
  else
  {
    sub_1001A0190(__dst, (long long *)__str);
    __dst[6].__r_.__value_.__s.__data_[8] = 1;
  }
  return __dst;
}

void sub_1008C278C(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) < a4)
  {
    sub_1003110D0((void **)a1);
    if (a4 > 0x2AAAAAAAAAAAAAALL) {
      sub_10006A748();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 5) >= 0x155555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_10019FF04((void *)a1, v11);
    uint64_t v12 = sub_10019FF58(v8, (uint64_t)__str, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5) < a4)
  {
    long long v13 = (std::string *)((char *)__str + 32 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 5));
    sub_1008C290C((int)&v17, __str, v13, v9);
    uint64_t v12 = sub_10019FF58(v8, (uint64_t)v13, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1008C290C((int)&v18, __str, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 96;
      sub_1001A0094(v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_1008C28FC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1008C2904(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *sub_1008C290C(int a1, std::string *__str, std::string *a3, std::string *this)
{
  id v5 = __str;
  if (__str == a3) {
    return __str;
  }
  long long v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    sub_100179AF8(this + 1, v5 + 1);
    sub_100179AF8((std::string *)((char *)this + 56), (std::string *)((char *)v5 + 56));
    LOWORD(this[3].__r_.__value_.__r.__words[2]) = v5[3].__r_.__value_.__r.__words[2];
    this += 4;
    v5 += 4;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_1008C2990(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  if (*(unsigned char *)(a2 + 64))
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 40) = 0;
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(unsigned char *)(a1 + 72) = 0;
  uint64_t v6 = a1 + 72;
  *(unsigned char *)(a1 + 224) = 0;
  if (*(unsigned char *)(a2 + 224))
  {
    sub_1008C2C68(v6, (long long *)(a2 + 72));
    *(unsigned char *)(a1 + 224) = 1;
  }
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  if (*(unsigned char *)(a2 + 256))
  {
    long long v7 = *(_OWORD *)(a2 + 232);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = v7;
    *(void *)(a2 + 240) = 0;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 232) = 0;
    *(unsigned char *)(a1 + 256) = 1;
  }
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 360) = 0;
  if (*(unsigned char *)(a2 + 360))
  {
    long long v8 = *(_OWORD *)(a2 + 264);
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = v8;
    *(void *)(a2 + 272) = 0;
    *(void *)(a2 + 280) = 0;
    *(void *)(a2 + 264) = 0;
    long long v9 = *(_OWORD *)(a2 + 288);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = v9;
    *(void *)(a2 + 296) = 0;
    *(void *)(a2 + 304) = 0;
    *(void *)(a2 + 288) = 0;
    long long v10 = *(_OWORD *)(a2 + 312);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(_OWORD *)(a1 + 312) = v10;
    *(void *)(a2 + 320) = 0;
    *(void *)(a2 + 328) = 0;
    *(void *)(a2 + 312) = 0;
    long long v11 = *(_OWORD *)(a2 + 336);
    *(void *)(a1 + 352) = *(void *)(a2 + 352);
    *(_OWORD *)(a1 + 336) = v11;
    *(void *)(a2 + 336) = 0;
    *(void *)(a2 + 344) = 0;
    *(void *)(a2 + 352) = 0;
    *(unsigned char *)(a1 + 360) = 1;
  }
  *(unsigned char *)(a1 + 368) = 0;
  *(unsigned char *)(a1 + 448) = 0;
  if (*(unsigned char *)(a2 + 448))
  {
    long long v12 = *(_OWORD *)(a2 + 368);
    *(void *)(a1 + 384) = *(void *)(a2 + 384);
    *(_OWORD *)(a1 + 368) = v12;
    *(void *)(a2 + 376) = 0;
    *(void *)(a2 + 384) = 0;
    *(void *)(a2 + 368) = 0;
    long long v13 = *(_OWORD *)(a2 + 392);
    *(void *)(a1 + 408) = *(void *)(a2 + 408);
    *(_OWORD *)(a1 + 392) = v13;
    *(void *)(a2 + 400) = 0;
    *(void *)(a2 + 408) = 0;
    *(void *)(a2 + 392) = 0;
    long long v14 = *(_OWORD *)(a2 + 416);
    *(void *)(a1 + 432) = *(void *)(a2 + 432);
    *(_OWORD *)(a1 + 416) = v14;
    *(void *)(a2 + 424) = 0;
    *(void *)(a2 + 432) = 0;
    *(void *)(a2 + 416) = 0;
    *(unsigned char *)(a1 + 440) = *(unsigned char *)(a2 + 440);
    *(unsigned char *)(a1 + 448) = 1;
  }
  *(unsigned char *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 480) = 0;
  if (*(unsigned char *)(a2 + 480))
  {
    long long v15 = *(_OWORD *)(a2 + 456);
    *(void *)(a1 + 472) = *(void *)(a2 + 472);
    *(_OWORD *)(a1 + 456) = v15;
    *(void *)(a2 + 464) = 0;
    *(void *)(a2 + 472) = 0;
    *(void *)(a2 + 456) = 0;
    *(unsigned char *)(a1 + 480) = 1;
  }
  *(unsigned char *)(a1 + 488) = 0;
  *(unsigned char *)(a1 + 512) = 0;
  if (*(unsigned char *)(a2 + 512))
  {
    long long v16 = *(_OWORD *)(a2 + 488);
    *(void *)(a1 + 504) = *(void *)(a2 + 504);
    *(_OWORD *)(a1 + 488) = v16;
    *(void *)(a2 + 496) = 0;
    *(void *)(a2 + 504) = 0;
    *(void *)(a2 + 488) = 0;
    *(unsigned char *)(a1 + 512) = 1;
  }
  *(unsigned char *)(a1 + 520) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  if (*(unsigned char *)(a2 + 544))
  {
    long long v17 = *(_OWORD *)(a2 + 520);
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(_OWORD *)(a1 + 520) = v17;
    *(void *)(a2 + 536) = 0;
    *(void *)(a2 + 528) = 0;
    *(void *)(a2 + 520) = 0;
    *(unsigned char *)(a1 + 544) = 1;
  }
  *(unsigned char *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 576) = 0;
  if (*(unsigned char *)(a2 + 576))
  {
    long long v18 = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
    *(_OWORD *)(a1 + 552) = v18;
    *(void *)(a2 + 568) = 0;
    *(void *)(a2 + 560) = 0;
    *(void *)(a2 + 552) = 0;
    *(unsigned char *)(a1 + 576) = 1;
  }
  *(_WORD *)(a1 + 584) = *(_WORD *)(a2 + 584);
  return a1;
}

__n128 sub_1008C2C68(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  __n128 result = *(__n128 *)((char *)a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (*((unsigned char *)a2 + 72))
  {
    __n128 result = (__n128)a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(__n128 *)(a1 + 48) = result;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    *(unsigned char *)(a1 + 72) = 1;
  }
  uint64_t v4 = *((void *)a2 + 10);
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = v4;
  *(unsigned char *)(a1 + 112) = 0;
  if (*((unsigned char *)a2 + 112))
  {
    __n128 result = *(__n128 *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(__n128 *)(a1 + 88) = result;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 11) = 0;
    *(unsigned char *)(a1 + 112) = 1;
  }
  *(unsigned char *)(a1 + 120) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  if (*((unsigned char *)a2 + 144))
  {
    __n128 result = *(__n128 *)((char *)a2 + 120);
    *(void *)(a1 + 136) = *((void *)a2 + 17);
    *(__n128 *)(a1 + 120) = result;
    *((void *)a2 + 16) = 0;
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 15) = 0;
    *(unsigned char *)(a1 + 144) = 1;
  }
  return result;
}

uint64_t sub_1008C2D48(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 576) && *(char *)(a1 + 575) < 0) {
    operator delete(*(void **)(a1 + 552));
  }
  if (*(unsigned char *)(a1 + 544) && *(char *)(a1 + 543) < 0) {
    operator delete(*(void **)(a1 + 520));
  }
  if (*(unsigned char *)(a1 + 512) && *(char *)(a1 + 511) < 0) {
    operator delete(*(void **)(a1 + 488));
  }
  if (*(unsigned char *)(a1 + 480) && *(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  sub_100777CB4(a1 + 368);
  sub_1005ADA04(a1 + 264);
  if (*(unsigned char *)(a1 + 256) && *(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  sub_1001A0540(a1 + 72);
  if (*(unsigned char *)(a1 + 64) && *(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(unsigned char *)(a1 + 32) && *(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

BOOL sub_1008C2E2C(uint64_t a1, uint64_t a2)
{
  id v3 = +[NSObject objectWithJSONString:a2];
  uint64_t v4 = +[NSDictionary typecast:v3];
  if (v4)
  {
    long long v5 = @"pre-flight-state";
    id v6 = v4;
    if (objc_opt_respondsToSelector())
    {
      id v7 = [v6 objectForKey:@"pre-flight-state"];
      long long v8 = v7;
      if (v7)
      {
        id v9 = v7;
        objc_opt_class();
        if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_respondsToSelector())
        {
          unsigned __int8 v10 = [v9 unsignedLongLongValue];

          *(_WORD *)a1 = v10 | 0x100;
        }
        else
        {
        }
      }
    }
    sub_1008C0044((std::string *)(a1 + 8), @"iccid", v6);
    long long v11 = @"reason-code";
    id v12 = v6;
    if (objc_opt_respondsToSelector())
    {
      id v13 = [v12 objectForKey:@"reason-code"];
      long long v14 = v13;
      if (v13)
      {
        id v15 = v13;
        objc_opt_class();
        if (objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_respondsToSelector())
        {
          unsigned int v16 = [v15 longLongValue];

          *(_DWORD *)(a1 + 40) = v16;
          *(unsigned char *)(a1 + 44) = 1;
        }
        else
        {
        }
      }
    }
    sub_1008C0044((std::string *)(a1 + 48), @"reason-code-url", v12);
    sub_1008C0A40((std::string *)(a1 + 80), v12);
    sub_1008C0C58(a1 + 184, v12);
  }

  return v4 != 0;
}

void sub_1008C305C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1008C30CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) && *(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(unsigned char *)(a1 + 32) && *(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1008C3130(uint64_t result, uint64_t a2)
{
  *(_WORD *)__n128 result = *(_WORD *)a2;
  *(unsigned char *)(result + 8) = 0;
  *(unsigned char *)(result + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    long long v2 = *(_OWORD *)(a2 + 8);
    *(void *)(result + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(result + 8) = v2;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(result + 32) = 1;
  }
  uint64_t v3 = *(void *)(a2 + 40);
  *(unsigned char *)(result + 48) = 0;
  *(void *)(result + 40) = v3;
  *(unsigned char *)(result + 72) = 0;
  if (*(unsigned char *)(a2 + 72))
  {
    long long v4 = *(_OWORD *)(a2 + 48);
    *(void *)(result + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(result + 48) = v4;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = 0;
    *(unsigned char *)(result + 72) = 1;
  }
  *(unsigned char *)(result + 80) = 0;
  *(unsigned char *)(result + 176) = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    long long v5 = *(_OWORD *)(a2 + 80);
    *(void *)(result + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(result + 80) = v5;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 80) = 0;
    long long v6 = *(_OWORD *)(a2 + 104);
    *(void *)(result + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(result + 104) = v6;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 104) = 0;
    long long v7 = *(_OWORD *)(a2 + 128);
    *(void *)(result + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(result + 128) = v7;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 128) = 0;
    long long v8 = *(_OWORD *)(a2 + 152);
    *(void *)(result + 168) = *(void *)(a2 + 168);
    *(_OWORD *)(result + 152) = v8;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 168) = 0;
    *(unsigned char *)(result + 176) = 1;
  }
  *(unsigned char *)(result + 184) = 0;
  *(unsigned char *)(result + 264) = 0;
  if (*(unsigned char *)(a2 + 264))
  {
    long long v9 = *(_OWORD *)(a2 + 184);
    *(void *)(result + 200) = *(void *)(a2 + 200);
    *(_OWORD *)(result + 184) = v9;
    *(void *)(a2 + 192) = 0;
    *(void *)(a2 + 200) = 0;
    *(void *)(a2 + 184) = 0;
    long long v10 = *(_OWORD *)(a2 + 208);
    *(void *)(result + 224) = *(void *)(a2 + 224);
    *(_OWORD *)(result + 208) = v10;
    *(void *)(a2 + 216) = 0;
    *(void *)(a2 + 224) = 0;
    *(void *)(a2 + 208) = 0;
    long long v11 = *(_OWORD *)(a2 + 232);
    *(void *)(result + 248) = *(void *)(a2 + 248);
    *(_OWORD *)(result + 232) = v11;
    *(void *)(a2 + 240) = 0;
    *(void *)(a2 + 248) = 0;
    *(void *)(a2 + 232) = 0;
    *(unsigned char *)(result + 256) = *(unsigned char *)(a2 + 256);
    *(unsigned char *)(result + 264) = 1;
  }
  *(unsigned char *)(result + 272) = 1;
  return result;
}

uint64_t *sub_1008C329C(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  long long v5 = (long long *)*result;
  long long v4 = (long long *)result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 96;
    v4 -= 6;
    __n128 result = (uint64_t *)sub_1008C3330(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *v3;
  uint64_t *v3 = v6;
  a2[1] = v7;
  uint64_t v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = v3[2];
  _DWORD v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1008C3330(uint64_t result, long long *a2)
{
  long long v2 = *a2;
  *(void *)(result + 16) = *((void *)a2 + 2);
  *(_OWORD *)__n128 result = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(unsigned char *)(result + 24) = 0;
  *(unsigned char *)(result + 48) = 0;
  if (*((unsigned char *)a2 + 48))
  {
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(result + 40) = *((void *)a2 + 5);
    *(_OWORD *)(result + 24) = v3;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(result + 48) = 1;
  }
  *(unsigned char *)(result + 56) = 0;
  *(unsigned char *)(result + 80) = 0;
  if (*((unsigned char *)a2 + 80))
  {
    long long v4 = *(long long *)((char *)a2 + 56);
    *(void *)(result + 72) = *((void *)a2 + 9);
    *(_OWORD *)(result + 56) = v4;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 7) = 0;
    *(unsigned char *)(result + 80) = 1;
  }
  *(_WORD *)(result + 88) = *((_WORD *)a2 + 44);
  return result;
}

uint64_t sub_1008C33BC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    sub_1001A0094(i - 96);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1008C340C(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v3 = (void **)a1;
  sub_1001A010C(&v3);
  return a1;
}

BOOL sub_1008C349C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = +[NSObject objectWithJSONString:a2];
  BOOL v4 = codec::fromJSONObject<entitlements::TransferSIMViaWebServiceResponse>(a1, (uint64_t)v3);

  return v4;
}

void sub_1008C34EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1008C34FC(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(unsigned char *)(a1 + 96) && *(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(unsigned char *)(a1 + 64) && *(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(unsigned char *)(a1 + 32) && *(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

__n128 sub_1008C3588(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    long long v2 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v2;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  if (*(unsigned char *)(a2 + 64))
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v3;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 40) = 0;
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    long long v4 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v4;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 72) = 0;
    *(unsigned char *)(a1 + 96) = 1;
  }
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  long long v5 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v5;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 112) = 0;
  __n128 result = *(__n128 *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(__n128 *)(a1 + 136) = result;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 136) = 0;
  *(unsigned char *)(a1 + 160) = 1;
  return result;
}

uint64_t sub_1008C3678(wis::MetricFactory *a1)
{
  unsigned int v1 = a1;
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(a1);
  uint64_t v3 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v1);
  if (v3)
  {
    long long v4 = (wis::MetricContainer *)v3;
    long long v5 = sub_10001C8F4(8);
    uint64_t v7 = *v5;
    uint64_t v6 = (std::__shared_weak_count *)v5[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7) {
      operator new();
    }
    if (v6) {
      sub_10004D2C8(v6);
    }
    wis::MetricContainer::~MetricContainer(v4);
    operator delete();
  }
  return 0;
}

void sub_1008C37D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100129880((wis::MetricContainer **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1008C3858(uint64_t a1, _DWORD *a2)
{
  uint64_t result = subscriber::simSlotAsInstance();
  int v5 = a2[7];
  a2[7] = v5 | 4;
  a2[5] = result;
  unsigned int v6 = *(unsigned __int8 *)(a1 + 36);
  if (v6 <= 5)
  {
    a2[7] = v5 | 6;
    a2[4] = v6 + 1;
  }
  return result;
}

uint64_t sub_1008C38B0(wis::MetricFactory *a1)
{
  unsigned int v1 = a1;
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(a1);
  uint64_t v3 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v1);
  if (v3)
  {
    long long v4 = (wis::MetricContainer *)v3;
    int v5 = sub_10001C8F4(8);
    uint64_t v7 = *v5;
    unsigned int v6 = (std::__shared_weak_count *)v5[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7) {
      operator new();
    }
    if (v6) {
      sub_10004D2C8(v6);
    }
    wis::MetricContainer::~MetricContainer(v4);
    operator delete();
  }
  return 0;
}

void sub_1008C3A0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100129880((wis::MetricContainer **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1008C3A90(uint64_t a1, _DWORD *a2)
{
  int v3 = *(_DWORD *)(a1 + 32);
  a2[7] |= 2u;
  a2[4] = v3;
  uint64_t result = subscriber::simSlotAsInstance();
  a2[7] |= 4u;
  a2[5] = result;
  return result;
}

uint64_t sub_1008C3AD8(uint64_t a1, int a2)
{
  if (a2 >= 1) {
    return sub_1008C3B60((wis::MetricFactory *)0x800E9);
  }
  return result;
}

uint64_t sub_1008C3B60(wis::MetricFactory *a1)
{
  unsigned int v1 = a1;
  SharedMetricFactory = (wis::MetricFactory *)wis::MetricFactory::getSharedMetricFactory(a1);
  uint64_t v3 = wis::MetricFactory::newMetricContainerWithIdentifier(SharedMetricFactory, v1);
  if (v3)
  {
    long long v4 = (wis::MetricContainer *)v3;
    int v5 = sub_10001C8F4(8);
    uint64_t v7 = *v5;
    unsigned int v6 = (std::__shared_weak_count *)v5[1];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v7) {
      operator new();
    }
    if (v6) {
      sub_10004D2C8(v6);
    }
    wis::MetricContainer::~MetricContainer(v4);
    operator delete();
  }
  return 0;
}

void sub_1008C3CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100129880((wis::MetricContainer **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1008C3D40(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(a2 + 20) = *(unsigned char *)(a1 + 40);
  char v4 = *(unsigned char *)(a1 + 41);
  *(_DWORD *)(a2 + 32) = v3 | 0xE;
  *(unsigned char *)(a2 + 21) = v4;
  uint64_t result = subscriber::simSlotAsInstance();
  *(_DWORD *)(a2 + 32) |= 0x10u;
  *(_DWORD *)(a2 + 24) = result;
  return result;
}

void sub_1008C3D9C(uint64_t a1, void *a2, uint64_t a3, NSObject **a4, uint64_t *a5)
{
  *(void *)a1 = off_1019C4B58;
  *(void *)(a1 + 8) = off_101A0DD60;
  uint64_t v10 = a1 + 16;
  *(void *)(a1 + 16) = off_101A17368;
  *(void *)(a1 + 24) = off_1019A12B8;
  *(void *)(a1 + 32) = off_1019A3738;
  if (a3 > 9) {
    long long v11 = "DATA.PDP:N:";
  }
  else {
    long long v11 = off_101A175B8[(int)a3];
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v17, kCtLoggingSystemName, v11);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  id v12 = *a4;
  *(void *)(a1 + 56) = *a4;
  if (v12) {
    dispatch_retain(v12);
  }
  *(void *)(a1 + 64) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v18, &v17);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 72), (const ctu::OsLogLogger *)v18);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v18);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v17);
  *(void *)a1 = off_101A166F8;
  *(void *)(a1 + 8) = off_101A16D38;
  *(void *)(a1 + 16) = off_101A16F90;
  *(void *)(a1 + 24) = off_101A17060;
  *(void *)(a1 + 32) = off_101A17228;
  *(void *)(a1 + 80) = *a2;
  uint64_t v13 = a2[1];
  *(void *)(a1 + 88) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  uint64_t v14 = *a5;
  id v15 = *a4;
  dispatch_object_t object = v15;
  if (v15) {
    dispatch_retain(v15);
  }
  (*(void (**)(uint64_t, void *, uint64_t, dispatch_object_t *, uint64_t))(*(void *)v14 + 96))(v14, a2, a3, &object, v10);
  if (object) {
    dispatch_release(object);
  }
  *(_DWORD *)(a1 + 128) = a3;
  operator new();
}

void sub_1008C40E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, ctu::OsLogLogger *a10, dispatch_object_t object, char a12, uint64_t a13, char a14)
{
  OsLogContext v17 = (std::__shared_weak_count *)v14[15];
  if (v17) {
    sub_10004D2C8(v17);
  }
  long long v18 = (std::__shared_weak_count *)v14[13];
  if (v18) {
    sub_10004D2C8(v18);
  }
  long long v19 = (std::__shared_weak_count *)v14[11];
  if (v19) {
    sub_10004D2C8(v19);
  }
  ctu::OsLogLogger::~OsLogLogger(a10);
  sub_100087E88(v15);
  _Unwind_Resume(a1);
}

void sub_1008C416C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1008C4254(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  if (v2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void *sub_1008C4288(void *a1)
{
  uint64_t v2 = 0;
  *a1 = off_101A166F8;
  a1[1] = off_101A16D38;
  a1[2] = off_101A16F90;
  a1[3] = off_101A17060;
  a1[4] = off_101A17228;
  do
  {
    if (SHIBYTE(a1[v2 + 42]) < 0) {
      operator delete((void *)a1[v2 + 40]);
    }
    v2 -= 10;
  }
  while (v2 != -20);
  uint64_t v3 = a1[22];
  a1[22] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (std::__shared_weak_count *)a1[21];
  if (v4) {
    sub_10004D2C8(v4);
  }
  int v5 = (std::__shared_weak_count *)a1[19];
  if (v5) {
    sub_10004D2C8(v5);
  }
  uint64_t v6 = a1[17];
  a1[17] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[15];
  if (v7) {
    sub_10004D2C8(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[13];
  if (v8) {
    sub_10004D2C8(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[11];
  if (v9) {
    sub_10004D2C8(v9);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 9));
  sub_100087E88(a1 + 5);
  return a1;
}

void *sub_1008C4420(uint64_t a1)
{
  return sub_1008C4288((void *)(a1 - 8));
}

void *sub_1008C4428(uint64_t a1)
{
  return sub_1008C4288((void *)(a1 - 16));
}

void *sub_1008C4430(uint64_t a1)
{
  return sub_1008C4288((void *)(a1 - 24));
}

void *sub_1008C4438(uint64_t a1)
{
  return sub_1008C4288((void *)(a1 - 32));
}

void sub_1008C4440(void *a1)
{
  sub_1008C4288(a1);

  operator delete();
}

void sub_1008C4478(uint64_t a1)
{
  sub_1008C4288((void *)(a1 - 8));

  operator delete();
}

void sub_1008C44B4(uint64_t a1)
{
  sub_1008C4288((void *)(a1 - 16));

  operator delete();
}

void sub_1008C44F0(uint64_t a1)
{
  sub_1008C4288((void *)(a1 - 24));

  operator delete();
}

void sub_1008C452C(uint64_t a1)
{
  sub_1008C4288((void *)(a1 - 32));

  operator delete();
}

void sub_1008C4570(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 136);
  uint64_t v2 = *(void **)(v1 + 8);
  for (uint64_t i = *(void **)(v1 + 16); v2 != i; v2 += 9)
  {
    char v4 = (void *)*v2;
    if ((void *)*v2 != v2 + 1)
    {
      do
      {
        uint64_t v5 = v4[4];
        uint64_t v6 = (std::__shared_weak_count *)v4[5];
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t))(*(void *)v5 + 240))(v5);
        if (v6) {
          sub_10004D2C8(v6);
        }
        uint64_t v7 = (void *)v4[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v4[2];
            BOOL v9 = *v8 == (void)v4;
            char v4 = v8;
          }
          while (!v9);
        }
        char v4 = v8;
      }
      while (v8 != v2 + 1);
    }
  }
}

void sub_1008C4644(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C465C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void **)(v2 + 8);
  for (uint64_t i = *(void **)(v2 + 16); v3 != i; v3 += 9)
  {
    uint64_t v6 = (void *)*v3;
    if ((void *)*v3 != v3 + 1)
    {
      do
      {
        uint64_t v8 = v6[4];
        uint64_t v7 = (std::__shared_weak_count *)v6[5];
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 56))(v8) == a2
          || anyContextType())
        {
          (*(void (**)(uint64_t))(*(void *)v8 + 232))(v8);
        }
        if (v7) {
          sub_10004D2C8(v7);
        }
        BOOL v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            BOOL v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v6[2];
            BOOL v11 = *v10 == (void)v6;
            uint64_t v6 = v10;
          }
          while (!v11);
        }
        uint64_t v6 = v10;
      }
      while (v10 != v3 + 1);
    }
  }
}

void sub_1008C477C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008C4794(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 144);
  if (!v2) {
    return 9999;
  }
  uint64_t v3 = *(void *)(a1 + 160);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 504))(v2, 999);
  if (!v3) {
    return v4;
  }
  LODWORD(result) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 160) + 504))(*(void *)(a1 + 160), 999);
  if (result >= v4) {
    return v4;
  }
  else {
    return result;
  }
}

void sub_1008C4848(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (!sub_1008C4968(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16))
    || (uint64_t v6 = (void *)sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16)), v7 = v6 + 1, v8 = (void *)*v6, (void *)*v6 == v6 + 1))
  {
LABEL_14:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v10 = v8[4];
      BOOL v9 = (std::__shared_weak_count *)v8[5];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 56))(v10) == a2) {
        break;
      }
      if (v9) {
        sub_10004D2C8(v9);
      }
      BOOL v11 = (void *)v8[1];
      if (v11)
      {
        do
        {
          id v12 = v11;
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          id v12 = (void *)v8[2];
          BOOL v13 = *v12 == (void)v8;
          uint64_t v8 = v12;
        }
        while (!v13);
      }
      uint64_t v8 = v12;
      if (v12 == v7) {
        goto LABEL_14;
      }
    }
    *a3 = v10;
    a3[1] = v9;
  }
}

void sub_1008C4950(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008C4968(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v3 = a1 + 72;
  do
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v3 - 8);
    uint64_t v8 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t matched = DataUtils::matchPersonality();
    if (v8) {
      sub_10004D2C8(v8);
    }
    if (v3 == a2) {
      char v6 = 1;
    }
    else {
      char v6 = matched;
    }
    v3 += 72;
  }
  while ((v6 & 1) == 0);
  return matched;
}

void sub_1008C4A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008C4A18(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
LABEL_9:
  }
    __assert_rtn("at", "PerPersonalityDataContainer.h", 103, "0");
  uint64_t v3 = a1;
  while (1)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 64);
    uint64_t v7 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char matched = DataUtils::matchPersonality();
    if (v7) {
      sub_10004D2C8(v7);
    }
    if (matched) {
      return v3;
    }
    v3 += 72;
    if (v3 == a2) {
      goto LABEL_9;
    }
  }
}

void sub_1008C4AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C4AE0(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (!sub_1008C4968(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16))
    || (char v6 = (void *)sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16)), v7 = v6 + 1, v8 = (void *)*v6, (void *)*v6 == v6 + 1))
  {
LABEL_14:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    while (1)
    {
      *a3 = 0;
      a3[1] = 0;
      uint64_t v9 = v8[4];
      uint64_t v10 = (std::__shared_weak_count *)v8[5];
      *a3 = v9;
      a3[1] = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 56))(v9) == a2) {
        break;
      }
      if (v10) {
        sub_10004D2C8(v10);
      }
      BOOL v11 = (void *)v8[1];
      if (v11)
      {
        do
        {
          id v12 = v11;
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          id v12 = (void *)v8[2];
          BOOL v13 = *v12 == (void)v8;
          uint64_t v8 = v12;
        }
        while (!v13);
      }
      uint64_t v8 = v12;
      if (v12 == v7) {
        goto LABEL_14;
      }
    }
  }
}

void sub_1008C4BDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C4BF4(uint64_t a1, int a2, uint64_t a3)
{
  if ((validContextType() & 1) == 0)
  {
    id v15 = *(NSObject **)(a1 + 72);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v18 = 136315394;
    *(void *)long long v19 = "registerDataDriver";
    *(_WORD *)&v19[8] = 2080;
    *(void *)&v19[10] = asString();
    unsigned int v16 = "#E %s: wrong context type: %s";
    OsLogContext v17 = v15;
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, (uint8_t *)&v18, 0x16u);
    return;
  }
  char v6 = *(char **)a3;
  uint64_t v7 = *(NSObject **)(a1 + 72);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (!v6)
  {
    if (!v8) {
      return;
    }
    int v18 = 136315394;
    *(void *)long long v19 = "registerDataDriver";
    *(_WORD *)&v19[8] = 2080;
    *(void *)&v19[10] = asString();
    unsigned int v16 = "#N %s: data driver is empty for: %s";
    OsLogContext v17 = v7;
    goto LABEL_15;
  }
  if (v8)
  {
    (*(void (**)(char *))(*(void *)&v6[*(void *)(*(void *)v6 - 56)] + 24))(&v6[*(void *)(*(void *)v6 - 56)]);
    int v18 = 136315650;
    *(void *)long long v19 = "registerDataDriver";
    *(_WORD *)&v19[8] = 2080;
    *(void *)&v19[10] = subscriber::asString();
    __int16 v20 = 2080;
    uint64_t v21 = asString();
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s: Registering driver %s for context type: %s", (uint8_t *)&v18, 0x20u);
    char v6 = *(char **)a3;
  }
  uint64_t v9 = *(uint64_t **)(a1 + 136);
  (*(void (**)(int *__return_ptr))(*(void *)&v6[*(void *)(*(void *)v6 - 56)] + 16))(&v18);
  uint64_t v10 = sub_1008C4E94(v9, (uint64_t *)&v18);
  if (*(void *)&v19[4]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v19[4]);
  }
  id v12 = *(char **)a3;
  uint64_t v11 = *(void *)(a3 + 8);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(v10 + 24 + 16 * a2) = v12;
  uint64_t v13 = v10 + 24 + 16 * a2;
  uint64_t v14 = *(std::__shared_weak_count **)(v13 + 8);
  *(void *)(v13 + 8) = v11;
  if (v14) {
    sub_10004D2C8(v14);
  }
}

void sub_1008C4E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008C4E94(uint64_t *a1, uint64_t *a2)
{
  if (sub_1008C4968(a1[1], a1[2]))
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
    return sub_1008C4A18(v4, v5);
  }
  else
  {
    v32[0] = 0;
    v32[1] = 0;
    __int16 v31 = v32;
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v7 = a2[1];
    uint64_t v35 = *a2;
    uint64_t v36 = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = a1[3];
    unint64_t v9 = a1[2];
    if (v9 >= v8)
    {
      uint64_t v11 = a1[1];
      unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v9 - v11) >> 3);
      if (v12 + 1 > 0x38E38E38E38E38ELL) {
        sub_10006A748();
      }
      unint64_t v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - v11) >> 3);
      uint64_t v14 = 2 * v13;
      if (2 * v13 <= v12 + 1) {
        uint64_t v14 = v12 + 1;
      }
      if (v13 >= 0x1C71C71C71C71C7) {
        unint64_t v15 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v15 = v14;
      }
      long long v40 = a1 + 3;
      if (v15)
      {
        if (v15 > 0x38E38E38E38E38ELL) {
          sub_10006A7CC();
        }
        unsigned int v16 = (char *)operator new(72 * v15);
      }
      else
      {
        unsigned int v16 = 0;
      }
      int v37 = v16;
      v38.i64[0] = (uint64_t)&v16[72 * v12];
      v38.i64[1] = v38.i64[0];
      int v39 = &v16[72 * v15];
      sub_1008DBD70(v38.i64[0], &v31);
      uint64_t v17 = v38.i64[0];
      uint64_t v10 = v38.i64[1] + 72;
      v38.i64[1] += 72;
      uint64_t v18 = a1[1];
      unint64_t v19 = a1[2];
      if (v19 == v18)
      {
        int64x2_t v29 = vdupq_n_s64(v19);
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v21 = v38.i64[0];
        do
        {
          unint64_t v22 = v19 - 72;
          uint64_t v23 = sub_1008DBDE8(v21 - 72, (void *)(v19 - 72));
          char v24 = 0;
          uint64_t v25 = 0;
          do
          {
            char v26 = v24;
            long long v27 = *(_OWORD *)(v19 - 48 + 16 * v25);
            *(_OWORD *)(v21 - 48 + 16 * v25) = v27;
            if (*((void *)&v27 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            char v24 = 1;
            uint64_t v25 = 1;
          }
          while ((v26 & 1) == 0);
          *(void *)(v21 - 16) = *(void *)(v19 - 16);
          uint64_t v28 = *(void *)(v19 - 8);
          *(void *)(v21 - 8) = v28;
          if (v28) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
          }
          v20 -= 72;
          v19 -= 72;
          uint64_t v21 = v23;
        }
        while (v22 != v18);
        int64x2_t v29 = *(int64x2_t *)(a1 + 1);
        uint64_t v10 = v38.i64[1];
        uint64_t v17 = v23;
      }
      a1[1] = v17;
      a1[2] = v10;
      int64x2_t v38 = v29;
      uint64_t v30 = a1[3];
      a1[3] = (uint64_t)v39;
      int v39 = (char *)v30;
      int v37 = (char *)v29.i64[0];
      sub_1008DBF78((uint64_t)&v37);
    }
    else
    {
      sub_1008DBD70(a1[2], &v31);
      uint64_t v10 = v9 + 72;
      a1[2] = v10;
    }
    a1[2] = v10;
    sub_1007CECD8((uint64_t)&v31);
    return a1[2] - 72;
  }
}

void sub_1008C5128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_1008C517C(uint64_t a1, int a2, char **a3)
{
  if ((validContextType() & 1) == 0)
  {
    uint64_t v14 = *(NSObject **)(a1 + 72);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v17 = 136315394;
    *(void *)uint64_t v18 = "unregisterDataDriver";
    *(_WORD *)&unsigned char v18[8] = 2080;
    *(void *)&v18[10] = asString();
    unint64_t v15 = "#E %s: wrong context type: %s";
    unsigned int v16 = v14;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v17, 0x16u);
    return;
  }
  char v6 = *a3;
  uint64_t v7 = *(NSObject **)(a1 + 72);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (!v6)
  {
    if (!v8) {
      return;
    }
    int v17 = 136315394;
    *(void *)uint64_t v18 = "unregisterDataDriver";
    *(_WORD *)&unsigned char v18[8] = 2080;
    *(void *)&v18[10] = asString();
    unint64_t v15 = "#N %s: data driver is empty for: %s";
    unsigned int v16 = v7;
    goto LABEL_16;
  }
  if (v8)
  {
    (*(void (**)(char *))(*(void *)&v6[*(void *)(*(void *)v6 - 56)] + 24))(&v6[*(void *)(*(void *)v6 - 56)]);
    int v17 = 136315650;
    *(void *)uint64_t v18 = "unregisterDataDriver";
    *(_WORD *)&unsigned char v18[8] = 2080;
    *(void *)&v18[10] = subscriber::asString();
    __int16 v19 = 2080;
    uint64_t v20 = asString();
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s: Unregistering driver %s for context type: %s", (uint8_t *)&v17, 0x20u);
    char v6 = *a3;
  }
  uint64_t v9 = *(void *)(a1 + 136);
  (*(void (**)(int *__return_ptr))(*(void *)&v6[*(void *)(*(void *)v6 - 56)] + 16))(&v17);
  char v10 = sub_1008C4968(*(void *)(v9 + 8), *(void *)(v9 + 16));
  if (*(void *)&v18[4]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v18[4]);
  }
  if (v10)
  {
    uint64_t v11 = *(void *)(a1 + 136);
    (*(void (**)(int *__return_ptr))(*(void *)&(*a3)[*(void *)(*(void *)*a3 - 56)] + 16))(&v17);
    uint64_t v12 = sub_1008C4A18(*(void *)(v11 + 8), *(void *)(v11 + 16)) + 16 * a2;
    unint64_t v13 = *(std::__shared_weak_count **)(v12 + 32);
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 32) = 0;
    if (v13) {
      sub_10004D2C8(v13);
    }
    if (*(void *)&v18[4]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&v18[4]);
    }
  }
}

void sub_1008C543C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C5464(void *a1, uint64_t a2)
{
  uint64_t v11 = 0;
  uint64_t v4 = (void *)a1[18];
  if (v4)
  {
    (*(void (**)(unsigned char *__return_ptr))(*(void *)((char *)v4 + *(void *)(*v4 - 56)) + 16))(buf);
    uint64_t v5 = *(void *)buf;
    uint64_t v11 = *(std::__shared_weak_count **)&buf[8];
    char v6 = a1[9];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = "handleDataContextAborted";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: active settings aborted", buf, 0xCu);
    }
    (*(void (**)(void, uint64_t))(*(void *)a1[18] + 368))(a1[18], a2);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (validContextType())
  {
    if (v5
      && sub_1008C4968(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16))
      && *(void *)(sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16)) + 16 * (int)a2 + 24))
    {
      uint64_t v7 = *(void *)(sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16)) + 16 * (int)a2 + 24);
      uint64_t v8 = sub_1008C56E4((uint64_t)a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 176))(v7, v8);
    }
  }
  else
  {
    uint64_t v9 = a1[9];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = asString();
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "handleDataContextAborted";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
    }
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
}

void sub_1008C56B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008C56E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 144);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 152);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v2)
  {
    uint64_t v4 = 0;
    if (!v3) {
      return v4;
    }
    goto LABEL_5;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
  if (v3) {
LABEL_5:
  }
    sub_10004D2C8(v3);
  return v4;
}

void sub_1008C5764(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C577C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1008C5784(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 144);
  if (v3)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(NSObject **)(result + 72);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315138;
      uint64_t v9 = "handleDataContextMOBIKEDone";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s: active settings mobike done", (uint8_t *)&v8, 0xCu);
      uint64_t v3 = *(void *)(v6 + 144);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 376))(v3, a2, a3);
  }
  return result;
}

uint64_t sub_1008C5884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1008C5784(a1 - 8, a2, a3);
}

uint64_t sub_1008C588C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 144);
  if (v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(NSObject **)(result + 72);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      uint64_t v7 = "retryPendingActivations";
      __int16 v8 = 2080;
      uint64_t v9 = asString();
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: retrying for %s", (uint8_t *)&v6, 0x16u);
      uint64_t v2 = *(void *)(v4 + 144);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 384))(v2, a2);
  }
  return result;
}

uint64_t sub_1008C5990(uint64_t a1, uint64_t a2)
{
  return sub_1008C588C(a1 - 8, a2);
}

uint64_t sub_1008C5998(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t result = *(void *)(a1 + 144);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 392))(result);
    BOOL v11 = !result || a7 == 0;
    if (!v11 && *a3 != 0)
    {
      int v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 32))(*(void *)(a1 + 112));
      int v14 = *a3;
      int v15 = *a3 & v13;
      if (v15) {
        BOOL v16 = v15 == v14;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16)
      {
        int v17 = *(NSObject **)(a1 + 72);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          int v18 = 136315650;
          __int16 v19 = "validateIPFamily";
          __int16 v20 = 1024;
          int v21 = v14;
          __int16 v22 = 1024;
          int v23 = v15;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I %s: IP family adjusted from %d to %d", (uint8_t *)&v18, 0x18u);
        }
        *a3 = v15;
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_1008C5AEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 32))();
}

uint64_t sub_1008C5B14(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  return sub_1008C5998(a1 - 8, a2, a3, a4, a5, a6, a7);
}

void sub_1008C5B1C(uint64_t a1, unsigned int a2, unint64_t *a3, uint64_t a4)
{
  __int16 v8 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    int v17 = "proxyUpdate";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  if (*(void *)(a1 + 144))
  {
    unint64_t v9 = *a3;
    unint64_t v10 = a3[1];
    if (*a3 != v10)
    {
      do
      {
        BOOL v11 = *(NSObject **)(a1 + 72);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v12 = v9;
          if (*(char *)(v9 + 23) < 0) {
            unint64_t v12 = *(void *)v9;
          }
          *(_DWORD *)std::string buf = 136315394;
          int v17 = "proxyUpdate";
          __int16 v18 = 2080;
          unint64_t v19 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Adding ipv proxy %s", buf, 0x16u);
        }
        v9 += 24;
      }
      while (v9 != v10);
    }
    int v13 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
      int v15 = "";
      int v17 = "proxyUpdate";
      *(_DWORD *)std::string buf = 136315650;
      if (a4) {
        int v15 = " in handover";
      }
      __int16 v18 = 2048;
      unint64_t v19 = v14;
      __int16 v20 = 2080;
      int v21 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I %s: Read %lu Proxies%s. Posting event", buf, 0x20u);
    }
    (*(void (**)(void, void, unint64_t *, uint64_t))(**(void **)(a1 + 144) + 400))(*(void *)(a1 + 144), a2, a3, a4);
  }
}

void sub_1008C5D60(uint64_t a1, unsigned int a2, unint64_t *a3, uint64_t a4)
{
}

uint64_t sub_1008C5D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315650;
    unint64_t v9 = "applicationIDUpdate";
    __int16 v10 = 1024;
    int v11 = a3;
    __int16 v12 = 2080;
    uint64_t v13 = asString();
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: application ID update: appId=%d for %s", (uint8_t *)&v8, 0x1Cu);
  }
  uint64_t result = *(void *)(a1 + 144);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 408))(result, a2, a3);
  }
  return result;
}

uint64_t sub_1008C5E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1008C5D68(a1 - 8, a2, a3);
}

void sub_1008C5E80(uint64_t a1, const void *a2, int64_t __n)
{
  uint64_t v5 = a1 + 376;
  *(_WORD *)(a1 + 384) = -1;
  *(void *)(a1 + 376) = -1;
  if (__n > 9 || (memcpy((void *)(a1 + 376), a2, __n), __n >= 1))
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = *(unsigned __int8 *)(v5 + v6);
        *(_DWORD *)std::string buf = 67109376;
        int v10 = v6;
        __int16 v11 = 1024;
        int v12 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I fSnssaiArray[%d]=%d", buf, 0xEu);
      }
      ++v6;
    }
    while (__n != v6);
  }
}

void sub_1008C5F94(uint64_t a1, const void *a2, int64_t a3)
{
}

uint64_t sub_1008C5F9C(uint64_t a1)
{
  return a1 + 376;
}

uint64_t sub_1008C5FA4(uint64_t a1)
{
  return a1 + 368;
}

void sub_1008C5FAC(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    uint64_t v6 = v2;
    uint64_t v7 = v3;
    uint64_t v4 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "updateHandoverPduSessionId invalid sessionId", v5, 2u);
    }
  }
  else
  {
    sub_1008C6024(a1, a2);
  }
}

void sub_1008C6024(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I set PduSessionId=%d", (uint8_t *)v5, 8u);
  }
  *(_DWORD *)(a1 + 408) = a2;
}

void sub_1008C60D0(uint64_t a1, int a2)
{
}

uint64_t sub_1008C60D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315138;
    __int16 v11 = "handleDataContextIPDidGetPcoInfo";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: got pco context ip", (uint8_t *)&v10, 0xCu);
  }
  uint64_t result = *(void *)(a1 + 144);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 416))(result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_1008C61D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1008C60D8(a1 - 8, a2, a3, a4);
}

uint64_t sub_1008C61E0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 144);
  if (v4)
  {
    uint64_t v8 = result;
    unint64_t v9 = *(NSObject **)(result + 72);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      __int16 v11 = "resetActivationBlocker";
      __int16 v12 = 2080;
      uint64_t v13 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s: ActivationBlocker: %s", (uint8_t *)&v10, 0x16u);
      uint64_t v4 = *(void *)(v8 + 144);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v4 + 424))(v4, a2, a3, a4, 0);
  }
  return result;
}

uint64_t sub_1008C62F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1008C61E0(a1 - 8, a2, a3, a4);
}

void sub_1008C6300(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 144);
  if (v3)
  {
    uint64_t v7 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      __int16 v12 = "setActivationBlocker";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s: ActivationBlocker", buf, 0xCu);
      uint64_t v3 = *(void *)(a1 + 144);
    }
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    uint64_t v9 = *a3;
    int v10 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 440))(v3, a2, &v9);
    if (v10) {
      sub_10004D2C8(v10);
    }
  }
}

void sub_1008C6424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C643C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_1008C6444@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t result = *a2;
  if (*a2) {
    return (*(uint64_t (**)(void))(*(void *)result + 224))();
  }
  uint64_t result = *(void *)(a1 + 144);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 224))();
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t sub_1008C6484@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  return sub_1008C6444(a1 - 8, a2, a3);
}

uint64_t sub_1008C648C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7 = *(void *)(a1 + 144);
  if (v7)
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 448))(v7);
    if (!a5) {
      return v8;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (!a5) {
      return v8;
    }
  }
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 32))(*(void *)(a1 + 112));
  if (v9) {
    BOOL v10 = v9 == 3;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    return v8;
  }
  uint64_t v11 = v9;
  if (v8 != 3 && v8)
  {
    if (v8 != v9)
    {
      unint64_t v14 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 136315650;
        BOOL v16 = "getAllowedIPFamily";
        __int16 v17 = 1024;
        int v18 = v8;
        __int16 v19 = 1024;
        int v20 = v11;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#E %s: Handover from %d to %d bound to fail !", (uint8_t *)&v15, 0x18u);
      }
    }
    return v8;
  }
  uint64_t v13 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 136315650;
    BOOL v16 = "getAllowedIPFamily";
    __int16 v17 = 1024;
    int v18 = v8;
    __int16 v19 = 1024;
    int v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I %s: IP family adjusted from %d to %d", (uint8_t *)&v15, 0x18u);
  }
  return v11;
}

uint64_t sub_1008C6658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1008C648C(a1 - 8, a2, a3, a4, a5);
}

uint64_t sub_1008C6660(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 144);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 456))();
  }
  return result;
}

uint64_t sub_1008C6698(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 136);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 456))();
  }
  return result;
}

uint64_t sub_1008C66D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 144);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 160))();
  }
  return result;
}

uint64_t sub_1008C6700(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 136);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 160))();
  }
  return result;
}

uint64_t sub_1008C6730@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 144);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 464))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t sub_1008C676C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 136);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 464))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t sub_1008C67A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 112);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 464))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t sub_1008C67E4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 144);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 472))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t sub_1008C6824@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 136);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 472))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t sub_1008C6864(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 144);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 544))();
  }
  return result;
}

uint64_t sub_1008C689C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 136);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 544))();
  }
  return result;
}

uint64_t sub_1008C68D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 144);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 480))();
  }
  return result;
}

uint64_t sub_1008C690C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 136);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 480))();
  }
  return result;
}

uint64_t sub_1008C6944(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 64))();
}

void sub_1008C696C(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_1008C69E4(a1, a2, 2, 0, &v3);
  uint64_t v2 = v4;
  if (v4)
  {
    sub_10004D2C8(v2);
  }
}

void sub_1008C69CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C69E4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned __int8 v18 = 0;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 568))(a1, a3, 0, 0);
  uint64_t v11 = *a5;
  if (*a5) {
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(a1 + 144);
  uint64_t v12 = *(void *)(a1 + 152);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a5[1];
  *a5 = v11;
  a5[1] = v12;
  if (v13)
  {
    sub_10004D2C8(v13);
    uint64_t v11 = *a5;
  }
  if (v11)
  {
LABEL_7:
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *))(*(void *)v11 + 608))(v11, a3, a4, &v18);
    if (v18)
    {
      unint64_t v14 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = *(_DWORD *)(a1 + 128);
        *(_DWORD *)std::string buf = 136315906;
        int v20 = "handleErrorThrottling";
        __int16 v21 = 1024;
        int v22 = v15;
        __int16 v23 = 1024;
        unsigned int v24 = a2;
        __int16 v25 = 1024;
        int v26 = a4;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s: Throttling PDP context activation on context [%d] after %d activation errors (error type %d).", buf, 0x1Eu);
      }
    }
  }
  if (v10 != 32 && a2 >= 3 && a4 == 0) {
    (*(void (**)(void, void))(**(void **)(a1 + 112) + 192))(*(void *)(a1 + 112), v18);
  }
}

uint64_t sub_1008C6BBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 16))();
}

std::__shared_weak_count *sub_1008C6BE4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3 || (v5 = *(void *)(a1 + 40), (uint64_t result = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v5 + 8;
  if (!v5) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t sub_1008C6C30(uint64_t a1)
{
  return a1 + 24;
}

std::__shared_weak_count *sub_1008C6C38@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3 || (v5 = *(void *)(a1 + 40), (uint64_t result = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v5 + 32;
  if (!v5) {
    uint64_t v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t sub_1008C6C84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 56))();
}

uint64_t sub_1008C6CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136315394;
    uint64_t v13 = "postConnectionStateChangeNotification";
    __int16 v14 = 2080;
    uint64_t v15 = asStringConnectionStateChangeReason();
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s: %s", (uint8_t *)&v12, 0x16u);
  }
  uint64_t result = *(void *)(a1 + 144);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)result + 520))(result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t sub_1008C6DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1008C6CAC(a1 - 8, a2, a3, a4, a5);
}

uint64_t sub_1008C6DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1008C6CAC(a1 - 16, a2, a3, a4, a5);
}

uint64_t sub_1008C6DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1008C6CAC(a1 - 24, a2, a3, a4, a5);
}

uint64_t sub_1008C6DE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 48))();
}

void sub_1008C6E08(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[14];
  uint64_t v5 = a1[18];
  uint64_t v6 = (std::__shared_weak_count *)a1[19];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 592))(&v9);
    if (!v6) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (v6) {
LABEL_5:
  }
    sub_10004D2C8(v6);
LABEL_6:
  (*(void (**)(uint64_t, BOOL))(*(void *)v4 + 88))(v4, v9 != 0);
  if (v10) {
    sub_10004D2C8(v10);
  }
  uint64_t v7 = a1[18];
  uint64_t v8 = (std::__shared_weak_count *)a1[19];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 600))(v7, a2);
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
}

void sub_1008C6F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C6F70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 136);
  uint64_t v4 = *(void **)(v3 + 8);
  uint64_t v5 = *(void **)(v3 + 16);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = (void *)*v4;
      if ((void *)*v4 != v4 + 1)
      {
        do
        {
          uint64_t v7 = v6[4];
          uint64_t v8 = (std::__shared_weak_count *)v6[5];
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t))(*(void *)v7 + 440))(v7);
          if (v8) {
            sub_10004D2C8(v8);
          }
          uint64_t v9 = (void *)v6[1];
          if (v9)
          {
            do
            {
              uint64_t v10 = v9;
              uint64_t v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v10 = (void *)v6[2];
              BOOL v11 = *v10 == (void)v6;
              uint64_t v6 = v10;
            }
            while (!v11);
          }
          uint64_t v6 = v10;
        }
        while (v10 != v4 + 1);
      }
      v4 += 9;
    }
    while (v4 != v5);
    uint64_t v3 = *(void *)(a1 + 136);
    int v12 = *(void **)(v3 + 8);
    uint64_t v4 = *(void **)(v3 + 16);
    if (v4 != v12)
    {
      do
      {
        v4 -= 9;
        sub_1007CECD8((uint64_t)v4);
      }
      while (v4 != v12);
      uint64_t v4 = v12;
    }
  }
  *(void *)(v3 + 16) = v4;
}

void sub_1008C70B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008C70C8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 112) + 24))(*(void *)(a1 + 112), *(unsigned int *)(*(void *)a2 + 52));
}

uint64_t sub_1008C70F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 88) + 32))();
}

uint64_t sub_1008C7120(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 40))();
}

uint64_t sub_1008C7148(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 96))();
}

uint64_t sub_1008C7170(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 96))();
}

uint64_t sub_1008C7198(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 248))();
  }
  return result;
}

uint64_t sub_1008C71C8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 88);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 248))();
  }
  return result;
}

uint64_t sub_1008C71F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 112) + 104))(*(void *)(a1 + 112), a2, a3, *(unsigned int *)(*(void *)a4 + 52));
}

uint64_t sub_1008C7228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 104) + 104))(*(void *)(a1 + 104), a2, a3, *(unsigned int *)(*(void *)a4 + 52));
}

uint64_t sub_1008C7258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 112) + 112))(*(void *)(a1 + 112), a2, a3, *(unsigned int *)(*(void *)a4 + 52));
}

uint64_t sub_1008C7288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 104) + 112))(*(void *)(a1 + 104), a2, a3, *(unsigned int *)(*(void *)a4 + 52));
}

uint64_t sub_1008C72B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 112) + 120))(*(void *)(a1 + 112), a2, a3, *(unsigned int *)(*(void *)a4 + 52));
}

uint64_t sub_1008C72E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 104) + 120))(*(void *)(a1 + 104), a2, a3, *(unsigned int *)(*(void *)a4 + 52));
}

uint64_t sub_1008C7318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 112) + 128))(*(void *)(a1 + 112), a2, a3, *(unsigned int *)(*(void *)a4 + 52));
}

uint64_t sub_1008C7348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 104) + 128))(*(void *)(a1 + 104), a2, a3, *(unsigned int *)(*(void *)a4 + 52));
}

void sub_1008C7378(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3 || (uint64_t v5 = a1[5], (v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v6;
  p_shared_weak_owners = &v6->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v6);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1174405120;
  v15[2] = sub_1008C7508;
  v15[3] = &unk_101A17288;
  void v15[4] = a1;
  v15[5] = v5;
  BOOL v16 = v7;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v17 = *a2;
  unsigned __int8 v18 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[6];
  if (!v10 || (v11 = a1[5], (int v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v13 = v12;
  __int16 v14 = a1[7];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008DBFC8;
  block[3] = &unk_101A17588;
  block[5] = v11;
  int v20 = v13;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v15;
  dispatch_async(v14, block);
  if (v20) {
    sub_10004D2C8(v20);
  }
  sub_10004D2C8(v13);
  if (v18) {
    sub_10004D2C8(v18);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  std::__shared_weak_count::__release_weak(v7);
}

void sub_1008C7508(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        if (!(*(unsigned int (**)(void *))(*v3 + 584))(v3)) {
          goto LABEL_20;
        }
        (*(void (**)(int *__return_ptr, void *))(*v3 + 576))(&v14, v3);
        char matched = DataUtils::matchPersonality();
        if (*(void *)&v15[4]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&v15[4]);
        }
        if (matched)
        {
          uint64_t v7 = v3[9];
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            int v14 = 136315138;
            *(void *)uint64_t v15 = "checkSuspendedAfterHandover_block_invoke";
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s: executing...", (uint8_t *)&v14, 0xCu);
          }
          if (sub_1008C4968(*(void *)(v3[17] + 8), *(void *)(v3[17] + 16)))
          {
            uint64_t v8 = sub_1008C4A18(*(void *)(v3[17] + 8), *(void *)(v3[17] + 16));
            uint64_t v9 = (uint64_t *)(v8 + 24);
            uint64_t v10 = (uint64_t *)(v8 + 56);
            do
            {
              uint64_t v11 = *v9;
              int v12 = (std::__shared_weak_count *)v9[1];
              if (v12) {
                atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v11) {
                (*(void (**)(uint64_t))(*(void *)v11 + 136))(v11);
              }
              if (v12) {
                sub_10004D2C8(v12);
              }
              v9 += 2;
            }
            while (v9 != v10);
          }
        }
        else
        {
LABEL_20:
          uint64_t v13 = v3[9];
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            int v14 = 136315138;
            *(void *)uint64_t v15 = "checkSuspendedAfterHandover_block_invoke";
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#E %s: method called with inactive settings", (uint8_t *)&v14, 0xCu);
          }
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_1008C7744(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void *sub_1008C7784(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1008C77B8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

BOOL sub_1008C7808(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  if (*a3)
  {
    uint64_t v6 = (std::__shared_weak_count *)a3[1];
    if (v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v7 = *(void *)(a1 + 144);
      sub_10004D2C8(v6);
      if (v7 == v5) {
        goto LABEL_6;
      }
      return 0;
    }
    if (*(void *)(a1 + 144) != v5) {
      return 0;
    }
  }
LABEL_6:
  if (!anyContextType() && validContextType()) {
    return *(_DWORD *)(a1 + 80 * a2 + 228) != 0;
  }
  uint64_t v9 = 0;
  while (!*(_DWORD *)(a1 + 80 * dword_101506340[v9] + 228)
       || *(unsigned char *)(a1 + 80 * (int)otherContextType() + 192)
       && !*(_DWORD *)(a1 + 80 * (int)otherContextType() + 228))
  {
    if (++v9 == 2) {
      return 0;
    }
  }
  return 1;
}

uint64_t sub_1008C7908(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, unsigned int a6)
{
  if (!a1[18]) {
    goto LABEL_76;
  }
  uint64_t v11 = a1;
  if (!(*(unsigned int (**)(void *))(*a1 + 584))(a1)) {
    goto LABEL_74;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*v11 + 576))(&buf, v11);
  char matched = DataUtils::matchPersonality();
  if (buf.__r_.__value_.__l.__size_) {
    sub_10004D2C8((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
  }
  if ((matched & 1) == 0)
  {
LABEL_74:
    __int16 v48 = v11[9];
    char v46 = 0;
    if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
      return v46 & 1;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleDataContextNetworkDisconnect";
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#E %s: method called with inactive settings", (uint8_t *)&buf, 0xCu);
LABEL_76:
    char v46 = 0;
    return v46 & 1;
  }
  memset(&v73, 0, sizeof(v73));
  sub_100058DB0(&v73, "disconnection");
  unsigned int v13 = otherContextType();
  if (sub_1008C4968(*(void *)(v11[17] + 8), *(void *)(v11[17] + 16)))
  {
    unsigned int v55 = v13;
    unsigned int v56 = a5;
    unsigned int v57 = a6;
    uint64_t v59 = a4;
    int v14 = (void *)sub_1008C4A18(*(void *)(v11[17] + 8), *(void *)(v11[17] + 16));
    uint64_t v17 = (void *)*v14;
    uint64_t v15 = v14 + 1;
    BOOL v16 = v17;
    if (v17 == v15)
    {
      char v46 = 0;
      uint64_t v63 = 0;
      char v47 = 1;
      uint64_t v44 = a5;
      uint64_t v43 = v57;
      uint64_t v45 = v55;
    }
    else
    {
      char v60 = 0;
      uint64_t v58 = 0;
      uint64_t v63 = 0;
      uint64_t v61 = v15;
      id v62 = v11;
      do
      {
        uint64_t v19 = v16[4];
        unsigned __int8 v18 = (std::__shared_weak_count *)v16[5];
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string::size_type v64 = v18;
        if ((*(unsigned int (**)(uint64_t))(*(void *)v19 + 56))(v19) == a3)
        {
          int v20 = v11[9];
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            if (v18) {
              atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::size_type v21 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19);
            uint64_t v22 = asString();
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleDataContextNetworkDisconnect";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v21;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
            uint64_t v75 = v22;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s: %s disconnected by network on %s", (uint8_t *)&buf, 0x20u);
            if (v18) {
              sub_10004D2C8(v18);
            }
          }
          __int16 v23 = (void *)sub_1008C4A18(*(void *)(v11[17] + 8), *(void *)(v11[17] + 16));
          __int16 v25 = v23 + 1;
          unsigned int v24 = (void *)*v23;
          if ((void *)*v23 != v23 + 1)
          {
            do
            {
              uint64_t v27 = v24[4];
              int v26 = (std::__shared_weak_count *)v24[5];
              if (v26) {
                atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v27 == v19 || (*(unsigned int (**)(uint64_t))(*(void *)v27 + 56))(v27) == a3)
              {
                int v28 = 0;
              }
              else if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v27 + 136))(v27, a2))
              {
                long long v32 = v11;
                uint64_t v33 = a3;
                long long v34 = v32[9];
                if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                {
                  if (v64) {
                    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  std::string::size_type v35 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19);
                  if (v26) {
                    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 48))(v27);
                  uint64_t v37 = asString();
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleDataContextNetworkDisconnect";
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v35;
                  HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                  uint64_t v75 = v36;
                  __int16 v76 = 2080;
                  uint64_t v77 = v37;
                  _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I %s: Have been handed over from %s to %s on %s and up", (uint8_t *)&buf, 0x2Au);
                  if (v26) {
                    sub_10004D2C8(v26);
                  }
                  a3 = v33;
                  if (v64) {
                    sub_10004D2C8(v64);
                  }
                  int v28 = 15;
                }
                else
                {
                  int v28 = 15;
                  a3 = v33;
                }
                uint64_t v11 = v62;
              }
              else
              {
                int v38 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 56))(v27);
                if (LOBYTE(v11[10 * v38 + 24]) && (LOBYTE(v11[10 * v38 + 28]) || LOBYTE(v11[10 * v38 + 29])))
                {
                  int v39 = v11[9];
                  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleDataContextNetworkDisconnect";
                    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I %s: looks like the other context is already active", (uint8_t *)&buf, 0xCu);
                  }
                  int v28 = 0;
                  char v60 = 1;
                }
                else
                {
                  if (v26) {
                    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (v63) {
                    sub_10004D2C8(v63);
                  }
                  uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v19 + 152))(v19, a2);
                  if (a3 == 1)
                  {
                    iWLanNotifyCodeAsString(*(_DWORD *)(v40 + 152), &buf);
                    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(v73.__r_.__value_.__l.__data_);
                    }
                    std::string v73 = buf;
                  }
                  else if (!a3)
                  {
                    std::string::operator=(&v73, (const std::string *)(v40 + 104));
                  }
                  int v28 = 14;
                  uint64_t v63 = v26;
                  uint64_t v58 = v27;
                }
              }
              if (v26) {
                sub_10004D2C8(v26);
              }
              if (v28 != 15 && v28) {
                break;
              }
              int64x2_t v29 = (void *)v24[1];
              if (v29)
              {
                do
                {
                  uint64_t v30 = v29;
                  int64x2_t v29 = (void *)*v29;
                }
                while (v29);
              }
              else
              {
                do
                {
                  uint64_t v30 = (void *)v24[2];
                  BOOL v31 = *v30 == (void)v24;
                  unsigned int v24 = v30;
                }
                while (!v31);
              }
              unsigned int v24 = v30;
            }
            while (v30 != v25);
          }
        }
        if (v64) {
          sub_10004D2C8(v64);
        }
        long long v41 = (void *)v16[1];
        if (v41)
        {
          do
          {
            long long v42 = v41;
            long long v41 = (void *)*v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            long long v42 = (void *)v16[2];
            BOOL v31 = *v42 == (void)v16;
            BOOL v16 = v42;
          }
          while (!v31);
        }
        BOOL v16 = v42;
      }
      while (v42 != v61);
      uint64_t v44 = v56;
      uint64_t v43 = v57;
      uint64_t v45 = v55;
      if (v58)
      {
        a4 = v59;
        char v46 = v60;
        uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v58 + 56))(v58);
        char v47 = 0;
      }
      else
      {
        char v47 = 1;
        a4 = v59;
        char v46 = v60;
      }
    }
    id v70 = 0;
    __int16 v71 = 0;
    uint64_t v72 = 0;
    char v50 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v11[18]
                                                                                                  + 360))(v11[18], a3, v45, a2, v44, v43, &v70);
    if ((v47 & 1) == 0)
    {
      if (v50)
      {
        int v51 = (std::__shared_weak_count *)a4[1];
        uint64_t v68 = *a4;
        std::string::size_type v69 = v51;
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string __p = 0;
        id v66 = 0;
        uint64_t v67 = 0;
        sub_1008DB9AC(&__p, v70, (uint64_t)v71, 0xAAAAAAAAAAAAAAABLL * ((v71 - (unsigned char *)v70) >> 2));
        char v46 = sub_1008C82E0(v11, a3, v45, &v68, &v73, 1, (uint64_t)&__p, 0);
        if (__p)
        {
          id v66 = __p;
          operator delete(__p);
        }
        if (v69) {
          sub_10004D2C8(v69);
        }
      }
      else
      {
        __int16 v52 = v11[9];
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v53 = asString();
          uint64_t v54 = asString();
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleDataContextNetworkDisconnect";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v53;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          uint64_t v75 = v54;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#I %s: hand over from %s to %s cannot be done because handover is not allowed", (uint8_t *)&buf, 0x20u);
        }
      }
    }
    if (v70)
    {
      __int16 v71 = v70;
      operator delete(v70);
    }
  }
  else
  {
    uint64_t v63 = 0;
    char v46 = 0;
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v73.__r_.__value_.__l.__data_);
  }
  if (v63) {
    sub_10004D2C8(v63);
  }
  return v46 & 1;
}

void sub_1008C81BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (*(char *)(v31 - 153) < 0) {
    operator delete(*(void **)(v31 - 176));
  }
  if (a23) {
    sub_10004D2C8(a23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008C82E0(void *a1, int a2, uint64_t a3, uint64_t *a4, const std::string *a5, BOOL a6, uint64_t a7, unsigned char *a8)
{
  if (*((_DWORD *)a1 + 46) == a3)
  {
    uint64_t v11 = a1[9];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "handOverTo";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = asString();
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)&uint8_t buf[24] = asString();
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s: handover from %s to %s cannot be done because the new context type is already current; we treat the situa"
        "tion as a successful handover",
        buf,
        0x20u);
    }
    char v12 = 1;
    return v12 & 1;
  }
  if (!(*(unsigned int (**)(void *))(*a1 + 584))(a1)) {
    goto LABEL_18;
  }
  char v46 = a8;
  (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 576))(buf, a1);
  char matched = DataUtils::matchPersonality();
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((matched & 1) == 0)
  {
LABEL_18:
    unsigned int v24 = a1[9];
    char v12 = 0;
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      return v12 & 1;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = "handOverTo";
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#E %s: method called with inactive settings", buf, 0xCu);
LABEL_20:
    char v12 = 0;
    return v12 & 1;
  }
  if (!validContextType()) {
    goto LABEL_20;
  }
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v19 = (std::__shared_weak_count *)a4[1];
  uint64_t v60 = *a4;
  uint64_t v61 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1008C4AE0((uint64_t)a1, a2, buf);
  if (v61) {
    sub_10004D2C8(v61);
  }
  uint64_t v20 = *(void *)buf;
  if (*(void *)buf)
  {
    int v21 = (*(uint64_t (**)(void, uint64_t))(**(void **)buf + 136))(*(void *)buf, 1);
    int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 136))(v20, 2);
    int v23 = v21 | 2;
    if (!v22) {
      int v23 = v21;
    }
    int v45 = v23;
  }
  else
  {
    int v45 = 0;
  }
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  int v26 = a1[9];
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v44 = asString();
    uint64_t v43 = asString();
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = a5;
    }
    else {
      uint64_t v27 = (const std::string *)a5->__r_.__value_.__r.__words[0];
    }
    uint64_t v28 = asStringBool(a6);
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = "handOverTo";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v44;
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&uint8_t buf[24] = v43;
    *(_WORD *)&unsigned char buf[32] = 2082;
    *(void *)&buf[34] = v27;
    *(_WORD *)&buf[42] = 2080;
    *(void *)&buf[44] = v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I %s: handover from %s to %s because of %{public}s (networkDisconnect %s)", buf, 0x34u);
  }
  uint64_t v75 = 0;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  memset(buf, 0, sizeof(buf));
  sub_1008C8B1C((uint64_t)a1, buf);
  *(void *)&long long v56 = 1;
  memset(v57, 0, sizeof(v57));
  long long v59 = 0u;
  *((void *)&v56 + 1) = "Handover";
  *(void *)&v57[0] = "CommCenter";
  BYTE8(v57[0]) = 1;
  BYTE8(v57[1]) = 0;
  long long v58 = 0uLL;
  *(void *)&long long v59 = 0;
  BYTE8(v59) = 0;
  std::string::operator=((std::string *)&v58, a5);
  HIDWORD(v57[0]) = v45;
  BYTE8(v59) = a6;
  uint64_t v29 = *a4;
  uint64_t v30 = (std::__shared_weak_count *)a4[1];
  v55[0] = v29;
  v55[1] = (uint64_t)v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v50 = v56;
  v51[0] = v57[0];
  *(_OWORD *)((char *)v51 + 10) = *(_OWORD *)((char *)v57 + 10);
  if (SBYTE7(v59) < 0)
  {
    sub_10004FC84(&v52, (void *)v58, *((unint64_t *)&v58 + 1));
  }
  else
  {
    long long v52 = v58;
    uint64_t v53 = v59;
  }
  char v54 = BYTE8(v59);
  __int16 v48 = 0;
  uint64_t v49 = 0;
  std::string __p = 0;
  sub_1008DB9AC(&__p, *(const void **)a7, *(void *)(a7 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 2));
  int v31 = sub_1008C8C20((uint64_t)a1, a3, v55, (uint64_t)&v50, (uint64_t)&__p);
  if (__p)
  {
    __int16 v48 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
  if (v30) {
    sub_10004D2C8(v30);
  }
  long long v32 = a1[9];
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = asString();
    *(_DWORD *)id v62 = 136315650;
    uint64_t v63 = "handOverTo";
    __int16 v64 = 2080;
    uint64_t v65 = v33;
    __int16 v66 = 1024;
    LODWORD(v67) = v31;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I %s: ctTo=%s, activationReturn=%d", v62, 0x1Cu);
  }
  int v34 = v31 + 2;
  char v35 = 0;
  char v12 = 1;
  switch(v34)
  {
    case 0:
    case 1:
      sub_1008C92C4((uint64_t)a1, (int *)buf);
      goto LABEL_45;
    case 2:
      uint64_t v37 = a1[18];
      int v38 = (std::__shared_weak_count *)a1[19];
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v37) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 632))(v37, a3);
      }
      if (v38) {
        sub_10004D2C8(v38);
      }
      char v35 = 0;
      break;
    case 3:
      break;
    case 4:
      sub_1008C92C4((uint64_t)a1, (int *)buf);
      if (v46)
      {
        char v35 = 0;
        *char v46 = 1;
      }
      else
      {
        int v39 = a1[9];
        char v35 = 0;
        char v12 = 0;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v40 = asString();
          uint64_t v41 = asString();
          *(_DWORD *)id v62 = 136315650;
          uint64_t v63 = "handOverTo";
          __int16 v64 = 2080;
          uint64_t v65 = v40;
          __int16 v66 = 2080;
          uint64_t v67 = v41;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I %s: Can't handover from %s right now, cancelling handover to %s", v62, 0x20u);
LABEL_45:
          char v35 = 0;
          char v12 = 0;
        }
      }
      break;
    default:
      uint64_t v36 = a1[9];
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id v62 = 136315138;
        uint64_t v63 = "handOverTo";
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#E %s: !!! activateDataContext returned unmanageable result", v62, 0xCu);
      }
      sub_1008C92C4((uint64_t)a1, (int *)buf);
      char v35 = 1;
      break;
  }
  if (SBYTE7(v59) < 0) {
    operator delete((void *)v58);
  }
  for (uint64_t i = 0; i != -160; i -= 80)
  {
    if (*((char *)&v74 + i + 15) < 0) {
      operator delete(*(void **)((char *)&v73 + i + 8));
    }
  }
  if (v35) {
    goto LABEL_20;
  }
  return v12 & 1;
}

void sub_1008C8A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a43 < 0) {
    operator delete(__p);
  }
  uint64_t v73 = 0;
  while (1)
  {
    if (*(&a72 + v73) < 0) {
      operator delete(*(void **)((char *)&a68 + v73));
    }
    v73 -= 80;
    if (v73 == -160) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_1008C8B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, unsigned int a6)
{
  return sub_1008C7908((void *)(a1 - 8), a2, a3, a4, a5, a6);
}

uint64_t sub_1008C8B14(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184);
}

unsigned char *sub_1008C8B1C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  char v4 = 0;
  uint64_t v5 = 0;
  *a2 = *(_DWORD *)(a1 + 184);
  uint64_t v6 = a2 + 2;
  do
  {
    char v7 = v4;
    uint64_t v8 = &v6[20 * v5];
    uint64_t v9 = a1 + 80 * v5;
    long long v10 = *(_OWORD *)(v9 + 208);
    *(_OWORD *)uint64_t v8 = *(_OWORD *)(v9 + 192);
    *((_OWORD *)v8 + 1) = v10;
    *(_OWORD *)((char *)v8 + 26) = *(_OWORD *)(v9 + 218);
    uint64_t result = v8 + 12;
    char v12 = (void **)(v9 + 240);
    if (*(char *)(v9 + 263) < 0)
    {
      uint64_t result = sub_10004FC84(result, *v12, *(void *)(a1 + 80 * v5 + 248));
    }
    else
    {
      *(_OWORD *)uint64_t result = *(_OWORD *)v12;
      *((void *)v8 + 8) = *(void *)(v9 + 256);
    }
    LOBYTE(v6[20 * v5 + 18]) = *(unsigned char *)(a1 + 80 * v5 + 264);
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v7 & 1) == 0);
  return result;
}

void sub_1008C8BEC(_Unwind_Exception *exception_object)
{
  if ((v3 & 1) == 0)
  {
    uint64_t v5 = 80 * v2;
    do
    {
      if (*(char *)(v1 + v5 - 1) < 0) {
        operator delete(*(void **)(v1 + v5 - 24));
      }
      v5 -= 80;
    }
    while (v5);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1008C8C20(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  if (a2
    || (a1 = *(void *)(a1 + 96)) == 0
    || (a1 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1), (a1 & 1) != 0))
  {
    if (*(unsigned char *)(v9 + 352))
    {
      LODWORD(v10) = 0;
      LODWORD(v11) = 2;
    }
    else
    {
      if (*(unsigned char *)(a4 + 24))
      {
        int v12 = capabilities::ct::supports5G((capabilities::ct *)a1);
        if (a2 == 1)
        {
          if (v12)
          {
            long long v50 = 0uLL;
            int v13 = otherContextType();
            int v14 = (std::__shared_weak_count *)a3[1];
            uint64_t v48 = *a3;
            uint64_t v49 = v14;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_1008C4AE0(v9, v13, &v50);
            if (v49) {
              sub_10004D2C8(v49);
            }
            uint64_t v15 = v50;
            if ((void)v50)
            {
              BOOL v16 = *(NSObject **)(v9 + 72);
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I HO cell->wifi: reportHandoverWwanPduSessionId", buf, 2u);
              }
              if (((*(uint64_t (**)(uint64_t))(*(void *)v9 + 776))(v9) & 0x80000000) == 0) {
                (*(void (**)(uint64_t))(*(void *)v15 + 392))(v15);
              }
            }
            if (*((void *)&v50 + 1)) {
              sub_10004D2C8(*((std::__shared_weak_count **)&v50 + 1));
            }
          }
        }
      }
      *(void *)std::string buf = 0;
      char v47 = 0;
      uint64_t v17 = (std::__shared_weak_count *)a3[1];
      uint64_t v44 = *a3;
      int v45 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1008C4AE0(v9, a2, buf);
      if (v45) {
        sub_10004D2C8(v45);
      }
      uint64_t v18 = *(void *)buf;
      if (*(void *)buf)
      {
        long long v19 = *(_OWORD *)(a4 + 16);
        long long v39 = *(_OWORD *)a4;
        *(_OWORD *)uint64_t v40 = v19;
        *(_OWORD *)&v40[10] = *(_OWORD *)(a4 + 26);
        uint64_t v20 = (long long *)(a4 + 48);
        if (*(char *)(a4 + 71) < 0)
        {
          sub_10004FC84(&__p, *(void **)(a4 + 48), *(void *)(a4 + 56));
        }
        else
        {
          long long __p = *v20;
          uint64_t v42 = *(void *)(a4 + 64);
        }
        char v22 = *(unsigned char *)(a4 + 72);
        char v43 = v22;
        LOBYTE(v39) = 1;
        v40[16] = 0;
        *(_WORD *)&v40[24] = 0;
        *(_DWORD *)&v40[20] = 0;
        long long v50 = v39;
        v51[0] = *(_OWORD *)v40;
        *(_OWORD *)((char *)v51 + 10) = *(_OWORD *)&v40[10];
        if (SHIBYTE(v42) < 0)
        {
          sub_10004FC84(&v52, (void *)__p, *((unint64_t *)&__p + 1));
          char v22 = v43;
        }
        else
        {
          long long v52 = __p;
          uint64_t v53 = v42;
        }
        char v54 = v22;
        sub_1008CC2E4(v9, a2, &v50, 0);
        if (SHIBYTE(v53) < 0) {
          operator delete((void *)v52);
        }
        if (SHIBYTE(v42) < 0) {
          operator delete((void *)__p);
        }
        long long v23 = *(_OWORD *)(a4 + 16);
        long long v34 = *(_OWORD *)a4;
        v35[0] = v23;
        *(_OWORD *)((char *)v35 + 10) = *(_OWORD *)(a4 + 26);
        if (*(char *)(a4 + 71) < 0)
        {
          sub_10004FC84(&v36, *(void **)(a4 + 48), *(void *)(a4 + 56));
        }
        else
        {
          long long v36 = *v20;
          uint64_t v37 = *(void *)(a4 + 64);
        }
        char v38 = *(unsigned char *)(a4 + 72);
        long long v32 = 0;
        uint64_t v33 = 0;
        int v31 = 0;
        sub_1008DB9AC(&v31, *(const void **)a5, *(void *)(a5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 2));
        unint64_t v11 = (*(uint64_t (**)(uint64_t, long long *, void **))(*(void *)v18 + 384))(v18, &v34, &v31);
        if (v31)
        {
          long long v32 = v31;
          operator delete(v31);
        }
        unint64_t v10 = HIDWORD(v11);
        if (SHIBYTE(v37) < 0) {
          operator delete((void *)v36);
        }
        if (v11 == 1)
        {
          if (*(unsigned char *)(a4 + 24))
          {
            long long v50 = 0uLL;
            int v24 = otherContextType();
            __int16 v25 = (std::__shared_weak_count *)a3[1];
            uint64_t v30 = v25;
            if (v25) {
              atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_1008C4AE0(v9, v24, &v50);
            if (v30) {
              sub_10004D2C8(v30);
            }
            uint64_t v26 = v50;
            if ((void)v50
              && (*(unsigned int (**)(void))(*(void *)v50 + 536))(v50)
              && (*(unsigned int (**)(uint64_t))(*(void *)v26 + 496))(v26))
            {
              uint64_t v27 = *(NSObject **)(v9 + 72);
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                otherContextType();
                uint64_t v28 = asString();
                *(_DWORD *)unsigned int v55 = 136315138;
                uint64_t v56 = v28;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I HO: %s stuck in preactivation, deactivating...", v55, 0xCu);
              }
              (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v26 + 400))(v26, 23, "CommCenter");
            }
            if (*((void *)&v50 + 1)) {
              sub_10004D2C8(*((std::__shared_weak_count **)&v50 + 1));
            }
          }
          LODWORD(v11) = 1;
        }
      }
      else
      {
        LODWORD(v10) = -8;
        LODWORD(v11) = -1;
      }
      if (v47) {
        sub_10004D2C8(v47);
      }
    }
  }
  else
  {
    int v21 = *(NSObject **)(v9 + 72);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v50) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CommCenter networking start has not completed yet", (uint8_t *)&v50, 2u);
    }
    LODWORD(v10) = 4;
    LODWORD(v11) = -1;
  }
  return v11 | ((unint64_t)v10 << 32);
}

void sub_1008C91D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44)
{
  char v46 = *(std::__shared_weak_count **)(v44 - 184);
  if (v46) {
    sub_10004D2C8(v46);
  }
  if (a44) {
    sub_10004D2C8(a44);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C9298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (!a36) {
    JUMPOUT(0x1008C9290);
  }
  JUMPOUT(0x1008C928CLL);
}

uint64_t sub_1008C92A8@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 152);
  *a2 = *(void *)(result + 144);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1008C92C4(uint64_t a1, int *a2)
{
  if (*(_DWORD *)(a1 + 184) == *a2)
  {
    uint64_t v4 = 0;
    while (sub_1008DBAC4((unsigned __int8 *)(a1 + 80 * dword_101506340[v4] + 192), (unsigned __int8 *)&a2[20 * dword_101506340[v4] + 2]))
    {
      if (++v4 == 2) {
        return;
      }
    }
  }
  long long v5 = *(_OWORD *)(a2 + 6);
  long long v16 = *(_OWORD *)(a2 + 2);
  v17[0] = v5;
  *(_OWORD *)((char *)v17 + 10) = *(_OWORD *)((char *)a2 + 34);
  if (*((char *)a2 + 79) < 0)
  {
    sub_10004FC84(&__p, *((void **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long __p = *(_OWORD *)(a2 + 14);
    uint64_t v19 = *((void *)a2 + 9);
  }
  char v20 = *((unsigned char *)a2 + 80);
  sub_1008CC2E4(a1, 0, &v16, 1);
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)__p);
  }
  long long v6 = *(_OWORD *)(a2 + 26);
  long long v11 = *(_OWORD *)(a2 + 22);
  v12[0] = v6;
  *(_OWORD *)((char *)v12 + 10) = *(_OWORD *)((char *)a2 + 114);
  if (*((char *)a2 + 159) < 0)
  {
    sub_10004FC84(&v13, *((void **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 34);
    uint64_t v14 = *((void *)a2 + 19);
  }
  char v15 = *((unsigned char *)a2 + 160);
  sub_1008CC2E4(a1, 1, &v11, 1);
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)v13);
  }
  int v7 = *a2;
  if (*(_DWORD *)(a1 + 184) != *a2)
  {
    uint64_t v8 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = asString();
      uint64_t v10 = asString();
      *(_DWORD *)std::string buf = 136315650;
      char v22 = "setActivatorState";
      __int16 v23 = 2080;
      uint64_t v24 = v9;
      __int16 v25 = 2080;
      uint64_t v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: (change states) active %s => %s", buf, 0x20u);
      int v7 = *a2;
    }
    *(_DWORD *)(a1 + 184) = v7;
  }
}

void sub_1008C94F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20 < 0) {
    operator delete(*v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008C9528(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, const std::string *a5, BOOL a6, uint64_t a7, unsigned char *a8)
{
  return sub_1008C82E0((void *)(a1 - 24), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1008C9530(void *a1, _OWORD *a2)
{
  uint64_t v3 = a1[18];
  uint64_t v4 = (std::__shared_weak_count *)a1[19];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
    v7[0] = *a2;
    *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 12);
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v3 + 304))(v3, v7);
    goto LABEL_6;
  }
  long long v5 = a1[9];
  if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
LABEL_6:
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  *(_WORD *)long long v6 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "no active settings to update AssignedSnssai", v6, 2u);
  if (!v4) {
    return;
  }
LABEL_7:
  sub_10004D2C8(v4);
}

void sub_1008C9608(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C9620(uint64_t a1, _OWORD *a2)
{
}

void sub_1008C9628(void *a1)
{
  uint64_t v2 = a1[18];
  uint64_t v3 = (std::__shared_weak_count *)a1[19];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 656))(v2);
    goto LABEL_6;
  }
  uint64_t v4 = a1[9];
  if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
LABEL_6:
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }
  *(_WORD *)long long v5 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "no active settings to update BB throttling timer", v5, 2u);
  if (!v3) {
    return;
  }
LABEL_7:
  sub_10004D2C8(v3);
}

void sub_1008C96EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C9704(uint64_t a1)
{
}

void sub_1008C970C(uint64_t a1, int a2, void *a3)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 584))(a1)) {
    goto LABEL_49;
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 576))(buf, a1);
  char matched = DataUtils::matchPersonality();
  if (*(void *)&v33[4]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v33[4]);
  }
  if (matched)
  {
    if (sub_1008C4968(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16)))
    {
      long long v6 = (void *)sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16));
      uint64_t v9 = (void *)*v6;
      int v7 = v6 + 1;
      uint64_t v8 = v9;
      if (v9 != v7)
      {
        uint64_t v29 = v7;
        while (1)
        {
          uint64_t v11 = v8[4];
          uint64_t v10 = (std::__shared_weak_count *)v8[5];
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 56))(v11) == a2)
          {
            int v12 = *(NSObject **)(a1 + 72);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              if (v10) {
                atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
              *(_DWORD *)std::string buf = 136315394;
              *(void *)uint64_t v33 = "handleDataContextDisappeared";
              *(_WORD *)&long long v33[8] = 2080;
              *(void *)&unsigned char v33[10] = v13;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I %s: %s disappeared", buf, 0x16u);
              if (v10) {
                sub_10004D2C8(v10);
              }
            }
            uint64_t v14 = (void *)sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16));
            long long v16 = v14 + 1;
            char v15 = (void *)*v14;
            if ((void *)*v14 != v14 + 1) {
              break;
            }
          }
LABEL_40:
          if (v10) {
            sub_10004D2C8(v10);
          }
          uint64_t v26 = (void *)v8[1];
          if (v26)
          {
            do
            {
              uint64_t v27 = v26;
              uint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v27 = (void *)v8[2];
              BOOL v19 = *v27 == (void)v8;
              uint64_t v8 = v27;
            }
            while (!v19);
          }
          uint64_t v8 = v27;
          if (v27 == v29) {
            return;
          }
        }
        while (1)
        {
          uint64_t v18 = v15[4];
          uint64_t v17 = (std::__shared_weak_count *)v15[5];
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v18) {
            BOOL v19 = v18 == v11;
          }
          else {
            BOOL v19 = 1;
          }
          if (v19) {
            goto LABEL_32;
          }
          unsigned int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 56))(v18);
          if (v20 > 1)
          {
            if (*(unsigned char *)(a1 + 192)) {
              goto LABEL_28;
            }
            unsigned int v21 = 1;
          }
          else
          {
            unsigned int v21 = v20;
          }
          if (*(unsigned char *)(a1 + 80 * v21 + 192))
          {
LABEL_28:
            int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 56))(v18);
            __int16 v23 = (std::__shared_weak_count *)a3[1];
            v31[0] = *a3;
            v31[1] = v23;
            if (v23) {
              atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_1008C9BA8(a1, v22, (uint64_t)v31, 33, (uint64_t)"CommCenter");
            if (v23) {
              sub_10004D2C8(v23);
            }
          }
LABEL_32:
          if (v17) {
            sub_10004D2C8(v17);
          }
          uint64_t v24 = (void *)v15[1];
          if (v24)
          {
            do
            {
              __int16 v25 = v24;
              uint64_t v24 = (void *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              __int16 v25 = (void *)v15[2];
              BOOL v19 = *v25 == (void)v15;
              char v15 = v25;
            }
            while (!v19);
          }
          char v15 = v25;
          if (v25 == v16) {
            goto LABEL_40;
          }
        }
      }
    }
  }
  else
  {
LABEL_49:
    uint64_t v28 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)uint64_t v33 = "handleDataContextDisappeared";
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#E %s: method called with inactive settings", buf, 0xCu);
    }
  }
}

void sub_1008C9B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1008C9B6C(uint64_t a1, unsigned int a2)
{
  if (a2 > 1)
  {
    if (*(unsigned char *)(a1 + 192)) {
      return 0;
    }
    unsigned int v2 = 1;
  }
  else
  {
    unsigned int v2 = a2;
  }
  return *(unsigned char *)(a1 + 80 * v2 + 192) == 0;
}

uint64_t sub_1008C9BA8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = 0;
  int v12 = 0;
  sub_1008C4AE0(a1, a2, &v11);
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (v11) {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 400))(v11, a4, a5);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
  return v8;
}

void sub_1008C9C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C9C88(uint64_t a1, int a2, void *a3)
{
}

void sub_1008C9C90(void *a1, int a2)
{
  uint64_t v4 = a1[9];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315394;
    *(void *)uint64_t v14 = "handleDataContextIPActivated";
    *(_WORD *)&unsigned char v14[8] = 2080;
    *(void *)&v14[10] = asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: %s activated", (uint8_t *)&v13, 0x16u);
  }
  if ((validContextType() & 1) == 0)
  {
    int v7 = a1[9];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v8 = asString();
    int v13 = 136315394;
    *(void *)uint64_t v14 = "handleDataContextIPActivated";
    *(_WORD *)&unsigned char v14[8] = 2080;
    *(void *)&v14[10] = v8;
    uint64_t v9 = "#E %s: wrong context type: %s";
    uint64_t v10 = v7;
    uint32_t v11 = 22;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v13, v11);
    return;
  }
  if (!(*(unsigned int (**)(void *))(*a1 + 584))(a1)) {
    goto LABEL_14;
  }
  (*(void (**)(int *__return_ptr, void *))(*a1 + 576))(&v13, a1);
  char matched = DataUtils::matchPersonality();
  if (*(void *)&v14[4]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v14[4]);
  }
  if ((matched & 1) == 0)
  {
LABEL_14:
    int v12 = a1[9];
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v13 = 136315138;
    *(void *)uint64_t v14 = "handleDataContextIPActivated";
    uint64_t v9 = "#E %s: method called with inactive settings";
    uint64_t v10 = v12;
    uint32_t v11 = 12;
    goto LABEL_16;
  }
  if (sub_1008C4968(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16)))
  {
    if (*(void *)(sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16)) + 16 * a2 + 24))
    {
      uint64_t v6 = *(void *)(sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16)) + 16 * a2 + 24);
      (*(void (**)(uint64_t))(*(void *)v6 + 168))(v6);
    }
  }
  sub_1008C6CAC((uint64_t)a1, 5, 0, 0, 0);
}

void sub_1008C9F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008C9F4C(uint64_t a1, int a2)
{
}

uint64_t sub_1008C9F54(uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, char a5, unsigned int a6, void *a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned __int8 a12)
{
  char v15 = (void *)a1;
  *(_DWORD *)id v82 = sub_1008CBCAC(a1, a6, buf);
  long long v16 = v15[9];
  uint64_t v91 = (uint64_t)v15;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = asString();
    uint64_t v18 = asStringBool(v82[0]);
    uint64_t v19 = asString();
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = "handleContextActivateError";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v17;
    char v15 = (void *)v91;
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&uint8_t buf[24] = v18;
    *(_WORD *)uint64_t v108 = 1024;
    *(_DWORD *)&v108[2] = a10;
    *(_WORD *)&v108[6] = 2080;
    *(void *)&v108[8] = v19;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I %s: %s (handover %s) contextSpecificErrorCode %d (%s)", buf, 0x30u);
  }
  a3[9] = a11;
  long long v20 = *((_OWORD *)a3 + 1);
  long long v102 = *(_OWORD *)a3;
  long long v103 = v20;
  uint64_t v21 = *((void *)a3 + 5);
  uint64_t v104 = *((void *)a3 + 4);
  int v22 = (std::__shared_weak_count *)*((void *)a3 + 6);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = v15[18];
  uint64_t v24 = (std::__shared_weak_count *)v15[19];
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v23)
  {
    *(_OWORD *)std::string buf = v102;
    *(_OWORD *)&uint8_t buf[16] = v103;
    *(void *)uint64_t v108 = v104;
    *(void *)&v108[8] = v21;
    *(void *)&v108[16] = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, unsigned char *))(*(void *)v23 + 584))(v23, a6, buf);
    if (*(void *)&v108[16]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&v108[16]);
    }
  }
  if (v24) {
    sub_10004D2C8(v24);
  }
  if (v22) {
    sub_10004D2C8(v22);
  }
  uint64_t v25 = *a3;
  uint64_t v26 = (*(uint64_t (**)(void *, void, void, void))(*v15 + 568))(v15, a6, 0, 0);
  uint64_t v28 = v15[18];
  uint64_t v27 = (std::__shared_weak_count *)v15[19];
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v89 = v27;
  if (!v28) {
    goto LABEL_148;
  }
  uint64_t v29 = v15[9];
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = "handleContextActivateError";
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I %s: active settings activate error", buf, 0xCu);
  }
  char v15 = (void *)v91;
  if (!(*(unsigned int (**)(uint64_t, void, uint64_t, void, void, void))(*(void *)v28 + 344))(v28, a6, v25, a10, a11, a12))
  {
LABEL_148:
    if (sub_1008C4968(*(void *)(v15[17] + 8), *(void *)(v15[17] + 16)))
    {
      uint64_t v32 = v15[14];
      if (*(char *)(a4 + 23) < 0)
      {
        sub_10004FC84(__p, *(void **)a4, *(void *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)a4;
        uint64_t v101 = *(void *)(a4 + 16);
      }
      (*(void (**)(uint64_t, void, uint64_t, void **, void, void, uint64_t, void))(*(void *)v32 + 136))(v32, a2, v25, __p, a6, *(unsigned int *)(*a7 + 52), v26, a8);
      if (SHIBYTE(v101) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v33 = v89;
      __int16 v85 = (void *)sub_1008C4A18(*(void *)(v15[17] + 8), *(void *)(v15[17] + 16));
      long long v34 = (void *)*v85;
      if ((void *)*v85 != v85 + 1)
      {
        while (1)
        {
          uint64_t v35 = v34[4];
          long long v36 = (std::__shared_weak_count *)v34[5];
          if (v36) {
            atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v35 + 56))(v35) != a6) {
            goto LABEL_59;
          }
          if (a9 != 2) {
            break;
          }
LABEL_51:
          if ((a5 & 1) == 0 && (*(unsigned int (**)(uint64_t, void))(*(void *)v35 + 136))(v35, a2))
          {
            uint64_t v40 = v15[9];
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v41 = asString();
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = "handleContextActivateError";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&unsigned char buf[14] = v41;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#I %s: %s network is already online, take it offline", buf, 0x16u);
            }
            uint64_t v42 = (std::__shared_weak_count *)a7[1];
            uint64_t v96 = *a7;
            uint64_t v97 = v42;
            if (v42) {
              atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v33 = v89;
            (*(void (**)(void *, void, void, uint64_t *))(*v15 + 704))(v15, a2, a6, &v96);
            if (v97) {
              sub_10004D2C8(v97);
            }
          }
LABEL_59:
          if (v36) {
            sub_10004D2C8(v36);
          }
          char v43 = (void *)v34[1];
          if (v43)
          {
            do
            {
              uint64_t v44 = v43;
              char v43 = (void *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              uint64_t v44 = (void *)v34[2];
              BOOL v45 = *v44 == (void)v34;
              long long v34 = v44;
            }
            while (!v45);
          }
          long long v34 = v44;
          if (v44 == v85 + 1) {
            goto LABEL_70;
          }
        }
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v28) {
          (*(void (**)(uint64_t, void))(*(void *)v28 + 552))(v28, a6);
        }
        if (v33) {
          sub_10004D2C8(v33);
        }
        uint64_t v37 = v15[18];
        char v38 = (std::__shared_weak_count *)v15[19];
        if (v38) {
          atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v37)
        {
          unsigned int v39 = (*(uint64_t (**)(uint64_t, void))(*(void *)v37 + 568))(v37, a6);
          if (!v38)
          {
LABEL_47:
            uint64_t v33 = v89;
            uint64_t v98 = v28;
            int v99 = v89;
            if (v89) {
              atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            sub_1008C69E4(v91, v39, a6, a9, &v98);
            char v15 = (void *)v91;
            if (v99) {
              sub_10004D2C8(v99);
            }
            goto LABEL_51;
          }
        }
        else
        {
          unsigned int v39 = 0;
          if (!v38) {
            goto LABEL_47;
          }
        }
        sub_10004D2C8(v38);
        goto LABEL_47;
      }
LABEL_70:
      if ((a5 & 1) == 0)
      {
        char v46 = (std::__shared_weak_count *)a7[1];
        __int16 v95 = v46;
        if (v46) {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_1008CAE68(v15, a6);
        if (v95) {
          sub_10004D2C8(v95);
        }
      }
      uint64_t v31 = v85[7];
      char v47 = (std::__shared_weak_count *)v85[8];
      if (v47)
      {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v47);
        if (!v31) {
          goto LABEL_143;
        }
        uint64_t v48 = (std::__shared_weak_count *)v85[8];
        uint64_t v93 = v85[7];
        id v94 = v48;
        if (v48) {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        if (!v31) {
          goto LABEL_143;
        }
        uint64_t v93 = v85[7];
        id v94 = 0;
      }
      if (sub_1008C4968(*(void *)(v15[17] + 8), *(void *)(v15[17] + 16)))
      {
        uint64_t v49 = (void *)sub_1008C4A18(*(void *)(v15[17] + 8), *(void *)(v15[17] + 16));
        long long v52 = (void *)*v49;
        long long v50 = v49 + 1;
        int v51 = v52;
        if (v52 == v50)
        {
          int v86 = 0;
        }
        else
        {
          int v86 = 0;
          __int16 v83 = v50;
          do
          {
            uint64_t v53 = v51[4];
            char v54 = (std::__shared_weak_count *)v51[5];
            if (v54) {
              atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v53)
            {
              BOOL v88 = v54;
              if ((*(unsigned int (**)(uint64_t))(*(void *)v53 + 56))(v53) == a6)
              {
                unsigned int v55 = v15[9];
                if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
                {
                  if (v54) {
                    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v56 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 48))(v53);
                  uint64_t v57 = asString();
                  *(_DWORD *)std::string buf = 136315650;
                  *(void *)&uint8_t buf[4] = "notifyOtherActiveContextsAboutFailure";
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&unsigned char buf[14] = v56;
                  *(_WORD *)&unsigned char buf[22] = 2080;
                  *(void *)&uint8_t buf[24] = v57;
                  _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#I %s: %s failed to activate (%s)", buf, 0x20u);
                  if (v54) {
                    sub_10004D2C8(v54);
                  }
                  char v15 = (void *)v91;
                }
                long long v58 = (void *)sub_1008C4A18(*(void *)(v15[17] + 8), *(void *)(v15[17] + 16));
                uint64_t v60 = v58 + 1;
                long long v59 = (void *)*v58;
                if ((void *)*v58 != v58 + 1)
                {
                  do
                  {
                    uint64_t v61 = v59[4];
                    id v62 = (std::__shared_weak_count *)v59[5];
                    if (v62) {
                      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    if (v61 && (*(unsigned int (**)(uint64_t))(*(void *)v61 + 56))(v61) != a6)
                    {
                      uint64_t v63 = v15[9];
                      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                      {
                        if (v54) {
                          atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 48))(v53);
                        (*(void (**)(uint64_t))(*(void *)v61 + 56))(v61);
                        uint64_t v65 = asString();
                        char v66 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v61 + 136))(v61, 3);
                        uint64_t v67 = asStringBool(v66);
                        int v68 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 56))(v61);
                        v106[0] = 0;
                        v106[1] = 0;
                        BOOL v69 = sub_1008C7808(v91, v68, v106);
                        uint64_t v70 = asStringBool(v69);
                        *(_DWORD *)std::string buf = 136316162;
                        *(void *)&uint8_t buf[4] = "notifyOtherActiveContextsAboutFailure";
                        *(_WORD *)&unsigned char buf[12] = 2080;
                        *(void *)&unsigned char buf[14] = v64;
                        *(_WORD *)&unsigned char buf[22] = 2080;
                        *(void *)&uint8_t buf[24] = v65;
                        *(_WORD *)uint64_t v108 = 2080;
                        *(void *)&v108[2] = v67;
                        *(_WORD *)&v108[10] = 2080;
                        *(void *)&v108[12] = v70;
                        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#I %s: %s other context (%s), activated=%s, suspended=%s", buf, 0x34u);
                        char v54 = v88;
                        if (v88) {
                          sub_10004D2C8(v88);
                        }
                        char v15 = (void *)v91;
                      }
                      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v61 + 136))(v61, 3) & 1) != 0
                        || (int v71 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 56))(v61),
                            v105[0] = 0,
                            v105[1] = 0,
                            sub_1008C7808((uint64_t)v15, v71, v105)))
                      {
                        long long v72 = v15[9];
                        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
                        {
                          if (v62) {
                            atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 48))(v61);
                          if (v54) {
                            atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          uint64_t v74 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 48))(v53);
                          *(_DWORD *)std::string buf = 136315650;
                          *(void *)&uint8_t buf[4] = "notifyOtherActiveContextsAboutFailure";
                          *(_WORD *)&unsigned char buf[12] = 2080;
                          *(void *)&unsigned char buf[14] = v73;
                          *(_WORD *)&unsigned char buf[22] = 2080;
                          *(void *)&uint8_t buf[24] = v74;
                          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#I %s: Handover failed from %s to %s", buf, 0x20u);
                          if (v54) {
                            sub_10004D2C8(v54);
                          }
                          char v15 = (void *)v91;
                          if (v62) {
                            sub_10004D2C8(v62);
                          }
                        }
                        if (!*(unsigned char *)(v93 + 49))
                        {
                          uint64_t v75 = v15[14];
                          uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 56))(v53);
                          (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v75 + 208))(v75, v76, *(unsigned int *)(v93 + 52), a2);
                        }
                        (*(void (**)(uint64_t))(*(void *)v61 + 624))(v61);
                        int v86 = 1;
                      }
                    }
                    if (v62) {
                      sub_10004D2C8(v62);
                    }
                    uint64_t v77 = (void *)v59[1];
                    if (v77)
                    {
                      do
                      {
                        id v78 = v77;
                        uint64_t v77 = (void *)*v77;
                      }
                      while (v77);
                    }
                    else
                    {
                      do
                      {
                        id v78 = (void *)v59[2];
                        BOOL v45 = *v78 == (void)v59;
                        long long v59 = v78;
                      }
                      while (!v45);
                    }
                    long long v59 = v78;
                  }
                  while (v78 != v60);
                }
              }
            }
            if (v54) {
              sub_10004D2C8(v54);
            }
            BOOL v79 = (void *)v51[1];
            if (v79)
            {
              do
              {
                uint64_t v80 = v79;
                BOOL v79 = (void *)*v79;
              }
              while (v79);
            }
            else
            {
              do
              {
                uint64_t v80 = (void *)v51[2];
                BOOL v45 = *v80 == (void)v51;
                int v51 = v80;
              }
              while (!v45);
            }
            int v51 = v80;
          }
          while (v80 != v83);
        }
        if ((*(_DWORD *)v82 | v86))
        {
          (*(void (**)(unsigned char *__return_ptr, void *))(*v15 + 576))(buf, v15);
          sub_1008C7378(v15, (uint64_t *)buf);
          if (*(void *)&buf[8]) {
            sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
          }
        }
      }
      if (v94) {
        sub_10004D2C8(v94);
      }
    }
    uint64_t v31 = 0;
    goto LABEL_143;
  }
  uint64_t v30 = *(NSObject **)(v91 + 72);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = "handleContextActivateError";
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I %s: A retry (or fallback) activation has been triggered", buf, 0xCu);
  }
  uint64_t v31 = 1;
LABEL_143:
  if (v89) {
    sub_10004D2C8(v89);
  }
  return v31;
}

void sub_1008CACC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  char v38 = *(std::__shared_weak_count **)(v36 - 152);
  if (v38) {
    sub_10004D2C8(v38);
  }
  if (a24) {
    sub_10004D2C8(a24);
  }
  if (a19) {
    sub_10004D2C8(a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008CAE44(uint64_t a1, int a2)
{
  return sub_1008CBCAC(a1, a2, &v3);
}

void sub_1008CAE68(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[9];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315394;
    *(void *)uint32_t v11 = "handleDataContextDeactivated";
    *(_WORD *)&v11[8] = 2080;
    *(void *)&v11[10] = asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: %s", (uint8_t *)&v10, 0x16u);
  }
  uint64_t v6 = a1[18];
  long long v5 = (std::__shared_weak_count *)a1[19];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6)
  {
    (*(void (**)(int *__return_ptr))(*(void *)(v6 + *(void *)(*(void *)v6 - 56)) + 16))(&v10);
    int matched = DataUtils::matchPersonality();
    if (*(void *)&v11[4]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&v11[4]);
    }
    if (matched)
    {
      uint64_t v8 = a1[9];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = asString();
        int v10 = 136315394;
        *(void *)uint32_t v11 = "handleDataContextDeactivated";
        *(_WORD *)&v11[8] = 2080;
        *(void *)&v11[10] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: active settings deactivated for %s", (uint8_t *)&v10, 0x16u);
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 352))(v6, a2);
      sub_1008CCA68((uint64_t)a1, a2, 0, 0);
    }
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
}

void sub_1008CB068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008CB09C(uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, char a5, unsigned int a6, void *a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned __int8 a12)
{
  return sub_1008C9F54(a1 - 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_1008CB0BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 168))();
}

uint64_t sub_1008CB0E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 168))();
}

uint64_t sub_1008CB10C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 112) + 168))(*(void *)(a1 + 112), 0, 1);
}

uint64_t sub_1008CB13C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 144))();
}

uint64_t sub_1008CB164(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 144))();
}

void sub_1008CB18C(capabilities::ct *a1)
{
  if (capabilities::ct::supports5G(a1))
  {
    if ((*(uint64_t (**)(capabilities::ct *))(*(void *)a1 + 584))(a1))
    {
      uint64_t v9 = 0;
      int v10 = 0;
      (*(void (**)(uint64_t *__return_ptr, capabilities::ct *))(*(void *)a1 + 576))(&v9, a1);
      if ((sub_1008C4968(*(void *)(*((void *)a1 + 17) + 8), *(void *)(*((void *)a1 + 17) + 16)) & 1) == 0)
      {
        unsigned int v2 = *((void *)a1 + 9);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "invalid pInfo in freePduSessionId", buf, 2u);
        }
      }
      uint64_t v3 = sub_1008C4A18(*(void *)(*((void *)a1 + 17) + 8), *(void *)(*((void *)a1 + 17) + 16));
      uint64_t v5 = *(void *)(v3 + 24);
      uint64_t v4 = *(std::__shared_weak_count **)(v3 + 32);
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v5)
      {
        uint64_t v6 = *((void *)a1 + 9);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = *((_DWORD *)a1 + 102);
          *(_DWORD *)std::string buf = 67109120;
          int v12 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I free PDU SessionId %d", buf, 8u);
        }
        if ((*((_DWORD *)a1 + 102) & 0x80000000) == 0) {
          (*(void (**)(uint64_t))(*(void *)v5 + 200))(v5);
        }
      }
      if (v4) {
        sub_10004D2C8(v4);
      }
      if (v10) {
        sub_10004D2C8(v10);
      }
    }
    else
    {
      uint64_t v8 = *((void *)a1 + 9);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v9) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "inactive pInfo in freePduSessionId", (uint8_t *)&v9, 2u);
      }
    }
  }
}

void sub_1008CB3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008CB3E8(uint64_t a1)
{
}

void sub_1008CB3F0(capabilities::ct *a1, uint64_t a2)
{
  if (capabilities::ct::supports5G(a1))
  {
    if ((*(uint64_t (**)(capabilities::ct *))(*(void *)a1 + 584))(a1))
    {
      *(void *)std::string buf = 0;
      long long v16 = 0;
      (*(void (**)(uint8_t *__return_ptr, capabilities::ct *))(*(void *)a1 + 576))(buf, a1);
      if (sub_1008C4968(*(void *)(*((void *)a1 + 17) + 8), *(void *)(*((void *)a1 + 17) + 16)))
      {
        uint64_t v4 = sub_1008C4A18(*(void *)(*((void *)a1 + 17) + 8), *(void *)(*((void *)a1 + 17) + 16));
        uint64_t v6 = *(void *)(v4 + 24);
        uint64_t v5 = *(std::__shared_weak_count **)(v4 + 32);
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v6)
        {
          sub_1000F0058((uint64_t)v17, a2);
          uint64_t v7 = (*(uint64_t (**)(capabilities::ct *))(*(void *)a1 + 72))(a1);
          (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v6 + 232))(v6, v17, v7);
          sub_10003B34C(v17);
        }
        if (v5) {
          sub_10004D2C8(v5);
        }
      }
      else
      {
        int v12 = *((void *)a1 + 9);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)uint64_t v14 = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "invalid pInfo", v14, 2u);
        }
        uint64_t v13 = *(void *)(a2 + 24);
        if (!v13) {
          sub_10007B600();
        }
        (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
      }
      if (v16) {
        sub_10004D2C8(v16);
      }
    }
    else
    {
      int v10 = *((void *)a1 + 9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "inactive pInfo", buf, 2u);
      }
      uint64_t v11 = *(void *)(a2 + 24);
      if (!v11) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t))(*(void *)v11 + 48))(v11);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 24);
    if (!v8) {
      sub_10007B600();
    }
    uint64_t v9 = *(void (**)(void))(*(void *)v8 + 48);
    v9();
  }
}

void sub_1008CB6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, char a14)
{
  if (v14) {
    sub_10004D2C8(v14);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008CB724(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1008CB72C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 408);
}

uint64_t sub_1008CB734(uint64_t a1)
{
  return *(unsigned int *)(a1 + 400);
}

uint64_t sub_1008CB73C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 152))();
}

uint64_t sub_1008CB764(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 152))();
}

void sub_1008CB78C(uint64_t a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = *(uint64_t **)(a1 + 136);
    (*(void (**)(int *__return_ptr))(*(void *)(*a2 + *(void *)(*(void *)*a2 - 56)) + 16))(&v16);
    uint64_t v5 = sub_1008C4E94(v4, (uint64_t *)&v16);
    if (*(void *)&v17[4]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&v17[4]);
    }
    uint64_t v7 = (void *)*a2;
    uint64_t v6 = a2[1];
    uint64_t v9 = (uint64_t **)(v5 + 8);
    uint64_t v8 = *(uint64_t **)(v5 + 8);
    if (v8)
    {
      while (1)
      {
        while (1)
        {
          int v10 = (uint64_t **)v8;
          unint64_t v11 = v8[4];
          if (v11 <= (unint64_t)v7) {
            break;
          }
          uint64_t v8 = *v10;
          uint64_t v9 = v10;
          if (!*v10) {
            goto LABEL_12;
          }
        }
        if (v11 >= (unint64_t)v7) {
          break;
        }
        uint64_t v8 = v10[1];
        if (!v8)
        {
          uint64_t v9 = v10 + 1;
          goto LABEL_12;
        }
      }
    }
    else
    {
      int v10 = (uint64_t **)(v5 + 8);
LABEL_12:
      int v12 = (uint64_t *)operator new(0x30uLL);
      v12[4] = (uint64_t)v7;
      v12[5] = v6;
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      sub_100046C38((uint64_t **)v5, (uint64_t)v10, v9, v12);
    }
    uint64_t v13 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))();
      (*(void (**)(void))(*(void *)*a2 + 56))();
      uint64_t v15 = asString();
      int v16 = 136315650;
      *(void *)uint64_t v17 = "registerContext";
      *(_WORD *)&v17[8] = 2080;
      *(void *)&v17[10] = v14;
      __int16 v18 = 2080;
      uint64_t v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I %s: %s registered with us (%s)", (uint8_t *)&v16, 0x20u);
    }
  }
}

void sub_1008CB998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008CB9B8(uint64_t a1, void *a2)
{
}

void sub_1008CB9C0(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))();
    (*(void (**)(void))(*(void *)*a2 + 56))();
    int v22 = 136315650;
    *(void *)uint64_t v23 = "unregisterContext";
    *(_WORD *)&v23[8] = 2080;
    *(void *)&v23[10] = v5;
    __int16 v24 = 2080;
    uint64_t v25 = asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: %s unregistered with us (%s)", (uint8_t *)&v22, 0x20u);
  }
  uint64_t v6 = *(void *)(a1 + 136);
  (*(void (**)(int *__return_ptr))(*(void *)(*a2 + *(void *)(*(void *)*a2 - 56)) + 16))(&v22);
  char v7 = sub_1008C4968(*(void *)(v6 + 8), *(void *)(v6 + 16));
  if (*(void *)&v23[4]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v23[4]);
  }
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 136);
    (*(void (**)(int *__return_ptr))(*(void *)(*a2 + *(void *)(*(void *)*a2 - 56)) + 16))(&v22);
    uint64_t v9 = (void *)sub_1008C4A18(*(void *)(v8 + 8), *(void *)(v8 + 16));
    int v10 = (uint64_t *)v9[1];
    if (v10)
    {
      unint64_t v11 = *a2;
      int v12 = v9 + 1;
      uint64_t v13 = (void *)v9[1];
      do
      {
        unint64_t v14 = v13[4];
        BOOL v15 = v14 >= v11;
        if (v14 >= v11) {
          int v16 = v13;
        }
        else {
          int v16 = v13 + 1;
        }
        if (v15) {
          int v12 = v13;
        }
        uint64_t v13 = (void *)*v16;
      }
      while (*v16);
      if (v12 != v9 + 1 && v12[4] <= v11)
      {
        uint64_t v17 = (uint64_t *)v12[1];
        if (v17)
        {
          do
          {
            __int16 v18 = v17;
            uint64_t v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          uint64_t v19 = v12;
          do
          {
            __int16 v18 = (uint64_t *)v19[2];
            BOOL v20 = *v18 == (void)v19;
            uint64_t v19 = v18;
          }
          while (!v20);
        }
        if ((uint64_t *)*v9 == v12) {
          *uint64_t v9 = v18;
        }
        --v9[2];
        sub_10005EE6C(v10, v12);
        uint64_t v21 = (std::__shared_weak_count *)v12[5];
        if (v21) {
          sub_10004D2C8(v21);
        }
        operator delete(v12);
      }
    }
    if (*(void *)&v23[4]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&v23[4]);
    }
  }
}

void sub_1008CBC58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008CBC7C(uint64_t a1, unint64_t *a2)
{
}

uint64_t sub_1008CBC84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 160))();
}

uint64_t sub_1008CBCAC(uint64_t a1, int a2, unsigned char *a3)
{
  *a3 = 0;
  if (anyContextType()) {
    int v6 = 0;
  }
  else {
    int v6 = a2;
  }
  int valid = validContextType();
  uint64_t result = 0;
  if (valid)
  {
    BOOL v9 = *(_DWORD *)(a1 + 184) == v6
      && *(unsigned char *)(a1 + 80 * v6 + 192)
      && *(unsigned char *)(a1 + 80 * v6 + 216)
      && *(unsigned __int8 *)(a1 + 80 * v6 + 233) == 0;
    int v10 = anyContextType();
    if (v9 || !v10)
    {
      if ((v9 | v10) == 1)
      {
        int v11 = *(_DWORD *)(a1 + 184);
        goto LABEL_19;
      }
    }
    else if (*(_DWORD *)(a1 + 184) == 1 && *(unsigned char *)(a1 + 272) && *(unsigned char *)(a1 + 296) && !*(unsigned char *)(a1 + 313))
    {
      int v11 = 1;
LABEL_19:
      *a3 = *(unsigned char *)(a1 + 80 * v11 + 224);
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1008CBDB8(uint64_t a1, int a2)
{
  return sub_1008CBCAC(a1 - 8, a2, &v3);
}

uint64_t sub_1008CBDE0(uint64_t a1, int a2)
{
  return sub_1008CBCAC(a1 - 16, a2, &v3);
}

uint64_t sub_1008CBE08(uint64_t a1, int a2)
{
  return sub_1008CBCAC(a1 - 24, a2, &v3);
}

uint64_t sub_1008CBE30(uint64_t a1, int a2, unsigned char *a3)
{
  return sub_1008CBCAC(a1 - 8, a2, a3);
}

uint64_t sub_1008CBE38(uint64_t a1, int a2, unsigned char *a3)
{
  return sub_1008CBCAC(a1 - 16, a2, a3);
}

uint64_t sub_1008CBE40(uint64_t a1)
{
  return a1 + 392;
}

uint64_t sub_1008CBE48(uint64_t a1)
{
  return a1 + 384;
}

uint64_t sub_1008CBE50(uint64_t a1)
{
  return a1 + 392;
}

uint64_t sub_1008CBE58(uint64_t a1)
{
  return a1 + 384;
}

void sub_1008CBE60(uint64_t a1, int a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 352);
  if (v2 != a2)
  {
    BOOL v3 = a2;
    uint64_t v5 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315650;
      char v7 = "setRetryScheduled";
      __int16 v8 = 2080;
      uint64_t v9 = asStringBool(v2 != 0);
      __int16 v10 = 2080;
      uint64_t v11 = asStringBool(v3);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: (change states) %s => %s", (uint8_t *)&v6, 0x20u);
    }
    *(unsigned char *)(a1 + 352) = v3;
  }
}

void sub_1008CBF4C(uint64_t a1, int a2)
{
}

uint64_t sub_1008CBF54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 352);
}

uint64_t sub_1008CBF5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 336);
}

uint64_t sub_1008CBF64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 328);
}

uint64_t sub_1008CBF6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (!sub_1008C4968(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16))) {
    return 1;
  }
  char v7 = (void *)sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16));
  __int16 v8 = v7 + 1;
  uint64_t v9 = (void *)*v7;
  if ((void *)*v7 == v7 + 1) {
    return 1;
  }
  while (1)
  {
    uint64_t v11 = v9[4];
    __int16 v10 = (std::__shared_weak_count *)v9[5];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 56))(v11) == a3)
    {
      int v12 = *(std::__shared_weak_count **)(a4 + 8);
      uint64_t v19 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = sub_1008CC11C(a1);
      char v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 552))(v11, v13);
      if (v19) {
        sub_10004D2C8(v19);
      }
      if ((v14 & 1) == 0) {
        break;
      }
    }
    if (v10) {
      sub_10004D2C8(v10);
    }
    BOOL v15 = (void *)v9[1];
    if (v15)
    {
      do
      {
        int v16 = v15;
        BOOL v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        int v16 = (void *)v9[2];
        BOOL v17 = *v16 == (void)v9;
        uint64_t v9 = v16;
      }
      while (!v17);
    }
    uint64_t v9 = v16;
    if (v16 == v8) {
      return 1;
    }
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  return 0;
}

void sub_1008CC0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008CC11C(uint64_t a1)
{
  if (!sub_1008C4968(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16))) {
    return 0;
  }
  BOOL v3 = (void *)sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16));
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)*v3;
  if ((void *)*v3 == v3 + 1) {
    return 0;
  }
  while (1)
  {
    uint64_t v7 = v5[4];
    int v6 = (std::__shared_weak_count *)v5[5];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
    if (!v8)
    {
      if (!*(void *)(sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16))+ 24)|| (uint64_t v9 = sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16)), v1 = (*(uint64_t (**)(void))(**(void **)(v9 + 24) + 192))(*(void *)(v9 + 24)), (int)v1 <= 0))
      {
        uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 656))(v7);
      }
    }
    if (v6) {
      sub_10004D2C8(v6);
    }
    if (!v8) {
      break;
    }
    __int16 v10 = (void *)v5[1];
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        __int16 v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (void *)v5[2];
        BOOL v12 = *v11 == (void)v5;
        uint64_t v5 = v11;
      }
      while (!v12);
    }
    uint64_t v5 = v11;
    if (v11 == v4) {
      return 0;
    }
  }
  return v1;
}

void sub_1008CC2B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008CC2D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1008CBF6C(a1 - 24, a2, a3, a4);
}

unsigned char *sub_1008CC2DC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1008C8B1C(a1 - 24, a2);
}

void sub_1008CC2E4(uint64_t a1, int a2, long long *a3, char a4)
{
  if (validContextType())
  {
    if ((a4 & 1) == 0
      && *(unsigned char *)a3
      && *(unsigned char *)(a1 + 80 * a2 + 192)
      && *(unsigned char *)(a1 + 80 * a2 + 224)
      && *((unsigned char *)a3 + 24)
      && !*((unsigned char *)a3 + 32))
    {
      *((unsigned char *)a3 + 32) = 1;
    }
    int v8 = (BOOL *)(a1 + 80 * a2 + 192);
    if (!sub_1008DBAC4((unsigned __int8 *)v8, (unsigned __int8 *)a3))
    {
      memset(__p, 0, sizeof(__p));
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v8;
      *(_OWORD *)uint64_t v49 = *(_OWORD *)(a1 + 80 * a2 + 208);
      *(_OWORD *)&v49[10] = *(_OWORD *)(a1 + 80 * a2 + 218);
      uint64_t v9 = (void **)(a1 + 80 * a2 + 240);
      if (*(char *)(a1 + 80 * a2 + 263) < 0)
      {
        sub_10004FC84(&__p[6], *v9, *(void *)(a1 + 80 * a2 + 248));
      }
      else
      {
        *(_OWORD *)&__p[6] = *(_OWORD *)v9;
        *(void *)&__p[22] = *(void *)(a1 + 80 * a2 + 256);
      }
      uint64_t v10 = a1 + 184 + 80 * a2;
      char v12 = *(unsigned char *)(v10 + 80);
      uint64_t v11 = (unsigned char *)(v10 + 80);
      __p[30] = v12;
      int v13 = otherContextType();
      int v14 = v13;
      char v47 = a4;
      if (a4)
      {
        int v15 = *(_DWORD *)(a1 + 184);
        if (!*(unsigned char *)a3)
        {
LABEL_26:
          BOOL v16 = 0;
LABEL_29:
          long long v17 = *a3;
          long long v18 = a3[1];
          *(_OWORD *)(a1 + 80 * a2 + 218) = *(long long *)((char *)a3 + 26);
          *(_OWORD *)int v8 = v17;
          *(_OWORD *)(a1 + 80 * a2 + 208) = v18;
          std::string::operator=((std::string *)(a1 + 80 * a2 + 240), (const std::string *)a3 + 2);
          *uint64_t v11 = *((unsigned char *)a3 + 72);
          *(_DWORD *)(a1 + 184) = v15;
          char v19 = v47;
          if ((v47 & 1) == 0)
          {
            if (v16)
            {
              if (*(unsigned char *)(a1 + 80 * v14 + 192) && *(unsigned char *)(a1 + 80 * v14 + 224)) {
                *(unsigned char *)(a1 + 80 * a2 + 216) = 1;
              }
              *(unsigned char *)(a1 + 80 * v14 + 216) = 0;
            }
            if (!*v8)
            {
              uint64_t v20 = a1 + 80 * a2;
              *(unsigned char *)(v20 + 216) = 0;
              *(unsigned char *)(v20 + 224) = 0;
              *(_DWORD *)(v20 + 228) = 0;
              *(_WORD *)(v20 + 232) = 0;
            }
          }
          uint64_t v21 = *(NSObject **)(a1 + 72);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v45 = asString();
            uint64_t v44 = asStringBool(v48[0]);
            uint64_t v43 = asStringBool(v49[8]);
            uint64_t v42 = asStringBool(v49[16]);
            uint64_t v41 = asStringBool(v49[24]);
            uint64_t v40 = asStringBool(v49[25]);
            uint64_t v46 = asString();
            uint64_t v39 = asStringBool(*v8);
            uint64_t v22 = a1 + 80 * a2;
            uint64_t v37 = *(void *)(v22 + 200);
            uint64_t v38 = *(void *)(v22 + 208);
            uint64_t v36 = asStringBool(*(unsigned char *)(v22 + 216));
            uint64_t v23 = asStringBool(*(unsigned char *)(a1 + 80 * a2 + 224));
            uint64_t v24 = a1 + 80 * a2;
            int v25 = *(_DWORD *)(v24 + 228);
            uint64_t v26 = asStringBool(*(unsigned char *)(v24 + 232));
            uint64_t v27 = asStringBool(*(unsigned char *)(a1 + 80 * a2 + 233));
            uint64_t v28 = asString();
            *(_DWORD *)std::string buf = 136320002;
            long long v52 = "setActivationParams";
            __int16 v53 = 2080;
            uint64_t v54 = v45;
            __int16 v55 = 2080;
            uint64_t v56 = v44;
            __int16 v57 = 2080;
            uint64_t v58 = *(void *)&v48[8];
            __int16 v59 = 2080;
            uint64_t v60 = *(void *)v49;
            __int16 v61 = 2080;
            uint64_t v62 = v43;
            __int16 v63 = 2080;
            uint64_t v64 = v42;
            __int16 v65 = 1024;
            int v66 = *(_DWORD *)&v49[20];
            __int16 v67 = 2080;
            uint64_t v68 = v41;
            __int16 v69 = 2080;
            uint64_t v70 = v40;
            __int16 v71 = 2080;
            uint64_t v72 = v46;
            __int16 v73 = 2080;
            uint64_t v74 = v39;
            __int16 v75 = 2080;
            uint64_t v76 = v37;
            __int16 v77 = 2080;
            uint64_t v78 = v38;
            __int16 v79 = 2080;
            uint64_t v80 = v36;
            __int16 v81 = 2080;
            uint64_t v82 = v23;
            __int16 v83 = 1024;
            int v84 = v25;
            __int16 v85 = 2080;
            uint64_t v86 = v26;
            __int16 v87 = 2080;
            uint64_t v88 = v27;
            __int16 v89 = 2080;
            uint64_t v90 = v28;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I %s: (change states) for %s: act=<%s> r=<%s> p=<%s> h=<%s> comp=<%s> s=<%d> pr=<%s> deac=<%s> (curr %s) => act=<%s> r=<%s> p=<%s> h=<%s> comp=<%s> s=<%d> pr=<%s> deac=<%s> (curr %s)", buf, 0xC2u);
            char v19 = v47;
          }
          uint64_t v29 = *(void *)(a1 + 136);
          uint64_t v30 = *(void *)(v29 + 8);
          uint64_t v31 = *(void *)(v29 + 16);
          if (v30 != v31)
          {
            uint64_t v32 = a1 + 80 * a2;
            uint64_t v33 = (unsigned char *)(v32 + 224);
            long long v34 = (unsigned char *)(v32 + 232);
            do
            {
              uint64_t v35 = *(void *)(v30 + 16 * a2 + 24);
              if (v35 && (!*v8 || *v33 || *v34)) {
                (*(void (**)(uint64_t))(*(void *)v35 + 216))(v35);
              }
              v30 += 72;
            }
            while (v30 != v31);
          }
          if ((v19 & 1) == 0) {
            sub_1008CC89C((void *)a1, a2);
          }
          if ((__p[29] & 0x80000000) != 0) {
            operator delete(*(void **)&__p[6]);
          }
          return;
        }
      }
      else
      {
        if (!*(unsigned char *)a3)
        {
          int v15 = 2;
          if (*(unsigned char *)(a1 + 80 * v13 + 192))
          {
            BOOL v16 = 0;
            if (*(unsigned char *)(a1 + 80 * v13 + 233)) {
              int v15 = 2;
            }
            else {
              int v15 = v13;
            }
            goto LABEL_29;
          }
          goto LABEL_26;
        }
        int v15 = a2;
        if (*((_DWORD *)a3 + 9))
        {
          int v15 = a2;
          if (*(unsigned char *)(a1 + 80 * v13 + 192))
          {
            int v15 = a2;
            if (!*(_DWORD *)(a1 + 80 * v13 + 228))
            {
              if (*(unsigned char *)(a1 + 80 * v13 + 233)) {
                int v15 = a2;
              }
              else {
                int v15 = v13;
              }
            }
          }
        }
      }
      BOOL v16 = !*v8;
      goto LABEL_29;
    }
  }
}

void sub_1008CC864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
}

void sub_1008CC894(uint64_t a1, int *a2)
{
}

void sub_1008CC89C(void *a1, int a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  _DWORD v8[2] = sub_1008D46FC;
  void v8[3] = &unk_101A17318;
  v8[4] = a1;
  int v9 = a2;
  BOOL v3 = (std::__shared_weak_count *)a1[6];
  if (!v3 || (uint64_t v4 = a1[5], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  int v6 = v5;
  uint64_t v7 = a1[7];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008DBFC8;
  block[3] = &unk_101A17588;
  block[5] = v4;
  uint64_t v11 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v8;
  dispatch_async(v7, block);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10004D2C8(v6);
}

void sub_1008CC9B8(uint64_t a1, int a2)
{
  char v6 = 0;
  __int16 v5 = 0;
  __int16 v9 = 0;
  char v10 = 0;
  memset(v15, 0, sizeof(v15));
  *(void *)&long long v2 = 0;
  *((void *)&v2 + 1) = "";
  BOOL v3 = "CommCenter";
  char v4 = 0;
  int v7 = 0;
  char v8 = 0;
  int v11 = 0;
  __int16 v12 = 0;
  long long __p = 0;
  uint64_t v14 = 0;
  __int16 v16 = 0;
  sub_1008CC2E4(a1, a2, &v2, 0);
  if ((char)v16 < 0) {
    operator delete(__p);
  }
}

void sub_1008CCA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008CCA60(uint64_t a1, int a2)
{
}

void sub_1008CCA68(uint64_t a1, unsigned int a2, BOOL a3, int a4)
{
  __int16 v5 = (unsigned int *)a1;
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 80));
  int v7 = ServiceMap;
  if (v8 < 0)
  {
    __int16 v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      uint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v8;
  __int16 v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)buf);
  if (v12)
  {
    int v13 = (std::__shared_weak_count *)v12[4];
    uint64_t v30 = v12[3];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v13);
      char v28 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v30 = 0;
  }
  std::mutex::unlock(v7);
  int v13 = 0;
  char v28 = 1;
LABEL_9:
  if (v30)
  {
    uint64_t v29 = v13;
    if (a4)
    {
      subscriber::makeSimSlotRange();
      uint64_t v14 = v33;
      if (v33 != v34)
      {
        while ((v35(LODWORD(v14->__vftable)) & 1) == 0)
        {
          uint64_t v14 = (std::__shared_weak_count *)((char *)v14 + 4);
          if (v14 == v34)
          {
            uint64_t v14 = v34;
            break;
          }
        }
        while (v14 != v34)
        {
          uint64_t v15 = LODWORD(v14->__vftable);
          __int16 v16 = v5;
          long long v17 = *((void *)v5 + 9);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v18 = subscriber::asString();
            unsigned int v19 = v16[32];
            uint64_t v20 = asString();
            uint64_t v21 = asStringBool(a3);
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = v18;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v19;
            __int16 v37 = 2080;
            uint64_t v38 = v20;
            __int16 v39 = 2080;
            uint64_t v40 = v21;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I reportDataPDPActivatorState simSlot %s, pdp %d, ct %s, active %s (forced)", buf, 0x26u);
            int v13 = v29;
          }
          __int16 v5 = v16;
          (*(void (**)(uint64_t, uint64_t, void, void, BOOL))(*(void *)v30 + 864))(v30, v15, v16[32], a2, a3);
          uint64_t v22 = (std::__shared_weak_count *)((char *)&v14->__vftable + 4);
          uint64_t v14 = v34;
          if (v22 != v34)
          {
            uint64_t v14 = v22;
            while ((v35(LODWORD(v14->__vftable)) & 1) == 0)
            {
              uint64_t v14 = (std::__shared_weak_count *)((char *)v14 + 4);
              if (v14 == v34)
              {
                uint64_t v14 = v34;
                break;
              }
            }
          }
        }
      }
    }
    else if ((*(unsigned int (**)(unsigned int *))(*(void *)v5 + 584))(v5))
    {
      uint64_t v23 = *((void *)v5 + 9);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(std::__shared_weak_count **__return_ptr, unsigned int *))(*(void *)v5 + 576))(&v33, v5);
        uint64_t v24 = subscriber::asString();
        unsigned int v25 = v5[32];
        uint64_t v26 = asString();
        uint64_t v27 = asStringBool(a3);
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = v24;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v25;
        __int16 v37 = 2080;
        uint64_t v38 = v26;
        __int16 v39 = 2080;
        uint64_t v40 = v27;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I reportDataPDPActivatorState simSlot %s, pdp %d, ct %s, active %s", buf, 0x26u);
        if (v34) {
          sub_10004D2C8(v34);
        }
      }
      (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v5 + 576))(buf, v5);
      (*(void (**)(uint64_t, void, void, void, BOOL))(*(void *)v30 + 864))(v30, *(unsigned int *)(*(void *)buf + 52), v5[32], a2, a3);
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
    }
  }
  if ((v28 & 1) == 0) {
    sub_10004D2C8(v13);
  }
}

void sub_1008CCE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if ((a11 & 1) == 0) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008CCEFC(void *a1)
{
  long long v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    char v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      __int16 v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = otherContextType();
        sub_1008C588C(v3, v6);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_1008CCF7C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1008CCF90(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1008CCFAC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1008CCFBC(uint64_t a1)
{
  if (sub_1008C4968(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16)))
  {
    uint64_t v2 = (void *)sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16));
    uint64_t v3 = v2 + 1;
    char v4 = (void *)*v2;
    if ((void *)*v2 != v2 + 1)
    {
      do
      {
        uint64_t v5 = v4[4];
        uint64_t v6 = (std::__shared_weak_count *)v4[5];
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t))(*(void *)v5 + 504))(v5);
        if (v6) {
          sub_10004D2C8(v6);
        }
        int v7 = (void *)v4[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            int v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v4[2];
            BOOL v9 = *v8 == (void)v4;
            char v4 = v8;
          }
          while (!v9);
        }
        char v4 = v8;
      }
      while (v8 != v3);
    }
  }
}

void sub_1008CD0A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008CD0B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 136);
  uint64_t v2 = *(void **)(v1 + 8);
  uint64_t v3 = *(void **)(v1 + 16);
  if (v2 == v3)
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = (void *)*v2;
      if ((void *)*v2 != v2 + 1)
      {
        do
        {
          uint64_t v6 = v5[4];
          int v7 = (std::__shared_weak_count *)v5[5];
          if (v7) {
            atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 488))(v6);
          if (v7) {
            sub_10004D2C8(v7);
          }
          BOOL v9 = (void *)v5[1];
          if (v9)
          {
            do
            {
              uint64_t v10 = v9;
              BOOL v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v10 = (void *)v5[2];
              BOOL v11 = *v10 == (void)v5;
              uint64_t v5 = v10;
            }
            while (!v11);
          }
          v4 |= v8;
          uint64_t v5 = v10;
        }
        while (v10 != v2 + 1);
      }
      v2 += 9;
    }
    while (v2 != v3);
  }
  return v4 & 1;
}

void sub_1008CD1B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008CD1CC(uint64_t a1)
{
  return sub_1008CD0B8(a1 - 8);
}

uint64_t sub_1008CD1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 112) + 176))(*(void *)(a1 + 112), a2, a3, *(unsigned int *)(*(void *)a4 + 52));
}

uint64_t sub_1008CD204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**(void **)(a1 + 104) + 176))(*(void *)(a1 + 104), a2, a3, *(unsigned int *)(*(void *)a4 + 52));
}

uint64_t sub_1008CD234(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 184))();
}

uint64_t sub_1008CD25C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 104) + 184))();
}

uint64_t sub_1008CD284(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v5 = *(const void **)(v3 + 40);
      uint64_t v6 = *(std::__shared_weak_count **)(v3 + 48);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v5) {
        break;
      }
      int v8 = 3;
      if (v6) {
        goto LABEL_11;
      }
LABEL_12:
      if (v8 != 3 && v8) {
        return v1 & 1;
      }
      v3 += 72;
      if (v3 == v4) {
        goto LABEL_18;
      }
    }
    if (v7)
    {
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v1 = (*(uint64_t (**)(void *))(*(void *)v7 + 416))(v7);
      if (!v6) {
        return v1 & 1;
      }
      sub_10004D2C8(v6);
      int v8 = 1;
    }
    else
    {
      int v8 = 0;
      if (!v6) {
        goto LABEL_12;
      }
    }
LABEL_11:
    sub_10004D2C8(v6);
    goto LABEL_12;
  }
LABEL_18:
  char v1 = 0;
  return v1 & 1;
}

void sub_1008CD3BC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    sub_10004D2C8(v1);
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008CD3DC(uint64_t a1)
{
  return sub_1008CD284(a1 - 24);
}

void sub_1008CD3E4(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void **)(v2 + 8);
  for (uint64_t i = *(void **)(v2 + 16); v3 != i; v3 += 9)
  {
    uint64_t v6 = (void *)*v3;
    if ((void *)*v3 != v3 + 1)
    {
      do
      {
        uint64_t v8 = v6[4];
        int v7 = (std::__shared_weak_count *)v6[5];
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 56))(v8) == a2)
        {
          (*(void (**)(uint64_t))(*(void *)v8 + 512))(v8);
          BOOL v9 = *(NSObject **)(a1 + 72);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I reset state due to resetDataContext", buf, 2u);
          }
          sub_1008CCA68(a1, a2, 0, 1);
        }
        if (v7) {
          sub_10004D2C8(v7);
        }
        uint64_t v10 = (void *)v6[1];
        if (v10)
        {
          do
          {
            BOOL v11 = v10;
            uint64_t v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            BOOL v11 = (void *)v6[2];
            BOOL v12 = *v11 == (void)v6;
            uint64_t v6 = v11;
          }
          while (!v12);
        }
        uint64_t v6 = v11;
      }
      while (v11 != v3 + 1);
    }
  }
}

void sub_1008CD574(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008CD590(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1008CD598(uint64_t a1)
{
  return sub_1008CC11C(a1 - 8);
}

uint64_t sub_1008CD5A0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 152);
  *a2 = *(void *)(result + 144);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1008CD5BC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 144);
  *a2 = *(void *)(result + 136);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1008CD5D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 40), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v5);
  Registry::getTimerService(&v18, *(Registry **)(a1 + 80));
  uint64_t v7 = v18;
  sub_100058DB0(__p, "BB context handover back off(resume)");
  uint64_t v8 = *(NSObject **)(a1 + 56);
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = sub_1008CD83C;
  aBlock[3] = &unk_101A172E8;
  aBlock[4] = a1;
  void aBlock[5] = v4;
  int v13 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v14 = _Block_copy(aBlock);
  sub_100118A44(v7, (uint64_t)__p, 0, 10000000, &object, &v14);
  uint64_t v9 = v20;
  uint64_t v20 = 0;
  uint64_t v10 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = v9;
  if (v10)
  {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v11 = v20;
    uint64_t v20 = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  if (v14) {
    _Block_release(v14);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19) {
    sub_10004D2C8(v19);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  std::__shared_weak_count::__release_weak(v6);
}

void sub_1008CD7D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, dispatch_object_t object, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(v25 - 48);
  if (v27) {
    sub_10004D2C8(v27);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void sub_1008CD83C(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(NSObject **)(v3 + 72);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v8 = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I BB context handover back off timer(resume) fired", v8, 2u);
        }
        uint64_t v7 = *(void *)(v3 + 176);
        *(void *)(v3 + 176) = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_1008CD900(uint64_t a1)
{
}

void sub_1008CD908(void *a1@<X0>, char **a2@<X8>)
{
  if ((*(uint64_t (**)(void *))(*a1 + 584))(a1))
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 576))(&v25, a1);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    if (sub_1008C4968(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16)))
    {
      uint64_t v4 = (void *)sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16));
      uint64_t v5 = v4 + 1;
      uint64_t v6 = (void *)*v4;
      if ((void *)*v4 != v4 + 1)
      {
        do
        {
          long long v7 = *((_OWORD *)v6 + 2);
          uint64_t v8 = (std::__shared_weak_count *)v6[5];
          if (v8)
          {
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v9 = a2[1];
          unint64_t v10 = (unint64_t)a2[2];
          if ((unint64_t)v9 >= v10)
          {
            BOOL v12 = *a2;
            uint64_t v13 = (v9 - *a2) >> 4;
            unint64_t v14 = v13 + 1;
            if ((unint64_t)(v13 + 1) >> 60) {
              sub_10006A748();
            }
            long long v24 = v7;
            if ((uint64_t)(v10 - (void)v12) >> 3 > v14) {
              unint64_t v14 = (uint64_t)(v10 - (void)v12) >> 3;
            }
            if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v14;
            }
            uint64_t v30 = a2 + 2;
            if (v15 >> 60) {
              sub_10006A7CC();
            }
            __int16 v16 = (char *)operator new(16 * v15);
            char v17 = &v16[16 * v13];
            *(_OWORD *)char v17 = v24;
            uint64_t v11 = v17 + 16;
            uint64_t v18 = &v16[16 * v15];
            v28.i64[1] = (uint64_t)(v17 + 16);
            uint64_t v29 = v18;
            if (v9 == v12)
            {
              int64x2_t v20 = vdupq_n_s64((unint64_t)v9);
            }
            else
            {
              do
              {
                long long v19 = *((_OWORD *)v9 - 1);
                v9 -= 16;
                *((_OWORD *)v17 - 1) = v19;
                v17 -= 16;
                *(void *)uint64_t v9 = 0;
                *((void *)v9 + 1) = 0;
              }
              while (v9 != v12);
              int64x2_t v20 = *(int64x2_t *)a2;
              unint64_t v10 = (unint64_t)a2[2];
              uint64_t v11 = (char *)v28.i64[1];
              uint64_t v18 = v29;
            }
            *a2 = v17;
            a2[1] = v11;
            int64x2_t v28 = v20;
            a2[2] = v18;
            uint64_t v29 = (char *)v10;
            uint64_t v27 = v20.i64[0];
            sub_10019E528((uint64_t)&v27);
          }
          else
          {
            *(void *)uint64_t v9 = v7;
            *((void *)v9 + 1) = v8;
            uint64_t v11 = v9 + 16;
            a2[1] = v9 + 16;
          }
          a2[1] = v11;
          if (v8) {
            sub_10004D2C8(v8);
          }
          uint64_t v21 = (void *)v6[1];
          if (v21)
          {
            do
            {
              uint64_t v22 = v21;
              uint64_t v21 = (void *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              uint64_t v22 = (void *)v6[2];
              BOOL v23 = *v22 == (void)v6;
              uint64_t v6 = v22;
            }
            while (!v23);
          }
          uint64_t v6 = v22;
        }
        while (v22 != v5);
      }
    }
    if (v26) {
      sub_10004D2C8(v26);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1008CDB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_10005CBF0((void ***)va);
  if (a7) {
    sub_10004D2C8(a7);
  }
  _Unwind_Resume(a1);
}

void sub_1008CDBB0(uint64_t a1@<X0>, char **a2@<X8>)
{
}

uint64_t sub_1008CDBB8(Registry **a1)
{
  if (((*((uint64_t (**)(Registry **, uint64_t, uint64_t, uint64_t))*a1 + 71))(a1, 2, 1, 1) & 1) == 0)
  {
    char v1 = 0;
    return v1 & 1;
  }
  unint64_t v15 = 0;
  __int16 v16 = 0;
  (*((void (**)(uint64_t **__return_ptr, Registry **))*a1 + 72))(&v15, a1);
  if (v15)
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(v15, a1[10]);
    uint64_t v4 = ServiceMap;
    if ((v5 & 0x8000000000000000) != 0)
    {
      uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v7 = 5381;
      do
      {
        unint64_t v5 = v7;
        unsigned int v8 = *v6++;
        uint64_t v7 = (33 * v7) ^ v8;
      }
      while (v8);
    }
    std::mutex::lock(ServiceMap);
    unint64_t v17 = v5;
    uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v17);
    if (v9)
    {
      uint64_t v10 = v9[3];
      uint64_t v11 = (std::__shared_weak_count *)v9[4];
      if (v11)
      {
        char v1 = (_BYTE)v11 + 8;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v4);
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v11);
        char v12 = 0;
        if (!v10) {
          goto LABEL_10;
        }
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    std::mutex::unlock(v4);
    uint64_t v11 = 0;
    char v12 = 1;
    if (!v10)
    {
LABEL_10:
      if (v12)
      {
LABEL_16:
        if (v10) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
LABEL_15:
      sub_10004D2C8(v11);
      goto LABEL_16;
    }
LABEL_14:
    int v13 = *((_DWORD *)v15 + 13);
    char v1 = v13 == (*(unsigned int (**)(uint64_t))(*(void *)v10 + 776))(v10);
    if (v12) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_17:
  char v1 = 0;
LABEL_18:
  if (v16) {
    sub_10004D2C8(v16);
  }
  return v1 & 1;
}

void sub_1008CDD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  if (a11) {
    sub_10004D2C8(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008CDDAC(uint64_t a1)
{
  return sub_1008CDBB8((Registry **)(a1 - 16));
}

void sub_1008CDDB4(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X2>, void *a4@<X8>)
{
  if (*a3)
  {
    if (!sub_1008C4968(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16))|| (uint64_t v7 = (void *)sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16)), v8 = v7 + 1, v9 = (void *)*v7, (void *)*v7 == v7 + 1))
    {
LABEL_15:
      *a4 = 0;
      a4[1] = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v11 = v9[4];
        uint64_t v10 = (std::__shared_weak_count *)v9[5];
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 56))(v11) == a2) {
          break;
        }
        if (v10) {
          sub_10004D2C8(v10);
        }
        char v12 = (void *)v9[1];
        if (v12)
        {
          do
          {
            int v13 = v12;
            char v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            int v13 = (void *)v9[2];
            BOOL v14 = *v13 == (void)v9;
            uint64_t v9 = v13;
          }
          while (!v14);
        }
        uint64_t v9 = v13;
        if (v13 == v8) {
          goto LABEL_15;
        }
      }
      *a4 = v11;
      a4[1] = v10;
    }
    return;
  }
  uint64_t v38 = 0;
  __int16 v39 = 0;
  (*(void (**)(uint64_t **__return_ptr, uint64_t))(*(void *)a1 + 576))(&v38, a1);
  if (!v38 || (unsigned int v15 = *((_DWORD *)v38 + 13)) == 0)
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(v38, *(Registry **)(a1 + 80));
    unint64_t v17 = ServiceMap;
    if ((v18 & 0x8000000000000000) != 0)
    {
      long long v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v20 = 5381;
      do
      {
        unint64_t v18 = v20;
        unsigned int v21 = *v19++;
        uint64_t v20 = (33 * v20) ^ v21;
      }
      while (v21);
    }
    std::mutex::lock(ServiceMap);
    unint64_t v40 = v18;
    uint64_t v22 = sub_10004D37C(&v17[1].__m_.__sig, &v40);
    if (v22)
    {
      uint64_t v24 = v22[3];
      BOOL v23 = (std::__shared_weak_count *)v22[4];
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v17);
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v23);
        char v25 = 0;
        if (!v24) {
          goto LABEL_24;
        }
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    std::mutex::unlock(v17);
    BOOL v23 = 0;
    char v25 = 1;
    if (!v24)
    {
LABEL_24:
      unsigned int v15 = 0;
      if (v25) {
        goto LABEL_31;
      }
LABEL_30:
      sub_10004D2C8(v23);
      goto LABEL_31;
    }
LABEL_29:
    unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 776))(v24);
    if (v25) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_31:
  if (v15 <= 1) {
    int v26 = 1;
  }
  else {
    int v26 = v15;
  }
  uint64_t v27 = *(void *)(a1 + 136);
  uint64_t v29 = *(void **)(v27 + 8);
  int64x2_t v28 = *(void **)(v27 + 16);
  if (v29 == v28) {
    goto LABEL_53;
  }
  uint64_t v30 = v29;
  while (*(_DWORD *)(v30[7] + 52) != v26)
  {
    v30 += 9;
    if (v30 == v28) {
      goto LABEL_53;
    }
  }
  while (*(_DWORD *)(v29[7] + 52) != v26)
  {
    v29 += 9;
    if (v29 == v28) {
      __assert_rtn("at", "PerPersonalityDataContainer.h", 67, "0");
    }
  }
  uint64_t v33 = (void *)*v29;
  uint64_t v31 = v29 + 1;
  uint64_t v32 = v33;
  if (v31 == v33)
  {
LABEL_53:
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v35 = v32[4];
      long long v34 = (std::__shared_weak_count *)v32[5];
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v35 + 56))(v35) == a2) {
        break;
      }
      if (v34) {
        sub_10004D2C8(v34);
      }
      uint64_t v36 = (void *)v32[1];
      if (v36)
      {
        do
        {
          __int16 v37 = v36;
          uint64_t v36 = (void *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          __int16 v37 = (void *)v32[2];
          BOOL v14 = *v37 == (void)v32;
          uint64_t v32 = v37;
        }
        while (!v14);
      }
      uint64_t v32 = v37;
      if (v31 == v37) {
        goto LABEL_53;
      }
    }
    *a4 = v35;
    a4[1] = v34;
  }
  if (v39) {
    sub_10004D2C8(v39);
  }
}

void sub_1008CE128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  if (a11) {
    sub_10004D2C8(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008CE17C(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X2>, void *a4@<X8>)
{
}

uint64_t sub_1008CE184(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(a1 + 144)) {
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = dword_101506340[v8];
    if ((anyContextType() & 1) != 0 || v10 == a2) {
      v9 |= (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 144) + 216))(*(void *)(a1 + 144), v10, a3, a4);
    }
    ++v8;
  }
  while (v8 != 2);
  return v9;
}

uint64_t sub_1008CE248(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_1008CE184(a1 - 8, a2, a3, a4);
}

uint64_t sub_1008CE250(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_1008CE184(a1 - 16, a2, a3, a4);
}

void sub_1008CE258(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1[18];
  uint64_t v4 = (std::__shared_weak_count *)a1[19];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[21];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 240))(v3);
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
  if (v4)
  {
    sub_10004D2C8(v4);
  }
}

void sub_1008CE318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1008CE32C(uint64_t a1@<X0>, void *a2@<X8>)
{
}

void sub_1008CE334(uint64_t a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_1008CE33C(uint64_t a1)
{
  if (*(void *)(a1 + 144))
  {
    uint64_t v2 = 0;
    int v3 = 0;
    do
      v3 |= (*(uint64_t (**)(void, void))(**(void **)(a1 + 144) + 488))(*(void *)(a1 + 144), dword_101506340[v2++]);
    while (v2 != 2);
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3 & 1;
}

uint64_t sub_1008CE3CC(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    uint64_t v2 = 0;
    int v3 = 0;
    do
      v3 |= (*(uint64_t (**)(void, void))(**(void **)(a1 + 128) + 488))(*(void *)(a1 + 128), dword_101506340[v2++]);
    while (v2 != 2);
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3 & 1;
}

uint64_t sub_1008CE45C(uint64_t a1)
{
  if (!sub_1008C4968(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16))) {
    return 0;
  }
  uint64_t v2 = (void *)sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16));
  int v3 = v2 + 1;
  uint64_t v4 = (void *)*v2;
  if ((void *)*v2 == v2 + 1) {
    return 0;
  }
  LODWORD(v5) = 0;
  do
  {
    uint64_t v6 = v4[4];
    uint64_t v7 = (std::__shared_weak_count *)v4[5];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 184))(v6);
    if (v7) {
      sub_10004D2C8(v7);
    }
    uint64_t v9 = (void *)v4[1];
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v10 = (void *)v4[2];
        BOOL v11 = *v10 == (void)v4;
        uint64_t v4 = v10;
      }
      while (!v11);
    }
    uint64_t v5 = v8 | v5;
    uint64_t v4 = v10;
  }
  while (v10 != v3);
  return v5;
}

void sub_1008CE558(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008CE570(uint64_t a1)
{
  return sub_1008CE45C(a1 - 24);
}

uint64_t sub_1008CE578(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 112);
  if (v1)
  {
    uint64_t v2 = result;
    if (sub_1008CDBB8((Registry **)result)) {
      BOOL v3 = *(unsigned char *)(v2 + 192) != 0;
    }
    else {
      BOOL v3 = 0;
    }
    uint64_t v4 = *(uint64_t (**)(uint64_t, BOOL))(*(void *)v1 + 216);
    return v4(v1, v3);
  }
  return result;
}

uint64_t sub_1008CE5FC(uint64_t a1, int a2)
{
  return *(unsigned __int8 *)(a1 + 80 * a2 + 192);
}

uint64_t sub_1008CE60C(uint64_t a1)
{
  return sub_1008CE578(a1 - 24);
}

uint64_t sub_1008CE614(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 144);
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 152);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v2)
  {
    uint64_t v4 = 0;
    if (!v3) {
      return v4;
    }
    goto LABEL_5;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 72))(v2);
  if (v3) {
LABEL_5:
  }
    sub_10004D2C8(v3);
  return v4;
}

void sub_1008CE694(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008CE6AC(uint64_t a1)
{
  return sub_1008CE614(a1 - 8);
}

uint64_t sub_1008CE6B4(uint64_t a1)
{
  return sub_1008C56E4(a1 - 8);
}

void sub_1008CE6BC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1008CE6C4(uint64_t result)
{
  *(_DWORD *)(result + 392) = 0;
  *(unsigned char *)(result + 396) = 0;
  *(void *)(result + 400) = 0;
  return result;
}

uint64_t sub_1008CE6D4(uint64_t result)
{
  *(_DWORD *)(result + 360) = 0;
  *(unsigned char *)(result + 364) = 0;
  *(void *)(result + 368) = 0;
  return result;
}

uint64_t sub_1008CE6E4(capabilities::ct *a1, int a2, BOOL a3, NSObject *a4, BOOL *a5)
{
  uint64_t v5 = a4;
  uint64_t v7 = a1;
  __int16 v77 = a4;
  if (!capabilities::ct::supportsIPCInterfaceConfig(a1))
  {
    LOBYTE(v5) = 1;
    return v5 & 1;
  }
  int v8 = *((void *)v7 + 9);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "ipcInterfaceConfig";
    __int16 v79 = 2080;
    uint64_t v80 = subscriber::asString();
    __int16 v81 = 2080;
    uint64_t v82 = asStringBool(a3);
    __int16 v83 = 2048;
    int v84 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: slot=%s, enable = %s, mask = 0x%llx", buf, 0x2Au);
  }
  uint64_t v74 = (uint64_t *)((char *)v7 + 80);
  if ((subscriber::isValidSimSlot() & 1) == 0)
  {
    uint64_t v9 = *((void *)v7 + 17);
    BOOL v11 = *(void **)(v9 + 8);
    uint64_t v10 = *(void **)(v9 + 16);
    if (v11 != v10)
    {
      while (1)
      {
        char v12 = v7;
        int v13 = (void *)*v11;
        if ((void *)*v11 != v11 + 1) {
          break;
        }
LABEL_26:
        int isValidSimSlot = subscriber::isValidSimSlot();
        uint64_t v7 = v12;
        v11 += 9;
        if (v11 == v10) {
          int v22 = 1;
        }
        else {
          int v22 = isValidSimSlot;
        }
        if (v22 == 1) {
          goto LABEL_30;
        }
      }
      while (1)
      {
        uint64_t v5 = v13[4];
        BOOL v14 = (std::__shared_weak_count *)v13[5];
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v5
          && (*((unsigned int (**))v5->isa + 7))(v5) == 1
          && ((*((uint64_t (**))v5->isa + 27))(v5) & 1) == 0)
        {
          a2 = *(_DWORD *)(v11[7] + 52);
          uint64_t v5 = *((void *)v12 + 9);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = subscriber::asString();
            uint64_t v20 = asStringBool(a3);
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = "ipcInterfaceConfig";
            __int16 v79 = 2080;
            uint64_t v80 = v19;
            __int16 v81 = 2080;
            uint64_t v82 = v20;
            __int16 v83 = 2048;
            int v84 = v77;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: slot=%s, enable = %s, mask = 0x%llx (0)", buf, 0x2Au);
          }
          char v15 = 0;
          if (!v14) {
            goto LABEL_14;
          }
        }
        else
        {
          char v15 = 1;
          if (!v14) {
            goto LABEL_14;
          }
        }
        sub_10004D2C8(v14);
LABEL_14:
        if (v15)
        {
          __int16 v16 = (void *)v13[1];
          if (v16)
          {
            do
            {
              unint64_t v17 = v16;
              __int16 v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              unint64_t v17 = (void *)v13[2];
              BOOL v18 = *v17 == (void)v13;
              int v13 = v17;
            }
            while (!v18);
          }
          int v13 = v17;
          if (v17 != v11 + 1) {
            continue;
          }
        }
        goto LABEL_26;
      }
    }
  }
LABEL_30:
  if ((subscriber::isValidSimSlot() & 1) == 0)
  {
    a2 = *((_DWORD *)v7 + 98);
    uint64_t v5 = *((void *)v7 + 9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = subscriber::asString();
      uint64_t v24 = asStringBool(a3);
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "ipcInterfaceConfig";
      __int16 v79 = 2080;
      uint64_t v80 = v23;
      __int16 v81 = 2080;
      uint64_t v82 = v24;
      __int16 v83 = 2048;
      int v84 = v77;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: slot=%s, enable = %s, mask = 0x%llx (1)", buf, 0x2Au);
    }
  }
  if ((subscriber::isValidSimSlot() & 1) == 0)
  {
    uint64_t v5 = *((void *)v7 + 9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = subscriber::asString();
      uint64_t v26 = asStringBool(a3);
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "ipcInterfaceConfig";
      __int16 v79 = 2080;
      uint64_t v80 = v25;
      __int16 v81 = 2080;
      uint64_t v82 = v26;
      __int16 v83 = 2048;
      int v84 = v77;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: slot=%s, enable = %s, mask = 0x%llx (2)", buf, 0x2Au);
    }
    a2 = 1;
  }
  if (!a3 || !*((unsigned char *)v7 + 396)) {
    goto LABEL_43;
  }
  int v27 = *((_DWORD *)v7 + 98);
  if (v77 != *((NSObject **)v7 + 50) || v27 != a2)
  {
    uint64_t v56 = *((void *)v7 + 17);
    uint64_t v58 = *(void **)(v56 + 8);
    __int16 v57 = *(void **)(v56 + 16);
    if (v58 == v57) {
LABEL_95:
    }
      __assert_rtn("at", "PerPersonalityDataContainer.h", 67, "0");
    while (*(_DWORD *)(v58[7] + 52) != v27)
    {
      v58 += 9;
      if (v58 == v57) {
        goto LABEL_95;
      }
    }
    __int16 v61 = (void *)*v58;
    __int16 v59 = v58 + 1;
    uint64_t v60 = v61;
    if (v59 == v61)
    {
      char v62 = 0;
    }
    else
    {
      char v62 = 0;
      do
      {
        uint64_t v64 = v60[4];
        __int16 v63 = (std::__shared_weak_count *)v60[5];
        if (v63) {
          atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v64 + 56))(v64))
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v64 + 88))(v64)
            && (*(unsigned int (**)(uint64_t))(*(void *)v64 + 88))(v64) != 2)
          {
            uint64_t v5 = *((void *)v7 + 9);
            if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
            {
              (*(void (**)(uint64_t))(*(void *)v64 + 88))(v64);
              uint64_t v70 = asString();
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = "ipcInterfaceConfig";
              __int16 v79 = 2080;
              uint64_t v80 = v70;
              _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: cannot restart context in state: %s", buf, 0x16u);
            }
          }
          else
          {
            BOOL v76 = 0;
            int v65 = (*(uint64_t (**)(uint64_t, void, uint64_t, BOOL *))(*(void *)v64 + 528))(v64, 0, (uint64_t)v7 + 400, &v76);
            uint64_t v5 = *((void *)v7 + 9);
            BOOL v66 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
            if (v65)
            {
              if (v66)
              {
                uint64_t v67 = asStringBool(v76);
                *(_DWORD *)std::string buf = 136315394;
                *(void *)&uint8_t buf[4] = "ipcInterfaceConfig";
                __int16 v79 = 2080;
                uint64_t v80 = v67;
                _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: success (deactivation): updated=%s", buf, 0x16u);
              }
              *((unsigned char *)v7 + 396) = 0;
            }
            else if (v66)
            {
              *(_DWORD *)std::string buf = 136315138;
              *(void *)&uint8_t buf[4] = "ipcInterfaceConfig";
              _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#E %s: failure (0)", buf, 0xCu);
            }
            char v62 = 1;
          }
        }
        if (v63) {
          sub_10004D2C8(v63);
        }
        uint64_t v68 = (void *)v60[1];
        if (v68)
        {
          do
          {
            __int16 v69 = v68;
            uint64_t v68 = (void *)*v68;
          }
          while (v68);
        }
        else
        {
          do
          {
            __int16 v69 = (void *)v60[2];
            BOOL v18 = *v69 == (void)v60;
            uint64_t v60 = v69;
          }
          while (!v18);
        }
        uint64_t v60 = v69;
      }
      while (v59 != v69);
    }
    int v28 = v62 & 1;
    goto LABEL_44;
  }
  uint64_t v5 = *((void *)v7 + 9);
  int v28 = 0;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = "ipcInterfaceConfig";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: same slot, same config set activation", buf, 0xCu);
LABEL_43:
    int v28 = 0;
  }
LABEL_44:
  uint64_t v29 = *((void *)v7 + 17);
  uint64_t v31 = *(void **)(v29 + 8);
  uint64_t v30 = *(void **)(v29 + 16);
  while (1)
  {
    if (v31 == v30) {
      __assert_rtn("at", "PerPersonalityDataContainer.h", 67, "0");
    }
    if (*(_DWORD *)(v31[7] + 52) == a2) {
      break;
    }
    v31 += 9;
  }
  long long v34 = (void *)*v31;
  uint64_t v33 = v31 + 1;
  uint64_t v32 = v34;
  if (v33 != v34)
  {
    uint64_t v72 = v7;
    int v71 = v28;
    do
    {
      uint64_t v36 = v32[4];
      uint64_t v35 = (std::__shared_weak_count *)v32[5];
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v37 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 56))(v36);
      if (!v37)
      {
        int v38 = (*(uint64_t (**)(uint64_t, BOOL, NSObject **, BOOL *))(*(void *)v36 + 528))(v36, a3, &v77, a5);
        __int16 v39 = *((void *)v7 + 9);
        BOOL v40 = os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
        if (!v38)
        {
          if (v40)
          {
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&uint8_t buf[4] = "ipcInterfaceConfig";
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#E %s: failure", buf, 0xCu);
          }
          LOBYTE(v5) = 0;
          if (!v35) {
            goto LABEL_72;
          }
          goto LABEL_71;
        }
        if (v40)
        {
          uint64_t v41 = asStringBool(*a5);
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "ipcInterfaceConfig";
          __int16 v79 = 2080;
          uint64_t v80 = v41;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I %s: success: updated=%s", buf, 0x16u);
        }
        *((_DWORD *)v7 + 98) = a2;
        *((unsigned char *)v7 + 396) = a3;
        *((void *)v7 + 50) = v77;
        if (v28)
        {
          ServiceMap = (std::mutex *)Registry::getServiceMap(v74, (Registry *)*v74);
          uint64_t v43 = ServiceMap;
          if (v44 < 0)
          {
            uint64_t v45 = (unsigned __int8 *)(v44 & 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v46 = 5381;
            do
            {
              uint64_t v44 = v46;
              unsigned int v47 = *v45++;
              uint64_t v46 = (33 * v46) ^ v47;
            }
            while (v47);
          }
          std::mutex::lock(ServiceMap);
          *(void *)std::string buf = v44;
          uint64_t v48 = sub_10004D37C(&v43[1].__m_.__sig, (unint64_t *)buf);
          if (v48)
          {
            uint64_t v49 = v48[3];
            long long v50 = (std::__shared_weak_count *)v48[4];
            if (v50)
            {
              atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
              std::mutex::unlock(v43);
              atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
              sub_10004D2C8(v50);
              char v51 = 0;
              if (!v49) {
                goto LABEL_84;
              }
LABEL_82:
              (*(void (**)(unsigned char *__return_ptr, uint64_t, void))(*(void *)v36 + 344))(buf, v36, 0);
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v49 + 1144))(v49, buf);
              if (SHIBYTE(v81) < 0) {
                operator delete(*(void **)buf);
              }
              goto LABEL_84;
            }
          }
          else
          {
            uint64_t v49 = 0;
          }
          std::mutex::unlock(v43);
          long long v50 = 0;
          char v51 = 1;
          if (v49) {
            goto LABEL_82;
          }
LABEL_84:
          if ((v51 & 1) == 0) {
            sub_10004D2C8(v50);
          }
          LOBYTE(v5) = 1;
          uint64_t v7 = v72;
          int v28 = v71;
          if (!v35) {
            goto LABEL_72;
          }
LABEL_71:
          sub_10004D2C8(v35);
          goto LABEL_72;
        }
        LOBYTE(v5) = 1;
      }
      if (v35) {
        goto LABEL_71;
      }
LABEL_72:
      if (!v37) {
        return v5 & 1;
      }
      long long v52 = (void *)v32[1];
      if (v52)
      {
        do
        {
          __int16 v53 = v52;
          long long v52 = (void *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          __int16 v53 = (void *)v32[2];
          BOOL v18 = *v53 == (void)v32;
          uint64_t v32 = v53;
        }
        while (!v18);
      }
      uint64_t v32 = v53;
    }
    while (v33 != v53);
  }
  uint64_t v54 = *((void *)v7 + 9);
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = "ipcInterfaceConfig";
    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "#E %s: failure: did not find context", buf, 0xCu);
  }
  LOBYTE(v5) = 0;
  *a5 = 0;
  return v5 & 1;
}

void sub_1008CF21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (v26) {
    sub_10004D2C8(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008CF2B0(uint64_t a1, int a2, BOOL a3, NSObject *a4, BOOL *a5)
{
  return sub_1008CE6E4((capabilities::ct *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t sub_1008CF2B8(uint64_t a1, int a2, BOOL a3, NSObject *a4, BOOL *a5)
{
  return sub_1008CE6E4((capabilities::ct *)(a1 - 32), a2, a3, a4, a5);
}

uint64_t sub_1008CF2C0(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[14];
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 200);

  return v5(v3, v4, a2);
}

uint64_t sub_1008CF344(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 104);
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 - 8) + 72))();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 200);

  return v5(v3, v4, a2);
}

uint64_t sub_1008CF3C8(void *a1, uint64_t a2, int a3)
{
  if (!(*(unsigned int (**)(void *))(*a1 + 584))(a1)) {
    goto LABEL_21;
  }
  (*(void (**)(int *__return_ptr, void *))(*a1 + 576))(&v18, a1);
  char matched = DataUtils::matchPersonality();
  if (*(void *)&v19[4]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v19[4]);
  }
  if ((matched & 1) == 0)
  {
LABEL_21:
    __int16 v16 = a1[9];
    LOBYTE(v10) = 0;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
      return v10 & 1;
    }
    int v18 = 136315138;
    *(void *)uint64_t v19 = "handOverToOtherOnlineStart";
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#E %s: method called with inactive settings", (uint8_t *)&v18, 0xCu);
LABEL_23:
    LOBYTE(v10) = 0;
    return v10 & 1;
  }
  if (!sub_1008C4968(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16))) {
    goto LABEL_23;
  }
  uint64_t v7 = (void *)sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16));
  int v8 = v7 + 1;
  uint64_t v9 = (void *)*v7;
  if ((void *)*v7 == v7 + 1) {
    goto LABEL_23;
  }
  int v10 = 0;
  do
  {
    uint64_t v12 = v9[4];
    BOOL v11 = (std::__shared_weak_count *)v9[5];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 56))(v12) != a3) {
      v10 |= (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 608))(v12, a2);
    }
    if (v11) {
      sub_10004D2C8(v11);
    }
    int v13 = (void *)v9[1];
    if (v13)
    {
      do
      {
        BOOL v14 = v13;
        int v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        BOOL v14 = (void *)v9[2];
        BOOL v15 = *v14 == (void)v9;
        uint64_t v9 = v14;
      }
      while (!v15);
    }
    uint64_t v9 = v14;
  }
  while (v14 != v8);
  return v10 & 1;
}

void sub_1008CF61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008CF64C(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1008CF3C8((void *)(a1 - 16), a2, a3);
}

uint64_t sub_1008CF654()
{
  return 0;
}

uint64_t sub_1008CF65C()
{
  return 0;
}

void sub_1008CF664(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!(*(unsigned int (**)(void *))(*a1 + 584))(a1)) {
    goto LABEL_5;
  }
  (*(void (**)(int *__return_ptr, void *))(*a1 + 576))(&v20, a1);
  char matched = DataUtils::matchPersonality();
  if (*(void *)&v21[4]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v21[4]);
  }
  if ((matched & 1) == 0)
  {
LABEL_5:
    int v10 = a1[9];
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (a5)
    {
      if (v11)
      {
        int v20 = 136315138;
        *(void *)unsigned int v21 = "setActivated";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E %s: method called with inactive settings (activate)", (uint8_t *)&v20, 0xCu);
      }
      return;
    }
    if (v11)
    {
      int v20 = 136315138;
      *(void *)unsigned int v21 = "setActivated";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#N %s: method called with inactive settings (deactivate)", (uint8_t *)&v20, 0xCu);
    }
  }
  if (sub_1008C4968(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16)))
  {
    uint64_t v12 = (void *)sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16));
    int v13 = v12 + 1;
    BOOL v14 = (void *)*v12;
    if ((void *)*v12 != v12 + 1)
    {
      do
      {
        uint64_t v16 = v14[4];
        BOOL v15 = (std::__shared_weak_count *)v14[5];
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 56))(v16) == a2) {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 648))(v16, a4, a5);
        }
        if (v15) {
          sub_10004D2C8(v15);
        }
        unint64_t v17 = (void *)v14[1];
        if (v17)
        {
          do
          {
            int v18 = v17;
            unint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            int v18 = (void *)v14[2];
            BOOL v19 = *v18 == (void)v14;
            BOOL v14 = v18;
          }
          while (!v19);
        }
        BOOL v14 = v18;
      }
      while (v18 != v13);
    }
  }
}

void sub_1008CF8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008CF920(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1008CF928(uint64_t a1, unsigned int a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 584))(a1))
  {
    uint64_t v4 = *(void *)(a1 + 136);
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 576))(&buf, a1);
    char v5 = sub_1008C4968(*(void *)(v4 + 8), *(void *)(v4 + 16));
    if (*((void *)&buf + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
    }
    if (v5)
    {
      *(void *)&long long buf = a1;
      *((void *)&buf + 1) = a2;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 576))(&v13, a1);
      int v6 = sub_1008CE45C(a1);
      if (v14) {
        sub_10004D2C8(v14);
      }
      if (!v6) {
        goto LABEL_19;
      }
      uint64_t v7 = *(unsigned int *)(a1 + 184);
      if (!validContextType()) {
        goto LABEL_19;
      }
      uint64_t v9 = *(void *)(a1 + 144);
      int v8 = *(std::__shared_weak_count **)(a1 + 152);
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!v9)
        {
          sub_10004D2C8(v8);
LABEL_19:
          sub_1008CFBF4((unsigned int *)&buf);
          return;
        }
      }
      else if (!v9)
      {
        goto LABEL_19;
      }
      BOOL v11 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = asString();
        *(_DWORD *)BOOL v15 = 136315138;
        uint64_t v16 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I active settings activate error due to %s", v15, 0xCu);
      }
      sub_1008CFBF4((unsigned int *)&buf);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v9 + 344))(v9, v7, 1, 0, 0, 0);
      if (v8) {
        sub_10004D2C8(v8);
      }
    }
  }
  else
  {
    int v10 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "deactivateAllDataContexts";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E %s: method called with inactive settings", (uint8_t *)&buf, 0xCu);
    }
  }
}

void sub_1008CFBB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    sub_10004D2C8(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008CFBF4(unsigned int *a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 136);
  (*(void (**)(uint64_t *__return_ptr, void))(**(void **)a1 + 576))(&v16, *(void *)a1);
  uint64_t v4 = (void *)sub_1008C4A18(*(void *)(v3 + 8), *(void *)(v3 + 16));
  if (v17) {
    sub_10004D2C8(v17);
  }
  uint64_t v7 = (void *)*v4;
  char v5 = v4 + 1;
  int v6 = v7;
  if (v7 != v5)
  {
    do
    {
      uint64_t v8 = v6[4];
      uint64_t v9 = (std::__shared_weak_count *)v6[5];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v2 + 576))(&v14, v2);
      sub_1008C9BA8(v2, v10, (uint64_t)&v14, a1[2], (uint64_t)"CommCenter");
      if (v15) {
        sub_10004D2C8(v15);
      }
      if (v9) {
        sub_10004D2C8(v9);
      }
      BOOL v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          int v6 = v12;
        }
        while (!v13);
      }
      int v6 = v12;
    }
    while (v12 != v5);
  }
}

void sub_1008CFD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008CFDB4(uint64_t a1, unsigned int a2)
{
}

void sub_1008CFDBC(uint64_t a1, unsigned int a2)
{
}

void sub_1008CFDC4(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[9];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "handleDataContextActivated";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: %s activated, reason: probation is over", buf, 0x16u);
  }
  if (!(*(unsigned int (**)(void *))(*a1 + 584))(a1)) {
    goto LABEL_31;
  }
  (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 576))(buf, a1);
  char matched = DataUtils::matchPersonality();
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (matched)
  {
    int v31 = sub_1008CBCAC((uint64_t)a1, a2, buf);
    uint64_t v6 = a1[18];
    if (v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 336))(v6, a2);
    }
    if (v31) {
      sub_1008C6CAC((uint64_t)a1, 4, 0, 0, 0);
    }
    if (sub_1008C4968(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16)))
    {
      uint64_t v7 = (void *)sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16));
      uint64_t v9 = v7 + 1;
      uint64_t v8 = (void *)*v7;
      if ((void *)*v7 == v7 + 1)
      {
        int v10 = 0;
        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v30 = 0;
        int v10 = 0;
        do
        {
          uint64_t v12 = v8[4];
          BOOL v11 = (std::__shared_weak_count *)v8[5];
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 56))(v12) == a2)
          {
            if (v11) {
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v10) {
              sub_10004D2C8(v10);
            }
            int v10 = v11;
            uint64_t v30 = v12;
          }
          if (v11) {
            sub_10004D2C8(v11);
          }
          BOOL v13 = (void *)v8[1];
          if (v13)
          {
            do
            {
              uint64_t v14 = v13;
              BOOL v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              uint64_t v14 = (void *)v8[2];
              BOOL v15 = *v14 == (void)v8;
              uint64_t v8 = v14;
            }
            while (!v15);
          }
          uint64_t v8 = v14;
        }
        while (v14 != v9);
      }
      unint64_t v17 = (void *)sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16));
      BOOL v19 = v17 + 1;
      int v18 = (void *)*v17;
      if ((void *)*v17 != v17 + 1)
      {
        do
        {
          uint64_t v21 = v18[4];
          int v20 = (std::__shared_weak_count *)v18[5];
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 56))(v21) != a2)
          {
            if ((v31 & 1) != 0 || (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v21 + 136))(v21, 3))
            {
              int v22 = a1[9];
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v23 = asString();
                uint64_t v24 = asString();
                *(_DWORD *)long long buf = 136315650;
                *(void *)&uint8_t buf[4] = "handleDataContextActivated";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&unsigned char buf[14] = v23;
                __int16 v35 = 2080;
                uint64_t v36 = v24;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %s: Handover succeeded from %s to %s", buf, 0x20u);
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 616))(v21, 3);
            }
            else
            {
              int v27 = a1[9];
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v28 = asString();
                uint64_t v29 = asString();
                *(_DWORD *)long long buf = 136315650;
                *(void *)&uint8_t buf[4] = "handleDataContextActivated";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&unsigned char buf[14] = v28;
                __int16 v35 = 2080;
                uint64_t v36 = v29;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I %s: Activation succeeded on %s. Notifying other context %s", buf, 0x20u);
              }
              (*(void (**)(unsigned char *__return_ptr))(*(void *)v30 + 600))(buf);
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v21 + 640))(v21, buf);
              if (SHIBYTE(v35) < 0) {
                operator delete(*(void **)buf);
              }
              if (sub_1008C56E4((uint64_t)a1)) {
                sub_1008C6CAC((uint64_t)a1, 0, 0, 0, 0);
              }
            }
          }
          if (v20) {
            sub_10004D2C8(v20);
          }
          uint64_t v25 = (void *)v18[1];
          if (v25)
          {
            do
            {
              uint64_t v26 = v25;
              uint64_t v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              uint64_t v26 = (void *)v18[2];
              BOOL v15 = *v26 == (void)v18;
              int v18 = v26;
            }
            while (!v15);
          }
          int v18 = v26;
        }
        while (v26 != v19);
      }
      if (v31)
      {
        (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 576))(&v32, a1);
        sub_1008C7378(a1, &v32);
        if (v33) {
          sub_10004D2C8(v33);
        }
      }
      if (v10) {
        sub_10004D2C8(v10);
      }
    }
  }
  else
  {
LABEL_31:
    uint64_t v16 = a1[9];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "handleDataContextActivated";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#E %s: method called with inactive settings", buf, 0xCu);
    }
  }
}

void sub_1008D03F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (v20) {
    sub_10004D2C8(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D047C(void *a1, int a2)
{
  uint64_t v4 = a1[9];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "notifyDataContextOtherActive";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: %s is already active", buf, 0x16u);
  }
  if (!(*(unsigned int (**)(void *))(*a1 + 584))(a1)) {
    goto LABEL_27;
  }
  (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 576))(buf, a1);
  char matched = DataUtils::matchPersonality();
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (matched)
  {
    if (sub_1008C4968(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16)))
    {
      uint64_t v6 = (void *)sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16));
      uint64_t v7 = v6 + 1;
      uint64_t v8 = (void *)*v6;
      if ((void *)*v6 == v6 + 1)
      {
        int v10 = 0;
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v9 = 0;
        int v10 = 0;
        do
        {
          uint64_t v12 = v8[4];
          BOOL v11 = (std::__shared_weak_count *)v8[5];
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 56))(v12) == a2)
          {
            if (v11) {
              atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v10) {
              sub_10004D2C8(v10);
            }
            int v10 = v11;
            uint64_t v9 = v12;
          }
          if (v11) {
            sub_10004D2C8(v11);
          }
          BOOL v13 = (void *)v8[1];
          if (v13)
          {
            do
            {
              uint64_t v14 = v13;
              BOOL v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              uint64_t v14 = (void *)v8[2];
              BOOL v15 = *v14 == (void)v8;
              uint64_t v8 = v14;
            }
            while (!v15);
          }
          uint64_t v8 = v14;
        }
        while (v14 != v7);
      }
      unint64_t v17 = (void *)sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16));
      int v18 = v17 + 1;
      BOOL v19 = (void *)*v17;
      if ((void *)*v17 != v17 + 1)
      {
        do
        {
          uint64_t v21 = v19[4];
          int v20 = (std::__shared_weak_count *)v19[5];
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 56))(v21) != a2)
          {
            int v22 = a1[9];
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v23 = asString();
              uint64_t v24 = asString();
              *(_DWORD *)long long buf = 136315650;
              *(void *)&uint8_t buf[4] = "notifyDataContextOtherActive";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&unsigned char buf[14] = v23;
              __int16 v28 = 2080;
              uint64_t v29 = v24;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %s: Notifying other context %s: %s is already active", buf, 0x20u);
            }
            (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v9 + 600))(buf, v9);
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v21 + 640))(v21, buf);
            if (SHIBYTE(v28) < 0) {
              operator delete(*(void **)buf);
            }
          }
          if (v20) {
            sub_10004D2C8(v20);
          }
          uint64_t v25 = (void *)v19[1];
          if (v25)
          {
            do
            {
              uint64_t v26 = v25;
              uint64_t v25 = (void *)*v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              uint64_t v26 = (void *)v19[2];
              BOOL v15 = *v26 == (void)v19;
              BOOL v19 = v26;
            }
            while (!v15);
          }
          BOOL v19 = v26;
        }
        while (v26 != v18);
      }
      if (v10) {
        sub_10004D2C8(v10);
      }
    }
  }
  else
  {
LABEL_27:
    uint64_t v16 = a1[9];
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "notifyDataContextOtherActive";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#E %s: method called with inactive settings", buf, 0xCu);
    }
  }
}

void sub_1008D08D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    sub_10004D2C8(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D094C(uint64_t a1, int a2)
{
}

void sub_1008D0954(void *a1, uint64_t *a2)
{
  uint64_t v4 = *((int *)a1 + 46);
  char v5 = a1[9];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)uint64_t v41 = "cleanProbationIfReady";
    *(_WORD *)&v41[8] = 2080;
    *(void *)&v41[10] = asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: trying to clean probation for %s", buf, 0x16u);
  }
  if ((validContextType() & 1) == 0)
  {
    uint64_t v30 = a1[9];
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v41 = "cleanProbationIfReady";
    int v31 = "#E %s: !!! clear probation on inactive activator ?";
LABEL_54:
    uint64_t v32 = v30;
    uint32_t v33 = 12;
    goto LABEL_55;
  }
  if (!(*(unsigned int (**)(void *))(*a1 + 584))(a1)) {
    goto LABEL_52;
  }
  (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 576))(buf, a1);
  char matched = DataUtils::matchPersonality();
  if (*(void *)&v41[4]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v41[4]);
  }
  if ((matched & 1) == 0)
  {
LABEL_52:
    uint64_t v30 = a1[9];
    if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v41 = "cleanProbationIfReady";
    int v31 = "#E %s: method called with inactive settings";
    goto LABEL_54;
  }
  if ((sub_1008C4968(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16)) & 1) == 0)
  {
    long long v34 = a1[9];
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v35 = subscriber::asString();
    *(_DWORD *)long long buf = 136315394;
    *(void *)uint64_t v41 = "cleanProbationIfReady";
    *(_WORD *)&v41[8] = 2080;
    *(void *)&v41[10] = v35;
    int v31 = "#E %s: Cannot find personality: %s";
    uint64_t v32 = v34;
    uint32_t v33 = 22;
LABEL_55:
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v31, buf, v33);
    return;
  }
  uint64_t v7 = (void *)sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16));
  uint64_t v8 = v7 + 1;
  uint64_t v9 = (void *)*v7;
  if ((void *)*v7 == v7 + 1)
  {
LABEL_23:
    uint64_t v16 = (void *)sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16));
    unint64_t v17 = v16 + 1;
    int v18 = (void *)*v16;
    if ((void *)*v16 == v16 + 1)
    {
LABEL_46:
      __int16 v28 = (std::__shared_weak_count *)a2[1];
      uint64_t v38 = *a2;
      __int16 v39 = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1008D0FF4(a1, (uint64_t)&v38);
      uint64_t v29 = v39;
      if (v39) {
        goto LABEL_49;
      }
      return;
    }
    BOOL v19 = &a1[10 * (int)v4 + 29];
    while (1)
    {
      uint64_t v20 = v18[4];
      uint64_t v21 = (std::__shared_weak_count *)v18[5];
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)v20 + 56))(v20)) {
        goto LABEL_38;
      }
      if ((int)v4 > 1 || !*v19)
      {
        uint64_t v24 = a1[9];
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = asString();
          *(_DWORD *)long long buf = 136315394;
          *(void *)uint64_t v41 = "cleanProbationIfReady";
          *(_WORD *)&v41[8] = 2080;
          *(void *)&v41[10] = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#N %s: Not on probation: %s", buf, 0x16u);
        }
        goto LABEL_38;
      }
      int v22 = a1[9];
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_33;
      }
      uint64_t v23 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)uint64_t v41 = "cleanProbationIfReady";
      *(_WORD *)&v41[8] = 2080;
      *(void *)&v41[10] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#N %s: probation: %s", buf, 0x16u);
      if (*v19) {
        break;
      }
LABEL_35:
      sub_1008D9C58((uint64_t)a1, v4, 0, 1);
      sub_1008C6CAC((uint64_t)a1, 13, 0, 0, 0);
LABEL_38:
      if (v21) {
        sub_10004D2C8(v21);
      }
      uint64_t v26 = (void *)v18[1];
      if (v26)
      {
        do
        {
          int v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          int v27 = (void *)v18[2];
          BOOL v15 = *v27 == (void)v18;
          int v18 = v27;
        }
        while (!v15);
      }
      int v18 = v27;
      if (v27 == v17) {
        goto LABEL_46;
      }
    }
    int v22 = a1[9];
LABEL_33:
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)uint64_t v41 = "unsetProbation";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %s: ", buf, 0xCu);
    }
    goto LABEL_35;
  }
  while (1)
  {
    uint64_t v10 = v9[4];
    BOOL v11 = (std::__shared_weak_count *)v9[5];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v4 == (*(unsigned int (**)(uint64_t))(*(void *)v10 + 56))(v10))
    {
      uint64_t v12 = a1[18];
      if (v12)
      {
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 496))(v12, v4) & 1) == 0) {
          break;
        }
      }
    }
    if (v11) {
      sub_10004D2C8(v11);
    }
    BOOL v13 = (void *)v9[1];
    if (v13)
    {
      do
      {
        uint64_t v14 = v13;
        BOOL v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        uint64_t v14 = (void *)v9[2];
        BOOL v15 = *v14 == (void)v9;
        uint64_t v9 = v14;
      }
      while (!v15);
    }
    uint64_t v9 = v14;
    if (v14 == v8) {
      goto LABEL_23;
    }
  }
  uint64_t v36 = a1[9];
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = asString();
    *(_DWORD *)long long buf = 136315394;
    *(void *)uint64_t v41 = "cleanProbationIfReady";
    *(_WORD *)&v41[8] = 2080;
    *(void *)&v41[10] = v37;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#N %s: Connection not ready for: %s", buf, 0x16u);
  }
  if (v11)
  {
    uint64_t v29 = v11;
LABEL_49:
    sub_10004D2C8(v29);
  }
}

void sub_1008D0F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (v16) {
    sub_10004D2C8(v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1008D0FCC(uint64_t a1, int a2)
{
  return a2 <= 1 && *(unsigned char *)(a1 + 80 * a2 + 232) != 0;
}

void sub_1008D0FF4(void *a1, uint64_t a2)
{
  uint64_t v4 = *((int *)a1 + 46);
  uint64_t v5 = *((unsigned int *)a1 + 46);
  uint64_t v6 = a1[9];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)uint64_t v44 = "handleActivatedIfReady";
    *(_WORD *)&uint8_t v44[8] = 2080;
    *(void *)&v44[10] = asString();
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: %s", buf, 0x16u);
  }
  if ((validContextType() & 1) == 0)
  {
    int v31 = a1[9];
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v44 = "handleActivatedIfReady";
    uint64_t v32 = "#E %s: !!! postActivated on inactive activator ?";
    goto LABEL_56;
  }
  if (!(*(unsigned int (**)(void *))(*a1 + 584))(a1)) {
    goto LABEL_54;
  }
  (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 576))(buf, a1);
  char matched = DataUtils::matchPersonality();
  if (*(void *)&v44[4]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v44[4]);
  }
  if ((matched & 1) == 0)
  {
LABEL_54:
    int v31 = a1[9];
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v44 = "handleActivatedIfReady";
    uint64_t v32 = "#E %s: method called with inactive settings";
    goto LABEL_56;
  }
  if ((sub_1008C4968(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16)) & 1) == 0)
  {
    int v31 = a1[9];
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v44 = "handleActivatedIfReady";
    uint64_t v32 = "#I %s: unknown personality";
LABEL_56:
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, v32, buf, 0xCu);
    return;
  }
  uint64_t v8 = (void *)sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16));
  uint64_t v41 = a2;
  uint64_t v9 = v8 + 1;
  uint64_t v10 = (void *)*v8;
  if ((void *)*v8 != v8 + 1)
  {
    do
    {
      uint64_t v12 = v10[4];
      BOOL v11 = (std::__shared_weak_count *)v10[5];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v5 == (*(unsigned int (**)(uint64_t))(*(void *)v12 + 56))(v12))
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 536))(v12))
        {
          uint32_t v33 = a1[9];
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_76;
          }
          uint64_t v34 = asString();
          *(_DWORD *)long long buf = 136315394;
          *(void *)uint64_t v44 = "handleActivatedIfReady";
          *(_WORD *)&uint8_t v44[8] = 2080;
          *(void *)&v44[10] = v34;
          uint64_t v35 = "#I %s: context still activating: %s";
          uint64_t v36 = v33;
          uint32_t v37 = 22;
          goto LABEL_75;
        }
        uint64_t v13 = a1[18];
        if (v13 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 496))(v13, v5) & 1) == 0)
        {
          uint64_t v38 = a1[9];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_76;
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)uint64_t v44 = "handleActivatedIfReady";
          uint64_t v35 = "#I %s: connection not ready";
LABEL_74:
          uint64_t v36 = v38;
          uint32_t v37 = 12;
LABEL_75:
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v35, buf, v37);
          goto LABEL_76;
        }
        if ((int)v4 <= 1 && LOBYTE(a1[10 * (int)v4 + 29]))
        {
          uint64_t v38 = a1[9];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_76;
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)uint64_t v44 = "handleActivatedIfReady";
          uint64_t v35 = "#I %s: on probation";
          goto LABEL_74;
        }
        uint64_t v14 = a1[12];
        if (v14 && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v14 + 224))(v14, v4))
        {
          uint64_t v38 = a1[9];
          if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_76;
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)uint64_t v44 = "handleActivatedIfReady";
          uint64_t v35 = "#I %s: on DNS probation";
          goto LABEL_74;
        }
      }
      if (v11) {
        sub_10004D2C8(v11);
      }
      BOOL v15 = (void *)v10[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          BOOL v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v10[2];
          BOOL v17 = *v16 == (void)v10;
          uint64_t v10 = v16;
        }
        while (!v17);
      }
      uint64_t v10 = v16;
    }
    while (v16 != v9);
  }
  int v18 = (void *)sub_1008C4A18(*(void *)(a1[17] + 8), *(void *)(a1[17] + 16));
  uint64_t v20 = v18 + 1;
  BOOL v19 = (void *)*v18;
  if ((void *)*v18 == v18 + 1) {
    return;
  }
  uint64_t v21 = (BOOL *)&a1[10 * (int)v4 + 24];
  while (1)
  {
    uint64_t v22 = v19[4];
    BOOL v11 = (std::__shared_weak_count *)v19[5];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)v22 + 56))(v22) || !*v21) {
      goto LABEL_38;
    }
    unsigned int v23 = v5;
    if (v5 < 2) {
      break;
    }
    if (!*((unsigned char *)a1 + 233))
    {
      unsigned int v23 = 1;
      break;
    }
LABEL_38:
    uint64_t v24 = a1[9];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(uint64_t))(*(void *)v22 + 56))(v22);
      uint64_t v25 = asString();
      uint64_t v26 = asStringBool(*v21);
      BOOL v27 = v5;
      if (v5 < 2 || (BOOL v27 = 1, !*((unsigned char *)a1 + 233))) {
        LOBYTE(v27) = BYTE1(a1[10 * v27 + 29]) != 0;
      }
      uint64_t v28 = asStringBool(v27);
      *(_DWORD *)long long buf = 136315906;
      *(void *)uint64_t v44 = "handleActivatedIfReady";
      *(_WORD *)&uint8_t v44[8] = 2080;
      *(void *)&v44[10] = v25;
      __int16 v45 = 2080;
      uint64_t v46 = v26;
      __int16 v47 = 2080;
      uint64_t v48 = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s: context does not fit the condition: contextType=%s, isActive=%s, isDeactivating=%s", buf, 0x2Au);
    }
    if (v11) {
      sub_10004D2C8(v11);
    }
    uint64_t v29 = (void *)v19[1];
    if (v29)
    {
      do
      {
        uint64_t v30 = v29;
        uint64_t v29 = (void *)*v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        uint64_t v30 = (void *)v19[2];
        BOOL v17 = *v30 == (void)v19;
        BOOL v19 = v30;
      }
      while (!v17);
    }
    BOOL v19 = v30;
    if (v30 == v20) {
      return;
    }
  }
  if (BYTE1(a1[10 * v23 + 29])) {
    goto LABEL_38;
  }
  __int16 v39 = a1[9];
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v44 = "handleActivatedIfReady";
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I %s: activated", buf, 0xCu);
  }
  BOOL v40 = *(std::__shared_weak_count **)(v41 + 8);
  uint64_t v42 = v40;
  if (v40) {
    atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1008CFDC4(a1, v4);
  if (v42) {
    sub_10004D2C8(v42);
  }
LABEL_76:
  if (v11) {
    sub_10004D2C8(v11);
  }
}

void sub_1008D1754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (v16) {
    sub_10004D2C8(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D17A4(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    uint64_t v3 = "setProbationDNS";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#I %s: ", (uint8_t *)&v2, 0xCu);
  }
}

void sub_1008D1844(uint64_t a1)
{
}

void sub_1008D184C(void *a1)
{
  int v2 = a1[9];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    v22[0] = "unsetProbationDNS";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: ", buf, 0xCu);
  }
  uint64_t v3 = *((unsigned int *)a1 + 46);
  if ((validContextType() & 1) == 0)
  {
    BOOL v17 = a1[9];
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)long long buf = 136315138;
    v22[0] = "unsetProbationDNS";
    int v18 = "#E %s: !!! unsetProbationDNS on inactive activator ?";
LABEL_30:
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, buf, 0xCu);
    return;
  }
  if (((*(uint64_t (**)(void *))(*a1 + 584))(a1) & 1) == 0)
  {
    BOOL v17 = a1[9];
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)long long buf = 136315138;
    v22[0] = "unsetProbationDNS";
    int v18 = "#E %s: method called with inactive settings";
    goto LABEL_30;
  }
  uint64_t v4 = a1[17];
  (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 576))(buf, a1);
  char v5 = sub_1008C4968(*(void *)(v4 + 8), *(void *)(v4 + 16));
  if (*(void *)((char *)v22 + 4)) {
    sub_10004D2C8(*(std::__shared_weak_count **)((char *)v22 + 4));
  }
  if (v5)
  {
    uint64_t v6 = a1[17];
    (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 576))(buf, a1);
    uint64_t v7 = (void *)sub_1008C4A18(*(void *)(v6 + 8), *(void *)(v6 + 16));
    if (*(void *)((char *)v22 + 4)) {
      sub_10004D2C8(*(std::__shared_weak_count **)((char *)v22 + 4));
    }
    uint64_t v10 = (void *)*v7;
    uint64_t v8 = v7 + 1;
    uint64_t v9 = v10;
    if (v10 != v8)
    {
      do
      {
        uint64_t v11 = v9[4];
        uint64_t v12 = (std::__shared_weak_count *)v9[5];
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v3 == (*(unsigned int (**)(uint64_t))(*(void *)v11 + 56))(v11))
        {
          uint64_t v13 = a1[18];
          if (v13) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 528))(v13, v3);
          }
        }
        if (v12) {
          sub_10004D2C8(v12);
        }
        uint64_t v14 = (void *)v9[1];
        if (v14)
        {
          do
          {
            BOOL v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            BOOL v15 = (void *)v9[2];
            BOOL v16 = *v15 == (void)v9;
            uint64_t v9 = v15;
          }
          while (!v16);
        }
        uint64_t v9 = v15;
      }
      while (v15 != v8);
    }
    (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 576))(&v19, a1);
    sub_1008D0FF4(a1, (uint64_t)&v19);
    if (v20) {
      sub_10004D2C8(v20);
    }
  }
}

void sub_1008D1B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D1BDC(uint64_t a1)
{
}

uint64_t sub_1008D1BE4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 96);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 224))();
  }
  return result;
}

BOOL sub_1008D1C14(uint64_t a1, unsigned int a2)
{
  if (a2 <= 1)
  {
    LODWORD(v2) = a2;
    return *(unsigned char *)(a1 + 80 * v2 + 233) != 0;
  }
  uint64_t v2 = 1;
  if (!*(unsigned char *)(a1 + 233)) {
    return *(unsigned char *)(a1 + 80 * v2 + 233) != 0;
  }
  return v2;
}

void sub_1008D1C4C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1008D1C54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 144);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 536))();
  }
  else {
    return 1;
  }
}

uint64_t sub_1008D1C90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 536))();
  }
  else {
    return 1;
  }
}

unint64_t sub_1008D1CCC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v8 = 0xFFFFFFF700000000;
  uint64_t v9 = (void *)*a3;
  if (!*a3)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      goto LABEL_3;
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "We can not be called without DataSettings";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataPDPActivator.cpp";
    __int16 v179 = 1024;
    LODWORD(v180) = 1885;
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT dataSettings\n %s\n at %s:%d\n**********", buf, 0x1Cu);
    uint64_t v9 = (void *)*a3;
    if (!*a3)
    {
LABEL_3:
      __TUAssertTrigger();
      uint64_t v9 = (void *)*a3;
      if (!*a3)
      {
LABEL_43:
        uint64_t v42 = 0xFFFFFFFFLL;
        return v42 | v8 & 0xFFFFFFFF00000000;
      }
    }
  }
  uint64_t v10 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = (*(uint64_t (**)(void *))(*v9 + 40))(v9);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "grabDataContext";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s: by %s", buf, 0x16u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v11, *(Registry **)(a1 + 80));
  uint64_t v14 = ServiceMap;
  if (v15 < 0)
  {
    BOOL v16 = (unsigned __int8 *)(v15 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = 5381;
    do
    {
      uint64_t v15 = v17;
      unsigned int v18 = *v16++;
      uint64_t v17 = (33 * v17) ^ v18;
    }
    while (v18);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v15;
  uint64_t v19 = sub_10004D37C(&v14[1].__m_.__sig, (unint64_t *)buf);
  if (!v19)
  {
    uint64_t v21 = 0;
LABEL_14:
    std::mutex::unlock(v14);
    uint64_t v20 = 0;
    char v22 = 1;
    if (!v21) {
      goto LABEL_17;
    }
    goto LABEL_15;
  }
  uint64_t v21 = v19[3];
  uint64_t v20 = (std::__shared_weak_count *)v19[4];
  if (!v20) {
    goto LABEL_14;
  }
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v14);
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v20);
  char v22 = 0;
  if (!v21) {
    goto LABEL_17;
  }
LABEL_15:
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 72))(a1))
  {
    uint64_t v23 = *a3 + *(void *)(*(void *)*a3 - 56);
    int v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 24))(v23);
    if (v24 != (*(unsigned int (**)(uint64_t))(*(void *)v21 + 760))(v21))
    {
      BOOL v40 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v41 = (*(uint64_t (**)(void))(*(void *)*a3 + 40))();
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "grabDataContext";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#E %s: %s does not belong to the Preferred Data SIM but it is trying to grab PDP0, this is a serious algorithm problem to be investigated", buf, 0x16u);
      }
      if ((v22 & 1) == 0) {
        sub_10004D2C8(v20);
      }
      goto LABEL_43;
    }
  }
LABEL_17:
  if ((v22 & 1) == 0) {
    sub_10004D2C8(v20);
  }
  uint64_t v176 = 0;
  id v177 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(*a3 + *(void *)(*(void *)*a3 - 56)) + 16))(&v174);
  sub_1008C4AE0(a1, a2, &v176);
  if (v175) {
    sub_10004D2C8(v175);
  }
  unsigned int v25 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 504))(*a3, a4);
  if (!v176) {
    goto LABEL_267;
  }
  unsigned int v26 = v25;
  if (!*(unsigned char *)(a1 + 192) && !*(unsigned char *)(a1 + 272))
  {
    uint64_t v48 = *(void *)(a1 + 160);
    if (v48)
    {
      uint64_t v49 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "grabDataContext";
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#I %s: We stepped over somebody's else 'checkPendingGrabs' method to be called soon", buf, 0xCu);
        uint64_t v48 = *(void *)(a1 + 160);
      }
      if (v48 != *a3)
      {
        unsigned int v50 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v48 + 504))(v48, 999);
        char v51 = *(NSObject **)(a1 + 72);
        BOOL v52 = os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
        if (v26 >= v50)
        {
          if (v52)
          {
            uint64_t v86 = *a3;
            __int16 v87 = (std::__shared_weak_count *)a3[1];
            if (v87) {
              atomic_fetch_add_explicit(&v87->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v86) {
              uint64_t v88 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v86 + 48))(v86, 2);
            }
            else {
              uint64_t v88 = "nothing";
            }
            uint64_t v143 = *a3;
            uint64_t v144 = *(void *)(a1 + 160);
            uint64_t v145 = *(std::__shared_weak_count **)(a1 + 168);
            if (v145) {
              atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v144) {
              id v146 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v144 + 48))(v144, 2);
            }
            else {
              id v146 = "nothing";
            }
            uint64_t v160 = *(void *)(a1 + 160);
            *(_DWORD *)long long buf = 136316162;
            *(void *)&uint8_t buf[4] = "grabDataContext";
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&unsigned char buf[14] = v88;
            __int16 v179 = 2048;
            uint64_t v180 = v143;
            __int16 v181 = 2080;
            uint64_t v182 = v146;
            __int16 v183 = 2048;
            uint64_t v184 = v160;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#I %s:  %s (0x%lx) is trying to use us and higher or equal priority %s (0x%lx) is already pending, rejecting first", buf, 0x34u);
            if (v145) {
              sub_10004D2C8(v145);
            }
            if (v87) {
              sub_10004D2C8(v87);
            }
          }
          sub_1008CC89C((void *)a1, a2);
          goto LABEL_267;
        }
        if (v52)
        {
          uint64_t v53 = *a3;
          uint64_t v54 = (std::__shared_weak_count *)a3[1];
          if (v54) {
            atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v53) {
            __int16 v55 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v53 + 48))(v53, 2);
          }
          else {
            __int16 v55 = "nothing";
          }
          uint64_t v139 = *a3;
          uint64_t v140 = *(void *)(a1 + 160);
          uint64_t v141 = *(std::__shared_weak_count **)(a1 + 168);
          if (v141) {
            atomic_fetch_add_explicit(&v141->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v140) {
            id v142 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v140 + 48))(v140, 2);
          }
          else {
            id v142 = "nothing";
          }
          uint64_t v147 = *(void *)(a1 + 160);
          *(_DWORD *)long long buf = 136316162;
          *(void *)&uint8_t buf[4] = "grabDataContext";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v55;
          __int16 v179 = 2048;
          uint64_t v180 = v139;
          __int16 v181 = 2080;
          uint64_t v182 = v142;
          __int16 v183 = 2048;
          uint64_t v184 = v147;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#I %s:  %s (0x%lx) is trying to use us and lower-priority %s (0x%lx) is already pending, rejecting second", buf, 0x34u);
          if (v141) {
            sub_10004D2C8(v141);
          }
          if (v54) {
            sub_10004D2C8(v54);
          }
        }
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 160) + 328))(*(void *)(a1 + 160), a2, a1 + 24);
      }
      uint64_t v148 = *(std::__shared_weak_count **)(a1 + 168);
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 0;
      if (v148) {
        sub_10004D2C8(v148);
      }
    }
    uint64_t v149 = *(void *)(a1 + 144);
    if (v149 == *a3)
    {
      unint64_t v8 = 0;
      uint64_t v42 = 1;
      goto LABEL_268;
    }
    if (v149
      && (*(unsigned int (**)(uint64_t))(*(void *)v149 + 616))(v149)
      && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 144) + 504))(*(void *)(a1 + 144), 999) < v26)
    {
      id v150 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v151 = *a3;
        id v152 = (std::__shared_weak_count *)a3[1];
        if (v152) {
          atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v151) {
          long long v153 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v151 + 48))(v151, 2);
        }
        else {
          long long v153 = "nothing";
        }
        uint64_t v161 = *a3;
        uint64_t v162 = *(void *)(a1 + 144);
        uint64_t v163 = *(std::__shared_weak_count **)(a1 + 152);
        if (v163) {
          atomic_fetch_add_explicit(&v163->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v162) {
          __int16 v164 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v162 + 48))(v162, 2);
        }
        else {
          __int16 v164 = "nothing";
        }
        uint64_t v165 = *(void *)(a1 + 144);
        *(_DWORD *)long long buf = 136316162;
        *(void *)&uint8_t buf[4] = "grabDataContext";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = v153;
        __int16 v179 = 2048;
        uint64_t v180 = v161;
        __int16 v181 = 2080;
        uint64_t v182 = v164;
        __int16 v183 = 2048;
        uint64_t v184 = v165;
        _os_log_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_DEFAULT, "#I %s:  %s (0x%lx) is trying to use us and higher priority %s (0x%lx) has pending connections, rejecting first", buf, 0x34u);
        if (v163) {
          sub_10004D2C8(v163);
        }
        if (v152) {
          sub_10004D2C8(v152);
        }
      }
      sub_1008C588C(a1, a2);
      goto LABEL_267;
    }
    uint64_t v155 = *a3;
    uint64_t v154 = a3[1];
    if (v154) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v154 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v156 = *(std::__shared_weak_count **)(a1 + 152);
    *(void *)(a1 + 144) = v155;
    *(void *)(a1 + 152) = v154;
    if (v156) {
      sub_10004D2C8(v156);
    }
    int v133 = *(NSObject **)(a1 + 72);
    if (!os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_248;
    }
    uint64_t v157 = *(void *)(a1 + 144);
    char v135 = *(std::__shared_weak_count **)(a1 + 152);
    if (v135) {
      atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v157) {
      id v158 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v157 + 48))(v157, 2);
    }
    else {
      id v158 = "nothing";
    }
    uint64_t v159 = *(void *)(a1 + 144);
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "grabDataContext";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v158;
    __int16 v179 = 2048;
    uint64_t v180 = v159;
    id v138 = "#I %s: (change states) new active settings %s (0x%lx) (1)";
    goto LABEL_246;
  }
  uint64_t v27 = *(void *)(a1 + 144);
  if (!v27)
  {
    uint64_t v36 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = *a3;
      uint64_t v38 = (std::__shared_weak_count *)a3[1];
      if (v38) {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v37) {
        __int16 v39 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v37 + 48))(v37, 2);
      }
      else {
        __int16 v39 = "nothing";
      }
      uint64_t v76 = *a3;
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "grabDataContext";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v39;
      __int16 v179 = 2048;
      uint64_t v180 = v76;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#I %s:  %s (0x%lx) is trying to use us and we have empty settings, assign it to the requesting settings", buf, 0x20u);
      if (v38) {
        sub_10004D2C8(v38);
      }
    }
    uint64_t v78 = *a3;
    uint64_t v77 = a3[1];
    if (v77) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v77 + 8), 1uLL, memory_order_relaxed);
    }
    __int16 v79 = *(std::__shared_weak_count **)(a1 + 152);
    *(void *)(a1 + 144) = v78;
    *(void *)(a1 + 152) = v77;
    if (v79) {
      sub_10004D2C8(v79);
    }
    uint64_t v43 = *(NSObject **)(a1 + 72);
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_249;
    }
    uint64_t v80 = *(void *)(a1 + 144);
    uint64_t v44 = *(std::__shared_weak_count **)(a1 + 152);
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v80) {
      __int16 v81 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v80 + 48))(v80, 2);
    }
    else {
      __int16 v81 = "nothing";
    }
    uint64_t v82 = *(void *)(a1 + 144);
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "grabDataContext";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v81;
    __int16 v179 = 2048;
    uint64_t v180 = v82;
    __int16 v47 = "#I %s: (change states) new active settings %s (0x%lx) (3)";
    goto LABEL_101;
  }
  if (v27 == *a3)
  {
    uint64_t v43 = *(NSObject **)(a1 + 72);
    if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
LABEL_249:
      uint64_t v42 = 0;
      goto LABEL_268;
    }
    uint64_t v44 = *(std::__shared_weak_count **)(a1 + 152);
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v27 + 48))(v27, 2);
    uint64_t v46 = *(void *)(a1 + 144);
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "grabDataContext";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v45;
    __int16 v179 = 2048;
    uint64_t v180 = v46;
    __int16 v47 = "#I %s:  %s (0x%lx) is trying to use us and we are already in use by it, letting it go";
LABEL_101:
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, v47, buf, 0x20u);
    if (v44) {
      sub_10004D2C8(v44);
    }
    goto LABEL_249;
  }
  unsigned int v28 = (*(uint64_t (**)(void, uint64_t))(*(void *)v27 + 504))(*(void *)(a1 + 144), 999);
  uint64_t v29 = *(void *)(a1 + 160);
  if (v29)
  {
    if (v29 != *a3)
    {
      unsigned int v30 = (*(uint64_t (**)(void, uint64_t))(*(void *)v29 + 504))(*(void *)(a1 + 160), 999);
      int v31 = *(NSObject **)(a1 + 72);
      BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
      if (v26 < v30)
      {
        if (v32)
        {
          uint64_t v33 = *a3;
          uint64_t v34 = (std::__shared_weak_count *)a3[1];
          if (v34) {
            atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          id v167 = v34;
          if (v33) {
            uint64_t v35 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v33 + 48))(v33, 2);
          }
          else {
            uint64_t v35 = "nothing";
          }
          uint64_t v91 = *a3;
          uint64_t v92 = *(void *)(a1 + 144);
          uint64_t v93 = *(std::__shared_weak_count **)(a1 + 152);
          if (v93) {
            atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v92)
          {
            id v94 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v92 + 48))(v92, 2);
            __int16 v95 = v35;
          }
          else
          {
            __int16 v95 = v35;
            id v94 = "nothing";
          }
          uint64_t v100 = *(void *)(a1 + 144);
          uint64_t v101 = *(void *)(a1 + 160);
          long long v102 = *(std::__shared_weak_count **)(a1 + 168);
          if (v102) {
            atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v101) {
            long long v103 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v101 + 48))(v101, 2);
          }
          else {
            long long v103 = "nothing";
          }
          uint64_t v108 = *(void *)(a1 + 160);
          *(_DWORD *)long long buf = 136316674;
          *(void *)&uint8_t buf[4] = "grabDataContext";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v95;
          __int16 v179 = 2048;
          uint64_t v180 = v91;
          __int16 v181 = 2080;
          uint64_t v182 = v94;
          __int16 v183 = 2048;
          uint64_t v184 = v100;
          __int16 v185 = 2080;
          unsigned __int8 v186 = v103;
          __int16 v187 = 2048;
          uint64_t v188 = v108;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I %s:  %s (0x%lx) is trying to use us and we are already in use by %s (0x%lx) and lower-priority %s (0x%lx) is pending, rejecting third and pending first", buf, 0x48u);
          if (v102) {
            sub_10004D2C8(v102);
          }
          if (v93) {
            sub_10004D2C8(v93);
          }
          if (v167) {
            sub_10004D2C8(v167);
          }
        }
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 160) + 328))(*(void *)(a1 + 160), a2, a1 + 24);
        uint64_t v110 = *a3;
        uint64_t v109 = a3[1];
        if (v109) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v109 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v90 = *(std::__shared_weak_count **)(a1 + 168);
        *(void *)(a1 + 160) = v110;
        *(void *)(a1 + 168) = v109;
        if (!v90) {
          goto LABEL_185;
        }
        goto LABEL_184;
      }
      if (!v32) {
        goto LABEL_267;
      }
      uint64_t v74 = *a3;
      int v65 = (std::__shared_weak_count *)a3[1];
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v74) {
        __int16 v75 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v74 + 48))(v74, 2);
      }
      else {
        __int16 v75 = "nothing";
      }
      uint64_t v96 = *a3;
      uint64_t v97 = *(void *)(a1 + 144);
      uint64_t v98 = *(std::__shared_weak_count **)(a1 + 152);
      if (v98) {
        atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v97) {
        int v99 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v97 + 48))(v97, 2);
      }
      else {
        int v99 = "nothing";
      }
      uint64_t v104 = *(void *)(a1 + 144);
      uint64_t v105 = *(void *)(a1 + 160);
      id v106 = *(std::__shared_weak_count **)(a1 + 168);
      if (v106) {
        atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v105) {
        std::string::size_type v107 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v105 + 48))(v105, 2);
      }
      else {
        std::string::size_type v107 = "nothing";
      }
      uint64_t v111 = *(void *)(a1 + 160);
      *(_DWORD *)long long buf = 136316674;
      *(void *)&uint8_t buf[4] = "grabDataContext";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v75;
      __int16 v179 = 2048;
      uint64_t v180 = v96;
      __int16 v181 = 2080;
      uint64_t v182 = v99;
      __int16 v183 = 2048;
      uint64_t v184 = v104;
      __int16 v185 = 2080;
      unsigned __int8 v186 = v107;
      __int16 v187 = 2048;
      uint64_t v188 = v111;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I %s:  %s (0x%lx) is trying to use us and we are already in use by %s (0x%lx) and higher or equal priority %s (0x%lx) is pending, rejecting first", buf, 0x48u);
      if (v106) {
        sub_10004D2C8(v106);
      }
      goto LABEL_166;
    }
    uint64_t v67 = *(NSObject **)(a1 + 72);
    if (!os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_185;
    }
    uint64_t v68 = (std::__shared_weak_count *)a3[1];
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v69 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v29 + 48))(v29, 2);
    uint64_t v70 = *a3;
    uint64_t v71 = *(void *)(a1 + 144);
    uint64_t v72 = *(std::__shared_weak_count **)(a1 + 152);
    if (v72) {
      atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v71) {
      __int16 v73 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v71 + 48))(v71, 2);
    }
    else {
      __int16 v73 = "nothing";
    }
    uint64_t v89 = *(void *)(a1 + 144);
    *(_DWORD *)long long buf = 136316162;
    *(void *)&uint8_t buf[4] = "grabDataContext";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v69;
    __int16 v179 = 2048;
    uint64_t v180 = v70;
    __int16 v181 = 2080;
    uint64_t v182 = v73;
    __int16 v183 = 2048;
    uint64_t v184 = v89;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "#I %s:  %s (0x%lx) is already pending and we are in use by %s (0x%lx), keep pending", buf, 0x34u);
    if (v72) {
      sub_10004D2C8(v72);
    }
    if (!v68) {
      goto LABEL_185;
    }
    uint64_t v90 = v68;
LABEL_184:
    sub_10004D2C8(v90);
LABEL_185:
    unint64_t v8 = 0;
    uint64_t v42 = 2;
    goto LABEL_268;
  }
  unsigned int v56 = v28;
  if (v26 == v28)
  {
    (*(void (**)(unsigned char *__return_ptr))(*(void *)(*a3 + *(void *)(*(void *)*a3 - 56)) + 16))(buf);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)(*(void *)(a1 + 144)
                                                              + *(void *)(**(void **)(a1 + 144) - 56))
                                                  + 16))(&v172);
    int matched = DataUtils::matchPersonality();
    if (v173) {
      sub_10004D2C8(v173);
    }
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    if (matched)
    {
      uint64_t v58 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v59 = *(void *)(a1 + 144);
        uint64_t v60 = *(std::__shared_weak_count **)(a1 + 152);
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v59) {
          __int16 v61 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v59 + 48))(v59, 2);
        }
        else {
          __int16 v61 = "nothing";
        }
        uint64_t v125 = *(void *)(a1 + 144);
        uint64_t v126 = *a3;
        id v127 = (std::__shared_weak_count *)a3[1];
        if (v127) {
          atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v126) {
          uint64_t v128 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v126 + 48))(v126, 2);
        }
        else {
          uint64_t v128 = "nothing";
        }
        uint64_t v129 = *a3;
        *(_DWORD *)long long buf = 136316162;
        *(void *)&uint8_t buf[4] = "grabDataContext";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = v61;
        __int16 v179 = 2048;
        uint64_t v180 = v125;
        __int16 v181 = 2080;
        uint64_t v182 = v128;
        __int16 v183 = 2048;
        uint64_t v184 = v129;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#I %s: replacing %s (0x%lx) with equal-priority %s (0x%lx)", buf, 0x34u);
        if (v127) {
          sub_10004D2C8(v127);
        }
        if (v60) {
          sub_10004D2C8(v60);
        }
      }
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 144) + 328))(*(void *)(a1 + 144), a2, a1 + 24);
      uint64_t v131 = *a3;
      uint64_t v130 = a3[1];
      if (v130) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v130 + 8), 1uLL, memory_order_relaxed);
      }
      long long v132 = *(std::__shared_weak_count **)(a1 + 152);
      *(void *)(a1 + 144) = v131;
      *(void *)(a1 + 152) = v130;
      if (v132) {
        sub_10004D2C8(v132);
      }
      int v133 = *(NSObject **)(a1 + 72);
      if (!os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_248;
      }
      uint64_t v134 = *(void *)(a1 + 144);
      char v135 = *(std::__shared_weak_count **)(a1 + 152);
      if (v135) {
        atomic_fetch_add_explicit(&v135->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v134) {
        std::string::size_type v136 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v134 + 48))(v134, 2);
      }
      else {
        std::string::size_type v136 = "nothing";
      }
      uint64_t v137 = *(void *)(a1 + 144);
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "grabDataContext";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v136;
      __int16 v179 = 2048;
      uint64_t v180 = v137;
      id v138 = "#I %s: (change states) new active settings %s (0x%lx) (2)";
LABEL_246:
      _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEFAULT, v138, buf, 0x20u);
      if (v135) {
        sub_10004D2C8(v135);
      }
LABEL_248:
      unint64_t v8 = 0;
      goto LABEL_249;
    }
  }
  char v62 = *(NSObject **)(a1 + 72);
  BOOL v63 = os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT);
  if (v26 <= v56)
  {
    if (v63)
    {
      uint64_t v83 = *a3;
      int v84 = (std::__shared_weak_count *)a3[1];
      if (v84) {
        atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v83) {
        __int16 v85 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v83 + 48))(v83, 2);
      }
      else {
        __int16 v85 = "nothing";
      }
      uint64_t v115 = *a3;
      uint64_t v116 = *(void *)(a1 + 144);
      std::string::size_type v117 = *(std::__shared_weak_count **)(a1 + 152);
      if (v117) {
        atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v116) {
        id v118 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v116 + 48))(v116, 2);
      }
      else {
        id v118 = "nothing";
      }
      uint64_t v120 = *(void *)(a1 + 144);
      *(_DWORD *)long long buf = 136316162;
      *(void *)&uint8_t buf[4] = "grabDataContext";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v85;
      __int16 v179 = 2048;
      uint64_t v180 = v115;
      __int16 v181 = 2080;
      uint64_t v182 = v118;
      __int16 v183 = 2048;
      uint64_t v184 = v120;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#I %s:  %s (0x%lx) is trying to use us while we are in use by lower-priority %s (0x%lx), pending first and disconnecting second", buf, 0x34u);
      if (v117) {
        sub_10004D2C8(v117);
      }
      if (v84) {
        sub_10004D2C8(v84);
      }
    }
    uint64_t v122 = *a3;
    uint64_t v121 = a3[1];
    if (v121) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v121 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::size_type v123 = *(std::__shared_weak_count **)(a1 + 168);
    *(void *)(a1 + 160) = v122;
    *(void *)(a1 + 168) = v121;
    if (v123) {
      sub_10004D2C8(v123);
    }
    if (*(unsigned char *)(a1 + 80 * (int)a2 + 192))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 576))(&v170, a1);
      sub_1008C9BA8(a1, a2, (uint64_t)&v170, 25, (uint64_t)"CommCenter");
      if (v171) {
        sub_10004D2C8(v171);
      }
    }
    if (!*(unsigned char *)(a1 + 80 * (int)otherContextType() + 192)) {
      goto LABEL_185;
    }
    int v124 = otherContextType();
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 576))(&v168, a1);
    sub_1008C9BA8(a1, v124, (uint64_t)&v168, 25, (uint64_t)"CommCenter");
    uint64_t v90 = v169;
    if (!v169) {
      goto LABEL_185;
    }
    goto LABEL_184;
  }
  if (v63)
  {
    uint64_t v64 = *a3;
    int v65 = (std::__shared_weak_count *)a3[1];
    if (v65) {
      atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v64) {
      BOOL v66 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v64 + 48))(v64, 2);
    }
    else {
      BOOL v66 = "nothing";
    }
    uint64_t v112 = *a3;
    uint64_t v113 = *(void *)(a1 + 144);
    uint64_t v98 = *(std::__shared_weak_count **)(a1 + 152);
    if (v98) {
      atomic_fetch_add_explicit(&v98->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v113) {
      id v114 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v113 + 48))(v113, 2);
    }
    else {
      id v114 = "nothing";
    }
    uint64_t v119 = *(void *)(a1 + 144);
    *(_DWORD *)long long buf = 136316162;
    *(void *)&uint8_t buf[4] = "grabDataContext";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v66;
    __int16 v179 = 2048;
    uint64_t v180 = v112;
    __int16 v181 = 2080;
    uint64_t v182 = v114;
    __int16 v183 = 2048;
    uint64_t v184 = v119;
    _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#I %s:  %s (0x%lx) is trying to use us while we are in use by higher-priority %s (0x%lx), rejecting first", buf, 0x34u);
LABEL_166:
    if (v98) {
      sub_10004D2C8(v98);
    }
    if (v65) {
      sub_10004D2C8(v65);
    }
  }
LABEL_267:
  uint64_t v42 = 0xFFFFFFFFLL;
LABEL_268:
  if (v177) {
    sub_10004D2C8(v177);
  }
  return v42 | v8 & 0xFFFFFFFF00000000;
}

void sub_1008D356C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22)
{
  if (v22) {
    sub_10004D2C8(v22);
  }
  if (v23) {
    sub_10004D2C8(v23);
  }
  if (a20) {
    sub_10004D2C8(a20);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1008D3728(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  return sub_1008D1CCC(a1 - 24, a2, a3, a4);
}

void sub_1008D3748(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v25 = 0;
  unsigned int v26 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)(*a3 + *(void *)(*(void *)*a3 - 56)) + 16))(&v23);
  sub_1008C4848(a1, a2, &v25);
  if (v24) {
    sub_10004D2C8(v24);
  }
  unsigned int v10 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 504))(*a3, a4);
  if (!v25) {
    goto LABEL_12;
  }
  unsigned int v11 = v10;
  if (!*(unsigned char *)(a1 + 192) && !*(unsigned char *)(a1 + 272)) {
    goto LABEL_12;
  }
  uint64_t v12 = *(void *)(a1 + 160);
  if (v12
    && v12 != *a3
    && v11 >= (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 504))(v12, 999))
  {
    *(_DWORD *)a5 = -9;
    uint64_t v14 = "We have pending connection of higher or equal priority";
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 144);
    if (!v13
      || v13 == *a3
      || v11 < (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v13 + 504))(v13, 999))
    {
LABEL_12:
      *(_OWORD *)a5 = 0u;
      *(_OWORD *)(a5 + 16) = 0u;
      *(void *)(a5 + 8) = "";
      *(void *)(a5 + 16) = "";
      *(void *)(a5 + 44) = 0;
      *(void *)(a5 + 36) = 0;
      *(_DWORD *)(a5 + 52) = 0;
      *(_DWORD *)(a5 + 32) = a2;
      goto LABEL_13;
    }
    uint64_t v15 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = asString();
      uint64_t v17 = *(void *)(a1 + 144);
      unsigned int v18 = *(std::__shared_weak_count **)(a1 + 152);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v17) {
        uint64_t v19 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 48))(v17, 2);
      }
      else {
        uint64_t v19 = "nothing";
      }
      uint64_t v20 = *a3;
      uint64_t v21 = (std::__shared_weak_count *)a3[1];
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v20) {
        char v22 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v20 + 48))(v20, 2);
      }
      else {
        char v22 = "nothing";
      }
      *(_DWORD *)long long buf = 136315650;
      uint64_t v28 = v16;
      __int16 v29 = 2080;
      unsigned int v30 = v19;
      __int16 v31 = 2080;
      BOOL v32 = v22;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#N We have active connection of higher or equal priority: ct=%s, current Settings=%s, new Settings=%s", buf, 0x20u);
      if (v21) {
        sub_10004D2C8(v21);
      }
      if (v18) {
        sub_10004D2C8(v18);
      }
    }
    *(_DWORD *)a5 = -9;
    uint64_t v14 = "We have active connection of higher or equal priority";
  }
  *(void *)(a5 + 8) = v14;
  *(void *)(a5 + 16) = "";
  *(_DWORD *)(a5 + 24) = 0;
  *(unsigned char *)(a5 + 28) = 0;
  *(_DWORD *)(a5 + 32) = a2;
  *(void *)(a5 + 44) = 0;
  *(void *)(a5 + 36) = 0;
  *(_DWORD *)(a5 + 52) = 0;
LABEL_13:
  if (v26) {
    sub_10004D2C8(v26);
  }
}

void sub_1008D3AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_10004D2C8(v12);
  }
  if (v13) {
    sub_10004D2C8(v13);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D3B08(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

uint64_t sub_1008D3B10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 96);
  if (v3)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    uint64_t v8 = *a2;
    uint64_t v9 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 168))(v3, &v8);
    if (v9) {
      sub_10004D2C8(v9);
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(a1 + 72);
    uint64_t v5 = 0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      unsigned int v11 = "configureHOVirtualInterface";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#E %s: Empty pdp manager", buf, 0xCu);
      return 0;
    }
  }
  return v5;
}

void sub_1008D3C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008D3C34(uint64_t a1, uint64_t *a2)
{
  return sub_1008D3B10(a1 - 24, a2);
}

BOOL sub_1008D3C3C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "detachDataSettings";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: ", buf, 0xCu);
  }
  sub_1008CBE60(a1, 0);
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  v52[0] = *a2;
  v52[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1008D441C((void *)a1, v52);
  if (v5) {
    sub_10004D2C8(v5);
  }
  uint64_t v6 = *(void *)(a1 + 160);
  if (v6)
  {
    uint64_t v7 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "detachDataSettings";
      uint64_t v8 = "#I %s: we have pending settings, we can not detach this settings, to allow normal control flow in checkPendingGrabs";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 0xCu);
      return v6 == 0;
    }
    return v6 == 0;
  }
  uint64_t v10 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v11 = *(void *)(a1 + 144);
    sub_10004D2C8(v9);
    if (v11 != v10) {
      return v6 == 0;
    }
  }
  else if (*(void *)(a1 + 144) != v10)
  {
    return v6 == 0;
  }
  for (uint64_t i = 0; i != 2; ++i)
  {
    int v13 = dword_101506340[i];
    sub_1008CCA68(a1, v13, 0, 0);
    sub_1008CC9B8(a1, v13);
    if (*a2)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)(*a2 + *(void *)(*(void *)*a2 - 56)) + 16))(&v50);
      sub_1008C9BA8(a1, v13, (uint64_t)&v50, 27, (uint64_t)"CommCenter");
      if (v51) {
        sub_10004D2C8(v51);
      }
    }
  }
  if (*a2)
  {
    uint64_t v14 = (capabilities::ct *)(*(uint64_t (**)(void))(*(void *)(*a2 + *(void *)(*(void *)*a2 - 56))
                                                                + 24))(*a2 + *(void *)(*(void *)*a2 - 56));
    int v15 = (int)v14;
    if (capabilities::ct::supportsIPCInterfaceConfig(v14))
    {
      BOOL v53 = 0;
      sub_1008CE6E4((capabilities::ct *)a1, v15, 0, 0, &v53);
      uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 568))(a1, 0, 1, 1);
      sub_1008CE6E4((capabilities::ct *)a1, v15, 1, v16, &v53);
      uint64_t v17 = *(void *)(a1 + 136);
      uint64_t v19 = *(void **)(v17 + 8);
      unsigned int v18 = *(void **)(v17 + 16);
      while (1)
      {
        if (v19 == v18) {
          __assert_rtn("at", "PerPersonalityDataContainer.h", 67, "0");
        }
        if (*(_DWORD *)(v19[7] + 52) == v15) {
          break;
        }
        v19 += 9;
      }
      char v22 = (void *)*v19;
      uint64_t v20 = v19 + 1;
      uint64_t v21 = v22;
      if (v20 != v22)
      {
        do
        {
          uint64_t v24 = v21[4];
          uint64_t v23 = (std::__shared_weak_count *)v21[5];
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 56))(v24)) {
            goto LABEL_43;
          }
          ServiceMap = (std::mutex *)Registry::getServiceMap(v25, *(Registry **)(a1 + 80));
          uint64_t v27 = ServiceMap;
          if (v28 < 0)
          {
            __int16 v29 = (unsigned __int8 *)(v28 & 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v30 = 5381;
            do
            {
              uint64_t v28 = v30;
              unsigned int v31 = *v29++;
              uint64_t v30 = (33 * v30) ^ v31;
            }
            while (v31);
          }
          std::mutex::lock(ServiceMap);
          *(void *)long long buf = v28;
          BOOL v32 = sub_10004D37C(&v27[1].__m_.__sig, (unint64_t *)buf);
          if (v32)
          {
            uint64_t v34 = v32[3];
            uint64_t v33 = (std::__shared_weak_count *)v32[4];
            if (v33)
            {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
              std::mutex::unlock(v27);
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
              uint64_t v6 = 0;
              sub_10004D2C8(v33);
              char v35 = 0;
              if (v34) {
                goto LABEL_39;
              }
              goto LABEL_41;
            }
          }
          else
          {
            uint64_t v34 = 0;
          }
          std::mutex::unlock(v27);
          uint64_t v33 = 0;
          char v35 = 1;
          if (v34)
          {
LABEL_39:
            (*(void (**)(unsigned char *__return_ptr, uint64_t, void))(*(void *)v24 + 344))(buf, v24, 0);
            (*(void (**)(uint64_t, unsigned char *))(*(void *)v34 + 1144))(v34, buf);
            if (v55 < 0) {
              operator delete(*(void **)buf);
            }
          }
LABEL_41:
          if ((v35 & 1) == 0) {
            sub_10004D2C8(v33);
          }
LABEL_43:
          if (v23) {
            sub_10004D2C8(v23);
          }
          uint64_t v36 = (void *)v21[1];
          if (v36)
          {
            do
            {
              uint64_t v37 = v36;
              uint64_t v36 = (void *)*v36;
            }
            while (v36);
          }
          else
          {
            do
            {
              uint64_t v37 = (void *)v21[2];
              BOOL v38 = *v37 == (void)v21;
              uint64_t v21 = v37;
            }
            while (!v38);
          }
          uint64_t v21 = v37;
        }
        while (v20 != v37);
      }
    }
    if (*a2)
    {
      for (uint64_t j = 0; j != 2; ++j)
      {
        uint64_t v40 = dword_101506340[j];
        (*(void (**)(unsigned char *__return_ptr))(*(void *)(*a2 + *(void *)(*(void *)*a2 - 56)) + 16))(buf);
        int v41 = sub_1008D4614(a1, v40, (uint64_t)buf);
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
        uint64_t v42 = *(NSObject **)(a1 + 72);
        BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
        if (v41)
        {
          if (v43)
          {
            uint64_t v44 = asString();
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = "detachDataSettings";
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&unsigned char buf[14] = v44;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#I %s: context %s is idle, cleaning the IP families", buf, 0x16u);
          }
          (*(void (**)(uint64_t *__return_ptr))(*(void *)(*a2 + *(void *)(*(void *)*a2 - 56)) + 16))(&v48);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 704))(a1, 3, v40, &v48);
          if (v49) {
            sub_10004D2C8(v49);
          }
        }
        else if (v43)
        {
          uint64_t v45 = asString();
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "detachDataSettings";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v45;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#I %s: context %s is not idle, not cleaning the IP families", buf, 0x16u);
        }
      }
    }
  }
  uint64_t v46 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  if (v46) {
    sub_10004D2C8(v46);
  }
  uint64_t v7 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "detachDataSettings";
    uint64_t v8 = "#I %s: (change states) empty active settings";
    goto LABEL_10;
  }
  return v6 == 0;
}

void sub_1008D4374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(__p);
    if (v28)
    {
LABEL_3:
      if (!v26) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      sub_10004D2C8(v26);
      goto LABEL_8;
    }
  }
  else if (v28)
  {
    goto LABEL_3;
  }
  sub_10004D2C8(v27);
  if (!v26) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

void sub_1008D441C(void *a1, void *a2)
{
  if (!*a2)
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)
      || (int v9 = 136315650,
          uint64_t v10 = "We can not be called without DataSettings",
          __int16 v11 = 2080,
          uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataPDPActivator.cpp",
          __int16 v13 = 1024,
          int v14 = 2128,
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT dataSettings\n %s\n at %s:%d\n**********", (uint8_t *)&v9, 0x1Cu), !*a2))
    {
      __TUAssertTrigger();
    }
  }
  uint64_t v4 = a1[20];
  if (v4 && v4 == *a2)
  {
    uint64_t v5 = a1[9];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (std::__shared_weak_count *)a1[21];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, 2);
      int v9 = 136315394;
      uint64_t v10 = "cancelGrabDataContext";
      __int16 v11 = 2080;
      uint64_t v12 = (const char *)v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: canceling pending %s", (uint8_t *)&v9, 0x16u);
      if (v6) {
        sub_10004D2C8(v6);
      }
    }
    uint64_t v8 = (std::__shared_weak_count *)a1[21];
    a1[20] = 0;
    a1[21] = 0;
    if (v8) {
      sub_10004D2C8(v8);
    }
  }
}

void sub_1008D45E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1008D4600(uint64_t a1, void *a2)
{
  return *(void *)(a1 + 144) == *a2;
}

uint64_t sub_1008D4614(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1) {
    goto LABEL_11;
  }
  uint64_t v8 = 0;
  int v9 = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1008C4848(a1, a2, &v8);
  if (v7) {
    sub_10004D2C8(v7);
  }
  uint64_t v5 = v8;
  if (v8) {
    char v3 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 216))(v8);
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
  if (!v5) {
LABEL_11:
  }
    char v3 = 1;
  return v3 & 1;
}

void sub_1008D46C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1008D46EC(uint64_t a1, void *a2)
{
  return sub_1008D3C3C(a1 - 24, a2);
}

void sub_1008D46F4(uint64_t a1, void *a2)
{
}

void sub_1008D46FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 160))
  {
    if (!*(void *)(v2 + 144))
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)
        || (*(_DWORD *)long long buf = 136315650,
            uint64_t v24 = "We have to have fActiveDataSettings at this point",
            __int16 v25 = 2080,
            unsigned int v26 = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataPDPActivator.cpp",
            __int16 v27 = 1024,
            LODWORD(v28) = 2142,
            _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT fSettings.fActiveDataSettings\n %s\n at %s:%d\n**********", buf, 0x1Cu), !*(void *)(v2 + 144)))
      {
        __TUAssertTrigger();
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 584))(v2))
  {
    uint64_t v21 = 0;
    char v22 = 0;
    int v3 = *(_DWORD *)(a1 + 40);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v2 + 576))(&v19, v2);
    sub_1008C4AE0(v2, v3, &v21);
    if (v20) {
      sub_10004D2C8(v20);
    }
    if (v21 && !*(unsigned char *)(v2 + 192) && !*(unsigned char *)(v2 + 272) && *(void *)(v2 + 160))
    {
      uint64_t v4 = *(NSObject **)(v2 + 72);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(v2 + 144);
        uint64_t v6 = *(std::__shared_weak_count **)(v2 + 152);
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v5) {
          uint64_t v7 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 2);
        }
        else {
          uint64_t v7 = "nothing";
        }
        uint64_t v8 = *(void *)(v2 + 160);
        int v9 = *(std::__shared_weak_count **)(v2 + 168);
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v8) {
          uint64_t v10 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, 2);
        }
        else {
          uint64_t v10 = "nothing";
        }
        *(_DWORD *)long long buf = 136315650;
        uint64_t v24 = "checkPendingGrabs_block_invoke";
        __int16 v25 = 2080;
        unsigned int v26 = v7;
        __int16 v27 = 2080;
        char v28 = v10;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s:  done with %s and have pending %s", buf, 0x20u);
        if (v9) {
          sub_10004D2C8(v9);
        }
        if (v6) {
          sub_10004D2C8(v6);
        }
      }
      (*(void (**)(void))(**(void **)(v2 + 144) + 624))(*(void *)(v2 + 144));
      uint64_t v12 = *(void *)(v2 + 160);
      uint64_t v11 = *(void *)(v2 + 168);
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      __int16 v13 = *(std::__shared_weak_count **)(v2 + 152);
      *(void *)(v2 + 144) = v12;
      *(void *)(v2 + 152) = v11;
      if (v13) {
        sub_10004D2C8(v13);
      }
      int v14 = *(NSObject **)(v2 + 72);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(v2 + 144);
        uint64_t v16 = *(std::__shared_weak_count **)(v2 + 152);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v15) {
          uint64_t v17 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 48))(v15, 2);
        }
        else {
          uint64_t v17 = "nothing";
        }
        *(_DWORD *)long long buf = 136315394;
        uint64_t v24 = "checkPendingGrabs_block_invoke";
        __int16 v25 = 2080;
        unsigned int v26 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s: (change states) new active settings %s (4)", buf, 0x16u);
        if (v16) {
          sub_10004D2C8(v16);
        }
      }
      unsigned int v18 = *(std::__shared_weak_count **)(v2 + 168);
      *(void *)(v2 + 160) = 0;
      *(void *)(v2 + 168) = 0;
      if (v18) {
        sub_10004D2C8(v18);
      }
      (*(void (**)(void, void, uint64_t))(**(void **)(v2 + 144) + 320))(*(void *)(v2 + 144), *(unsigned int *)(a1 + 40), v2 + 24);
    }
    if (v22) {
      sub_10004D2C8(v22);
    }
  }
}

void sub_1008D4B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_10004D2C8(v12);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008D4B84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 128);
}

uint64_t sub_1008D4B8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1008D4B94(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const void **a6, uint64_t a7)
{
  uint64_t v11 = *(std::__shared_weak_count **)(a3 + 8);
  v15[1] = *(const void **)a3;
  uint64_t v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = 0;
  unsigned int v18 = 0;
  sub_1008C4AE0(a1, a2, &v17);
  if (v16) {
    sub_10004D2C8(v16);
  }
  uint64_t v12 = v17;
  if (v17)
  {
    sub_100058198(v15, a6);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const void **, uint64_t))(*(void *)v12 + 304))(v12, a4, a5, v15, a7);
    sub_100057D78(v15);
  }
  else
  {
    uint64_t v13 = 0;
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  return v13;
}

void sub_1008D4C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1008D4CB4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const void **a6, uint64_t a7)
{
  return sub_1008D4B94(a1 - 24, a2, a3, a4, a5, a6, a7);
}

BOOL sub_1008D4CBC(uint64_t a1, int a2, uint64_t *a3)
{
  if (!anyContextType())
  {
    uint64_t v12 = *a3;
    uint64_t v11 = (std::__shared_weak_count *)a3[1];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = *(void *)(a1 + 144);
      sub_10004D2C8(v11);
      if (v13 != v12) {
        return 0;
      }
    }
    else if (*(void *)(a1 + 144) != v12)
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 80 * a2 + 192) && (*(unsigned char *)(a1 + 80 * a2 + 224) || *(unsigned char *)(a1 + 80 * a2 + 232)))
    {
      v15[0] = 0;
      v15[1] = 0;
      return !sub_1008C7808(a1, a2, v15);
    }
    return 0;
  }
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = dword_101506340[v6];
    uint64_t v8 = (std::__shared_weak_count *)a3[1];
    v16[0] = *a3;
    v16[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = sub_1008D4CBC(a1, v7, v16);
    if (v8) {
      sub_10004D2C8(v8);
    }
    if (v6 == 1) {
      char v10 = 1;
    }
    else {
      char v10 = v9;
    }
    ++v6;
  }
  while ((v10 & 1) == 0);
  return v9;
}

void sub_1008D4DF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1008D4E0C(uint64_t a1, int a2, uint64_t *a3)
{
  return sub_1008D4CBC(a1 - 24, a2, a3);
}

void sub_1008D4E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  uint64_t v9 = *(std::__shared_weak_count **)(a3 + 8);
  v14[1] = *(const void **)a3;
  uint64_t v15 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_1008C4AE0(a1, a2, &v16);
  if (v15) {
    sub_10004D2C8(v15);
  }
  uint64_t v10 = *(void *)(a1 + 96);
  if (v10)
  {
    sub_100058198(&v13, a5);
    (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, const void **))(*(void *)v10 + 232))(v14, v10, a2, &v13);
    if (v14 != a5)
    {
      unsigned int v18 = *a5;
      *a5 = v14[0];
      v14[0] = 0;
      sub_100057D78(&v18);
    }
    sub_100057D78(v14);
    sub_100057D78(&v13);
  }
  uint64_t v11 = v16;
  if (v16)
  {
    sub_100058198(&v12, a5);
    (*(void (**)(uint64_t, uint64_t, const void **))(*(void *)v11 + 312))(v11, a4, &v12);
    sub_100057D78(&v12);
  }
  if (v17) {
    sub_10004D2C8(v17);
  }
}

void sub_1008D4F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_10004D2C8(a15);
  }
  _Unwind_Resume(a1);
}

void sub_1008D4FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a13) {
    JUMPOUT(0x1008D4F98);
  }
  JUMPOUT(0x1008D4F94);
}

void sub_1008D4FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
}

void sub_1008D4FB8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v8 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_1008C4AE0(a1, a2, &v9);
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 336))(v9, a4, a5);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
}

void sub_1008D5060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D5088(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1008D5090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (sub_1008C4968(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16)))
  {
    uint64_t v10 = sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16));
    uint64_t v11 = *(void *)(v10 + 24);
    uint64_t v12 = *(std::__shared_weak_count **)(v10 + 32);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v11) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 208))(v11, a3, a4);
    }
    if (a4 == 5)
    {
      *(void *)long long buf = 0;
      uint64_t v17 = 0;
      uint64_t v13 = *(std::__shared_weak_count **)(a2 + 8);
      uint64_t v15 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1008C4848(a1, 0, buf);
      if (v15) {
        sub_10004D2C8(v15);
      }
      if (*(void *)buf) {
        (*(void (**)(void, uint64_t))(**(void **)buf + 296))(*(void *)buf, a5);
      }
      if (v17) {
        sub_10004D2C8(v17);
      }
    }
    if (v12) {
      sub_10004D2C8(v12);
    }
  }
  else
  {
    int v14 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "invalid pInfo in notifyBBofDataService", buf, 2u);
    }
  }
}

void sub_1008D5220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D525C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1008D5264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

BOOL sub_1008D526C(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 144);
  if (!v3 || v3 != *a3 || !*(unsigned char *)(a1 + 80 * a2 + 192)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 80 * a2 + 224)) {
    return 1;
  }
  return *(unsigned char *)(a1 + 80 * a2 + 232) != 0;
}

BOOL sub_1008D52CC(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 120);
  if (!v3) {
    return 0;
  }
  if (v3 != *a3) {
    return 0;
  }
  uint64_t v5 = a1 - 24;
  if (!*(unsigned char *)(a1 - 24 + 80 * a2 + 192)) {
    return 0;
  }
  if (*(unsigned char *)(v5 + 80 * a2 + 224)) {
    return 1;
  }
  return *(unsigned char *)(v5 + 80 * a2 + 232) != 0;
}

BOOL sub_1008D5330(uint64_t a1, void *a2)
{
  return *(void *)(a1 + 120) == *a2;
}

void sub_1008D5344(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v8 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_1008C4848(a1, a2, &v9);
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 344))(v9, a4);
  }
  else
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
}

void sub_1008D53F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D5420(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
}

void sub_1008D5428(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v6 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_1008C4848(a1, a2, &v7);
  if (v6) {
    sub_10004D2C8(v6);
  }
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 352))(v7);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
}

void sub_1008D54D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D54FC(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

uint64_t sub_1008D5504(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v6 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_1008C4848(a1, 0, &v7);
  if (v6) {
    sub_10004D2C8(v6);
  }
  if (v7) {
    uint64_t QosFlowsContainerDefault = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 360))(v7);
  }
  else {
    uint64_t QosFlowsContainerDefault = getQosFlowsContainerDefault();
  }
  uint64_t v4 = QosFlowsContainerDefault;
  if (v8) {
    sub_10004D2C8(v8);
  }
  return v4;
}

void sub_1008D55B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008D55D8(uint64_t a1, uint64_t a2)
{
  return sub_1008D5504(a1 - 24, a2);
}

void sub_1008D55E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *(void *)(a1 + 144);
    sub_10004D2C8(v3);
    if (v5 != v4) {
      return;
    }
  }
  else if (*(void *)(a1 + 144) != v4)
  {
    return;
  }
  uint64_t v6 = *(void (**)(void))(**(void **)(a1 + 112) + 168);

  v6();
}

void sub_1008D5688(uint64_t a1, uint64_t *a2)
{
}

void sub_1008D5690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  lpsrc = 0;
  uint64_t v9 = 0;
  sub_1008C4AE0(a1, 1, &lpsrc);
  if (v7) {
    sub_10004D2C8(v7);
  }
  if (lpsrc)
  {
    if (v5)
    {
      uint64_t v6 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t))(*(void *)v5 + 672))(v5, a3);
      if (v6) {
        sub_10004D2C8(v6);
      }
    }
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_1008D5798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    sub_10004D2C8(v10);
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D57C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  lpsrc = 0;
  uint64_t v9 = 0;
  sub_1008C4AE0(a1, 1, &lpsrc);
  if (v7) {
    sub_10004D2C8(v7);
  }
  if (lpsrc)
  {
    if (v5)
    {
      uint64_t v6 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t))(*(void *)v5 + 680))(v5, a3);
      if (v6) {
        sub_10004D2C8(v6);
      }
    }
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_1008D58D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    sub_10004D2C8(v10);
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D5900(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 136);
  uint64_t v2 = *(void **)(v1 + 8);
  for (uint64_t i = *(void **)(v1 + 16); v2 != i; v2 += 9)
  {
    uint64_t v4 = (void *)*v2;
    if ((void *)*v2 != v2 + 1)
    {
      do
      {
        uint64_t v5 = v4[4];
        uint64_t v6 = (std::__shared_weak_count *)v4[5];
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t))(*(void *)v5 + 560))(v5);
        if (v6) {
          sub_10004D2C8(v6);
        }
        uint64_t v7 = (void *)v4[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v4[2];
            BOOL v9 = *v8 == (void)v4;
            uint64_t v4 = v8;
          }
          while (!v9);
        }
        uint64_t v4 = v8;
      }
      while (v8 != v2 + 1);
    }
  }
}

void sub_1008D59DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D59F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v5 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  lpsrc = 0;
  uint64_t v7 = 0;
  sub_1008C4AE0(a1, 1, &lpsrc);
  if (v5) {
    sub_10004D2C8(v5);
  }
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *))(*(void *)v3 + 728))(v3);
      if (v4) {
        sub_10004D2C8(v4);
      }
    }
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1008D5AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    sub_10004D2C8(v10);
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D5B24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v5 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  lpsrc = 0;
  uint64_t v7 = 0;
  sub_1008C4AE0(a1, 1, &lpsrc);
  if (v5) {
    sub_10004D2C8(v5);
  }
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *))(*(void *)v3 + 736))(v3);
      if (v4) {
        sub_10004D2C8(v4);
      }
    }
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1008D5C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    sub_10004D2C8(v10);
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D5C54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v5 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  lpsrc = 0;
  uint64_t v7 = 0;
  sub_1008C4AE0(a1, 1, &lpsrc);
  if (v5) {
    sub_10004D2C8(v5);
  }
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *))(*(void *)v3 + 744))(v3);
      if (v4) {
        sub_10004D2C8(v4);
      }
    }
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1008D5D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    sub_10004D2C8(v10);
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D5D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
  BOOL v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  lpsrc = 0;
  uint64_t v11 = 0;
  sub_1008C4AE0(a1, 1, &lpsrc);
  if (v9) {
    sub_10004D2C8(v9);
  }
  if (lpsrc)
  {
    if (v7)
    {
      uint64_t v8 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)v7 + 720))(v7, a3, a4);
      if (v8) {
        sub_10004D2C8(v8);
      }
    }
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
}

void sub_1008D5E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    sub_10004D2C8(v10);
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D5ECC(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 != 1) {
    goto LABEL_16;
  }
  lpsrc = 0;
  BOOL v9 = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1008C4848(a1, 1, &lpsrc);
  if (v7) {
    sub_10004D2C8(v7);
  }
  if (lpsrc
  {
    uint64_t v6 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *))(*(void *)v5 + 712))(v5);
    if (v6)
    {
      sub_10004D2C8(v6);
      LOBYTE(v6) = 0;
    }
  }
  else
  {
    LOBYTE(v6) = 1;
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
  if (v6) {
LABEL_16:
  }
    (*(void (**)(uint64_t))(*(void *)a1 + 840))(a1);
}

void sub_1008D6030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    sub_10004D2C8(v10);
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D6060(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v5 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  lpsrc = 0;
  uint64_t v7 = 0;
  sub_1008C4AE0(a1, 1, &lpsrc);
  if (v5) {
    sub_10004D2C8(v5);
  }
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *))(*(void *)v3 + 664))(v3);
      if (v4) {
        sub_10004D2C8(v4);
      }
    }
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1008D6160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    sub_10004D2C8(v10);
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D6190(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 136);
  uint64_t v2 = *(void **)(v1 + 8);
  for (uint64_t i = *(void **)(v1 + 16); v2 != i; v2 += 9)
  {
    uint64_t v4 = (void *)*v2;
    if ((void *)*v2 != v2 + 1)
    {
      do
      {
        uint64_t v5 = v4[4];
        uint64_t v6 = (std::__shared_weak_count *)v4[5];
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t))(*(void *)v5 + 256))(v5);
        if (v6) {
          sub_10004D2C8(v6);
        }
        uint64_t v7 = (void *)v4[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v4[2];
            BOOL v9 = *v8 == (void)v4;
            uint64_t v4 = v8;
          }
          while (!v9);
        }
        uint64_t v4 = v8;
      }
      while (v8 != v2 + 1);
    }
  }
}

void sub_1008D626C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D6284(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 136);
  uint64_t v2 = *(void **)(v1 + 8);
  for (uint64_t i = *(void **)(v1 + 16); v2 != i; v2 += 9)
  {
    uint64_t v4 = (void *)*v2;
    if ((void *)*v2 != v2 + 1)
    {
      do
      {
        uint64_t v6 = v4[4];
        uint64_t v5 = (std::__shared_weak_count *)v4[5];
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 56))(v6)) {
          (*(void (**)(uint64_t))(*(void *)v6 + 248))(v6);
        }
        if (v5) {
          sub_10004D2C8(v5);
        }
        uint64_t v7 = (void *)v4[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v4[2];
            BOOL v9 = *v8 == (void)v4;
            uint64_t v4 = v8;
          }
          while (!v9);
        }
        uint64_t v4 = v8;
      }
      while (v8 != v2 + 1);
    }
  }
}

void sub_1008D6390(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008D63A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v5 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_1008C4AE0(a1, 1, &v6);
  if (v5) {
    sub_10004D2C8(v5);
  }
  if (v6) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 248))(v6);
  }
  else {
    uint64_t v3 = 0;
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
  return v3;
}

void sub_1008D644C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D6474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  lpsrc = 0;
  BOOL v9 = 0;
  sub_1008C4AE0(a1, 1, &lpsrc);
  if (v7) {
    sub_10004D2C8(v7);
  }
  if (lpsrc)
  {
    if (v5)
    {
      uint64_t v6 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t))(*(void *)v5 + 704))(v5, a3);
      if (v6) {
        sub_10004D2C8(v6);
      }
    }
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_1008D657C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    sub_10004D2C8(v10);
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D65AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v5 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  lpsrc = 0;
  uint64_t v7 = 0;
  sub_1008C4AE0(a1, 1, &lpsrc);
  if (v5) {
    sub_10004D2C8(v5);
  }
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *))(*(void *)v3 + 688))(v3);
      if (v4) {
        sub_10004D2C8(v4);
      }
    }
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1008D66AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    sub_10004D2C8(v10);
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D66DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  lpsrc = 0;
  BOOL v9 = 0;
  sub_1008C4AE0(a1, 1, &lpsrc);
  if (v7) {
    sub_10004D2C8(v7);
  }
  if (lpsrc)
  {
    if (v5)
    {
      uint64_t v6 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *, uint64_t))(*(void *)v5 + 696))(v5, a3);
      if (v6) {
        sub_10004D2C8(v6);
      }
    }
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_1008D67E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    sub_10004D2C8(v10);
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D6814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1008C4968(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16)))
  {
    uint64_t v6 = (void *)sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16));
    uint64_t v7 = v6 + 1;
    uint64_t v8 = (void *)*v6;
    if ((void *)*v6 != v6 + 1)
    {
      do
      {
        uint64_t v9 = v8[4];
        uint64_t v10 = (std::__shared_weak_count *)v8[5];
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 544))(v9, a2, a3);
        if (v10) {
          sub_10004D2C8(v10);
        }
        uint64_t v11 = (void *)v8[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (void *)v8[2];
            BOOL v13 = *v12 == (void)v8;
            uint64_t v8 = v12;
          }
          while (!v13);
        }
        uint64_t v8 = v12;
      }
      while (v12 != v7);
    }
  }
}

void sub_1008D6910(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D6928(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v12 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = 0;
  int v14 = 0;
  sub_1008C4AE0(a1, a2, &v13);
  if (v12) {
    sub_10004D2C8(v12);
  }
  if (v13) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 424))(v13, a4, a5, a6, a7);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
}

void sub_1008D69E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1008D6A10(uint64_t a1, unsigned int a2)
{
  if (a2 > 1)
  {
    if (*(unsigned char *)(a1 + 168)) {
      return 0;
    }
    unsigned int v2 = 1;
  }
  else
  {
    unsigned int v2 = a2;
  }
  return *(unsigned char *)(a1 - 24 + 80 * v2 + 192) == 0;
}

uint64_t sub_1008D6A50(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return sub_1008D4614(a1 - 24, a2, a3);
}

BOOL sub_1008D6A58(uint64_t a1, int a2, uint64_t *a3)
{
  return sub_1008C7808(a1 - 8, a2, a3);
}

BOOL sub_1008D6A60(uint64_t a1, int a2, uint64_t *a3)
{
  return sub_1008C7808(a1 - 24, a2, a3);
}

BOOL sub_1008D6A68(uint64_t a1, unsigned int a2)
{
  if (a2 > 1)
  {
    BOOL result = 1;
    if (*(unsigned char *)(a1 + 209)) {
      return result;
    }
  }
  else
  {
    LODWORD(result) = a2;
  }
  return *(unsigned char *)(a1 - 24 + 80 * result + 233) != 0;
}

void sub_1008D6AA8(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v7 = *(std::__shared_weak_count **)(a3 + 8);
  v11[1] = *(const void **)a3;
  uint64_t v12 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = 0;
  int v14 = 0;
  sub_1008C4AE0(a1, a2, &v13);
  if (v12) {
    sub_10004D2C8(v12);
  }
  uint64_t v8 = *(void *)(a1 + 96);
  if (v8) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v8 + 240))(v8, a2);
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = v13;
  if (v13)
  {
    sub_100062740(v11, a4);
    (*(void (**)(uint64_t, const void **, uint64_t))(*(void *)v10 + 320))(v10, v11, v9);
    sub_100044D00(v11);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
}

void sub_1008D6BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(a1);
}

void sub_1008D6BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!a12) {
    JUMPOUT(0x1008D6BD8);
  }
  JUMPOUT(0x1008D6BD4);
}

void sub_1008D6BF0(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
}

uint64_t sub_1008D6BF8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  sub_1008C4848(a1, a2, &v7);
  if (v6) {
    sub_10004D2C8(v6);
  }
  if (v7) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(v7);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
  return v4;
}

void sub_1008D6C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008D6CC0(uint64_t a1, int a2, uint64_t a3)
{
  return sub_1008D6BF8(a1 - 24, a2, a3);
}

void sub_1008D6CC8(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a2
    || (uint64_t v10 = *(void *)(a1 + 96)) == 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 144))(v10) & 1) != 0)
  {
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    uint64_t v11 = *(std::__shared_weak_count **)(a3 + 8);
    uint64_t v16 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1008C4848(a1, a2, &v17);
    if (v16) {
      sub_10004D2C8(v16);
    }
    if (v17)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 224))(v17, a4);
    }
    else
    {
      uint64_t v12 = asString();
      *(_DWORD *)a5 = -9;
      uint64_t v13 = "";
      if (v12) {
        uint64_t v13 = (const char *)v12;
      }
      *(void *)(a5 + 8) = "Data not supported for this technology (activator)";
      *(void *)(a5 + 16) = v13;
      *(_DWORD *)(a5 + 24) = 0;
      *(unsigned char *)(a5 + 28) = 0;
      *(_DWORD *)(a5 + 32) = a2;
      *(void *)(a5 + 44) = 0;
      *(void *)(a5 + 36) = 0;
      *(_DWORD *)(a5 + 52) = 0;
    }
    if (v18) {
      sub_10004D2C8(v18);
    }
  }
  else
  {
    uint64_t v14 = asString();
    *(_DWORD *)a5 = 4;
    uint64_t v15 = "";
    if (v14) {
      uint64_t v15 = (const char *)v14;
    }
    *(void *)(a5 + 8) = "PDPActivator not ready";
    *(void *)(a5 + 16) = v15;
    *(_DWORD *)(a5 + 24) = 0;
    *(unsigned char *)(a5 + 28) = 0;
    *(void *)(a5 + 40) = 0;
    *(void *)(a5 + 48) = 0;
    *(void *)(a5 + 32) = 0;
  }
}

void sub_1008D6E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008D6E70(uint64_t a1, void *a2)
{
  if (!*a2 || *a2 == *(void *)(a1 + 144)) {
    return *(unsigned int *)(a1 + 184);
  }
  else {
    return 2;
  }
}

uint64_t sub_1008D6E94(uint64_t a1, void *a2)
{
  if (!*a2 || *a2 == *(void *)(a1 + 120)) {
    return *(unsigned int *)(a1 + 160);
  }
  else {
    return 2;
  }
}

uint64_t sub_1008D6EB8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 168);
}

uint64_t sub_1008D6EC0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

BOOL sub_1008D6EC8(uint64_t a1)
{
  return *(void *)(a1 + 144)
      || *(void *)(a1 + 160)
      || *(unsigned char *)(a1 + 192)
      || *(unsigned char *)(a1 + 272)
      || (validContextType() & 1) != 0
      || (sub_1008D6F70((void *)a1, 0) & 1) != 0
      || *(void *)(a1 + 176)
      || *(unsigned char *)(a1 + 352)
      || (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 112) + 240))(*(void *)(a1 + 112), 3) != 0;
}

uint64_t sub_1008D6F70(void *a1, char a2)
{
  uint64_t v2 = a1[17];
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v31 = *(void *)(v2 + 16);
  if (v3 == v31) {
    return 0;
  }
  do
  {
    uint64_t v6 = *(void *)(v3 + 56);
    uint64_t v5 = *(std::__shared_weak_count **)(v3 + 64);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = 0;
    while (1)
    {
      int v8 = dword_101506340[v7];
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v34 = v6;
      char v35 = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1008C4848((uint64_t)a1, v8, &v36);
      if (v35) {
        sub_10004D2C8(v35);
      }
      uint64_t v9 = v36;
      if (!v36 || ((*(uint64_t (**)(uint64_t))(*(void *)v36 + 216))(v36) & 1) != 0)
      {
        int v10 = 3;
        goto LABEL_42;
      }
      uint64_t v11 = &a1[10 * v8];
      int v13 = *((unsigned __int8 *)v11 + 192);
      uint64_t v12 = v11 + 24;
      if (v13
        && !LOBYTE(a1[10 * v8 + 28])
        && !LOBYTE(a1[10 * v8 + 29])
        && (!(*(unsigned int (**)(uint64_t))(*(void *)v9 + 536))(v9)
         || ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 496))(v9) & 1) == 0))
      {
        uint64_t v20 = a1[9];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = asString();
          *(_DWORD *)long long buf = 136315394;
          __int16 v39 = "isInUnstableState";
          __int16 v40 = 2080;
          uint64_t v41 = v21;
          uint64_t v17 = v20;
          unsigned int v18 = "#I %s: Unstable while in Activating for %s";
          goto LABEL_32;
        }
LABEL_19:
        int v10 = 1;
        goto LABEL_42;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 184))(v9))
      {
        uint64_t v14 = a1[9];
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_19;
        }
        uint64_t v15 = asString();
        int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 184))(v9);
        *(_DWORD *)long long buf = 136315650;
        __int16 v39 = "isInUnstableState";
        __int16 v40 = 2080;
        uint64_t v41 = v15;
        __int16 v42 = 1024;
        int v43 = v16;
        uint64_t v17 = v14;
        unsigned int v18 = "#I %s: Unstable while in transitional state for %s, mask 0x%x";
        uint32_t v19 = 28;
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v19);
        goto LABEL_19;
      }
      if (*v12 && (LOBYTE(a1[10 * v8 + 28]) || LOBYTE(a1[10 * v8 + 29])) && (a2 & 1) == 0 && a1[22])
      {
        char v22 = a1[9];
        if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_19;
        }
        uint64_t v23 = asString();
        *(_DWORD *)long long buf = 136315394;
        __int16 v39 = "isInUnstableState";
        __int16 v40 = 2080;
        uint64_t v41 = v23;
        uint64_t v17 = v22;
        unsigned int v18 = "#I %s: Unstable while just came into active state for %s";
LABEL_32:
        uint32_t v19 = 22;
        goto LABEL_18;
      }
      char v33 = 0;
      int v24 = sub_1008CBCAC((uint64_t)a1, v8, &v33);
      if (v33) {
        int v25 = 0;
      }
      else {
        int v25 = v24;
      }
      if (v25 == 1
        && (!(*(unsigned int (**)(uint64_t))(*(void *)v9 + 536))(v9)
         || ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 496))(v9) & 1) == 0))
      {
        unsigned int v26 = a1[9];
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = asString();
          *(_DWORD *)long long buf = 136315394;
          __int16 v39 = "isInUnstableState";
          __int16 v40 = 2080;
          uint64_t v41 = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I %s: Unstable while in handover for %s", buf, 0x16u);
        }
      }
      int v10 = 0;
LABEL_42:
      if (v37) {
        sub_10004D2C8(v37);
      }
      if (v10 != 3 && v10) {
        break;
      }
      if (++v7 == 2)
      {
        uint64_t v28 = 0;
        if (!v5) {
          goto LABEL_49;
        }
LABEL_48:
        sub_10004D2C8(v5);
        goto LABEL_49;
      }
    }
    uint64_t v28 = 1;
    if (v5) {
      goto LABEL_48;
    }
LABEL_49:
    v3 += 72;
    if (v3 == v31) {
      char v29 = 1;
    }
    else {
      char v29 = v28;
    }
  }
  while ((v29 & 1) == 0);
  return v28;
}

void sub_1008D745C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_10004D2C8(a20);
  }
  if (v20) {
    sub_10004D2C8(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D7494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18) {
    JUMPOUT(0x1008D7480);
  }
  JUMPOUT(0x1008D747CLL);
}

BOOL sub_1008D74A4(uint64_t a1, int a2, uint64_t a3)
{
  return ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1) & 1) != 0
      || (*(void *)(a1 + 368) & a3) == 0
      || *(_DWORD *)(a1 + 360) != a2;
}

uint64_t sub_1008D751C(uint64_t a1, char a2)
{
  return sub_1008D6F70((void *)(a1 - 24), a2);
}

void sub_1008D7524(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v4 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_1008C4848(a1, a2, &v5);
  if (v4) {
    sub_10004D2C8(v4);
  }
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 328))(v5);
  }
  if (v6) {
    sub_10004D2C8(v6);
  }
}

void sub_1008D75BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D75E4(uint64_t a1, int a2, uint64_t a3)
{
}

uint64_t sub_1008D75EC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(std::__shared_weak_count **)(a4 + 8);
  int v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_1008C4AE0(a1, a2, &v11);
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (v11) {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 368))(v11, a3, a5);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
  return v8;
}

void sub_1008D76A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008D76CC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1008D75EC(a1 - 24, a2, a3, a4, a5);
}

uint64_t sub_1008D76D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(std::__shared_weak_count **)(a4 + 8);
  int v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_1008C4848(a1, a2, &v11);
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (v11) {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 376))(v11, a3, a5);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
  return v8;
}

void sub_1008D778C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008D77B4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1008D76D4(a1 - 24, a2, a3, a4, a5);
}

uint64_t sub_1008D77BC(void *a1, int a2, uint64_t *a3, int a4, int a5)
{
  if (!(*(unsigned int (**)(void *))(*a1 + 584))(a1)) {
    goto LABEL_12;
  }
  (*(void (**)(long long *__return_ptr, void *))(*a1 + 576))(&v35, a1);
  char matched = DataUtils::matchPersonality();
  if (*((void *)&v35 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v35 + 1));
  }
  if ((matched & 1) == 0)
  {
LABEL_12:
    LOBYTE(a5) = 0;
    return a5 & 1;
  }
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v38 = *a3;
  __int16 v39 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1008C4AE0((uint64_t)a1, a2, &v40);
  if (v39) {
    sub_10004D2C8(v39);
  }
  uint64_t v12 = v40;
  if (v40)
  {
    int v13 = &a1[10 * a2];
    memset(v37, 0, sizeof(v37));
    long long v14 = *((_OWORD *)v13 + 13);
    long long v35 = *((_OWORD *)v13 + 12);
    *(_OWORD *)uint64_t v36 = v14;
    *(_OWORD *)&v36[10] = *(_OWORD *)((char *)v13 + 218);
    uint64_t v15 = (void **)(v13 + 30);
    if (*((char *)v13 + 263) < 0)
    {
      sub_10004FC84(&v37[3], *v15, a1[10 * a2 + 31]);
    }
    else
    {
      *(_OWORD *)&v37[3] = *(_OWORD *)v15;
      *(void *)&v37[11] = v13[32];
    }
    uint64_t v17 = &a1[10 * a2];
    LOBYTE(v37[15]) = *((unsigned char *)v17 + 264);
    if (v36[25])
    {
      unsigned int v18 = a1[9];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = asString();
        *(_DWORD *)long long buf = 136315394;
        int v43 = "suspendDataContext";
        __int16 v44 = 2080;
        uint64_t v45 = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s: Cannot suspend deactivating data context %s", buf, 0x16u);
      }
      goto LABEL_50;
    }
    uint64_t v21 = a1[18];
    uint64_t v20 = (std::__shared_weak_count *)a1[19];
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v29 = v20;
    if (!v21) {
      goto LABEL_62;
    }
    if ((*(unsigned int (**)(uint64_t, void))(*(void *)v21 + 88))(v21, 0))
    {
      char v22 = a1[9];
      char v23 = 0;
      LOBYTE(a5) = 0;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_47;
      }
      *(_DWORD *)long long buf = 136315138;
      int v43 = "suspendDataContext";
      int v24 = "#I %s: Emergency PDN should not be suspended";
      goto LABEL_27;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v21 + 136))(v21))
    {
      char v22 = a1[9];
      char v23 = 0;
      LOBYTE(a5) = 0;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_47;
      }
      *(_DWORD *)long long buf = 136315138;
      int v43 = "suspendDataContext";
      int v24 = "#I %s: PDN is configured to ignore suspension";
      goto LABEL_27;
    }
    if ((dataContextSuspendMask() & a4) != 0
      && ((*(uint64_t (**)(uint64_t))(*(void *)v21 + 144))(v21) & 1) == 0
      && (a4 &= ~dataContextSuspendMask()) == 0)
    {
      char v22 = a1[9];
      char v23 = 0;
      LOBYTE(a5) = 0;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        int v43 = "suspendDataContext";
        int v24 = "#I %s: PDN is not configured to utilize BBCall suspension";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v24, buf, 0xCu);
        char v23 = 0;
        LOBYTE(a5) = 0;
      }
    }
    else
    {
LABEL_62:
      if (!*(_DWORD *)&v36[20])
      {
        if ((_BYTE)v35)
        {
          int v25 = a1[9];
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315138;
            int v43 = "suspendDataContext";
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I %s: looks like we are really suspending the context", buf, 0xCu);
          }
        }
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 408))(v12))
      {
        long long v26 = *((_OWORD *)v13 + 13);
        long long v35 = *((_OWORD *)v13 + 12);
        *(_OWORD *)uint64_t v36 = v26;
        *(_OWORD *)&v36[10] = *(_OWORD *)((char *)v13 + 218);
        std::string::operator=((std::string *)&v37[3], (const std::string *)v13 + 10);
        char v27 = *((unsigned char *)v17 + 264);
        LOBYTE(v37[15]) = v27;
        if (*(_DWORD *)&v36[20] != (*(_DWORD *)&v36[20] | a4))
        {
          *(_DWORD *)&v36[20] |= a4;
          if ((_BYTE)v35)
          {
            long long v30 = v35;
            v31[0] = *(_OWORD *)v36;
            *(_OWORD *)((char *)v31 + 10) = *(_OWORD *)&v36[10];
            if (SHIBYTE(v37[14]) < 0)
            {
              sub_10004FC84(&__p, *(void **)&v37[3], *(unint64_t *)&v37[7]);
              char v27 = v37[15];
            }
            else
            {
              long long __p = *(_OWORD *)&v37[3];
              uint64_t v33 = *(void *)&v37[11];
            }
            char v34 = v27;
            sub_1008CC2E4((uint64_t)a1, a2, &v30, 0);
            if (SHIBYTE(v33) < 0) {
              operator delete((void *)__p);
            }
            if (a5) {
              sub_1008C6CAC((uint64_t)a1, 6, 0, 0, 0);
            }
          }
        }
        char v23 = 0;
        LOBYTE(a5) = 1;
      }
      else
      {
        char v23 = 1;
      }
    }
LABEL_47:
    if (v29) {
      sub_10004D2C8(v29);
    }
    if ((v23 & 1) == 0)
    {
      char v28 = 0;
LABEL_51:
      if (SHIBYTE(v37[14]) < 0) {
        operator delete(*(void **)&v37[3]);
      }
      if ((v28 & 1) == 0) {
        goto LABEL_55;
      }
      goto LABEL_54;
    }
LABEL_50:
    char v28 = 1;
    goto LABEL_51;
  }
LABEL_54:
  LOBYTE(a5) = 0;
LABEL_55:
  if (v41) {
    sub_10004D2C8(v41);
  }
  return a5 & 1;
}

void sub_1008D7D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v35 - 136);
  if (v37) {
    sub_10004D2C8(v37);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008D7E0C(uint64_t a1, int a2, uint64_t *a3, int a4, int a5)
{
  return sub_1008D77BC((void *)(a1 - 24), a2, a3, a4, a5);
}

void sub_1008D7E14(void *a1, int a2, uint64_t *a3, int a4)
{
  if ((*(unsigned int (**)(void *))(*a1 + 584))(a1))
  {
    (*(void (**)(long long *__return_ptr, void *))(*a1 + 576))(&v34, a1);
    char matched = DataUtils::matchPersonality();
    if (*((void *)&v34 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v34 + 1));
    }
    if (matched)
    {
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      uint64_t v9 = (std::__shared_weak_count *)a3[1];
      uint64_t v37 = *a3;
      uint64_t v38 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1008C4AE0((uint64_t)a1, a2, &v39);
      if (v38) {
        sub_10004D2C8(v38);
      }
      uint64_t v10 = v39;
      if (!v39) {
        goto LABEL_38;
      }
      uint64_t v11 = &a1[10 * a2];
      memset(v36, 0, sizeof(v36));
      long long v12 = *((_OWORD *)v11 + 13);
      long long v34 = *((_OWORD *)v11 + 12);
      *(_OWORD *)uint64_t v35 = v12;
      *(_OWORD *)&v35[10] = *(_OWORD *)((char *)v11 + 218);
      int v13 = (void **)(v11 + 30);
      if (*((char *)v11 + 263) < 0)
      {
        sub_10004FC84(&v36[3], *v13, a1[10 * a2 + 31]);
      }
      else
      {
        *(_OWORD *)&v36[3] = *(_OWORD *)v13;
        *(void *)&v36[11] = v11[32];
      }
      long long v14 = &a1[10 * a2];
      LOBYTE(v36[15]) = *((unsigned char *)v14 + 264);
      if (v35[25])
      {
        uint64_t v15 = a1[9];
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = asString();
          *(_DWORD *)long long buf = 136315394;
          __int16 v42 = "resumeDataContext";
          __int16 v43 = 2080;
          *(void *)__int16 v44 = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#N %s: Cannot resume deactivating data context %s", buf, 0x16u);
        }
      }
      else
      {
        int v17 = *(_DWORD *)&v35[20];
        int v18 = *(_DWORD *)&v35[20] & a4;
        if ((*(_DWORD *)&v35[20] & a4) != 0)
        {
          uint64_t v19 = a1[9];
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315906;
            __int16 v42 = "resumeDataContext";
            __int16 v43 = 1024;
            *(_DWORD *)__int16 v44 = v17;
            *(_WORD *)&v44[4] = 1024;
            *(_DWORD *)&v44[6] = a4;
            __int16 v45 = 1024;
            int v46 = v18;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I %s: Cannot resume data context: current mask %d, requested mask %d, newMask %d", buf, 0x1Eu);
          }
          *(_DWORD *)&v35[20] = v18;
          if (!(_BYTE)v34) {
            goto LABEL_36;
          }
          long long v24 = v34;
          v25[0] = *(_OWORD *)v35;
          *(_OWORD *)((char *)v25 + 10) = *(_OWORD *)&v35[10];
          if (SHIBYTE(v36[14]) < 0)
          {
            sub_10004FC84(&v26, *(void **)&v36[3], *(unint64_t *)&v36[7]);
          }
          else
          {
            long long v26 = *(_OWORD *)&v36[3];
            uint64_t v27 = *(void *)&v36[11];
          }
          char v28 = v36[15];
          sub_1008CC2E4((uint64_t)a1, a2, &v24, 0);
          if ((SHIBYTE(v27) & 0x80000000) == 0) {
            goto LABEL_36;
          }
          char v23 = (void *)v26;
        }
        else
        {
          if (*(_DWORD *)&v35[20])
          {
            uint64_t v20 = a1[9];
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              __int16 v42 = "resumeDataContext";
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s: looks like we are really resuming the context", buf, 0xCu);
            }
          }
          (*(void (**)(uint64_t))(*(void *)v10 + 416))(v10);
          long long v21 = *((_OWORD *)v11 + 13);
          long long v34 = *((_OWORD *)v11 + 12);
          *(_OWORD *)uint64_t v35 = v21;
          *(_OWORD *)&v35[10] = *(_OWORD *)((char *)v11 + 218);
          std::string::operator=((std::string *)&v36[3], (const std::string *)v11 + 10);
          char v22 = *((unsigned char *)v14 + 264);
          LOBYTE(v36[15]) = v22;
          if (!*(_DWORD *)&v35[20]) {
            goto LABEL_36;
          }
          *(_DWORD *)&v35[20] = 0;
          if (!(_BYTE)v34) {
            goto LABEL_36;
          }
          long long v29 = v34;
          v30[0] = *(_OWORD *)v35;
          *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)&v35[10];
          if (SHIBYTE(v36[14]) < 0)
          {
            sub_10004FC84(&__p, *(void **)&v36[3], *(unint64_t *)&v36[7]);
            char v22 = v36[15];
          }
          else
          {
            long long __p = *(_OWORD *)&v36[3];
            uint64_t v32 = *(void *)&v36[11];
          }
          char v33 = v22;
          sub_1008CC2E4((uint64_t)a1, a2, &v29, 0);
          if ((SHIBYTE(v32) & 0x80000000) == 0) {
            goto LABEL_36;
          }
          char v23 = (void *)__p;
        }
        operator delete(v23);
      }
LABEL_36:
      if (SHIBYTE(v36[14]) < 0) {
        operator delete(*(void **)&v36[3]);
      }
LABEL_38:
      if (v40) {
        sub_10004D2C8(v40);
      }
    }
  }
}

void sub_1008D828C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  uint64_t v48 = *(std::__shared_weak_count **)(v46 - 152);
  if (v48) {
    sub_10004D2C8(v48);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D8314(uint64_t a1, int a2, uint64_t *a3, int a4)
{
}

void sub_1008D831C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void **)(v5 + 8);
  uint64_t v7 = *(void **)(v5 + 16);
  if (v6 != v7)
  {
    while (1)
    {
      uint64_t v10 = (void *)*v6;
      if ((void *)*v6 != v6 + 1) {
        break;
      }
LABEL_20:
      v6 += 9;
      if (v6 == v7) {
        goto LABEL_21;
      }
    }
    while (1)
    {
      uint64_t v12 = v10[4];
      uint64_t v11 = (std::__shared_weak_count *)v10[5];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v12
        && !(*(unsigned int (**)(uint64_t))(*(void *)v12 + 56))(v12)
        && ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 216))(v12) & 1) == 0)
      {
        break;
      }
      char v13 = 1;
      if (v11) {
        goto LABEL_9;
      }
LABEL_10:
      if ((v13 & 1) == 0) {
        return;
      }
      long long v14 = (void *)v10[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v10[2];
          BOOL v16 = *v15 == (void)v10;
          uint64_t v10 = v15;
        }
        while (!v16);
      }
      uint64_t v10 = v15;
      if (v15 == v6 + 1) {
        goto LABEL_20;
      }
    }
    sub_1000DFC90((uint64_t)v17, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v12 + 576))(v12, a2, a3, v17);
    sub_100060644(v17);
    char v13 = 0;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_9:
    sub_10004D2C8(v11);
    goto LABEL_10;
  }
LABEL_21:
  sub_1000607A8(a4, 0);
}

void sub_1008D84EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1008D851C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void **)(v5 + 8);
  uint64_t v7 = *(void **)(v5 + 16);
  if (v6 != v7)
  {
    while (1)
    {
      uint64_t v10 = (void *)*v6;
      if ((void *)*v6 != v6 + 1) {
        break;
      }
LABEL_20:
      v6 += 9;
      if (v6 == v7) {
        goto LABEL_21;
      }
    }
    while (1)
    {
      uint64_t v12 = v10[4];
      uint64_t v11 = (std::__shared_weak_count *)v10[5];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v12
        && !(*(unsigned int (**)(uint64_t))(*(void *)v12 + 56))(v12)
        && ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 216))(v12) & 1) == 0)
      {
        break;
      }
      char v13 = 1;
      if (v11) {
        goto LABEL_9;
      }
LABEL_10:
      if ((v13 & 1) == 0) {
        return;
      }
      long long v14 = (void *)v10[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          long long v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v10[2];
          BOOL v16 = *v15 == (void)v10;
          uint64_t v10 = v15;
        }
        while (!v16);
      }
      uint64_t v10 = v15;
      if (v15 == v6 + 1) {
        goto LABEL_20;
      }
    }
    sub_1000DFC90((uint64_t)v17, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v12 + 584))(v12, a2, a3, v17);
    sub_100060644(v17);
    char v13 = 0;
    if (!v11) {
      goto LABEL_10;
    }
LABEL_9:
    sub_10004D2C8(v11);
    goto LABEL_10;
  }
LABEL_21:
  sub_1000607A8(a4, 0);
}

void sub_1008D86EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1008D871C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v5 = *(void **)(v4 + 8);
  uint64_t v6 = *(void **)(v4 + 16);
  if (v5 != v6)
  {
    while (1)
    {
      uint64_t v8 = (void *)*v5;
      if ((void *)*v5 != v5 + 1) {
        break;
      }
LABEL_20:
      v5 += 9;
      if (v5 == v6) {
        goto LABEL_21;
      }
    }
    while (1)
    {
      uint64_t v10 = v8[4];
      uint64_t v9 = (std::__shared_weak_count *)v8[5];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v10
        && !(*(unsigned int (**)(uint64_t))(*(void *)v10 + 56))(v10)
        && ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 216))(v10) & 1) == 0)
      {
        break;
      }
      char v11 = 1;
      if (v9) {
        goto LABEL_9;
      }
LABEL_10:
      if ((v11 & 1) == 0) {
        return;
      }
      uint64_t v12 = (void *)v8[1];
      if (v12)
      {
        do
        {
          char v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          char v13 = (void *)v8[2];
          BOOL v14 = *v13 == (void)v8;
          uint64_t v8 = v13;
        }
        while (!v14);
      }
      uint64_t v8 = v13;
      if (v13 == v5 + 1) {
        goto LABEL_20;
      }
    }
    sub_1008DC004((uint64_t)v18, a3);
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 592))(v10, a2, v18);
    sub_100523F74(v18);
    char v11 = 0;
    if (!v9) {
      goto LABEL_10;
    }
LABEL_9:
    sub_10004D2C8(v9);
    goto LABEL_10;
  }
LABEL_21:
  memset(v16, 0, sizeof(v16));
  uint64_t v15 = *(void *)(a3 + 24);
  if (!v15) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v15 + 48))(v15, v16);
  int v17 = (void **)v16;
  sub_100523284(&v17);
}

void sub_1008D8928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  sub_100523284(&a13);
  _Unwind_Resume(a1);
}

void sub_1008D8968(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 || *(unsigned char *)(*(void *)a3 + 49) || *(unsigned char *)(a1 + 192))
  {
    uint64_t v4 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I skip context release", buf, 2u);
    }
    return;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)*(unsigned __int8 *)(a1 + 192), *(Registry **)(a1 + 80));
  uint64_t v6 = ServiceMap;
  if (v7 < 0)
  {
    uint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v7;
  char v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
  if (!v11)
  {
    uint64_t v13 = 0;
    goto LABEL_14;
  }
  uint64_t v13 = v11[3];
  uint64_t v12 = (std::__shared_weak_count *)v11[4];
  if (!v12)
  {
LABEL_14:
    std::mutex::unlock(v6);
    uint64_t v12 = 0;
    char v14 = 1;
    goto LABEL_15;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v6);
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v12);
  char v14 = 0;
LABEL_15:
  if (v13)
  {
    *(void *)long long buf = 0;
    long long v21 = 0;
    uint64_t v15 = DataUtils::otherSimSlot();
    (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 8))(buf, v13, v15);
    if (*(void *)buf)
    {
      *(_OWORD *)char v22 = 0uLL;
      uint64_t v19 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1008C4848(a1, 0, v22);
      if (v19) {
        sub_10004D2C8(v19);
      }
      if (*(void *)v22) {
        (*(void (**)(void))(**(void **)v22 + 432))(*(void *)v22);
      }
      if (*(void *)&v22[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&v22[8]);
      }
    }
    else
    {
      int v17 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = subscriber::asString();
        *(_DWORD *)char v22 = 136315138;
        *(void *)&void v22[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I No other sim personality exist for %s", v22, 0xCu);
      }
    }
    if (v21) {
      sub_10004D2C8(v21);
    }
  }
  else
  {
    BOOL v16 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "No Personality Shop !", buf, 2u);
    }
  }
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
}

void sub_1008D8C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D8CA0(uint64_t a1, int a2, uint64_t a3)
{
}

unint64_t sub_1008D8CA8(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  return sub_1008C8C20(a1 - 24, a2, a3, a4, a5);
}

uint64_t sub_1008D8CC8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1008C9BA8(a1 - 16, a2, a3, a4, a5);
}

uint64_t sub_1008D8CD0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1008C9BA8(a1 - 24, a2, a3, a4, a5);
}

void sub_1008D8CD8(void *a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v3 = *a2;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1008D0954(a1, &v3);
  if (v4) {
    sub_10004D2C8(v4);
  }
}

void sub_1008D8D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D8D40(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_1008D8D48(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 112);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 224))();
  }
  return result;
}

uint64_t sub_1008D8D78(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 104);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 224))();
  }
  return result;
}

void sub_1008D8DA8(void *a1, int a2, void *a3, BOOL a4, BOOL a5, BOOL a6, int a7)
{
  uint64_t v13 = a1[9];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136316674;
    uint64_t v39 = "handlePacketContextCellChanged";
    __int16 v40 = 2080;
    uint64_t v41 = subscriber::asString();
    __int16 v42 = 1024;
    *(_DWORD *)__int16 v43 = a2;
    *(_WORD *)&v43[4] = 2080;
    *(void *)&v43[6] = asStringBool(a5);
    *(_WORD *)&v43[14] = 2080;
    *(void *)&v43[16] = asStringBool(a6);
    __int16 v44 = 2080;
    uint64_t v45 = asString();
    __int16 v46 = 2080;
    uint64_t v47 = asStringBool(a4);
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I %s: %s: xpc_type_t type = %d isInHomeCountry = %s isDataRoamingAllowed = %s dataMode = %s dataAllowed = %s", buf, 0x44u);
  }
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  char v14 = (std::__shared_weak_count *)a3[1];
  v34[2] = *a3;
  uint64_t v35 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1008C4AE0((uint64_t)a1, 0, &v36);
  if (v35) {
    sub_10004D2C8(v35);
  }
  uint64_t v15 = a1[18];
  BOOL v16 = (std::__shared_weak_count *)a1[19];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = v36;
  if (v36)
  {
    if (a2 != 1)
    {
      if (a2 || a4) {
        goto LABEL_32;
      }
      int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 56))(v36);
      uint64_t v19 = *a3;
      uint64_t v20 = (std::__shared_weak_count *)a3[1];
      v34[0] = v19;
      v34[1] = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1008C9BA8((uint64_t)a1, v18, (uint64_t)v34, 4, (uint64_t)"CommCenter");
      goto LABEL_30;
    }
    if (!v15) {
      goto LABEL_32;
    }
    if (!a4)
    {
      int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 56))(v36);
      uint64_t v26 = *a3;
      uint64_t v20 = (std::__shared_weak_count *)a3[1];
      v33[0] = v26;
      v33[1] = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1008C9BA8((uint64_t)a1, v25, (uint64_t)v33, 4, (uint64_t)"CommCenter");
      goto LABEL_30;
    }
    if (a5 || !(*(unsigned int (**)(uint64_t, void, BOOL))(*(void *)v15 + 512))(v15, 0, a6)) {
      goto LABEL_32;
    }
    if (a7 != 10 || (*(unsigned int (**)(uint64_t))(*(void *)v17 + 656))(v17) == 10)
    {
      long long v21 = a1[9];
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = subscriber::asString();
        *(_DWORD *)long long buf = 136315394;
        uint64_t v39 = "handlePacketContextCellChanged";
        __int16 v40 = 2080;
        uint64_t v41 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I %s: %s: International roaming contradicts current connections", buf, 0x16u);
      }
      int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 56))(v17);
      uint64_t v24 = *a3;
      uint64_t v20 = (std::__shared_weak_count *)a3[1];
      v32[0] = v24;
      v32[1] = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_1008C9BA8((uint64_t)a1, v23, (uint64_t)v32, 7, (uint64_t)"CommCenter");
LABEL_30:
      if (v20) {
        sub_10004D2C8(v20);
      }
      goto LABEL_32;
    }
    uint64_t v27 = a1[9];
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = subscriber::asString();
      uint64_t v29 = asString();
      (*(void (**)(uint64_t))(*(void *)v17 + 656))(v17);
      uint64_t v30 = asString();
      *(_DWORD *)long long buf = 136315906;
      uint64_t v39 = "handlePacketContextCellChanged";
      __int16 v40 = 2080;
      uint64_t v41 = v28;
      __int16 v42 = 2080;
      *(void *)__int16 v43 = v29;
      *(_WORD *)&v43[8] = 2080;
      *(void *)&v43[10] = v30;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I %s: %s: International roaming contradicts current connections but data mode doesn't match %s != %s", buf, 0x2Au);
    }
  }
LABEL_32:
  if (v16) {
    sub_10004D2C8(v16);
  }
  if (v37) {
    sub_10004D2C8(v37);
  }
}

void sub_1008D927C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (v20) {
    sub_10004D2C8(v20);
  }
  if (a20) {
    sub_10004D2C8(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D92D8(uint64_t a1, int a2, uint64_t a3, BOOL a4, uint64_t a5)
{
  unsigned int v10 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136316162;
    int v18 = "enableOutgoingTraffic";
    __int16 v19 = 2080;
    uint64_t v20 = asString();
    __int16 v21 = 2080;
    uint64_t v22 = subscriber::asString();
    __int16 v23 = 2080;
    uint64_t v24 = asStringBool(a4);
    __int16 v25 = 1024;
    int v26 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s: ct = %s, slot = %s, enable = %s, reason = %d", buf, 0x30u);
  }
  uint64_t v15 = 0;
  BOOL v16 = 0;
  char v11 = *(std::__shared_weak_count **)(a3 + 8);
  char v14 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1008C4AE0(a1, a2, &v15);
  if (v14) {
    sub_10004D2C8(v14);
  }
  if (v15)
  {
    (*(void (**)(uint64_t, BOOL, uint64_t))(*(void *)v15 + 520))(v15, a4, a5);
  }
  else
  {
    uint64_t v12 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = asString();
      *(_DWORD *)long long buf = 136315394;
      int v18 = "enableOutgoingTraffic";
      __int16 v19 = 2080;
      uint64_t v20 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I %s: ct = %s: context missed", buf, 0x16u);
    }
  }
  if (v16) {
    sub_10004D2C8(v16);
  }
}

void sub_1008D94DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D9508(void *a1, const CSIPacketAddress *a2)
{
  uint64_t v4 = a1[9];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CSIPacketAddress::operator std::string();
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "ipv6ServiceUp";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: addr = %s", buf, 0x16u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  memset(buf, 0, sizeof(buf));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)buf, a2);
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)__p, (const CSIPacketAddress *)buf);
  uint64_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    uint64_t v7 = (std::__shared_weak_count *)a1[5];
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      v12[0] = v7;
      v12[1] = v8;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
      uint64_t v9 = (std::__shared_weak_count *)a1[6];
      if (v9)
      {
        if (std::__shared_weak_count::lock(v9)) {
          operator new();
        }
      }
      sub_100088B9C();
    }
  }
  sub_100088B9C();
}

void sub_1008D971C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1008D9730(uint64_t a1, const CSIPacketAddress *a2)
{
}

void sub_1008D9738(uint64_t a1, const CSIPacketAddress *a2)
{
}

void sub_1008D9740(void *a1, const CSIPacketAddress *a2)
{
  uint64_t v4 = a1[9];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CSIPacketAddress::operator std::string();
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "ipv4ServiceUp";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: addr = %s", buf, 0x16u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  memset(buf, 0, sizeof(buf));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)buf, a2);
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)__p, (const CSIPacketAddress *)buf);
  uint64_t v6 = (std::__shared_weak_count *)a1[6];
  if (v6)
  {
    uint64_t v7 = (std::__shared_weak_count *)a1[5];
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      v12[0] = v7;
      v12[1] = v8;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
      uint64_t v9 = (std::__shared_weak_count *)a1[6];
      if (v9)
      {
        if (std::__shared_weak_count::lock(v9)) {
          operator new();
        }
      }
      sub_100088B9C();
    }
  }
  sub_100088B9C();
}

void sub_1008D9954(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1008D9968(uint64_t a1, const CSIPacketAddress *a2)
{
}

void sub_1008D9970(uint64_t a1, const CSIPacketAddress *a2)
{
}

uint64_t sub_1008D9978(uint64_t a1)
{
  unint64_t v1 = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a1 + 568))(a1, 0, 0, 0);

  return isSliceMask(v1);
}

uint64_t sub_1008D99D4(uint64_t a1)
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 - 32) + 568))();

  return isSliceMask(v1);
}

void sub_1008D9A30(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(v2 + 8);
  for (uint64_t i = *(void *)(v2 + 16); v3 != i; v3 += 72)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    uint64_t v7 = *(std::__shared_weak_count **)(v3 + 64);
    uint64_t v8 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1008C4848(a1, a2, &v9);
    if (v8) {
      sub_10004D2C8(v8);
    }
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 456))(v9);
    }
    if (v10) {
      sub_10004D2C8(v10);
    }
  }
}

void sub_1008D9B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008D9B34(void *a1, uint64_t a2)
{
  sub_1008D9C58((uint64_t)a1, a2, 1, 0);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  _DWORD v8[2] = sub_1008DA220;
  void v8[3] = &unk_101A17338;
  v8[4] = a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3 || (uint64_t v4 = a1[5], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  uint64_t v7 = a1[7];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_1008DBFC8;
  block[3] = &unk_101A17588;
  block[5] = v4;
  unsigned int v10 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v8;
  dispatch_async(v7, block);
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_10004D2C8(v6);
}

void sub_1008D9C58(uint64_t a1, uint64_t a2, int a3, BOOL a4)
{
  if ((int)a2 <= 1)
  {
    uint64_t v7 = a1 + 80 * (int)a2;
    int v10 = *(unsigned __int8 *)(v7 + 232);
    uint64_t v9 = (unsigned char *)(v7 + 232);
    int v8 = v10;
    if (v10 != a3)
    {
      int v12 = a2;
      uint64_t v13 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = asStringBool(v8 != 0);
        uint64_t v35 = asStringBool(a3);
        uint64_t v14 = asString();
        uint64_t v15 = asStringBool(a4);
        uint64_t v16 = asStringBool(*(unsigned char *)(a1 + 80 * v12 + 216));
        *(_DWORD *)long long buf = 136316418;
        *(void *)&uint8_t buf[4] = "setProbation";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = v36;
        *(_WORD *)&unsigned char buf[22] = 2080;
        *(void *)&uint8_t buf[24] = v35;
        *(_WORD *)&unsigned char buf[32] = 2080;
        *(void *)&buf[34] = v14;
        *(_WORD *)&buf[42] = 2080;
        *(void *)&buf[44] = v15;
        *(_WORD *)&buf[52] = 2080;
        *(void *)&buf[54] = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I %s: (change states) %s->%s (for %s, ac=%s, ho %s)", buf, 0x3Eu);
      }
      *uint64_t v9 = a3;
      if (a4 && (a3 & 1) == 0 && *(v9 - 40) && !*(unsigned char *)(a1 + 80 * v12 + 224) && a2 <= 1)
      {
        uint64_t v17 = a1 + 80 * a2;
        memset(&buf[42], 0, 38);
        long long v18 = *(_OWORD *)(v17 + 208);
        *(_OWORD *)long long buf = *(_OWORD *)(v17 + 192);
        *(_OWORD *)&uint8_t buf[16] = v18;
        *(_OWORD *)&buf[26] = *(_OWORD *)(v17 + 218);
        __int16 v19 = (void **)(v17 + 240);
        if (*(char *)(v17 + 263) < 0)
        {
          sub_10004FC84(&buf[48], *v19, *(void *)(a1 + 80 * a2 + 248));
        }
        else
        {
          *(_OWORD *)&buf[48] = *(_OWORD *)v19;
          *(void *)&uint8_t buf[64] = *(void *)(v17 + 256);
        }
        buf[72] = *(unsigned char *)(a1 + 80 * a2 + 264);
        if (!buf[0])
        {
          uint64_t v20 = *(NSObject **)(a1 + 72);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int16 v42 = 136315394;
            *(void *)&v42[4] = "activationCompleted";
            *(_WORD *)&v42[12] = 2080;
            *(void *)&v42[14] = asString();
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#E %s: (change states) strange activator state: inactive ?! %s", v42, 0x16u);
          }
          buf[0] = 1;
        }
        if (*(_DWORD *)(a1 + 184) != a2)
        {
          __int16 v21 = *(NSObject **)(a1 + 72);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = asString();
            uint64_t v23 = asString();
            *(_DWORD *)__int16 v42 = 136315650;
            *(void *)&v42[4] = "activationCompleted";
            *(_WORD *)&v42[12] = 2080;
            *(void *)&v42[14] = v22;
            *(_WORD *)&v42[22] = 2080;
            *(void *)&v42[24] = v23;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#E %s: !!! (change states) strange activator 'active settings' state: %s, must be %s", v42, 0x20u);
          }
          if (!*(unsigned char *)(a1 + 80 * a2 + 233)) {
            *(_DWORD *)(a1 + 184) = a2;
          }
        }
        unsigned char buf[32] = 1;
        *(_OWORD *)__int16 v42 = *(_OWORD *)buf;
        *(_OWORD *)&v42[16] = *(_OWORD *)&buf[16];
        *(_OWORD *)&v42[26] = *(_OWORD *)&buf[26];
        if ((char)buf[71] < 0)
        {
          sub_10004FC84(&__p, *(void **)&buf[48], *(unint64_t *)&buf[56]);
        }
        else
        {
          long long __p = *(_OWORD *)&buf[48];
          uint64_t v44 = *(void *)&buf[64];
        }
        uint8_t v45 = buf[72];
        sub_1008CC2E4(a1, a2, (long long *)v42, 0);
        if (SHIBYTE(v44) < 0) {
          operator delete((void *)__p);
        }
        sub_1008CCA68(a1, a2, 1, 0);
        if (*(unsigned char *)(a1 + 80 * a2 + 216)) {
          *(unsigned char *)(a1 + 80 * (int)otherContextType() + 216) = 0;
        }
        uint64_t v24 = *(std::__shared_weak_count **)(a1 + 48);
        if (!v24 || (uint64_t v25 = *(void *)(a1 + 40), (v26 = std::__shared_weak_count::lock(v24)) == 0)) {
          sub_100088B9C();
        }
        uint64_t v27 = v26;
        p_shared_weak_owners = &v26->__shared_weak_owners_;
        atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v26);
        v37[0] = _NSConcreteStackBlock;
        v37[1] = 1174405120;
        _OWORD v37[2] = sub_1008CCEFC;
        v37[3] = &unk_101A172B8;
        v37[4] = a1;
        v37[5] = v25;
        uint64_t v38 = v27;
        atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
        int v39 = a2;
        uint64_t v29 = *(std::__shared_weak_count **)(a1 + 48);
        if (!v29 || (v30 = *(void *)(a1 + 40), (uint64_t v31 = std::__shared_weak_count::lock(v29)) == 0)) {
          sub_100088B9C();
        }
        uint64_t v32 = v31;
        char v33 = *(NSObject **)(a1 + 56);
        block[0] = _NSConcreteStackBlock;
        block[1] = 1174405120;
        block[2] = sub_1008DBFC8;
        block[3] = &unk_101A17588;
        block[5] = v30;
        uint64_t v41 = v32;
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        void block[4] = v37;
        dispatch_async(v33, block);
        if (v41) {
          sub_10004D2C8(v41);
        }
        sub_10004D2C8(v32);
        if (v38) {
          std::__shared_weak_count::__release_weak(v38);
        }
        std::__shared_weak_count::__release_weak(v27);
        if ((char)buf[71] < 0) {
          operator delete(*(void **)&buf[48]);
        }
      }
      if (a3)
      {
        uint64_t v34 = *(void *)(a1 + 144);
        if (v34)
        {
          if (*(unsigned char *)(a1 + 80 * v12 + 216)) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 560))(v34, a2);
          }
        }
      }
    }
  }
}

void sub_1008DA1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (*(char *)(v38 - 137) < 0) {
    operator delete(*(void **)(v38 - 160));
  }
  _Unwind_Resume(exception_object);
}

void sub_1008DA220(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 32);
  (*(void (**)(uint64_t *__return_ptr, void *))(*v1 + 576))(&v2, v1);
  sub_1008D0954(v1, &v2);
  if (v3) {
    sub_10004D2C8(v3);
  }
}

void sub_1008DA294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008DA2AC(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1008DA2B4(uint64_t a1, int a2)
{
  return a2 <= 1 && *(unsigned char *)(a1 + 80 * a2 + 224) != 0;
}

uint64_t sub_1008DA2DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 88);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 224))();
  }
  return result;
}

void sub_1008DA30C(uint64_t a1, int a2)
{
  if (a2 <= 1)
  {
    uint64_t v2 = a1 + 80 * a2;
    int v4 = *(unsigned __int8 *)(v2 + 233);
    uint64_t v3 = (unsigned char *)(v2 + 233);
    if (!v4)
    {
      uint64_t v5 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = 136315906;
        uint64_t v7 = "setDeactivating";
        __int16 v8 = 2080;
        uint64_t v9 = asStringBool(0);
        __int16 v10 = 2080;
        uint64_t v11 = asStringBool(1);
        __int16 v12 = 2080;
        uint64_t v13 = asString();
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: (change states) %s->%s (for %s)", (uint8_t *)&v6, 0x2Au);
      }
      unsigned char *v3 = 1;
    }
  }
}

void sub_1008DA41C(uint64_t a1, int a2)
{
}

uint64_t sub_1008DA424(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 112) + 232))(*(void *)(a1 + 112), *(unsigned int *)(*(void *)a2 + 52));
}

uint64_t sub_1008DA454(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 88) + 232))(*(void *)(a1 + 88), *(unsigned int *)(*(void *)a2 + 52));
}

void sub_1008DA484(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315650;
    uint64_t v14 = "resetDataActivator";
    __int16 v15 = 2080;
    uint64_t v16 = asString();
    __int16 v17 = 2080;
    uint64_t v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: resetting pdp activator on %s due to %s", (uint8_t *)&v13, 0x20u);
  }
  uint64_t v7 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = 0;
  *(unsigned char *)(a1 + 352) = 0;
  do
  {
    signed int v9 = dword_101506340[v8];
    if (v9 == a2 || anyContextType())
    {
      uint64_t v10 = a1 + 80 * v9;
      *(void *)(v10 + 192) = 0;
      *(void *)(v10 + 200) = "";
      uint64_t v11 = v10 + 240;
      *(void *)(v10 + 216) = 0;
      *(void *)(v10 + 224) = 0;
      *(void *)(v10 + 208) = "CommCenter";
      *(_WORD *)(v10 + 232) = 0;
      if (*(char *)(v10 + 263) < 0) {
        operator delete(*(void **)v11);
      }
      *(unsigned char *)(v11 + 24) = 0;
      *(void *)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      *(void *)(v11 + 16) = 0;
      if (*(_DWORD *)(a1 + 184) == v9) {
        *(_DWORD *)(a1 + 184) = 2;
      }
      __int16 v12 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v13) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I reset state due to resetDataActivator", (uint8_t *)&v13, 2u);
      }
      sub_1008CCA68(a1, v9, 0, 1);
    }
    ++v8;
  }
  while (v8 != 2);
}

uint64_t sub_1008DA684@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(result + 144);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)((char *)v2 + *(void *)(*v2 - 56)) + 16))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t sub_1008DA6D0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(result + 128);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)((char *)v2 + *(void *)(*v2 - 56)) + 16))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t sub_1008DA71C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void **)(result + 112);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)((char *)v2 + *(void *)(*v2 - 56)) + 16))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t sub_1008DA768(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 576))(&v3);
  uint64_t valid = DataUtils::validPersonality();
  if (v4) {
    sub_10004D2C8(v4);
  }
  return valid;
}

void sub_1008DA7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1008DA7F0(uint64_t a1)
{
  return sub_1008DA768(a1 - 16);
}

void sub_1008DA7F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_1008C4968(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16)))
  {
    int v6 = (void *)sub_1008C4A18(*(void *)(*(void *)(a1 + 136) + 8), *(void *)(*(void *)(a1 + 136) + 16));
    uint64_t v7 = v6 + 1;
    uint64_t v8 = (void *)*v6;
    if ((void *)*v6 != v6 + 1)
    {
      do
      {
        uint64_t v10 = v8[4];
        signed int v9 = (std::__shared_weak_count *)v8[5];
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v10 + 56))(v10))
        {
          uint64_t v11 = *(NSObject **)(a1 + 72);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315138;
            uint64_t v20 = "updateVoLTEDataCallType";
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Found BB data context! Now udpating VoLTE call type.", buf, 0xCu);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 568))(v10, a2);
        }
        if (v9) {
          sub_10004D2C8(v9);
        }
        __int16 v12 = (void *)v8[1];
        if (v12)
        {
          do
          {
            int v13 = v12;
            __int16 v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            int v13 = (void *)v8[2];
            BOOL v14 = *v13 == (void)v8;
            uint64_t v8 = v13;
          }
          while (!v14);
        }
        uint64_t v8 = v13;
      }
      while (v13 != v7);
    }
  }
  else
  {
    __int16 v15 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = (const char *)(*(void *)a3 + 24);
      uint64_t v17 = *(unsigned __int8 *)(*(void *)a3 + 47);
      int v18 = (char)v17;
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(*(void *)a3 + 32);
      }
      if (v18 < 0) {
        uint64_t v16 = *(const char **)(*(void *)a3 + 24);
      }
      if (!v17) {
        uint64_t v16 = "<invalid>";
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v20 = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "No model found for %s", buf, 0xCu);
    }
  }
}

void sub_1008DAA3C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008DAA54(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    uint64_t v8 = subscriber::asString();
    __int16 v9 = 2048;
    uint64_t v10 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Update fLastActiveProfileConnectionMask = [Sim %s, 0x%llx]", (uint8_t *)&v7, 0x16u);
  }
  *(_DWORD *)(a1 + 360) = a2;
  *(void *)(a1 + 368) = a3;
}

void sub_1008DAB1C(uint64_t a1, int a2, uint64_t a3)
{
}

uint64_t sub_1008DAB24()
{
  return 0;
}

uint64_t sub_1008DAB2C()
{
  return 0;
}

uint64_t sub_1008DAB34(uint64_t result)
{
  return result;
}

uint64_t sub_1008DAB44(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 136);
  uint64_t v3 = *(void **)(v2 + 8);
  for (uint64_t i = *(void **)(v2 + 16); v3 != i; v3 += 9)
  {
    int v6 = (void *)*v3;
    if ((void *)*v3 != v3 + 1)
    {
      do
      {
        uint64_t result = (*(uint64_t (**)(void))(*(void *)v6[4] + 216))(v6[4]);
        if ((result & 1) == 0) {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)v6[4] + 288))(v6[4], a2);
        }
        int v7 = (void *)v6[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            int v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v6[2];
            BOOL v9 = *v8 == (void)v6;
            int v6 = v8;
          }
          while (!v9);
        }
        int v6 = v8;
      }
      while (v8 != v3 + 1);
    }
  }
  return result;
}

void sub_1008DAC38(void *a1, unsigned __int16 a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 576))(&v7);
  if (v7)
  {
    *(_OWORD *)long long buf = 0uLL;
    int v6 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1008C4848((uint64_t)a1, 0, buf);
    if (v6) {
      sub_10004D2C8(v6);
    }
    if (*(void *)buf)
    {
      (*(void (**)(void, void))(**(void **)buf + 280))(*(void *)buf, a2);
    }
    else
    {
      uint64_t v5 = a1[9];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)BOOL v9 = 136315138;
        uint64_t v10 = "setCoalescing";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: dataContext is empty", v9, 0xCu);
      }
    }
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  else
  {
    int v4 = a1[9];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "setCoalescing";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: personality is empty", buf, 0xCu);
    }
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
}

void sub_1008DAE00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008DAE3C(uint64_t a1, unsigned __int16 a2)
{
}

void sub_1008DAE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v9 = *(std::__shared_weak_count **)(a2 + 8);
  __int16 v12 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = 0;
  BOOL v14 = 0;
  sub_1008C4848(a1, 0, &v13);
  if (v12) {
    sub_10004D2C8(v12);
  }
  uint64_t v10 = v13;
  if (v13)
  {
    sub_1000DFC90((uint64_t)v17, a5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v10 + 264))(v10, a3, a4, v17);
    sub_100060644(v17);
  }
  else
  {
    uint64_t v11 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v16 = "queryAnbrBitrate";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s: dataContext is empty", buf, 0xCu);
    }
    sub_1000607A8(a5, 0);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
}

void sub_1008DAFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_100060644((uint64_t *)va);
  if (a5) {
    sub_10004D2C8(a5);
  }
  _Unwind_Resume(a1);
}

void sub_1008DAFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1008DAFD8);
  }
  JUMPOUT(0x1008DAFD4);
}

void sub_1008DAFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1008DAFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_1008C4848(a1, 0, &v9);
  if (v8) {
    sub_10004D2C8(v8);
  }
  uint64_t v6 = v9;
  if (v9)
  {
    sub_100323990((uint64_t)v13, a3);
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 272))(v6, v13);
    sub_1000605C0(v13);
  }
  else
  {
    uint64_t v7 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      __int16 v12 = "getAnbrActivationState";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s: dataContext is empty", buf, 0xCu);
    }
    sub_10006074C(a3, 0, 0);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
}

void sub_1008DB154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1000605C0((uint64_t *)va);
  if (a5) {
    sub_10004D2C8(a5);
  }
  _Unwind_Resume(a1);
}

void sub_1008DB17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x1008DB174);
  }
  JUMPOUT(0x1008DB170);
}

void sub_1008DB18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1008DB194(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[18];
  uint64_t v5 = (std::__shared_weak_count *)a1[19];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
    uint64_t v8 = a1[9];
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    __int16 v13 = 0;
    uint64_t v9 = "#E sendAnbrActivationState: do not have current settings";
    uint64_t v10 = (uint8_t *)&v13;
    goto LABEL_13;
  }
  if (!*(void *)a2)
  {
    uint64_t v8 = a1[9];
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    __int16 v12 = 0;
    uint64_t v9 = "#E sendAnbrActivationState: empty personality";
    uint64_t v10 = (uint8_t *)&v12;
    goto LABEL_13;
  }
  int v7 = *(_DWORD *)(*(void *)a2 + 52);
  if (v7 == (*(unsigned int (**)(uint64_t))(*(void *)(v6 + *(void *)(*(void *)v6 - 56)) + 24))(v6 + *(void *)(*(void *)v6 - 56)))
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 640))(v6, a3);
    goto LABEL_14;
  }
  uint64_t v8 = a1[9];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v11 = 0;
    uint64_t v9 = "#N sendAnbrActivationState: unmatching personality";
    uint64_t v10 = (uint8_t *)&v11;
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, v10, 2u);
  }
LABEL_14:
  if (v5) {
    sub_10004D2C8(v5);
  }
}

void sub_1008DB318(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008DB330(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1008DB338(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1[18];
  int v7 = (std::__shared_weak_count *)a1[19];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v8)
  {
    uint64_t v10 = a1[9];
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    __int16 v15 = 0;
    __int16 v11 = "#E sendAnbrBitrateRecommendation: do not have current settings";
    __int16 v12 = (uint8_t *)&v15;
    goto LABEL_13;
  }
  if (!*(void *)a2)
  {
    uint64_t v10 = a1[9];
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    __int16 v14 = 0;
    __int16 v11 = "#E sendAnbrBitrateRecommendation: empty personality";
    __int16 v12 = (uint8_t *)&v14;
    goto LABEL_13;
  }
  int v9 = *(_DWORD *)(*(void *)a2 + 52);
  if (v9 == (*(unsigned int (**)(uint64_t))(*(void *)(v8 + *(void *)(*(void *)v8 - 56)) + 24))(v8 + *(void *)(*(void *)v8 - 56)))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 648))(v8, a3, a4);
    goto LABEL_14;
  }
  uint64_t v10 = a1[9];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v13 = 0;
    __int16 v11 = "#N sendAnbrBitrateRecommendation: unmatching personality";
    __int16 v12 = (uint8_t *)&v13;
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, v12, 2u);
  }
LABEL_14:
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1008DB4C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1008DB4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_1008DB4E4(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(int *)(v1 + 128);
    if (v3 > 9) {
      int v4 = "DATA.PDP:N:";
    }
    else {
      int v4 = off_101A175B8[v3];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v29 = (uint64_t)v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: ------- %s (PDPActivator) -------", buf, 0xCu);
    uint64_t v2 = *(NSObject **)(v1 + 72);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(v1 + 144);
    if (v5) {
      uint64_t v6 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 2);
    }
    else {
      uint64_t v6 = "NULL";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v29 = (uint64_t)v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fSettings.fActiveDataSettings = %s", buf, 0xCu);
    uint64_t v2 = *(NSObject **)(v1 + 72);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(v1 + 160);
    if (v7) {
      uint64_t v8 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, 2);
    }
    else {
      uint64_t v8 = "NULL";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v29 = (uint64_t)v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fPendingDataSettings = %s", buf, 0xCu);
    uint64_t v2 = *(NSObject **)(v1 + 72);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = asStringBool(*(void *)(v1 + 176) != 0);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v29 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fHandoverBackoffTimer = %s", buf, 0xCu);
    uint64_t v2 = *(NSObject **)(v1 + 72);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = asStringBool(*(unsigned char *)(v1 + 352));
    *(_DWORD *)long long buf = 136315138;
    uint64_t v29 = v10;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fRetryScheduled = %s", buf, 0xCu);
    uint64_t v2 = *(NSObject **)(v1 + 72);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = subscriber::asString();
    uint64_t v12 = *(void *)(v1 + 368);
    *(_DWORD *)long long buf = 136315394;
    uint64_t v29 = v11;
    __int16 v30 = 2048;
    uint64_t v31 = v12;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fLastActiveProfileConnectionMask = [Sim %s, 0x%llx]", buf, 0x16u);
  }
  for (uint64_t i = 0; i != 2; ++i)
  {
    int v14 = dword_101506340[i];
    __int16 v15 = *(NSObject **)(v1 + 72);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = asString();
      *(_DWORD *)long long buf = 136315138;
      uint64_t v29 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t ContextType=%s:", buf, 0xCu);
      __int16 v15 = *(NSObject **)(v1 + 72);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = v1 + 80 * v14;
      uint64_t v27 = asStringBool(*(unsigned char *)(v17 + 192));
      uint64_t v26 = asStringBool(*(unsigned char *)(v17 + 216));
      uint64_t v18 = asStringBool(*(unsigned char *)(v17 + 224));
      uint64_t v19 = v1;
      uint64_t v21 = *(void *)(v17 + 200);
      uint64_t v20 = *(void *)(v17 + 208);
      int v22 = *(_DWORD *)(v17 + 228);
      uint64_t v23 = asStringBool(*(unsigned char *)(v17 + 232));
      uint64_t v24 = asStringBool(*(unsigned char *)(v17 + 233));
      *(_DWORD *)long long buf = 136316930;
      uint64_t v29 = v27;
      __int16 v30 = 2080;
      uint64_t v31 = v26;
      __int16 v32 = 2080;
      uint64_t v33 = v18;
      __int16 v34 = 2080;
      uint64_t v35 = v21;
      __int16 v36 = 2080;
      uint64_t v37 = v20;
      uint64_t v1 = v19;
      __int16 v38 = 1024;
      int v39 = v22;
      __int16 v40 = 2080;
      uint64_t v41 = v23;
      __int16 v42 = 2080;
      uint64_t v43 = v24;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t fState.fActivationParams: active = %s, handover = %s, activationCompleted = %s, reason = %s, processName = %s, suspendMask = %d, probation = %s, deactivating = %s", buf, 0x4Eu);
    }
  }
  return (*(uint64_t (**)(void))(**(void **)(v1 + 112) + 80))(*(void *)(v1 + 112));
}