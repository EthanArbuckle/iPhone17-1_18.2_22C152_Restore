_OWORD *initializeWithCopy for FileImportExportBridge.PresentationState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  long long v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  long long v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  long long v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  long long v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  int *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(char *, uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  long long v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  long long v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  long long v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  long long v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;

  v6 = type metadata accessor for FileImportExportBridge.Presentation(0);
  v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for FileImportExportBridge.Presentation?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    v127 = v7;
    v128 = v6;
    v129 = a3;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          v70 = *((void *)a2 + 4);
          v71 = a2[1];
          *a1 = *a2;
          a1[1] = v71;
          *((void *)a1 + 4) = v70;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          break;
        case 2u:
          v72 = *(void *)a2;
          v73 = *((void *)a2 + 1);
          v74 = *((void *)a2 + 2);
          v75 = *((void *)a2 + 3);
          v76 = *((unsigned char *)a2 + 32);
          outlined copy of FileExportOperation.Storage(*(void *)a2, v73, v74, v75, v76);
          *(void *)a1 = v72;
          *((void *)a1 + 1) = v73;
          *((void *)a1 + 2) = v74;
          *((void *)a1 + 3) = v75;
          *((unsigned char *)a1 + 32) = v76;
          v77 = *((void *)a2 + 6);
          *((void *)a1 + 5) = *((void *)a2 + 5);
          *((void *)a1 + 6) = v77;
          *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)((char *)a2 + 56);
          v78 = *((void *)a2 + 11);
          *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)((char *)a2 + 72);
          *((void *)a1 + 11) = v78;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          break;
        case 3u:
          v79 = *((unsigned char *)a2 + 8);
          *(void *)a1 = *(void *)a2;
          *((unsigned char *)a1 + 8) = v79;
          v80 = *((void *)a2 + 6);
          v126 = a2[2];
          a1[1] = a2[1];
          a1[2] = v126;
          *((void *)a1 + 6) = v80;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          break;
        default:
          v9 = type metadata accessor for URL();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
          v10 = type metadata accessor for FileExportOperation.Move(0);
          v11 = *(int *)(v10 + 20);
          v12 = (void *)((char *)a1 + v11);
          v13 = (uint64_t *)((char *)a2 + v11);
          v15 = *v13;
          v14 = v13[1];
          *v12 = v15;
          v12[1] = v14;
          v16 = *(int *)(v10 + 24);
          v17 = (void *)((char *)a1 + v16);
          v18 = (void *)((char *)a2 + v16);
          v19 = v18[1];
          *v17 = *v18;
          v17[1] = v19;
          swift_retain();
          swift_retain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      v81 = (int *)type metadata accessor for FileExportOperation(0);
      v82 = v81[5];
      v83 = (void *)((char *)a1 + v82);
      v84 = (void *)((char *)a2 + v82);
      v85 = v84[1];
      *v83 = *v84;
      v83[1] = v85;
      v86 = v81[6];
      v87 = (char *)a1 + v86;
      v88 = (char *)a2 + v86;
      v89 = type metadata accessor for URL();
      v90 = *(void *)(v89 - 8);
      v91 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48);
      swift_bridgeObjectRetain();
      if (v91(v88, 1, v89))
      {
        type metadata accessor for URL?(0);
        memcpy(v87, v88, *(void *)(*(void *)(v92 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v87, v88, v89);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
      }
      v93 = v81[7];
      v94 = (char *)a1 + v93;
      v95 = (char *)a2 + v93;
      v58 = v128;
      if (*(void *)((char *)a2 + v93 + 24))
      {
        v96 = *(void *)v95;
        v97 = *((void *)v95 + 1);
        v98 = v95[16];
        outlined copy of Text.Storage(*(void *)v95, v97, v98);
        *(void *)v94 = v96;
        *((void *)v94 + 1) = v97;
        v94[16] = v98;
        *((void *)v94 + 3) = *((void *)v95 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v99 = *((_OWORD *)v95 + 1);
        *(_OWORD *)v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v99;
      }
      v100 = v81[8];
      v101 = (char *)a1 + v100;
      v102 = (char *)a2 + v100;
      if (*(void *)((char *)a2 + v100 + 24))
      {
        v103 = *(void *)v102;
        v104 = *((void *)v102 + 1);
        v105 = v102[16];
        outlined copy of Text.Storage(*(void *)v102, v104, v105);
        *(void *)v101 = v103;
        *((void *)v101 + 1) = v104;
        v101[16] = v105;
        *((void *)v101 + 3) = *((void *)v102 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v106 = *((_OWORD *)v102 + 1);
        *(_OWORD *)v101 = *(_OWORD *)v102;
        *((_OWORD *)v101 + 1) = v106;
      }
      v107 = v81[9];
      v108 = (char *)a1 + v107;
      v109 = (char *)a2 + v107;
      if (*(void *)((char *)a2 + v107 + 24))
      {
        v110 = *(void *)v109;
        v111 = *((void *)v109 + 1);
        v112 = v109[16];
        outlined copy of Text.Storage(*(void *)v109, v111, v112);
        *(void *)v108 = v110;
        *((void *)v108 + 1) = v111;
        v108[16] = v112;
        *((void *)v108 + 3) = *((void *)v109 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v113 = *((_OWORD *)v109 + 1);
        *(_OWORD *)v108 = *(_OWORD *)v109;
        *((_OWORD *)v108 + 1) = v113;
      }
      v114 = v81[10];
      v115 = (char *)a1 + v114;
      v116 = (char *)a2 + v114;
      type metadata accessor for Predicate<Pack{URL}>();
      v118 = v117;
      v119 = *(void *)(v117 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v116, 1, v117))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v115, v116, *(void *)(*(void *)(v120 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v115, v116, v118);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(v115, 0, 1, v118);
      }
      *((unsigned char *)a1 + v81[11]) = *((unsigned char *)a2 + v81[11]);
      v121 = v81[12];
      v122 = (char *)a1 + v121;
      v123 = (char *)a2 + v121;
      *(void *)v122 = *(void *)v123;
      v122[8] = v123[8];
    }
    else
    {
      v20 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v20;
      v21 = (int *)type metadata accessor for FileImportOperation(0);
      v22 = v21[5];
      v23 = (char *)a1 + v22;
      v24 = (char *)a2 + v22;
      v25 = type metadata accessor for URL();
      v26 = *(void *)(v25 - 8);
      v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
      swift_bridgeObjectRetain();
      if (v27(v24, 1, v25))
      {
        type metadata accessor for URL?(0);
        memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      v29 = v21[6];
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      if (*(void *)((char *)a2 + v29 + 24))
      {
        v32 = *(void *)v31;
        v33 = *((void *)v31 + 1);
        v34 = v31[16];
        outlined copy of Text.Storage(*(void *)v31, v33, v34);
        *(void *)v30 = v32;
        *((void *)v30 + 1) = v33;
        v30[16] = v34;
        *((void *)v30 + 3) = *((void *)v31 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v35 = *((_OWORD *)v31 + 1);
        *(_OWORD *)v30 = *(_OWORD *)v31;
        *((_OWORD *)v30 + 1) = v35;
      }
      v36 = v21[7];
      v37 = (char *)a1 + v36;
      v38 = (char *)a2 + v36;
      if (*(void *)((char *)a2 + v36 + 24))
      {
        v39 = *(void *)v38;
        v40 = *((void *)v38 + 1);
        v41 = v38[16];
        outlined copy of Text.Storage(*(void *)v38, v40, v41);
        *(void *)v37 = v39;
        *((void *)v37 + 1) = v40;
        v37[16] = v41;
        *((void *)v37 + 3) = *((void *)v38 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v42 = *((_OWORD *)v38 + 1);
        *(_OWORD *)v37 = *(_OWORD *)v38;
        *((_OWORD *)v37 + 1) = v42;
      }
      v43 = v21[8];
      v44 = (char *)a1 + v43;
      v45 = (char *)a2 + v43;
      if (*(void *)((char *)a2 + v43 + 24))
      {
        v46 = *(void *)v45;
        v47 = *((void *)v45 + 1);
        v48 = v45[16];
        outlined copy of Text.Storage(*(void *)v45, v47, v48);
        *(void *)v44 = v46;
        *((void *)v44 + 1) = v47;
        v44[16] = v48;
        *((void *)v44 + 3) = *((void *)v45 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        v49 = *((_OWORD *)v45 + 1);
        *(_OWORD *)v44 = *(_OWORD *)v45;
        *((_OWORD *)v44 + 1) = v49;
      }
      *(void *)((char *)a1 + v21[9]) = *(void *)((char *)a2 + v21[9]);
      *((unsigned char *)a1 + v21[10]) = *((unsigned char *)a2 + v21[10]);
      v50 = v21[11];
      v51 = (char *)a1 + v50;
      v52 = (char *)a2 + v50;
      type metadata accessor for Predicate<Pack{URL}>();
      v54 = v53;
      v55 = *(void *)(v53 - 8);
      v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
      swift_bridgeObjectRetain();
      if (v56(v52, 1, v54))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v51, v52, *(void *)(*(void *)(v57 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v51, v52, v54);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v51, 0, 1, v54);
      }
      v58 = v128;
      a3 = v129;
      *((unsigned char *)a1 + v21[12]) = *((unsigned char *)a2 + v21[12]);
      v59 = v21[13];
      v60 = (char *)a1 + v59;
      v61 = (char *)a2 + v59;
      *(void *)v60 = *(void *)v61;
      v60[8] = v61[8];
      v62 = v21[14];
      v63 = (void *)((char *)a1 + v62);
      v64 = (void *)((char *)a2 + v62);
      v65 = v64[1];
      *v63 = *v64;
      v63[1] = v65;
      v66 = v21[15];
      v67 = (void *)((char *)a1 + v66);
      v68 = (void *)((char *)a2 + v66);
      v69 = v68[1];
      *v67 = *v68;
      v67[1] = v69;
      swift_retain();
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v127 + 56))(a1, 0, 1, v58);
  }
  v124 = *(int *)(a3 + 24);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_DWORD *)((char *)a1 + v124) = *(_DWORD *)((char *)a2 + v124);
  return a1;
}

uint64_t *assignWithCopy for FileImportExportBridge.PresentationState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FileImportExportBridge.Presentation(0);
  v7 = *(void **)(v6 - 8);
  v8 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v7[6];
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v243 = a3;
      uint64_t v244 = v6;
      __dst = (void (**)(uint64_t *, void, uint64_t, uint64_t))v7;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for FileExportOperation.Mode(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            *a1 = *a2;
            uint64_t v89 = a2[2];
            a1[1] = a2[1];
            a1[2] = v89;
            uint64_t v90 = a2[4];
            a1[3] = a2[3];
            a1[4] = v90;
            goto LABEL_35;
          case 2u:
            uint64_t v91 = *a2;
            uint64_t v92 = a2[1];
            uint64_t v93 = a2[2];
            uint64_t v94 = a2[3];
            char v95 = *((unsigned char *)a2 + 32);
            outlined copy of FileExportOperation.Storage(*a2, v92, v93, v94, v95);
            *a1 = v91;
            a1[1] = v92;
            a1[2] = v93;
            a1[3] = v94;
            *((unsigned char *)a1 + 32) = v95;
            a1[5] = a2[5];
            a1[6] = a2[6];
            a1[7] = a2[7];
            uint64_t v96 = a2[9];
            a1[8] = a2[8];
            a1[9] = v96;
            uint64_t v97 = a2[11];
            a1[10] = a2[10];
            a1[11] = v97;
            goto LABEL_34;
          case 3u:
            char v98 = *((unsigned char *)a2 + 8);
            *a1 = *a2;
            *((unsigned char *)a1 + 8) = v98;
            a1[2] = a2[2];
            uint64_t v99 = a2[4];
            a1[3] = a2[3];
            a1[4] = v99;
            uint64_t v100 = a2[6];
            a1[5] = a2[5];
            a1[6] = v100;
LABEL_34:
            swift_bridgeObjectRetain();
LABEL_35:
            swift_bridgeObjectRetain();
            break;
          default:
            uint64_t v11 = type metadata accessor for URL();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
            uint64_t v12 = type metadata accessor for FileExportOperation.Move(0);
            uint64_t v13 = *(int *)(v12 + 20);
            v14 = (uint64_t *)((char *)a1 + v13);
            v15 = (uint64_t *)((char *)a2 + v13);
            uint64_t v16 = v15[1];
            void *v14 = *v15;
            v14[1] = v16;
            uint64_t v17 = *(int *)(v12 + 24);
            v18 = (uint64_t *)((char *)a1 + v17);
            v19 = (uint64_t *)((char *)a2 + v17);
            uint64_t v20 = v19[1];
            void *v18 = *v19;
            v18[1] = v20;
            break;
        }
        swift_retain();
        swift_retain();
        swift_storeEnumTagMultiPayload();
        v101 = (int *)type metadata accessor for FileExportOperation(0);
        uint64_t v102 = v101[5];
        v103 = (uint64_t *)((char *)a1 + v102);
        v104 = (uint64_t *)((char *)a2 + v102);
        void *v103 = *v104;
        v103[1] = v104[1];
        uint64_t v105 = v101[6];
        v106 = (char *)a1 + v105;
        v107 = (char *)a2 + v105;
        uint64_t v108 = type metadata accessor for URL();
        uint64_t v109 = *(void *)(v108 - 8);
        v110 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48);
        swift_bridgeObjectRetain();
        if (v110(v107, 1, v108))
        {
          type metadata accessor for URL?(0);
          memcpy(v106, v107, *(void *)(*(void *)(v111 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v106, v107, v108);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
        }
        uint64_t v112 = v101[7];
        v113 = (char *)a1 + v112;
        v114 = (char *)a2 + v112;
        if (*(uint64_t *)((char *)a2 + v112 + 24))
        {
          uint64_t v115 = *(void *)v114;
          uint64_t v116 = *((void *)v114 + 1);
          char v117 = v114[16];
          outlined copy of Text.Storage(*(void *)v114, v116, v117);
          *(void *)v113 = v115;
          *((void *)v113 + 1) = v116;
          v113[16] = v117;
          *((void *)v113 + 3) = *((void *)v114 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v118 = *((_OWORD *)v114 + 1);
          *(_OWORD *)v113 = *(_OWORD *)v114;
          *((_OWORD *)v113 + 1) = v118;
        }
        uint64_t v119 = v101[8];
        v120 = (char *)a1 + v119;
        v121 = (char *)a2 + v119;
        if (*(uint64_t *)((char *)a2 + v119 + 24))
        {
          uint64_t v122 = *(void *)v121;
          uint64_t v123 = *((void *)v121 + 1);
          char v124 = v121[16];
          outlined copy of Text.Storage(*(void *)v121, v123, v124);
          *(void *)v120 = v122;
          *((void *)v120 + 1) = v123;
          v120[16] = v124;
          *((void *)v120 + 3) = *((void *)v121 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v125 = *((_OWORD *)v121 + 1);
          *(_OWORD *)v120 = *(_OWORD *)v121;
          *((_OWORD *)v120 + 1) = v125;
        }
        uint64_t v126 = v101[9];
        v127 = (char *)a1 + v126;
        v128 = (char *)a2 + v126;
        if (*(uint64_t *)((char *)a2 + v126 + 24))
        {
          uint64_t v129 = *(void *)v128;
          uint64_t v130 = *((void *)v128 + 1);
          char v131 = v128[16];
          outlined copy of Text.Storage(*(void *)v128, v130, v131);
          *(void *)v127 = v129;
          *((void *)v127 + 1) = v130;
          v127[16] = v131;
          *((void *)v127 + 3) = *((void *)v128 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v132 = *((_OWORD *)v128 + 1);
          *(_OWORD *)v127 = *(_OWORD *)v128;
          *((_OWORD *)v127 + 1) = v132;
        }
        uint64_t v133 = v101[10];
        v134 = (char *)a1 + v133;
        v135 = (char *)a2 + v133;
        type metadata accessor for Predicate<Pack{URL}>();
        uint64_t v137 = v136;
        uint64_t v138 = *(void *)(v136 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v135, 1, v136))
        {
          _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
          memcpy(v134, v135, *(void *)(*(void *)(v139 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v134, v135, v137);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v138 + 56))(v134, 0, 1, v137);
        }
        v76 = __dst;
        *((unsigned char *)a1 + v101[11]) = *((unsigned char *)a2 + v101[11]);
        uint64_t v140 = v101[12];
        v141 = (char *)a1 + v140;
        v142 = (char *)a2 + v140;
        uint64_t v143 = *(void *)v142;
        v141[8] = v142[8];
        *(void *)v141 = v143;
      }
      else
      {
        *a1 = *a2;
        a1[1] = a2[1];
        v32 = (int *)type metadata accessor for FileImportOperation(0);
        uint64_t v33 = v32[5];
        v34 = (char *)a1 + v33;
        v35 = (char *)a2 + v33;
        uint64_t v36 = type metadata accessor for URL();
        uint64_t v37 = *(void *)(v36 - 8);
        v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
        swift_bridgeObjectRetain();
        if (v38(v35, 1, v36))
        {
          type metadata accessor for URL?(0);
          memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
        }
        uint64_t v47 = v32[6];
        v48 = (char *)a1 + v47;
        v49 = (char *)a2 + v47;
        if (*(uint64_t *)((char *)a2 + v47 + 24))
        {
          uint64_t v50 = *(void *)v49;
          uint64_t v51 = *((void *)v49 + 1);
          char v52 = v49[16];
          outlined copy of Text.Storage(*(void *)v49, v51, v52);
          *(void *)v48 = v50;
          *((void *)v48 + 1) = v51;
          v48[16] = v52;
          *((void *)v48 + 3) = *((void *)v49 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v53 = *((_OWORD *)v49 + 1);
          *(_OWORD *)v48 = *(_OWORD *)v49;
          *((_OWORD *)v48 + 1) = v53;
        }
        uint64_t v54 = v32[7];
        v55 = (char *)a1 + v54;
        v56 = (char *)a2 + v54;
        if (*(uint64_t *)((char *)a2 + v54 + 24))
        {
          uint64_t v57 = *(void *)v56;
          uint64_t v58 = *((void *)v56 + 1);
          char v59 = v56[16];
          outlined copy of Text.Storage(*(void *)v56, v58, v59);
          *(void *)v55 = v57;
          *((void *)v55 + 1) = v58;
          v55[16] = v59;
          *((void *)v55 + 3) = *((void *)v56 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v60 = *((_OWORD *)v56 + 1);
          *(_OWORD *)v55 = *(_OWORD *)v56;
          *((_OWORD *)v55 + 1) = v60;
        }
        uint64_t v61 = v32[8];
        v62 = (char *)a1 + v61;
        v63 = (char *)a2 + v61;
        if (*(uint64_t *)((char *)a2 + v61 + 24))
        {
          uint64_t v64 = *(void *)v63;
          uint64_t v65 = *((void *)v63 + 1);
          char v66 = v63[16];
          outlined copy of Text.Storage(*(void *)v63, v65, v66);
          *(void *)v62 = v64;
          *((void *)v62 + 1) = v65;
          v62[16] = v66;
          *((void *)v62 + 3) = *((void *)v63 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v67 = *((_OWORD *)v63 + 1);
          *(_OWORD *)v62 = *(_OWORD *)v63;
          *((_OWORD *)v62 + 1) = v67;
        }
        *(uint64_t *)((char *)a1 + v32[9]) = *(uint64_t *)((char *)a2 + v32[9]);
        *((unsigned char *)a1 + v32[10]) = *((unsigned char *)a2 + v32[10]);
        uint64_t v68 = v32[11];
        v69 = (char *)a1 + v68;
        v70 = (char *)a2 + v68;
        type metadata accessor for Predicate<Pack{URL}>();
        uint64_t v72 = v71;
        uint64_t v73 = *(void *)(v71 - 8);
        v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
        swift_bridgeObjectRetain();
        if (v74(v70, 1, v72))
        {
          _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
          memcpy(v69, v70, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v69, v70, v72);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v69, 0, 1, v72);
        }
        v76 = __dst;
        a3 = v243;
        *((unsigned char *)a1 + v32[12]) = *((unsigned char *)a2 + v32[12]);
        uint64_t v77 = v32[13];
        v78 = (char *)a1 + v77;
        v79 = (char *)a2 + v77;
        uint64_t v80 = *(void *)v79;
        v78[8] = v79[8];
        *(void *)v78 = v80;
        uint64_t v81 = v32[14];
        v82 = (uint64_t *)((char *)a1 + v81);
        v83 = (uint64_t *)((char *)a2 + v81);
        uint64_t v84 = v83[1];
        void *v82 = *v83;
        v82[1] = v84;
        uint64_t v85 = v32[15];
        v86 = (uint64_t *)((char *)a1 + v85);
        v87 = (uint64_t *)((char *)a2 + v85);
        uint64_t v88 = v87[1];
        void *v86 = *v87;
        v86[1] = v88;
        swift_retain();
        swift_retain();
      }
      swift_storeEnumTagMultiPayload();
      v76[7](a1, 0, 1, v244);
      goto LABEL_53;
    }
LABEL_8:
    type metadata accessor for FileImportExportBridge.Presentation?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_53;
  }
  if (v10)
  {
    outlined destroy of FileImportExportBridge.Presentation((uint64_t)a1, type metadata accessor for FileImportExportBridge.Presentation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of FileImportExportBridge.Presentation((uint64_t)a1, type metadata accessor for FileImportExportBridge.Presentation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *a1 = *a2;
          uint64_t v195 = a2[2];
          a1[1] = a2[1];
          a1[2] = v195;
          uint64_t v196 = a2[4];
          a1[3] = a2[3];
          a1[4] = v196;
          goto LABEL_72;
        case 2u:
          uint64_t v185 = *a2;
          uint64_t v186 = a2[1];
          uint64_t v187 = a2[2];
          uint64_t v188 = a2[3];
          char v189 = *((unsigned char *)a2 + 32);
          outlined copy of FileExportOperation.Storage(*a2, v186, v187, v188, v189);
          *a1 = v185;
          a1[1] = v186;
          a1[2] = v187;
          a1[3] = v188;
          *((unsigned char *)a1 + 32) = v189;
          a1[5] = a2[5];
          a1[6] = a2[6];
          a1[7] = a2[7];
          uint64_t v190 = a2[9];
          a1[8] = a2[8];
          a1[9] = v190;
          uint64_t v191 = a2[11];
          a1[10] = a2[10];
          a1[11] = v191;
          goto LABEL_70;
        case 3u:
          char v192 = *((unsigned char *)a2 + 8);
          *a1 = *a2;
          *((unsigned char *)a1 + 8) = v192;
          a1[2] = a2[2];
          uint64_t v193 = a2[4];
          a1[3] = a2[3];
          a1[4] = v193;
          uint64_t v194 = a2[6];
          a1[5] = a2[5];
          a1[6] = v194;
LABEL_70:
          swift_bridgeObjectRetain();
LABEL_72:
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v22 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
          uint64_t v23 = type metadata accessor for FileExportOperation.Move(0);
          uint64_t v24 = *(int *)(v23 + 20);
          v25 = (uint64_t *)((char *)a1 + v24);
          v26 = (uint64_t *)((char *)a2 + v24);
          uint64_t v27 = v26[1];
          void *v25 = *v26;
          v25[1] = v27;
          uint64_t v28 = *(int *)(v23 + 24);
          v29 = (uint64_t *)((char *)a1 + v28);
          v30 = (uint64_t *)((char *)a2 + v28);
          uint64_t v31 = v30[1];
          void *v29 = *v30;
          v29[1] = v31;
          break;
      }
      swift_retain();
      swift_retain();
      swift_storeEnumTagMultiPayload();
      v197 = (int *)type metadata accessor for FileExportOperation(0);
      uint64_t v198 = v197[5];
      v199 = (uint64_t *)((char *)a1 + v198);
      v200 = (uint64_t *)((char *)a2 + v198);
      void *v199 = *v200;
      v199[1] = v200[1];
      uint64_t v201 = v197[6];
      __dstc = (char *)a1 + v201;
      v202 = (char *)a2 + v201;
      uint64_t v203 = type metadata accessor for URL();
      uint64_t v204 = *(void *)(v203 - 8);
      v205 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48);
      swift_bridgeObjectRetain();
      if (v205(v202, 1, v203))
      {
        type metadata accessor for URL?(0);
        memcpy(__dstc, v202, *(void *)(*(void *)(v206 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v204 + 16))(__dstc, v202, v203);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v204 + 56))(__dstc, 0, 1, v203);
      }
      uint64_t v207 = v197[7];
      v208 = (char *)a1 + v207;
      v209 = (char *)a2 + v207;
      if (*(uint64_t *)((char *)a2 + v207 + 24))
      {
        uint64_t v210 = *(void *)v209;
        uint64_t v211 = *((void *)v209 + 1);
        char v212 = v209[16];
        outlined copy of Text.Storage(*(void *)v209, v211, v212);
        *(void *)v208 = v210;
        *((void *)v208 + 1) = v211;
        v208[16] = v212;
        *((void *)v208 + 3) = *((void *)v209 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v213 = *((_OWORD *)v209 + 1);
        *(_OWORD *)v208 = *(_OWORD *)v209;
        *((_OWORD *)v208 + 1) = v213;
      }
      uint64_t v214 = v197[8];
      v215 = (char *)a1 + v214;
      v216 = (char *)a2 + v214;
      if (*(uint64_t *)((char *)a2 + v214 + 24))
      {
        uint64_t v217 = *(void *)v216;
        uint64_t v218 = *((void *)v216 + 1);
        char v219 = v216[16];
        outlined copy of Text.Storage(*(void *)v216, v218, v219);
        *(void *)v215 = v217;
        *((void *)v215 + 1) = v218;
        v215[16] = v219;
        *((void *)v215 + 3) = *((void *)v216 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v220 = *((_OWORD *)v216 + 1);
        *(_OWORD *)v215 = *(_OWORD *)v216;
        *((_OWORD *)v215 + 1) = v220;
      }
      uint64_t v221 = v197[9];
      v222 = (char *)a1 + v221;
      v223 = (char *)a2 + v221;
      if (*(uint64_t *)((char *)a2 + v221 + 24))
      {
        uint64_t v224 = *(void *)v223;
        uint64_t v225 = *((void *)v223 + 1);
        char v226 = v223[16];
        outlined copy of Text.Storage(*(void *)v223, v225, v226);
        *(void *)v222 = v224;
        *((void *)v222 + 1) = v225;
        v222[16] = v226;
        *((void *)v222 + 3) = *((void *)v223 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v227 = *((_OWORD *)v223 + 1);
        *(_OWORD *)v222 = *(_OWORD *)v223;
        *((_OWORD *)v222 + 1) = v227;
      }
      uint64_t v228 = v197[10];
      v229 = (char *)a1 + v228;
      v230 = (char *)a2 + v228;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v232 = v231;
      uint64_t v233 = *(void *)(v231 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v233 + 48))(v230, 1, v231))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v229, v230, *(void *)(*(void *)(v234 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v229, v230, v232);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v233 + 56))(v229, 0, 1, v232);
      }
      *((unsigned char *)a1 + v197[11]) = *((unsigned char *)a2 + v197[11]);
      uint64_t v235 = v197[12];
      v236 = (char *)a1 + v235;
      v237 = (char *)a2 + v235;
      uint64_t v238 = *(void *)v237;
      v236[8] = v237[8];
      *(void *)v236 = v238;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      v40 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v41 = v40[5];
      __dsta = (char *)a1 + v41;
      v42 = (char *)a2 + v41;
      uint64_t v43 = type metadata accessor for URL();
      uint64_t v44 = *(void *)(v43 - 8);
      v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
      swift_bridgeObjectRetain();
      if (v45(v42, 1, v43))
      {
        type metadata accessor for URL?(0);
        memcpy(__dsta, v42, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 16))(__dsta, v42, v43);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(__dsta, 0, 1, v43);
      }
      uint64_t v145 = v40[6];
      v146 = (char *)a1 + v145;
      v147 = (char *)a2 + v145;
      if (*(uint64_t *)((char *)a2 + v145 + 24))
      {
        uint64_t v148 = *(void *)v147;
        uint64_t v149 = *((void *)v147 + 1);
        char v150 = v147[16];
        outlined copy of Text.Storage(*(void *)v147, v149, v150);
        *(void *)v146 = v148;
        *((void *)v146 + 1) = v149;
        v146[16] = v150;
        *((void *)v146 + 3) = *((void *)v147 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v151 = *((_OWORD *)v147 + 1);
        *(_OWORD *)v146 = *(_OWORD *)v147;
        *((_OWORD *)v146 + 1) = v151;
      }
      uint64_t v152 = v40[7];
      v153 = (char *)a1 + v152;
      v154 = (char *)a2 + v152;
      if (*(uint64_t *)((char *)a2 + v152 + 24))
      {
        uint64_t v155 = *(void *)v154;
        uint64_t v156 = *((void *)v154 + 1);
        char v157 = v154[16];
        outlined copy of Text.Storage(*(void *)v154, v156, v157);
        *(void *)v153 = v155;
        *((void *)v153 + 1) = v156;
        v153[16] = v157;
        *((void *)v153 + 3) = *((void *)v154 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v158 = *((_OWORD *)v154 + 1);
        *(_OWORD *)v153 = *(_OWORD *)v154;
        *((_OWORD *)v153 + 1) = v158;
      }
      uint64_t v159 = v40[8];
      v160 = (char *)a1 + v159;
      v161 = (char *)a2 + v159;
      if (*(uint64_t *)((char *)a2 + v159 + 24))
      {
        uint64_t v162 = *(void *)v161;
        uint64_t v163 = *((void *)v161 + 1);
        char v164 = v161[16];
        outlined copy of Text.Storage(*(void *)v161, v163, v164);
        *(void *)v160 = v162;
        *((void *)v160 + 1) = v163;
        v160[16] = v164;
        *((void *)v160 + 3) = *((void *)v161 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v165 = *((_OWORD *)v161 + 1);
        *(_OWORD *)v160 = *(_OWORD *)v161;
        *((_OWORD *)v160 + 1) = v165;
      }
      *(uint64_t *)((char *)a1 + v40[9]) = *(uint64_t *)((char *)a2 + v40[9]);
      *((unsigned char *)a1 + v40[10]) = *((unsigned char *)a2 + v40[10]);
      uint64_t v166 = v40[11];
      __dstb = (char *)a1 + v166;
      v167 = (char *)a2 + v166;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v169 = v168;
      uint64_t v170 = *(void *)(v168 - 8);
      v171 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v170 + 48);
      swift_bridgeObjectRetain();
      if (v171(v167, 1, v169))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(__dstb, v167, *(void *)(*(void *)(v172 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v170 + 16))(__dstb, v167, v169);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v170 + 56))(__dstb, 0, 1, v169);
      }
      *((unsigned char *)a1 + v40[12]) = *((unsigned char *)a2 + v40[12]);
      uint64_t v173 = v40[13];
      v174 = (char *)a1 + v173;
      v175 = (char *)a2 + v173;
      uint64_t v176 = *(void *)v175;
      v174[8] = v175[8];
      *(void *)v174 = v176;
      uint64_t v177 = v40[14];
      v178 = (uint64_t *)((char *)a1 + v177);
      v179 = (uint64_t *)((char *)a2 + v177);
      uint64_t v180 = v179[1];
      void *v178 = *v179;
      v178[1] = v180;
      uint64_t v181 = v40[15];
      v182 = (uint64_t *)((char *)a1 + v181);
      v183 = (uint64_t *)((char *)a2 + v181);
      uint64_t v184 = v183[1];
      void *v182 = *v183;
      v182[1] = v184;
      swift_retain();
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_53:
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *initializeWithTake for FileImportExportBridge.PresentationState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FileImportExportBridge.Presentation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    type metadata accessor for FileImportExportBridge.Presentation?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v9 = type metadata accessor for FileExportOperation.Mode(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        uint64_t v17 = type metadata accessor for URL();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v17 - 8) + 32))(a1, a2, v17);
        uint64_t v18 = type metadata accessor for FileExportOperation.Move(0);
        *(_OWORD *)((char *)a1 + *(int *)(v18 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v18 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v18 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v18 + 24));
        swift_storeEnumTagMultiPayload();
      }
      v19 = (int *)type metadata accessor for FileExportOperation(0);
      *(_OWORD *)((char *)a1 + v19[5]) = *(_OWORD *)((char *)a2 + v19[5]);
      uint64_t v20 = v19[6];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = type metadata accessor for URL();
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        type metadata accessor for URL?(0);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v22, v23);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      uint64_t v45 = v19[7];
      uint64_t v46 = (_OWORD *)((char *)a1 + v45);
      uint64_t v47 = (_OWORD *)((char *)a2 + v45);
      long long v48 = v47[1];
      *uint64_t v46 = *v47;
      v46[1] = v48;
      uint64_t v49 = v19[8];
      uint64_t v50 = (_OWORD *)((char *)a1 + v49);
      uint64_t v51 = (_OWORD *)((char *)a2 + v49);
      long long v52 = v51[1];
      *uint64_t v50 = *v51;
      v50[1] = v52;
      uint64_t v53 = v19[9];
      uint64_t v54 = (_OWORD *)((char *)a1 + v53);
      v55 = (_OWORD *)((char *)a2 + v53);
      long long v56 = v55[1];
      *uint64_t v54 = *v55;
      v54[1] = v56;
      uint64_t v57 = v19[10];
      uint64_t v58 = (char *)a1 + v57;
      char v59 = (char *)a2 + v57;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v61 = v60;
      uint64_t v62 = *(void *)(v60 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v59, 1, v60))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v58, v59, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v58, v59, v61);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v58, 0, 1, v61);
      }
      *((unsigned char *)a1 + v19[11]) = *((unsigned char *)a2 + v19[11]);
      uint64_t v67 = v19[12];
      uint64_t v68 = (char *)a1 + v67;
      v69 = (char *)a2 + v67;
      *(void *)uint64_t v68 = *(void *)v69;
      v68[8] = v69[8];
    }
    else
    {
      *a1 = *a2;
      int v10 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v11 = v10[5];
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for URL();
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        type metadata accessor for URL?(0);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v26 = v10[6];
      uint64_t v27 = (_OWORD *)((char *)a1 + v26);
      uint64_t v28 = (_OWORD *)((char *)a2 + v26);
      long long v29 = v28[1];
      *uint64_t v27 = *v28;
      v27[1] = v29;
      uint64_t v30 = v10[7];
      uint64_t v31 = (_OWORD *)((char *)a1 + v30);
      v32 = (_OWORD *)((char *)a2 + v30);
      long long v33 = v32[1];
      *uint64_t v31 = *v32;
      v31[1] = v33;
      uint64_t v34 = v10[8];
      v35 = (_OWORD *)((char *)a1 + v34);
      uint64_t v36 = (_OWORD *)((char *)a2 + v34);
      long long v37 = v36[1];
      _OWORD *v35 = *v36;
      v35[1] = v37;
      *(void *)((char *)a1 + v10[9]) = *(void *)((char *)a2 + v10[9]);
      *((unsigned char *)a1 + v10[10]) = *((unsigned char *)a2 + v10[10]);
      uint64_t v38 = v10[11];
      uint64_t v39 = (char *)a1 + v38;
      v40 = (char *)a2 + v38;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v42 = v41;
      uint64_t v43 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v40, 1, v41))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v39, v40, v42);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v39, 0, 1, v42);
      }
      *((unsigned char *)a1 + v10[12]) = *((unsigned char *)a2 + v10[12]);
      uint64_t v64 = v10[13];
      uint64_t v65 = (char *)a1 + v64;
      char v66 = (char *)a2 + v64;
      *(void *)uint64_t v65 = *(void *)v66;
      v65[8] = v66[8];
      *(_OWORD *)((char *)a1 + v10[14]) = *(_OWORD *)((char *)a2 + v10[14]);
      *(_OWORD *)((char *)a1 + v10[15]) = *(_OWORD *)((char *)a2 + v10[15]);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v70 = *(int *)(a3 + 24);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_DWORD *)((char *)a1 + v70) = *(_DWORD *)((char *)a2 + v70);
  return a1;
}

_OWORD *assignWithTake for FileImportExportBridge.PresentationState(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FileImportExportBridge.Presentation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v11 = type metadata accessor for FileExportOperation.Mode(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          uint64_t v21 = type metadata accessor for URL();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v21 - 8) + 32))(a1, a2, v21);
          uint64_t v22 = type metadata accessor for FileExportOperation.Move(0);
          *(_OWORD *)((char *)a1 + *(int *)(v22 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v22 + 20));
          *(_OWORD *)((char *)a1 + *(int *)(v22 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v22 + 24));
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v23 = (int *)type metadata accessor for FileExportOperation(0);
        *(_OWORD *)((char *)a1 + v23[5]) = *(_OWORD *)((char *)a2 + v23[5]);
        uint64_t v24 = v23[6];
        uint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = type metadata accessor for URL();
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          type metadata accessor for URL?(0);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        uint64_t v56 = v23[7];
        uint64_t v57 = (_OWORD *)((char *)a1 + v56);
        uint64_t v58 = (_OWORD *)((char *)a2 + v56);
        long long v59 = v58[1];
        *uint64_t v57 = *v58;
        v57[1] = v59;
        uint64_t v60 = v23[8];
        uint64_t v61 = (_OWORD *)((char *)a1 + v60);
        uint64_t v62 = (_OWORD *)((char *)a2 + v60);
        long long v63 = v62[1];
        *uint64_t v61 = *v62;
        v61[1] = v63;
        uint64_t v64 = v23[9];
        uint64_t v65 = (_OWORD *)((char *)a1 + v64);
        char v66 = (_OWORD *)((char *)a2 + v64);
        long long v67 = v66[1];
        *uint64_t v65 = *v66;
        v65[1] = v67;
        uint64_t v68 = v23[10];
        v69 = (char *)a1 + v68;
        uint64_t v70 = (char *)a2 + v68;
        type metadata accessor for Predicate<Pack{URL}>();
        uint64_t v72 = v71;
        uint64_t v73 = *(void *)(v71 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v70, 1, v71))
        {
          _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
          memcpy(v69, v70, *(void *)(*(void *)(v74 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v69, v70, v72);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v69, 0, 1, v72);
        }
        *((unsigned char *)a1 + v23[11]) = *((unsigned char *)a2 + v23[11]);
        uint64_t v78 = v23[12];
        v79 = (char *)a1 + v78;
        uint64_t v80 = (char *)a2 + v78;
        *(void *)v79 = *(void *)v80;
        v79[8] = v80[8];
      }
      else
      {
        *a1 = *a2;
        uint64_t v14 = (int *)type metadata accessor for FileImportOperation(0);
        uint64_t v15 = v14[5];
        uint64_t v16 = (char *)a1 + v15;
        uint64_t v17 = (char *)a2 + v15;
        uint64_t v18 = type metadata accessor for URL();
        uint64_t v19 = *(void *)(v18 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
        {
          type metadata accessor for URL?(0);
          memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
        }
        uint64_t v37 = v14[6];
        uint64_t v38 = (_OWORD *)((char *)a1 + v37);
        uint64_t v39 = (_OWORD *)((char *)a2 + v37);
        long long v40 = v39[1];
        *uint64_t v38 = *v39;
        v38[1] = v40;
        uint64_t v41 = v14[7];
        uint64_t v42 = (_OWORD *)((char *)a1 + v41);
        uint64_t v43 = (_OWORD *)((char *)a2 + v41);
        long long v44 = v43[1];
        _OWORD *v42 = *v43;
        v42[1] = v44;
        uint64_t v45 = v14[8];
        uint64_t v46 = (_OWORD *)((char *)a1 + v45);
        uint64_t v47 = (_OWORD *)((char *)a2 + v45);
        long long v48 = v47[1];
        *uint64_t v46 = *v47;
        v46[1] = v48;
        *(void *)((char *)a1 + v14[9]) = *(void *)((char *)a2 + v14[9]);
        *((unsigned char *)a1 + v14[10]) = *((unsigned char *)a2 + v14[10]);
        uint64_t v49 = v14[11];
        uint64_t v50 = (char *)a1 + v49;
        uint64_t v51 = (char *)a2 + v49;
        type metadata accessor for Predicate<Pack{URL}>();
        uint64_t v53 = v52;
        uint64_t v54 = *(void *)(v52 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v51, 1, v52))
        {
          _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
          memcpy(v50, v51, *(void *)(*(void *)(v55 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v50, v51, v53);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v50, 0, 1, v53);
        }
        *((unsigned char *)a1 + v14[12]) = *((unsigned char *)a2 + v14[12]);
        uint64_t v75 = v14[13];
        v76 = (char *)a1 + v75;
        uint64_t v77 = (char *)a2 + v75;
        *(void *)v76 = *(void *)v77;
        v76[8] = v77[8];
        *(_OWORD *)((char *)a1 + v14[14]) = *(_OWORD *)((char *)a2 + v14[14]);
        *(_OWORD *)((char *)a1 + v14[15]) = *(_OWORD *)((char *)a2 + v14[15]);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_31;
    }
LABEL_8:
    type metadata accessor for FileImportExportBridge.Presentation?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_31;
  }
  if (v10)
  {
    outlined destroy of FileImportExportBridge.Presentation((uint64_t)a1, type metadata accessor for FileImportExportBridge.Presentation);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    outlined destroy of FileImportExportBridge.Presentation((uint64_t)a1, type metadata accessor for FileImportExportBridge.Presentation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = type metadata accessor for FileExportOperation.Mode(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        uint64_t v83 = type metadata accessor for URL();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v83 - 8) + 32))(a1, a2, v83);
        uint64_t v84 = type metadata accessor for FileExportOperation.Move(0);
        *(_OWORD *)((char *)a1 + *(int *)(v84 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v84 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v84 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v84 + 24));
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v85 = (int *)type metadata accessor for FileExportOperation(0);
      *(_OWORD *)((char *)a1 + v85[5]) = *(_OWORD *)((char *)a2 + v85[5]);
      uint64_t v86 = v85[6];
      v87 = (char *)a1 + v86;
      uint64_t v88 = (char *)a2 + v86;
      uint64_t v89 = type metadata accessor for URL();
      uint64_t v90 = *(void *)(v89 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        type metadata accessor for URL?(0);
        memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v90 + 32))(v87, v88, v89);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
      }
      uint64_t v111 = v85[7];
      uint64_t v112 = (_OWORD *)((char *)a1 + v111);
      v113 = (_OWORD *)((char *)a2 + v111);
      long long v114 = v113[1];
      *uint64_t v112 = *v113;
      v112[1] = v114;
      uint64_t v115 = v85[8];
      uint64_t v116 = (_OWORD *)((char *)a1 + v115);
      char v117 = (_OWORD *)((char *)a2 + v115);
      long long v118 = v117[1];
      *uint64_t v116 = *v117;
      v116[1] = v118;
      uint64_t v119 = v85[9];
      v120 = (_OWORD *)((char *)a1 + v119);
      v121 = (_OWORD *)((char *)a2 + v119);
      long long v122 = v121[1];
      _OWORD *v120 = *v121;
      v120[1] = v122;
      uint64_t v123 = v85[10];
      char v124 = (char *)a1 + v123;
      long long v125 = (char *)a2 + v123;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v127 = v126;
      uint64_t v128 = *(void *)(v126 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v125, 1, v126))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v124, v125, *(void *)(*(void *)(v129 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v124, v125, v127);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56))(v124, 0, 1, v127);
      }
      *((unsigned char *)a1 + v85[11]) = *((unsigned char *)a2 + v85[11]);
      uint64_t v133 = v85[12];
      v134 = (char *)a1 + v133;
      v135 = (char *)a2 + v133;
      *(void *)v134 = *(void *)v135;
      v134[8] = v135[8];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      *a1 = *a2;
      uint64_t v30 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v31 = v30[5];
      v32 = (char *)a1 + v31;
      long long v33 = (char *)a2 + v31;
      uint64_t v34 = type metadata accessor for URL();
      uint64_t v35 = *(void *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        type metadata accessor for URL?(0);
        memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v32, v33, v34);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      uint64_t v92 = v30[6];
      uint64_t v93 = (_OWORD *)((char *)a1 + v92);
      uint64_t v94 = (_OWORD *)((char *)a2 + v92);
      long long v95 = v94[1];
      *uint64_t v93 = *v94;
      v93[1] = v95;
      uint64_t v96 = v30[7];
      uint64_t v97 = (_OWORD *)((char *)a1 + v96);
      char v98 = (_OWORD *)((char *)a2 + v96);
      long long v99 = v98[1];
      *uint64_t v97 = *v98;
      v97[1] = v99;
      uint64_t v100 = v30[8];
      v101 = (_OWORD *)((char *)a1 + v100);
      uint64_t v102 = (_OWORD *)((char *)a2 + v100);
      long long v103 = v102[1];
      _OWORD *v101 = *v102;
      v101[1] = v103;
      *(void *)((char *)a1 + v30[9]) = *(void *)((char *)a2 + v30[9]);
      *((unsigned char *)a1 + v30[10]) = *((unsigned char *)a2 + v30[10]);
      uint64_t v104 = v30[11];
      uint64_t v105 = (char *)a1 + v104;
      v106 = (char *)a2 + v104;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v108 = v107;
      uint64_t v109 = *(void *)(v107 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v106, 1, v107))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v105, v106, *(void *)(*(void *)(v110 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v105, v106, v108);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v105, 0, 1, v108);
      }
      *((unsigned char *)a1 + v30[12]) = *((unsigned char *)a2 + v30[12]);
      uint64_t v130 = v30[13];
      char v131 = (char *)a1 + v130;
      long long v132 = (char *)a2 + v130;
      *(void *)char v131 = *(void *)v132;
      v131[8] = v132[8];
      *(_OWORD *)((char *)a1 + v30[14]) = *(_OWORD *)((char *)a2 + v30[14]);
      *(_OWORD *)((char *)a1 + v30[15]) = *(_OWORD *)((char *)a2 + v30[15]);
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_31:
  uint64_t v81 = *(int *)(a3 + 24);
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
  *(_DWORD *)((char *)a1 + v81) = *(_DWORD *)((char *)a2 + v81);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileImportExportBridge.PresentationState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DED770);
}

uint64_t sub_187DED770(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FileImportExportBridge.Presentation?(0);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for FileImportExportBridge.PresentationState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DED7F0);
}

uint64_t sub_187DED7F0(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FileImportExportBridge.Presentation?(0);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

unint64_t initializeBufferWithCopyOfBuffer for FileImportExportBridge.Presentation(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v76 = *(void *)(a2 + 32);
          long long v77 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v77;
          *(void *)(a1 + 32) = v76;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          break;
        case 2u:
          uint64_t v67 = *(void *)a2;
          uint64_t v68 = *(void *)(a2 + 8);
          uint64_t v69 = *(void *)(a2 + 16);
          uint64_t v70 = *(void *)(a2 + 24);
          char v71 = *(unsigned char *)(a2 + 32);
          outlined copy of FileExportOperation.Storage(*(void *)a2, v68, v69, v70, v71);
          *(void *)a1 = v67;
          *(void *)(a1 + 8) = v68;
          *(void *)(a1 + 16) = v69;
          *(void *)(a1 + 24) = v70;
          *(unsigned char *)(a1 + 32) = v71;
          uint64_t v72 = *(void *)(a2 + 48);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          *(void *)(a1 + 48) = v72;
          *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
          uint64_t v73 = *(void *)(a2 + 88);
          *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
          *(void *)(a1 + 88) = v73;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          break;
        case 3u:
          char v74 = *(unsigned char *)(a2 + 8);
          *(void *)a1 = *(void *)a2;
          *(unsigned char *)(a1 + 8) = v74;
          uint64_t v75 = *(void *)(a2 + 48);
          long long v122 = *(_OWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_OWORD *)(a1 + 32) = v122;
          *(void *)(a1 + 48) = v75;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          break;
        default:
          uint64_t v6 = type metadata accessor for URL();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
          uint64_t v7 = type metadata accessor for FileExportOperation.Move(0);
          uint64_t v8 = *(int *)(v7 + 20);
          int v9 = (void *)(a1 + v8);
          int v10 = (uint64_t *)(a2 + v8);
          uint64_t v12 = *v10;
          uint64_t v11 = v10[1];
          *int v9 = v12;
          v9[1] = v11;
          uint64_t v13 = *(int *)(v7 + 24);
          uint64_t v14 = (void *)(a1 + v13);
          uint64_t v15 = (void *)(a2 + v13);
          uint64_t v16 = v15[1];
          void *v14 = *v15;
          v14[1] = v16;
          swift_retain();
          swift_retain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v78 = (int *)type metadata accessor for FileExportOperation(0);
      uint64_t v79 = v78[5];
      uint64_t v80 = (void *)(a1 + v79);
      uint64_t v81 = (void *)(a2 + v79);
      uint64_t v82 = v81[1];
      *uint64_t v80 = *v81;
      v80[1] = v82;
      uint64_t v83 = v78[6];
      uint64_t v84 = (void *)(a1 + v83);
      uint64_t v85 = (const void *)(a2 + v83);
      uint64_t v86 = type metadata accessor for URL();
      uint64_t v87 = *(void *)(v86 - 8);
      uint64_t v88 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v87 + 48);
      swift_bridgeObjectRetain();
      if (v88(v85, 1, v86))
      {
        type metadata accessor for URL?(0);
        memcpy(v84, v85, *(void *)(*(void *)(v89 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v87 + 16))(v84, v85, v86);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
      }
      uint64_t v90 = v78[7];
      uint64_t v91 = a1 + v90;
      uint64_t v92 = a2 + v90;
      if (*(void *)(a2 + v90 + 24))
      {
        uint64_t v93 = *(void *)v92;
        uint64_t v94 = *(void *)(v92 + 8);
        char v95 = *(unsigned char *)(v92 + 16);
        outlined copy of Text.Storage(*(void *)v92, v94, v95);
        *(void *)uint64_t v91 = v93;
        *(void *)(v91 + 8) = v94;
        *(unsigned char *)(v91 + 16) = v95;
        *(void *)(v91 + 24) = *(void *)(v92 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v96 = *(_OWORD *)(v92 + 16);
        *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
        *(_OWORD *)(v91 + 16) = v96;
      }
      uint64_t v97 = v78[8];
      uint64_t v98 = a1 + v97;
      uint64_t v99 = a2 + v97;
      if (*(void *)(a2 + v97 + 24))
      {
        uint64_t v100 = *(void *)v99;
        uint64_t v101 = *(void *)(v99 + 8);
        char v102 = *(unsigned char *)(v99 + 16);
        outlined copy of Text.Storage(*(void *)v99, v101, v102);
        *(void *)uint64_t v98 = v100;
        *(void *)(v98 + 8) = v101;
        *(unsigned char *)(v98 + 16) = v102;
        *(void *)(v98 + 24) = *(void *)(v99 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v103 = *(_OWORD *)(v99 + 16);
        *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
        *(_OWORD *)(v98 + 16) = v103;
      }
      uint64_t v104 = v78[9];
      uint64_t v105 = a1 + v104;
      uint64_t v106 = a2 + v104;
      if (*(void *)(a2 + v104 + 24))
      {
        uint64_t v107 = *(void *)v106;
        uint64_t v108 = *(void *)(v106 + 8);
        char v109 = *(unsigned char *)(v106 + 16);
        outlined copy of Text.Storage(*(void *)v106, v108, v109);
        *(void *)uint64_t v105 = v107;
        *(void *)(v105 + 8) = v108;
        *(unsigned char *)(v105 + 16) = v109;
        *(void *)(v105 + 24) = *(void *)(v106 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v110 = *(_OWORD *)(v106 + 16);
        *(_OWORD *)uint64_t v105 = *(_OWORD *)v106;
        *(_OWORD *)(v105 + 16) = v110;
      }
      uint64_t v111 = v78[10];
      uint64_t v112 = (void *)(a1 + v111);
      v113 = (const void *)(a2 + v111);
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v115 = v114;
      uint64_t v116 = *(void *)(v114 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v116 + 48))(v113, 1, v114))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v112, v113, *(void *)(*(void *)(v117 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 16))(v112, v113, v115);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v112, 0, 1, v115);
      }
      *(unsigned char *)(a1 + v78[11]) = *(unsigned char *)(a2 + v78[11]);
      uint64_t v118 = v78[12];
      uint64_t v119 = a1 + v118;
      uint64_t v120 = a2 + v118;
      *(void *)uint64_t v119 = *(void *)v120;
      *(unsigned char *)(v119 + 8) = *(unsigned char *)(v120 + 8);
    }
    else
    {
      uint64_t v18 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v18;
      uint64_t v19 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v20 = v19[5];
      uint64_t v21 = (void *)(a1 + v20);
      uint64_t v22 = (const void *)(a2 + v20);
      uint64_t v23 = type metadata accessor for URL();
      uint64_t v24 = *(void *)(v23 - 8);
      uint64_t v25 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48);
      swift_bridgeObjectRetain();
      if (v25(v22, 1, v23))
      {
        type metadata accessor for URL?(0);
        memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      uint64_t v27 = v19[6];
      uint64_t v28 = a1 + v27;
      uint64_t v29 = a2 + v27;
      if (*(void *)(a2 + v27 + 24))
      {
        uint64_t v30 = *(void *)v29;
        uint64_t v31 = *(void *)(v29 + 8);
        char v32 = *(unsigned char *)(v29 + 16);
        outlined copy of Text.Storage(*(void *)v29, v31, v32);
        *(void *)uint64_t v28 = v30;
        *(void *)(v28 + 8) = v31;
        *(unsigned char *)(v28 + 16) = v32;
        *(void *)(v28 + 24) = *(void *)(v29 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v33 = *(_OWORD *)(v29 + 16);
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
        *(_OWORD *)(v28 + 16) = v33;
      }
      uint64_t v34 = v19[7];
      uint64_t v35 = a1 + v34;
      uint64_t v36 = a2 + v34;
      if (*(void *)(a2 + v34 + 24))
      {
        uint64_t v37 = *(void *)v36;
        uint64_t v38 = *(void *)(v36 + 8);
        char v39 = *(unsigned char *)(v36 + 16);
        outlined copy of Text.Storage(*(void *)v36, v38, v39);
        *(void *)uint64_t v35 = v37;
        *(void *)(v35 + 8) = v38;
        *(unsigned char *)(v35 + 16) = v39;
        *(void *)(v35 + 24) = *(void *)(v36 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v40 = *(_OWORD *)(v36 + 16);
        *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
        *(_OWORD *)(v35 + 16) = v40;
      }
      uint64_t v41 = v19[8];
      uint64_t v42 = a1 + v41;
      uint64_t v43 = a2 + v41;
      if (*(void *)(a2 + v41 + 24))
      {
        uint64_t v44 = *(void *)v43;
        uint64_t v45 = *(void *)(v43 + 8);
        char v46 = *(unsigned char *)(v43 + 16);
        outlined copy of Text.Storage(*(void *)v43, v45, v46);
        *(void *)uint64_t v42 = v44;
        *(void *)(v42 + 8) = v45;
        *(unsigned char *)(v42 + 16) = v46;
        *(void *)(v42 + 24) = *(void *)(v43 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v47 = *(_OWORD *)(v43 + 16);
        *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
        *(_OWORD *)(v42 + 16) = v47;
      }
      *(void *)(a1 + v19[9]) = *(void *)(a2 + v19[9]);
      *(unsigned char *)(a1 + v19[10]) = *(unsigned char *)(a2 + v19[10]);
      uint64_t v48 = v19[11];
      uint64_t v49 = (void *)(a1 + v48);
      uint64_t v50 = (const void *)(a2 + v48);
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v52 = v51;
      uint64_t v53 = *(void *)(v51 - 8);
      uint64_t v54 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v53 + 48);
      swift_bridgeObjectRetain();
      if (v54(v50, 1, v52))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v49, v50, *(void *)(*(void *)(v55 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v53 + 16))(v49, v50, v52);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v53 + 56))(v49, 0, 1, v52);
      }
      *(unsigned char *)(a1 + v19[12]) = *(unsigned char *)(a2 + v19[12]);
      uint64_t v56 = v19[13];
      uint64_t v57 = a1 + v56;
      uint64_t v58 = a2 + v56;
      *(void *)uint64_t v57 = *(void *)v58;
      *(unsigned char *)(v57 + 8) = *(unsigned char *)(v58 + 8);
      uint64_t v59 = v19[14];
      uint64_t v60 = (void *)(a1 + v59);
      uint64_t v61 = (void *)(a2 + v59);
      uint64_t v62 = v61[1];
      *uint64_t v60 = *v61;
      v60[1] = v62;
      uint64_t v63 = v19[15];
      uint64_t v64 = (void *)(a1 + v63);
      uint64_t v65 = (void *)(a2 + v63);
      uint64_t v66 = v65[1];
      *uint64_t v64 = *v65;
      v64[1] = v66;
      swift_retain();
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for FileImportExportBridge.Presentation(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for FileExportOperation.Mode(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v2 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
        type metadata accessor for FileExportOperation.Move(0);
        swift_release();
        goto LABEL_20;
      case 1u:
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_20;
      case 2u:
        outlined consume of FileExportOperation.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_20;
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
LABEL_20:
        swift_release();
        break;
      default:
        break;
    }
    uint64_t v15 = (int *)type metadata accessor for FileExportOperation(0);
    swift_bridgeObjectRelease();
    uint64_t v16 = a1 + v15[6];
    uint64_t v17 = type metadata accessor for URL();
    uint64_t v18 = *(void *)(v17 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    }
    uint64_t v19 = a1 + v15[7];
    if (*(void *)(v19 + 24))
    {
      outlined consume of Text.Storage(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
      swift_bridgeObjectRelease();
    }
    uint64_t v20 = a1 + v15[8];
    if (*(void *)(v20 + 24))
    {
      outlined consume of Text.Storage(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
      swift_bridgeObjectRelease();
    }
    uint64_t v21 = a1 + v15[9];
    if (*(void *)(v21 + 24))
    {
      outlined consume of Text.Storage(*(void *)v21, *(void *)(v21 + 8), *(unsigned char *)(v21 + 16));
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = a1 + v15[10];
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v24 = v23;
    uint64_t v26 = *(void *)(v23 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v22, 1, v23);
    if (!result)
    {
      uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8);
      return v25(v22, v24);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = (int *)type metadata accessor for FileImportOperation(0);
    uint64_t v4 = a1 + v3[5];
    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    }
    uint64_t v7 = a1 + v3[6];
    if (*(void *)(v7 + 24))
    {
      outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
      swift_bridgeObjectRelease();
    }
    uint64_t v8 = a1 + v3[7];
    if (*(void *)(v8 + 24))
    {
      outlined consume of Text.Storage(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
      swift_bridgeObjectRelease();
    }
    uint64_t v9 = a1 + v3[8];
    if (*(void *)(v9 + 24))
    {
      outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = a1 + v3[11];
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)(v11 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for FileImportExportBridge.Presentation(uint64_t a1, uint64_t *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for FileExportOperation.Mode(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v73 = a2[4];
        long long v74 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v74;
        *(void *)(a1 + 32) = v73;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 2u:
        uint64_t v64 = *a2;
        uint64_t v65 = a2[1];
        uint64_t v66 = a2[2];
        uint64_t v67 = a2[3];
        char v68 = *((unsigned char *)a2 + 32);
        outlined copy of FileExportOperation.Storage(*a2, v65, v66, v67, v68);
        *(void *)a1 = v64;
        *(void *)(a1 + 8) = v65;
        *(void *)(a1 + 16) = v66;
        *(void *)(a1 + 24) = v67;
        *(unsigned char *)(a1 + 32) = v68;
        uint64_t v69 = a2[6];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = v69;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
        uint64_t v70 = a2[11];
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
        *(void *)(a1 + 88) = v70;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 3u:
        char v71 = *((unsigned char *)a2 + 8);
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = v71;
        uint64_t v72 = a2[6];
        long long v119 = *((_OWORD *)a2 + 2);
        *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
        *(_OWORD *)(a1 + 32) = v119;
        *(void *)(a1 + 48) = v72;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      default:
        uint64_t v4 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        uint64_t v5 = type metadata accessor for FileExportOperation.Move(0);
        uint64_t v6 = *(int *)(v5 + 20);
        uint64_t v7 = (void *)(a1 + v6);
        uint64_t v8 = (uint64_t *)((char *)a2 + v6);
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        void *v7 = v10;
        v7[1] = v9;
        uint64_t v11 = *(int *)(v5 + 24);
        uint64_t v12 = (void *)(a1 + v11);
        uint64_t v13 = (uint64_t *)((char *)a2 + v11);
        uint64_t v14 = v13[1];
        *uint64_t v12 = *v13;
        v12[1] = v14;
        swift_retain();
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v75 = (int *)type metadata accessor for FileExportOperation(0);
    uint64_t v76 = v75[5];
    long long v77 = (void *)(a1 + v76);
    uint64_t v78 = (uint64_t *)((char *)a2 + v76);
    uint64_t v79 = v78[1];
    *long long v77 = *v78;
    v77[1] = v79;
    uint64_t v80 = v75[6];
    uint64_t v81 = (void *)(a1 + v80);
    uint64_t v82 = (char *)a2 + v80;
    uint64_t v83 = type metadata accessor for URL();
    uint64_t v84 = *(void *)(v83 - 8);
    uint64_t v85 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v84 + 48);
    swift_bridgeObjectRetain();
    if (v85(v82, 1, v83))
    {
      type metadata accessor for URL?(0);
      memcpy(v81, v82, *(void *)(*(void *)(v86 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v84 + 16))(v81, v82, v83);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
    }
    uint64_t v87 = v75[7];
    uint64_t v88 = a1 + v87;
    uint64_t v89 = (uint64_t)a2 + v87;
    if (*(uint64_t *)((char *)a2 + v87 + 24))
    {
      uint64_t v90 = *(void *)v89;
      uint64_t v91 = *(void *)(v89 + 8);
      char v92 = *(unsigned char *)(v89 + 16);
      outlined copy of Text.Storage(*(void *)v89, v91, v92);
      *(void *)uint64_t v88 = v90;
      *(void *)(v88 + 8) = v91;
      *(unsigned char *)(v88 + 16) = v92;
      *(void *)(v88 + 24) = *(void *)(v89 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v93 = *(_OWORD *)(v89 + 16);
      *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
      *(_OWORD *)(v88 + 16) = v93;
    }
    uint64_t v94 = v75[8];
    uint64_t v95 = a1 + v94;
    uint64_t v96 = (uint64_t)a2 + v94;
    if (*(uint64_t *)((char *)a2 + v94 + 24))
    {
      uint64_t v97 = *(void *)v96;
      uint64_t v98 = *(void *)(v96 + 8);
      char v99 = *(unsigned char *)(v96 + 16);
      outlined copy of Text.Storage(*(void *)v96, v98, v99);
      *(void *)uint64_t v95 = v97;
      *(void *)(v95 + 8) = v98;
      *(unsigned char *)(v95 + 16) = v99;
      *(void *)(v95 + 24) = *(void *)(v96 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v100 = *(_OWORD *)(v96 + 16);
      *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
      *(_OWORD *)(v95 + 16) = v100;
    }
    uint64_t v101 = v75[9];
    uint64_t v102 = a1 + v101;
    uint64_t v103 = (uint64_t)a2 + v101;
    if (*(uint64_t *)((char *)a2 + v101 + 24))
    {
      uint64_t v104 = *(void *)v103;
      uint64_t v105 = *(void *)(v103 + 8);
      char v106 = *(unsigned char *)(v103 + 16);
      outlined copy of Text.Storage(*(void *)v103, v105, v106);
      *(void *)uint64_t v102 = v104;
      *(void *)(v102 + 8) = v105;
      *(unsigned char *)(v102 + 16) = v106;
      *(void *)(v102 + 24) = *(void *)(v103 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v107 = *(_OWORD *)(v103 + 16);
      *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
      *(_OWORD *)(v102 + 16) = v107;
    }
    uint64_t v108 = v75[10];
    char v109 = (void *)(a1 + v108);
    long long v110 = (char *)a2 + v108;
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v112 = v111;
    uint64_t v113 = *(void *)(v111 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v110, 1, v111))
    {
      _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
      memcpy(v109, v110, *(void *)(*(void *)(v114 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v113 + 16))(v109, v110, v112);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v113 + 56))(v109, 0, 1, v112);
    }
    *(unsigned char *)(a1 + v75[11]) = *((unsigned char *)a2 + v75[11]);
    uint64_t v115 = v75[12];
    uint64_t v116 = a1 + v115;
    uint64_t v117 = (uint64_t)a2 + v115;
    *(void *)uint64_t v116 = *(void *)v117;
    *(unsigned char *)(v116 + 8) = *(unsigned char *)(v117 + 8);
  }
  else
  {
    uint64_t v15 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v15;
    uint64_t v16 = (int *)type metadata accessor for FileImportOperation(0);
    uint64_t v17 = v16[5];
    uint64_t v18 = (void *)(a1 + v17);
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for URL();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
    swift_bridgeObjectRetain();
    if (v22(v19, 1, v20))
    {
      type metadata accessor for URL?(0);
      memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    uint64_t v24 = v16[6];
    uint64_t v25 = a1 + v24;
    uint64_t v26 = (uint64_t)a2 + v24;
    if (*(uint64_t *)((char *)a2 + v24 + 24))
    {
      uint64_t v27 = *(void *)v26;
      uint64_t v28 = *(void *)(v26 + 8);
      char v29 = *(unsigned char *)(v26 + 16);
      outlined copy of Text.Storage(*(void *)v26, v28, v29);
      *(void *)uint64_t v25 = v27;
      *(void *)(v25 + 8) = v28;
      *(unsigned char *)(v25 + 16) = v29;
      *(void *)(v25 + 24) = *(void *)(v26 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v30 = *(_OWORD *)(v26 + 16);
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
      *(_OWORD *)(v25 + 16) = v30;
    }
    uint64_t v31 = v16[7];
    uint64_t v32 = a1 + v31;
    uint64_t v33 = (uint64_t)a2 + v31;
    if (*(uint64_t *)((char *)a2 + v31 + 24))
    {
      uint64_t v34 = *(void *)v33;
      uint64_t v35 = *(void *)(v33 + 8);
      char v36 = *(unsigned char *)(v33 + 16);
      outlined copy of Text.Storage(*(void *)v33, v35, v36);
      *(void *)uint64_t v32 = v34;
      *(void *)(v32 + 8) = v35;
      *(unsigned char *)(v32 + 16) = v36;
      *(void *)(v32 + 24) = *(void *)(v33 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v37 = *(_OWORD *)(v33 + 16);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
      *(_OWORD *)(v32 + 16) = v37;
    }
    uint64_t v38 = v16[8];
    uint64_t v39 = a1 + v38;
    uint64_t v40 = (uint64_t)a2 + v38;
    if (*(uint64_t *)((char *)a2 + v38 + 24))
    {
      uint64_t v41 = *(void *)v40;
      uint64_t v42 = *(void *)(v40 + 8);
      char v43 = *(unsigned char *)(v40 + 16);
      outlined copy of Text.Storage(*(void *)v40, v42, v43);
      *(void *)uint64_t v39 = v41;
      *(void *)(v39 + 8) = v42;
      *(unsigned char *)(v39 + 16) = v43;
      *(void *)(v39 + 24) = *(void *)(v40 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v44 = *(_OWORD *)(v40 + 16);
      *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
      *(_OWORD *)(v39 + 16) = v44;
    }
    *(void *)(a1 + v16[9]) = *(uint64_t *)((char *)a2 + v16[9]);
    *(unsigned char *)(a1 + v16[10]) = *((unsigned char *)a2 + v16[10]);
    uint64_t v45 = v16[11];
    char v46 = (void *)(a1 + v45);
    long long v47 = (char *)a2 + v45;
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v49 = v48;
    uint64_t v50 = *(void *)(v48 - 8);
    uint64_t v51 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v50 + 48);
    swift_bridgeObjectRetain();
    if (v51(v47, 1, v49))
    {
      _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
      memcpy(v46, v47, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v50 + 16))(v46, v47, v49);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v46, 0, 1, v49);
    }
    *(unsigned char *)(a1 + v16[12]) = *((unsigned char *)a2 + v16[12]);
    uint64_t v53 = v16[13];
    uint64_t v54 = a1 + v53;
    uint64_t v55 = (uint64_t)a2 + v53;
    *(void *)uint64_t v54 = *(void *)v55;
    *(unsigned char *)(v54 + 8) = *(unsigned char *)(v55 + 8);
    uint64_t v56 = v16[14];
    uint64_t v57 = (void *)(a1 + v56);
    uint64_t v58 = (uint64_t *)((char *)a2 + v56);
    uint64_t v59 = v58[1];
    *uint64_t v57 = *v58;
    v57[1] = v59;
    uint64_t v60 = v16[15];
    uint64_t v61 = (void *)(a1 + v60);
    uint64_t v62 = (uint64_t *)((char *)a2 + v60);
    uint64_t v63 = v62[1];
    *uint64_t v61 = *v62;
    v61[1] = v63;
    swift_retain();
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for FileImportExportBridge.Presentation(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    outlined destroy of FileImportExportBridge.Presentation((uint64_t)a1, type metadata accessor for FileImportExportBridge.Presentation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          *a1 = *a2;
          uint64_t v63 = a2[2];
          a1[1] = a2[1];
          a1[2] = v63;
          uint64_t v64 = a2[4];
          a1[3] = a2[3];
          a1[4] = v64;
          goto LABEL_25;
        case 2u:
          uint64_t v65 = *a2;
          uint64_t v66 = a2[1];
          uint64_t v67 = a2[2];
          uint64_t v68 = a2[3];
          char v69 = *((unsigned char *)a2 + 32);
          outlined copy of FileExportOperation.Storage(*a2, v66, v67, v68, v69);
          *a1 = v65;
          a1[1] = v66;
          a1[2] = v67;
          a1[3] = v68;
          *((unsigned char *)a1 + 32) = v69;
          a1[5] = a2[5];
          a1[6] = a2[6];
          a1[7] = a2[7];
          uint64_t v70 = a2[9];
          a1[8] = a2[8];
          a1[9] = v70;
          uint64_t v71 = a2[11];
          a1[10] = a2[10];
          a1[11] = v71;
          goto LABEL_24;
        case 3u:
          char v72 = *((unsigned char *)a2 + 8);
          *a1 = *a2;
          *((unsigned char *)a1 + 8) = v72;
          a1[2] = a2[2];
          uint64_t v73 = a2[4];
          a1[3] = a2[3];
          a1[4] = v73;
          uint64_t v74 = a2[6];
          a1[5] = a2[5];
          a1[6] = v74;
LABEL_24:
          swift_bridgeObjectRetain();
LABEL_25:
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v4 = type metadata accessor for URL();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
          uint64_t v5 = type metadata accessor for FileExportOperation.Move(0);
          uint64_t v6 = *(int *)(v5 + 20);
          uint64_t v7 = (uint64_t *)((char *)a1 + v6);
          uint64_t v8 = (uint64_t *)((char *)a2 + v6);
          uint64_t v9 = v8[1];
          void *v7 = *v8;
          v7[1] = v9;
          uint64_t v10 = *(int *)(v5 + 24);
          uint64_t v11 = (uint64_t *)((char *)a1 + v10);
          uint64_t v12 = (uint64_t *)((char *)a2 + v10);
          uint64_t v13 = v12[1];
          *uint64_t v11 = *v12;
          v11[1] = v13;
          break;
      }
      swift_retain();
      swift_retain();
      swift_storeEnumTagMultiPayload();
      uint64_t v75 = (int *)type metadata accessor for FileExportOperation(0);
      uint64_t v76 = v75[5];
      long long v77 = (uint64_t *)((char *)a1 + v76);
      uint64_t v78 = (uint64_t *)((char *)a2 + v76);
      *long long v77 = *v78;
      v77[1] = v78[1];
      uint64_t v79 = v75[6];
      uint64_t v80 = (char *)a1 + v79;
      uint64_t v81 = (char *)a2 + v79;
      uint64_t v82 = type metadata accessor for URL();
      uint64_t v83 = *(void *)(v82 - 8);
      uint64_t v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48);
      swift_bridgeObjectRetain();
      if (v84(v81, 1, v82))
      {
        type metadata accessor for URL?(0);
        memcpy(v80, v81, *(void *)(*(void *)(v85 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v80, v81, v82);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
      }
      uint64_t v86 = v75[7];
      uint64_t v87 = (char *)a1 + v86;
      uint64_t v88 = (char *)a2 + v86;
      if (*(uint64_t *)((char *)a2 + v86 + 24))
      {
        uint64_t v89 = *(void *)v88;
        uint64_t v90 = *((void *)v88 + 1);
        char v91 = v88[16];
        outlined copy of Text.Storage(*(void *)v88, v90, v91);
        *(void *)uint64_t v87 = v89;
        *((void *)v87 + 1) = v90;
        v87[16] = v91;
        *((void *)v87 + 3) = *((void *)v88 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v92 = *((_OWORD *)v88 + 1);
        *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
        *((_OWORD *)v87 + 1) = v92;
      }
      uint64_t v93 = v75[8];
      uint64_t v94 = (char *)a1 + v93;
      uint64_t v95 = (char *)a2 + v93;
      if (*(uint64_t *)((char *)a2 + v93 + 24))
      {
        uint64_t v96 = *(void *)v95;
        uint64_t v97 = *((void *)v95 + 1);
        char v98 = v95[16];
        outlined copy of Text.Storage(*(void *)v95, v97, v98);
        *(void *)uint64_t v94 = v96;
        *((void *)v94 + 1) = v97;
        v94[16] = v98;
        *((void *)v94 + 3) = *((void *)v95 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v99 = *((_OWORD *)v95 + 1);
        *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
        *((_OWORD *)v94 + 1) = v99;
      }
      uint64_t v100 = v75[9];
      uint64_t v101 = (char *)a1 + v100;
      uint64_t v102 = (char *)a2 + v100;
      if (*(uint64_t *)((char *)a2 + v100 + 24))
      {
        uint64_t v103 = *(void *)v102;
        uint64_t v104 = *((void *)v102 + 1);
        char v105 = v102[16];
        outlined copy of Text.Storage(*(void *)v102, v104, v105);
        *(void *)uint64_t v101 = v103;
        *((void *)v101 + 1) = v104;
        v101[16] = v105;
        *((void *)v101 + 3) = *((void *)v102 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v106 = *((_OWORD *)v102 + 1);
        *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
        *((_OWORD *)v101 + 1) = v106;
      }
      uint64_t v107 = v75[10];
      uint64_t v108 = (char *)a1 + v107;
      char v109 = (char *)a2 + v107;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v111 = v110;
      uint64_t v112 = *(void *)(v110 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v109, 1, v110))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v108, v109, *(void *)(*(void *)(v113 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v108, v109, v111);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v108, 0, 1, v111);
      }
      *((unsigned char *)a1 + v75[11]) = *((unsigned char *)a2 + v75[11]);
      uint64_t v114 = v75[12];
      uint64_t v115 = (char *)a1 + v114;
      uint64_t v116 = (char *)a2 + v114;
      uint64_t v117 = *(void *)v116;
      v115[8] = v116[8];
      *(void *)uint64_t v115 = v117;
    }
    else
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v14 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v15 = v14[5];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for URL();
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      swift_bridgeObjectRetain();
      if (v20(v17, 1, v18))
      {
        type metadata accessor for URL?(0);
        memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      uint64_t v22 = v14[6];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)a2 + v22;
      if (*(uint64_t *)((char *)a2 + v22 + 24))
      {
        uint64_t v25 = *(void *)v24;
        uint64_t v26 = *((void *)v24 + 1);
        char v27 = v24[16];
        outlined copy of Text.Storage(*(void *)v24, v26, v27);
        *(void *)uint64_t v23 = v25;
        *((void *)v23 + 1) = v26;
        v23[16] = v27;
        *((void *)v23 + 3) = *((void *)v24 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v28 = *((_OWORD *)v24 + 1);
        *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
        *((_OWORD *)v23 + 1) = v28;
      }
      uint64_t v29 = v14[7];
      long long v30 = (char *)a1 + v29;
      uint64_t v31 = (char *)a2 + v29;
      if (*(uint64_t *)((char *)a2 + v29 + 24))
      {
        uint64_t v32 = *(void *)v31;
        uint64_t v33 = *((void *)v31 + 1);
        char v34 = v31[16];
        outlined copy of Text.Storage(*(void *)v31, v33, v34);
        *(void *)long long v30 = v32;
        *((void *)v30 + 1) = v33;
        v30[16] = v34;
        *((void *)v30 + 3) = *((void *)v31 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v35 = *((_OWORD *)v31 + 1);
        *(_OWORD *)long long v30 = *(_OWORD *)v31;
        *((_OWORD *)v30 + 1) = v35;
      }
      uint64_t v36 = v14[8];
      long long v37 = (char *)a1 + v36;
      uint64_t v38 = (char *)a2 + v36;
      if (*(uint64_t *)((char *)a2 + v36 + 24))
      {
        uint64_t v39 = *(void *)v38;
        uint64_t v40 = *((void *)v38 + 1);
        char v41 = v38[16];
        outlined copy of Text.Storage(*(void *)v38, v40, v41);
        *(void *)long long v37 = v39;
        *((void *)v37 + 1) = v40;
        v37[16] = v41;
        *((void *)v37 + 3) = *((void *)v38 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v42 = *((_OWORD *)v38 + 1);
        *(_OWORD *)long long v37 = *(_OWORD *)v38;
        *((_OWORD *)v37 + 1) = v42;
      }
      *(uint64_t *)((char *)a1 + v14[9]) = *(uint64_t *)((char *)a2 + v14[9]);
      *((unsigned char *)a1 + v14[10]) = *((unsigned char *)a2 + v14[10]);
      uint64_t v43 = v14[11];
      long long v44 = (char *)a1 + v43;
      uint64_t v45 = (char *)a2 + v43;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v47 = v46;
      uint64_t v48 = *(void *)(v46 - 8);
      uint64_t v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
      swift_bridgeObjectRetain();
      if (v49(v45, 1, v47))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v44, v45, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v44, v45, v47);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v44, 0, 1, v47);
      }
      *((unsigned char *)a1 + v14[12]) = *((unsigned char *)a2 + v14[12]);
      uint64_t v51 = v14[13];
      uint64_t v52 = (char *)a1 + v51;
      uint64_t v53 = (char *)a2 + v51;
      uint64_t v54 = *(void *)v53;
      v52[8] = v53[8];
      *(void *)uint64_t v52 = v54;
      uint64_t v55 = v14[14];
      uint64_t v56 = (uint64_t *)((char *)a1 + v55);
      uint64_t v57 = (uint64_t *)((char *)a2 + v55);
      uint64_t v58 = v57[1];
      void *v56 = *v57;
      v56[1] = v58;
      uint64_t v59 = v14[15];
      uint64_t v60 = (uint64_t *)((char *)a1 + v59);
      uint64_t v61 = (uint64_t *)((char *)a2 + v59);
      uint64_t v62 = v61[1];
      *uint64_t v60 = *v61;
      v60[1] = v62;
      swift_retain();
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for FileImportExportBridge.Presentation(_OWORD *a1, _OWORD *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for FileExportOperation.Mode(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
    else
    {
      uint64_t v12 = type metadata accessor for URL();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
      uint64_t v13 = type metadata accessor for FileExportOperation.Move(0);
      *(_OWORD *)((char *)a1 + *(int *)(v13 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 20));
      *(_OWORD *)((char *)a1 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 24));
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v14 = (int *)type metadata accessor for FileExportOperation(0);
    *(_OWORD *)((char *)a1 + v14[5]) = *(_OWORD *)((char *)a2 + v14[5]);
    uint64_t v15 = v14[6];
    uint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for URL();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      type metadata accessor for URL?(0);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v40 = v14[7];
    char v41 = (_OWORD *)((char *)a1 + v40);
    long long v42 = (_OWORD *)((char *)a2 + v40);
    long long v43 = v42[1];
    *char v41 = *v42;
    v41[1] = v43;
    uint64_t v44 = v14[8];
    uint64_t v45 = (_OWORD *)((char *)a1 + v44);
    uint64_t v46 = (_OWORD *)((char *)a2 + v44);
    long long v47 = v46[1];
    *uint64_t v45 = *v46;
    v45[1] = v47;
    uint64_t v48 = v14[9];
    uint64_t v49 = (_OWORD *)((char *)a1 + v48);
    uint64_t v50 = (_OWORD *)((char *)a2 + v48);
    long long v51 = v50[1];
    _OWORD *v49 = *v50;
    v49[1] = v51;
    uint64_t v52 = v14[10];
    uint64_t v53 = (char *)a1 + v52;
    uint64_t v54 = (char *)a2 + v52;
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v56 = v55;
    uint64_t v57 = *(void *)(v55 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v54, 1, v55))
    {
      _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
      memcpy(v53, v54, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v53, v54, v56);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v53, 0, 1, v56);
    }
    *((unsigned char *)a1 + v14[11]) = *((unsigned char *)a2 + v14[11]);
    uint64_t v62 = v14[12];
    uint64_t v63 = (char *)a1 + v62;
    uint64_t v64 = (char *)a2 + v62;
    *(void *)uint64_t v63 = *(void *)v64;
    v63[8] = v64[8];
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = (int *)type metadata accessor for FileImportOperation(0);
    uint64_t v6 = v5[5];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = *(void *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      type metadata accessor for URL?(0);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
    uint64_t v21 = v5[6];
    uint64_t v22 = (_OWORD *)((char *)a1 + v21);
    uint64_t v23 = (_OWORD *)((char *)a2 + v21);
    long long v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = v5[7];
    uint64_t v26 = (_OWORD *)((char *)a1 + v25);
    char v27 = (_OWORD *)((char *)a2 + v25);
    long long v28 = v27[1];
    _OWORD *v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = v5[8];
    long long v30 = (_OWORD *)((char *)a1 + v29);
    uint64_t v31 = (_OWORD *)((char *)a2 + v29);
    long long v32 = v31[1];
    _OWORD *v30 = *v31;
    v30[1] = v32;
    *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
    *((unsigned char *)a1 + v5[10]) = *((unsigned char *)a2 + v5[10]);
    uint64_t v33 = v5[11];
    char v34 = (char *)a1 + v33;
    long long v35 = (char *)a2 + v33;
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v37 = v36;
    uint64_t v38 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v36))
    {
      _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
      memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v34, v35, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v34, 0, 1, v37);
    }
    *((unsigned char *)a1 + v5[12]) = *((unsigned char *)a2 + v5[12]);
    uint64_t v59 = v5[13];
    uint64_t v60 = (char *)a1 + v59;
    uint64_t v61 = (char *)a2 + v59;
    *(void *)uint64_t v60 = *(void *)v61;
    v60[8] = v61[8];
    *(_OWORD *)((char *)a1 + v5[14]) = *(_OWORD *)((char *)a2 + v5[14]);
    *(_OWORD *)((char *)a1 + v5[15]) = *(_OWORD *)((char *)a2 + v5[15]);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for FileImportExportBridge.Presentation(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of FileImportExportBridge.Presentation((uint64_t)a1, type metadata accessor for FileImportExportBridge.Presentation);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for FileExportOperation.Mode(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
      }
      else
      {
        uint64_t v12 = type metadata accessor for URL();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, a2, v12);
        uint64_t v13 = type metadata accessor for FileExportOperation.Move(0);
        *(_OWORD *)((char *)a1 + *(int *)(v13 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 24));
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v14 = (int *)type metadata accessor for FileExportOperation(0);
      *(_OWORD *)((char *)a1 + v14[5]) = *(_OWORD *)((char *)a2 + v14[5]);
      uint64_t v15 = v14[6];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for URL();
      uint64_t v19 = *(void *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
      {
        type metadata accessor for URL?(0);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      uint64_t v40 = v14[7];
      char v41 = (_OWORD *)((char *)a1 + v40);
      long long v42 = (_OWORD *)((char *)a2 + v40);
      long long v43 = v42[1];
      *char v41 = *v42;
      v41[1] = v43;
      uint64_t v44 = v14[8];
      uint64_t v45 = (_OWORD *)((char *)a1 + v44);
      uint64_t v46 = (_OWORD *)((char *)a2 + v44);
      long long v47 = v46[1];
      *uint64_t v45 = *v46;
      v45[1] = v47;
      uint64_t v48 = v14[9];
      uint64_t v49 = (_OWORD *)((char *)a1 + v48);
      uint64_t v50 = (_OWORD *)((char *)a2 + v48);
      long long v51 = v50[1];
      _OWORD *v49 = *v50;
      v49[1] = v51;
      uint64_t v52 = v14[10];
      uint64_t v53 = (char *)a1 + v52;
      uint64_t v54 = (char *)a2 + v52;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v56 = v55;
      uint64_t v57 = *(void *)(v55 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v54, 1, v55))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v53, v54, *(void *)(*(void *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v53, v54, v56);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v53, 0, 1, v56);
      }
      *((unsigned char *)a1 + v14[11]) = *((unsigned char *)a2 + v14[11]);
      uint64_t v62 = v14[12];
      uint64_t v63 = (char *)a1 + v62;
      uint64_t v64 = (char *)a2 + v62;
      *(void *)uint64_t v63 = *(void *)v64;
      v63[8] = v64[8];
    }
    else
    {
      *a1 = *a2;
      uint64_t v5 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v6 = v5[5];
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for URL();
      uint64_t v10 = *(void *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        type metadata accessor for URL?(0);
        memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      uint64_t v21 = v5[6];
      uint64_t v22 = (_OWORD *)((char *)a1 + v21);
      uint64_t v23 = (_OWORD *)((char *)a2 + v21);
      long long v24 = v23[1];
      *uint64_t v22 = *v23;
      v22[1] = v24;
      uint64_t v25 = v5[7];
      uint64_t v26 = (_OWORD *)((char *)a1 + v25);
      char v27 = (_OWORD *)((char *)a2 + v25);
      long long v28 = v27[1];
      _OWORD *v26 = *v27;
      v26[1] = v28;
      uint64_t v29 = v5[8];
      long long v30 = (_OWORD *)((char *)a1 + v29);
      uint64_t v31 = (_OWORD *)((char *)a2 + v29);
      long long v32 = v31[1];
      _OWORD *v30 = *v31;
      v30[1] = v32;
      *(void *)((char *)a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
      *((unsigned char *)a1 + v5[10]) = *((unsigned char *)a2 + v5[10]);
      uint64_t v33 = v5[11];
      char v34 = (char *)a1 + v33;
      long long v35 = (char *)a2 + v33;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v37 = v36;
      uint64_t v38 = *(void *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v36))
      {
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v34, v35, v37);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v34, 0, 1, v37);
      }
      *((unsigned char *)a1 + v5[12]) = *((unsigned char *)a2 + v5[12]);
      uint64_t v59 = v5[13];
      uint64_t v60 = (char *)a1 + v59;
      uint64_t v61 = (char *)a2 + v59;
      *(void *)uint64_t v60 = *(void *)v61;
      v60[8] = v61[8];
      *(_OWORD *)((char *)a1 + v5[14]) = *(_OWORD *)((char *)a2 + v5[14]);
      *(_OWORD *)((char *)a1 + v5[15]) = *(_OWORD *)((char *)a2 + v5[15]);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined init with take of FileImportExportBridge.Presentation?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of FileImportExportBridge.PresentationState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_187DF052C()
{
  uint64_t v1 = *(void *)(type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_unknownObjectRelease();

  uint64_t v3 = v0 + v2;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_7:
          uint64_t v5 = type metadata accessor for URL();
          (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v2, v5);
          type metadata accessor for FileExportOperation.Move(0);
          swift_release();
          goto LABEL_22;
        case 1u:
LABEL_19:
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_22;
        case 2u:
LABEL_20:
          outlined consume of FileExportOperation.Storage(*(void *)v3, *(void *)(v3 + 8), *(void *)(v3 + 16), *(void *)(v3 + 24), *(unsigned char *)(v3 + 32));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_22;
        case 3u:
LABEL_21:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_22:
          swift_release();
          break;
        default:
          goto LABEL_23;
      }
      goto LABEL_23;
    }
  }
  else
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_33;
    }
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_7;
        case 1u:
          goto LABEL_19;
        case 2u:
          goto LABEL_20;
        case 3u:
          goto LABEL_21;
        default:
          break;
      }
LABEL_23:
      uint64_t v17 = (int *)type metadata accessor for FileExportOperation(0);
      swift_bridgeObjectRelease();
      uint64_t v18 = v3 + v17[6];
      uint64_t v19 = type metadata accessor for URL();
      uint64_t v20 = *(void *)(v19 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      }
      uint64_t v21 = v3 + v17[7];
      if (*(void *)(v21 + 24))
      {
        outlined consume of Text.Storage(*(void *)v21, *(void *)(v21 + 8), *(unsigned char *)(v21 + 16));
        swift_bridgeObjectRelease();
      }
      uint64_t v22 = v3 + v17[8];
      if (*(void *)(v22 + 24))
      {
        outlined consume of Text.Storage(*(void *)v22, *(void *)(v22 + 8), *(unsigned char *)(v22 + 16));
        swift_bridgeObjectRelease();
      }
      uint64_t v23 = v3 + v17[9];
      if (*(void *)(v23 + 24))
      {
        outlined consume of Text.Storage(*(void *)v23, *(void *)(v23 + 8), *(unsigned char *)(v23 + 16));
        swift_bridgeObjectRelease();
      }
      uint64_t v24 = v3 + v17[10];
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v26 = v25;
      uint64_t v27 = *(void *)(v25 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25)) {
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v24, v26);
      }
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for FileImportOperation(0);
  uint64_t v7 = v3 + v6[5];
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v10 = v3 + v6[6];
  if (*(void *)(v10 + 24))
  {
    outlined consume of Text.Storage(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = v3 + v6[7];
  if (*(void *)(v11 + 24))
  {
    outlined consume of Text.Storage(*(void *)v11, *(void *)(v11 + 8), *(unsigned char *)(v11 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = v3 + v6[8];
  if (*(void *)(v12 + 24))
  {
    outlined consume of Text.Storage(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v3 + v6[11];
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14)) {
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v15);
  }
  swift_release();
  swift_release();
LABEL_33:

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FileImportExportBridge.preferencesDidChange(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0) - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in FileImportExportBridge.preferencesDidChange(_:)(a1, v5, v6, v7, v8);
}

uint64_t outlined assign with copy of FileImportExportBridge.Presentation?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FileImportExportBridge.Presentation?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

_OWORD *initializeBufferWithCopyOfBuffer for FileImportExportBridge.PresentationState.UpdateEffect(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (_OWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for FileImportExportBridge.Presentation(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for FileExportOperation.Mode(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v162 = *(void *)(a2 + 32);
            long long v163 = *(_OWORD *)(a2 + 16);
            *a1 = *(_OWORD *)a2;
            a1[1] = v163;
            *((void *)a1 + 4) = v162;
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            break;
          case 2u:
            uint64_t v164 = *(void *)a2;
            uint64_t v165 = *(void *)(a2 + 8);
            uint64_t v166 = *(void *)(a2 + 16);
            uint64_t v167 = *(void *)(a2 + 24);
            char v168 = *(unsigned char *)(a2 + 32);
            outlined copy of FileExportOperation.Storage(*(void *)a2, v165, v166, v167, v168);
            *(void *)a1 = v164;
            *((void *)a1 + 1) = v165;
            *((void *)a1 + 2) = v166;
            *((void *)a1 + 3) = v167;
            *((unsigned char *)a1 + 32) = v168;
            uint64_t v169 = *(void *)(a2 + 48);
            *((void *)a1 + 5) = *(void *)(a2 + 40);
            *((void *)a1 + 6) = v169;
            *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)(a2 + 56);
            uint64_t v170 = *(void *)(a2 + 88);
            *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)(a2 + 72);
            *((void *)a1 + 11) = v170;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            break;
          case 3u:
            char v171 = *(unsigned char *)(a2 + 8);
            *(void *)a1 = *(void *)a2;
            *((unsigned char *)a1 + 8) = v171;
            uint64_t v172 = *(void *)(a2 + 48);
            long long v213 = *(_OWORD *)(a2 + 32);
            a1[1] = *(_OWORD *)(a2 + 16);
            a1[2] = v213;
            *((void *)a1 + 6) = v172;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            break;
          default:
            uint64_t v20 = type metadata accessor for URL();
            (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
            uint64_t v21 = type metadata accessor for FileExportOperation.Move(0);
            uint64_t v22 = *(int *)(v21 + 20);
            uint64_t v23 = (void *)((char *)a1 + v22);
            uint64_t v24 = (uint64_t *)(a2 + v22);
            uint64_t v26 = *v24;
            uint64_t v25 = v24[1];
            *uint64_t v23 = v26;
            v23[1] = v25;
            uint64_t v27 = *(int *)(v21 + 24);
            long long v28 = (void *)((char *)a1 + v27);
            uint64_t v29 = (void *)(a2 + v27);
            uint64_t v30 = v29[1];
            *long long v28 = *v29;
            v28[1] = v30;
            swift_retain();
            swift_retain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v123 = (int *)type metadata accessor for FileExportOperation(0);
        uint64_t v173 = v123[5];
        v174 = (void *)((char *)a1 + v173);
        v175 = (void *)(a2 + v173);
        uint64_t v176 = v175[1];
        void *v174 = *v175;
        v174[1] = v176;
        uint64_t v177 = v123[6];
        v178 = (char *)a1 + v177;
        v179 = (const void *)(a2 + v177);
        uint64_t v180 = type metadata accessor for URL();
        uint64_t v181 = *(void *)(v180 - 8);
        v182 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v181 + 48);
        swift_bridgeObjectRetain();
        if (v182(v179, 1, v180))
        {
          type metadata accessor for URL?(0);
          memcpy(v178, v179, *(void *)(*(void *)(v183 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v181 + 16))(v178, v179, v180);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v181 + 56))(v178, 0, 1, v180);
        }
        uint64_t v184 = v123[7];
        uint64_t v185 = (char *)a1 + v184;
        uint64_t v186 = a2 + v184;
        if (*(void *)(a2 + v184 + 24))
        {
          uint64_t v187 = *(void *)v186;
          uint64_t v188 = *(void *)(v186 + 8);
          char v189 = *(unsigned char *)(v186 + 16);
          outlined copy of Text.Storage(*(void *)v186, v188, v189);
          *(void *)uint64_t v185 = v187;
          *((void *)v185 + 1) = v188;
          v185[16] = v189;
          *((void *)v185 + 3) = *(void *)(v186 + 24);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v190 = *(_OWORD *)(v186 + 16);
          *(_OWORD *)uint64_t v185 = *(_OWORD *)v186;
          *((_OWORD *)v185 + 1) = v190;
        }
        uint64_t v191 = v123[8];
        char v192 = (char *)a1 + v191;
        uint64_t v193 = a2 + v191;
        if (*(void *)(a2 + v191 + 24))
        {
          uint64_t v194 = *(void *)v193;
          uint64_t v195 = *(void *)(v193 + 8);
          char v196 = *(unsigned char *)(v193 + 16);
          outlined copy of Text.Storage(*(void *)v193, v195, v196);
          *(void *)char v192 = v194;
          *((void *)v192 + 1) = v195;
          v192[16] = v196;
          *((void *)v192 + 3) = *(void *)(v193 + 24);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v197 = *(_OWORD *)(v193 + 16);
          *(_OWORD *)char v192 = *(_OWORD *)v193;
          *((_OWORD *)v192 + 1) = v197;
        }
        uint64_t v198 = v123[9];
        v199 = (char *)a1 + v198;
        uint64_t v200 = a2 + v198;
        if (*(void *)(a2 + v198 + 24))
        {
          uint64_t v201 = *(void *)v200;
          uint64_t v202 = *(void *)(v200 + 8);
          char v203 = *(unsigned char *)(v200 + 16);
          outlined copy of Text.Storage(*(void *)v200, v202, v203);
          *(void *)v199 = v201;
          *((void *)v199 + 1) = v202;
          v199[16] = v203;
          *((void *)v199 + 3) = *(void *)(v200 + 24);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v204 = *(_OWORD *)(v200 + 16);
          *(_OWORD *)v199 = *(_OWORD *)v200;
          *((_OWORD *)v199 + 1) = v204;
        }
        uint64_t v205 = v123[10];
        char v157 = (char *)a1 + v205;
        long long v158 = (const void *)(a2 + v205);
        type metadata accessor for Predicate<Pack{URL}>();
        uint64_t v160 = v206;
        uint64_t v161 = *(void *)(v206 - 8);
        if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v161 + 48))(v158, 1, v206)) {
          goto LABEL_76;
        }
        goto LABEL_75;
      }
      uint64_t v40 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v40;
      long long v32 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v41 = v32[5];
      long long v42 = (char *)a1 + v41;
      long long v43 = (const void *)(a2 + v41);
      uint64_t v44 = type metadata accessor for URL();
      uint64_t v45 = *(void *)(v44 - 8);
      uint64_t v46 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v45 + 48);
      swift_bridgeObjectRetain();
      if (v46(v43, 1, v44))
      {
        type metadata accessor for URL?(0);
        memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v45 + 16))(v42, v43, v44);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      }
      uint64_t v54 = v32[6];
      uint64_t v55 = (char *)a1 + v54;
      uint64_t v56 = a2 + v54;
      if (*(void *)(a2 + v54 + 24))
      {
        uint64_t v57 = *(void *)v56;
        uint64_t v58 = *(void *)(v56 + 8);
        char v59 = *(unsigned char *)(v56 + 16);
        outlined copy of Text.Storage(*(void *)v56, v58, v59);
        *(void *)uint64_t v55 = v57;
        *((void *)v55 + 1) = v58;
        v55[16] = v59;
        *((void *)v55 + 3) = *(void *)(v56 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v67 = *(_OWORD *)(v56 + 16);
        *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
        *((_OWORD *)v55 + 1) = v67;
      }
      uint64_t v68 = v32[7];
      char v69 = (char *)a1 + v68;
      uint64_t v70 = a2 + v68;
      if (*(void *)(a2 + v68 + 24))
      {
        uint64_t v71 = *(void *)v70;
        uint64_t v72 = *(void *)(v70 + 8);
        char v73 = *(unsigned char *)(v70 + 16);
        outlined copy of Text.Storage(*(void *)v70, v72, v73);
        *(void *)char v69 = v71;
        *((void *)v69 + 1) = v72;
        v69[16] = v73;
        *((void *)v69 + 3) = *(void *)(v70 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v81 = *(_OWORD *)(v70 + 16);
        *(_OWORD *)char v69 = *(_OWORD *)v70;
        *((_OWORD *)v69 + 1) = v81;
      }
      uint64_t v82 = v32[8];
      uint64_t v83 = (char *)a1 + v82;
      uint64_t v84 = a2 + v82;
      if (*(void *)(a2 + v82 + 24))
      {
        uint64_t v85 = *(void *)v84;
        uint64_t v86 = *(void *)(v84 + 8);
        char v87 = *(unsigned char *)(v84 + 16);
        outlined copy of Text.Storage(*(void *)v84, v86, v87);
        *(void *)uint64_t v83 = v85;
        *((void *)v83 + 1) = v86;
        v83[16] = v87;
        *((void *)v83 + 3) = *(void *)(v84 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v96 = *(_OWORD *)(v84 + 16);
        *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
        *((_OWORD *)v83 + 1) = v96;
      }
      *(void *)((char *)a1 + v32[9]) = *(void *)(a2 + v32[9]);
      *((unsigned char *)a1 + v32[10]) = *(unsigned char *)(a2 + v32[10]);
      uint64_t v97 = v32[11];
      uint64_t v90 = (char *)a1 + v97;
      char v91 = (const void *)(a2 + v97);
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v93 = v98;
      uint64_t v94 = *(void *)(v98 - 8);
      long long v99 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v94 + 48);
      swift_bridgeObjectRetain();
      if (v99(v91, 1, v93)) {
        goto LABEL_39;
      }
      goto LABEL_40;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for FileImportExportBridge.Presentation(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for FileExportOperation.Mode(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v112 = *(void *)(a2 + 32);
            long long v113 = *(_OWORD *)(a2 + 16);
            *a1 = *(_OWORD *)a2;
            a1[1] = v113;
            *((void *)a1 + 4) = v112;
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            break;
          case 2u:
            uint64_t v114 = *(void *)a2;
            uint64_t v115 = *(void *)(a2 + 8);
            uint64_t v116 = *(void *)(a2 + 16);
            uint64_t v117 = *(void *)(a2 + 24);
            char v118 = *(unsigned char *)(a2 + 32);
            outlined copy of FileExportOperation.Storage(*(void *)a2, v115, v116, v117, v118);
            *(void *)a1 = v114;
            *((void *)a1 + 1) = v115;
            *((void *)a1 + 2) = v116;
            *((void *)a1 + 3) = v117;
            *((unsigned char *)a1 + 32) = v118;
            uint64_t v119 = *(void *)(a2 + 48);
            *((void *)a1 + 5) = *(void *)(a2 + 40);
            *((void *)a1 + 6) = v119;
            *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)(a2 + 56);
            uint64_t v120 = *(void *)(a2 + 88);
            *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)(a2 + 72);
            *((void *)a1 + 11) = v120;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            break;
          case 3u:
            char v121 = *(unsigned char *)(a2 + 8);
            *(void *)a1 = *(void *)a2;
            *((unsigned char *)a1 + 8) = v121;
            uint64_t v122 = *(void *)(a2 + 48);
            long long v212 = *(_OWORD *)(a2 + 32);
            a1[1] = *(_OWORD *)(a2 + 16);
            a1[2] = v212;
            *((void *)a1 + 6) = v122;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            break;
          default:
            uint64_t v8 = type metadata accessor for URL();
            (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
            uint64_t v9 = type metadata accessor for FileExportOperation.Move(0);
            uint64_t v10 = *(int *)(v9 + 20);
            uint64_t v11 = (void *)((char *)a1 + v10);
            uint64_t v12 = (uint64_t *)(a2 + v10);
            uint64_t v14 = *v12;
            uint64_t v13 = v12[1];
            *uint64_t v11 = v14;
            v11[1] = v13;
            uint64_t v15 = *(int *)(v9 + 24);
            uint64_t v16 = (void *)((char *)a1 + v15);
            uint64_t v17 = (void *)(a2 + v15);
            uint64_t v18 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v18;
            swift_retain();
            swift_retain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v123 = (int *)type metadata accessor for FileExportOperation(0);
        uint64_t v124 = v123[5];
        long long v125 = (void *)((char *)a1 + v124);
        uint64_t v126 = (void *)(a2 + v124);
        uint64_t v127 = v126[1];
        *long long v125 = *v126;
        v125[1] = v127;
        uint64_t v128 = v123[6];
        uint64_t v129 = (char *)a1 + v128;
        uint64_t v130 = (const void *)(a2 + v128);
        uint64_t v131 = type metadata accessor for URL();
        uint64_t v132 = *(void *)(v131 - 8);
        uint64_t v133 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v132 + 48);
        swift_bridgeObjectRetain();
        if (v133(v130, 1, v131))
        {
          type metadata accessor for URL?(0);
          memcpy(v129, v130, *(void *)(*(void *)(v134 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, const void *, uint64_t))(v132 + 16))(v129, v130, v131);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v132 + 56))(v129, 0, 1, v131);
        }
        uint64_t v135 = v123[7];
        uint64_t v136 = (char *)a1 + v135;
        uint64_t v137 = a2 + v135;
        if (*(void *)(a2 + v135 + 24))
        {
          uint64_t v138 = *(void *)v137;
          uint64_t v139 = *(void *)(v137 + 8);
          char v140 = *(unsigned char *)(v137 + 16);
          outlined copy of Text.Storage(*(void *)v137, v139, v140);
          *(void *)uint64_t v136 = v138;
          *((void *)v136 + 1) = v139;
          v136[16] = v140;
          *((void *)v136 + 3) = *(void *)(v137 + 24);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v141 = *(_OWORD *)(v137 + 16);
          *(_OWORD *)uint64_t v136 = *(_OWORD *)v137;
          *((_OWORD *)v136 + 1) = v141;
        }
        uint64_t v142 = v123[8];
        uint64_t v143 = (char *)a1 + v142;
        uint64_t v144 = a2 + v142;
        if (*(void *)(a2 + v142 + 24))
        {
          uint64_t v145 = *(void *)v144;
          uint64_t v146 = *(void *)(v144 + 8);
          char v147 = *(unsigned char *)(v144 + 16);
          outlined copy of Text.Storage(*(void *)v144, v146, v147);
          *(void *)uint64_t v143 = v145;
          *((void *)v143 + 1) = v146;
          v143[16] = v147;
          *((void *)v143 + 3) = *(void *)(v144 + 24);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v148 = *(_OWORD *)(v144 + 16);
          *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
          *((_OWORD *)v143 + 1) = v148;
        }
        uint64_t v149 = v123[9];
        char v150 = (char *)a1 + v149;
        uint64_t v151 = a2 + v149;
        if (*(void *)(a2 + v149 + 24))
        {
          uint64_t v152 = *(void *)v151;
          uint64_t v153 = *(void *)(v151 + 8);
          char v154 = *(unsigned char *)(v151 + 16);
          outlined copy of Text.Storage(*(void *)v151, v153, v154);
          *(void *)char v150 = v152;
          *((void *)v150 + 1) = v153;
          v150[16] = v154;
          *((void *)v150 + 3) = *(void *)(v151 + 24);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v155 = *(_OWORD *)(v151 + 16);
          *(_OWORD *)char v150 = *(_OWORD *)v151;
          *((_OWORD *)v150 + 1) = v155;
        }
        uint64_t v156 = v123[10];
        char v157 = (char *)a1 + v156;
        long long v158 = (const void *)(a2 + v156);
        type metadata accessor for Predicate<Pack{URL}>();
        uint64_t v160 = v159;
        uint64_t v161 = *(void *)(v159 - 8);
        if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v161 + 48))(v158, 1, v159))
        {
LABEL_76:
          (*(void (**)(char *, const void *, uint64_t))(v161 + 16))(v157, v158, v160);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v161 + 56))(v157, 0, 1, v160);
          goto LABEL_77;
        }
LABEL_75:
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v157, v158, *(void *)(*(void *)(v207 - 8) + 64));
LABEL_77:
        *((unsigned char *)a1 + v123[11]) = *(unsigned char *)(a2 + v123[11]);
        uint64_t v208 = v123[12];
        v209 = (char *)a1 + v208;
        uint64_t v210 = a2 + v208;
        *(void *)v209 = *(void *)v210;
        v209[8] = *(unsigned char *)(v210 + 8);
        goto LABEL_78;
      }
      uint64_t v31 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v31;
      long long v32 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v33 = v32[5];
      char v34 = (char *)a1 + v33;
      long long v35 = (const void *)(a2 + v33);
      uint64_t v36 = type metadata accessor for URL();
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v37 + 48);
      swift_bridgeObjectRetain();
      if (v38(v35, 1, v36))
      {
        type metadata accessor for URL?(0);
        memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(v37 + 16))(v34, v35, v36);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      uint64_t v48 = v32[6];
      uint64_t v49 = (char *)a1 + v48;
      uint64_t v50 = a2 + v48;
      if (*(void *)(a2 + v48 + 24))
      {
        uint64_t v51 = *(void *)v50;
        uint64_t v52 = *(void *)(v50 + 8);
        char v53 = *(unsigned char *)(v50 + 16);
        outlined copy of Text.Storage(*(void *)v50, v52, v53);
        *(void *)uint64_t v49 = v51;
        *((void *)v49 + 1) = v52;
        v49[16] = v53;
        *((void *)v49 + 3) = *(void *)(v50 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v60 = *(_OWORD *)(v50 + 16);
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
        *((_OWORD *)v49 + 1) = v60;
      }
      uint64_t v61 = v32[7];
      uint64_t v62 = (char *)a1 + v61;
      uint64_t v63 = a2 + v61;
      if (*(void *)(a2 + v61 + 24))
      {
        uint64_t v64 = *(void *)v63;
        uint64_t v65 = *(void *)(v63 + 8);
        char v66 = *(unsigned char *)(v63 + 16);
        outlined copy of Text.Storage(*(void *)v63, v65, v66);
        *(void *)uint64_t v62 = v64;
        *((void *)v62 + 1) = v65;
        v62[16] = v66;
        *((void *)v62 + 3) = *(void *)(v63 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v74 = *(_OWORD *)(v63 + 16);
        *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
        *((_OWORD *)v62 + 1) = v74;
      }
      uint64_t v75 = v32[8];
      uint64_t v76 = (char *)a1 + v75;
      uint64_t v77 = a2 + v75;
      if (*(void *)(a2 + v75 + 24))
      {
        uint64_t v78 = *(void *)v77;
        uint64_t v79 = *(void *)(v77 + 8);
        char v80 = *(unsigned char *)(v77 + 16);
        outlined copy of Text.Storage(*(void *)v77, v79, v80);
        *(void *)uint64_t v76 = v78;
        *((void *)v76 + 1) = v79;
        v76[16] = v80;
        *((void *)v76 + 3) = *(void *)(v77 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v88 = *(_OWORD *)(v77 + 16);
        *(_OWORD *)uint64_t v76 = *(_OWORD *)v77;
        *((_OWORD *)v76 + 1) = v88;
      }
      *(void *)((char *)a1 + v32[9]) = *(void *)(a2 + v32[9]);
      *((unsigned char *)a1 + v32[10]) = *(unsigned char *)(a2 + v32[10]);
      uint64_t v89 = v32[11];
      uint64_t v90 = (char *)a1 + v89;
      char v91 = (const void *)(a2 + v89);
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v93 = v92;
      uint64_t v94 = *(void *)(v92 - 8);
      uint64_t v95 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v94 + 48);
      swift_bridgeObjectRetain();
      if (v95(v91, 1, v93))
      {
LABEL_39:
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v90, v91, *(void *)(*(void *)(v100 - 8) + 64));
LABEL_41:
        *((unsigned char *)a1 + v32[12]) = *(unsigned char *)(a2 + v32[12]);
        uint64_t v101 = v32[13];
        uint64_t v102 = (char *)a1 + v101;
        uint64_t v103 = a2 + v101;
        *(void *)uint64_t v102 = *(void *)v103;
        v102[8] = *(unsigned char *)(v103 + 8);
        uint64_t v104 = v32[14];
        char v105 = (void *)((char *)a1 + v104);
        long long v106 = (void *)(a2 + v104);
        uint64_t v107 = v106[1];
        *char v105 = *v106;
        v105[1] = v107;
        uint64_t v108 = v32[15];
        char v109 = (void *)((char *)a1 + v108);
        uint64_t v110 = (void *)(a2 + v108);
        uint64_t v111 = v110[1];
        *char v109 = *v110;
        v109[1] = v111;
        swift_retain();
        swift_retain();
LABEL_78:
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_40:
      (*(void (**)(char *, const void *, uint64_t))(v94 + 16))(v90, v91, v93);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v90, 0, 1, v93);
      goto LABEL_41;
    }
    memcpy(a1, (const void *)a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t destroy for FileImportExportBridge.PresentationState.UpdateEffect(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
LABEL_7:
          uint64_t v3 = type metadata accessor for URL();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
          type metadata accessor for FileExportOperation.Move(0);
          swift_release();
          goto LABEL_24;
        case 1u:
LABEL_21:
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_24;
        case 2u:
LABEL_22:
          outlined consume of FileExportOperation.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_24;
        case 3u:
LABEL_23:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_24:
          swift_release();
          break;
        default:
          goto LABEL_25;
      }
      goto LABEL_25;
    }
  }
  else
  {
    if (result) {
      return result;
    }
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          goto LABEL_7;
        case 1u:
          goto LABEL_21;
        case 2u:
          goto LABEL_22;
        case 3u:
          goto LABEL_23;
        default:
          break;
      }
LABEL_25:
      uint64_t v15 = (int *)type metadata accessor for FileExportOperation(0);
      swift_bridgeObjectRelease();
      uint64_t v16 = a1 + v15[6];
      uint64_t v17 = type metadata accessor for URL();
      uint64_t v18 = *(void *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
      }
      uint64_t v19 = a1 + v15[7];
      if (*(void *)(v19 + 24))
      {
        outlined consume of Text.Storage(*(void *)v19, *(void *)(v19 + 8), *(unsigned char *)(v19 + 16));
        swift_bridgeObjectRelease();
      }
      uint64_t v20 = a1 + v15[8];
      if (*(void *)(v20 + 24))
      {
        outlined consume of Text.Storage(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
        swift_bridgeObjectRelease();
      }
      uint64_t v21 = a1 + v15[9];
      if (*(void *)(v21 + 24))
      {
        outlined consume of Text.Storage(*(void *)v21, *(void *)(v21 + 8), *(unsigned char *)(v21 + 16));
        swift_bridgeObjectRelease();
      }
      uint64_t v22 = a1 + v15[10];
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v24 = v23;
      uint64_t v26 = *(void *)(v23 - 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v22, 1, v23);
      if (!result)
      {
        uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v26 + 8);
        return v25(v22, v24);
      }
      return result;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v4 = (int *)type metadata accessor for FileImportOperation(0);
  uint64_t v5 = a1 + v4[5];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v8 = a1 + v4[6];
  if (*(void *)(v8 + 24))
  {
    outlined consume of Text.Storage(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1 + v4[7];
  if (*(void *)(v9 + 24))
  {
    outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + v4[8];
  if (*(void *)(v10 + 24))
  {
    outlined consume of Text.Storage(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = a1 + v4[11];
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, v13);
  }
  swift_release();

  return swift_release();
}

_OWORD *initializeWithCopy for FileImportExportBridge.PresentationState.UpdateEffect(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v160 = a2[4];
          long long v161 = *((_OWORD *)a2 + 1);
          *a1 = *(_OWORD *)a2;
          a1[1] = v161;
          *((void *)a1 + 4) = v160;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          break;
        case 2u:
          uint64_t v162 = *a2;
          uint64_t v163 = a2[1];
          uint64_t v164 = a2[2];
          uint64_t v165 = a2[3];
          char v166 = *((unsigned char *)a2 + 32);
          outlined copy of FileExportOperation.Storage(*a2, v163, v164, v165, v166);
          *(void *)a1 = v162;
          *((void *)a1 + 1) = v163;
          *((void *)a1 + 2) = v164;
          *((void *)a1 + 3) = v165;
          *((unsigned char *)a1 + 32) = v166;
          uint64_t v167 = a2[6];
          *((void *)a1 + 5) = a2[5];
          *((void *)a1 + 6) = v167;
          *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)(a2 + 7);
          uint64_t v168 = a2[11];
          *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)(a2 + 9);
          *((void *)a1 + 11) = v168;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          break;
        case 3u:
          char v169 = *((unsigned char *)a2 + 8);
          *(void *)a1 = *a2;
          *((unsigned char *)a1 + 8) = v169;
          uint64_t v170 = a2[6];
          long long v211 = *((_OWORD *)a2 + 2);
          a1[1] = *((_OWORD *)a2 + 1);
          a1[2] = v211;
          *((void *)a1 + 6) = v170;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          break;
        default:
          uint64_t v18 = type metadata accessor for URL();
          (*(void (**)(_OWORD *, uint64_t *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
          uint64_t v19 = type metadata accessor for FileExportOperation.Move(0);
          uint64_t v20 = *(int *)(v19 + 20);
          uint64_t v21 = (void *)((char *)a1 + v20);
          uint64_t v22 = (uint64_t *)((char *)a2 + v20);
          uint64_t v24 = *v22;
          uint64_t v23 = v22[1];
          *uint64_t v21 = v24;
          v21[1] = v23;
          uint64_t v25 = *(int *)(v19 + 24);
          uint64_t v26 = (void *)((char *)a1 + v25);
          uint64_t v27 = (uint64_t *)((char *)a2 + v25);
          uint64_t v28 = v27[1];
          void *v26 = *v27;
          v26[1] = v28;
          swift_retain();
          swift_retain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      char v121 = (int *)type metadata accessor for FileExportOperation(0);
      uint64_t v171 = v121[5];
      uint64_t v172 = (void *)((char *)a1 + v171);
      uint64_t v173 = (uint64_t *)((char *)a2 + v171);
      uint64_t v174 = v173[1];
      *uint64_t v172 = *v173;
      v172[1] = v174;
      uint64_t v175 = v121[6];
      uint64_t v176 = (char *)a1 + v175;
      uint64_t v177 = (char *)a2 + v175;
      uint64_t v178 = type metadata accessor for URL();
      uint64_t v179 = *(void *)(v178 - 8);
      uint64_t v180 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v179 + 48);
      swift_bridgeObjectRetain();
      if (v180(v177, 1, v178))
      {
        type metadata accessor for URL?(0);
        memcpy(v176, v177, *(void *)(*(void *)(v181 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v179 + 16))(v176, v177, v178);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v179 + 56))(v176, 0, 1, v178);
      }
      uint64_t v182 = v121[7];
      uint64_t v183 = (char *)a1 + v182;
      uint64_t v184 = (uint64_t)a2 + v182;
      if (*(uint64_t *)((char *)a2 + v182 + 24))
      {
        uint64_t v185 = *(void *)v184;
        uint64_t v186 = *(void *)(v184 + 8);
        char v187 = *(unsigned char *)(v184 + 16);
        outlined copy of Text.Storage(*(void *)v184, v186, v187);
        *(void *)uint64_t v183 = v185;
        *((void *)v183 + 1) = v186;
        v183[16] = v187;
        *((void *)v183 + 3) = *(void *)(v184 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v188 = *(_OWORD *)(v184 + 16);
        *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
        *((_OWORD *)v183 + 1) = v188;
      }
      uint64_t v189 = v121[8];
      long long v190 = (char *)a1 + v189;
      uint64_t v191 = (uint64_t)a2 + v189;
      if (*(uint64_t *)((char *)a2 + v189 + 24))
      {
        uint64_t v192 = *(void *)v191;
        uint64_t v193 = *(void *)(v191 + 8);
        char v194 = *(unsigned char *)(v191 + 16);
        outlined copy of Text.Storage(*(void *)v191, v193, v194);
        *(void *)long long v190 = v192;
        *((void *)v190 + 1) = v193;
        v190[16] = v194;
        *((void *)v190 + 3) = *(void *)(v191 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v195 = *(_OWORD *)(v191 + 16);
        *(_OWORD *)long long v190 = *(_OWORD *)v191;
        *((_OWORD *)v190 + 1) = v195;
      }
      uint64_t v196 = v121[9];
      long long v197 = (char *)a1 + v196;
      uint64_t v198 = (uint64_t)a2 + v196;
      if (*(uint64_t *)((char *)a2 + v196 + 24))
      {
        uint64_t v199 = *(void *)v198;
        uint64_t v200 = *(void *)(v198 + 8);
        char v201 = *(unsigned char *)(v198 + 16);
        outlined copy of Text.Storage(*(void *)v198, v200, v201);
        *(void *)long long v197 = v199;
        *((void *)v197 + 1) = v200;
        v197[16] = v201;
        *((void *)v197 + 3) = *(void *)(v198 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v202 = *(_OWORD *)(v198 + 16);
        *(_OWORD *)long long v197 = *(_OWORD *)v198;
        *((_OWORD *)v197 + 1) = v202;
      }
      uint64_t v203 = v121[10];
      long long v155 = (char *)a1 + v203;
      uint64_t v156 = (char *)a2 + v203;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v158 = v204;
      uint64_t v159 = *(void *)(v204 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v156, 1, v204)) {
        goto LABEL_74;
      }
      goto LABEL_73;
    }
    uint64_t v38 = a2[1];
    *(void *)a1 = *a2;
    *((void *)a1 + 1) = v38;
    uint64_t v30 = (int *)type metadata accessor for FileImportOperation(0);
    uint64_t v39 = v30[5];
    uint64_t v40 = (char *)a1 + v39;
    uint64_t v41 = (char *)a2 + v39;
    uint64_t v42 = type metadata accessor for URL();
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    swift_bridgeObjectRetain();
    if (v44(v41, 1, v42))
    {
      type metadata accessor for URL?(0);
      memcpy(v40, v41, *(void *)(*(void *)(v45 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    uint64_t v52 = v30[6];
    char v53 = (char *)a1 + v52;
    uint64_t v54 = (uint64_t)a2 + v52;
    if (*(uint64_t *)((char *)a2 + v52 + 24))
    {
      uint64_t v55 = *(void *)v54;
      uint64_t v56 = *(void *)(v54 + 8);
      char v57 = *(unsigned char *)(v54 + 16);
      outlined copy of Text.Storage(*(void *)v54, v56, v57);
      *(void *)char v53 = v55;
      *((void *)v53 + 1) = v56;
      v53[16] = v57;
      *((void *)v53 + 3) = *(void *)(v54 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v65 = *(_OWORD *)(v54 + 16);
      *(_OWORD *)char v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v65;
    }
    uint64_t v66 = v30[7];
    long long v67 = (char *)a1 + v66;
    uint64_t v68 = (uint64_t)a2 + v66;
    if (*(uint64_t *)((char *)a2 + v66 + 24))
    {
      uint64_t v69 = *(void *)v68;
      uint64_t v70 = *(void *)(v68 + 8);
      char v71 = *(unsigned char *)(v68 + 16);
      outlined copy of Text.Storage(*(void *)v68, v70, v71);
      *(void *)long long v67 = v69;
      *((void *)v67 + 1) = v70;
      v67[16] = v71;
      *((void *)v67 + 3) = *(void *)(v68 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v79 = *(_OWORD *)(v68 + 16);
      *(_OWORD *)long long v67 = *(_OWORD *)v68;
      *((_OWORD *)v67 + 1) = v79;
    }
    uint64_t v80 = v30[8];
    long long v81 = (char *)a1 + v80;
    uint64_t v82 = (uint64_t)a2 + v80;
    if (*(uint64_t *)((char *)a2 + v80 + 24))
    {
      uint64_t v83 = *(void *)v82;
      uint64_t v84 = *(void *)(v82 + 8);
      char v85 = *(unsigned char *)(v82 + 16);
      outlined copy of Text.Storage(*(void *)v82, v84, v85);
      *(void *)long long v81 = v83;
      *((void *)v81 + 1) = v84;
      v81[16] = v85;
      *((void *)v81 + 3) = *(void *)(v82 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v94 = *(_OWORD *)(v82 + 16);
      *(_OWORD *)long long v81 = *(_OWORD *)v82;
      *((_OWORD *)v81 + 1) = v94;
    }
    *(void *)((char *)a1 + v30[9]) = *(uint64_t *)((char *)a2 + v30[9]);
    *((unsigned char *)a1 + v30[10]) = *((unsigned char *)a2 + v30[10]);
    uint64_t v95 = v30[11];
    long long v88 = (char *)a1 + v95;
    uint64_t v89 = (char *)a2 + v95;
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v91 = v96;
    uint64_t v92 = *(void *)(v96 - 8);
    uint64_t v97 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
    swift_bridgeObjectRetain();
    if (v97(v89, 1, v91)) {
      goto LABEL_37;
    }
    goto LABEL_38;
  }
  if (!EnumCaseMultiPayload)
  {
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          uint64_t v110 = a2[4];
          long long v111 = *((_OWORD *)a2 + 1);
          *a1 = *(_OWORD *)a2;
          a1[1] = v111;
          *((void *)a1 + 4) = v110;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          break;
        case 2u:
          uint64_t v112 = *a2;
          uint64_t v113 = a2[1];
          uint64_t v114 = a2[2];
          uint64_t v115 = a2[3];
          char v116 = *((unsigned char *)a2 + 32);
          outlined copy of FileExportOperation.Storage(*a2, v113, v114, v115, v116);
          *(void *)a1 = v112;
          *((void *)a1 + 1) = v113;
          *((void *)a1 + 2) = v114;
          *((void *)a1 + 3) = v115;
          *((unsigned char *)a1 + 32) = v116;
          uint64_t v117 = a2[6];
          *((void *)a1 + 5) = a2[5];
          *((void *)a1 + 6) = v117;
          *(_OWORD *)((char *)a1 + 56) = *(_OWORD *)(a2 + 7);
          uint64_t v118 = a2[11];
          *(_OWORD *)((char *)a1 + 72) = *(_OWORD *)(a2 + 9);
          *((void *)a1 + 11) = v118;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          break;
        case 3u:
          char v119 = *((unsigned char *)a2 + 8);
          *(void *)a1 = *a2;
          *((unsigned char *)a1 + 8) = v119;
          uint64_t v120 = a2[6];
          long long v210 = *((_OWORD *)a2 + 2);
          a1[1] = *((_OWORD *)a2 + 1);
          a1[2] = v210;
          *((void *)a1 + 6) = v120;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          break;
        default:
          uint64_t v7 = type metadata accessor for URL();
          (*(void (**)(_OWORD *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
          uint64_t v8 = type metadata accessor for FileExportOperation.Move(0);
          uint64_t v9 = *(int *)(v8 + 20);
          uint64_t v10 = (void *)((char *)a1 + v9);
          uint64_t v11 = (uint64_t *)((char *)a2 + v9);
          uint64_t v13 = *v11;
          uint64_t v12 = v11[1];
          *uint64_t v10 = v13;
          v10[1] = v12;
          uint64_t v14 = *(int *)(v8 + 24);
          uint64_t v15 = (void *)((char *)a1 + v14);
          uint64_t v16 = (uint64_t *)((char *)a2 + v14);
          uint64_t v17 = v16[1];
          void *v15 = *v16;
          v15[1] = v17;
          swift_retain();
          swift_retain();
          break;
      }
      swift_storeEnumTagMultiPayload();
      char v121 = (int *)type metadata accessor for FileExportOperation(0);
      uint64_t v122 = v121[5];
      uint64_t v123 = (void *)((char *)a1 + v122);
      uint64_t v124 = (uint64_t *)((char *)a2 + v122);
      uint64_t v125 = v124[1];
      *uint64_t v123 = *v124;
      v123[1] = v125;
      uint64_t v126 = v121[6];
      uint64_t v127 = (char *)a1 + v126;
      uint64_t v128 = (char *)a2 + v126;
      uint64_t v129 = type metadata accessor for URL();
      uint64_t v130 = *(void *)(v129 - 8);
      uint64_t v131 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48);
      swift_bridgeObjectRetain();
      if (v131(v128, 1, v129))
      {
        type metadata accessor for URL?(0);
        memcpy(v127, v128, *(void *)(*(void *)(v132 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v127, v128, v129);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
      }
      uint64_t v133 = v121[7];
      uint64_t v134 = (char *)a1 + v133;
      uint64_t v135 = (uint64_t)a2 + v133;
      if (*(uint64_t *)((char *)a2 + v133 + 24))
      {
        uint64_t v136 = *(void *)v135;
        uint64_t v137 = *(void *)(v135 + 8);
        char v138 = *(unsigned char *)(v135 + 16);
        outlined copy of Text.Storage(*(void *)v135, v137, v138);
        *(void *)uint64_t v134 = v136;
        *((void *)v134 + 1) = v137;
        v134[16] = v138;
        *((void *)v134 + 3) = *(void *)(v135 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v139 = *(_OWORD *)(v135 + 16);
        *(_OWORD *)uint64_t v134 = *(_OWORD *)v135;
        *((_OWORD *)v134 + 1) = v139;
      }
      uint64_t v140 = v121[8];
      long long v141 = (char *)a1 + v140;
      uint64_t v142 = (uint64_t)a2 + v140;
      if (*(uint64_t *)((char *)a2 + v140 + 24))
      {
        uint64_t v143 = *(void *)v142;
        uint64_t v144 = *(void *)(v142 + 8);
        char v145 = *(unsigned char *)(v142 + 16);
        outlined copy of Text.Storage(*(void *)v142, v144, v145);
        *(void *)long long v141 = v143;
        *((void *)v141 + 1) = v144;
        v141[16] = v145;
        *((void *)v141 + 3) = *(void *)(v142 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v146 = *(_OWORD *)(v142 + 16);
        *(_OWORD *)long long v141 = *(_OWORD *)v142;
        *((_OWORD *)v141 + 1) = v146;
      }
      uint64_t v147 = v121[9];
      long long v148 = (char *)a1 + v147;
      uint64_t v149 = (uint64_t)a2 + v147;
      if (*(uint64_t *)((char *)a2 + v147 + 24))
      {
        uint64_t v150 = *(void *)v149;
        uint64_t v151 = *(void *)(v149 + 8);
        char v152 = *(unsigned char *)(v149 + 16);
        outlined copy of Text.Storage(*(void *)v149, v151, v152);
        *(void *)long long v148 = v150;
        *((void *)v148 + 1) = v151;
        v148[16] = v152;
        *((void *)v148 + 3) = *(void *)(v149 + 24);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v153 = *(_OWORD *)(v149 + 16);
        *(_OWORD *)long long v148 = *(_OWORD *)v149;
        *((_OWORD *)v148 + 1) = v153;
      }
      uint64_t v154 = v121[10];
      long long v155 = (char *)a1 + v154;
      uint64_t v156 = (char *)a2 + v154;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v158 = v157;
      uint64_t v159 = *(void *)(v157 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v156, 1, v157))
      {
LABEL_74:
        (*(void (**)(char *, char *, uint64_t))(v159 + 16))(v155, v156, v158);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v155, 0, 1, v158);
        goto LABEL_75;
      }
LABEL_73:
      _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
      memcpy(v155, v156, *(void *)(*(void *)(v205 - 8) + 64));
LABEL_75:
      *((unsigned char *)a1 + v121[11]) = *((unsigned char *)a2 + v121[11]);
      uint64_t v206 = v121[12];
      uint64_t v207 = (char *)a1 + v206;
      uint64_t v208 = (uint64_t)a2 + v206;
      *(void *)uint64_t v207 = *(void *)v208;
      v207[8] = *(unsigned char *)(v208 + 8);
      goto LABEL_76;
    }
    uint64_t v29 = a2[1];
    *(void *)a1 = *a2;
    *((void *)a1 + 1) = v29;
    uint64_t v30 = (int *)type metadata accessor for FileImportOperation(0);
    uint64_t v31 = v30[5];
    long long v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v34 = type metadata accessor for URL();
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
    swift_bridgeObjectRetain();
    if (v36(v33, 1, v34))
    {
      type metadata accessor for URL?(0);
      memcpy(v32, v33, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    uint64_t v46 = v30[6];
    uint64_t v47 = (char *)a1 + v46;
    uint64_t v48 = (uint64_t)a2 + v46;
    if (*(uint64_t *)((char *)a2 + v46 + 24))
    {
      uint64_t v49 = *(void *)v48;
      uint64_t v50 = *(void *)(v48 + 8);
      char v51 = *(unsigned char *)(v48 + 16);
      outlined copy of Text.Storage(*(void *)v48, v50, v51);
      *(void *)uint64_t v47 = v49;
      *((void *)v47 + 1) = v50;
      v47[16] = v51;
      *((void *)v47 + 3) = *(void *)(v48 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v58 = *(_OWORD *)(v48 + 16);
      *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
      *((_OWORD *)v47 + 1) = v58;
    }
    uint64_t v59 = v30[7];
    long long v60 = (char *)a1 + v59;
    uint64_t v61 = (uint64_t)a2 + v59;
    if (*(uint64_t *)((char *)a2 + v59 + 24))
    {
      uint64_t v62 = *(void *)v61;
      uint64_t v63 = *(void *)(v61 + 8);
      char v64 = *(unsigned char *)(v61 + 16);
      outlined copy of Text.Storage(*(void *)v61, v63, v64);
      *(void *)long long v60 = v62;
      *((void *)v60 + 1) = v63;
      v60[16] = v64;
      *((void *)v60 + 3) = *(void *)(v61 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v72 = *(_OWORD *)(v61 + 16);
      *(_OWORD *)long long v60 = *(_OWORD *)v61;
      *((_OWORD *)v60 + 1) = v72;
    }
    uint64_t v73 = v30[8];
    long long v74 = (char *)a1 + v73;
    uint64_t v75 = (uint64_t)a2 + v73;
    if (*(uint64_t *)((char *)a2 + v73 + 24))
    {
      uint64_t v76 = *(void *)v75;
      uint64_t v77 = *(void *)(v75 + 8);
      char v78 = *(unsigned char *)(v75 + 16);
      outlined copy of Text.Storage(*(void *)v75, v77, v78);
      *(void *)long long v74 = v76;
      *((void *)v74 + 1) = v77;
      v74[16] = v78;
      *((void *)v74 + 3) = *(void *)(v75 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v86 = *(_OWORD *)(v75 + 16);
      *(_OWORD *)long long v74 = *(_OWORD *)v75;
      *((_OWORD *)v74 + 1) = v86;
    }
    *(void *)((char *)a1 + v30[9]) = *(uint64_t *)((char *)a2 + v30[9]);
    *((unsigned char *)a1 + v30[10]) = *((unsigned char *)a2 + v30[10]);
    uint64_t v87 = v30[11];
    long long v88 = (char *)a1 + v87;
    uint64_t v89 = (char *)a2 + v87;
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v91 = v90;
    uint64_t v92 = *(void *)(v90 - 8);
    uint64_t v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48);
    swift_bridgeObjectRetain();
    if (v93(v89, 1, v91))
    {
LABEL_37:
      _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
      memcpy(v88, v89, *(void *)(*(void *)(v98 - 8) + 64));
LABEL_39:
      *((unsigned char *)a1 + v30[12]) = *((unsigned char *)a2 + v30[12]);
      uint64_t v99 = v30[13];
      uint64_t v100 = (char *)a1 + v99;
      uint64_t v101 = (uint64_t)a2 + v99;
      *(void *)uint64_t v100 = *(void *)v101;
      v100[8] = *(unsigned char *)(v101 + 8);
      uint64_t v102 = v30[14];
      uint64_t v103 = (void *)((char *)a1 + v102);
      uint64_t v104 = (uint64_t *)((char *)a2 + v102);
      uint64_t v105 = v104[1];
      void *v103 = *v104;
      v103[1] = v105;
      uint64_t v106 = v30[15];
      uint64_t v107 = (void *)((char *)a1 + v106);
      uint64_t v108 = (uint64_t *)((char *)a2 + v106);
      uint64_t v109 = v108[1];
      void *v107 = *v108;
      v107[1] = v109;
      swift_retain();
      swift_retain();
LABEL_76:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return a1;
    }
LABEL_38:
    (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v88, v89, v91);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(v88, 0, 1, v91);
    goto LABEL_39;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t *assignWithCopy for FileImportExportBridge.PresentationState.UpdateEffect(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of FileImportExportBridge.Presentation((uint64_t)a1, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for FileImportExportBridge.Presentation(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for FileExportOperation.Mode(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            *a1 = *a2;
            uint64_t v157 = a2[2];
            a1[1] = a2[1];
            a1[2] = v157;
            uint64_t v158 = a2[4];
            a1[3] = a2[3];
            a1[4] = v158;
            goto LABEL_64;
          case 2u:
            uint64_t v159 = *a2;
            uint64_t v160 = a2[1];
            uint64_t v161 = a2[2];
            uint64_t v162 = a2[3];
            char v163 = *((unsigned char *)a2 + 32);
            outlined copy of FileExportOperation.Storage(*a2, v160, v161, v162, v163);
            *a1 = v159;
            a1[1] = v160;
            a1[2] = v161;
            a1[3] = v162;
            *((unsigned char *)a1 + 32) = v163;
            a1[5] = a2[5];
            a1[6] = a2[6];
            a1[7] = a2[7];
            uint64_t v164 = a2[9];
            a1[8] = a2[8];
            a1[9] = v164;
            uint64_t v165 = a2[11];
            a1[10] = a2[10];
            a1[11] = v165;
            goto LABEL_63;
          case 3u:
            char v166 = *((unsigned char *)a2 + 8);
            *a1 = *a2;
            *((unsigned char *)a1 + 8) = v166;
            a1[2] = a2[2];
            uint64_t v167 = a2[4];
            a1[3] = a2[3];
            a1[4] = v167;
            uint64_t v168 = a2[6];
            a1[5] = a2[5];
            a1[6] = v168;
LABEL_63:
            swift_bridgeObjectRetain();
LABEL_64:
            swift_bridgeObjectRetain();
            break;
          default:
            uint64_t v17 = type metadata accessor for URL();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
            uint64_t v18 = type metadata accessor for FileExportOperation.Move(0);
            uint64_t v19 = *(int *)(v18 + 20);
            uint64_t v20 = (uint64_t *)((char *)a1 + v19);
            uint64_t v21 = (uint64_t *)((char *)a2 + v19);
            uint64_t v22 = v21[1];
            *uint64_t v20 = *v21;
            v20[1] = v22;
            uint64_t v23 = *(int *)(v18 + 24);
            uint64_t v24 = (uint64_t *)((char *)a1 + v23);
            uint64_t v25 = (uint64_t *)((char *)a2 + v23);
            uint64_t v26 = v25[1];
            *uint64_t v24 = *v25;
            v24[1] = v26;
            break;
        }
        swift_retain();
        swift_retain();
        swift_storeEnumTagMultiPayload();
        char v119 = (int *)type metadata accessor for FileExportOperation(0);
        uint64_t v169 = v119[5];
        uint64_t v170 = (uint64_t *)((char *)a1 + v169);
        uint64_t v171 = (uint64_t *)((char *)a2 + v169);
        *uint64_t v170 = *v171;
        v170[1] = v171[1];
        uint64_t v172 = v119[6];
        uint64_t v173 = (char *)a1 + v172;
        uint64_t v174 = (char *)a2 + v172;
        uint64_t v175 = type metadata accessor for URL();
        uint64_t v176 = *(void *)(v175 - 8);
        uint64_t v177 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v176 + 48);
        swift_bridgeObjectRetain();
        if (v177(v174, 1, v175))
        {
          type metadata accessor for URL?(0);
          memcpy(v173, v174, *(void *)(*(void *)(v178 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v176 + 16))(v173, v174, v175);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, v175);
        }
        uint64_t v179 = v119[7];
        uint64_t v180 = (char *)a1 + v179;
        uint64_t v181 = (char *)a2 + v179;
        if (*(uint64_t *)((char *)a2 + v179 + 24))
        {
          uint64_t v182 = *(void *)v181;
          uint64_t v183 = *((void *)v181 + 1);
          char v184 = v181[16];
          outlined copy of Text.Storage(*(void *)v181, v183, v184);
          *(void *)uint64_t v180 = v182;
          *((void *)v180 + 1) = v183;
          v180[16] = v184;
          *((void *)v180 + 3) = *((void *)v181 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v185 = *((_OWORD *)v181 + 1);
          *(_OWORD *)uint64_t v180 = *(_OWORD *)v181;
          *((_OWORD *)v180 + 1) = v185;
        }
        uint64_t v186 = v119[8];
        char v187 = (char *)a1 + v186;
        long long v188 = (char *)a2 + v186;
        if (*(uint64_t *)((char *)a2 + v186 + 24))
        {
          uint64_t v189 = *(void *)v188;
          uint64_t v190 = *((void *)v188 + 1);
          char v191 = v188[16];
          outlined copy of Text.Storage(*(void *)v188, v190, v191);
          *(void *)char v187 = v189;
          *((void *)v187 + 1) = v190;
          v187[16] = v191;
          *((void *)v187 + 3) = *((void *)v188 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v192 = *((_OWORD *)v188 + 1);
          *(_OWORD *)char v187 = *(_OWORD *)v188;
          *((_OWORD *)v187 + 1) = v192;
        }
        uint64_t v193 = v119[9];
        char v194 = (char *)a1 + v193;
        long long v195 = (char *)a2 + v193;
        if (*(uint64_t *)((char *)a2 + v193 + 24))
        {
          uint64_t v196 = *(void *)v195;
          uint64_t v197 = *((void *)v195 + 1);
          char v198 = v195[16];
          outlined copy of Text.Storage(*(void *)v195, v197, v198);
          *(void *)char v194 = v196;
          *((void *)v194 + 1) = v197;
          v194[16] = v198;
          *((void *)v194 + 3) = *((void *)v195 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v199 = *((_OWORD *)v195 + 1);
          *(_OWORD *)char v194 = *(_OWORD *)v195;
          *((_OWORD *)v194 + 1) = v199;
        }
        uint64_t v200 = v119[10];
        char v152 = (char *)a1 + v200;
        long long v153 = (char *)a2 + v200;
        type metadata accessor for Predicate<Pack{URL}>();
        uint64_t v155 = v201;
        uint64_t v156 = *(void *)(v201 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v153, 1, v201)) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v27 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v35 = v27[5];
      uint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      uint64_t v38 = type metadata accessor for URL();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      swift_bridgeObjectRetain();
      if (v40(v37, 1, v38))
      {
        type metadata accessor for URL?(0);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v36, v37, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      uint64_t v48 = v27[6];
      uint64_t v49 = (char *)a1 + v48;
      uint64_t v50 = (char *)a2 + v48;
      if (*(uint64_t *)((char *)a2 + v48 + 24))
      {
        uint64_t v51 = *(void *)v50;
        uint64_t v52 = *((void *)v50 + 1);
        char v53 = v50[16];
        outlined copy of Text.Storage(*(void *)v50, v52, v53);
        *(void *)uint64_t v49 = v51;
        *((void *)v49 + 1) = v52;
        v49[16] = v53;
        *((void *)v49 + 3) = *((void *)v50 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v61 = *((_OWORD *)v50 + 1);
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
        *((_OWORD *)v49 + 1) = v61;
      }
      uint64_t v62 = v27[7];
      uint64_t v63 = (char *)a1 + v62;
      char v64 = (char *)a2 + v62;
      if (*(uint64_t *)((char *)a2 + v62 + 24))
      {
        uint64_t v65 = *(void *)v64;
        uint64_t v66 = *((void *)v64 + 1);
        char v67 = v64[16];
        outlined copy of Text.Storage(*(void *)v64, v66, v67);
        *(void *)uint64_t v63 = v65;
        *((void *)v63 + 1) = v66;
        v63[16] = v67;
        *((void *)v63 + 3) = *((void *)v64 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v75 = *((_OWORD *)v64 + 1);
        *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
        *((_OWORD *)v63 + 1) = v75;
      }
      uint64_t v76 = v27[8];
      uint64_t v77 = (char *)a1 + v76;
      char v78 = (char *)a2 + v76;
      if (*(uint64_t *)((char *)a2 + v76 + 24))
      {
        uint64_t v79 = *(void *)v78;
        uint64_t v80 = *((void *)v78 + 1);
        char v81 = v78[16];
        outlined copy of Text.Storage(*(void *)v78, v80, v81);
        *(void *)uint64_t v77 = v79;
        *((void *)v77 + 1) = v80;
        v77[16] = v81;
        *((void *)v77 + 3) = *((void *)v78 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v90 = *((_OWORD *)v78 + 1);
        *(_OWORD *)uint64_t v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v90;
      }
      *(uint64_t *)((char *)a1 + v27[9]) = *(uint64_t *)((char *)a2 + v27[9]);
      *((unsigned char *)a1 + v27[10]) = *((unsigned char *)a2 + v27[10]);
      uint64_t v91 = v27[11];
      uint64_t v84 = (char *)a1 + v91;
      char v85 = (char *)a2 + v91;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v87 = v92;
      uint64_t v88 = *(void *)(v92 - 8);
      uint64_t v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
      swift_bridgeObjectRetain();
      if (v93(v85, 1, v87)) {
        goto LABEL_38;
      }
      goto LABEL_39;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for FileImportExportBridge.Presentation(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for FileExportOperation.Mode(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            *a1 = *a2;
            uint64_t v107 = a2[2];
            a1[1] = a2[1];
            a1[2] = v107;
            uint64_t v108 = a2[4];
            a1[3] = a2[3];
            a1[4] = v108;
            goto LABEL_45;
          case 2u:
            uint64_t v109 = *a2;
            uint64_t v110 = a2[1];
            uint64_t v111 = a2[2];
            uint64_t v112 = a2[3];
            char v113 = *((unsigned char *)a2 + 32);
            outlined copy of FileExportOperation.Storage(*a2, v110, v111, v112, v113);
            *a1 = v109;
            a1[1] = v110;
            a1[2] = v111;
            a1[3] = v112;
            *((unsigned char *)a1 + 32) = v113;
            a1[5] = a2[5];
            a1[6] = a2[6];
            a1[7] = a2[7];
            uint64_t v114 = a2[9];
            a1[8] = a2[8];
            a1[9] = v114;
            uint64_t v115 = a2[11];
            a1[10] = a2[10];
            a1[11] = v115;
            goto LABEL_44;
          case 3u:
            char v116 = *((unsigned char *)a2 + 8);
            *a1 = *a2;
            *((unsigned char *)a1 + 8) = v116;
            a1[2] = a2[2];
            uint64_t v117 = a2[4];
            a1[3] = a2[3];
            a1[4] = v117;
            uint64_t v118 = a2[6];
            a1[5] = a2[5];
            a1[6] = v118;
LABEL_44:
            swift_bridgeObjectRetain();
LABEL_45:
            swift_bridgeObjectRetain();
            break;
          default:
            uint64_t v7 = type metadata accessor for URL();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
            uint64_t v8 = type metadata accessor for FileExportOperation.Move(0);
            uint64_t v9 = *(int *)(v8 + 20);
            uint64_t v10 = (uint64_t *)((char *)a1 + v9);
            uint64_t v11 = (uint64_t *)((char *)a2 + v9);
            uint64_t v12 = v11[1];
            *uint64_t v10 = *v11;
            v10[1] = v12;
            uint64_t v13 = *(int *)(v8 + 24);
            uint64_t v14 = (uint64_t *)((char *)a1 + v13);
            uint64_t v15 = (uint64_t *)((char *)a2 + v13);
            uint64_t v16 = v15[1];
            void *v14 = *v15;
            v14[1] = v16;
            break;
        }
        swift_retain();
        swift_retain();
        swift_storeEnumTagMultiPayload();
        char v119 = (int *)type metadata accessor for FileExportOperation(0);
        uint64_t v120 = v119[5];
        char v121 = (uint64_t *)((char *)a1 + v120);
        uint64_t v122 = (uint64_t *)((char *)a2 + v120);
        void *v121 = *v122;
        v121[1] = v122[1];
        uint64_t v123 = v119[6];
        uint64_t v124 = (char *)a1 + v123;
        uint64_t v125 = (char *)a2 + v123;
        uint64_t v126 = type metadata accessor for URL();
        uint64_t v127 = *(void *)(v126 - 8);
        uint64_t v128 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v127 + 48);
        swift_bridgeObjectRetain();
        if (v128(v125, 1, v126))
        {
          type metadata accessor for URL?(0);
          memcpy(v124, v125, *(void *)(*(void *)(v129 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v124, v125, v126);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v124, 0, 1, v126);
        }
        uint64_t v130 = v119[7];
        uint64_t v131 = (char *)a1 + v130;
        uint64_t v132 = (char *)a2 + v130;
        if (*(uint64_t *)((char *)a2 + v130 + 24))
        {
          uint64_t v133 = *(void *)v132;
          uint64_t v134 = *((void *)v132 + 1);
          char v135 = v132[16];
          outlined copy of Text.Storage(*(void *)v132, v134, v135);
          *(void *)uint64_t v131 = v133;
          *((void *)v131 + 1) = v134;
          v131[16] = v135;
          *((void *)v131 + 3) = *((void *)v132 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v136 = *((_OWORD *)v132 + 1);
          *(_OWORD *)uint64_t v131 = *(_OWORD *)v132;
          *((_OWORD *)v131 + 1) = v136;
        }
        uint64_t v137 = v119[8];
        char v138 = (char *)a1 + v137;
        long long v139 = (char *)a2 + v137;
        if (*(uint64_t *)((char *)a2 + v137 + 24))
        {
          uint64_t v140 = *(void *)v139;
          uint64_t v141 = *((void *)v139 + 1);
          char v142 = v139[16];
          outlined copy of Text.Storage(*(void *)v139, v141, v142);
          *(void *)char v138 = v140;
          *((void *)v138 + 1) = v141;
          v138[16] = v142;
          *((void *)v138 + 3) = *((void *)v139 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v143 = *((_OWORD *)v139 + 1);
          *(_OWORD *)char v138 = *(_OWORD *)v139;
          *((_OWORD *)v138 + 1) = v143;
        }
        uint64_t v144 = v119[9];
        char v145 = (char *)a1 + v144;
        long long v146 = (char *)a2 + v144;
        if (*(uint64_t *)((char *)a2 + v144 + 24))
        {
          uint64_t v147 = *(void *)v146;
          uint64_t v148 = *((void *)v146 + 1);
          char v149 = v146[16];
          outlined copy of Text.Storage(*(void *)v146, v148, v149);
          *(void *)char v145 = v147;
          *((void *)v145 + 1) = v148;
          v145[16] = v149;
          *((void *)v145 + 3) = *((void *)v146 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v150 = *((_OWORD *)v146 + 1);
          *(_OWORD *)char v145 = *(_OWORD *)v146;
          *((_OWORD *)v145 + 1) = v150;
        }
        uint64_t v151 = v119[10];
        char v152 = (char *)a1 + v151;
        long long v153 = (char *)a2 + v151;
        type metadata accessor for Predicate<Pack{URL}>();
        uint64_t v155 = v154;
        uint64_t v156 = *(void *)(v154 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v153, 1, v154))
        {
LABEL_79:
          (*(void (**)(char *, char *, uint64_t))(v156 + 16))(v152, v153, v155);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(v152, 0, 1, v155);
          goto LABEL_80;
        }
LABEL_78:
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v152, v153, *(void *)(*(void *)(v202 - 8) + 64));
LABEL_80:
        *((unsigned char *)a1 + v119[11]) = *((unsigned char *)a2 + v119[11]);
        uint64_t v203 = v119[12];
        uint64_t v204 = (char *)a1 + v203;
        uint64_t v205 = (char *)a2 + v203;
        uint64_t v206 = *(void *)v205;
        v204[8] = v205[8];
        *(void *)uint64_t v204 = v206;
        goto LABEL_81;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v27 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v28 = v27[5];
      uint64_t v29 = (char *)a1 + v28;
      uint64_t v30 = (char *)a2 + v28;
      uint64_t v31 = type metadata accessor for URL();
      uint64_t v32 = *(void *)(v31 - 8);
      uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
      swift_bridgeObjectRetain();
      if (v33(v30, 1, v31))
      {
        type metadata accessor for URL?(0);
        memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      uint64_t v42 = v27[6];
      uint64_t v43 = (char *)a1 + v42;
      uint64_t v44 = (char *)a2 + v42;
      if (*(uint64_t *)((char *)a2 + v42 + 24))
      {
        uint64_t v45 = *(void *)v44;
        uint64_t v46 = *((void *)v44 + 1);
        char v47 = v44[16];
        outlined copy of Text.Storage(*(void *)v44, v46, v47);
        *(void *)uint64_t v43 = v45;
        *((void *)v43 + 1) = v46;
        v43[16] = v47;
        *((void *)v43 + 3) = *((void *)v44 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v54 = *((_OWORD *)v44 + 1);
        *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
        *((_OWORD *)v43 + 1) = v54;
      }
      uint64_t v55 = v27[7];
      uint64_t v56 = (char *)a1 + v55;
      char v57 = (char *)a2 + v55;
      if (*(uint64_t *)((char *)a2 + v55 + 24))
      {
        uint64_t v58 = *(void *)v57;
        uint64_t v59 = *((void *)v57 + 1);
        char v60 = v57[16];
        outlined copy of Text.Storage(*(void *)v57, v59, v60);
        *(void *)uint64_t v56 = v58;
        *((void *)v56 + 1) = v59;
        v56[16] = v60;
        *((void *)v56 + 3) = *((void *)v57 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v68 = *((_OWORD *)v57 + 1);
        *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
        *((_OWORD *)v56 + 1) = v68;
      }
      uint64_t v69 = v27[8];
      uint64_t v70 = (char *)a1 + v69;
      char v71 = (char *)a2 + v69;
      if (*(uint64_t *)((char *)a2 + v69 + 24))
      {
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = *((void *)v71 + 1);
        char v74 = v71[16];
        outlined copy of Text.Storage(*(void *)v71, v73, v74);
        *(void *)uint64_t v70 = v72;
        *((void *)v70 + 1) = v73;
        v70[16] = v74;
        *((void *)v70 + 3) = *((void *)v71 + 3);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v82 = *((_OWORD *)v71 + 1);
        *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
        *((_OWORD *)v70 + 1) = v82;
      }
      *(uint64_t *)((char *)a1 + v27[9]) = *(uint64_t *)((char *)a2 + v27[9]);
      *((unsigned char *)a1 + v27[10]) = *((unsigned char *)a2 + v27[10]);
      uint64_t v83 = v27[11];
      uint64_t v84 = (char *)a1 + v83;
      char v85 = (char *)a2 + v83;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v87 = v86;
      uint64_t v88 = *(void *)(v86 - 8);
      uint64_t v89 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
      swift_bridgeObjectRetain();
      if (v89(v85, 1, v87))
      {
LABEL_38:
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v84, v85, *(void *)(*(void *)(v94 - 8) + 64));
LABEL_40:
        *((unsigned char *)a1 + v27[12]) = *((unsigned char *)a2 + v27[12]);
        uint64_t v95 = v27[13];
        uint64_t v96 = (char *)a1 + v95;
        uint64_t v97 = (char *)a2 + v95;
        uint64_t v98 = *(void *)v97;
        v96[8] = v97[8];
        *(void *)uint64_t v96 = v98;
        uint64_t v99 = v27[14];
        uint64_t v100 = (uint64_t *)((char *)a1 + v99);
        uint64_t v101 = (uint64_t *)((char *)a2 + v99);
        uint64_t v102 = v101[1];
        *uint64_t v100 = *v101;
        v100[1] = v102;
        uint64_t v103 = v27[15];
        uint64_t v104 = (uint64_t *)((char *)a1 + v103);
        uint64_t v105 = (uint64_t *)((char *)a2 + v103);
        uint64_t v106 = v105[1];
        void *v104 = *v105;
        v104[1] = v106;
        swift_retain();
        swift_retain();
LABEL_81:
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_39:
      (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v84, v85, v87);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v84, 0, 1, v87);
      goto LABEL_40;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *initializeWithTake for FileImportExportBridge.PresentationState.UpdateEffect(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = type metadata accessor for FileExportOperation.Mode(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        uint64_t v31 = type metadata accessor for URL();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v31 - 8) + 32))(a1, a2, v31);
        uint64_t v32 = type metadata accessor for FileExportOperation.Move(0);
        *(_OWORD *)((char *)a1 + *(int *)(v32 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v32 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v32 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v32 + 24));
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v24 = (int *)type metadata accessor for FileExportOperation(0);
      *(_OWORD *)((char *)a1 + v24[5]) = *(_OWORD *)((char *)a2 + v24[5]);
      uint64_t v33 = v24[6];
      uint64_t v34 = (char *)a1 + v33;
      uint64_t v35 = (char *)a2 + v33;
      uint64_t v36 = type metadata accessor for URL();
      uint64_t v37 = *(void *)(v36 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
      {
        type metadata accessor for URL?(0);
        memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      uint64_t v90 = v24[7];
      uint64_t v91 = (_OWORD *)((char *)a1 + v90);
      uint64_t v92 = (_OWORD *)((char *)a2 + v90);
      long long v93 = v92[1];
      *uint64_t v91 = *v92;
      v91[1] = v93;
      uint64_t v94 = v24[8];
      uint64_t v95 = (_OWORD *)((char *)a1 + v94);
      uint64_t v96 = (_OWORD *)((char *)a2 + v94);
      long long v97 = v96[1];
      *uint64_t v95 = *v96;
      v95[1] = v97;
      uint64_t v98 = v24[9];
      uint64_t v99 = (_OWORD *)((char *)a1 + v98);
      uint64_t v100 = (_OWORD *)((char *)a2 + v98);
      long long v101 = v100[1];
      *uint64_t v99 = *v100;
      v99[1] = v101;
      uint64_t v102 = v24[10];
      char v85 = (char *)a1 + v102;
      uint64_t v86 = (char *)a2 + v102;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v88 = v103;
      uint64_t v89 = *(void *)(v103 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v86, 1, v103)) {
        goto LABEL_31;
      }
      goto LABEL_34;
    }
    *a1 = *a2;
    uint64_t v9 = (int *)type metadata accessor for FileImportOperation(0);
    uint64_t v16 = v9[5];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for URL();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      type metadata accessor for URL?(0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v57 = v9[6];
    uint64_t v58 = (_OWORD *)((char *)a1 + v57);
    uint64_t v59 = (_OWORD *)((char *)a2 + v57);
    long long v60 = v59[1];
    *uint64_t v58 = *v59;
    v58[1] = v60;
    uint64_t v61 = v9[7];
    uint64_t v62 = (_OWORD *)((char *)a1 + v61);
    uint64_t v63 = (_OWORD *)((char *)a2 + v61);
    long long v64 = v63[1];
    _OWORD *v62 = *v63;
    v62[1] = v64;
    uint64_t v65 = v9[8];
    uint64_t v66 = (_OWORD *)((char *)a1 + v65);
    char v67 = (_OWORD *)((char *)a2 + v65);
    long long v68 = v67[1];
    *uint64_t v66 = *v67;
    v66[1] = v68;
    *(void *)((char *)a1 + v9[9]) = *(void *)((char *)a2 + v9[9]);
    *((unsigned char *)a1 + v9[10]) = *((unsigned char *)a2 + v9[10]);
    uint64_t v69 = v9[11];
    uint64_t v52 = (char *)a1 + v69;
    char v53 = (char *)a2 + v69;
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v55 = v70;
    uint64_t v56 = *(void *)(v70 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v53, 1, v70)) {
      goto LABEL_25;
    }
    goto LABEL_32;
  }
  if (!EnumCaseMultiPayload)
  {
    type metadata accessor for FileImportExportBridge.Presentation(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for FileExportOperation.Mode(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      }
      else
      {
        uint64_t v22 = type metadata accessor for URL();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v22 - 8) + 32))(a1, a2, v22);
        uint64_t v23 = type metadata accessor for FileExportOperation.Move(0);
        *(_OWORD *)((char *)a1 + *(int *)(v23 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v23 + 20));
        *(_OWORD *)((char *)a1 + *(int *)(v23 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v23 + 24));
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v24 = (int *)type metadata accessor for FileExportOperation(0);
      *(_OWORD *)((char *)a1 + v24[5]) = *(_OWORD *)((char *)a2 + v24[5]);
      uint64_t v25 = v24[6];
      uint64_t v26 = (char *)a1 + v25;
      uint64_t v27 = (char *)a2 + v25;
      uint64_t v28 = type metadata accessor for URL();
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        type metadata accessor for URL?(0);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      }
      uint64_t v72 = v24[7];
      uint64_t v73 = (_OWORD *)((char *)a1 + v72);
      char v74 = (_OWORD *)((char *)a2 + v72);
      long long v75 = v74[1];
      *uint64_t v73 = *v74;
      v73[1] = v75;
      uint64_t v76 = v24[8];
      uint64_t v77 = (_OWORD *)((char *)a1 + v76);
      char v78 = (_OWORD *)((char *)a2 + v76);
      long long v79 = v78[1];
      *uint64_t v77 = *v78;
      v77[1] = v79;
      uint64_t v80 = v24[9];
      char v81 = (_OWORD *)((char *)a1 + v80);
      long long v82 = (_OWORD *)((char *)a2 + v80);
      long long v83 = v82[1];
      *char v81 = *v82;
      v81[1] = v83;
      uint64_t v84 = v24[10];
      char v85 = (char *)a1 + v84;
      uint64_t v86 = (char *)a2 + v84;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v88 = v87;
      uint64_t v89 = *(void *)(v87 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v86, 1, v87))
      {
LABEL_31:
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v85, v86, *(void *)(*(void *)(v104 - 8) + 64));
LABEL_35:
        *((unsigned char *)a1 + v24[11]) = *((unsigned char *)a2 + v24[11]);
        uint64_t v108 = v24[12];
        uint64_t v109 = (char *)a1 + v108;
        uint64_t v110 = (char *)a2 + v108;
        *(void *)uint64_t v109 = *(void *)v110;
        v109[8] = v110[8];
        goto LABEL_36;
      }
LABEL_34:
      (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v85, v86, v88);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v85, 0, 1, v88);
      goto LABEL_35;
    }
    *a1 = *a2;
    uint64_t v9 = (int *)type metadata accessor for FileImportOperation(0);
    uint64_t v10 = v9[5];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for URL();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      type metadata accessor for URL?(0);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    uint64_t v39 = v9[6];
    uint64_t v40 = (_OWORD *)((char *)a1 + v39);
    uint64_t v41 = (_OWORD *)((char *)a2 + v39);
    long long v42 = v41[1];
    _OWORD *v40 = *v41;
    v40[1] = v42;
    uint64_t v43 = v9[7];
    uint64_t v44 = (_OWORD *)((char *)a1 + v43);
    uint64_t v45 = (_OWORD *)((char *)a2 + v43);
    long long v46 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v46;
    uint64_t v47 = v9[8];
    uint64_t v48 = (_OWORD *)((char *)a1 + v47);
    uint64_t v49 = (_OWORD *)((char *)a2 + v47);
    long long v50 = v49[1];
    _OWORD *v48 = *v49;
    v48[1] = v50;
    *(void *)((char *)a1 + v9[9]) = *(void *)((char *)a2 + v9[9]);
    *((unsigned char *)a1 + v9[10]) = *((unsigned char *)a2 + v9[10]);
    uint64_t v51 = v9[11];
    uint64_t v52 = (char *)a1 + v51;
    char v53 = (char *)a2 + v51;
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v55 = v54;
    uint64_t v56 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v53, 1, v54))
    {
LABEL_25:
      _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
      memcpy(v52, v53, *(void *)(*(void *)(v71 - 8) + 64));
LABEL_33:
      *((unsigned char *)a1 + v9[12]) = *((unsigned char *)a2 + v9[12]);
      uint64_t v105 = v9[13];
      uint64_t v106 = (char *)a1 + v105;
      uint64_t v107 = (char *)a2 + v105;
      *(void *)uint64_t v106 = *(void *)v107;
      v106[8] = v107[8];
      *(_OWORD *)((char *)a1 + v9[14]) = *(_OWORD *)((char *)a2 + v9[14]);
      *(_OWORD *)((char *)a1 + v9[15]) = *(_OWORD *)((char *)a2 + v9[15]);
LABEL_36:
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      return a1;
    }
LABEL_32:
    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v52, v53, v55);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v52, 0, 1, v55);
    goto LABEL_33;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for FileImportExportBridge.PresentationState.UpdateEffect(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of FileImportExportBridge.Presentation((uint64_t)a1, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for FileImportExportBridge.Presentation(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v8 = type metadata accessor for FileExportOperation.Mode(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        }
        else
        {
          uint64_t v31 = type metadata accessor for URL();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v31 - 8) + 32))(a1, a2, v31);
          uint64_t v32 = type metadata accessor for FileExportOperation.Move(0);
          *(_OWORD *)((char *)a1 + *(int *)(v32 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v32 + 20));
          *(_OWORD *)((char *)a1 + *(int *)(v32 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v32 + 24));
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v24 = (int *)type metadata accessor for FileExportOperation(0);
        *(_OWORD *)((char *)a1 + v24[5]) = *(_OWORD *)((char *)a2 + v24[5]);
        uint64_t v33 = v24[6];
        uint64_t v34 = (char *)a1 + v33;
        uint64_t v35 = (char *)a2 + v33;
        uint64_t v36 = type metadata accessor for URL();
        uint64_t v37 = *(void *)(v36 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
        {
          type metadata accessor for URL?(0);
          memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
        }
        uint64_t v90 = v24[7];
        uint64_t v91 = (_OWORD *)((char *)a1 + v90);
        uint64_t v92 = (_OWORD *)((char *)a2 + v90);
        long long v93 = v92[1];
        *uint64_t v91 = *v92;
        v91[1] = v93;
        uint64_t v94 = v24[8];
        uint64_t v95 = (_OWORD *)((char *)a1 + v94);
        uint64_t v96 = (_OWORD *)((char *)a2 + v94);
        long long v97 = v96[1];
        *uint64_t v95 = *v96;
        v95[1] = v97;
        uint64_t v98 = v24[9];
        uint64_t v99 = (_OWORD *)((char *)a1 + v98);
        uint64_t v100 = (_OWORD *)((char *)a2 + v98);
        long long v101 = v100[1];
        *uint64_t v99 = *v100;
        v99[1] = v101;
        uint64_t v102 = v24[10];
        char v85 = (char *)a1 + v102;
        uint64_t v86 = (char *)a2 + v102;
        type metadata accessor for Predicate<Pack{URL}>();
        uint64_t v88 = v103;
        uint64_t v89 = *(void *)(v103 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v86, 1, v103)) {
          goto LABEL_32;
        }
        goto LABEL_35;
      }
      *a1 = *a2;
      uint64_t v9 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v16 = v9[5];
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = type metadata accessor for URL();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        type metadata accessor for URL?(0);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      uint64_t v57 = v9[6];
      uint64_t v58 = (_OWORD *)((char *)a1 + v57);
      uint64_t v59 = (_OWORD *)((char *)a2 + v57);
      long long v60 = v59[1];
      *uint64_t v58 = *v59;
      v58[1] = v60;
      uint64_t v61 = v9[7];
      uint64_t v62 = (_OWORD *)((char *)a1 + v61);
      uint64_t v63 = (_OWORD *)((char *)a2 + v61);
      long long v64 = v63[1];
      _OWORD *v62 = *v63;
      v62[1] = v64;
      uint64_t v65 = v9[8];
      uint64_t v66 = (_OWORD *)((char *)a1 + v65);
      char v67 = (_OWORD *)((char *)a2 + v65);
      long long v68 = v67[1];
      *uint64_t v66 = *v67;
      v66[1] = v68;
      *(void *)((char *)a1 + v9[9]) = *(void *)((char *)a2 + v9[9]);
      *((unsigned char *)a1 + v9[10]) = *((unsigned char *)a2 + v9[10]);
      uint64_t v69 = v9[11];
      uint64_t v52 = (char *)a1 + v69;
      char v53 = (char *)a2 + v69;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v55 = v70;
      uint64_t v56 = *(void *)(v70 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v53, 1, v70)) {
        goto LABEL_26;
      }
      goto LABEL_33;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for FileImportExportBridge.Presentation(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v7 = type metadata accessor for FileExportOperation.Mode(0);
        if (swift_getEnumCaseMultiPayload())
        {
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        }
        else
        {
          uint64_t v22 = type metadata accessor for URL();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v22 - 8) + 32))(a1, a2, v22);
          uint64_t v23 = type metadata accessor for FileExportOperation.Move(0);
          *(_OWORD *)((char *)a1 + *(int *)(v23 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(v23 + 20));
          *(_OWORD *)((char *)a1 + *(int *)(v23 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v23 + 24));
          swift_storeEnumTagMultiPayload();
        }
        uint64_t v24 = (int *)type metadata accessor for FileExportOperation(0);
        *(_OWORD *)((char *)a1 + v24[5]) = *(_OWORD *)((char *)a2 + v24[5]);
        uint64_t v25 = v24[6];
        uint64_t v26 = (char *)a1 + v25;
        uint64_t v27 = (char *)a2 + v25;
        uint64_t v28 = type metadata accessor for URL();
        uint64_t v29 = *(void *)(v28 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
        {
          type metadata accessor for URL?(0);
          memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        }
        uint64_t v72 = v24[7];
        uint64_t v73 = (_OWORD *)((char *)a1 + v72);
        char v74 = (_OWORD *)((char *)a2 + v72);
        long long v75 = v74[1];
        *uint64_t v73 = *v74;
        v73[1] = v75;
        uint64_t v76 = v24[8];
        uint64_t v77 = (_OWORD *)((char *)a1 + v76);
        char v78 = (_OWORD *)((char *)a2 + v76);
        long long v79 = v78[1];
        *uint64_t v77 = *v78;
        v77[1] = v79;
        uint64_t v80 = v24[9];
        char v81 = (_OWORD *)((char *)a1 + v80);
        long long v82 = (_OWORD *)((char *)a2 + v80);
        long long v83 = v82[1];
        *char v81 = *v82;
        v81[1] = v83;
        uint64_t v84 = v24[10];
        char v85 = (char *)a1 + v84;
        uint64_t v86 = (char *)a2 + v84;
        type metadata accessor for Predicate<Pack{URL}>();
        uint64_t v88 = v87;
        uint64_t v89 = *(void *)(v87 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v86, 1, v87))
        {
LABEL_32:
          _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
          memcpy(v85, v86, *(void *)(*(void *)(v104 - 8) + 64));
LABEL_36:
          *((unsigned char *)a1 + v24[11]) = *((unsigned char *)a2 + v24[11]);
          uint64_t v108 = v24[12];
          uint64_t v109 = (char *)a1 + v108;
          uint64_t v110 = (char *)a2 + v108;
          *(void *)uint64_t v109 = *(void *)v110;
          v109[8] = v110[8];
          goto LABEL_37;
        }
LABEL_35:
        (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v85, v86, v88);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v85, 0, 1, v88);
        goto LABEL_36;
      }
      *a1 = *a2;
      uint64_t v9 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v10 = v9[5];
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for URL();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        type metadata accessor for URL?(0);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      uint64_t v39 = v9[6];
      uint64_t v40 = (_OWORD *)((char *)a1 + v39);
      uint64_t v41 = (_OWORD *)((char *)a2 + v39);
      long long v42 = v41[1];
      _OWORD *v40 = *v41;
      v40[1] = v42;
      uint64_t v43 = v9[7];
      uint64_t v44 = (_OWORD *)((char *)a1 + v43);
      uint64_t v45 = (_OWORD *)((char *)a2 + v43);
      long long v46 = v45[1];
      *uint64_t v44 = *v45;
      v44[1] = v46;
      uint64_t v47 = v9[8];
      uint64_t v48 = (_OWORD *)((char *)a1 + v47);
      uint64_t v49 = (_OWORD *)((char *)a2 + v47);
      long long v50 = v49[1];
      _OWORD *v48 = *v49;
      v48[1] = v50;
      *(void *)((char *)a1 + v9[9]) = *(void *)((char *)a2 + v9[9]);
      *((unsigned char *)a1 + v9[10]) = *((unsigned char *)a2 + v9[10]);
      uint64_t v51 = v9[11];
      uint64_t v52 = (char *)a1 + v51;
      char v53 = (char *)a2 + v51;
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v55 = v54;
      uint64_t v56 = *(void *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v53, 1, v54))
      {
LABEL_26:
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
        memcpy(v52, v53, *(void *)(*(void *)(v71 - 8) + 64));
LABEL_34:
        *((unsigned char *)a1 + v9[12]) = *((unsigned char *)a2 + v9[12]);
        uint64_t v105 = v9[13];
        uint64_t v106 = (char *)a1 + v105;
        uint64_t v107 = (char *)a2 + v105;
        *(void *)uint64_t v106 = *(void *)v107;
        v106[8] = v107[8];
        *(_OWORD *)((char *)a1 + v9[14]) = *(_OWORD *)((char *)a2 + v9[14]);
        *(_OWORD *)((char *)a1 + v9[15]) = *(_OWORD *)((char *)a2 + v9[15]);
LABEL_37:
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_33:
      (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v52, v53, v55);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v52, 0, 1, v55);
      goto LABEL_34;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_187DF6008@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of Hashable.hashValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187DF6044()
{
  return 56;
}

__n128 sub_187DF6050(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t _ReclaimForEachElementsViewModifier.isEnabled.getter(char a1)
{
  return a1 & 1;
}

uint64_t _ReclaimForEachElementsViewModifier.isEnabled.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_ReclaimForEachElementsViewModifier.isEnabled.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _ReclaimForEachElementsViewModifier._makeInputs(modifier:inputs:)()
{
  return PropertyList.subscript.setter();
}

void type metadata accessor for _GraphValue<_ReclaimForEachElementsViewModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<_ReclaimForEachElementsViewModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_ReclaimForEachElementsViewModifier>);
    }
  }
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ReclaimForEachElementsViewModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ReclaimForEachElementsViewModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance _ReclaimForEachElementsViewModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _ReclaimForEachElementsViewModifier()
{
  return PropertyList.subscript.setter();
}

uint64_t static ForEach.makeWithOffset<>(_:content:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  v5[1] = 0;
  swift_retain();
  return ForEach.init(_:idGenerator:content:)();
}

BOOL ForEach.isConstant.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 64));
  swift_retain();
  type metadata accessor for ForEach.IDGenerator();
  swift_release();
  return v2 == 0;
}

_UNKNOWN **base witness table accessor for ViewModifier in _ReclaimForEachElementsViewModifier()
{
  return &protocol witness table for _ReclaimForEachElementsViewModifier;
}

unsigned char *storeEnumTagSinglePayload for _ReclaimForEachElementsViewModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187DF64E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ReclaimForEachElementsViewModifier()
{
  return &type metadata for _ReclaimForEachElementsViewModifier;
}

uint64_t _DrawingGroupEffect.rendersAsynchronously.getter()
{
  return (*(unsigned __int8 *)(v0 + 12) >> 2) & 1;
}

uint64_t _DrawingGroupEffect.rendersAsynchronously.setter(uint64_t result)
{
  if (result) {
    int v2 = 4;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(v1 + 12) = *(_DWORD *)(v1 + 12) & 0xFFFFFFFB | v2;
  return result;
}

unsigned char *(*_DrawingGroupEffect.rendersAsynchronously.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = (*(unsigned char *)(v1 + 12) & 4) != 0;
  return _DrawingGroupEffect.rendersAsynchronously.modify;
}

unsigned char *_DrawingGroupEffect.rendersAsynchronously.modify(unsigned char *result)
{
  if (result[8]) {
    int v1 = 4;
  }
  else {
    int v1 = 0;
  }
  *(_DWORD *)(*(void *)result + 12) = *(_DWORD *)(*(void *)result + 12) & 0xFFFFFFFB | v1;
  return result;
}

uint64_t sub_187DF65A4@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*(unsigned char *)(result + 12) & 4) != 0;
  return result;
}

unsigned char *sub_187DF65B4(unsigned char *result, uint64_t a2)
{
  if (*result) {
    int v2 = 4;
  }
  else {
    int v2 = 0;
  }
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a2 + 12) & 0xFFFFFFFB | v2;
  return result;
}

uint64_t AccessibilityAttachment.mergedProperties.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v14 = *v1;
  swift_bridgeObjectRetain_n();
  AGGraphClearUpdate();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = (void *)specialized AccessibilityProperties.subscript.getter(v4);
  swift_bridgeObjectRelease();
  if (v5)
  {
    uint64_t ObjectType = swift_getObjectType();
    PlatformAccessibilityElementProtocol<>.bridgedProperties.getter(ObjectType, (uint64_t *)v12);

    uint64_t v7 = *(void *)&v12[0];
  }
  else
  {
    uint64_t v7 = 0;
  }
  AGGraphSetUpdate();
  uint64_t result = swift_bridgeObjectRelease();
  if (v7)
  {
    *(void *)&v12[0] = v7;
    AccessibilityProperties.merge(with:)((uint64_t *)v12);
    uint64_t v3 = v14;
    unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
    if (v10)
    {
      unint64_t v11 = v9;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
      outlined init with take of OptionalBinaryInteger((long long *)(*(void *)(v3 + 56) + 40 * v11), (uint64_t)v12);
      specialized _NativeDictionary._delete(at:)(v11, v3);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = 0;
      memset(v12, 0, sizeof(v12));
    }
    outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)v12);
    uint64_t result = swift_bridgeObjectRelease();
  }
  *a1 = v3;
  return result;
}

double static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  int v10 = *(_DWORD *)(a2 + 80);
  unint64_t v17 = *(void *)a2;
  int v18 = v6;
  uint64_t v19 = v7;
  long long v20 = *(_OWORD *)(a2 + 24);
  uint64_t v21 = v8;
  unint64_t v22 = v9;
  long long v23 = *(_OWORD *)(a2 + 56);
  int v14 = v23;
  uint64_t v24 = *(void *)(a2 + 72);
  int v25 = v10;
  a3(&v15);
  unint64_t v17 = v9;
  int v18 = v14;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
  {
    unint64_t v17 = v9;
    int v18 = v14;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LODWORD(v17) = v5;
      type metadata accessor for Attribute<AccessibilityPlatformViewModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<AccessibilityPlatformViewModifier>, MEMORY[0x1E4F3F590]);
      _GraphValue.value.getter();
      unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      LODWORD(v17) = v5;
      _GraphValue.value.getter();
      unint64_t v17 = __PAIR64__(AGGraphCreateOffsetAttribute2(), OffsetAttribute2);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v12 = Attribute.init<A>(body:value:flags:update:)();
      unint64_t v17 = v9;
      int v18 = v14;
      MEMORY[0x1F4188790](v12);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
    }
  }
  *(void *)a4 = v15;
  double result = v16;
  a4[1] = v16;
  return result;
}

uint64_t implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)()
{
  return implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)();
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityPlatformViewModifier.PlatformViewAttachment()
{
  AGGraphGetValue();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  uint64_t v0 = *(void **)AGGraphGetValue();
  swift_bridgeObjectRetain();
  id v1 = v0;
  return AccessibilityAttachment.init(properties:platformElement:)();
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance AccessibilityPlatformViewModifier()
{
  id v1 = *v0;
  swift_bridgeObjectRetain();
  id v2 = v1;
  return AccessibilityAttachment.init(properties:platformElement:)();
}

id protocol witness for AccessibilityViewModifier.createOrUpdateNode(viewRendererHost:existingNode:) in conformance AccessibilityPlatformViewModifier(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = *v3;
  if (a3)
  {
    id v6 = a3;
  }
  else
  {
    id v8 = objc_allocWithZone((Class)type metadata accessor for AccessibilityNode());
    uint64_t v9 = swift_unknownObjectRetain();
    id v6 = specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(v9, a2, 0);
    swift_unknownObjectRelease();
  }
  id v10 = a3;
  objc_msgSend(v5, sel_setAccessibilityNodeForPlatformElement_, v6);
  return v6;
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityPlatformViewModifier()
{
}

Swift::Void __swiftcall AccessibilityBridgedPlatformView.updateValue()()
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for ViewLeafView();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v25 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  id v6 = (char *)&v25 - v5;
  uint64_t v8 = *(int *)(v7 + 48);
  uint64_t Value = AGGraphGetValue();
  char v11 = v10;
  uint64_t v12 = *(void *)(v0 - 8);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v13(v6, Value, v0);
  v6[v8] = v11 & 1;
  uint64_t v14 = *(int *)(TupleTypeMetadata2 + 48);
  v13(v3, (uint64_t)v6, v0);
  v3[v14] = v11 & 1;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v12 + 8);
  id v16 = *(id *)&v3[*(int *)(v0 + 36)];
  v15(v3, v0);
  unint64_t v17 = (void *)PlatformViewHost.representedView.getter();

  if ((v11 & 1) != 0 || !AGGraphGetOutputValue())
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    id v18 = v17;
    uint64_t v19 = Dictionary.init(minimumCapacity:)();
    id v27 = v18;
    uint64_t v28 = v19;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  id v20 = v17;
  uint64_t v26 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AnyAccessibilityPropertiesEntry?(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, (uint64_t (*)(uint64_t))type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?, MEMORY[0x1E4F41090]);
  uint64_t v29 = v21;
  unint64_t v30 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>();
  id v27 = v17;
  specialized Dictionary.subscript.setter((uint64_t)&v27, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  uint64_t v22 = v26;
  Outputuint64_t Value = (id *)AGGraphGetOutputValue();
  if (!OutputValue) {
    __break(1u);
  }
  id v24 = *OutputValue;
  id v27 = v24;
  uint64_t v28 = v22;
  AGGraphSetOutputValue();

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, TupleTypeMetadata2);
}

Swift::Void __swiftcall AccessibilityHostedViewBridgeTransform.updateValue()()
{
  unint64_t v1 = HIDWORD(v0);
  unint64_t v2 = *(void *)AGGraphGetValue();
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  BOOL v4 = v3 != 1 || *MEMORY[0x1E4F4E7A0] == v1;
  if (v4 || (uint64_t Value = (unint64_t *)AGGraphGetValue(), (v6 & 1) == 0))
  {
    AGGraphGetValue();
    AGGraphSetOutputValue();
    return;
  }
  unint64_t v7 = *Value;
  uint64_t v8 = *(void *)AGGraphGetValue();
  if ((v8 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v2 = MEMORY[0x18C117680](0, v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_22:
      swift_bridgeObjectRetain();
      char v10 = (void *)_CocoaArrayWrapper.endIndex.getter();
      if (v10) {
        goto LABEL_14;
      }
      goto LABEL_18;
    }
    uint64_t v9 = *(void **)(v8 + 32);
    swift_bridgeObjectRetain();
    unint64_t v2 = v9;
  }
  AGGraphGetValue();
  if (v7 >> 62) {
    goto LABEL_22;
  }
  char v10 = *(void **)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v10)
  {
LABEL_14:
    if ((v7 & 0xC000000000000001) != 0)
    {
      id v11 = (id)MEMORY[0x18C117680](0, v7);
    }
    else
    {
      if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        __break(1u);
      }
      id v11 = *(id *)(v7 + 32);
    }
    char v10 = v11;
  }
LABEL_18:
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakAssign();
  swift_bridgeObjectRelease();
  AGGraphGetValue();
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
}

void protocol witness for StatefulRule.updateValue() in conformance AccessibilityHostedViewBridgeTransform()
{
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityHostedViewBridgeTransform()
{
  return 0xD000000000000026;
}

uint64_t outlined destroy of AnyAccessibilityPropertiesEntry?(uint64_t a1)
{
  type metadata accessor for AnyAccessibilityPropertiesEntry?(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t (*)(uint64_t))type metadata accessor for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment;
  if (!lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment);
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)()
{
  return implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)();
}

ValueMetadata *type metadata accessor for AccessibilityPlatformViewModifier.PlatformViewAttachment()
{
  return &type metadata for AccessibilityPlatformViewModifier.PlatformViewAttachment;
}

ValueMetadata *type metadata accessor for AccessibilityPlatformViewModifier()
{
  return &type metadata for AccessibilityPlatformViewModifier;
}

ValueMetadata *type metadata accessor for AccessibilityHostedViewBridgeTransform()
{
  return &type metadata for AccessibilityHostedViewBridgeTransform;
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry?(255, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, (uint64_t (*)(uint64_t))type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?, MEMORY[0x1E4F41090]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

Swift::Bool __swiftcall ListItemKind.Set.contains(_:)(SwiftUI::ListItemKind a1)
{
  unsigned int v2 = *(unsigned __int8 *)a1;
  if (v2 >= 0x40) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 1 << v2;
  }
  return (v3 & ~*v1) == 0;
}

double static ListItemBackgroundTraitKey.defaultValue.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_18834BB90;
  return result;
}

uint64_t ListItemKind.Set.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t ListItemKind.Set.rawValue.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*ListItemKind.Set.rawValue.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

SwiftUI::ListItemKind::Set __swiftcall ListItemKind.Set.init(rawValue:)(SwiftUI::ListItemKind::Set rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static ListItemKind.Set.row.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static ListItemKind.Set.header.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static ListItemKind.Set.footer.getter(void *a1@<X8>)
{
  *a1 = 4;
}

uint64_t static ListItemKind.Set.all.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for all != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static ListItemKind.Set.all;
  return result;
}

SwiftUI::ListItemKind::Set __swiftcall ListItemKind.Set.init(_:)(SwiftUI::ListItemKind a1)
{
  unsigned int v2 = *(unsigned __int8 *)a1;
  if (v2 >= 0x40) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 1 << v2;
  }
  *unint64_t v1 = v3;
  LOBYTE(result.rawValue) = a1;
  return result;
}

uint64_t ListItemKind.rawValue.getter()
{
  return *v0;
}

SwiftUI::ListItemKind_optional __swiftcall ListItemKind.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  *unint64_t v1 = v2;
  return (SwiftUI::ListItemKind_optional)rawValue;
}

unint64_t lazy protocol witness table accessor for type ListItemKind.Set and conformance ListItemKind.Set()
{
  unint64_t result = lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set;
  if (!lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set;
  if (!lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set;
  if (!lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set;
  if (!lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListItemKind.Set and conformance ListItemKind.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListItemKind and conformance ListItemKind()
{
  unint64_t result = lazy protocol witness table cache variable for type ListItemKind and conformance ListItemKind;
  if (!lazy protocol witness table cache variable for type ListItemKind and conformance ListItemKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListItemKind and conformance ListItemKind);
  }
  return result;
}

SwiftUI::ListItemKind_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ListItemKind(Swift::Int *a1)
{
  return ListItemKind.init(rawValue:)(*a1);
}

ValueMetadata *type metadata accessor for ListItemBackgroundTraitKey()
{
  return &type metadata for ListItemBackgroundTraitKey;
}

unsigned char *storeEnumTagSinglePayload for ListItemKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187DF7778);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t EnvironmentValues.menuTitleVisibility.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<MenuTitleVisibilityKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<MenuTitleVisibilityKey>);
    }
  }
}

uint64_t EnvironmentValues.menuTitleVisibility.setter()
{
  type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.menuTitleVisibility.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return EnvironmentValues.menuTitleVisibility.modify;
}

uint64_t EnvironmentValues.menuTitleVisibility.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuTitleVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t View.menuTitle(_:)()
{
  return swift_release();
}

uint64_t sub_187DF7D0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.menuTitleVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187DF7D38()
{
  return EnvironmentValues.menuTitleVisibility.setter();
}

uint64_t View.overrideMenuTitle(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v8[0] = a1;
  v8[1] = a2;
  char v9 = a3 & 1;
  uint64_t v10 = a4;
  return View.platformItemLabel<A, B>(_:flags:)((uint64_t)v8, a5, MEMORY[0x1E4F41420], (uint64_t)&type metadata for TextPlatformItemListFlags, a6, MEMORY[0x1E4F41418], (uint64_t)&protocol witness table for TextPlatformItemListFlags, a7);
}

uint64_t sub_187DF7DC4()
{
  return swift_getWitnessTable();
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuTitleVisibilityKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187DF7EA8()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for MenuTitleVisibilityKey()
{
  return &unk_1ED439F40;
}

_UNKNOWN **base witness table accessor for ViewModifier in DisableDeferredAccessibilityAttachmentModifier()
{
  return &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
}

void AccessibilityAttachment.Tree.combine(with:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  unsigned int v4 = (void *)a1[1];
  uint64_t v5 = *(char **)v1;
  if (*(unsigned char *)(v1 + 16))
  {
    if (*(unsigned char *)(v1 + 16) == 1)
    {
      uint64_t v6 = *((void *)v5 + 2);
      if (v6)
      {
        unint64_t v7 = 0;
        uint64_t v8 = 32;
        while (1)
        {
          uint64_t v17 = v3;
          id v18 = v4;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
          }
          if (v7 >= *((void *)v5 + 2)) {
            break;
          }
          ++v7;
          AccessibilityAttachment.Tree.combine(with:)(&v17);
          v8 += 24;
          if (v6 == v7) {
            goto LABEL_15;
          }
        }
        __break(1u);
      }
      else
      {
LABEL_15:
        *(void *)uint64_t v1 = v5;
        *(void *)(v1 + 8) = 0;
        *(unsigned char *)(v1 + 16) = 1;
      }
    }
    else
    {
      *(void *)uint64_t v1 = v3;
      *(void *)(v1 + 8) = v4;
      *(unsigned char *)(v1 + 16) = 0;
      id v14 = v4;
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    char v9 = *(void **)(v1 + 8);
    uint64_t v17 = *a1;
    id v18 = v4;
    uint64_t v15 = (uint64_t)v5;
    id v10 = v4;
    swift_bridgeObjectRetain();
    AccessibilityProperties.merge(with:)(&v15);
    uint64_t v11 = v17;
    uint64_t v12 = v18;
    uint64_t v15 = v17;
    id v16 = v18;
    uint64_t v13 = (void *)AccessibilityAttachment.platformElement.getter();

    if (v13 || (v15 = (uint64_t)v5, id v16 = v9, !AccessibilityAttachment.platformElement.getter()))
    {
      outlined consume of AccessibilityAttachment.Tree((uint64_t)v5, v9, 0);
    }
    else
    {
      AccessibilityAttachment.platformElement.setter();
      outlined consume of AccessibilityAttachment.Tree((uint64_t)v5, v9, 0);
      uint64_t v11 = v17;
      uint64_t v12 = v18;
    }
    *(void *)uint64_t v2 = v11;
    *(void *)(v2 + 8) = v12;
    *(unsigned char *)(v2 + 16) = 0;
  }
}

void View.accessibilityDetachedGeometry()()
{
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance AccessibilityAttachment.Key(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 2;
}

void closure #1 in AccessibilityAttachment.DeferredTransform.value.getter()
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = Value[1];
  v2[0] = *Value;
  v2[1] = v1;
  AccessibilityAttachment.Tree.combine(with:)(v2);
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityAttachment.DeferredTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  int v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = _s7SwiftUI23AccessibilityAttachmentVAAE17DeferredTransformV5valueyyAcAE4TreeOzcvgyAHzcfU_TA_0;
  *(void *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance EnableDeferredAccessibilityAttachmentModifier()
{
  return PreferenceKeys.add(_:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance EnableDeferredAccessibilityAttachmentModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type EnableDeferredAccessibilityAttachmentModifier and conformance EnableDeferredAccessibilityAttachmentModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

void protocol witness for ViewModifier.body(content:) in conformance EnableDeferredAccessibilityAttachmentModifier()
{
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance DisableDeferredAccessibilityAttachmentModifier()
{
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result) {
    return PreferencesInputs.remove<A>(_:)();
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in DetachedGeometryModifier()
{
  return &protocol witness table for DetachedGeometryModifier;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DisableDeferredAccessibilityAttachmentModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type DisableDeferredAccessibilityAttachmentModifier and conformance DisableDeferredAccessibilityAttachmentModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

void protocol witness for ViewModifier.body(content:) in conformance DisableDeferredAccessibilityAttachmentModifier()
{
}

double protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance DetachedGeometryModifier(uint64_t a1, uint64_t a2)
{
  _ViewInputs.withoutGeometryDependencies.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 40) = v10;
  *(_OWORD *)(a2 + 56) = v11;
  double result = v12;
  *(double *)(a2 + 72) = v12;
  *(_DWORD *)(a2 + 80) = v13;
  *(_DWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 36) = (v9 & 0xFFFFFFBF ^ 0x80) & v9;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in EnableDeferredAccessibilityAttachmentModifier()
{
  return &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in DetachDeferredAccessibilityAttachmentModifier()
{
  return &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DetachedGeometryModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type DetachedGeometryModifier and conformance DetachedGeometryModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

void protocol witness for ViewModifier.body(content:) in conformance DetachedGeometryModifier()
{
}

void protocol witness for ViewModifier.body(content:) in conformance DetachDeferredAccessibilityAttachmentModifier()
{
}

uint64_t sub_187DF8578()
{
  return swift_deallocObject();
}

void _s7SwiftUI23AccessibilityAttachmentVAAE17DeferredTransformV5valueyyAcAE4TreeOzcvgyAHzcfU_TA_0()
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = Value[1];
  v2[0] = *Value;
  v2[1] = v1;
  AccessibilityAttachment.Tree.combine(with:)(v2);
}

uint64_t sub_187DF85D8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t specialized static AccessibilityAttachment.Tree.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v6 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      v11[0] = *(void *)a1;
      v11[1] = v2;
      v10[0] = v6;
      v10[1] = v5;
      outlined copy of AccessibilityAttachment.Tree(v6, (void *)v5, 0);
      outlined copy of AccessibilityAttachment.Tree(v3, v2, 0);
      outlined copy of AccessibilityAttachment.Tree(v6, (void *)v5, 0);
      outlined copy of AccessibilityAttachment.Tree(v3, v2, 0);
      int v7 = MEMORY[0x18C111CD0](v11, v10);
      outlined consume of AccessibilityAttachment.Tree(v3, v2, 0);
      outlined consume of AccessibilityAttachment.Tree(v6, (void *)v5, 0);
      outlined consume of AccessibilityAttachment.Tree(v6, (void *)v5, 0);
      outlined consume of AccessibilityAttachment.Tree(v3, v2, 0);
      return v7 & 1;
    }
    goto LABEL_11;
  }
  if (v4 != 1)
  {
    if (v7 == 2 && (v5 | v6) == 0)
    {
      outlined consume of AccessibilityAttachment.Tree(*(void *)a1, v2, 2);
      outlined consume of AccessibilityAttachment.Tree(0, 0, 2);
      LOBYTE(v7) = 1;
      return v7 & 1;
    }
    goto LABEL_11;
  }
  if (v7 != 1)
  {
LABEL_11:
    outlined copy of AccessibilityAttachment.Tree(*(void *)a2, *(void **)(a2 + 8), v7);
    outlined copy of AccessibilityAttachment.Tree(v3, v2, v4);
    outlined consume of AccessibilityAttachment.Tree(v3, v2, v4);
    outlined consume of AccessibilityAttachment.Tree(v6, (void *)v5, v7);
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
  outlined copy of AccessibilityAttachment.Tree(*(void *)a2, *(void **)(a2 + 8), 1);
  outlined copy of AccessibilityAttachment.Tree(v3, v2, 1);
  LOBYTE(v7) = specialized static Array<A>.== infix(_:_:)(v3, v6);
  outlined consume of AccessibilityAttachment.Tree(v3, v2, 1);
  outlined consume of AccessibilityAttachment.Tree(v6, (void *)v5, 1);
  return v7 & 1;
}

void specialized static AccessibilityAttachment.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t))
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void **)(a1 + 8);
  int v6 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v7 = outlined copy of AccessibilityAttachment.Tree(*(void *)a1, v5, v6);
  a2(&v19, v7);
  uint64_t v8 = v19;
  int v9 = (void *)v20;
  int v10 = v21;
  unint64_t v11 = v20 | v19;
  outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
  if (v10 != 2 || v11 != 0)
  {
    if (v6)
    {
      if (v6 != 1)
      {
LABEL_18:
        *(void *)a1 = v8;
        *(void *)(a1 + 8) = v9;
        *(unsigned char *)(a1 + 16) = v10;
        return;
      }
      if (v10 != 1)
      {
        outlined copy of AccessibilityAttachment.Tree(v8, v9, v10);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1, (char *)v4);
        }
        unint64_t v15 = *(void *)(v4 + 16);
        unint64_t v14 = *(void *)(v4 + 24);
        if (v15 >= v14 >> 1) {
          uint64_t v4 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, (char *)v4);
        }
        *(void *)(v4 + 16) = v15 + 1;
        uint64_t v16 = v4 + 24 * v15;
        *(void *)(v16 + 32) = v8;
        *(void *)(v16 + 40) = v9;
        *(unsigned char *)(v16 + 48) = v10;
        outlined consume of AccessibilityAttachment.Tree(v8, v9, v10);
        int v9 = 0;
        LOBYTE(v10) = 1;
        uint64_t v8 = v4;
        goto LABEL_18;
      }
      uint64_t v18 = v4;
    }
    else
    {
      if (v10 != 1)
      {
        type metadata accessor for _ContiguousArrayStorage<AccessibilityAttachment.Tree>();
        uint64_t v17 = swift_allocObject();
        *(_OWORD *)(v17 + 16) = xmmword_18834BB70;
        *(void *)(v17 + 32) = v4;
        *(void *)(v17 + 40) = v5;
        *(unsigned char *)(v17 + 48) = 0;
        *(void *)(v17 + 56) = v8;
        *(void *)(v17 + 64) = v9;
        *(unsigned char *)(v17 + 72) = v10;
        LOBYTE(v10) = 1;
        uint64_t v8 = v17;
        int v9 = 0;
        goto LABEL_18;
      }
      type metadata accessor for _ContiguousArrayStorage<AccessibilityAttachment.Tree>();
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_18834BB80;
      *(void *)(v13 + 32) = v4;
      *(void *)(v13 + 40) = v5;
      *(unsigned char *)(v13 + 48) = 0;
      uint64_t v18 = v13;
    }
    specialized Array.append<A>(contentsOf:)(v8);
    int v9 = 0;
    uint64_t v8 = v18;
    LOBYTE(v10) = 1;
    goto LABEL_18;
  }
}

void type metadata accessor for _ContiguousArrayStorage<AccessibilityAttachment.Tree>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment.Tree>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment.Tree>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DetachedGeometryModifier and conformance DetachedGeometryModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DetachedGeometryModifier and conformance DetachedGeometryModifier;
  if (!lazy protocol witness table cache variable for type DetachedGeometryModifier and conformance DetachedGeometryModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DetachedGeometryModifier and conformance DetachedGeometryModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnableDeferredAccessibilityAttachmentModifier and conformance EnableDeferredAccessibilityAttachmentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type EnableDeferredAccessibilityAttachmentModifier and conformance EnableDeferredAccessibilityAttachmentModifier;
  if (!lazy protocol witness table cache variable for type EnableDeferredAccessibilityAttachmentModifier and conformance EnableDeferredAccessibilityAttachmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableDeferredAccessibilityAttachmentModifier and conformance EnableDeferredAccessibilityAttachmentModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisableDeferredAccessibilityAttachmentModifier and conformance DisableDeferredAccessibilityAttachmentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DisableDeferredAccessibilityAttachmentModifier and conformance DisableDeferredAccessibilityAttachmentModifier;
  if (!lazy protocol witness table cache variable for type DisableDeferredAccessibilityAttachmentModifier and conformance DisableDeferredAccessibilityAttachmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableDeferredAccessibilityAttachmentModifier and conformance DisableDeferredAccessibilityAttachmentModifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityAttachment.DeferredTransform()
{
  return &type metadata for AccessibilityAttachment.DeferredTransform;
}

void destroy for AccessibilityAttachment.Tree(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityAttachment.Tree(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AccessibilityAttachment.Tree(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AccessibilityAttachment.Tree(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AccessibilityAttachment.Tree(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of AccessibilityAttachment.Tree(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AccessibilityAttachment.Tree(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of AccessibilityAttachment.Tree(v4, v5, v6);
  return a1;
}

uint64_t destroy for KeyEvent(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return __swift_destroy_boxed_opaque_existential_1(a1 + 64);
}

uint64_t initializeWithCopy for KeyEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v5 = a2 + 64;
  long long v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v6;
  uint64_t v7 = v6;
  char v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(a1 + 64, v5, v7);
  return a1;
}

uint64_t assignWithCopy for KeyEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
  return a1;
}

uint64_t assignWithTake for KeyEvent(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyEvent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyEvent()
{
  return &type metadata for KeyEvent;
}

ValueMetadata *type metadata accessor for KeyEvent.Tracker()
{
  return &type metadata for KeyEvent.Tracker;
}

uint64_t KeyEvent.Tracker.serial(for:)(unsigned char *a1)
{
  unint64_t v2 = v1;
  if (*a1 == 1)
  {
    uint64_t v6 = (uint64_t)(a1 + 64);
    uint64_t v7 = *v1;
    if (!*(void *)(*v2 + 16) || (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v6), (v9 & 1) == 0))
    {
      DisplayList.Version.init(forUpdate:)();
      uint64_t v4 = v17[0];
      uint64_t v5 = v6;
      goto LABEL_11;
    }
    return *(void *)(*(void *)(v7 + 56) + 8 * v8);
  }
  else
  {
    if (!*a1)
    {
      DisplayList.Version.init(forUpdate:)();
      uint64_t v4 = v17[0];
      uint64_t v5 = (uint64_t)(a1 + 64);
LABEL_11:
      outlined init with copy of AnyHashable(v5, (uint64_t)v17);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v16 = *v2;
      *unint64_t v2 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v4, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
      *unint64_t v2 = v16;
      swift_bridgeObjectRelease();
      outlined destroy of AnyHashable((uint64_t)v17);
      return v4;
    }
    uint64_t v10 = *v1;
    if (*(void *)(*v2 + 16)
      && (uint64_t v11 = (uint64_t)(a1 + 64),
          unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)(a1 + 64)),
          (v13 & 1) != 0))
    {
      uint64_t v4 = *(void *)(*(void *)(v10 + 56) + 8 * v12);
      specialized Dictionary._Variant.removeValue(forKey:)(v11, (uint64_t)v17);
    }
    else
    {
      DisplayList.Version.init(forUpdate:)();
      return v17[0];
    }
  }
  return v4;
}

uint64_t protocol witness for ModifiersEventType.modifiers.setter in conformance KeyEvent(uint64_t result)
{
  *(void *)(v1 + 24) = result;
  return result;
}

double protocol witness for EventType.timestamp.getter in conformance KeyEvent@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 8);
  *a1 = result;
  return result;
}

double protocol witness for EventType.init(_:) in conformance KeyEvent@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for EventType();
  if (swift_dynamicCast())
  {
    long long v2 = v11;
    *(_OWORD *)(a1 + 64) = v10;
    *(_OWORD *)(a1 + 80) = v2;
    *(void *)(a1 + 96) = v12;
    long long v3 = v7;
    *(_OWORD *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v3;
    long long v4 = v9;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)(a1 + 48) = v4;
  }
  else
  {
    uint64_t v12 = 0;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    outlined destroy of KeyEvent?((uint64_t)&v6);
    *(void *)(a1 + 96) = 0;
    *(void *)&long long v4 = 0;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return *(double *)&v4;
}

uint64_t specialized static KeyEvent.== infix(_:_:)(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2 || a1[1] != a2[1]) {
    return 0;
  }
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *((void *)a2 + 2);
  if (v4)
  {
    if (v5)
    {
      if (v4 != v5) {
        return 0;
      }
      goto LABEL_8;
    }
    swift_retain();
LABEL_19:
    swift_release();
    return 0;
  }
  if (v5) {
    goto LABEL_19;
  }
LABEL_8:
  if (*((void *)a1 + 3) == *((void *)a2 + 3)
    && (*((void *)a1 + 4) == *((void *)a2 + 4) && *((void *)a1 + 5) == *((void *)a2 + 5)
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && (*((void *)a1 + 6) == *((void *)a2 + 6) && *((void *)a1 + 7) == *((void *)a2 + 7)
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    JUMPOUT(0x18C1174E0);
  }
  return 0;
}

uint64_t protocol witness for EventType.init(_:) in conformance TransformEvent@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for EventType();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 24) = v7;
    *(_OWORD *)(a1 + 40) = v8;
    *(_OWORD *)(a1 + 56) = v9;
    long long v3 = v10;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 1;
    long long v3 = 0uLL;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  *(_OWORD *)(a1 + 72) = v3;
  return result;
}

uint64_t protocol witness for HitTestableEventType.hitTestLocation.getter in conformance TransformEvent(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type TransformEvent and conformance TransformEvent();

  return MEMORY[0x1F40FFB78](a1, a2, v4);
}

uint64_t protocol witness for HitTestableEventType.hitTestRadius.getter in conformance TransformEvent(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type TransformEvent and conformance TransformEvent();

  return MEMORY[0x1F40FFB70](a1, a2, v4);
}

uint64_t assignWithCopy for TransformEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t assignWithTake for TransformEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for TransformEvent()
{
  return &type metadata for TransformEvent;
}

BOOL specialized static TransformEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(double *)a1 != *(double *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)) {
    return result;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  double v6 = *(double *)(a1 + 24);
  double v5 = *(double *)(a1 + 32);
  double v8 = *(double *)(a1 + 40);
  double v7 = *(double *)(a1 + 48);
  double v10 = *(double *)(a1 + 56);
  double v9 = *(double *)(a1 + 64);
  double v12 = *(double *)(a1 + 72);
  double v11 = *(double *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 16);
  double v14 = *(double *)(a2 + 24);
  if (v4)
  {
    if (v13)
    {
      BOOL result = 0;
      if (v4 != v13 || v6 != v14) {
        return result;
      }
      goto LABEL_13;
    }
    swift_retain();
LABEL_11:
    swift_release();
    return 0;
  }
  if (v13) {
    goto LABEL_11;
  }
  BOOL result = 0;
  if (v6 != v14) {
    return result;
  }
LABEL_13:
  if (v5 == *(double *)(a2 + 32)
    && v8 == *(double *)(a2 + 40)
    && v7 == *(double *)(a2 + 48)
    && v10 == *(double *)(a2 + 56)
    && v9 == *(double *)(a2 + 64)
    && v12 == *(double *)(a2 + 72))
  {
    return v11 == *(double *)(a2 + 80);
  }
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    uint64_t v7 = a3 + 32;
    swift_bridgeObjectRetain();
    uint64_t v8 = v5 - 1;
    do
    {
      uint64_t v9 = v8;
      char v10 = (v4 != 0) | a1(v7);
      if (v10) {
        break;
      }
      uint64_t v8 = v9 - 1;
      v7 += 48;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

BOOL specialized Sequence.contains(where:)(uint64_t (*a1)(char *), uint64_t a2)
{
  id v27 = a1;
  uint64_t v28 = a2;
  type metadata accessor for (AnyToken?, Range<AttributedString.Index>)();
  uint64_t v29 = v3;
  uint64_t v26 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, &lazy cache variable for type metadata for (AnyToken?, Range<AttributedString.Index>)?, (uint64_t (*)(uint64_t))type metadata accessor for (AnyToken?, Range<AttributedString.Index>), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v24 - v7;
  type metadata accessor for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, MEMORY[0x1E4F27330]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v24 - v12;
  type metadata accessor for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, MEMORY[0x1E4F27320]);
  uint64_t v15 = v14;
  uint64_t v25 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v24 - v17;
  (*(void (**)(char *, void, uint64_t, double))(v11 + 16))(v13, v24[1], v10, v16);
  lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute> and conformance AttributedString.Runs.AttributesSlice1<A>();
  dispatch thunk of Sequence.makeIterator()();
  lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator and conformance AttributedString.Runs.AttributesSlice1<A>.Iterator();
  uint64_t v19 = (uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  do
  {
    dispatch thunk of IteratorProtocol.next()();
    int v20 = (*v19)(v8, 1, v29);
    if (v20 == 1) {
      break;
    }
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_0((uint64_t)v8, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for (AnyToken?, Range<AttributedString.Index>));
    char v21 = v27(v5);
    if (v2)
    {
      outlined destroy of (AnyHashable?, AnyHashable?)((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for (AnyToken?, Range<AttributedString.Index>));
      break;
    }
    char v22 = v21;
    outlined destroy of (AnyHashable?, AnyHashable?)((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for (AnyToken?, Range<AttributedString.Index>));
  }
  while ((v22 & 1) == 0);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v15);
  return v20 != 1;
}

uint64_t SearchCompletion.init(kind:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of TextInputSuggestionCompletionKind(a1, a3);
  uint64_t v5 = type metadata accessor for SearchCompletion();
  a2();
  uint64_t v6 = (uint64_t *)(a3 + *(int *)(v5 + 40));
  *uint64_t v6 = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, MEMORY[0x1E4F3F4D8]);

  return swift_storeEnumTagMultiPayload();
}

uint64_t SearchCompletion.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v22[1] = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  type metadata accessor for Button();
  type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>();
  v22[0] = type metadata accessor for ModifiedContent();
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_1(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v34 = MEMORY[0x1E4F40610];
  uint64_t v35 = v5;
  uint64_t v36 = v6;
  uint64_t v37 = MEMORY[0x1E4F40608];
  uint64_t v7 = type metadata accessor for StaticIf();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v22 - v12;
  uint64_t v24 = v4;
  uint64_t v25 = v3;
  uint64_t v26 = v2;
  v22[4] = v4;
  v22[5] = v3;
  uint64_t v23 = v2;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = _s7SwiftUI27SearchCompletionButtonStyleVAcA09PrimitiveeF0AAWlTm_0(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (void (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
  uint64_t v32 = WitnessTable;
  uint64_t v33 = v15;
  uint64_t v16 = swift_getWitnessTable();
  unint64_t v17 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v30 = v16;
  unint64_t v31 = v17;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v29 = v18;
  uint64_t v21 = swift_getWitnessTable();
  StaticIf<>.init(_:then:else:)();
  uint64_t v27 = v18;
  uint64_t v28 = v21;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v19)(v13, v7);
}

uint64_t closure #1 in SearchCompletion.body.getter()
{
  type metadata accessor for Button();
  type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>();
  type metadata accessor for ModifiedContent();
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_1(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
  uint64_t v0 = type metadata accessor for ModifiedContent();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v14 - v5;
  uint64_t v7 = type metadata accessor for SearchCompletion();
  SearchCompletion.completionContent.getter(v7, (uint64_t)v3);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = _s7SwiftUI27SearchCompletionButtonStyleVAcA09PrimitiveeF0AAWlTm_0(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (void (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
  v14[2] = WitnessTable;
  v14[3] = v9;
  uint64_t v10 = swift_getWitnessTable();
  unint64_t v11 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  v14[0] = v10;
  v14[1] = v11;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v3);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v3, v0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return ((uint64_t (*)(char *, uint64_t))v12)(v6, v0);
}

uint64_t SearchCompletion.completionContent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v42 = a2;
  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v41 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for SearchCompletionButtonStyle();
  MEMORY[0x1F4188790](v37);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = type metadata accessor for Button();
  uint64_t v38 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v35 = (_WORD *)((char *)&v35 - v16);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>();
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v39 = v17;
  uint64_t v40 = v18;
  double v19 = MEMORY[0x1F4188790](v17);
  uint64_t v36 = (char *)&v35 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v12, v2, a1, v19);
  unint64_t v21 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v13;
  *(void *)(v22 + 24) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v22 + v21, v12, a1);
  uint64_t v43 = v13;
  uint64_t v44 = v14;
  uint64_t v23 = v3;
  uint64_t v45 = v3;
  uint64_t v24 = v35;
  Button.init(action:label:)((uint64_t)partial apply for closure #1 in SearchCompletion.completionContent.getter, v22, (void (*)(uint64_t))partial apply for closure #2 in SearchCompletion.completionContent.getter, v35);
  outlined init with copy of TextInputSuggestionCompletionKind(v23, (uint64_t)v8);
  uint64_t v25 = v37;
  uint64_t v26 = (uint64_t *)&v8[*(int *)(v37 + 20)];
  uint64_t *v26 = swift_getKeyPath();
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4D8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = &v8[*(int *)(v25 + 24)];
  *(void *)uint64_t v27 = swift_getKeyPath();
  *((void *)v27 + 1) = 0;
  v27[16] = 0;
  uint64_t WitnessTable = swift_getWitnessTable();
  _s7SwiftUI27SearchCompletionButtonStyleVAcA09PrimitiveeF0AAWlTm_0(&lazy protocol witness table cache variable for type SearchCompletionButtonStyle and conformance SearchCompletionButtonStyle, (void (*)(uint64_t))type metadata accessor for SearchCompletionButtonStyle);
  uint64_t v29 = v36;
  View.buttonStyle<A>(_:)((uint64_t)v8, v15, v25, WitnessTable);
  outlined destroy of (AnyHashable?, AnyHashable?)((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for SearchCompletionButtonStyle);
  (*(void (**)(_WORD *, uint64_t))(v38 + 8))(v24, v15);
  uint64_t v30 = v41;
  specialized Environment.wrappedValue.getter(v41);
  type metadata accessor for Binding<AttributedString>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31);
  outlined destroy of (AnyHashable?, AnyHashable?)(v30, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>?);
  uint64_t v32 = _s7SwiftUI27SearchCompletionButtonStyleVAcA09PrimitiveeF0AAWlTm_0(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (void (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
  uint64_t v46 = WitnessTable;
  uint64_t v47 = v32;
  uint64_t v33 = v39;
  swift_getWitnessTable();
  View.disabled(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v29, v33);
}

uint64_t closure #2 in SearchCompletion.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v1 = type metadata accessor for Button();
  type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>();
  uint64_t v36 = v1;
  uint64_t v2 = type metadata accessor for ModifiedContent();
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_1(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
  uint64_t v37 = v2;
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v34 = (uint64_t)&v33 - v15;
  uint64_t v16 = type metadata accessor for SearchCompletion();
  if (SearchCompletion.shouldRenderPreV6.getter())
  {
    SearchCompletion.completionContent.getter(v16, (uint64_t)v6);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v18 = _s7SwiftUI27SearchCompletionButtonStyleVAcA09PrimitiveeF0AAWlTm_0(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (void (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
    uint64_t v40 = WitnessTable;
    uint64_t v41 = v18;
    uint64_t v19 = swift_getWitnessTable();
    unint64_t v20 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
    uint64_t v38 = v19;
    unint64_t v39 = v20;
    swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v6);
    unint64_t v21 = *(void (**)(char *, uint64_t))(v4 + 8);
    v21(v6, v3);
    static ViewBuilder.buildExpression<A>(_:)(v9);
    v21(v9, v3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v13, 1, 1, v3);
    uint64_t v23 = swift_getWitnessTable();
    uint64_t v24 = _s7SwiftUI27SearchCompletionButtonStyleVAcA09PrimitiveeF0AAWlTm_0(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (void (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
    uint64_t v49 = v23;
    uint64_t v50 = v24;
    uint64_t v25 = swift_getWitnessTable();
    unint64_t v26 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
    uint64_t v47 = v25;
    unint64_t v48 = v26;
    swift_getWitnessTable();
  }
  uint64_t v22 = v34;
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v13, v34);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v11 + 8);
  v27(v13, v10);
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = _s7SwiftUI27SearchCompletionButtonStyleVAcA09PrimitiveeF0AAWlTm_0(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (void (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<SearchCompletionButtonStyle>);
  uint64_t v45 = v28;
  uint64_t v46 = v29;
  uint64_t v30 = swift_getWitnessTable();
  unint64_t v31 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v43 = v30;
  unint64_t v44 = v31;
  uint64_t v42 = swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v22);
  return ((uint64_t (*)(uint64_t, uint64_t))v27)(v22, v10);
}

uint64_t SearchCompletion.shouldRenderPreV6.getter()
{
  type metadata accessor for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>(0, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, MEMORY[0x1E4F27330]);
  uint64_t v30 = v1;
  uint64_t v29 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v28 - v2;
  uint64_t v4 = type metadata accessor for AttributedString.Runs();
  uint64_t v28 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  SearchCompletion.text.getter((uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of Environment<DismissSearchAccessoryAction>.Content((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB718]);
    char v17 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    outlined init with copy of TextInputSuggestionCompletionKind(v0, (uint64_t)v33);
    if (v35)
    {
      v31[2] = v33[2];
      v31[3] = v33[3];
      uint64_t v32 = v34;
      v31[0] = v33[0];
      v31[1] = v33[1];
      AttributedString.runs.getter();
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x1F4188790](KeyPath);
      *(&v28 - 2) = v19;
      swift_getKeyPath();
      lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute();
      AttributedString.Runs.subscript.getter();
      swift_release();
      uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v6, v4);
      MEMORY[0x1F4188790](v20);
      *(&v28 - 2) = (uint64_t)v31;
      BOOL v21 = specialized Sequence.contains(where:)((uint64_t (*)(char *))partial apply for closure #1 in SearchCompletion.shouldRenderPreV6.getter, (uint64_t)(&v28 - 4));
      (*(void (**)(char *, uint64_t))(v29 + 8))(v3, v30);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      char v17 = !v21;
      outlined destroy of AnyToken((uint64_t)v31);
    }
    else
    {
      long long v22 = v33[0];
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v9, v16, v13);
      uint64_t v23 = SearchAttributedString.lastText.getter();
      unint64_t v25 = v24;
      outlined destroy of (AnyHashable?, AnyHashable?)((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SearchAttributedString);
      if (v25)
      {
        if (__PAIR128__(v25, v23) == v22) {
          char v26 = 1;
        }
        else {
          char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        char v26 = 0;
      }
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      swift_bridgeObjectRelease_n();
      char v17 = v26 ^ 1;
    }
  }
  return v17 & 1;
}

uint64_t closure #1 in SearchCompletion.completionContent.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchAttributedString();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v20 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v20 - v12;
  outlined init with copy of TextInputSuggestionCompletionKind(a1, (uint64_t)v22);
  if (v24)
  {
    v20[2] = v22[2];
    v20[3] = v22[3];
    uint64_t v21 = v23;
    v20[0] = v22[0];
    v20[1] = v22[1];
    type metadata accessor for SearchCompletion();
    SearchCompletion.text.getter((uint64_t)v7);
    uint64_t v14 = type metadata accessor for AttributedString();
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v7, 1, v14))
    {
      outlined init with copy of AttributedString?((uint64_t)v7, (uint64_t)v10);
      SearchCompletion.text.setter((uint64_t)v10);
      outlined destroy of AnyToken((uint64_t)v20);
      return outlined destroy of Environment<DismissSearchAccessoryAction>.Content((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB718]);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v4, v7, v14);
      SearchAttributedString.append(token:)((uint64_t)v20);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v14);
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v7, v4, v14);
      SearchCompletion.text.setter((uint64_t)v7);
      return outlined destroy of AnyToken((uint64_t)v20);
    }
  }
  else
  {
    Swift::String v17 = (Swift::String)v22[0];
    type metadata accessor for SearchCompletion();
    SearchCompletion.text.getter((uint64_t)v13);
    uint64_t v18 = type metadata accessor for AttributedString();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v13, 1, v18))
    {
      swift_bridgeObjectRelease();
      outlined init with copy of AttributedString?((uint64_t)v13, (uint64_t)v10);
      SearchCompletion.text.setter((uint64_t)v10);
      return outlined destroy of Environment<DismissSearchAccessoryAction>.Content((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB718]);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v4, v13, v18);
      SearchAttributedString.update(text:)(v17);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v13, v18);
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v13, v4, v18);
      return SearchCompletion.text.setter((uint64_t)v13);
    }
  }
}

uint64_t SearchCompletion.text.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized Environment.wrappedValue.getter((uint64_t)v4);
  type metadata accessor for Binding<AttributedString>();
  uint64_t v6 = v5;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of (AnyHashable?, AnyHashable?)((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>?);
    uint64_t v7 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 1, 1, v7);
  }
  else
  {
    MEMORY[0x18C113DA0](v6);
    outlined destroy of (AnyHashable?, AnyHashable?)((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
    uint64_t v9 = type metadata accessor for AttributedString();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 0, 1, v9);
  }
}

uint64_t SearchCompletion.text.setter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AttributedString();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v10[-v7];
  outlined init with copy of AttributedString?(a1, (uint64_t)&v10[-v7]);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) != 1)
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 32))(v5, v8, v2);
    closure #1 in SearchCompletion.text.setter(&v11);
    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return outlined destroy of Environment<DismissSearchAccessoryAction>.Content(a1, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB718]);
}

uint64_t closure #2 in SearchCompletion.completionContent.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SearchCompletion();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 36));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t closure #1 in SearchCompletion.shouldRenderPreV6.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (AnyToken?, Range<AttributedString.Index>)();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(v7 + 56);
  uint64_t v9 = (uint64_t)&v6[v8];
  uint64_t v10 = a1 + v8;
  outlined init with copy of AnyHashable?(a1, (uint64_t)v6, &lazy cache variable for type metadata for AnyToken?, (uint64_t)&type metadata for AnyToken);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_9(v10, v9, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  outlined init with take of AnyToken?((uint64_t)v6, (uint64_t)v19);
  if (v20)
  {
    outlined init with copy of AnyHashable((uint64_t)&v21, (uint64_t)v26);
    outlined destroy of AnyToken((uint64_t)v19);
    outlined destroy of (AnyHashable?, AnyHashable?)(v9, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
  }
  else
  {
    outlined destroy of (AnyHashable?, AnyHashable?)(v9, (uint64_t (*)(void))type metadata accessor for Range<AttributedString.Index>);
    _ss11AnyHashableVSgWOhTm_2((uint64_t)v19, &lazy cache variable for type metadata for AnyToken?, (uint64_t)&type metadata for AnyToken);
    memset(v26, 0, sizeof(v26));
    uint64_t v27 = 0;
  }
  outlined init with copy of AnyHashable(a2 + 32, (uint64_t)v25);
  uint64_t v11 = MEMORY[0x1E4FBB960];
  outlined init with copy of AnyHashable?((uint64_t)v26, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  outlined init with copy of AnyHashable?((uint64_t)v25, (uint64_t)&v22, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v11);
  if (!v20)
  {
    uint64_t v13 = MEMORY[0x1E4FBB960];
    _ss11AnyHashableVSgWOhTm_2((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    _ss11AnyHashableVSgWOhTm_2((uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v13);
    if (!*((void *)&v23 + 1))
    {
      _ss11AnyHashableVSgWOhTm_2((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
      char v12 = 1;
      return v12 & 1;
    }
LABEL_10:
    outlined destroy of (AnyHashable?, AnyHashable?)((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for (AnyHashable?, AnyHashable?));
    char v12 = 0;
    return v12 & 1;
  }
  outlined init with copy of AnyHashable?((uint64_t)v19, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
  if (!*((void *)&v23 + 1))
  {
    uint64_t v14 = MEMORY[0x1E4FBB960];
    _ss11AnyHashableVSgWOhTm_2((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960]);
    _ss11AnyHashableVSgWOhTm_2((uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v14);
    outlined destroy of AnyHashable((uint64_t)v18);
    goto LABEL_10;
  }
  v16[0] = v22;
  v16[1] = v23;
  uint64_t v17 = v24;
  char v12 = MEMORY[0x18C1174E0](v18, v16);
  outlined destroy of AnyHashable((uint64_t)v16);
  _ss11AnyHashableVSgWOhTm_2((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v11);
  _ss11AnyHashableVSgWOhTm_2((uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v11);
  outlined destroy of AnyHashable((uint64_t)v18);
  _ss11AnyHashableVSgWOhTm_2((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v11);
  return v12 & 1;
}

uint64_t closure #1 in SearchCompletion.text.setter@<X0>(BOOL *a1@<X8>)
{
  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchCompletion();
  specialized Environment.wrappedValue.getter((uint64_t)v4);
  type metadata accessor for Binding<AttributedString>();
  int v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  uint64_t v7 = (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>?;
  if (v6 != 1)
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();
    uint64_t v7 = (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>;
  }
  uint64_t result = outlined destroy of (AnyHashable?, AnyHashable?)((uint64_t)v4, v7);
  *a1 = v6 == 1;
  return result;
}

uint64_t closure #1 in SearchCompletionButtonStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DismissSearchAccessoryAction(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  ButtonAction.callAsFunction()();
  uint64_t v6 = a2 + *(int *)(type metadata accessor for SearchCompletionButtonStyle() + 24);
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  char v9 = *(unsigned char *)(v6 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v6, v8, v9);
  uint64_t v10 = (void (*)(uint64_t *))specialized Environment.wrappedValue.getter(v7, v8, v9);
  _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(v7, v8, v9, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  if (v10)
  {
    uint64_t v13 = 4;
    v10(&v13);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v10);
  }
  specialized Environment.wrappedValue.getter((uint64_t)v5);
  DismissSearchAccessoryAction.callAsFunction()();
  return outlined destroy of (AnyHashable?, AnyHashable?)((uint64_t)v5, type metadata accessor for DismissSearchAccessoryAction);
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance SearchCompletionButtonStyle@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v24 = a3;
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = *(void *)(a2 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v13);
  uint64_t v14 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x1F4188790](v14 - 8);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_9((uint64_t)a1, (uint64_t)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrimitiveButtonStyleConfiguration);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_9(v5, (uint64_t)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for SearchCompletionButtonStyle);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v18 = (v16 + *(unsigned __int8 *)(v11 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = swift_allocObject();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_0((uint64_t)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v17, type metadata accessor for PrimitiveButtonStyleConfiguration);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_0((uint64_t)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for SearchCompletionButtonStyle);
  char v20 = a1[1];
  *uint64_t v10 = *a1;
  v10[1] = v20;
  uint64_t v21 = (uint64_t (**)())&v10[*(int *)(v8 + 44)];
  *uint64_t v21 = partial apply for closure #1 in SearchCompletionButtonStyle.makeBody(configuration:);
  v21[1] = (uint64_t (*)())v19;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v10, v24);
  return outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v10);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance DefinesSearchCompletionModifier@<X0>(uint64_t a1@<X8>)
{
  int v2 = *v1;
  if (*v1)
  {
    *(_DWORD *)a1 = v2;
    *(unsigned char *)(a1 + 4) = 0;
    *(_DWORD *)(a1 + 8) = v2;
    *(_WORD *)(a1 + 12) = 0;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t SearchSuggestionsVisibilityModifier.body(content:)@<X0>(unsigned char *a1@<X8>)
{
  if (*(unsigned char *)v1 == 2)
  {
    uint64_t v3 = *(unsigned __int8 *)(v1 + 24);
    unint64_t v5 = *(void *)(v1 + 8);
    uint64_t v4 = *(void *)(v1 + 16);
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v4, v3);
    specialized Environment.wrappedValue.getter(v4, v3, &v9);
    char v6 = v9;
    uint64_t result = outlined consume of Environment<Bool?>.Content(v4, v3);
    uint64_t v8 = (v5 >> v6) & 1;
  }
  else
  {
    LOBYTE(v8) = 0;
  }
  *a1 = v8;
  return result;
}

uint64_t View.searchCompletion(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  char v6 = 0;
  swift_bridgeObjectRetain();
  return SearchCompletion.init(kind:label:)((uint64_t)v5, (void (*)(void))partial apply for closure #1 in View.searchCompletion(_:), a3);
}

uint64_t closure #1 in View.searchCompletion(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t partial apply for closure #1 in View.searchCompletion(_:)()
{
  return closure #1 in View.searchCompletion(_:)(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t View.searchCompletion<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double v12 = MEMORY[0x1F4188790](a1);
  uint64_t v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, double))(v15 + 16))(v14, v12);
  AnyToken.init<A>(_:)((uint64_t)v14, a3, (uint64_t)v23);
  v23[72] = 1;
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = v6;
  return SearchCompletion.init(kind:label:)((uint64_t)v23, (void (*)(void))partial apply for closure #1 in View.searchCompletion<A>(_:), a6);
}

uint64_t closure #1 in View.searchCompletion<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t partial apply for closure #1 in View.searchCompletion<A>(_:)()
{
  return closure #1 in View.searchCompletion<A>(_:)(*(void *)(v0 + 48), *(void *)(v0 + 16));
}

uint64_t View.searchSuggestions(_:for:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  v8[0] = a1;
  uint64_t v9 = v6;
  uint64_t KeyPath = swift_getKeyPath();
  char v11 = 0;
  MEMORY[0x18C113660](v8, a3, &type metadata for SearchSuggestionsVisibilityModifier, a4);
  return swift_release();
}

uint64_t View.searchSuggestions(_:in:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  return View.searchSuggestions(_:for:)(a1, &v5, a3, a4);
}

uint64_t key path getter for EnvironmentValues.searchSuggestionsPlacement : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_5(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuggestionsPlacementKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_5(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuggestionsPlacementKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.searchSuggestionsPlacement : EnvironmentValues()
{
  return EnvironmentValues.searchSuggestionsPlacement.setter();
}

uint64_t sub_187DFC810()
{
  return EnvironmentValues.searchSuggestionsPlacement.setter();
}

uint64_t sub_187DFC848()
{
  type metadata accessor for SearchCompletion();

  return swift_getWitnessTable();
}

uint64_t type metadata accessor for SearchCompletion()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187DFC8A8()
{
  type metadata accessor for SearchCompletion();

  return swift_getWitnessTable();
}

uint64_t sub_187DFC8F4()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier;
  if (!lazy protocol witness table cache variable for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier);
  }
  return result;
}

void type metadata completion function for SearchCompletion()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(319, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, MEMORY[0x1E4F3F4D8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SearchCompletion(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11;
  uint64_t v13 = *(_DWORD *)(v11 + 80);
  uint64_t v14 = v13 | 7;
  unint64_t v15 = ((v13 + 16) & ~v13) + *(void *)(v11 + 64);
  if (v15 <= 8) {
    uint64_t v16 = 8;
  }
  else {
    uint64_t v16 = ((v13 + 16) & ~v13) + *(void *)(v11 + 64);
  }
  if ((v13 | (unint64_t)v7) > 7
    || ((*(_DWORD *)(v11 + 80) | v7) & 0x100000) != 0
    || v16
     + (((v13 | 7) + v9 + ((v7 + 73) & ~(unint64_t)v7)) & ~(v13 | 7))
     + 1 > 0x18)
  {
    uint64_t v19 = *a2;
    *(void *)a1 = *a2;
    a1 = v19 + (((v13 | v7) & 0xF8 ^ 0x1F8) & ((v13 | v7) + 16));
LABEL_41:
    swift_retain();
    return a1;
  }
  uint64_t v50 = v16;
  uint64_t v51 = *(void *)(v10 - 8);
  unsigned int v20 = *((unsigned __int8 *)a2 + 72);
  if (v20 >= 2) {
    unsigned int v20 = *(_DWORD *)a2 + 2;
  }
  int v49 = *(_DWORD *)(v12 + 84);
  size_t __n = v15;
  uint64_t v48 = v10;
  unint64_t v21 = ~(unint64_t)v7;
  uint64_t v22 = ~v14;
  if (v20 == 1)
  {
    uint64_t v23 = a2[3];
    *(void *)(a1 + 24) = v23;
    (**(void (***)(uint64_t, uint64_t *))(v23 - 8))(a1, a2);
    long long v24 = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 56) = v24;
    (**(void (***)(uint64_t, uint64_t))(v24 - 8))(a1 + 32, (uint64_t)(a2 + 4));
    char v25 = 1;
  }
  else
  {
    uint64_t v26 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v26;
    swift_bridgeObjectRetain();
    char v25 = 0;
  }
  *(unsigned char *)(a1 + 72) = v25;
  uint64_t v27 = (uint64_t)a2 + v8;
  uint64_t v28 = (a1 + v8 + 73) & v21;
  uint64_t v29 = (v27 + 73) & v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v28, v29, v5);
  uint64_t v30 = (void *)((v28 + v9 + v14) & v22);
  unint64_t v31 = (unsigned __int8 *)((v29 + v9 + v14) & v22);
  unsigned int v32 = v31[v50];
  unsigned int v33 = v32 - 2;
  if (v32 < 2)
  {
    uint64_t v35 = v51;
    int v36 = v49;
LABEL_25:
    if (v32 != 1)
    {
LABEL_40:
      void *v30 = *(void *)v31;
      *((unsigned char *)v30 + v50) = 0;
      goto LABEL_41;
    }
  }
  else
  {
    if (v50 <= 3) {
      uint64_t v34 = v50;
    }
    else {
      uint64_t v34 = 4;
    }
    uint64_t v35 = v51;
    int v36 = v49;
    switch(v34)
    {
      case 1:
        int v37 = *v31;
        break;
      case 2:
        int v37 = *(unsigned __int16 *)v31;
        break;
      case 3:
        int v37 = *(unsigned __int16 *)v31 | (v31[2] << 16);
        break;
      case 4:
        int v37 = *(_DWORD *)v31;
        break;
      default:
        goto LABEL_25;
    }
    int v44 = (v37 | (v33 << (8 * v50))) + 2;
    int v45 = v37 + 2;
    if (v50 < 4) {
      int v45 = v44;
    }
    if (v45 != 1) {
      goto LABEL_40;
    }
  }
  uint64_t v38 = ~v13;
  unint64_t v39 = (uint64_t *)((unint64_t)(v31 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v36 & 0x80000000) == 0)
  {
    uint64_t v40 = *v39;
    if ((unint64_t)*v39 >= 0xFFFFFFFF) {
      LODWORD(v40) = -1;
    }
    if (v40 != -1) {
      goto LABEL_30;
    }
LABEL_32:
    void *v30 = *(void *)v31;
    uint64_t v41 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v41 = *v39;
    uint64_t v42 = ((unint64_t)v41 + v13 + 8) & v38;
    uint64_t v43 = *(void (**)(uint64_t, unint64_t, uint64_t))(v35 + 16);
    swift_retain();
    swift_retain();
    v43(v42, ((unint64_t)v39 + v13 + 8) & v38, v48);
    goto LABEL_33;
  }
  if (!(*(unsigned int (**)(unint64_t))(v35 + 48))(((unint64_t)v39 + v13 + 8) & v38)) {
    goto LABEL_32;
  }
LABEL_30:
  memcpy(v30, v31, __n);
LABEL_33:
  *((unsigned char *)v30 + v50) = 1;
  return a1;
}

uint64_t destroy for SearchCompletion(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  if (v4 == 1)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = v5 + 8;
  unint64_t v7 = (a1 + *(unsigned __int8 *)(v5 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v7);
  uint64_t v8 = *(void *)(v6 + 56);
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (unsigned __int8 *)((v7 + v8 + (v11 | 7)) & ~(v11 | 7));
  unint64_t v13 = ((v11 + 16) & ~v11) + *(void *)(v10 + 64);
  if (v13 <= 8) {
    unint64_t v13 = 8;
  }
  unsigned int v14 = v12[v13];
  unsigned int v15 = v14 - 2;
  if (v14 >= 2)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *v12;
        goto LABEL_17;
      case 2:
        int v17 = *(unsigned __int16 *)v12;
        goto LABEL_17;
      case 3:
        int v17 = *(unsigned __int16 *)v12 | (v12[2] << 16);
        goto LABEL_17;
      case 4:
        int v17 = *(_DWORD *)v12;
LABEL_17:
        int v18 = (v17 | (v15 << (8 * v13))) + 2;
        unsigned int v14 = v17 + 2;
        if (v13 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  if (v14 == 1)
  {
    uint64_t v19 = ~v11;
    unsigned int v20 = (uint64_t *)((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v10 + 84) & 0x80000000) != 0)
    {
      uint64_t v24 = *(void *)(v9 - 8);
      uint64_t result = (*(uint64_t (**)(unint64_t))(v10 + 48))(((unint64_t)v20 + v11 + 8) & v19);
      uint64_t v10 = v24;
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t v21 = *v20;
      if ((unint64_t)*v20 >= 0xFFFFFFFF) {
        LODWORD(v21) = -1;
      }
      uint64_t result = (v21 + 1);
      if (v21 != -1) {
        return result;
      }
    }
    uint64_t v25 = v10;
    swift_release();
    swift_release();
    uint64_t v23 = *(uint64_t (**)(unint64_t, uint64_t))(v25 + 8);
    return v23(((unint64_t)v20 + v11 + 8) & v19, v9);
  }

  return swift_release();
}

uint64_t initializeWithCopy for SearchCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int8 *)(a2 + 72);
  if (v6 >= 2) {
    unsigned int v6 = *(_DWORD *)a2 + 2;
  }
  if (v6 == 1)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
    long long v8 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 32, a2 + 32);
    char v9 = 1;
  }
  else
  {
    uint64_t v10 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v10;
    swift_bridgeObjectRetain();
    char v9 = 0;
  }
  *(unsigned char *)(a1 + 72) = v9;
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 73 + a1) & ~v13;
  uint64_t v15 = (v13 + 73 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v14, v15);
  uint64_t v16 = *(void *)(v12 + 48);
  uint64_t v17 = type metadata accessor for AttributedString();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (v19 | 7) + v16;
  uint64_t v21 = (void *)((v20 + v14) & ~(v19 | 7));
  uint64_t v22 = (unsigned __int8 *)((v20 + v15) & ~(v19 | 7));
  uint64_t v23 = *(void *)(v18 + 64);
  size_t v24 = ((v19 + 16) & ~v19) + v23;
  if (v24 <= 8) {
    uint64_t v25 = 8;
  }
  else {
    uint64_t v25 = ((v19 + 16) & ~v19) + v23;
  }
  unsigned int v26 = v22[v25];
  unsigned int v27 = v26 - 2;
  if (v26 >= 2)
  {
    if (v25 <= 3) {
      uint64_t v28 = v25;
    }
    else {
      uint64_t v28 = 4;
    }
    switch(v28)
    {
      case 1:
        int v29 = *v22;
        goto LABEL_18;
      case 2:
        int v29 = *(unsigned __int16 *)v22;
        goto LABEL_18;
      case 3:
        int v29 = *(unsigned __int16 *)v22 | (v22[2] << 16);
        goto LABEL_18;
      case 4:
        int v29 = *(_DWORD *)v22;
LABEL_18:
        int v30 = (v29 | (v27 << (8 * v25))) + 2;
        unsigned int v26 = v29 + 2;
        if (v25 < 4) {
          unsigned int v26 = v30;
        }
        break;
      default:
        break;
    }
  }
  if (v26 == 1)
  {
    uint64_t v31 = ~v19;
    unsigned int v32 = (uint64_t *)((unint64_t)(v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v18 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v18 + 48))(((unint64_t)v32 + v19 + 8) & v31))
      {
LABEL_25:
        memcpy(v21, v22, v24);
LABEL_29:
        *((unsigned char *)v21 + v25) = 1;
        return a1;
      }
    }
    else
    {
      uint64_t v33 = *v32;
      if ((unint64_t)*v32 >= 0xFFFFFFFF) {
        LODWORD(v33) = -1;
      }
      if (v33 != -1) {
        goto LABEL_25;
      }
    }
    *uint64_t v21 = *(void *)v22;
    uint64_t v34 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v34 = *v32;
    uint64_t v35 = ((unint64_t)v34 + v19 + 8) & v31;
    int v36 = *(void (**)(uint64_t, unint64_t, uint64_t))(v18 + 16);
    swift_retain();
    swift_retain();
    v36(v35, ((unint64_t)v32 + v19 + 8) & v31, v17);
    goto LABEL_29;
  }
  *uint64_t v21 = *(void *)v22;
  *((unsigned char *)v21 + v25) = 0;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SearchCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 72);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v7 = *(unsigned __int8 *)(a2 + 72);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      uint64_t v8 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      uint64_t v9 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v9;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 32, a2 + 32);
      *(unsigned char *)(a1 + 72) = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 72) = 0;
      swift_bridgeObjectRetain();
    }
  }
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 73 + a1) & ~v12;
  uint64_t v14 = (v12 + 73 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 40);
  uint64_t v16 = type metadata accessor for AttributedString();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = (v18 | 7) + v15;
  uint64_t v20 = (unsigned __int8 *)((v19 + v13) & ~(v18 | 7));
  uint64_t v21 = (unsigned __int8 *)((v19 + v14) & ~(v18 | 7));
  if (v20 == v21) {
    return a1;
  }
  uint64_t v22 = v16;
  uint64_t v23 = *(void *)(v16 - 8);
  uint64_t v24 = *(unsigned int *)(v17 + 84);
  uint64_t v25 = *(void *)(v17 + 64);
  size_t v26 = v25 + ((v18 + 16) & ~v18);
  if (v26 <= 8) {
    uint64_t v27 = 8;
  }
  else {
    uint64_t v27 = v25 + ((v18 + 16) & ~v18);
  }
  unsigned int v28 = v20[v27];
  unsigned int v29 = v28 - 2;
  if (v28 >= 2)
  {
    if (v27 <= 3) {
      uint64_t v30 = v27;
    }
    else {
      uint64_t v30 = 4;
    }
    switch(v30)
    {
      case 1:
        int v31 = *v20;
        goto LABEL_25;
      case 2:
        int v31 = *(unsigned __int16 *)v20;
        goto LABEL_25;
      case 3:
        int v31 = *(unsigned __int16 *)v20 | (v20[2] << 16);
        goto LABEL_25;
      case 4:
        int v31 = *(_DWORD *)v20;
LABEL_25:
        int v32 = (v31 | (v29 << (8 * v27))) + 2;
        unsigned int v28 = v31 + 2;
        if (v27 < 4) {
          unsigned int v28 = v32;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v46 = ~v18;
  if (v28 == 1)
  {
    uint64_t v33 = (uint64_t *)((unint64_t)(v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v24 & 0x80000000) == 0)
    {
      uint64_t v34 = *v33;
      if ((unint64_t)*v33 >= 0xFFFFFFFF) {
        LODWORD(v34) = -1;
      }
      if (v34 != -1) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v23 + 48))(((unint64_t)v33 + v18 + 8) & v46, v24, v16))
    {
LABEL_35:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v23 + 8))(((unint64_t)v33 + v18 + 8) & v46, v22);
    }
  }
  else
  {
    swift_release();
  }
LABEL_36:
  unsigned int v35 = v21[v27];
  unsigned int v36 = v35 - 2;
  if (v35 >= 2)
  {
    if (v27 <= 3) {
      uint64_t v37 = v27;
    }
    else {
      uint64_t v37 = 4;
    }
    switch(v37)
    {
      case 1:
        int v38 = *v21;
        goto LABEL_45;
      case 2:
        int v38 = *(unsigned __int16 *)v21;
        goto LABEL_45;
      case 3:
        int v38 = *(unsigned __int16 *)v21 | (v21[2] << 16);
        goto LABEL_45;
      case 4:
        int v38 = *(_DWORD *)v21;
LABEL_45:
        int v39 = (v38 | (v36 << (8 * v27))) + 2;
        unsigned int v35 = v38 + 2;
        if (v27 < 4) {
          unsigned int v35 = v39;
        }
        break;
      default:
        break;
    }
  }
  if (v35 == 1)
  {
    uint64_t v40 = (uint64_t *)((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v24 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v23 + 48))(((unint64_t)v40 + v18 + 8) & v46, v24, v22))
      {
LABEL_52:
        memcpy(v20, v21, v26);
LABEL_56:
        v20[v27] = 1;
        return a1;
      }
    }
    else
    {
      uint64_t v41 = *v40;
      if ((unint64_t)*v40 >= 0xFFFFFFFF) {
        LODWORD(v41) = -1;
      }
      if (v41 != -1) {
        goto LABEL_52;
      }
    }
    *(void *)uint64_t v20 = *(void *)v21;
    uint64_t v42 = (void *)((unint64_t)(v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v42 = *v40;
    uint64_t v43 = ((unint64_t)v42 + v18 + 8) & v46;
    int v44 = *(void (**)(uint64_t, unint64_t, uint64_t))(v23 + 16);
    swift_retain();
    swift_retain();
    v44(v43, ((unint64_t)v40 + v18 + 8) & v46, v22);
    goto LABEL_56;
  }
  *(void *)uint64_t v20 = *(void *)v21;
  v20[v27] = 0;
  swift_retain();
  return a1;
}

uint64_t initializeWithTake for SearchCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 72);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 73 + a1) & ~v10;
  uint64_t v12 = (v10 + 73 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 32);
  uint64_t v14 = type metadata accessor for AttributedString();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (v16 | 7) + v13;
  uint64_t v18 = (void *)((v17 + v11) & ~(v16 | 7));
  uint64_t v19 = (unsigned __int8 *)((v17 + v12) & ~(v16 | 7));
  uint64_t v20 = *(void *)(v15 + 64);
  size_t v21 = ((v16 + 16) & ~v16) + v20;
  if (v21 <= 8) {
    uint64_t v22 = 8;
  }
  else {
    uint64_t v22 = ((v16 + 16) & ~v16) + v20;
  }
  unsigned int v23 = v19[v22];
  unsigned int v24 = v23 - 2;
  if (v23 >= 2)
  {
    if (v22 <= 3) {
      uint64_t v25 = v22;
    }
    else {
      uint64_t v25 = 4;
    }
    switch(v25)
    {
      case 1:
        int v26 = *v19;
        goto LABEL_18;
      case 2:
        int v26 = *(unsigned __int16 *)v19;
        goto LABEL_18;
      case 3:
        int v26 = *(unsigned __int16 *)v19 | (v19[2] << 16);
        goto LABEL_18;
      case 4:
        int v26 = *(_DWORD *)v19;
LABEL_18:
        int v27 = (v26 | (v24 << (8 * v22))) + 2;
        unsigned int v23 = v26 + 2;
        if (v22 < 4) {
          unsigned int v23 = v27;
        }
        break;
      default:
        break;
    }
  }
  if (v23 == 1)
  {
    uint64_t v28 = ~v16;
    unsigned int v29 = (uint64_t *)((unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v15 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v15 + 48))(((unint64_t)v29 + v16 + 8) & v28))
      {
LABEL_25:
        memcpy(v18, v19, v21);
LABEL_29:
        char v31 = 1;
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v30 = *v29;
      if ((unint64_t)*v29 >= 0xFFFFFFFF) {
        LODWORD(v30) = -1;
      }
      if (v30 != -1) {
        goto LABEL_25;
      }
    }
    void *v18 = *(void *)v19;
    int v32 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v32 = *v29;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))(((unint64_t)v32 + v16 + 8) & v28, ((unint64_t)v29 + v16 + 8) & v28, v14);
    goto LABEL_29;
  }
  char v31 = 0;
  void *v18 = *(void *)v19;
LABEL_30:
  *((unsigned char *)v18 + v22) = v31;
  return a1;
}

uint64_t assignWithTake for SearchCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 72);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v7 = *(unsigned __int8 *)(a2 + 72);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      long long v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      long long v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      char v10 = 1;
    }
    else
    {
      char v10 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(unsigned char *)(a1 + 72) = v10;
  }
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 73 + a1) & ~v13;
  uint64_t v15 = (v13 + 73 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v14, v15);
  uint64_t v16 = *(void *)(v12 + 24);
  uint64_t v17 = type metadata accessor for AttributedString();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (v19 | 7) + v16;
  size_t v21 = (unsigned __int8 *)((v20 + v14) & ~(v19 | 7));
  uint64_t v22 = (unsigned __int8 *)((v20 + v15) & ~(v19 | 7));
  if (v21 != v22)
  {
    uint64_t v23 = v17;
    uint64_t v24 = *(void *)(v17 - 8);
    uint64_t v25 = *(unsigned int *)(v18 + 84);
    uint64_t v26 = *(void *)(v18 + 64);
    size_t v27 = v26 + ((v19 + 16) & ~v19);
    if (v27 <= 8) {
      uint64_t v28 = 8;
    }
    else {
      uint64_t v28 = v26 + ((v19 + 16) & ~v19);
    }
    unsigned int v29 = v21[v28];
    unsigned int v30 = v29 - 2;
    if (v29 >= 2)
    {
      if (v28 <= 3) {
        uint64_t v31 = v28;
      }
      else {
        uint64_t v31 = 4;
      }
      switch(v31)
      {
        case 1:
          int v32 = *v21;
          goto LABEL_26;
        case 2:
          int v32 = *(unsigned __int16 *)v21;
          goto LABEL_26;
        case 3:
          int v32 = *(unsigned __int16 *)v21 | (v21[2] << 16);
          goto LABEL_26;
        case 4:
          int v32 = *(_DWORD *)v21;
LABEL_26:
          int v33 = (v32 | (v30 << (8 * v28))) + 2;
          unsigned int v29 = v32 + 2;
          if (v28 < 4) {
            unsigned int v29 = v33;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v46 = ~v19;
    if (v29 != 1)
    {
      swift_release();
      goto LABEL_37;
    }
    uint64_t v34 = (uint64_t *)((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v25 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v24 + 48))(((unint64_t)v34 + v19 + 8) & v46, v25, v17))
      {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v35 = *v34;
      if ((unint64_t)*v34 >= 0xFFFFFFFF) {
        LODWORD(v35) = -1;
      }
      if (v35 != -1)
      {
LABEL_37:
        unsigned int v36 = v22[v28];
        unsigned int v37 = v36 - 2;
        if (v36 >= 2)
        {
          if (v28 <= 3) {
            uint64_t v38 = v28;
          }
          else {
            uint64_t v38 = 4;
          }
          switch(v38)
          {
            case 1:
              int v39 = *v22;
              goto LABEL_46;
            case 2:
              int v39 = *(unsigned __int16 *)v22;
              goto LABEL_46;
            case 3:
              int v39 = *(unsigned __int16 *)v22 | (v22[2] << 16);
              goto LABEL_46;
            case 4:
              int v39 = *(_DWORD *)v22;
LABEL_46:
              int v40 = (v39 | (v37 << (8 * v28))) + 2;
              unsigned int v36 = v39 + 2;
              if (v28 < 4) {
                unsigned int v36 = v40;
              }
              break;
            default:
              break;
          }
        }
        if (v36 != 1)
        {
          char v43 = 0;
          *(void *)size_t v21 = *(void *)v22;
LABEL_58:
          v21[v28] = v43;
          return a1;
        }
        uint64_t v41 = (uint64_t *)((unint64_t)(v22 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v25 & 0x80000000) != 0)
        {
          if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v24 + 48))(((unint64_t)v41 + v19 + 8) & v46, v25, v23))
          {
LABEL_53:
            memcpy(v21, v22, v27);
LABEL_57:
            char v43 = 1;
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v42 = *v41;
          if ((unint64_t)*v41 >= 0xFFFFFFFF) {
            LODWORD(v42) = -1;
          }
          if (v42 != -1) {
            goto LABEL_53;
          }
        }
        *(void *)size_t v21 = *(void *)v22;
        int v44 = (void *)((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF8);
        *int v44 = *v41;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 32))(((unint64_t)v44 + v19 + 8) & v46, ((unint64_t)v41 + v19 + 8) & v46, v23);
        goto LABEL_57;
      }
    }
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v24 + 8))(((unint64_t)v34 + v19 + 8) & v46, v23);
    goto LABEL_37;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCompletion(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v9 - 8) + 80);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = 8;
  if (((v10 + 16) & (unint64_t)~v10) + *(void *)(*(void *)(v9 - 8) + 64) > 8) {
    uint64_t v12 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(v9 - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_25;
  }
  uint64_t v13 = v12 + (((v10 | 7) + *(void *)(v6 + 64) + ((v11 + 73) & ~v11)) & ~(v10 | 7)) + 1;
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v17 = ((a2 - v8 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v17))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v17 < 2)
    {
LABEL_25:
      if (v7 > 0xFE)
      {
        uint64_t v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
        return v20(((unint64_t)a1 + v11 + 73) & ~v11, v7, v5);
      }
      else
      {
        unsigned int v19 = *((unsigned __int8 *)a1 + 72);
        if (v19 >= 2) {
          return (v19 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_25;
  }
LABEL_17:
  int v18 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v18 = 0;
  }
  if (v13)
  {
    if (v13 > 3) {
      LODWORD(v13) = 4;
    }
    switch((int)v13)
    {
      case 2:
        LODWORD(v13) = *a1;
        break;
      case 3:
        LODWORD(v13) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v13) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v13) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v13 | v18) + 1;
}

void storeEnumTagSinglePayload for SearchCompletion(_WORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v23 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0xFE) {
    unsigned int v10 = 254;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(type metadata accessor for AttributedString() - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  unint64_t v13 = ((v12 + 16) & ~v12) + *(void *)(v11 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = ((v12 | 7) + *(void *)(v8 + 64) + ((v14 + 73) & ~v14)) & ~(v12 | 7);
  if (v13 <= 8) {
    unint64_t v13 = 8;
  }
  size_t v16 = v13 + v15 + 1;
  if (a3 <= v10)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v10 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v18 = ~v10 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *a1 = v21;
          *((unsigned char *)a1 + 2) = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *a1 = v21;
        }
        else
        {
          *(unsigned char *)a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        *((unsigned char *)a1 + v16) = v19;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v16) = v19;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)((char *)a1 + v16) = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      *((unsigned char *)a1 + v16) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)((char *)a1 + v16) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187DFE620);
    case 4:
      *(_DWORD *)((char *)a1 + v16) = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v9 > 0xFE)
        {
          uint64_t v22 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
          v22(((unint64_t)a1 + v14 + 73) & ~v14, a2, v9, v7);
        }
        else if (a2 > 0xFE)
        {
          *(_OWORD *)((char *)a1 + 57) = 0u;
          *((_OWORD *)a1 + 2) = 0u;
          *((_OWORD *)a1 + 3) = 0u;
          *(_OWORD *)a1 = 0u;
          *((_OWORD *)a1 + 1) = 0u;
          *(_DWORD *)a1 = a2 - 255;
        }
        else
        {
          *((unsigned char *)a1 + 72) = -(char)a2;
        }
      }
      return;
  }
}

uint64_t destroy for SearchSuggestionsVisibilityModifier(uint64_t a1)
{
  return outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
}

uint64_t initializeWithCopy for SearchSuggestionsVisibilityModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v3, v4);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithCopy for SearchSuggestionsVisibilityModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  unsigned __int8 v4 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v3, v4);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 24);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of Environment<Bool?>.Content(v5, v6);
  return a1;
}

uint64_t assignWithTake for SearchSuggestionsVisibilityModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  char v3 = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 24) = v3;
  outlined consume of Environment<Bool?>.Content(v4, v5);
  return a1;
}

ValueMetadata *type metadata accessor for SearchSuggestionsVisibilityModifier()
{
  return &type metadata for SearchSuggestionsVisibilityModifier;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchCompletionButtonStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int v7 = *((unsigned __int8 *)a2 + 72);
    if (v7 == 255)
    {
      long long v8 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      long long v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else if (v7)
    {
      uint64_t v12 = a2[3];
      *(void *)(a1 + 24) = v12;
      (**(void (***)(uint64_t, uint64_t *))(v12 - 8))(a1, a2);
      long long v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v4 + 56) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v4 + 32, (uint64_t)(a2 + 4));
      *(unsigned char *)(v4 + 72) = 1;
    }
    else
    {
      uint64_t v11 = a2[1];
      *(void *)uint64_t v4 = *a2;
      *(void *)(v4 + 8) = v11;
      *(unsigned char *)(v4 + 72) = 0;
      swift_bridgeObjectRetain();
    }
    uint64_t v14 = *(int *)(a3 + 20);
    uint64_t v15 = (void *)(v4 + v14);
    size_t v16 = (uint64_t *)((char *)a2 + v14);
    _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4D8]);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<SearchFieldState>(0);
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v17))
      {
        _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718]);
        memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        uint64_t v40 = v16[1];
        void *v15 = *v16;
        v15[1] = v40;
        uint64_t v21 = *(int *)(v18 + 32);
        uint64_t v41 = v19;
        uint64_t v22 = (char *)v15 + v21;
        uint64_t v23 = (char *)v16 + v21;
        *uint64_t v22 = *((unsigned char *)v16 + v21);
        v22[1] = *((unsigned char *)v16 + v21 + 1);
        *((_WORD *)v22 + 1) = *(_WORD *)((char *)v16 + v21 + 2);
        v22[8] = *((unsigned char *)v16 + v21 + 8);
        *((_DWORD *)v22 + 1) = *(_DWORD *)((char *)v16 + v21 + 4);
        uint64_t v24 = (int *)type metadata accessor for SearchFieldState(0);
        uint64_t v25 = v24[9];
        uint64_t v38 = &v23[v25];
        int v39 = &v22[v25];
        uint64_t v26 = type metadata accessor for AttributedString();
        unsigned int v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
        swift_retain();
        swift_retain();
        v37(v39, v38, v26);
        v22[v24[10]] = v23[v24[10]];
        uint64_t v27 = v24[11];
        uint64_t v28 = &v22[v27];
        unsigned int v29 = &v23[v27];
        v28[4] = v29[4];
        *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v15, 0, 1, v18);
      }
    }
    else
    {
      void *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = *(int *)(a3 + 24);
    uint64_t v31 = v4 + v30;
    uint64_t v32 = (uint64_t)a2 + v30;
    uint64_t v33 = *(void *)v32;
    uint64_t v34 = *(void *)(v32 + 8);
    char v35 = *(unsigned char *)(v32 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v32, v34, v35);
    *(void *)uint64_t v31 = v33;
    *(void *)(v31 + 8) = v34;
    *(unsigned char *)(v31 + 16) = v35;
  }
  return v4;
}

_OWORD *initializeWithTake for SearchCompletionButtonStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *(_OWORD *)((char *)a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  long long v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  long long v9 = (void *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4D8]);
  uint64_t v12 = v11;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v13))
    {
      _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718]);
      memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      uint64_t v17 = v10[1];
      *long long v9 = *v10;
      v9[1] = v17;
      uint64_t v18 = *(int *)(v14 + 32);
      uint64_t v19 = (char *)v9 + v18;
      uint64_t v20 = (char *)v10 + v18;
      char *v19 = *((unsigned char *)v10 + v18);
      v19[1] = *((unsigned char *)v10 + v18 + 1);
      *((_WORD *)v19 + 1) = *(_WORD *)((char *)v10 + v18 + 2);
      v19[8] = *((unsigned char *)v10 + v18 + 8);
      *((_DWORD *)v19 + 1) = *(_DWORD *)((char *)v10 + v18 + 4);
      uint64_t v21 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v22 = v21[9];
      uint64_t v31 = &v20[v22];
      uint64_t v32 = &v19[v22];
      uint64_t v23 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v32, v31, v23);
      v19[v21[10]] = v20[v21[10]];
      uint64_t v24 = v21[11];
      uint64_t v25 = &v19[v24];
      uint64_t v26 = &v20[v24];
      v25[4] = v26[4];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  uint64_t v27 = *(int *)(a3 + 24);
  uint64_t v28 = (char *)a1 + v27;
  unsigned int v29 = (char *)a2 + v27;
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  v28[16] = v29[16];
  return a1;
}

uint64_t assignWithTake for SearchCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(a1 + 72) == 255) {
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a2 + 72) == 255 || a1 != a2)
  {
    outlined destroy of TextInputSuggestionCompletionKind(a1);
LABEL_7:
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    outlined destroy of Environment<DismissSearchAccessoryAction>.Content(a1 + v9, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, v12);
    uint64_t v14 = v13;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<SearchFieldState>(0);
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v11, 1, v15))
      {
        _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718]);
        memcpy(v10, v11, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        uint64_t v19 = v11[1];
        *uint64_t v10 = *v11;
        v10[1] = v19;
        uint64_t v20 = *(int *)(v16 + 32);
        uint64_t v21 = (char *)v10 + v20;
        uint64_t v22 = (char *)v11 + v20;
        *uint64_t v21 = *((unsigned char *)v11 + v20);
        v21[1] = *((unsigned char *)v11 + v20 + 1);
        *((_WORD *)v21 + 1) = *(_WORD *)((char *)v11 + v20 + 2);
        v21[8] = *((unsigned char *)v11 + v20 + 8);
        *((_DWORD *)v21 + 1) = *(_DWORD *)((char *)v11 + v20 + 4);
        uint64_t v23 = (int *)type metadata accessor for SearchFieldState(0);
        uint64_t v24 = v23[9];
        unsigned int v37 = &v22[v24];
        uint64_t v38 = &v21[v24];
        uint64_t v25 = type metadata accessor for AttributedString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v38, v37, v25);
        v21[v23[10]] = v22[v23[10]];
        uint64_t v26 = v23[11];
        uint64_t v27 = &v21[v26];
        uint64_t v28 = &v22[v26];
        v27[4] = v28[4];
        *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v16);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
  }
  uint64_t v29 = *(int *)(a3 + 24);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  char v32 = *(unsigned char *)(v31 + 16);
  uint64_t v33 = *(void *)v30;
  uint64_t v34 = *(void *)(v30 + 8);
  char v35 = *(unsigned char *)(v30 + 16);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *(unsigned char *)(v30 + 16) = v32;
  _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(v33, v34, v35, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DFF154);
}

uint64_t sub_187DFF154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, &lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4E0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unsigned int v12 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 16);
    if (v12 > 1) {
      return (v12 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for SearchCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DFF25C);
}

void sub_187DFF25C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, &lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4E0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unsigned int v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12(v11, a2, a2, v10);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24) + 16) = -(char)a2;
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchSuggestionsVisibilityModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in SearchCompletion<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in SearchCompletionButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187DFF3CC()
{
  unint64_t v1 = (int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = type metadata accessor for SearchCompletionButtonStyle();
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(*(void *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  unint64_t v6 = v0 + v1[8] + v2;
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v6, *(void *)(v6 + 8), *(void *)(v6 + 16), *(void *)(v6 + 24), *(_WORD *)(v6 + 32), *(unsigned char *)(v6 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v6 + 40), *(void *)(v6 + 48), *(void *)(v6 + 56), *(void *)(v6 + 64), *(_WORD *)(v6 + 72), *(unsigned char *)(v6 + 74));
  unint64_t v8 = v6 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
LABEL_8:
  uint64_t v10 = v0 + v5;
  int v11 = *(unsigned __int8 *)(v0 + v5 + 72);
  if (v11 != 255)
  {
    if (v11)
    {
      __swift_destroy_boxed_opaque_existential_1(v0 + v5);
      __swift_destroy_boxed_opaque_existential_1(v10 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v12 = v10 + *(int *)(v4 + 20);
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v14 = v13;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
    {
      swift_release();
      swift_release();
      uint64_t v15 = *(int *)(v14 + 32);
      uint64_t v16 = v12 + v15 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
      uint64_t v17 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
    }
  }
  else
  {
    swift_release();
  }
  _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(*(void *)(v10 + *(int *)(v4 + 24)), *(void *)(v10 + *(int *)(v4 + 24) + 8), *(unsigned char *)(v10 + *(int *)(v4 + 24) + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SearchCompletionButtonStyle.makeBody(configuration:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for SearchCompletionButtonStyle() - 8);
  uint64_t v5 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return closure #1 in SearchCompletionButtonStyle.makeBody(configuration:)(v0 + v2, v5);
}

uint64_t outlined destroy of (AnyHashable?, AnyHashable?)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in SearchCompletion.body.getter()
{
  return closure #1 in SearchCompletion.body.getter();
}

uint64_t partial apply for closure #2 in SearchCompletion.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in SearchCompletion.body.getter(a1);
}

uint64_t sub_187DFF868()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for SearchCompletion();
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = v0 + v3;
  if (*(unsigned char *)(v0 + v3 + 72))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + v3);
    __swift_destroy_boxed_opaque_existential_1(v4 + 32);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4 + *(int *)(v2 + 36), v1);
  uint64_t v5 = v4 + *(int *)(v2 + 40);
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<AttributedString>();
    uint64_t v7 = v6;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
    {
      swift_release();
      swift_release();
      uint64_t v8 = v5 + *(int *)(v7 + 32);
      uint64_t v9 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    }
  }
  else
  {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SearchCompletion.completionContent.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for SearchCompletion() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in SearchCompletion.completionContent.getter(v2);
}

uint64_t partial apply for closure #2 in SearchCompletion.completionContent.getter()
{
  return closure #2 in SearchCompletion.completionContent.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t outlined init with copy of AttributedString?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4F273A8], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute;
  if (!lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute);
  }
  return result;
}

uint64_t sub_187DFFBFC()
{
  return 8;
}

uint64_t sub_187DFFC08()
{
  return swift_release();
}

uint64_t sub_187DFFC10(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

void *sub_187DFFC24(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t partial apply for closure #1 in SearchCompletion.shouldRenderPreV6.getter(uint64_t a1)
{
  return closure #1 in SearchCompletion.shouldRenderPreV6.getter(a1, *(void *)(v1 + 16)) & 1;
}

void type metadata accessor for (AnyToken?, Range<AttributedString.Index>)()
{
  if (!lazy cache variable for type metadata for (AnyToken?, Range<AttributedString.Index>))
  {
    _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_1(255, &lazy cache variable for type metadata for AnyToken?, (uint64_t)&type metadata for AnyToken, MEMORY[0x1E4FBB718]);
    type metadata accessor for Range<AttributedString.Index>(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyToken?, Range<AttributedString.Index>));
    }
  }
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute> and conformance AttributedString.Runs.AttributesSlice1<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute> and conformance AttributedString.Runs.AttributesSlice1<A>;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute> and conformance AttributedString.Runs.AttributesSlice1<A>)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>(255, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, MEMORY[0x1E4F27330]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute> and conformance AttributedString.Runs.AttributesSlice1<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator and conformance AttributedString.Runs.AttributesSlice1<A>.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator and conformance AttributedString.Runs.AttributesSlice1<A>.Iterator;
  if (!lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator and conformance AttributedString.Runs.AttributesSlice1<A>.Iterator)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>(255, &lazy cache variable for type metadata for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator, (uint64_t (*)(void))lazy protocol witness table accessor for type AttributeScopes.SwiftUIAttributes.AnyTokenAttribute and conformance AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, (uint64_t)&type metadata for AttributeScopes.SwiftUIAttributes.AnyTokenAttribute, MEMORY[0x1E4F27320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>.Iterator and conformance AttributedString.Runs.AttributesSlice1<A>.Iterator);
  }
  return result;
}

uint64_t outlined init with copy of AnyHashable?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_1(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with take of AnyToken?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_1(0, &lazy cache variable for type metadata for AnyToken?, (uint64_t)&type metadata for AnyToken, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_5(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuggestionsPlacementKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with take of TextInputSuggestionCompletionKind(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_187DFFFF0()
{
  return lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>>, (void (*)(void))lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
}

uint64_t sub_187E0004C()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier>? and conformance <A> A?)
  {
    type metadata accessor for _ViewModifier_Content<SearchSuggestionsVisibilityModifier>?();
    lazy protocol witness table accessor for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier>? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<SearchSuggestionsVisibilityModifier>?()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<SearchSuggestionsVisibilityModifier>?)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>(255, &lazy cache variable for type metadata for _ViewModifier_Content<SearchSuggestionsVisibilityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier, (uint64_t)&type metadata for SearchSuggestionsVisibilityModifier, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SearchSuggestionsVisibilityModifier>?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>(255, &lazy cache variable for type metadata for _ViewModifier_Content<SearchSuggestionsVisibilityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchSuggestionsVisibilityModifier and conformance SearchSuggestionsVisibilityModifier, (uint64_t)&type metadata for SearchSuggestionsVisibilityModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<SearchSuggestionsVisibilityModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DefinesSearchCompletionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187E003B8()
{
  return lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>> and conformance _TraitWritingModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>();
    type metadata accessor for _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DefinesSearchCompletionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier, (uint64_t)&type metadata for DefinesSearchCompletionModifier, MEMORY[0x1E4F408E0]);
    type metadata accessor for _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>(255, &lazy cache variable for type metadata for TagValueTraitKey<ViewIdentity>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity, (uint64_t)&type metadata for ViewIdentity, MEMORY[0x1E4F3FDD8]);
    lazy protocol witness table accessor for type TagValueTraitKey<ViewIdentity> and conformance TagValueTraitKey<A>();
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>);
    }
  }
}

void type metadata accessor for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TagValueTraitKey<ViewIdentity> and conformance TagValueTraitKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TagValueTraitKey<ViewIdentity> and conformance TagValueTraitKey<A>;
  if (!lazy protocol witness table cache variable for type TagValueTraitKey<ViewIdentity> and conformance TagValueTraitKey<A>)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>(255, &lazy cache variable for type metadata for TagValueTraitKey<ViewIdentity>, (uint64_t (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity, (uint64_t)&type metadata for ViewIdentity, MEMORY[0x1E4F3FDD8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TagValueTraitKey<ViewIdentity> and conformance TagValueTraitKey<A>);
  }
  return result;
}

void type metadata accessor for _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>)
  {
    type metadata accessor for TagValueTraitKey<ViewIdentity?>();
    _s7SwiftUI27SearchCompletionButtonStyleVAcA09PrimitiveeF0AAWlTm_0(&lazy protocol witness table cache variable for type TagValueTraitKey<ViewIdentity?> and conformance TagValueTraitKey<A>, (void (*)(uint64_t))type metadata accessor for TagValueTraitKey<ViewIdentity?>);
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>);
    }
  }
}

void type metadata accessor for TagValueTraitKey<ViewIdentity?>()
{
  if (!lazy cache variable for type metadata for TagValueTraitKey<ViewIdentity?>)
  {
    _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_1(255, &lazy cache variable for type metadata for ViewIdentity?, (uint64_t)&type metadata for ViewIdentity, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ViewIdentity? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for TagValueTraitKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TagValueTraitKey<ViewIdentity?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ViewIdentity? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewIdentity? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ViewIdentity? and conformance <A> A?)
  {
    _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_1(255, &lazy cache variable for type metadata for ViewIdentity?, (uint64_t)&type metadata for ViewIdentity, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewIdentity? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<DefinesSearchCompletionModifier>, _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<DefinesSearchCompletionModifier> and conformance _ViewModifier_Content<A>, (void (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<TagValueTraitKey<ViewIdentity>> and conformance _TraitWritingModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<DefinesSearchCompletionModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<DefinesSearchCompletionModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<DefinesSearchCompletionModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for AttributedString.Runs.AttributesSlice1<AttributeScopes.SwiftUIAttributes.AnyTokenAttribute>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DefinesSearchCompletionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefinesSearchCompletionModifier and conformance DefinesSearchCompletionModifier, (uint64_t)&type metadata for DefinesSearchCompletionModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<DefinesSearchCompletionModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _TraitWritingModifier<TagValueTraitKey<ViewIdentity>> and conformance _TraitWritingModifier<A>()
{
  return _s7SwiftUI27SearchCompletionButtonStyleVAcA09PrimitiveeF0AAWlTm_0(&lazy protocol witness table cache variable for type _TraitWritingModifier<TagValueTraitKey<ViewIdentity>> and conformance _TraitWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<TagValueTraitKey<ViewIdentity>>);
}

uint64_t lazy protocol witness table accessor for type _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>> and conformance _TraitWritingModifier<A>()
{
  return _s7SwiftUI27SearchCompletionButtonStyleVAcA09PrimitiveeF0AAWlTm_0(&lazy protocol witness table cache variable for type _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>> and conformance _TraitWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<TagValueTraitKey<ViewIdentity?>>);
}

uint64_t View.searchEnvironmentTransform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SearchEnvironmentTransformModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t SearchEnvironmentStorage.properties.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage__baseProperties;
  swift_beginAccess();
  outlined init with copy of Binding<SearchFieldState>?(v3, a1, type metadata accessor for SearchEnvironmentProperties);
  swift_getKeyPath();
  v11[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v1 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage__transform;
  swift_beginAccess();
  outlined init with copy of Binding<SearchFieldState>?(v4, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
  if (!v11[3]) {
    return outlined destroy of Binding<SearchFieldState>?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
  }
  outlined init with copy of TableColumnList((uint64_t)v11, (uint64_t)v8);
  outlined destroy of Binding<SearchFieldState>?((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
  uint64_t v5 = v9;
  uint64_t v6 = v10;
  __swift_project_boxed_opaque_existential_1(v8, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, v5, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

uint64_t EnvironmentValues.isSearchVibrancyEnabled.getter()
{
  return EnvironmentValues.searchFieldPlacement.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchVibrancyEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchVibrancyEnabledKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.searchScopeActivation.setter(uint64_t a1)
{
  return EnvironmentValues.searchScopeActivation.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey>, (uint64_t)&type metadata for EnvironmentValues.SearchScopeActivationKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchScopeActivationKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.searchFieldPlacement.setter(uint64_t a1)
{
  return EnvironmentValues.searchScopeActivation.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.searchFocusContext.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFocusContextKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFocusContextKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFocusContextKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFocusContextKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFocusContextKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFocusContextKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFocusContextKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFocusContextKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.searchFocusContext.setter(uint64_t a1)
{
  outlined init with copy of SearchFocusContext?(a1, (uint64_t)&v4);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFocusContextKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFocusContextKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFocusContextKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFocusContextKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of SearchFocusContext?(a1);
}

uint64_t EnvironmentValues.searchText.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SearchEnvironmentProperties(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v8[1])
  {
    SearchEnvironmentStorage.properties.getter((uint64_t)v5);
    swift_release();
    outlined init with copy of Binding<SearchFieldState>?((uint64_t)&v5[*(int *)(v3 + 20)], a1, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>?);
    return outlined destroy of Binding<SearchFieldState>?((uint64_t)v5, type metadata accessor for SearchEnvironmentProperties);
  }
  else
  {
    type metadata accessor for Binding<AttributedString>();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 1, 1, v7);
  }
}

Swift::Void __swiftcall DismissSearchAccessoryAction.callAsFunction()()
{
  uint64_t v1 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (unsigned __int8 *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (unsigned __int8 *)&v14 - v5;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<SearchFieldState>?(v0, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v11 = v10;
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  double v13 = type metadata accessor for Binding<SearchFieldState>?;
  if (v12 != 1)
  {
    MEMORY[0x18C113DA0](v11);
    outlined init with copy of Binding<SearchFieldState>?((uint64_t)v6, (uint64_t)v3, type metadata accessor for SearchFieldState);
    if (*v3 != 2) {
      unsigned __int8 *v3 = 0;
    }
    if ((specialized static SearchFieldState.== infix(_:_:)(v6, v3) & 1) == 0) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v3, type metadata accessor for SearchFieldState);
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v6, type metadata accessor for SearchFieldState);
    double v13 = type metadata accessor for Binding<SearchFieldState>;
  }
  outlined destroy of Binding<SearchFieldState>?((uint64_t)v9, (uint64_t (*)(void))v13);
}

uint64_t key path setter for EnvironmentValues.isSearching : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchingKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchingKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.dismissSearch.getter@<X0>(uint64_t a1@<X8>)
{
  return EnvironmentValues.searchFieldState.getter(a1);
}

uint64_t EnvironmentValues.searchFieldState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SearchEnvironmentProperties(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v8[1])
  {
    SearchEnvironmentStorage.properties.getter((uint64_t)v5);
    swift_release();
    outlined init with copy of Binding<SearchFieldState>?((uint64_t)v5, a1, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
    return outlined destroy of Binding<SearchFieldState>?((uint64_t)v5, type metadata accessor for SearchEnvironmentProperties);
  }
  else
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 1, 1, v7);
  }
}

uint64_t EnvironmentValues.searchSuggestionsPlacement.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuggestionsPlacementKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuggestionsPlacementKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuggestionsPlacementKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuggestionsPlacementKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.searchSuggestionsPlacement.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuggestionsPlacementKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuggestionsPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestionsPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchSuggestionsPlacementKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SearchSuggestionsPlacementKey@<X0>(unsigned char *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static EnvironmentValues.SearchSuggestionsPlacementKey.defaultValue;
  return result;
}

Swift::Void __swiftcall DismissSearchAction.callAsFunction()()
{
  uint64_t v1 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v49 = *(void *)(v1 - 8);
  uint64_t v50 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v48 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v43 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (unsigned __int8 *)&v43 - v17;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<SearchFieldState>?(v0, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v23 = v22;
  int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22);
  uint64_t v25 = type metadata accessor for Binding<SearchFieldState>?;
  if (v24 == 1)
  {
LABEL_19:
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v21, (uint64_t (*)(void))v25);
    return;
  }
  MEMORY[0x18C113DA0](v23);
  int v44 = v18;
  outlined init with copy of Binding<SearchFieldState>?((uint64_t)v18, (uint64_t)v15, type metadata accessor for SearchFieldState);
  char *v15 = 2;
  AttributedString.init(stringLiteral:)();
  uint64_t v43 = v11;
  uint64_t v26 = &v15[*(int *)(v11 + 36)];
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v26, v4);
  uint64_t v46 = v10;
  uint64_t v47 = v5;
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v5 + 24);
  uint64_t v45 = v4;
  v27(v26, v10, v4);
  uint64_t v28 = v7;
  AttributedString.characters.getter();
  uint64_t v29 = AttributedString.CharacterView._count.getter();
  uint64_t v30 = v50;
  uint64_t v31 = *(void (**)(char *, uint64_t))(v49 + 8);
  v31(v3, v50);
  AttributedString.characters.getter();
  uint64_t v32 = AttributedString.CharacterView._count.getter();
  v31(v3, v30);
  uint64_t v33 = v32 - v29;
  if (__OFSUB__(v32, v29))
  {
    __break(1u);
  }
  else
  {
    uint64_t v34 = v28;
    uint64_t v35 = v45;
    unsigned int v36 = v46;
    uint64_t v37 = v47;
    uint64_t v38 = v48;
    if ((v33 & 0x8000000000000000) == 0 || (v39 = __OFSUB__(0, v33), uint64_t v33 = -v33, !v39))
    {
      if (v33 != 1 || v32 < 1 || *v15 == 2) {
        goto LABEL_14;
      }
      int v40 = v15[2];
      outlined init with copy of Binding<SearchFieldState>?((uint64_t)v15, v48, type metadata accessor for SearchFieldState);
      if (v40 == 2)
      {
        int v40 = *(unsigned __int8 *)(v38 + 3);
        outlined destroy of Binding<SearchFieldState>?(v38, type metadata accessor for SearchFieldState);
        if (v40 == 2)
        {
LABEL_14:
          uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
          v41(v36, v35);
          v41(v34, v35);
          if ((v15[8] & 1) == 0)
          {
            *((_DWORD *)v15 + 1) = 0;
            v15[8] = 1;
          }
          uint64_t v42 = v44;
          v15[*(int *)(v43 + 40)] = 0;
          if ((specialized static SearchFieldState.== infix(_:_:)(v42, (unsigned __int8 *)v15) & 1) == 0) {
            dispatch thunk of AnyLocation.set(_:transaction:)();
          }
          outlined destroy of Binding<SearchFieldState>?((uint64_t)v15, type metadata accessor for SearchFieldState);
          outlined destroy of Binding<SearchFieldState>?((uint64_t)v42, type metadata accessor for SearchFieldState);
          uint64_t v25 = type metadata accessor for Binding<SearchFieldState>;
          goto LABEL_19;
        }
      }
      else
      {
        outlined destroy of Binding<SearchFieldState>?(v38, type metadata accessor for SearchFieldState);
      }
      if (v40) {
        char *v15 = 1;
      }
      goto LABEL_14;
    }
  }
  __break(1u);
}

void protocol witness for View.body.getter in conformance EnvironmentValues.SearchField()
{
}

void protocol witness for View.body.getter in conformance EnvironmentValues.SearchSuggestions()
{
}

void protocol witness for View.body.getter in conformance EnvironmentValues.SearchCustomScopeBar()
{
}

void protocol witness for View.body.getter in conformance EnvironmentValues.SearchCustomAccessory()
{
}

Swift::Void __swiftcall StartSearchAction.callAsFunction()()
{
  uint64_t v1 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (unsigned __int8 *)&v19 - v5;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (unsigned __int8 *)&v19 - v8;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<SearchFieldState>?(v0, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v14 = v13;
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  uint64_t v16 = type metadata accessor for Binding<SearchFieldState>?;
  if (v15 == 1) {
    goto LABEL_12;
  }
  MEMORY[0x18C113DA0](v14);
  outlined init with copy of Binding<SearchFieldState>?((uint64_t)v9, (uint64_t)v6, type metadata accessor for SearchFieldState);
  if ((*v6 & 1) == 0)
  {
    int v17 = v6[2];
    outlined init with copy of Binding<SearchFieldState>?((uint64_t)v6, (uint64_t)v3, type metadata accessor for SearchFieldState);
    if (v17 == 2)
    {
      int v17 = v3[3];
      outlined destroy of Binding<SearchFieldState>?((uint64_t)v3, type metadata accessor for SearchFieldState);
      if (v17 == 2)
      {
        unsigned __int8 v18 = 0;
LABEL_8:
        *uint64_t v6 = v18;
        v6[*(int *)(v1 + 40)] = 1;
        goto LABEL_9;
      }
    }
    else
    {
      outlined destroy of Binding<SearchFieldState>?((uint64_t)v3, type metadata accessor for SearchFieldState);
    }
    unsigned __int8 v18 = v17 & 1;
    goto LABEL_8;
  }
LABEL_9:
  if ((specialized static SearchFieldState.== infix(_:_:)(v9, v6) & 1) == 0) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  outlined destroy of Binding<SearchFieldState>?((uint64_t)v6, type metadata accessor for SearchFieldState);
  outlined destroy of Binding<SearchFieldState>?((uint64_t)v9, type metadata accessor for SearchFieldState);
  uint64_t v16 = type metadata accessor for Binding<SearchFieldState>;
LABEL_12:
  outlined destroy of Binding<SearchFieldState>?((uint64_t)v12, (uint64_t (*)(void))v16);
}

uint64_t View.searchVibrancyEnabled(_:)()
{
  return swift_release();
}

uint64_t SearchEnvironmentStorage.baseProperties.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage__baseProperties;
  swift_beginAccess();
  return outlined init with copy of Binding<SearchFieldState>?(v3, a1, type metadata accessor for SearchEnvironmentProperties);
}

uint64_t key path getter for SearchEnvironmentStorage.baseProperties : SearchEnvironmentStorage@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage__baseProperties;
  swift_beginAccess();
  return outlined init with copy of Binding<SearchFieldState>?(v4, a2, type metadata accessor for SearchEnvironmentProperties);
}

uint64_t key path setter for SearchEnvironmentStorage.baseProperties : SearchEnvironmentStorage(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for SearchEnvironmentProperties(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Binding<SearchFieldState>?(a1, (uint64_t)v6, type metadata accessor for SearchEnvironmentProperties);
  uint64_t v7 = *a2;
  swift_getKeyPath();
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  lazy protocol witness table accessor for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return outlined destroy of Binding<SearchFieldState>?((uint64_t)v6, type metadata accessor for SearchEnvironmentProperties);
}

uint64_t closure #1 in SearchEnvironmentStorage.baseProperties.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage__baseProperties;
  swift_beginAccess();
  outlined assign with copy of SearchEnvironmentTransform?(a2, v3, type metadata accessor for SearchEnvironmentProperties);
  return swift_endAccess();
}

uint64_t SearchEnvironmentStorage.transform.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getKeyPath();
  lazy protocol witness table accessor for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage__transform;
  swift_beginAccess();
  return outlined init with copy of Binding<SearchFieldState>?(v3, a1, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
}

uint64_t key path getter for SearchEnvironmentStorage.transform : SearchEnvironmentStorage@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_getKeyPath();
  lazy protocol witness table accessor for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage();
  ObservationRegistrar.access<A, B>(_:keyPath:)();
  swift_release();
  uint64_t v4 = v3 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage__transform;
  swift_beginAccess();
  return outlined init with copy of Binding<SearchFieldState>?(v4, a2, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
}

uint64_t key path setter for SearchEnvironmentStorage.transform : SearchEnvironmentStorage(uint64_t a1)
{
  outlined init with copy of Binding<SearchFieldState>?(a1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
  swift_getKeyPath();
  lazy protocol witness table accessor for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  return outlined destroy of Binding<SearchFieldState>?((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
}

uint64_t closure #1 in SearchEnvironmentStorage.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage__transform;
  swift_beginAccess();
  outlined assign with copy of SearchEnvironmentTransform?(a2, v3, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
  return swift_endAccess();
}

uint64_t SearchEnvironmentStorage.init(properties:transform:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage__transform;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(void *)(v5 + 32) = 0;
  ObservationRegistrar.init()();
  outlined init with copy of Binding<SearchFieldState>?(a1, v2 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage__baseProperties, type metadata accessor for SearchEnvironmentProperties);
  outlined init with copy of Binding<SearchFieldState>?(a2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
  swift_getKeyPath();
  lazy protocol witness table accessor for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
  swift_release();
  outlined destroy of Binding<SearchFieldState>?((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
  outlined destroy of Binding<SearchFieldState>?(a2, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
  outlined destroy of Binding<SearchFieldState>?(a1, type metadata accessor for SearchEnvironmentProperties);
  return v2;
}

uint64_t SearchEnvironmentStorage.__deallocating_deinit()
{
  outlined destroy of Binding<SearchFieldState>?(v0 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage__baseProperties, type metadata accessor for SearchEnvironmentProperties);
  outlined destroy of Binding<SearchFieldState>?(v0 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage__transform, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI24SearchEnvironmentStorage___observationRegistrar;
  uint64_t v2 = type metadata accessor for ObservationRegistrar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t static SearchEnvironmentTransformModifier._makeInputs(modifier:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for SearchEnvironmentProperties(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TransformSearchEnvironmentStorage();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v22 - v11;
  LODWORD(v23) = *a1;
  type metadata accessor for SearchEnvironmentTransformModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a3 - 8) + 64)) {
    closure #1 in static SearchEnvironmentTransformModifier._makeInputs(modifier:inputs:)(1, a3);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a2[2];
  uint64_t v16 = a2[5];
  uint64_t v23 = *a2;
  int v24 = v14;
  uint64_t v25 = v15;
  long long v26 = *(_OWORD *)(a2 + 3);
  uint64_t v27 = v16;
  int v17 = _GraphInputs.environment.getter();
  default argument 3 of TransformSearchEnvironmentStorage.init(environment:transform:storage:oldProperties:)((uint64_t)v8);
  *(_DWORD *)uint64_t v12 = v17;
  *((_DWORD *)v12 + 1) = OffsetAttribute2;
  *((void *)v12 + 1) = 0;
  uint64_t v18 = outlined init with take of SearchEnvironmentProperties((uint64_t)v8, (uint64_t)&v12[*(int *)(v9 + 44)]);
  MEMORY[0x1F4188790](v18);
  *(&v22 - 2) = v9;
  *(&v22 - 1) = swift_getWitnessTable();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E4F40140], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)(&v22 - 4), v9, MEMORY[0x1E4FBC248], v19, MEMORY[0x1E4FBC278], v20);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return _GraphInputs.environment.setter();
}

uint64_t closure #1 in static SearchEnvironmentTransformModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for SearchEnvironmentTransformModifier();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t default argument 3 of TransformSearchEnvironmentStorage.init(environment:transform:storage:oldProperties:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
  uint64_t v3 = (int *)type metadata accessor for SearchEnvironmentProperties(0);
  uint64_t v4 = a1 + v3[5];
  type metadata accessor for Binding<AttributedString>();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a1 + v3[6];
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v9 = a1 + v3[7];
  *(void *)uint64_t v9 = 0;
  *(void *)(v9 + 8) = 0;
  *(unsigned char *)(v9 + 24) = 0;
  *(void *)(v9 + 16) = 0;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SearchEnvironmentTransformModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for SearchEnvironmentTransformModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchEnvironmentTransformModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for SearchEnvironmentTransformModifier<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SearchEnvironmentTransformModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SearchEnvironmentTransformModifier<A>(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  return static SearchEnvironmentTransformModifier._makeInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16));
}

Swift::Void __swiftcall TransformSearchEnvironmentStorage.updateValue()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(v0 - 8);
  ((void (*)())MEMORY[0x1F4188790])();
  uint64_t v6 = (char *)v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchEnvironmentProperties?(0);
  uint64_t v66 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for SearchEnvironmentProperties(0);
  uint64_t v70 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  uint64_t v63 = (uint64_t)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v67 = (uint64_t)v57 - v12;
  uint64_t v13 = *(void *)(v3 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v58 = (char *)v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57[1] = v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v57 - v18;
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v64 = v21;
  uint64_t v22 = Value[1];
  *(void *)&long long v77 = *Value;
  *((void *)&v77 + 1) = v22;
  uint64_t v23 = AGGraphGetValue();
  uint64_t v60 = v24;
  uint64_t v69 = v14;
  uint64_t v25 = *(void (**)(uint64_t *, char *, uint64_t))(v14 + 16);
  uint64_t v71 = v13;
  uint64_t v72 = v19;
  uint64_t v26 = v13;
  uint64_t v27 = v3;
  uint64_t v62 = v14 + 16;
  uint64_t v61 = v25;
  v25((uint64_t *)v19, (char *)v23, v26);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v68 = v2;
  v28(v6, v2, v3);
  uint64_t v73 = &v77;
  swift_retain();
  swift_retain();
  swift_getWitnessTable();
  StatefulRule.withObservation<A>(do:)();
  uint64_t v29 = (int *)v65;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v70 + 48))(v9, 1, v29) == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v31 = v67;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v67, 1, 1, v30);
    uint64_t v32 = v31 + v29[5];
    type metadata accessor for Binding<AttributedString>();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
    uint64_t v34 = v31 + v29[6];
    type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 1, 1, v35);
    uint64_t v36 = v31 + v29[7];
    *(void *)uint64_t v36 = 0;
    *(void *)(v36 + 8) = 0;
    *(unsigned char *)(v36 + 24) = 0;
    *(void *)(v36 + 16) = 0;
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentProperties?);
    uint64_t v37 = v31;
  }
  else
  {
    uint64_t v37 = v67;
    outlined init with take of SearchEnvironmentProperties((uint64_t)v9, v67);
  }
  uint64_t v38 = v68;
  char v39 = AGCompareValues();
  uint64_t v40 = *(void *)(v38 + 8);
  uint64_t v41 = v71;
  if (!v40)
  {
    uint64_t v42 = v63;
    outlined init with copy of Binding<SearchFieldState>?(v37, v63, type metadata accessor for SearchEnvironmentProperties);
    uint64_t v43 = *(void *)(v27 + 24);
    uint64_t v75 = v41;
    uint64_t v76 = v43;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v74);
    v61(boxed_opaque_existential_1, v72, v41);
    type metadata accessor for SearchEnvironmentStorage(0);
    uint64_t v40 = swift_allocObject();
    SearchEnvironmentStorage.init(properties:transform:)(v42, (uint64_t)&v74);
    *(void *)(v38 + 8) = v40;
  }
  if (AGGraphGetOutputValue())
  {
    char v45 = (v60 & 1) != 0 ? 0 : v39;
    if ((v45 & 1) == 0)
    {
      uint64_t v46 = v63;
      outlined init with copy of Binding<SearchFieldState>?(v37, v63, type metadata accessor for SearchEnvironmentProperties);
      uint64_t v47 = v58;
      v61((uint64_t *)v58, v72, v41);
      uint64_t v48 = v69;
      uint64_t v49 = v37;
      unint64_t v50 = (*(unsigned __int8 *)(v70 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
      unint64_t v51 = (v59 + v50 + *(unsigned __int8 *)(v69 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
      uint64_t v52 = (void *)swift_allocObject();
      uint64_t v53 = *(void *)(v27 + 24);
      v52[2] = v71;
      v52[3] = v53;
      v52[4] = v40;
      uint64_t v54 = (uint64_t)v52 + v50;
      uint64_t v37 = v49;
      outlined init with take of SearchEnvironmentProperties(v46, v54);
      uint64_t v55 = (char *)v52 + v51;
      uint64_t v41 = v71;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v55, v47, v71);
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
    }
  }
  if (AGGraphGetOutputValue() && (v64 & 1) == 0) {
    goto LABEL_18;
  }
  if (*(void *)(v38 + 8))
  {
    *(void *)&long long v74 = *(void *)(v38 + 8);
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage);
    swift_retain_n();
    swift_retain();
    PropertyList.subscript.setter();
    if (*((void *)&v77 + 1))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    swift_release();
    long long v74 = v77;
    AGGraphSetOutputValue();
LABEL_18:
    uint64_t v56 = type metadata accessor for TransformSearchEnvironmentStorage();
    outlined assign with copy of SearchEnvironmentTransform?(v37, v38 + *(int *)(v56 + 44), type metadata accessor for SearchEnvironmentProperties);
    outlined destroy of Binding<SearchFieldState>?(v37, type metadata accessor for SearchEnvironmentProperties);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v72, v41);
    swift_release();
    swift_release();
    return;
  }
  __break(1u);
}

uint64_t closure #1 in TransformSearchEnvironmentStorage.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v6)
  {
    SearchEnvironmentStorage.properties.getter(a2);
    swift_release();
    uint64_t v3 = type metadata accessor for SearchEnvironmentProperties(0);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a2, 0, 1, v3);
  }
  else
  {
    uint64_t v5 = type metadata accessor for SearchEnvironmentProperties(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a2, 1, 1, v5);
  }
}

void closure #2 in TransformSearchEnvironmentStorage.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v16[0] = a3;
  uint64_t v9 = type metadata accessor for SearchEnvironmentProperties(0);
  MEMORY[0x1F4188790](v9 - 8);
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = (char *)v16 - v11;
  if (a1)
  {
    outlined init with copy of Binding<SearchFieldState>?(a2, (uint64_t)v16 - v11, type metadata accessor for SearchEnvironmentProperties);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    v16[-2] = a1;
    v16[-1] = v12;
    v17[0] = a1;
    lazy protocol witness table accessor for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage();
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v12, type metadata accessor for SearchEnvironmentProperties);
    v17[3] = a4;
    v17[4] = a5;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, v16[0], a4);
    uint64_t v15 = swift_getKeyPath();
    MEMORY[0x1F4188790](v15);
    v16[-2] = a1;
    v16[-1] = v17;
    v16[1] = a1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)();
    swift_release();
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SearchEnvironmentTransform?);
  }
  else
  {
    __break(1u);
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187E03E0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_getTm_3(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.isSearchVibrancyEnabled.getter, a3);
}

uint64_t sub_187E03E24(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchVibrancyEnabledKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchVibrancyEnabledKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchVibrancyEnabledKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t sub_187E03E70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_getTm_3(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.isSearching.getter, a3);
}

uint64_t sub_187E03E88(unsigned __int8 *a1)
{
  return EnvironmentValues.searchScopeActivation.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchingKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchingKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t getEnumTagSinglePayload for DismissSearchAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_5);
}

uint64_t storeEnumTagSinglePayload for DismissSearchAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_5);
}

uint64_t type metadata accessor for DismissSearchAction(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DismissSearchAction);
}

uint64_t *initializeBufferWithCopyOfBuffer for DismissSearchAction(uint64_t *a1, uint64_t *a2)
{
  type metadata accessor for Binding<SearchFieldState>?(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(v4 - 8);
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      uint64_t v12 = *(int *)(v8 + 32);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      *uint64_t v13 = *((unsigned char *)a2 + v12);
      v13[1] = *((unsigned char *)a2 + v12 + 1);
      *((_WORD *)v13 + 1) = *(_WORD *)((char *)a2 + v12 + 2);
      v13[8] = *((unsigned char *)a2 + v12 + 8);
      *((_DWORD *)v13 + 1) = *(_DWORD *)((char *)a2 + v12 + 4);
      uint64_t v15 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v16 = v15[9];
      uint64_t v23 = &v14[v16];
      uint64_t v24 = &v13[v16];
      uint64_t v17 = type metadata accessor for AttributedString();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_retain();
      swift_retain();
      v18(v24, v23, v17);
      v13[v15[10]] = v14[v15[10]];
      uint64_t v19 = v15[11];
      uint64_t v20 = &v13[v19];
      uint64_t v21 = &v14[v19];
      _OWORD v20[4] = v21[4];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
  }
  return a1;
}

void *initializeWithCopy for DismissSearchAction(void *a1, void *a2)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v4))
  {
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    uint64_t v9 = *(int *)(v5 + 32);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *uint64_t v10 = *((unsigned char *)a2 + v9);
    v10[1] = *((unsigned char *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    uint64_t v12 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v13 = v12[9];
    uint64_t v20 = &v11[v13];
    uint64_t v21 = &v10[v13];
    uint64_t v14 = type metadata accessor for AttributedString();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v21, v20, v14);
    v10[v12[10]] = v11[v12[10]];
    uint64_t v16 = v12[11];
    uint64_t v17 = &v10[v16];
    uint64_t v18 = &v11[v16];
    v17[4] = v18[4];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *initializeWithTake for DismissSearchAction(void *a1, void *a2)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v4))
  {
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    uint64_t v9 = *(int *)(v5 + 32);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *uint64_t v10 = *((unsigned char *)a2 + v9);
    v10[1] = *((unsigned char *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    uint64_t v12 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v13 = v12[9];
    uint64_t v14 = &v10[v13];
    uint64_t v15 = &v11[v13];
    uint64_t v16 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    v10[v12[10]] = v11[v12[10]];
    uint64_t v17 = v12[11];
    uint64_t v18 = &v10[v17];
    uint64_t v19 = &v11[v17];
    v18[4] = v19[4];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for DismissSearchAction(void *a1, void *a2)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v4);
  int v9 = v7(a2, 1, v5);
  if (!v8)
  {
    if (!v9)
    {
      *a1 = *a2;
      swift_release();
      a1[1] = a2[1];
      swift_release();
      uint64_t v24 = *(int *)(v5 + 32);
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      char *v25 = *((unsigned char *)a2 + v24);
      v25[1] = *((unsigned char *)a2 + v24 + 1);
      *((_WORD *)v25 + 1) = *(_WORD *)((char *)a2 + v24 + 2);
      *((_DWORD *)v25 + 1) = *(_DWORD *)((char *)a2 + v24 + 4);
      v25[8] = *((unsigned char *)a2 + v24 + 8);
      uint64_t v27 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v28 = v27[9];
      uint64_t v29 = &v25[v28];
      uint64_t v30 = &v26[v28];
      uint64_t v31 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 40))(v29, v30, v31);
      v25[v27[10]] = v26[v27[10]];
      uint64_t v32 = v27[11];
      uint64_t v33 = &v25[v32];
      uint64_t v34 = &v26[v32];
      *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
      _OWORD v33[4] = v34[4];
      return a1;
    }
    outlined destroy of Binding<SearchFieldState>?((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  uint64_t v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  uint64_t v11 = *(int *)(v5 + 32);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *uint64_t v12 = *((unsigned char *)a2 + v11);
  v12[1] = *((unsigned char *)a2 + v11 + 1);
  *((_WORD *)v12 + 1) = *(_WORD *)((char *)a2 + v11 + 2);
  v12[8] = *((unsigned char *)a2 + v11 + 8);
  *((_DWORD *)v12 + 1) = *(_DWORD *)((char *)a2 + v11 + 4);
  uint64_t v14 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v15 = v14[9];
  uint64_t v16 = &v12[v15];
  uint64_t v17 = &v13[v15];
  uint64_t v18 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  v12[v14[10]] = v13[v14[10]];
  uint64_t v19 = v14[11];
  uint64_t v20 = &v12[v19];
  uint64_t v21 = &v13[v19];
  _OWORD v20[4] = v21[4];
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for StartSearchAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187E047CC);
}

uint64_t __swift_get_extra_inhabitant_indexTm_5(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<SearchFieldState>?(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for StartSearchAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_5_0);
}

uint64_t type metadata accessor for StartSearchAction(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for StartSearchAction);
}

uint64_t destroy for DismissSearchAction(uint64_t a1)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v3 = v2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v5 = a1 + *(int *)(v3 + 32);
    uint64_t v6 = v5 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
    uint64_t v7 = type metadata accessor for AttributedString();
    int v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v6, v7);
  }
  return result;
}

void *assignWithCopy for DismissSearchAction(void *a1, void *a2)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v4);
  int v9 = v7(a2, 1, v5);
  if (!v8)
  {
    if (!v9)
    {
      *a1 = *a2;
      swift_retain();
      swift_release();
      a1[1] = a2[1];
      swift_retain();
      swift_release();
      uint64_t v23 = *(int *)(v5 + 32);
      uint64_t v24 = (char *)a1 + v23;
      uint64_t v25 = (char *)a2 + v23;
      *uint64_t v24 = *((unsigned char *)a2 + v23);
      v24[1] = *((unsigned char *)a2 + v23 + 1);
      void v24[2] = *((unsigned char *)a2 + v23 + 2);
      v24[3] = *((unsigned char *)a2 + v23 + 3);
      LODWORD(v23) = *(_DWORD *)((char *)a2 + v23 + 4);
      v24[8] = v25[8];
      *((_DWORD *)v24 + 1) = v23;
      uint64_t v26 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v27 = v26[9];
      uint64_t v28 = &v24[v27];
      uint64_t v29 = &v25[v27];
      uint64_t v30 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 24))(v28, v29, v30);
      v24[v26[10]] = v25[v26[10]];
      uint64_t v31 = v26[11];
      uint64_t v32 = &v24[v31];
      uint64_t v33 = &v25[v31];
      *(_DWORD *)uint64_t v32 = *(_DWORD *)v33;
      v32[4] = v33[4];
      return a1;
    }
    outlined destroy of Binding<SearchFieldState>?((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v10 = *(int *)(v5 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *uint64_t v11 = *((unsigned char *)a2 + v10);
  v11[1] = *((unsigned char *)a2 + v10 + 1);
  void v11[2] = *((unsigned char *)a2 + v10 + 2);
  v11[3] = *((unsigned char *)a2 + v10 + 3);
  LODWORD(v10) = *(_DWORD *)((char *)a2 + v10 + 4);
  v11[8] = v12[8];
  *((_DWORD *)v11 + 1) = v10;
  uint64_t v13 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v14 = v13[9];
  uint64_t v34 = &v12[v14];
  uint64_t v35 = &v11[v14];
  uint64_t v15 = type metadata accessor for AttributedString();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
  swift_retain();
  swift_retain();
  v16(v35, v34, v15);
  v11[v13[10]] = v12[v13[10]];
  uint64_t v17 = v13[11];
  uint64_t v18 = &v11[v17];
  uint64_t v19 = &v12[v17];
  char v20 = v19[4];
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  v18[4] = v20;
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for DismissSearchAccessoryAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_5_0);
}

uint64_t storeEnumTagSinglePayload for DismissSearchAccessoryAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187E04C94);
}

uint64_t __swift_store_extra_inhabitant_indexTm_5(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<SearchFieldState>?(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t ObjC metadata update function for SearchEnvironmentStorage()
{
  return type metadata accessor for SearchEnvironmentStorage(0);
}

uint64_t type metadata accessor for SearchEnvironmentStorage(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SearchEnvironmentStorage);
}

uint64_t type metadata completion function for SearchEnvironmentStorage()
{
  uint64_t result = type metadata accessor for SearchEnvironmentProperties(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ObservationRegistrar();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for SearchEnvironmentProperties(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SearchEnvironmentProperties);
}

uint64_t sub_187E04E24()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchEnvironmentProperties(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    uint64_t v67 = v6;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      type metadata accessor for Binding<SearchFieldState>?(0);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v65 = a2[1];
      *a1 = *a2;
      a1[1] = v65;
      uint64_t v12 = *(int *)(v8 + 32);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      *uint64_t v13 = *((unsigned char *)a2 + v12);
      v13[1] = *((unsigned char *)a2 + v12 + 1);
      *((_WORD *)v13 + 1) = *(_WORD *)((char *)a2 + v12 + 2);
      v13[8] = *((unsigned char *)a2 + v12 + 8);
      *((_DWORD *)v13 + 1) = *(_DWORD *)((char *)a2 + v12 + 4);
      uint64_t v15 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v16 = v15[9];
      uint64_t v60 = &v14[v16];
      __dsta = &v13[v16];
      uint64_t v17 = type metadata accessor for AttributedString();
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_retain();
      swift_retain();
      v18(__dsta, v60, v17);
      v13[v15[10]] = v14[v15[10]];
      uint64_t v19 = v15[11];
      char v20 = &v13[v19];
      uint64_t v6 = v67;
      uint64_t v21 = &v14[v19];
      _OWORD v20[4] = v21[4];
      *(_DWORD *)char v20 = *(_DWORD *)v21;
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    uint64_t v22 = v6[5];
    uint64_t v23 = (uint64_t *)((char *)a1 + v22);
    uint64_t v24 = (uint64_t *)((char *)a2 + v22);
    type metadata accessor for Binding<AttributedString>();
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
    {
      type metadata accessor for Binding<AttributedString>?(0);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = v24[1];
      *uint64_t v23 = *v24;
      v23[1] = v29;
      uint64_t v30 = *(int *)(v26 + 32);
      uint64_t v63 = (char *)v24 + v30;
      uint64_t v66 = (char *)v23 + v30;
      uint64_t v31 = type metadata accessor for AttributedString();
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16);
      swift_retain();
      uint64_t v6 = v67;
      swift_retain();
      v32(v66, v63, v31);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
    }
    uint64_t v33 = v6[6];
    uint64_t v34 = (uint64_t *)((char *)a1 + v33);
    uint64_t v35 = (uint64_t *)((char *)a2 + v33);
    type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
    uint64_t v37 = v36;
    uint64_t v38 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v36))
    {
      type metadata accessor for Binding<SearchFieldState>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
      memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      uint64_t v64 = v34;
      uint64_t v40 = v35[1];
      void *v34 = *v35;
      v34[1] = v40;
      uint64_t v41 = *(int *)(v37 + 32);
      __dst = (char *)v34 + v41;
      uint64_t v42 = (char *)v35 + v41;
      uint64_t v43 = type metadata accessor for TextSelection(0);
      uint64_t v44 = *(void *)(v43 - 8);
      char v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
      swift_retain();
      uint64_t v46 = v42;
      swift_retain();
      if (v45(v42, 1, v43))
      {
        type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
        uint64_t v48 = __dst;
        memcpy(__dst, v42, *(void *)(*(void *)(v47 - 8) + 64));
        uint64_t v6 = v67;
        uint64_t v49 = v64;
      }
      else
      {
        uint64_t v50 = type metadata accessor for TextSelection.Indices(0);
        uint64_t v49 = v64;
        uint64_t v48 = __dst;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(__dst, v46, v51);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v46, *(void *)(*(void *)(v50 - 8) + 64));
        }
        __dst[*(int *)(v43 + 20)] = v46[*(int *)(v43 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(__dst, 0, 1, v43);
        uint64_t v6 = v67;
      }
      type metadata accessor for (TextSelection?, VersionSeed)();
      *(_DWORD *)&v48[*(int *)(v52 + 48)] = *(_DWORD *)&v46[*(int *)(v52 + 48)];
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v49, 0, 1, v37);
    }
    uint64_t v53 = v6[7];
    uint64_t v54 = (char *)a1 + v53;
    uint64_t v55 = (char *)a2 + v53;
    uint64_t v56 = *((void *)v55 + 1);
    if (v56)
    {
      *(void *)uint64_t v54 = *(void *)v55;
      *((void *)v54 + 1) = v56;
      uint64_t v57 = v55 + 16;
      char v58 = v55[24];
      swift_retain();
      swift_retain();
      if (v58)
      {
        *((void *)v54 + 2) = *(void *)v57;
        v54[24] = v57[8];
      }
      else
      {
        swift_unknownObjectWeakCopyInit();
        v54[24] = 0;
      }
    }
    else
    {
      *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
      *(_OWORD *)(v54 + 9) = *(_OWORD *)(v55 + 9);
    }
  }
  return a1;
}

uint64_t destroy for SearchEnvironmentProperties(uint64_t a1, int *a2)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v5 = v4;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    swift_release();
    swift_release();
    uint64_t v6 = a1 + *(int *)(v5 + 32);
    uint64_t v7 = v6 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
    uint64_t v8 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  }
  uint64_t v9 = a1 + a2[5];
  type metadata accessor for Binding<AttributedString>();
  uint64_t v11 = v10;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    swift_release();
    swift_release();
    uint64_t v12 = v9 + *(int *)(v11 + 32);
    uint64_t v13 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  }
  uint64_t v14 = a1 + a2[6];
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v16 = v15;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v18 = v14 + *(int *)(v16 + 32);
    uint64_t v19 = type metadata accessor for TextSelection(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 1, v19);
    if (!result)
    {
      type metadata accessor for TextSelection.Indices(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v18, v20);
      }
    }
  }
  uint64_t v21 = a1 + a2[7];
  if (*(void *)(v21 + 8))
  {
    swift_release();
    uint64_t result = swift_release();
    if ((*(unsigned char *)(v21 + 24) & 1) == 0)
    {
      return swift_unknownObjectWeakDestroy();
    }
  }
  return result;
}

void *initializeWithCopy for SearchEnvironmentProperties(void *a1, void *a2, int *a3)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v61 = a3;
    uint64_t v63 = a2[1];
    *a1 = *a2;
    a1[1] = v63;
    uint64_t v10 = *(int *)(v7 + 32);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v66 = a2;
    uint64_t v12 = (char *)a2 + v10;
    *uint64_t v11 = *v12;
    v11[1] = v12[1];
    *((_WORD *)v11 + 1) = *((_WORD *)v12 + 1);
    v11[8] = v12[8];
    *((_DWORD *)v11 + 1) = *((_DWORD *)v12 + 1);
    uint64_t v13 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v14 = v13[9];
    char v58 = &v12[v14];
    uint64_t v59 = &v11[v14];
    uint64_t v15 = type metadata accessor for AttributedString();
    uint64_t v16 = a1;
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_retain();
    swift_retain();
    v17(v59, v58, v15);
    a1 = v16;
    v11[v13[10]] = v12[v13[10]];
    uint64_t v18 = v13[11];
    uint64_t v19 = &v11[v18];
    a3 = v61;
    uint64_t v20 = &v12[v18];
    a2 = v66;
    v19[4] = v20[4];
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
  }
  uint64_t v21 = a3[5];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  type metadata accessor for Binding<AttributedString>();
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v23, 1, v24))
  {
    type metadata accessor for Binding<AttributedString>?(0);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    uint64_t v64 = a1;
    uint64_t v28 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v28;
    uint64_t v29 = *(int *)(v25 + 32);
    uint64_t v67 = (char *)v22 + v29;
    uint64_t v62 = (char *)v23 + v29;
    uint64_t v30 = type metadata accessor for AttributedString();
    uint64_t v31 = a3;
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
    swift_retain();
    a1 = v64;
    swift_retain();
    v32(v67, v62, v30);
    a3 = v31;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v22, 0, 1, v25);
  }
  uint64_t v33 = a3[6];
  uint64_t v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = (void *)((char *)a2 + v33);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v37 = v36;
  uint64_t v38 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v38 + 48))(v35, 1, v36))
  {
    type metadata accessor for Binding<SearchFieldState>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    uint64_t v60 = v38;
    uint64_t v65 = a1;
    uint64_t v68 = a2;
    uint64_t v40 = v35[1];
    void *v34 = *v35;
    v34[1] = v40;
    uint64_t v41 = *(int *)(v37 + 32);
    uint64_t v42 = (char *)v34 + v41;
    uint64_t v43 = (char *)v35 + v41;
    uint64_t v44 = type metadata accessor for TextSelection(0);
    uint64_t v45 = *(void *)(v44 - 8);
    uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
    swift_retain();
    swift_retain();
    if (v46(v43, 1, v44))
    {
      type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
      memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64));
      a1 = v65;
      a2 = v68;
    }
    else
    {
      uint64_t v48 = type metadata accessor for TextSelection.Indices(0);
      a2 = v68;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v42, v43, v49);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v42, v43, *(void *)(*(void *)(v48 - 8) + 64));
      }
      v42[*(int *)(v44 + 20)] = v43[*(int *)(v44 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      a1 = v65;
    }
    type metadata accessor for (TextSelection?, VersionSeed)();
    *(_DWORD *)&v42[*(int *)(v50 + 48)] = *(_DWORD *)&v43[*(int *)(v50 + 48)];
    (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v34, 0, 1, v37);
  }
  uint64_t v51 = a3[7];
  uint64_t v52 = (char *)a1 + v51;
  uint64_t v53 = (char *)a2 + v51;
  uint64_t v54 = *((void *)v53 + 1);
  if (v54)
  {
    *(void *)uint64_t v52 = *(void *)v53;
    *((void *)v52 + 1) = v54;
    uint64_t v55 = v53 + 16;
    char v56 = v53[24];
    swift_retain();
    swift_retain();
    if (v56)
    {
      *((void *)v52 + 2) = *(void *)v55;
      v52[24] = v55[8];
    }
    else
    {
      swift_unknownObjectWeakCopyInit();
      v52[24] = 0;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
    *(_OWORD *)(v52 + 9) = *(_OWORD *)(v53 + 9);
  }
  return a1;
}

void *assignWithCopy for SearchEnvironmentProperties(void *a1, void *a2, int *a3)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 1, v6);
  int v11 = v9(a2, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v12 = *(int *)(v7 + 32);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      *uint64_t v13 = *((unsigned char *)a2 + v12);
      v13[1] = *((unsigned char *)a2 + v12 + 1);
      v13[2] = *((unsigned char *)a2 + v12 + 2);
      v13[3] = *((unsigned char *)a2 + v12 + 3);
      LODWORD(v12) = *(_DWORD *)((char *)a2 + v12 + 4);
      v13[8] = v14[8];
      *((_DWORD *)v13 + 1) = v12;
      uint64_t v15 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v16 = v15[9];
      uint64_t v107 = &v14[v16];
      __dsta = &v13[v16];
      uint64_t v110 = a2;
      uint64_t v17 = type metadata accessor for AttributedString();
      uint64_t v18 = a3;
      uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      swift_retain();
      swift_retain();
      uint64_t v20 = v17;
      a2 = v110;
      v19(__dsta, v107, v20);
      a3 = v18;
      v13[v15[10]] = v14[v15[10]];
      uint64_t v21 = v15[11];
      uint64_t v22 = &v13[v21];
      uint64_t v23 = &v14[v21];
      char v24 = v23[4];
      *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
      _OWORD v22[4] = v24;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    outlined destroy of Binding<SearchFieldState>?((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
LABEL_6:
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v62 = *(int *)(v7 + 32);
  uint64_t v63 = (char *)a1 + v62;
  uint64_t v64 = (char *)a2 + v62;
  char *v63 = *((unsigned char *)a2 + v62);
  v63[1] = *((unsigned char *)a2 + v62 + 1);
  v63[2] = *((unsigned char *)a2 + v62 + 2);
  v63[3] = *((unsigned char *)a2 + v62 + 3);
  LODWORD(v62) = *(_DWORD *)((char *)a2 + v62 + 4);
  v63[8] = v64[8];
  *((_DWORD *)v63 + 1) = v62;
  uint64_t v65 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v66 = v65[9];
  uint64_t v67 = &v63[v66];
  uint64_t v68 = &v64[v66];
  uint64_t v69 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v69 - 8) + 24))(v67, v68, v69);
  v63[v65[10]] = v64[v65[10]];
  uint64_t v70 = v65[11];
  uint64_t v71 = &v63[v70];
  uint64_t v72 = &v64[v70];
  *(_DWORD *)uint64_t v71 = *(_DWORD *)v72;
  v71[4] = v72[4];
LABEL_7:
  uint64_t v26 = a3[5];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  type metadata accessor for Binding<AttributedString>();
  uint64_t v30 = v29;
  uint64_t v31 = *(void *)(v29 - 8);
  uint64_t v32 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
  int v33 = v32(v27, 1, v29);
  int v34 = v32(v28, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      *uint64_t v27 = *v28;
      char v113 = a1;
      v27[1] = v28[1];
      uint64_t v35 = *(int *)(v30 + 32);
      uint64_t v36 = (char *)v27 + v35;
      uint64_t v111 = (char *)v28 + v35;
      uint64_t v37 = a2;
      uint64_t v38 = type metadata accessor for AttributedString();
      uint64_t v39 = *(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 16);
      swift_retain();
      swift_retain();
      uint64_t v40 = v36;
      a1 = v113;
      uint64_t v41 = v38;
      a2 = v37;
      v39(v40, v111, v41);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
LABEL_12:
    type metadata accessor for Binding<AttributedString>?(0);
    memcpy(v27, v28, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  *uint64_t v27 = *v28;
  swift_retain();
  swift_release();
  v27[1] = v28[1];
  swift_retain();
  swift_release();
  uint64_t v73 = *(int *)(v30 + 32);
  long long v74 = (char *)v27 + v73;
  uint64_t v75 = (char *)v28 + v73;
  uint64_t v76 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v76 - 8) + 24))(v74, v75, v76);
LABEL_13:
  uint64_t v43 = a3[6];
  uint64_t v44 = (void *)((char *)a1 + v43);
  uint64_t v45 = (void *)((char *)a2 + v43);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v47 = v46;
  uint64_t v48 = *(void *)(v46 - 8);
  uint64_t v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v44, 1, v46);
  int v51 = v49(v45, 1, v47);
  if (!v50)
  {
    if (v51)
    {
      outlined destroy of Binding<SearchFieldState>?((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
      goto LABEL_19;
    }
    *uint64_t v44 = *v45;
    swift_retain();
    swift_release();
    v44[1] = v45[1];
    swift_retain();
    swift_release();
    uint64_t v77 = *(int *)(v47 + 32);
    uint64_t v78 = (char *)v44 + v77;
    long long v79 = (char *)v45 + v77;
    uint64_t v80 = type metadata accessor for TextSelection(0);
    uint64_t v81 = *(void *)(v80 - 8);
    long long v82 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 48);
    int v83 = v82(v78, 1, v80);
    int v84 = v82(v79, 1, v80);
    if (v83)
    {
      if (!v84)
      {
        uint64_t v85 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 16))(v78, v79, v86);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v78, v79, *(void *)(*(void *)(v85 - 8) + 64));
        }
        v78[*(int *)(v80 + 20)] = v79[*(int *)(v80 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v78, 0, 1, v80);
        goto LABEL_41;
      }
    }
    else
    {
      if (!v84)
      {
        if (a1 != a2)
        {
          outlined destroy of Binding<SearchFieldState>?((uint64_t)v78, type metadata accessor for TextSelection.Indices);
          uint64_t v91 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v92 - 8) + 16))(v78, v79, v92);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v78, v79, *(void *)(*(void *)(v91 - 8) + 64));
          }
        }
        v78[*(int *)(v80 + 20)] = v79[*(int *)(v80 + 20)];
        goto LABEL_41;
      }
      outlined destroy of Binding<SearchFieldState>?((uint64_t)v78, type metadata accessor for TextSelection);
    }
    type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
    memcpy(v78, v79, *(void *)(*(void *)(v89 - 8) + 64));
LABEL_41:
    type metadata accessor for (TextSelection?, VersionSeed)();
    *(_DWORD *)&v78[*(int *)(v93 + 48)] = *(_DWORD *)&v79[*(int *)(v93 + 48)];
    goto LABEL_42;
  }
  if (v51)
  {
LABEL_19:
    type metadata accessor for Binding<SearchFieldState>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
    memcpy(v44, v45, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_42;
  }
  uint64_t v114 = a1;
  uint64_t v115 = a3;
  uint64_t v112 = a2;
  *uint64_t v44 = *v45;
  v44[1] = v45[1];
  uint64_t v52 = *(int *)(v47 + 32);
  __dst = (char *)v44 + v52;
  uint64_t v53 = (char *)v45 + v52;
  uint64_t v54 = type metadata accessor for TextSelection(0);
  uint64_t v55 = *(void *)(v54 - 8);
  char v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
  swift_retain();
  swift_retain();
  uint64_t v57 = v53;
  if (v56(v53, 1, v54))
  {
    type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
    uint64_t v59 = __dst;
    uint64_t v60 = v57;
    memcpy(__dst, v57, *(void *)(*(void *)(v58 - 8) + 64));
    a2 = v112;
  }
  else
  {
    uint64_t v59 = __dst;
    uint64_t v87 = type metadata accessor for TextSelection.Indices(0);
    uint64_t v60 = v57;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v88 - 8) + 16))(__dst, v57, v88);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(__dst, v57, *(void *)(*(void *)(v87 - 8) + 64));
    }
    a2 = v112;
    a1 = v114;
    __dst[*(int *)(v54 + 20)] = v60[*(int *)(v54 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v54);
  }
  a3 = v115;
  type metadata accessor for (TextSelection?, VersionSeed)();
  *(_DWORD *)&v59[*(int *)(v90 + 48)] = *(_DWORD *)&v60[*(int *)(v90 + 48)];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v44, 0, 1, v47);
LABEL_42:
  uint64_t v94 = a3[7];
  uint64_t v95 = (uint64_t)a1 + v94;
  uint64_t v96 = (char *)a2 + v94;
  uint64_t v97 = *(void *)((char *)a1 + v94 + 8);
  uint64_t v98 = *(void *)((char *)a2 + v94 + 8);
  if (!v97)
  {
    if (!v98)
    {
      long long v105 = *(_OWORD *)v96;
      *(_OWORD *)(v95 + 9) = *(_OWORD *)(v96 + 9);
      *(_OWORD *)uint64_t v95 = v105;
      return a1;
    }
    *(void *)uint64_t v95 = *(void *)v96;
    *(void *)(v95 + 8) = *((void *)v96 + 1);
    uint64_t v99 = v95 + 16;
    uint64_t v100 = v96 + 16;
    char v101 = v96[24];
    swift_retain();
    swift_retain();
    if ((v101 & 1) == 0) {
      goto LABEL_46;
    }
    goto LABEL_49;
  }
  if (!v98)
  {
    outlined destroy of Binding<SearchFieldState>?(v95, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
    long long v103 = *(_OWORD *)(v96 + 9);
    *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
    *(_OWORD *)(v95 + 9) = v103;
    return a1;
  }
  *(void *)uint64_t v95 = *(void *)v96;
  swift_retain();
  swift_release();
  *(void *)(v95 + 8) = *((void *)v96 + 1);
  swift_retain();
  swift_release();
  uint64_t v99 = v95 + 16;
  uint64_t v100 = v96 + 16;
  if (*(unsigned char *)(v95 + 24))
  {
    if ((v96[24] & 1) == 0)
    {
LABEL_46:
      swift_unknownObjectWeakCopyInit();
      *(unsigned char *)(v95 + 24) = 0;
      return a1;
    }
LABEL_49:
    uint64_t v102 = *(void *)v100;
    *(unsigned char *)(v99 + 8) = v100[8];
    *(void *)uint64_t v99 = v102;
    return a1;
  }
  if (v96[24])
  {
    outlined destroy of PlatformSearchPopoverAnchor(v95 + 16);
    char v104 = v96[24];
    *(void *)uint64_t v99 = *(void *)v100;
    *(unsigned char *)(v95 + 24) = v104;
  }
  else
  {
    swift_unknownObjectWeakCopyAssign();
  }
  return a1;
}

uint64_t outlined destroy of PlatformSearchPopoverAnchor(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for SearchEnvironmentProperties(void *a1, void *a2, int *a3)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v6))
  {
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    uint64_t v11 = *(int *)(v7 + 32);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    *uint64_t v12 = *((unsigned char *)a2 + v11);
    v12[1] = *((unsigned char *)a2 + v11 + 1);
    *((_WORD *)v12 + 1) = *(_WORD *)((char *)a2 + v11 + 2);
    v12[8] = *((unsigned char *)a2 + v11 + 8);
    *((_DWORD *)v12 + 1) = *(_DWORD *)((char *)a2 + v11 + 4);
    uint64_t v14 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v15 = v14[9];
    uint64_t v16 = &v12[v15];
    uint64_t v17 = &v13[v15];
    uint64_t v18 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
    v12[v14[10]] = v13[v14[10]];
    uint64_t v19 = v14[11];
    uint64_t v20 = &v12[v19];
    uint64_t v21 = &v13[v19];
    _OWORD v20[4] = v21[4];
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  uint64_t v22 = a3[5];
  uint64_t v23 = (void *)((char *)a1 + v22);
  char v24 = (void *)((char *)a2 + v22);
  type metadata accessor for Binding<AttributedString>();
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
  {
    type metadata accessor for Binding<AttributedString>?(0);
    memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v29 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v29;
    uint64_t v30 = *(int *)(v26 + 32);
    uint64_t v31 = (char *)v23 + v30;
    uint64_t v32 = (char *)v24 + v30;
    uint64_t v33 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
  }
  uint64_t v34 = a3[6];
  uint64_t v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v38 = v37;
  uint64_t v39 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v39 + 48))(v36, 1, v37))
  {
    type metadata accessor for Binding<SearchFieldState>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
    memcpy(v35, v36, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    uint64_t v41 = v36[1];
    void *v35 = *v36;
    v35[1] = v41;
    uint64_t v42 = *(int *)(v38 + 32);
    uint64_t v43 = (char *)v35 + v42;
    uint64_t v44 = (char *)v36 + v42;
    uint64_t v45 = type metadata accessor for TextSelection(0);
    uint64_t v46 = *(void *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
      memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      uint64_t v55 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 32))(v43, v44, v48);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v43, v44, *(void *)(*(void *)(v55 - 8) + 64));
      }
      v43[*(int *)(v45 + 20)] = v44[*(int *)(v45 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    type metadata accessor for (TextSelection?, VersionSeed)();
    *(_DWORD *)&v43[*(int *)(v49 + 48)] = *(_DWORD *)&v44[*(int *)(v49 + 48)];
    (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v35, 0, 1, v38);
  }
  uint64_t v50 = a3[7];
  int v51 = (char *)a1 + v50;
  uint64_t v52 = (char *)a2 + v50;
  uint64_t v53 = *((void *)v52 + 1);
  if (v53)
  {
    *(void *)int v51 = *(void *)v52;
    *((void *)v51 + 1) = v53;
    if (v52[24])
    {
      *((void *)v51 + 2) = *((void *)v52 + 2);
      v51[24] = v52[24];
    }
    else
    {
      swift_unknownObjectWeakTakeInit();
      v51[24] = 0;
    }
  }
  else
  {
    *(_OWORD *)int v51 = *(_OWORD *)v52;
    *(_OWORD *)(v51 + 9) = *(_OWORD *)(v52 + 9);
  }
  return a1;
}

void *assignWithTake for SearchEnvironmentProperties(void *a1, void *a2, uint64_t a3)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(a1, 1, v6);
  int v11 = v9(a2, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      uint64_t v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      uint64_t v13 = *(int *)(v7 + 32);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      char *v14 = *((unsigned char *)a2 + v13);
      v14[1] = *((unsigned char *)a2 + v13 + 1);
      *((_WORD *)v14 + 1) = *(_WORD *)((char *)a2 + v13 + 2);
      v14[8] = *((unsigned char *)a2 + v13 + 8);
      *((_DWORD *)v14 + 1) = *(_DWORD *)((char *)a2 + v13 + 4);
      uint64_t v16 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v17 = v16[9];
      uint64_t v18 = &v14[v17];
      uint64_t v19 = &v15[v17];
      uint64_t v20 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
      v14[v16[10]] = v15[v16[10]];
      uint64_t v21 = v16[11];
      uint64_t v22 = &v14[v21];
      uint64_t v23 = &v15[v21];
      _OWORD v22[4] = v23[4];
      *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v11)
  {
    outlined destroy of Binding<SearchFieldState>?((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
LABEL_6:
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v57 = *(int *)(v7 + 32);
  uint64_t v58 = (char *)a1 + v57;
  uint64_t v59 = (char *)a2 + v57;
  *uint64_t v58 = *((unsigned char *)a2 + v57);
  v58[1] = *((unsigned char *)a2 + v57 + 1);
  *((_WORD *)v58 + 1) = *(_WORD *)((char *)a2 + v57 + 2);
  *((_DWORD *)v58 + 1) = *(_DWORD *)((char *)a2 + v57 + 4);
  v58[8] = *((unsigned char *)a2 + v57 + 8);
  uint64_t v60 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v61 = v60[9];
  uint64_t v62 = &v58[v61];
  uint64_t v63 = &v59[v61];
  uint64_t v64 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 40))(v62, v63, v64);
  v58[v60[10]] = v59[v60[10]];
  uint64_t v65 = v60[11];
  uint64_t v66 = &v58[v65];
  uint64_t v67 = &v59[v65];
  *(_DWORD *)uint64_t v66 = *(_DWORD *)v67;
  v66[4] = v67[4];
LABEL_7:
  uint64_t v25 = *(int *)(a3 + 20);
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  type metadata accessor for Binding<AttributedString>();
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(v28 - 8);
  uint64_t v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v26, 1, v28);
  int v33 = v31(v27, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      uint64_t v34 = v27[1];
      void *v26 = *v27;
      v26[1] = v34;
      uint64_t v35 = *(int *)(v29 + 32);
      uint64_t v36 = (char *)v26 + v35;
      uint64_t v37 = (char *)v27 + v35;
      uint64_t v38 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v29);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v33)
  {
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
LABEL_12:
    type metadata accessor for Binding<AttributedString>?(0);
    memcpy(v26, v27, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  void *v26 = *v27;
  swift_release();
  v26[1] = v27[1];
  swift_release();
  uint64_t v68 = *(int *)(v29 + 32);
  uint64_t v69 = (char *)v26 + v68;
  uint64_t v70 = (char *)v27 + v68;
  uint64_t v71 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v71 - 8) + 40))(v69, v70, v71);
LABEL_13:
  uint64_t v96 = a3;
  uint64_t v40 = *(int *)(a3 + 24);
  uint64_t v41 = (void *)((char *)a1 + v40);
  uint64_t v42 = (void *)((char *)a2 + v40);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v44 = v43;
  uint64_t v45 = *(void *)(v43 - 8);
  uint64_t v46 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v45 + 48);
  int v47 = v46(v41, 1, v43);
  int v48 = v46(v42, 1, v44);
  if (v47)
  {
    if (!v48)
    {
      uint64_t v49 = v42[1];
      *uint64_t v41 = *v42;
      v41[1] = v49;
      uint64_t v50 = *(int *)(v44 + 32);
      int v51 = (char *)v41 + v50;
      uint64_t v52 = (char *)v42 + v50;
      uint64_t v53 = type metadata accessor for TextSelection(0);
      uint64_t v54 = *(void *)(v53 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
        memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
      }
      else
      {
        uint64_t v83 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 32))(v51, v52, v84);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v51, v52, *(void *)(*(void *)(v83 - 8) + 64));
        }
        v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      }
      type metadata accessor for (TextSelection?, VersionSeed)();
      *(_DWORD *)&v51[*(int *)(v86 + 48)] = *(_DWORD *)&v52[*(int *)(v86 + 48)];
      (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
      goto LABEL_34;
    }
LABEL_19:
    type metadata accessor for Binding<SearchFieldState>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
    memcpy(v41, v42, *(void *)(*(void *)(v56 - 8) + 64));
LABEL_34:
    uint64_t v80 = v96;
    goto LABEL_35;
  }
  if (v48)
  {
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
    goto LABEL_19;
  }
  *uint64_t v41 = *v42;
  swift_release();
  v41[1] = v42[1];
  swift_release();
  uint64_t v72 = *(int *)(v44 + 32);
  uint64_t v73 = (char *)v41 + v72;
  long long v74 = (char *)v42 + v72;
  uint64_t v75 = type metadata accessor for TextSelection(0);
  uint64_t v76 = *(void *)(v75 - 8);
  uint64_t v77 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48);
  int v78 = v77(v73, 1, v75);
  int v79 = v77(v74, 1, v75);
  uint64_t v80 = v96;
  if (v78)
  {
    if (!v79)
    {
      uint64_t v81 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v82 - 8) + 32))(v73, v74, v82);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v73, v74, *(void *)(*(void *)(v81 - 8) + 64));
      }
      v73[*(int *)(v75 + 20)] = v74[*(int *)(v75 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v73, 0, 1, v75);
      goto LABEL_58;
    }
  }
  else
  {
    if (!v79)
    {
      if (a1 != a2)
      {
        outlined destroy of Binding<SearchFieldState>?((uint64_t)v73, type metadata accessor for TextSelection.Indices);
        uint64_t v93 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v94 - 8) + 32))(v73, v74, v94);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v73, v74, *(void *)(*(void *)(v93 - 8) + 64));
        }
      }
      v73[*(int *)(v75 + 20)] = v74[*(int *)(v75 + 20)];
      goto LABEL_58;
    }
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v73, type metadata accessor for TextSelection);
  }
  type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
  memcpy(v73, v74, *(void *)(*(void *)(v85 - 8) + 64));
LABEL_58:
  type metadata accessor for (TextSelection?, VersionSeed)();
  *(_DWORD *)&v73[*(int *)(v95 + 48)] = *(_DWORD *)&v74[*(int *)(v95 + 48)];
LABEL_35:
  uint64_t v87 = *(int *)(v80 + 28);
  uint64_t v88 = (uint64_t)a1 + v87;
  uint64_t v89 = (char *)a2 + v87;
  uint64_t v90 = *(void *)((char *)a1 + v87 + 8);
  uint64_t v91 = *(void *)((char *)a2 + v87 + 8);
  if (v90)
  {
    if (v91)
    {
      *(void *)uint64_t v88 = *(void *)v89;
      swift_release();
      *(void *)(v88 + 8) = *((void *)v89 + 1);
      swift_release();
      if (*(unsigned char *)(v88 + 24))
      {
        if ((v89[24] & 1) == 0) {
          goto LABEL_45;
        }
      }
      else
      {
        if ((v89[24] & 1) == 0)
        {
          swift_unknownObjectWeakTakeAssign();
          return a1;
        }
        outlined destroy of PlatformSearchPopoverAnchor(v88 + 16);
      }
      *(void *)(v88 + 16) = *((void *)v89 + 2);
      *(unsigned char *)(v88 + 24) = v89[24];
      return a1;
    }
    outlined destroy of Binding<SearchFieldState>?(v88, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
    goto LABEL_44;
  }
  if (!v91)
  {
LABEL_44:
    *(_OWORD *)uint64_t v88 = *(_OWORD *)v89;
    *(_OWORD *)(v88 + 9) = *(_OWORD *)(v89 + 9);
    return a1;
  }
  *(void *)uint64_t v88 = *(void *)v89;
  *(void *)(v88 + 8) = v91;
  if ((v89[24] & 1) == 0)
  {
LABEL_45:
    swift_unknownObjectWeakTakeInit();
    *(unsigned char *)(v88 + 24) = 0;
    return a1;
  }
  *(void *)(v88 + 16) = *((void *)v89 + 2);
  *(unsigned char *)(v88 + 24) = v89[24];
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchEnvironmentProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187E07DF0);
}

uint64_t sub_187E07DF0(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for Binding<SearchFieldState>?(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  type metadata accessor for Binding<AttributedString>?(0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  type metadata accessor for Binding<SearchFieldState>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[7] + 8);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  int v17 = v16 - 1;
  if (v17 < 0) {
    int v17 = -1;
  }
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchEnvironmentProperties(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187E07FA4);
}

void sub_187E07FA4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for Binding<SearchFieldState>?(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    type metadata accessor for Binding<AttributedString>?(0);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      type metadata accessor for Binding<SearchFieldState>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[7] + 8) = a2;
        return;
      }
      uint64_t v10 = v16;
      uint64_t v14 = *(void *)(v16 - 8);
      uint64_t v15 = a4[6];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  v11(v12, a2, a2, v10);
}

void type metadata completion function for SearchEnvironmentProperties()
{
  type metadata accessor for Binding<SearchFieldState>?(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<AttributedString>?(319);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Binding<SearchFieldState>?(319, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for SearchEnvironmentTransformModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for SearchEnvironmentTransformModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187E085E4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for SearchEnvironmentTransformModifier()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchSuggestionsPlacementKey()
{
  return &type metadata for EnvironmentValues.SearchSuggestionsPlacementKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsSearchingKey()
{
  return &type metadata for EnvironmentValues.IsSearchingKey;
}

_UNKNOWN **base witness table accessor for ViewModifier in SearchEnvironmentTransformModifier<A>()
{
  return &protocol witness table for SearchEnvironmentTransformModifier<A>;
}

unint64_t lazy protocol witness table accessor for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage;
  if (!lazy protocol witness table cache variable for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage)
  {
    type metadata accessor for SearchEnvironmentStorage(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchEnvironmentStorage and conformance SearchEnvironmentStorage);
  }
  return result;
}

void type metadata accessor for SearchEnvironmentTransform?(uint64_t a1)
{
}

unint64_t type metadata accessor for SearchEnvironmentTransform()
{
  unint64_t result = lazy cache variable for type metadata for SearchEnvironmentTransform;
  if (!lazy cache variable for type metadata for SearchEnvironmentTransform)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SearchEnvironmentTransform);
  }
  return result;
}

uint64_t partial apply for closure #1 in SearchEnvironmentStorage.transform.setter()
{
  return closure #1 in SearchEnvironmentStorage.transform.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in SearchEnvironmentStorage.baseProperties.setter()
{
  return closure #1 in SearchEnvironmentStorage.baseProperties.setter(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t outlined assign with copy of SearchEnvironmentTransform?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for TransformSearchEnvironmentStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of SearchEnvironmentProperties(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchEnvironmentProperties(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Binding<SearchFieldState>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchFocusContextKey()
{
  return &type metadata for EnvironmentValues.SearchFocusContextKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.IsSearchVibrancyEnabledKey()
{
  return &type metadata for EnvironmentValues.IsSearchVibrancyEnabledKey;
}

uint64_t type metadata completion function for TransformSearchEnvironmentStorage()
{
  uint64_t result = type metadata accessor for SearchEnvironmentProperties(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TransformSearchEnvironmentStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    uint64_t v14 = v13 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    a1[1] = a2[1];
    uint64_t v5 = *(int *)(a3 + 44);
    unint64_t v6 = (uint64_t *)((char *)a1 + v5);
    uint64_t v7 = (uint64_t *)((char *)a2 + v5);
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    int v11 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48);
    swift_retain();
    if (v11(v7, 1, v9))
    {
      type metadata accessor for Binding<SearchFieldState>?(0);
      memcpy(v6, v7, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v15 = v7[1];
      uint64_t v71 = v6;
      *unint64_t v6 = *v7;
      v6[1] = v15;
      uint64_t v16 = *(int *)(v9 + 32);
      int v17 = (char *)v6 + v16;
      uint64_t v18 = (char *)v7 + v16;
      *int v17 = *((unsigned char *)v7 + v16);
      v17[1] = *((unsigned char *)v7 + v16 + 1);
      *((_WORD *)v17 + 1) = *(_WORD *)((char *)v7 + v16 + 2);
      v17[8] = *((unsigned char *)v7 + v16 + 8);
      *((_DWORD *)v17 + 1) = *(_DWORD *)((char *)v7 + v16 + 4);
      uint64_t v19 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v20 = v19[9];
      __dsta = &v18[v20];
      uint64_t v67 = &v17[v20];
      uint64_t v21 = type metadata accessor for AttributedString();
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
      swift_retain();
      swift_retain();
      v22(v67, __dsta, v21);
      v17[v19[10]] = v18[v19[10]];
      uint64_t v23 = v19[11];
      uint64_t v24 = &v17[v23];
      unint64_t v6 = v71;
      uint64_t v25 = &v18[v23];
      v24[4] = v25[4];
      *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v71, 0, 1, v9);
    }
    uint64_t v26 = (int *)type metadata accessor for SearchEnvironmentProperties(0);
    uint64_t v27 = v26[5];
    uint64_t v28 = (void *)((char *)v6 + v27);
    uint64_t v29 = (void *)((char *)v7 + v27);
    type metadata accessor for Binding<AttributedString>();
    uint64_t v31 = v30;
    uint64_t v32 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v32 + 48))(v29, 1, v30))
    {
      type metadata accessor for Binding<AttributedString>?(0);
      memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      uint64_t v34 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v34;
      uint64_t v35 = *(int *)(v31 + 32);
      uint64_t v68 = (char *)v29 + v35;
      uint64_t v70 = (char *)v28 + v35;
      uint64_t v72 = v26;
      uint64_t v36 = type metadata accessor for AttributedString();
      uint64_t v37 = v7;
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
      swift_retain();
      swift_retain();
      uint64_t v39 = v36;
      uint64_t v26 = v72;
      v38(v70, v68, v39);
      uint64_t v7 = v37;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v31);
    }
    uint64_t v40 = v26[6];
    uint64_t v41 = (void *)((char *)v6 + v40);
    uint64_t v42 = (void *)((char *)v7 + v40);
    type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
    uint64_t v44 = v43;
    uint64_t v45 = *(void *)(v43 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v45 + 48))(v42, 1, v43))
    {
      type metadata accessor for Binding<SearchFieldState>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
      memcpy(v41, v42, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      uint64_t v69 = v45;
      uint64_t v47 = v42[1];
      *uint64_t v41 = *v42;
      v41[1] = v47;
      uint64_t v48 = *(int *)(v44 + 32);
      __dst = (char *)v41 + v48;
      uint64_t v49 = (char *)v42 + v48;
      uint64_t v50 = type metadata accessor for TextSelection(0);
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
      swift_retain();
      swift_retain();
      if (v52(v49, 1, v50))
      {
        type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
        uint64_t v54 = __dst;
        memcpy(__dst, v49, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        uint64_t v55 = type metadata accessor for TextSelection.Indices(0);
        uint64_t v54 = __dst;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 16))(__dst, v49, v56);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v49, *(void *)(*(void *)(v55 - 8) + 64));
        }
        __dst[*(int *)(v50 + 20)] = v49[*(int *)(v50 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v50);
      }
      type metadata accessor for (TextSelection?, VersionSeed)();
      *(_DWORD *)&v54[*(int *)(v57 + 48)] = *(_DWORD *)&v49[*(int *)(v57 + 48)];
      (*(void (**)(void *, void, uint64_t, uint64_t))(v69 + 56))(v41, 0, 1, v44);
    }
    uint64_t v58 = v26[7];
    uint64_t v59 = (char *)v6 + v58;
    uint64_t v60 = (char *)v7 + v58;
    uint64_t v61 = *((void *)v60 + 1);
    if (v61)
    {
      *(void *)uint64_t v59 = *(void *)v60;
      *((void *)v59 + 1) = v61;
      uint64_t v62 = v60 + 16;
      char v63 = v60[24];
      swift_retain();
      swift_retain();
      if (v63)
      {
        *((void *)v59 + 2) = *(void *)v62;
        v59[24] = v62[8];
      }
      else
      {
        swift_unknownObjectWeakCopyInit();
        v59[24] = 0;
      }
    }
    else
    {
      *(_OWORD *)uint64_t v59 = *(_OWORD *)v60;
      *(_OWORD *)(v59 + 9) = *(_OWORD *)(v60 + 9);
    }
    return a1;
  }
  return (uint64_t *)v14;
}

uint64_t destroy for TransformSearchEnvironmentStorage(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v6 = v5;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    swift_release();
    swift_release();
    uint64_t v7 = v4 + *(int *)(v6 + 32);
    uint64_t v8 = v7 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
    uint64_t v9 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  uint64_t v10 = (int *)type metadata accessor for SearchEnvironmentProperties(0);
  uint64_t v11 = v4 + v10[5];
  type metadata accessor for Binding<AttributedString>();
  uint64_t v13 = v12;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    swift_release();
    swift_release();
    uint64_t v14 = v11 + *(int *)(v13 + 32);
    uint64_t v15 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  }
  uint64_t v16 = v4 + v10[6];
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v18 = v17;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v20 = v16 + *(int *)(v18 + 32);
    uint64_t v21 = type metadata accessor for TextSelection(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21);
    if (!result)
    {
      type metadata accessor for TextSelection.Indices(0);
      uint64_t result = swift_getEnumCaseMultiPayload();
      if (result == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v20, v22);
      }
    }
  }
  uint64_t v23 = v4 + v10[7];
  if (*(void *)(v23 + 8))
  {
    swift_release();
    uint64_t result = swift_release();
    if ((*(unsigned char *)(v23 + 24) & 1) == 0)
    {
      return swift_unknownObjectWeakDestroy();
    }
  }
  return result;
}

void *initializeWithCopy for TransformSearchEnvironmentStorage(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = *(int *)(a3 + 44);
  uint64_t v4 = (void *)((char *)a1 + v3);
  uint64_t v5 = (void *)((char *)a2 + v3);
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  if (v9(v5, 1, v7))
  {
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(v4, v5, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = v5[1];
    *uint64_t v4 = *v5;
    v4[1] = v11;
    uint64_t v12 = *(int *)(v7 + 32);
    uint64_t v65 = v5;
    uint64_t v68 = v4;
    uint64_t v13 = (char *)v4 + v12;
    uint64_t v14 = (char *)v5 + v12;
    *uint64_t v13 = *v14;
    v13[1] = v14[1];
    *((_WORD *)v13 + 1) = *((_WORD *)v14 + 1);
    v13[8] = v14[8];
    *((_DWORD *)v13 + 1) = *((_DWORD *)v14 + 1);
    uint64_t v15 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v16 = v15[9];
    uint64_t v61 = &v14[v16];
    char v63 = &v13[v16];
    uint64_t v17 = type metadata accessor for AttributedString();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_retain();
    swift_retain();
    v18(v63, v61, v17);
    v13[v15[10]] = v14[v15[10]];
    uint64_t v19 = v15[11];
    uint64_t v20 = &v13[v19];
    uint64_t v21 = &v14[v19];
    uint64_t v5 = v65;
    uint64_t v4 = v68;
    _OWORD v20[4] = v21[4];
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v68, 0, 1, v7);
  }
  uint64_t v22 = (int *)type metadata accessor for SearchEnvironmentProperties(0);
  uint64_t v23 = v22[5];
  uint64_t v24 = (void *)((char *)v4 + v23);
  uint64_t v25 = (void *)((char *)v5 + v23);
  type metadata accessor for Binding<AttributedString>();
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v26))
  {
    type metadata accessor for Binding<AttributedString>?(0);
    memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    uint64_t v30 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v30;
    uint64_t v31 = *(int *)(v27 + 32);
    uint64_t v66 = (char *)v25 + v31;
    uint64_t v69 = (char *)v24 + v31;
    uint64_t v64 = v22;
    uint64_t v32 = type metadata accessor for AttributedString();
    uint64_t v33 = v4;
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
    swift_retain();
    swift_retain();
    uint64_t v35 = v32;
    uint64_t v22 = v64;
    v34(v69, v66, v35);
    uint64_t v4 = v33;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v24, 0, 1, v27);
  }
  uint64_t v36 = v22[6];
  uint64_t v37 = (void *)((char *)v4 + v36);
  uint64_t v38 = (void *)((char *)v5 + v36);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v40 = v39;
  uint64_t v41 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v41 + 48))(v38, 1, v39))
  {
    type metadata accessor for Binding<SearchFieldState>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
    memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    uint64_t v62 = v41;
    uint64_t v67 = v5;
    uint64_t v43 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v43;
    uint64_t v44 = *(int *)(v40 + 32);
    uint64_t v45 = (char *)v37 + v44;
    uint64_t v46 = (char *)v38 + v44;
    uint64_t v47 = type metadata accessor for TextSelection(0);
    uint64_t v48 = *(void *)(v47 - 8);
    uint64_t v49 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
    swift_retain();
    swift_retain();
    if (v49(v46, 1, v47))
    {
      type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
      memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
      uint64_t v5 = v67;
    }
    else
    {
      uint64_t v51 = type metadata accessor for TextSelection.Indices(0);
      uint64_t v5 = v67;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v45, v46, v52);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v45, v46, *(void *)(*(void *)(v51 - 8) + 64));
      }
      v45[*(int *)(v47 + 20)] = v46[*(int *)(v47 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    type metadata accessor for (TextSelection?, VersionSeed)();
    *(_DWORD *)&v45[*(int *)(v53 + 48)] = *(_DWORD *)&v46[*(int *)(v53 + 48)];
    (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v37, 0, 1, v40);
  }
  uint64_t v54 = v22[7];
  uint64_t v55 = (char *)v4 + v54;
  uint64_t v56 = (char *)v5 + v54;
  uint64_t v57 = *((void *)v56 + 1);
  if (v57)
  {
    *(void *)uint64_t v55 = *(void *)v56;
    *((void *)v55 + 1) = v57;
    uint64_t v58 = v56 + 16;
    char v59 = v56[24];
    swift_retain();
    swift_retain();
    if (v59)
    {
      *((void *)v55 + 2) = *(void *)v58;
      v55[24] = v58[8];
    }
    else
    {
      swift_unknownObjectWeakCopyInit();
      v55[24] = 0;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
    *(_OWORD *)(v55 + 9) = *(_OWORD *)(v56 + 9);
  }
  return a1;
}

char *assignWithCopy for TransformSearchEnvironmentStorage(char *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *(_DWORD *)a1 = *a2;
  *((_DWORD *)a1 + 1) = a2[1];
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 44);
  uint64_t v7 = &v5[v6];
  uint64_t v8 = (char *)a2 + v6;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v7, 1, v9);
  int v14 = v12(v8, 1, v10);
  uint64_t v117 = v8;
  __dst = (char *)a2;
  if (v13)
  {
    if (!v14)
    {
      *(void *)uint64_t v7 = *(void *)v8;
      *((void *)v7 + 1) = *((void *)v8 + 1);
      uint64_t v15 = *(int *)(v10 + 32);
      uint64_t v16 = &v7[v15];
      uint64_t v109 = v7;
      uint64_t v17 = &v8[v15];
      *uint64_t v16 = v8[v15];
      v16[1] = v8[v15 + 1];
      void v16[2] = v8[v15 + 2];
      v16[3] = v8[v15 + 3];
      LODWORD(v15) = *(_DWORD *)&v8[v15 + 4];
      v16[8] = v17[8];
      *((_DWORD *)v16 + 1) = v15;
      uint64_t v18 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v19 = v18[9];
      uint64_t v112 = &v16[v19];
      uint64_t v108 = &v17[v19];
      uint64_t v20 = type metadata accessor for AttributedString();
      uint64_t v21 = v5;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
      swift_retain();
      swift_retain();
      v22(v112, v108, v20);
      uint64_t v5 = v21;
      v16[v18[10]] = v17[v18[10]];
      uint64_t v23 = v18[11];
      uint64_t v24 = &v16[v23];
      uint64_t v25 = &v17[v23];
      uint64_t v7 = v109;
      char v26 = v25[4];
      *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
      v24[4] = v26;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v109, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
LABEL_6:
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v7 = *(void *)v8;
  swift_retain();
  swift_release();
  *((void *)v7 + 1) = *((void *)v8 + 1);
  swift_retain();
  swift_release();
  uint64_t v61 = *(int *)(v10 + 32);
  uint64_t v62 = &v7[v61];
  char v63 = &v8[v61];
  char *v62 = v8[v61];
  v62[1] = v8[v61 + 1];
  v62[2] = v8[v61 + 2];
  v62[3] = v8[v61 + 3];
  LODWORD(v61) = *(_DWORD *)&v8[v61 + 4];
  v62[8] = v63[8];
  *((_DWORD *)v62 + 1) = v61;
  uint64_t v64 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v65 = v64[9];
  uint64_t v66 = &v62[v65];
  uint64_t v67 = &v63[v65];
  uint64_t v68 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 24))(v66, v67, v68);
  v62[v64[10]] = v63[v64[10]];
  uint64_t v69 = v64[11];
  uint64_t v70 = &v62[v69];
  uint64_t v71 = &v63[v69];
  *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
  v70[4] = v71[4];
LABEL_7:
  uint64_t v116 = type metadata accessor for SearchEnvironmentProperties(0);
  uint64_t v28 = *(int *)(v116 + 20);
  uint64_t v29 = &v7[v28];
  uint64_t v30 = &v8[v28];
  type metadata accessor for Binding<AttributedString>();
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v31 - 8);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v29, 1, v31);
  int v36 = v34(v30, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      *(void *)uint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = *((void *)v30 + 1);
      uint64_t v37 = *(int *)(v32 + 32);
      uint64_t v38 = &v29[v37];
      uint64_t v110 = &v30[v37];
      uint64_t v39 = type metadata accessor for AttributedString();
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16);
      swift_retain();
      swift_retain();
      uint64_t v41 = v38;
      uint64_t v8 = v117;
      v40(v41, v110, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v36)
  {
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
LABEL_12:
    type metadata accessor for Binding<AttributedString>?(0);
    memcpy(v29, v30, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  *(void *)uint64_t v29 = *(void *)v30;
  swift_retain();
  swift_release();
  *((void *)v29 + 1) = *((void *)v30 + 1);
  swift_retain();
  swift_release();
  uint64_t v72 = *(int *)(v32 + 32);
  uint64_t v73 = &v29[v72];
  long long v74 = &v30[v72];
  uint64_t v75 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 24))(v73, v74, v75);
LABEL_13:
  uint64_t v43 = v116;
  uint64_t v44 = *(int *)(v116 + 24);
  uint64_t v45 = &v7[v44];
  uint64_t v46 = &v8[v44];
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v48 = v47;
  uint64_t v49 = *(void *)(v47 - 8);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48);
  int v51 = v50(v45, 1, v47);
  int v52 = v50(v46, 1, v48);
  if (v51)
  {
    if (!v52)
    {
      uint64_t v111 = v7;
      char v113 = v5;
      *(void *)uint64_t v45 = *(void *)v46;
      *((void *)v45 + 1) = *((void *)v46 + 1);
      uint64_t v53 = *(int *)(v48 + 32);
      __dsta = &v45[v53];
      uint64_t v54 = &v46[v53];
      uint64_t v55 = type metadata accessor for TextSelection(0);
      uint64_t v56 = *(void *)(v55 - 8);
      uint64_t v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
      swift_retain();
      swift_retain();
      if (v57(v54, 1, v55))
      {
        type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
        char v59 = __dsta;
        memcpy(__dsta, v54, *(void *)(*(void *)(v58 - 8) + 64));
        uint64_t v7 = v111;
        uint64_t v5 = v113;
        uint64_t v43 = v116;
      }
      else
      {
        char v59 = __dsta;
        uint64_t v88 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v89 - 8) + 16))(__dsta, v54, v89);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dsta, v54, *(void *)(*(void *)(v88 - 8) + 64));
        }
        uint64_t v43 = v116;
        __dsta[*(int *)(v55 + 20)] = v54[*(int *)(v55 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(__dsta, 0, 1, v55);
        uint64_t v7 = v111;
        uint64_t v5 = v113;
      }
      type metadata accessor for (TextSelection?, VersionSeed)();
      *(_DWORD *)&v59[*(int *)(v91 + 48)] = *(_DWORD *)&v54[*(int *)(v91 + 48)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v45, 0, 1, v48);
      goto LABEL_34;
    }
LABEL_19:
    type metadata accessor for Binding<SearchFieldState>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
    memcpy(v45, v46, *(void *)(*(void *)(v60 - 8) + 64));
LABEL_34:
    uint64_t v84 = v117;
    goto LABEL_35;
  }
  if (v52)
  {
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
    goto LABEL_19;
  }
  *(void *)uint64_t v45 = *(void *)v46;
  swift_retain();
  swift_release();
  *((void *)v45 + 1) = *((void *)v46 + 1);
  swift_retain();
  swift_release();
  uint64_t v76 = *(int *)(v48 + 32);
  uint64_t v77 = &v45[v76];
  int v78 = &v46[v76];
  uint64_t v79 = type metadata accessor for TextSelection(0);
  uint64_t v80 = *(void *)(v79 - 8);
  uint64_t v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 48);
  int v82 = v81(v77, 1, v79);
  int v83 = v81(v78, 1, v79);
  uint64_t v84 = v117;
  if (v82)
  {
    if (!v83)
    {
      uint64_t v85 = v7;
      uint64_t v86 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 16))(v77, v78, v87);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v77, v78, *(void *)(*(void *)(v86 - 8) + 64));
      }
      v77[*(int *)(v79 + 20)] = v78[*(int *)(v79 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
      uint64_t v7 = v85;
      goto LABEL_54;
    }
  }
  else
  {
    if (!v83)
    {
      uint64_t v43 = v116;
      if (v5 != __dst)
      {
        char v104 = v7;
        outlined destroy of Binding<SearchFieldState>?((uint64_t)v77, type metadata accessor for TextSelection.Indices);
        uint64_t v105 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v106 - 8) + 16))(v77, v78, v106);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v77, v78, *(void *)(*(void *)(v105 - 8) + 64));
        }
        uint64_t v7 = v104;
      }
      v77[*(int *)(v79 + 20)] = v78[*(int *)(v79 + 20)];
      goto LABEL_55;
    }
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v77, type metadata accessor for TextSelection);
  }
  type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
  memcpy(v77, v78, *(void *)(*(void *)(v90 - 8) + 64));
LABEL_54:
  uint64_t v43 = v116;
LABEL_55:
  type metadata accessor for (TextSelection?, VersionSeed)();
  *(_DWORD *)&v77[*(int *)(v107 + 48)] = *(_DWORD *)&v78[*(int *)(v107 + 48)];
LABEL_35:
  uint64_t v92 = *(int *)(v43 + 28);
  uint64_t v93 = (uint64_t)&v7[v92];
  uint64_t v94 = (long long *)((char *)v84 + v92);
  uint64_t v95 = *(void *)((char *)v84 + v92 + 8);
  if (!*(void *)(v93 + 8))
  {
    if (!v95)
    {
      long long v102 = *v94;
      *(_OWORD *)(v93 + 9) = *(long long *)((char *)v94 + 9);
      *(_OWORD *)uint64_t v93 = v102;
      return v5;
    }
    *(void *)uint64_t v93 = *(void *)v94;
    *(void *)(v93 + 8) = *((void *)v94 + 1);
    uint64_t v96 = v93 + 16;
    uint64_t v97 = (uint64_t *)(v94 + 1);
    char v98 = *((unsigned char *)v94 + 24);
    swift_retain();
    swift_retain();
    if ((v98 & 1) == 0) {
      goto LABEL_39;
    }
    goto LABEL_42;
  }
  if (!v95)
  {
    outlined destroy of Binding<SearchFieldState>?(v93, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
    long long v100 = *(long long *)((char *)v94 + 9);
    *(_OWORD *)uint64_t v93 = *v94;
    *(_OWORD *)(v93 + 9) = v100;
    return v5;
  }
  *(void *)uint64_t v93 = *(void *)v94;
  swift_retain();
  swift_release();
  *(void *)(v93 + 8) = *((void *)v94 + 1);
  swift_retain();
  swift_release();
  uint64_t v96 = v93 + 16;
  uint64_t v97 = (uint64_t *)(v94 + 1);
  if (*(unsigned char *)(v93 + 24))
  {
    if ((*((unsigned char *)v94 + 24) & 1) == 0)
    {
LABEL_39:
      swift_unknownObjectWeakCopyInit();
      *(unsigned char *)(v93 + 24) = 0;
      return v5;
    }
LABEL_42:
    uint64_t v99 = *v97;
    *(unsigned char *)(v96 + 8) = *((unsigned char *)v97 + 8);
    *(void *)uint64_t v96 = v99;
    return v5;
  }
  if (*((unsigned char *)v94 + 24))
  {
    outlined destroy of PlatformSearchPopoverAnchor(v93 + 16);
    char v101 = *((unsigned char *)v94 + 24);
    *(void *)uint64_t v96 = *v97;
    *(unsigned char *)(v93 + 24) = v101;
  }
  else
  {
    swift_unknownObjectWeakCopyAssign();
  }
  return v5;
}

void *initializeWithTake for TransformSearchEnvironmentStorage(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = (void *)((char *)a1 + v4);
  uint64_t v6 = (void *)((char *)a2 + v4);
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7))
  {
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v11;
    uint64_t v12 = *(int *)(v8 + 32);
    int v13 = (char *)v5 + v12;
    int v14 = (char *)v6 + v12;
    *int v13 = *((unsigned char *)v6 + v12);
    v13[1] = *((unsigned char *)v6 + v12 + 1);
    *((_WORD *)v13 + 1) = *(_WORD *)((char *)v6 + v12 + 2);
    v13[8] = *((unsigned char *)v6 + v12 + 8);
    *((_DWORD *)v13 + 1) = *(_DWORD *)((char *)v6 + v12 + 4);
    uint64_t v15 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v16 = v15[9];
    uint64_t v17 = &v13[v16];
    uint64_t v18 = &v14[v16];
    uint64_t v19 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
    v13[v15[10]] = v14[v15[10]];
    uint64_t v20 = v15[11];
    uint64_t v21 = &v13[v20];
    uint64_t v22 = &v14[v20];
    v21[4] = v22[4];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  }
  uint64_t v23 = (int *)type metadata accessor for SearchEnvironmentProperties(0);
  uint64_t v24 = v23[5];
  uint64_t v25 = (void *)((char *)v5 + v24);
  char v26 = (void *)((char *)v6 + v24);
  type metadata accessor for Binding<AttributedString>();
  uint64_t v28 = v27;
  uint64_t v29 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v29 + 48))(v26, 1, v27))
  {
    type metadata accessor for Binding<AttributedString>?(0);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    uint64_t v31 = v26[1];
    void *v25 = *v26;
    v25[1] = v31;
    uint64_t v32 = *(int *)(v28 + 32);
    uint64_t v33 = (char *)v25 + v32;
    uint64_t v34 = (char *)v26 + v32;
    uint64_t v35 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v25, 0, 1, v28);
  }
  uint64_t v36 = v23[6];
  uint64_t v37 = (void *)((char *)v5 + v36);
  uint64_t v38 = (void *)((char *)v6 + v36);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v40 = v39;
  uint64_t v41 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v41 + 48))(v38, 1, v39))
  {
    type metadata accessor for Binding<SearchFieldState>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
    memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    char v59 = v3;
    uint64_t v43 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v43;
    uint64_t v44 = *(int *)(v40 + 32);
    uint64_t v45 = (char *)v37 + v44;
    uint64_t v46 = (char *)v38 + v44;
    uint64_t v47 = type metadata accessor for TextSelection(0);
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      uint64_t v58 = v48;
      uint64_t v50 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 32))(v45, v46, v51);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
      }
      v45[*(int *)(v47 + 20)] = v46[*(int *)(v47 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v45, 0, 1, v47);
    }
    uint64_t v3 = v59;
    type metadata accessor for (TextSelection?, VersionSeed)();
    *(_DWORD *)&v45[*(int *)(v52 + 48)] = *(_DWORD *)&v46[*(int *)(v52 + 48)];
    (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v37, 0, 1, v40);
  }
  uint64_t v53 = v23[7];
  uint64_t v54 = (char *)v5 + v53;
  uint64_t v55 = (char *)v6 + v53;
  uint64_t v56 = *((void *)v55 + 1);
  if (v56)
  {
    *(void *)uint64_t v54 = *(void *)v55;
    *((void *)v54 + 1) = v56;
    if (v55[24])
    {
      *((void *)v54 + 2) = *((void *)v55 + 2);
      v54[24] = v55[24];
    }
    else
    {
      swift_unknownObjectWeakTakeInit();
      v54[24] = 0;
    }
  }
  else
  {
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
    *(_OWORD *)(v54 + 9) = *(_OWORD *)(v55 + 9);
  }
  return v3;
}

void *assignWithTake for TransformSearchEnvironmentStorage(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = *(int *)(a3 + 44);
  char v98 = a1;
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v7, 1, v9);
  int v14 = v12(v8, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      uint64_t v15 = v8[1];
      void *v7 = *v8;
      v7[1] = v15;
      uint64_t v16 = *(int *)(v10 + 32);
      uint64_t v17 = (char *)v7 + v16;
      uint64_t v18 = (char *)v8 + v16;
      *uint64_t v17 = *((unsigned char *)v8 + v16);
      v17[1] = *((unsigned char *)v8 + v16 + 1);
      *((_WORD *)v17 + 1) = *(_WORD *)((char *)v8 + v16 + 2);
      v17[8] = *((unsigned char *)v8 + v16 + 8);
      *((_DWORD *)v17 + 1) = *(_DWORD *)((char *)v8 + v16 + 4);
      uint64_t v19 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v20 = v19[9];
      uint64_t v21 = &v17[v20];
      uint64_t v22 = &v18[v20];
      uint64_t v23 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
      v17[v19[10]] = v18[v19[10]];
      uint64_t v24 = v19[11];
      uint64_t v25 = &v17[v24];
      char v26 = &v18[v24];
      v25[4] = v26[4];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
LABEL_6:
    type metadata accessor for Binding<SearchFieldState>?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  void *v7 = *v8;
  swift_release();
  v7[1] = v8[1];
  swift_release();
  uint64_t v61 = *(int *)(v10 + 32);
  uint64_t v62 = (char *)v7 + v61;
  char v63 = (char *)v8 + v61;
  char *v62 = *((unsigned char *)v8 + v61);
  v62[1] = *((unsigned char *)v8 + v61 + 1);
  *((_WORD *)v62 + 1) = *(_WORD *)((char *)v8 + v61 + 2);
  *((_DWORD *)v62 + 1) = *(_DWORD *)((char *)v8 + v61 + 4);
  v62[8] = *((unsigned char *)v8 + v61 + 8);
  uint64_t v64 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v65 = v64[9];
  uint64_t v66 = &v62[v65];
  uint64_t v67 = &v63[v65];
  uint64_t v68 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 40))(v66, v67, v68);
  v62[v64[10]] = v63[v64[10]];
  uint64_t v69 = v64[11];
  uint64_t v70 = &v62[v69];
  uint64_t v71 = &v63[v69];
  *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
  v70[4] = v71[4];
LABEL_7:
  uint64_t v99 = (int *)type metadata accessor for SearchEnvironmentProperties(0);
  uint64_t v28 = v99[5];
  uint64_t v29 = (void *)((char *)v7 + v28);
  uint64_t v30 = (void *)((char *)v8 + v28);
  type metadata accessor for Binding<AttributedString>();
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v31 - 8);
  uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v29, 1, v31);
  int v36 = v34(v30, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      uint64_t v37 = v30[1];
      void *v29 = *v30;
      v29[1] = v37;
      uint64_t v38 = *(int *)(v32 + 32);
      uint64_t v39 = (char *)v29 + v38;
      uint64_t v40 = (char *)v30 + v38;
      uint64_t v41 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v36)
  {
    outlined destroy of Binding<SearchFieldState>?((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
LABEL_12:
    type metadata accessor for Binding<AttributedString>?(0);
    memcpy(v29, v30, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_13;
  }
  void *v29 = *v30;
  swift_release();
  v29[1] = v30[1];
  swift_release();
  uint64_t v72 = *(int *)(v32 + 32);
  uint64_t v73 = (char *)v29 + v72;
  long long v74 = (char *)v30 + v72;
  uint64_t v75 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v75 - 8) + 40))(v73, v74, v75);
LABEL_13:
  uint64_t v43 = v99[6];
  uint64_t v44 = (void *)((char *)v7 + v43);
  uint64_t v45 = (void *)((char *)v8 + v43);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v47 = v46;
  uint64_t v48 = *(void *)(v46 - 8);
  uint64_t v49 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v48 + 48);
  int v50 = v49(v44, 1, v46);
  int v51 = v49(v45, 1, v47);
  if (!v50)
  {
    if (v51)
    {
      outlined destroy of Binding<SearchFieldState>?((uint64_t)v44, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
      goto LABEL_19;
    }
    *uint64_t v44 = *v45;
    swift_release();
    v44[1] = v45[1];
    swift_release();
    uint64_t v76 = *(int *)(v47 + 32);
    uint64_t v77 = (char *)v44 + v76;
    int v78 = (char *)v45 + v76;
    uint64_t v79 = type metadata accessor for TextSelection(0);
    uint64_t v80 = *(void *)(v79 - 8);
    uint64_t v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 48);
    int v82 = v81(v77, 1, v79);
    int v83 = v81(v78, 1, v79);
    if (v82)
    {
      if (!v83)
      {
        uint64_t v84 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 32))(v77, v78, v85);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v77, v78, *(void *)(*(void *)(v84 - 8) + 64));
        }
        uint64_t v60 = v98;
        v77[*(int *)(v79 + 20)] = v78[*(int *)(v79 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
        goto LABEL_41;
      }
    }
    else
    {
      if (!v83)
      {
        uint64_t v60 = v98;
        if (v98 != a2)
        {
          outlined destroy of Binding<SearchFieldState>?((uint64_t)v77, type metadata accessor for TextSelection.Indices);
          uint64_t v90 = type metadata accessor for TextSelection.Indices(0);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v91 - 8) + 32))(v77, v78, v91);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(v77, v78, *(void *)(*(void *)(v90 - 8) + 64));
          }
        }
        v77[*(int *)(v79 + 20)] = v78[*(int *)(v79 + 20)];
        goto LABEL_41;
      }
      outlined destroy of Binding<SearchFieldState>?((uint64_t)v77, type metadata accessor for TextSelection);
    }
    type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
    memcpy(v77, v78, *(void *)(*(void *)(v88 - 8) + 64));
    uint64_t v60 = v98;
LABEL_41:
    type metadata accessor for (TextSelection?, VersionSeed)();
    *(_DWORD *)&v77[*(int *)(v92 + 48)] = *(_DWORD *)&v78[*(int *)(v92 + 48)];
    goto LABEL_42;
  }
  if (v51)
  {
LABEL_19:
    type metadata accessor for Binding<SearchFieldState>?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<(TextSelection?, VersionSeed)>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<(TextSelection?, VersionSeed)>, MEMORY[0x1E4FBB718]);
    memcpy(v44, v45, *(void *)(*(void *)(v59 - 8) + 64));
    uint64_t v60 = v98;
    goto LABEL_42;
  }
  uint64_t v52 = v45[1];
  *uint64_t v44 = *v45;
  v44[1] = v52;
  uint64_t v53 = *(int *)(v47 + 32);
  uint64_t v54 = (char *)v44 + v53;
  uint64_t v55 = (char *)v45 + v53;
  uint64_t v56 = type metadata accessor for TextSelection(0);
  uint64_t v57 = *(void *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    type metadata accessor for Binding<SearchFieldState>?(0, &lazy cache variable for type metadata for TextSelection?, type metadata accessor for TextSelection, MEMORY[0x1E4FBB718]);
    memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
  }
  else
  {
    uint64_t v86 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 32))(v54, v55, v87);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v54, v55, *(void *)(*(void *)(v86 - 8) + 64));
    }
    v54[*(int *)(v56 + 20)] = v55[*(int *)(v56 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  uint64_t v60 = v98;
  type metadata accessor for (TextSelection?, VersionSeed)();
  *(_DWORD *)&v54[*(int *)(v89 + 48)] = *(_DWORD *)&v55[*(int *)(v89 + 48)];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v44, 0, 1, v47);
LABEL_42:
  uint64_t v93 = v99[7];
  uint64_t v94 = (uint64_t)v7 + v93;
  uint64_t v95 = (char *)v8 + v93;
  uint64_t v96 = *(void *)((char *)v8 + v93 + 8);
  if (*(void *)(v94 + 8))
  {
    if (v96)
    {
      *(void *)uint64_t v94 = *(void *)v95;
      swift_release();
      *(void *)(v94 + 8) = *((void *)v95 + 1);
      swift_release();
      if (*(unsigned char *)(v94 + 24))
      {
        if ((v95[24] & 1) == 0) {
          goto LABEL_52;
        }
      }
      else
      {
        if ((v95[24] & 1) == 0)
        {
          swift_unknownObjectWeakTakeAssign();
          return v60;
        }
        outlined destroy of PlatformSearchPopoverAnchor(v94 + 16);
      }
      *(void *)(v94 + 16) = *((void *)v95 + 2);
      *(unsigned char *)(v94 + 24) = v95[24];
      return v60;
    }
    outlined destroy of Binding<SearchFieldState>?(v94, (uint64_t (*)(void))type metadata accessor for Binding<PlatformSearchPopoverAnchor?>);
    goto LABEL_51;
  }
  if (!v96)
  {
LABEL_51:
    *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
    *(_OWORD *)(v94 + 9) = *(_OWORD *)(v95 + 9);
    return v60;
  }
  *(void *)uint64_t v94 = *(void *)v95;
  *(void *)(v94 + 8) = v96;
  if ((v95[24] & 1) == 0)
  {
LABEL_52:
    swift_unknownObjectWeakTakeInit();
    *(unsigned char *)(v94 + 24) = 0;
    return v60;
  }
  *(void *)(v94 + 16) = *((void *)v95 + 2);
  *(unsigned char *)(v94 + 24) = v95[24];
  return v60;
}

uint64_t getEnumTagSinglePayload for TransformSearchEnvironmentStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187E0B948);
}

uint64_t sub_187E0B948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for SearchEnvironmentProperties(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 44);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for TransformSearchEnvironmentStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187E0BA18);
}

uint64_t sub_187E0BA18(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for SearchEnvironmentProperties(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchFieldPlacementKey()
{
  return &type metadata for EnvironmentValues.SearchFieldPlacementKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.__Key_searchStorage()
{
  return &type metadata for EnvironmentValues.__Key_searchStorage;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchScopeActivationKey()
{
  return &type metadata for EnvironmentValues.SearchScopeActivationKey;
}

uint64_t base witness table accessor for _AttributeBody in TransformSearchEnvironmentStorage<A>()
{
  return swift_getWitnessTable();
}

void type metadata accessor for SearchEnvironmentProperties?(uint64_t a1)
{
}

void type metadata accessor for Binding<SearchFieldState>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t partial apply for closure #1 in TransformSearchEnvironmentStorage.updateValue()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TransformSearchEnvironmentStorage.updateValue()(*(void *)(v1 + 16), a1);
}

uint64_t outlined destroy of Binding<SearchFieldState>?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_187E0BC20()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = (int *)type metadata accessor for SearchEnvironmentProperties(0);
  unint64_t v3 = (*(unsigned __int8 *)(*((void *)v2 - 1) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v25 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v4 = *(void *)(v1 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  swift_release();
  uint64_t v6 = v0 + v3;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v8 = v7;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v0 + v3, 1, v7))
  {
    swift_release();
    swift_release();
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = v6 + v9 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
    uint64_t v11 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  }
  uint64_t v12 = v6 + v2[5];
  type metadata accessor for Binding<AttributedString>();
  uint64_t v14 = v13;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    swift_release();
    swift_release();
    uint64_t v15 = v12 + *(int *)(v14 + 32);
    uint64_t v16 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  }
  uint64_t v17 = v6 + v2[6];
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v19 = v18;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
  {
    swift_release();
    swift_release();
    uint64_t v20 = v17 + *(int *)(v19 + 32);
    uint64_t v21 = type metadata accessor for TextSelection(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21))
    {
      type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v20, v22);
      }
    }
  }
  uint64_t v23 = v6 + v2[7];
  if (*(void *)(v23 + 8))
  {
    swift_release();
    swift_release();
    if ((*(unsigned char *)(v23 + 24) & 1) == 0) {
      swift_unknownObjectWeakDestroy();
    }
  }
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((v3 + v25 + v5) & ~v5), v1);

  return swift_deallocObject();
}

void partial apply for closure #2 in TransformSearchEnvironmentStorage.updateValue()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = *(void *)(type metadata accessor for SearchEnvironmentProperties(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0
     + ((v4 + *(void *)(v3 + 64) + *(unsigned __int8 *)(*(void *)(v1 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));

  closure #2 in TransformSearchEnvironmentStorage.updateValue()(v5, (uint64_t)v0 + v4, v6, v1, v2);
}

uint64_t closure #1 in SearchEnvironmentStorage.transform.setterpartial apply()
{
  return partial apply for closure #1 in SearchEnvironmentStorage.transform.setter();
}

uint64_t closure #1 in SearchEnvironmentStorage.baseProperties.setterpartial apply()
{
  return partial apply for closure #1 in SearchEnvironmentStorage.baseProperties.setter();
}

void _PullDownButton.init(label:content:)()
{
}

void protocol witness for View.body.getter in conformance _PullDownButton<A, B>()
{
}

void _PullDownButton<>.init(_:content:)()
{
}

uint64_t associated type witness table accessor for PubliclyPrimitiveView.InternalBody : View in _PullDownButton<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for _PullDownButton<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in _PullDownButton<A, B>()
{
  return &protocol witness table for _PullDownButton<A, B>;
}

uint64_t type metadata completion function for _PullDownButton()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _PullDownButton(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 7;
  unint64_t v12 = ((v11 + ((v6 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 9;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    unint64_t v19 = (v11 + (((unint64_t)v4 + v10) & v17)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v11 + v18) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v21 = *(void *)v20;
    char v22 = *(unsigned char *)(v20 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v20, v22);
    *(void *)unint64_t v19 = v21;
    *(unsigned char *)(v19 + 8) = v22;
  }
  return v4;
}

uint64_t destroy for _PullDownButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  unint64_t v9 = (*(void *)(v7 + 56) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 8);

  return outlined consume of Environment<Bool?>.Content(v10, v11);
}

uint64_t initializeWithCopy for _PullDownButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)v16;
  LOBYTE(v13) = *(unsigned char *)(v16 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v16, v13);
  *(void *)unint64_t v15 = v17;
  *(unsigned char *)(v15 + 8) = v13;
  return a1;
}

uint64_t assignWithCopy for _PullDownButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)v16;
  LOBYTE(v13) = *(unsigned char *)(v16 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v16, v13);
  uint64_t v18 = *(void *)v15;
  uint64_t v19 = *(unsigned __int8 *)(v15 + 8);
  *(void *)unint64_t v15 = v17;
  *(unsigned char *)(v15 + 8) = v13;
  outlined consume of Environment<Bool?>.Content(v18, v19);
  return a1;
}

uint64_t initializeWithTake for _PullDownButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 32) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  char v17 = *(unsigned char *)(v16 + 8);
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = v17;
  return a1;
}

uint64_t assignWithTake for _PullDownButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 24) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)v16;
  LOBYTE(v16) = *(unsigned char *)(v16 + 8);
  uint64_t v18 = *(void *)v15;
  uint64_t v19 = *(unsigned __int8 *)(v15 + 8);
  *(void *)unint64_t v15 = v17;
  *(unsigned char *)(v15 + 8) = v16;
  outlined consume of Environment<Bool?>.Content(v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PullDownButton(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10 <= 0xFE) {
    unsigned int v10 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  uint64_t v12 = *(void *)(v7 + 64) + 7;
  if (v10 < a2)
  {
    unint64_t v13 = ((v12 + (v11 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v14 = (a2 - v10 + 255) >> (8 * v13);
    if (v13 < 4) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = a1[v13];
        if (!a1[v13]) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v17 = *(unsigned __int16 *)&a1[v13];
        if (*(_WORD *)&a1[v13]) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187E0CAE0);
      case 4:
        int v17 = *(_DWORD *)&a1[v13];
        if (!v17) {
          break;
        }
LABEL_24:
        int v19 = (v17 - 1) << (8 * v13);
        if (v13 >= 4) {
          int v19 = 0;
        }
        if (((v12 + (v11 & ~v9)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v20 = *a1;
        }
        else {
          int v20 = *(_DWORD *)a1;
        }
        return v10 + (v20 | v19) + 1;
      default:
        break;
    }
  }
  if (v6 == v10) {
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v21 = (unint64_t)&a1[v11] & ~v9;
  if (v8 == v10) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v21);
  }
  unsigned int v22 = *(unsigned __int8 *)(((v12 + v21) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v22 > 1) {
    return (v22 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for _PullDownButton(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  if (v13 <= 0xFE) {
    unsigned int v13 = 254;
  }
  uint64_t v14 = v10 + v11;
  uint64_t v15 = (v10 + v11) & ~v11;
  uint64_t v16 = v12 + 7;
  size_t v17 = ((v12 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v18 = 8 * v17;
  if (v13 >= a3)
  {
    int v22 = 0;
    if (v13 >= a2)
    {
LABEL_19:
      switch(v22)
      {
        case 1:
          a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 2:
          *(_WORD *)&a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_52;
        case 4:
          *(_DWORD *)&a1[v17] = 0;
          goto LABEL_35;
        default:
LABEL_35:
          if (a2)
          {
LABEL_36:
            if (v7 == v13)
            {
              uint64_t v25 = *(void (**)(void))(v6 + 56);
              v25();
            }
            else
            {
              unint64_t v26 = (unint64_t)&a1[v14] & ~v11;
              if (v9 == v13)
              {
                uint64_t v27 = *(void (**)(unint64_t))(v8 + 56);
                v27(v26);
              }
              else
              {
                unint64_t v28 = (v16 + v26) & 0xFFFFFFFFFFFFFFF8;
                if (a2 > 0xFE)
                {
                  *(unsigned char *)(v28 + 8) = 0;
                  *(void *)unint64_t v28 = a2 - 255;
                }
                else
                {
                  *(unsigned char *)(v28 + 8) = -(char)a2;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v19 = (a3 - v13 + 255) >> v18;
    if (v17 <= 3) {
      unsigned int v20 = v19 + 1;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    if (v13 >= a2) {
      goto LABEL_19;
    }
  }
  if (v17 < 4) {
    unsigned int v23 = ((~v13 + a2) >> v18) + 1;
  }
  else {
    unsigned int v23 = 1;
  }
  if (v17 >= 4) {
    unsigned int v24 = ~v13 + a2;
  }
  else {
    unsigned int v24 = (~(_BYTE)v13 + a2);
  }
  bzero(a1, v17);
  if (v17 == 1) {
    *a1 = v24;
  }
  else {
    *(_DWORD *)a1 = v24;
  }
  switch(v22)
  {
    case 1:
      a1[v17] = v23;
      break;
    case 2:
      *(_WORD *)&a1[v17] = v23;
      break;
    case 3:
LABEL_52:
      __break(1u);
      JUMPOUT(0x187E0CDBCLL);
    case 4:
      *(_DWORD *)&a1[v17] = v23;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for _PullDownButton()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187E0CDFC()
{
  return MEMORY[0x1E4F417F0];
}

void _PullDownButton<>.init<A>(_:content:)()
{
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(unsigned char *, uint64_t *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v21 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    outlined init with copy of IdentifiedDocumentGroupConfiguration(*(void *)(a1 + 48) + (i << 7), (uint64_t)v19);
    _s10Foundation3URLVSgWOcTm_1(*(void *)(a1 + 56) + 8 * i, (uint64_t)&v20, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, MEMORY[0x1E4F41720]);
    outlined init with take of (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)((uint64_t)v19, (uint64_t)v17);
    if (a2(v17, &v18))
    {
      swift_release();
      return outlined init with take of (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)((uint64_t)v17, a3);
    }
    uint64_t result = outlined destroy of (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)((uint64_t)v17);
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v13 >= v21) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v21) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v5 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v21) {
          goto LABEL_25;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v21) {
            goto LABEL_25;
          }
          unint64_t v14 = *(void *)(v5 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v21)
  {
LABEL_25:
    uint64_t result = swift_release();
    *(void *)(a3 + 128) = 0;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v21) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

Swift::Void __swiftcall DocumentViewController.setupLaunchOptions()()
{
  unint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_launchOptions);
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentBrowserMediator + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3);
  objc_msgSend(v2, sel_setBrowserViewController_, v5);

  char v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
  id v9 = objc_msgSend(v1, sel_launchOptions);
  if (v6)
  {
    id v7 = objc_msgSend(self, sel_createDocumentActionWithIntent_, *MEMORY[0x1E4FB2838]);
    objc_msgSend(v9, sel_setPrimaryAction_, v7);

    unint64_t v8 = v7;
  }
  else
  {
    objc_msgSend(v9, sel_setPrimaryAction_, 0);
    unint64_t v8 = v9;
  }
}

uint64_t DocumentViewController.rootModifier.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_rootModifier;
  swift_beginAccess();
  outlined assign with copy of RootModifier?(a1, v3);
  swift_endAccess();
  outlined init with copy of AccessibilityValueStorage?(v3, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for RootModifier?);
  if (v11 == 1)
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for RootModifier?);
  }
  else
  {
    outlined init with take of RootModifier((uint64_t)v10, (uint64_t)v12);
    uint64_t v4 = MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController);
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      type metadata accessor for DocumentHostingController(0);
      uint64_t v6 = swift_dynamicCastClass();
      if (v6)
      {
        uint64_t v7 = v6;
        outlined init with copy of RootModifier((uint64_t)v12, (uint64_t)v10);
        uint64_t v8 = v7 + direct field offset for DocumentHostingController.rootModifier;
        swift_beginAccess();
        outlined assign with copy of RootModifier((uint64_t)v10, v8);
        swift_endAccess();
        DocumentHostingController.scenesDidChange(phaseChanged:)(1);
        outlined destroy of RootModifier((uint64_t)v10);
      }
    }
    outlined destroy of RootModifier((uint64_t)v12);
  }
  return outlined destroy of AccessibilityValueStorage?(a1, (unint64_t *)&lazy cache variable for type metadata for RootModifier?);
}

Swift::OpaquePointer_optional __swiftcall DocumentViewController.presentDocuments(at:)(Swift::OpaquePointer at)
{
  _s10Foundation3URLVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v18 - v4;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  int64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*((void *)at._rawValue + 2))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v7 + 56))(v5, 1, 1, v6, v8);
    goto LABEL_6;
  }
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t, double))(v7 + 16);
  v12(v5, (char *)at._rawValue + v11, v6, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_6:
    _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
LABEL_7:
    uint64_t v15 = 0;
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentBrowserMediator + 8);
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 72))(v10, ObjectType, v13) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_7;
  }
  _s10Foundation3URLVSgMaTm_6(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBBE00]);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_18834BB80;
  ((void (*)(unint64_t, char *, uint64_t))v12)(v15 + v11, v10, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
LABEL_8:
  size_t v17 = (void *)v15;
  result.value._rawuint64_t Value = v17;
  result.is_nil = v16;
  return result;
}

void __swiftcall DocumentViewController.makeDocumentHostingController()(UIViewController *__return_ptr retstr)
{
  _s10Foundation3URLVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v20[-v3];
  type metadata accessor for IdentifiedDocumentGroupDocumentCreation();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
    id v5 = objc_msgSend(v1, sel_document);
    if (v5)
    {
      uint64_t v6 = v5;
      type metadata accessor for PlatformDocument();
      uint64_t v7 = swift_dynamicCastClass();
      if (v7)
      {
        double v8 = (void *)v7;
        uint64_t v9 = swift_beginAccess();
        MEMORY[0x1F4188790](v9);
        *(void *)&v20[-16] = v8;
        uint64_t v10 = swift_bridgeObjectRetain();
        specialized Sequence.first(where:)(v10, (uint64_t (*)(unsigned char *, uint64_t *))partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.configuration(for:), (uint64_t)&v21);
        swift_bridgeObjectRelease();
        if (*((void *)&v21 + 1))
        {
          long long v33 = v25;
          long long v34 = v26;
          v35[0] = v27[0];
          *(_OWORD *)((char *)v35 + 9) = *(_OWORD *)((char *)v27 + 9);
          long long v29 = v21;
          long long v30 = v22;
          long long v31 = v23;
          long long v32 = v24;
          _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1((uint64_t)&v28, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, MEMORY[0x1E4F41720]);
          if (*((void *)&v29 + 1))
          {
            long long v40 = v33;
            long long v41 = v34;
            v42[0] = v35[0];
            *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)v35 + 9);
            long long v36 = v29;
            long long v37 = v30;
            long long v38 = v31;
            long long v39 = v32;
            DocumentViewController.makeDocumentHostingController(_:_:)(v8, (uint64_t)&v36);

            swift_unknownObjectRelease();
            outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v36);
            return;
          }
        }
        else
        {
          _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1((uint64_t)&v21, &lazy cache variable for type metadata for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>), MEMORY[0x1E4FBB718]);
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v33 = 0u;
          long long v34 = 0u;
          memset(v35, 0, 25);
        }

        outlined destroy of AccessibilityValueStorage?((uint64_t)&v29, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
      }
      else
      {
      }
    }
    IdentifiedDocumentGroupDocumentCreation.defaultConfiguration.getter((uint64_t)&v36);
    if (*((void *)&v36 + 1))
    {
      long long v25 = v40;
      long long v26 = v41;
      v27[0] = v42[0];
      *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)v42 + 9);
      long long v21 = v36;
      long long v22 = v37;
      long long v23 = v38;
      long long v24 = v39;
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = 0;
      uint64_t v13 = type metadata accessor for URL();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v4, 1, 1, v13);
      uint64_t v14 = swift_allocObject();
      swift_unknownObjectWeakInit();
      outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)&v21, (uint64_t)&v36);
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v12;
      *(void *)(v15 + 24) = v14;
      long long v16 = v41;
      *(_OWORD *)(v15 + 96) = v40;
      *(_OWORD *)(v15 + 112) = v16;
      *(_OWORD *)(v15 + 128) = v42[0];
      *(_OWORD *)(v15 + 137) = *(_OWORD *)((char *)v42 + 9);
      long long v17 = v37;
      *(_OWORD *)(v15 + 32) = v36;
      *(_OWORD *)(v15 + 48) = v17;
      long long v18 = v39;
      *(_OWORD *)(v15 + 64) = v38;
      *(_OWORD *)(v15 + 80) = v18;
      swift_retain();
      swift_retain();
      specialized IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)((uint64_t)&v21, (uint64_t)v4, 0, 0, (uint64_t)partial apply for closure #1 in DocumentViewController.makeDocumentHostingController(), v15);
      swift_release();
      _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v21);
      swift_release();
      swift_beginAccess();
      unsigned int v19 = *(void **)(v12 + 16);
      if (v19)
      {
        v19;
        swift_release();
        swift_unknownObjectRelease();
        return;
      }
      swift_release();
    }
    else
    {
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    }
    objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EC0]), sel_initWithNibName_bundle_, 0, 0);
    swift_unknownObjectRelease();
  }
  else
  {
    id v11 = objc_allocWithZone(MEMORY[0x1E4FB1EC0]);
    objc_msgSend(v11, sel_initWithNibName_bundle_, 0, 0);
  }
}

uint64_t DocumentViewController.updateInheritedEnvironment(with:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController);
  if (v4
    && (v8[0] = v4,
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController), type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for InheritedEnvironmentSettable), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v5 = *((void *)&v10 + 1);
    if (*((void *)&v10 + 1))
    {
      uint64_t v6 = v11;
      __swift_project_boxed_opaque_existential_1(&v9, *((uint64_t *)&v10 + 1));
      v8[0] = v2;
      v8[1] = v3;
      (*(void (**)(void *, uint64_t, uint64_t))(v6 + 8))(v8, v5, v6);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
    }
  }
  else
  {
    uint64_t v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
  }
  return outlined destroy of NewDocumentProvider?((uint64_t)&v9, &lazy cache variable for type metadata for InheritedEnvironmentSettable?, (uint64_t)&lazy cache variable for type metadata for InheritedEnvironmentSettable, (uint64_t)&protocol descriptor for InheritedEnvironmentSettable, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
}

char *DocumentViewController.makeDocumentHostingController(_:_:)(void *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)&v2[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_rootModifier];
  swift_beginAccess();
  outlined init with copy of AccessibilityValueStorage?(v5, (uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for RootModifier?);
  if (v23 == 1)
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for RootModifier?);
    return (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EC0]), sel_initWithNibName_bundle_, 0, 0);
  }
  else
  {
    outlined init with take of RootModifier((uint64_t)v22, (uint64_t)v24);
    specialized NavigationItemDescription.init(from:)(objc_msgSend(v2, sel_navigationItem), &v25);
    outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v22);
    outlined init with copy of RootModifier((uint64_t)v24, (uint64_t)v21);
    uint64_t v7 = (uint64_t *)&v2[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription];
    unint64_t v8 = *(void *)&v2[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription + 8];
    if (v8)
    {
      uint64_t v9 = *v7;
      outlined copy of NavigationListState?(*v7, *(void *)&v2[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription + 8]);
      uint64_t v10 = v25;
      unint64_t v11 = v26;
      uint64_t v12 = HIBYTE(v26) & 0xF;
      if ((v26 & 0x2000000000000000) == 0) {
        uint64_t v12 = v25 & 0xFFFFFFFFFFFFLL;
      }
      if (v12)
      {
        swift_bridgeObjectRetain();
        uint64_t v9 = v10;
        unint64_t v13 = v11;
      }
      else
      {
        swift_bridgeObjectRetain();
        unint64_t v13 = v8;
      }
      uint64_t v15 = v27;
      long long v18 = v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v14 = v18;
    }
    else
    {
      long long v14 = v28;
      unint64_t v13 = v26;
      uint64_t v15 = v27;
      uint64_t v9 = v25;
    }
    v29[0] = v9;
    v29[1] = v13;
    v29[2] = v15;
    long long v30 = v14;
    v19[0] = 0;
    v19[1] = DocumentViewController.presentationModeLocation.getter();
    char v20 = 1;
    id v16 = objc_allocWithZone((Class)type metadata accessor for DocumentHostingController(0));
    uint64_t v6 = DocumentHostingController.init(document:configuration:rootModifier:navigationItemDescription:presentationMode:)(a1, (uint64_t)v22, (uint64_t)v21, v29, v19);
    outlined destroy of RootModifier((uint64_t)v24);
  }
  return v6;
}

uint64_t DocumentViewController.presentationModeLocation.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI22DocumentViewController____lazy_storage___presentationModeLocation;
  if (*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController____lazy_storage___presentationModeLocation))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController____lazy_storage___presentationModeLocation);
  }
  else
  {
    uint64_t v3 = v0;
    swift_unknownObjectWeakInit();
    type metadata accessor for LocationBox<DocumentPresentationModeLocation>();
    swift_allocObject();
    uint64_t v2 = LocationBox.init(_:)();
    *(void *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(void *a1)
{
  _s10Foundation3URLVSgMaTm_6(0, &lazy cache variable for type metadata for TaskPriority?, MEMORY[0x1E4FBCFE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v12 - v3;
  uint64_t v5 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for MainActor();
  swift_retain();
  id v7 = a1;
  uint64_t v8 = static MainActor.shared.getter();
  uint64_t v9 = (void *)swift_allocObject();
  uint64_t v10 = MEMORY[0x1E4FBCFD8];
  v9[2] = v8;
  v9[3] = v10;
  v9[4] = v6;
  v9[5] = v7;
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCytSg_Tgm5((uint64_t)v4, (uint64_t)async function pointer to partial apply for closure #1 in closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:), (uint64_t)v9);
  return swift_release();
}

uint64_t closure #1 in closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  type metadata accessor for MainActor();
  v5[8] = static MainActor.shared.getter();
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:), v7, v6);
}

uint64_t closure #1 in closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_release();
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v1 + 16);
  uint64_t v3 = v2;
  if (v2)
  {
    objc_msgSend(v2, sel_setDocument_, *(void *)(v0 + 56));
  }
  **(unsigned char **)(v0 + 40) = v3 == 0;
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void DocumentViewController.document.setter(void *a1)
{
  _s10Foundation3URLVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v13 - v4;
  uint64_t v6 = (objc_class *)type metadata accessor for DocumentViewController();
  v14.receiver = v1;
  v14.super_class = v6;
  id v7 = objc_msgSendSuper2(&v14, sel_document);
  v13.receiver = v1;
  v13.super_class = v6;
  objc_msgSendSuper2(&v13, sel_setDocument_, a1);
  id v8 = objc_msgSend(v1, sel_document);

  if (!v8)
  {
    uint64_t v9 = *(void (**)(char *))&v1[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_onDocumentClose];
    if (v9)
    {
      if (v7)
      {
        swift_retain();
        id v10 = objc_msgSend(v7, sel_fileURL);
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v11 = type metadata accessor for URL();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 0, 1, v11);
      }
      else
      {
        uint64_t v12 = type metadata accessor for URL();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v5, 1, 1, v12);
        swift_retain();
      }
      v9(v5);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v9);
      _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    }
  }
}

Swift::Void __swiftcall DocumentViewController.navigationItemDidUpdate()()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController];
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController]);

  if (!v2) {
    return;
  }
  long long v41 = v1;
  specialized NavigationItemDescription.init(from:)(objc_msgSend(v0, sel_navigationItem), &v46);
  unint64_t v3 = v47;
  uint64_t v5 = v48;
  uint64_t v4 = v49;
  uint64_t v6 = (uint64_t *)&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription];
  uint64_t v8 = *v6;
  uint64_t v7 = v6[1];
  uint64_t v9 = v6[2];
  uint64_t v10 = v6[3];
  uint64_t v11 = v6[4];
  uint64_t v42 = v46;
  id v43 = v50;
  if (v7)
  {
    BOOL v12 = v46 == v8 && v7 == v47;
    if (v12 || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), v14 = 0, (v13 & 1) != 0)) {
      BOOL v14 = specialized static Array<A>.== infix(_:_:)(v5, v9)
    }
         && specialized static Array<A>.== infix(_:_:)(v4, v10)
         && specialized static Array<A>.== infix(_:_:)((uint64_t)v43, v11);
    BOOL v40 = v14;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    outlined copy of NavigationListState?(v8, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v40)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v15 = v46;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of NavigationListState?(v15, v3);
    outlined consume of NavigationListState?(v8, 0);
  }
  uint64_t v17 = *v6;
  uint64_t v16 = v6[1];
  if (v16)
  {
    outlined copy of NavigationListState?(*v6, v6[1]);
    uint64_t v18 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v18 = v42 & 0xFFFFFFFFFFFFLL;
    }
    if (v18)
    {
      swift_bridgeObjectRetain();
      unint64_t v19 = v3;
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v19 = v16;
      uint64_t v42 = v17;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = *v6;
    uint64_t v20 = v6[1];
    unint64_t v3 = v19;
  }
  else
  {
    uint64_t v20 = 0;
  }
  *uint64_t v6 = v42;
  v6[1] = v3;
  v6[2] = v5;
  v6[3] = v4;
  v6[4] = (uint64_t)v43;
  outlined consume of NavigationListState?(v17, v20);
  uint64_t v21 = MEMORY[0x18C119DF0](v41);
  if (v21)
  {
    long long v22 = (void *)v21;
    type metadata accessor for DocumentHostingController(0);
    uint64_t v23 = swift_dynamicCastClass();
    if (v23)
    {
      uint64_t v25 = *v6;
      uint64_t v24 = v6[1];
      uint64_t v26 = v6[2];
      uint64_t v27 = v6[3];
      uint64_t v28 = v6[4];
      long long v29 = (uint64_t *)(v23 + direct field offset for URLDocumentHostingController.navigationItemDescription);
      uint64_t v30 = *(void *)(v23 + direct field offset for URLDocumentHostingController.navigationItemDescription);
      uint64_t v31 = *(void *)(v23 + direct field offset for URLDocumentHostingController.navigationItemDescription + 8);
      uint64_t *v29 = v25;
      v29[1] = v24;
      v29[2] = v26;
      void v29[3] = v27;
      v29[4] = v28;
      outlined copy of NavigationListState?(v25, v24);
      outlined consume of NavigationListState?(v30, v31);
    }
  }
  uint64_t v32 = MEMORY[0x18C119DF0](v41);
  if (v32)
  {
    id v44 = (id)v32;
    swift_getObjectType();
    uint64_t v33 = swift_conformsToProtocol2();
    BOOL v34 = v33 == 0;
    if (v33) {
      uint64_t v35 = v33;
    }
    else {
      uint64_t v35 = 0;
    }
    long long v36 = v44;
    if (v34) {
      id v37 = 0;
    }
    else {
      id v37 = v44;
    }
    if (v37)
    {
      uint64_t ObjectType = swift_getObjectType();
      long long v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 8);
      id v45 = v44;
      v39(1, ObjectType, v35);

      long long v36 = v45;
    }
  }
}

void closure #1 in DocumentViewController.makeDocumentHostingController()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v6 = (void **)(a2 + 16);
    uint64_t v7 = a3 + 16;
    swift_beginAccess();
    uint64_t v8 = MEMORY[0x18C119DF0](v7);
    if (v8)
    {
      uint64_t v9 = (void *)v8;
      id v10 = a1;
      uint64_t v11 = DocumentViewController.makeDocumentHostingController(_:_:)(v10, a4);
    }
    else
    {
      uint64_t v11 = 0;
    }
    swift_beginAccess();
    BOOL v12 = *v6;
    *uint64_t v6 = v11;
  }
}

Swift::Void __swiftcall UIDocumentViewController.embedDocumentHostingController(_:)(UIViewController_optional *a1)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = v1;
  unint64_t v3 = a1;
  id v4 = objc_msgSend(v2, sel_childViewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v19 = v3;
  LOBYTE(v3) = specialized Sequence.contains(where:)(v5, (uint64_t)v19);
  swift_bridgeObjectRelease();

  if ((v3 & 1) == 0)
  {
    objc_msgSend(v2, sel_addChildViewController_, v19);
    id v6 = objc_msgSend(v2, sel_view);
    if (!v6)
    {
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
    uint64_t v7 = v6;
    id v8 = [(UIViewController_optional *)v19 view];
    if (!v8)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v9 = v8;
    objc_msgSend(v7, sel_addSubview_, v8);

    id v10 = [(UIViewController_optional *)v19 view];
    if (!v10)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    uint64_t v11 = v10;
    id v12 = objc_msgSend(v10, sel_superview);
    if (!v12)
    {
LABEL_25:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    char v13 = v12;
    unint64_t v14 = UIView.constrainToView(_:exceptEdges:identifier:)(v12, 0, 0xD00000000000001BLL, (void *)0x800000018833A1D0);

    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      if (v15) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v15)
      {
LABEL_9:
        if (v15 >= 1)
        {
          for (uint64_t i = 0; i != v15; ++i)
          {
            if ((v14 & 0xC000000000000001) != 0) {
              id v17 = (id)MEMORY[0x18C117680](i, v14);
            }
            else {
              id v17 = *(id *)(v14 + 8 * i + 32);
            }
            uint64_t v18 = v17;
            objc_msgSend(v17, sel_setActive_, 1);
          }
          goto LABEL_17;
        }
        __break(1u);
        goto LABEL_22;
      }
    }
LABEL_17:
    swift_bridgeObjectRelease_n();
    [(UIViewController_optional *)v19 didMoveToParentViewController:v2];
  }
}

id DocumentViewController.__deallocating_deinit()
{
  return DocumentViewController.__deallocating_deinit(type metadata accessor for DocumentViewController);
}

uint64_t type metadata accessor for DocumentViewController()
{
  return self;
}

void closure #1 in DocumentViewController.presentationController(_:willPresentWithAdaptiveStyle:transitionCoordinator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x18C119DF0](v2);
  if (v3)
  {
    id v4 = (void *)v3;
    uint64_t v5 = v3 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController;
    id v6 = (void *)MEMORY[0x18C119DF0](v3 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController);
    if (v6)
    {
      uint64_t v7 = v6;
      id v8 = objc_msgSend(v6, sel_view);

      if (!v8)
      {
        __break(1u);
        return;
      }
      objc_msgSend(v8, sel_removeFromSuperview);
    }
    uint64_t v9 = (void *)MEMORY[0x18C119DF0](v5);
    objc_msgSend(v9, sel_removeFromParentViewController);

    swift_unknownObjectWeakAssign();
  }
}

void URLDocumentHostingController.setInheritedEnvironment(env:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)specialized UIHostingController.host.getter();
  *(void *)&long long v5 = v1;
  *((void *)&v5 + 1) = v2;
  swift_retain();
  id v4 = v3;
  swift_retain();
  _UIHostingView.inheritedEnvironment.setter(&v5);
}

void protocol witness for InheritedEnvironmentSettable.setInheritedEnvironment(env:) in conformance URLDocumentHostingController<A>(uint64_t *a1)
{
}

void protocol witness for Location.get() in conformance DocumentPresentationModeLocation(BOOL *a1@<X8>)
{
  uint64_t v3 = (void *)MEMORY[0x18C119DF0](v1);
  id v4 = objc_msgSend(v3, sel_document);

  if (v4) {
  *a1 = v4 != 0;
  }
}

void protocol witness for Location.set(_:transaction:) in conformance DocumentPresentationModeLocation(unsigned char *a1)
{
  if ((*a1 & 1) == 0)
  {
    uint64_t v2 = (void *)MEMORY[0x18C119DF0](v1);
    if (v2)
    {
      id v3 = v2;
      objc_msgSend(v2, sel_setDocument_, 0);
    }
  }
}

uint64_t protocol witness for Location.update() in conformance DocumentPresentationModeLocation(BOOL *a1)
{
  id v3 = (void *)MEMORY[0x18C119DF0](v1);
  id v4 = objc_msgSend(v3, sel_document);

  if (v4) {
  *a1 = v4 != 0;
  }
  return 1;
}

uint64_t static DocumentBrowserMediator.resolveBrowserContextMenu(_:)(unint64_t a1)
{
  void (*v9)(void *__return_ptr, void);
  uint64_t v10;
  uint64_t v11;
  Swift::UInt32 *v12;
  Swift::UInt32 v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  void aBlock[6];
  unsigned char v33[216];
  id v34;
  uint64_t v35;
  id v36;
  void v37[42];
  _OWORD v38[22];
  void (*v39)(void *__return_ptr, _OWORD *);
  void v40[42];
  uint64_t v41;

  uint64_t v2 = MEMORY[0x1E4FBC860];
  long long v41 = MEMORY[0x1E4FBC860];
  _s10Foundation3URLVSgMaTm_6(0, &lazy cache variable for type metadata for ((_:))?, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4FBB718]);
  static Update.ensure<A>(_:)();
  uint64_t v3 = (uint64_t)v39;
  if (!v39) {
    return v41;
  }
  uint64_t v30 = HIDWORD(a1);
  uint64_t v31 = a1;
  *(void *)&v38[0] = v2;
  v39(&v39, v38);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = v40[1];
  long long v29 = v40[1] + 32;
  while (1)
  {
    unint64_t v8 = *(void *)(v7 + 16);
    if (v5 == v8)
    {
      memset(v38, 0, 344);
      goto LABEL_8;
    }
    if (v5 >= v8) {
      break;
    }
    uint64_t result = outlined init with copy of PlatformItem(v29 + 336 * v5, (uint64_t)v37);
    if (__OFADD__(v6, 1)) {
      goto LABEL_22;
    }
    ++v5;
    *(void *)&v38[0] = v6;
    memcpy((char *)v38 + 8, v37, 0x150uLL);
    ++v6;
LABEL_8:
    _s7SwiftUI7WeakBoxVyAA16PlatformDocumentCGWObTm_0((uint64_t)v38, (uint64_t)&v39, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItem)?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: PlatformItem), MEMORY[0x1E4FBB718]);
    if (!v40[0])
    {
      swift_bridgeObjectRelease();
      return v41;
    }
    uint64_t v9 = (void (*)(void *__return_ptr, void))v39;
    memcpy(v38, v40, 0x150uLL);
    long long v36 = 0;
    v37[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    BOOL v34 = v36;
    uint64_t v35 = v37[0];
    id v10 = *(void *)&v38[0];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(*(void *)(v10 + 16));
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      id v12 = (Swift::UInt32 *)(v10 + 32);
      do
      {
        char v13 = *v12++;
        Hasher._combine(_:)(v13);
        --v11;
      }
      while (v11);
    }
    long long v36 = (id)Hasher._finalize()();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0xD000000000000014;
    v15._object = (void *)0x800000018833A160;
    String.append(_:)(v15);
    id v17 = v34;
    uint64_t v16 = v35;
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v38[1] + 8, (uint64_t)v33, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v33, (uint64_t)&v36, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v36) == 1 || !v36)
    {
      uint64_t v21 = 0xE800000000000000;
      unint64_t v19 = 0x656C746974206F6ELL;
    }
    else
    {
      uint64_t v18 = objc_msgSend(v36, sel_string);
      unint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;
    }
    long long v22 = swift_allocObject();
    *(_DWORD *)(v22 + 16) = v31;
    *(_DWORD *)(v22 + 20) = v30;
    *(void *)(v22 + 24) = v9;
    uint64_t v23 = objc_allocWithZone(MEMORY[0x1E4F42970]);
    uint64_t v24 = (void *)MEMORY[0x18C115780](v17, v16);
    swift_bridgeObjectRelease();
    uint64_t v25 = (void *)MEMORY[0x18C115780](v19, v21);
    swift_bridgeObjectRelease();
    aBlock[4] = partial apply for closure #2 in static DocumentBrowserMediator.resolveBrowserContextMenu(_:);
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [URL]) -> ();
    aBlock[3] = &block_descriptor_48;
    uint64_t v26 = _Block_copy(aBlock);
    uint64_t v27 = objc_msgSend(v23, sel_initWithIdentifier_localizedTitle_availability_handler_, v24, v25, 1, v26);

    _Block_release(v26);
    swift_release();
    uint64_t v28 = v27;
    MEMORY[0x18C115B40]();
    if (*(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    uint64_t result = outlined destroy of PlatformItem((uint64_t)v38);
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

uint64_t *closure #1 in static DocumentBrowserMediator.resolveBrowserContextMenu(_:)@<X0>(void *a1@<X8>)
{
  type metadata accessor for (_:)();
  uint64_t result = (uint64_t *)AGGraphGetWeakValue();
  if (result)
  {
    uint64_t v3 = *result;
    uint64_t result = (uint64_t *)swift_retain();
  }
  else
  {
    uint64_t v3 = 0;
  }
  *a1 = v3;
  a1[1] = result;
  return result;
}

uint64_t closure #2 in static DocumentBrowserMediator.resolveBrowserContextMenu(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for PlatformItems?);
  uint64_t result = static Update.ensure<A>(_:)();
  if ((void)v10)
  {
    if ((a3 & 0x8000000000000000) != 0 || *(void *)(v10 + 16) <= a3)
    {
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v9 = 0u;
    }
    else
    {
      outlined init with copy of PlatformItem(v10 + 336 * a3 + 32, (uint64_t)&v9);
    }
    swift_bridgeObjectRelease();
    outlined init with copy of AccessibilityValueStorage?((uint64_t)&v9, (uint64_t)v6, &lazy cache variable for type metadata for PlatformItem?);
    if (v6[0])
    {
      outlined init with copy of AccessibilityValueStorage?((uint64_t)&v7, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?);
      outlined destroy of PlatformItem((uint64_t)v6);
      if (v8[6] == 1)
      {
        outlined destroy of AccessibilityValueStorage?((uint64_t)&v9, &lazy cache variable for type metadata for PlatformItem?);
        return outlined destroy of AccessibilityValueStorage?((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?);
      }
      else
      {
        uint64_t v5 = AGGraphClearUpdate();
        MEMORY[0x1F4188790](v5);
        type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for ()?);
        static Update.ensure<A>(_:)();
        AGGraphSetUpdate();
        outlined destroy of AccessibilityValueStorage?((uint64_t)&v9, &lazy cache variable for type metadata for PlatformItem?);
        return outlined destroy of PlatformItem.SelectionContent((uint64_t)v8);
      }
    }
    else
    {
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v9, &lazy cache variable for type metadata for PlatformItem?);
      return outlined destroy of AccessibilityValueStorage?((uint64_t)v6, &lazy cache variable for type metadata for PlatformItem?);
    }
  }
  return result;
}

void (**closure #1 in closure #2 in static DocumentBrowserMediator.resolveBrowserContextMenu(_:)@<X0>(uint64_t a1@<X1>, void *a2@<X8>))(uint64_t *__return_ptr, uint64_t *)
{
  void (**result)(uint64_t *__return_ptr, uint64_t *);
  void (*v5)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  type metadata accessor for (_:)();
  uint64_t result = (void (**)(uint64_t *__return_ptr, uint64_t *))AGGraphGetWeakValue();
  if (result)
  {
    uint64_t v5 = *result;
    long long v9 = a1;
    swift_retain();
    v5(&v10, &v9);
    uint64_t result = (void (**)(uint64_t *__return_ptr, uint64_t *))swift_release();
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    unint64_t v8 = v12;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
  }
  *a2 = v6;
  a2[1] = v7;
  a2[2] = v8;
  return result;
}

uint64_t IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter(&OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___defaultEditorConfiguration, (void (*)(uint64_t))closure #1 in IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter, a1);
}

uint64_t closure #1 in IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(v5, (uint64_t)v13);
      char v6 = v13[0];
      outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v13, (uint64_t)v12);
      if (v6)
      {
        outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v12);
      }
      else
      {
        uint64_t v7 = *(void *)(v12[12] + 16);
        outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v12);
        if (v7)
        {
          long long v8 = v13[5];
          a2[4] = v13[4];
          a2[5] = v8;
          a2[6] = v14[0];
          *(_OWORD *)((char *)a2 + 105) = *(_OWORD *)((char *)v14 + 9);
          long long v9 = v13[1];
          *a2 = v13[0];
          a2[1] = v9;
          long long v10 = v13[3];
          a2[2] = v13[2];
          a2[3] = v10;
          return swift_bridgeObjectRelease();
        }
      }
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v13);
      v5 += 128;
      if (!--v4) {
        goto LABEL_9;
      }
    }
  }
  swift_bridgeObjectRetain();
LABEL_9:
  *(_OWORD *)((char *)a2 + 105) = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  return swift_bridgeObjectRelease();
}

uint64_t IdentifiedDocumentGroupDocumentCreation.defaultConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  return IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter(&OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___defaultConfiguration, (void (*)(uint64_t))closure #1 in IdentifiedDocumentGroupDocumentCreation.defaultConfiguration.getter, a1);
}

uint64_t IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter@<X0>(void *a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess();
  outlined init with copy of NewDocumentProvider?(v6, (uint64_t)v8, &lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration??, (uint64_t)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (v9 != 1) {
    return outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v8, a3, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
  }
  outlined destroy of NewDocumentProvider?((uint64_t)v8, &lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration??, (uint64_t)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  a2(v3);
  outlined init with copy of AccessibilityValueStorage?(a3, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
  swift_beginAccess();
  outlined assign with take of IdentifiedDocumentGroupConfiguration??((uint64_t)v8, v6);
  return swift_endAccess();
}

uint64_t closure #1 in IdentifiedDocumentGroupDocumentCreation.defaultConfiguration.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(v5, (uint64_t)v13);
      uint64_t v6 = *(void *)(*(void *)&v14[0] + 16);
      outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v13, (uint64_t)v12);
      if (v6) {
        break;
      }
      uint64_t v7 = *(void *)(v12[11] + 16);
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v12);
      if (v7) {
        goto LABEL_10;
      }
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v13);
      v5 += 128;
      if (!--v4) {
        goto LABEL_8;
      }
    }
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v12);
LABEL_10:
    long long v8 = v13[5];
    a2[4] = v13[4];
    a2[5] = v8;
    a2[6] = v14[0];
    *(_OWORD *)((char *)a2 + 105) = *(_OWORD *)((char *)v14 + 9);
    long long v9 = v13[1];
    *a2 = v13[0];
    a2[1] = v9;
    long long v10 = v13[3];
    a2[2] = v13[2];
    a2[3] = v10;
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_8:
    *(_OWORD *)((char *)a2 + 105) = 0u;
    a2[5] = 0u;
    a2[6] = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return swift_bridgeObjectRelease();
}

id IdentifiedDocumentGroupDocumentCreation.documentBrowser.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___documentBrowser;
  uint64_t v2 = *(void **)(v0
                + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___documentBrowser);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___documentBrowser);
  }
  else
  {
    swift_getObjectType();
    id v4 = closure #1 in IdentifiedDocumentGroupDocumentCreation.documentBrowser.getter(v0);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id closure #1 in IdentifiedDocumentGroupDocumentCreation.documentBrowser.getter(uint64_t a1)
{
  IdentifiedDocumentGroupDocumentCreation.supportedContentTypes.getter();
  id v2 = objc_allocWithZone(MEMORY[0x1E4F42978]);
  type metadata accessor for UTType();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = objc_msgSend(v2, sel_initForOpeningContentTypes_, isa);

  IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter((uint64_t)v8);
  BOOL v5 = v8[1] != 0;
  outlined destroy of AccessibilityValueStorage?((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
  objc_msgSend(v4, sel_setAllowsDocumentCreation_, v5);
  objc_msgSend(v4, sel_setDelegate_, a1);
  static DocumentBrowserMediator.resolveBrowserContextMenu(_:)(*(void *)(a1
                                                                         + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentBrowserContextMenu));
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIDocumentBrowserAction);
  Class v6 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_setCustomActions_, v6);

  return v4;
}

uint64_t IdentifiedDocumentGroupDocumentCreation.canCreateNewDocuments.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___canCreateNewDocuments;
  int v2 = *(unsigned __int8 *)(v0
                          + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___canCreateNewDocuments);
  if (v2 == 2)
  {
    char New = closure #1 in IdentifiedDocumentGroupDocumentCreation.canCreateNewDocuments.getter(v0);
    *(unsigned char *)(v0 + v1) = New & 1;
  }
  else
  {
    char New = v2 & 1;
  }
  return New & 1;
}

uint64_t closure #1 in IdentifiedDocumentGroupDocumentCreation.canCreateNewDocuments.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v4 = v1 + 32;
  do
  {
    outlined init with copy of IdentifiedDocumentGroupConfiguration(v4, (uint64_t)v11);
    int v5 = v11[0];
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v11);
    if (v5 != 1) {
      break;
    }
    v4 += 128;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v1 + 16);
  if (!v6) {
    return 0;
  }
  uint64_t result = swift_bridgeObjectRetain();
  for (uint64_t i = 0; ; ++i)
  {
    uint64_t v9 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
      return result;
    }
    outlined init with copy of IdentifiedDocumentGroupConfiguration(v3, (uint64_t)v11);
    uint64_t v10 = *(void *)(v12 + 16);
    uint64_t result = outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v11);
    if (v10) {
      break;
    }
    v3 += 128;
    if (v9 == v6)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return (v5 & 1) == 0;
}

id IdentifiedDocumentGroupDocumentCreation.init(configurations:strategies:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentsMap;
  uint64_t v6 = v2;
  *(void *)&v2[v5] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v7 = &v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___defaultEditorConfiguration];
  *(_OWORD *)(v7 + 105) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *(_OWORD *)uint64_t v7 = xmmword_18834BB90;
  long long v8 = &v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___defaultConfiguration];
  *(_OWORD *)(v8 + 105) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)long long v8 = xmmword_18834BB90;
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___documentBrowser] = 0;
  uint64_t v9 = &v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_newDocumentHandler];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___canCreateNewDocuments] = 2;
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentBrowserContextMenu] = 0;
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___supportedContentTypes] = 0;
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations] = a1;
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_strategies] = a2;

  v11.receiver = v6;
  v11.super_class = (Class)type metadata accessor for IdentifiedDocumentGroupDocumentCreation();
  return objc_msgSendSuper2(&v11, sel_init);
}

uint64_t IdentifiedDocumentGroupDocumentCreation.supportedContentTypes.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___supportedContentTypes;
  if (*(void *)(v0
                 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___supportedContentTypes))
  {
    uint64_t v2 = *(void *)(v0
                   + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation____lazy_storage___supportedContentTypes);
  }
  else
  {
    uint64_t v2 = closure #1 in IdentifiedDocumentGroupDocumentCreation.supportedContentTypes.getter(v0);
    *(void *)(v0 + v1) = v2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t closure #1 in IdentifiedDocumentGroupDocumentCreation.supportedContentTypes.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v68 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  MEMORY[0x1F4188790](v6);
  long long v8 = (char *)&v60 - v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v70 = (char *)&v60 - v10;
  MEMORY[0x1F4188790](v11);
  MEMORY[0x1F4188790](v12);
  long long v16 = (char *)&v60 - v15;
  uint64_t v17 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations);
  uint64_t v61 = *(void *)(v17 + 16);
  if (v61)
  {
    uint64_t v75 = v14;
    long long v74 = v13;
    uint64_t v60 = v17 + 32;
    uint64_t v80 = (uint64_t (**)(char *, uint64_t))(v3 + 8);
    uint64_t v69 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    uint64_t v62 = v17;
    swift_bridgeObjectRetain();
    uint64_t result = v62;
    unint64_t v19 = 0;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    uint64_t v72 = v3;
    uint64_t v73 = v8;
    int v78 = v16;
    uint64_t v79 = v3 + 16;
LABEL_5:
    if (v19 >= *(void *)(result + 16)) {
      goto LABEL_68;
    }
    outlined init with copy of IdentifiedDocumentGroupConfiguration(v60 + (v19 << 7), (uint64_t)v81);
    uint64_t v21 = v83;
    unint64_t v67 = *(void *)(v83 + 16);
    unint64_t v63 = v19;
    if (!v67) {
      goto LABEL_34;
    }
    uint64_t v76 = (uint64_t (*)(char *, uint64_t))((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v66 = (char *)v76 + v83;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v22 = 0;
    uint64_t v65 = v21;
    while (1)
    {
      if (v22 >= *(void *)(v21 + 16))
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        return result;
      }
      uint64_t v77 = *(void *)(v3 + 72);
      long long v23 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
      v23(v16, &v66[v77 * v22], v2);
      uint64_t v24 = *(void *)(v20 + 16);
      if (!v24) {
        goto LABEL_26;
      }
      long long v25 = (char *)v76 + v20;
      long long v26 = v75;
      v23(v75, (char *)v76 + v20, v2);
      unint64_t v27 = lazy protocol witness table accessor for type UTType and conformance UTType();
      swift_bridgeObjectRetain();
      char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v29 = *v80;
      (*v80)(v26, v2);
      if (v28)
      {
        swift_bridgeObjectRelease();
        long long v16 = v78;
        uint64_t v21 = v65;
        uint64_t v3 = v72;
      }
      else
      {
        unint64_t v71 = v27;
        if (v24 == 1)
        {
          swift_bridgeObjectRelease();
          long long v8 = v73;
          long long v16 = v78;
          uint64_t v3 = v72;
LABEL_26:
          v23(v70, v16, v2);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, (void *)v20);
          }
          uint64_t v21 = v65;
          unint64_t v40 = *(void *)(v20 + 16);
          unint64_t v39 = *(void *)(v20 + 24);
          if (v40 >= v39 >> 1) {
            uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1, (void *)v20);
          }
          *(void *)(v20 + 16) = v40 + 1;
          (*v69)((char *)v76 + v20 + v40 * v77, v70, v2);
          uint64_t result = (*v80)(v16, v2);
          goto LABEL_10;
        }
        uint64_t v30 = v75;
        v23(v75, &v25[v77], v2);
        long long v16 = v78;
        char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
        v29(v30, v2);
        uint64_t v3 = v72;
        if (v31)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          if (v24 == 2)
          {
            swift_bridgeObjectRelease();
LABEL_25:
            long long v8 = v73;
            goto LABEL_26;
          }
          uint64_t v64 = (void *)v20;
          uint64_t v32 = (uint64_t)v76 + 2 * v77 + v20;
          uint64_t v33 = 2;
          while (1)
          {
            BOOL v34 = (char *)v29;
            uint64_t v35 = v75;
            uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v23)(v75, v32, v2);
            uint64_t v36 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_66;
            }
            char v37 = dispatch thunk of static Equatable.== infix(_:_:)();
            long long v38 = v35;
            long long v29 = (uint64_t (*)(char *, uint64_t))v34;
            ((void (*)(char *, uint64_t))v34)(v38, v2);
            if (v37) {
              break;
            }
            ++v33;
            long long v16 = v78;
            v32 += v77;
            if (v36 == v24)
            {
              uint64_t v20 = (uint64_t)v64;
              swift_bridgeObjectRelease();
              uint64_t v3 = v72;
              goto LABEL_25;
            }
          }
          uint64_t v20 = (uint64_t)v64;
          swift_bridgeObjectRelease();
          uint64_t v3 = v72;
          long long v16 = v78;
        }
        uint64_t v21 = v65;
      }
      uint64_t result = v29(v16, v2);
      long long v8 = v73;
LABEL_10:
      if (++v22 == v67)
      {
        swift_bridgeObjectRelease();
        unint64_t v19 = v63;
LABEL_34:
        long long v41 = (void *)v82;
        uint64_t v66 = *(char **)(v82 + 16);
        if (v66)
        {
          unint64_t v71 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
          uint64_t v65 = v82 + v71;
          uint64_t result = swift_bridgeObjectRetain();
          unint64_t v42 = 0;
          uint64_t v64 = v41;
          while (1)
          {
            if (v42 >= v41[2]) {
              goto LABEL_65;
            }
            uint64_t v77 = *(void *)(v3 + 72);
            id v43 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
            v43(v8, v65 + v77 * v42, v2);
            uint64_t v44 = *(void *)(v20 + 16);
            if (v44)
            {
              id v45 = (char *)(v20 + v71);
              uint64_t v46 = v74;
              v43(v74, v20 + v71, v2);
              unint64_t v47 = v8;
              unint64_t v48 = lazy protocol witness table accessor for type UTType and conformance UTType();
              swift_bridgeObjectRetain();
              uint64_t v49 = v47;
              LOBYTE(v47) = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v76 = *v80;
              v76(v46, v2);
              if (v47)
              {
                swift_bridgeObjectRelease();
                long long v16 = v78;
                long long v41 = v64;
                long long v8 = v49;
                goto LABEL_37;
              }
              unint64_t v67 = v48;
              if (v44 == 1)
              {
                swift_bridgeObjectRelease();
                long long v16 = v78;
                long long v8 = v49;
              }
              else
              {
                uint64_t v50 = v77;
                int v51 = v74;
                v43(v74, (unint64_t)&v45[v77], v2);
                long long v8 = v49;
                char v52 = dispatch thunk of static Equatable.== infix(_:_:)();
                v76(v51, v2);
                if (v52)
                {
                  swift_bridgeObjectRelease();
                  long long v16 = v78;
                  long long v41 = v64;
LABEL_37:
                  uint64_t v3 = v72;
LABEL_38:
                  uint64_t result = v76(v8, v2);
                  goto LABEL_39;
                }
                if (v44 != 2)
                {
                  uint64_t v55 = v20 + v71 + 2 * v50;
                  uint64_t v56 = 2;
                  while (1)
                  {
                    uint64_t v57 = v74;
                    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))v43)(v74, v55, v2);
                    uint64_t v58 = v56 + 1;
                    if (__OFADD__(v56, 1)) {
                      goto LABEL_67;
                    }
                    char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
                    v76(v57, v2);
                    if (v59)
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v3 = v72;
                      long long v8 = v73;
                      long long v16 = v78;
                      long long v41 = v64;
                      goto LABEL_38;
                    }
                    ++v56;
                    long long v16 = v78;
                    v55 += v77;
                    if (v58 == v44)
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v3 = v72;
                      long long v8 = v73;
                      goto LABEL_50;
                    }
                  }
                }
                swift_bridgeObjectRelease();
                long long v16 = v78;
              }
              uint64_t v3 = v72;
            }
LABEL_50:
            v43(v68, (unint64_t)v8, v2);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v20 + 16) + 1, 1, (void *)v20);
            }
            long long v41 = v64;
            unint64_t v54 = *(void *)(v20 + 16);
            unint64_t v53 = *(void *)(v20 + 24);
            if (v54 >= v53 >> 1) {
              uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1, (void *)v20);
            }
            *(void *)(v20 + 16) = v54 + 1;
            (*v69)((char *)(v20 + v71 + v54 * v77), v68, v2);
            uint64_t result = (*v80)(v8, v2);
LABEL_39:
            if ((char *)++v42 == v66)
            {
              swift_bridgeObjectRelease();
              unint64_t v19 = v63;
              break;
            }
          }
        }
        ++v19;
        outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v81);
        uint64_t result = v62;
        if (v19 == v61)
        {
          swift_bridgeObjectRelease();
          return v20;
        }
        goto LABEL_5;
      }
    }
  }
  return MEMORY[0x1E4FBC860];
}

id IdentifiedDocumentGroupDocumentCreation.__deallocating_deinit()
{
  return DocumentViewController.__deallocating_deinit(type metadata accessor for IdentifiedDocumentGroupDocumentCreation);
}

id DocumentViewController.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for IdentifiedDocumentGroupDocumentCreation()
{
  return self;
}

uint64_t IdentifiedDocumentGroupDocumentCreation.presentDocument(at:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation3URLVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v31 - v6;
  _s10Foundation3URLVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], v4);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = type metadata accessor for UTType();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  long long v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations);
  static DocumentUtils.contentType(of:)(a1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    memset(v43, 0, 25);
LABEL_16:
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v37, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  uint64_t v36 = *(void *)(v15 + 16);
  if (v36)
  {
    uint64_t v33 = a1;
    BOOL v34 = v7;
    uint64_t v16 = v15 + 32;
    swift_bridgeObjectRetain();
    uint64_t v17 = 0;
    uint64_t v35 = v2;
    uint64_t v32 = v15 + 32;
    while (1)
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(v16 + (v17 << 7), (uint64_t)&v44);
      uint64_t v18 = *(void *)(*((void *)&v49 + 1) + 16);
      if (v18) {
        break;
      }
LABEL_5:
      ++v17;
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v44);
      if (v17 == v36)
      {
        swift_bridgeObjectRelease();
        a1 = v33;
        uint64_t v7 = v34;
        goto LABEL_13;
      }
    }
    unint64_t v19 = *((void *)&v49 + 1)
        + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    swift_bridgeObjectRetain_n();
    uint64_t v20 = *(void *)(v12 + 72);
    while ((UTType.conforms(to:)() & 1) == 0)
    {
      v19 += v20;
      if (!--v18)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v16 = v32;
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    long long v41 = v48;
    long long v42 = v49;
    v43[0] = v50[0];
    *(_OWORD *)((char *)v43 + 9) = *(_OWORD *)((char *)v50 + 9);
    long long v37 = v44;
    long long v38 = v45;
    long long v39 = v46;
    long long v40 = v47;
    uint64_t v7 = v34;
    a1 = v33;
  }
  else
  {
LABEL_13:
    long long v42 = 0u;
    memset(v43, 0, 25);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v37 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  if (!*((void *)&v37 + 1)) {
    goto LABEL_16;
  }
  long long v48 = v41;
  long long v49 = v42;
  v50[0] = v43[0];
  *(_OWORD *)((char *)v50 + 9) = *(_OWORD *)((char *)v43 + 9);
  long long v44 = v37;
  long long v45 = v38;
  long long v46 = v39;
  long long v47 = v40;
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v7, a1, v21);
  uint64_t v23 = 1;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v7, 0, 1, v21);
  uint64_t v24 = (uint64_t)v7;
  uint64_t v25 = swift_allocObject();
  swift_unknownObjectWeakInit();
  outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)&v44, (uint64_t)&v37);
  uint64_t v26 = swift_allocObject();
  long long v27 = v42;
  *(_OWORD *)(v26 + 88) = v41;
  *(_OWORD *)(v26 + 104) = v27;
  *(_OWORD *)(v26 + 120) = v43[0];
  *(_OWORD *)(v26 + 129) = *(_OWORD *)((char *)v43 + 9);
  long long v28 = v38;
  *(_OWORD *)(v26 + 24) = v37;
  *(_OWORD *)(v26 + 40) = v28;
  long long v29 = v40;
  *(_OWORD *)(v26 + 56) = v39;
  *(void *)(v26 + 16) = v25;
  *(_OWORD *)(v26 + 72) = v29;
  swift_retain();
  specialized IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)((uint64_t)&v44, v24, 0, 0, (uint64_t)partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.presentDocument(at:), v26);
  swift_release();
  _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1(v24, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v44);
  swift_release();
  return v23;
}

uint64_t IdentifiedDocumentGroupDocumentCreation.findConfiguration(for:)@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentConfigurations);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
    while (1)
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(v3 + 32 + (v5 << 7), (uint64_t)&v26);
      uint64_t v6 = *(void *)&v32[0];
      uint64_t v7 = *(void *)(*(void *)&v32[0] + 16);
      if (v7) {
        break;
      }
LABEL_3:
      ++v5;
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v26);
      if (v5 == v4) {
        goto LABEL_12;
      }
    }
    uint64_t v8 = *(void *)(type metadata accessor for UTType() - 8);
    uint64_t v9 = v6 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    swift_bridgeObjectRetain_n();
    while ((static UTType.== infix(_:_:)() & 1) == 0)
    {
      v9 += v10;
      if (!--v7)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_3;
      }
    }
    swift_bridgeObjectRelease_n();
    long long v37 = v30;
    long long v38 = v31;
    v39[0] = v32[0];
    *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)((char *)v32 + 9);
    long long v33 = v26;
    long long v34 = v27;
    long long v35 = v28;
    long long v36 = v29;
    uint64_t result = swift_bridgeObjectRelease();
    if (*((void *)&v33 + 1))
    {
      long long v12 = v38;
      a1[4] = v37;
      a1[5] = v12;
      a1[6] = v39[0];
      *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)((char *)v39 + 9);
      long long v13 = v34;
      *a1 = v33;
      a1[1] = v13;
      long long v14 = v36;
      a1[2] = v35;
      a1[3] = v14;
      return result;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_12:
    long long v38 = 0u;
    memset(v39, 0, 25);
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v33 = 0u;
    swift_bridgeObjectRelease();
  }
  outlined destroy of AccessibilityValueStorage?((uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
  uint64_t v15 = *(void *)(v3 + 16);
  if (v15)
  {
    uint64_t v16 = v3 + 32;
    swift_bridgeObjectRetain();
    uint64_t v17 = 0;
    while (1)
    {
      outlined init with copy of IdentifiedDocumentGroupConfiguration(v16 + (v17 << 7), (uint64_t)&v26);
      uint64_t v18 = *(void *)&v32[0];
      uint64_t v19 = *(void *)(*(void *)&v32[0] + 16);
      if (v19) {
        break;
      }
LABEL_15:
      ++v17;
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v26);
      if (v17 == v15) {
        goto LABEL_23;
      }
    }
    uint64_t v20 = *(void *)(type metadata accessor for UTType() - 8);
    uint64_t v21 = v18 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    uint64_t v22 = *(void *)(v20 + 72);
    swift_bridgeObjectRetain_n();
    while ((UTType.conforms(to:)() & 1) == 0)
    {
      v21 += v22;
      if (!--v19)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v16 = v3 + 32;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease_n();
    long long v23 = v31;
    a1[4] = v30;
    a1[5] = v23;
    a1[6] = v32[0];
    *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)((char *)v32 + 9);
    long long v24 = v27;
    *a1 = v26;
    a1[1] = v24;
    long long v25 = v29;
    a1[2] = v28;
    a1[3] = v25;
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_23:
    *(_OWORD *)((char *)a1 + 105) = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return swift_bridgeObjectRelease();
}

void closure #1 in IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:)(void *a1, void (*a2)(char *, void), uint64_t a3)
{
  _s10Foundation3URLVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v11 - v7;
  if (a1)
  {
    id v12 = a1;
    specialized IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(v12, (uint64_t)a2, a3);
    uint64_t v9 = v12;
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
    a2(v8, 0);
    _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  }
}

ValueMetadata *type metadata accessor for DocumentPresentationModeLocation()
{
  return &type metadata for DocumentPresentationModeLocation;
}

void *initializeWithCopy for NavigationItemDescription(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for NavigationItemDescription(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NavigationItemDescription(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationItemDescription()
{
  return &type metadata for NavigationItemDescription;
}

void closure #1 in IdentifiedDocumentGroupDocumentCreation.presentDocument(at:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v5 = a2 + 16;
    swift_beginAccess();
    uint64_t v6 = MEMORY[0x18C119DF0](v5);
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      id v8 = a1;
      IdentifiedDocumentGroupDocumentCreation.updateCurrentDocument(with:configuration:)((uint64_t)v8, a3);
    }
  }
}

uint64_t IdentifiedDocumentGroupDocumentCreation.updateCurrentDocument(with:configuration:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v8);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  _s7SwiftUI7WeakBoxVyAA16PlatformDocumentCGWObTm_0((uint64_t)v6, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, MEMORY[0x1E4F41720]);
  v7[8] = 0;
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v7, (uint64_t)v8);
  uint64_t result = swift_endAccess();
  uint64_t v5 = *(void (**)(uint64_t))(v2
                                      + OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_newDocumentHandler);
  if (v5)
  {
    swift_retain();
    v5(a1);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v5);
  }
  return result;
}

uint64_t closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void v8[16] = a8;
  v8[17] = v13;
  v8[14] = a6;
  v8[15] = a7;
  v8[12] = a4;
  v8[13] = a5;
  type metadata accessor for MainActor();
  v8[18] = static MainActor.shared.getter();
  uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
  v8[19] = v10;
  v8[20] = v9;
  return MEMORY[0x1F4188298](closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:), v10, v9);
}

uint64_t closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)()
{
  uint64_t v1 = (int *)v0[12];
  if (v1)
  {
    uint64_t v2 = *(void *)(v0[14] + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox);
    swift_getObjectType();
    uint64_t result = swift_conformsToProtocol2();
    if (result)
    {
      v0[7] = v2;
      v0[8] = result;
      outlined copy of AppIntentExecutor?((uint64_t)v1);
      long long v14 = (uint64_t (*)(void *))((char *)v1 + *v1);
      swift_unknownObjectRetain();
      uint64_t v4 = (void *)swift_task_alloc();
      v0[21] = v4;
      *uint64_t v4 = v0;
      v4[1] = closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:);
      return v14(v0 + 7);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v5 = v0[17];
    swift_release();
    outlined init with copy of NewDocumentProvider?(v5 + 24, (uint64_t)(v0 + 2), &lazy cache variable for type metadata for NewDocumentProvider?, (uint64_t)&lazy cache variable for type metadata for NewDocumentProvider, (uint64_t)&protocol descriptor for NewDocumentProvider, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
    uint64_t v6 = v0[5];
    if (v6)
    {
      uint64_t v7 = v0[14];
      uint64_t v8 = v0[6];
      __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
      (*(void (**)(void, void, uint64_t, uint64_t))(v8 + 8))(*(void *)(v7 + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox), *(void *)(v7 + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8), v6, v8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
    }
    else
    {
      outlined destroy of NewDocumentProvider?((uint64_t)(v0 + 2), &lazy cache variable for type metadata for NewDocumentProvider?, (uint64_t)&lazy cache variable for type metadata for NewDocumentProvider, (uint64_t)&protocol descriptor for NewDocumentProvider, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
    }
    uint64_t v9 = (void (*)(uint64_t))v0[15];
    uint64_t v10 = v0[14];
    uint64_t v11 = *(void *)(v10 + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void, uint64_t, uint64_t))(v11 + 40))(0, ObjectType, v11);
    v9(v10);
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 160);
  uint64_t v4 = *(void *)(v2 + 152);
  if (v0) {
    uint64_t v5 = closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:);
  }
  else {
    uint64_t v5 = closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:);
  }
  return MEMORY[0x1F4188298](v5, v4, v3);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = v0[12];
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  swift_unknownObjectRelease();
  uint64_t v2 = (void (*)(uint64_t))v0[15];
  uint64_t v3 = v0[14];
  uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI16PlatformDocument_documentBox + 8);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void, uint64_t, uint64_t))(v4 + 40))(0, ObjectType, v4);
  v2(v3);
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

{
  void *v0;
  void *v1;
  void (*v2)(void);
  uint64_t v3;
  Swift::String v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[22];
  uint64_t v2 = (void (*)(void))v0[15];
  uint64_t v3 = v0[12];
  swift_release();
  _StringGuts.grow(_:)(45);
  v0[9] = 0;
  v0[10] = 0xE000000000000000;
  v4._object = (void *)0x800000018833A130;
  v4._countAndFlagsBits = 0xD00000000000002BLL;
  String.append(_:)(v4);
  v0[11] = v1;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  MEMORY[0x18C112B90](v0[9], v0[10]);
  swift_bridgeObjectRelease();
  v2(0);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);

  swift_unknownObjectRelease();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

void closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(char a1, void (*a2)(char *, void), uint64_t a3, void *a4, uint64_t a5)
{
  _s10Foundation3URLVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)aBlock - v11;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  double v16 = MEMORY[0x1F4188790](v13);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)aBlock - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v13, v16);
    unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = a2;
    *(void *)(v18 + 24) = a3;
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v18 + v17, (char *)aBlock - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
    aBlock[4] = partial apply for closure #1 in closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    aBlock[3] = &block_descriptor_89;
    uint64_t v19 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a4, sel_closeWithCompletionHandler_, v19);
    _Block_release(v19);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v14 + 56))(v12, 1, 1, v13, v16);
    a2(v12, 0);
    _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  }
}

uint64_t closure #1 in closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(char a1, void (*a2)(char *, uint64_t), uint64_t a3, uint64_t a4)
{
  _s10Foundation3URLVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11;
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a4, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v10);
    uint64_t v13 = 2;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    uint64_t v13 = 0;
  }
  a2(v9, v13);
  return _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationItemDescription.Group(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationItemDescription.Item(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = a2[1];
  if (v3)
  {
    if (v4)
    {
      BOOL v5 = *a1 == *a2 && v3 == v4;
      if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
    }
  }
  else if (!v4)
  {
    return 1;
  }
  return 0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance NavigationItemDescription(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v7 = a2[4];
  BOOL v8 = *a1 == *a2 && a1[1] == a2[1];
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || !specialized static Array<A>.== infix(_:_:)(v2, v6)
    || !specialized static Array<A>.== infix(_:_:)(v4, v5))
  {
    return 0;
  }

  return specialized static Array<A>.== infix(_:_:)(v3, v7);
}

unint64_t lazy protocol witness table accessor for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation;
  if (!lazy protocol witness table cache variable for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation;
  if (!lazy protocol witness table cache variable for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [URL]) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for URL();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = 0;
      while ((a1 & 0xC000000000000001) == 0)
      {
        if (__OFADD__(v5, 1)) {
          goto LABEL_13;
        }
        uint64_t v9 = *(void *)(a1 + 32 + 8 * v5++);
        if (v9 == a2)
        {
LABEL_11:
          swift_bridgeObjectRelease();
          return 1;
        }
LABEL_4:
        if (v5 == v4) {
          goto LABEL_15;
        }
      }
      uint64_t v6 = MEMORY[0x18C117680](v5, a1);
      if (!__OFADD__(v5++, 1)) {
        break;
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_15;
      }
    }
    uint64_t v8 = v6;
    swift_unknownObjectRelease();
    if (v8 == a2) {
      goto LABEL_11;
    }
    goto LABEL_4;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_187E12CD8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187E12D10()
{
  swift_release();
  if (*(void *)(v0 + 72)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 48);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of SceneID(*(void *)(v0 + 128), *(void *)(v0 + 136), *(unsigned char *)(v0 + 144));

  return swift_deallocObject();
}

void partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.presentDocument(at:)(void *a1)
{
  closure #1 in IdentifiedDocumentGroupDocumentCreation.presentDocument(at:)(a1, *(void *)(v1 + 16), v1 + 24);
}

void specialized IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v60 = a6;
  uint64_t v59 = a5;
  uint64_t v58 = a4;
  uint64_t v57 = a3;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation3URLVSgMaTm_6(0, &lazy cache variable for type metadata for TaskPriority?, MEMORY[0x1E4FBCFE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v56 = (char *)&v52 - v10;
  uint64_t v55 = type metadata accessor for UTType();
  uint64_t v54 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  unint64_t v53 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F276F0];
  _s10Foundation3URLVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], v8);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v52 - v14;
  uint64_t v16 = type metadata accessor for URL();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v52 - v21;
  outlined init with copy of DocumentGroupConfiguration(a1, (uint64_t)v63);
  _s10Foundation3URLVSgWOcTm_1(a2, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for URL?, v12, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v15, v16);
    goto LABEL_5;
  }
  char v52 = v22;
  _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v24 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  v67._object = (void *)0x800000018832CC80;
  v25._countAndFlagsBits = 0x64656C7469746E55;
  v25._object = (void *)0xE800000000000000;
  v26.value._countAndFlagsBits = 0x746E656D75636F44;
  v26.value._object = (void *)0xE900000000000073;
  v27._countAndFlagsBits = 0x64656C7469746E55;
  v27._object = (void *)0xE800000000000000;
  v67._countAndFlagsBits = 0xD00000000000001DLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v25, v26, (NSBundle)v24, v27, v67);

  if (*(void *)(v66 + 16))
  {
    uint64_t v28 = v54;
    long long v29 = v53;
    uint64_t v30 = v55;
    (*(void (**)(char *, unint64_t, uint64_t))(v54 + 16))(v53, v66 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)), v55);
    id v31 = objc_msgSend(self, sel_defaultManager);
    id v32 = objc_msgSend(v31, sel_temporaryDirectory);

    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    long long v33 = v52;
    URL.appendingPathComponent(_:conformingTo:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    long long v34 = v29;
    uint64_t v22 = v33;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v34, v30);
LABEL_5:
    uint64_t v36 = v64;
    uint64_t v35 = v65;
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 8))(v64, v65);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, v22, v16);
    long long v38 = (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 120))(v19, v36, v35);
    uint64_t v39 = type metadata accessor for TaskPriority();
    uint64_t v40 = (uint64_t)v56;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v56, 1, 1, v39);
    outlined init with copy of DocumentGroupConfiguration((uint64_t)v63, (uint64_t)v61);
    type metadata accessor for MainActor();
    uint64_t v41 = v57;
    uint64_t v42 = v58;
    outlined copy of AppIntentExecutor?(v57);
    id v43 = v38;
    uint64_t v44 = v60;
    swift_retain();
    uint64_t v45 = static MainActor.shared.getter();
    uint64_t v46 = swift_allocObject();
    long long v47 = v61[2];
    *(_OWORD *)(v46 + 120) = v61[3];
    long long v48 = v61[5];
    *(_OWORD *)(v46 + 136) = v61[4];
    *(_OWORD *)(v46 + 152) = v48;
    long long v49 = v61[1];
    *(_OWORD *)(v46 + 72) = v61[0];
    *(_OWORD *)(v46 + 88) = v49;
    uint64_t v50 = MEMORY[0x1E4FBCFD8];
    *(void *)(v46 + 16) = v45;
    *(void *)(v46 + 24) = v50;
    *(void *)(v46 + 32) = v41;
    *(void *)(v46 + 40) = v42;
    uint64_t v51 = v59;
    *(void *)(v46 + 48) = v43;
    *(void *)(v46 + 56) = v51;
    *(void *)(v46 + 64) = v44;
    *(void *)(v46 + 168) = v62;
    *(_OWORD *)(v46 + 104) = v47;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v40, (uint64_t)&async function pointer to partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:), v46);

    swift_release();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, v16);
    outlined destroy of DocumentGroupConfiguration((uint64_t)v63);
    return;
  }
  __break(1u);
}

uint64_t _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  _s10Foundation3URLVSgMaTm_6(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with copy of DocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_187E134E8()
{
  swift_unknownObjectRelease();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  swift_release();
  if (*(void *)(v0 + 120)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t outlined destroy of DocumentGroupConfiguration(uint64_t a1)
{
  return a1;
}

void type metadata accessor for InheritedEnvironmentSettable?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = type metadata accessor for Optional();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for LocationBox<DocumentPresentationModeLocation>()
{
  if (!lazy cache variable for type metadata for LocationBox<DocumentPresentationModeLocation>)
  {
    lazy protocol witness table accessor for type DocumentPresentationModeLocation and conformance DocumentPresentationModeLocation();
    unint64_t v0 = type metadata accessor for LocationBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<DocumentPresentationModeLocation>);
    }
  }
}

void specialized NavigationItemDescription.init(from:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v2 = objc_msgSend(a1, sel_title);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v80 = v5;
    uint64_t v81 = v4;
  }
  else
  {
    unint64_t v80 = 0xE000000000000000;
    uint64_t v81 = 0;
  }
  id v6 = objc_msgSend(a1, sel_leadingItemGroups);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62) {
    goto LABEL_66;
  }
  uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_6:
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    uint64_t v107 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
    if ((v8 & 0x8000000000000000) == 0)
    {
      uint64_t v10 = 0;
      uint64_t v11 = v107;
      unint64_t v93 = v7;
      unint64_t v96 = v7 & 0xC000000000000001;
      unint64_t v87 = v7 + 32;
      uint64_t v90 = v8;
      while (1)
      {
        if (v10 == v8)
        {
          __break(1u);
LABEL_63:
          __break(1u);
LABEL_64:
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          swift_bridgeObjectRetain();
          uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        uint64_t v102 = v10;
        uint64_t v105 = v11;
        if (v96) {
          id v12 = (id)MEMORY[0x18C117680]();
        }
        else {
          id v12 = *(id *)(v87 + 8 * v10);
        }
        uint64_t v13 = v12;
        id v14 = objc_msgSend(v12, sel_barButtonItems);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
        unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v15 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v16)
          {
LABEL_15:
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16 & ~(v16 >> 63), 0);
            if (v16 < 0) {
              goto LABEL_64;
            }
            uint64_t v99 = v13;
            uint64_t v17 = 0;
            uint64_t v18 = v9;
            do
            {
              if ((v15 & 0xC000000000000001) != 0) {
                id v19 = (id)MEMORY[0x18C117680](v17, v15);
              }
              else {
                id v19 = *(id *)(v15 + 8 * v17 + 32);
              }
              uint64_t v20 = v19;
              id v21 = objc_msgSend(v19, sel_title);
              if (v21)
              {
                uint64_t v22 = v21;
                uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v25 = v24;
              }
              else
              {

                uint64_t v23 = 0;
                uint64_t v25 = 0;
              }
              unint64_t v27 = *(void *)(v18 + 16);
              unint64_t v26 = *(void *)(v18 + 24);
              if (v27 >= v26 >> 1) {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v26 > 1), v27 + 1, 1);
              }
              ++v17;
              *(void *)(v18 + 16) = v27 + 1;
              uint64_t v28 = v18 + 16 * v27;
              *(void *)(v28 + 32) = v23;
              *(void *)(v28 + 40) = v25;
            }
            while (v16 != v17);
            swift_bridgeObjectRelease();

            uint64_t v9 = MEMORY[0x1E4FBC860];
            uint64_t v8 = v90;
            unint64_t v7 = v93;
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v16) {
            goto LABEL_15;
          }
        }
        swift_bridgeObjectRelease();

        uint64_t v18 = v9;
LABEL_29:
        uint64_t v29 = v102;
        uint64_t v11 = v105;
        unint64_t v31 = *(void *)(v105 + 16);
        unint64_t v30 = *(void *)(v105 + 24);
        if (v31 >= v30 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1);
          uint64_t v29 = v102;
          uint64_t v11 = v105;
        }
        uint64_t v10 = v29 + 1;
        *(void *)(v11 + 16) = v31 + 1;
        *(void *)(v11 + 8 * v31 + 32) = v18;
        if (v10 == v8)
        {
          uint64_t v106 = v11;
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
      }
    }
    __break(1u);
    goto LABEL_103;
  }
  swift_bridgeObjectRelease();
  uint64_t v106 = MEMORY[0x1E4FBC860];
LABEL_34:
  id v32 = objc_msgSend(a1, sel_centerItemGroups);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v7 >> 62))
  {
    uint64_t v33 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v33) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
  swift_bridgeObjectRetain();
  uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v33)
  {
LABEL_68:
    swift_bridgeObjectRelease();
    uint64_t v104 = MEMORY[0x1E4FBC860];
LABEL_69:
    id v56 = objc_msgSend(a1, sel_trailingItemGroups);
    unint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v57 >> 62) {
      goto LABEL_99;
    }
    uint64_t v58 = *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v58)
    {
LABEL_100:
      swift_bridgeObjectRelease();

      uint64_t v60 = MEMORY[0x1E4FBC860];
LABEL_101:
      *a2 = v81;
      a2[1] = v80;
      a2[2] = v106;
      a2[3] = v104;
      a2[4] = v60;
      return;
    }
LABEL_71:
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58 & ~(v58 >> 63), 0);
    if (v58 < 0) {
      goto LABEL_104;
    }
    uint64_t v59 = 0;
    uint64_t v60 = v9;
    unint64_t v89 = v57;
    unint64_t v92 = v57 & 0xC000000000000001;
    unint64_t v84 = v57 + 32;
    uint64_t v86 = v58;
    while (1)
    {
      if (v59 == v58)
      {
        __break(1u);
LABEL_98:
        __break(1u);
LABEL_99:
        swift_bridgeObjectRetain();
        uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v58) {
          goto LABEL_100;
        }
        goto LABEL_71;
      }
      if (v92) {
        id v61 = (id)MEMORY[0x18C117680](v59, v57);
      }
      else {
        id v61 = *(id *)(v84 + 8 * v59);
      }
      uint64_t v62 = v61;
      id v63 = objc_msgSend(v61, sel_barButtonItems);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      unint64_t v64 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v64 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v65)
        {
LABEL_92:
          swift_bridgeObjectRelease();

          uint64_t v67 = v9;
          goto LABEL_93;
        }
      }
      else
      {
        uint64_t v65 = *(void *)((v64 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v65) {
          goto LABEL_92;
        }
      }
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v65 & ~(v65 >> 63), 0);
      if (v65 < 0) {
        goto LABEL_98;
      }
      uint64_t v95 = v62;
      uint64_t v98 = v59;
      uint64_t v101 = v60;
      uint64_t v66 = 0;
      uint64_t v67 = v9;
      do
      {
        if ((v64 & 0xC000000000000001) != 0) {
          id v68 = (id)MEMORY[0x18C117680](v66, v64);
        }
        else {
          id v68 = *(id *)(v64 + 8 * v66 + 32);
        }
        uint64_t v69 = v68;
        id v70 = objc_msgSend(v68, sel_title);
        if (v70)
        {
          unint64_t v71 = v70;
          uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v74 = v73;
        }
        else
        {

          uint64_t v72 = 0;
          uint64_t v74 = 0;
        }
        unint64_t v76 = *(void *)(v67 + 16);
        unint64_t v75 = *(void *)(v67 + 24);
        if (v76 >= v75 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1);
        }
        ++v66;
        *(void *)(v67 + 16) = v76 + 1;
        uint64_t v77 = v67 + 16 * v76;
        *(void *)(v77 + 32) = v72;
        *(void *)(v77 + 40) = v74;
      }
      while (v65 != v66);
      swift_bridgeObjectRelease();

      uint64_t v9 = MEMORY[0x1E4FBC860];
      uint64_t v58 = v86;
      unint64_t v57 = v89;
      uint64_t v59 = v98;
      uint64_t v60 = v101;
LABEL_93:
      unint64_t v79 = *(void *)(v60 + 16);
      unint64_t v78 = *(void *)(v60 + 24);
      if (v79 >= v78 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v78 > 1), v79 + 1, 1);
      }
      ++v59;
      *(void *)(v60 + 16) = v79 + 1;
      *(void *)(v60 + 8 * v79 + 32) = v67;
      if (v59 == v58)
      {
        swift_bridgeObjectRelease();

        goto LABEL_101;
      }
    }
  }
LABEL_36:
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33 & ~(v33 >> 63), 0);
  if ((v33 & 0x8000000000000000) == 0)
  {
    uint64_t v34 = 0;
    uint64_t v35 = v9;
    unint64_t v91 = v7;
    unint64_t v94 = v7 & 0xC000000000000001;
    unint64_t v85 = v7 + 32;
    uint64_t v88 = v33;
    while (1)
    {
      if (v34 == v33) {
        goto LABEL_63;
      }
      uint64_t v100 = v34;
      uint64_t v103 = v35;
      if (v94) {
        id v36 = (id)MEMORY[0x18C117680]();
      }
      else {
        id v36 = *(id *)(v85 + 8 * v34);
      }
      uint64_t v37 = v36;
      id v38 = objc_msgSend(v36, sel_barButtonItems);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      unint64_t v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v39 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v40)
        {
LABEL_44:
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40 & ~(v40 >> 63), 0);
          if (v40 < 0) {
            goto LABEL_65;
          }
          uint64_t v97 = v37;
          uint64_t v41 = 0;
          uint64_t v42 = v9;
          do
          {
            if ((v39 & 0xC000000000000001) != 0) {
              id v43 = (id)MEMORY[0x18C117680](v41, v39);
            }
            else {
              id v43 = *(id *)(v39 + 8 * v41 + 32);
            }
            uint64_t v44 = v43;
            id v45 = objc_msgSend(v43, sel_title);
            if (v45)
            {
              uint64_t v46 = v45;
              uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v49 = v48;
            }
            else
            {

              uint64_t v47 = 0;
              uint64_t v49 = 0;
            }
            unint64_t v51 = *(void *)(v42 + 16);
            unint64_t v50 = *(void *)(v42 + 24);
            if (v51 >= v50 >> 1) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1);
            }
            ++v41;
            *(void *)(v42 + 16) = v51 + 1;
            uint64_t v52 = v42 + 16 * v51;
            *(void *)(v52 + 32) = v47;
            *(void *)(v52 + 40) = v49;
          }
          while (v40 != v41);
          swift_bridgeObjectRelease();

          uint64_t v9 = MEMORY[0x1E4FBC860];
          uint64_t v33 = v88;
          unint64_t v7 = v91;
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v40 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v40) {
          goto LABEL_44;
        }
      }
      swift_bridgeObjectRelease();

      uint64_t v42 = v9;
LABEL_58:
      uint64_t v53 = v100;
      uint64_t v35 = v103;
      unint64_t v55 = *(void *)(v103 + 16);
      unint64_t v54 = *(void *)(v103 + 24);
      if (v55 >= v54 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1);
        uint64_t v53 = v100;
        uint64_t v35 = v103;
      }
      uint64_t v34 = v53 + 1;
      *(void *)(v35 + 16) = v55 + 1;
      *(void *)(v35 + 8 * v55 + 32) = v42;
      if (v34 == v33)
      {
        uint64_t v104 = v35;
        swift_bridgeObjectRelease();
        goto LABEL_69;
      }
    }
  }
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
}

uint64_t *partial apply for closure #1 in static DocumentBrowserMediator.resolveBrowserContextMenu(_:)@<X0>(void *a1@<X8>)
{
  return closure #1 in static DocumentBrowserMediator.resolveBrowserContextMenu(_:)(a1);
}

uint64_t _s7SwiftUI7WeakBoxVyAA16PlatformDocumentCGWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  _s10Foundation3URLVSgMaTm_6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void type metadata accessor for (offset: Int, element: PlatformItem)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: PlatformItem))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItem));
    }
  }
}

uint64_t sub_187E1424C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static DocumentBrowserMediator.resolveBrowserContextMenu(_:)(uint64_t a1)
{
  return closure #2 in static DocumentBrowserMediator.resolveBrowserContextMenu(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void (**partial apply for closure #1 in closure #2 in static DocumentBrowserMediator.resolveBrowserContextMenu(_:)@<X0>(void *a1@<X8>))(uint64_t *__return_ptr, uint64_t *)
{
  return closure #1 in closure #2 in static DocumentBrowserMediator.resolveBrowserContextMenu(_:)(*(void *)(v1 + 24), a1);
}

uint64_t sub_187E14280()
{
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return closure #1 in closure #1 in DocumentViewController.init<A>(documentBrowserMediator:onDocumentClose:)(a1, v4, v5, v7, v6);
}

void specialized DocumentViewController.init(coder:)()
{
  swift_unknownObjectWeakInit();
  uint64_t v1 = &v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_lastNavigationItemDescription];
  *(_OWORD *)uint64_t v1 = 0u;
  *((_OWORD *)v1 + 1) = 0u;
  *((void *)v1 + 4) = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_onDocumentClose];
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  uint64_t v3 = &v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController_rootModifier];
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *(_OWORD *)uint64_t v3 = 0u;
  *((void *)v3 + 6) = 1;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI22DocumentViewController____lazy_storage___presentationModeLocation] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized DocumentViewController.presentationController(_:willPresentWithAdaptiveStyle:transitionCoordinator:)(void *a1)
{
  if (a1)
  {
    uint64_t v3 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v10[4] = partial apply for closure #1 in DocumentViewController.presentationController(_:willPresentWithAdaptiveStyle:transitionCoordinator:);
    v10[5] = v3;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1107296256;
    void v10[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v10[3] = &block_descriptor_93;
    uint64_t v4 = _Block_copy(v10);
    swift_unknownObjectRetain();
    swift_release();
    objc_msgSend(a1, sel_animateAlongsideTransition_completion_, 0, v4);
    _Block_release(v4);
    swift_unknownObjectRelease();
    return;
  }
  uint64_t v5 = v1 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController;
  uint64_t v6 = (void *)MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController);
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = objc_msgSend(v6, sel_view);

    if (!v8)
    {
      __break(1u);
      return;
    }
    objc_msgSend(v8, sel_removeFromSuperview);
  }
  uint64_t v9 = (void *)MEMORY[0x18C119DF0](v5);
  objc_msgSend(v9, sel_removeFromParentViewController);

  swift_unknownObjectWeakAssign();
}

void specialized DocumentViewController.presentationControllerWillDismiss(_:)()
{
  uint64_t v1 = (UIViewController_optional *)(*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
  UIDocumentViewController.embedDocumentHostingController(_:)(v1);
  uint64_t v2 = (char *)v0 + OBJC_IVAR____TtC7SwiftUI22DocumentViewController_documentHostingController;
  swift_unknownObjectWeakAssign();
  id v3 = objc_msgSend(v0, sel_launchOptions);
  uint64_t v4 = (void *)MEMORY[0x18C119DF0](v2);
  id v5 = objc_msgSend(v4, sel_view);

  objc_msgSend(v3, sel_setDocumentTargetView_, v5);
}

uint64_t specialized IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:)(void *a1, char *a2, void (**a3)(void, void, void))
{
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v97 = *(void *)(v6 - 8);
  uint64_t v98 = v6;
  MEMORY[0x1F4188790](v6);
  unint64_t v92 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation3URLVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v95 = (uint64_t)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v99 = (uint64_t)&v90 - v12;
  MEMORY[0x1F4188790](v13);
  unint64_t v96 = (char *)&v90 - v14;
  _s10Foundation3URLVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], v8);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unint64_t v93 = (char *)&v90 - v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v90 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v90 - v24;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v90 - v27;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = a3;
  _Block_copy(a3);
  IdentifiedDocumentGroupDocumentCreation.defaultEditorConfiguration.getter((uint64_t)&v117);
  if (!*((void *)&v117 + 1))
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v117, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    uint64_t v35 = type metadata accessor for URL();
    uint64_t v36 = *(void *)(v35 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v28, 1, 1, v35);
    _s10Foundation3URLVSgWOcTm_1((uint64_t)v28, (uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    id v38 = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v25, 1, v35) != 1)
    {
      URL._bridgeToObjectiveC()(v37);
      id v38 = v39;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v35);
    }
    ((void (**)(void, void *, void))a3)[2](a3, v38, 0);

    _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1((uint64_t)v28, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    return swift_release();
  }
  unint64_t v94 = v22;
  v124[4] = v121;
  v124[5] = v122;
  v125[0] = v123[0];
  *(_OWORD *)((char *)v125 + 9) = *(_OWORD *)((char *)v123 + 9);
  v124[0] = v117;
  v124[1] = v118;
  v124[2] = v119;
  v124[3] = v120;
  id v30 = objc_msgSend(a1, sel_activeDocumentCreationIntent);
  if (v30)
  {
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;
    if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34)
    {
      swift_bridgeObjectRelease_n();
LABEL_10:
      uint64_t v41 = type metadata accessor for URL();
      uint64_t v42 = (uint64_t)v94;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v94, 1, 1, v41);
      id v43 = (void *)swift_allocObject();
      _OWORD v43[2] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSURL?, @unowned UIDocumentBrowserImportMode) -> ();
      v43[3] = v29;
      v43[4] = a2;
      swift_retain();
      uint64_t v44 = a2;
      specialized IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)((uint64_t)v124, v42, 0, 0, (uint64_t)partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:), (uint64_t)v43);

      swift_release();
      id v45 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F276F0];
      uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
      uint64_t v47 = v42;
      goto LABEL_34;
    }
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v40) {
      goto LABEL_10;
    }
  }
  unint64_t v91 = a2;
  uint64_t v48 = *(void *)&a2[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_strategies];
  uint64_t v49 = *(void *)(v48 + 16);
  if (!v49)
  {
    swift_bridgeObjectRetain();
LABEL_24:
    uint64_t v59 = v91;
    *(void *)&long long v119 = 0;
    long long v117 = 0u;
    long long v118 = 0u;
    swift_bridgeObjectRelease();
    if (!*((void *)&v118 + 1)) {
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  uint64_t v90 = v29;
  uint64_t v50 = v48 + 32;
  swift_bridgeObjectRetain_n();
  while (1)
  {
    outlined init with copy of TableColumnList(v50, (uint64_t)&v104);
    uint64_t v51 = *((void *)&v105 + 1);
    uint64_t v52 = v106;
    __swift_project_boxed_opaque_existential_1(&v104, *((uint64_t *)&v105 + 1));
    uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 16))(v51, v52);
    uint64_t v55 = v54;
    if (!v30)
    {
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    if (v53 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v55 == v56) {
      break;
    }
    char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v58) {
      goto LABEL_30;
    }
LABEL_14:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
    v50 += 40;
    if (!--v49)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = v90;
      goto LABEL_24;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_30:
  swift_bridgeObjectRelease();
  outlined init with take of OptionalBinaryInteger(&v104, (uint64_t)&v117);
  swift_bridgeObjectRelease();
  uint64_t v29 = v90;
  uint64_t v59 = v91;
  if (*((void *)&v118 + 1))
  {
LABEL_25:
    outlined init with take of OptionalBinaryInteger(&v117, (uint64_t)v114);
    long long v122 = 0u;
    memset(v123, 0, 25);
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v117 = 0u;
    uint64_t v60 = v115;
    uint64_t v61 = v116;
    __swift_project_boxed_opaque_existential_1(v114, v115);
    (*(void (**)(uint64_t, uint64_t))(v61 + 24))(v60, v61);
    uint64_t v62 = v99;
    outlined init with copy of TableColumnList((uint64_t)v114, (uint64_t)v111);
    uint64_t v64 = v97;
    uint64_t v63 = v98;
    uint64_t v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
    if (v65(v62, 1, v98) == 1)
    {
      uint64_t v66 = v112;
      uint64_t v67 = v113;
      __swift_project_boxed_opaque_existential_1(v111, v112);
      uint64_t v68 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 40))(v66, v67);
      uint64_t v69 = (uint64_t)v96;
      if (*(void *)(v68 + 16))
      {
        uint64_t v64 = v97;
        uint64_t v63 = v98;
        (*(void (**)(char *, unint64_t, uint64_t))(v97 + 16))(v96, v68 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80)), v98);
        uint64_t v70 = 0;
      }
      else
      {
        uint64_t v70 = 1;
        uint64_t v64 = v97;
        uint64_t v63 = v98;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(v69, v70, 1, v63);
      swift_bridgeObjectRelease();
      _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1(v99, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    }
    else
    {
      uint64_t v69 = (uint64_t)v96;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v96, v62, v63);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v69, 0, 1, v63);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v111);
    uint64_t v77 = v95;
    _s10Foundation3URLVSgWOcTm_1(v69, v95, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    if (v65(v77, 1, v63) == 1)
    {
      _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1(v77, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
    }
    else
    {
      unint64_t v78 = v92;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v92, v77, v63);
      IdentifiedDocumentGroupDocumentCreation.findConfiguration(for:)(&v104);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v78, v63);
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v117, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v104, (uint64_t)&v117, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    }
    uint64_t v79 = (uint64_t)v94;
    outlined init with copy of AccessibilityValueStorage?((uint64_t)&v117, (uint64_t)v102, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v124, (uint64_t)v100);
    if (*((void *)&v102[0] + 1))
    {
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v100);
      long long v108 = v102[4];
      long long v109 = v102[5];
      v110[0] = v103[0];
      *(_OWORD *)((char *)v110 + 9) = *(_OWORD *)((char *)v103 + 9);
      long long v104 = v102[0];
      long long v105 = v102[1];
      long long v106 = v102[2];
      long long v107 = v102[3];
    }
    else
    {
      long long v108 = v100[4];
      long long v109 = v100[5];
      v110[0] = v101[0];
      *(_OWORD *)((char *)v110 + 9) = *(_OWORD *)((char *)v101 + 9);
      long long v104 = v100[0];
      long long v105 = v100[1];
      long long v106 = v100[2];
      long long v107 = v100[3];
      outlined destroy of AccessibilityValueStorage?((uint64_t)v102, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    }
    uint64_t v80 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v79, 1, 1, v80);
    uint64_t v81 = v115;
    uint64_t v82 = v116;
    __swift_project_boxed_opaque_existential_1(v114, v115);
    uint64_t v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 32))(v81, v82);
    uint64_t v85 = v84;
    uint64_t v86 = (void *)swift_allocObject();
    v86[2] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSURL?, @unowned UIDocumentBrowserImportMode) -> ();
    v86[3] = v29;
    v86[4] = v59;
    swift_retain();
    id v87 = v59;
    specialized IdentifiedDocumentGroupDocumentCreation.createNewDocument(with:url:newDocumentProvider:_:)((uint64_t)&v104, v79, v83, v85, (uint64_t)partial apply for closure #3 in IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:), (uint64_t)v86);
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v83);

    uint64_t v88 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
    _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1(v79, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)&v104);
    _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1(v69, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], v88);
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v117, (unint64_t *)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?);
    outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v124);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v114);
    return swift_release();
  }
LABEL_31:
  outlined destroy of NewDocumentProvider?((uint64_t)&v117, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy?, (uint64_t)&lazy cache variable for type metadata for DocumentCreationStrategy, (uint64_t)&protocol descriptor for DocumentCreationStrategy, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
  uint64_t v71 = type metadata accessor for URL();
  uint64_t v72 = *(void *)(v71 - 8);
  uint64_t v73 = (uint64_t)v93;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v93, 1, 1, v71);
  _s10Foundation3URLVSgWOcTm_1(v73, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  unint64_t v75 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v17, 1, v71) != 1)
  {
    URL._bridgeToObjectiveC()(v74);
    unint64_t v75 = v76;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v17, v71);
  }
  ((void (**)(void, void *, void))a3)[2](a3, v75, 0);

  id v45 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F276F0];
  uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  uint64_t v47 = v73;
LABEL_34:
  _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1(v47, (unint64_t *)&lazy cache variable for type metadata for URL?, v45, v46);
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v124);
  return swift_release();
}

uint64_t specialized IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)aBlock - v12;
  id v14 = objc_msgSend(a1, sel_fileURL, v11);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL._bridgeToObjectiveC()(v15);
  uint64_t v17 = v16;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v13, v6);
  unint64_t v18 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = a2;
  *((void *)v19 + 3) = a3;
  *((void *)v19 + 4) = a1;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v19[v18], v9, v6);
  aBlock[4] = partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:);
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  aBlock[3] = &block_descriptor_83_1;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  id v21 = a1;
  swift_release();
  objc_msgSend(v21, sel_saveToURL_forSaveOperation_completionHandler_, v17, 0, v20);
  _Block_release(v20);

  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
}

uint64_t specialized IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didPickDocumentsAt:)(uint64_t a1)
{
  _s10Foundation3URLVSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - v3;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t, double))(v6 + 16))(v4, a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
      IdentifiedDocumentGroupDocumentCreation.presentDocument(at:)((uint64_t)v9);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v6 + 56))(v4, 1, 1, v5, v7);
  }
  return _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
}

uint64_t sub_187E15934()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSURL?, @unowned UIDocumentBrowserImportMode) -> ()(uint64_t a1, uint64_t a2)
{
  thunk for @escaping @callee_unowned @convention(block) (@unowned NSURL?, @unowned UIDocumentBrowserImportMode) -> ()(a1, a2, *(void *)(v2 + 16));
}

void partial apply for closure #3 in IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:)(void *a1)
{
  closure #1 in IdentifiedDocumentGroupDocumentCreation.documentBrowser(_:didRequestDocumentCreationWithHandler:)(a1, *(void (**)(char *, void))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t objectdestroy_73Tm()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187E159DC()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = (void (*)(char *, void))v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)v1[4];
  uint64_t v7 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(a1, v4, v5, v6, v7);
}

uint64_t sub_187E15B28()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v4 = *(void (**)(char *, uint64_t))(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in closure #1 in IdentifiedDocumentGroupDocumentCreation.writeNewDocumentToDisk(_:_:)(a1, v4, v5, v6);
}

unint64_t lazy protocol witness table accessor for type UTType and conformance UTType()
{
  unint64_t result = lazy protocol witness table cache variable for type UTType and conformance UTType;
  if (!lazy protocol witness table cache variable for type UTType and conformance UTType)
  {
    type metadata accessor for UTType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType);
  }
  return result;
}

uint64_t outlined init with copy of NewDocumentProvider?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for InheritedEnvironmentSettable?(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined assign with take of IdentifiedDocumentGroupConfiguration??(uint64_t a1, uint64_t a2)
{
  type metadata accessor for InheritedEnvironmentSettable?(0, &lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration??, (uint64_t)&lazy cache variable for type metadata for IdentifiedDocumentGroupConfiguration?, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in DocumentViewController.presentationController(_:willPresentWithAdaptiveStyle:transitionCoordinator:)(uint64_t a1)
{
  closure #1 in DocumentViewController.presentationController(_:willPresentWithAdaptiveStyle:transitionCoordinator:)(a1, v1);
}

uint64_t outlined destroy of NewDocumentProvider?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for InheritedEnvironmentSettable?(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_187E15E28()
{
  return swift_deallocObject();
}

uint64_t sub_187E15E60()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 80)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of SceneID(*(void *)(v0 + 136), *(void *)(v0 + 144), *(unsigned char *)(v0 + 152));

  return swift_deallocObject();
}

void partial apply for closure #1 in DocumentViewController.makeDocumentHostingController()(void *a1)
{
  closure #1 in DocumentViewController.makeDocumentHostingController()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + 32);
}

void *partial apply for closure #1 in IdentifiedDocumentGroupDocumentCreation.configuration(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 16);
  unint64_t result = (void *)MEMORY[0x18C119DF0](a2);
  if (result)
  {
    uint64_t v5 = result;

    return (void *)(v5 == v3);
  }
  return result;
}

void type metadata accessor for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)()
{
  if (!lazy cache variable for type metadata for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>))
  {
    _s10Foundation3URLVSgMaTm_6(255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, MEMORY[0x1E4F41720]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>));
    }
  }
}

uint64_t outlined init with take of (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)(uint64_t a1)
{
  type metadata accessor for (key: IdentifiedDocumentGroupConfiguration, value: WeakBox<PlatformDocument>)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined assign with copy of RootModifier?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for RootModifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for NavigationItemDescription.Item()
{
  return &type metadata for NavigationItemDescription.Item;
}

ValueMetadata *type metadata accessor for NavigationItemDescription.Group()
{
  return &type metadata for NavigationItemDescription.Group;
}

uint64_t SelectionShapeStyle.hasProminentAppearance(in:)(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    if (v3 == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
LABEL_6:
      swift_release_n();
      return v2;
    }
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    if (v3)
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
      goto LABEL_6;
    }
  }
  return 1;
}

uint64_t SelectionShapeStyle._apply(to:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 56);
  unsigned __int8 v2 = (long long *)(a1 + 48);
  *(void *)&long long v6 = *(void *)(a1 + 48);
  *((void *)&v6 + 1) = v3;
  swift_retain();
  swift_retain();
  if (SelectionShapeStyle.hasProminentAppearance(in:)((uint64_t)&v6)) {
    uint64_t v4 = static Color.accentColor.getter();
  }
  else {
    uint64_t v4 = static Color.gray.getter();
  }
  *(void *)&long long v6 = v4;
  AnyShapeStyle.init<A>(_:)();
  swift_release();
  swift_release();
  dispatch thunk of AnyShapeStyleBox.apply(to:)();
  uint64_t result = swift_release();
  if (*(unsigned char *)(a1 + 24) == 4)
  {
    long long v6 = *v2;
    if (SelectionShapeStyle.hasProminentAppearance(in:)((uint64_t)&v6)) {
      static BackgroundProminence.increased.getter();
    }
    else {
      static BackgroundProminence.standard.getter();
    }
    return EnvironmentValues.backgroundProminence.setter();
  }
  return result;
}

unsigned char *static SelectionShapeStyle._apply(to:)(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

uint64_t static SelectionShapeStyle._makeView<A>(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F40FD2B0](a1, a2, a3, &type metadata for SelectionShapeStyle, a4, &protocol witness table for SelectionShapeStyle);
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance SelectionShapeStyle(uint64_t a1)
{
  return SelectionShapeStyle._apply(to:)(a1);
}

void __swiftcall DefaultMenuButtonStyle.init()()
{
}

void DefaultMenuButtonStyle._body(configuration:)()
{
}

uint64_t associated type witness table accessor for MenuButtonStyle._Body : View in DefaultMenuButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultMenuButtonStyle()
{
  return &type metadata for DefaultMenuButtonStyle;
}

void UIKitMainMenuController.buildMenu(with:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MainMenuItem(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v96 = (uint64_t)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v97 = (char *)&v86 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v86 - v10;
  MEMORY[0x1F4188790](v12);
  id v14 = (uint64_t *)((char *)&v86 - v13);
  id v15 = objc_msgSend(self, sel_currentDevice);
  id v16 = objc_msgSend(v15, sel_userInterfaceIdiom);

  if (v16)
  {
    unint64_t v92 = a1;
    specialized UIKitMainMenuController.synthesizeSystemMenus(_:)(a1);
    uint64_t v17 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    *(void *)&long long v103 = v17;
    *((void *)&v103 + 1) = v18;
    uint64_t v104 = MEMORY[0x1E4FBC870];
    uint64_t v19 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_commandsList);
    swift_bridgeObjectRetain();
    CommandsList.resolveOperations(into:)((uint64_t)&v103, v19);
    swift_bridgeObjectRelease();
    uint64_t v101 = v104;
    unint64_t v102 = (unint64_t)v17;
    unint64_t v91 = (void *)(v2 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_environment);
    long long v99 = *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_environment);
    long long v100 = v103;
    uint64_t v20 = _ResolvedCommands.mainMenuItems(env:)((uint64_t *)&v99);
    uint64_t v21 = *(void *)(v20 + 16);
    uint64_t v87 = v2;
    if (v21)
    {
      uint64_t v22 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_topLevelItemCoordinators);
      uint64_t v94 = v2 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_focusedValues;
      uint64_t v95 = v11;
      uint64_t v23 = *(unsigned __int8 *)(v5 + 80);
      uint64_t v90 = v20;
      uint64_t v24 = v20 + ((v23 + 32) & ~v23);
      unint64_t v93 = *(void *)(v5 + 72);
      uint64_t v25 = (uint64_t)v97;
      do
      {
        _s7SwiftUI21CommandGroupPlacementVWOcTm_0(v24, (uint64_t)v14, type metadata accessor for MainMenuItem);
        uint64_t v26 = *v14;
        uint64_t v27 = v14[1];
        swift_beginAccess();
        uint64_t v28 = *v22;
        if (*(void *)(*v22 + 16))
        {
          swift_bridgeObjectRetain();
          unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
          if (v30)
          {
            uint64_t v31 = *(void *)(*(void *)(v28 + 56) + 8 * v29);
            swift_retain();
          }
          else
          {
            uint64_t v31 = 0;
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v31 = 0;
        }
        swift_endAccess();
        _s7SwiftUI21CommandGroupPlacementVWOcTm_0((uint64_t)v14, (uint64_t)v11, type metadata accessor for MainMenuItem);
        *(void *)&long long v98 = v21;
        if (!v31)
        {
          _s7SwiftUI21CommandGroupPlacementVWOcTm_0((uint64_t)v11, v25, type metadata accessor for MainMenuItem);
          uint64_t v32 = v91[1];
          *(void *)&long long v100 = *v91;
          *((void *)&v100 + 1) = v32;
          type metadata accessor for MainMenuItemCoordinator();
          swift_allocObject();
          swift_retain();
          swift_retain();
          uint64_t v31 = MainMenuItemCoordinator.init(_:environment:)(v25, (unint64_t *)&v100);
        }
        outlined destroy of CommandGroupPlacement((uint64_t)v11, type metadata accessor for MainMenuItem);
        _s7SwiftUI21CommandGroupPlacementVWOcTm_0((uint64_t)v14, v25, type metadata accessor for MainMenuItem);
        uint64_t v33 = *(void *)(v31 + 16);
        uint64_t v34 = v96;
        _s7SwiftUI21CommandGroupPlacementVWOcTm_0(v25, v96, type metadata accessor for MainMenuItem);
        uint64_t v35 = v33 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_mainMenuItem;
        swift_beginAccess();
        swift_retain();
        outlined assign with copy of MainMenuItem(v34, v35);
        swift_endAccess();
        LOWORD(v100) = 1;
        type metadata accessor for MainMenuItemHost(0);
        lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
        outlined destroy of CommandGroupPlacement(v34, type metadata accessor for MainMenuItem);
        swift_release();
        outlined destroy of CommandGroupPlacement(v25, type metadata accessor for MainMenuItem);
        char v36 = *(unsigned char *)(v94 + 8);
        int v37 = *(_DWORD *)(v94 + 12);
        uint64_t v38 = *(void *)(v31 + 16) + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_focusedValues;
        int v39 = *(_DWORD *)(v38 + 12);
        *(void *)uint64_t v38 = *(void *)v94;
        *(unsigned char *)(v38 + 8) = v36;
        *(_DWORD *)(v38 + 12) = v37;
        swift_retain();
        swift_retain();
        if (v39 == -1 || v37 == -1 || v39 != v37)
        {
          LOWORD(v100) = 256;
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
        }
        swift_release();
        swift_release();
        uint64_t v40 = v98;
        MainMenuItemCoordinator.updateIfNeeded()();
        uint64_t v41 = swift_retain();
        MEMORY[0x18C115B40](v41);
        uint64_t v25 = (uint64_t)v97;
        if (*(void *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v42 = *v14;
        uint64_t v43 = v14[1];
        swift_beginAccess();
        swift_retain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v99 = *v22;
        *uint64_t v22 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v31, v42, v43, isUniquelyReferenced_nonNull_native);
        *uint64_t v22 = v99;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        swift_release();
        outlined destroy of CommandGroupPlacement((uint64_t)v14, type metadata accessor for MainMenuItem);
        v24 += v93;
        uint64_t v21 = v40 - 1;
        uint64_t v11 = v95;
      }
      while (v21);
      swift_bridgeObjectRelease();
      unint64_t v45 = v102;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v45 = MEMORY[0x1E4FBC860];
    }
    uint64_t v46 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    if (v45 >> 62) {
      goto LABEL_77;
    }
    uint64_t v47 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    while (v47)
    {
      uint64_t v48 = 0;
      unint64_t v93 = v45 & 0xC000000000000001;
      uint64_t v88 = (void *)(v45 + 32);
      uint64_t v89 = v45 & 0xFFFFFFFFFFFFFF8;
      uint64_t v90 = v47;
      unint64_t v91 = (void *)v45;
      while (1)
      {
        if (v93)
        {
          uint64_t v49 = MEMORY[0x18C117680](v48, v45);
        }
        else
        {
          if ((unint64_t)v48 >= *(void *)(v89 + 16)) {
            goto LABEL_76;
          }
          uint64_t v49 = swift_retain();
        }
        BOOL v50 = __OFADD__(v48, 1);
        uint64_t v51 = v48 + 1;
        if (v50) {
          break;
        }
        uint64_t v95 = v51;
        uint64_t v52 = *(void *)(v49 + 64);
        unint64_t v45 = *(void *)(v52 + 16);
        if (v45)
        {
          uint64_t v53 = v49;
          swift_getObjectType();
          swift_bridgeObjectRetain();
          uint64_t v54 = (char *)(v52 + 48);
          do
          {
            uint64_t v55 = (void *)*((void *)v54 - 2);
            uint64_t v56 = (void *)*((void *)v54 - 1);
            char v57 = *v54;
            v54 += 24;
            outlined copy of MenuBuilderInstruction(v55, v56, v57);
            UIMenuBuilder.perform(instruction:)((uint64_t)v55, v56, v57);
            outlined consume of MenuBuilderInstruction(v55, v56, v57);
            --v45;
          }
          while (v45);
          swift_bridgeObjectRelease();
          uint64_t v49 = v53;
        }
        unint64_t v58 = *(void *)(v49 + 32);
        if (*(void *)(v58 + 16))
        {
          uint64_t v94 = v49;
          swift_bridgeObjectRetain();
          char v59 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&long long v100 = v46;
          uint64_t v60 = *(void *)(v58 + 64);
          uint64_t v96 = v58 + 64;
          uint64_t v61 = 1 << *(unsigned char *)(v58 + 32);
          if (v61 < 64) {
            uint64_t v62 = ~(-1 << v61);
          }
          else {
            uint64_t v62 = -1;
          }
          unint64_t v63 = v62 & v60;
          uint64_t v97 = (char *)((unint64_t)(v61 + 63) >> 6);
          swift_bridgeObjectRetain();
          uint64_t v64 = 0;
          while (1)
          {
            if (v63)
            {
              unint64_t v66 = __clz(__rbit64(v63));
              v63 &= v63 - 1;
              unint64_t v67 = v66 | (v64 << 6);
            }
            else
            {
              uint64_t v68 = v64 + 1;
              if (__OFADD__(v64, 1)) {
                goto LABEL_73;
              }
              if (v68 >= (uint64_t)v97)
              {
LABEL_24:
                swift_bridgeObjectRelease();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                goto LABEL_25;
              }
              unint64_t v69 = *(void *)(v96 + 8 * v68);
              ++v64;
              if (!v69)
              {
                uint64_t v64 = v68 + 1;
                if (v68 + 1 >= (uint64_t)v97) {
                  goto LABEL_24;
                }
                unint64_t v69 = *(void *)(v96 + 8 * v64);
                if (!v69)
                {
                  uint64_t v64 = v68 + 2;
                  if (v68 + 2 >= (uint64_t)v97) {
                    goto LABEL_24;
                  }
                  unint64_t v69 = *(void *)(v96 + 8 * v64);
                  if (!v69)
                  {
                    uint64_t v64 = v68 + 3;
                    if (v68 + 3 >= (uint64_t)v97) {
                      goto LABEL_24;
                    }
                    unint64_t v69 = *(void *)(v96 + 8 * v64);
                    if (!v69)
                    {
                      uint64_t v70 = v68 + 4;
                      if (v70 >= (uint64_t)v97) {
                        goto LABEL_24;
                      }
                      unint64_t v69 = *(void *)(v96 + 8 * v70);
                      if (!v69)
                      {
                        while (1)
                        {
                          uint64_t v64 = v70 + 1;
                          if (__OFADD__(v70, 1)) {
                            goto LABEL_74;
                          }
                          if (v64 >= (uint64_t)v97) {
                            goto LABEL_24;
                          }
                          unint64_t v69 = *(void *)(v96 + 8 * v64);
                          ++v70;
                          if (v69) {
                            goto LABEL_59;
                          }
                        }
                      }
                      uint64_t v64 = v70;
                    }
                  }
                }
              }
LABEL_59:
              unint64_t v63 = (v69 - 1) & v69;
              unint64_t v67 = __clz(__rbit64(v69)) + (v64 << 6);
            }
            Swift::UInt v71 = *(void *)(*(void *)(v58 + 48) + 8 * v67);
            long long v98 = *(_OWORD *)(*(void *)(v58 + 56) + 16 * v67);
            unint64_t v72 = specialized __RawDictionaryStorage.find<A>(_:)(v71);
            uint64_t v74 = v46[2];
            BOOL v75 = (v73 & 1) == 0;
            uint64_t v76 = v74 + v75;
            if (__OFADD__(v74, v75))
            {
              __break(1u);
LABEL_72:
              __break(1u);
LABEL_73:
              __break(1u);
LABEL_74:
              __break(1u);
              goto LABEL_75;
            }
            unint64_t v77 = v72;
            char v78 = v73;
            unint64_t v45 = v58;
            uint64_t v79 = v46[3];
            swift_retain();
            if (v79 >= v76)
            {
              if ((v59 & 1) == 0) {
                specialized _NativeDictionary.copy()();
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v76, v59 & 1);
              unint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)(v71);
              if ((v78 & 1) != (v81 & 1))
              {
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                return;
              }
              unint64_t v77 = v80;
            }
            long long v82 = v98;
            uint64_t v46 = (void *)v100;
            if (v78)
            {
              long long v98 = *(_OWORD *)(*(void *)(v100 + 56) + 16 * v77);
              swift_retain();
              swift_release();
              uint64_t v65 = (_OWORD *)(v46[7] + 16 * v77);
              swift_release();
              *uint64_t v65 = v98;
            }
            else
            {
              *(void *)(v100 + 8 * (v77 >> 6) + 64) |= 1 << v77;
              *(void *)(v46[6] + 8 * v77) = v71;
              *(_OWORD *)(v46[7] + 16 * v77) = v82;
              uint64_t v83 = v46[2];
              BOOL v50 = __OFADD__(v83, 1);
              uint64_t v84 = v83 + 1;
              if (v50) {
                goto LABEL_72;
              }
              v46[2] = v84;
            }
            char v59 = 1;
          }
        }
        swift_release();
LABEL_25:
        unint64_t v45 = (unint64_t)v91;
        uint64_t v48 = v95;
        if (v95 == (char *)v90) {
          goto LABEL_78;
        }
      }
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      swift_bridgeObjectRetain_n();
      uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_78:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v85 = (void *)(v87 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_keyCommandMap);
    swift_beginAccess();
    *uint64_t v85 = v46;
    swift_bridgeObjectRelease();
  }
}

uint64_t UIKitMainMenuController.canPerformAction(_:withSender:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  outlined init with copy of Any?(a2, (uint64_t)v26);
  if (!v27)
  {
    _sypSgWOhTm_8((uint64_t)v26, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<MenuBuilderInstruction>);
    goto LABEL_8;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIKeyCommand);
  if ((swift_dynamicCast() & 1) == 0
    || (v7 = UIKeyCommand.discoverabilityID.getter(), char v9 = v8, v24[1], (v9 & 1) != 0))
  {
LABEL_8:
    outlined init with copy of Any?(a2, (uint64_t)v26);
    uint64_t v16 = v27;
    if (v27)
    {
      uint64_t v17 = __swift_project_boxed_opaque_existential_1(v26, v27);
      uint64_t v18 = *(void *)(v16 - 8);
      double v19 = MEMORY[0x1F4188790](v17);
      uint64_t v21 = (char *)v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v18 + 16))(v21, v19);
      uint64_t v22 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v16);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    }
    else
    {
      uint64_t v22 = 0;
    }
    v25.receiver = v3;
    v25.super_class = ObjectType;
    uint64_t v15 = (uint64_t)objc_msgSendSuper2(&v25, sel_canPerformAction_withSender_, a1, v22);
    swift_unknownObjectRelease();
    return v15;
  }
  uint64_t v10 = &v2[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_keyCommandMap];
  swift_beginAccess();
  uint64_t v11 = *(void *)v10;
  if (*(void *)(*(void *)v10 + 16)
    && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)((Swift::UInt)v7), (v13 & 1) != 0))
  {
    uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 16 * v12);
    swift_retain();
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
  }
  swift_endAccess();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v14);
  return v15;
}

Swift::Void __swiftcall UIKitMainMenuController._performMainMenuShortcutKeyCommand(_:)(UIKeyCommand *a1)
{
  id v2 = UIKeyCommand.discoverabilityID.getter();
  if ((v3 & 1) == 0)
  {
    Swift::UInt v4 = (Swift::UInt)v2;
    uint64_t v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_keyCommandMap);
    swift_beginAccess();
    uint64_t v6 = *v5;
    if (*(void *)(v6 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v4), (v8 & 1) != 0))
    {
      char v9 = *(void (**)(uint64_t))(*(void *)(v6 + 56) + 16 * v7);
      swift_endAccess();
      uint64_t v10 = swift_retain();
      v9(v10);
      swift_release();
    }
    else
    {
      swift_endAccess();
    }
  }
}

id UIKitMainMenuController.init(commandsList:)(uint64_t a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  Swift::UInt v4 = v1;
  EnvironmentValues.init()();
  uint64_t v5 = &v4[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_focusedValues];
  *(void *)uint64_t v5 = 0;
  v5[8] = 0;
  *((_DWORD *)v5 + 3) = 0;
  uint64_t v6 = OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_topLevelItemCoordinators;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)&v4[v6] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v8 = OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_keyCommandMap;
  *(void *)&v4[v8] = specialized Dictionary.init(dictionaryLiteral:)(v7);
  *(void *)&v4[OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_commandsList] = a1;

  v14.receiver = v4;
  v14.super_class = ObjectType;
  id v9 = objc_msgSendSuper2(&v14, sel_init);
  id v10 = v9;
  uint64_t v11 = static AppGraph.shared;
  if (static AppGraph.shared)
  {
    id v12 = v9;
    swift_retain();
    specialized AppGraph.addObserver(_:)(v12, v11);
    swift_release();
  }
  return v10;
}

void MainMenuItemCoordinator.updateIfNeeded()()
{
  if (*(unsigned char *)(v0 + 72) == 1)
  {
    uint64_t v1 = v0;
    *(unsigned char *)(v0 + 72) = 0;
    uint64_t v2 = *(void *)(*(void *)(v0 + 16) + 16);
    swift_beginAccess();
    int v3 = *(unsigned __int8 *)(v2 + 361);
    *(unsigned char *)(v2 + 361) = v3 | 2;
    if ((v3 | 2) != v3)
    {
      swift_retain();
      GraphHost.uninstantiate(immediately:)(0);
      swift_release();
    }
    uint64_t v32 = 0;
    LOBYTE(v33) = 1;
    type metadata accessor for MainMenuItemHost(0);
    lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost();
    swift_retain();
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    swift_release();
    swift_retain();
    ViewRendererHost.updateViewGraph<A>(body:)();
    swift_release();
    if (MEMORY[0x10])
    {
      uint64_t v4 = MEMORY[0x1E4FBC860];
      uint64_t v39 = MEMORY[0x1E4FBC860];
      unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      LOBYTE(v32) = 0;
      type metadata accessor for _ContiguousArrayStorage<CommandGroupPlacement>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
      uint64_t v6 = type metadata accessor for MenuVisitor.MenuStackGroup();
      unint64_t v7 = (*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_18834BB80;
      uint64_t v9 = v8 + v7;
      if (one-time initialization token for empty != -1) {
        swift_once();
      }
      uint64_t v10 = __swift_project_value_buffer(v6, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
      _s7SwiftUI21CommandGroupPlacementVWOcTm_0(v10, v9, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
      char v11 = v32;
      uint64_t v32 = 3;
      LOBYTE(v33) = 0;
      uint64_t v34 = MEMORY[0x1E4FBC868];
      unint64_t v35 = v5;
      *(void *)&long long v36 = v4;
      *((void *)&v36 + 1) = MEMORY[0x1E4FBC868];
      char v37 = v11;
      uint64_t v38 = v8;
      MenuVisitor.visit(_:uniqueNames:)(0, &v39);
      swift_bridgeObjectRelease();
      uint64_t v12 = v34;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v13 = v36;
      *(unsigned char *)(v1 + 24) = 0;
      *(void *)(v1 + 32) = v12;
      *(void *)(v1 + 40) = v5;
      *(_OWORD *)(v1 + 48) = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*(unsigned char *)(v1 + 24))
      {
        if (*(unsigned char *)(v1 + 24) == 1)
        {
          type metadata accessor for _ContiguousArrayStorage<MenuBuilderInstruction>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuBuilderInstruction>, (uint64_t)&type metadata for MenuBuilderInstruction, MEMORY[0x1E4FBBE00]);
          uint64_t v14 = swift_allocObject();
          *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
          uint64_t v15 = (void *)*MEMORY[0x1E4FB2DF8];
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
          uint64_t v16 = (uint64_t *)(*(void *)(v1 + 16) + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_mainMenuItem);
          swift_beginAccess();
          uint64_t v18 = *v16;
          uint64_t v17 = (void *)v16[1];
          UIMenuElementSize preferredElementSize = *(void *)(v1 + 48);
          id v20 = v15;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v21._countAndFlagsBits = v18;
          v21._object = v17;
          v40.value.super.Class isa = 0;
          v40.is_nil = 0;
          UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v22, v21, (Swift::String_optional)0, v40, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v31);
          *(void *)(v14 + 32) = v20;
          *(void *)(v14 + 40) = v23;
          *(unsigned char *)(v14 + 48) = 2;
          *(void *)(v1 + 64) = v14;
        }
        else
        {
          uint64_t v24 = *(void *)(v1 + 32);
          uint64_t v25 = *(void *)(v1 + 40);
          unint64_t v26 = *(void *)(v1 + 48);
          uint64_t v27 = *(void *)(v1 + 56);
          LOBYTE(v32) = 2;
          uint64_t v33 = v24;
          uint64_t v34 = v25;
          unint64_t v35 = v26;
          *(void *)&long long v36 = v27;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized MainMenuItemCoordinator.mergeInstructions(from:)(&v32);
          uint64_t v29 = v28;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(void *)(v1 + 64) = v29;
        }
        swift_bridgeObjectRelease();
      }
      id v30 = objc_msgSend(self, sel_mainSystem);
      objc_msgSend(v30, sel_setNeedsRebuild);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

id UIMenuBuilder.perform(instruction:)(uint64_t isEscapingClosureAtFileLocation, id a2, char a3)
{
  uint64_t v4 = &selRef_insertSiblingMenu_beforeMenuForIdentifier_;
  switch(a3)
  {
    case 1:
      goto LABEL_4;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = a2;
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = protocol witness for KeyedEncodingContainerProtocol.codingPath.getter in conformance _JSONKeyedEncodingContainer<A>;
      *(void *)(v18 + 24) = v17;
      uint64_t v25 = partial apply for thunk for @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
      uint64_t v26 = v18;
      uint64_t v21 = MEMORY[0x1E4F143A8];
      uint64_t v22 = 1107296256;
      uint64_t v23 = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
      uint64_t v24 = &block_descriptor_49;
      double v19 = _Block_copy(&v21);
      id v20 = (id)isEscapingClosureAtFileLocation;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_release();
      objc_msgSend(v3, sel_replaceChildrenOfMenuForIdentifier_fromChildrenBlock_, v20, v19);

      _Block_release(v19);
      LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      id result = (id)swift_release();
      if (v20)
      {
        __break(1u);
        JUMPOUT(0x187E17D54);
      }
      return result;
    default:
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = a2;
      uint64_t v8 = swift_allocObject();
      *(void *)(v8 + 16) = partial apply for closure #1 in UIMenuBuilder.perform(instruction:);
      *(void *)(v8 + 24) = v7;
      uint64_t v25 = thunk for @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement])partial apply;
      uint64_t v26 = v8;
      uint64_t v21 = MEMORY[0x1E4F143A8];
      uint64_t v22 = 1107296256;
      uint64_t v23 = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
      uint64_t v24 = &block_descriptor_27;
      uint64_t v9 = _Block_copy(&v21);
      a2 = a2;
      id v10 = (id)isEscapingClosureAtFileLocation;
      swift_retain();
      swift_release();
      objc_msgSend(v3, sel_replaceChildrenOfMenuForIdentifier_fromChildrenBlock_, v10, v9);

      _Block_release(v9);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      id result = (id)swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0) {
        return result;
      }
      __break(1u);
LABEL_4:
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = a2;
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = partial apply for closure #2 in UIMenuBuilder.perform(instruction:);
      *(void *)(v13 + 24) = v12;
      uint64_t v25 = thunk for @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement])partial apply;
      uint64_t v26 = v13;
      uint64_t v21 = MEMORY[0x1E4F143A8];
      uint64_t v22 = 1107296256;
      uint64_t v23 = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
      uint64_t v24 = &block_descriptor_17_3;
      uint64_t v14 = _Block_copy(&v21);
      a2 = a2;
      id v15 = (id)isEscapingClosureAtFileLocation;
      swift_retain();
      swift_release();
      objc_msgSend(v3, sel_replaceChildrenOfMenuForIdentifier_fromChildrenBlock_, v15, v14);

      _Block_release(v14);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      id result = (id)swift_release();
      if ((isEscapingClosureAtFileLocation & 1) == 0) {
        return result;
      }
      __break(1u);
LABEL_6:
      uint64_t v4 = &selRef_insertSiblingMenu_afterMenuForIdentifier_;
LABEL_7:
      uint64_t v16 = *v4;
      return objc_msgSend(v3, v16, a2, isEscapingClosureAtFileLocation);
  }
}

uint64_t closure #1 in UIKitMainMenuController.synthesizeSystemMenus(_:)(unint64_t a1)
{
  uint64_t v1 = a1;
  children._rawuint64_t Value = (void *)(a1 >> 62);
  if (a1 >> 62)
  {
LABEL_48:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      Swift::Int v3 = 0;
      unint64_t v4 = v1 & 0xC000000000000001;
      uint64_t v5 = *MEMORY[0x1E4FB2D78];
      do
      {
        if (v4) {
          id v6 = (id)MEMORY[0x18C117680](v3, v1);
        }
        else {
          id v6 = *(id *)(v1 + 8 * v3 + 32);
        }
        uint64_t v7 = v6;
        self;
        uint64_t v8 = swift_dynamicCastObjCClass();
        if (v8)
        {
          uint64_t v9 = (void *)v8;
          id v10 = v7;
          id v11 = objc_msgSend(v9, sel_identifier);
          uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v14 = v13;
          if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15)
          {

            swift_bridgeObjectRelease_n();
LABEL_20:
            uint64_t v33 = v1;
            Swift::Int v19 = v3 + 4;
            if (__OFADD__(v3, 4))
            {
              __break(1u);
            }
            else if (v19 >= v3)
            {
              if (!children._rawValue)
              {
                uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8;
                id v10 = *(id *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                if ((uint64_t)v10 >= v3)
                {
                  uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
                  goto LABEL_30;
                }
LABEL_52:
                __break(1u);
                goto LABEL_53;
              }
              if (v1 < 0) {
                uint64_t v5 = v1;
              }
              else {
                uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8;
              }
              swift_bridgeObjectRetain();
              if (_CocoaArrayWrapper.endIndex.getter() < v3) {
                goto LABEL_52;
              }
              swift_bridgeObjectRetain();
              uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
LABEL_30:
              if (v5 < v19)
              {
LABEL_53:
                __break(1u);
                goto LABEL_54;
              }
              if (v4 && v3 != v19)
              {
                if (v3 < (unint64_t)v19)
                {
                  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
                  _ArrayBuffer._typeCheckSlowPath(_:)(v3);
                  _ArrayBuffer._typeCheckSlowPath(_:)(v3 + 1);
                  _ArrayBuffer._typeCheckSlowPath(_:)(v3 + 2);
                  _ArrayBuffer._typeCheckSlowPath(_:)(v3 + 3);
                  goto LABEL_35;
                }
LABEL_54:
                __break(1u);
LABEL_55:
                __break(1u);
                goto LABEL_56;
              }
LABEL_35:
              if (!children._rawValue)
              {
                uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8;
                id v10 = (id)((v1 & 0xFFFFFFFFFFFFFF8) + 32);
                unint64_t v14 = (2 * v19) | 1;
                swift_bridgeObjectRetain();
                id v11 = (id)v3;
                goto LABEL_39;
              }
              swift_bridgeObjectRetain();
              uint64_t v5 = _CocoaArrayWrapper.subscript.getter();
              id v10 = v20;
              id v11 = v21;
              unint64_t v14 = v22;
              swift_bridgeObjectRelease();
              if (v14)
              {
LABEL_39:
                type metadata accessor for __ContiguousArrayStorageBase();
                swift_unknownObjectRetain_n();
                uint64_t v25 = swift_dynamicCastClass();
                if (!v25)
                {
                  swift_unknownObjectRelease();
                  uint64_t v25 = MEMORY[0x1E4FBC860];
                }
                uint64_t v26 = *(void *)(v25 + 16);
                swift_release();
                if (__OFSUB__(v14 >> 1, v11)) {
                  goto LABEL_55;
                }
                if (v26 != (v14 >> 1) - (void)v11)
                {
LABEL_56:
                  swift_unknownObjectRelease();
                  goto LABEL_38;
                }
                UIMenuElementSize preferredElementSize = swift_dynamicCastClass();
                if (preferredElementSize == UIMenuElementSizeSmall)
                {
                  swift_unknownObjectRelease();
                  UIMenuElementSize preferredElementSize = MEMORY[0x1E4FBC860];
                }
              }
              else
              {
LABEL_38:
                specialized _copyCollectionToContiguousArray<A>(_:)(v5, (uint64_t)v10, (uint64_t)v11, v14);
                UIMenuElementSize preferredElementSize = v23;
              }
              swift_unknownObjectRelease();
              type metadata accessor for _ContiguousArrayStorage<MenuBuilderInstruction>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
              uint64_t v27 = swift_allocObject();
              *(_OWORD *)(v27 + 16) = xmmword_188351940;
              type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
              v34.is_nil = MEMORY[0x18C115780](0xD000000000000029, 0x800000018833A3C0);
              v28._countAndFlagsBits = 0;
              v28._object = (void *)0xE000000000000000;
              v34.value.super.Class isa = 0;
              UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v29, v28, (Swift::String_optional)0, v34, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, children);
              *(void *)(v27 + 32) = v30;
              specialized Array._endMutation()();
              specialized Array.replaceSubrange<A>(_:with:)(v3, v3 + 4, v27);
              return v33;
            }
            __break(1u);
            goto LABEL_52;
          }
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v17) {
            goto LABEL_20;
          }
          Swift::Int v18 = v3 + 1;
          if (__OFADD__(v3, 1))
          {
LABEL_47:
            __break(1u);
            goto LABEL_48;
          }
        }
        else
        {

          Swift::Int v18 = v3 + 1;
          if (__OFADD__(v3, 1)) {
            goto LABEL_47;
          }
        }
        ++v3;
      }
      while (v18 != v2);
    }
  }
  swift_bridgeObjectRetain();
  return v1;
}

Class thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement])(uint64_t a1)
{
  uint64_t v1 = *(void (**)(void))(a1 + 32);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v1();
  swift_bridgeObjectRelease();
  v2.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v2.super.isa;
}

uint64_t closure #2 in UIKitMainMenuController.synthesizeSystemMenus(_:)(UIMenuElementSize a1)
{
  type metadata accessor for _ContiguousArrayStorage<MenuBuilderInstruction>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_188351940;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  char v3 = MEMORY[0x18C115780](0xD00000000000002CLL, 0x800000018833A3F0);
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v9.value.super.Class isa = 0;
  v9.is_nil = v3;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v5, v4, (Swift::String_optional)0, v9, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, a1, v8);
  *(void *)(v2 + 32) = v6;
  specialized Array._endMutation()();
  return v2;
}

uint64_t UIKitMainMenuController.documentCommands()()
{
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v1 = *(void **)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  char v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CommandGroupPlacement(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ContiguousArrayStorage<CommandGroupPlacement>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CommandGroupPlacement>, type metadata accessor for CommandGroupPlacement, MEMORY[0x1E4FBBE00]);
  uint64_t v8 = *(void *)(v5 + 72);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18834BB70;
  uint64_t v11 = v10 + v9;
  if (one-time initialization token for saveItem != -1) {
    goto LABEL_53;
  }
  while (1)
  {
    uint64_t v12 = __swift_project_value_buffer(v4, (uint64_t)static CommandGroupPlacement.saveItem);
    _s7SwiftUI21CommandGroupPlacementVWOcTm_0(v12, v11, type metadata accessor for CommandGroupPlacement);
    uint64_t v47 = v8;
    v8 += v11;
    if (one-time initialization token for printItem != -1) {
      swift_once();
    }
    uint64_t v46 = v4;
    uint64_t v13 = __swift_project_value_buffer(v4, (uint64_t)static CommandGroupPlacement.printItem);
    _s7SwiftUI21CommandGroupPlacementVWOcTm_0(v13, v8, type metadata accessor for CommandGroupPlacement);
    unint64_t v14 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_topLevelItemCoordinators);
    swift_beginAccess();
    uint64_t v15 = *v14;
    uint64_t v16 = *(void *)(*v14 + 64);
    uint64_t v39 = *v14 + 64;
    uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
    uint64_t v18 = -1;
    if (v17 < 64) {
      uint64_t v18 = ~(-1 << v17);
    }
    uint64_t v4 = v18 & v16;
    int64_t v40 = (unint64_t)(v17 + 63) >> 6;
    Swift::Int v19 = (void (**)(char *, char *, uint64_t))(v1 + 2);
    id v20 = (void (**)(char *, uint64_t))(v1 + 1);
    uint64_t v42 = v15;
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v22 = 0;
    uint64_t v1 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v45 = v11;
    uint64_t v0 = v47;
    uint64_t v41 = v10;
LABEL_8:
    if (v4)
    {
      unint64_t v23 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v24 = v23 | (v22 << 6);
LABEL_26:
      if (*(void *)(v10 + 16) >= 2uLL)
      {
        uint64_t v43 = v4;
        int64_t v44 = v22;
        uint64_t v48 = *(void *)(*(void *)(v42 + 56) + 8 * v24);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        while (1)
        {
          uint64_t v10 = v28;
          uint64_t v30 = *(void *)(v48 + 40);
          _s7SwiftUI21CommandGroupPlacementVWOcTm_0(v11 + v29 * v0, (uint64_t)v7, type metadata accessor for CommandGroupPlacement);
          (*v19)(v3, &v7[*(int *)(v46 + 20)], v49);
          uint64_t v31 = *(void *)(v30 + 16);
          swift_bridgeObjectRetain();
          if (v31)
          {
            unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v3);
            uint64_t v0 = MEMORY[0x1E4FBC860];
            if (v33)
            {
              uint64_t v0 = *(void *)(*(void *)(v30 + 56) + 8 * v32);
              swift_bridgeObjectRetain();
            }
          }
          else
          {
            uint64_t v0 = MEMORY[0x1E4FBC860];
          }
          uint64_t v11 = (uint64_t)v3;
          (*v20)(v3, v49);
          swift_bridgeObjectRelease();
          outlined destroy of CommandGroupPlacement((uint64_t)v7, type metadata accessor for CommandGroupPlacement);
          uint64_t v8 = *(void *)(v0 + 16);
          uint64_t v4 = v1[2];
          char v3 = (char *)(v4 + v8);
          if (__OFADD__(v4, v8)) {
            break;
          }
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if (!isUniquelyReferenced_nonNull_native || (uint64_t)v3 > v1[3] >> 1)
          {
            if (v4 <= (uint64_t)v3) {
              int64_t v35 = v4 + v8;
            }
            else {
              int64_t v35 = v4;
            }
            uint64_t v1 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v35, 1, v1);
          }
          char v3 = (char *)v11;
          if (*(void *)(v0 + 16))
          {
            uint64_t v4 = v1[2];
            char v3 = (char *)((v1[3] >> 1) - v4);
            type metadata accessor for PlatformItemList.Item();
            if ((uint64_t)v3 < v8) {
              goto LABEL_49;
            }
            swift_arrayInitWithCopy();
            char v3 = (char *)v11;
            uint64_t v11 = v45;
            if (v8)
            {
              uint64_t v36 = v1[2];
              BOOL v37 = __OFADD__(v36, v8);
              uint64_t v38 = v36 + v8;
              if (v37) {
                goto LABEL_50;
              }
              v1[2] = v38;
            }
          }
          else
          {
            uint64_t v11 = v45;
            if (v8) {
              goto LABEL_48;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v28 = 1;
          uint64_t v29 = 1;
          uint64_t v0 = v47;
          if (v10)
          {
            swift_release();
            uint64_t v10 = v41;
            uint64_t result = swift_bridgeObjectRelease();
            uint64_t v4 = v43;
            int64_t v22 = v44;
            goto LABEL_8;
          }
        }
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
      }
      __break(1u);
      goto LABEL_52;
    }
    int64_t v25 = v22 + 1;
    if (!__OFADD__(v22, 1)) {
      break;
    }
LABEL_52:
    __break(1u);
LABEL_53:
    swift_once();
  }
  if (v25 >= v40) {
    goto LABEL_46;
  }
  unint64_t v26 = *(void *)(v39 + 8 * v25);
  ++v22;
  if (v26) {
    goto LABEL_25;
  }
  int64_t v22 = v25 + 1;
  if (v25 + 1 >= v40) {
    goto LABEL_46;
  }
  unint64_t v26 = *(void *)(v39 + 8 * v22);
  if (v26) {
    goto LABEL_25;
  }
  int64_t v22 = v25 + 2;
  if (v25 + 2 >= v40) {
    goto LABEL_46;
  }
  unint64_t v26 = *(void *)(v39 + 8 * v22);
  if (v26) {
    goto LABEL_25;
  }
  int64_t v22 = v25 + 3;
  if (v25 + 3 >= v40) {
    goto LABEL_46;
  }
  unint64_t v26 = *(void *)(v39 + 8 * v22);
  if (v26)
  {
LABEL_25:
    uint64_t v4 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v22 << 6);
    goto LABEL_26;
  }
  int64_t v27 = v25 + 4;
  if (v27 >= v40)
  {
LABEL_46:
    swift_release();
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    return (uint64_t)v1;
  }
  unint64_t v26 = *(void *)(v39 + 8 * v27);
  if (v26)
  {
    int64_t v22 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v22 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v22 >= v40) {
      goto LABEL_46;
    }
    unint64_t v26 = *(void *)(v39 + 8 * v22);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for UIKitMainMenuController()
{
  return self;
}

uint64_t MainMenuItemCoordinator.init(_:environment:)(uint64_t a1, unint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for MainMenuItem(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *a2;
  unint64_t v10 = a2[1];
  uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v12 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(unsigned char *)(v3 + 24) = 0;
  uint64_t v13 = MEMORY[0x1E4FBC868];
  *(void *)(v3 + 32) = MEMORY[0x1E4FBC868];
  *(void *)(v3 + 40) = v12;
  *(void *)(v3 + 48) = v11;
  *(void *)(v3 + 56) = v13;
  *(void *)(v3 + 64) = v11;
  *(unsigned char *)(v3 + 72) = 1;
  _s7SwiftUI21CommandGroupPlacementVWOcTm_0(a1, (uint64_t)v8, type metadata accessor for MainMenuItem);
  v24[0] = v9;
  v24[1] = v10;
  uint64_t v21 = 0;
  char v22 = 0;
  int v23 = 0;
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(v11);
  int v18 = 0;
  Swift::Int v19 = v11;
  unint64_t v20 = v14;
  type metadata accessor for MainMenuItemHost(0);
  swift_allocObject();
  uint64_t v15 = MainMenuItemHost.init(_:environment:focusedValues:focusStore:)((uint64_t)v8, v24, (uint64_t)&v21, &v18);
  outlined destroy of CommandGroupPlacement(a1, type metadata accessor for MainMenuItem);
  *(void *)(v3 + 16) = v15;
  *(uint64_t *)((char *)v15 + OBJC_IVAR____TtC7SwiftUI16MainMenuItemHost_delegate + 8) = (uint64_t)&protocol witness table for MainMenuItemCoordinator;
  swift_unknownObjectUnownedAssign();
  return v3;
}

id closure #1 in MainMenuItemCoordinator.mergeInstructions(from:)@<X0>(id *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  unint64_t v92 = a4;
  unint64_t v91 = a3;
  unint64_t v93 = a5;
  uint64_t v7 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ContiguousArrayStorage<CommandGroupPlacement>(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  unint64_t v12 = (char *)&v90 - v11;
  uint64_t v13 = type metadata accessor for CommandOperation();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (unsigned __int8 *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a2 + 32);
  if (!*(void *)(v18 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v14 + 56))(v12, 1, 1, v13, v15);
LABEL_7:
    id result = (id)_sypSgWOhTm_8((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for CommandOperation?, (uint64_t)type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<CommandGroupPlacement>);
LABEL_22:
    uint64_t v39 = v93;
    *unint64_t v93 = 0;
    v39[1] = 0;
    char v40 = -1;
LABEL_23:
    *((unsigned char *)v39 + 16) = v40;
    return result;
  }
  id v19 = *a1;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19);
  if (v21)
  {
    _s7SwiftUI21CommandGroupPlacementVWOcTm_0(*(void *)(v18 + 56) + *(void *)(v14 + 72) * v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  }

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1) {
    goto LABEL_7;
  }
  outlined init with take of CommandOperation((uint64_t)v12, (uint64_t)v17);
  uint64_t v23 = (uint64_t)v9;
  _s7SwiftUI21CommandGroupPlacementVWOcTm_0((uint64_t)&v17[*(int *)(v13 + 20)], (uint64_t)v9, type metadata accessor for CommandGroupPlacement);
  int v24 = *v17;
  self;
  int64_t v25 = (void *)swift_dynamicCastObjCClass();
  if (v25) {
    id v26 = v19;
  }
  if (one-time initialization token for placements != -1) {
    swift_once();
  }
  int64_t v27 = static MenuBuilderInstruction.placements;
  if (!*((void *)static MenuBuilderInstruction.placements + 2)
    || (unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v9[*(int *)(v7 + 20)]), (v29 & 1) == 0))
  {

    outlined destroy of CommandGroupPlacement((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    id result = (id)outlined destroy of CommandGroupPlacement((uint64_t)v9, type metadata accessor for CommandGroupPlacement);
    goto LABEL_22;
  }
  uint64_t v30 = *(void **)(v27[7] + 8 * v28);
  if (v24 == 2)
  {
    uint64_t v41 = v92;
    if (v25)
    {
      id v42 = v30;
      if (objc_msgSend(v25, sel_options))
      {
        uint64_t v43 = *v41;
        if (*(void *)(*v41 + 16))
        {
          id v44 = v42;
          uint64_t v45 = specialized __RawDictionaryStorage.find<A>(_:)(v44);
          if (v46)
          {
            uint64_t v47 = *(void *)(*(void *)(v43 + 56) + 8 * v45);
            swift_bridgeObjectRetain();

            uint64_t v95 = v47;
            id v48 = objc_msgSend(v25, sel_children);
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
            unint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            specialized Array.append<A>(contentsOf:)(v49);
            uint64_t v50 = v95;
            id v51 = v44;
            uint64_t v52 = v92;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v94 = *v52;
            *uint64_t v52 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v50, v51, isUniquelyReferenced_nonNull_native);
            *uint64_t v52 = v94;

LABEL_55:
            swift_bridgeObjectRelease();
            outlined destroy of CommandGroupPlacement((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CommandOperation);
            id result = (id)outlined destroy of CommandGroupPlacement(v23, type metadata accessor for CommandGroupPlacement);
            id v38 = 0;
            int64_t v25 = 0;
            char v60 = -1;
            goto LABEL_52;
          }

          uint64_t v41 = v92;
        }
        id v86 = objc_msgSend(v25, sel_children);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
        uint64_t v87 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        id v88 = v42;
        char v89 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v95 = *v41;
        *uint64_t v41 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v87, v88, v89);
        *uint64_t v41 = v95;

        goto LABEL_55;
      }
    }
    else
    {
      id v61 = v30;
    }
    uint64_t v62 = *v41;
    if (*(void *)(*v41 + 16))
    {
      id v63 = v30;
      uint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v63);
      if (v65)
      {
        uint64_t v66 = *(void *)(*(void *)(v62 + 56) + 8 * v64);
        swift_bridgeObjectRetain();

        uint64_t v95 = v66;
        id v67 = v19;
        MEMORY[0x18C115B40]();
        if (*(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v68 = v95;
        id v69 = v63;
        uint64_t v70 = v92;
        char v71 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v94 = *v70;
        uint64_t *v70 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v68, v69, v71);
        uint64_t *v70 = v94;

        goto LABEL_46;
      }
    }
    type metadata accessor for _ContiguousArrayStorage<MenuBuilderInstruction>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v76 = swift_allocObject();
    *(_OWORD *)(v76 + 16) = xmmword_188351940;
    *(void *)(v76 + 32) = v19;
    uint64_t v95 = v76;
    specialized Array._endMutation()();
    uint64_t v77 = v95;
    id v78 = v19;
    id v79 = v30;
    char v80 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v95 = *v41;
    *uint64_t v41 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v77, v79, v80);
    *uint64_t v41 = v95;

LABEL_46:
    swift_bridgeObjectRelease();
    goto LABEL_47;
  }
  if (v24 == 1)
  {
    if (v25)
    {
      id v54 = v30;
      outlined destroy of CommandGroupPlacement((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CommandOperation);
      id result = (id)outlined destroy of CommandGroupPlacement((uint64_t)v9, type metadata accessor for CommandGroupPlacement);
      uint64_t v39 = v93;
      *unint64_t v93 = v54;
      v39[1] = v25;
      char v40 = 2;
      goto LABEL_23;
    }
    uint64_t v72 = *(void *)(*v92 + 16);
    id v73 = v30;
    id v38 = v73;
    if (!v72
      || (id v57 = v73,
          specialized __RawDictionaryStorage.find<A>(_:)(v57),
          char v75 = v74,
          v57,
          (v75 & 1) == 0))
    {
      outlined destroy of CommandGroupPlacement((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CommandOperation);
      outlined destroy of CommandGroupPlacement((uint64_t)v9, type metadata accessor for CommandGroupPlacement);
      id result = v19;
      char v60 = 0;
      int64_t v25 = v19;
      goto LABEL_52;
    }
    goto LABEL_42;
  }
  if (v24)
  {
LABEL_47:

    goto LABEL_48;
  }
  if (v25)
  {
    uint64_t v31 = *v91;
    uint64_t v32 = *(void *)(*v91 + 16);
    id v33 = v30;
    UIImage_optional v34 = v33;
    if (v32)
    {
      id v35 = v33;
      uint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v35);
      if (v37)
      {
        id v38 = *(id *)(*(void *)(v31 + 56) + 8 * v36);

LABEL_51:
        id v81 = objc_msgSend(v25, sel_identifier);
        id v82 = v34;
        uint64_t v83 = v91;
        char v84 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v95 = *v83;
        uint64_t *v83 = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v81, v82, v84);
        uint64_t *v83 = v95;

        swift_bridgeObjectRelease();
        outlined destroy of CommandGroupPlacement((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CommandOperation);
        id result = (id)outlined destroy of CommandGroupPlacement(v23, type metadata accessor for CommandGroupPlacement);
        char v60 = 3;
        goto LABEL_52;
      }
    }
    id v38 = v34;
    goto LABEL_51;
  }
  uint64_t v55 = *(void *)(*v92 + 16);
  id v56 = v30;
  id v38 = v56;
  if (v55)
  {
    id v57 = v56;
    specialized __RawDictionaryStorage.find<A>(_:)(v57);
    char v59 = v58;

    if (v59)
    {
LABEL_42:

LABEL_48:
      outlined destroy of CommandGroupPlacement((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CommandOperation);
      id result = (id)outlined destroy of CommandGroupPlacement(v23, type metadata accessor for CommandGroupPlacement);
      id v38 = 0;
      int64_t v25 = 0;
      char v60 = -1;
      goto LABEL_52;
    }
  }
  outlined destroy of CommandGroupPlacement((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for CommandOperation);
  outlined destroy of CommandGroupPlacement((uint64_t)v9, type metadata accessor for CommandGroupPlacement);
  id result = v19;
  char v60 = 1;
  int64_t v25 = v19;
LABEL_52:
  uint64_t v85 = v93;
  *unint64_t v93 = v38;
  v85[1] = v25;
  *((unsigned char *)v85 + 16) = v60;
  return result;
}

uint64_t MainMenuItemCoordinator.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MainMenuItemCoordinator()
{
  return self;
}

id outlined copy of MenuBuilderInstruction(id result, void *a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      id v3 = result;
      id result = a2;
      break;
    case 4:
      id v4 = result;
      id result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void destroy for MenuBuilderInstruction(uint64_t a1)
{
}

void outlined consume of MenuBuilderInstruction(void *a1, void *a2, char a3)
{
  switch(a3)
  {
    case 0:
    case 1:
    case 2:
    case 3:

      break;
    case 4:

      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for MenuBuilderInstruction(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  id v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MenuBuilderInstruction(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for MenuBuilderInstruction(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  id v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of MenuBuilderInstruction(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of MenuBuilderInstruction(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for MenuBuilderInstruction(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  id v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of MenuBuilderInstruction(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for MenuBuilderInstruction()
{
  return &type metadata for MenuBuilderInstruction;
}

void *one-time initialization function for placements()
{
  type metadata accessor for _ContiguousArrayStorage<CommandGroupPlacement>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(UUID, UIMenuIdentifier)>, (uint64_t (*)(uint64_t))type metadata accessor for (UUID, UIMenuIdentifier), MEMORY[0x1E4FBBE00]);
  type metadata accessor for (UUID, UIMenuIdentifier)();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(*(void *)(v0 - 8) + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v0 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v0 - 8) + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1883A50A0;
  uint64_t v91 = v4;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = *(int *)(v1 + 48);
  if (one-time initialization token for appInfo != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for CommandGroupPlacement(0);
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.appInfo) + *(int *)(v7 + 20);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  v10(v5, v8, v9);
  uint64_t v11 = (void *)*MEMORY[0x1E4FB2C80];
  *(void *)(v5 + v6) = *MEMORY[0x1E4FB2C80];
  uint64_t v12 = *(int *)(v1 + 48);
  uint64_t v13 = one-time initialization token for appSettings;
  id v14 = v11;
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v15 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.appSettings);
  v10(v5 + v2, v15 + *(int *)(v7 + 20), v9);
  uint64_t v16 = (void *)*MEMORY[0x1E4FB2D30];
  *(void *)(v5 + v2 + v12) = *MEMORY[0x1E4FB2D30];
  uint64_t v17 = *(int *)(v1 + 48);
  uint64_t v18 = one-time initialization token for systemServices;
  id v19 = v16;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.systemServices);
  v10(v5 + 2 * v2, v20 + *(int *)(v7 + 20), v9);
  char v21 = (void *)*MEMORY[0x1E4FB2D58];
  *(void *)(v5 + 2 * v2 + v17) = *MEMORY[0x1E4FB2D58];
  uint64_t v22 = *(int *)(v1 + 48);
  uint64_t v23 = one-time initialization token for appVisibility;
  id v24 = v21;
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v25 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.appVisibility);
  v10(v5 + 3 * v2, v25 + *(int *)(v7 + 20), v9);
  id v26 = (void *)*MEMORY[0x1E4FB2D00];
  *(void *)(v5 + 3 * v2 + v22) = *MEMORY[0x1E4FB2D00];
  uint64_t v27 = *(int *)(v1 + 48);
  uint64_t v28 = one-time initialization token for appTermination;
  id v29 = v26;
  if (v28 != -1) {
    swift_once();
  }
  uint64_t v30 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.appTermination);
  v10(v5 + 4 * v2, v30 + *(int *)(v7 + 20), v9);
  uint64_t v31 = (void *)*MEMORY[0x1E4FB2D40];
  *(void *)(v5 + 4 * v2 + v27) = *MEMORY[0x1E4FB2D40];
  uint64_t v32 = *(int *)(v1 + 48);
  uint64_t v33 = one-time initialization token for newItem;
  id v34 = v31;
  if (v33 != -1) {
    swift_once();
  }
  uint64_t v35 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.newItem);
  v10(v5 + 5 * v2, v35 + *(int *)(v7 + 20), v9);
  uint64_t v36 = (void *)*MEMORY[0x1E4FB2D20];
  *(void *)(v5 + 5 * v2 + v32) = *MEMORY[0x1E4FB2D20];
  uint64_t v37 = *(int *)(v1 + 48);
  uint64_t v38 = one-time initialization token for saveItem;
  id v39 = v36;
  if (v38 != -1) {
    swift_once();
  }
  uint64_t v40 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.saveItem);
  v10(v5 + 6 * v2, v40 + *(int *)(v7 + 20), v9);
  uint64_t v41 = (void *)*MEMORY[0x1E4FB2CA8];
  *(void *)(v5 + 6 * v2 + v37) = *MEMORY[0x1E4FB2CA8];
  uint64_t v42 = *(int *)(v1 + 48);
  uint64_t v43 = one-time initialization token for importExport;
  id v44 = v41;
  if (v43 != -1) {
    swift_once();
  }
  uint64_t v45 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.importExport);
  v10(v5 - v2 + 8 * v2, v45 + *(int *)(v7 + 20), v9);
  *(void *)(v5 - v2 + 8 * v2 + v42) = MEMORY[0x18C115780](0xD00000000000002ALL, 0x800000018833A390);
  uint64_t v46 = *(int *)(v1 + 48);
  if (one-time initialization token for printItem != -1) {
    swift_once();
  }
  uint64_t v47 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.printItem);
  v10(v5 + 8 * v2, v47 + *(int *)(v7 + 20), v9);
  id v48 = (void *)*MEMORY[0x1E4FB2D38];
  *(void *)(v5 + 8 * v2 + v46) = *MEMORY[0x1E4FB2D38];
  uint64_t v49 = *(int *)(v1 + 48);
  uint64_t v50 = one-time initialization token for undoRedo;
  id v51 = v48;
  if (v50 != -1) {
    swift_once();
  }
  uint64_t v52 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.undoRedo);
  v10(v5 + 9 * v2, v52 + *(int *)(v7 + 20), v9);
  uint64_t v53 = (void *)*MEMORY[0x1E4FB2DE8];
  *(void *)(v5 + 9 * v2 + v49) = *MEMORY[0x1E4FB2DE8];
  uint64_t v54 = *(int *)(v1 + 48);
  uint64_t v55 = one-time initialization token for pasteboard;
  id v56 = v53;
  if (v55 != -1) {
    swift_once();
  }
  uint64_t v57 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.pasteboard);
  v10(v5 + 10 * v2, v57 + *(int *)(v7 + 20), v9);
  char v58 = (void *)*MEMORY[0x1E4FB2D90];
  *(void *)(v5 + 10 * v2 + v54) = *MEMORY[0x1E4FB2D90];
  uint64_t v59 = *(int *)(v1 + 48);
  uint64_t v60 = one-time initialization token for textEditing;
  id v61 = v58;
  if (v60 != -1) {
    swift_once();
  }
  uint64_t v62 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.textEditing);
  v10(v5 + 11 * v2, v62 + *(int *)(v7 + 20), v9);
  *(void *)(v5 + 11 * v2 + v59) = MEMORY[0x18C115780](0xD000000000000029, 0x800000018833A3C0);
  uint64_t v63 = *(int *)(v1 + 48);
  if (one-time initialization token for textFormatting != -1) {
    swift_once();
  }
  uint64_t v64 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.textFormatting);
  v10(v5 + 12 * v2, v64 + *(int *)(v7 + 20), v9);
  *(void *)(v5 + 12 * v2 + v63) = MEMORY[0x18C115780](0xD00000000000002CLL, 0x800000018833A3F0);
  uint64_t v65 = *(int *)(v1 + 48);
  if (one-time initialization token for toolbar != -1) {
    swift_once();
  }
  uint64_t v66 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.toolbar);
  v10(v5 + 13 * v2, v66 + *(int *)(v7 + 20), v9);
  id v67 = (void *)*MEMORY[0x1E4FB2DD8];
  *(void *)(v5 + 13 * v2 + v65) = *MEMORY[0x1E4FB2DD8];
  uint64_t v68 = *(int *)(v1 + 48);
  uint64_t v69 = one-time initialization token for sidebar;
  id v70 = v67;
  if (v69 != -1) {
    swift_once();
  }
  uint64_t v71 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.sidebar);
  v10(v5 + 14 * v2, v71 + *(int *)(v7 + 20), v9);
  uint64_t v72 = (void *)*MEMORY[0x1E4FB2CF0];
  *(void *)(v5 + 14 * v2 + v68) = *MEMORY[0x1E4FB2CF0];
  uint64_t v73 = v5 - v2 + 16 * v2;
  uint64_t v74 = *(int *)(v1 + 48);
  uint64_t v75 = one-time initialization token for windowSize;
  id v76 = v72;
  if (v75 != -1) {
    swift_once();
  }
  uint64_t v77 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.windowSize);
  v10(v73, v77 + *(int *)(v7 + 20), v9);
  id v78 = (void *)*MEMORY[0x1E4FB2D18];
  *(void *)(v73 + v74) = *MEMORY[0x1E4FB2D18];
  uint64_t v79 = *(int *)(v1 + 48);
  uint64_t v80 = one-time initialization token for windowArrangement;
  id v81 = v78;
  if (v80 != -1) {
    swift_once();
  }
  uint64_t v82 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.windowArrangement);
  v10(v5 + 16 * v2, v82 + *(int *)(v7 + 20), v9);
  uint64_t v83 = (void *)*MEMORY[0x1E4FB2CA0];
  *(void *)(v5 + 16 * v2 + v79) = *MEMORY[0x1E4FB2CA0];
  uint64_t v84 = *(int *)(v1 + 48);
  uint64_t v85 = one-time initialization token for help;
  id v86 = v83;
  if (v85 != -1) {
    swift_once();
  }
  uint64_t v87 = __swift_project_value_buffer(v7, (uint64_t)static CommandGroupPlacement.help);
  v10(v5 + 17 * v2, v87 + *(int *)(v7 + 20), v9);
  id v88 = (void *)*MEMORY[0x1E4FB2CF8];
  *(void *)(v5 + 17 * v2 + v84) = *MEMORY[0x1E4FB2CF8];
  id v89 = v88;
  id result = (void *)specialized Dictionary.init(dictionaryLiteral:)(v91);
  static MenuBuilderInstruction.placements = result;
  return result;
}

uint64_t closure #1 in UIMenuBuilder.perform(instruction:)(uint64_t a1, void *a2)
{
  type metadata accessor for _ContiguousArrayStorage<MenuBuilderInstruction>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_188351940;
  *(void *)(v3 + 32) = a2;
  uint64_t v7 = v3;
  specialized Array._endMutation()();
  id v4 = a2;
  unint64_t v5 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v5);
  return v7;
}

uint64_t closure #2 in UIMenuBuilder.perform(instruction:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = swift_bridgeObjectRetain();
  MEMORY[0x18C115B40](v3);
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

  return a1;
}

unint64_t lazy protocol witness table accessor for type MainMenuItemHost and conformance MainMenuItemHost()
{
  unint64_t result = lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost;
  if (!lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost)
  {
    type metadata accessor for MainMenuItemHost(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MainMenuItemHost and conformance MainMenuItemHost);
  }
  return result;
}

void specialized UIKitMainMenuController.scenesDidChange(phaseChanged:)()
{
  if (static AppGraph.shared)
  {
    if (*(_DWORD *)(static AppGraph.shared + 232) == *MEMORY[0x1E4F4E7A0])
    {
      uint64_t v1 = MEMORY[0x1E4FBC860];
    }
    else
    {
      uint64_t v1 = *(void *)AGGraphGetValue();
      swift_bridgeObjectRetain();
    }
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_commandsList);
    *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI23UIKitMainMenuController_commandsList) = v1;
    swift_retain();
    uint64_t v3 = swift_bridgeObjectRetain();
    char v4 = specialized static CommandsList.== infix(_:_:)(v3, v2);
    swift_bridgeObjectRelease();
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      id v5 = objc_msgSend(self, sel_mainSystem);
      objc_msgSend(v5, sel_setNeedsRebuild);
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
}

char *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
    for (uint64_t i = 4; ; ++i)
    {
      id v10 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C117680](i - 4, a1) : *(id *)(a1 + 8 * i);
      uint64_t v11 = v10;
      uint64_t v12 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v23 = v10;
      closure #1 in MainMenuItemCoordinator.mergeInstructions(from:)(&v23, a2, a3, a4, &v21);
      if (v4)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v7;
      }

      char v13 = v22;
      if (v22 != 255)
      {
        long long v20 = v21;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v15 = *((void *)v7 + 2);
        unint64_t v14 = *((void *)v7 + 3);
        if (v15 >= v14 >> 1) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, v7);
        }
        *((void *)v7 + 2) = v15 + 1;
        uint64_t v9 = &v7[24 * v15];
        *((_OWORD *)v9 + 2) = v20;
        v9[48] = v13;
      }
      if (v12 == v6)
      {
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return (char *)MEMORY[0x1E4FBC860];
}

uint64_t specialized UIKitMainMenuController.synthesizeSystemMenus(_:)(void *a1)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  v17.is_nil = MEMORY[0x18C115780](0xD00000000000002ALL, 0x800000018833A390);
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v17.value.super.Class isa = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(MEMORY[0x1E4FBC860], v2, (Swift::String_optional)0, v17, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, MEMORY[0x1E4FBC860], v10);
  uint64_t v4 = v3;
  objc_msgSend(a1, sel_insertSiblingMenu_afterMenuForIdentifier_, v3, *MEMORY[0x1E4FB2CA8]);

  uint64_t v5 = *MEMORY[0x1E4FB2CC8];
  unint64_t v15 = specialized thunk for @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
  uint64_t v16 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v12 = 1107296256;
  char v13 = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
  unint64_t v14 = &block_descriptor_30;
  uint64_t v6 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(a1, sel_replaceChildrenOfMenuForIdentifier_fromChildrenBlock_, v5, v6);
  _Block_release(v6);
  uint64_t result = swift_isEscapingClosureAtFileLocation();
  if (result)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v8 = *MEMORY[0x1E4FB2CE8];
  unint64_t v15 = specialized thunk for @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
  uint64_t v16 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v12 = 1107296256;
  char v13 = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement]);
  unint64_t v14 = &block_descriptor_33;
  uint64_t v9 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(a1, sel_replaceChildrenOfMenuForIdentifier_fromChildrenBlock_, v8, v9);
  _Block_release(v9);
  uint64_t result = swift_isEscapingClosureAtFileLocation();
  if (result) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void specialized MainMenuItemCoordinator.mergeInstructions(from:)(void *a1)
{
  uint64_t v23 = MEMORY[0x1E4FBC868];
  uint64_t v24 = MEMORY[0x1E4FBC868];
  uint64_t v2 = a1[1];
  uint64_t v26 = a1[2];
  uint64_t v27 = v2;
  unint64_t v3 = a1[3];
  uint64_t v25 = a1[4];
  outlined retain of [Text.Modifier]((uint64_t)&v27);
  outlined retain of [Text.Modifier]((uint64_t)&v26);
  swift_bridgeObjectRetain();
  outlined retain of [Text.Modifier]((uint64_t)&v25);
  uint64_t v4 = specialized Sequence.compactMap<A>(_:)(v3, (uint64_t)a1, &v24, &v23);
  outlined release of _LazyLayout_Placements((uint64_t)&v27);
  outlined release of _LazyLayout_Placements((uint64_t)&v26);
  outlined release of _LazyLayout_Placements((uint64_t)&v25);
  swift_bridgeObjectRelease();
  uint64_t v5 = v23;
  uint64_t v6 = v23 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v23 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v23 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = 8 * i;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + v17);
    id v19 = *(id *)(*(void *)(v5 + 48) + v17);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
    }
    unint64_t v21 = *((void *)v4 + 2);
    unint64_t v20 = *((void *)v4 + 3);
    if (v21 >= v20 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, v4);
    }
    *((void *)v4 + 2) = v21 + 1;
    unsigned __int8 v22 = &v4[24 * v21];
    *((void *)v22 + 4) = v19;
    *((void *)v22 + 5) = v18;
    unsigned char v22[48] = 4;

    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v10) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v10) {
        goto LABEL_25;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v10) {
          goto LABEL_25;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v9 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v10)
  {
LABEL_25:
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v10) {
      goto LABEL_25;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_27:
  __break(1u);
}

uint64_t outlined init with take of CommandOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommandOperation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<CommandGroupPlacement>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (UUID, UIMenuIdentifier)()
{
  if (!lazy cache variable for type metadata for (UUID, UIMenuIdentifier))
  {
    type metadata accessor for UUID();
    type metadata accessor for UIMenuIdentifier(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UUID, UIMenuIdentifier));
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<MenuBuilderInstruction>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined assign with copy of MainMenuItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MainMenuItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_187E1B060()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187E1B098()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned [UIMenuElement])()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #2 in UIMenuBuilder.perform(instruction:)(uint64_t a1)
{
  return closure #2 in UIMenuBuilder.perform(instruction:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_187E1B0D8()
{
  return swift_deallocObject();
}

uint64_t sub_187E1B0E8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIMenuBuilder.perform(instruction:)(uint64_t a1)
{
  return closure #1 in UIMenuBuilder.perform(instruction:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_187E1B128()
{
  return swift_deallocObject();
}

uint64_t TitleAndIconLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = static VerticalAlignment.firstTextLineCenter.getter();
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = static VerticalAlignment.firstTextLineCenter.getter();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = v5;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = result;
  *(unsigned char *)(a1 + 104) = 0;
  return result;
}

uint64_t key path getter for EnvironmentValues.multilineTextAlignment : EnvironmentValues, serialized@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187E1B248@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multilineTextAlignment.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.multilineTextAlignment : EnvironmentValues, serialized()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

uint64_t sub_187E1B29C()
{
  return EnvironmentValues.multilineTextAlignment.setter();
}

ValueMetadata *type metadata accessor for EffectiveFormStyleKey()
{
  return &type metadata for EffectiveFormStyleKey;
}

void UtilityWindow.init(_:id:content:)(uint64_t a1, uint64_t a2, char a3)
{
}

void UtilityWindow.init(_:id:content:)()
{
}

void UtilityWindow.init<A>(_:id:content:)()
{
}

void UtilityWindow.body.getter()
{
}

uint64_t associated type witness table accessor for Scene.Body : Scene in UtilityWindow<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for UtilityWindow()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UtilityWindow(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 48) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    unint64_t v11 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v13 = *(void *)v12;
    uint64_t v14 = *(void *)(v12 + 8);
    char v15 = *(unsigned char *)(v12 + 16);
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v13, v14, v15);
    *(void *)unint64_t v11 = v13;
    *(void *)(v11 + 8) = v14;
    *(unsigned char *)(v11 + 16) = v15;
    *(void *)(v11 + 24) = *(void *)(v12 + 24);
    int64_t v16 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v16((v11 + v6 + 32) & ~v6, (v12 + v6 + 32) & ~v6, v4);
  }
  return a1;
}

uint64_t destroy for UtilityWindow(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  unint64_t v4 = (a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

void *initializeWithCopy for UtilityWindow(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  unint64_t v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  char v10 = *(unsigned char *)(v7 + 16);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v8, v9, v10);
  *(void *)unint64_t v6 = v8;
  *(void *)(v6 + 8) = v9;
  *(unsigned char *)(v6 + 16) = v10;
  *(void *)(v6 + 24) = *(void *)(v7 + 24);
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 32 + v6) & ~v14;
  uint64_t v16 = (v14 + 32 + v7) & ~v14;
  swift_bridgeObjectRetain();
  v13(v15, v16, v11);
  return a1;
}

void *assignWithCopy for UtilityWindow(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v6 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(void *)(v7 + 8);
  char v10 = *(unsigned char *)(v7 + 16);
  outlined copy of Text.Storage(*(void *)v7, v9, v10);
  uint64_t v11 = *(void *)v6;
  uint64_t v12 = *(void *)(v6 + 8);
  char v13 = *(unsigned char *)(v6 + 16);
  *(void *)unint64_t v6 = v8;
  *(void *)(v6 + 8) = v9;
  *(unsigned char *)(v6 + 16) = v10;
  outlined consume of Text.Storage(v11, v12, v13);
  *(void *)(v6 + 24) = *(void *)(v7 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 24))((*(unsigned __int8 *)(v14 + 80) + 32 + v6) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (*(unsigned __int8 *)(v14 + 80) + 32 + v7) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

_OWORD *initializeWithTake for UtilityWindow(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v6 = v5[1];
  *unint64_t v4 = *v5;
  v4[1] = v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

void *assignWithTake for UtilityWindow(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  unint64_t v7 = ((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 16);
  uint64_t v10 = *(void *)v7;
  uint64_t v11 = *(void *)(v7 + 8);
  char v12 = *(unsigned char *)(v7 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))((*(unsigned __int8 *)(v13 + 80) + 32 + v7) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(unsigned __int8 *)(v13 + 80) + 32 + v8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for UtilityWindow(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 48) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 32) & ~v6);
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for UtilityWindow(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 48) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187E1BD78);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 32) & ~v9;
          id v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for UtilityWindow()
{
  return __swift_instantiateGenericMetadata();
}

void static ButtonStyle<>.largeSidebarFooterAdd.getter()
{
}

void LargeSidebarFooterAddButtonStyle.makeBody(configuration:)()
{
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in LargeSidebarFooterAddButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for LargeSidebarFooterAddButtonStyle()
{
  return &type metadata for LargeSidebarFooterAddButtonStyle;
}

uint64_t initializeWithCopy for HoverEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HoverEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for HoverEvent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEvent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEvent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEvent()
{
  return &type metadata for HoverEvent;
}

uint64_t protocol witness for EventType.init(_:) in conformance HoverEvent@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for EventType();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *(void *)a1 = v3;
    *(unsigned char *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 24) = v6;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 16) = 1;
  }
  return result;
}

BOOL specialized static HoverEvent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  double v6 = *(double *)(a1 + 24);
  double v5 = *(double *)(a1 + 32);
  uint64_t v7 = *(void *)(a2 + 16);
  if (!v4)
  {
    if (!v7) {
      return v5 == *(double *)(a2 + 32) && v6 == *(double *)(a2 + 24);
    }
    goto LABEL_15;
  }
  if (!v7)
  {
    swift_retain();
LABEL_15:
    swift_release();
    return 0;
  }
  if (v4 != v7) {
    return 0;
  }
  return v5 == *(double *)(a2 + 32) && v6 == *(double *)(a2 + 24);
}

uint64_t _BackdropGroupEffect.enabled.getter(char a1)
{
  return a1 & 1;
}

uint64_t _BackdropGroupEffect.enabled.setter(uint64_t result)
{
  *unint64_t v1 = result;
  return result;
}

uint64_t (*_BackdropGroupEffect.enabled.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

SwiftUI::_BackdropGroupEffect __swiftcall _BackdropGroupEffect.init(enabled:)(Swift::Bool enabled)
{
  return (SwiftUI::_BackdropGroupEffect)enabled;
}

uint64_t _BackdropGroupEffect.effectValue(size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result & 1;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 0;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance _BackdropGroupEffect()
{
}

uint64_t View.backdropGroup(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for _BackdropGroupEffect, a3);
}

unsigned char *storeEnumTagSinglePayload for _BackdropGroupEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E1C250);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_187E1C278()
{
  return swift_getWitnessTable();
}

id static NSBundle.swiftUI.getter()
{
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);

  return v1;
}

void CirclePlaybackButtonStyle._storage.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 5;
}

void protocol witness for PlaybackButtonStyle._storage.getter in conformance CirclePlaybackButtonStyle(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 5;
}

ValueMetadata *type metadata accessor for CirclePlaybackButtonStyle()
{
  return &type metadata for CirclePlaybackButtonStyle;
}

uint64_t *initializeBufferWithCopyOfBuffer for CirclePlaybackButtonStyleBody(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *a1 = *(void *)a2;
    unsigned int v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)a2, v8);
    *unsigned int v4 = v7;
    *((unsigned char *)v4 + 8) = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    size_t v10 = (char *)v4 + v9;
    BOOL v11 = (char *)(a2 + v9);
    type metadata accessor for ClosedRange<Date>();
    uint64_t v13 = v12;
    uint64_t v14 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v12))
    {
      type metadata accessor for ClosedRange<Date>?(0);
      memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v17 = type metadata accessor for Date();
      unint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
      v18(v10, v11, v17);
      v18(&v10[*(int *)(v13 + 36)], &v11[*(int *)(v13 + 36)], v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
    }
    id v19 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v20 = v19[5];
    unint64_t v21 = &v10[v20];
    unsigned __int8 v22 = &v11[v20];
    uint64_t v23 = type metadata accessor for Date();
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 2, v23))
    {
      uint64_t v25 = type metadata accessor for PlaybackButton.State(0);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 2, v23);
    }
    uint64_t v26 = v19[6];
    uint64_t v27 = &v10[v26];
    uint64_t v28 = &v11[v26];
    uint64_t v29 = *((void *)v28 + 1);
    *(void *)uint64_t v27 = *(void *)v28;
    *((void *)v27 + 1) = v29;
    v10[v19[7]] = v11[v19[7]];
    v10[v19[8]] = v11[v19[8]];
    *(_OWORD *)&v10[v19[9]] = *(_OWORD *)&v11[v19[9]];
    uint64_t v30 = v19[10];
    uint64_t v31 = &v10[v30];
    uint64_t v32 = &v11[v30];
    uint64_t v33 = *(void *)&v11[v30];
    uint64_t v34 = *(void *)&v11[v30 + 8];
    char v35 = v32[16];
    swift_bridgeObjectRetain();
    outlined copy of Environment<AppIntentExecutor?>.Content(v33, v34, v35);
    *(void *)uint64_t v31 = v33;
    *((void *)v31 + 1) = v34;
    v31[16] = v35;
    uint64_t v36 = *((void *)v32 + 5);
    long long v37 = *(_OWORD *)(v32 + 24);
    *(_OWORD *)(v31 + 24) = v37;
    *((void *)v31 + 5) = v36;
    id v38 = (id)v37;
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for CirclePlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  size_t v10 = (char *)(a2 + v8);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    v16(v9, v10, v15);
    v16(&v9[*(int *)(v12 + 36)], &v10[*(int *)(v12 + 36)], v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
  }
  uint64_t v17 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v18 = v17[5];
  id v19 = &v9[v18];
  uint64_t v20 = &v10[v18];
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 2, v21))
  {
    uint64_t v23 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 2, v21);
  }
  uint64_t v24 = v17[6];
  uint64_t v25 = &v9[v24];
  uint64_t v26 = &v10[v24];
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = v27;
  v9[v17[7]] = v10[v17[7]];
  v9[v17[8]] = v10[v17[8]];
  *(_OWORD *)&v9[v17[9]] = *(_OWORD *)&v10[v17[9]];
  uint64_t v28 = v17[10];
  uint64_t v29 = &v9[v28];
  uint64_t v30 = &v10[v28];
  uint64_t v31 = *(void *)&v10[v28];
  uint64_t v32 = *(void *)&v10[v28 + 8];
  char v33 = v30[16];
  swift_bridgeObjectRetain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v31, v32, v33);
  *(void *)uint64_t v29 = v31;
  *((void *)v29 + 1) = v32;
  v29[16] = v33;
  uint64_t v34 = *((void *)v30 + 5);
  long long v35 = *(_OWORD *)(v30 + 24);
  *(_OWORD *)(v29 + 24) = v35;
  *((void *)v29 + 5) = v34;
  id v36 = (id)v35;
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for CirclePlaybackButtonStyleBody(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned __int8 *)a1 + 8);
  *a1 = v6;
  *((unsigned char *)a1 + 8) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v54 = a1;
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)(a2 + v10);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v11, 1, v13);
  int v18 = v16(v12, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      uint64_t v19 = type metadata accessor for Date();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      v20(v11, v12, v19);
      v20(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v11, v12, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v52 = type metadata accessor for Date();
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 24);
  v53(v11, v12, v52);
  v53(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v52);
LABEL_7:
  uint64_t v22 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v23 = v22[5];
  uint64_t v24 = &v11[v23];
  uint64_t v25 = &v12[v23];
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 2, v26);
  int v30 = v28(v25, 2, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v31 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 2, v26);
LABEL_13:
  uint64_t v32 = v22[6];
  char v33 = &v11[v32];
  uint64_t v34 = &v12[v32];
  *(void *)char v33 = *(void *)v34;
  *((void *)v33 + 1) = *((void *)v34 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11[v22[7]] = v12[v22[7]];
  v11[v22[8]] = v12[v22[8]];
  uint64_t v35 = v22[9];
  id v36 = &v11[v35];
  long long v37 = &v12[v35];
  *(void *)id v36 = *(void *)v37;
  *((void *)v36 + 1) = *((void *)v37 + 1);
  uint64_t v38 = v22[10];
  id v39 = &v11[v38];
  uint64_t v40 = &v12[v38];
  uint64_t v41 = *(void *)&v12[v38];
  uint64_t v42 = *(void *)&v12[v38 + 8];
  char v43 = v40[16];
  outlined copy of Environment<AppIntentExecutor?>.Content(v41, v42, v43);
  uint64_t v44 = *(void *)v39;
  uint64_t v45 = *((void *)v39 + 1);
  char v46 = v39[16];
  *(void *)id v39 = v41;
  *((void *)v39 + 1) = v42;
  v39[16] = v43;
  outlined consume of Environment<AppIntentExecutor?>.Content(v44, v45, v46);
  uint64_t v47 = (void *)*((void *)v40 + 3);
  id v48 = (void *)*((void *)v39 + 3);
  *((void *)v39 + 3) = v47;
  id v49 = v47;

  uint64_t v50 = *((void *)v40 + 5);
  *((void *)v39 + 4) = *((void *)v40 + 4);
  *((void *)v39 + 5) = v50;
  swift_retain();
  swift_release();
  return v54;
}

uint64_t initializeWithTake for CirclePlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  int v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7))
  {
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
    v12(v5, v6, v11);
    v12(&v5[*(int *)(v8 + 36)], &v6[*(int *)(v8 + 36)], v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
  }
  uint64_t v13 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v14 = v13[5];
  uint64_t v15 = &v5[v14];
  uint64_t v16 = &v6[v14];
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 2, v17))
  {
    uint64_t v19 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 2, v17);
  }
  *(_OWORD *)&v5[v13[6]] = *(_OWORD *)&v6[v13[6]];
  v5[v13[7]] = v6[v13[7]];
  v5[v13[8]] = v6[v13[8]];
  *(_OWORD *)&v5[v13[9]] = *(_OWORD *)&v6[v13[9]];
  uint64_t v20 = v13[10];
  uint64_t v21 = &v5[v20];
  uint64_t v22 = &v6[v20];
  long long v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  return a1;
}

uint64_t *assignWithTake for CirclePlaybackButtonStyleBody(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned __int8 *)a1 + 8);
  *a1 = v6;
  *((unsigned char *)a1 + 8) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v47 = a1;
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  type metadata accessor for ClosedRange<Date>();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v11, 1, v13);
  int v18 = v16(v12, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      uint64_t v19 = type metadata accessor for Date();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32);
      v20(v11, v12, v19);
      v20(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v11, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
LABEL_6:
    type metadata accessor for ClosedRange<Date>?(0);
    memcpy(v11, v12, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v45 = type metadata accessor for Date();
  char v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 40);
  v46(v11, v12, v45);
  v46(&v11[*(int *)(v14 + 36)], &v12[*(int *)(v14 + 36)], v45);
LABEL_7:
  uint64_t v22 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v23 = v22[5];
  uint64_t v24 = &v11[v23];
  uint64_t v25 = &v12[v23];
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 2, v26);
  int v30 = v28(v25, 2, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v31 = type metadata accessor for PlaybackButton.State(0);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 2, v26);
LABEL_13:
  uint64_t v32 = v22[6];
  char v33 = &v11[v32];
  uint64_t v34 = &v12[v32];
  uint64_t v36 = *(void *)v34;
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)char v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  v11[v22[7]] = v12[v22[7]];
  v11[v22[8]] = v12[v22[8]];
  *(_OWORD *)&v11[v22[9]] = *(_OWORD *)&v12[v22[9]];
  uint64_t v37 = v22[10];
  uint64_t v38 = &v11[v37];
  id v39 = &v12[v37];
  LOBYTE(v37) = v12[v37 + 16];
  uint64_t v40 = *(void *)v38;
  uint64_t v41 = *((void *)v38 + 1);
  char v42 = v38[16];
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  v38[16] = v37;
  outlined consume of Environment<AppIntentExecutor?>.Content(v40, v41, v42);
  char v43 = (void *)*((void *)v38 + 3);
  *((void *)v38 + 3) = *((void *)v39 + 3);

  *((_OWORD *)v38 + 2) = *((_OWORD *)v39 + 2);
  swift_release();
  return v47;
}

uint64_t getEnumTagSinglePayload for CirclePlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187E1D45C);
}

uint64_t sub_187E1D45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CirclePlaybackButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187E1D518);
}

uint64_t sub_187E1D518(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for PlaybackButton.Configuration(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for CirclePlaybackButtonStyleBody()
{
  uint64_t result = type metadata singleton initialization cache for CirclePlaybackButtonStyleBody;
  if (!type metadata singleton initialization cache for CirclePlaybackButtonStyleBody) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for CirclePlaybackButtonStyleBody()
{
  uint64_t result = type metadata accessor for PlaybackButton.Configuration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in CirclePlaybackButtonStyleBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t CirclePlaybackButtonStyleBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v39 = a1;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v38 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AccessibilityPlaybackButtonModifier<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>(0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo();
  MEMORY[0x1F4188790](v15 - 8);
  int v17 = (uint64_t *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo(0);
  uint64_t v19 = v18 - 8;
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo(0);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *int v17 = static Alignment.center.getter();
  v17[1] = v25;
  type metadata accessor for _VariadicView.Tree<_ZStackLayout, TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Modifie();
  closure #1 in CirclePlaybackButtonStyleBody.body.getter((uint64_t)v17 + *(int *)(v26 + 44));
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo);
  uint64_t v27 = &v21[*(int *)(v19 + 44)];
  long long v28 = v41;
  *(_OWORD *)uint64_t v27 = v40;
  *((_OWORD *)v27 + 1) = v28;
  *((_OWORD *)v27 + 2) = v42;
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo);
  uint64_t v29 = *(void *)v1;
  uint64_t v30 = *(unsigned __int8 *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v1, *(unsigned char *)(v1 + 8));
  int v31 = specialized Environment.wrappedValue.getter(v29, v30);
  outlined consume of Environment<Bool?>.Content(v29, v30);
  if (v31 == 2) {
    char v32 = 4;
  }
  else {
    char v32 = 5;
  }
  uint64_t v33 = type metadata accessor for CirclePlaybackButtonStyleBody();
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v2 + *(int *)(v33 + 20), (uint64_t)v11, type metadata accessor for PlaybackButton.Configuration);
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo((uint64_t)&v11[*(int *)(v9 + 28)], (uint64_t)v7, type metadata accessor for PlaybackButton.State);
  uint64_t v34 = v38;
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo((uint64_t)v11, v38, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v11, type metadata accessor for PlaybackButton.Configuration);
  _s7SwiftUI14PlaybackButtonV5StateOWObTm_1((uint64_t)v7, (uint64_t)v14, type metadata accessor for PlaybackButton.State);
  type metadata accessor for AccessibilityPlaybackButtonModifier<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>(0, &lazy cache variable for type metadata for AccessibilityPlaybackButtonModifier<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo, (uint64_t (*)(void))lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration);
  uint64_t v36 = &v14[*(int *)(v35 + 36)];
  *(void *)uint64_t v36 = 0;
  *((void *)v36 + 1) = 0;
  v36[16] = v32;
  _s7SwiftUI14PlaybackButtonV5StateOWObTm_1(v34, (uint64_t)&v14[*(int *)(v35 + 40)], (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  specialized AccessibilityPlaybackButtonModifier.body(content:)((uint64_t)v21, (uint64_t)v24);
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AccessibilityPlaybackButtonModifier<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>);
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<Mo);
  return _s7SwiftUI14PlaybackButtonV5StateOWObTm_1((uint64_t)v24, v39, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo);
}

uint64_t closure #1 in CirclePlaybackButtonStyleBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v30 - v6;
  CirclePlaybackButtonStyleBody.platter.getter(v56);
  CirclePlaybackButtonStyleBody.playbackStateImage.getter(&v58);
  uint64_t v8 = *((void *)&v58 + 1);
  uint64_t v37 = v58;
  uint64_t v9 = v59;
  int v36 = BYTE8(v59);
  long long v10 = v60;
  uint64_t v11 = *(void *)&v61[0];
  uint64_t v35 = *((void *)&v61[1] + 1);
  long long v34 = v62;
  long long v12 = v63;
  int v33 = v64;
  uint64_t v32 = a1 + 256;
  long long v39 = *(_OWORD *)((char *)v61 + 8);
  uint64_t v38 = v7;
  CirclePlaybackButtonStyleBody.resolvedProgressStroke.getter((uint64_t)v7);
  long long v52 = v56[12];
  long long v53 = v56[13];
  long long v54 = v56[14];
  long long v55 = v56[15];
  long long v48 = v56[8];
  long long v49 = v56[9];
  long long v50 = v56[10];
  long long v51 = v56[11];
  long long v44 = v56[4];
  long long v45 = v56[5];
  long long v46 = v56[6];
  long long v47 = v56[7];
  long long v40 = v56[0];
  long long v41 = v56[1];
  long long v42 = v56[2];
  long long v43 = v56[3];
  uint64_t v30 = v4;
  int v31 = type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?;
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?);
  long long v13 = v53;
  v57[12] = v52;
  v57[13] = v53;
  long long v14 = v54;
  long long v15 = v55;
  v57[14] = v54;
  v57[15] = v55;
  long long v16 = v48;
  long long v17 = v49;
  v57[8] = v48;
  v57[9] = v49;
  long long v18 = v50;
  long long v19 = v51;
  v57[10] = v50;
  v57[11] = v51;
  long long v20 = v44;
  long long v21 = v45;
  v57[4] = v44;
  v57[5] = v45;
  long long v22 = v46;
  long long v23 = v47;
  v57[6] = v46;
  v57[7] = v47;
  long long v24 = v40;
  long long v25 = v41;
  v57[0] = v40;
  v57[1] = v41;
  long long v26 = v42;
  long long v27 = v43;
  void v57[2] = v42;
  v57[3] = v43;
  *(_OWORD *)(a1 + 192) = v52;
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 240) = v15;
  *(_OWORD *)(a1 + 128) = v16;
  *(_OWORD *)(a1 + 144) = v17;
  *(_OWORD *)(a1 + 160) = v18;
  *(_OWORD *)(a1 + 176) = v19;
  *(_OWORD *)(a1 + 64) = v20;
  *(_OWORD *)(a1 + 80) = v21;
  *(_OWORD *)(a1 + 96) = v22;
  *(_OWORD *)(a1 + 112) = v23;
  *(_OWORD *)a1 = v24;
  *(_OWORD *)(a1 + 16) = v25;
  *(_OWORD *)(a1 + 32) = v26;
  *(_OWORD *)(a1 + 48) = v27;
  *(void *)(a1 + 256) = v37;
  *(void *)(a1 + 264) = v8;
  *(void *)(a1 + 272) = v9;
  *(unsigned char *)(a1 + 280) = v36;
  *(_OWORD *)(a1 + 288) = v10;
  *(void *)(a1 + 304) = v11;
  *(_OWORD *)(v32 + 56) = v39;
  *(void *)(a1 + 328) = v35;
  *(_OWORD *)(a1 + 336) = v34;
  *(_OWORD *)(a1 + 352) = v12;
  *(unsigned char *)(a1 + 368) = v33;
  type metadata accessor for (TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Mod();
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo((uint64_t)v4, a1 + *(int *)(v28 + 64), (uint64_t (*)(void))v31);
  outlined retain of TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>((uint64_t)v57);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?);
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v30, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>?);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  long long v69 = v52;
  long long v70 = v53;
  long long v71 = v54;
  long long v72 = v55;
  long long v65 = v48;
  long long v66 = v49;
  long long v67 = v50;
  long long v68 = v51;
  v61[1] = v44;
  long long v62 = v45;
  long long v63 = v46;
  long long v64 = v47;
  long long v58 = v40;
  long long v59 = v41;
  long long v60 = v42;
  v61[0] = v43;
  return outlined release of TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>((uint64_t)&v58);
}

uint64_t CirclePlaybackButtonStyleBody.platter.getter@<X0>(_OWORD *a1@<X8>)
{
  long long v52 = a1;
  uint64_t v2 = (int *)type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1F4188790](v2);
  long long v50 = &v47[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v4);
  long long v51 = &v47[-v5];
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v47[-v7];
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v47[-v10];
  MEMORY[0x1F4188790](v12);
  long long v14 = &v47[-v13];
  static Color.white.getter();
  uint64_t v15 = v1 + *(int *)(type metadata accessor for CirclePlaybackButtonStyleBody() + 20);
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v15, (uint64_t)v14, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v14[v2[5]] = 0x4000000000000000;
  *(void *)&v14[v2[6]] = 0x3FB47AE147AE147BLL;
  *(void *)&v14[v2[7]] = 0x3FA999999999999ALL;
  uint64_t v16 = type metadata accessor for PlaybackButton.Configuration(0);
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  uint64_t v54 = Color.opacity(_:)();
  swift_release();
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v15, (uint64_t)v11, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v11[v2[5]] = 0x4000000000000000;
  *(void *)&v11[v2[6]] = 0x3FB47AE147AE147BLL;
  *(void *)&v11[v2[7]] = 0x3FA999999999999ALL;
  int v53 = v11[*(int *)(v16 + 32)];
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  static UnitPoint.center.getter();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v15, (uint64_t)v8, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v8[v2[5]] = 0x4000000000000000;
  *(void *)&v8[v2[6]] = 0x3FB47AE147AE147BLL;
  *(void *)&v8[v2[7]] = 0x3FA999999999999ALL;
  uint64_t v21 = *(int *)(v16 + 32);
  uint64_t v22 = static Animation.spring(response:dampingFraction:blendDuration:)();
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  LODWORD(v23) = *(unsigned __int8 *)(v15 + v21);
  uint64_t v49 = v16;
  long long v24 = (double *)&unk_18834E000;
  if ((*(unsigned __int8 *)(v15 + *(int *)(v16 + 28)) | 2) == 3)
  {
    static Color.white.getter();
    long long v25 = v51;
    outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v15, (uint64_t)v51, type metadata accessor for PlaybackButton.Configuration);
    *(void *)&v25[v2[5]] = 0x4000000000000000;
    *(void *)&v25[v2[6]] = 0x3FB47AE147AE147BLL;
    *(void *)&v25[v2[7]] = 0x3FA999999999999ALL;
    int v48 = v23;
    _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
    uint64_t v26 = Color.opacity(_:)();
    swift_release();
    long long v27 = v50;
    outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v15, (uint64_t)v50, type metadata accessor for PlaybackButton.Configuration);
    *(void *)&v27[v2[5]] = 0x4000000000000000;
    *(void *)&v27[v2[6]] = 0x3FB47AE147AE147BLL;
    *(void *)&v27[v2[7]] = 0x3FA999999999999ALL;
    if (v27[*(int *)(v49 + 32)]) {
      double v28 = 0.9;
    }
    else {
      double v28 = 1.0;
    }
    _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
    static UnitPoint.center.getter();
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v15, (uint64_t)v25, type metadata accessor for PlaybackButton.Configuration);
    *(void *)&v25[v2[5]] = 0x4000000000000000;
    *(void *)&v25[v2[6]] = 0x3FB47AE147AE147BLL;
    *(void *)&v25[v2[7]] = 0x3FA999999999999ALL;
    static Animation.timingCurve(_:_:_:_:duration:)();
    _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
    uint64_t v23 = Animation.repeatForever(autoreverses:)();
    swift_retain_n();
    long long v24 = (double *)&unk_18834E000;
    swift_release();
    *(void *)&long long v57 = v26;
    WORD4(v57) = 256;
    *(double *)&long long v58 = v28;
    *((double *)&v58 + 1) = v28;
    *(void *)&long long v59 = v30;
    *((void *)&v59 + 1) = v32;
    LOBYTE(v60) = 20;
    *((void *)&v60 + 1) = v26;
    LOWORD(v61) = 256;
    *((double *)&v61 + 1) = v28;
    *(double *)&long long v62 = v28;
    *((void *)&v62 + 1) = v30;
    *(void *)&long long v63 = v32;
    BYTE8(v63) = 20;
    *(void *)&long long v64 = 0x3FF0000000000000;
    *((void *)&v64 + 1) = v26;
    LOWORD(v65) = 256;
    *((double *)&v65 + 1) = v28;
    *(double *)&long long v66 = v28;
    *((void *)&v66 + 1) = v30;
    *(void *)&long long v67 = v32;
    BYTE8(v67) = 20;
    *(void *)&long long v68 = 0;
    *((void *)&v68 + 1) = v23;
    LOBYTE(v23) = v48;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v57, v33, v34, v35);
  }
  else
  {
    _s7SwiftUI23AppearanceAnimationViewVyAA15ModifiedContentVyAEyAA06_ShapeE0VyAA6CircleVAA5ColorVGAA12_ScaleEffectVGAA010_BlendModeL0VGAEyArA08_OpacityL0VGGSgWOi0_(&v57);
  }
  outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?((uint64_t)&v57, (uint64_t)v74);
  if (v53) {
    double v36 = v24[103];
  }
  else {
    double v36 = 1.0;
  }
  outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?((uint64_t)v74, (uint64_t)v55);
  outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?((uint64_t)v55, (uint64_t)v56);
  *(void *)&long long v57 = v54;
  WORD4(v57) = 256;
  *(double *)&long long v58 = v36;
  *((double *)&v58 + 1) = v36;
  *(void *)&long long v59 = v18;
  *((void *)&v59 + 1) = v20;
  *(void *)&long long v60 = v22;
  BYTE8(v60) = v23;
  BYTE9(v60) = 20;
  outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?((uint64_t)v56, (uint64_t)&v61);
  long long v37 = v70;
  uint64_t v38 = v52;
  v52[12] = v69;
  v38[13] = v37;
  long long v39 = v72;
  v38[14] = v71;
  v38[15] = v39;
  long long v40 = v66;
  v38[8] = v65;
  v38[9] = v40;
  long long v41 = v68;
  v38[10] = v67;
  v38[11] = v41;
  long long v42 = v62;
  v38[4] = v61;
  v38[5] = v42;
  long long v43 = v64;
  v38[6] = v63;
  v38[7] = v43;
  long long v44 = v58;
  *uint64_t v38 = v57;
  v38[1] = v44;
  long long v45 = v60;
  v38[2] = v59;
  v38[3] = v45;
  outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?((uint64_t)v55, (uint64_t)v73);
  swift_retain();
  swift_retain();
  outlined retain of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(v56, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?);
  outlined retain of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?);
  swift_release();
  return swift_release();
}

uint64_t CirclePlaybackButtonStyleBody.playbackStateImage.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v49 = a1;
  type metadata accessor for <<opaque return type of Transition.combined<A>(with:)>>.0();
  *(void *)&long long v53 = v2;
  *(void *)&long long v52 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&KeyPath - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>();
  *(void *)&long long v54 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v50 = (uint64_t)&KeyPath - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  long long v51 = (char *)&KeyPath - v8;
  uint64_t v9 = (int *)type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1F4188790](v9);
  uint64_t v56 = (uint64_t)&KeyPath - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&KeyPath - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&KeyPath - v15;
  uint64_t v58 = v1 + *(int *)(type metadata accessor for CirclePlaybackButtonStyleBody() + 20);
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v58, (uint64_t)v16, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v16[v9[5]] = 0x4000000000000000;
  *(void *)&v16[v9[6]] = 0x3FB47AE147AE147BLL;
  *(void *)&v16[v9[7]] = 0x3FA999999999999ALL;
  long long v55 = (int *)type metadata accessor for PlaybackButton.Configuration(0);
  unsigned int v17 = v16[v55[7]];
  uint64_t v18 = (uint64_t *)&v16[v55[6]];
  if (v17 >= 2) {
    uint64_t v19 = 0x69662E6573756170;
  }
  else {
    uint64_t v19 = 0x6C69662E79616C70;
  }
  if (v17 >= 2) {
    uint64_t v20 = 0xEA00000000006C6CLL;
  }
  else {
    uint64_t v20 = 0xE90000000000006CLL;
  }
  if (v18[1])
  {
    uint64_t v19 = *v18;
    uint64_t v20 = swift_bridgeObjectRetain();
  }
  long long v57 = type metadata accessor for PlaybackButton.Specs;
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  type metadata accessor for _TrimmedShape<Circle._Inset>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v19;
  *(void *)(v21 + 24) = v20;
  *(_DWORD *)(v21 + 32) = 0;
  *(unsigned char *)(v21 + 36) = 1;
  *(_OWORD *)(v21 + 40) = xmmword_18834C6B0;
  *(void *)(v21 + 56) = v19;
  *(void *)(v21 + 64) = v20;
  *(_OWORD *)(v21 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v21 + 88) = 0;
  swift_bridgeObjectRetain();
  uint64_t v47 = static Color.white.getter();
  uint64_t KeyPath = swift_getKeyPath();
  static UnitPoint.center.getter();
  *(void *)&long long v66 = 0x3EE4F8B588E368F1;
  *((void *)&v66 + 1) = v22;
  unint64_t v67 = v23;
  unint64_t v24 = lazy protocol witness table accessor for type ScaleTransition and conformance ScaleTransition();
  unint64_t v25 = lazy protocol witness table accessor for type OpacityTransition and conformance OpacityTransition();
  uint64_t v26 = MEMORY[0x1E4F3FC00];
  uint64_t v27 = MEMORY[0x1E4F40168];
  Transition.combined<A>(with:)();
  int v48 = type metadata accessor for PlaybackButton.Configuration;
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v58, (uint64_t)v13, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v13[v9[5]] = 0x4000000000000000;
  *(void *)&v13[v9[6]] = 0x3FB47AE147AE147BLL;
  *(void *)&v13[v9[7]] = 0x3FA999999999999ALL;
  double v28 = 0.8;
  static Animation.spring(response:dampingFraction:blendDuration:)();
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v13, (uint64_t (*)(void))v57);
  *(void *)&long long v66 = v26;
  *((void *)&v66 + 1) = v27;
  unint64_t v67 = v24;
  unint64_t v68 = v25;
  swift_getOpaqueTypeConformance2();
  uint64_t v29 = (uint64_t)v51;
  uint64_t v30 = v53;
  Transition.animation(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v4, v30);
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v29, v50, (uint64_t (*)(void))type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>);
  _s10Foundation4DateVACSLAAWlTm_4(&lazy protocol witness table cache variable for type FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0> and conformance FilteredTransition<A>, (void (*)(uint64_t))type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>);
  uint64_t v31 = AnyTransition.init<A>(_:)();
  _sSNy10Foundation4DateVGWOhTm_1(v29, (uint64_t (*)(void))type metadata accessor for FilteredTransition<<<opaque return type of Transition.combined<A>(with:)>>.0>);
  uint64_t v32 = static Font.footnote.getter();
  uint64_t v33 = swift_getKeyPath();
  uint64_t v59 = v21;
  uint64_t v60 = KeyPath;
  uint64_t v61 = v47;
  char v62 = 20;
  uint64_t v63 = v31;
  uint64_t v64 = v33;
  uint64_t v65 = v32;
  static Font.Weight.bold.getter();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.fontWeight(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  unint64_t v34 = v67;
  char v35 = v68;
  uint64_t v36 = v70;
  uint64_t v37 = v72;
  long long v52 = v66;
  long long v53 = v69;
  long long v54 = v71;
  uint64_t v38 = v58;
  uint64_t v39 = v56;
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v58, v56, v48);
  *(void *)(v39 + v9[5]) = 0x4000000000000000;
  *(void *)(v39 + v9[6]) = 0x3FB47AE147AE147BLL;
  *(void *)(v39 + v9[7]) = 0x3FA999999999999ALL;
  long long v40 = v55;
  if (!*(unsigned char *)(v39 + v55[8])) {
    double v28 = 1.0;
  }
  _sSNy10Foundation4DateVGWOhTm_1(v39, (uint64_t (*)(void))v57);
  uint64_t result = static UnitPoint.center.getter();
  char v42 = *(unsigned char *)(v38 + v40[7]);
  long long v43 = v49;
  _OWORD *v49 = v52;
  *((void *)v43 + 2) = v34;
  *((unsigned char *)v43 + 24) = v35;
  _OWORD v43[2] = v53;
  *((void *)v43 + 6) = v36;
  *(_OWORD *)((char *)v43 + 56) = v54;
  *((void *)v43 + 9) = v37;
  *((double *)v43 + 10) = v28;
  *((double *)v43 + 11) = v28;
  *((void *)v43 + 12) = v44;
  *((void *)v43 + 13) = v45;
  *((unsigned char *)v43 + 112) = v42;
  return result;
}

uint64_t CirclePlaybackButtonStyleBody.resolvedProgressStroke.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v79 = *(void *)(v3 - 8);
  uint64_t v80 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v76 = (uint64_t)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1F4188790](v69);
  uint64_t v68 = (uint64_t)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for CirclePlaybackButtonStyleBody();
  uint64_t v7 = v6 - 8;
  uint64_t v70 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v72 = v8;
  uint64_t v73 = (uint64_t)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>(0);
  uint64_t v77 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v75 = (uint64_t)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v78 = (uint64_t)&v64 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v81 = (uint64_t)&v64 - v14;
  uint64_t v67 = type metadata accessor for ProgressViewSchedule(0);
  MEMORY[0x1F4188790](v67);
  uint64_t v71 = (uint64_t)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v74 = (uint64_t)&v64 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v82 = (uint64_t)&v64 - v19;
  type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>, MEMORY[0x1E4F40578]);
  uint64_t v84 = *(void *)(v20 - 8);
  uint64_t v85 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v83 = (char *)&v64 - v21;
  type metadata accessor for ClosedRange<Date>?(0);
  MEMORY[0x1F4188790](v22 - 8);
  unint64_t v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(v25 - 8);
  uint64_t v28 = *(void *)(v27 + 64);
  MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v64 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v64 - v31;
  uint64_t v33 = v1 + *(int *)(v7 + 28);
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v33, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26) == 1)
  {
    _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>?);
    uint64_t v34 = 1;
  }
  else
  {
    uint64_t v66 = a1;
    _s7SwiftUI14PlaybackButtonV5StateOWObTm_1((uint64_t)v24, (uint64_t)v32, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    uint64_t v35 = *(void *)v1;
    uint64_t v65 = v1;
    uint64_t v36 = *(unsigned __int8 *)(v1 + 8);
    outlined copy of Environment<Bool>.Content(v35, *(unsigned char *)(v1 + 8));
    int v37 = specialized Environment.wrappedValue.getter(v35, v36);
    outlined consume of Environment<Bool?>.Content(v35, v36);
    if (v37 == 2)
    {
      _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
      uint64_t v34 = 1;
      a1 = v66;
    }
    else
    {
      if (*(unsigned char *)(v33 + *(int *)(type metadata accessor for PlaybackButton.Configuration(0) + 28)) == 2)
      {
        uint64_t v38 = (uint64_t)v32;
        uint64_t v64 = v32;
        uint64_t v39 = v82;
        outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo((uint64_t)v32, v82, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
        *(unsigned char *)(v39 + *(int *)(v67 + 20)) = 0;
        uint64_t v40 = v74;
        outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v39, v74, type metadata accessor for ProgressViewSchedule);
        uint64_t v41 = v73;
        outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v65, v73, (uint64_t (*)(void))type metadata accessor for CirclePlaybackButtonStyleBody);
        outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v38, (uint64_t)v29, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
        unint64_t v42 = (*(unsigned __int8 *)(v70 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
        unint64_t v43 = (v72 + *(unsigned __int8 *)(v27 + 80) + v42) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
        uint64_t v44 = swift_allocObject();
        _s7SwiftUI14PlaybackButtonV5StateOWObTm_1(v41, v44 + v42, (uint64_t (*)(void))type metadata accessor for CirclePlaybackButtonStyleBody);
        _s7SwiftUI14PlaybackButtonV5StateOWObTm_1((uint64_t)v29, v44 + v43, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
        uint64_t v45 = v71;
        outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v40, v71, type metadata accessor for ProgressViewSchedule);
        uint64_t v46 = swift_allocObject();
        *(void *)(v46 + 16) = partial apply for closure #1 in CirclePlaybackButtonStyleBody.resolvedProgressStroke.getter;
        *(void *)(v46 + 24) = v44;
        uint64_t v47 = v45;
        uint64_t v48 = v75;
        _s7SwiftUI14PlaybackButtonV5StateOWObTm_1(v47, v75, type metadata accessor for ProgressViewSchedule);
        uint64_t v49 = swift_allocObject();
        *(void *)(v49 + 16) = partial apply for specialized closure #1 in TimelineView<>.init(_:content:);
        *(void *)(v49 + 24) = v46;
        uint64_t v50 = (uint64_t (**)(uint64_t))(v48 + *(int *)(v77 + 44));
        *uint64_t v50 = partial apply for specialized closure #1 in TimelineView<>.init(_:content:);
        v50[1] = (uint64_t (*)(uint64_t))v49;
        uint64_t v51 = v48;
        uint64_t v52 = v78;
        _s7SwiftUI14PlaybackButtonV5StateOWObTm_1(v51, v78, (uint64_t (*)(void))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>);
        _sSNy10Foundation4DateVGWOhTm_1(v40, type metadata accessor for ProgressViewSchedule);
        uint64_t v53 = v52;
        uint64_t v54 = v81;
        _s7SwiftUI14PlaybackButtonV5StateOWObTm_1(v53, v81, (uint64_t (*)(void))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>);
        uint64_t v55 = (uint64_t)v83;
        outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v54, (uint64_t)v83, (uint64_t (*)(void))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>);
        type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>, MEMORY[0x1E4F40568]);
        swift_storeEnumTagMultiPayload();
        _sSNy10Foundation4DateVGWOhTm_1(v54, (uint64_t (*)(void))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>);
        _sSNy10Foundation4DateVGWOhTm_1(v82, type metadata accessor for ProgressViewSchedule);
        uint64_t v56 = (uint64_t)v64;
      }
      else
      {
        uint64_t v57 = v68;
        outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v33, v68, type metadata accessor for PlaybackButton.Configuration);
        uint64_t v58 = v69;
        *(void *)(v57 + *(int *)(v69 + 20)) = 0x4000000000000000;
        *(void *)(v57 + *(int *)(v58 + 24)) = 0x3FB47AE147AE147BLL;
        *(void *)(v57 + *(int *)(v58 + 28)) = 0x3FA999999999999ALL;
        uint64_t v59 = v76;
        PlaybackButton.Specs.resolvedPauseDate.getter(v76);
        _sSNy10Foundation4DateVGWOhTm_1(v57, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
        uint64_t v60 = static Alignment.center.getter();
        uint64_t v62 = v61;
        closure #1 in CirclePlaybackButtonStyleBody.progressStroke(interval:referenceDate:)(v65, (uint64_t)v88);
        _s7SwiftUI14PlaybackButtonV5StateOWObTm_1((uint64_t)v88, (uint64_t)v86, (uint64_t (*)(void))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?);
        v87[0] = v60;
        v87[1] = v62;
        _s7SwiftUI14PlaybackButtonV5StateOWObTm_1((uint64_t)v86, (uint64_t)&v87[2], (uint64_t (*)(void))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?);
        memcpy(v88, v87, 0x151uLL);
        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v59, v80);
        uint64_t v55 = (uint64_t)v83;
        memcpy(v83, v88, 0x151uLL);
        type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>, MEMORY[0x1E4F40568]);
        swift_storeEnumTagMultiPayload();
        uint64_t v56 = (uint64_t)v32;
      }
      _sSNy10Foundation4DateVGWOhTm_1(v56, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
      a1 = v66;
      outlined init with take of _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>(v55, v66);
      uint64_t v34 = 0;
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(a1, v34, 1, v85);
}

void *closure #1 in CirclePlaybackButtonStyleBody.resolvedProgressStroke.getter@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = static Alignment.center.getter();
  uint64_t v6 = v5;
  closure #1 in CirclePlaybackButtonStyleBody.progressStroke(interval:referenceDate:)(a1, (uint64_t)__src);
  _s7SwiftUI14PlaybackButtonV5StateOWObTm_1((uint64_t)__src, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?);
  __src[0] = v4;
  __src[1] = v6;
  _s7SwiftUI14PlaybackButtonV5StateOWObTm_1((uint64_t)v8, (uint64_t)&__src[2], (uint64_t (*)(void))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?);
  return memcpy(a2, __src, 0x151uLL);
}

uint64_t closure #1 in CirclePlaybackButtonStyleBody.progressStroke(interval:referenceDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v61 = a2;
  uint64_t v3 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v51 - v7;
  uint64_t v9 = (int *)type metadata accessor for PlaybackButton.Specs();
  MEMORY[0x1F4188790](v9);
  uint64_t v59 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v51 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v51 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v20 = *(int *)(type metadata accessor for CirclePlaybackButtonStyleBody() + 20);
  uint64_t v58 = a1;
  uint64_t v21 = a1 + v20;
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v21, (uint64_t)v19, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v19[v9[5]] = 0x4000000000000000;
  *(void *)&v19[v9[6]] = 0x3FB47AE147AE147BLL;
  *(void *)&v19[v9[7]] = 0x3FA999999999999ALL;
  ClosedRange<>.progress(at:countdown:)();
  uint64_t v23 = v22;
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  uint64_t v60 = type metadata accessor for PlaybackButton.Configuration(0);
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v21 + *(int *)(v60 + 20), (uint64_t)v8, type metadata accessor for PlaybackButton.State);
  uint64_t v24 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v5, 1, 2, v24);
  char v25 = specialized static PlaybackButton.State.== infix(_:_:)((uint64_t)v8, (uint64_t)v5);
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v5, type metadata accessor for PlaybackButton.State);
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v8, type metadata accessor for PlaybackButton.State);
  if (v25)
  {
    _s7SwiftUI9TupleViewVyAA15ModifiedContentVyAEyAA011StrokeShapeD0VyAA6CircleV6_InsetVAA5ColorVAA05EmptyD0VGAA15_RotationEffectVGAA06_ScaleN0VG_AEyAEyAEyAEyAEyAGyAA08_TrimmedH0VyAKGAmOGARGAUGAA010_BlendModeN0VGAA18_AnimationModifierVyAA14PlaybackButtonV5PhaseOGGA5_ySbGGtGSgWOi0_((uint64_t)v111);
  }
  else
  {
    CirclePlaybackButtonStyleBody.trackStroke.getter((uint64_t)&v112);
    outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v21, (uint64_t)v19, type metadata accessor for PlaybackButton.Configuration);
    *(void *)&v19[v9[5]] = 0x4000000000000000;
    *(void *)&v19[v9[6]] = 0x3FB47AE147AE147BLL;
    *(void *)&v19[v9[7]] = 0x3FA999999999999ALL;
    _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
    static Color.white.getter();
    outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v21, (uint64_t)v16, type metadata accessor for PlaybackButton.Configuration);
    *(void *)&v16[v9[5]] = 0x4000000000000000;
    *(void *)&v16[v9[6]] = 0x3FB47AE147AE147BLL;
    *(void *)&v16[v9[7]] = 0x3FA999999999999ALL;
    uint64_t v58 = v23;
    double v26 = 1.0;
    _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
    uint64_t v57 = Color.opacity(_:)();
    swift_release();
    outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v21, (uint64_t)v19, type metadata accessor for PlaybackButton.Configuration);
    *(void *)&v19[v9[5]] = 0x4000000000000000;
    *(void *)&v19[v9[6]] = 0x3FB47AE147AE147BLL;
    *(void *)&v19[v9[7]] = 0x3FA999999999999ALL;
    _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    uint64_t v27 = v121;
    unsigned int v55 = v123;
    unsigned int v56 = v122;
    uint64_t v28 = v124;
    uint64_t v54 = v125;
    uint64_t v29 = v126;
    uint64_t v30 = static Alignment.center.getter();
    uint64_t v52 = v31;
    uint64_t v53 = v30;
    static UnitPoint.center.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v21, (uint64_t)v13, type metadata accessor for PlaybackButton.Configuration);
    *(void *)&v13[v9[5]] = 0x4000000000000000;
    *(void *)&v13[v9[6]] = 0x3FB47AE147AE147BLL;
    *(void *)&v13[v9[7]] = 0x3FA999999999999ALL;
    uint64_t v36 = v60;
    if (v13[*(int *)(v60 + 32)]) {
      double v26 = 0.9;
    }
    _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
    static UnitPoint.center.getter();
    uint64_t v38 = v37;
    uint64_t v40 = v39;
    outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v21, (uint64_t)v19, type metadata accessor for PlaybackButton.Configuration);
    *(void *)&v19[v9[5]] = 0x4000000000000000;
    *(void *)&v19[v9[6]] = 0x3FB47AE147AE147BLL;
    *(void *)&v19[v9[7]] = 0x3FA999999999999ALL;
    uint64_t v51 = static Animation.spring(response:dampingFraction:blendDuration:)();
    _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
    uint64_t v41 = v36;
    char v42 = *(unsigned char *)(v21 + *(int *)(v36 + 28));
    uint64_t v43 = v59;
    outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v21, v59, type metadata accessor for PlaybackButton.Configuration);
    *(void *)(v43 + v9[5]) = 0x4000000000000000;
    *(void *)(v43 + v9[6]) = 0x3FB47AE147AE147BLL;
    *(void *)(v43 + v9[7]) = 0x3FA999999999999ALL;
    uint64_t v44 = *(int *)(v41 + 32);
    uint64_t v45 = static Animation.spring(response:dampingFraction:blendDuration:)();
    _sSNy10Foundation4DateVGWOhTm_1(v43, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
    long long v68 = v118;
    long long v69 = v119;
    long long v64 = v114;
    long long v65 = v115;
    long long v66 = v116;
    long long v67 = v117;
    long long v62 = v112;
    long long v63 = v113;
    v71[6] = v118;
    v71[7] = v119;
    v71[2] = v114;
    v71[3] = v115;
    v71[4] = v116;
    v71[5] = v117;
    v71[0] = v112;
    v71[1] = v113;
    v84[6] = v118;
    v84[7] = v119;
    v84[2] = v114;
    v84[3] = v115;
    char v46 = *(unsigned char *)(v21 + v44);
    v84[4] = v116;
    v84[5] = v117;
    long long v73 = xmmword_1883A5540;
    *(void *)&long long v74 = v58;
    *((void *)&v74 + 1) = v27;
    *(void *)&long long v75 = __PAIR64__(v55, v56);
    *((void *)&v75 + 1) = v28;
    *(void *)&long long v76 = v54;
    *((void *)&v76 + 1) = v29;
    *(void *)&long long v77 = v57;
    WORD4(v77) = 256;
    *(void *)&long long v78 = v53;
    *((void *)&v78 + 1) = v52;
    *(void *)&long long v79 = 0xBFF921FB54442D18;
    *((void *)&v79 + 1) = v33;
    *(void *)&long long v80 = v35;
    *((double *)&v80 + 1) = v26;
    *(double *)&long long v81 = v26;
    *((void *)&v81 + 1) = v38;
    *(void *)&long long v82 = v40;
    BYTE8(v82) = 20;
    *(void *)&v83[0] = v51;
    BYTE8(v83[0]) = v42;
    *(void *)&v83[1] = v45;
    BYTE8(v83[1]) = v46;
    v84[0] = v112;
    v84[1] = v113;
    *(_OWORD *)((char *)&v84[16] + 8) = v81;
    *(_OWORD *)((char *)&v84[17] + 8) = v82;
    *(_OWORD *)((char *)&v84[18] + 8) = v83[0];
    *(_OWORD *)((char *)&v84[19] + 1) = *(_OWORD *)((char *)v83 + 9);
    *(_OWORD *)((char *)&v84[12] + 8) = v77;
    *(_OWORD *)((char *)&v84[13] + 8) = v78;
    *(_OWORD *)((char *)&v84[14] + 8) = v79;
    *(_OWORD *)((char *)&v84[15] + 8) = v80;
    *(_OWORD *)((char *)&v84[8] + 8) = xmmword_1883A5540;
    *(_OWORD *)((char *)&v84[9] + 8) = v74;
    *(_OWORD *)((char *)&v84[10] + 8) = v75;
    uint64_t v70 = v120;
    uint64_t v72 = v120;
    *(void *)&v84[8] = v120;
    *(_OWORD *)((char *)&v84[11] + 8) = v76;
    long long v85 = xmmword_1883A5540;
    uint64_t v86 = v58;
    uint64_t v87 = v27;
    unsigned int v88 = v56;
    unsigned int v89 = v55;
    uint64_t v90 = v28;
    uint64_t v91 = v54;
    uint64_t v92 = v29;
    uint64_t v93 = v57;
    __int16 v94 = 256;
    uint64_t v95 = v53;
    uint64_t v96 = v52;
    unint64_t v97 = 0xBFF921FB54442D18;
    uint64_t v98 = v33;
    uint64_t v99 = v35;
    double v100 = v26;
    double v101 = v26;
    uint64_t v102 = v38;
    uint64_t v103 = v40;
    char v104 = 20;
    uint64_t v105 = v51;
    char v106 = v42;
    uint64_t v107 = v45;
    char v108 = v46;
    outlined retain of ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>((uint64_t)v71);
    outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>((uint64_t)&v73);
    outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>((uint64_t)&v85);
    v109[6] = v68;
    v109[7] = v69;
    uint64_t v110 = v70;
    v109[2] = v64;
    v109[3] = v65;
    v109[5] = v67;
    v109[4] = v66;
    v109[1] = v63;
    v109[0] = v62;
    outlined release of ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>((uint64_t)v109);
    memcpy(v111, v84, 0x141uLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v111, v47, v48, v49);
  }
  _s7SwiftUI14PlaybackButtonV5StateOWObTm_1((uint64_t)v111, (uint64_t)v127, (uint64_t (*)(void))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?);
  return _s7SwiftUI14PlaybackButtonV5StateOWObTm_1((uint64_t)v127, v61, (uint64_t (*)(void))type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?);
}

uint64_t CirclePlaybackButtonStyleBody.trackStroke.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PlaybackButton.Specs();
  uint64_t v4 = (int *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v27 - v8;
  uint64_t v10 = v1 + *(int *)(type metadata accessor for CirclePlaybackButtonStyleBody() + 20);
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v10, (uint64_t)v9, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v9[v4[7]] = 0x4000000000000000;
  *(void *)&v9[v4[8]] = 0x3FB47AE147AE147BLL;
  *(void *)&v9[v4[9]] = 0x3FA999999999999ALL;
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  static Color.white.getter();
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v10, (uint64_t)v9, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v9[v4[7]] = 0x4000000000000000;
  *(void *)&v9[v4[8]] = 0x3FB47AE147AE147BLL;
  *(void *)&v9[v4[9]] = 0x3FA999999999999ALL;
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  v27[0] = Color.opacity(_:)();
  swift_release();
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v10, (uint64_t)v9, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v9[v4[7]] = 0x4000000000000000;
  *(void *)&v9[v4[8]] = 0x3FB47AE147AE147BLL;
  *(void *)&v9[v4[9]] = 0x3FA999999999999ALL;
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  uint64_t v11 = v27[1];
  uint64_t v12 = v27[3];
  uint64_t v13 = v27[4];
  uint64_t v14 = v27[5];
  uint64_t v15 = static Alignment.center.getter();
  uint64_t v17 = v16;
  static UnitPoint.center.getter();
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  outlined init with copy of ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<Mo(v10, (uint64_t)v6, type metadata accessor for PlaybackButton.Configuration);
  *(void *)&v6[v4[7]] = 0x4000000000000000;
  *(void *)&v6[v4[8]] = 0x3FB47AE147AE147BLL;
  *(void *)&v6[v4[9]] = 0x3FA999999999999ALL;
  if (v6[*(int *)(type metadata accessor for PlaybackButton.Configuration(0) + 32)]) {
    double v22 = 0.9;
  }
  else {
    double v22 = 1.0;
  }
  _sSNy10Foundation4DateVGWOhTm_1((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PlaybackButton.Specs);
  uint64_t result = static UnitPoint.center.getter();
  *(void *)a1 = 0x3FF0000000000000;
  uint64_t v24 = v27[2];
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = v24;
  *(void *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v27[0];
  *(_WORD *)(a1 + 56) = 256;
  *(void *)(a1 + 64) = v15;
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = 0xBFF921FB54442D18;
  *(void *)(a1 + 88) = v19;
  *(void *)(a1 + 96) = v21;
  *(double *)(a1 + 104) = v22;
  *(double *)(a1 + 112) = v22;
  *(void *)(a1 + 120) = v25;
  *(void *)(a1 + 128) = v26;
  return result;
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>(255);
    _sSNy10Foundation4DateVGSgMaTm_0(255, &lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?, (uint64_t (*)(uint64_t))type metadata accessor for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?));
    }
  }
}

void type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?(uint64_t a1)
{
}

void _sSNy10Foundation4DateVGSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t _sSNy10Foundation4DateVGWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI14PlaybackButtonV5StateOWObTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined retain of TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 64);
  swift_retain();
  swift_retain();
  outlined copy of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(v3);
  return a1;
}

uint64_t outlined copy of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined release of TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 64);
  swift_release();
  swift_release();
  outlined consume of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(v3);
  return a1;
}

uint64_t outlined consume of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with take of _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>)>?>, MEMORY[0x1E4F40578]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187E20B84()
{
  uint64_t v1 = (int *)(type metadata accessor for CirclePlaybackButtonStyleBody() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = *(void *)(*(void *)v1 + 64);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + v2), *(unsigned __int8 *)(v0 + v2 + 8));
  unint64_t v7 = v0 + v2 + v1[7];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    v9(v7, v8);
    v9(v7 + *(int *)(v4 + 36), v8);
  }
  uint64_t v10 = type metadata accessor for PlaybackButton.Configuration(0);
  unint64_t v11 = v7 + *(int *)(v10 + 20);
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 2, v12)) {
    (*(void (**)(unint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  unint64_t v14 = (v2 + v18 + v6) & ~v6;
  swift_bridgeObjectRelease();
  unint64_t v15 = v7 + *(int *)(v10 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v15, *(void *)(v15 + 8), *(unsigned char *)(v15 + 16));

  swift_release();
  uint64_t v16 = *(void (**)(unint64_t, uint64_t))(v13 + 8);
  v16(v0 + v14, v12);
  v16(v0 + v14 + *(int *)(v4 + 36), v12);

  return swift_deallocObject();
}

void *partial apply for closure #1 in CirclePlaybackButtonStyleBody.resolvedProgressStroke.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for CirclePlaybackButtonStyleBody() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  type metadata accessor for ClosedRange<Date>();

  return closure #1 in CirclePlaybackButtonStyleBody.resolvedProgressStroke.getter(v1 + v4, a1);
}

uint64_t sub_187E20F1C()
{
  swift_release();

  return swift_deallocObject();
}

void *partial apply for specialized closure #1 in TimelineView<>.init(_:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return specialized closure #1 in TimelineView<>.init(_:content:)(a1, *(void (**)(void *__return_ptr, char *))(v2 + 16), a2);
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StrokeShapeView<_TrimmedShape<Circle._Inset>, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>(uint64_t a1)
{
  return a1;
}

double _s7SwiftUI9TupleViewVyAA15ModifiedContentVyAEyAA011StrokeShapeD0VyAA6CircleV6_InsetVAA5ColorVAA05EmptyD0VGAA15_RotationEffectVGAA06_ScaleN0VG_AEyAEyAEyAEyAEyAGyAA08_TrimmedH0VyAKGAmOGARGAUGAA010_BlendModeN0VGAA18_AnimationModifierVyAA14PlaybackButtonV5PhaseOGGA5_ySbGGtGSgWOi0_(uint64_t a1)
{
  *(unsigned char *)(a1 + 320) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void type metadata accessor for _TrimmedShape<Circle._Inset>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

double _s7SwiftUI23AppearanceAnimationViewVyAA15ModifiedContentVyAEyAA06_ShapeE0VyAA6CircleVAA5ColorVGAA12_ScaleEffectVGAA010_BlendModeL0VGAEyArA08_OpacityL0VGGSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t outlined init with take of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(uint64_t a1, uint64_t a2)
{
  _sSNy10Foundation4DateVGSgMaTm_0(0, &lazy cache variable for type metadata for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?, (uint64_t (*)(uint64_t))type metadata accessor for AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *outlined retain of AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23]);
  return a1;
}

uint64_t sub_187E21258()
{
  return _s7SwiftUI15ModifiedContentVyACyAA10_ShapeViewVyAA6CircleVAA5ColorVGAA12_ScaleEffectVGAA010_BlendModeJ0VGACyxq_GAA0F0A2aRRzAA0F8ModifierR_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEf, type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent);
}

uint64_t _s7SwiftUI15ModifiedContentVyACyAA10_ShapeViewVyAA6CircleVAA5ColorVGAA12_ScaleEffectVGAA010_BlendModeJ0VGACyxq_GAA0F0A2aRRzAA0F8ModifierR_rlWlTm_0(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void PrintPage.content.getter()
{
}

void PrintPage.content.setter()
{
}

void PrintPage.content.modify()
{
}

void PrintPage.init(content:)()
{
}

void static PrintPage._makePrintContent(content:inputs:)()
{
}

_UNKNOWN **associated type witness table accessor for PrintContent.PrintBody : PrintContent in PrintPage<A>()
{
  return &protocol witness table for Never;
}

uint64_t getEnumTagSinglePayload for PrintPage(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PrintPage(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187E21710);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for PrintPage()
{
  return __swift_instantiateGenericMetadata();
}

id UISecureWindow.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UISecureWindow();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t static Image.transferRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  v22[1] = a1;
  type metadata accessor for (DataRepresentation<Image>, DataRepresentation<Image>)();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UTType();
  MEMORY[0x1F4188790](v5 - 8);
  unsigned int v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DataRepresentation<Image>();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unsigned int v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)v22 - v14;
  static UTType.png.getter();
  unint64_t v16 = lazy protocol witness table accessor for type Image and conformance Image();
  uint64_t v17 = MEMORY[0x1E4F41558];
  MEMORY[0x18C10ABF0](v7, &async function pointer to closure #1 in static Image.transferRepresentation.getter, 0, async function pointer to closure #2 in static Image.transferRepresentation.getter, 0, MEMORY[0x1E4F41558], v16);
  static UTType.jpeg.getter();
  MEMORY[0x18C10ABF0](v7, &async function pointer to closure #3 in static Image.transferRepresentation.getter, 0, async function pointer to closure #4 in static Image.transferRepresentation.getter, 0, v17, v16);
  uint64_t v18 = &v4[*(int *)(v2 + 48)];
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v19(v4, v15, v9);
  v19(v18, v12, v9);
  TupleTransferRepresentation.init(_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v12, v9);
  return ((uint64_t (*)(char *, uint64_t))v20)(v15, v9);
}

void type metadata accessor for (DataRepresentation<Image>, DataRepresentation<Image>)()
{
  if (!lazy cache variable for type metadata for (DataRepresentation<Image>, DataRepresentation<Image>))
  {
    type metadata accessor for DataRepresentation<Image>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (DataRepresentation<Image>, DataRepresentation<Image>));
    }
  }
}

void type metadata accessor for DataRepresentation<Image>()
{
  if (!lazy cache variable for type metadata for DataRepresentation<Image>)
  {
    lazy protocol witness table accessor for type Image and conformance Image();
    unint64_t v0 = type metadata accessor for DataRepresentation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DataRepresentation<Image>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Image and conformance Image()
{
  unint64_t result = lazy protocol witness table cache variable for type Image and conformance Image;
  if (!lazy protocol witness table cache variable for type Image and conformance Image)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image and conformance Image);
  }
  return result;
}

uint64_t closure #1 in static Image.transferRepresentation.getter(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UTType();
  v1[2] = v3;
  v1[3] = *(void *)(v3 - 8);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = *a1;
  v1[4] = v4;
  v1[5] = v5;
  return MEMORY[0x1F4188298](closure #1 in static Image.transferRepresentation.getter, 0, 0);
}

uint64_t closure #1 in static Image.transferRepresentation.getter()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v0[5];
  static UTType.png.getter();
  CFMutableDataRef v3 = specialized static Image.getData(from:contentType:)(v2, v1);
  uint64_t v5 = v4;
  CFMutableDataRef v6 = v3;
  (*(void (**)(void, void))(v0[3] + 8))(v0[4], v0[2]);
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(CFMutableDataRef, uint64_t))v0[1];
  return v7(v6, v5);
}

uint64_t closure #2 in static Image.transferRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UTType();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #2 in static Image.transferRepresentation.getter, 0, 0);
}

uint64_t closure #2 in static Image.transferRepresentation.getter()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 24);
  static UTType.png.getter();
  uint64_t v6 = static Image.makeImage(from:contentType:)(v5, v3, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  **(void **)(v0 + 16) = v6;
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t static Image.makeImage(from:contentType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for UTType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v20 - v9;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  CGDataProviderRef v12 = CGDataProviderCreateWithCFData(isa);

  if (v12)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a3, v4);
    static UTType.png.getter();
    lazy protocol witness table accessor for type TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)> and conformance TupleTransferRepresentation<A, B>((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
    char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v7, v4);
    if (v13)
    {
      v14(v10, v4);
      if (!CGImageCreateWithPNGDataProvider(v12, 0, 0, kCGRenderingIntentDefault))
      {
LABEL_9:
        uint64_t v15 = type metadata accessor for TransferableError();
        lazy protocol witness table accessor for type TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)> and conformance TupleTransferRepresentation<A, B>(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, MEMORY[0x1E4F248F8]);
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104))(v18, *MEMORY[0x1E4F248F0], v15);
        swift_willThrow();

        return v15;
      }
    }
    else
    {
      static UTType.jpeg.getter();
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      v14(v7, v4);
      v14(v10, v4);
      if ((v17 & 1) == 0 || !CGImageCreateWithJPEGDataProvider(v12, 0, 0, kCGRenderingIntentDefault)) {
        goto LABEL_9;
      }
    }
    uint64_t v15 = Image.init(decorative:scale:orientation:)();
  }
  else
  {
    uint64_t v15 = type metadata accessor for TransferableError();
    lazy protocol witness table accessor for type TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)> and conformance TupleTransferRepresentation<A, B>(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, MEMORY[0x1E4F248F8]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104))(v16, *MEMORY[0x1E4F248F0], v15);
    swift_willThrow();
  }
  return v15;
}

uint64_t closure #3 in static Image.transferRepresentation.getter(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UTType();
  v1[2] = v3;
  v1[3] = *(void *)(v3 - 8);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = *a1;
  v1[4] = v4;
  v1[5] = v5;
  return MEMORY[0x1F4188298](closure #3 in static Image.transferRepresentation.getter, 0, 0);
}

uint64_t closure #3 in static Image.transferRepresentation.getter()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v0[5];
  static UTType.jpeg.getter();
  CFMutableDataRef v3 = specialized static Image.getData(from:contentType:)(v2, v1);
  uint64_t v5 = v4;
  CFMutableDataRef v6 = v3;
  (*(void (**)(void, void))(v0[3] + 8))(v0[4], v0[2]);
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(CFMutableDataRef, uint64_t))v0[1];
  return v7(v6, v5);
}

uint64_t closure #4 in static Image.transferRepresentation.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UTType();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #4 in static Image.transferRepresentation.getter, 0, 0);
}

uint64_t closure #4 in static Image.transferRepresentation.getter()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 24);
  static UTType.jpeg.getter();
  uint64_t v6 = static Image.makeImage(from:contentType:)(v5, v3, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v4);
  **(void **)(v0 + 16) = v6;
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t associated type witness table accessor for Transferable.Representation : TransferRepresentation in Image()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187E22708()
{
  return lazy protocol witness table accessor for type TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)> and conformance TupleTransferRepresentation<A, B>(&lazy protocol witness table cache variable for type TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)> and conformance TupleTransferRepresentation<A, B>, (void (*)(uint64_t))type metadata accessor for TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)>);
}

void type metadata accessor for TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)>()
{
  if (!lazy cache variable for type metadata for TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)>)
  {
    type metadata accessor for (DataRepresentation<Image>, DataRepresentation<Image>)();
    lazy protocol witness table accessor for type Image and conformance Image();
    unint64_t v0 = type metadata accessor for TupleTransferRepresentation();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)> and conformance TupleTransferRepresentation<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in static Image.getData(from:contentType:)()
{
  return GraphicsContext.draw(_:in:style:shading:)();
}

CFMutableDataRef specialized static Image.getData(from:contentType:)(uint64_t a1, void *a2)
{
  uint64_t v34 = a2;
  type metadata accessor for Text.Style?();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (uint64_t *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  EnvironmentValues.init()();
  static DisplayGamut.deviceDefault.getter();
  LOBYTE(v36) = (_BYTE)v43;
  EnvironmentValues.displayGamut.setter();
  LOBYTE(v36) = 0;
  default argument 2 of RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)();
  LOBYTE(v35[0]) = 1;
  RasterizationOptions.init(colorMode:rbColorMode:flags:maxDrawableCount:)();
  int v8 = v56;
  if ((v56 & 1) == 0)
  {
    int v8 = v56 | 1;
    v56 |= 1u;
  }
  long long v36 = v58;
  uint64_t v9 = type metadata accessor for Text.Style();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  swift_retain();
  swift_retain();
  default argument 2 of ImageResolutionContext.init(environment:textStyle:transaction:)();
  ImageResolutionContext.init(environment:textStyle:transaction:)();
  Image.resolve(in:)();
  id v10 = v43;
  char v11 = v44;
  *(void *)&long long v59 = v43;
  BYTE8(v59) = v44;
  long long v60 = v45;
  *(void *)uint64_t v61 = v46;
  v61[8] = v47;
  *(_OWORD *)&v61[12] = v48;
  v61[28] = v49;
  long long v62 = v50;
  long long v63 = v51;
  int v64 = v52;
  outlined copy of GraphicsImage.Contents?(v43, v44);
  outlined release of Image.Resolved((uint64_t)&v43);
  type metadata accessor for CGImageRef(0);
  long long v40 = v62;
  long long v41 = v63;
  int v42 = v64;
  long long v36 = v59;
  long long v37 = v60;
  long long v38 = *(_OWORD *)v61;
  long long v39 = *(_OWORD *)&v61[16];
  GraphicsImage.size.getter();
  double v13 = v12;
  double v15 = v14;
  long long v40 = v62;
  long long v41 = v63;
  int v42 = v64;
  long long v36 = v59;
  long long v37 = v60;
  long long v38 = *(_OWORD *)v61;
  long long v39 = *(_OWORD *)&v61[16];
  GraphicsImage.scale.getter();
  double v17 = v16;
  uint64_t v18 = v7[1];
  v35[0] = *v7;
  v35[1] = v18;
  LOBYTE(v36) = v53;
  DWORD1(v36) = v54;
  BYTE8(v36) = v55;
  HIDWORD(v36) = v8;
  LOBYTE(v37) = v57;
  MEMORY[0x1F4188790](v18);
  *(&v33 - 2) = (uint64_t)&v59;
  swift_retain();
  swift_retain();
  uint64_t v19 = (void *)MEMORY[0x18C116570](v35, &v36, partial apply for closure #1 in static Image.getData(from:contentType:), &v33 - 4, v13, v15, v17);
  swift_release();
  swift_release();
  if (!v19)
  {
    uint64_t v29 = type metadata accessor for TransferableError();
    lazy protocol witness table accessor for type TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)> and conformance TupleTransferRepresentation<A, B>(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, MEMORY[0x1E4F248F8]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v29 - 8) + 104))(v30, *MEMORY[0x1E4F248E8], v29);
    swift_willThrow();
    goto LABEL_11;
  }
  uint64_t v20 = v19;
  CFMutableDataRef result = CFDataCreateMutable(0, 0);
  if (result)
  {
    double v22 = result;
    uint64_t v23 = UTType.identifier.getter();
    uint64_t v24 = (__CFString *)MEMORY[0x18C115780](v23);
    swift_bridgeObjectRelease();
    uint64_t v25 = CGImageDestinationCreateWithData(v22, v24, 1uLL, 0);

    if (v25)
    {
      CGImageDestinationAddImage(v25, v20, 0);
      if (CGImageDestinationFinalize(v25))
      {
        uint64_t v26 = v22;
        uint64_t v34 = v10;
        uint64_t v27 = v26;
        uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

        outlined consume of GraphicsImage.Contents?(v34, v11);
        outlined destroy of ImageResolutionContext((uint64_t)v7);
        swift_release();
        swift_release();
        return (CFMutableDataRef)v28;
      }
    }
    uint64_t v31 = type metadata accessor for TransferableError();
    lazy protocol witness table accessor for type TupleTransferRepresentation<Image, (DataRepresentation<Image>, DataRepresentation<Image>)> and conformance TupleTransferRepresentation<A, B>(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, MEMORY[0x1E4F248F8]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104))(v32, *MEMORY[0x1E4F248E8], v31);
    swift_willThrow();

LABEL_11:
    outlined consume of GraphicsImage.Contents?(v10, v11);
    outlined destroy of ImageResolutionContext((uint64_t)v7);
    uint64_t v28 = *((void *)&v58 + 1);
    swift_release();
    swift_release();
    return (CFMutableDataRef)v28;
  }
  __break(1u);
  return result;
}

void type metadata accessor for Text.Style?()
{
  if (!lazy cache variable for type metadata for Text.Style?)
  {
    type metadata accessor for Text.Style();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?);
    }
  }
}

uint64_t partial apply for closure #1 in static Image.getData(from:contentType:)()
{
  return closure #1 in static Image.getData(from:contentType:)();
}

uint64_t outlined destroy of ImageResolutionContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ImageResolutionContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void _OpenStageAction.callAsFunction<A>(value:)()
{
}

Swift::Void __swiftcall _OpenStageAction.callAsFunction(id:)(Swift::String id)
{
}

void _OpenStageAction.callAsFunction<A>(id:value:)()
{
}

void EnvironmentValues.openStage.getter()
{
}

void EnvironmentValues._openStage.getter()
{
}

void sub_187E22F84()
{
}

void sub_187E22FAC()
{
}

ValueMetadata *type metadata accessor for _OpenStageAction()
{
  return &type metadata for _OpenStageAction;
}

uint64_t ScrollView.init(_:content:)@<X0>(char a1@<W0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  return ScrollView.init(_:showsIndicators:content:)(a1, 1, a2, a3);
}

uint64_t ScrollView.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t ScrollView.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*ScrollView.content.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ScrollView.axes.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t ScrollView.axes.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*ScrollView.axes.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(v2 + *(int *)(a2 + 36));
  return ScrollView.axes.modify;
}

uint64_t ScrollView.axes.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + *(int *)(*(void *)result + 36)) = *(unsigned char *)(result + 16);
  return result;
}

uint64_t ScrollView.showsIndicators.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36) + 1);
}

uint64_t ScrollView.showsIndicators.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36) + 1) = result;
  return result;
}

uint64_t (*ScrollView.showsIndicators.modify(uint64_t a1, uint64_t a2))(uint64_t result)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(v2 + *(int *)(a2 + 36) + 1);
  return ScrollView.showsIndicators.modify;
}

uint64_t ScrollView.showsIndicators.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 8) + *(int *)(*(void *)result + 36) + 1) = *(unsigned char *)(result + 16);
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SystemScrollViewContainer<A>.EnvironmentAxesModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SystemScrollViewContainer<A>.EnvironmentAxesModifier()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t ResolvedScrollBehaviorModifier.UpdateEnvironment.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  uint64_t v11 = *Value;
  uint64_t v12 = v3;
  type metadata accessor for _GraphValue<OnTestViewModifier>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4FBB718]);
  uint64_t v4 = AGGraphGetValue();
  outlined init with copy of ResolvedScrollBehavior?(v4, (uint64_t)v10);
  type metadata accessor for StyleContextWriter<ContainerStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  outlined assign with take of ResolvedScrollBehavior?((uint64_t)v10, (uint64_t)v9);
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)&v8, (uint64_t)v7);
  type metadata accessor for StyleContextWriter<ContainerStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v12)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v8);
  uint64_t v8 = 0;
  v9[0] = 1;
  type metadata accessor for StyleContextWriter<ContainerStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (v12)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    uint64_t v6 = v12;
  }
  else
  {
    uint64_t result = swift_release();
    uint64_t v6 = 0;
  }
  *a1 = v11;
  a1[1] = v6;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ResolvedScrollBehaviorModifier.UpdateEnvironment@<X0>(void *a1@<X8>)
{
  return ResolvedScrollBehaviorModifier.UpdateEnvironment.value.getter(a1);
}

double protocol witness for static StatefulRule.initialValue.getter in conformance ResolvedScrollBehaviorModifier.MakeBehavior@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResolvedScrollBehaviorModifier(int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  void v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  char v9 = *(unsigned char *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

void protocol witness for ViewModifier.body(content:) in conformance ResolvedScrollBehaviorModifier()
{
}

uint64_t View.scrollViewStyleContext()()
{
  return View.styleContext<A>(_:)();
}

void View.enableResponsiveScrolling()()
{
}

uint64_t ScrollView._alwaysBounceAxes.getter()
{
  return 0;
}

uint64_t ScrollView._alwaysBounceAxes.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a2, a3, a4);
}

uint64_t (*ScrollView._alwaysBounceAxes.modify(unsigned char *a1))(void, void, void, void)
{
  *a1 = 0;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ScrollView.scrollsContentToBeginningInRightToLeft.getter()
{
  return 1;
}

uint64_t (*ScrollView.scrollsContentToBeginningInRightToLeft.modify(unsigned char *a1))(void, void, void, void)
{
  *a1 = 1;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t sub_187E236B8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ScrollView();
  uint64_t result = ScrollView.axes.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_187E236F4(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = type metadata accessor for ScrollView();
  return ScrollView.axes.setter(v1, v2);
}

uint64_t sub_187E23734()
{
  return 16;
}

__n128 sub_187E23740(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187E2374C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ScrollView();
  uint64_t result = ScrollView.showsIndicators.getter(v2);
  *a1 = result & 1;
  return result;
}

uint64_t sub_187E2378C(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = type metadata accessor for ScrollView();
  return ScrollView.showsIndicators.setter(v1, v2);
}

uint64_t sub_187E237CC()
{
  return 16;
}

__n128 sub_187E237D8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_187E237E4(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_187E237EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_8Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation);
}

uint64_t sub_187E23804()
{
  return 16;
}

__n128 sub_187E23810(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void sub_187E2381C(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_187E23828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_8Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation);
}

uint64_t keypath_set_8Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = type metadata accessor for ScrollView();
  return a5(v6);
}

uint64_t sub_187E2387C()
{
  return 16;
}

__n128 sub_187E23888(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t outlined destroy of ScrollToTopGestureAction(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of RefreshAction(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for ScrollView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(unsigned char *)(v7 + 1) = *(unsigned char *)(v8 + 1);
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(unsigned char *)(v7 + 40) = *(unsigned char *)(v8 + 40);
  char v9 = (_OWORD *)(v7 + 48);
  uint64_t v10 = *(void *)(v8 + 48);
  if (*(void *)(v7 + 48))
  {
    if (v10)
    {
      uint64_t v11 = *(void *)(v8 + 56);
      *(void *)(v7 + 48) = v10;
      *(void *)(v7 + 56) = v11;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of ScrollToTopGestureAction((uint64_t)v9);
  }
  *char v9 = *(_OWORD *)(v8 + 48);
LABEL_6:
  swift_unknownObjectWeakTakeAssign();
  double v13 = (_OWORD *)(v7 + 80);
  uint64_t v12 = *(void *)(v7 + 80);
  *(void *)(v7 + 72) = *(void *)(v8 + 72);
  double v15 = (_OWORD *)(v8 + 80);
  uint64_t v14 = *(void *)(v8 + 80);
  if (v12)
  {
    if (v14)
    {
      uint64_t v16 = *(void *)(v8 + 88);
      *(void *)(v7 + 80) = v14;
      *(void *)(v7 + 88) = v16;
      swift_release();
      *(void *)(v7 + 96) = *(void *)(v8 + 96);
    }
    else
    {
      outlined destroy of RefreshAction(v7 + 80);
      uint64_t v18 = *(void *)(v8 + 96);
      *double v13 = *v15;
      *(void *)(v7 + 96) = v18;
    }
  }
  else
  {
    long long v17 = *v15;
    *(void *)(v7 + 96) = *(void *)(v8 + 96);
    *double v13 = v17;
  }
  *(void *)(v7 + 104) = *(void *)(v8 + 104);
  *(void *)(v7 + 112) = *(void *)(v8 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_187E23AF4()
{
  type metadata accessor for SystemScrollViewContainer();

  return swift_getWitnessTable();
}

uint64_t sub_187E23B3C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187E23BD4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t initializeWithTake for ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_unknownObjectWeakTakeInit();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  return a1;
}

uint64_t assignWithTake for ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  int v4 = (_OWORD *)(a1 + 48);
  uint64_t v6 = (_OWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v5;
      *(void *)(a1 + 56) = v7;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of ScrollToTopGestureAction(a1 + 48);
  }
  *int v4 = *v6;
LABEL_6:
  swift_unknownObjectWeakTakeAssign();
  uint64_t v8 = *(void *)(a2 + 80);
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  if (!v9)
  {
LABEL_10:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    goto LABEL_11;
  }
  if (!v8)
  {
    outlined destroy of RefreshAction(a1 + 80);
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v10;
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
LABEL_11:
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 72) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)(a1 + 64) & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      *(void *)(result + 72) = 1;
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t assignWithTake for SystemScrollViewContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = (_OWORD *)(a1 + 48);
  uint64_t v8 = (_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v7)
    {
      uint64_t v9 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = v9;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of ScrollToTopGestureAction(a1 + 48);
  }
  *uint64_t v6 = *v8;
LABEL_6:
  swift_unknownObjectWeakTakeAssign();
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  if (!v11)
  {
LABEL_10:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    goto LABEL_11;
  }
  if (!v10)
  {
    outlined destroy of RefreshAction(a1 + 80);
    goto LABEL_10;
  }
  uint64_t v12 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = v12;
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
LABEL_11:
  uint64_t v13 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 40))((*(unsigned __int8 *)(v14 + 80) + 120 + a1) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (*(unsigned __int8 *)(v14 + 80) + 120 + a2) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemScrollViewContainer(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 120) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 120) & ~v6);
      }
      if ((*((void *)a1 + 9) & 0xF000000000000007) != 0) {
        return (*((_DWORD *)a1 + 16) & 0x7FFFFFFFu) + 1;
      }
      return 0;
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for SystemScrollViewContainer(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 120) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187E24380);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 120] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(_OWORD *)(a1 + 104) = 0u;
          *(_OWORD *)(a1 + 88) = 0u;
          *(_OWORD *)(a1 + 72) = 0u;
          *(_OWORD *)(a1 + 56) = 0u;
          *(_OWORD *)(a1 + 40) = 0u;
          *(_OWORD *)(a1 + 24) = 0u;
          *(_OWORD *)(a1 + 8) = 0u;
          *(void *)a1 = a2 ^ 0x80000000;
        }
        else
        {
          *((void *)a1 + 8) = a2 - 1;
          *((void *)a1 + 9) = 1;
        }
      }
      return;
  }
}

uint64_t sub_187E243A8()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in SystemScrollViewContainer<A>.EnvironmentAxesModifier()
{
  return &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ResolvedScrollBehaviorModifier()
{
  return &protocol witness table for ResolvedScrollBehaviorModifier;
}

void *type metadata accessor for ResolvedScrollBehaviorModifier.UpdateEnvironment()
{
  return &unk_1ED459B20;
}

void *type metadata accessor for ResolvedScrollBehaviorModifier.MakeBehavior()
{
  return &unk_1ED459AA0;
}

void *type metadata accessor for ResolvedScrollBehaviorModifier.TrackedEnvironment()
{
  return &unk_1ED459BA8;
}

uint64_t InspectorModifier.init(inspectorContent:isPresented:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6, a1, a5);
  uint64_t result = type metadata accessor for InspectorModifier();
  uint64_t v11 = a6 + *(int *)(result + 36);
  *(void *)uint64_t v11 = a2;
  *(void *)(v11 + 8) = a3;
  *(unsigned char *)(v11 + 16) = a4;
  return result;
}

uint64_t InspectorModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _ViewModifier_Content();
  swift_getWitnessTable();
  v19[1] = type metadata accessor for UnaryInspectorRoot();
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for _VariadicView.Tree();
  uint64_t v20 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unsigned int v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v19 - v10;
  unsigned int v12 = (uint64_t *)(v2 + *(int *)(a1 + 36));
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  LOBYTE(v12) = *((unsigned char *)v12 + 16);
  uint64_t v30 = v14;
  uint64_t v31 = v13;
  char v32 = (char)v12;
  uint64_t v15 = type metadata accessor for UnaryInspectorRoot();
  (*(void (**)(char *))(*(void *)(v4 - 8) + 32))((char *)&v30 + *(int *)(v15 + 36));
  uint64_t v27 = v30;
  uint64_t v28 = v31;
  char v29 = v32;
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v22 = v5;
  uint64_t v23 = v16;
  uint64_t v24 = v2;
  swift_retain();
  swift_retain();
  _VariadicView.Tree.init(_:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v26 = v16;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  int v17 = *(void (**)(char *, uint64_t))(v20 + 8);
  v17(v8, v6);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v17)(v11, v6);
}

uint64_t closure #1 in InspectorModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

double closure #1 in UnaryInspectorRoot.inspectorColumnWidth(from:)@<D0>(uint64_t a1@<X8>)
{
  ViewTraitCollection.value<A>(for:defaultValue:)();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t UnaryInspectorRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v28 = a3;
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v22 - v8;
  type metadata accessor for PortableInspectorModifier<ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>>();
  uint64_t v25 = v10;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v26 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v24 = (char *)&v22 - v15;
  specialized UnaryInspectorRoot.inspectorColumnWidth(from:)(a1, (uint64_t)v49);
  static Alignment.center.getter();
  uint64_t v23 = *(void *)(a2 + 24);
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v16 = *(void *)(v4 + 8);
  char v17 = *(unsigned char *)(v4 + 16);
  v36[0] = *(void *)v4;
  v36[1] = v16;
  char v37 = v17;
  swift_retain();
  swift_retain();
  outlined init with take of InspectorColumnWidth?((uint64_t)v49, (uint64_t)v38);
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v33);
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v34, 0.0, 1, INFINITY, 0);
  outlined destroy of _UnaryViewAdaptor<_VariadicView_Children>((uint64_t)v33);
  long long v46 = v34[8];
  long long v47 = v34[9];
  long long v42 = v34[4];
  long long v43 = v34[5];
  uint64_t v48 = v35;
  long long v45 = v34[7];
  long long v44 = v34[6];
  *(_OWORD *)&v38[40] = v34[0];
  long long v39 = v34[1];
  long long v41 = v34[3];
  long long v40 = v34[2];
  uint64_t v31 = v23;
  uint64_t v32 = MEMORY[0x1E4F3FE50];
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v36, v7, v25, WitnessTable);
  outlined destroy of LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for PortableInspectorModifier<ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>>);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v7);
  uint64_t v29 = WitnessTable;
  uint64_t v30 = &protocol witness table for PortableInspectorModifier<A>;
  swift_getWitnessTable();
  uint64_t v19 = v24;
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v20(v13, v11);
  static ViewBuilder.buildExpression<A>(_:)(v19);
  return ((uint64_t (*)(char *, uint64_t))v20)(v19, v11);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance UnaryInspectorRoot<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance UnaryInspectorRoot<A>()
{
  return MEMORY[0x1F40FF800]();
}

uint64_t static PortableInspectorModifier._makeView(modifier:inputs:body:)(int *a1)
{
  int v1 = *a1;
  type metadata accessor for PortableInspectorModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  int v9 = _GraphValue.value.getter();
  uint64_t v2 = MEMORY[0x1E4FBB390];
  uint64_t v3 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F41638];
  type metadata accessor for AnyHashable?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Binding<Bool>>, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, v2, v3);
  int v8 = _GraphValue.value.getter();
  uint64_t v4 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for AnyHashable?(0, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, MEMORY[0x1E4FBB718]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<Binding<Bool>>(0, &lazy cache variable for type metadata for _GraphValue<InspectorColumnWidth?>, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, v4);
  int v7 = _GraphValue.value.getter();
  lazy protocol witness table accessor for type IsInNavigationV4Context and conformance IsInNavigationV4Context();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_getKeyPath();
  int v5 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  v10[0] = v9;
  v10[1] = v8;
  void v10[2] = v7;
  v10[3] = v5;
  char v11 = v1;
  type metadata accessor for PortableInspectorModifier.SplitWrapperModifier();
  long long v13 = 0uLL;
  uint64_t v12 = 0;
  outlined retain of PortableInspectorModifier<A>.SplitWrapper((uint64_t)v10);
  type metadata accessor for PortableInspectorModifier.SplitWrapper();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  swift_getWitnessTable();
  static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  return outlined release of PortableInspectorModifier<A>.SplitWrapper((uint64_t)v10);
}

uint64_t closure #1 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PortableInspectorModifier();
  uint64_t v5 = a1 + *(int *)(v4 + 40);
  v9[2] = v4;
  v9[3] = a2;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t closure #2 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  v7[2] = type metadata accessor for PortableInspectorModifier();
  type metadata accessor for AnyHashable?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v3, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t closure #3 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1 = a1 + 24;
  v7[2] = type metadata accessor for PortableInspectorModifier();
  type metadata accessor for AnyHashable?(0, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, MEMORY[0x1E4FBB718]);
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_13, (uint64_t)v7, v3, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t PortableInspectorModifier.SplitWrapper.isPresented.getter()
{
  type metadata accessor for AnyHashable?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v0 = *(void *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t PortableInspectorModifier.SplitWrapper.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  v70[1] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v6 = type metadata accessor for PortableInspectorModifier.SplitWrapperModifier();
  uint64_t v54 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v53 = (uint64_t)&v49 - v7;
  uint64_t v8 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v9);
  char v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v51 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (objc_class *)((char *)&v49 - v15);
  uint64_t Value = AGGraphGetValue();
  uint64_t v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, Value, v5);
  MEMORY[0x18C113660](v18, v5, &unk_1ED4480C8, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v5);
  uint64_t v55 = v6;
  if (!AGGraphGetOutputValue())
  {
    unint64_t v19 = lazy protocol witness table accessor for type PreparedInspectorModifier and conformance PreparedInspectorModifier();
    uint64_t v60 = v4;
    unint64_t v61 = v19;
    swift_getWitnessTable();
    id v20 = objc_allocWithZone((Class)type metadata accessor for InspectorHostingView());
    uint64_t v21 = specialized _UIHostingView.init(rootView:)(v16);

    v2[4] = v21;
    id v22 = objc_msgSend(self, sel_clearColor);
    objc_msgSend(v21, sel_setBackgroundColor_, v22);

    type metadata accessor for UIHostingController();
    uint64_t v23 = UIHostingController.__allocating_init(hostingView:)((uint64_t)v21);

    v2[5] = (id)v23;
    id v24 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitNavigationController()), sel_initWithRootViewController_, v23);

    v2[3] = v24;
  }
  long long v25 = *((_OWORD *)v2 + 1);
  long long v64 = *(_OWORD *)v2;
  long long v65 = v25;
  long long v66 = *((_OWORD *)v2 + 2);
  uint64_t v56 = PortableInspectorModifier.SplitWrapper.isPresented.getter();
  uint64_t v50 = v26;
  char v28 = v27;
  uint64_t v29 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for AnyHashable?(0, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, MEMORY[0x1E4FBB718]);
  uint64_t v30 = AGGraphGetValue();
  char v31 = *(unsigned char *)(v30 + 32);
  long long v32 = *(_OWORD *)(v30 + 16);
  v62[0] = *(_OWORD *)v30;
  v62[1] = v32;
  char v63 = v31;
  outlined init with take of UIKitNavigationController?((uint64_t)&v65 + 8, (uint64_t)&v68);
  type metadata accessor for AnyHashable?(0, &lazy cache variable for type metadata for UserInterfaceSizeClass?, MEMORY[0x1E4F409E8], v29);
  int v33 = *(unsigned __int8 *)AGGraphGetValue();
  char v57 = (v33 == 2) | v33 & 1;
  outlined init with take of UIKitNavigationController?((uint64_t)&v68, (uint64_t)&v69);
  uint64_t v34 = v69;
  if (!v69)
  {
    __break(1u);
LABEL_7:
    __break(1u);
  }
  unint64_t v35 = lazy protocol witness table accessor for type PreparedInspectorModifier and conformance PreparedInspectorModifier();
  uint64_t v58 = v4;
  unint64_t v59 = v35;
  swift_getWitnessTable();
  type metadata accessor for UIHostingController();
  uint64_t v36 = type metadata accessor for Optional();
  char v37 = *(void (**)(id *, char *, uint64_t))(*(void *)(v36 - 8) + 32);
  v37(&v67, (char *)&v66 + 8, v36);
  v37((id *)v70, (char *)&v67, v36);
  long long v38 = (void *)v70[0];
  if (!v70[0]) {
    goto LABEL_7;
  }
  char v39 = v65;
  uint64_t v40 = v52;
  uint64_t v41 = (uint64_t)v51;
  (*(void (**)(char *, objc_class *, uint64_t))(v52 + 16))(v51, v16, v12);
  uint64_t v42 = v53;
  uint64_t v43 = PortableInspectorModifier.SplitWrapperModifier.init(isPresented:width:horizontalSizeClass:hostedPortableInspector:hostingControllerInspector:inspectorContent:inNavigationContext:)(v56, v50, v28 & 1, (uint64_t)v62, &v57, v34, v38, v41, v53, v39);
  MEMORY[0x1F4188790](v43);
  uint64_t v47 = a1;
  uint64_t WitnessTable = swift_getWitnessTable();
  outlined retain of UserActivityTrackingInfo?(&v68);
  outlined retain of UserActivityTrackingInfo?(&v67);
  uint64_t v44 = v55;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v42, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v49 - 4), v55, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v45);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v42, v44);
  return (*(uint64_t (**)(objc_class *, uint64_t))(v40 + 8))(v16, v12);
}

uint64_t PortableInspectorModifier.SplitWrapperModifier.init(isPresented:width:horizontalSizeClass:hostedPortableInspector:hostingControllerInspector:inspectorContent:inNavigationContext:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  uint64_t v14 = *MEMORY[0x1E4FBC8C8] & *a7;
  char v15 = *a5;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3;
  outlined init with take of InspectorColumnWidth?(a4, a9 + 24);
  *(unsigned char *)(a9 + 57) = v15;
  *(void *)(a9 + 64) = a6;
  *(void *)(a9 + 72) = a7;
  uint64_t v16 = *(void *)(v14 + 80);
  uint64_t v17 = type metadata accessor for PortableInspectorModifier.SplitWrapperModifier();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(a9 + *(int *)(v17 + 52), a8, v16);
  *(unsigned char *)(a9 + *(int *)(v17 + 56)) = a10;
  return result;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance PortableInspectorModifier<A>.SplitWrapper@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for PortableInspectorModifier.SplitWrapperModifier();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t PortableInspectorModifier.SplitWrapperModifier.containedInspector(for:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v50 = a3;
  uint64_t v51 = a2;
  uint64_t v42 = type metadata accessor for ModifiedContent();
  uint64_t v5 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v7 = (char *)&v37 - v6;
  uint64_t v41 = *(void *)(a2 + 24);
  uint64_t v39 = type metadata accessor for ContainerViewControllerRepresentable();
  uint64_t v45 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v9 = (char *)&v37 - v8;
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, MEMORY[0x1E4F40F90]);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v49 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  char v37 = (char *)&v37 - v11;
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F414D0], MEMORY[0x1E4F40E10]);
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v47 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v37 - v13;
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, MEMORY[0x1E4F41108]);
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v46 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v44 = type metadata accessor for ModifiedContent();
  uint64_t v48 = *(void *)(v44 - 8);
  double v18 = MEMORY[0x1F4188790](v44);
  long long v38 = (char *)&v37 - v19;
  LOBYTE(v19) = *v43;
  uint64_t v20 = v3;
  uint64_t v40 = v3;
  LOBYTE(v60[0]) = *(unsigned char *)(v3 + 57);
  char v61 = v19;
  uint64_t v21 = *(void **)(v3 + 64);
  id v22 = *(void **)(v20 + 72);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v20 + *(int *)(v51 + 52), v42, v18);
  ContainerViewControllerRepresentable.init(currentSizeClass:activeSizeClass:hostedPortableInspector:hostingController:inspectorContent:)(v60, &v61, (uint64_t)v21, v22, (uint64_t)v7, (uint64_t)v9);
  id v23 = v21;
  id v24 = v22;
  UIHostingController.presentationOptions.getter();
  long long v25 = v37;
  uint64_t v26 = v39;
  View.preference<A>(key:value:)();
  outlined destroy of PresentationOptionsPreference((uint64_t)v60);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v26);
  v60[0] = static Color.clear.getter();
  static Edge.Set.all.getter();
  unint64_t v27 = lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>();
  uint64_t v58 = &protocol witness table for ContainerViewControllerRepresentable<A>;
  unint64_t v59 = v27;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.background<A>(_:ignoresSafeAreaEdges:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v25, v10);
  unint64_t v29 = lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
  uint64_t v56 = WitnessTable;
  unint64_t v57 = v29;
  uint64_t v30 = swift_getWitnessTable();
  View.transformPreference<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v14, v12);
  unint64_t v31 = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  uint64_t v54 = v30;
  unint64_t v55 = v31;
  uint64_t v32 = swift_getWitnessTable();
  int v33 = v38;
  MEMORY[0x18C113660](v32, v15, &type metadata for UpdateEnvironmentToAllowedBehaviors, v32);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v17, v15);
  LOBYTE(v60[0]) = *(unsigned char *)(v40 + *(int *)(v51 + 56));
  uint64_t v52 = v32;
  uint64_t v53 = &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
  uint64_t v34 = v44;
  uint64_t v35 = swift_getWitnessTable();
  MEMORY[0x18C113660](v60, v34, &type metadata for InspectorBarManagement, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v33, v34);
}

uint64_t ContainerViewControllerRepresentable.init(currentSizeClass:activeSizeClass:hostedPortableInspector:hostingController:inspectorContent:)@<X0>(unsigned char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4FBC8C8] & *a4;
  char v8 = *a2;
  *(unsigned char *)a6 = *a1;
  *(unsigned char *)(a6 + 1) = v8;
  *(void *)(a6 + 8) = a3;
  *(void *)(a6 + 16) = a4;
  uint64_t v9 = *(void *)(v7 + 80);
  uint64_t v10 = a6 + *(int *)(type metadata accessor for ContainerViewControllerRepresentable() + 48);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);

  return v11(v10, a5, v9);
}

void UIHostingController.presentationOptions.getter()
{
  uint64_t v0 = (void *)specialized UIHostingController.host.getter();
  type metadata accessor for _UIHostingView();
  id v1 = v0;
  swift_getWitnessTable();
  ViewRendererHost.preferenceValue<A>(_:)();
}

uint64_t *closure #1 in PortableInspectorModifier.SplitWrapperModifier.containedInspector(for:)(uint64_t *result)
{
  id v1 = result;
  if (result[6] == 2)
  {
    uint64_t v2 = (void *)*MEMORY[0x1E4FB2F00];
    result[6] = *MEMORY[0x1E4FB2F00];
    uint64_t result = v2;
  }
  if (!*(void *)(*v1 + 16))
  {
    uint64_t v3 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of closure #1 in PortableInspectorModifier.SplitWrapperModifier.containedInspector(for:));
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease();
    *id v1 = v3;
  }
  return result;
}

uint64_t PortableInspectorModifier.SplitWrapperModifier.modifiedContent(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](a1);
  char v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)v4;
  uint64_t v25 = *(void *)(v4 + 8);
  uint64_t v26 = v9;
  int v10 = *(unsigned __int8 *)(v4 + 16);
  int v27 = *(unsigned __int8 *)(v4 + 57);
  int v28 = v10;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v11(v8, v4, a2);
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = *(void *)(a2 + 24);
  *(void *)(v13 + 16) = *(void *)(a2 + 16);
  *(void *)(v13 + 24) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, v8, a2);
  swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for ContainerViewControllerRepresentable();
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, MEMORY[0x1E4F40F90]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F414D0], MEMORY[0x1E4F40E10]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v18 = lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>();
  uint64_t v40 = &protocol witness table for ContainerViewControllerRepresentable<A>;
  unint64_t v41 = v18;
  uint64_t v19 = swift_getWitnessTable();
  unint64_t v20 = lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
  uint64_t v38 = v19;
  unint64_t v39 = v20;
  uint64_t v21 = swift_getWitnessTable();
  unint64_t v22 = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  uint64_t v36 = v21;
  unint64_t v37 = v22;
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v35 = &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
  uint64_t v32 = swift_getWitnessTable();
  int v33 = &protocol witness table for InspectorBarManagement;
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v31 = MEMORY[0x1E4F41200];
  uint64_t v23 = swift_getWitnessTable();
  View.inspectorSheet<A>(isPresented:activeInspector:content:)(v26, v25, v28, (v27 & 1) == 0, (uint64_t)partial apply for closure #1 in PortableInspectorModifier.SplitWrapperModifier.modifiedContent(content:), v13, v15, v16, WitnessTable, v23);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in PortableInspectorModifier.SplitWrapperModifier.modifiedContent(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v22[3] = a1;
  _OWORD v22[4] = a2;
  type metadata accessor for ContainerViewControllerRepresentable();
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, MEMORY[0x1E4F40F90]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F414D0], MEMORY[0x1E4F40E10]);
  v22[0] = type metadata accessor for ModifiedContent();
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, MEMORY[0x1E4F41108]);
  v22[1] = type metadata accessor for ModifiedContent();
  void v22[2] = type metadata accessor for ModifiedContent();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - v4;
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unint64_t v12 = (char *)v22 - v11;
  char v23 = 0;
  uint64_t v13 = type metadata accessor for PortableInspectorModifier.SplitWrapperModifier();
  PortableInspectorModifier.SplitWrapperModifier.containedInspector(for:)(&v23, v13, (uint64_t)v5);
  static Edge.Set.all.getter();
  unint64_t v14 = lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>();
  v22[15] = &protocol witness table for ContainerViewControllerRepresentable<A>;
  v22[16] = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v16 = lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
  v22[13] = WitnessTable;
  v22[14] = v16;
  uint64_t v17 = swift_getWitnessTable();
  unint64_t v18 = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  v22[11] = v17;
  v22[12] = v18;
  v22[9] = swift_getWitnessTable();
  v22[10] = &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
  v22[7] = swift_getWitnessTable();
  v22[8] = &protocol witness table for InspectorBarManagement;
  uint64_t v19 = swift_getWitnessTable();
  View.ignoresSafeArea(_:edges:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v22[5] = v19;
  void v22[6] = MEMORY[0x1E4F41200];
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v9);
  unint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v20)(v12, v6);
}

uint64_t PortableInspectorModifier.SplitWrapperModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  type metadata accessor for ContainerViewControllerRepresentable();
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, MEMORY[0x1E4F40F90]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F414D0], MEMORY[0x1E4F40E10]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v4 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v4);
  uint64_t v43 = a1;
  uint64_t v44 = (uint64_t)&v36 - v5;
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  uint64_t v6 = v4;
  uint64_t v7 = type metadata accessor for ModifiedContent();
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.InspectorKey>, (uint64_t)&type metadata for SheetPreference.InspectorKey, (uint64_t)&protocol witness table for SheetPreference.InspectorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  uint64_t v42 = v8;
  unint64_t v9 = lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>();
  uint64_t v84 = &protocol witness table for ContainerViewControllerRepresentable<A>;
  unint64_t v85 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v11 = lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
  uint64_t v82 = WitnessTable;
  unint64_t v83 = v11;
  uint64_t v12 = swift_getWitnessTable();
  unint64_t v13 = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  uint64_t v80 = v12;
  unint64_t v81 = v13;
  uint64_t v78 = swift_getWitnessTable();
  long long v79 = &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
  uint64_t v76 = swift_getWitnessTable();
  long long v77 = &protocol witness table for InspectorBarManagement;
  uint64_t v40 = v6;
  uint64_t v74 = swift_getWitnessTable();
  uint64_t v75 = MEMORY[0x1E4F41200];
  uint64_t v14 = v74;
  uint64_t v38 = v74;
  uint64_t v15 = swift_getWitnessTable();
  unint64_t v16 = lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>();
  uint64_t v46 = v7;
  uint64_t v47 = v42;
  uint64_t v48 = v15;
  unint64_t v49 = v16;
  type metadata accessor for SheetPresentationModifier();
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v72 = v18;
  uint64_t v73 = v19;
  uint64_t v41 = v17;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v46 = v17;
  uint64_t v47 = v6;
  uint64_t v48 = v39;
  unint64_t v49 = v14;
  uint64_t v20 = type metadata accessor for InspectorSplitView();
  uint64_t v42 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  unint64_t v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  unint64_t v37 = (char *)&v36 - v24;
  uint64_t v25 = *v2;
  uint64_t v26 = v2[1];
  LOBYTE(v14) = *((unsigned char *)v2 + 16);
  long long v36 = *(_OWORD *)(v2 + 3);
  uint64_t v28 = v2[5];
  uint64_t v27 = v2[6];
  char v29 = *((unsigned char *)v2 + 56);
  swift_retain();
  uint64_t v30 = swift_retain();
  v65[0] = v25;
  v65[1] = v26;
  char v66 = v14;
  char v67 = 1;
  long long v68 = v36;
  uint64_t v69 = v28;
  uint64_t v70 = v27;
  char v71 = v29;
  uint64_t v31 = v43;
  PortableInspectorModifier.SplitWrapperModifier.modifiedContent(content:)(v30, v43, (uint64_t)v58);
  v51[0] = v58[0];
  v51[1] = v58[1];
  char v52 = v59;
  long long v53 = v60;
  long long v54 = v61;
  char v55 = v62;
  char v56 = v63;
  char v57 = v64;
  LOBYTE(v46) = 1;
  uint64_t v32 = v44;
  PortableInspectorModifier.SplitWrapperModifier.containedInspector(for:)(&v46, v31, v44);
  char v50 = *((unsigned char *)v2 + 57);
  LOBYTE(v25) = UIHostingController.hasToolbarItems.getter();
  UIHostingController.presentationOptions.getter();
  InspectorSplitView.init(inspectorState:mainContent:inspectorContent:horizontalSizeClass:inspectorHasToolbarItems:presentationOptions:)((uint64_t)v65, (uint64_t)v51, v32, &v50, v25 & 1, (uint64_t)&v46, v41, v40, (uint64_t)v22);
  swift_getWitnessTable();
  int v33 = v37;
  static ViewBuilder.buildExpression<A>(_:)(v22);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v42 + 8);
  v34(v22, v20);
  static ViewBuilder.buildExpression<A>(_:)(v33);
  return ((uint64_t (*)(char *, uint64_t))v34)(v33, v20);
}

BOOL UIHostingController.hasToolbarItems.getter()
{
  uint64_t v0 = (void *)specialized UIHostingController.host.getter();
  type metadata accessor for _UIHostingView();
  id v1 = v0;
  swift_getWitnessTable();
  ViewRendererHost.preferenceValue<A>(_:)();

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  return v2 != 0;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PortableInspectorModifier<A>(int *a1)
{
  return static PortableInspectorModifier._makeView(modifier:inputs:body:)(a1);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PortableInspectorModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance InspectorBarManagement(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance InspectorBarManagement(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance InspectorBarManagement()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance InspectorBarManagement()
{
  lazy protocol witness table accessor for type InspectorBarManagement and conformance InspectorBarManagement();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t static NavigationBarDefaults._makeView(modifier:inputs:body:)@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, void *a3@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 16);
  long long v30 = *(_OWORD *)(a1 + 32);
  long long v31 = v4;
  long long v6 = *(_OWORD *)(a1 + 48);
  long long v32 = *(_OWORD *)(a1 + 64);
  long long v7 = *(_OWORD *)(a1 + 16);
  v29[0] = *(_OWORD *)a1;
  v29[1] = v7;
  *(_OWORD *)&v26[16] = v30;
  *(_OWORD *)uint64_t v27 = v6;
  *(_OWORD *)&v27[16] = *(_OWORD *)(a1 + 64);
  int v33 = *(_DWORD *)(a1 + 80);
  int v28 = *(_DWORD *)(a1 + 80);
  long long v25 = v29[0];
  *(_OWORD *)uint64_t v26 = v5;
  outlined retain of _ViewInputs((uint64_t)v29);
  PreferenceKeys.add(_:)();
  PreferenceKeys.add(_:)();
  int v17 = HIDWORD(v29[0]);
  swift_getKeyPath();
  _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  uint64_t v8 = *(void *)v27;
  uint64_t v15 = v25;
  int v16 = DWORD2(v25);
  uint64_t v18 = *(void *)v26;
  long long v19 = *(_OWORD *)&v26[8];
  uint64_t v20 = *(void *)&v26[24];
  uint64_t v21 = *(void *)v27;
  int v12 = *(_DWORD *)&v27[8];
  long long v22 = *(_OWORD *)&v27[8];
  uint64_t v23 = *(void *)&v27[24];
  int v24 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  a2(&v13, v9, &v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v15 = v13;
  int v16 = v14;
  PreferencesOutputs.subscript.getter();
  uint64_t v15 = v8;
  int v16 = v12;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = v8;
  int v16 = v12;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  *a3 = v13;
  a3[1] = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t implicit closure #1 in static NavigationBarDefaults._makeView(modifier:inputs:body:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type NavigationBarDefaults.DefaultTitle and conformance NavigationBarDefaults.DefaultTitle();

  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t implicit closure #2 in static NavigationBarDefaults._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

long long *closure #1 in NavigationBarDefaults.DefaultTitle.value.getter(long long *result)
{
  uint64_t v1 = *((void *)result + 3);
  if (v1 == 1)
  {
    uint64_t v2 = 0;
    uint64_t v1 = 0;
    uint64_t v3 = 0;
    long long v4 = 0uLL;
    uint64_t v5 = 5;
    uint64_t v6 = 1;
    char v7 = 3;
  }
  else
  {
    if (*((unsigned char *)result + 40) != 5) {
      return result;
    }
    char v7 = *((unsigned char *)result + 56);
    uint64_t v3 = *((void *)result + 6);
    uint64_t v5 = *((unsigned __int8 *)result + 40);
    uint64_t v6 = *((void *)result + 4);
    uint64_t v2 = *((void *)result + 2);
    long long v4 = *result;
  }
  *uint64_t result = v4;
  *((void *)result + 2) = v2;
  *((void *)result + 3) = v1;
  *((void *)result + 4) = v6;
  *((void *)result + 5) = v5;
  *((void *)result + 6) = v3;
  *((unsigned char *)result + 56) = v7;
  *((unsigned char *)result + 40) = 3;
  return result;
}

void protocol witness for Rule.value.getter in conformance NavigationBarDefaults.DefaultTitle(void *a1@<X8>)
{
  *a1 = specialized thunk for @escaping @callee_guaranteed (@inout NavigationTitleStorage?) -> ();
  a1[1] = 0;
}

uint64_t closure #1 in NavigationBarDefaults.DefaultNavigationBarVisibility.value.getter(uint64_t result, int a2, char a3)
{
  if (a3)
  {
    uint64_t v4 = result;
    type metadata accessor for AnyHashable?(0, &lazy cache variable for type metadata for UserInterfaceSizeClass?, MEMORY[0x1E4F409E8], MEMORY[0x1E4FBB718]);
    int v5 = *(unsigned __int8 *)AGGraphGetValue();
    if (v5 != 2 && (v5 & 1) == 0)
    {
      uint64_t v45 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      uint64_t v20 = *(void *)v4;
      if (!*(void *)(*(void *)v4 + 16)) {
        return outlined destroy of ToolbarPlacement.Role((uint64_t)&v43);
      }
      uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v43);
      if ((v22 & 1) == 0) {
        return outlined destroy of ToolbarPlacement.Role((uint64_t)&v43);
      }
      uint64_t v23 = (unsigned __int8 *)(*(void *)(v20 + 56) + 80 * v21);
      int v24 = *v23;
      uint64_t v25 = *((void *)v23 + 1);
      uint64_t v26 = *((void *)v23 + 2);
      unsigned __int8 v38 = v23[24];
      uint64_t v36 = *((void *)v23 + 4);
      unsigned __int8 v27 = v23[40];
      uint64_t v28 = *((void *)v23 + 6);
      unsigned __int8 v29 = v23[56];
      unsigned __int8 v33 = v23[58];
      unsigned __int8 v34 = v23[57];
      uint64_t v30 = *((void *)v23 + 8);
      unsigned __int8 v31 = v23[72];
      swift_retain();
      swift_retain();
      swift_retain();
      outlined destroy of ToolbarPlacement.Role((uint64_t)&v43);
      if (*MEMORY[0x1E4F4E7A0] != a2)
      {
        type metadata accessor for AnyHashable?(0, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage, MEMORY[0x1E4FBB718]);
        if (*(void *)(AGGraphGetValue() + 24) >= 2uLL) {
          goto LABEL_20;
        }
      }
      if (v24) {
        goto LABEL_20;
      }
      uint64_t v42 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      LOBYTE(v43) = 2;
      *((void *)&v43 + 1) = v25;
      *(void *)&long long v44 = v26;
      BYTE8(v44) = v38;
      uint64_t v45 = v36;
      char v46 = v27;
      uint64_t v47 = v28;
      char v48 = v29;
      char v49 = v34;
      unsigned __int8 v50 = v33;
      uint64_t v51 = v30;
      unsigned __int8 v52 = v31;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      uint64_t v45 = 0;
      long long v43 = 0u;
      long long v44 = 0u;
      uint64_t v7 = *(void *)v4;
      if (*(void *)(*(void *)v4 + 16))
      {
        uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v43);
        if (v9)
        {
          uint64_t v10 = *(void *)(v7 + 56) + 80 * v8;
          uint64_t v11 = *(void *)(v10 + 8);
          uint64_t v12 = *(void *)(v10 + 16);
          char v37 = *(unsigned char *)(v10 + 24);
          uint64_t v35 = *(void *)(v10 + 32);
          char v13 = *(unsigned char *)(v10 + 40);
          uint64_t v14 = *(void *)(v10 + 48);
          char v15 = *(unsigned char *)(v10 + 56);
          char v16 = *(unsigned char *)(v10 + 57);
          unsigned __int8 v17 = *(unsigned char *)(v10 + 58);
          uint64_t v18 = *(void *)(v10 + 64);
          unsigned __int8 v19 = *(unsigned char *)(v10 + 72);
          swift_retain();
          swift_retain();
          swift_retain();
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
          char v37 = 0;
          uint64_t v35 = 0;
          uint64_t v14 = 0;
          unsigned __int8 v17 = 0;
          uint64_t v18 = 0;
          unsigned __int8 v19 = 0;
          char v16 = 2;
          char v15 = 1;
          char v13 = 1;
        }
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        char v37 = 0;
        uint64_t v35 = 0;
        uint64_t v14 = 0;
        unsigned __int8 v17 = 0;
        uint64_t v18 = 0;
        unsigned __int8 v19 = 0;
        char v15 = 1;
        char v13 = 1;
        char v16 = 2;
      }
      outlined destroy of ToolbarPlacement.Role((uint64_t)&v43);
      uint64_t v42 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      LOBYTE(v43) = 2;
      *((void *)&v43 + 1) = v11;
      *(void *)&long long v44 = v12;
      BYTE8(v44) = v37;
      uint64_t v45 = v35;
      char v46 = v13;
      uint64_t v47 = v14;
      char v48 = v15;
      char v49 = v16;
      unsigned __int8 v50 = v17;
      uint64_t v51 = v18;
      unsigned __int8 v52 = v19;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = *(void *)v4;
    *(void *)uint64_t v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v43, (uint64_t)&v40, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v4 = v39;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v40);
LABEL_20:
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationBarDefaults.DefaultNavigationBarVisibility@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  char v3 = *(unsigned char *)(v1 + 8);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = *(void *)v1;
  *(unsigned char *)(v4 + 24) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in NavigationBarDefaults.DefaultNavigationBarVisibility.value.getter;
  *(void *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationBarDefaults(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationBarDefaults(a1, a2, a3, a4, a5, a6, MEMORY[0x1E4F3F678]);
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationBarDefaults()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PreparedInspectorModifier(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationBarDefaults(a1, a2, a3, a4, a5, a6, MEMORY[0x1E4F3F670]);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationBarDefaults(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(int *, uint64_t *))
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[5];
  int v11 = *((_DWORD *)a2 + 16);
  uint64_t v12 = a2[9];
  char v13 = *((unsigned char *)a2 + 80);
  int v24 = *a1;
  uint64_t v15 = v7;
  int v16 = v8;
  uint64_t v17 = v9;
  long long v18 = *(_OWORD *)(a2 + 3);
  uint64_t v19 = v10;
  long long v20 = *((_OWORD *)a2 + 3);
  int v21 = v11;
  uint64_t v22 = v12;
  char v23 = v13;
  return a7(&v24, &v15);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance PreparedInspectorModifier@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static Edge.Set.all.getter();
  *a1 = result;
  return result;
}

id ContainerCoordinator.add(_:to:)(void *a1, id a2)
{
  objc_msgSend(a2, sel_addChildViewController_, a1);
  id result = objc_msgSend(a2, sel_view);
  if (!result)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = result;
  id result = objc_msgSend(a1, sel_view);
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = result;
  objc_msgSend(v6, sel_addSubview_, result);

  id result = objc_msgSend(a1, sel_view);
  if (!result)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int v8 = result;
  id result = objc_msgSend(a2, sel_view);
  if (result)
  {
    uint64_t v9 = result;
    uint64_t v10 = (uint64_t *)(v2 + 24);
    swift_beginAccess();
    unint64_t v11 = *(void *)(v2 + 24);
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17)
      {
LABEL_7:
        uint64_t v12 = *v10;
        if ((unint64_t)*v10 >> 62)
        {
          swift_bridgeObjectRetain_n();
          id result = (id)_CocoaArrayWrapper.endIndex.getter();
          uint64_t v13 = (uint64_t)result;
          if (result) {
            goto LABEL_9;
          }
        }
        else
        {
          uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
          id result = (id)swift_bridgeObjectRetain_n();
          if (v13)
          {
LABEL_9:
            if (v13 >= 1)
            {
              for (uint64_t i = 0; i != v13; ++i)
              {
                if ((v12 & 0xC000000000000001) != 0) {
                  id v15 = (id)MEMORY[0x18C117680](i, v12);
                }
                else {
                  id v15 = *(id *)(v12 + 8 * i + 32);
                }
                int v16 = v15;
                objc_msgSend(v15, sel_setActive_, 1);
              }
              goto LABEL_18;
            }
            __break(1u);
            goto LABEL_21;
          }
        }
LABEL_18:
        swift_bridgeObjectRelease_n();
        goto LABEL_19;
      }
    }
    else if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_7;
    }
    unint64_t v18 = UIView.constrainToView(_:exceptEdges:identifier:)(v9, 0, 0x6F74636570736E69, (void *)0xE900000000000072);
    swift_beginAccess();
    specialized Array.append<A>(contentsOf:)(v18);
    swift_endAccess();
LABEL_19:

    return objc_msgSend(a1, sel_didMoveToParentViewController_, a2);
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t ContainerCoordinator.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ContainerCoordinator()
{
  return self;
}

void *ContainerViewControllerRepresentable.makeUIViewController(context:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EC0]), sel_initWithNibName_bundle_, 0, 0);
  int v5 = v4;
  uint64_t v6 = (void *)*((void *)v2 + 1);
  int v7 = *v2;
  int v8 = *(unsigned __int8 *)(v3 + 16);
  if (v7 == v8)
  {
    id v9 = objc_msgSend(v4, sel_childViewControllers);
    type metadata accessor for UIViewController();
    unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v10 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v11)
    {
      ContainerCoordinator.add(_:to:)(v6, v5);
      return v5;
    }
    int v8 = *(unsigned __int8 *)(v3 + 16);
  }
  if (v7 != v8) {
    specialized ContainerCoordinator.remove(_:from:)(v6);
  }
  return v5;
}

uint64_t ContainerViewControllerRepresentable.makeCoordinator()()
{
  char v1 = *(unsigned char *)(v0 + 1);
  type metadata accessor for ContainerCoordinator();
  uint64_t result = swift_allocObject();
  *(void *)(result + 24) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(result + 16) = v1;
  return result;
}

void ContainerViewControllerRepresentable.updateUIViewController(_:context:)(void *a1, uint64_t *a2, uint64_t a3)
{
  id v4 = v3;
  uint64_t v6 = *a2;
  int v7 = (void *)*((void *)v4 + 1);
  int v8 = *v4;
  int v9 = *(unsigned __int8 *)(*a2 + 16);
  if (v8 == v9)
  {
    id v11 = objc_msgSend(a1, sel_childViewControllers);
    type metadata accessor for UIViewController();
    unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (!v13)
    {
      ContainerCoordinator.add(_:to:)(v7, a1);
      goto LABEL_9;
    }
    int v9 = *(unsigned __int8 *)(v6 + 16);
  }
  if (v8 != v9) {
    specialized ContainerCoordinator.remove(_:from:)(v7);
  }
LABEL_9:
  uint64_t v14 = (void *)specialized UIHostingController.host.getter();
  uint64_t v15 = (uint64_t)&v4[*(int *)(a3 + 48)];
  id v16 = v14;
  _UIHostingView.setRootView(_:transaction:)(v15);
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance ContainerViewControllerRepresentable<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ContainerViewControllerRepresentable.makeCoordinator()();
  *a1 = result;
  return result;
}

id @objc InspectorHostingView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return StyleContextSplitViewNavigationController.init(coder:)(a3);
}

uint64_t type metadata accessor for InspectorHostingView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for InspectorModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for InspectorModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    id v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
    *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for InspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for InspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  swift_retain();
  swift_release();
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  return a1;
}

uint64_t initializeWithTake for InspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = v9;
  return a1;
}

uint64_t assignWithTake for InspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  swift_release();
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_release();
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for InspectorModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187E28FF8);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((v6 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for InspectorModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v21 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                *(unsigned char *)(v21 + 16) = 0;
                *(void *)unint64_t v21 = a2 ^ 0x80000000;
                *(void *)(v21 + 8) = 0;
              }
              else
              {
                *(void *)(v21 + 8) = a2 - 1;
              }
            }
            else
            {
              long long v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x187E29224);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for InspectorModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in InspectorModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for UnaryInspectorRoot()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in InspectorModifier.body(content:)()
{
  return closure #1 in InspectorModifier.body(content:)(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t specialized LazyFilterSequence<>.startIndex.getter()
{
  void (*v5)(_OWORD *__return_ptr, _OWORD *);
  char v6;
  uint64_t result;
  uint64_t v8;
  _OWORD v9[2];
  char v10;
  _OWORD v11[2];
  char v12;
  unsigned char v13[56];
  void (*v14)(_OWORD *__return_ptr, _OWORD *);
  uint64_t (*v15)(_OWORD *);

  uint64_t v1 = v0;
  uint64_t v2 = _VariadicView_Children.endIndex.getter();
  outlined init with copy of LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>(v1, (uint64_t)v13);
  uint64_t v3 = 0;
  if (v2)
  {
    while (1)
    {
      uint64_t v4 = v15;
      unsigned int v5 = v14;
      swift_retain();
      _VariadicView_Children.subscript.getter();
      v5(v11, v9);
      outlined destroy of _VariadicView_Children.Element((uint64_t)v9);
      v9[0] = v11[0];
      v9[1] = v11[1];
      size_t v10 = v12;
      outlined destroy of LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>);
      uint64_t v6 = v4(v9);
      swift_release();
      if (v6) {
        break;
      }
      uint64_t result = _VariadicView_Children.endIndex.getter();
      if (v3 >= result)
      {
        __break(1u);
        return result;
      }
      ++v3;
      unsigned int v8 = _VariadicView_Children.endIndex.getter();
      outlined init with copy of LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>(v1, (uint64_t)v13);
      if (v3 == v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    outlined destroy of LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>);
  }
  return v3;
}

BOOL specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:)(uint64_t a1)
{
  return *(void *)(a1 + 8) >> 1 != 0xFFFFFFFFLL || *(unsigned __int8 *)(a1 + 32) > 1u;
}

uint64_t specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)(result + 8);
  unsigned int v3 = *(unsigned __int8 *)(result + 32);
  if (v2 >> 1 != 0xFFFFFFFF || v3 >= 2)
  {
    *(void *)a2 = *(void *)result;
    *(void *)(a2 + 8) = v2;
    *(_OWORD *)(a2 + 16) = *(_OWORD *)(result + 16);
    *(unsigned char *)(a2 + 32) = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id specialized ContainerCoordinator.remove(_:from:)(void *a1)
{
  objc_msgSend(a1, sel_willMoveToParentViewController_, 0);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 24);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain_n();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = (uint64_t)result;
    if (!result) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id result = (id)swift_bridgeObjectRetain_n();
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_13;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v7 = (id)MEMORY[0x18C117680](i, v3);
    }
    else {
      id v7 = *(id *)(v3 + 8 * i + 32);
    }
    unsigned int v8 = v7;
    objc_msgSend(v7, sel_setActive_, 0);
  }
LABEL_10:
  swift_bridgeObjectRelease_n();
  id result = objc_msgSend(a1, sel_view);
  if (result)
  {
    uint64_t v9 = result;
    objc_msgSend(result, sel_removeFromSuperview);

    return objc_msgSend(a1, sel_removeFromParentViewController);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t specialized UnaryInspectorRoot.inspectorColumnWidth(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v12);
  outlined init with copy of _VariadicView_Children((uint64_t)v12, (uint64_t)v15);
  unsigned int v16 = closure #1 in UnaryInspectorRoot.inspectorColumnWidth(from:);
  uint64_t v17 = 0;
  int v18 = specialized closure #1 in LazySequenceProtocol.compactMap<A>(_:);
  uint64_t v19 = 0;
  long long v20 = specialized closure #2 in LazySequenceProtocol.compactMap<A>(_:);
  uint64_t v21 = 0;
  outlined destroy of LazySequence<_VariadicView_Children>((uint64_t)v12);
  uint64_t v3 = specialized LazyFilterSequence<>.startIndex.getter();
  if (v3 == _VariadicView_Children.endIndex.getter())
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    char v7 = 0;
    uint64_t v8 = 0x1FFFFFFFELL;
  }
  else
  {
    uint64_t v9 = v20;
    size_t v10 = v16;
    _VariadicView_Children.subscript.getter();
    ((void (*)(long long *__return_ptr, void *))v10)(&v14, v12);
    outlined destroy of _VariadicView_Children.Element((uint64_t)v12);
    ((void (*)(void *__return_ptr, long long *))v9)(v12, &v14);
    uint64_t v4 = v12[0];
    uint64_t v8 = v12[1];
    uint64_t v5 = v12[2];
    uint64_t v6 = v12[3];
    char v7 = v13;
  }
  uint64_t result = outlined destroy of LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for LazyMapSequence<LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>, InspectorColumnWidth>);
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = v7;
  return result;
}

uint64_t type metadata completion function for UnaryInspectorRoot()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UnaryInspectorRoot(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 17) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 17) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for UnaryInspectorRoot(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 17) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187E29BACLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 17] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          a1[16] = 0;
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t sub_187E29BD4()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for UnaryInspectorRoot<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in UnaryInspectorRoot<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for PortableInspectorModifier<ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>>()
{
  if (!lazy cache variable for type metadata for PortableInspectorModifier<ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>();
    lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PortableInspectorModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PortableInspectorModifier<ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>)
  {
    type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4F40A30], MEMORY[0x1E4F40210]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout>();
    lazy protocol witness table accessor for type _UnaryViewAdaptor<_VariadicView_Children> and conformance _UnaryViewAdaptor<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<_VariadicView_Children>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UnaryViewAdaptor<_VariadicView_Children> and conformance _UnaryViewAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UnaryViewAdaptor<_VariadicView_Children> and conformance _UnaryViewAdaptor<A>;
  if (!lazy protocol witness table cache variable for type _UnaryViewAdaptor<_VariadicView_Children> and conformance _UnaryViewAdaptor<A>)
  {
    type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4F40A30], MEMORY[0x1E4F40210]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UnaryViewAdaptor<_VariadicView_Children> and conformance _UnaryViewAdaptor<A>);
  }
  return result;
}

uint64_t type metadata accessor for PortableInspectorModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of InspectorColumnWidth?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AnyHashable?(0, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of _UnaryViewAdaptor<_VariadicView_Children>(uint64_t a1)
{
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(0, &lazy cache variable for type metadata for _UnaryViewAdaptor<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4F40A30], MEMORY[0x1E4F40210]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of LazySequence<_VariadicView_Children>(uint64_t a1)
{
  type metadata accessor for LazySequence<_VariadicView_Children>(0, (unint64_t *)&lazy cache variable for type metadata for LazySequence<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, MEMORY[0x1E4F40A38], MEMORY[0x1E4FBB9E0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for LazyMapSequence<LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>, InspectorColumnWidth>()
{
  if (!lazy cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>, InspectorColumnWidth>)
  {
    type metadata accessor for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>();
    lazy protocol witness table accessor for type LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>> and conformance LazyFilterSequence<A>(&lazy protocol witness table cache variable for type LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>> and conformance LazyFilterSequence<A>, (void (*)(uint64_t))type metadata accessor for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>);
    unint64_t v0 = type metadata accessor for LazyMapSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>, InspectorColumnWidth>);
    }
  }
}

void type metadata accessor for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>()
{
  if (!lazy cache variable for type metadata for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>)
  {
    type metadata accessor for LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>();
    lazy protocol witness table accessor for type LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>> and conformance LazyFilterSequence<A>(&lazy protocol witness table cache variable for type LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?> and conformance LazyMapSequence<A, B>, (void (*)(uint64_t))type metadata accessor for LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>);
    unint64_t v0 = type metadata accessor for LazyFilterSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>);
    }
  }
}

void type metadata accessor for LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>()
{
  if (!lazy cache variable for type metadata for LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>)
  {
    type metadata accessor for AnyHashable?(255, &lazy cache variable for type metadata for InspectorColumnWidth?, (uint64_t)&type metadata for InspectorColumnWidth, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    unint64_t v0 = type metadata accessor for LazyMapSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>> and conformance LazyFilterSequence<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LazyFilterSequence<LazyMapSequence<_VariadicView_Children, InspectorColumnWidth?>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata completion function for PortableInspectorModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PortableInspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 57) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    unint64_t v12 = a1 & 0xFFFFFFFFFFFFFFF8;
    long long v13 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    long long v14 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    *(unsigned char *)(v12 + 56) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
    *(_OWORD *)(v12 + 40) = v14;
    *(_OWORD *)(v12 + 24) = v13;
    unint64_t v15 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v6 + 57) & ~v6;
    unint64_t v16 = ((a2 & 0xFFFFFFFFFFFFFFF8) + v6 + 57) & ~v6;
    int v17 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v17(v15, v16, v4);
  }
  return a1;
}

uint64_t destroy for PortableInspectorModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = ((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for PortableInspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(unsigned char *)(v5 + 56) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v5 + 40) = v7;
  *(_OWORD *)(v5 + 24) = v6;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void (**)(unint64_t, unint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
  unint64_t v11 = (v10 + 57 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  unint64_t v12 = (v10 + 57 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  swift_retain();
  swift_retain();
  v9(v11, v12, v8);
  return a1;
}

uint64_t assignWithCopy for PortableInspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  long long v8 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(unsigned char *)(v6 + 56) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v6 + 40) = v8;
  *(_OWORD *)(v6 + 24) = v7;
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 24))((*(unsigned __int8 *)(v9 + 80) + 57 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 57 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t initializeWithTake for PortableInspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(unsigned char *)(v4 + 56) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(unsigned __int8 *)(v7 + 80) + 57 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 57 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t assignWithTake for PortableInspectorModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  long long v8 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(unsigned char *)(v6 + 56) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v6 + 40) = v8;
  *(_OWORD *)(v6 + 24) = v7;
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))((*(unsigned __int8 *)(v9 + 80) + 57 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 57 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PortableInspectorModifier(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 57) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((a1 & 0xFFFFFFFFFFFFFFF8) + v6 + 57) & ~v6);
      }
      unint64_t v15 = *(void *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(unsigned char *)(a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for PortableInspectorModifier(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 57) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero((void *)a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          *(unsigned char *)(a1 + 2) = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *(unsigned char *)a1 = v17;
        }
      }
    }
    else
    {
      bzero((void *)a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        *(unsigned char *)(a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)(a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)(a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      *(unsigned char *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187E2AD2CLL);
    case 4:
      *(_DWORD *)(a1 + v10) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v9 + 57) & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(unsigned char *)(a1 + 16) = 0;
          *(void *)a1 = a2 ^ 0x80000000;
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          *(void *)(a1 + 8) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t sub_187E2AD54()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in PortableInspectorModifier<A>()
{
  return &protocol witness table for PortableInspectorModifier<A>;
}

uint64_t partial apply for closure #1 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #2 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(a1);
}

uint64_t partial apply for closure #3 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #3 in static PortableInspectorModifier._makeView(modifier:inputs:body:)(a1);
}

void type metadata accessor for _GraphValue<Binding<Bool>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for AnyHashable?(255, a3, a4, a5);
    unint64_t v6 = type metadata accessor for _GraphValue();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for PortableInspectorModifier.SplitWrapperModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined retain of PortableInspectorModifier<A>.SplitWrapper(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = *(id *)(a1 + 40);
  id v5 = v2;
  id v6 = v3;
  return a1;
}

uint64_t type metadata accessor for PortableInspectorModifier.SplitWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined release of PortableInspectorModifier<A>.SplitWrapper(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);

  return a1;
}

void destroy for PortableInspectorModifier.SplitWrapper(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
}

uint64_t initializeWithCopy for PortableInspectorModifier.SplitWrapper(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void **)(a2 + 24);
  id v4 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = v4;
  id v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  id v6 = v3;
  id v7 = v4;
  id v8 = v5;
  return a1;
}

uint64_t assignWithCopy for PortableInspectorModifier.SplitWrapper(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v4 = *(void **)(a1 + 24);
  id v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  id v6 = v5;

  id v7 = *(void **)(a1 + 32);
  id v8 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v8;
  id v9 = v8;

  size_t v10 = *(void **)(a1 + 40);
  BOOL v11 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v11;
  id v12 = v11;

  return a1;
}

uint64_t assignWithTake for PortableInspectorModifier.SplitWrapper(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);

  id v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  id v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  return a1;
}

uint64_t type metadata completion function for PortableInspectorModifier.SplitWrapperModifier()
{
  uint64_t result = type metadata accessor for ModifiedContent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  if (v6 > 7 || v8 != 0 || v7 + ((v6 + 80) & (unint64_t)~v6) + 1 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    unint64_t v12 = a1 & 0xFFFFFFFFFFFFFFF8;
    long long v13 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    long long v14 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    *(unsigned char *)(v12 + 56) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
    *(_OWORD *)(v12 + 40) = v14;
    *(_OWORD *)(v12 + 24) = v13;
    *(unsigned char *)(v12 + 57) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 57);
    int v15 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v16 = (void **)(((a2 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8);
    int v17 = *v16;
    void *v15 = *v16;
    unint64_t v18 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (void **)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v20 = *v19;
    void *v18 = *v19;
    uint64_t v21 = ((unint64_t)v18 + v6 + 8) & ~v6;
    uint64_t v22 = ((unint64_t)v19 + v6 + 8) & ~v6;
    char v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    id v24 = v17;
    id v25 = v20;
    v23(v21, v22, v4);
    *(unsigned char *)(v21 + v7) = *(unsigned char *)(v22 + v7);
  }
  return a1;
}

uint64_t destroy for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = (id *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8);

  uint64_t v5 = (id *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

uint64_t initializeWithCopy for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(unsigned char *)(v5 + 56) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v5 + 40) = v7;
  *(_OWORD *)(v5 + 24) = v6;
  *(unsigned char *)(v5 + 57) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 57);
  unint64_t v8 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void **)(((a2 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8);
  size_t v10 = *v9;
  *unint64_t v8 = *v9;
  BOOL v11 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = (void **)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = *v12;
  *BOOL v11 = *v12;
  uint64_t v14 = *(void *)(a3 + 16);
  int v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  uint64_t v16 = *(void *)(v14 - 8) + 16;
  uint64_t v17 = *(unsigned __int8 *)(*(void *)(v14 - 8) + 80);
  uint64_t v18 = ((unint64_t)v11 + v17 + 8) & ~v17;
  uint64_t v19 = ((unint64_t)v12 + v17 + 8) & ~v17;
  swift_retain();
  swift_retain();
  id v20 = v10;
  id v21 = v13;
  v15(v18, v19, v14);
  *(unsigned char *)(*(void *)(v16 + 48) + v18) = *(unsigned char *)(*(void *)(v16 + 48) + v19);
  return a1;
}

uint64_t assignWithCopy for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  long long v8 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  long long v9 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(unsigned char *)(v6 + 56) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v6 + 40) = v9;
  *(_OWORD *)(v6 + 24) = v8;
  *(unsigned char *)(v6 + 57) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 57);
  size_t v10 = (void **)(((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8);
  BOOL v11 = (void **)((v7 + 65) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v12 = *v11;
  long long v13 = *v10;
  *size_t v10 = *v11;
  id v14 = v12;

  int v15 = (void **)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void **)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = *v16;
  uint64_t v18 = *v15;
  void *v15 = *v16;
  id v19 = v17;

  uint64_t v20 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v21 = v20 + 24;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = ((unint64_t)v15 + v22 + 8) & ~v22;
  uint64_t v24 = ((unint64_t)v16 + v22 + 8) & ~v22;
  (*(void (**)(uint64_t, uint64_t))(v20 + 24))(v23, v24);
  *(unsigned char *)(*(void *)(v21 + 40) + v23) = *(unsigned char *)(*(void *)(v21 + 40) + v24);
  return a1;
}

uint64_t initializeWithTake for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(unsigned char *)(v4 + 56) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 24) = v5;
  *(unsigned char *)(v4 + 57) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 57);
  unint64_t v7 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8);
  long long v8 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  long long v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v9 = *v10;
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 32;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = ((unint64_t)v9 + v13 + 8) & ~v13;
  uint64_t v15 = ((unint64_t)v10 + v13 + 8) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v14, v15);
  *(unsigned char *)(*(void *)(v12 + 32) + v14) = *(unsigned char *)(*(void *)(v12 + 32) + v15);
  return a1;
}

uint64_t assignWithTake for PortableInspectorModifier.SplitWrapperModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  char v8 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 56);
  long long v9 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v6 + 40) = v9;
  *(unsigned char *)(v6 + 56) = v8;
  *(unsigned char *)(v6 + 57) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 57);
  size_t v10 = (void **)(((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void **)((v7 + 65) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = *v10;
  *size_t v10 = *v11;

  uint64_t v13 = (void **)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void **)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = *v13;
  *uint64_t v13 = *v14;

  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = v16 + 40;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = ((unint64_t)v13 + v18 + 8) & ~v18;
  uint64_t v20 = ((unint64_t)v14 + v18 + 8) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 40))(v19, v20);
  *(unsigned char *)(*(void *)(v17 + 24) + v19) = *(unsigned char *)(*(void *)(v17 + 24) + v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for PortableInspectorModifier.SplitWrapperModifier(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 80) & ~v6) + 1;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                        + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v6
                                                                      + 8) & ~v6);
      unint64_t v15 = *(void *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(unsigned char *)(a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for PortableInspectorModifier.SplitWrapperModifier(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v11 = v10 + ((v9 + 80) & ~v9) + 1;
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v10 + ((v9 + 80) & ~v9) != -1)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero((void *)a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          *(unsigned char *)(a1 + 2) = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *(unsigned char *)a1 = v18;
        }
      }
    }
    else
    {
      bzero((void *)a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        *(unsigned char *)(a1 + v11) = v16;
        return;
      case 2:
        *(_WORD *)(a1 + v11) = v16;
        return;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)(a1 + v11) = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      *(unsigned char *)(a1 + v11) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v11) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x187E2BD54);
    case 4:
      *(_DWORD *)(a1 + v11) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          uint64_t v19 = (unsigned char *)(((((((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + v9
                         + 8) & ~v9);
          if (v7 >= a2)
          {
            uint64_t v23 = *(void (**)(unint64_t))(v6 + 56);
            unint64_t v24 = ((((((a1 & 0xFFFFFFFFFFFFFFF8) + 65) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
            v23(v24);
          }
          else
          {
            if (v10 <= 3) {
              int v20 = ~(-1 << (8 * v10));
            }
            else {
              int v20 = -1;
            }
            if (v10)
            {
              int v21 = v20 & (~v7 + a2);
              if (v10 <= 3) {
                int v22 = v10;
              }
              else {
                int v22 = 4;
              }
              bzero(v19, v10);
              switch(v22)
              {
                case 2:
                  *(_WORD *)uint64_t v19 = v21;
                  break;
                case 3:
                  *(_WORD *)uint64_t v19 = v21;
                  void v19[2] = BYTE2(v21);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v19 = v21;
                  break;
                default:
                  unsigned char *v19 = v21;
                  break;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(unsigned char *)(a1 + 16) = 0;
          *(void *)a1 = a2 ^ 0x80000000;
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          *(void *)(a1 + 8) = a2 - 1;
        }
      }
      return;
  }
}

void *type metadata accessor for PreparedInspectorModifier()
{
  return &unk_1ED4480C8;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PreparedInspectorModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in PortableInspectorModifier<A>.SplitWrapperModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in PortableInspectorModifier<A>.SplitWrapper()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type PreparedInspectorModifier and conformance PreparedInspectorModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type PreparedInspectorModifier and conformance PreparedInspectorModifier;
  if (!lazy protocol witness table cache variable for type PreparedInspectorModifier and conformance PreparedInspectorModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreparedInspectorModifier and conformance PreparedInspectorModifier);
  }
  return result;
}

uint64_t outlined init with take of UIKitNavigationController?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UIKitNavigationController?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for UIKitNavigationController?()
{
  if (!lazy cache variable for type metadata for UIKitNavigationController?)
  {
    type metadata accessor for UIKitNavigationController();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitNavigationController?);
    }
  }
}

uint64_t type metadata accessor for ContainerViewControllerRepresentable()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, MEMORY[0x1E4F40F90]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>;
  if (!lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>)
  {
    type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.InspectorKey>, (uint64_t)&type metadata for SheetPreference.InspectorKey, (uint64_t)&protocol witness table for SheetPreference.InspectorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>);
  }
  return result;
}

uint64_t sub_187E2C048()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for PortableInspectorModifier.SplitWrapperModifier() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_release();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[15], v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PortableInspectorModifier.SplitWrapperModifier.modifiedContent(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for PortableInspectorModifier.SplitWrapperModifier() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in PortableInspectorModifier.SplitWrapperModifier.modifiedContent(content:)(v4, a1);
}

unsigned char *storeEnumTagSinglePayload for InspectorBarManagement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E2C2A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InspectorBarManagement()
{
  return &type metadata for InspectorBarManagement;
}

uint64_t type metadata completion function for ContainerViewControllerRepresentable()
{
  uint64_t result = type metadata accessor for ModifiedContent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ContainerViewControllerRepresentable(unsigned char *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 24) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    int v3 = (void *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    a1[1] = *((unsigned char *)a2 + 1);
    size_t v10 = (void *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
    size_t v11 = (void **)(((unint64_t)a2 + 9) & 0xFFFFFFFFFFFFFFF8);
    BOOL v12 = *v11;
    *size_t v10 = *v11;
    unsigned int v13 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v14 = (void **)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v15 = *v14;
    *unsigned int v13 = *v14;
    uint64_t v16 = ((unint64_t)v13 + v6 + 8) & ~v6;
    uint64_t v17 = ((unint64_t)v14 + v6 + 8) & ~v6;
    int v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    id v19 = v12;
    id v20 = v15;
    v18(v16, v17, v4);
  }
  return v3;
}

uint64_t destroy for ContainerViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  int v3 = (id *)((a1 + 9) & 0xFFFFFFFFFFFFFFF8);

  uint64_t v4 = (id *)(((unint64_t)v3 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = ((unint64_t)v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

unsigned char *initializeWithCopy for ContainerViewControllerRepresentable(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = (void *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void **)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = *v5;
  *uint64_t v4 = *v5;
  unint64_t v7 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void **)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *v8;
  void *v7 = *v8;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  BOOL v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = ((unint64_t)v7 + v13 + 8) & ~v13;
  uint64_t v15 = ((unint64_t)v8 + v13 + 8) & ~v13;
  id v16 = v6;
  id v17 = v9;
  v12(v14, v15, v10);
  return a1;
}

unsigned char *assignWithCopy for ContainerViewControllerRepresentable(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v5 = (void **)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void **)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = *v6;
  unsigned int v8 = *v5;
  *uint64_t v5 = *v6;
  id v9 = v7;

  uint64_t v10 = (void **)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void **)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  BOOL v12 = *v11;
  uint64_t v13 = *v10;
  *uint64_t v10 = *v11;
  id v14 = v12;

  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v15 + 24))(((unint64_t)v10 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80), ((unint64_t)v11 + *(unsigned __int8 *)(v15 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  return a1;
}

unsigned char *initializeWithTake for ContainerViewControllerRepresentable(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = (void *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = (void *)(((unint64_t)v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = (void *)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

unsigned char *assignWithTake for ContainerViewControllerRepresentable(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v5 = (void **)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void **)((unint64_t)(a2 + 9) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = *v5;
  *uint64_t v5 = *v6;

  uint64_t v8 = (void **)(((unint64_t)v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v9 = (void **)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *v8;
  *uint64_t v8 = *v9;

  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))(((unint64_t)v8 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ContainerViewControllerRepresentable(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 24) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      uint64_t v15 = (unint64_t *)(((unint64_t)a1 + 9) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 8) & ~v6);
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for ContainerViewControllerRepresentable(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v11 = ((v9 + 24) & ~v9) + v10;
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v11)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x187E2CD04);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        id v19 = (void *)((unint64_t)(a1 + 9) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          int v21 = (unsigned char *)(((((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9);
          if (v7 >= a2)
          {
            id v25 = *(void (**)(unint64_t))(v6 + 56);
            v25(((((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9);
          }
          else
          {
            if (v10 <= 3) {
              int v22 = ~(-1 << (8 * v10));
            }
            else {
              int v22 = -1;
            }
            if (v10)
            {
              int v23 = v22 & (~v7 + a2);
              if (v10 <= 3) {
                int v24 = v10;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v10);
              switch(v24)
              {
                case 2:
                  *(_WORD *)int v21 = v23;
                  break;
                case 3:
                  *(_WORD *)int v21 = v23;
                  v21[2] = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)int v21 = v23;
                  break;
                default:
                  *int v21 = v23;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v20 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v20 = a2 - 1;
          }
          void *v19 = v20;
        }
      }
      return;
  }
}

void *type metadata accessor for NavigationBarDefaults()
{
  return &unk_1ED4358E8;
}

uint64_t sub_187E2CD4C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187E2D0BC()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _BackgroundStyleModifier<BackgroundStyle> and conformance _BackgroundStyleModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>();
    type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<BackgroundStyle>, MEMORY[0x1E4F3FAB0], MEMORY[0x1E4F3FAA8], MEMORY[0x1E4F40E10]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>)
  {
    type metadata accessor for LazySequence<_VariadicView_Children>(255, &lazy cache variable for type metadata for _ViewModifier_Content<PreparedInspectorModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PreparedInspectorModifier and conformance PreparedInspectorModifier, (uint64_t)&unk_1ED4480C8, MEMORY[0x1E4F408E0]);
    type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for StyleContextWriter<InspectorStyleContext>, MEMORY[0x1E4F407C8], MEMORY[0x1E4F407C0], MEMORY[0x1E4F40318]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>);
    }
  }
}

void type metadata accessor for LazySequence<_VariadicView_Children>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<PreparedInspectorModifier> and conformance _ViewModifier_Content<A>, (void (*)(void))lazy protocol witness table accessor for type StyleContextWriter<InspectorStyleContext> and conformance StyleContextWriter<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<PreparedInspectorModifier>, StyleContextWriter<InspectorStyleContext>>, NavigationBarDefaults>, _BackgroundStyleModifier<BackgroundStyle>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<PreparedInspectorModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<PreparedInspectorModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<PreparedInspectorModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for LazySequence<_VariadicView_Children>(255, &lazy cache variable for type metadata for _ViewModifier_Content<PreparedInspectorModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type PreparedInspectorModifier and conformance PreparedInspectorModifier, (uint64_t)&unk_1ED4480C8, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<PreparedInspectorModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<InspectorStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<InspectorStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<InspectorStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for StyleContextWriter<InspectorStyleContext>, MEMORY[0x1E4F407C8], MEMORY[0x1E4F407C0], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<InspectorStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundStyleModifier<BackgroundStyle> and conformance _BackgroundStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackgroundStyleModifier<BackgroundStyle> and conformance _BackgroundStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundStyleModifier<BackgroundStyle> and conformance _BackgroundStyleModifier<A>)
  {
    type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<BackgroundStyle>, MEMORY[0x1E4F3FAB0], MEMORY[0x1E4F3FAA8], MEMORY[0x1E4F40E10]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundStyleModifier<BackgroundStyle> and conformance _BackgroundStyleModifier<A>);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationBarDefaults()
{
  return &protocol witness table for NavigationBarDefaults;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in InspectorBarManagement()
{
  return &protocol witness table for InspectorBarManagement;
}

_UNKNOWN **base witness table accessor for ViewModifier in InspectorBarManagement()
{
  return &protocol witness table for InspectorBarManagement;
}

uint64_t specialized static InspectorBarManagement.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v11[0] &= ~0x10uLL;
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.SuppliedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.SuppliedBridgesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (*(void *)(a2 + 8))
  {
    type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeSet.update(with:isUnique:)((uint64_t)v9, isUniquelyReferenced_nonNull_native, (uint64_t)v11);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role?((uint64_t)v11);
  type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>();
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t Value = (unsigned char *)AGGraphGetValue();
  uint64_t v6 = *(void *)(a2 + 8);
  if (*Value == 1)
  {
    swift_retain_n();
    if (v6)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    unint64_t v7 = v11[0] | 1;
  }
  else
  {
    swift_retain_n();
    if (v6)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    unint64_t v7 = v11[0] & 0xFFFFFFFFFFFFFFFELL;
  }
  v11[0] = v7;
  swift_retain();
  PropertyList.subscript.setter();
  if (v6)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for _UnaryViewAdaptor<_VariadicView_Children>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InspectorBarManagement and conformance InspectorBarManagement()
{
  unint64_t result = lazy protocol witness table cache variable for type InspectorBarManagement and conformance InspectorBarManagement;
  if (!lazy protocol witness table cache variable for type InspectorBarManagement and conformance InspectorBarManagement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorBarManagement and conformance InspectorBarManagement);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in static NavigationBarDefaults._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static NavigationBarDefaults._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type NavigationBarDefaults.DefaultNavigationBarVisibility and conformance NavigationBarDefaults.DefaultNavigationBarVisibility()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationBarDefaults.DefaultNavigationBarVisibility and conformance NavigationBarDefaults.DefaultNavigationBarVisibility;
  if (!lazy protocol witness table cache variable for type NavigationBarDefaults.DefaultNavigationBarVisibility and conformance NavigationBarDefaults.DefaultNavigationBarVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationBarDefaults.DefaultNavigationBarVisibility and conformance NavigationBarDefaults.DefaultNavigationBarVisibility);
  }
  return result;
}

uint64_t sub_187E2DCE8()
{
  return swift_deallocObject();
}

uint64_t sub_187E2DCF8()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type NavigationBarDefaults.DefaultTitle and conformance NavigationBarDefaults.DefaultTitle()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationBarDefaults.DefaultTitle and conformance NavigationBarDefaults.DefaultTitle;
  if (!lazy protocol witness table cache variable for type NavigationBarDefaults.DefaultTitle and conformance NavigationBarDefaults.DefaultTitle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationBarDefaults.DefaultTitle and conformance NavigationBarDefaults.DefaultTitle);
  }
  return result;
}

void *type metadata accessor for NavigationBarDefaults.DefaultTitle()
{
  return &unk_1ED4358C8;
}

void *type metadata accessor for NavigationBarDefaults.DefaultNavigationBarVisibility()
{
  return &unk_1ED435840;
}

SwiftUI::ClarityUIApplicationSceneClientSetting_optional __swiftcall ClarityUIApplicationSceneClientSetting.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = rawValue + 64;
  if ((unint64_t)(rawValue - 312000) >= 3) {
    char v2 = 3;
  }
  *uint64_t v1 = v2;
  return (SwiftUI::ClarityUIApplicationSceneClientSetting_optional)rawValue;
}

uint64_t ClarityUIApplicationSceneClientSetting.rawValue.getter()
{
  return *v0 + 312000;
}

unint64_t lazy protocol witness table accessor for type ClarityUIApplicationSceneClientSetting and conformance ClarityUIApplicationSceneClientSetting()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIApplicationSceneClientSetting and conformance ClarityUIApplicationSceneClientSetting;
  if (!lazy protocol witness table cache variable for type ClarityUIApplicationSceneClientSetting and conformance ClarityUIApplicationSceneClientSetting)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIApplicationSceneClientSetting and conformance ClarityUIApplicationSceneClientSetting);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ClarityUIApplicationSceneClientSetting()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 312000);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ClarityUIApplicationSceneClientSetting()
{
  Hasher._combine(_:)(*v0 + 312000);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ClarityUIApplicationSceneClientSetting()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 312000);
  return Hasher._finalize()();
}

SwiftUI::ClarityUIApplicationSceneClientSetting_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ClarityUIApplicationSceneClientSetting(Swift::Int *a1)
{
  return ClarityUIApplicationSceneClientSetting.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ClarityUIApplicationSceneClientSetting(void *a1@<X8>)
{
  *a1 = *v1 + 312000;
}

uint64_t dispatch thunk of ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ClarityUIApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneClientSettingsProtocol.navigationTitles.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneClientSettingsProtocol.navigationTitles.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneClientSettingsProtocol.chromeVisible.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneClientSettingsProtocol.chromeVisible.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void))(a4 + 48))(a1, a2 & 1);
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

unsigned char *storeEnumTagSinglePayload for ClarityUIApplicationSceneClientSetting(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E2E0B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClarityUIApplicationSceneClientSetting()
{
  return &type metadata for ClarityUIApplicationSceneClientSetting;
}

uint64_t static ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles(otherSettings:)(void *a1)
{
  if (objc_msgSend(a1, sel_objectForSetting_, 312000))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  outlined init with take of Any?((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    type metadata accessor for String?(0, &lazy cache variable for type metadata for [Data], MEMORY[0x1E4F277C0], MEMORY[0x1E4FBB320]);
    if (swift_dynamicCast()) {
      return v2;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v4);
  }
  static Log.internalWarning(_:)();
  return MEMORY[0x1E4FBC860];
}

unint64_t implicit closure #1 in static ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles(otherSettings:)()
{
  return 0xD00000000000002CLL;
}

uint64_t static ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible(otherSettings:)(void *a1)
{
  if (objc_msgSend(a1, sel_objectForSetting_, 312001))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  outlined init with take of Any?((uint64_t)v3, (uint64_t)v4);
  if (v5)
  {
    if (swift_dynamicCast()) {
      return v2;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v4);
  }
  static Log.internalWarning(_:)();
  return 1;
}

unint64_t implicit closure #1 in static ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible(otherSettings:)()
{
  return 0xD000000000000027;
}

uint64_t static ClarityUIApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress(otherSettings:)(void *a1)
{
  if (objc_msgSend(a1, sel_objectForSetting_, 312002))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v3 = 0u;
    long long v4 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v3, (uint64_t)v5);
  outlined init with take of Any?((uint64_t)v5, (uint64_t)&v3);
  if (*((void *)&v4 + 1))
  {
    if (swift_dynamicCast()) {
      return v2;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v3);
    return 0;
  }
}

id ClarityUIApplicationSceneClientSettings.__deallocating_deinit()
{
  return ClarityUIApplicationSceneClientSettings.__deallocating_deinit(type metadata accessor for ClarityUIApplicationSceneClientSettings);
}

uint64_t type metadata accessor for ClarityUIApplicationSceneClientSettings()
{
  return self;
}

void (*ClarityUIMutableApplicationSceneClientSettings.navigationTitles.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[1] = (uint64_t)v1;
  id v3 = objc_msgSend(v1, sel_otherSettings);
  uint64_t v4 = static ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles(otherSettings:)(v3);

  *a1 = v4;
  return ClarityUIMutableApplicationSceneClientSettings.navigationTitles.modify;
}

void ClarityUIMutableApplicationSceneClientSettings.navigationTitles.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (a2)
  {
    swift_bridgeObjectRetain();
    id v4 = objc_msgSend(v2, sel_otherSettings);
    v3.super.CFDataRef isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setObject_forSetting_, v3.super.isa, 312000);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v4 = objc_msgSend(*(id *)(a1 + 8), sel_otherSettings);
    v3.super.CFDataRef isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setObject_forSetting_, v3.super.isa, 312000);
  }
}

void (*ClarityUIMutableApplicationSceneClientSettings.chromeVisible.modify(uint64_t a1))(id *a1)
{
  *(void *)a1 = v1;
  id v3 = objc_msgSend(v1, sel_otherSettings);
  char v4 = static ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible(otherSettings:)(v3);

  *(unsigned char *)(a1 + 8) = v4 & 1;
  return ClarityUIMutableApplicationSceneClientSettings.chromeVisible.modify;
}

void ClarityUIMutableApplicationSceneClientSettings.chromeVisible.modify(id *a1)
{
  id v2 = objc_msgSend(*a1, sel_otherSettings);
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v2, sel_setObject_forSetting_, isa, 312001);
}

void (*ClarityUIMutableApplicationSceneClientSettings.bottomBarTransitionProgress.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  id v3 = objc_msgSend(v1, sel_otherSettings);
  uint64_t v4 = static ClarityUIApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress(otherSettings:)(v3);
  char v6 = v5;

  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v6 & 1;
  return ClarityUIMutableApplicationSceneClientSettings.bottomBarTransitionProgress.modify;
}

void ClarityUIMutableApplicationSceneClientSettings.bottomBarTransitionProgress.modify(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 8);
  id v3 = objc_msgSend(*(id *)(a1 + 16), sel_otherSettings);
  if (v1) {
    Class isa = 0;
  }
  else {
    Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  }
  objc_msgSend(v3, sel_setObject_forSetting_, isa, 312002);
  swift_unknownObjectRelease();
}

uint64_t ClarityUIApplicationSceneClientSettings.keyDescription(forSetting:)(uint64_t a1, uint64_t (*a2)(void))
{
  if ((unint64_t)(a1 - 312000) > 2)
  {
    v8.receiver = v2;
    v8.super_class = (Class)a2();
    id v5 = objc_msgSendSuper2(&v8, sel_keyDescriptionForSetting_, a1);
    if (v5)
    {
      char v6 = v5;
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    char v9 = a1 + 64;
    return String.init<A>(describing:)();
  }
  return v3;
}

id @objc ClarityUIApplicationSceneClientSettings.keyDescription(forSetting:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v6 = a1;
  uint64_t v7 = ClarityUIApplicationSceneClientSettings.keyDescription(forSetting:)(a3, a4);
  uint64_t v9 = v8;

  if (v9)
  {
    uint64_t v10 = (void *)MEMORY[0x18C115780](v7, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

uint64_t ClarityUIApplicationSceneClientSettings.valueDescription(for:object:ofSetting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  if ((unint64_t)(a3 - 312000) > 2)
  {
    uint64_t v9 = outlined init with copy of Any?(a2, (uint64_t)v21);
    uint64_t v10 = v22;
    if (v22)
    {
      uint64_t v11 = __swift_project_boxed_opaque_existential_1(v21, v22);
      uint64_t v12 = *(void *)(v10 - 8);
      double v13 = MEMORY[0x1F4188790](v11);
      unsigned int v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v12 + 16))(v15, v13);
      uint64_t v16 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
      uint64_t v9 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    }
    else
    {
      uint64_t v16 = 0;
    }
    unsigned int v17 = (objc_class *)a4(v9);
    v20.receiver = v4;
    v20.super_class = v17;
    id v18 = objc_msgSendSuper2(&v20, sel_valueDescriptionForFlag_object_ofSetting_, a1, v16, a3);
    swift_unknownObjectRelease();
    if (v18)
    {
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    outlined init with copy of Any?(a2, (uint64_t)v21);
    type metadata accessor for String?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
    return String.init<A>(describing:)();
  }
  return v5;
}

id @objc ClarityUIApplicationSceneClientSettings.valueDescription(for:object:ofSetting:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  if (a4)
  {
    id v10 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    id v11 = a1;
  }
  uint64_t v12 = ClarityUIApplicationSceneClientSettings.valueDescription(for:object:ofSetting:)(a3, (uint64_t)v17, a5, a6);
  uint64_t v14 = v13;

  outlined destroy of Any?((uint64_t)v17);
  if (v14)
  {
    unsigned int v15 = (void *)MEMORY[0x18C115780](v12, v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned int v15 = 0;
  }

  return v15;
}

id @objc ClarityUIApplicationSceneClientSettings.mutableCopy(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5 = objc_allocWithZone((Class)a4());

  return objc_msgSend(v5, sel_initWithSettings_, a1);
}

id @objc ClarityUIApplicationSceneClientSettings.init(settings:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  v6.receiver = a1;
  v6.super_class = (Class)a4();
  return objc_msgSendSuper2(&v6, sel_initWithSettings_, a3);
}

id @objc ClarityUIApplicationSceneClientSettings.init()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, sel_init);
}

id ClarityUIMutableApplicationSceneClientSettings.__deallocating_deinit()
{
  return ClarityUIApplicationSceneClientSettings.__deallocating_deinit(type metadata accessor for ClarityUIMutableApplicationSceneClientSettings);
}

id ClarityUIApplicationSceneClientSettings.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for ClarityUIMutableApplicationSceneClientSettings()
{
  return self;
}

void protocol witness for ClarityUIMutableApplicationSceneClientSettingsProtocol.navigationTitles.setter in conformance ClarityUIMutableApplicationSceneClientSettings()
{
  id v1 = objc_msgSend(v0, sel_otherSettings);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setObject_forSetting_, isa, 312000);
}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneClientSettingsProtocol.navigationTitles.modify in conformance ClarityUIMutableApplicationSceneClientSettings(uint64_t **a1))()
{
  id v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)ClarityUIMutableApplicationSceneClientSettings.navigationTitles.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for ClarityUIMutableApplicationSceneClientSettingsProtocol.chromeVisible.setter in conformance ClarityUIMutableApplicationSceneClientSettings()
{
  id v1 = objc_msgSend(v0, sel_otherSettings);
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v1, sel_setObject_forSetting_, isa, 312001);
}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneClientSettingsProtocol.chromeVisible.modify in conformance ClarityUIMutableApplicationSceneClientSettings(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ClarityUIMutableApplicationSceneClientSettings.chromeVisible.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ClarityUIMutableApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.setter in conformance ClarityUIMutableApplicationSceneClientSettings(uint64_t a1, char a2)
{
  id v4 = objc_msgSend(v2, sel_otherSettings);
  if (a2) {
    v5.super.super.Class isa = 0;
  }
  else {
    v5.super.super.Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  }
  objc_msgSend(v4, sel_setObject_forSetting_, v5.super.super.isa, 312002);

  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.modify in conformance ClarityUIMutableApplicationSceneClientSettings(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ClarityUIMutableApplicationSceneClientSettings.bottomBarTransitionProgress.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles.getter in conformance ClarityUIApplicationSceneClientSettings()
{
  id v1 = objc_msgSend(v0, sel_otherSettings);
  uint64_t v2 = static ClarityUIApplicationSceneClientSettingsProtocol.navigationTitles(otherSettings:)(v1);

  return v2;
}

uint64_t protocol witness for ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible.getter in conformance ClarityUIApplicationSceneClientSettings()
{
  id v1 = objc_msgSend(v0, sel_otherSettings);
  char v2 = static ClarityUIApplicationSceneClientSettingsProtocol.chromeVisible(otherSettings:)(v1);

  return v2 & 1;
}

uint64_t protocol witness for ClarityUIApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress.getter in conformance ClarityUIApplicationSceneClientSettings()
{
  id v1 = objc_msgSend(v0, sel_otherSettings);
  uint64_t v2 = static ClarityUIApplicationSceneClientSettingsProtocol.bottomBarTransitionProgress(otherSettings:)(v1);

  return v2;
}

ValueMetadata *type metadata accessor for SearchAdjustmentModifier()
{
  return &type metadata for SearchAdjustmentModifier;
}

unsigned char *storeEnumTagSinglePayload for SearchAdjustmentModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E2F284);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SearchAdjustment and conformance SearchAdjustment()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchAdjustment and conformance SearchAdjustment;
  if (!lazy protocol witness table cache variable for type SearchAdjustment and conformance SearchAdjustment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchAdjustment and conformance SearchAdjustment);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SearchAdjustmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchAdjustmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance SearchAdjustmentModifier()
{
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance SearchAdjustmentModifier(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)AGGraphGetValue();

  return specialized static SearchAdjustmentModifier.updateEnvironment(searchAdjustment:environment:)(v3, a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SearchAdjustmentModifier()
{
  lazy protocol witness table accessor for type SearchAdjustmentModifier and conformance SearchAdjustmentModifier();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SearchAdjustmentModifier()
{
  return &protocol witness table for SearchAdjustmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in SearchAdjustmentModifier()
{
  return &protocol witness table for SearchAdjustmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in IsSearchImplementedModifier()
{
  return &protocol witness table for IsSearchImplementedModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SearchDisabledAdjustmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchDisabledAdjustmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance SearchDisabledAdjustmentModifier()
{
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance SearchDisabledAdjustmentModifier(uint64_t a1, uint64_t a2)
{
  return specialized static SearchAdjustmentModifier.updateEnvironment(searchAdjustment:environment:)(1, a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SearchDisabledAdjustmentModifier()
{
  lazy protocol witness table accessor for type SearchDisabledAdjustmentModifier and conformance SearchDisabledAdjustmentModifier();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

unint64_t getter of isSearchImplemented #1 in static IsSearchImplementedModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 28) & 1) == 0) {
    return *(void *)(a1 + 16);
  }
  type metadata accessor for _GraphValue<IsSearchImplementedModifier>();
  unsigned int v2 = _GraphValue.value.getter();
  swift_getKeyPath();
  uint64_t v3 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v4 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  unint64_t v5 = v2 | (unint64_t)(v3 << 32);
  swift_beginAccess();
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 28) = 0;
  return v5;
}

uint64_t implicit closure #1 in static IsSearchImplementedModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unsigned char *(*IsSearchImplementedModifier.IsSearchImplemented.value.getter())(unsigned char *result)
{
  if (*(unsigned char *)AGGraphGetValue())
  {
    static Semantics.v6.getter();
    char v0 = isLinkedOnOrAfter(_:)();
  }
  else
  {
    char v0 = (*(unsigned char *)AGGraphGetValue() & 0xFE) != 6;
  }
  *(unsigned char *)(swift_allocObject() + 16) = v0 & 1;
  return _s7SwiftUI27IsSearchImplementedModifier33_B12688D62B96A847C61E3B59FA9667D2LLV0cdE0V5valueyySbzcvgySbzcfU_TA_0;
}

unsigned char *closure #1 in IsSearchImplementedModifier.IsSearchImplemented.value.getter(unsigned char *result, char a2)
{
  *unint64_t result = (*result | a2) & 1;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance IsSearchImplementedModifier.IsSearchImplemented@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  unsigned int v2 = IsSearchImplementedModifier.IsSearchImplemented.value.getter();
  uint64_t v4 = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance IsSearchImplementedModifier()
{
}

uint64_t sub_187E2F8F8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in static IsSearchImplementedModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static IsSearchImplementedModifier._makeView(modifier:inputs:body:)(*(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type IsSearchImplementedModifier.IsSearchImplemented and conformance IsSearchImplementedModifier.IsSearchImplemented()
{
  unint64_t result = lazy protocol witness table cache variable for type IsSearchImplementedModifier.IsSearchImplemented and conformance IsSearchImplementedModifier.IsSearchImplemented;
  if (!lazy protocol witness table cache variable for type IsSearchImplementedModifier.IsSearchImplemented and conformance IsSearchImplementedModifier.IsSearchImplemented)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsSearchImplementedModifier.IsSearchImplemented and conformance IsSearchImplementedModifier.IsSearchImplemented);
  }
  return result;
}

uint64_t sub_187E2F9D4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187E2FA0C()
{
  return swift_deallocObject();
}

unsigned char *_s7SwiftUI27IsSearchImplementedModifier33_B12688D62B96A847C61E3B59FA9667D2LLV0cdE0V5valueyySbzcvgySbzcfU_TA_0(unsigned char *result)
{
  *unint64_t result = (*result | *(unsigned char *)(v1 + 16)) & 1;
  return result;
}

void type metadata accessor for _GraphValue<IsSearchImplementedModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<IsSearchImplementedModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<IsSearchImplementedModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SearchAdjustmentModifier and conformance SearchAdjustmentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchAdjustmentModifier and conformance SearchAdjustmentModifier;
  if (!lazy protocol witness table cache variable for type SearchAdjustmentModifier and conformance SearchAdjustmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchAdjustmentModifier and conformance SearchAdjustmentModifier);
  }
  return result;
}

void *type metadata accessor for IsSearchImplementedModifier.IsSearchImplemented()
{
  return &unk_1ED44F728;
}

unsigned char *storeEnumTagSinglePayload for IsSearchImplementedModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E2FBCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchImplementation()
{
  return &type metadata for SearchImplementation;
}

unint64_t lazy protocol witness table accessor for type SearchImplementation and conformance SearchImplementation()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchImplementation and conformance SearchImplementation;
  if (!lazy protocol witness table cache variable for type SearchImplementation and conformance SearchImplementation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchImplementation and conformance SearchImplementation);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SearchDisabledAdjustmentModifier()
{
  return &protocol witness table for SearchDisabledAdjustmentModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in SearchDisabledAdjustmentModifier()
{
  return &protocol witness table for SearchDisabledAdjustmentModifier;
}

unint64_t lazy protocol witness table accessor for type SearchDisabledAdjustmentModifier and conformance SearchDisabledAdjustmentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchDisabledAdjustmentModifier and conformance SearchDisabledAdjustmentModifier;
  if (!lazy protocol witness table cache variable for type SearchDisabledAdjustmentModifier and conformance SearchDisabledAdjustmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchDisabledAdjustmentModifier and conformance SearchDisabledAdjustmentModifier);
  }
  return result;
}

uint64_t AutomaticNavigationSplitViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  __int16 v3 = *(_WORD *)(a1 + 16);
  __int16 v4 = *(_WORD *)(a1 + 18);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  char v7 = *(unsigned char *)(a1 + 48);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(_WORD *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 18) = 1;
  *(void *)(a2 + 24) = v5;
  *(void *)(a2 + 32) = v6;
  *(unsigned char *)(a2 + 40) = v7;
  *(unsigned char *)(a2 + 41) = 1;
  *(_WORD *)(a2 + 42) = v4;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t sub_187E2FD58()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>>, NavigationSplitStyleModifier<BalancedNavigationSplitViewStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>, NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle_Phone>> and conformance <> ModifiedContent<A, B>);
}

uint64_t TooltipBridge.responder(at:)()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for TooltipBridge.host);
  if (result)
  {
    uint64_t v2 = (void *)result;
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    uint64_t v3 = ViewRendererHost.responderNode.getter();

    if (v3)
    {
      type metadata accessor for ViewResponder();
      uint64_t v4 = swift_dynamicCastClass();
      if (v4)
      {
        MEMORY[0x1F4188790](v4);
        type metadata accessor for ViewResponder?();
        static Update.ensure<A>(_:)();
        if (v5)
        {
          type metadata accessor for TooltipResponder();
          ResponderNode.firstAncestor<A>(ofType:)();
          swift_release();
          swift_release();
          return v5;
        }
      }
      swift_release();
    }
    return 0;
  }
  return result;
}

id @objc TooltipBridge.toolTipInteraction(_:configurationAt:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  id v9 = a1;
  id v10 = specialized TooltipBridge.toolTipInteraction(_:configurationAt:)(a2, a3);

  return v10;
}

id specialized TooltipBridge.toolTipInteraction(_:configurationAt:)(double a1, double a2)
{
  uint64_t v5 = (void *)MEMORY[0x18C119DF0](v2 + direct field offset for TooltipBridge.host);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  objc_msgSend(v5, sel_convertPoint_toView_, 0, a1, a2);
  if (TooltipBridge.responder(at:)())
  {
    type metadata accessor for String?();
    static Update.dispatchImmediately<A>(_:)();
    id v7 = v18;
    if (v18)
    {
      objc_msgSend(v6, sel_convertRect_fromView_, 0, TooltipResponder.globalFrame.getter());
      double v9 = v8;
      double v11 = v10;
      double v13 = v12;
      double v15 = v14;
      uint64_t v16 = (void *)MEMORY[0x18C115780]();
      swift_bridgeObjectRelease();
      id v7 = objc_msgSend(self, sel_configurationWithToolTip_inRect_, v16, v9, v11, v13, v15);

      swift_release();
    }
    else
    {

      swift_release();
    }
  }
  else
  {

    return 0;
  }
  return v7;
}

uint64_t partial apply for closure #1 in TooltipBridge.responder(at:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
  *a1 = result;
  return result;
}

void type metadata accessor for ViewResponder?()
{
  if (!lazy cache variable for type metadata for ViewResponder?)
  {
    type metadata accessor for ViewResponder();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponder?);
    }
  }
}

double _ArchivableView.sizeThatFits(in:)()
{
  *(void *)&double result = *(_OWORD *)&_ProposedSize.fixingUnspecifiedDimensions()();
  return result;
}

double protocol witness for static View._makeView(view:inputs:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static _ArchivableView._makeView(view:inputs:)(a1, a2, a3, WitnessTable, a4);
}

double static _ArchivableView._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v45 = a4;
  uint64_t v51 = a3;
  uint64_t v47 = a5;
  uint64_t v46 = 0;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  uint64_t v6 = *a2;
  int v48 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v43 = *((_DWORD *)a2 + 6);
  int v8 = *((_DWORD *)a2 + 8);
  int v49 = *((_DWORD *)a2 + 7);
  int v50 = v8;
  unsigned int v9 = *((_DWORD *)a2 + 9);
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  int v12 = *((_DWORD *)a2 + 15);
  int v52 = *((_DWORD *)a2 + 14);
  unsigned int v53 = v9;
  int v13 = *((_DWORD *)a2 + 16);
  int v14 = *((_DWORD *)a2 + 17);
  int v15 = *((_DWORD *)a2 + 19);
  int v44 = *((_DWORD *)a2 + 18);
  int v16 = *((_DWORD *)a2 + 20);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v42 = v5;
  if ((v58 & 1) == 0)
  {
    uint64_t v58 = v6;
    LODWORD(v59) = v48;
    uint64_t v60 = v7;
    int v61 = v43;
    int v62 = v49;
    int v63 = v50;
    unsigned int v64 = v53 & 0xFFFFFFFD;
    uint64_t v65 = v10;
    uint64_t v66 = v11;
    int v67 = v52;
    int v68 = v12;
    int v69 = v13;
    int v70 = v14;
    int v71 = v44;
    int v72 = v15;
    int v73 = v16;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static View.makeView(view:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v56 = v54;
    double v57 = v55;
    if ((v53 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  int v38 = v12;
  uint64_t v39 = v10;
  int v40 = v13;
  int v37 = v15;
  int v41 = v16;
  _ViewOutputs.init()();
  uint64_t v56 = v58;
  double v57 = *(double *)&v59;
  uint64_t v58 = v11;
  LODWORD(v59) = v52;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    _DisplayList_Identity.init()();
    int v35 = v58;
    uint64_t v36 = v7;
    int v32 = v14;
    LODWORD(v54) = v58;
    _ViewInputs.pushIdentity(_:)();
    type metadata accessor for _GraphValue();
    int v34 = _GraphValue.value.getter();
    unsigned int v33 = _ViewInputs.animatedPosition()();
    unsigned int v31 = _ViewInputs.animatedSize()();
    HIWORD(v60) = HIWORD(v7);
    int v61 = v43;
    int v62 = v49;
    int v63 = v50;
    unsigned int v64 = v53;
    uint64_t v65 = v39;
    uint64_t v66 = v11;
    int v67 = v52;
    int v68 = v38;
    int v69 = v40;
    int v70 = v14;
    int v71 = v44;
    int v72 = v37;
    int v73 = v41;
    uint64_t v17 = _ViewInputs.containerPosition.getter();
    HIDWORD(v58) = v34;
    *(double *)&unint64_t v59 = COERCE_DOUBLE(__PAIR64__(v31, v33));
    LODWORD(v60) = v17;
    WORD2(v60) = 0;
    MEMORY[0x1F4188790](v17);
    uint64_t v29 = type metadata accessor for ArchivableDisplayList();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<LayoutComputer>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<DisplayList>);
    uint64_t v18 = v46;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v58, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v28, v29, MEMORY[0x1E4FBC248], v19, MEMORY[0x1E4FBC278], v20);
    uint64_t v46 = v18;
    char v21 = v53;
    LOBYTE(v58) = 0;
    _ViewOutputs.subscript.setter();
    if ((v21 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if ((v53 & 2) != 0)
  {
LABEL_8:
    LODWORD(v58) = v42;
    type metadata accessor for _GraphValue();
    uint64_t v22 = _GraphValue.value.getter();
    LODWORD(v58) = v22;
    MEMORY[0x1F4188790](v22);
    uint64_t v23 = type metadata accessor for ArchivableLayoutComputer();
    uint64_t v29 = v23;
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<LayoutComputer>(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v58, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v28, v23, MEMORY[0x1E4FBC248], v24, MEMORY[0x1E4FBC278], v25);
    LOBYTE(v58) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
LABEL_9:
  uint64_t v26 = v47;
  *(void *)uint64_t v47 = v56;
  double result = v57;
  v26[1] = v57;
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView()
{
  return static _ArchivableView._makeViewList(view:inputs:)();
}

uint64_t static _ArchivableView._makeViewList(view:inputs:)()
{
  return static _ViewListOutputs.unaryViewList<A>(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView()
{
  return 1;
}

uint64_t static _ArchivableView._viewListCount(inputs:)()
{
  return 1;
}

uint64_t static _ArchivableView.registerDecoder()()
{
  type metadata accessor for ArchivableFactory();
  swift_getWitnessTable();
  swift_getWitnessTable();

  return static ViewDecoders.registerDecodableFactoryType<A, B>(_:forType:)();
}

double protocol witness for _ArchivableView.sizeThatFits(in:) in conformance TimelineProgressView<A>.ArchivableTimelineProgressView()
{
  *(void *)&double result = *(_OWORD *)&_ProposedSize.fixingUnspecifiedDimensions()();
  return result;
}

uint64_t ArchivableDisplayList.updateValue()(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  int v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  int v8 = (char *)&v26 - v7;
  int v32 = *v1;
  int v28 = v1[2];
  int v31 = v1[3];
  int v29 = v1[4];
  uint64_t v9 = *((unsigned __int16 *)v1 + 10);
  uint64_t Value = AGGraphGetValue();
  char v12 = v11;
  uint64_t v30 = v3;
  int v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  int v14 = v8;
  v13(v8, Value, v2);
  DisplayList.Version.init(forUpdate:)();
  uint64_t v15 = v41;
  if (v12)
  {
    if ((void)v41) {
      uint64_t v16 = (2 * ((33 * ((unint64_t)v41 >> 16)) ^ v41)) | 1;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v27 = v16;
    *((_WORD *)v1 + 10) = v16;
  }
  else
  {
    uint64_t v27 = v9;
  }
  uint64_t v17 = swift_allocObject();
  unsigned int v33 = v14;
  v13(v5, (uint64_t)v14, v2);
  *(void *)(v17 + 40) = type metadata accessor for ArchivableFactory();
  *(void *)(v17 + 48) = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v17 + 16));
  uint64_t v19 = v30;
  (*(void (**)(uint64_t *, char *, uint64_t))(v30 + 32))(boxed_opaque_existential_1, v5, v2);
  long long v41 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  long long v41 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  unint64_t v36 = v17 | 0xB000000000000000;
  uint64_t v37 = (unsigned __int16)v27;
  uint64_t v38 = 0;
  char v40 = 0;
  __int16 v39 = 0;
  uint64_t v20 = (long long *)AGGraphGetValue();
  long long v21 = v20[1];
  long long v41 = *v20;
  long long v42 = v21;
  uint64_t v22 = swift_retain();
  MEMORY[0x18C114450](v22);
  int v35 = v32;
  uint64_t v34 = v15;
  DisplayList.Item.init(_:frame:identity:version:)();
  uint64_t v23 = v43;
  unint64_t v24 = v44;
  outlined copy of DisplayList.Item.Value(v43, v44);
  DisplayList.init(_:)();
  *(void *)&long long v41 = v36;
  WORD4(v41) = v37;
  BYTE10(v41) = BYTE2(v37);
  AGGraphSetOutputValue();
  outlined consume of DisplayList.Item.Value(v23, v24);
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v33, v2);
}

uint64_t ArchivableLayoutComputer.updateValue()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ArchivableLayoutComputer.Engine();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)v17 - v7;
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, Value, v1);
  default argument 0 of ViewSizeCache.init(cache:)();
  ViewSizeCache.init(cache:)();
  (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v8, v4, v1);
  uint64_t v10 = &v8[*(int *)(v5 + 36)];
  long long v11 = v17[9];
  *((_OWORD *)v10 + 8) = v17[8];
  *((_OWORD *)v10 + 9) = v11;
  v10[160] = v18;
  long long v12 = v17[5];
  *((_OWORD *)v10 + 4) = v17[4];
  *((_OWORD *)v10 + 5) = v12;
  long long v13 = v17[7];
  *((_OWORD *)v10 + 6) = v17[6];
  *((_OWORD *)v10 + 7) = v13;
  long long v14 = v17[1];
  *(_OWORD *)uint64_t v10 = v17[0];
  *((_OWORD *)v10 + 1) = v14;
  long long v15 = v17[3];
  *((_OWORD *)v10 + 2) = v17[2];
  *((_OWORD *)v10 + 3) = v15;
  swift_getWitnessTable();
  swift_getWitnessTable();
  StatefulRule<>.update<A>(to:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

double ArchivableLayoutComputer.Engine.sizeThatFits(_:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  double v10 = MEMORY[0x1F4188790](v9);
  long long v12 = &v23[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v15 = *((unsigned char *)v14 + 8);
  uint64_t v16 = v14[2];
  char v17 = *((unsigned char *)v14 + 24);
  uint64_t v31 = *v14;
  uint64_t v13 = v31;
  char v32 = v15;
  uint64_t v33 = v16;
  char v34 = v17;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v18 + 16))(v5, v2, a2, v10);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v12, v5, v7);
  uint64_t v19 = *(void *)(a2 + 24);
  uint64_t v24 = v7;
  uint64_t v25 = v19;
  uint64_t v26 = v12;
  uint64_t v27 = v13;
  char v28 = v15;
  uint64_t v29 = v16;
  char v30 = v17;
  ViewSizeCache.get(_:makeValue:)();
  double v21 = v20;
  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v12, v7);
  return v21;
}

uint64_t protocol witness for LayoutEngine.childGeometries(at:origin:) in conformance ArchivableLayoutComputer<A>.Engine()
{
  return MEMORY[0x1F40FD928]();
}

uint64_t ArchivableFactory.makeView()(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return AnyView.init<A>(_:)();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _UNKNOWN **v8;
  uint64_t v9;
  int v10;
  long long v11;

  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = *(int *)(a1 + 56);
  double v10 = *(_DWORD *)(v1 + *(int *)(a1 + 52));
  uint64_t v11 = *(_OWORD *)(v1 + v5);
  MEMORY[0x18C113660](v1, &type metadata for ArchivablePlaceholder, v3, &protocol witness table for ArchivablePlaceholder);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = &protocol witness table for ArchivablePlaceholder;
  uint64_t v9 = v6;
  swift_getWitnessTable();
  return AnyView.init<A>(_:)();
}

uint64_t ArchivableFactory.encoding()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a2 + 2;
  *a2 = _typeName(_:qualified:)();
  a2[1] = v6;
  a2[5] = a1;
  a2[6] = swift_getWitnessTable();
  a2[7] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
  uint64_t v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v8(boxed_opaque_existential_1, v2, a1);
}

{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *boxed_opaque_existential_1;
  uint64_t (*v8)(uint64_t *, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v5 = a2 + 2;
  *a2 = _typeName(_:qualified:)();
  a2[1] = v6;
  a2[5] = a1;
  a2[6] = swift_getWitnessTable();
  a2[7] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v5);
  uint64_t v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v8(boxed_opaque_existential_1, v2, a1);
}

uint64_t ArchivableFactory.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 2003134838 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

{
  BOOL v2;
  char v6;

  uint64_t v2 = a1 == 0x7265696669646F6DLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x797469746E656469 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702521203 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t ArchivableFactory.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v8 = *(void *)(a2 + 16);
  type metadata accessor for ArchivableFactory.CodingKeys();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

{
  uint64_t v2;
  uint64_t v3;
  long long v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  long long v17;
  uint64_t v18;
  long long v19;
  long long v20;
  char v21;

  uint64_t v3 = v2;
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  uint64_t v16 = *(_OWORD *)(a2 + 16);
  char v17 = v5;
  char v15 = a2;
  uint64_t v19 = v16;
  double v20 = v5;
  type metadata accessor for ArchivableFactory.CodingKeys();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v19) = 0;
  double v10 = v18;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v10) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  long long v12 = v7;
  uint64_t v13 = v15;
  LODWORD(v19) = *(_DWORD *)(v3 + *(int *)(v15 + 52));
  double v21 = 1;
  lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v19 = *(_OWORD *)(v3 + *(int *)(v13 + 56));
  double v21 = 2;
  type metadata accessor for CGSize(0);
  lazy protocol witness table accessor for type CGSize and conformance CGSize((unint64_t *)&lazy protocol witness table cache variable for type CGSize and conformance CGSize);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v9, v6);
}

uint64_t ArchivableFactory.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v21 = a4;
  uint64_t v24 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v25 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ArchivableFactory.CodingKeys();
  swift_getWitnessTable();
  uint64_t v26 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v22 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v23 = a3;
  uint64_t v10 = type metadata accessor for ArchivableFactory();
  uint64_t v20 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v12 = (char *)&v19 - v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v13 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v13)
  {
    uint64_t v19 = v12;
    uint64_t v27 = v10;
    uint64_t v14 = v22;
    uint64_t v16 = v24;
    char v15 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v26);
    char v17 = v19;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v15, a2);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v21, v17, v27);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableFactory<A>.CodingKeys()
{
  return 2003134838;
}

{
  char *v0;

  return ArchivableFactory.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableFactory<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = ArchivableFactory.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

{
  uint64_t result;

  uint64_t result = ArchivableFactory.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ArchivableFactory<A>.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key();
  *a1 = result & 1;
  return result;
}

{
  uint64_t result;

  uint64_t result = protocol witness for static AccessibilityViewModifier.options.getter in conformance AccessibilityAttachmentModifier();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableFactory<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

{
  uint64_t WitnessTable;
  uint64_t vars8;

  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableFactory<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

{
  uint64_t WitnessTable;
  uint64_t vars8;

  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for _DisplayList_ViewFactory.identity.getter in conformance ArchivableFactory<A>()
{
  return MEMORY[0x1F41001E8]();
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivableFactory<A>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ArchivableFactory.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableFactory<A>(void *a1, uint64_t a2)
{
  return ArchivableFactory.encode(to:)(a1, a2);
}

{
  return ArchivableFactory.encode(to:)(a1, a2);
}

uint64_t protocol witness for AnyViewFactory.viewType.getter in conformance ArchivableFactory<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(void *)(a1 + 16), *(void *)(a1 + 24), a3, a4);
}

uint64_t type metadata accessor for ArchivableLayoutComputer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ArchivableDisplayList()
{
  return __swift_instantiateGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

void type metadata accessor for Attribute<LayoutComputer>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Attribute();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t type metadata accessor for ArchivableFactory()
{
  return __swift_instantiateGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

uint64_t dispatch thunk of _ArchivableView.sizeThatFits(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t getEnumTagSinglePayload for ArchivableFactory(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ArchivableFactory(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187E31FB0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

__n128 __swift_memcpy22_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 14) = *(void *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ArchivableDisplayList(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 22)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ArchivableDisplayList(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 22) = v3;
  return result;
}

uint64_t base witness table accessor for AnyViewFactory in ArchivableFactory<A>()
{
  return swift_getWitnessTable();
}

{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ArchivableDisplayList<A>()
{
  return swift_getWitnessTable();
}

{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ArchivableLayoutComputer<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ArchivableLayoutComputer.Engine()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187E320A8()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t type metadata accessor for ArchivableFactory.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for ArchivableFactory.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187E32194);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata completion function for ArchivableLayoutComputer.Engine()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ArchivableLayoutComputer.Engine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 161 > 0x18)
  {
    uint64_t v9 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    long long v13 = *(_OWORD *)(v11 + 16);
    long long v12 = *(_OWORD *)(v11 + 32);
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    *(_OWORD *)(v10 + 16) = v13;
    *(_OWORD *)(v10 + 32) = v12;
    long long v14 = *(_OWORD *)(v11 + 96);
    long long v16 = *(_OWORD *)(v11 + 48);
    long long v15 = *(_OWORD *)(v11 + 64);
    *(_OWORD *)(v10 + 80) = *(_OWORD *)(v11 + 80);
    *(_OWORD *)(v10 + 96) = v14;
    *(_OWORD *)(v10 + 48) = v16;
    *(_OWORD *)(v10 + 64) = v15;
    long long v18 = *(_OWORD *)(v11 + 128);
    long long v17 = *(_OWORD *)(v11 + 144);
    long long v19 = *(_OWORD *)(v11 + 112);
    *(unsigned char *)(v10 + 160) = *(unsigned char *)(v11 + 160);
    *(_OWORD *)(v10 + 128) = v18;
    *(_OWORD *)(v10 + 144) = v17;
    *(_OWORD *)(v10 + 112) = v19;
  }
  return v4;
}

uint64_t initializeWithCopy for ArchivableLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  long long v11 = *(_OWORD *)(v8 + 96);
  long long v13 = *(_OWORD *)(v8 + 48);
  long long v12 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v11;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  long long v15 = *(_OWORD *)(v8 + 128);
  long long v14 = *(_OWORD *)(v8 + 144);
  long long v16 = *(_OWORD *)(v8 + 112);
  *(unsigned char *)(v7 + 160) = *(unsigned char *)(v8 + 160);
  *(_OWORD *)(v7 + 128) = v15;
  *(_OWORD *)(v7 + 144) = v14;
  *(_OWORD *)(v7 + 112) = v16;
  return a1;
}

uint64_t assignWithCopy for ArchivableLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v9 = *(_OWORD *)(v8 + 32);
  long long v11 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)unint64_t v7 = v11;
  long long v12 = *(_OWORD *)(v8 + 56);
  long long v13 = *(_OWORD *)(v8 + 72);
  long long v14 = *(_OWORD *)(v8 + 88);
  *(unsigned char *)(v7 + 104) = *(unsigned char *)(v8 + 104);
  *(_OWORD *)(v7 + 88) = v14;
  *(_OWORD *)(v7 + 72) = v13;
  *(_OWORD *)(v7 + 56) = v12;
  char v15 = *(unsigned char *)(v8 + 160);
  long long v17 = *(_OWORD *)(v8 + 128);
  long long v16 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(v8 + 112);
  *(_OWORD *)(v7 + 128) = v17;
  *(_OWORD *)(v7 + 144) = v16;
  *(unsigned char *)(v7 + 160) = v15;
  return a1;
}

uint64_t initializeWithTake for ArchivableLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v9 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  long long v11 = *(_OWORD *)(v8 + 96);
  long long v13 = *(_OWORD *)(v8 + 48);
  long long v12 = *(_OWORD *)(v8 + 64);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v11;
  *(_OWORD *)(v7 + 48) = v13;
  *(_OWORD *)(v7 + 64) = v12;
  long long v15 = *(_OWORD *)(v8 + 128);
  long long v14 = *(_OWORD *)(v8 + 144);
  long long v16 = *(_OWORD *)(v8 + 112);
  *(unsigned char *)(v7 + 160) = *(unsigned char *)(v8 + 160);
  *(_OWORD *)(v7 + 128) = v15;
  *(_OWORD *)(v7 + 144) = v14;
  *(_OWORD *)(v7 + 112) = v16;
  return a1;
}

uint64_t assignWithTake for ArchivableLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  long long v10 = *(_OWORD *)(v8 + 16);
  long long v9 = *(_OWORD *)(v8 + 32);
  long long v11 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
  *(_OWORD *)(v7 + 16) = v10;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)unint64_t v7 = v11;
  long long v12 = *(_OWORD *)(v8 + 56);
  long long v13 = *(_OWORD *)(v8 + 72);
  long long v14 = *(_OWORD *)(v8 + 88);
  *(unsigned char *)(v7 + 104) = *(unsigned char *)(v8 + 104);
  *(_OWORD *)(v7 + 88) = v14;
  *(_OWORD *)(v7 + 72) = v13;
  *(_OWORD *)(v7 + 56) = v12;
  char v15 = *(unsigned char *)(v8 + 160);
  long long v17 = *(_OWORD *)(v8 + 128);
  long long v16 = *(_OWORD *)(v8 + 144);
  *(_OWORD *)(v7 + 112) = *(_OWORD *)(v8 + 112);
  *(_OWORD *)(v7 + 128) = v17;
  *(_OWORD *)(v7 + 144) = v16;
  *(unsigned char *)(v7 + 160) = v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableLayoutComputer.Engine(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 161;
    unsigned int v7 = (a2 - v5 + 255) >> (8 * (((*(unsigned char *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xF8) - 95));
    if (v6 < 4) {
      unsigned int v8 = v7 + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    switch(v10)
    {
      case 1:
        int v11 = a1[v6];
        if (!a1[v6]) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v11 = *(unsigned __int16 *)&a1[v6];
        if (*(_WORD *)&a1[v6]) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187E3278CLL);
      case 4:
        int v11 = *(_DWORD *)&a1[v6];
        if (!v11) {
          break;
        }
LABEL_18:
        int v12 = (v11 - 1) << (8 * (((*(unsigned char *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xF8) - 95));
        if (v6 >= 4) {
          int v12 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFF60) {
          int v13 = *a1;
        }
        else {
          int v13 = *(_DWORD *)a1;
        }
        return v5 + (v13 | v12) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ArchivableLayoutComputer.Engine(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  size_t v9 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 161;
  char v10 = 8 * (((*(unsigned char *)(v6 + 64) + 7) & 0xF8) - 95);
  if (v8 >= a3)
  {
    int v14 = 0;
    if (v8 >= a2)
    {
LABEL_14:
      switch(v14)
      {
        case 1:
          a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v9] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_38;
        case 4:
          *(_DWORD *)&a1[v9] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            long long v18 = *(void (**)(void))(v7 + 56);
            v18();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = (a3 - v8 + 255) >> v10;
    if (v9 <= 3) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v15 = (~v8 + a2) >> v10;
  if (v9 < 4) {
    int v16 = v15 + 1;
  }
  else {
    int v16 = 1;
  }
  if (v9 >= 4) {
    unsigned int v17 = ~v8 + a2;
  }
  else {
    unsigned int v17 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v9);
  if (v9 == 1) {
    *a1 = v17;
  }
  else {
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v9] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v9] = v16;
      break;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x187E32974);
    case 4:
      *(_DWORD *)&a1[v9] = v16;
      break;
    default:
      return;
  }
}

uint64_t base witness table accessor for Equatable in ArchivableFactory<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in ArchivableFactory<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in ArchivableFactory<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in ArchivableLayoutComputer.Engine.sizeThatFits(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 56);
  char v5 = *(unsigned char *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 40);
  char v8 = v3;
  uint64_t v9 = v4;
  char v10 = v5;
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v2 + 32))(&v7, v1);
}

double specialized UIViewSnapshotResponder.portalPreviewTarget<A>(inHost:portalResult:options:preferredContainer:)(void *a1, void *a2, char a3, char a4, void *a5)
{
  uint64_t v6 = (CGPoint *)v5;
  MEMORY[0x18C113CA0]();
  AGGraphClearUpdate();
  long long v12 = *(_OWORD *)(v5 + 128);
  long long v59 = *(_OWORD *)(v5 + 112);
  int v13 = *(_DWORD *)(v5 + 96);
  double v14 = *(double *)(v5 + 104);
  int v15 = *(_DWORD *)(v5 + 168);
  *(void *)&long long v57 = *(void *)(v5 + 88);
  DWORD2(v57) = v13;
  double v58 = v14;
  long long v60 = v12;
  long long v61 = *(_OWORD *)(v5 + 144);
  uint64_t v62 = *(void *)(v5 + 160);
  LODWORD(v63) = v15;
  _ViewInputs.position.getter();
  uint64_t Value = (void *)AGGraphGetValue();
  double v24 = MEMORY[0x18C10C240](Value, v17, v18, v19, v20, v21, v22, v23, *Value, Value[1], *(void *)&v58);
  double v26 = v25;
  AGGraphSetUpdate();
  double v27 = *(double *)(v5 + 240);
  double v28 = *(double *)(v5 + 248);
  UIViewSnapshotResponder.contentPath.getter((uint64_t)v64);
  outlined init with take of Path?((uint64_t)v64, (uint64_t)v65);
  int v29 = v66;
  if (v66 == 255)
  {
    double v33 = 0.0;
    double v31 = 0.0;
    double v35 = 0.0;
    CGFloat v37 = 0.0;
  }
  else
  {
    long long v67 = v65[0];
    long long v68 = v65[1];
    unsigned __int8 v69 = v66;
    Path.boundingRect.getter();
    double v31 = v30;
    double v33 = v32;
    double v35 = v34;
    CGFloat v37 = v36;
    outlined release of Path?((uint64_t)v64);
  }
  double v38 = v24 - v27;
  double v39 = v26 - v28;
  *(double *)&long long v57 = v31;
  *((double *)&v57 + 1) = v33;
  double v58 = v35;
  *(CGFloat *)&long long v59 = v37;
  BYTE8(v59) = v29 == 255;
  if (a2)
  {
    id v40 = a2;
    objc_msgSend(v40, sel_convertPoint_toCoordinateSpace_, a1, 0.0, 0.0, v57, *(void *)&v58, v59, v60, v61, v62, v63);
    double v42 = v41;
    double v44 = v43;
    double v45 = closure #1 in closure #1 in UIViewSnapshotResponder.portalPreviewTarget<A>(inHost:portalResult:options:preferredContainer:)(a4, (uint64_t)&v57, v6, v38, v39);
    double v47 = v46;

    double v48 = v47 - v44;
    double v49 = v44 - v47;
    if (a3) {
      double v31 = v42 - v45;
    }
    else {
      double v31 = v45 - v42;
    }
    if (a3) {
      double v33 = v49;
    }
    else {
      double v33 = v48;
    }
    if ((a4 & 2) != 0 || v29 == 255)
    {
      objc_msgSend(v40, sel_bounds);
      double v35 = v50;
      CGFloat v37 = v51;
    }
  }
  else if ((a4 & 2) != 0 || v29 == 255)
  {
    double v35 = *(double *)(v5 + 224);
    CGFloat v37 = *(double *)(v5 + 232);
  }
  v72.origin.x = v31;
  v72.origin.y = v33;
  v72.size.width = v35;
  v72.size.height = v37;
  CGRect v70 = CGRectOffset(v72, v38, v39);
  char v71 = 0;
  double v52 = UIViewSnapshotResponder.portalContainer(centeringPortalRect:inHost:options:preferredContainer:)((uint64_t)&v70, a1, a4, a5);
  uint64_t v54 = v53;
  objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1B38]), sel_initWithContainer_center_, v53, v52, v55);

  static Update.end()();
  return v35;
}

{
  uint64_t v5;
  CGPoint *v6;
  long long v12;
  int v13;
  double v14;
  int v15;
  void *Value;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  CGFloat v37;
  double v38;
  double v39;
  id v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  void *v53;
  void *v54;
  double v55;
  double v56;
  double v57;
  long long v59;
  double v60;
  long long v61;
  long long v62;
  long long v63;
  uint64_t v64;
  uint64_t v65;
  unsigned char v66[40];
  _OWORD v67[2];
  unsigned __int8 v68;
  long long v69;
  long long v70;
  unsigned __int8 v71;
  CGRect v72;
  char v73;
  CGRect v74;

  uint64_t v6 = (CGPoint *)v5;
  MEMORY[0x18C113CA0]();
  AGGraphClearUpdate();
  long long v12 = *(_OWORD *)(v5 + 128);
  long long v61 = *(_OWORD *)(v5 + 112);
  int v13 = *(_DWORD *)(v5 + 96);
  double v14 = *(double *)(v5 + 104);
  int v15 = *(_DWORD *)(v5 + 168);
  *(void *)&long long v59 = *(void *)(v5 + 88);
  DWORD2(v59) = v13;
  long long v60 = v14;
  uint64_t v62 = v12;
  uint64_t v63 = *(_OWORD *)(v5 + 144);
  unsigned int v64 = *(void *)(v5 + 160);
  LODWORD(v65) = v15;
  _ViewInputs.position.getter();
  uint64_t Value = (void *)AGGraphGetValue();
  double v24 = MEMORY[0x18C10C240](Value, v17, v18, v19, v20, v21, v22, v23, *Value, Value[1], *(void *)&v60);
  double v26 = v25;
  AGGraphSetUpdate();
  double v27 = *(double *)(v5 + 240);
  double v28 = *(double *)(v5 + 248);
  UIViewSnapshotResponder.contentPath.getter((uint64_t)v66);
  outlined init with take of Path?((uint64_t)v66, (uint64_t)v67);
  int v29 = v68;
  if (v68 == 255)
  {
    double v33 = 0.0;
    double v31 = 0.0;
    double v35 = 0.0;
    CGFloat v37 = 0.0;
  }
  else
  {
    unsigned __int8 v69 = v67[0];
    CGRect v70 = v67[1];
    char v71 = v68;
    Path.boundingRect.getter();
    double v31 = v30;
    double v33 = v32;
    double v35 = v34;
    CGFloat v37 = v36;
    outlined release of Path?((uint64_t)v66);
  }
  double v38 = v24 - v27;
  double v39 = v26 - v28;
  *(double *)&long long v59 = v31;
  *((double *)&v59 + 1) = v33;
  long long v60 = v35;
  *(CGFloat *)&long long v61 = v37;
  BYTE8(v61) = v29 == 255;
  if (a2)
  {
    id v40 = a2;
    objc_msgSend(v40, sel_convertPoint_toCoordinateSpace_, a1, 0.0, 0.0, v59, *(void *)&v60, v61, v62, v63, v64, v65);
    double v42 = v41;
    double v44 = v43;
    double v45 = closure #1 in closure #1 in UIViewSnapshotResponder.portalPreviewTarget<A>(inHost:portalResult:options:preferredContainer:)(a4, (uint64_t)&v59, v6, v38, v39);
    double v47 = v46;

    double v48 = v47 - v44;
    double v49 = v44 - v47;
    if (a3) {
      double v31 = v42 - v45;
    }
    else {
      double v31 = v45 - v42;
    }
    if (a3) {
      double v33 = v49;
    }
    else {
      double v33 = v48;
    }
    if ((a4 & 2) != 0 || v29 == 255)
    {
      objc_msgSend(v40, sel_bounds);
      double v35 = v50;
      CGFloat v37 = v51;
    }
  }
  else if ((a4 & 2) != 0 || v29 == 255)
  {
    double v35 = *(double *)(v5 + 224);
    CGFloat v37 = *(double *)(v5 + 232);
  }
  v74.origin.x = v31;
  v74.origin.y = v33;
  v74.size.width = v35;
  v74.size.height = v37;
  CGRect v72 = CGRectOffset(v74, v38, v39);
  int v73 = 0;
  double v52 = UIViewSnapshotResponder.portalContainer(centeringPortalRect:inHost:options:preferredContainer:)((uint64_t)&v72, a1, a4, a5);
  uint64_t v54 = v53;
  double v55 = v52;
  long long v57 = v56;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIDragPreviewTarget);
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithContainer_center_, v54, v55, v57);

  static Update.end()();
  return v35;
}

UIContextMenuConfiguration_optional __swiftcall ContextMenuBridge.outermostConfiguration()()
{
  uint64_t v0 = (objc_class *)ContextMenuBridge.outermostContextMenuResponder.getter();
  if (v0)
  {
    uint64_t v2 = (objc_class *)ContextMenuBridge.menuConfigurationFromResponder(_:)(v0);
    swift_release();
    uint64_t v0 = v2;
  }
  result.value.super.Class isa = v0;
  result.is_nil = v1;
  return result;
}

id UIContextMenuConfiguration.init(identifier:previewProvider:actionProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    uint64_t v9 = 0;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    char v10 = 0;
    goto LABEL_6;
  }
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  uint64_t v13 = MEMORY[0x1E4F143A8];
  uint64_t v14 = 1107296256;
  int v15 = thunk for @escaping @callee_guaranteed () -> (@owned UIDragPreview?);
  int v16 = &block_descriptor_51;
  uint64_t v9 = _Block_copy(&v13);
  swift_retain();
  swift_release();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v13 = MEMORY[0x1E4F143A8];
  uint64_t v14 = 1107296256;
  int v15 = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
  int v16 = &block_descriptor_48;
  char v10 = _Block_copy(&v13);
  swift_retain();
  swift_release();
LABEL_6:
  id v11 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_configurationWithIdentifier_previewProvider_actionProvider_, a1, v9, v10);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a4);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
  swift_unknownObjectRelease();
  _Block_release(v10);
  _Block_release(v9);
  return v11;
}

uint64_t ContextMenuBridge.outermostContextMenuResponder.getter()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for ContextMenuBridge.host);
  if (result)
  {
    uint64_t v2 = (void *)result;
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    uint64_t v3 = ViewRendererHost.responderNode.getter();

    if (v3)
    {
      MEMORY[0x1F4188790](v4);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
      return 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void ContextMenuBridge.presentedMenu.didset(uint64_t a1)
{
  if (*(_DWORD *)(v1 + direct field offset for ContextMenuBridge.presentedMenu) != a1
    || ((BYTE4(a1) & 1 ^ *(unsigned __int8 *)(v1 + direct field offset for ContextMenuBridge.presentedMenu + 4)) & 1) != 0)
  {
    uint64_t v2 = MEMORY[0x18C119DF0](v1 + direct field offset for ContextMenuBridge.host);
    if (v2)
    {
      uint64_t v3 = (void *)v2;
      type metadata accessor for _UIHostingView();
      swift_getWitnessTable();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
    else
    {
      __break(1u);
    }
  }
}

id ContextMenuBridge.menuConfigurationFromResponder(_:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for PlatformItemList?);
  static Update.ensure<A>(_:)();
  if (v18) {
    uint64_t v4 = v18;
  }
  else {
    uint64_t v4 = MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v4 + 16))
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIContextMenuConfiguration);
    uint64_t v5 = (objc_class *)type metadata accessor for ContextMenuIdentity();
    uint64_t v6 = (char *)objc_allocWithZone(v5);
    uint64_t v7 = &v6[OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_sourceIndexPath];
    uint64_t v8 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
    *(void *)&v6[OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base] = a1;
    v17.receiver = v6;
    v17.super_class = v5;
    swift_retain();
    id v9 = objc_msgSendSuper2(&v17, sel_init);
    uint64_t v11 = (*(uint64_t (**)(id, uint64_t))(class metadata base offset for ContextMenuResponder + *a1 + 16))(v9, v10);
    uint64_t v13 = v12;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v4;
    id v15 = UIContextMenuConfiguration.init(identifier:previewProvider:actionProvider:)((uint64_t)v9, v11, v13, (uint64_t)partial apply for closure #1 in ContextMenuBridge.menuConfigurationFromResponder(_:), v14);
    objc_msgSend(v15, sel_setPreferredMenuElementOrder_, qword_1883A6F10[*(char *)(v2 + direct field offset for ContextMenuBridge.menuOrder)], v17.receiver, v17.super_class);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v15;
}

uint64_t closure #1 in ContextMenuBridge.outermostContextMenuResponder.getter@<X0>(uint64_t *a1@<X1>, char *a2@<X8>)
{
  type metadata accessor for ContextMenuResponder(0);
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    *a1 = result;
    swift_retain();
    uint64_t result = swift_release();
    char v5 = 2;
  }
  else
  {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void closure #1 in ContextMenuBridge.menuConfigurationFromResponder(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  UIMenuElementSize preferredElementSize = MEMORY[0x1E4FBC860];
  uint64_t v10 = MEMORY[0x1E4FBC860];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  _s10Foundation9IndexPathVSgMaTm_3(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = type metadata accessor for MenuVisitor.MenuStackGroup();
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
  if (one-time initialization token for empty != -1) {
    swift_once();
  }
  uint64_t v7 = __swift_project_value_buffer(v4, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
  outlined init with copy of MenuVisitor.MenuStackGroup(v7, v6 + v5);
  MenuVisitor.visit(_:uniqueNames:)(a2, &v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v11.value.super.Class isa = 0;
  v11.is_nil = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v9, v8, (Swift::String_optional)0, v11, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, 0);
}

void *ContextMenuBridge.contextMenuResponder(at:)(double a1, double a2)
{
  uint64_t v5 = v2 + direct field offset for ContextMenuBridge.host;
  uint64_t result = (void *)MEMORY[0x18C119DF0](v5);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v7 = result;
  objc_msgSend(result, sel_convertPoint_toView_, 0, a1, a2);

  uint64_t result = (void *)MEMORY[0x18C119DF0](v5);
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  Swift::String v8 = result;
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  uint64_t v9 = ViewRendererHost.responderNode.getter();

  uint64_t result = 0;
  if (v9)
  {
    type metadata accessor for ViewResponder();
    if (swift_dynamicCastClass())
    {
      uint64_t v10 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
      swift_release();
      uint64_t result = 0;
      if (v10)
      {
        type metadata accessor for ContextMenuResponder(0);
        ResponderNode.firstAncestor<A>(ofType:)();
        swift_release();
        return 0;
      }
    }
    else
    {
      swift_release();
      return 0;
    }
  }
  return result;
}

id @objc ContextMenuBridge.contextMenuInteraction(_:configurationForMenuAtLocation:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  id v9 = a1;
  id v10 = specialized ContextMenuBridge.contextMenuInteraction(_:configurationForMenuAtLocation:)(a2, a3);

  return v10;
}

UITargetedPreview_optional __swiftcall ContextMenuBridge.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(UIContextMenuInteraction _, UIContextMenuConfiguration previewForHighlightingMenuWithConfiguration)
{
  uint64_t v3 = v2;
  id v5 = [(objc_class *)previewForHighlightingMenuWithConfiguration.super.isa identifier];
  type metadata accessor for ContextMenuIdentity();
  uint64_t v6 = swift_dynamicCastClass();
  if (v6)
  {
    uint64_t v7 = v6;
    if ([(objc_class *)_.super.isa menuAppearance] != (id)2)
    {
      int v8 = *(_DWORD *)(*(void *)(v7 + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base) + 304);
      swift_retain();
      if (static SemanticFeature.isEnabled.getter())
      {
        static Update.dispatchImmediately<A>(_:)();
        swift_release();
        char v9 = v31[0];
      }
      else
      {
        swift_release();
        char v9 = 0;
      }
      uint64_t v12 = v3 + direct field offset for ContextMenuBridge.presentedMenu;
      uint64_t v13 = *(unsigned int *)(v3 + direct field offset for ContextMenuBridge.presentedMenu);
      int v14 = *(unsigned __int8 *)(v3 + direct field offset for ContextMenuBridge.presentedMenu + 4);
      *(_DWORD *)uint64_t v12 = v8;
      *(unsigned char *)(v12 + 4) = v9;
      uint64_t v15 = 0x100000000;
      if (!v14) {
        uint64_t v15 = 0;
      }
      ContextMenuBridge.presentedMenu.didset(v15 | v13);
    }
    int v16 = (objc_class *)MEMORY[0x18C119DF0](v3 + direct field offset for ContextMenuBridge.host);
    if (!v16)
    {
      __break(1u);
      goto LABEL_16;
    }
    objc_super v17 = v16;
    unsigned int v27 = *(_DWORD *)(*(void *)(v7 + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base) + 304);
    id v18 = objc_allocWithZone(MEMORY[0x1E4FB1B28]);
    swift_retain();
    id v19 = objc_msgSend(v18, sel_init);
    id v20 = objc_msgSend(self, sel_clearColor);
    objc_msgSend(v19, sel_setBackgroundColor_, v20);

    swift_retain();
    UIViewSnapshotResponder.contentPath.getter((uint64_t)v28);
    uint64_t v22 = v28[0];
    uint64_t v21 = v28[1];
    uint64_t v23 = v28[2];
    uint64_t v24 = v28[3];
    unsigned __int8 v25 = v29;
    swift_release();
    outlined init with take of Path?((uint64_t)v28, (uint64_t)v30);
    if (v30[32] != 255)
    {
      v31[0] = v22;
      v31[1] = v21;
      v31[2] = v23;
      v31[3] = v24;
      unsigned __int8 v32 = v25;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
      outlined copy of Path.Storage(v22, v21, v23, v24, v25);
      outlined copy of Path.Storage(v22, v21, v23, v24, v25);
      id v26 = UIBezierPath.init(_:)((uint64_t)v31);
      objc_msgSend(v19, sel_setVisiblePath_, v26);

      outlined release of Path?((uint64_t)v28);
      outlined release of Path?((uint64_t)v28);
    }
    UIImage_optional v11 = (objc_class *)specialized UIViewSnapshotResponder.portalTargetedPreview<A>(kind:id:host:parameters:options:)(1, v27, v17, v19, 8);
    swift_unknownObjectRelease();

    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    UIImage_optional v11 = 0;
  }
  int v16 = v11;
LABEL_16:
  result.value.super.Class isa = v16;
  result.is_nil = v10;
  return result;
}

id @objc ContextMenuBridge.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  char v9 = (void *)ContextMenuBridge.contextMenuInteraction(_:previewForHighlightingMenuWithConfiguration:)((UIContextMenuInteraction)v6, (UIContextMenuConfiguration)v7);

  return v9;
}

id @objc ContextMenuBridge.contextMenuInteraction(_:previewForDismissingMenuWithConfiguration:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  char v9 = specialized ContextMenuBridge.contextMenuInteraction(_:previewForDismissingMenuWithConfiguration:)(v7);

  return v9;
}

uint64_t closure #1 in closure #1 in ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ContextMenuPreviewAction?);
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)Value;
  uint64_t v3 = *(void *)(Value + 8);
  *(void *)a1 = *(void *)Value;
  *(void *)(a1 + 8) = v3;
  char v5 = *(unsigned char *)(Value + 16);
  *(unsigned char *)(a1 + 16) = v5;

  return outlined copy of ContextMenuPreviewAction?(v4, v3, v5);
}

void @objc ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  swift_unknownObjectRetain();
  id v10 = a1;
  specialized ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(v9, a5);

  swift_unknownObjectRelease();
}

uint64_t ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, void *a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:);
  *(void *)(v7 + 24) = v6;
  if (a3)
  {
    void v14[4] = partial apply for closure #2 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:);
    v14[5] = v7;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1107296256;
    _OWORD v14[2] = thunk for @escaping @callee_guaranteed () -> ();
    v14[3] = &block_descriptor_20_0;
    id v8 = _Block_copy(v14);
    id v9 = a2;
    id v10 = a1;
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(a3, sel_addCompletion_, v8);
    _Block_release(v8);
    swift_unknownObjectRelease();
  }
  else
  {
    id v11 = a2;
    id v12 = a1;
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
  }
  ContextMenuBridge.setupNotifications()();
  return swift_release();
}

uint64_t closure #1 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, UIContextMenuInteraction a2)
{
  id v3 = objc_msgSend(a1, sel_identifier);
  type metadata accessor for ContextMenuIdentity();
  swift_dynamicCastClassUnconditional();
  swift_retain();
  ContextMenuResponder.startTrackingUpdates(interaction:)(a2);
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t closure #2 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  static Update.enqueueAction(_:)();

  return swift_release();
}

uint64_t ContextMenuBridge.setupNotifications()()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for willPresent != -1) {
    swift_once();
  }
  uint64_t v2 = static SheetInspectorBridgeNotifications.willPresent;
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v7[4] = partial apply for closure #1 in ContextMenuBridge.setupNotifications();
  _OWORD v7[5] = v3;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v7[3] = &block_descriptor_29_0;
  uint64_t v4 = _Block_copy(v7);
  swift_release();
  id v5 = objc_msgSend(v1, sel_addObserverForName_object_queue_usingBlock_, v2, 0, 0, v4);

  _Block_release(v4);
  *(void *)(v0 + direct field offset for ContextMenuBridge.inspectorBridgeToken) = v5;
  return swift_unknownObjectRelease();
}

void @objc ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  swift_unknownObjectRetain();
  id v10 = a1;
  ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(v8, v9, a5);

  swift_unknownObjectRelease();
}

void closure #1 in ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = v2 + direct field offset for ContextMenuBridge.presentedMenu;
    uint64_t v5 = *(unsigned int *)(v2 + direct field offset for ContextMenuBridge.presentedMenu);
    int v6 = *(unsigned __int8 *)(v2 + direct field offset for ContextMenuBridge.presentedMenu + 4);
    *(_DWORD *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 4) = 0;
    uint64_t v7 = 0x100000000;
    if (!v6) {
      uint64_t v7 = 0;
    }
    ContextMenuBridge.presentedMenu.didset(v7 | v5);
  }
}

void @objc ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  swift_unknownObjectRetain();
  id v10 = a1;
  specialized ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:)(v9, a5);

  swift_unknownObjectRelease();
}

void closure #1 in ContextMenuBridge.setupNotifications()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = (void *)MEMORY[0x18C119DF0](v2);
  if (v3)
  {
    uint64_t v4 = v3;
    objc_msgSend(v3, sel_dismissMenu);
  }
}

BOOL ContextMenuIdentity.isEqual(_:)(uint64_t a1)
{
  swift_getObjectType();
  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (v8)
  {
    if (swift_dynamicCast())
    {
      uint64_t v3 = *(void *)&v6[OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base];
      swift_retain();

      if (v3)
      {
        uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base);
        swift_unknownObjectRelease();
        return v4 == v3;
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v7);
  }
  return 0;
}

uint64_t ContextMenuIdentity.description.getter()
{
  _StringGuts.grow(_:)(25);
  v0._object = (void *)0x800000018833A950;
  v0._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t ObjC metadata update function for ContextMenuIdentity()
{
  return type metadata accessor for ContextMenuIdentity();
}

uint64_t type metadata accessor for ContextMenuIdentity()
{
  uint64_t result = type metadata singleton initialization cache for ContextMenuIdentity;
  if (!type metadata singleton initialization cache for ContextMenuIdentity) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for ContextMenuIdentity()
{
  _s10Foundation9IndexPathVSgMaTm_3(319, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

id specialized ContextMenuBridge.contextMenuInteraction(_:configurationForMenuAtLocation:)(double a1, double a2)
{
  uint64_t v3 = ContextMenuBridge.contextMenuResponder(at:)(a1, a2);
  if (v3)
  {
    id v4 = ContextMenuBridge.menuConfigurationFromResponder(_:)(v3);
    swift_release();
    return v4;
  }
  else
  {
    uint64_t v6 = v2 + direct field offset for ContextMenuBridge.presentedMenu;
    uint64_t v7 = *(unsigned int *)(v2 + direct field offset for ContextMenuBridge.presentedMenu);
    int v8 = *(unsigned __int8 *)(v2 + direct field offset for ContextMenuBridge.presentedMenu + 4);
    *(_DWORD *)uint64_t v6 = 0;
    *(unsigned char *)(v6 + 4) = 0;
    uint64_t v9 = 0x100000000;
    if (!v8) {
      uint64_t v9 = 0;
    }
    ContextMenuBridge.presentedMenu.didset(v9 | v7);
    return 0;
  }
}

void *specialized ContextMenuBridge.contextMenuInteraction(_:previewForDismissingMenuWithConfiguration:)(void *a1)
{
  uint64_t v3 = v1 + direct field offset for ContextMenuBridge.host;
  uint64_t result = (void *)MEMORY[0x18C119DF0](v1 + direct field offset for ContextMenuBridge.host);
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v5 = result;
  id v6 = objc_msgSend(result, sel_window);

  if (!v6) {
    return 0;
  }

  id v7 = objc_msgSend(a1, sel_identifier);
  type metadata accessor for ContextMenuIdentity();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    return (void *)v8;
  }
  uint64_t result = (void *)MEMORY[0x18C119DF0](v3);
  if (result)
  {
    uint64_t v9 = result;
    unsigned int v19 = *(_DWORD *)(*(void *)(v8 + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base) + 304);
    id v10 = objc_allocWithZone(MEMORY[0x1E4FB1B28]);
    swift_retain();
    id v11 = objc_msgSend(v10, sel_init);
    id v12 = objc_msgSend(self, sel_clearColor);
    objc_msgSend(v11, sel_setBackgroundColor_, v12);

    swift_retain();
    UIViewSnapshotResponder.contentPath.getter((uint64_t)v20);
    uint64_t v13 = v20[0];
    uint64_t v14 = v20[1];
    uint64_t v15 = v20[2];
    uint64_t v16 = v20[3];
    unsigned __int8 v17 = v21;
    swift_release();
    outlined init with take of Path?((uint64_t)v20, (uint64_t)v22);
    if (v22[32] != 255)
    {
      v23[0] = v13;
      v23[1] = v14;
      v23[2] = v15;
      v23[3] = v16;
      unsigned __int8 v24 = v17;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
      outlined copy of Path.Storage(v13, v14, v15, v16, v17);
      outlined copy of Path.Storage(v13, v14, v15, v16, v17);
      id v18 = UIBezierPath.init(_:)((uint64_t)v23);
      objc_msgSend(v11, sel_setVisiblePath_, v18);

      outlined release of Path?((uint64_t)v20);
      outlined release of Path?((uint64_t)v20);
    }
    uint64_t v8 = (uint64_t)specialized UIViewSnapshotResponder.portalTargetedPreview<A>(kind:id:host:parameters:options:)(1, v19, v9, v11, 9);
    swift_unknownObjectRelease();

    swift_release();
    return (void *)v8;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t specialized ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(void *a1, void *a2)
{
  objc_msgSend(a1, sel_identifier);
  type metadata accessor for ContextMenuIdentity();
  uint64_t v3 = swift_dynamicCastClass();
  if (!v3
    || (*(unsigned char *)(*(void *)(v3 + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base) + 316) & 1) != 0
    || AGWeakAttributeGetAttribute() == *MEMORY[0x1E4F4E7A0])
  {
    return swift_unknownObjectRelease();
  }
  uint64_t v4 = AGGraphClearUpdate();
  MEMORY[0x1F4188790](v4);
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ContextMenuPreviewAction?);
  static Update.dispatchImmediately<A>(_:)();
  AGGraphSetUpdate();
  char v5 = (char)v15;
  if (v15 > 0xFDu) {
    return swift_unknownObjectRelease();
  }
  uint64_t v7 = aBlock;
  uint64_t v8 = v14;
  if ((v15 & 0x80) != 0)
  {
    swift_retain();
    swift_retain();
    objc_msgSend(a2, sel_setPreferredCommitStyle_, 1);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = aBlock;
    *(void *)(v11 + 24) = v8;
    *(unsigned char *)(v11 + 32) = v5 & 1;
    unsigned __int8 v17 = partial apply for closure #3 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:);
    uint64_t v18 = v11;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v14 = 1107296256;
    uint64_t v15 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v16 = &block_descriptor_35_0;
    id v12 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(a2, sel_addAnimations_, v12);
    swift_unknownObjectRelease();
    outlined consume of ContextMenuPreviewAction?(v7, v8, v5);
    _Block_release(v12);
    swift_release();
    return swift_release();
  }
  else
  {
    outlined copy of ContextMenuPreviewAction(aBlock, v14, (char)v15);
    objc_msgSend(a2, sel_setPreferredCommitStyle_, 0);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v7;
    *(void *)(v9 + 24) = v8;
    unsigned __int8 v17 = partial apply for closure #2 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:);
    uint64_t v18 = v9;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v14 = 1107296256;
    uint64_t v15 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v16 = &block_descriptor_41;
    id v10 = _Block_copy(&aBlock);
    outlined copy of ContextMenuPreviewAction(v7, v8, v5);
    swift_release();
    objc_msgSend(a2, sel_addAnimations_, v10);
    swift_unknownObjectRelease();
    outlined consume of ContextMenuPreviewAction?(v7, v8, v5);
    _Block_release(v10);
    return outlined consume of ContextMenuPreviewAction?(v7, v8, v5);
  }
}

void specialized ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:)(void *a1, void *a2)
{
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *v2;
  id v5 = objc_msgSend(a1, sel_identifier);
  type metadata accessor for ContextMenuIdentity();
  if (*(unsigned char *)(*(void *)(swift_dynamicCastClassUnconditional() + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base)
                + 324) == 1)
  {
    swift_unknownObjectRelease();
    if (a2)
    {
LABEL_3:
      uint64_t v6 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v7 = (void *)swift_allocObject();
      v7[2] = *(void *)(v4 + 80);
      v7[3] = *(void *)(v4 + 88);
      v7[4] = v6;
      v13[4] = partial apply for closure #1 in ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:);
      v13[5] = v7;
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1107296256;
      v13[2] = thunk for @escaping @callee_guaranteed () -> ();
      v13[3] = &block_descriptor_50;
      uint64_t v8 = _Block_copy(v13);
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(a2, sel_addCompletion_, v8);
      _Block_release(v8);
      swift_unknownObjectRelease();
      return;
    }
  }
  else
  {
    swift_retain();
    static AGAttributeFlags.transactional.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
    swift_unknownObjectRelease();
    swift_release();
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v9 = (char *)v2 + direct field offset for ContextMenuBridge.presentedMenu;
  uint64_t v10 = *(unsigned int *)((char *)v2 + direct field offset for ContextMenuBridge.presentedMenu);
  int v11 = *((unsigned __int8 *)v2 + direct field offset for ContextMenuBridge.presentedMenu + 4);
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 0;
  uint64_t v12 = 0x100000000;
  if (!v11) {
    uint64_t v12 = 0;
  }

  ContextMenuBridge.presentedMenu.didset(v12 | v10);
}

uint64_t sub_187E35648()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187E35680()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:)()
{
  closure #1 in ContextMenuBridge.contextMenuInteraction(_:willEndFor:animator:)(*(void *)(v0 + 32));
}

uint64_t sub_187E356C4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)()
{
  v1.super.Class isa = *(Class *)(v0 + 24);
  return closure #1 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(*(void **)(v0 + 16), v1);
}

uint64_t sub_187E3570C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)()
{
  return closure #2 in ContextMenuBridge.contextMenuInteraction(_:willDisplayMenuFor:animator:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void partial apply for closure #1 in ContextMenuBridge.setupNotifications()(uint64_t a1)
{
  closure #1 in ContextMenuBridge.setupNotifications()(a1, v1);
}

uint64_t partial apply for closure #1 in closure #1 in ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in ContextMenuBridge.contextMenuInteraction(_:willPerformPreviewActionForMenuWith:animator:)(a1);
}

uint64_t sub_187E3575C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIViewSnapshotResponder.canPortal.getter@<X0>(BOOL *a1@<X8>)
{
  return closure #1 in UIViewSnapshotResponder.canPortal.getter(a1);
}

uint64_t sub_187E357A4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187E357DC()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in ContextMenuBridge.hostRemovedFromWindow()()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_dismissMenu);
}

uint64_t sub_187E35824()
{
  return swift_deallocObject();
}

void *type metadata accessor for EnvironmentValues.PresentingContextMenuKey()
{
  return &unk_1ED421F58;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t UIView._findMatchedTransitionSource<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a2;
  _OWORD v7[5] = a1;
  id v5 = _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(v4, (uint64_t (*)(uint64_t *))partial apply for closure #1 in UIView._findMatchedTransitionSource<A>(id:in:), (uint64_t)v7);
  type metadata accessor for MatchedTransitionSourceMarkingView();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {

    return 0;
  }
  return result;
}

uint64_t View.matchedTransitionSource<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.matchedTransitionSource<A, B>(id:in:configuration:)(a1, a2, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a3, a4, (uint64_t)&type metadata for EmptyMatchedTransitionSourceConfiguration, a5, a6, (uint64_t)&protocol witness table for EmptyMatchedTransitionSourceConfiguration);
}

uint64_t MatchedTransitionSourceConfiguration.shadow(color:radius:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  v7[0] = a1;
  *(double *)&v7[1] = a4;
  *(double *)&v7[2] = a5;
  *(double *)&v7[3] = a6;
  return MatchedTransitionSourceConfiguration.concat<A>(_:)((uint64_t)v7, a2, (uint64_t)&unk_1ED42DF58, a3);
}

uint64_t MatchedTransitionSourceConfiguration.background(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1;
  return MatchedTransitionSourceConfiguration.concat<A>(_:)((uint64_t)&v4, a2, (uint64_t)&unk_1ED452318, a3);
}

void MatchedTransitionSourceConfiguration.background<A>(_:)()
{
}

uint64_t protocol witness for MatchedTransitionSourceConfiguration._update(configuration:) in conformance BackgroundColorConfiguration(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 32) = v3;
  return result;
}

__n128 protocol witness for MatchedTransitionSourceConfiguration._update(configuration:) in conformance ShadowConfiguration(uint64_t a1)
{
  uint64_t v3 = *v1;
  __n128 v6 = *(__n128 *)(v1 + 1);
  uint64_t v4 = v1[3];
  swift_retain();
  swift_release();
  *(void *)a1 = v3;
  __n128 result = v6;
  *(__n128 *)(a1 + 8) = v6;
  *(void *)(a1 + 24) = v4;
  return result;
}

id UIView.findMatchedTransitionSource<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = UIView._findMatchedTransitionSource<A>(id:in:)(a1, a2, a3, a4);
  if (!v4) {
    return 0;
  }
  id v5 = (void *)v4;
  id v6 = *(id *)(v4 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView);

  return v6;
}

id UIView.findMatchedTransitionSource<A>(id:in:zoomingViewController:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = UIView._findMatchedTransitionSource<A>(id:in:)(a1, a2, a4, a5);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = (unsigned char *)v6;
  id v8 = objc_msgSend(a3, sel_transitionCoordinator);
  if (v8)
  {
    uint64_t v9 = v8;
    v7[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom] = 1;
    MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(0);
    objc_msgSend(v7, sel_setNeedsLayout);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v7;
    void v14[4] = partial apply for closure #1 in UIView.findMatchedTransitionSource<A>(id:in:zoomingViewController:);
    v14[5] = v10;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1107296256;
    _OWORD v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v14[3] = &block_descriptor_51;
    int v11 = _Block_copy(v14);
    uint64_t v7 = v7;
    swift_release();
    objc_msgSend(v9, sel_animateAlongsideTransitionInView_animation_completion_, 0, 0, v11);
    swift_unknownObjectRelease();
    _Block_release(v11);
  }
  id v12 = *(id *)&v7[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView];

  return v12;
}

uint64_t closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = &v21[-v12 - 8];
  uint64_t v15 = (uint64_t *)(*v14 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_effect);
  swift_beginAccess();
  uint64_t v16 = *v15;
  unsigned __int8 v17 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16);
  v17(v13, a3, a4);
  if (v16 == a2)
  {
    outlined init with copy of AnyHashable((uint64_t)(v15 + 1), (uint64_t)v22);
    v17(v10, v13, a4);
    AnyHashable.init<A>(_:)();
    char v18 = MEMORY[0x18C1174E0](v22, v21);
    outlined destroy of AnyHashable((uint64_t)v21);
    outlined destroy of AnyHashable((uint64_t)v22);
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v13, a4);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v13, a4);
    char v18 = 0;
  }
  return v18 & 1;
}

void protocol witness for ViewModifier.body(content:) in conformance MatchedTransitionSourceSourceMarkingEffect()
{
}

uint64_t sub_187E35EF0()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in UIView.findMatchedTransitionSource<A>(id:in:zoomingViewController:)()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom) = 0;
  return MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(0);
}

uint64_t initializeWithCopy for _ResolvedMatchedTransitionSourceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _ResolvedMatchedTransitionSourceConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for _ResolvedMatchedTransitionSourceConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t dispatch thunk of MatchedTransitionSourceConfiguration._update(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t MatchedTransitionSourceMarkingView.__ivar_destroyer()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_effect;

  return outlined destroy of MatchedTransitionSourceSourceMarkingEffect(v1);
}

uint64_t sub_187E361B4()
{
  return swift_getWitnessTable();
}

uint64_t sub_187E3621C()
{
  return swift_getWitnessTable();
}

_UNKNOWN **sub_187E36284()
{
  return &protocol witness table for CombinedMatchedTransitionSourceConfiguration<A, B>;
}

_UNKNOWN **sub_187E36290()
{
  return &protocol witness table for CombinedMatchedTransitionSourceConfiguration<A, B>;
}

_UNKNOWN **sub_187E3629C()
{
  return &protocol witness table for CombinedMatchedTransitionSourceConfiguration<A, B>;
}

uint64_t sub_187E362A8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t getEnumTagSinglePayload for CombinedMatchedTransitionSourceConfiguration(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for CombinedMatchedTransitionSourceConfiguration(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187E36774);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          unsigned __int8 v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t assignWithTake for MatchedTransitionSourceSourceMarkingEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  return a1;
}

void *type metadata accessor for BackgroundColorConfiguration()
{
  return &unk_1ED452318;
}

uint64_t getEnumTagSinglePayload for CornerConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

void *assignWithCopy for _ResolvedMatchedTransitionSourceConfiguration.Shadow(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for _ResolvedMatchedTransitionSourceConfiguration.Shadow(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

void *type metadata accessor for ShadowConfiguration()
{
  return &unk_1ED42DF58;
}

uint64_t assignWithTake for MatchedTransitionSourceModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_release();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchedTransitionSourceModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 105)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchedTransitionSourceModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 105) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for (MatchedTransitionSourceSourceMarkingEffect?, MatchedTransitionSourceSourceMarkingEffect?)()
{
  if (!lazy cache variable for type metadata for (MatchedTransitionSourceSourceMarkingEffect?, MatchedTransitionSourceSourceMarkingEffect?))
  {
    type metadata accessor for MatchedTransitionSourceSourceMarkingEffect?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (MatchedTransitionSourceSourceMarkingEffect?, MatchedTransitionSourceSourceMarkingEffect?));
    }
  }
}

uint64_t sub_187E36AC8()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187E36B10()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t sub_187E36B48()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(uint64_t a1)
{
  return closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(a1, *(void *)(v1 + 32), *(unsigned char **)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_187E36B8C()
{
  return lazy protocol witness table accessor for type EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>> and conformance EnvironmentReader<A>(&lazy protocol witness table cache variable for type EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>> and conformance EnvironmentReader<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentReader<ModifiedContent<_ViewModifier_Content<MatchedTransitionSourceModifier>, MatchedTransitionSourceSourceMarkingEffect>>);
}

void MatchedTransitionSourceConfiguration.clipShape<A>(_:)()
{
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v8 - 8);
  outlined init with copy of AccessibilityCustomAttributes.Value(a3, (uint64_t)v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain();
  AccessibilityCustomAttributes.init(_:value:)();
  v11[0] = v11[1];
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B38], (uint64_t)v11, 1, a4, MEMORY[0x1E4F40B38], a5);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v9;
  uint64_t v10;
  NSNumber *v11;
  uint64_t v13;

  uint64_t v9 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (NSNumber *)((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11->super.super.Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_storeEnumTagMultiPayload();
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v11, a4, a5);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v11);
}

{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5, MEMORY[0x1E4F27F38]);
}

{
  uint64_t v9;
  uint64_t v10;
  NSNumber *v11;
  uint64_t v13;

  uint64_t v9 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (NSNumber *)((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11->super.super.Class isa = Int8._bridgeToObjectiveC()().super.super.isa;
  swift_storeEnumTagMultiPayload();
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v11, a4, a5);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v11);
}

{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5, MEMORY[0x1E4F280C8]);
}

{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5, MEMORY[0x1E4F276F0]);
}

{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5, MEMORY[0x1E4F27928]);
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5);
}

{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5);
}

{
  return View.accessibilityCustomAttribute(_:value:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v15;

  unsigned int v10 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v10);
  unsigned int v12 = (uint64_t *)((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  *unsigned int v12 = a3;
  swift_storeEnumTagMultiPayload();
  uint64_t v13 = a3;
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v12, a4, a5);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v12);
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, double))
{
  uint64_t v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
  double v13 = MEMORY[0x1F4188790](v12);
  BOOL v15 = (uint64_t *)((char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  void *v15 = a6(a3, v13);
  swift_storeEnumTagMultiPayload();
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v15, a4, a5);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v15);
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v8);
  unsigned int v10 = (NSNumber *)((char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10->super.super.Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  swift_storeEnumTagMultiPayload();
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v10, a3, a4);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v10);
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (uint64_t *)((char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  void *v14 = a3;
  v14[1] = a4;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v14, a5, a6);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v14);
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (uint64_t *)((char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t *v14 = a3;
  v14[1] = a4;
  swift_storeEnumTagMultiPayload();
  outlined copy of Data._Representation(a3, a4);
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v14, a5, a6);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v14);
}

uint64_t View.accessibilityCustomAttribute(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, double))
{
  uint64_t v12 = type metadata accessor for AccessibilityCustomAttributes.Value();
  double v13 = MEMORY[0x1F4188790](v12);
  BOOL v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a6(0, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v15, a3, v16);
  swift_storeEnumTagMultiPayload();
  View.accessibilityCustomAttribute(_:value:)(a1, a2, (uint64_t)v15, a4, a5);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v15);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t (*a3)(uint64_t, double)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AccessibilityCustomAttributes.Value();
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v11 = a3(a1, v9);
  swift_storeEnumTagMultiPayload();
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v11, a2, a4);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v11);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (NSNumber *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6->super.super.Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  swift_storeEnumTagMultiPayload();
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v6, a1, a2);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v6);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (uint64_t *)((char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v10 = a1;
  v10[1] = a2;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v10, a3, a4);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v10);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AccessibilityCustomAttributes.Value();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (uint64_t *)((char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v10 = a1;
  v10[1] = a2;
  swift_storeEnumTagMultiPayload();
  outlined copy of Data._Representation(a1, a2);
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v10, a3, a4);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v10);
}

uint64_t ModifiedContent<>.accessibilityCustomAttribute(_:value:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t (*a3)(void, double)@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AccessibilityCustomAttributes.Value();
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a3(0, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11, a1, v12);
  swift_storeEnumTagMultiPayload();
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)((uint64_t)v11, a2, a4);
  return outlined destroy of AccessibilityCustomAttributes.Value((uint64_t)v11);
}

double TransformGestureAnchorHelper.startPoints(_:)()
{
  MEMORY[0x18C113CA0]();
  AGGraphClearUpdate();
  uint64_t Value = AGGraphGetValue();
  uint64_t v28 = *(void *)Value;
  long long v1 = *(_OWORD *)(Value + 24);
  long long v29 = *(_OWORD *)(Value + 8);
  long long v30 = v1;
  swift_retain();
  AGGraphSetUpdate();
  AGGraphClearUpdate();
  unint64_t v2 = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = AGGraphSetUpdate();
  *(void *)&long long v20 = v3;
  *((void *)&v20 + 1) = v4;
  *(double *)&unint64_t v6 = MEMORY[0x18C10C240](v5);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v7, v6));
  AGGraphClearUpdate();
  uint64_t v8 = AGGraphGetValue();
  long long v15 = *(_OWORD *)v8;
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(void *)(v8 + 24);
  AGGraphSetUpdate();
  long long v26 = v29;
  uint64_t v25 = v28;
  long long v27 = v30;
  uint64_t v16 = 1;
  long long v17 = 0u;
  long long v18 = 0u;
  char v19 = 2;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v22 = 0;
  char v23 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v16, (uint64_t)v24);
  v24[41] = 4;
  swift_retain();
  outlined destroy of CoordinateSpace((uint64_t)&v16);
  ViewTransform.convert(_:point:)();
  outlined destroy of ViewTransform.Conversion((uint64_t)&v20);
  uint64_t v11 = swift_release();
  long long v20 = v15;
  *(void *)&long long v21 = v9;
  *((void *)&v21 + 1) = v10;
  MEMORY[0x18C114450](v11);
  UnitPoint.init(_:in:)();
  double v13 = v12;
  swift_release();
  static Update.end()();
  return v13;
}

ValueMetadata *type metadata accessor for TransformGestureAnchorHelper()
{
  return &type metadata for TransformGestureAnchorHelper;
}

uint64_t key path setter for EnvironmentValues.listPadding : EnvironmentValues()
{
  return EnvironmentValues.listPadding.setter();
}

uint64_t EnvironmentValues.listPadding.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListPaddingAnchorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListPaddingAnchorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListPaddingAnchorKey>);
  swift_retain();
  PropertyList.subscript.setter();
  uint64_t v1 = *(void *)(v0 + 8);
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.listPadding(top:bottom:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a4) {
    uint64_t v8 = !(a2 & 1);
  }
  else {
    uint64_t v8 = !(a2 & 1) | 4u;
  }
  protocol witness for static EnvironmentKey.defaultValue.getter in conformance AccessibilityLargeContentViewerKey(&v10);
  return View.contentMargins(_:_:for:)(v8, &v10, a5, a6);
}

uint64_t View.listPadding(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  char v5 = 1;
  return View.contentMargins(_:_:for:)(a1, *(void *)&a4, 0, &v5, a2, a3);
}

uint64_t View.listPadding(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = 1;
  return View.contentMargins(_:_:for:)(a1, &v4, a2, a3);
}

uint64_t View.listPadding(anchor:)()
{
  return swift_release();
}

uint64_t View.listPadding(_:_:anchor:)()
{
  return swift_release();
}

{
  swift_getKeyPath();
  OptionalEdgeInsets.init(_:edges:)();
  View.environment<A>(_:_:)();
  return swift_release();
}

void static ListPaddingAnchor.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ListPaddingAnchor.readableContent.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ListPaddingAnchor.safeArea.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

BOOL static ListPaddingAnchor.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_187E38290()
{
  return swift_getWitnessTable();
}

uint64_t sub_187E382F4()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ListPadding>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListPadding>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListPadding>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListPadding> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListPadding> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListPadding> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ListPadding>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListPadding> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ListPaddingAnchor(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E384DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListPaddingAnchor.Storage and conformance ListPaddingAnchor.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type ListPaddingAnchor.Storage and conformance ListPaddingAnchor.Storage;
  if (!lazy protocol witness table cache variable for type ListPaddingAnchor.Storage and conformance ListPaddingAnchor.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListPaddingAnchor.Storage and conformance ListPaddingAnchor.Storage);
  }
  return result;
}

void *type metadata accessor for ListPaddingAnchorKey()
{
  return &unk_1ED431550;
}

uint64_t DropModifier.init(isEnabled:of:isTargeted:perform:proposal:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  outlined init with copy of TableColumnList(a6, (uint64_t)&v28);
  uint64_t v15 = type metadata accessor for FunctionalDropDelegate();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 88) = 0;
  *(void *)(v16 + 96) = 0;
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  *(void *)(v16 + 32) = a4;
  *(unsigned char *)(v16 + 40) = a5;
  outlined init with take of OptionalBinaryInteger(&v28, v16 + 48);
  uint64_t v17 = *(void *)(v16 + 88);
  *(void *)(v16 + 88) = a7;
  *(void *)(v16 + 96) = a8;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(a3, a4);
  outlined copy of AppIntentExecutor?(a7);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  uint64_t v29 = v15;
  long long v30 = &protocol witness table for FunctionalDropDelegate;
  swift_retain();
  swift_bridgeObjectRelease();
  *(void *)&long long v28 = v16;
  uint64_t v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  if (a1)
  {
    outlined init with take of OptionalBinaryInteger(&v28, (uint64_t)v23);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
  }
  outlined assign with take of DropDelegate?((uint64_t)v23, (uint64_t)&v25);
  long long v18 = v26;
  *(_OWORD *)a9 = v25;
  *(_OWORD *)(a9 + 16) = v18;
  *(void *)(a9 + 32) = v27;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a7);
  outlined consume of Binding<NavigationSplitViewColumn>?(a3, a4);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1(a6);
}

__n128 DropPreviewModifier.init(base:preview:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v5;
  *(void *)(a4 + 32) = *(void *)(a1 + 32);
  *(void *)(a4 + 40) = a2;
  *(void *)(a4 + 48) = a3;
  return result;
}

unint64_t specialized static AccessibilityAttachmentModifier.makeAccessibilityPropertiesTransform<A>(_:value:inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = *(void *)(a4 + 48);
  int v23 = *(_DWORD *)(a4 + 56);
  uint64_t v24 = v22;
  LODWORD(v25) = *(_DWORD *)(a4 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    int v21 = Dictionary.init(minimumCapacity:)();
    uint64_t v12 = MEMORY[0x1E4F3F3B8];
    type metadata accessor for AccessibilityPropertiesEntry<StrongHash?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<StrongHash?>, &lazy cache variable for type metadata for StrongHash?, MEMORY[0x1E4F3F3B8]);
    uint64_t v28 = v13;
    uint64_t v29 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<StrongHash?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<StrongHash?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<StrongHash?>, &lazy cache variable for type metadata for StrongHash?, v12);
    uint64_t v24 = a1;
    uint64_t v25 = a2;
    int v26 = a3;
    char v27 = BYTE4(a3) & 1;
    specialized Dictionary.subscript.setter((uint64_t)&v24, (uint64_t)&type metadata for AccessibilityProperties.TemporalState);
    AccessibilityAttachment.init(properties:)();
    uint64_t v14 = v24;
    uint64_t v15 = v25;
    type metadata accessor for External<ViewIdentity>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v14;
    *(void *)(v16 + 24) = v15;
    uint64_t v24 = v16;
    uint64_t v25 = 0;
    type metadata accessor for External<ViewIdentity>(0, &lazy cache variable for type metadata for External<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F4E778]);
    lazy protocol witness table accessor for type External<ViewIdentity> and conformance External<A>(&lazy protocol witness table cache variable for type External<AccessibilityAttachmentModifier> and conformance External<A>, &lazy cache variable for type metadata for External<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier);
    swift_retain();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    _GraphValue.init(_:)();
    uint64_t v24 = v22;
    LODWORD(v25) = v23;
    char v17 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    unsigned int v18 = 0;
    if (v17) {
      unsigned int v18 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v21, (long long *)a4, a5, a6, 0);
    }
    swift_release();
    char v19 = v17 ^ 1;
  }
  else
  {
    unsigned int v18 = 0;
    char v19 = 1;
  }
  return v18 | ((unint64_t)(v19 & 1) << 32);
}

uint64_t static DropPreviewModifier._makeView(modifier:inputs:body:)@<X0>(long long *a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X5>, _OWORD *a4@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  long long v7 = a1[3];
  long long v45 = a1[2];
  long long v46 = v7;
  long long v47 = a1[4];
  int v48 = *((_DWORD *)a1 + 20);
  long long v8 = *a1;
  long long v9 = a1[1];
  int v30 = DWORD2(v46);
  uint64_t v29 = v46;
  long long v43 = v8;
  long long v44 = v9;
  *(void *)&long long v37 = v46;
  DWORD2(v37) = DWORD2(v46);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0) {
    return a2();
  }
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  long long v39 = v45;
  long long v40 = v46;
  long long v41 = v47;
  int v42 = v48;
  long long v38 = v44;
  *(void *)&long long v37 = _ViewInputs.viewPhase.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type PortalGroupID and conformance PortalGroupID();
  int v23 = Attribute.init<A>(body:value:flags:update:)();
  UniqueID.init()();
  uint64_t v10 = v37;
  closure #1 in static PointerHoverEffectModifier._makeView(modifier:inputs:body:)((uint64_t)&v43, v37, (void (*)(uint64_t, uint64_t *))a2);
  long long v37 = v28;
  uint64_t v11 = _ViewOutputs.subscript.getter();
  if ((v11 & 0x100000000) == 0)
  {
    type metadata accessor for DropPreviewModifier();
    type metadata accessor for _GraphValue();
    int v22 = _GraphValue.value.getter();
    long long v39 = v45;
    long long v40 = v46;
    long long v41 = v47;
    int v42 = v48;
    long long v37 = v43;
    long long v38 = v44;
    outlined retain of _ViewInputs((uint64_t)&v43);
    int v12 = _ViewOutputs.viewResponders()();
    type metadata accessor for DropPayloadCustomPreviewResponder();
    long long v33 = v45;
    long long v34 = v46;
    long long v35 = v47;
    int v36 = v48;
    long long v31 = v43;
    long long v32 = v44;
    uint64_t v27 = v10;
    outlined retain of _ViewInputs((uint64_t)&v43);
    char v26 = 0;
    uint64_t v13 = DropPayloadCustomPreviewResponder.__allocating_init(inputs:space:displayList:)((uint64_t *)&v31, &v27);
    uint64_t v14 = DropPreviewResponderFilter.init(modifier:inputs:identity:children:responder:)(v22, v23, v12, v13, (uint64_t)&v31);
    MEMORY[0x1F4188790](v14);
    long long v20 = (long long *)type metadata accessor for DropPreviewResponderFilter();
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSay7SwiftUI13ViewResponderCGMaTm_1(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v31, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)&v19, (uint64_t)v20, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v16);
    swift_release();
    LOBYTE(v37) = 0;
    uint64_t v11 = _ViewOutputs.subscript.setter();
  }
  *(void *)&long long v37 = v29;
  DWORD2(v37) = v30;
  MEMORY[0x1F4188790](v11);
  long long v20 = &v43;
  outlined retain of [Text.Modifier]((uint64_t)&v29);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *(void *)&long long v37 = v29;
  DWORD2(v37) = v30;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    static AccessibilityActivationPointStorage.defaultDrop.getter();
    long long v37 = v31;
    *(void *)&long long v38 = v32;
    *((void *)&v38 + 1) = *((void *)&v32 + 1);
    *(void *)&long long v39 = v33;
    long long v18 = v28;
    swift_bridgeObjectRetain();
    specialized static AccessibilityAttachmentModifier.makeAccessibilityPropertiesTransform<A>(_:value:inputs:outputs:)((uint64_t *)&v37, (uint64_t)&v43, v18, *((unint64_t *)&v18 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = _ViewOutputs.subscript.setter();
  }
  _OWORD *v25 = v28;
  return result;
}

uint64_t DropPayloadCustomPreviewResponder.__allocating_init(inputs:space:displayList:)(uint64_t *a1, uint64_t *a2)
{
  return DropPayloadCustomPreviewResponder.init(inputs:space:displayList:)(a1, a2);
}

uint64_t DropPreviewResponderFilter.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DropPreviewModifier();
  uint64_t Value = AGGraphGetValue();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DropPreviewModifier<A>@<X0>(long long *a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X4>, _OWORD *a4@<X8>)
{
  return static DropPreviewModifier._makeView(modifier:inputs:body:)(a1, a2, *(void *)(a3 + 24), a4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DropPreviewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t key path getter for EnvironmentValues.dragItemGroupID : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.dragItemGroupID.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.dragItemGroupID : EnvironmentValues()
{
  return EnvironmentValues.dragItemGroupID.setter();
}

uint64_t DropPreviewResponderFilter.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v35 = *((void *)v0 + 6);
  uint64_t Value = AGGraphGetValue();
  int v4 = v3;
  uint64_t v5 = *(void *)(Value + 16);
  uint64_t v6 = *(void *)(Value + 24);
  long long v7 = (uint64_t *)AGGraphGetValue();
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (((v4 | v10) & 1) != 0 || (type metadata accessor for [ViewResponder](), !AGGraphGetOutputValue()))
  {
    *(void *)&long long v42 = v5;
    *((void *)&v42 + 1) = v6;
    *(double *)(v35 + 224) = MEMORY[0x18C114450]();
    *(void *)(v35 + 232) = v11;
    *(void *)&long long v41 = v8;
    *((void *)&v41 + 1) = v9;
    *(double *)(v35 + 240) = MEMORY[0x18C10C240]();
    *(void *)(v35 + 248) = v12;
  }
  uint64_t v13 = AGGraphGetValue();
  uint64_t v38 = *(void *)v13;
  long long v39 = *(_OWORD *)(v13 + 8);
  long long v40 = *(_OWORD *)(v13 + 24);
  uint64_t v14 = swift_retain();
  *(void *)&long long v41 = v8;
  *((void *)&v41 + 1) = v9;
  *(double *)&unint64_t v15 = MEMORY[0x18C10C240](v14);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v16, v15));
  DropPreviewResponderFilter.modifier.getter((uint64_t)&v41);
  uint64_t v18 = *(void *)&v44[4];
  uint64_t v17 = v45;
  uint64_t v19 = type metadata accessor for DropPreviewModifier();
  long long v20 = *(void (**)(long long *, uint64_t))(*(void *)(v19 - 8) + 8);
  swift_retain();
  v20(&v41, v19);
  int v21 = (uint64_t *)(v35 + *(void *)(class metadata base offset for CustomPreviewDropResponder + *(void *)v35 + 32));
  uint64_t v22 = *v21;
  *int v21 = v18;
  v21[1] = v17;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v22);
  uint64_t v23 = *((void *)v1 + 6);
  int v24 = *((_DWORD *)v1 + 8);
  long long v25 = v1[1];
  long long v41 = *v1;
  long long v42 = v25;
  int v43 = v24;
  *(void *)long long v44 = *(void *)((char *)v1 + 36);
  uint64_t v45 = v23;
  *(unsigned char *)(v23 + 264) = *(unsigned char *)AGGraphGetValue();
  *(void *)(v23 + 256) = AGCreateWeakAttribute();
  *(void *)&v37[0] = v8;
  *((void *)&v37[0] + 1) = v9;
  double v26 = MEMORY[0x18C10C240]();
  double v28 = v27;
  v37[0] = *(_OWORD *)AGGraphGetValue();
  *(double *)(v23 + 280) = v26 - MEMORY[0x18C10C240]();
  *(double *)(v23 + 288) = v28 - v29;
  DropPreviewResponderFilter.modifier.getter((uint64_t)v37);
  outlined init with copy of DropDelegate?((uint64_t)v37, (uint64_t)v36);
  v20(v37, v19);
  uint64_t v30 = v23 + *(void *)(class metadata base offset for DropPayloadCustomPreviewResponder + *(void *)v23 + 16);
  swift_beginAccess();
  outlined assign with take of DropDelegate?((uint64_t)v36, v30);
  swift_endAccess();
  uint64_t v31 = *((void *)v1 + 6);
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v32)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  *(_DWORD *)(v31 + 312) = *(_DWORD *)AGGraphGetValue();
  *(void *)(v31 + 304) = *(void *)AGGraphGetValue();
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for External<ViewIdentity>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_188351940;
    *(void *)(v33 + 32) = v31;
    *(void *)&v37[0] = v33;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void protocol witness for ViewModifier.body(content:) in conformance DropModifier()
{
}

uint64_t DropResponderFilter.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t Value = AGGraphGetValue();
  int v4 = v3;
  uint64_t v5 = *(void *)(Value + 16);
  uint64_t v6 = *(void *)(Value + 24);
  long long v7 = (uint64_t *)AGGraphGetValue();
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (((v4 | v10) & 1) != 0 || (type metadata accessor for [ViewResponder](), !AGGraphGetOutputValue()))
  {
    uint64_t v11 = *(void *)(v1 + 48);
    uint64_t v25 = v5;
    uint64_t v26 = v6;
    *(double *)(v11 + 224) = MEMORY[0x18C114450]();
    *(void *)(v11 + 232) = v12;
    *(void *)&long long v24 = v8;
    *((void *)&v24 + 1) = v9;
    *(double *)(v11 + 240) = MEMORY[0x18C10C240]();
    *(void *)(v11 + 248) = v13;
  }
  uint64_t v14 = *(void *)(v1 + 48);
  *(void *)(v14 + 256) = AGCreateWeakAttribute();
  *(unsigned char *)(v14 + 264) = *(unsigned char *)AGGraphGetValue();
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v15)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  *(unsigned char *)(v14 + 296) = *(unsigned char *)AGGraphGetValue();
  *(void *)&long long v24 = v8;
  *((void *)&v24 + 1) = v9;
  double v16 = MEMORY[0x18C10C240]();
  double v18 = v17;
  long long v24 = *(_OWORD *)AGGraphGetValue();
  *(double *)(v14 + 280) = v16 - MEMORY[0x18C10C240]();
  *(double *)(v14 + 288) = v18 - v19;
  *(_DWORD *)(v14 + 312) = *(_DWORD *)AGGraphGetValue();
  *(void *)(v14 + 304) = *(void *)AGGraphGetValue();
  long long v20 = (long long *)AGGraphGetValue();
  outlined init with copy of DropModifier(v20, (uint64_t)&v24);
  outlined init with take of DropDelegate?((uint64_t)&v24, (uint64_t)v23);
  swift_beginAccess();
  outlined assign with take of DropDelegate?((uint64_t)v23, v14 + 320);
  swift_endAccess();
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for External<ViewIdentity>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_188351940;
    *(void *)(v22 + 32) = *(void *)(v1 + 48);
    *(void *)&long long v24 = v22;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall DefaultPreviewDropPayloadResponder.extendPrintTree(string:)(Swift::String *string)
{
  v1._countAndFlagsBits = 0x74736544706F7264;
  v1._object = (void *)0xEF6E6F6974616E69;
  String.append(_:)(v1);
}

uint64_t DefaultPreviewDropPayloadResponder.__ivar_destroyer()
{
  return outlined destroy of DropDelegate?(v0 + 320);
}

uint64_t DefaultPreviewDropPayloadResponder.__deallocating_deinit()
{
  uint64_t v0 = DefaultLayoutViewResponder.deinit();
  outlined destroy of DropDelegate?(v0 + 320);

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DefaultPreviewDropPayloadResponder()
{
  return type metadata accessor for DefaultPreviewDropPayloadResponder();
}

uint64_t type metadata completion function for DropPayloadCustomPreviewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for DropPayloadProvider.delegate.getter in conformance DefaultPreviewDropPayloadResponder@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + 320;
  swift_beginAccess();
  return outlined init with copy of DropDelegate?(v3, a1);
}

uint64_t DropPayloadCustomPreviewResponder.init(inputs:space:displayList:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  int v4 = *((_DWORD *)a1 + 2);
  uint64_t v5 = a1[2];
  int v6 = *((_DWORD *)a1 + 20);
  uint64_t v7 = *a2;
  uint64_t v8 = (char *)v2 + *(void *)(class metadata base offset for DropPayloadCustomPreviewResponder + *v2 + 16);
  *(_OWORD *)uint64_t v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((void *)v8 + 4) = 0;
  uint64_t v11 = v7;
  uint64_t v12 = v3;
  int v13 = v4;
  uint64_t v14 = v5;
  long long v9 = *(_OWORD *)(a1 + 5);
  long long v15 = *(_OWORD *)(a1 + 3);
  long long v16 = v9;
  long long v17 = *(_OWORD *)(a1 + 7);
  uint64_t v18 = a1[9];
  int v19 = v6;
  return CustomPreviewDropResponder.init(inputs:space:displayList:)((uint64_t)&v12, &v11);
}

uint64_t DropPayloadCustomPreviewResponder.__ivar_destroyer()
{
  return outlined destroy of DropDelegate?((uint64_t)v0 + *(void *)(class metadata base offset for DropPayloadCustomPreviewResponder
                                                                   + *v0
                                                                   + 16));
}

uint64_t DropPayloadCustomPreviewResponder.__deallocating_deinit()
{
  uint64_t v0 = CustomPreviewDropResponder.deinit();
  outlined destroy of DropDelegate?((uint64_t)v0 + *(void *)(class metadata base offset for DropPayloadCustomPreviewResponder
                                                            + *v0
                                                            + 16));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DropPayloadCustomPreviewResponder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for DropPreviewModifier(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }

  return swift_release();
}

uint64_t initializeWithCopy for DropPreviewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DropPreviewModifier(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  uint64_t v7 = *((void *)a2 + 6);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(void *)(a1 + 48) = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DropPreviewModifier(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for DropPreviewModifier()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in DropModifier()
{
  return &protocol witness table for DropModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in DropPreviewModifier<A>()
{
  return &protocol witness table for DropPreviewModifier<A>;
}

uint64_t protocol witness for DropPayloadProvider.delegate.getter in conformance DropPayloadCustomPreviewResponder<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + *(void *)(class metadata base offset for DropPayloadCustomPreviewResponder + *(void *)*v1 + 16);
  swift_beginAccess();
  return outlined init with copy of DropDelegate?(v3, a1);
}

uint64_t outlined init with copy of DropModifier(long long *a1, uint64_t a2)
{
  uint64_t v3 = *((void *)a1 + 3);
  if (v3)
  {
    uint64_t v4 = *((void *)a1 + 4);
    *(void *)(a2 + 24) = v3;
    *(void *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  else
  {
    long long v5 = *a1;
    long long v6 = a1[1];
    *(void *)(a2 + 32) = *((void *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  return a2;
}

uint64_t outlined assign with take of DropDelegate?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DropDelegate?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_187E39F70@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.dragItemGroupID.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_187E39FB4()
{
  return EnvironmentValues.dragItemGroupID.setter();
}

uint64_t sub_187E39FEC()
{
  if (*(void *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t type metadata accessor for DropPreviewResponderFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of DropDelegate?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DropDelegate?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for DropResponderFilter()
{
  return swift_release();
}

uint64_t assignWithCopy for DropPreviewResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DropPreviewResponderFilter(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DropPreviewResponderFilter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DropPreviewResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for DropResponderFilter()
{
  return &unk_1ED42B7E8;
}

ValueMetadata *type metadata accessor for CanDropKey()
{
  return &type metadata for CanDropKey;
}

uint64_t base witness table accessor for _AttributeBody in DropPreviewResponderFilter<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized AccessibilityRelationshipScope.nodes<A>(for:with:in:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  outlined init with copy of AnyHashable(a2, (uint64_t)v17);
  outlined init with copy of AnyHashable((uint64_t)v17, (uint64_t)v18);
  AnyHashable.init<A>(_:)();
  outlined destroy of AnyHashable((uint64_t)v17);
  v18[0] = v14;
  v18[1] = v15;
  uint64_t v19 = v16;
  uint64_t v20 = a3;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v3 + 16);
  if (*(void *)(v6 + 16)
    && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v18), (v8 & 1) != 0)
    && (uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7), *(void *)(v9 + 16))
    && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v11 & 1) != 0))
  {
    uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
    swift_endAccess();
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_endAccess();
    uint64_t v12 = MEMORY[0x1E4FBC860];
  }
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v18);
  return v12;
}

uint64_t AccessibilityRotorEntry.resolveForList(in:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v38 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  long long v39 = (char *)&v35 - v11;
  uint64_t v37 = *(void *)(v12 + 24);
  uint64_t v13 = type metadata accessor for AccessibilityRotorEntryElementSpecifier();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v35 - v15;
  if (*(void *)(v3 + 24))
  {
    int v17 = *(_DWORD *)(v3 + 16);
    uint64_t v35 = v8;
    uint64_t v36 = v4;
    uint64_t v18 = a1;
    uint64_t v19 = *(void *)v3;
    uint64_t v20 = *(void *)(v3 + 8);
    char v21 = v17 & 1;
    v44[0] = *v18;
    v42[0] = 0;
    v42[1] = 0;
    outlined copy of Text.Storage(v19, v20, v17 & 1);
    swift_bridgeObjectRetain();
    char v41 = v21;
    uint64_t v40 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
    uint64_t v22 = v20;
    char v23 = v21;
    uint64_t v8 = v35;
    uint64_t v4 = v36;
    outlined consume of Text.Storage(v19, v22, v23);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v40 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v3 + *(int *)(v4 + 40), v13);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      memset(v44, 0, sizeof(v44));
      char v45 = 2;
      goto LABEL_10;
    }
    uint64_t v25 = *(void *)&v16[*(int *)(swift_getTupleTypeMetadata2() + 48)];
    uint64_t v26 = v39;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v39, v16, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v38, v26, v7);
    AnyHashable.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v26, v7);
    v42[5] = v25;
    char v43 = 1;
  }
  else
  {
    uint64_t v27 = v39;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v39, v16, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v38, v27, v7);
    AnyHashable.init<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v27, v7);
    char v43 = 0;
  }
  outlined init with take of AccessibilityRotorEntryElementSpecifier<AnyHashable>((uint64_t)v42, (uint64_t)v44);
LABEL_10:
  double v28 = *(void **)(v3 + 32);
  uint64_t v29 = *(void *)(v3 + 40);
  uint64_t v30 = (uint64_t *)(v3 + *(int *)(v4 + 44));
  uint64_t v32 = *v30;
  uint64_t v31 = v30[1];
  char v33 = *(unsigned char *)(v3 + 48);
  outlined init with take of AccessibilityRotorEntryElementSpecifier<AnyHashable>((uint64_t)v44, a3);
  *(void *)(a3 + 56) = v40;
  *(void *)(a3 + 64) = v28;
  *(void *)(a3 + 72) = v29;
  *(unsigned char *)(a3 + 80) = v33;
  *(void *)(a3 + 88) = v32;
  *(void *)(a3 + 96) = v31;
  *(void *)(a3 + 104) = 0;
  *(unsigned char *)(a3 + 112) = 1;
  outlined copy of AccessibilityRotorEntryRange?(v28, v29, v33);
  return swift_retain();
}

uint64_t AccessibilityRotorEntry.init(_:id:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v25 = a8;
  uint64_t v26 = a7;
  uint64_t v27 = a9;
  uint64_t v29 = a2;
  uint64_t v30 = a4;
  uint64_t v28 = a1;
  uint64_t v15 = type metadata accessor for AccessibilityRotorEntryElementSpecifier();
  v16.n128_f64[0] = MEMORY[0x1F4188790](v15);
  uint64_t v18 = &v24[-v17];
  uint64_t v19 = *(void *)(a12 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, __n128))(v19 + 16))(&v24[-v17], a5, a12, v16);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a5, a12);
  if (v25) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = a6;
  }
  if (v25) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v26;
  }
  if (v25) {
    char v22 = -1;
  }
  else {
    char v22 = 1;
  }
  return AccessibilityRotorEntry.init(_:elementSpecifier:textRange:prepare:)(v28, v29, a3 & 1, v30, (uint64_t)v18, v20, v21, v22, v27, a10, a11);
}

uint64_t type metadata accessor for AccessibilityRotorEntryElementSpecifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AccessibilityRotorEntry.init(_:elementSpecifier:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  uint64_t v15 = type metadata accessor for AccessibilityRotorEntry();
  uint64_t v16 = a9 + *(int *)(v15 + 40);
  uint64_t v17 = type metadata accessor for AccessibilityRotorEntryElementSpecifier();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v16, a5, v17);
  *(void *)(a9 + 32) = a6;
  *(void *)(a9 + 40) = a7;
  *(unsigned char *)(a9 + 48) = a8;
  uint64_t v19 = (void *)(a9 + *(int *)(v15 + 44));
  void *v19 = a10;
  v19[1] = a11;
  return result;
}

uint64_t AccessibilityRotorEntry.init(_:id:in:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v28 = a8;
  uint64_t v29 = a9;
  uint64_t v31 = a2;
  uint64_t v32 = a4;
  uint64_t v30 = a1;
  uint64_t v26 = a7;
  uint64_t v27 = a11;
  uint64_t v25 = a12;
  uint64_t v16 = type metadata accessor for AccessibilityRotorEntryElementSpecifier();
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v25 - v17;
  uint64_t v19 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v20 = *(void *)(a13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v18, a5, a13);
  *(void *)&v18[v19] = a6;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a5, a13);
  if (a10) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v26;
  }
  if (a10) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v28;
  }
  if (a10) {
    char v23 = -1;
  }
  else {
    char v23 = 1;
  }
  return AccessibilityRotorEntry.init(_:elementSpecifier:textRange:prepare:)(v30, v31, a3 & 1, v32, (uint64_t)v18, v21, v22, v23, v29, v27, v25);
}

uint64_t AccessibilityRotorEntry.init<>(_:textRange:prepare:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(void *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(unsigned char *)(a9 + 48) = 1;
  *(void *)(a9 + 56) = 0;
  *(unsigned char *)(a9 + 64) = 2;
  *(void *)(a9 + 72) = a7;
  *(void *)(a9 + 80) = a8;
  return result;
}

uint64_t AccessibilityRotorEntry.init(_:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  uint64_t v15 = type metadata accessor for AccessibilityRotorEntry();
  type metadata accessor for AccessibilityRotorEntryElementSpecifier();
  uint64_t result = swift_storeEnumTagMultiPayload();
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(unsigned char *)(a9 + 48) = a7;
  uint64_t v17 = (void *)(a9 + *(int *)(v15 + 44));
  *uint64_t v17 = a8;
  v17[1] = a10;
  return result;
}

uint64_t AccessibilityRotorEntry.init(_:id:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, char a5@<W7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v24 = a6;
  uint64_t v22 = a8;
  uint64_t v23 = a7;
  uint64_t v10 = *(void *)(a9 - 8);
  int v11 = a5 & 1;
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v15;
  char v18 = v17;
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, a9);
  AccessibilityRotorEntry.init(_:id:textRange:prepare:)(v14, v16, v18 & 1, v20, (uint64_t)v13, v25, v26, v11, v24, v23, v22, a9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a2, a9);
}

uint64_t AccessibilityRotorEntry.init<A>(_:id:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v33 = a7;
  uint64_t v34 = a6;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v32 = a9;
  uint64_t v29 = a1;
  uint64_t v30 = a11;
  uint64_t v13 = *(void *)(a8 - 8);
  int v31 = a5 & 1;
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a10 - 8);
  double v18 = MEMORY[0x1F4188790](v17);
  (*(void (**)(char *, double))(v16 + 16))((char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v22 = v21;
  char v24 = v23;
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a8);
  AccessibilityRotorEntry.init(_:id:textRange:prepare:)(v20, v22, v24 & 1, v26, (uint64_t)v15, v35, v36, v31, v32, v34, v33, a8);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v29, a10);
}

uint64_t AccessibilityRotorEntry.init(_:id:in:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a3;
  uint64_t v23 = a9;
  uint64_t v24 = a8;
  uint64_t v11 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v16 = v15;
  char v18 = v17;
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, a10);
  AccessibilityRotorEntry.init(_:id:in:textRange:prepare:)(v14, v16, v18 & 1, v20, (uint64_t)v13, v26, v27, v28, v25, a7 & 1, v24, v23, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a2, a10);
}

uint64_t AccessibilityRotorEntry.init<A>(_:_:in:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v32 = a8;
  uint64_t v33 = a7;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v34 = a3;
  uint64_t v28 = a1;
  uint64_t v31 = a9;
  uint64_t v30 = a12;
  uint64_t v13 = *(void *)(a10 - 8);
  int v29 = a6 & 1;
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a11 - 8);
  double v18 = MEMORY[0x1F4188790](v17);
  (*(void (**)(char *, double))(v16 + 16))((char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v22 = v21;
  char v24 = v23;
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a10);
  AccessibilityRotorEntry.init(_:id:in:textRange:prepare:)(v20, v22, v24 & 1, v26, (uint64_t)v15, v34, v35, v36, v31, v29, v33, v32, a10);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v28, a11);
}

uint64_t AccessibilityRotorEntry.init(_:textRange:prepare:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v10 = Text.init(_:tableName:bundle:comment:)();
  return AccessibilityRotorEntry.init(_:textRange:prepare:)(v10, v12, v11 & 1, v13, a1, a2, 1, a3, a5, a4);
}

uint64_t AccessibilityRotorEntry.init<A>(_:textRange:prepare:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v12 = *(void *)(a6 - 8);
  double v13 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15, v13);
  uint64_t v16 = Text.init<A>(_:)();
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21 & 1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a6);
  *(void *)a7 = v16;
  *(void *)(a7 + 8) = v18;
  *(void *)(a7 + 16) = v22;
  *(void *)(a7 + 24) = v20;
  *(void *)(a7 + 32) = a2;
  *(void *)(a7 + 40) = a3;
  *(unsigned char *)(a7 + 48) = 1;
  *(void *)(a7 + 56) = 0;
  *(unsigned char *)(a7 + 64) = 2;
  uint64_t v24 = v26;
  *(void *)(a7 + 72) = v25;
  *(void *)(a7 + 80) = v24;
  return result;
}

uint64_t static AccessibilityRotorEntryElementSpecifier.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v48 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  char v45 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v44 - v5;
  uint64_t v51 = v7;
  uint64_t v46 = v8;
  uint64_t v9 = type metadata accessor for AccessibilityRotorEntryElementSpecifier();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v44 - v14;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v17 = *(void *)(TupleTypeMetadata2 - 8);
  double v18 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v20 = (char *)&v44 - v19;
  uint64_t v22 = (char *)&v44 + *(int *)(v21 + 48) - v19;
  uint64_t v47 = v10;
  char v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v23((char *)&v44 - v19, v49, v9, v18);
  ((void (*)(char *, uint64_t, uint64_t))v23)(v22, v50, v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    ((void (*)(char *, char *, uint64_t))v23)(v15, v20, v9);
    if (swift_getEnumCaseMultiPayload())
    {
      uint64_t v12 = v15;
      uint64_t v37 = v48;
      uint64_t v25 = v51;
LABEL_11:
      (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v25);
      goto LABEL_12;
    }
    uint64_t v38 = v48;
    long long v39 = v6;
    uint64_t v40 = v6;
    uint64_t v41 = v51;
    (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v40, v22, v51);
    char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
    long long v42 = *(void (**)(char *, uint64_t))(v38 + 8);
    v42(v39, v41);
    v42(v15, v41);
LABEL_14:
    uint64_t v17 = v47;
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (swift_getEnumCaseMultiPayload() != 2)
    {
LABEL_12:
      char v36 = 0;
      uint64_t v9 = TupleTypeMetadata2;
      goto LABEL_17;
    }
    char v36 = 1;
    goto LABEL_14;
  }
  ((void (*)(char *, char *, uint64_t))v23)(v12, v20, v9);
  uint64_t v25 = v51;
  uint64_t v26 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v27 = *(void *)&v12[v26];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v37 = v48;
    goto LABEL_11;
  }
  uint64_t v28 = *(void *)&v22[v26];
  uint64_t v29 = v48;
  uint64_t v30 = v45;
  (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v45, v22, v25);
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = v51;
  char v33 = v31;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v29 + 8);
  v34(v12, v51);
  uint64_t v35 = v47;
  if (v33)
  {
    char v36 = v27 == v28;
    v34(v30, v32);
  }
  else
  {
    v34(v30, v32);
    char v36 = 0;
  }
  uint64_t v17 = v35;
LABEL_17:
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v9);
  return v36 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityRotorEntryElementSpecifier<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AccessibilityRotorEntryElementSpecifier.== infix(_:_:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t AccessibilityListRotorEntry.resolveForNavigationOrClosestEntry(for:on:prepare:)@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v44 = a4;
  uint64_t v51 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v51 - 8);
  double v10 = MEMORY[0x1F4188790](v51);
  uint64_t v50 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  uint64_t v59 = a1[1];
  uint64_t v60 = v12;
  uint64_t v13 = a1[2];
  uint64_t v57 = a1[3];
  uint64_t v58 = v13;
  uint64_t v56 = a1[4];
  int v55 = *((unsigned __int8 *)a1 + 40);
  uint64_t v54 = a1[6];
  int v53 = *((unsigned __int8 *)a1 + 56);
  if (a3)
  {
    (*(void (**)(double))(v5 + 88))(v10);
    if (MEMORY[0x18C119DF0](&a2[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]))
    {
      swift_getObjectType();
      *(void *)&v80[0] = 0;
      BYTE8(v80[0]) = 1;
      ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
      swift_unknownObjectRelease();
    }
  }
  int v52 = a3 ^ 1;
  char v45 = v62;
  id v49 = (id)*MEMORY[0x1E4F1C3A0];
  uint64_t v14 = (void *)*MEMORY[0x1E4F1C4B0];
  uint64_t v47 = (void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v48 = v14;
  uint64_t v15 = 4;
  long long v46 = xmmword_18834BB70;
  while (1)
  {
    BOOL v16 = v15 == 0;
    outlined init with copy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(v5, (uint64_t)v79);
    outlined init with copy of AccessibilityRotorEntryElementSpecifier<AnyHashable>((uint64_t)v79, (uint64_t)&v74);
    if (v78) {
      break;
    }
    long long v71 = v74;
    long long v72 = v75;
    uint64_t v73 = v76;
    uint64_t v63 = v60;
    uint64_t v64 = v59;
    uint64_t v65 = v58;
    uint64_t v66 = v57;
    uint64_t v67 = v56;
    char v68 = v55;
    uint64_t v69 = v54;
    char v70 = v53;
    AccessibilityRotorInfo.resolveImplicitElement(with:on:scrollIfNeeded:shouldLog:)((uint64_t)&v71, (uint64_t)a2, a3 & 1, a3 & v16);
LABEL_10:
    id v18 = (id)v17;
    outlined destroy of AnyHashable((uint64_t)&v71);
    uint64_t result = outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>((uint64_t)v79);
    if (v18) {
      goto LABEL_18;
    }
    if ((v15 == 0) | v52 & 1)
    {
      uint64_t v30 = (_OWORD *)v44;
      *(void *)(v44 + 128) = 0;
      v30[6] = 0u;
      v30[7] = 0u;
      v30[4] = 0u;
      v30[5] = 0u;
      v30[2] = 0u;
      v30[3] = 0u;
      _OWORD *v30 = 0u;
      v30[1] = 0u;
      return result;
    }
    uint64_t v20 = a2;
    uint64_t v21 = v5;
    uint64_t v22 = self;
    id v23 = objc_msgSend(v22, sel_currentRunLoop);
    long long v61 = v46;
    uint64_t v24 = v48;
    v62[0] = v49;
    v62[1] = v48;
    id v25 = v49;
    id v26 = v24;
    id v27 = objc_msgSend(v22, sel_currentRunLoop);
    uint64_t v28 = v50;
    Date.init(timeIntervalSinceNow:)();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*v47)(v28, v51);
    LOBYTE(v28) = objc_msgSend(v27, sel_runMode_beforeDate_, v25, isa);

    if ((v28 & 1) == 0) {
      objc_msgSend(self, sel_sleepForTimeInterval_, 0.001);
    }

    type metadata accessor for NSRunLoopMode(0);
    swift_arrayDestroy();
    uint64_t v5 = v21;
    a2 = v20;

    --v15;
  }
  if (v78 == 1)
  {
    long long v71 = v74;
    long long v72 = v75;
    uint64_t v73 = v76;
    uint64_t v63 = v60;
    uint64_t v64 = v59;
    uint64_t v65 = v58;
    uint64_t v66 = v57;
    uint64_t v67 = v56;
    char v68 = v55;
    uint64_t v69 = v54;
    char v70 = v53;
    uint64_t v17 = AccessibilityRotorInfo.resolveNamespacedElement(with:in:on:shouldLog:)((uint64_t)&v71, v77, (uint64_t)a2, a3 & v16);
    goto LABEL_10;
  }
  AccessibilityNode.platformElement.getter();
  if (!v31) {
    char v31 = a2;
  }
  uint64_t v32 = v31;
  id v18 = objc_msgSend(v31, sel_rotorOwnerElement, v44, v45);

  outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>((uint64_t)v79);
LABEL_18:
  int v33 = *(unsigned __int8 *)(v5 + 80);
  if (v33 == 255)
  {
    uint64_t v36 = v5;
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v34 = *(void **)(v5 + 64);
    uint64_t v35 = *(void *)(v5 + 72);
    outlined copy of AccessibilityRotorEntryRange(v34, v35, *(unsigned char *)(v5 + 80));
    AccessibilityRotorEntryRange.resolvePlatformRange(for:)(v18, v34, v35, v33);
    uint64_t v36 = v5;
    uint64_t v38 = v37;
    outlined consume of AccessibilityRotorEntryRange?(v34, v35, v33);
  }
  uint64_t result = outlined init with copy of AccessibilityListRotorEntry(v36, (uint64_t)v80);
  *((void *)&v81 + 1) = v18;
  long long v39 = (_OWORD *)v44;
  *(void *)(v44 + 128) = v38;
  long long v40 = v80[3];
  v39[2] = v80[2];
  _OWORD v39[3] = v40;
  long long v41 = v80[5];
  v39[4] = v80[4];
  v39[5] = v41;
  long long v42 = v80[1];
  *long long v39 = v80[0];
  v39[1] = v42;
  long long v43 = v81;
  v39[6] = v80[6];
  v39[7] = v43;
  return result;
}

id AccessibilityRotorInfo.resolveElement(with:on:scrollIfNeeded:shouldLog:)(uint64_t a1, void *a2, char a3, char a4)
{
  outlined init with copy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1, (uint64_t)&v15);
  if (!v19)
  {
    long long v12 = v15;
    long long v13 = v16;
    uint64_t v14 = v17;
    AccessibilityRotorInfo.resolveImplicitElement(with:on:scrollIfNeeded:shouldLog:)((uint64_t)&v12, (uint64_t)a2, a3 & 1, a4 & 1);
    goto LABEL_5;
  }
  if (v19 == 1)
  {
    long long v12 = v15;
    long long v13 = v16;
    uint64_t v14 = v17;
    uint64_t v6 = AccessibilityRotorInfo.resolveNamespacedElement(with:in:on:shouldLog:)((uint64_t)&v12, v18, (uint64_t)a2, a4 & 1);
LABEL_5:
    id v7 = (id)v6;
    outlined destroy of AnyHashable((uint64_t)&v12);
    return v7;
  }
  AccessibilityNode.platformElement.getter();
  if (!v8) {
    id v8 = a2;
  }
  uint64_t v9 = v8;
  id v7 = objc_msgSend(v8, sel_rotorOwnerElement);

  return v7;
}

uint64_t closure #1 in AccessibilityRotorInfo.readEntryList(_:)(uint64_t a1, void (*a2)(void *))
{
  outlined init with take of WeakAttribute<AccessibilityRotorEntryList>?(a1 + 32, (uint64_t)v10);
  outlined init with take of WeakAttribute<AccessibilityRotorEntryList>?((uint64_t)v10, (uint64_t)&v11);
  if ((v12 & 1) != 0 || (Weakuint64_t Value = AGGraphGetWeakValue()) == 0)
  {
    id v8 = &type metadata for EmptyGenerator;
    uint64_t v9 = &protocol witness table for EmptyGenerator;
  }
  else
  {
    outlined init with copy of DropInfo(WeakValue, (uint64_t)v7);
  }
  outlined init with copy of TableColumnList((uint64_t)v7, (uint64_t)v6);
  v5[3] = &unk_1ED4383B8;
  v5[4] = &protocol witness table for IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:);
  v5[0] = swift_allocObject();
  outlined init with copy of DropInfo((uint64_t)v6, v5[0] + 16);
  a2(v5);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v5);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v6);
  return outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v7);
}

uint64_t closure #1 in AccessibilityRotorInfo.resolveAllEntries()(void *a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  uint64_t v1 = a1[3];
  uint64_t v2 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v1);
  (*(void (**)(uint64_t *, uint64_t *, void *, _UNKNOWN **, uint64_t, uint64_t))(v2 + 8))(&v5, &v4, &unk_1ED438448, &protocol witness table for AccumulatingVisitor #1 in closure #1 in AccessibilityRotorInfo.resolveAllEntries(), v1, v2);
  return specialized Array.append<A>(contentsOf:)(v5);
}

uint64_t closure #1 in AccessibilityRotorInfo.entry(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v28 = 0;
  memset(v27, 0, sizeof(v27));
  outlined init with take of WeakAttribute<AccessibilityRotorEntryList>?(a1 + 32, (uint64_t)v29);
  outlined init with take of WeakAttribute<AccessibilityRotorEntryList>?((uint64_t)v29, (uint64_t)&v30);
  if ((v31 & 1) == 0)
  {
    Weakuint64_t Value = AGGraphGetWeakValue();
    if (WeakValue)
    {
      outlined init with copy of DropInfo(WeakValue, (uint64_t)&v20);
      *(void *)&long long v13 = a2;
      uint64_t v6 = *((void *)&v21 + 1);
      uint64_t v7 = v22;
      __swift_project_boxed_opaque_existential_1(&v20, *((uint64_t *)&v21 + 1));
      (*(void (**)(_OWORD *, long long *, void *, _UNKNOWN **, uint64_t, uint64_t))(v7 + 8))(v27, &v13, &unk_1ED438480, &protocol witness table for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:), v6, v7);
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)&v20);
    }
  }
  outlined init with take of AccessibilityNavigationRotorEntry?((uint64_t)v27, (uint64_t)&v20, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  if (!*((void *)&v25 + 1)) {
    return outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v20, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  }
  long long v17 = v24;
  long long v18 = v25;
  uint64_t v19 = v26;
  long long v13 = v20;
  long long v14 = v21;
  long long v15 = v22;
  long long v16 = v23;
  LOBYTE(v20) = 0;
  uint64_t result = outlined destroy of AccessibilityNavigationRotorEntry?(a3, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  long long v9 = v18;
  *(_OWORD *)(a3 + 64) = v17;
  *(_OWORD *)(a3 + 80) = v9;
  uint64_t v10 = v19;
  long long v11 = v14;
  *(_OWORD *)a3 = v13;
  *(_OWORD *)(a3 + 16) = v11;
  long long v12 = v16;
  *(_OWORD *)(a3 + 32) = v15;
  *(_OWORD *)(a3 + 48) = v12;
  *(void *)(a3 + 96) = v10;
  *(void *)(a3 + 104) = a2;
  *(unsigned char *)(a3 + 112) = v20;
  return result;
}

double AccessibilityRotorInfo.entry(for:going:from:range:)@<D0>(void *a1@<X0>, char a2@<W1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  long long v9 = v7[1];
  long long v34 = *v7;
  long long v35 = v9;
  v36[0] = v7[2];
  *(_OWORD *)((char *)v36 + 9) = *(long long *)((char *)v7 + 41);
  if (a3)
  {
    int v14 = a2 & 1;
    char v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    char v25 = 0;
    memset(v24, 0, sizeof(v24));
    id v15 = a3;
    AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(v15, a4, a5, a6, a1, (uint64_t)&v26, (uint64_t)v24, (uint64_t)v21);
    if (v23)
    {

      outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)v21, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
      if (v14)
      {
        outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v26, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
        long long v16 = v24;
      }
      else
      {
        outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)v24, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
        long long v16 = &v26;
      }
      outlined init with take of AccessibilityNavigationRotorEntry?((uint64_t)v16, a7, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
    }
    else
    {
      uint64_t v18 = outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)v21, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
      *(void *)&v21[0] = MEMORY[0x1E4FBC860];
      MEMORY[0x1F4188790](v18);
      MEMORY[0x1F4188790](v19);
      static Update.ensure<A>(_:)();
      uint64_t v20 = *(void *)&v21[0];
      if (*(void *)(*(void *)&v21[0] + 16))
      {
        v21[0] = v34;
        v21[1] = v35;
        v22[0] = v36[0];
        *(_OWORD *)((char *)v22 + 9) = *(_OWORD *)((char *)v36 + 9);
        AccessibilityRotorInfo.closestEntry(in:on:going:from:range:)(v20, a1, v14, v15, (char *)a4, a5, a6, a7);
        swift_bridgeObjectRelease();

        outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)v24, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
        outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v26, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
      }
      else
      {
        swift_bridgeObjectRelease();

        outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)v24, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
        outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v26, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
        double result = 0.0;
        *(_OWORD *)a7 = 0u;
        *(_OWORD *)(a7 + 16) = 0u;
        *(_OWORD *)(a7 + 32) = 0u;
        *(_OWORD *)(a7 + 48) = 0u;
        *(_OWORD *)(a7 + 64) = 0u;
        *(_OWORD *)(a7 + 80) = 0u;
        *(_OWORD *)(a7 + 96) = 0u;
        *(unsigned char *)(a7 + 112) = 0;
      }
    }
  }
  else
  {
    char v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    MEMORY[0x1F4188790](a1);
    outlined retain of AccessibilityRotorInfo((uint64_t *)&v34);
    static Update.ensure<A>(_:)();
    outlined init with take of AccessibilityNavigationRotorEntry?((uint64_t)&v26, a7, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
    outlined release of AccessibilityRotorInfo((uint64_t *)&v34);
  }
  return result;
}

uint64_t AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  outlined destroy of AccessibilityNavigationRotorEntry?(a7, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  outlined destroy of AccessibilityNavigationRotorEntry?(a6, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  long long v15 = v8[1];
  v43[0] = *v8;
  v43[1] = v15;
  long long v17 = *v8;
  long long v16 = v8[1];
  v44[0] = v8[2];
  *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v8 + 41);
  memset(v31, 0, 113);
  memset(v32, 0, sizeof(v32));
  memset(v34, 0, 113);
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v35 = 0u;
  char v33 = 0;
  char v42 = 0;
  v24[0] = v17;
  v24[1] = v16;
  v25[0] = v8[2];
  *(_OWORD *)((char *)v25 + 9) = *(_OWORD *)((char *)v8 + 41);
  long long v26 = a5;
  long long v27 = a1;
  long long v28 = a2;
  uint64_t v29 = a3;
  char v30 = a4;
  outlined retain of AccessibilityRotorInfo((uint64_t *)v43);
  id v18 = a5;
  id v19 = a1;
  outlined copy of AccessibilityRotorEntryRange?(a2, a3, a4);
  static Update.ensure<A>(_:)();
  outlined init with copy of AccessibilityListRotorEntry?((uint64_t)v32, a6, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  outlined init with copy of AccessibilityListRotorEntry?((uint64_t)v34, a7, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  outlined init with copy of AccessibilityListRotorEntry?((uint64_t)v31, a8, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  return outlined destroy of MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)((uint64_t)v24);
}

void AccessibilityRotorInfo.closestEntry(in:on:going:from:range:)(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, void *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  long long v9 = v8[1];
  long long v201 = *v8;
  long long v202 = v9;
  v203[0] = v8[2];
  *(_OWORD *)((char *)v203 + 9) = *(long long *)((char *)v8 + 41);
  if (!*(void *)(a1 + 16))
  {
LABEL_25:
    *(unsigned char *)(a8 + 112) = 0;
    *(_OWORD *)(a8 + 80) = 0u;
    *(_OWORD *)(a8 + 96) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)(a8 + 64) = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)a8 = 0u;
    return;
  }
  unint64_t v149 = *(void *)(a1 + 16);
  uint64_t v152 = a8;
  outlined retain of AccessibilityRotorInfo((uint64_t *)&v201);
  long long v15 = a2;
  long long v16 = specialized Sequence.compactMap<A>(_:)(a1, &v201, v15);

  outlined release of AccessibilityRotorInfo((uint64_t *)&v201);
  uint64_t v17 = *((void *)v16 + 2);
  if (!v17)
  {
    swift_bridgeObjectRelease();
    long long v184 = v201;
    long long v185 = v202;
    v186[0] = v203[0];
    *(_OWORD *)((char *)v186 + 9) = *(_OWORD *)((char *)v203 + 9);
    AccessibilityListRotorEntry.resolveForNavigationOrClosestEntry(for:on:prepare:)((uint64_t *)&v184, v15, 1, (uint64_t)&v192);
    outlined init with take of AccessibilityNavigationRotorEntry?((uint64_t)&v192, (uint64_t)&v184, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
    if (*((void *)&v188 + 1))
    {
      outlined init with copy of AccessibilityListRotorEntry((uint64_t)&v184, v152);
      outlined destroy of AccessibilityNavigationRotorEntry((uint64_t)&v184);
      return;
    }
    outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v184, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
    a8 = v152;
    goto LABEL_25;
  }
  uint64_t v147 = a1;
  uint64_t v151 = v15;
  swift_getObjectType();
  id v18 = &selRef_setObscuresBackgroundDuringPresentation_;
  objc_msgSend(a4, sel_accessibilityFrame);
  CGFloat x = v204.origin.x;
  CGFloat y = v204.origin.y;
  CGFloat width = v204.size.width;
  CGFloat height = v204.size.height;
  if (CGRectIsEmpty(v204))
  {
    uint64_t v23 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
    Class v24 = NSClassFromString(v23);

    if (!v24)
    {
      self;
      uint64_t v48 = swift_dynamicCastObjCClass();
      if (v48)
      {
        id v49 = (void *)v48;
        id v50 = a4;
        objc_msgSend(v49, sel_frame);
        CGFloat x = v51;
        CGFloat y = v52;
        CGFloat width = v53;
        CGFloat height = v54;
        id v55 = objc_msgSend(v49, sel_window);
        if (v55)
        {
          uint64_t v56 = v55;
          objc_msgSend(v49, sel_bounds);
          objc_msgSend(v56, sel_convertRect_fromCoordinateSpace_, v49);
          CGFloat x = v57;
          CGFloat y = v58;
          CGFloat width = v59;
          CGFloat height = v60;
        }
        else
        {
        }
      }
    }
  }
  uint64_t v200 = 0;
  long long v198 = 0u;
  long long v199 = 0u;
  long long v196 = 0u;
  long long v197 = 0u;
  long long v194 = 0u;
  long long v195 = 0u;
  long long v192 = 0u;
  long long v193 = 0u;
  long long v184 = *(_OWORD *)&v151[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  EnvironmentValues.layoutDirection.getter();
  char v25 = v176[0];
  uint64_t v156 = v16;
  uint64_t v157 = a4;
  uint64_t v155 = v17;
  char v167 = a3;
  if (!(_BYTE)a7)
  {
    int v26 = 0;
    goto LABEL_32;
  }
  if (a7 == 255)
  {
    a5 = 0;
    int v26 = 1;
    goto LABEL_32;
  }
  char v162 = v176[0];
  long long v27 = PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter();
  uint64_t v28 = *((void *)v27 + 2);
  if (!v28)
  {
    id v61 = a4;
    outlined copy of AccessibilityRotorEntryRange?(a5, a6, a7);
    goto LABEL_30;
  }
  id v169 = a4;
  outlined copy of AccessibilityRotorEntryRange?(a5, a6, a7);
  unint64_t v29 = 0;
  char v30 = (uint64_t *)(v27 + 40);
  uint64_t v165 = v27;
  while (1)
  {
    uint64_t v33 = *v30;
    if (a7 == 2)
    {
      outlined copy of AccessibilityRotorEntryRange?(a5, a6, 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)a5);
      char v32 = v31;
      outlined consume of AccessibilityRotorEntryRange?(a5, a6, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_14;
    }
    uint64_t v34 = a7;
    uint64_t v35 = *(v30 - 1);
    *(void *)&long long v184 = a5;
    *((void *)&v184 + 1) = a6;
    *(void *)&v176[0] = v35;
    *((void *)&v176[0] + 1) = v33;
    type metadata accessor for AccessibilityRotorEntryElementSpecifier<AnyHashable>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBB6A0]);
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v36 = _NSRange.init<A, B>(_:in:)();
    uint64_t v38 = v37;
    if (v36 != NSNotFound.getter()) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a7 = v34;
LABEL_14:
    ++v29;
    v30 += 2;
    if (v28 == v29) {
      goto LABEL_30;
    }
  }
  BOOL v39 = __OFADD__(v36, v38);
  uint64_t v40 = v36 + v38;
  if (v39)
  {
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
    goto LABEL_150;
  }
  long long v41 = (void *)MEMORY[0x18C115780](v35, v33);
  id v42 = objc_msgSend(v41, sel_length);
  long long v27 = v165;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  BOOL v43 = (uint64_t)v42 < v40;
  a7 = v34;
  if (v43) {
    goto LABEL_14;
  }
LABEL_20:
  if (v28 == v29)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange?(a5, a6, a7);
    a4 = v157;

    a5 = 0;
    int v26 = 1;
    uint64_t v17 = v155;
    long long v16 = v156;
    id v18 = &selRef_setObscuresBackgroundDuringPresentation_;
    goto LABEL_31;
  }
  if (v29 >= *((void *)v27 + 2)) {
    goto LABEL_151;
  }
  uint64_t v44 = *v30;
  a4 = v157;
  if (a7 == 2)
  {
    outlined copy of AccessibilityRotorEntryRange?(a5, a6, 2);
    swift_bridgeObjectRetain();
    uint64_t v45 = (uint64_t)PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)a5);
    char v47 = v46;
    outlined consume of AccessibilityRotorEntryRange?(a5, a6, 2);
  }
  else
  {
    uint64_t v141 = *(v30 - 1);
    swift_bridgeObjectRetain();
    uint64_t v45 = specialized String.resolveNSRange(_:in:)((uint64_t)a5, a6, v141, v44);
    char v47 = v142;
  }
  uint64_t v17 = v155;
  long long v16 = v156;
  id v18 = &selRef_setObscuresBackgroundDuringPresentation_;
  swift_bridgeObjectRelease();
  if (v47) {
    goto LABEL_159;
  }
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityRotorEntryRange?(a5, a6, a7);

  int v26 = 0;
  a5 = (char *)v45;
LABEL_31:
  char v25 = v162;
LABEL_32:
  uint64_t v62 = (uint64_t)(v16 + 32);
  unsigned __int8 v166 = v167 ^ v25;
  char v153 = v167 ^ v25 ^ 1;
  swift_bridgeObjectRetain();
  uint64_t v63 = 0;
  char v148 = 0;
  int v150 = 0;
  uint64_t v160 = v16 + 32;
  uint64_t v161 = 0;
  uint64_t v64 = 0;
  double v146 = 1.79769313e308;
  char v145 = 1;
  int v163 = 1;
  int v154 = v26;
LABEL_33:
  uint64_t v144 = v63 - (void)a5;
  BOOL v65 = __OFSUB__(v63, a5);
  BOOL v143 = v65;
  while (1)
  {
    uint64_t v66 = v62 + 136 * v64++;
    outlined init with copy of AccessibilityNavigationRotorEntry(v66, (uint64_t)&v184);
    if (v190) {
      goto LABEL_39;
    }
    uint64_t v67 = *((void *)&v189 + 1);
    if (v26) {
      goto LABEL_63;
    }
    int v68 = v188;
    if (v188 == 255) {
      goto LABEL_63;
    }
    uint64_t v69 = (char *)v187;
    if (!(_BYTE)v188)
    {
LABEL_62:
      if (a5 == v69) {
        goto LABEL_39;
      }
      goto LABEL_63;
    }
    uint64_t v158 = *((void *)&v189 + 1);
    uint64_t v159 = v64;
    uint64_t v70 = *((void *)&v187 + 1);
    long long v71 = (void *)*((void *)&v190 + 1);
    swift_getObjectType();
    long long v72 = PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter();
    uint64_t v73 = *((void *)v72 + 2);
    if (v73) {
      break;
    }
    outlined copy of AccessibilityRotorEntryRange?(v69, v70, v68);
    id v91 = v71;
LABEL_58:
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange?(v69, v70, v68);

    long long v16 = v156;
    a4 = v157;
    uint64_t v17 = v155;
    id v18 = &selRef_setObscuresBackgroundDuringPresentation_;
    int v26 = v154;
    uint64_t v64 = v159;
    uint64_t v62 = (uint64_t)v160;
    uint64_t v67 = v158;
LABEL_63:
    if (*((void **)&v190 + 1) == a4)
    {
      AccessibilityNavigationRotorEntry.nsRange.getter();
      if (v103) {
        goto LABEL_39;
      }
      if (!v26)
      {
        uint64_t v63 = v102;
        if (v145)
        {
          BOOL v104 = (uint64_t)a5 < v102;
          if ((v166 & 1) == 0) {
            BOOL v104 = v102 < (uint64_t)a5;
          }
          if (v104) {
            goto LABEL_106;
          }
        }
        else
        {
          uint64_t v129 = v102 - (void)a5;
          if (__OFSUB__(v102, a5)) {
            goto LABEL_152;
          }
          if (v129 < 0)
          {
            BOOL v39 = __OFSUB__(0, v129);
            uint64_t v129 = (uint64_t)&a5[-v102];
            if (v39) {
              goto LABEL_155;
            }
            if (v143) {
              goto LABEL_156;
            }
          }
          else if (v143)
          {
            goto LABEL_154;
          }
          uint64_t v130 = v144;
          if (v144 < 0)
          {
            uint64_t v130 = -v144;
            if (__OFSUB__(0, v144)) {
              goto LABEL_157;
            }
          }
          BOOL v131 = (uint64_t)a5 < v102;
          if ((v166 & 1) == 0) {
            BOOL v131 = v102 < (uint64_t)a5;
          }
          if (v131 && v129 < v130)
          {
LABEL_106:
            outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v192, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
            char v145 = 0;
            long long v198 = v189;
            long long v199 = v190;
            uint64_t v200 = v191;
            long long v194 = v186[0];
            long long v195 = v186[1];
            long long v196 = v187;
            long long v197 = v188;
            char v148 = 1;
            int v150 = 1;
            long long v192 = v184;
            long long v193 = v185;
            if (v64 == v17)
            {
              swift_bridgeObjectRelease();
              char v148 = 1;
              goto LABEL_130;
            }
            goto LABEL_33;
          }
        }
      }
      outlined destroy of AccessibilityNavigationRotorEntry((uint64_t)&v184);
      char v148 = 1;
      if (v64 == v17)
      {
LABEL_108:
        swift_bridgeObjectRelease();
        if ((v163 | v150)) {
          goto LABEL_130;
        }
        if (v166)
        {
          unint64_t v134 = v161 + 1;
          if (!__OFADD__(v161, 1))
          {
LABEL_114:
            if (v134 >= v149)
            {
              LOBYTE(v190) = 0;
              long long v188 = 0u;
              long long v189 = 0u;
              long long v187 = 0u;
              long long v185 = 0u;
              memset(v186, 0, sizeof(v186));
              long long v184 = 0u;
              char v138 = &lazy cache variable for type metadata for AccessibilityListRotorEntry?;
              long long v139 = &type metadata for AccessibilityListRotorEntry;
              uint64_t v140 = &v184;
            }
            else
            {
              outlined init with copy of AccessibilityListRotorEntry(v147 + 120 * v134 + 32, (uint64_t)&v184);
              v181[4] = v187;
              v181[5] = v188;
              long long v182 = v189;
              char v183 = v190;
              v181[0] = v184;
              v181[1] = v185;
              v181[2] = v186[0];
              v181[3] = v186[1];
              uint64_t v135 = *((void *)v16 + 2);
              if (v135)
              {
                long long v136 = v16 + 144;
                do
                {
                  if (*v136)
                  {
                    if (v183) {
                      goto LABEL_124;
                    }
                  }
                  else
                  {
                    if (*((void *)v136 - 1) == *((void *)&v182 + 1)) {
                      char v137 = v183;
                    }
                    else {
                      char v137 = 1;
                    }
                    if ((v137 & 1) == 0)
                    {
LABEL_124:
                      outlined destroy of AccessibilityListRotorEntry((uint64_t)v181);
                      goto LABEL_130;
                    }
                  }
                  v136 += 136;
                  --v135;
                }
                while (v135);
              }
              v174[0] = v201;
              v174[1] = v202;
              v175[0] = v203[0];
              *(_OWORD *)((char *)v175 + 9) = *(_OWORD *)((char *)v203 + 9);
              AccessibilityListRotorEntry.resolveForNavigationOrClosestEntry(for:on:prepare:)((uint64_t *)v174, v151, 1, (uint64_t)v176);
              outlined destroy of AccessibilityListRotorEntry((uint64_t)v181);
              if (*((void *)&v177 + 1))
              {
                swift_bridgeObjectRelease();
                long long v189 = v178;
                long long v190 = v179;
                uint64_t v191 = v180;
                v186[0] = v176[2];
                v186[1] = v176[3];
                long long v187 = v176[4];
                long long v188 = v177;
                long long v184 = v176[0];
                long long v185 = v176[1];
                outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v192, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
                long long v198 = v189;
                long long v199 = v190;
                uint64_t v200 = v191;
                long long v194 = v186[0];
                long long v195 = v186[1];
                long long v196 = v187;
                long long v197 = v188;
                long long v192 = v184;
                long long v193 = v185;
LABEL_138:
                if (*((void *)&v197 + 1))
                {
                  outlined init with copy of AccessibilityListRotorEntry((uint64_t)&v192, v152);
                }
                else
                {
                  *(unsigned char *)(v152 + 112) = 0;
                  *(_OWORD *)(v152 + 80) = 0u;
                  *(_OWORD *)(v152 + 96) = 0u;
                  *(_OWORD *)(v152 + 48) = 0u;
                  *(_OWORD *)(v152 + 64) = 0u;
                  *(_OWORD *)(v152 + 16) = 0u;
                  *(_OWORD *)(v152 + 32) = 0u;
                  *(_OWORD *)uint64_t v152 = 0u;
                }
                outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v192, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
                return;
              }
              char v138 = &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?;
              long long v139 = &type metadata for AccessibilityNavigationRotorEntry;
              uint64_t v140 = v176;
            }
            outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)v140, v138, (uint64_t)v139);
            goto LABEL_130;
          }
          __break(1u);
        }
        unint64_t v134 = v161 - 1;
        if (!__OFSUB__(v161, 1)) {
          goto LABEL_114;
        }
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
        goto LABEL_153;
      }
    }
    else
    {
      id v94 = *((id *)&v190 + 1);
      [v94 v18[367]];
      CGFloat v95 = v205.origin.x;
      CGFloat v96 = v205.origin.y;
      CGFloat v97 = v205.size.width;
      CGFloat v98 = v205.size.height;
      if (CGRectIsEmpty(v205))
      {
        uint64_t v99 = v64;
        double v100 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
        Class v101 = NSClassFromString(v100);

        if (!v101)
        {
          self;
          uint64_t v117 = swift_dynamicCastObjCClass();
          if (v117)
          {
            long long v118 = (void *)v117;
            id v94 = v94;
            objc_msgSend(v118, sel_frame);
            CGFloat v95 = v119;
            CGFloat v96 = v120;
            CGFloat v97 = v121;
            CGFloat v98 = v122;
            id v123 = objc_msgSend(v118, sel_window);
            if (v123)
            {
              uint64_t v124 = v123;
              objc_msgSend(v118, sel_bounds);
              objc_msgSend(v124, sel_convertRect_fromCoordinateSpace_, v118);
              CGFloat v95 = v125;
              CGFloat v96 = v126;
              CGFloat v97 = v127;
              CGFloat v98 = v128;

              goto LABEL_67;
            }
          }
        }

LABEL_67:
        uint64_t v62 = (uint64_t)v160;
        uint64_t v64 = v99;
        goto LABEL_76;
      }

LABEL_76:
      CGFloat recta = v98;
      v206.origin.CGFloat x = v95;
      v206.origin.CGFloat y = v96;
      v206.size.CGFloat width = v97;
      v206.size.CGFloat height = v98;
      CGFloat v105 = v97;
      CGFloat v106 = v96;
      CGFloat v107 = v95;
      double MinX = CGRectGetMinX(v206);
      v207.origin.CGFloat x = x;
      v207.origin.CGFloat y = y;
      v207.size.CGFloat width = width;
      v207.size.CGFloat height = height;
      double v109 = MinX - CGRectGetMinX(v207);
      v208.origin.CGFloat x = v107;
      v208.origin.CGFloat y = v106;
      v208.size.CGFloat width = v105;
      v208.size.CGFloat height = recta;
      double MinY = CGRectGetMinY(v208);
      v209.origin.CGFloat x = x;
      v209.origin.CGFloat y = y;
      v209.size.CGFloat width = width;
      v209.size.CGFloat height = height;
      double v111 = CGRectGetMinY(v209);
      if ((v109 <= 0.0) | v166 & 1) {
        int v112 = (v109 < 0.0) & v166;
      }
      else {
        int v112 = 1;
      }
      double v113 = fabs(v109);
      double v114 = vabdd_f64(MinY, v111);
      if (v112 && v114 < v113
        || ((double v115 = MinY - v111, !((v115 <= 0.0) | v166 & 1)) || !((v115 >= 0.0) | v153 & 1)) && v114 >= v113)
      {
        int v163 = 0;
        uint64_t v161 = v67;
LABEL_39:
        outlined destroy of AccessibilityNavigationRotorEntry((uint64_t)&v184);
        if (v64 == v17) {
          goto LABEL_108;
        }
        continue;
      }
      double v116 = v109 * v109 + v115 * v115;
      if (v116 < v146)
      {
        AccessibilityNavigationRotorEntry.nsRange.getter();
        uint64_t v63 = v132;
        char v145 = v133 & 1;
        outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v192, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
        long long v198 = v189;
        long long v199 = v190;
        uint64_t v200 = v191;
        long long v194 = v186[0];
        long long v195 = v186[1];
        long long v196 = v187;
        long long v197 = v188;
        int v150 = 1;
        double v146 = v116;
        long long v192 = v184;
        long long v193 = v185;
        if (v64 == v17)
        {
LABEL_146:
          swift_bridgeObjectRelease();
LABEL_130:
          outlined init with copy of AccessibilityListRotorEntry?((uint64_t)&v192, (uint64_t)&v184, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
          if (*((void *)&v188 + 1))
          {
            swift_bridgeObjectRelease();
            outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v184, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
            goto LABEL_138;
          }
          outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v184, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
          if ((v148 & 1) == 0 || (v26 & 1) == 0 || (v166 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            goto LABEL_138;
          }
          if (*((void *)v16 + 2))
          {
            outlined init with copy of AccessibilityNavigationRotorEntry(v62, (uint64_t)&v184);
            swift_bridgeObjectRelease();
            outlined assign with take of AccessibilityNavigationRotorEntry?((uint64_t)&v184, (uint64_t)&v192);
            goto LABEL_138;
          }
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
          goto LABEL_158;
        }
        goto LABEL_33;
      }
      outlined destroy of AccessibilityNavigationRotorEntry((uint64_t)&v184);
      int v150 = 1;
      if (v64 == v17) {
        goto LABEL_146;
      }
    }
  }
  outlined copy of AccessibilityRotorEntryRange?(v69, v70, v68);
  id v171 = v71;
  unint64_t v74 = 0;
  long long v75 = (uint64_t *)(v72 + 40);
  int v170 = v68;
  uint64_t v168 = v69;
  while (1)
  {
    uint64_t v78 = *v75;
    if (v68 == 2)
    {
      outlined copy of AccessibilityRotorEntryRange?(v69, v70, 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v69);
      char v77 = v76;
      outlined consume of AccessibilityRotorEntryRange?(v69, v70, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v77 & 1) == 0) {
        break;
      }
      goto LABEL_47;
    }
    uint64_t v79 = *(v75 - 1);
    *(void *)&v176[0] = v69;
    *((void *)&v176[0] + 1) = v70;
    uint64_t v80 = v70;
    *(void *)&v181[0] = v79;
    *((void *)&v181[0] + 1) = v78;
    type metadata accessor for AccessibilityRotorEntryElementSpecifier<AnyHashable>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBB6A0]);
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v81 = _NSRange.init<A, B>(_:in:)();
    uint64_t v83 = v82;
    if (v81 == NSNotFound.getter())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v68 = v170;
      uint64_t v70 = v80;
      uint64_t v69 = v168;
      goto LABEL_47;
    }
    BOOL v39 = __OFADD__(v81, v83);
    uint64_t v84 = v81 + v83;
    if (v39)
    {
      __break(1u);
      goto LABEL_148;
    }
    unint64_t v85 = (void *)MEMORY[0x18C115780](v79, v78);
    id v86 = objc_msgSend(v85, sel_length);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    BOOL v43 = (uint64_t)v86 < v84;
    int v68 = v170;
    uint64_t v70 = v80;
    uint64_t v69 = v168;
    if (!v43) {
      break;
    }
LABEL_47:
    ++v74;
    v75 += 2;
    if (v73 == v74) {
      goto LABEL_58;
    }
  }
  if (v73 == v74) {
    goto LABEL_58;
  }
  if (v74 >= *((void *)v72 + 2)) {
    goto LABEL_149;
  }
  uint64_t v87 = *v75;
  if (v68 == 2)
  {
    outlined copy of AccessibilityRotorEntryRange?(v69, v70, 2);
    swift_bridgeObjectRetain();
    uint64_t v88 = (uint64_t)PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v69);
    char v90 = v89;
    outlined consume of AccessibilityRotorEntryRange?(v69, v70, 2);
  }
  else
  {
    uint64_t v92 = *(v75 - 1);
    swift_bridgeObjectRetain();
    uint64_t v88 = specialized String.resolveNSRange(_:in:)((uint64_t)v69, v70, v92, v87);
    char v90 = v93;
  }
  int v26 = v154;
  swift_bridgeObjectRelease();
  if ((v90 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange?(v69, v70, v170);

    uint64_t v69 = (char *)v88;
    long long v16 = v156;
    a4 = v157;
    uint64_t v17 = v155;
    id v18 = &selRef_setObscuresBackgroundDuringPresentation_;
    uint64_t v64 = v159;
    uint64_t v62 = (uint64_t)v160;
    uint64_t v67 = v158;
    goto LABEL_62;
  }
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
}

uint64_t AccessibilityRotorInfo.resolveNamespacedElement(with:in:on:shouldLog:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(void *)(a3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope))
  {
    swift_retain();
    unint64_t v7 = specialized AccessibilityRelationshipScope.nodes<A>(for:with:in:)(4u, a1, a2);
    swift_release();
  }
  else
  {
    unint64_t v7 = MEMORY[0x1E4FBC860];
  }
  if (!(v7 >> 62))
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_6;
    }
LABEL_19:
    swift_bridgeObjectRelease_n();
    if (a4)
    {
      _StringGuts.grow(_:)(319);
      v18._object = (void *)0x800000018833ABF0;
      v18._countAndFlagsBits = 0xD000000000000059;
      String.append(_:)(v18);
      v19._countAndFlagsBits = AnyHashable.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 0xD0000000000000E4;
      v20._object = (void *)0x800000018833AC50;
      String.append(_:)(v20);
      MEMORY[0x18C112B90](0, 0xE000000000000000);
      swift_bridgeObjectRelease();
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_19;
  }
LABEL_6:
  if ((v7 & 0xC000000000000001) != 0)
  {
    id v10 = (id)MEMORY[0x18C117680](0, v7);
    goto LABEL_9;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v10 = *(id *)(v7 + 32);
LABEL_9:
    long long v11 = v10;
    swift_bridgeObjectRelease();
    AccessibilityNode.platformElement.getter();
    if (!v12) {
      id v12 = v11;
    }
    id v13 = v12;
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v14 >= 2 && (a4 & 1) != 0)
    {
      _StringGuts.grow(_:)(230);
      v15._countAndFlagsBits = 0xD000000000000066;
      v15._object = (void *)0x800000018833AB00;
      String.append(_:)(v15);
      v16._countAndFlagsBits = AnyHashable.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 0xD00000000000007ELL;
      v17._object = (void *)0x800000018833AB70;
      String.append(_:)(v17);
      MEMORY[0x18C112B90](0, 0xE000000000000000);
      swift_bridgeObjectRelease();
    }

    return (uint64_t)v13;
  }
  __break(1u);
  return result;
}

void AccessibilityRotorInfo.resolveImplicitElement(with:on:scrollIfNeeded:shouldLog:)(uint64_t a1, uint64_t a2, char a3, char a4)
{
  void (*v25)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v26)(void, uint64_t);
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;
  char *v32;
  id v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  unint64_t v63;
  void *v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  int v69;
  __int16 v70;
  char v71;
  _OWORD v72[2];
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  int v77;
  unsigned __int16 v78;
  unsigned __int8 v79;
  long long v80;
  uint64_t v81;
  long long v82;
  long long v83;
  uint64_t v84;
  uint64_t v85[6];

  double v59 = v4[1];
  double v60 = *v4;
  double v57 = v4[3];
  double v58 = v4[2];
  uint64_t v56 = v4[4];
  id v55 = *((unsigned char *)v4 + 40);
  double v54 = v4[6];
  double v53 = *((unsigned char *)v4 + 56);
  MEMORY[0x18C113CA0]();
  AccessibilityNode.attachment.getter(v85);

  uint64_t v8 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v8, (uint64_t)&v73);
  swift_bridgeObjectRelease_n();
  if (*((void *)&v74 + 1))
  {
    outlined init with take of OptionalBinaryInteger(&v73, (uint64_t)&v65);
    long long v9 = specialized AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:)(a1, &v65, a2, a3 & 1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
    if (v9) {
      goto LABEL_67;
    }
  }
  else
  {
    outlined destroy of ScrollableCollection?((uint64_t)&v73);
  }
  double v51 = a1;
  id v50 = a2;
  id v10 = (uint64_t *)(a2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
  swift_beginAccess();
  uint64_t v11 = *v10;
  id v61 = a3;
  if ((unint64_t)*v10 >> 62)
  {
LABEL_61:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    if (!v12)
    {
LABEL_29:
      uint64_t v84 = 0;
      uint64_t v82 = 0u;
      uint64_t v83 = 0u;
      unint64_t v29 = v51;
      char v30 = v61;
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v12) {
      goto LABEL_29;
    }
  }
  unint64_t v13 = 0;
  uint64_t v63 = v11 & 0xC000000000000001;
  uint64_t v14 = MEMORY[0x1E4FBC840] + 8;
  Swift::String v15 = (unint64_t *)&lazy cache variable for type metadata for Any?;
  double v52 = v11;
  while (1)
  {
    if (v63)
    {
      swift_bridgeObjectRetain();
      id v16 = (id)MEMORY[0x18C117680](v13, v11);
    }
    else
    {
      Swift::String v17 = *(void **)(v11 + 8 * v13 + 32);
      swift_bridgeObjectRetain();
      id v16 = v17;
    }
    uint64_t v64 = v16;
    AccessibilityNode.attachment.getter((uint64_t *)&v65);
    uint64_t v18 = v65;

    if (*(void *)(v18 + 16)
      && (unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
          (v20 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v18 + 56) + 40 * v19, (uint64_t)&v65);
      uint64_t v22 = *((void *)&v66 + 1);
      uint64_t v21 = v67;
      __swift_project_boxed_opaque_existential_1(&v65, *((uint64_t *)&v66 + 1));
      uint64_t v23 = v15;
      uint64_t v24 = v14;
      char v25 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v21 + 8);
      swift_bridgeObjectRetain();
      v25(v72, v22, v21);
      uint64_t v11 = v52;
      uint64_t v14 = v24;
      Swift::String v15 = v23;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v65);
    }
    else
    {
      memset(v72, 0, sizeof(v72));
      swift_bridgeObjectRetain();
    }
    int v26 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    _sypSgMaTm_6(0, v15, v14, MEMORY[0x1E4FBB718]);
    _sypSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, v26);
    if (swift_dynamicCast())
    {
      outlined init with take of AccessibilityNavigationRotorEntry?((uint64_t)&v65, (uint64_t)&v73, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    }
    else
    {
      uint64_t v67 = 0u;
      int v68 = 0u;
      BOOL v65 = 0u;
      uint64_t v66 = 0u;
      uint64_t v70 = 0;
      uint64_t v69 = 0;
      long long v71 = -2;
      uint64_t v73 = 0u;
      unint64_t v74 = 0u;
      long long v75 = 0u;
      char v76 = 0u;
      uint64_t v78 = 0;
      char v77 = 0;
      uint64_t v79 = -1;
      outlined destroy of AccessibilityScrollableContext??((uint64_t)&v65);
    }
    swift_bridgeObjectRelease_n();
    if (v79 == 255)
    {
      outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v73, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    }
    else
    {
      if ((((unint64_t)((v78 | (v79 << 16)) & 0xFFFFFF) << 32) & 0xFF000000000000) == 0x2000000000000)
      {
        swift_release();
        outlined init with take of OptionalBinaryInteger(&v73, (uint64_t)&v80);
        outlined init with take of OptionalBinaryInteger(&v80, (uint64_t)&v73);
        goto LABEL_24;
      }
      outlined destroy of AccessibilityScrollableContext((uint64_t)&v73);
    }
    uint64_t v73 = 0u;
    unint64_t v74 = 0u;
    *(void *)&long long v75 = 0;
LABEL_24:
    swift_bridgeObjectRelease();

    long long v27 = *((void *)&v74 + 1);
    outlined destroy of ScrollableCollection?((uint64_t)&v73);
    if (v27) {
      break;
    }
    uint64_t v28 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_61;
    }
    ++v13;
    if (v28 == v12) {
      goto LABEL_29;
    }
  }
  if (v12 == v13) {
    goto LABEL_29;
  }
  if (v63)
  {
    uint64_t v45 = (id)MEMORY[0x18C117680](v13, v11);
    goto LABEL_58;
  }
  if ((v13 & 0x8000000000000000) != 0) {
    goto LABEL_69;
  }
  if (v13 >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_70:
    __break(1u);
  }
  else
  {
    uint64_t v45 = *(id *)(v11 + 8 * v13 + 32);
LABEL_58:
    char v46 = v45;
    unint64_t v29 = v51;
    *(void *)&uint64_t v73 = v45;
    closure #1 in AccessibilityRotorInfo.resolveImplicitElement(with:on:scrollIfNeeded:shouldLog:)((uint64_t)&v65);

    outlined init with copy of ScrollableCollection?((uint64_t)&v65, (uint64_t)&v80);
    char v30 = v61;
    if (v81)
    {
      outlined init with take of OptionalBinaryInteger(&v80, (uint64_t)&v73);
      outlined destroy of ScrollableCollection?((uint64_t)&v65);
      outlined init with take of OptionalBinaryInteger(&v73, (uint64_t)&v82);
LABEL_30:
      swift_bridgeObjectRelease();
      if (*((void *)&v83 + 1))
      {
        outlined init with take of OptionalBinaryInteger(&v82, (uint64_t)v85);
        char v31 = (void *)v50;
        char v32 = specialized AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:)(v29, v85, v50, v30 & 1);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v85);
        if (v32) {
          goto LABEL_67;
        }
      }
      else
      {
        outlined destroy of ScrollableCollection?((uint64_t)&v82);
        char v31 = (void *)v50;
      }
      AccessibilityNode.platformElement.getter();
      if (!v33) {
        uint64_t v33 = v31;
      }
      uint64_t v34 = v33;
      type metadata accessor for HostingScrollView();
      uint64_t v35 = swift_dynamicCastClass();

      if (!v35) {
        goto LABEL_65;
      }
      AccessibilityNode.rotorChildNodes.getter();
      uint64_t v37 = v36;
      if (!(v36 >> 62))
      {
        uint64_t v38 = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v38) {
          goto LABEL_39;
        }
LABEL_64:
        swift_bridgeObjectRelease();
LABEL_65:
        if ((a4 & 1) == 0) {
          goto LABEL_67;
        }
        goto LABEL_66;
      }
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
      if (!v38) {
        goto LABEL_64;
      }
LABEL_39:
      if (v38 >= 1)
      {
        BOOL v39 = 0;
        uint64_t v40 = 0;
        while (1)
        {
          if ((v37 & 0xC000000000000001) != 0) {
            id v42 = (id)MEMORY[0x18C117680](v40, v37);
          }
          else {
            id v42 = *(id *)(v37 + 8 * v40 + 32);
          }
          long long v41 = v42;
          type metadata accessor for AccessibilityLazyLayoutNode();
          BOOL v43 = swift_dynamicCastClass();
          if (v43)
          {
            *(void *)&uint64_t v73 = v60;
            *((void *)&v73 + 1) = v59;
            *(void *)&unint64_t v74 = v58;
            *((void *)&v74 + 1) = v57;
            *(void *)&long long v75 = v56;
            BYTE8(v75) = v55;
            *(void *)&char v76 = v54;
            BYTE8(v76) = v53;
            uint64_t v44 = AccessibilityRotorInfo.resolveImplicitElement(with:on:scrollIfNeeded:shouldLog:)(v29, v43, v61 & 1, a4 & 1);

            if (!v44) {
              goto LABEL_43;
            }
            long long v41 = v39;
            BOOL v39 = (void *)v44;
          }

LABEL_43:
          if (v38 == ++v40)
          {
            swift_bridgeObjectRelease();
            if (v39 || (a4 & 1) == 0)
            {
LABEL_67:
              static Update.end()();
              return;
            }
LABEL_66:
            *(void *)&uint64_t v73 = 0;
            *((void *)&v73 + 1) = 0xE000000000000000;
            _StringGuts.grow(_:)(253);
            v47._object = (void *)0x800000018833AD40;
            v47._countAndFlagsBits = 0xD00000000000004ELL;
            String.append(_:)(v47);
            v48._countAndFlagsBits = AnyHashable.description.getter();
            String.append(_:)(v48);
            swift_bridgeObjectRelease();
            v49._countAndFlagsBits = 0xD0000000000000ADLL;
            v49._object = (void *)0x800000018833AD90;
            String.append(_:)(v49);
            MEMORY[0x18C112B90](v73, *((void *)&v73 + 1));
            swift_bridgeObjectRelease();
            goto LABEL_67;
          }
        }
      }
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
  }
  __break(1u);
}

uint64_t *closure #2 in AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:)(uint64_t *result, unsigned char *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = result[1];
  if (v4)
  {
    uint64_t v8 = *result;
    swift_retain();
    AnyHashable2.anyHashable.getter();
    char v9 = MEMORY[0x18C1174E0](v12, a3);
    swift_release();
    uint64_t result = (uint64_t *)outlined destroy of AnyHashable((uint64_t)v12);
    if (v9)
    {
      uint64_t v10 = *a4;
      uint64_t v11 = a4[1];
      *a4 = v8;
      a4[1] = v4;
      swift_retain();
      uint64_t result = (uint64_t *)outlined consume of Text.LineStyle?(v10, v11);
      *a2 = 1;
    }
  }
  return result;
}

double closure #1 in AccessibilityRotorInfo.resolveImplicitElement(with:on:scrollIfNeeded:shouldLog:)@<D0>(uint64_t a1@<X8>)
{
  AccessibilityNode.attachment.getter(v4);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v5);
  swift_bridgeObjectRelease_n();
  if (v7 == 255)
  {
    outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  }
  else
  {
    if ((((unint64_t)((v6 | (v7 << 16)) & 0xFFFFFF) << 32) & 0xFF000000000000) == 0x2000000000000)
    {
      swift_release();
      outlined init with take of OptionalBinaryInteger(v5, a1);
      return result;
    }
    outlined destroy of AccessibilityScrollableContext((uint64_t)v5);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t View.accessibilityRotorEntry<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.accessibilityRelationship<A>(_:id:in:)(4, a1, a2, a3, a4, a5);
}

uint64_t type metadata completion function for AccessibilityRotorEntry()
{
  uint64_t result = type metadata accessor for AccessibilityRotorEntryElementSpecifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_OWORD *initializeBufferWithCopyOfBuffer for AccessibilityRotorEntry(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7 & 0xF8 | 7;
  uint64_t v9 = ~v8;
  unint64_t v10 = *(void *)(v5 + 64);
  unint64_t v11 = v10 + 7;
  if (((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v10) {
    unint64_t v12 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v12 = ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if ((v7 & 0x1000F8) != 0
    || ((v12 + (((v7 & 0xF8) + 56) & ~v8) + 8) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (_OWORD *)(v14 + ((v8 + 16) & v9));
  }
  else
  {
    unint64_t v15 = *(void *)(a2 + 24);
    uint64_t v38 = *(void *)(a3 + 16);
    if (v15 < 0xFFFFFFFF)
    {
      long long v19 = *(_OWORD *)(a2 + 16);
      *a1 = *(_OWORD *)a2;
      a1[1] = v19;
    }
    else
    {
      uint64_t v16 = *(void *)a2;
      uint64_t v17 = *(void *)(a2 + 8);
      char v18 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v17, v18);
      *(void *)uint64_t v4 = v16;
      *((void *)v4 + 1) = v17;
      *((unsigned char *)v4 + 16) = v18;
      *((void *)v4 + 3) = v15;
      swift_bridgeObjectRetain();
    }
    unint64_t v20 = ((unint64_t)v4 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v22 = *(unsigned __int8 *)(v21 + 16);
    if (v22 > 2)
    {
      long long v25 = *(_OWORD *)v21;
      *(unsigned char *)(v20 + 16) = *(unsigned char *)(v21 + 16);
      *(_OWORD *)unint64_t v20 = v25;
    }
    else
    {
      uint64_t v23 = *(void *)v21;
      uint64_t v24 = *(void *)(v21 + 8);
      outlined copy of AccessibilityRotorEntryRange(*(id *)v21, v24, *(unsigned char *)(v21 + 16));
      *(void *)unint64_t v20 = v23;
      *(void *)(v20 + 8) = v24;
      *(unsigned char *)(v20 + 16) = v22;
    }
    uint64_t v26 = ((unint64_t)v4 + 63) & v9;
    uint64_t v27 = (a2 + 63) & v9;
    unsigned int v28 = *(unsigned __int8 *)(v27 + v12);
    unsigned int v29 = v28 - 2;
    if (v28 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v30 = v12;
      }
      else {
        uint64_t v30 = 4;
      }
      switch(v30)
      {
        case 1:
          int v31 = *(unsigned __int8 *)v27;
          goto LABEL_25;
        case 2:
          int v31 = *(unsigned __int16 *)v27;
          goto LABEL_25;
        case 3:
          int v31 = *(unsigned __int16 *)v27 | (*(unsigned __int8 *)(v27 + 2) << 16);
          goto LABEL_25;
        case 4:
          int v31 = *(_DWORD *)v27;
LABEL_25:
          int v32 = (v31 | (v29 << (8 * v12))) + 2;
          unsigned int v28 = v31 + 2;
          if (v12 < 4) {
            unsigned int v28 = v32;
          }
          break;
        default:
          break;
      }
    }
    unint64_t v33 = v12 + 1;
    if (v28 == 1)
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16))(((unint64_t)v4 + 63) & v9, v27, v38);
      *(void *)((v11 + v26) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v11 + v27) & 0xFFFFFFFFFFFFFFF8);
      *(unsigned char *)(v26 + v12) = 1;
    }
    else if (v28)
    {
      memcpy((void *)(((unint64_t)v4 + 63) & v9), (const void *)v27, v12 + 1);
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16))(((unint64_t)v4 + 63) & v9, v27, v38);
      *(unsigned char *)(v26 + v12) = 0;
    }
    uint64_t v34 = (void *)(((v27 | 7) + v33) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v35 = v34[1];
    uint64_t v36 = (void *)(((v26 | 7) + v33) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v36 = *v34;
    v36[1] = v35;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AccessibilityRotorEntry(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  unint64_t v4 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v5 = *(unsigned __int8 *)(v4 + 16);
  if (v5 <= 2) {
    outlined consume of AccessibilityRotorEntryRange(*(id *)v4, *(void *)(v4 + 8), v5);
  }
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v8 = (unsigned __int8 *)((v4 + v7 + 17) & ~v7);
  unint64_t v9 = *(void *)(v6 + 64);
  if (((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v9) {
    unint64_t v10 = *(void *)(v6 + 64);
  }
  else {
    unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v11 = v8[v10];
  unsigned int v12 = v11 - 2;
  if (v11 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *v8;
        goto LABEL_17;
      case 2:
        int v14 = *(unsigned __int16 *)v8;
        goto LABEL_17;
      case 3:
        int v14 = *(unsigned __int16 *)v8 | (v8[2] << 16);
        goto LABEL_17;
      case 4:
        int v14 = *(_DWORD *)v8;
LABEL_17:
        int v15 = (v14 | (v12 << (8 * v10))) + 2;
        unsigned int v11 = v14 + 2;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 <= 1) {
    (*(void (**)(unsigned __int8 *))(v6 + 8))(v8);
  }

  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityRotorEntry(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[3];
  if (v6 < 0xFFFFFFFF)
  {
    long long v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    outlined copy of Text.Storage(*a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  unint64_t v11 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v13 = *(unsigned __int8 *)(v12 + 16);
  if (v13 > 2)
  {
    long long v16 = *(_OWORD *)v12;
    *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
    *(_OWORD *)unint64_t v11 = v16;
  }
  else
  {
    uint64_t v14 = *(void *)v12;
    uint64_t v15 = *(void *)(v12 + 8);
    outlined copy of AccessibilityRotorEntryRange(*(id *)v12, v15, *(unsigned char *)(v12 + 16));
    *(void *)unint64_t v11 = v14;
    *(void *)(v11 + 8) = v15;
    *(unsigned char *)(v11 + 16) = v13;
  }
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v18 = *(_DWORD *)(v17 + 80) & 0xF8 | 7;
  uint64_t v19 = (v11 + v18 + 17) & ~v18;
  uint64_t v20 = (v12 + v18 + 17) & ~v18;
  unint64_t v21 = *(void *)(v17 + 64);
  unint64_t v22 = v21 + 7;
  if (((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v21) {
    unint64_t v23 = *(void *)(v17 + 64);
  }
  else {
    unint64_t v23 = ((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v24 = *(unsigned __int8 *)(v20 + v23);
  unsigned int v25 = v24 - 2;
  if (v24 >= 2)
  {
    if (v23 <= 3) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = 4;
    }
    switch(v26)
    {
      case 1:
        int v27 = *(unsigned __int8 *)v20;
        goto LABEL_19;
      case 2:
        int v27 = *(unsigned __int16 *)v20;
        goto LABEL_19;
      case 3:
        int v27 = *(unsigned __int16 *)v20 | (*(unsigned __int8 *)(v20 + 2) << 16);
        goto LABEL_19;
      case 4:
        int v27 = *(_DWORD *)v20;
LABEL_19:
        int v28 = (v27 | (v25 << (8 * v23))) + 2;
        unsigned int v24 = v27 + 2;
        if (v23 < 4) {
          unsigned int v24 = v28;
        }
        break;
      default:
        break;
    }
  }
  if (v24 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v19, v20);
    *(void *)((v22 + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8);
    *(unsigned char *)(v19 + v23) = 1;
  }
  else if (v24)
  {
    memcpy((void *)v19, (const void *)v20, v23 + 1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v17 + 16))(v19, v20);
    *(unsigned char *)(v19 + v23) = 0;
  }
  unsigned int v29 = (uint64_t *)(((v20 | 7) + v23 + 1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  int v32 = (void *)(((v19 | 7) + v23 + 1) & 0xFFFFFFFFFFFFFFF8);
  void *v32 = v31;
  v32[1] = v30;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityRotorEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = *(void *)(a2 + 8);
      char v15 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v14, v15);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v14;
      *(unsigned char *)(a1 + 16) = v15;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 >= 0xFFFFFFFF)
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = *(void *)(a2 + 8);
      char v9 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v8, v9);
      uint64_t v10 = *(void *)a1;
      uint64_t v11 = *(void *)(a1 + 8);
      char v12 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v7;
      *(void *)(a1 + 8) = v8;
      *(unsigned char *)(a1 + 16) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
LABEL_8:
  unint64_t v17 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v19 = *(unsigned __int8 *)(v17 + 16);
  unsigned int v20 = *(unsigned __int8 *)(v18 + 16);
  if (v19 > 2)
  {
    if (v20 <= 2)
    {
      id v26 = *(id *)v18;
      uint64_t v27 = *(void *)(v18 + 8);
      outlined copy of AccessibilityRotorEntryRange(*(id *)v18, v27, *(unsigned char *)(v18 + 16));
      *(void *)unint64_t v17 = v26;
      *(void *)(v17 + 8) = v27;
      *(unsigned char *)(v17 + 16) = v20;
      goto LABEL_15;
    }
  }
  else
  {
    if (v20 <= 2)
    {
      id v21 = *(id *)v18;
      uint64_t v22 = *(void *)(v18 + 8);
      outlined copy of AccessibilityRotorEntryRange(*(id *)v18, v22, *(unsigned char *)(v18 + 16));
      id v23 = *(id *)v17;
      uint64_t v24 = *(void *)(v17 + 8);
      *(void *)unint64_t v17 = v21;
      *(void *)(v17 + 8) = v22;
      char v25 = *(unsigned char *)(v17 + 16);
      *(unsigned char *)(v17 + 16) = v20;
      outlined consume of AccessibilityRotorEntryRange(v23, v24, v25);
      goto LABEL_15;
    }
    outlined consume of AccessibilityRotorEntryRange(*(id *)v17, *(void *)(v17 + 8), v19);
  }
  long long v28 = *(_OWORD *)v18;
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  *(_OWORD *)unint64_t v17 = v28;
LABEL_15:
  uint64_t v29 = *(void *)(a3 + 16);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(_DWORD *)(v30 + 80) & 0xF8 | 7;
  uint64_t v32 = (v17 + v31 + 17) & ~v31;
  uint64_t v33 = (v18 + v31 + 17) & ~v31;
  unint64_t v34 = *(void *)(v30 + 64);
  if (((v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v34) {
    unint64_t v35 = *(void *)(v30 + 64);
  }
  else {
    unint64_t v35 = ((v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v32 != v33)
  {
    unsigned int v36 = *(unsigned __int8 *)(v32 + v35);
    unsigned int v37 = v36 - 2;
    if (v36 >= 2)
    {
      if (v35 <= 3) {
        uint64_t v38 = v35;
      }
      else {
        uint64_t v38 = 4;
      }
      switch(v38)
      {
        case 1:
          int v39 = *(unsigned __int8 *)v32;
          goto LABEL_28;
        case 2:
          int v39 = *(unsigned __int16 *)v32;
          goto LABEL_28;
        case 3:
          int v39 = *(unsigned __int16 *)v32 | (*(unsigned __int8 *)(v32 + 2) << 16);
          goto LABEL_28;
        case 4:
          int v39 = *(_DWORD *)v32;
LABEL_28:
          int v40 = (v39 | (v37 << (8 * v35))) + 2;
          unsigned int v36 = v39 + 2;
          if (v35 < 4) {
            unsigned int v36 = v40;
          }
          break;
        default:
          break;
      }
    }
    if (v36 <= 1) {
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v29);
    }
    unsigned int v41 = *(unsigned __int8 *)(v33 + v35);
    unsigned int v42 = v41 - 2;
    if (v41 >= 2)
    {
      if (v35 <= 3) {
        uint64_t v43 = v35;
      }
      else {
        uint64_t v43 = 4;
      }
      switch(v43)
      {
        case 1:
          int v44 = *(unsigned __int8 *)v33;
          goto LABEL_41;
        case 2:
          int v44 = *(unsigned __int16 *)v33;
          goto LABEL_41;
        case 3:
          int v44 = *(unsigned __int16 *)v33 | (*(unsigned __int8 *)(v33 + 2) << 16);
          goto LABEL_41;
        case 4:
          int v44 = *(_DWORD *)v33;
LABEL_41:
          int v45 = (v44 | (v42 << (8 * v35))) + 2;
          unsigned int v41 = v44 + 2;
          if (v35 < 4) {
            unsigned int v41 = v45;
          }
          break;
        default:
          break;
      }
    }
    if (v41 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v32, v33, v29);
      *(void *)(((v32 | 7) + v34) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v33 | 7) + v34) & 0xFFFFFFFFFFFFFFF8);
      *(unsigned char *)(v32 + v35) = 1;
    }
    else if (v41)
    {
      memcpy((void *)v32, (const void *)v33, v35 + 1);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v32, v33, v29);
      *(unsigned char *)(v32 + v35) = 0;
    }
  }
  char v46 = (void *)(((v32 | 7) + v35 + 1) & 0xFFFFFFFFFFFFFFF8);
  char v47 = (void *)(((v33 | 7) + v35 + 1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v48 = v47[1];
  *char v46 = *v47;
  v46[1] = v48;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for AccessibilityRotorEntry(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  unint64_t v5 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  long long v7 = *(_OWORD *)v6;
  *(unsigned char *)(v5 + 16) = *(unsigned char *)(v6 + 16);
  *(_OWORD *)unint64_t v5 = v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v10 = (v5 + v9 + 17) & ~v9;
  uint64_t v11 = (v6 + v9 + 17) & ~v9;
  unint64_t v12 = *(void *)(v8 + 64);
  unint64_t v13 = v12 + 7;
  if (((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v12) {
    unint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    unint64_t v14 = ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v15 = *(unsigned __int8 *)(v11 + v14);
  unsigned int v16 = v15 - 2;
  if (v15 >= 2)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *(unsigned __int8 *)v11;
        goto LABEL_13;
      case 2:
        int v18 = *(unsigned __int16 *)v11;
        goto LABEL_13;
      case 3:
        int v18 = *(unsigned __int16 *)((v6 + v9 + 17) & ~v9) | (*(unsigned __int8 *)(((v6 + v9 + 17) & ~v9) + 2) << 16);
        goto LABEL_13;
      case 4:
        int v18 = *(_DWORD *)v11;
LABEL_13:
        int v19 = (v18 | (v16 << (8 * v14))) + 2;
        unsigned int v15 = v18 + 2;
        if (v14 < 4) {
          unsigned int v15 = v19;
        }
        break;
      default:
        break;
    }
  }
  if (v15 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
    *(void *)((v13 + v10) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
    *(unsigned char *)(v10 + v14) = 1;
  }
  else if (v15)
  {
    memcpy((void *)v10, (const void *)v11, v14 + 1);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v10, v11);
    *(unsigned char *)(v10 + v14) = 0;
  }
  *(_OWORD *)(((v10 | 7) + v14 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((v11 | 7) + v14 + 1) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AccessibilityRotorEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(a2 + 24) >= 0xFFFFFFFFuLL)
    {
      char v6 = *(unsigned char *)(a2 + 16);
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = *(void *)(a1 + 8);
      char v9 = *(unsigned char *)(a1 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
LABEL_6:
  unint64_t v11 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v13 = *(unsigned __int8 *)(v11 + 16);
  if (v13 <= 2)
  {
    unsigned int v14 = *(unsigned __int8 *)(v12 + 16);
    unsigned int v15 = *(void **)v11;
    uint64_t v16 = *(void *)(v11 + 8);
    if (v14 <= 2)
    {
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
      *(unsigned char *)(v11 + 16) = v14;
      outlined consume of AccessibilityRotorEntryRange(v15, v16, v13);
      goto LABEL_11;
    }
    outlined consume of AccessibilityRotorEntryRange(v15, v16, v13);
  }
  long long v17 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(_OWORD *)unint64_t v11 = v17;
LABEL_11:
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(_DWORD *)(v19 + 80) & 0xF8 | 7;
  unint64_t v21 = v12 + v20;
  uint64_t v22 = (v11 + v20 + 17) & ~v20;
  uint64_t v23 = (v21 + 17) & ~v20;
  unint64_t v24 = *(void *)(v19 + 64);
  if (((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v24) {
    unint64_t v25 = *(void *)(v19 + 64);
  }
  else {
    unint64_t v25 = ((v24 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v22 != v23)
  {
    unsigned int v26 = *(unsigned __int8 *)(v22 + v25);
    unsigned int v27 = v26 - 2;
    if (v26 >= 2)
    {
      if (v25 <= 3) {
        uint64_t v28 = v25;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *(unsigned __int8 *)v22;
          goto LABEL_24;
        case 2:
          int v29 = *(unsigned __int16 *)v22;
          goto LABEL_24;
        case 3:
          int v29 = *(unsigned __int16 *)v22 | (*(unsigned __int8 *)(v22 + 2) << 16);
          goto LABEL_24;
        case 4:
          int v29 = *(_DWORD *)v22;
LABEL_24:
          int v30 = (v29 | (v27 << (8 * v25))) + 2;
          unsigned int v26 = v29 + 2;
          if (v25 < 4) {
            unsigned int v26 = v30;
          }
          break;
        default:
          break;
      }
    }
    if (v26 <= 1) {
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v18);
    }
    unsigned int v31 = *(unsigned __int8 *)(v23 + v25);
    unsigned int v32 = v31 - 2;
    if (v31 >= 2)
    {
      if (v25 <= 3) {
        uint64_t v33 = v25;
      }
      else {
        uint64_t v33 = 4;
      }
      switch(v33)
      {
        case 1:
          int v34 = *(unsigned __int8 *)v23;
          goto LABEL_37;
        case 2:
          int v34 = *(unsigned __int16 *)v23;
          goto LABEL_37;
        case 3:
          int v34 = *(unsigned __int16 *)v23 | (*(unsigned __int8 *)(v23 + 2) << 16);
          goto LABEL_37;
        case 4:
          int v34 = *(_DWORD *)v23;
LABEL_37:
          int v35 = (v34 | (v32 << (8 * v25))) + 2;
          unsigned int v31 = v34 + 2;
          if (v25 < 4) {
            unsigned int v31 = v35;
          }
          break;
        default:
          break;
      }
    }
    if (v31 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v22, v23, v18);
      *(void *)(((v22 | 7) + v24) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v23 | 7) + v24) & 0xFFFFFFFFFFFFFFF8);
      *(unsigned char *)(v22 + v25) = 1;
    }
    else if (v31)
    {
      memcpy((void *)v22, (const void *)v23, v25 + 1);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v22, v23, v18);
      *(unsigned char *)(v22 + v25) = 0;
    }
  }
  *(_OWORD *)(((v22 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((v23 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityRotorEntry(int *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v5 <= v4) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v6 = *(_DWORD *)(v3 + 80) & 0xF8;
  uint64_t v7 = v6 | 7;
  unint64_t v8 = v5 + 8;
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  unint64_t v11 = ((v8 + ((v6 + 56) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v12 = v11 & 0xFFFFFFF8;
  unsigned int v13 = a2 - 2147483646;
  if ((v11 & 0xFFFFFFF8) != 0) {
    unsigned int v13 = 2;
  }
  if (v13 >= 0x10000) {
    int v14 = 4;
  }
  else {
    int v14 = 2;
  }
  if (v13 < 0x100) {
    int v15 = 1;
  }
  else {
    int v15 = v14;
  }
  if (v15 == 4)
  {
    int v16 = *(int *)((char *)a1 + v11);
    if (!v16) {
      goto LABEL_5;
    }
  }
  else if (v15 == 2)
  {
    int v16 = *(unsigned __int16 *)((char *)a1 + v11);
    if (!v16) {
      goto LABEL_5;
    }
  }
  else
  {
    int v16 = *((unsigned __int8 *)a1 + v11);
    if (!v16)
    {
LABEL_5:
      unint64_t v9 = *(void *)((v8 + (((((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8) + v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8);
      if (v9 >= 0xFFFFFFFF) {
        LODWORD(v9) = -1;
      }
      return (v9 + 1);
    }
  }
  int v17 = v16 - 1;
  if (v12)
  {
    int v17 = 0;
    int v18 = *a1;
  }
  else
  {
    int v18 = 0;
  }
  return (v18 | v17) ^ 0x80000000;
}

void storeEnumTagSinglePayload for AccessibilityRotorEntry(unsigned char *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 <= v6) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  uint64_t v8 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v9 = v8 | 7;
  uint64_t v10 = (v8 + 56) & ~(v8 | 7);
  unint64_t v11 = v7 + 8;
  size_t v12 = ((v7 + 8 + v10) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (a3 < 0)
  {
    unsigned int v14 = a3 - 2147483646;
    if (v12) {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v13 = 1;
    }
    else {
      int v13 = v15;
    }
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    int v13 = 0;
    if ((a2 & 0x80000000) == 0)
    {
LABEL_5:
      switch(v13)
      {
        case 1:
          a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v12] = 0;
          goto LABEL_25;
        case 3:
          goto LABEL_32;
        case 4:
          *(_DWORD *)&a1[v12] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        default:
LABEL_25:
          if (a2) {
LABEL_26:
          }
            *(void *)((v11 + ((((unint64_t)(a1 + 39) & 0xFFFFFFFFFFFFFFF8) + v9 + 17) & ~v9)) & 0xFFFFFFFFFFFFFFF8) = (a2 - 1);
          break;
      }
      return;
    }
  }
  if (v12) {
    int v16 = 1;
  }
  else {
    int v16 = a2 - 0x7FFFFFFF;
  }
  if (v12)
  {
    unsigned int v17 = a2 ^ 0x80000000;
    bzero(a1, v12);
    *(_DWORD *)a1 = v17;
  }
  switch(v13)
  {
    case 1:
      a1[v12] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v16;
      break;
    case 3:
LABEL_32:
      __break(1u);
      JUMPOUT(0x187E3F9C8);
    case 4:
      *(_DWORD *)&a1[v12] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for AccessibilityRotorEntry()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AccessibilityRotorEntryElementSpecifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    v2[4] = *(void *)(result - 8) + 64;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AccessibilityRotorEntryElementSpecifier(void *__dst, unsigned __int8 *__src, uint64_t a3)
{
  unint64_t v4 = __dst;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v6) {
    unint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    unint64_t v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  int v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || v7 + 1 > 0x18)
  {
    uint64_t v10 = *(void *)__src;
    *unint64_t v4 = *(void *)__src;
    unint64_t v4 = (void *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v11 = __src[v7];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v13 = v7;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *__src;
          goto LABEL_19;
        case 2:
          int v14 = *(unsigned __int16 *)__src;
          goto LABEL_19;
        case 3:
          int v14 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_19;
        case 4:
          int v14 = *(_DWORD *)__src;
LABEL_19:
          int v15 = (v14 | (v12 << (8 * v7))) + 2;
          unsigned int v11 = v14 + 2;
          if (v7 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
      *((unsigned char *)v4 + v7) = 1;
    }
    else if (v11)
    {
      memcpy(__dst, __src, v7 + 1);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(__dst, __src);
      *((unsigned char *)v4 + v7) = 0;
    }
  }
  return v4;
}

unsigned __int8 *destroy for AccessibilityRotorEntryElementSpecifier(unsigned __int8 *result, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > v2) {
    unint64_t v2 = ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v3 = result[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *result;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)result;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)result;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 <= 1) {
    return (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
  return result;
}

unsigned char *initializeWithCopy for AccessibilityRotorEntryElementSpecifier(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v6) {
    unint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    unint64_t v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v8 = __src[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *__src;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)__src;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)__src;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    *(void *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    __dst[v7] = 1;
  }
  else if (v8)
  {
    memcpy(__dst, __src, v7 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 16))(__dst, __src);
    __dst[v7] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithCopy for AccessibilityRotorEntryElementSpecifier(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v7) {
      unint64_t v8 = *(void *)(v6 + 64);
    }
    else {
      unint64_t v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    unsigned int v9 = __dst[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *__dst;
          goto LABEL_14;
        case 2:
          int v12 = *(unsigned __int16 *)__dst;
          goto LABEL_14;
        case 3:
          int v12 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_14;
        case 4:
          int v12 = *(_DWORD *)__dst;
LABEL_14:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 <= 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
    }
    unsigned int v14 = __src[v8];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *__src;
          goto LABEL_27;
        case 2:
          int v17 = *(unsigned __int16 *)__src;
          goto LABEL_27;
        case 3:
          int v17 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_27;
        case 4:
          int v17 = *(_DWORD *)__src;
LABEL_27:
          int v18 = (v17 | (v15 << (8 * v8))) + 2;
          unsigned int v14 = v17 + 2;
          if (v8 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      *(void *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      __dst[v8] = 1;
    }
    else if (v14)
    {
      memcpy(__dst, __src, v8 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v8] = 0;
    }
  }
  return __dst;
}

unsigned char *initializeWithTake for AccessibilityRotorEntryElementSpecifier(unsigned char *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v6) {
    unint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    unint64_t v7 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unsigned int v8 = __src[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *__src;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)__src;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)__src;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    *(void *)((unint64_t)&__dst[v6 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&__src[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
    __dst[v7] = 1;
  }
  else if (v8)
  {
    memcpy(__dst, __src, v7 + 1);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned __int8 *))(v5 + 32))(__dst, __src);
    __dst[v7] = 0;
  }
  return __dst;
}

unsigned __int8 *assignWithTake for AccessibilityRotorEntryElementSpecifier(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  if (__dst != __src)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    unint64_t v7 = *(void *)(v6 + 64);
    if (((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v7) {
      unint64_t v8 = *(void *)(v6 + 64);
    }
    else {
      unint64_t v8 = ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    unsigned int v9 = __dst[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *__dst;
          goto LABEL_14;
        case 2:
          int v12 = *(unsigned __int16 *)__dst;
          goto LABEL_14;
        case 3:
          int v12 = *(unsigned __int16 *)__dst | (__dst[2] << 16);
          goto LABEL_14;
        case 4:
          int v12 = *(_DWORD *)__dst;
LABEL_14:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 <= 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
    }
    unsigned int v14 = __src[v8];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *__src;
          goto LABEL_27;
        case 2:
          int v17 = *(unsigned __int16 *)__src;
          goto LABEL_27;
        case 3:
          int v17 = *(unsigned __int16 *)__src | (__src[2] << 16);
          goto LABEL_27;
        case 4:
          int v17 = *(_DWORD *)__src;
LABEL_27:
          int v18 = (v17 | (v15 << (8 * v8))) + 2;
          unsigned int v14 = v17 + 2;
          if (v8 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      *(void *)((unint64_t)&__dst[v7 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&__src[v7 + 7] & 0xFFFFFFFFFFFFFFF8);
      __dst[v8] = 1;
    }
    else if (v14)
    {
      memcpy(__dst, __src, v8 + 1);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v8] = 0;
    }
  }
  return __dst;
}

uint64_t getEnumTagSinglePayload for AccessibilityRotorEntryElementSpecifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unint64_t v4 = ((v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v4 <= v3) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  unint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 253) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 3) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 254;
}

void storeEnumTagSinglePayload for AccessibilityRotorEntryElementSpecifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > v5) {
    unint64_t v5 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v8 = a2 - 254;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x187E40888);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for AccessibilityRotorEntryElementSpecifier(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  unint64_t v3 = ((v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v3 <= v2) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void destructiveInjectEnumTag for AccessibilityRotorEntryElementSpecifier(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= v4) {
    size_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    size_t v5 = ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (a2 > 1)
  {
    unsigned int v6 = a2 - 2;
    if (v5 < 4)
    {
      unsigned int v7 = v6 >> (8 * v5);
      int v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if (v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if (v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    a1[v5] = a2;
  }
}

uint64_t outlined init with take of AccessibilityRotorEntryElementSpecifier<AnyHashable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityRotorEntryElementSpecifier<AnyHashable>(0, &lazy cache variable for type metadata for AccessibilityRotorEntryElementSpecifier<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityRotorEntryElementSpecifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id outlined copy of AccessibilityRotorEntryRange?(id result, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined copy of AccessibilityRotorEntryRange(result, a2, a3);
  }
  return result;
}

uint64_t outlined init with copy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityRotorEntryElementSpecifier<AnyHashable>(0, &lazy cache variable for type metadata for AccessibilityRotorEntryElementSpecifier<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityRotorEntryElementSpecifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AccessibilityListRotorEntry(uint64_t a1, uint64_t a2)
{
  return a2;
}

void outlined consume of AccessibilityRotorEntryRange?(id a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    outlined consume of AccessibilityRotorEntryRange(a1, a2, a3);
  }
}

uint64_t IndexWrappingVisitor.visit(entry:) in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  outlined init with copy of AccessibilityListRotorEntry(a1, (uint64_t)v7);
  uint64_t v8 = *v2;
  char v9 = 0;
  char v5 = (*(uint64_t (**)(unsigned char *, void))(*(void *)(a2 + 24) + 8))(v7, *(void *)(a2 + 16));
  uint64_t result = outlined destroy of AccessibilityListRotorEntry((uint64_t)v7);
  if (__OFADD__(*v3, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v3;
    return v5 & 1;
  }
  return result;
}

uint64_t visitEntries<A>(applying:from:) in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for IndexWrappingVisitor in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)();
  double v12 = MEMORY[0x1F4188790](v11);
  unsigned int v14 = (uint64_t *)((char *)&v20 - v13);
  uint64_t v15 = *a2;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v8 + 32);
  v16(v10, a1, a3, v12);
  void *v14 = v15;
  ((void (*)(char *, char *, uint64_t))v16)((char *)v14 + *(int *)(v11 + 36), v10, a3);
  uint64_t v17 = v4[3];
  uint64_t v18 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v17);
  LOBYTE(a2) = (*(uint64_t (**)(void *, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v18 + 8))(v14, a2, v11, &protocol witness table for IndexWrappingVisitor in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)<A>, v17, v18);
  ((void (*)(uint64_t, char *, uint64_t))v16)(a1, (char *)v14 + *(int *)(v11 + 36), a3);
  return a2 & 1;
}

uint64_t protocol witness for AccessibilityRotorEntryGenerator.count.getter in conformance IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t visit(entry:) in AccumulatingVisitor #1 in closure #1 in AccessibilityRotorInfo.resolveAllEntries()(uint64_t a1)
{
  outlined init with copy of AccessibilityListRotorEntry(a1, (uint64_t)v13);
  uint64_t v2 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  char v5 = &v2[120 * v4];
  long long v6 = v13[0];
  long long v7 = v13[1];
  long long v8 = v13[3];
  *((_OWORD *)v5 + 4) = v13[2];
  *((_OWORD *)v5 + 5) = v8;
  *((_OWORD *)v5 + 2) = v6;
  *((_OWORD *)v5 + 3) = v7;
  long long v9 = v13[4];
  long long v10 = v13[5];
  long long v11 = v13[6];
  v5[144] = v14;
  *((_OWORD *)v5 + 7) = v10;
  *((_OWORD *)v5 + 8) = v11;
  *((_OWORD *)v5 + 6) = v9;
  *uint64_t v1 = v2;
  return 1;
}

uint64_t protocol witness for AccessibilityRotorEntryVisitor.visit(entry:) in conformance FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t a1)
{
  outlined destroy of AccessibilityNavigationRotorEntry?(v1, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  outlined init with copy of AccessibilityListRotorEntry(a1, v1);
  return 0;
}

void visit(entry:) in MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with copy of AccessibilityListRotorEntry?(v1 + 104, (uint64_t)&v92, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  uint64_t v4 = v99;
  outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)&v92, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
  if (v4)
  {
    uint64_t v5 = v1 + 344;
    goto LABEL_7;
  }
  uint64_t v90 = v1 + 104;
  uint64_t v6 = *(void *)v1;
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v8 = *(void *)(v1 + 16);
  char v9 = *(unsigned char *)(v1 + 40);
  uint64_t v10 = *(void *)(v1 + 48);
  char v11 = *(unsigned char *)(v1 + 56);
  uint64_t v92 = v6;
  uint64_t v93 = v7;
  uint64_t v94 = v8;
  long long v95 = *(_OWORD *)(v1 + 24);
  char v96 = v9;
  uint64_t v97 = v10;
  char v98 = v11;
  double v12 = *(void **)(v1 + 64);
  outlined copy of Text.Suffix.Storage(v6, v7, v8);
  id v13 = AccessibilityRotorInfo.resolveElement(with:on:scrollIfNeeded:shouldLog:)(a1, v12, 0, 0);
  outlined consume of Text.Suffix.Storage(v6, v7, v8);
  if (!v13) {
    goto LABEL_6;
  }
  swift_getObjectType();
  if (*(id *)(v1 + 72) != v13) {
    goto LABEL_5;
  }
  int v91 = *(unsigned __int8 *)(a1 + 80);
  if (v91 == 255)
  {
    int v40 = v13;
    int v41 = *(unsigned __int8 *)(v1 + 96);

    if (v41 == 255) {
      goto LABEL_53;
    }
    goto LABEL_6;
  }
  id v15 = *(id *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v16 = *(void **)(v1 + 80);
  uint64_t v17 = *(void *)(v2 + 88);
  int v18 = *(unsigned __int8 *)(v2 + 96);
  uint64_t v89 = a1;
  uint64_t v81 = v14;
  uint64_t v85 = v17;
  id v86 = v15;
  int v80 = v18;
  uint64_t v84 = *(void **)(v2 + 80);
  if (!*(unsigned char *)(v2 + 96))
  {
    outlined copy of AccessibilityRotorEntryRange?(v15, v14, v91);
    outlined copy of AccessibilityRotorEntryRange?(v16, v17, 0);
    char v42 = 0;
    uint64_t v74 = v17;
    id v75 = v16;
    if (!v91) {
      goto LABEL_50;
    }
    goto LABEL_27;
  }
  if (v18 == 255)
  {
LABEL_5:

    goto LABEL_6;
  }
  outlined copy of AccessibilityRotorEntryRange?(v15, v14, v91);
  outlined copy of AccessibilityRotorEntryRange?(v16, v17, v18);
  uint64_t v19 = PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter();
  uint64_t v82 = *((void *)v19 + 2);
  char v76 = v13;
  if (!v82)
  {
    outlined copy of AccessibilityRotorEntryRange?(v16, v17, v18);
    id v66 = v13;
    goto LABEL_48;
  }
  outlined copy of AccessibilityRotorEntryRange?(v16, v17, v18);
  id v78 = v13;
  unint64_t v20 = 0;
  unint64_t v21 = (uint64_t *)(v19 + 40);
  uint64_t v87 = v19;
  while (1)
  {
    uint64_t v25 = *v21;
    if (v18 == 2)
    {
      outlined copy of AccessibilityRotorEntryRange?(v84, v85, 2);
      swift_bridgeObjectRetain();
      uint64_t v22 = v87;
      swift_bridgeObjectRetain();
      PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v84);
      char v24 = v23;
      a1 = v89;
      outlined consume of AccessibilityRotorEntryRange?(v84, v85, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_14;
    }
    uint64_t v26 = *(v21 - 1);
    uint64_t v92 = (uint64_t)v84;
    uint64_t v93 = v85;
    type metadata accessor for AccessibilityRotorEntryElementSpecifier<AnyHashable>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBB6A0]);
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v27 = _NSRange.init<A, B>(_:in:)();
    uint64_t v29 = v28;
    if (v27 != NSNotFound.getter()) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v89;
    int v18 = v80;
LABEL_14:
    ++v20;
    v21 += 2;
    if (v82 == v20) {
      goto LABEL_48;
    }
  }
  BOOL v30 = __OFADD__(v27, v29);
  uint64_t v31 = v27 + v29;
  if (v30)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  unsigned int v32 = (void *)MEMORY[0x18C115780](v26, v25);
  id v33 = objc_msgSend(v32, sel_length);
  uint64_t v22 = v87;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  BOOL v34 = (uint64_t)v33 < v31;
  a1 = v89;
  int v18 = v80;
  if (v34) {
    goto LABEL_14;
  }
LABEL_20:
  if (v82 == v20)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    uint64_t v16 = v84;
    uint64_t v17 = v85;
    outlined consume of AccessibilityRotorEntryRange?(v84, v85, v18);
    id v13 = v76;

    uint64_t v74 = 0;
    id v75 = 0;
    char v42 = 1;
    uint64_t v14 = v81;
    goto LABEL_49;
  }
  if (v20 >= *((void *)v22 + 2))
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v35 = *v21;
  id v13 = v76;
  if (v18 == 2)
  {
    outlined copy of AccessibilityRotorEntryRange?(v84, v85, 2);
    swift_bridgeObjectRetain();
    id v36 = PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v84);
    uint64_t v74 = v37;
    id v75 = v36;
    char v39 = v38;
    outlined consume of AccessibilityRotorEntryRange?(v84, v85, 2);
  }
  else
  {
    uint64_t v70 = *(v21 - 1);
    swift_bridgeObjectRetain();
    uint64_t v71 = specialized String.resolveNSRange(_:in:)((uint64_t)v84, v85, v70, v35);
    uint64_t v74 = v72;
    id v75 = (id)v71;
    char v39 = v73;
  }
  uint64_t v14 = v81;
  swift_bridgeObjectRelease();
  if (v39) {
    goto LABEL_65;
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v84;
  uint64_t v17 = v85;
  outlined consume of AccessibilityRotorEntryRange?(v84, v85, v18);

  char v42 = 0;
LABEL_49:
  id v15 = v86;
  if (!v91)
  {
LABEL_50:
    outlined consume of AccessibilityRotorEntryRange?(v15, v14, 0);
    outlined consume of AccessibilityRotorEntryRange?(v16, v17, v80);

    if ((v42 & 1) == 0)
    {
LABEL_51:
      if (v75 == v15 && v74 == v14)
      {
LABEL_53:
        outlined destroy of AccessibilityNavigationRotorEntry?(v90, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
        outlined init with copy of AccessibilityListRotorEntry(a1, v90);
        outlined assign with copy of AccessibilityListRotorEntry?(v2 + 464, v2 + 224);
      }
    }
LABEL_6:
    uint64_t v5 = v2 + 464;
LABEL_7:
    outlined destroy of AccessibilityNavigationRotorEntry?(v5, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry);
    outlined init with copy of AccessibilityListRotorEntry(a1, v5);
    return;
  }
LABEL_27:
  char v79 = v42;
  uint64_t v43 = PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter();
  uint64_t v88 = v43;
  uint64_t v83 = *((void *)v43 + 2);
  char v77 = v13;
  if (!v83)
  {
    outlined copy of AccessibilityRotorEntryRange?(v15, v14, v91);
    id v64 = v13;
LABEL_41:
    swift_bridgeObjectRelease();
    uint64_t v59 = 0;
    uint64_t v61 = 0;
    char v65 = 1;
LABEL_42:
    outlined consume of AccessibilityRotorEntryRange?(v86, v14, v91);

    outlined consume of AccessibilityRotorEntryRange?(v86, v14, v91);
    outlined consume of AccessibilityRotorEntryRange?(v84, v85, v80);

    if (v79)
    {
      if (v65) {
        goto LABEL_53;
      }
    }
    else
    {
      id v15 = (id)v59;
      uint64_t v14 = v61;
      if ((v65 & 1) == 0) {
        goto LABEL_51;
      }
    }
    goto LABEL_6;
  }
  int v44 = v43;
  outlined copy of AccessibilityRotorEntryRange?(v15, v14, v91);
  id v45 = v13;
  unint64_t v46 = 0;
  char v47 = (uint64_t *)(v44 + 40);
  while (2)
  {
    uint64_t v50 = *v47;
    if (v91 == 2)
    {
      outlined copy of AccessibilityRotorEntryRange?(v86, v14, 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v86);
      char v49 = v48;
      outlined consume of AccessibilityRotorEntryRange?(v86, v14, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v49 & 1) == 0) {
        goto LABEL_36;
      }
      goto LABEL_30;
    }
    uint64_t v51 = *(v47 - 1);
    uint64_t v92 = (uint64_t)v86;
    uint64_t v93 = v14;
    type metadata accessor for AccessibilityRotorEntryElementSpecifier<AnyHashable>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBB6A0]);
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v52 = _NSRange.init<A, B>(_:in:)();
    uint64_t v54 = v53;
    if (v52 == NSNotFound.getter())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v89;
      uint64_t v14 = v81;
LABEL_30:
      ++v46;
      v47 += 2;
      if (v83 == v46) {
        goto LABEL_41;
      }
      continue;
    }
    break;
  }
  BOOL v30 = __OFADD__(v52, v54);
  uint64_t v55 = v52 + v54;
  if (v30)
  {
    __break(1u);
    goto LABEL_61;
  }
  uint64_t v56 = (void *)MEMORY[0x18C115780](v51, v50);
  id v57 = objc_msgSend(v56, sel_length);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  BOOL v34 = (uint64_t)v57 < v55;
  a1 = v89;
  uint64_t v14 = v81;
  if (v34) {
    goto LABEL_30;
  }
LABEL_36:
  if (v83 == v46) {
    goto LABEL_41;
  }
  if (v46 >= *((void *)v88 + 2))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  uint64_t v58 = *v47;
  if (v91 == 2)
  {
    outlined copy of AccessibilityRotorEntryRange?(v86, v14, 2);
    swift_bridgeObjectRetain();
    uint64_t v59 = (uint64_t)PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v86);
    uint64_t v61 = v60;
    char v63 = v62;
    outlined consume of AccessibilityRotorEntryRange?(v86, v14, 2);
  }
  else
  {
    uint64_t v67 = *(v47 - 1);
    swift_bridgeObjectRetain();
    uint64_t v59 = specialized String.resolveNSRange(_:in:)((uint64_t)v86, v14, v67, v58);
    uint64_t v61 = v68;
    char v63 = v69;
  }
  swift_bridgeObjectRelease();
  if ((v63 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    char v65 = 0;
    goto LABEL_42;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
}

uint64_t outlined destroy of AccessibilityScrollableContext??(uint64_t a1)
{
  type metadata accessor for WeakAttribute<AccessibilityRotorEntryList>?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext??, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for WeakAttribute<AccessibilityRotorEntryList>?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  if (!*a2)
  {
    _sypSgMaTm_6(255, a3, a4, a5);
    unint64_t v6 = type metadata accessor for Optional();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined destroy of AccessibilityNavigationRotorEntry?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _sypSgMaTm_6(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined init with copy of ScrollableCollection?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ScrollableCollection?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *specialized Sequence.first(where:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v17)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v18)(void, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  int v33;
  __int16 v34;
  char v35;
  _OWORD v36[2];
  _OWORD v37[4];
  int v38;
  __int16 v39;
  unsigned __int8 v40;
  id v41;

  unint64_t v4 = a1;
  if (a1 >> 62)
  {
LABEL_28:
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    if (v27) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v27 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v27)
    {
LABEL_3:
      uint64_t v25 = v4 & 0xC000000000000001;
      uint64_t v5 = 4;
      char v24 = MEMORY[0x1E4FBC840] + 8;
      do
      {
        uint64_t v7 = v5 - 4;
        if (v25)
        {
          id v8 = (id)MEMORY[0x18C117680](v5 - 4, v4);
          uint64_t v9 = v5 - 3;
          if (__OFADD__(v7, 1)) {
            goto LABEL_27;
          }
        }
        else
        {
          id v8 = *(id *)(v4 + 8 * v5);
          uint64_t v9 = v5 - 3;
          if (__OFADD__(v7, 1))
          {
LABEL_27:
            __break(1u);
            goto LABEL_28;
          }
        }
        uint64_t v28 = v9;
        int v41 = v8;
        AccessibilityNode.attachment.getter((uint64_t *)&v29);
        uint64_t v10 = v29;

        if (*(void *)(v10 + 16)
          && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
              (v12 & 1) != 0))
        {
          outlined init with copy of TableColumnList(*(void *)(v10 + 56) + 40 * v11, (uint64_t)&v29);
          uint64_t v13 = *((void *)&v30 + 1);
          uint64_t v14 = v31;
          __swift_project_boxed_opaque_existential_1(&v29, *((uint64_t *)&v30 + 1));
          uint64_t v15 = a3;
          unint64_t v16 = v4;
          uint64_t v17 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v14 + 8);
          swift_bridgeObjectRetain();
          v17(v36, v13, v14);
          unint64_t v4 = v16;
          a3 = v15;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
        }
        else
        {
          memset(v36, 0, sizeof(v36));
          swift_bridgeObjectRetain();
        }
        int v18 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        _sypSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v24, MEMORY[0x1E4FBB718]);
        _sypSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, v18);
        if (swift_dynamicCast())
        {
          outlined init with take of AccessibilityNavigationRotorEntry?((uint64_t)&v29, (uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
        }
        else
        {
          uint64_t v31 = 0u;
          unsigned int v32 = 0u;
          uint64_t v29 = 0u;
          BOOL v30 = 0u;
          BOOL v34 = 0;
          id v33 = 0;
          uint64_t v35 = -2;
          memset(v37, 0, sizeof(v37));
          char v39 = 0;
          char v38 = 0;
          int v40 = -1;
          outlined destroy of AccessibilityScrollableContext??((uint64_t)&v29);
        }
        swift_bridgeObjectRelease_n();
        if (v40 == 255)
        {
          outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
          swift_retain();
          outlined consume of Text.LineStyle?(0, 1);
          outlined consume of Text.LineStyle?(a2, a3);
          unint64_t v6 = v41;
        }
        else
        {
          outlined init with copy of AccessibilityScrollableContext((uint64_t)v37, (uint64_t)&v29);
          if (v35)
          {
            unint64_t v6 = v41;
            if (v35 == 1)
            {
              uint64_t v19 = v29;
              unint64_t v20 = DWORD1(v29);
              unint64_t v21 = *((void *)&v29 + 1);
            }
            else
            {
              uint64_t v19 = DWORD2(v31);
              unint64_t v20 = HIDWORD(v31);
              unint64_t v21 = v32;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
            }
          }
          else
          {
            uint64_t v19 = v32;
            unint64_t v20 = DWORD1(v32);
            unint64_t v21 = *((void *)&v32 + 1);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
            unint64_t v6 = v41;
          }
          outlined destroy of AccessibilityScrollableContext((uint64_t)v37);
          *(void *)&v37[0] = v19 | (v20 << 32);
          *((void *)&v37[0] + 1) = v21;
          *(void *)&uint64_t v29 = a2;
          *((void *)&v29 + 1) = a3;
          swift_retain();
          uint64_t v22 = MEMORY[0x18C10D6E0](v37, &v29);
          swift_release();
          swift_release();
          if (v22)
          {
            swift_bridgeObjectRelease();
            return v6;
          }
        }

        ++v5;
      }
      while (v28 != v27);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

char *specialized AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:)(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  void (*v69)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t (*v71)(void, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  void *v76;
  void *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  id v83;
  void *v84;
  unsigned char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v96;
  unsigned char *v98;
  void *v99;
  long long v100;
  long long v101;
  long long v102;
  long long v103;
  int v104;
  __int16 v105;
  char v106;
  _OWORD v107[2];
  _OWORD v108[4];
  int v109;
  __int16 v110;
  unsigned __int8 v111;
  long long v112;
  uint64_t v113;

  AccessibilityNode.rotorChildNodes.getter();
  unint64_t v7 = v6;
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  uint64_t v99 = a2;
  __swift_project_boxed_opaque_existential_1(a2, v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v8, v9);
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  char v12 = (uint64_t *)(v10 + 40);
  uint64_t v13 = (uint64_t *)(v10 + 40);
  while (1)
  {
    uint64_t v15 = *v13;
    v13 += 2;
    uint64_t v14 = v15;
    if (!v15) {
      goto LABEL_4;
    }
    uint64_t v16 = *((unsigned int *)v12 - 2);
    uint64_t v17 = *((unsigned int *)v12 - 1);
    *(void *)&double v100 = v14;
    swift_retain_n();
    AnyHashable2.anyHashable.getter();
    char v18 = MEMORY[0x18C1174E0](v108, a1);
    swift_release();
    outlined destroy of AnyHashable((uint64_t)v108);
    if (v18) {
      break;
    }
    swift_release();
LABEL_4:
    char v12 = v13;
    if (!--v11)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_retain();
  uint64_t v19 = specialized Sequence.first(where:)(v7, v16 | (v17 << 32), v14);
  swift_release();
  if (v19)
  {
    swift_bridgeObjectRelease();
    AccessibilityNode.platformElement.getter();
    uint64_t v21 = v20;
    swift_release();
    if (v21)
    {

      return (char *)v21;
    }
    return v19;
  }
  swift_release();
LABEL_12:
  double v113 = 0;
  int v112 = xmmword_18834BB90;
  uint64_t v22 = v99[4];
  char v23 = __swift_project_boxed_opaque_existential_1(v99, v99[3]);
  double v24 = MEMORY[0x1F4188790](v23);
  (*(void (**)(uint64_t *, uint64_t *(*)(uint64_t *, unsigned char *), double))(v22 + 64))(&v113, partial apply for closure #2 in AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:), v24);
  uint64_t v25 = *((void *)&v112 + 1);
  if (*((void *)&v112 + 1) == 1)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v26 = v112;
  swift_retain();
  uint64_t v19 = specialized Sequence.first(where:)(v7, v26, v25);
  swift_bridgeObjectRelease();
  if (v19)
  {
    if (a4) {
      AccessibilityNode.scrollToVisible()();
    }
    AccessibilityNode.platformElement.getter();
    if (v27)
    {
      uint64_t v28 = v27;

      uint64_t v19 = v28;
    }
    outlined consume of Text.LineStyle?(v26, v25);
    uint64_t v29 = v26;
    uint64_t v30 = v25;
    goto LABEL_21;
  }
  if ((a4 & 1) == 0)
  {
LABEL_81:
    outlined consume of Text.LineStyle?(v26, v25);
    outlined consume of Text.LineStyle?(v112, *((uint64_t *)&v112 + 1));
    return 0;
  }
  uint64_t v90 = HIDWORD(v26);
  uint64_t v32 = a3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost;
  uint64_t v92 = MEMORY[0x1E4FBC840] + 8;
  char v33 = 1;
  id v86 = v25;
  uint64_t v87 = v26;
  uint64_t v89 = a3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost;
  while (2)
  {
    char v34 = v33;
    uint64_t v35 = v99[3];
    uint64_t v36 = v99[4];
    __swift_project_boxed_opaque_existential_1(v99, v35);
    *(void *)&v108[0] = __PAIR64__(v90, v26);
    *((void *)&v108[0] + 1) = v25;
    static UnitPoint.center.getter();
    if (((*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, void, uint64_t, uint64_t))(v36 + 80))(v108, v37, v38, 0, v35, v36) & 1) == 0)
    {
LABEL_27:
      char v33 = 0;
      if ((v34 & 1) == 0) {
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  if (MEMORY[0x18C119DF0](v32))
  {
    swift_getObjectType();
    *(void *)&v108[0] = 0;
    BYTE8(v108[0]) = 1;
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    swift_unknownObjectRelease();
  }
  AccessibilityNode.rotorChildNodes.getter();
  int v91 = v39;
  if (v39 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v40 = *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (!v40)
  {
LABEL_26:
    swift_bridgeObjectRelease_n();
    goto LABEL_27;
  }
  uint64_t v41 = 0;
  uint64_t v94 = v34;
  uint64_t v93 = v40;
  while (1)
  {
    if ((v91 & 0xC000000000000001) != 0)
    {
      uint64_t result = (char *)MEMORY[0x18C117680](v41, v91);
      BOOL v43 = __OFADD__(v41, 1);
      uint64_t v44 = v41 + 1;
      if (v43) {
        goto LABEL_87;
      }
    }
    else
    {
      uint64_t result = (char *)*(id *)(v91 + 32 + 8 * v41);
      BOOL v43 = __OFADD__(v41, 1);
      uint64_t v44 = v41 + 1;
      if (v43)
      {
LABEL_87:
        __break(1u);
        return result;
      }
    }
    uint64_t v45 = *(void *)&result[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
    char v96 = v44;
    char v98 = result;
    if (v45)
    {
      id v46 = *(id *)&result[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
      swift_bridgeObjectRetain();
      goto LABEL_57;
    }
    uint64_t v88 = (uint64_t *)&result[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
    char v47 = &result[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    uint64_t v48 = *(void *)v47;
    int64_t v49 = *(void *)(*(void *)v47 + 16);
    if (v49)
    {
      *(void *)&double v100 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v49, 0);
      uint64_t v50 = (void *)v100;
      uint64_t v51 = (void **)(v48 + 40);
      do
      {
        uint64_t v53 = (uint64_t)*(v51 - 1);
        uint64_t v52 = *v51;
        *(void *)&double v100 = v50;
        unint64_t v55 = v50[2];
        unint64_t v54 = v50[3];
        swift_bridgeObjectRetain();
        id v56 = v52;
        if (v55 >= v54 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1);
          uint64_t v50 = (void *)v100;
        }
        v50[2] = v55 + 1;
        id v57 = &v50[2 * v55];
        v57[4] = v53;
        v57[5] = v52;
        v51 += 5;
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease();
      uint64_t v25 = v86;
      unint64_t v26 = v87;
    }
    else
    {
      uint64_t v50 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v58 = v50[2];
    uint64_t v59 = v58 - 1;
    if (v58 != 1) {
      break;
    }
    uint64_t v60 = (void *)v50[5];
    *(void *)&double v100 = v50[4];
    *((void *)&v100 + 1) = v60;
    id v61 = v60;
    swift_bridgeObjectRetain();
LABEL_55:
    swift_bridgeObjectRelease();
LABEL_56:
    char v62 = (void *)*((void *)&v100 + 1);
    uint64_t v45 = v100;
    uint64_t v63 = *v88;
    id v64 = (void *)v88[1];
    *uint64_t v88 = v100;
    v88[1] = (uint64_t)v62;
    id v46 = v62;
    swift_bridgeObjectRetain();
    outlined consume of AccessibilityAttachment?(v63, v64);
    v98[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
    uint64_t v32 = v89;
LABEL_57:

    if (*(void *)(v45 + 16)
      && (unint64_t v65 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
          (v66 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v45 + 56) + 40 * v65, (uint64_t)&v100);
      uint64_t v67 = *((void *)&v101 + 1);
      uint64_t v68 = v102;
      __swift_project_boxed_opaque_existential_1(&v100, *((uint64_t *)&v101 + 1));
      char v69 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v68 + 8);
      swift_bridgeObjectRetain();
      uint64_t v70 = v68;
      uint64_t v32 = v89;
      v69(v107, v67, v70);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
    }
    else
    {
      memset(v107, 0, sizeof(v107));
      swift_bridgeObjectRetain();
    }
    uint64_t v71 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    _sypSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v92, MEMORY[0x1E4FBB718]);
    _sypSgMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, v71);
    if (swift_dynamicCast())
    {
      outlined init with take of AccessibilityNavigationRotorEntry?((uint64_t)&v100, (uint64_t)v108, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    }
    else
    {
      uint64_t v102 = 0u;
      char v103 = 0u;
      double v100 = 0u;
      Class v101 = 0u;
      CGFloat v105 = 0;
      BOOL v104 = 0;
      CGFloat v106 = -2;
      memset(v108, 0, sizeof(v108));
      uint64_t v110 = 0;
      double v109 = 0;
      double v111 = -1;
      outlined destroy of AccessibilityScrollableContext??((uint64_t)&v100);
    }
    swift_bridgeObjectRelease_n();
    if (v111 == 255)
    {
      outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)v108, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
      outlined copy of Text.LineStyle?(v26, v25);
      outlined consume of Text.LineStyle?(0, 1);
      outlined consume of Text.LineStyle?(v26, v25);
      char v34 = v94;
      uint64_t v42 = v93;
      goto LABEL_36;
    }
    outlined init with copy of AccessibilityScrollableContext((uint64_t)v108, (uint64_t)&v100);
    char v34 = v94;
    uint64_t v42 = v93;
    if (v106)
    {
      if (v106 == 1)
      {
        uint64_t v72 = v100;
        char v73 = DWORD1(v100);
        uint64_t v74 = *((void *)&v100 + 1);
        goto LABEL_71;
      }
      uint64_t v72 = DWORD2(v102);
      char v73 = HIDWORD(v102);
      uint64_t v74 = v103;
    }
    else
    {
      uint64_t v72 = v103;
      char v73 = DWORD1(v103);
      uint64_t v74 = *((void *)&v103 + 1);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v100);
LABEL_71:
    outlined destroy of AccessibilityScrollableContext((uint64_t)v108);
    *(void *)&v108[0] = v72 | (v73 << 32);
    *((void *)&v108[0] + 1) = v74;
    *(void *)&double v100 = __PAIR64__(v90, v26);
    *((void *)&v100 + 1) = v25;
    outlined copy of Text.LineStyle?(v26, v25);
    swift_retain();
    id v75 = MEMORY[0x18C10D6E0](v108, &v100);
    swift_release();
    outlined consume of Text.LineStyle?(v26, v25);
    swift_release();
    if (v75) {
      goto LABEL_83;
    }
LABEL_36:

    uint64_t v41 = v96;
    if (v96 == v42) {
      goto LABEL_26;
    }
  }
  if (!v58)
  {
    AccessibilityAttachment.init()();
    goto LABEL_55;
  }
  char v76 = &v50[2 * v59];
  id v78 = v76[4];
  char v77 = (void *)v76[5];
  *(void *)&v107[0] = v78;
  *((void *)&v107[0] + 1) = v77;
  char v79 = v77;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v26 = (unint64_t)&v50[2 * v58 + 1];
  int v80 = v58 - 2;
  while (v80 < v59)
  {
    uint64_t v82 = *(void *)(v26 - 8);
    uint64_t v81 = *(void **)v26;
    *(void *)&double v100 = v82;
    uint64_t v83 = v81;
    swift_bridgeObjectRetain();
    AccessibilityProperties.merge(with:)((uint64_t *)&v100);
    double v100 = v107[0];
    uint64_t v84 = (void *)AccessibilityAttachment.platformElement.getter();

    if (!v84)
    {
      *(void *)&double v100 = v82;
      *((void *)&v100 + 1) = v81;
      if (AccessibilityAttachment.platformElement.getter()) {
        AccessibilityAttachment.platformElement.setter();
      }
    }

    swift_bridgeObjectRelease();
    v26 -= 16;
    if (--v80 == -1)
    {
      swift_bridgeObjectRelease_n();
      double v100 = v107[0];
      unint64_t v26 = v87;
      goto LABEL_56;
    }
  }
  __break(1u);
LABEL_83:
  swift_bridgeObjectRelease_n();
  AccessibilityNode.platformElement.getter();
  if (v85)
  {
    uint64_t v19 = v85;
    outlined consume of Text.LineStyle?(v26, v25);
  }
  else
  {
    uint64_t v19 = v98;
    outlined consume of Text.LineStyle?(v26, v25);
  }
  uint64_t v30 = *((void *)&v112 + 1);
  uint64_t v29 = v112;
LABEL_21:
  outlined consume of Text.LineStyle?(v29, v30);
  return v19;
}

uint64_t outlined init with take of AccessibilityNavigationRotorEntry?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sypSgMaTm_6(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t *partial apply for closure #2 in AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:)(uint64_t *a1, unsigned char *a2)
{
  return closure #2 in AccessibilityRotorInfo.resolveImplicitElement(with:in:node:scrollIfNeeded:shouldLog:)(a1, a2, *(void *)(v2 + 16), *(uint64_t **)(v2 + 24));
}

uint64_t partial apply for closure #1 in AccessibilityRotorInfo.entry(at:)()
{
  return closure #1 in AccessibilityRotorInfo.entry(at:)(v0[2], v0[3], v0[4]);
}

uint64_t *outlined retain of AccessibilityRotorInfo(uint64_t *a1)
{
  return a1;
}

uint64_t *outlined release of AccessibilityRotorInfo(uint64_t *a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in AccessibilityRotorInfo.resolveAllEntries()(void *a1)
{
  return closure #1 in AccessibilityRotorInfo.resolveAllEntries()(a1);
}

uint64_t partial apply for closure #1 in AccessibilityRotorInfo.readEntryList(_:)()
{
  return closure #1 in AccessibilityRotorInfo.readEntryList(_:)(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24));
}

char *specialized Sequence.compactMap<A>(_:)(uint64_t a1, long long *a2, char *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v6 = a1 + 32;
  swift_bridgeObjectRetain();
  unint64_t v7 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    long long v8 = a2[1];
    long long v19 = *a2;
    long long v20 = v8;
    *(_OWORD *)uint64_t v21 = a2[2];
    *(_OWORD *)&v21[9] = *(long long *)((char *)a2 + 41);
    AccessibilityListRotorEntry.resolveForNavigationOrClosestEntry(for:on:prepare:)((uint64_t *)&v19, a3, 0, (uint64_t)v27);
    if (*((void *)&v28 + 1))
    {
      long long v24 = v29;
      long long v25 = v30;
      uint64_t v26 = v31;
      *(_OWORD *)uint64_t v21 = v27[2];
      *(_OWORD *)&v21[16] = v27[3];
      long long v22 = v27[4];
      long long v23 = v28;
      long long v19 = v27[0];
      long long v20 = v27[1];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
      }
      unint64_t v10 = *((void *)v7 + 2);
      unint64_t v9 = *((void *)v7 + 3);
      if (v10 >= v9 >> 1) {
        unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v7);
      }
      *((void *)v7 + 2) = v10 + 1;
      uint64_t v11 = &v7[136 * v10];
      *((_OWORD *)v11 + 2) = v19;
      long long v12 = v20;
      long long v13 = *(_OWORD *)v21;
      long long v14 = v22;
      *((_OWORD *)v11 + 5) = *(_OWORD *)&v21[16];
      *((_OWORD *)v11 + 6) = v14;
      *((_OWORD *)v11 + 3) = v12;
      *((_OWORD *)v11 + 4) = v13;
      long long v15 = v23;
      long long v16 = v24;
      long long v17 = v25;
      *((void *)v11 + 20) = v26;
      *((_OWORD *)v11 + 8) = v16;
      *((_OWORD *)v11 + 9) = v17;
      *((_OWORD *)v11 + 7) = v15;
    }
    else
    {
      outlined destroy of AccessibilityNavigationRotorEntry?((uint64_t)v27, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry);
    }
    v6 += 120;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t outlined init with copy of AccessibilityNavigationRotorEntry(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AccessibilityNavigationRotorEntry(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of AccessibilityListRotorEntry?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sypSgMaTm_6(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined assign with take of AccessibilityNavigationRotorEntry?(uint64_t a1, uint64_t a2)
{
  _sypSgMaTm_6(0, &lazy cache variable for type metadata for AccessibilityNavigationRotorEntry?, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AccessibilityListRotorEntry(uint64_t a1)
{
  return a1;
}

void type metadata accessor for AccessibilityRotorEntryElementSpecifier<AnyHashable>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined init with take of WeakAttribute<AccessibilityRotorEntryList>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakAttribute<AccessibilityRotorEntryList>?(0, &lazy cache variable for type metadata for WeakAttribute<AccessibilityRotorEntryList>?, &lazy cache variable for type metadata for WeakAttribute<AccessibilityRotorEntryList>, (uint64_t)&type metadata for AccessibilityRotorEntryList, MEMORY[0x1E4F4E730]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187E42D0C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v6 = 0;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t *, void *, _UNKNOWN **, uint64_t, uint64_t))(v4 + 8))(v2, &v6, &unk_1ED4382A0, &protocol witness table for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:), v3, v4);
}

uint64_t outlined destroy of MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1)
{
  return a1;
}

uint64_t destroy for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t result)
{
  if (*(void *)(result + 88))
  {
    uint64_t v1 = result;
    if (*(unsigned __int8 *)(result + 48) <= 1u) {
      __swift_destroy_boxed_opaque_existential_1(result);
    }

    int v2 = *(unsigned __int8 *)(v1 + 80);
    if (v2 != 255) {
      outlined consume of AccessibilityRotorEntryRange(*(id *)(v1 + 64), *(void *)(v1 + 72), v2);
    }
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 88))
  {
    long long v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    return a1;
  }
  if (*(unsigned char *)(a2 + 48) == 1)
  {
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    char v9 = 1;
LABEL_8:
    *(unsigned char *)(a1 + 48) = v9;
    goto LABEL_9;
  }
  if (*(unsigned char *)(a2 + 48))
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    char v9 = *(unsigned char *)(a2 + 48);
    goto LABEL_8;
  }
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  *(unsigned char *)(a1 + 48) = 0;
LABEL_9:
  uint64_t v11 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v11;
  int v12 = *(unsigned __int8 *)(a2 + 80);
  id v13 = v11;
  if (v12 == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  }
  else
  {
    long long v14 = *(void **)(a2 + 64);
    uint64_t v15 = *(void *)(a2 + 72);
    outlined copy of AccessibilityRotorEntryRange(v14, v15, v12);
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v15;
    *(unsigned char *)(a1 + 80) = v12;
  }
  uint64_t v16 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 11);
  if (*(void *)(a1 + 88))
  {
    if (v4)
    {
      if ((long long *)a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1);
        if (*((unsigned char *)a2 + 48) == 1)
        {
          uint64_t v19 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v19;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v19 - 8))(a1, a2);
          *(void *)(a1 + 40) = *((void *)a2 + 5);
          *(unsigned char *)(a1 + 48) = 1;
        }
        else if (*((unsigned char *)a2 + 48))
        {
          long long v20 = *a2;
          long long v21 = a2[1];
          long long v22 = a2[2];
          *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
          *(_OWORD *)(a1 + 16) = v21;
          *(_OWORD *)(a1 + 32) = v22;
          *(_OWORD *)a1 = v20;
        }
        else
        {
          uint64_t v5 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v5;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v5 - 8))(a1, a2);
          *(unsigned char *)(a1 + 48) = 0;
        }
      }
      long long v23 = *(void **)(a1 + 56);
      long long v24 = (void *)*((void *)a2 + 7);
      *(void *)(a1 + 56) = v24;
      id v25 = v24;

      uint64_t v26 = (long long *)(a1 + 64);
      uint64_t v27 = a2 + 4;
      int v28 = *((unsigned __int8 *)a2 + 80);
      if (*(unsigned __int8 *)(a1 + 80) == 255)
      {
        if (v28 == 255)
        {
          long long v49 = *v27;
          *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
          long long *v26 = v49;
        }
        else
        {
          char v34 = (void *)*((void *)a2 + 8);
          uint64_t v35 = *((void *)a2 + 9);
          outlined copy of AccessibilityRotorEntryRange(v34, v35, *((unsigned char *)a2 + 80));
          *(void *)(a1 + 64) = v34;
          *(void *)(a1 + 72) = v35;
          *(unsigned char *)(a1 + 80) = v28;
        }
      }
      else if (v28 == 255)
      {
        outlined destroy of AccessibilityRotorEntryRange(a1 + 64);
        char v36 = *((unsigned char *)a2 + 80);
        long long *v26 = *v27;
        *(unsigned char *)(a1 + 80) = v36;
      }
      else
      {
        long long v29 = (void *)*((void *)a2 + 8);
        uint64_t v30 = *((void *)a2 + 9);
        outlined copy of AccessibilityRotorEntryRange(v29, v30, *((unsigned char *)a2 + 80));
        uint64_t v31 = *(void **)(a1 + 64);
        uint64_t v32 = *(void *)(a1 + 72);
        *(void *)(a1 + 64) = v29;
        *(void *)(a1 + 72) = v30;
        char v33 = *(unsigned char *)(a1 + 80);
        *(unsigned char *)(a1 + 80) = v28;
        outlined consume of AccessibilityRotorEntryRange(v31, v32, v33);
      }
      uint64_t v50 = *((void *)a2 + 12);
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      *(void *)(a1 + 96) = v50;
      swift_retain();
      swift_release();
      uint64_t v51 = *((void *)a2 + 13);
      *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
      *(void *)(a1 + 104) = v51;
    }
    else
    {
      outlined destroy of AccessibilityListRotorEntry(a1);
      long long v7 = a2[3];
      long long v9 = *a2;
      long long v8 = a2[1];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v8;
      long long v11 = a2[5];
      long long v10 = a2[6];
      long long v12 = a2[4];
      *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 96) = v10;
      *(_OWORD *)(a1 + 64) = v12;
    }
  }
  else if (v4)
  {
    if (*((unsigned char *)a2 + 48) == 1)
    {
      uint64_t v37 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v37;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v37 - 8))(a1, a2);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(unsigned char *)(a1 + 48) = 1;
    }
    else if (*((unsigned char *)a2 + 48))
    {
      long long v38 = *a2;
      long long v39 = a2[1];
      long long v40 = a2[2];
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(_OWORD *)(a1 + 16) = v39;
      *(_OWORD *)(a1 + 32) = v40;
      *(_OWORD *)a1 = v38;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 48) = 0;
    }
    uint64_t v41 = (void *)*((void *)a2 + 7);
    *(void *)(a1 + 56) = v41;
    int v42 = *((unsigned __int8 *)a2 + 80);
    id v43 = v41;
    if (v42 == 255)
    {
      long long v46 = a2[4];
      *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
      *(_OWORD *)(a1 + 64) = v46;
    }
    else
    {
      uint64_t v44 = (void *)*((void *)a2 + 8);
      uint64_t v45 = *((void *)a2 + 9);
      outlined copy of AccessibilityRotorEntryRange(v44, v45, v42);
      *(void *)(a1 + 64) = v44;
      *(void *)(a1 + 72) = v45;
      *(unsigned char *)(a1 + 80) = v42;
    }
    uint64_t v47 = *((void *)a2 + 12);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *(void *)(a1 + 96) = v47;
    uint64_t v48 = *((void *)a2 + 13);
    *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
    *(void *)(a1 + 104) = v48;
    swift_retain();
  }
  else
  {
    long long v13 = *a2;
    long long v14 = a2[1];
    long long v15 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)a1 = v13;
    *(_OWORD *)(a1 + 16) = v14;
    long long v16 = a2[4];
    long long v17 = a2[5];
    long long v18 = a2[6];
    *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
    *(_OWORD *)(a1 + 80) = v17;
    *(_OWORD *)(a1 + 96) = v18;
    *(_OWORD *)(a1 + 64) = v16;
  }
  return a1;
}

uint64_t assignWithTake for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 88))
  {
    if (*(void *)(a2 + 88))
    {
      if (a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1);
        long long v4 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v4;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      }
      uint64_t v5 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);

      uint64_t v6 = (_OWORD *)(a2 + 64);
      int v7 = *(unsigned __int8 *)(a1 + 80);
      if (v7 != 255)
      {
        int v8 = *(unsigned __int8 *)(a2 + 80);
        if (v8 != 255)
        {
          long long v9 = *(void **)(a1 + 64);
          uint64_t v10 = *(void *)(a1 + 72);
          *(_OWORD *)(a1 + 64) = *v6;
          *(unsigned char *)(a1 + 80) = v8;
          outlined consume of AccessibilityRotorEntryRange(v9, v10, v7);
LABEL_12:
          *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
          swift_release();
          *(void *)(a1 + 104) = *(void *)(a2 + 104);
          *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
          return a1;
        }
        outlined destroy of AccessibilityRotorEntryRange(a1 + 64);
      }
      *(_OWORD *)(a1 + 64) = *v6;
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      goto LABEL_12;
    }
    outlined destroy of AccessibilityListRotorEntry(a1);
  }
  long long v11 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v11;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  long long v13 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v13;
  return a1;
}

uint64_t getEnumTagSinglePayload for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 88);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 113) = 0;
    }
    if (a2) {
      *(void *)(result + 88) = a2;
    }
  }
  return result;
}

void *type metadata accessor for FirstVisitor #1 in AccessibilityRotorInfo.entry(at:)()
{
  return &unk_1ED438480;
}

void destroy for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1)
{
  outlined consume of Text.Suffix.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));

  int v2 = *(unsigned __int8 *)(a1 + 96);
  if (v2 != 255) {
    outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 80), *(void *)(a1 + 88), v2);
  }
  if (*(void *)(a1 + 192))
  {
    if (*(unsigned __int8 *)(a1 + 152) <= 1u) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 104);
    }

    int v3 = *(unsigned __int8 *)(a1 + 184);
    if (v3 != 255) {
      outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 168), *(void *)(a1 + 176), v3);
    }
    swift_release();
  }
  if (*(void *)(a1 + 312))
  {
    if (*(unsigned __int8 *)(a1 + 272) <= 1u) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 224);
    }

    int v4 = *(unsigned __int8 *)(a1 + 304);
    if (v4 != 255) {
      outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 288), *(void *)(a1 + 296), v4);
    }
    swift_release();
  }
  if (*(void *)(a1 + 432))
  {
    if (*(unsigned __int8 *)(a1 + 392) <= 1u) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 344);
    }

    int v5 = *(unsigned __int8 *)(a1 + 424);
    if (v5 != 255) {
      outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 408), *(void *)(a1 + 416), v5);
    }
    swift_release();
  }
  if (*(void *)(a1 + 552))
  {
    if (*(unsigned __int8 *)(a1 + 512) <= 1u) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 464);
    }

    int v6 = *(unsigned __int8 *)(a1 + 544);
    if (v6 != 255) {
      outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 528), *(void *)(a1 + 536), v6);
    }
    swift_release();
  }
}

uint64_t initializeWithCopy for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  outlined copy of Text.Suffix.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  int v8 = *(void **)(a2 + 64);
  long long v9 = *(void **)(a2 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v9;
  int v10 = *(unsigned __int8 *)(a2 + 96);
  id v11 = v8;
  id v12 = v9;
  if (v10 == 255)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  }
  else
  {
    long long v13 = *(void **)(a2 + 80);
    uint64_t v14 = *(void *)(a2 + 88);
    outlined copy of AccessibilityRotorEntryRange(v13, v14, v10);
    *(void *)(a1 + 80) = v13;
    *(void *)(a1 + 88) = v14;
    *(unsigned char *)(a1 + 96) = v10;
  }
  long long v15 = (_OWORD *)(a1 + 104);
  long long v16 = (_OWORD *)(a2 + 104);
  if (*(void *)(a2 + 192))
  {
    if (*(unsigned char *)(a2 + 152) == 1)
    {
      long long v21 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 128) = v21;
      (**(void (***)(_OWORD *, _OWORD *))(v21 - 8))(v15, v16);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 152) = 1;
    }
    else if (*(unsigned char *)(a2 + 152))
    {
      long long v22 = *(_OWORD *)(a2 + 120);
      _OWORD *v15 = *v16;
      *(_OWORD *)(a1 + 120) = v22;
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    }
    else
    {
      long long v17 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 128) = v17;
      (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
      *(unsigned char *)(a1 + 152) = 0;
    }
    long long v23 = *(void **)(a2 + 160);
    *(void *)(a1 + 160) = v23;
    int v24 = *(unsigned __int8 *)(a2 + 184);
    id v25 = v23;
    if (v24 == 255)
    {
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    }
    else
    {
      uint64_t v26 = *(void **)(a2 + 168);
      uint64_t v27 = *(void *)(a2 + 176);
      outlined copy of AccessibilityRotorEntryRange(v26, v27, v24);
      *(void *)(a1 + 168) = v26;
      *(void *)(a1 + 176) = v27;
      *(unsigned char *)(a1 + 184) = v24;
    }
    uint64_t v28 = *(void *)(a2 + 200);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 200) = v28;
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    swift_retain();
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v18;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    long long v19 = *(_OWORD *)(a2 + 120);
    _OWORD *v15 = *v16;
    *(_OWORD *)(a1 + 120) = v19;
    long long v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
  }
  long long v29 = (_OWORD *)(a1 + 224);
  uint64_t v30 = (_OWORD *)(a2 + 224);
  if (*(void *)(a2 + 312))
  {
    if (*(unsigned char *)(a2 + 272) == 1)
    {
      long long v35 = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 248) = v35;
      (**(void (***)(_OWORD *, _OWORD *))(v35 - 8))(v29, v30);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(unsigned char *)(a1 + 272) = 1;
    }
    else if (*(unsigned char *)(a2 + 272))
    {
      long long v36 = *(_OWORD *)(a2 + 240);
      _OWORD *v29 = *v30;
      *(_OWORD *)(a1 + 240) = v36;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
    }
    else
    {
      long long v31 = *(_OWORD *)(a2 + 248);
      *(_OWORD *)(a1 + 248) = v31;
      (**(void (***)(_OWORD *, _OWORD *))(v31 - 8))(v29, v30);
      *(unsigned char *)(a1 + 272) = 0;
    }
    uint64_t v37 = *(void **)(a2 + 280);
    *(void *)(a1 + 280) = v37;
    int v38 = *(unsigned __int8 *)(a2 + 304);
    id v39 = v37;
    if (v38 == 255)
    {
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
      *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
    }
    else
    {
      long long v40 = *(void **)(a2 + 288);
      uint64_t v41 = *(void *)(a2 + 296);
      outlined copy of AccessibilityRotorEntryRange(v40, v41, v38);
      *(void *)(a1 + 288) = v40;
      *(void *)(a1 + 296) = v41;
      *(unsigned char *)(a1 + 304) = v38;
    }
    uint64_t v42 = *(void *)(a2 + 320);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(void *)(a1 + 320) = v42;
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
    swift_retain();
  }
  else
  {
    long long v32 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v32;
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
    long long v33 = *(_OWORD *)(a2 + 240);
    _OWORD *v29 = *v30;
    *(_OWORD *)(a1 + 240) = v33;
    long long v34 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v34;
  }
  id v43 = (_OWORD *)(a1 + 344);
  uint64_t v44 = (_OWORD *)(a2 + 344);
  if (*(void *)(a2 + 432))
  {
    if (*(unsigned char *)(a2 + 392) == 1)
    {
      long long v49 = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 368) = v49;
      (**(void (***)(_OWORD *, _OWORD *))(v49 - 8))(v43, v44);
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      *(unsigned char *)(a1 + 392) = 1;
    }
    else if (*(unsigned char *)(a2 + 392))
    {
      long long v50 = *(_OWORD *)(a2 + 360);
      *id v43 = *v44;
      *(_OWORD *)(a1 + 360) = v50;
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
      *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
    }
    else
    {
      long long v45 = *(_OWORD *)(a2 + 368);
      *(_OWORD *)(a1 + 368) = v45;
      (**(void (***)(_OWORD *, _OWORD *))(v45 - 8))(v43, v44);
      *(unsigned char *)(a1 + 392) = 0;
    }
    uint64_t v51 = *(void **)(a2 + 400);
    *(void *)(a1 + 400) = v51;
    int v52 = *(unsigned __int8 *)(a2 + 424);
    id v53 = v51;
    if (v52 == 255)
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
      *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
    }
    else
    {
      unint64_t v54 = *(void **)(a2 + 408);
      uint64_t v55 = *(void *)(a2 + 416);
      outlined copy of AccessibilityRotorEntryRange(v54, v55, v52);
      *(void *)(a1 + 408) = v54;
      *(void *)(a1 + 416) = v55;
      *(unsigned char *)(a1 + 424) = v52;
    }
    uint64_t v56 = *(void *)(a2 + 440);
    *(void *)(a1 + 432) = *(void *)(a2 + 432);
    *(void *)(a1 + 440) = v56;
    *(void *)(a1 + 448) = *(void *)(a2 + 448);
    *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
    swift_retain();
  }
  else
  {
    long long v46 = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = v46;
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
    long long v47 = *(_OWORD *)(a2 + 360);
    *id v43 = *v44;
    *(_OWORD *)(a1 + 360) = v47;
    long long v48 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v48;
  }
  id v57 = (_OWORD *)(a1 + 464);
  uint64_t v58 = (_OWORD *)(a2 + 464);
  if (*(void *)(a2 + 552))
  {
    if (*(unsigned char *)(a2 + 512) == 1)
    {
      uint64_t v64 = *(void *)(a2 + 488);
      uint64_t v65 = *(void *)(a2 + 496);
      *(void *)(a1 + 488) = v64;
      *(void *)(a1 + 496) = v65;
      (**(void (***)(_OWORD *, _OWORD *))(v64 - 8))(v57, v58);
      *(void *)(a1 + 504) = *(void *)(a2 + 504);
      *(unsigned char *)(a1 + 512) = 1;
    }
    else if (*(unsigned char *)(a2 + 512))
    {
      long long v66 = *(_OWORD *)(a2 + 480);
      *id v57 = *v58;
      *(_OWORD *)(a1 + 480) = v66;
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
      *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
    }
    else
    {
      uint64_t v59 = *(void *)(a2 + 488);
      uint64_t v60 = *(void *)(a2 + 496);
      *(void *)(a1 + 488) = v59;
      *(void *)(a1 + 496) = v60;
      (**(void (***)(_OWORD *, _OWORD *))(v59 - 8))(v57, v58);
      *(unsigned char *)(a1 + 512) = 0;
    }
    uint64_t v67 = *(void **)(a2 + 520);
    *(void *)(a1 + 520) = v67;
    int v68 = *(unsigned __int8 *)(a2 + 544);
    id v69 = v67;
    if (v68 == 255)
    {
      *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
      *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
    }
    else
    {
      uint64_t v70 = *(void **)(a2 + 528);
      uint64_t v71 = *(void *)(a2 + 536);
      outlined copy of AccessibilityRotorEntryRange(v70, v71, v68);
      *(void *)(a1 + 528) = v70;
      *(void *)(a1 + 536) = v71;
      *(unsigned char *)(a1 + 544) = v68;
    }
    uint64_t v72 = *(void *)(a2 + 560);
    *(void *)(a1 + 552) = *(void *)(a2 + 552);
    *(void *)(a1 + 560) = v72;
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
    *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
    swift_retain();
  }
  else
  {
    long long v61 = *(_OWORD *)(a2 + 544);
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 544) = v61;
    *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
    long long v62 = *(_OWORD *)(a2 + 480);
    *id v57 = *v58;
    *(_OWORD *)(a1 + 480) = v62;
    long long v63 = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = v63;
  }
  return a1;
}

uint64_t assignWithCopy for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  outlined copy of Text.Suffix.Storage(*(void *)a2, v5, v6);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  outlined consume of Text.Suffix.Storage(v8, v9, v10);
  uint64_t v11 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v11;
  LOBYTE(v11) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v11;
  id v12 = *(void **)(a2 + 64);
  long long v13 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v12;
  id v14 = v12;

  long long v15 = *(void **)(a2 + 72);
  long long v16 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v15;
  id v17 = v15;

  long long v18 = (long long *)(a1 + 80);
  long long v19 = (long long *)(a2 + 80);
  int v20 = *(unsigned __int8 *)(a2 + 96);
  if (*(unsigned __int8 *)(a1 + 96) == 255)
  {
    if (v20 == 255)
    {
      long long v29 = *v19;
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      long long *v18 = v29;
    }
    else
    {
      uint64_t v26 = *(void **)(a2 + 80);
      uint64_t v27 = *(void *)(a2 + 88);
      outlined copy of AccessibilityRotorEntryRange(v26, v27, *(unsigned char *)(a2 + 96));
      *(void *)(a1 + 80) = v26;
      *(void *)(a1 + 88) = v27;
      *(unsigned char *)(a1 + 96) = v20;
    }
  }
  else if (v20 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 80);
    char v28 = *(unsigned char *)(a2 + 96);
    long long *v18 = *v19;
    *(unsigned char *)(a1 + 96) = v28;
  }
  else
  {
    long long v21 = *(void **)(a2 + 80);
    uint64_t v22 = *(void *)(a2 + 88);
    outlined copy of AccessibilityRotorEntryRange(v21, v22, *(unsigned char *)(a2 + 96));
    long long v23 = *(void **)(a1 + 80);
    uint64_t v24 = *(void *)(a1 + 88);
    *(void *)(a1 + 80) = v21;
    *(void *)(a1 + 88) = v22;
    char v25 = *(unsigned char *)(a1 + 96);
    *(unsigned char *)(a1 + 96) = v20;
    outlined consume of AccessibilityRotorEntryRange(v23, v24, v25);
  }
  uint64_t v30 = (_OWORD *)(a1 + 104);
  long long v31 = (long long *)(a2 + 104);
  uint64_t v32 = *(void *)(a2 + 192);
  if (*(void *)(a1 + 192))
  {
    if (v32)
    {
      if (a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 104);
        if (*(unsigned char *)(a2 + 152) == 1)
        {
          uint64_t v47 = *(void *)(a2 + 128);
          *(void *)(a1 + 128) = v47;
          *(void *)(a1 + 136) = *(void *)(a2 + 136);
          (**(void (***)(uint64_t, uint64_t))(v47 - 8))(a1 + 104, a2 + 104);
          *(void *)(a1 + 144) = *(void *)(a2 + 144);
          *(unsigned char *)(a1 + 152) = 1;
        }
        else if (*(unsigned char *)(a2 + 152))
        {
          long long v48 = *v31;
          long long v49 = *(_OWORD *)(a2 + 120);
          long long v50 = *(_OWORD *)(a2 + 136);
          *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
          *(_OWORD *)(a1 + 120) = v49;
          *(_OWORD *)(a1 + 136) = v50;
          _OWORD *v30 = v48;
        }
        else
        {
          uint64_t v33 = *(void *)(a2 + 128);
          *(void *)(a1 + 128) = v33;
          *(void *)(a1 + 136) = *(void *)(a2 + 136);
          (**(void (***)(uint64_t, uint64_t))(v33 - 8))(a1 + 104, a2 + 104);
          *(unsigned char *)(a1 + 152) = 0;
        }
      }
      uint64_t v51 = *(void **)(a1 + 160);
      int v52 = *(void **)(a2 + 160);
      *(void *)(a1 + 160) = v52;
      id v53 = v52;

      unint64_t v54 = (long long *)(a1 + 168);
      uint64_t v55 = (long long *)(a2 + 168);
      int v56 = *(unsigned __int8 *)(a2 + 184);
      if (*(unsigned __int8 *)(a1 + 184) == 255)
      {
        if (v56 == 255)
        {
          long long v77 = *v55;
          *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
          *unint64_t v54 = v77;
        }
        else
        {
          long long v62 = *(void **)(a2 + 168);
          uint64_t v63 = *(void *)(a2 + 176);
          outlined copy of AccessibilityRotorEntryRange(v62, v63, *(unsigned char *)(a2 + 184));
          *(void *)(a1 + 168) = v62;
          *(void *)(a1 + 176) = v63;
          *(unsigned char *)(a1 + 184) = v56;
        }
      }
      else if (v56 == 255)
      {
        outlined destroy of AccessibilityRotorEntryRange(a1 + 168);
        char v64 = *(unsigned char *)(a2 + 184);
        *unint64_t v54 = *v55;
        *(unsigned char *)(a1 + 184) = v64;
      }
      else
      {
        id v57 = *(void **)(a2 + 168);
        uint64_t v58 = *(void *)(a2 + 176);
        outlined copy of AccessibilityRotorEntryRange(v57, v58, *(unsigned char *)(a2 + 184));
        uint64_t v59 = *(void **)(a1 + 168);
        uint64_t v60 = *(void *)(a1 + 176);
        *(void *)(a1 + 168) = v57;
        *(void *)(a1 + 176) = v58;
        char v61 = *(unsigned char *)(a1 + 184);
        *(unsigned char *)(a1 + 184) = v56;
        outlined consume of AccessibilityRotorEntryRange(v59, v60, v61);
      }
      uint64_t v78 = *(void *)(a2 + 200);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 200) = v78;
      swift_retain();
      swift_release();
      uint64_t v79 = *(void *)(a2 + 208);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(void *)(a1 + 208) = v79;
    }
    else
    {
      outlined destroy of AccessibilityListRotorEntry(a1 + 104);
      long long v35 = *(_OWORD *)(a2 + 152);
      long long v37 = *v31;
      long long v36 = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = v35;
      _OWORD *v30 = v37;
      *(_OWORD *)(a1 + 120) = v36;
      long long v39 = *(_OWORD *)(a2 + 184);
      long long v38 = *(_OWORD *)(a2 + 200);
      long long v40 = *(_OWORD *)(a2 + 168);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(_OWORD *)(a1 + 184) = v39;
      *(_OWORD *)(a1 + 200) = v38;
      *(_OWORD *)(a1 + 168) = v40;
    }
  }
  else if (v32)
  {
    if (*(unsigned char *)(a2 + 152) == 1)
    {
      uint64_t v65 = *(void *)(a2 + 128);
      *(void *)(a1 + 128) = v65;
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      (**(void (***)(uint64_t, uint64_t))(v65 - 8))(a1 + 104, a2 + 104);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(unsigned char *)(a1 + 152) = 1;
    }
    else if (*(unsigned char *)(a2 + 152))
    {
      long long v66 = *v31;
      long long v67 = *(_OWORD *)(a2 + 120);
      long long v68 = *(_OWORD *)(a2 + 136);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(_OWORD *)(a1 + 120) = v67;
      *(_OWORD *)(a1 + 136) = v68;
      _OWORD *v30 = v66;
    }
    else
    {
      uint64_t v34 = *(void *)(a2 + 128);
      *(void *)(a1 + 128) = v34;
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      (**(void (***)(uint64_t, uint64_t))(v34 - 8))(a1 + 104, a2 + 104);
      *(unsigned char *)(a1 + 152) = 0;
    }
    id v69 = *(void **)(a2 + 160);
    *(void *)(a1 + 160) = v69;
    int v70 = *(unsigned __int8 *)(a2 + 184);
    id v71 = v69;
    if (v70 == 255)
    {
      long long v74 = *(_OWORD *)(a2 + 168);
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = v74;
    }
    else
    {
      uint64_t v72 = *(void **)(a2 + 168);
      uint64_t v73 = *(void *)(a2 + 176);
      outlined copy of AccessibilityRotorEntryRange(v72, v73, v70);
      *(void *)(a1 + 168) = v72;
      *(void *)(a1 + 176) = v73;
      *(unsigned char *)(a1 + 184) = v70;
    }
    uint64_t v75 = *(void *)(a2 + 200);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 200) = v75;
    uint64_t v76 = *(void *)(a2 + 208);
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    *(void *)(a1 + 208) = v76;
    swift_retain();
  }
  else
  {
    long long v41 = *v31;
    long long v42 = *(_OWORD *)(a2 + 120);
    long long v43 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v43;
    _OWORD *v30 = v41;
    *(_OWORD *)(a1 + 120) = v42;
    long long v44 = *(_OWORD *)(a2 + 168);
    long long v45 = *(_OWORD *)(a2 + 184);
    long long v46 = *(_OWORD *)(a2 + 200);
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    *(_OWORD *)(a1 + 184) = v45;
    *(_OWORD *)(a1 + 200) = v46;
    *(_OWORD *)(a1 + 168) = v44;
  }
  int v80 = (_OWORD *)(a1 + 224);
  uint64_t v81 = (long long *)(a2 + 224);
  uint64_t v82 = *(void *)(a2 + 312);
  if (*(void *)(a1 + 312))
  {
    if (v82)
    {
      if (a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 224);
        if (*(unsigned char *)(a2 + 272) == 1)
        {
          uint64_t v97 = *(void *)(a2 + 248);
          *(void *)(a1 + 248) = v97;
          *(void *)(a1 + 256) = *(void *)(a2 + 256);
          (**(void (***)(uint64_t, uint64_t))(v97 - 8))(a1 + 224, a2 + 224);
          *(void *)(a1 + 264) = *(void *)(a2 + 264);
          *(unsigned char *)(a1 + 272) = 1;
        }
        else if (*(unsigned char *)(a2 + 272))
        {
          long long v98 = *v81;
          long long v99 = *(_OWORD *)(a2 + 240);
          long long v100 = *(_OWORD *)(a2 + 256);
          *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
          *(_OWORD *)(a1 + 240) = v99;
          *(_OWORD *)(a1 + 256) = v100;
          *int v80 = v98;
        }
        else
        {
          uint64_t v83 = *(void *)(a2 + 248);
          *(void *)(a1 + 248) = v83;
          *(void *)(a1 + 256) = *(void *)(a2 + 256);
          (**(void (***)(uint64_t, uint64_t))(v83 - 8))(a1 + 224, a2 + 224);
          *(unsigned char *)(a1 + 272) = 0;
        }
      }
      Class v101 = *(void **)(a1 + 280);
      uint64_t v102 = *(void **)(a2 + 280);
      *(void *)(a1 + 280) = v102;
      id v103 = v102;

      BOOL v104 = (long long *)(a1 + 288);
      CGFloat v105 = (long long *)(a2 + 288);
      int v106 = *(unsigned __int8 *)(a2 + 304);
      if (*(unsigned __int8 *)(a1 + 304) == 255)
      {
        if (v106 == 255)
        {
          long long v127 = *v105;
          *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
          long long *v104 = v127;
        }
        else
        {
          int v112 = *(void **)(a2 + 288);
          uint64_t v113 = *(void *)(a2 + 296);
          outlined copy of AccessibilityRotorEntryRange(v112, v113, *(unsigned char *)(a2 + 304));
          *(void *)(a1 + 288) = v112;
          *(void *)(a1 + 296) = v113;
          *(unsigned char *)(a1 + 304) = v106;
        }
      }
      else if (v106 == 255)
      {
        outlined destroy of AccessibilityRotorEntryRange(a1 + 288);
        char v114 = *(unsigned char *)(a2 + 304);
        long long *v104 = *v105;
        *(unsigned char *)(a1 + 304) = v114;
      }
      else
      {
        CGFloat v107 = *(void **)(a2 + 288);
        uint64_t v108 = *(void *)(a2 + 296);
        outlined copy of AccessibilityRotorEntryRange(v107, v108, *(unsigned char *)(a2 + 304));
        double v109 = *(void **)(a1 + 288);
        uint64_t v110 = *(void *)(a1 + 296);
        *(void *)(a1 + 288) = v107;
        *(void *)(a1 + 296) = v108;
        char v111 = *(unsigned char *)(a1 + 304);
        *(unsigned char *)(a1 + 304) = v106;
        outlined consume of AccessibilityRotorEntryRange(v109, v110, v111);
      }
      uint64_t v128 = *(void *)(a2 + 320);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      *(void *)(a1 + 320) = v128;
      swift_retain();
      swift_release();
      uint64_t v129 = *(void *)(a2 + 328);
      *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
      *(void *)(a1 + 328) = v129;
    }
    else
    {
      outlined destroy of AccessibilityListRotorEntry(a1 + 224);
      long long v85 = *(_OWORD *)(a2 + 272);
      long long v87 = *v81;
      long long v86 = *(_OWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = v85;
      *int v80 = v87;
      *(_OWORD *)(a1 + 240) = v86;
      long long v89 = *(_OWORD *)(a2 + 304);
      long long v88 = *(_OWORD *)(a2 + 320);
      long long v90 = *(_OWORD *)(a2 + 288);
      *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
      *(_OWORD *)(a1 + 304) = v89;
      *(_OWORD *)(a1 + 320) = v88;
      *(_OWORD *)(a1 + 288) = v90;
    }
  }
  else if (v82)
  {
    if (*(unsigned char *)(a2 + 272) == 1)
    {
      uint64_t v115 = *(void *)(a2 + 248);
      *(void *)(a1 + 248) = v115;
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      (**(void (***)(uint64_t, uint64_t))(v115 - 8))(a1 + 224, a2 + 224);
      *(void *)(a1 + 264) = *(void *)(a2 + 264);
      *(unsigned char *)(a1 + 272) = 1;
    }
    else if (*(unsigned char *)(a2 + 272))
    {
      long long v116 = *v81;
      long long v117 = *(_OWORD *)(a2 + 240);
      long long v118 = *(_OWORD *)(a2 + 256);
      *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
      *(_OWORD *)(a1 + 240) = v117;
      *(_OWORD *)(a1 + 256) = v118;
      *int v80 = v116;
    }
    else
    {
      uint64_t v84 = *(void *)(a2 + 248);
      *(void *)(a1 + 248) = v84;
      *(void *)(a1 + 256) = *(void *)(a2 + 256);
      (**(void (***)(uint64_t, uint64_t))(v84 - 8))(a1 + 224, a2 + 224);
      *(unsigned char *)(a1 + 272) = 0;
    }
    double v119 = *(void **)(a2 + 280);
    *(void *)(a1 + 280) = v119;
    int v120 = *(unsigned __int8 *)(a2 + 304);
    id v121 = v119;
    if (v120 == 255)
    {
      long long v124 = *(_OWORD *)(a2 + 288);
      *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
      *(_OWORD *)(a1 + 288) = v124;
    }
    else
    {
      double v122 = *(void **)(a2 + 288);
      uint64_t v123 = *(void *)(a2 + 296);
      outlined copy of AccessibilityRotorEntryRange(v122, v123, v120);
      *(void *)(a1 + 288) = v122;
      *(void *)(a1 + 296) = v123;
      *(unsigned char *)(a1 + 304) = v120;
    }
    uint64_t v125 = *(void *)(a2 + 320);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    *(void *)(a1 + 320) = v125;
    uint64_t v126 = *(void *)(a2 + 328);
    *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
    *(void *)(a1 + 328) = v126;
    swift_retain();
  }
  else
  {
    long long v91 = *v81;
    long long v92 = *(_OWORD *)(a2 + 240);
    long long v93 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v93;
    *int v80 = v91;
    *(_OWORD *)(a1 + 240) = v92;
    long long v94 = *(_OWORD *)(a2 + 288);
    long long v95 = *(_OWORD *)(a2 + 304);
    long long v96 = *(_OWORD *)(a2 + 320);
    *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
    *(_OWORD *)(a1 + 304) = v95;
    *(_OWORD *)(a1 + 320) = v96;
    *(_OWORD *)(a1 + 288) = v94;
  }
  uint64_t v130 = (_OWORD *)(a1 + 344);
  BOOL v131 = (long long *)(a2 + 344);
  uint64_t v132 = *(void *)(a2 + 432);
  if (*(void *)(a1 + 432))
  {
    if (v132)
    {
      if (a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 344);
        if (*(unsigned char *)(a2 + 392) == 1)
        {
          uint64_t v147 = *(void *)(a2 + 368);
          *(void *)(a1 + 368) = v147;
          *(void *)(a1 + 376) = *(void *)(a2 + 376);
          (**(void (***)(uint64_t, uint64_t))(v147 - 8))(a1 + 344, a2 + 344);
          *(void *)(a1 + 384) = *(void *)(a2 + 384);
          *(unsigned char *)(a1 + 392) = 1;
        }
        else if (*(unsigned char *)(a2 + 392))
        {
          long long v148 = *v131;
          long long v149 = *(_OWORD *)(a2 + 360);
          long long v150 = *(_OWORD *)(a2 + 376);
          *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
          *(_OWORD *)(a1 + 360) = v149;
          *(_OWORD *)(a1 + 376) = v150;
          *uint64_t v130 = v148;
        }
        else
        {
          uint64_t v133 = *(void *)(a2 + 368);
          *(void *)(a1 + 368) = v133;
          *(void *)(a1 + 376) = *(void *)(a2 + 376);
          (**(void (***)(uint64_t, uint64_t))(v133 - 8))(a1 + 344, a2 + 344);
          *(unsigned char *)(a1 + 392) = 0;
        }
      }
      uint64_t v151 = *(void **)(a1 + 400);
      uint64_t v152 = *(void **)(a2 + 400);
      *(void *)(a1 + 400) = v152;
      id v153 = v152;

      int v154 = (long long *)(a1 + 408);
      uint64_t v155 = (long long *)(a2 + 408);
      int v156 = *(unsigned __int8 *)(a2 + 424);
      if (*(unsigned __int8 *)(a1 + 424) == 255)
      {
        if (v156 == 255)
        {
          long long v177 = *v155;
          *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
          long long *v154 = v177;
        }
        else
        {
          char v162 = *(void **)(a2 + 408);
          uint64_t v163 = *(void *)(a2 + 416);
          outlined copy of AccessibilityRotorEntryRange(v162, v163, *(unsigned char *)(a2 + 424));
          *(void *)(a1 + 408) = v162;
          *(void *)(a1 + 416) = v163;
          *(unsigned char *)(a1 + 424) = v156;
        }
      }
      else if (v156 == 255)
      {
        outlined destroy of AccessibilityRotorEntryRange(a1 + 408);
        char v164 = *(unsigned char *)(a2 + 424);
        long long *v154 = *v155;
        *(unsigned char *)(a1 + 424) = v164;
      }
      else
      {
        uint64_t v157 = *(void **)(a2 + 408);
        uint64_t v158 = *(void *)(a2 + 416);
        outlined copy of AccessibilityRotorEntryRange(v157, v158, *(unsigned char *)(a2 + 424));
        uint64_t v159 = *(void **)(a1 + 408);
        uint64_t v160 = *(void *)(a1 + 416);
        *(void *)(a1 + 408) = v157;
        *(void *)(a1 + 416) = v158;
        char v161 = *(unsigned char *)(a1 + 424);
        *(unsigned char *)(a1 + 424) = v156;
        outlined consume of AccessibilityRotorEntryRange(v159, v160, v161);
      }
      uint64_t v178 = *(void *)(a2 + 440);
      *(void *)(a1 + 432) = *(void *)(a2 + 432);
      *(void *)(a1 + 440) = v178;
      swift_retain();
      swift_release();
      uint64_t v179 = *(void *)(a2 + 448);
      *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
      *(void *)(a1 + 448) = v179;
    }
    else
    {
      outlined destroy of AccessibilityListRotorEntry(a1 + 344);
      long long v135 = *(_OWORD *)(a2 + 392);
      long long v137 = *v131;
      long long v136 = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 392) = v135;
      *uint64_t v130 = v137;
      *(_OWORD *)(a1 + 360) = v136;
      long long v139 = *(_OWORD *)(a2 + 424);
      long long v138 = *(_OWORD *)(a2 + 440);
      long long v140 = *(_OWORD *)(a2 + 408);
      *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
      *(_OWORD *)(a1 + 424) = v139;
      *(_OWORD *)(a1 + 440) = v138;
      *(_OWORD *)(a1 + 408) = v140;
    }
  }
  else if (v132)
  {
    if (*(unsigned char *)(a2 + 392) == 1)
    {
      uint64_t v165 = *(void *)(a2 + 368);
      *(void *)(a1 + 368) = v165;
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      (**(void (***)(uint64_t, uint64_t))(v165 - 8))(a1 + 344, a2 + 344);
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      *(unsigned char *)(a1 + 392) = 1;
    }
    else if (*(unsigned char *)(a2 + 392))
    {
      long long v166 = *v131;
      long long v167 = *(_OWORD *)(a2 + 360);
      long long v168 = *(_OWORD *)(a2 + 376);
      *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
      *(_OWORD *)(a1 + 360) = v167;
      *(_OWORD *)(a1 + 376) = v168;
      *uint64_t v130 = v166;
    }
    else
    {
      uint64_t v134 = *(void *)(a2 + 368);
      *(void *)(a1 + 368) = v134;
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      (**(void (***)(uint64_t, uint64_t))(v134 - 8))(a1 + 344, a2 + 344);
      *(unsigned char *)(a1 + 392) = 0;
    }
    id v169 = *(void **)(a2 + 400);
    *(void *)(a1 + 400) = v169;
    int v170 = *(unsigned __int8 *)(a2 + 424);
    id v171 = v169;
    if (v170 == 255)
    {
      long long v174 = *(_OWORD *)(a2 + 408);
      *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
      *(_OWORD *)(a1 + 408) = v174;
    }
    else
    {
      uint64_t v172 = *(void **)(a2 + 408);
      uint64_t v173 = *(void *)(a2 + 416);
      outlined copy of AccessibilityRotorEntryRange(v172, v173, v170);
      *(void *)(a1 + 408) = v172;
      *(void *)(a1 + 416) = v173;
      *(unsigned char *)(a1 + 424) = v170;
    }
    uint64_t v175 = *(void *)(a2 + 440);
    *(void *)(a1 + 432) = *(void *)(a2 + 432);
    *(void *)(a1 + 440) = v175;
    uint64_t v176 = *(void *)(a2 + 448);
    *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
    *(void *)(a1 + 448) = v176;
    swift_retain();
  }
  else
  {
    long long v141 = *v131;
    long long v142 = *(_OWORD *)(a2 + 360);
    long long v143 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v143;
    *uint64_t v130 = v141;
    *(_OWORD *)(a1 + 360) = v142;
    long long v144 = *(_OWORD *)(a2 + 408);
    long long v145 = *(_OWORD *)(a2 + 424);
    long long v146 = *(_OWORD *)(a2 + 440);
    *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
    *(_OWORD *)(a1 + 424) = v145;
    *(_OWORD *)(a1 + 440) = v146;
    *(_OWORD *)(a1 + 408) = v144;
  }
  uint64_t v180 = (_OWORD *)(a1 + 464);
  uint64_t v181 = (long long *)(a2 + 464);
  uint64_t v182 = *(void *)(a2 + 552);
  if (*(void *)(a1 + 552))
  {
    if (v182)
    {
      if (a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 464);
        if (*(unsigned char *)(a2 + 512) == 1)
        {
          uint64_t v197 = *(void *)(a2 + 488);
          *(void *)(a1 + 488) = v197;
          *(void *)(a1 + 496) = *(void *)(a2 + 496);
          (**(void (***)(uint64_t, uint64_t))(v197 - 8))(a1 + 464, a2 + 464);
          *(void *)(a1 + 504) = *(void *)(a2 + 504);
          *(unsigned char *)(a1 + 512) = 1;
        }
        else if (*(unsigned char *)(a2 + 512))
        {
          long long v198 = *v181;
          long long v199 = *(_OWORD *)(a2 + 480);
          long long v200 = *(_OWORD *)(a2 + 496);
          *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
          *(_OWORD *)(a1 + 480) = v199;
          *(_OWORD *)(a1 + 496) = v200;
          *uint64_t v180 = v198;
        }
        else
        {
          uint64_t v183 = *(void *)(a2 + 488);
          *(void *)(a1 + 488) = v183;
          *(void *)(a1 + 496) = *(void *)(a2 + 496);
          (**(void (***)(uint64_t, uint64_t))(v183 - 8))(a1 + 464, a2 + 464);
          *(unsigned char *)(a1 + 512) = 0;
        }
      }
      long long v201 = *(void **)(a1 + 520);
      long long v202 = *(void **)(a2 + 520);
      *(void *)(a1 + 520) = v202;
      id v203 = v202;

      CGRect v204 = (long long *)(a1 + 528);
      CGRect v205 = (long long *)(a2 + 528);
      int v206 = *(unsigned __int8 *)(a2 + 544);
      if (*(unsigned __int8 *)(a1 + 544) == 255)
      {
        if (v206 == 255)
        {
          long long v227 = *v205;
          *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
          *CGRect v204 = v227;
        }
        else
        {
          long long v212 = *(void **)(a2 + 528);
          uint64_t v213 = *(void *)(a2 + 536);
          outlined copy of AccessibilityRotorEntryRange(v212, v213, *(unsigned char *)(a2 + 544));
          *(void *)(a1 + 528) = v212;
          *(void *)(a1 + 536) = v213;
          *(unsigned char *)(a1 + 544) = v206;
        }
      }
      else if (v206 == 255)
      {
        outlined destroy of AccessibilityRotorEntryRange(a1 + 528);
        char v214 = *(unsigned char *)(a2 + 544);
        *CGRect v204 = *v205;
        *(unsigned char *)(a1 + 544) = v214;
      }
      else
      {
        CGRect v207 = *(void **)(a2 + 528);
        uint64_t v208 = *(void *)(a2 + 536);
        outlined copy of AccessibilityRotorEntryRange(v207, v208, *(unsigned char *)(a2 + 544));
        CGRect v209 = *(void **)(a1 + 528);
        uint64_t v210 = *(void *)(a1 + 536);
        *(void *)(a1 + 528) = v207;
        *(void *)(a1 + 536) = v208;
        char v211 = *(unsigned char *)(a1 + 544);
        *(unsigned char *)(a1 + 544) = v206;
        outlined consume of AccessibilityRotorEntryRange(v209, v210, v211);
      }
      uint64_t v228 = *(void *)(a2 + 560);
      *(void *)(a1 + 552) = *(void *)(a2 + 552);
      *(void *)(a1 + 560) = v228;
      swift_retain();
      swift_release();
      uint64_t v229 = *(void *)(a2 + 568);
      *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
      *(void *)(a1 + 568) = v229;
    }
    else
    {
      outlined destroy of AccessibilityListRotorEntry(a1 + 464);
      long long v185 = *(_OWORD *)(a2 + 512);
      long long v187 = *v181;
      long long v186 = *(_OWORD *)(a2 + 480);
      *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
      *(_OWORD *)(a1 + 512) = v185;
      *uint64_t v180 = v187;
      *(_OWORD *)(a1 + 480) = v186;
      long long v189 = *(_OWORD *)(a2 + 544);
      long long v188 = *(_OWORD *)(a2 + 560);
      long long v190 = *(_OWORD *)(a2 + 528);
      *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
      *(_OWORD *)(a1 + 544) = v189;
      *(_OWORD *)(a1 + 560) = v188;
      *(_OWORD *)(a1 + 528) = v190;
    }
  }
  else if (v182)
  {
    if (*(unsigned char *)(a2 + 512) == 1)
    {
      uint64_t v215 = *(void *)(a2 + 488);
      *(void *)(a1 + 488) = v215;
      *(void *)(a1 + 496) = *(void *)(a2 + 496);
      (**(void (***)(uint64_t, uint64_t))(v215 - 8))(a1 + 464, a2 + 464);
      *(void *)(a1 + 504) = *(void *)(a2 + 504);
      *(unsigned char *)(a1 + 512) = 1;
    }
    else if (*(unsigned char *)(a2 + 512))
    {
      long long v216 = *v181;
      long long v217 = *(_OWORD *)(a2 + 480);
      long long v218 = *(_OWORD *)(a2 + 496);
      *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
      *(_OWORD *)(a1 + 480) = v217;
      *(_OWORD *)(a1 + 496) = v218;
      *uint64_t v180 = v216;
    }
    else
    {
      uint64_t v184 = *(void *)(a2 + 488);
      *(void *)(a1 + 488) = v184;
      *(void *)(a1 + 496) = *(void *)(a2 + 496);
      (**(void (***)(uint64_t, uint64_t))(v184 - 8))(a1 + 464, a2 + 464);
      *(unsigned char *)(a1 + 512) = 0;
    }
    char v219 = *(void **)(a2 + 520);
    *(void *)(a1 + 520) = v219;
    int v220 = *(unsigned __int8 *)(a2 + 544);
    id v221 = v219;
    if (v220 == 255)
    {
      long long v224 = *(_OWORD *)(a2 + 528);
      *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
      *(_OWORD *)(a1 + 528) = v224;
    }
    else
    {
      v222 = *(void **)(a2 + 528);
      uint64_t v223 = *(void *)(a2 + 536);
      outlined copy of AccessibilityRotorEntryRange(v222, v223, v220);
      *(void *)(a1 + 528) = v222;
      *(void *)(a1 + 536) = v223;
      *(unsigned char *)(a1 + 544) = v220;
    }
    uint64_t v225 = *(void *)(a2 + 560);
    *(void *)(a1 + 552) = *(void *)(a2 + 552);
    *(void *)(a1 + 560) = v225;
    uint64_t v226 = *(void *)(a2 + 568);
    *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
    *(void *)(a1 + 568) = v226;
    swift_retain();
  }
  else
  {
    long long v191 = *v181;
    long long v192 = *(_OWORD *)(a2 + 480);
    long long v193 = *(_OWORD *)(a2 + 512);
    *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
    *(_OWORD *)(a1 + 512) = v193;
    *uint64_t v180 = v191;
    *(_OWORD *)(a1 + 480) = v192;
    long long v194 = *(_OWORD *)(a2 + 528);
    long long v195 = *(_OWORD *)(a2 + 544);
    long long v196 = *(_OWORD *)(a2 + 560);
    *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
    *(_OWORD *)(a1 + 544) = v195;
    *(_OWORD *)(a1 + 560) = v196;
    *(_OWORD *)(a1 + 528) = v194;
  }
  return a1;
}

void *__swift_memcpy577_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x241uLL);
}

uint64_t assignWithTake for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  outlined consume of Text.Suffix.Storage(v4, v5, v6);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  uint64_t v9 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);

  uint64_t v10 = (_OWORD *)(a2 + 80);
  int v11 = *(unsigned __int8 *)(a1 + 96);
  if (v11 != 255)
  {
    int v12 = *(unsigned __int8 *)(a2 + 96);
    if (v12 != 255)
    {
      long long v13 = *(void **)(a1 + 80);
      uint64_t v14 = *(void *)(a1 + 88);
      *(_OWORD *)(a1 + 80) = *v10;
      *(unsigned char *)(a1 + 96) = v12;
      outlined consume of AccessibilityRotorEntryRange(v13, v14, v11);
      goto LABEL_6;
    }
    outlined destroy of AccessibilityRotorEntryRange(a1 + 80);
  }
  *(_OWORD *)(a1 + 80) = *v10;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
LABEL_6:
  long long v15 = (void *)(a2 + 312);
  long long v16 = (_OWORD *)(a1 + 104);
  id v17 = (_OWORD *)(a2 + 104);
  if (!*(void *)(a1 + 192))
  {
LABEL_14:
    long long v25 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v25;
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    long long v26 = *(_OWORD *)(a2 + 120);
    *long long v16 = *v17;
    *(_OWORD *)(a1 + 120) = v26;
    long long v27 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v27;
    goto LABEL_18;
  }
  if (!*(void *)(a2 + 192))
  {
    outlined destroy of AccessibilityListRotorEntry(a1 + 104);
    goto LABEL_14;
  }
  if (a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 104);
    long long v18 = *(_OWORD *)(a2 + 120);
    *long long v16 = *v17;
    *(_OWORD *)(a1 + 120) = v18;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  }
  long long v19 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);

  int v20 = (_OWORD *)(a2 + 168);
  int v21 = *(unsigned __int8 *)(a1 + 184);
  if (v21 == 255) {
    goto LABEL_16;
  }
  int v22 = *(unsigned __int8 *)(a2 + 184);
  if (v22 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 168);
LABEL_16:
    *(_OWORD *)(a1 + 168) = *v20;
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    goto LABEL_17;
  }
  long long v23 = *(void **)(a1 + 168);
  uint64_t v24 = *(void *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *v20;
  *(unsigned char *)(a1 + 184) = v22;
  outlined consume of AccessibilityRotorEntryRange(v23, v24, v21);
LABEL_17:
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  swift_release();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
LABEL_18:
  char v28 = (_OWORD *)(a1 + 224);
  long long v29 = (_OWORD *)(a2 + 224);
  if (!*(void *)(a1 + 312))
  {
LABEL_26:
    long long v37 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v37;
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
    long long v38 = *(_OWORD *)(a2 + 240);
    *char v28 = *v29;
    *(_OWORD *)(a1 + 240) = v38;
    long long v39 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v39;
    goto LABEL_30;
  }
  if (!*v15)
  {
    outlined destroy of AccessibilityListRotorEntry(a1 + 224);
    goto LABEL_26;
  }
  if (a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 224);
    long long v30 = *(_OWORD *)(a2 + 240);
    *char v28 = *v29;
    *(_OWORD *)(a1 + 240) = v30;
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  }
  long long v31 = *(void **)(a1 + 280);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);

  uint64_t v32 = (_OWORD *)(a2 + 288);
  int v33 = *(unsigned __int8 *)(a1 + 304);
  if (v33 == 255) {
    goto LABEL_28;
  }
  int v34 = *(unsigned __int8 *)(a2 + 304);
  if (v34 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 288);
LABEL_28:
    *(_OWORD *)(a1 + 288) = *v32;
    *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
    goto LABEL_29;
  }
  long long v35 = *(void **)(a1 + 288);
  uint64_t v36 = *(void *)(a1 + 296);
  *(_OWORD *)(a1 + 288) = *v32;
  *(unsigned char *)(a1 + 304) = v34;
  outlined consume of AccessibilityRotorEntryRange(v35, v36, v33);
LABEL_29:
  *(_OWORD *)(a1 + 312) = *(_OWORD *)v15;
  swift_release();
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
LABEL_30:
  long long v40 = (_OWORD *)(a1 + 344);
  long long v41 = (_OWORD *)(a2 + 344);
  if (!*(void *)(a1 + 432))
  {
LABEL_38:
    long long v50 = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = v50;
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
    long long v51 = *(_OWORD *)(a2 + 360);
    _OWORD *v40 = *v41;
    *(_OWORD *)(a1 + 360) = v51;
    long long v52 = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 392) = v52;
    goto LABEL_42;
  }
  if (!*(void *)(a2 + 432))
  {
    outlined destroy of AccessibilityListRotorEntry(a1 + 344);
    goto LABEL_38;
  }
  if (a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 344);
    long long v42 = *(_OWORD *)(a2 + 360);
    _OWORD *v40 = *v41;
    *(_OWORD *)(a1 + 360) = v42;
    *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
    *(unsigned char *)(a1 + 392) = *(unsigned char *)(a2 + 392);
  }
  long long v43 = *(void **)(a1 + 400);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);

  long long v44 = (_OWORD *)(a1 + 408);
  long long v45 = (_OWORD *)(a2 + 408);
  int v46 = *(unsigned __int8 *)(a1 + 424);
  if (v46 == 255) {
    goto LABEL_40;
  }
  int v47 = *(unsigned __int8 *)(a2 + 424);
  if (v47 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 408);
LABEL_40:
    *long long v44 = *v45;
    *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
    goto LABEL_41;
  }
  long long v48 = *(void **)(a1 + 408);
  uint64_t v49 = *(void *)(a1 + 416);
  *long long v44 = *v45;
  *(unsigned char *)(a1 + 424) = v47;
  outlined consume of AccessibilityRotorEntryRange(v48, v49, v46);
LABEL_41:
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  swift_release();
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(unsigned char *)(a1 + 456) = *(unsigned char *)(a2 + 456);
LABEL_42:
  id v53 = (_OWORD *)(a1 + 464);
  unint64_t v54 = (_OWORD *)(a2 + 464);
  if (*(void *)(a1 + 552))
  {
    if (*(void *)(a2 + 552))
    {
      if (a1 != a2)
      {
        outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1 + 464);
        long long v55 = *(_OWORD *)(a2 + 480);
        *id v53 = *v54;
        *(_OWORD *)(a1 + 480) = v55;
        *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
        *(unsigned char *)(a1 + 512) = *(unsigned char *)(a2 + 512);
      }
      int v56 = *(void **)(a1 + 520);
      *(void *)(a1 + 520) = *(void *)(a2 + 520);

      id v57 = (_OWORD *)(a2 + 528);
      int v58 = *(unsigned __int8 *)(a1 + 544);
      if (v58 != 255)
      {
        int v59 = *(unsigned __int8 *)(a2 + 544);
        if (v59 != 255)
        {
          uint64_t v60 = *(void **)(a1 + 528);
          uint64_t v61 = *(void *)(a1 + 536);
          *(_OWORD *)(a1 + 528) = *v57;
          *(unsigned char *)(a1 + 544) = v59;
          outlined consume of AccessibilityRotorEntryRange(v60, v61, v58);
LABEL_53:
          *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
          swift_release();
          *(void *)(a1 + 568) = *(void *)(a2 + 568);
          *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
          return a1;
        }
        outlined destroy of AccessibilityRotorEntryRange(a1 + 528);
      }
      *(_OWORD *)(a1 + 528) = *v57;
      *(unsigned char *)(a1 + 544) = *(unsigned char *)(a2 + 544);
      goto LABEL_53;
    }
    outlined destroy of AccessibilityListRotorEntry(a1 + 464);
  }
  long long v62 = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 544) = v62;
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(unsigned char *)(a1 + 576) = *(unsigned char *)(a2 + 576);
  long long v63 = *(_OWORD *)(a2 + 480);
  *id v53 = *v54;
  *(_OWORD *)(a1 + 480) = v63;
  long long v64 = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 512) = v64;
  return a1;
}

uint64_t getEnumTagSinglePayload for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 577)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 568) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(unsigned char *)(result + 576) = 0;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 577) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 2 * -a2;
      *(void *)(result + 24) = 0;
      return result;
    }
    *(unsigned char *)(result + 577) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for MatchingVisitor #1 in AccessibilityRotorInfo.resolveEntry(for:range:on:previous:next:)()
{
  return &unk_1ED4382A0;
}

void *type metadata accessor for AccumulatingVisitor #1 in closure #1 in AccessibilityRotorInfo.resolveAllEntries()()
{
  return &unk_1ED438448;
}

void *type metadata accessor for IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)()
{
  return &unk_1ED4383B8;
}

void destroy for AccessibilityNavigationRotorEntry(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 1u) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }

  int v2 = *(unsigned __int8 *)(a1 + 80);
  if (v2 != 255) {
    outlined consume of AccessibilityRotorEntryRange(*(id *)(a1 + 64), *(void *)(a1 + 72), v2);
  }
  swift_release();

  int v3 = *(void **)(a1 + 128);
}

uint64_t initializeWithCopy for AccessibilityNavigationRotorEntry(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48) == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    char v6 = 1;
  }
  else
  {
    if (!*(unsigned char *)(a2 + 48))
    {
      long long v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 48) = 0;
      goto LABEL_7;
    }
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    char v6 = *(unsigned char *)(a2 + 48);
  }
  *(unsigned char *)(a1 + 48) = v6;
LABEL_7:
  uint64_t v8 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v8;
  int v9 = *(unsigned __int8 *)(a2 + 80);
  id v10 = v8;
  if (v9 == 255)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  }
  else
  {
    int v11 = *(void **)(a2 + 64);
    uint64_t v12 = *(void *)(a2 + 72);
    outlined copy of AccessibilityRotorEntryRange(v11, v12, v9);
    *(void *)(a1 + 64) = v11;
    *(void *)(a1 + 72) = v12;
    *(unsigned char *)(a1 + 80) = v9;
  }
  uint64_t v13 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  long long v15 = *(void **)(a2 + 120);
  uint64_t v14 = *(void **)(a2 + 128);
  *(void *)(a1 + 120) = v15;
  *(void *)(a1 + 128) = v14;
  swift_retain();
  id v16 = v15;
  id v17 = v14;
  return a1;
}

uint64_t assignWithCopy for AccessibilityNavigationRotorEntry(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1);
    if (*((unsigned char *)a2 + 48) == 1)
    {
      uint64_t v5 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v5 - 8))(a1, a2);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(unsigned char *)(a1 + 48) = 1;
    }
    else if (*((unsigned char *)a2 + 48))
    {
      long long v6 = *a2;
      long long v7 = a2[1];
      long long v8 = a2[2];
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)a1 = v6;
    }
    else
    {
      uint64_t v4 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 48) = 0;
    }
  }
  int v9 = *(void **)(a1 + 56);
  id v10 = (void *)*((void *)a2 + 7);
  *(void *)(a1 + 56) = v10;
  id v11 = v10;

  uint64_t v12 = (long long *)(a1 + 64);
  uint64_t v13 = a2 + 4;
  int v14 = *((unsigned __int8 *)a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v14 == 255)
    {
      long long v23 = *v13;
      *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
      *uint64_t v12 = v23;
    }
    else
    {
      int v20 = (void *)*((void *)a2 + 8);
      uint64_t v21 = *((void *)a2 + 9);
      outlined copy of AccessibilityRotorEntryRange(v20, v21, *((unsigned char *)a2 + 80));
      *(void *)(a1 + 64) = v20;
      *(void *)(a1 + 72) = v21;
      *(unsigned char *)(a1 + 80) = v14;
    }
  }
  else if (v14 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 64);
    char v22 = *((unsigned char *)a2 + 80);
    *uint64_t v12 = *v13;
    *(unsigned char *)(a1 + 80) = v22;
  }
  else
  {
    long long v15 = (void *)*((void *)a2 + 8);
    uint64_t v16 = *((void *)a2 + 9);
    outlined copy of AccessibilityRotorEntryRange(v15, v16, *((unsigned char *)a2 + 80));
    id v17 = *(void **)(a1 + 64);
    uint64_t v18 = *(void *)(a1 + 72);
    *(void *)(a1 + 64) = v15;
    *(void *)(a1 + 72) = v16;
    char v19 = *(unsigned char *)(a1 + 80);
    *(unsigned char *)(a1 + 80) = v14;
    outlined consume of AccessibilityRotorEntryRange(v17, v18, v19);
  }
  uint64_t v24 = *((void *)a2 + 12);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(void *)(a1 + 96) = v24;
  swift_retain();
  swift_release();
  uint64_t v25 = *((void *)a2 + 13);
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(void *)(a1 + 104) = v25;
  long long v26 = (void *)*((void *)a2 + 15);
  long long v27 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v26;
  id v28 = v26;

  long long v29 = *(void **)(a1 + 128);
  long long v30 = (void *)*((void *)a2 + 16);
  *(void *)(a1 + 128) = v30;
  id v31 = v30;

  return a1;
}

uint64_t assignWithTake for AccessibilityNavigationRotorEntry(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AccessibilityRotorEntryElementSpecifier<AnyHashable>(a1);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  }
  uint64_t v5 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  long long v6 = (_OWORD *)(a2 + 64);
  int v7 = *(unsigned __int8 *)(a1 + 80);
  if (v7 == 255) {
    goto LABEL_7;
  }
  int v8 = *(unsigned __int8 *)(a2 + 80);
  if (v8 == 255)
  {
    outlined destroy of AccessibilityRotorEntryRange(a1 + 64);
LABEL_7:
    *(_OWORD *)(a1 + 64) = *v6;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    goto LABEL_8;
  }
  int v9 = *(void **)(a1 + 64);
  uint64_t v10 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *v6;
  *(unsigned char *)(a1 + 80) = v8;
  outlined consume of AccessibilityRotorEntryRange(v9, v10, v7);
LABEL_8:
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  id v11 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);

  uint64_t v12 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);

  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityNavigationRotorEntry(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityNavigationRotorEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 88) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityNavigationRotorEntry()
{
  return &type metadata for AccessibilityNavigationRotorEntry;
}

ValueMetadata *type metadata accessor for AccessibilityListRotorEntry()
{
  return &type metadata for AccessibilityListRotorEntry;
}

uint64_t type metadata accessor for IndexWrappingVisitor in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined assign with copy of AccessibilityListRotorEntry?(uint64_t a1, uint64_t a2)
{
  _sypSgMaTm_6(0, &lazy cache variable for type metadata for AccessibilityListRotorEntry?, (uint64_t)&type metadata for AccessibilityListRotorEntry, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for IndexWrappingVisitor in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for IndexWrappingVisitor in IndexingWrappingGenerator #1 in closure #1 in AccessibilityRotorInfo.readEntryList(_:)(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 8) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187E45C3CLL);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 8] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t closure #1 in AccessibilityRotorInfo.readEntryList(_:)partial apply()
{
  return partial apply for closure #1 in AccessibilityRotorInfo.readEntryList(_:)();
}

uint64_t closure #1 in closure #1 in ModifierKeySource.values.getter(uint64_t a1)
{
  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>.Continuation.YieldResult, MEMORY[0x1E4FBD010]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v8 - v5;
  v8[1] = a1;
  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>.Continuation, MEMORY[0x1E4FBD038]);
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t specialized closure #2 in closure #1 in ModifierKeySource.values.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1F4188790](v7 - 8);
  size_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2, v3);
  type metadata accessor for MainActor();
  uint64_t v11 = static MainActor.shared.getter();
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = swift_allocObject();
  uint64_t v14 = MEMORY[0x1E4FBCFD8];
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v14;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v13 + v12, v6, v3);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #2 in closure #1 in ModifierKeySource.values.getter, v13);
  return swift_release();
}

uint64_t specialized closure #1 in closure #2 in closure #1 in ModifierKeySource.values.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  type metadata accessor for MainActor();
  *(void *)(v4 + 24) = static MainActor.shared.getter();
  uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](specialized closure #1 in closure #2 in closure #1 in ModifierKeySource.values.getter, v6, v5);
}

uint64_t specialized closure #1 in closure #2 in closure #1 in ModifierKeySource.values.getter()
{
  swift_release();
  if (one-time initialization token for monitor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = static DefaultModifierKeySource.monitor;
  uint64_t v6 = *(void *)(static DefaultModifierKeySource.monitor + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized Dictionary._Variant.removeValue(forKey:)(v1);
  *(void *)(v2 + 16) = v6;
  swift_bridgeObjectRelease();
  if (v3) {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  }
  swift_release();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t ModifierKeyMonitor.value.didset(uint64_t result)
{
  if (*(void *)(v1 + 24) == result) {
    return result;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      return result;
    }
    if (v12 >= v7) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v3 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v3 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v13 = *(void *)(v3 + 8 * v8);
        if (!v13)
        {
          int64_t v8 = v12 + 3;
          if (v12 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v13 = *(void *)(v3 + 8 * v8);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_6:
    uint64_t v11 = *(void (**)(uint64_t *))(*(void *)(v2 + 56) + 16 * v10);
    uint64_t v15 = *(void *)(v1 + 24);
    swift_retain();
    v11(&v15);
    uint64_t result = swift_release();
  }
  int64_t v14 = v12 + 4;
  if (v14 < v7)
  {
    unint64_t v13 = *(void *)(v3 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v8 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_28;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v13 = *(void *)(v3 + 8 * v8);
        ++v14;
        if (v13) {
          goto LABEL_23;
        }
      }
    }
    int64_t v8 = v14;
    goto LABEL_23;
  }
LABEL_24:

  return swift_release();
}

uint64_t ModifierKeyMonitor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_187E462F4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned EventModifiers) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

ValueMetadata *type metadata accessor for DefaultModifierKeySource()
{
  return &type metadata for DefaultModifierKeySource;
}

uint64_t sub_187E46368()
{
  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>.Continuation, MEMORY[0x1E4FBD038]);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ModifierKeySource.values.getter(uint64_t a1)
{
  type metadata accessor for AsyncStream<EventModifiers>.Continuation.BufferingPolicy(0, &lazy cache variable for type metadata for AsyncStream<EventModifiers>.Continuation, MEMORY[0x1E4FBD038]);

  return closure #1 in closure #1 in ModifierKeySource.values.getter(a1);
}

uint64_t sub_187E464A0()
{
  uint64_t v1 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #2 in closure #1 in ModifierKeySource.values.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return specialized closure #2 in closure #1 in ModifierKeySource.values.getter(a1, v4);
}

uint64_t sub_187E465A0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #2 in closure #1 in ModifierKeySource.values.getter(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  int64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *int64_t v8 = v2;
  v8[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return specialized closure #1 in closure #2 in closure #1 in ModifierKeySource.values.getter(a1, v5, v6, v7);
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d4UI17fg29C14updateChildrenyySayACGFAA8H57IDVACcfu_33_2f504ee4f610784b00e9281caac81f7cAcGTf3nnnpk_nTf1cn_nTm(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
    if (!v2) {
      return (char *)v3;
    }
    uint64_t v10 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v10;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        uint64_t v6 = (char *)MEMORY[0x18C117680](v5, a1);
      }
      else {
        uint64_t v6 = (char *)*(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = *(void *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];

      unint64_t v9 = *(void *)(v10 + 16);
      unint64_t v8 = *(void *)(v10 + 24);
      if (v9 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1);
      }
      ++v5;
      *(void *)(v10 + 16) = v9 + 1;
      *(void *)(v10 + 8 * v9 + 32) = v7;
      if (v2 == v5) {
        return (char *)v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI13ViewResponderCG_AF7WeakBoxVyAHGs5NeverOTg503_s7d4UI13fg6CSgAA7hi16VyACGIeggr_AcGs5j95OIegnrzr_TR03_s7a41UI28AccessibilityGeometryStorageC20updatec20RespondersyySayAA0G9d6CGFAA7eF13O21AFGAFSgcfu_Tf3nnnpf_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
    if (!v2) {
      return (void *)v3;
    }
    uint64_t v9 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v9;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        MEMORY[0x18C117680](v5, a1);
      }
      else {
        swift_retain();
      }
      swift_weakInit();
      swift_weakAssign();
      swift_release();
      uint64_t v9 = v3;
      unint64_t v7 = *(void *)(v3 + 16);
      unint64_t v6 = *(void *)(v3 + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1);
        uint64_t v3 = v9;
      }
      ++v5;
      *(void *)(v3 + 16) = v7 + 1;
      outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)v8, v3 + 8 * v7 + 32, (unint64_t *)&lazy cache variable for type metadata for WeakBox<ViewResponder>, MEMORY[0x1E4F3F7E8], MEMORY[0x1E4F41720]);
      if (v2 == v5) {
        return (void *)v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void (**)(long long *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    *((void *)&v12 + 1) = swift_getObjectType();
    *(void *)&long long v11 = a2;
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  swift_unknownObjectRetain();
  v9(&v11, a3, a4, a5);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)&v11, (unint64_t *)&lazy cache variable for type metadata for Any?);
}

uint64_t specialized static Text.Accessibility.drag<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)();
  v4._countAndFlagsBits = a3;
  v4._object = (void *)0xE500000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = String.init<A>(_:)();
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v6);
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  unint64_t v8 = self;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v9 = objc_msgSend(v8, sel_bundleForClass_, ObjCClassFromMetadata);
  uint64_t v10 = Text.init(_:tableName:bundle:comment:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

void AccessibilityNode.representedElement.getter()
{
  AccessibilityNode.platformElement.getter();
  if (!v0)
  {
    id v1 = v2;
  }
}

uint64_t closure #1 in variable initialization expression of AccessibilityNode.environment@<X0>(uint64_t *a1@<X8>)
{
  EnvironmentValues.init()();
  uint64_t v2 = *a1;
  uint64_t v3 = one-time initialization token for configuredForPlatform;
  uint64_t result = swift_retain();
  if (v3 != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v5 = static EnvironmentValues.configuredForPlatform;
  if (v2)
  {
    uint64_t result = swift_release();
    if (!v5 || v2 != v5) {
      return EnvironmentValues._configureForPlatform(traitCollection:)(0);
    }
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    return EnvironmentValues.plist.setter();
  }
  return result;
}

id AccessibilityNode.__deallocating_deinit()
{
  AccessibilityNode.platformElement.getter();
  if (v1)
  {
    uint64_t v2 = v1;
    objc_msgSend(v1, sel_setAccessibilityNodeForPlatformElement_, 0);
  }
  if (objc_msgSend(v0, sel_respondsToSelector_, sel__accessibilityUnregister)) {
    objc_msgSend(v0, sel__accessibilityUnregister);
  }
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for AccessibilityNode();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

Swift::Void __swiftcall AccessibilityNode.updatePlatformProperties()()
{
  AccessibilityNode.platformElement.getter();
  if (v1)
  {
    uint64_t v2 = v1;
    AccessibilityNode.applyProperties(to:includingRelations:)(v1, 1);
  }
  AccessibilityNode.visibility.getter((int *)v10);
  v10[3] = v10[0];
  AccessibilityNullableOptionSet<>.resolved.getter();
  if (v11 <= 4u && ((1 << v11) & 0x16) != 0)
  {
    objc_super v4 = (unint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
    swift_beginAccess();
    unint64_t v5 = *v4;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (v6) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v6)
      {
LABEL_9:
        if (v6 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v6; ++i)
        {
          if ((v5 & 0xC000000000000001) != 0) {
            id v8 = (id)MEMORY[0x18C117680](i, v5);
          }
          else {
            id v8 = *(id *)(v5 + 8 * i + 32);
          }
          id v9 = v8;
          AccessibilityNode.updatePlatformProperties()();
        }
      }
    }
    swift_bridgeObjectRelease_n();
  }
}

void AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unsigned __int8 v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v23 = *a1;
  AccessibilityProperties.traits.getter();
  long long v23 = aBlock;
  char v22 = 14;
  if (AccessibilityNullableOptionSet<>.subscript.getter())
  {
    LOBYTE(v23) = 4;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v23, (char *)&aBlock);
    if (aBlock != 3)
    {
      if (MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
      {
        self;
        if (swift_dynamicCastObjCClass())
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
          uint64_t v16 = static OS_dispatch_queue.main.getter();
          uint64_t v12 = swift_allocObject();
          *(void *)(v12 + 16) = 0;
          *(unsigned char *)(v12 + 24) = 0;
          int v20 = partial apply for closure #1 in AccessibilityNode.scheduleNotifyForAttachmentAddition(of:);
          uint64_t v21 = v12;
          *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
          *((void *)&aBlock + 1) = 1107296256;
          uint64_t v18 = thunk for @escaping @callee_guaranteed () -> ();
          char v19 = &block_descriptor_78;
          unint64_t v13 = _Block_copy(&aBlock);
          swift_release();
          static DispatchQoS.unspecified.getter();
          *(void *)&long long aBlock = MEMORY[0x1E4FBC860];
          lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
          _sSay8Dispatch0A13WorkItemFlagsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
          dispatch thunk of SetAlgebra.init<A>(_:)();
          int64_t v14 = (void *)v16;
          MEMORY[0x18C116870](0, v11, v7, v13);
          swift_unknownObjectRelease();
          _Block_release(v13);

          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        }
        else
        {
          swift_unknownObjectRelease();
        }
      }
    }
  }
}

uint64_t AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)(uint64_t *a1, long long *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unsigned __int8 v11 = (char *)&aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[1];
  uint64_t aBlock = *a1;
  uint64_t v19 = v12;
  long long v24 = *a2;
  unint64_t v13 = AccessibilityNode.notifications(from:to:)(&aBlock, (uint64_t *)&v24);
  if (v13[2])
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    int64_t v14 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v13;
    char v22 = partial apply for closure #1 in AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:);
    uint64_t v23 = v15;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v19 = 1107296256;
    int v20 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v21 = &block_descriptor_52;
    uint64_t v16 = _Block_copy(&aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    uint64_t aBlock = MEMORY[0x1E4FBC860];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    _sSay8Dispatch0A13WorkItemFlagsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x18C116870](0, v11, v7, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t AccessibilityNode.attachmentIndex(of:)(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) == 255)
  {
    swift_beginAccess();
    return 0;
  }
  else
  {
    uint64_t v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
    swift_beginAccess();
    uint64_t v4 = *v3;
    uint64_t v5 = *(void *)(*v3 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v2 = 0;
      uint64_t v6 = (unsigned __int8 *)(v4 + 64);
      do
      {
        int v7 = *v6;
        v6 += 40;
        if (v7 != 255 && (static AccessibilityAttachmentToken.== infix(_:_:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v2;
        }
        ++v2;
      }
      while (v5 != v2);
      swift_bridgeObjectRelease();
    }
    return 0;
  }
}

Swift::Void __swiftcall AccessibilityNode.updateChildren(_:)(Swift::OpaquePointer a1)
{
  unint64_t v4 = v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children;
  swift_beginAccess();
  unint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d4UI17fg29C14updateChildrenyySayACGFAA8H57IDVACcfu_33_2f504ee4f610784b00e9281caac81f7cAcGTf3nnnpk_nTf1cn_nTm(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = specialized Set.init<A>(_:)((uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d4UI17fg29C14updateChildrenyySayACGFAA8H57IDVACcfu_33_2f504ee4f610784b00e9281caac81f7cAcGTf3nnnpk_nTf1cn_nTm((unint64_t)a1._rawValue);
  Swift::Int v9 = specialized Set.init<A>(_:)((uint64_t)v8);
  swift_bridgeObjectRelease();
  v36[0] = v7;
  specialized Set.formSymmetricDifference(_:)(v9);
  uint64_t v10 = v7;
  if (*(void *)v4 >> 62) {
    goto LABEL_37;
  }
  uint64_t v11 = *(void *)((*(void *)v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v12 = *(void *)(v10 + 16);
    unint64_t v13 = (unint64_t)a1._rawValue >> 62;
    if ((unint64_t)a1._rawValue >> 62) {
      break;
    }
    uint64_t v14 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v15 = v14 + v11;
    if (__OFADD__(v14, v11)) {
      goto LABEL_40;
    }
LABEL_5:
    if (v12 == v15)
    {
      BOOL v16 = v11 != 0;
      if (v13) {
        goto LABEL_7;
      }
    }
    else
    {
      BOOL v16 = 0;
      if (v13)
      {
LABEL_7:
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        if (!v17) {
          goto LABEL_18;
        }
        goto LABEL_11;
      }
    }
    uint64_t v17 = *(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v17) {
      goto LABEL_18;
    }
LABEL_11:
    if (v17 < 1)
    {
      __break(1u);
      return;
    }
    if (((unint64_t)a1._rawValue & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v17; ++i)
      {
        MEMORY[0x18C117680](i, a1._rawValue);
        swift_unknownObjectWeakAssign();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      for (uint64_t j = 0; j != v17; ++j)
        swift_unknownObjectWeakAssign();
    }
LABEL_18:
    swift_bridgeObjectRelease();
    char v33 = v16;
    int v34 = (Swift::OpaquePointer *)v4;
    v2._rawuint64_t Value = *(void **)v4;
    if (*(void *)v4 >> 62) {
      goto LABEL_41;
    }
    uint64_t v20 = *(void *)(((unint64_t)v2._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v20) {
      goto LABEL_42;
    }
LABEL_20:
    unint64_t v4 = 0;
    uint64_t v21 = v10 + 56;
    while (1)
    {
      if (((unint64_t)v2._rawValue & 0xC000000000000001) != 0)
      {
        char v22 = (char *)MEMORY[0x18C117680](v4, v2._rawValue);
      }
      else
      {
        if (v4 >= *(void *)(((unint64_t)v2._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_36;
        }
        char v22 = (char *)*((id *)v2._rawValue + v4 + 4);
      }
      uint64_t v23 = v22;
      if (__OFADD__(v4++, 1)) {
        break;
      }
      if (*(void *)(v10 + 16))
      {
        Swift::UInt v25 = *(void *)&v22[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v25);
        Swift::Int v26 = Hasher._finalize()();
        uint64_t v27 = -1 << *(unsigned char *)(v10 + 32);
        unint64_t v28 = v26 & ~v27;
        if ((*(void *)(v21 + ((v28 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v28))
        {
          uint64_t v29 = *(void *)(v10 + 48);
          if (*(void *)(v29 + 8 * v28) == v25)
          {
LABEL_21:
            swift_unknownObjectWeakAssign();
          }
          else
          {
            uint64_t v30 = ~v27;
            while (1)
            {
              unint64_t v28 = (v28 + 1) & v30;
              if (((*(void *)(v21 + ((v28 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v28) & 1) == 0) {
                break;
              }
              if (*(void *)(v29 + 8 * v28) == v25) {
                goto LABEL_21;
              }
            }
          }
        }
      }

      if (v4 == v20) {
        goto LABEL_42;
      }
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v15 = v31 + v11;
  if (!__OFADD__(v31, v11)) {
    goto LABEL_5;
  }
LABEL_40:
  __break(1u);
LABEL_41:
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  if (v20) {
    goto LABEL_20;
  }
LABEL_42:
  swift_bridgeObjectRelease();
  v34->_rawuint64_t Value = a1._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned __int8 v35 = 4;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(1, &v35, (char *)v36);
  if (LOBYTE(v36[0]) - 1 > 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v32 = *(void *)(v10 + 16);
    swift_bridgeObjectRelease();
    if (v32) {
      AccessibilityNode.scheduleNotifyForChildrenChange(fullReplacement:)(v33);
    }
  }
}

uint64_t AccessibilityNode.scheduleNotifyForChildrenChange(fullReplacement:)(char a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  Swift::Int v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0 && (AccessibilityNode.visibility.getter((int *)aBlock), (aBlock[0] & 0x80) != 0))
  {
    uint64_t v18 = &type metadata for AccessibilityCore.Notification.ScreenChanged;
    uint64_t v19 = &protocol witness table for AccessibilityCore.Notification.ScreenChanged;
    uint64_t v16 = 0;
    char v17 = 0;
  }
  else
  {
    uint64_t v18 = &type metadata for AccessibilityCore.Notification.LayoutChanged;
    uint64_t v19 = &protocol witness table for AccessibilityCore.Notification.LayoutChanged;
    uint64_t v16 = 0;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v10 = (void *)static OS_dispatch_queue.main.getter();
  outlined init with copy of TableColumnList((uint64_t)&v16, (uint64_t)v15);
  uint64_t v11 = swift_allocObject();
  outlined init with take of OptionalBinaryInteger(v15, v11 + 16);
  aBlock[4] = partial apply for closure #1 in AccessibilityNode.scheduleNotifyForChildrenChange(fullReplacement:);
  aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_128;
  uint64_t v12 = _Block_copy(aBlock);
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  _sSay8Dispatch0A13WorkItemFlagsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x18C116870](0, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
}

uint64_t AccessibilityNode.updateSize(_:token:)(uint64_t *a1, double a2, double a3)
{
  char v6 = *((unsigned char *)a1 + 8);
  uint64_t v15 = *a1;
  char v16 = v6;
  uint64_t result = AccessibilityNode.attachmentIndex(of:)((uint64_t)&v15);
  if (v8) {
    return result;
  }
  unint64_t v9 = result;
  uint64_t v10 = (uint64_t *)(v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v11 = *v10;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v10 = v11;
  if (result)
  {
    if ((v9 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v11);
  uint64_t v11 = result;
  *uint64_t v10 = result;
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if (v9 >= *(void *)(v11 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v12 = v11 + 40 * v9;
  uint64_t v13 = *(void *)(v12 + 48);
  if (!v13)
  {
    uint64_t v14 = v12 + 32;
    type metadata accessor for AccessibilityGeometryStorage();
    uint64_t v13 = swift_allocObject();
    *(_WORD *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 1;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(unsigned char *)(v13 + 80) = 1;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_OWORD *)(v13 + 104) = 0u;
    *(unsigned char *)(v13 + 120) = 1;
    *(void *)(v13 + 128) = MEMORY[0x1E4FBC860];
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 152) = 0u;
    *(unsigned char *)(v13 + 176) = -1;
    *(void *)(v13 + 168) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    *(void *)(v14 + 16) = v13;
  }
  *(unsigned char *)(v13 + 17) = 1;
  *(double *)(v13 + 64) = a2;
  *(double *)(v13 + 72) = a3;
  *(unsigned char *)(v13 + 80) = 0;
  return swift_endAccess();
}

uint64_t AccessibilityNode.updateTransform(_:token:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v7 = a1[4];
  char v8 = *((unsigned char *)a2 + 8);
  uint64_t v18 = *a2;
  char v19 = v8;
  uint64_t result = AccessibilityNode.attachmentIndex(of:)((uint64_t)&v18);
  if (v10) {
    return result;
  }
  unint64_t v11 = result;
  uint64_t v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v13 = *v12;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v12 = v13;
  if (result)
  {
    if ((v11 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
  uint64_t v13 = result;
  *uint64_t v12 = result;
  if ((v11 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if (v11 >= *(void *)(v13 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v14 = v13 + 40 * v11;
  uint64_t v15 = *(void *)(v14 + 48);
  if (!v15)
  {
    uint64_t v16 = v14 + 32;
    type metadata accessor for AccessibilityGeometryStorage();
    uint64_t v15 = swift_allocObject();
    *(_WORD *)(v15 + 16) = 0;
    *(void *)(v15 + 24) = 1;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_OWORD *)(v15 + 48) = 0u;
    *(_OWORD *)(v15 + 64) = 0u;
    *(unsigned char *)(v15 + 80) = 1;
    *(_OWORD *)(v15 + 88) = 0u;
    *(_OWORD *)(v15 + 104) = 0u;
    *(unsigned char *)(v15 + 120) = 1;
    *(void *)(v15 + 128) = MEMORY[0x1E4FBC860];
    *(_OWORD *)(v15 + 136) = 0u;
    *(_OWORD *)(v15 + 152) = 0u;
    *(unsigned char *)(v15 + 176) = -1;
    *(void *)(v15 + 168) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    *(void *)(v16 + 16) = v15;
  }
  *(unsigned char *)(v15 + 17) = 1;
  uint64_t v17 = *(void *)(v15 + 24);
  *(void *)(v15 + 24) = v3;
  *(void *)(v15 + 32) = v4;
  *(void *)(v15 + 40) = v6;
  *(void *)(v15 + 48) = v5;
  *(void *)(v15 + 56) = v7;
  swift_retain();
  swift_endAccess();
  return outlined consume of Transaction?(v17);
}

uint64_t AccessibilityNode.updatePath(_:token:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  char v9 = *((unsigned char *)a2 + 8);
  uint64_t v23 = *a2;
  char v24 = v9;
  uint64_t result = AccessibilityNode.attachmentIndex(of:)((uint64_t)&v23);
  if (v11) {
    return result;
  }
  unint64_t v12 = result;
  uint64_t v13 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v14 = *v13;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v13 = v14;
  if (result)
  {
    if ((v12 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v14);
  uint64_t v14 = result;
  *uint64_t v13 = result;
  if ((v12 & 0x8000000000000000) != 0) {
    goto LABEL_13;
  }
LABEL_4:
  if (v12 >= *(void *)(v14 + 16))
  {
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v15 = v14 + 40 * v12;
  uint64_t v16 = *(void *)(v15 + 48);
  if (!v16)
  {
    uint64_t v17 = v15 + 32;
    type metadata accessor for AccessibilityGeometryStorage();
    uint64_t v16 = swift_allocObject();
    *(_WORD *)(v16 + 16) = 0;
    *(void *)(v16 + 24) = 1;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(unsigned char *)(v16 + 80) = 1;
    *(_OWORD *)(v16 + 88) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *(unsigned char *)(v16 + 120) = 1;
    *(void *)(v16 + 128) = MEMORY[0x1E4FBC860];
    *(_OWORD *)(v16 + 136) = 0u;
    *(_OWORD *)(v16 + 152) = 0u;
    *(unsigned char *)(v16 + 176) = -1;
    *(void *)(v16 + 168) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    *(void *)(v17 + 16) = v16;
  }
  *(unsigned char *)(v16 + 16) = 0;
  if ((Path.isEmpty.getter() & 1) == 0)
  {
    Path.boundingRect.getter();
    CGRect v26 = CGRectStandardize(v25);
    if (!CGRectIsEmpty(v26))
    {
      uint64_t v18 = *(void *)(v16 + 144);
      uint64_t v19 = *(void *)(v16 + 152);
      uint64_t v20 = *(void *)(v16 + 160);
      uint64_t v21 = *(void *)(v16 + 168);
      *(void *)(v16 + 144) = v4;
      *(void *)(v16 + 152) = v5;
      *(void *)(v16 + 160) = v6;
      *(void *)(v16 + 168) = v7;
      unsigned __int8 v22 = *(unsigned char *)(v16 + 176);
      *(unsigned char *)(v16 + 176) = v8;
      outlined consume of Path?(v18, v19, v20, v21, v22);
      outlined init with take of Path.Storage(a1, (uint64_t)&v23);
      outlined release of Path?((uint64_t)&v23, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    }
  }
  return swift_endAccess();
}

uint64_t AccessibilityNode.updateViewResponders(_:token:)(unint64_t a1, uint64_t *a2)
{
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v13 = *a2;
  char v14 = v4;
  uint64_t result = AccessibilityNode.attachmentIndex(of:)((uint64_t)&v13);
  if (v6) {
    return result;
  }
  unint64_t v7 = result;
  char v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *char v8 = v9;
  if (result)
  {
    if ((v7 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
  uint64_t v9 = result;
  *char v8 = result;
  if ((v7 & 0x8000000000000000) != 0) {
    goto LABEL_10;
  }
LABEL_4:
  if (v7 >= *(void *)(v9 + 16))
  {
LABEL_11:
    __break(1u);
    return result;
  }
  uint64_t v10 = v9 + 40 * v7;
  uint64_t v11 = *(void *)(v10 + 48);
  if (!v11)
  {
    uint64_t v12 = v10 + 32;
    type metadata accessor for AccessibilityGeometryStorage();
    uint64_t v11 = swift_allocObject();
    *(_WORD *)(v11 + 16) = 0;
    *(void *)(v11 + 24) = 1;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(unsigned char *)(v11 + 80) = 1;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(unsigned char *)(v11 + 120) = 1;
    *(void *)(v11 + 128) = MEMORY[0x1E4FBC860];
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 152) = 0u;
    *(unsigned char *)(v11 + 176) = -1;
    *(void *)(v11 + 168) = 0;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    *(void *)(v12 + 16) = v11;
  }
  *(unsigned char *)(v11 + 16) = 1;
  *(void *)(v11 + 136) = 0;
  swift_release();
  *(void *)(v11 + 128) = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI13ViewResponderCG_AF7WeakBoxVyAHGs5NeverOTg503_s7d4UI13fg6CSgAA7hi16VyACGIeggr_AcGs5j95OIegnrzr_TR03_s7a41UI28AccessibilityGeometryStorageC20updatec20RespondersyySayAA0G9d6CGFAA7eF13O21AFGAFSgcfu_Tf3nnnpf_nTf1cn_n(a1);
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t AccessibilityNode.updateEnvironment(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  long long v7 = *(_OWORD *)a1;
  uint64_t v4 = one-time initialization token for configuredForPlatform;
  swift_retain_n();
  swift_retain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = static EnvironmentValues.configuredForPlatform;
  if (v3)
  {
    swift_release();
    if (!v5 || v3 != v5) {
      EnvironmentValues._configureForPlatform(traitCollection:)(0);
    }
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    EnvironmentValues.plist.setter();
  }
  *(_OWORD *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment) = v7;
  swift_release();
  uint64_t result = swift_release();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored) = 2;
  return result;
}

uint64_t AccessibilityNode.sendAction<A>(_:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v31 = *(_OWORD *)(v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if ((EnvironmentValues.isEnabled.getter() & 1) == 0) {
    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  if (swift_dynamicCast())
  {
    long long v12 = v31;
    char v13 = v32;
    if (v33 == 1)
    {
      AccessibilityNode.attachment.getter((uint64_t *)&v31);

      uint64_t v14 = swift_bridgeObjectRetain();
      uint64_t v15 = specialized AccessibilityProperties.subscript.getter(v14);
      swift_bridgeObjectRelease_n();
      uint64_t v16 = specialized Sequence.reversed()(v15);
      uint64_t result = outlined consume of AccessibilityActionKind.ActionKind(v12, *((uint64_t *)&v12 + 1), v13, 1uLL);
      uint64_t v18 = *(void *)(v16 + 16);
      if (!v18) {
        goto LABEL_19;
      }
      goto LABEL_8;
    }
    outlined consume of AccessibilityActionKind.ActionKind(v31, *((uint64_t *)&v31 + 1), v32, v33);
  }
  AccessibilityNode.attachment.getter((uint64_t *)&v31);

  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v16 = specialized AccessibilityProperties.subscript.getter(v19);
  uint64_t result = swift_bridgeObjectRelease_n();
  uint64_t v18 = *(void *)(v16 + 16);
  if (!v18)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_8:
  int v20 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = v16 + 32;
  uint64_t v27 = v16 + 32;
  uint64_t v28 = v18 - 1;
LABEL_9:
  int v29 = v20;
  uint64_t v23 = v22 + 48 * v21;
  do
  {
    if (v21 >= *(void *)(v16 + 16))
    {
      __break(1u);
      return result;
    }
    outlined init with copy of AnyAccessibilityAction(v23, (uint64_t)&v31);
    AnyAccessibilityAction.perform<A>(action:value:)(a1, a2, a3, a4);
    uint64_t result = outlined destroy of AnyAccessibilityAction((uint64_t)&v31);
    if (v30 == 2) {
      goto LABEL_18;
    }
    if (v30 == 3)
    {
      int v20 = 1;
      BOOL v24 = v28 == v21++;
      uint64_t v22 = v27;
      if (!v24) {
        goto LABEL_9;
      }
LABEL_18:
      swift_bridgeObjectRelease();
LABEL_23:
      uint64_t v25 = 1;
      if (MEMORY[0x18C119DF0](v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
      {
        swift_getObjectType();
        *(void *)&long long v31 = 0;
        BYTE8(v31) = 1;
        ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
        swift_unknownObjectRelease();
      }
      return v25;
    }
    if ((v30 & 1) == 0) {
      goto LABEL_19;
    }
    ++v21;
    v23 += 48;
  }
  while (v18 != v21);
  swift_bridgeObjectRelease();
  if (v29) {
    goto LABEL_23;
  }
  return 0;
}

Swift::Bool __swiftcall AccessibilityNode.sendAction(named:)(Swift::String named)
{
  object = named._object;
  uint64_t countAndFlagsBits = named._countAndFlagsBits;
  uint64_t v4 = (void *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  long long v45 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if ((EnvironmentValues.isEnabled.getter() & 1) == 0) {
    return 0;
  }
  uint64_t v40 = countAndFlagsBits;
  long long v41 = object;
  AccessibilityNode.attachment.getter((uint64_t *)&v45);

  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = specialized AccessibilityProperties.subscript.getter(v5);
  Swift::Bool result = swift_bridgeObjectRelease_n();
  uint64_t v8 = *(void *)(v6 + 16);
  if (!v8)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v9 = 0;
  char v10 = 0;
  uint64_t v33 = v8 - 1;
  uint64_t v34 = v1;
  uint64_t v11 = v6 + 32;
  uint64_t v36 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v37 = *(void *)(v6 + 16);
  uint64_t v12 = v37;
  uint64_t v38 = v6;
  long long v39 = v4;
  uint64_t v32 = v6 + 32;
LABEL_4:
  char v35 = v10;
  uint64_t v13 = v11 + 48 * v9;
  do
  {
    if (v9 >= *(void *)(v6 + 16))
    {
      __break(1u);
      return result;
    }
    outlined init with copy of AnyAccessibilityAction(v13, (uint64_t)&v45);
    uint64_t v14 = v46;
    uint64_t v15 = v47;
    __swift_project_boxed_opaque_existential_1(&v45, v46);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
    if (!v19)
    {
      Swift::Bool result = outlined destroy of AnyAccessibilityAction((uint64_t)&v45);
      goto LABEL_6;
    }
    uint64_t v20 = v16;
    uint64_t v21 = v17;
    char v22 = v18;
    uint64_t v23 = v4[1];
    v42[0] = *v4;
    v42[1] = v23;
    v44[0] = 0;
    v44[1] = 0;
    swift_retain();
    swift_retain();
    char v43 = v22 & 1;
    uint64_t v24 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
    uint64_t v26 = v25;
    swift_release();
    swift_release();
    BOOL v27 = v24 == v40 && v26 == v41;
    if (v27)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
        outlined destroy of AnyAccessibilityAction((uint64_t)&v45);
        outlined consume of Text.Storage(v20, v21, v22 & 1);
        Swift::Bool result = swift_bridgeObjectRelease();
        uint64_t v6 = v38;
        uint64_t v4 = v39;
        uint64_t v12 = v37;
        goto LABEL_6;
      }
    }
    _OWORD v42[3] = v36;
    uint64_t v29 = v46;
    uint64_t v30 = v47;
    __swift_project_boxed_opaque_existential_1(&v45, v46);
    (*(void (**)(void *__return_ptr, void *, uint64_t, uint64_t))(v30 + 32))(v44, v42, v29, v30);
    outlined consume of Text.Storage(v20, v21, v22 & 1);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
    Swift::Bool result = outlined destroy of AnyAccessibilityAction((uint64_t)&v45);
    uint64_t v4 = v39;
    if (LOBYTE(v44[0]) == 2) {
      goto LABEL_26;
    }
    uint64_t v12 = v37;
    if (LOBYTE(v44[0]) == 3)
    {
      char v10 = 1;
      uint64_t v11 = v32;
      BOOL v27 = v33 == v9++;
      uint64_t v6 = v38;
      if (!v27) {
        goto LABEL_4;
      }
LABEL_26:
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    if ((v44[0] & 1) == 0) {
      goto LABEL_29;
    }
    uint64_t v6 = v38;
LABEL_6:
    ++v9;
    v13 += 48;
  }
  while (v12 != v9);
  swift_bridgeObjectRelease();
  if ((v35 & 1) == 0) {
    return 0;
  }
LABEL_27:
  Swift::Bool v31 = 1;
  if (MEMORY[0x18C119DF0](v34 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
  {
    swift_getObjectType();
    *(void *)&long long v45 = 0;
    BYTE8(v45) = 1;
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    swift_unknownObjectRelease();
  }
  return v31;
}

uint64_t AccessibilityNode.traits.getter@<X0>(uint64_t *a1@<X8>)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment)) {
    return AccessibilityProperties.traits.getter();
  }
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v5 = *v4;
  int64_t v6 = *(void *)(*v4 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v19;
    unint64_t v8 = v6 - 1;
    uint64_t v9 = 40 * v6 - 8;
    while (v8 != -1)
    {
      if (v8 >= *(void *)(v5 + 16)) {
        goto LABEL_18;
      }
      uint64_t result = AccessibilityProperties.traits.getter();
      long long v10 = v18;
      unint64_t v12 = *(void *)(v19 + 16);
      unint64_t v11 = *(void *)(v19 + 24);
      if (v12 >= v11 >> 1)
      {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
        long long v10 = v18;
      }
      *(void *)(v19 + 16) = v12 + 1;
      *(_OWORD *)(v19 + 16 * v12 + 32) = v10;
      --v8;
      v9 -= 40;
      if (v8 == -1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_11:
    uint64_t v13 = *(void *)(v7 + 16);
    if (v13)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v16 = (void *)(v7 + 40);
      do
      {
        uint64_t v17 = *v16 | v15;
        uint64_t v14 = (v15 | ~*v16) & v14 | *(v16 - 1) & ~v15;
        v16 += 2;
        uint64_t v15 = v17;
        --v13;
      }
      while (v13);
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v14 = 0;
    }
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v14;
    a1[1] = v17;
  }
  return result;
}

uint64_t AccessibilityNode.impliedTraits.getter()
{
  int8x8_t v0 = 0;
  AccessibilityNode.attachment.getter((uint64_t *)&v29);
  uint64_t v1 = v29;

  *(void *)&long long v33 = v1;
  AccessibilityProperties.traits.getter();
  swift_bridgeObjectRelease();
  long long v2 = v29;
  AccessibilityNode.attachment.getter((uint64_t *)&v29);

  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease_n();
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v14 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v14) {
      goto LABEL_20;
    }
LABEL_13:
    if (v14 >= 4)
    {
      uint64_t v15 = v14 & 0x7FFFFFFFFFFFFFFCLL;
      int8x16_t v16 = 0uLL;
      int8x16_t v17 = 0uLL;
      long long v18 = (int8x16_t *)(v7 + 48);
      uint64_t v19 = v14 & 0x7FFFFFFFFFFFFFFCLL;
      do
      {
        int8x16_t v17 = vorrq_s8(v18[-1], v17);
        int8x16_t v16 = vorrq_s8(*v18, v16);
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      int8x16_t v20 = vorrq_s8(v16, v17);
      int8x8_t v0 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
      if (v14 == v15) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v21 = v14 - v15;
    char v22 = &v7[8 * v15 + 32];
    do
    {
      uint64_t v23 = *(void *)v22;
      v22 += 8;
      *(void *)&v0 |= v23;
      --v21;
    }
    while (v21);
    goto LABEL_20;
  }
  uint64_t v6 = v4 + 32;
  swift_bridgeObjectRetain();
  uint64_t v7 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    outlined init with copy of AnyAccessibilityAction(v6, (uint64_t)&v29);
    uint64_t v8 = v30;
    uint64_t v9 = v31;
    __swift_project_boxed_opaque_existential_1(&v29, v30);
    long long v33 = v2;
    uint64_t v10 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v9 + 48))(&v33, v8, v9);
    LOWORD(v8) = v11;
    outlined destroy of AnyAccessibilityAction((uint64_t)&v29);
    if ((v8 & 0x100) == 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
      }
      unint64_t v13 = *((void *)v7 + 2);
      unint64_t v12 = *((void *)v7 + 3);
      if (v13 >= v12 >> 1) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v7);
      }
      *((void *)v7 + 2) = v13 + 1;
      *(void *)&v7[8 * v13 + 32] = v10;
    }
    v6 += 48;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease_n();
  unint64_t v14 = *((void *)v7 + 2);
  if (v14) {
    goto LABEL_13;
  }
LABEL_20:
  swift_bridgeObjectRelease();
  AccessibilityNode.attachment.getter((uint64_t *)&v33);

  uint64_t v24 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v24, &v29);
  swift_bridgeObjectRelease_n();
  if (v32)
  {
    long long v33 = v2;
    uint64_t v25 = AccessibilityValueStorage.impliedRole(for:)((uint64_t *)&v33);
    __int16 v27 = v26;
    outlined destroy of AccessibilityValueStorage((uint64_t)&v29);
    if ((v27 & 0x100) == 0) {
      *(void *)&v0 |= v25;
    }
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v29, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  }
  return (uint64_t)v0;
}

uint64_t AccessibilityNode.resolvedTraits.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = 0;
  uint64_t v45 = 0;
  AccessibilityNode.attachment.getter(v40.i64);
  uint64_t v3 = v40.i64[0];

  v44.i64[0] = v3;
  AccessibilityProperties.traits.getter();
  swift_bridgeObjectRelease();
  int8x16_t v4 = v40;
  v44.i8[0] = 4;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(0, (unsigned __int8 *)&v44, v40.i8);
  if (v40.u8[0] - 1 >= 2)
  {
    uint64_t v15 = AccessibilityNode.impliedTraits.getter();
    uint64_t v45 = v15;
    uint64_t v16 = static AccessibilityTrait.allCases.getter();
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      long long v18 = (unsigned __int8 *)(v16 + 32);
      do
      {
        unsigned int v20 = *v18++;
        __int8 v19 = v20;
        int v21 = (1 << v20) & 0x39C23FFF;
        if (v20 <= 0x1D && v21 != 0 && (((unint64_t)v4.i64[0] >> v19) & 1) != 0)
        {
          v40.i8[0] = v19;
          uint64_t v23 = AccessibilityTrait.uiTrait.getter();
          if ((v24 & 1) == 0) {
            v2 |= v23;
          }
        }
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = v2 | v15;
  }
  else
  {
    uint64_t v5 = static AccessibilityTrait.allCases.getter();
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      uint64_t v7 = (unsigned __int8 *)(v5 + 32);
      uint64_t v8 = 0;
      do
      {
        unsigned int v10 = *v7++;
        __int8 v9 = v10;
        int v11 = (1 << v10) & 0x401404;
        if (v10 <= 0x16 && v11 != 0 && (((unint64_t)v4.i64[0] >> v9) & 1) != 0)
        {
          v40.i8[0] = v9;
          uint64_t v13 = AccessibilityTrait.uiTrait.getter();
          if ((v14 & 1) == 0) {
            v8 |= v13;
          }
        }
        --v6;
      }
      while (v6);
    }
    else
    {
      uint64_t v8 = 0;
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = v8;
  }
  uint64_t v45 = v25;
  int8x16_t v40 = *(int8x16_t *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  if ((EnvironmentValues.isEnabled.getter() & 1) == 0)
  {
    v25 |= 0x100uLL;
    uint64_t v45 = v25;
  }
  int8x16_t v40 = v4;
  v44.i8[0] = 28;
  if (AccessibilityNullableOptionSet<>.subscript.getter())
  {
    AccessibilityNode.attachment.getter(v40.i64);

    uint64_t v26 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v26, &v40);
    swift_bridgeObjectRelease_n();
    uint64_t v27 = v43;
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v40, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    if (!v27)
    {
      v25 &= ~8uLL;
      uint64_t v45 = v25;
    }
  }
  AccessibilityNode.attachment.getter(v40.i64);

  uint64_t v28 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v28, v40.i64);
  swift_bridgeObjectRelease_n();
  if ((v40.i8[0] & 1) != 0 && ((v4.i16[0] & 0x1000) != 0 || (v4.i16[4] & 0x1000) == 0)) {
    uint64_t v45 = v25 | 0x2000;
  }
  AccessibilityNode.attachment.getter(v40.i64);

  uint64_t v29 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v29, (uint64_t)&v40);
  swift_bridgeObjectRelease_n();
  if (v43 == 255)
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)&v40, &lazy cache variable for type metadata for AccessibilityTableContext?);
  }
  else
  {
    int8x16_t v44 = v4;
    AccessibilityTableContext.resolve(into:for:)(&v45);
    outlined destroy of AccessibilityTableContext((uint64_t)&v40);
  }
  if (MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
  {
    self;
    uint64_t v30 = (void *)swift_dynamicCastObjCClass();
    if (v30)
    {
      unsigned __int8 v31 = objc_msgSend(v30, sel__accessibilityCanDrag);
      swift_unknownObjectRelease();
      if (v31)
      {
        AccessibilityNode.attachment.getter(v40.i64);

        uint64_t v32 = swift_bridgeObjectRetain();
        specialized AccessibilityProperties.subscript.getter(v32, &v40);
        swift_bridgeObjectRelease_n();
        if (v42)
        {
          if (*(void *)(v42 + 16))
          {
            outlined consume of AccessibilityActivationPointStorage?(v40.i64[0], v40.i64[1], v41, v42);
            v45 |= 0x4000000000uLL;
          }
          else
          {
            outlined consume of AccessibilityActivationPointStorage?(v40.i64[0], v40.i64[1], v41, v42);
          }
        }
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  AccessibilityNode.attachment.getter(v40.i64);

  uint64_t v33 = swift_bridgeObjectRetain();
  uint64_t v34 = specialized AccessibilityProperties.subscript.getter(v33);
  uint64_t v36 = v35;
  char v38 = v37;
  swift_bridgeObjectRelease_n();
  if (v38) {
    return v45;
  }
  else {
    return (v45 | v36) & ~v34;
  }
}

uint64_t AccessibilityNode.resolvedCustomRotors.getter()
{
  void (*v34)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  void *v41;
  id (*v42)(uint64_t);
  void (*v43)(long long *__return_ptr, void *, id (*)(uint64_t));
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  objc_class *v55;
  char *v56;
  uint64_t v57;
  unsigned char *v58;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned char *v65;
  void *v66;
  objc_super v67;
  uint64_t aBlock;
  uint64_t v69;
  void *v70;
  void *v71;
  id (*v72)(uint64_t);
  uint64_t v73;
  long long v74;
  long long v75;
  unsigned char v76[152];
  unsigned char v77[152];
  unsigned __int8 v78[152];
  void *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  void v83[4];
  uint64_t v84;

  uint64_t isEscapingClosureAtFileLocation = v0;
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
  swift_retain();
  swift_retain();
  AccessibilityNode.attachment.getter((uint64_t *)&v79);

  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = specialized AccessibilityProperties.subscript.getter(v5);
  swift_bridgeObjectRelease_n();
  if (*(void *)(v6 + 16))
  {
    swift_retain();
    swift_retain();
    id v7 = (id)isEscapingClosureAtFileLocation;
    uint64_t v8 = specialized Sequence.compactMap<A>(_:)(v6, v3, v4, (uint64_t)v7);
    uint64_t v60 = 0;
    swift_bridgeObjectRelease();
    swift_release_n();
    swift_release_n();
  }
  else
  {
    uint64_t v60 = 0;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  uint64_t v84 = v8;
  __int8 v9 = (void *)AccessibilityNode.linkRotor.getter();
  if (v9)
  {
    uint64_t v2 = v9;
    MEMORY[0x18C115B40](v2);
    if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_62;
    }
    goto LABEL_6;
  }
LABEL_7:
  v78[0] = 4;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(1, v78, (char *)&v79);
  if (!(_BYTE)v79)
  {
    isEscapingClosureAtFileLocation += OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children;
    swift_beginAccess();
    long long v64 = *(void *)isEscapingClosureAtFileLocation;
    if (*(void *)isEscapingClosureAtFileLocation >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v10 = *(void *)((*(void *)isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v10)
      {
LABEL_10:
        uint64_t v11 = 0;
        unint64_t v12 = v64 & 0xC000000000000001;
        uint64_t v61 = &v70;
        long long v63 = v10;
        do
        {
          if (v12)
          {
            uint64_t v13 = (char *)MEMORY[0x18C117680](v11, v64);
            BOOL v14 = __OFADD__(v11++, 1);
            if (v14) {
              goto LABEL_60;
            }
          }
          else
          {
            uint64_t v13 = (char *)*(id *)(v64 + 32 + 8 * v11);
            BOOL v14 = __OFADD__(v11++, 1);
            if (v14)
            {
LABEL_60:
              __break(1u);
LABEL_61:
              __break(1u);
LABEL_62:
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_6:
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();

              goto LABEL_7;
            }
          }
          uint64_t isEscapingClosureAtFileLocation = (uint64_t)&v13[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          uint64_t v2 = *(void **)&v13[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          uint64_t v65 = v13;
          if (v2)
          {
            id v15 = *(id *)(isEscapingClosureAtFileLocation + 8);
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v16 = &v13[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
            swift_beginAccess();
            uint64_t v17 = *(void *)v16;
            int64_t v18 = *(void *)(*(void *)v16 + 16);
            if (v18)
            {
              long long v62 = v11;
              uint64_t v79 = (void *)MEMORY[0x1E4FBC860];
              swift_bridgeObjectRetain();
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
              __int8 v19 = v79;
              unsigned int v20 = (void **)(v17 + 40);
              do
              {
                uint64_t v21 = (uint64_t)*(v20 - 1);
                char v22 = *v20;
                uint64_t v79 = v19;
                unint64_t v24 = v19[2];
                unint64_t v23 = v19[3];
                swift_bridgeObjectRetain();
                id v25 = v22;
                if (v24 >= v23 >> 1)
                {
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1);
                  __int8 v19 = v79;
                }
                void v19[2] = v24 + 1;
                uint64_t v26 = &v19[2 * v24];
                v26[4] = v21;
                v26[5] = v22;
                v20 += 5;
                --v18;
              }
              while (v18);
              swift_bridgeObjectRelease();
              unint64_t v12 = v64 & 0xC000000000000001;
              uint64_t v10 = v63;
              uint64_t v11 = v62;
            }
            else
            {
              __int8 v19 = (void *)MEMORY[0x1E4FBC860];
            }
            static AccessibilityAttachment.combine(_:)(v19, (uint64_t *)&v79);
            swift_bridgeObjectRelease();
            uint64_t v2 = v79;
            id v27 = v80;
            uint64_t v28 = *(void *)isEscapingClosureAtFileLocation;
            uint64_t v29 = *(void **)(isEscapingClosureAtFileLocation + 8);
            *(void *)uint64_t isEscapingClosureAtFileLocation = v79;
            *(void *)(isEscapingClosureAtFileLocation + 8) = v27;
            id v15 = v27;
            swift_bridgeObjectRetain();
            outlined consume of AccessibilityAttachment?(v28, v29);
            v65[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
          }

          if (v2[2]
            && (unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey),
                (v31 & 1) != 0))
          {
            outlined init with copy of TableColumnList(v2[7] + 40 * v30, (uint64_t)&v79);
            uint64_t v32 = v81;
            uint64_t v33 = v82;
            __swift_project_boxed_opaque_existential_1(&v79, v81);
            uint64_t isEscapingClosureAtFileLocation = v33 + 8;
            uint64_t v34 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v33 + 8);
            swift_bridgeObjectRetain();
            v34(v83, v32, v33);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v79);
          }
          else
          {
            memset(v83, 0, sizeof(v83));
            swift_bridgeObjectRetain();
          }
          type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
          type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
          if (swift_dynamicCast())
          {
            destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v79, v35, v36, v37);
            outlined init with take of AccessibilityTextLayoutProperties??((uint64_t)&v79, (uint64_t)v76);
            swift_bridgeObjectRelease_n();
            outlined release of AccessibilityTextLayoutProperties?((uint64_t)v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityTextLayoutProperties??);
            outlined init with take of AccessibilityTextLayoutProperties??((uint64_t)v76, (uint64_t)v77);
            outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v77, (uint64_t)v78, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
            if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v78) == 1) {
              goto LABEL_59;
            }
            AccessibilityNode.attachment.getter(&aBlock);
            char v38 = aBlock;

            if (*(void *)(v38 + 16)
              && (long long v39 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B88]), (v40 & 1) != 0))
            {
              outlined init with copy of TableColumnList(*(void *)(v38 + 56) + 40 * v39, (uint64_t)&aBlock);
              uint64_t v41 = v71;
              uint64_t v42 = v72;
              __swift_project_boxed_opaque_existential_1(&aBlock, (uint64_t)v71);
              uint64_t v43 = (void (*)(long long *__return_ptr, void *, id (*)(uint64_t)))*((void *)v42 + 1);
              swift_bridgeObjectRetain();
              v43(&v74, v41, v42);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&aBlock);
            }
            else
            {
              long long v74 = 0u;
              uint64_t v75 = 0u;
              swift_bridgeObjectRetain();
            }
            type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?);
            if (swift_dynamicCast())
            {
              int8x16_t v44 = aBlock;
              swift_bridgeObjectRelease_n();
            }
            else
            {
              uint64_t aBlock = 1;
              LOBYTE(v69) = 0;
              swift_bridgeObjectRelease_n();
              int8x16_t v44 = 0;
            }
            uint64_t v45 = v11;
            if (one-time initialization token for comma != -1) {
              swift_once();
            }
            uint64_t v2 = (void *)static Text.Accessibility.comma;
            uint64_t v46 = qword_1EB308110;
            uint64_t v47 = byte_1EB308118;
            uint64_t isEscapingClosureAtFileLocation = qword_1EB308120;
            swift_bridgeObjectRetain();
            outlined copy of Text.Storage((uint64_t)v2, v46, v47);
            long long v48 = (void *)specialized AccessibilityNode.resolvedAttributedTexts(_:includeDefaultAttributes:separator:)(v44);
            outlined consume of Text.Storage((uint64_t)v2, v46, v47);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v48)
            {
              LOBYTE(v74) = 0;
              uint64_t v49 = (void *)static NSAttributedStringKey.coreAXLink.getter();
              long long v50 = NSAttributedString.range.getter();
              long long v52 = v51;
              uint64_t v2 = (void *)swift_allocObject();
              uint64_t v2[2] = &v74;
              id v53 = swift_allocObject();
              *(void *)(v53 + 16) = closure #1 in NSAttributedString.hasAccessibilityLinks.getterpartial apply;
              *(void *)(v53 + 24) = v2;
              uint64_t v72 = (id (*)(uint64_t))thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
              uint64_t v73 = v53;
              uint64_t aBlock = MEMORY[0x1E4F143A8];
              id v69 = 1107296256;
              int v70 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
              id v71 = &block_descriptor_117;
              unint64_t v54 = _Block_copy(&aBlock);
              swift_retain();
              swift_release();
              objc_msgSend(v48, sel_enumerateAttribute_inRange_options_usingBlock_, v49, v50, v52, 0, v54, v60, v61);

              _Block_release(v54);
              uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
              swift_release();
              if (isEscapingClosureAtFileLocation) {
                goto LABEL_61;
              }
              uint64_t isEscapingClosureAtFileLocation = v74;

              swift_release();
              uint64_t v11 = v45;
              if (isEscapingClosureAtFileLocation)
              {
                unint64_t v12 = v64 & 0xC000000000000001;
                uint64_t v10 = v63;
                if (objc_msgSend(v65, sel_accessibilitySwiftUIStoredLinkRotor))
                {
                  _bridgeAnyObjectToAny(_:)();
                  swift_unknownObjectRelease();
                }
                else
                {
                  long long v74 = 0u;
                  uint64_t v75 = 0u;
                }
                outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v74, (uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for Any?);
                if (v71)
                {
                  type metadata accessor for UIKitAccessibilityLinkRotorBridge();
                  if (swift_dynamicCast())
                  {
                    uint64_t v2 = v66;
LABEL_56:
                    MEMORY[0x18C115B40]();
                    if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized Array._endMutation()();
LABEL_59:

                    continue;
                  }
                }
                else
                {
                  outlined destroy of AccessibilityValueStorage?((uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for Any?);
                }
                long long v55 = (objc_class *)type metadata accessor for UIKitAccessibilityLinkRotorBridge();
                int v56 = (char *)objc_allocWithZone(v55);
                swift_unknownObjectWeakInit();
                *(void *)&v56[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_paragraphHash] = 0;
                *(void *)&v56[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_elements] = MEMORY[0x1E4FBC860];
                swift_unknownObjectWeakAssign();
                id v57 = swift_allocObject();
                swift_unknownObjectWeakInit();
                uint64_t v72 = partial apply for closure #1 in UIKitAccessibilityLinkRotorBridge.init(for:);
                uint64_t v73 = v57;
                uint64_t aBlock = MEMORY[0x1E4F143A8];
                id v69 = 1107296256;
                int v70 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
                id v71 = &block_descriptor_122;
                uint64_t isEscapingClosureAtFileLocation = (uint64_t)_Block_copy(&aBlock);
                int v58 = v65;
                swift_release();
                v67.receiver = v56;
                v67.super_class = v55;
                uint64_t v2 = objc_msgSendSuper2(&v67, sel_initWithSystemType_itemSearchBlock_, 1, isEscapingClosureAtFileLocation);

                _Block_release((const void *)isEscapingClosureAtFileLocation);
                objc_msgSend(v58, sel_setAccessibilitySwiftUIStoredLinkRotor_, v2);
                goto LABEL_56;
              }
            }

            unint64_t v12 = v64 & 0xC000000000000001;
            uint64_t v10 = v63;
          }
          else
          {
            _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgSgWOi0_((uint64_t)v78);
            outlined init with take of AccessibilityTextLayoutProperties??((uint64_t)v78, (uint64_t)&v79);

            swift_bridgeObjectRelease_n();
          }
        }
        while (v11 != v10);
      }
    }
    swift_bridgeObjectRelease_n();
  }
  return v84;
}

uint64_t AccessibilityNode.linkRotor.getter()
{
  uint64_t v1 = v0;
  AccessibilityNode.attachment.getter(v27);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v27);
  swift_bridgeObjectRelease_n();
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v27, (uint64_t)v26, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
  outlined release of AccessibilityTextLayoutProperties?((uint64_t)v26, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityTextLayoutProperties?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v26, (uint64_t)v27, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
  if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v27) == 1) {
    return 0;
  }
  uint64_t v3 = (void *)AccessibilityNode.resolvedAttributedLabel.getter();
  if (!v3) {
    return (uint64_t)v3;
  }
  unsigned __int8 v25 = 0;
  uint64_t v4 = static NSAttributedStringKey.coreAXLink.getter();
  uint64_t v5 = NSAttributedString.range.getter();
  uint64_t v7 = v6;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = &v25;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in NSAttributedString.hasAccessibilityLinks.getter;
  *(void *)(v9 + 24) = v8;
  unint64_t v23 = (id (*)(uint64_t))thunk for @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()partial apply;
  uint64_t v24 = v9;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v20 = 1107296256;
  uint64_t v21 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  char v22 = &block_descriptor_100;
  uint64_t v10 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v3, sel_enumerateAttribute_inRange_options_usingBlock_, v4, v5, v7, 0, v10);

  _Block_release(v10);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v4 & 1) == 0)
  {
    int v12 = v25;

    swift_release();
    if (v12 == 1)
    {
      uint64_t v3 = (void *)AccessibilityNode.currentLinkRotor.getter();
      if (!v3)
      {
        uint64_t v13 = (objc_class *)type metadata accessor for UIKitAccessibilityLinkRotorBridge();
        BOOL v14 = (char *)objc_allocWithZone(v13);
        swift_unknownObjectWeakInit();
        *(void *)&v14[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_paragraphHash] = 0;
        *(void *)&v14[OBJC_IVAR____TtC7SwiftUI33UIKitAccessibilityLinkRotorBridge_elements] = MEMORY[0x1E4FBC860];
        swift_unknownObjectWeakAssign();
        uint64_t v15 = swift_allocObject();
        swift_unknownObjectWeakInit();
        unint64_t v23 = partial apply for closure #1 in UIKitAccessibilityLinkRotorBridge.init(for:);
        uint64_t v24 = v15;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v20 = 1107296256;
        uint64_t v21 = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
        char v22 = &block_descriptor_106_0;
        uint64_t v16 = _Block_copy(&aBlock);
        id v17 = v1;
        swift_release();
        v18.receiver = v14;
        v18.super_class = v13;
        uint64_t v3 = objc_msgSendSuper2(&v18, sel_initWithSystemType_itemSearchBlock_, 1, v16);

        _Block_release(v16);
        objc_msgSend(v17, sel_setAccessibilitySwiftUIStoredLinkRotor_, v3);
      }
      return (uint64_t)v3;
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityNode.currentLinkRotor.getter()
{
  if (objc_msgSend(v0, sel_accessibilitySwiftUIStoredLinkRotor))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, sizeof(v3));
  }
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v3, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for Any?);
  if (v5)
  {
    type metadata accessor for UIKitAccessibilityLinkRotorBridge();
    if (swift_dynamicCast()) {
      return v2;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for Any?);
    return 0;
  }
}

uint64_t AccessibilityNode.visibilityIgnoringAttachment(with:)@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v15 = *a1;
  uint64_t v4 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  uint64_t result = swift_beginAccess();
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (!v7)
  {
    int v8 = 0;
    int v9 = 0;
    goto LABEL_12;
  }
  BOOL v14 = a2;
  swift_bridgeObjectRetain();
  int v8 = 0;
  int v9 = 0;
  int v10 = 0;
  uint64_t v11 = v6 + 40 * v7 + 8;
  while (v7 <= *(void *)(v6 + 16))
  {
    uint64_t v13 = *(void **)(v11 - 8);
    if (*(unsigned __int8 *)(v11 + 16) == 255)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      id v12 = v13;
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRetain();
      id v12 = v13;
      if (static AccessibilityAttachmentToken.== infix(_:_:)())
      {
        swift_release();

        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
    }
    AccessibilityProperties.visibility.getter();
    swift_release();

    swift_bridgeObjectRelease();
    int v8 = HIDWORD(v15) | v10;
    int v9 = (v10 | ~HIDWORD(v15)) & v9 | v15 & ~v10;
    v10 |= HIDWORD(v15);
LABEL_5:
    v11 -= 40;
    if (!--v7) {
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_11:
  uint64_t result = swift_bridgeObjectRelease();
  a2 = v14;
LABEL_12:
  *a2 = v9;
  a2[1] = v8;
  return result;
}

uint64_t AccessibilityNode.visibility.getter@<X0>(int *a1@<X8>)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment)) {
    return AccessibilityProperties.visibility.getter();
  }
  uint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v5 = *v4;
  int64_t v6 = *(void *)(*v4 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v19;
    unint64_t v8 = v6 - 1;
    uint64_t v9 = 40 * v6 - 8;
    while (v8 != -1)
    {
      if (v8 >= *(void *)(v5 + 16)) {
        goto LABEL_18;
      }
      uint64_t result = AccessibilityProperties.visibility.getter();
      unint64_t v11 = *(void *)(v19 + 16);
      unint64_t v10 = *(void *)(v19 + 24);
      if (v11 >= v10 >> 1) {
        uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
      }
      *(void *)(v19 + 16) = v11 + 1;
      *(void *)(v19 + 8 * v11 + 32) = v18;
      --v8;
      v9 -= 40;
      if (v8 == -1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
  else
  {
LABEL_11:
    uint64_t v12 = *(void *)(v7 + 16);
    if (v12)
    {
      int v13 = 0;
      int v14 = 0;
      uint64_t v15 = (int *)(v7 + 36);
      do
      {
        int v16 = *v15;
        int v17 = *v15 | v14;
        int v13 = (v14 | ~*v15) & v13 | *(v15 - 1) & ~v14;
        v15 += 2;
        v14 |= v16;
        --v12;
      }
      while (v12);
    }
    else
    {
      int v17 = 0;
      int v13 = 0;
    }
    uint64_t result = swift_bridgeObjectRelease();
    *a1 = v13;
    a1[1] = v17;
  }
  return result;
}

uint64_t AccessibilityNode.automationVisibility.getter@<X0>(int *a1@<X8>)
{
  void (*v21)(_OWORD *__return_ptr, uint64_t, uint64_t);
  id v22;
  id v23;
  uint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned char *v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[2];
  uint64_t v44;

  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
  if (v3)
  {
    uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8);
    outlined copy of AccessibilityAttachment?(v3, v4);
    uint64_t v5 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v5, (uint64_t)&v39);
    outlined consume of AccessibilityAttachment?(v3, v4);
    uint64_t result = swift_bridgeObjectRelease();
    int v7 = HIDWORD(v39);
    if ((_BYTE)v40) {
      int v8 = 0;
    }
    else {
      int v8 = v39;
    }
    if ((_BYTE)v40) {
      int v7 = 0;
    }
    *a1 = v8;
    a1[1] = v7;
  }
  else
  {
    uint64_t v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
    swift_beginAccess();
    uint64_t v10 = *v9;
    int64_t v11 = *(void *)(*v9 + 16);
    uint64_t v12 = MEMORY[0x1E4FBC860];
    if (v11)
    {
      char v37 = a1;
      int8x16_t v44 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
      unint64_t v13 = v11 - 1;
      int v14 = (void **)(v10 + 40 * v11);
      char v38 = v10;
      while (v13 != -1)
      {
        if (v13 >= *(void *)(v10 + 16)) {
          goto LABEL_33;
        }
        uint64_t v16 = (uint64_t)*(v14 - 1);
        uint64_t v15 = *v14;
        if (*(void *)(v16 + 16)
          && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.AutomationVisibilityKey),
              (v18 & 1) != 0))
        {
          outlined init with copy of TableColumnList(*(void *)(v16 + 56) + 40 * v17, (uint64_t)&v39);
          uint64_t v20 = v41;
          uint64_t v19 = v42;
          __swift_project_boxed_opaque_existential_1(&v39, v41);
          uint64_t v21 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v19 + 8);
          swift_retain();
          swift_bridgeObjectRetain_n();
          char v22 = v15;
          v21(v43, v20, v19);
          uint64_t v10 = v38;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
        }
        else
        {
          memset(v43, 0, sizeof(v43));
          swift_retain();
          swift_bridgeObjectRetain_n();
          unint64_t v23 = v15;
        }
        type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
        _sSay8Dispatch0A13WorkItemFlagsVGMaTm_0(0, &lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityVisibility>?, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4FBB718]);
        if (swift_dynamicCast())
        {
          HIBYTE(v40) = 0;
          uint64_t v24 = v39;
          unsigned __int8 v25 = v40;
          swift_bridgeObjectRelease_n();

          swift_release();
          uint64_t v26 = v25 & 1;
        }
        else
        {
          long long v39 = 0;
          int8x16_t v40 = 256;
          swift_bridgeObjectRelease_n();

          swift_release();
          uint64_t v24 = 0;
          uint64_t v26 = 1;
        }
        uint64_t v12 = v44;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1);
          uint64_t v12 = v44;
        }
        uint64_t v28 = *(void *)(v12 + 16);
        id v27 = *(void *)(v12 + 24);
        if (v28 >= v27 >> 1)
        {
          uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1);
          uint64_t v12 = v44;
        }
        *(void *)(v12 + 16) = v28 + 1;
        uint64_t v29 = v12 + 12 * v28;
        *(void *)(v29 + 32) = v24;
        *(unsigned char *)(v29 + 40) = v26;
        --v13;
        v14 -= 5;
        if (v13 == -1)
        {
          swift_bridgeObjectRelease();
          a1 = v37;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
    }
    else
    {
LABEL_25:
      unint64_t v30 = *(void *)(v12 + 16);
      if (v30)
      {
        char v31 = 0;
        uint64_t v32 = 0;
        uint64_t v33 = (unsigned char *)(v12 + 40);
        do
        {
          if ((*v33 & 1) == 0)
          {
            uint64_t v34 = *((_DWORD *)v33 - 1);
            uint64_t v35 = *((_DWORD *)v33 - 2) & ~v32;
            uint64_t v36 = v32 | ~v34;
            v32 |= v34;
            char v31 = v36 & v31 | v35;
          }
          v33 += 12;
          --v30;
        }
        while (v30);
      }
      else
      {
        char v31 = 0;
        uint64_t v32 = 0;
      }
      uint64_t result = swift_bridgeObjectRelease();
      *a1 = v31;
      a1[1] = v32;
    }
  }
  return result;
}

void AccessibilityNode.impliedVisibility(consideringParent:with:)(char a1@<W0>, unsigned __int8 *a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = v3;
  int v7 = *a2;
  AccessibilityNode.visibility.getter(v24);
  v23[0] = *(void *)v24;
  AccessibilityNullableOptionSet<>.resolved.getter();
  int v8 = v25;
  if (v25 == 3) {
    goto LABEL_2;
  }
  uint64_t v10 = MEMORY[0x18C119DF0](v3 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);
  if (v10)
  {
    int64_t v11 = (void *)v10;
    if (v7 == 4)
    {
      LOBYTE(v23[0]) = 4;
      AccessibilityNode.impliedVisibility(consideringParent:with:)(v24, a1 & 1, v23);
      int v7 = LOBYTE(v24[0]);
    }
    if (v7 == 3)
    {

      char v9 = 3;
      goto LABEL_28;
    }
    if (!v7 && (a1 & 1) != 0)
    {
      AccessibilityNode.platformElement.getter();
      unint64_t v13 = v12;

      if (!v13)
      {
LABEL_2:
        char v9 = 3;
        goto LABEL_28;
      }
      int64_t v11 = v13;
    }
  }
  int v14 = AccessibilityNode.isPlaceholderOrIgnored.getter() & 1;
  if (v14) {
    char v9 = 3;
  }
  else {
    char v9 = v8;
  }
  if (!v14 && v8 == 4)
  {
    uint64_t v15 = (unint64_t *)(v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
    swift_beginAccess();
    unint64_t v16 = *v15;
    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17) {
        goto LABEL_20;
      }
    }
    else if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_20:
      char v9 = 2;
      goto LABEL_28;
    }
    uint64_t v18 = MEMORY[0x18C119DF0](v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_bridgedChild);
    if (v18)
    {
      uint64_t v19 = (void *)v18;
      uint64_t v20 = (unint64_t *)(v18 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
      swift_beginAccess();
      unint64_t v21 = *v20;
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v21 = MEMORY[0x1E4FBC860];
    }
    if (v21 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    char v9 = 2 * (v22 != 0);
  }
LABEL_28:
  *a3 = v9;
}

uint64_t AccessibilityNode.resolvedContainerType.getter()
{
  AccessibilityNode.attachment.getter((uint64_t *)v8);

  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)v8);
  swift_bridgeObjectRelease_n();
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v8, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?);
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v7);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v7, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v8) != 1) {
    return 13;
  }
  AccessibilityNode.attachment.getter(&v4);

  uint64_t v1 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v1, (uint64_t)&v4);
  swift_bridgeObjectRelease_n();
  if (v6)
  {
    if (v6 == 255) {
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v4, &lazy cache variable for type metadata for AccessibilityTableContext?);
    }
    else {
      outlined destroy of AccessibilityTableContext((uint64_t)&v4);
    }
    LOBYTE(v4) = 4;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v4, &v3);
    if (v3 == 1)
    {
      AccessibilityNode.attachment.getter(&v4);

      AccessibilityProperties.traits.getter();
      swift_bridgeObjectRelease();
      if (AccessibilityNullableOptionSet<>.subscript.getter()) {
        return 11;
      }
      else {
        return 4;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    outlined destroy of AccessibilityTableContext((uint64_t)&v4);
    return 1;
  }
}

uint64_t AccessibilityNode.isPlaceholderOrIgnored.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored;
  int v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored);
  if (v2 != 2) {
    return v2 & 1;
  }
  AccessibilityNode.traits.getter((uint64_t *)&v6);
  char v3 = AccessibilityNullableOptionSet<>.subscript.getter();
  AccessibilityNode.traits.getter((uint64_t *)&v6);
  char v5 = v6;
  if (AccessibilityNullableOptionSet<>.subscript.getter() & 1) != 0 || (uint64_t result = 0, (v3))
  {
    long long v6 = *(_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    EnvironmentValues.redactionReasons.getter();
    uint64_t result = v5 & 1;
  }
  *(unsigned char *)(v0 + v1) = result;
  return result;
}

uint64_t AccessibilityNode.contentPath.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_isFromDisplayList) != 1)
  {
    swift_beginAccess();
    uint64_t v55 = *v2;
    uint64_t v56 = *(void *)(*v2 + 16);
    if (v56)
    {
      uint64_t result = swift_bridgeObjectRetain();
      uint64_t v57 = v55 + 40 * v56;
      while (1)
      {
        if (v56 > *(void *)(v55 + 16)) {
          goto LABEL_42;
        }
        uint64_t v64 = *(void *)(v57 + 8);
        if (v64)
        {
          int v65 = *(unsigned __int8 *)(v64 + 16);
          id v81 = *(id *)v57;
          swift_retain_n();
          uint64_t v66 = v55;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v65 == 1) {
            AccessibilityGeometryStorage.updatePath()();
          }
          uint64_t v59 = *(void *)(v64 + 144);
          uint64_t v58 = *(void *)(v64 + 152);
          uint64_t v60 = *(void *)(v64 + 160);
          uint64_t v61 = *(void *)(v64 + 168);
          int v62 = *(unsigned __int8 *)(v64 + 176);
          outlined copy of Path?(v59, v58, v60, v61, *(unsigned char *)(v64 + 176));
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_release_n();
          uint64_t v63 = v60;
          uint64_t v55 = v66;
          uint64_t result = outlined consume of Path?(v59, v58, v63, v61, v62);
          if (v62 != 255) {
            break;
          }
        }
        v57 -= 40;
        if (!--v56) {
          goto LABEL_33;
        }
      }
      if (v56 > *(void *)(v66 + 16))
      {
LABEL_43:
        __break(1u);
        return result;
      }
      uint64_t v11 = *(void *)(v57 + 8);
      if (!v11) {
        goto LABEL_41;
      }
      int v67 = *(unsigned __int8 *)(v11 + 16);
      id v68 = *(id *)v57;
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      id v69 = v68;
      if (v67 == 1) {
        AccessibilityGeometryStorage.updatePath()();
      }
      uint64_t v6 = *(void *)(v11 + 144);
      uint64_t v7 = *(void *)(v11 + 152);
      uint64_t v8 = *(void *)(v11 + 160);
      uint64_t v9 = *(void *)(v11 + 168);
      int v70 = *(unsigned __int8 *)(v11 + 176);
      outlined copy of Path?(v6, v7, v8, v9, *(unsigned char *)(v11 + 176));

      swift_bridgeObjectRelease_n();
      LOBYTE(v11) = v70;
      uint64_t result = swift_release_n();
      if (v70 == 255)
      {
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
LABEL_33:
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      LOBYTE(v11) = -1;
    }
LABEL_34:
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  uint64_t result = swift_beginAccess();
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(v4 + 48);
    LODWORD(v11) = 255;
    while (1)
    {
      uint64_t v12 = *v10;
      if (*v10)
      {
        int v80 = v11;
        int v13 = *(unsigned __int8 *)(v12 + 16);
        id v14 = (id)*(v10 - 1);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v13 == 1) {
          AccessibilityGeometryStorage.updatePath()();
        }
        if (*(unsigned __int8 *)(v12 + 176) != 255)
        {
          uint64_t v77 = v5;
          uint64_t v78 = v14;
          uint64_t v15 = v8;
          uint64_t v16 = *(void *)(v12 + 144);
          uint64_t v17 = *(void *)(v12 + 152);
          uint64_t v18 = *(void *)(v12 + 160);
          *(void *)&long long v85 = v16;
          *((void *)&v85 + 1) = v17;
          uint64_t v19 = v6;
          uint64_t v20 = v7;
          uint64_t v21 = *(void *)(v12 + 168);
          uint64_t v22 = v20;
          *(void *)&long long v86 = v18;
          *((void *)&v86 + 1) = v21;
          unsigned __int8 v87 = *(unsigned char *)(v12 + 176);
          uint64_t v23 = v15;
          uint64_t v24 = v9;
          uint64_t v25 = v9;
          char v26 = v80;
          if ((_BYTE)v80 == 0xFF)
          {
            uint64_t v19 = 0;
            uint64_t v22 = 0;
            uint64_t v23 = 0;
            uint64_t v25 = 0;
            char v26 = 6;
          }
          *(void *)&long long v82 = v19;
          *((void *)&v82 + 1) = v22;
          *(void *)&long long v83 = v23;
          *((void *)&v83 + 1) = v25;
          unsigned __int8 v84 = v26;
          uint64_t v75 = v22;
          uint64_t v76 = v19;
          uint64_t v74 = v23;
          uint64_t v72 = v25;
          unsigned __int8 v73 = v26;
          uint64_t v27 = v20;
          uint64_t v79 = v24;
          outlined copy of Path?(v6, v20, v15, v24, v80);
          outlined copy of Path?(v16, v17, v18, v21, v87);
          if (Path.isEmpty.getter())
          {
            outlined consume of Path?(v16, v17, v18, v21, v87);
            swift_release();
            swift_bridgeObjectRelease();

            uint64_t v28 = v6;
            uint64_t v29 = v27;
            uint64_t v30 = v15;
            goto LABEL_20;
          }
          Path.boundingRect.getter();
          CGRect v89 = CGRectStandardize(v88);
          if (!CGRectIsEmpty(v89))
          {
            Path.boundingRect.getter();
            CGFloat v32 = v31;
            CGFloat v34 = v33;
            CGFloat v36 = v35;
            CGFloat v38 = v37;
            Path.boundingRect.getter();
            v92.origin.CGFloat x = v39;
            v92.origin.CGFloat y = v40;
            v92.size.CGFloat width = v41;
            v92.size.CGFloat height = v42;
            v90.origin.CGFloat x = v32;
            v90.origin.CGFloat y = v34;
            v90.size.CGFloat width = v36;
            v90.size.CGFloat height = v38;
            if (CGRectContainsRect(v90, v92))
            {
              outlined consume of Path.Storage(v76, v75, v74, v72, v73);
              swift_release();
              swift_bridgeObjectRelease();

              outlined consume of Path?(v6, v27, v15, v79, v80);
              long long v82 = v85;
              long long v83 = v86;
              unsigned __int8 v84 = v87;
              goto LABEL_21;
            }
            Path.boundingRect.getter();
            CGFloat v44 = v43;
            CGFloat v46 = v45;
            CGFloat v48 = v47;
            CGFloat v50 = v49;
            Path.boundingRect.getter();
            v93.origin.CGFloat x = v51;
            v93.origin.CGFloat y = v52;
            v93.size.CGFloat width = v53;
            v93.size.CGFloat height = v54;
            v91.origin.CGFloat x = v44;
            v91.origin.CGFloat y = v46;
            v91.size.CGFloat width = v48;
            v91.size.CGFloat height = v50;
            if (!CGRectContainsRect(v91, v93)) {
              Path.formTrivialUnion(_:)();
            }
          }
          outlined consume of Path?(v16, v17, v18, v21, v87);
          swift_release();
          swift_bridgeObjectRelease();

          uint64_t v28 = v6;
          uint64_t v30 = v15;
          uint64_t v29 = v27;
LABEL_20:
          outlined consume of Path?(v28, v29, v30, v79, v80);
LABEL_21:
          uint64_t v7 = *((void *)&v82 + 1);
          uint64_t v6 = v82;
          uint64_t v9 = *((void *)&v83 + 1);
          uint64_t v8 = v83;
          LODWORD(v11) = v84;
          uint64_t v5 = v77;
          goto LABEL_5;
        }
        swift_release();
        swift_bridgeObjectRelease();

        LODWORD(v11) = v80;
      }
LABEL_5:
      v10 += 5;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_34;
      }
    }
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  LOBYTE(v11) = -1;
LABEL_35:
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(unsigned char *)(a1 + 32) = v11;
  return result;
}

uint64_t AccessibilityNode.contentFrameFromChildren(with:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v176 = *a1;
  char v3 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
  swift_beginAccess();
  uint64_t v175 = *v3;
  if ((unint64_t)*v3 >> 62) {
    goto LABEL_114;
  }
  uint64_t v4 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  while (v4)
  {
    uint64_t v5 = 0;
    uint64_t v6 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v177 = v4;
    while (1)
    {
      uint64_t v179 = v6;
      if ((v175 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = v5;
        uint64_t v9 = (char *)MEMORY[0x18C117680](v5, v175);
        BOOL v10 = __OFADD__(v8, 1);
        uint64_t v11 = v8 + 1;
        if (v10) {
          goto LABEL_112;
        }
      }
      else
      {
        uint64_t v12 = v5;
        uint64_t v9 = (char *)*(id *)(v175 + 32 + 8 * v5);
        BOOL v10 = __OFADD__(v12, 1);
        uint64_t v11 = v12 + 1;
        if (v10)
        {
LABEL_112:
          __break(1u);
          goto LABEL_113;
        }
      }
      uint64_t v178 = v11;
      uint64_t v180 = v9;
      int v13 = &v9[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      if (v9[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_isFromDisplayList] != 1) {
        break;
      }
      swift_beginAccess();
      uint64_t v14 = *(void *)v13;
      uint64_t v15 = *(void *)(v14 + 16);
      if (!v15) {
        goto LABEL_45;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v194 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = (uint64_t *)(v14 + 48);
      char v20 = -1;
      do
      {
        uint64_t v21 = *v19;
        if (!*v19) {
          goto LABEL_15;
        }
        unsigned __int8 v195 = v20;
        int v22 = *(unsigned __int8 *)(v21 + 16);
        id v23 = (id)*(v19 - 1);
        swift_retain();
        swift_bridgeObjectRetain();
        if (v22 == 1) {
          AccessibilityGeometryStorage.updatePath()();
        }
        int v24 = *(unsigned __int8 *)(v21 + 176);
        if (v24 == 255)
        {
          swift_release();
          swift_bridgeObjectRelease();

          goto LABEL_15;
        }
        long long v188 = v23;
        uint64_t v25 = v18;
        uint64_t v26 = *(void *)(v21 + 144);
        uint64_t v27 = *(void *)(v21 + 152);
        uint64_t v29 = *(void *)(v21 + 160);
        uint64_t v28 = *(void *)(v21 + 168);
        *(void *)&long long v227 = v26;
        *((void *)&v227 + 1) = v27;
        uint64_t v30 = v16;
        uint64_t v31 = v17;
        *(void *)&long long v228 = v29;
        *((void *)&v228 + 1) = v28;
        char v229 = v24;
        uint64_t v32 = v17;
        uint64_t v33 = v194;
        uint64_t v34 = v25;
        uint64_t v35 = v16;
        uint64_t v36 = v25;
        char v37 = v195;
        unsigned __int8 v191 = v24;
        if (v195 == 0xFF)
        {
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          uint64_t v33 = 0;
          uint64_t v36 = 0;
          char v37 = 6;
        }
        *(void *)&long long v200 = v30;
        *((void *)&v200 + 1) = v31;
        *(void *)&long long v201 = v33;
        *((void *)&v201 + 1) = v36;
        LOBYTE(v202) = v37;
        uint64_t v184 = v31;
        uint64_t v185 = v30;
        uint64_t v230 = v30;
        uint64_t v231 = v31;
        uint64_t v181 = v36;
        uint64_t v182 = v33;
        uint64_t v232 = v33;
        uint64_t v233 = v36;
        unsigned __int8 v183 = v37;
        char v234 = v37;
        uint64_t v38 = v16;
        uint64_t v39 = v32;
        uint64_t v189 = v34;
        outlined copy of Path?(v38, v32, v194, v34, v195);
        outlined copy of Path?(v26, v27, v29, v28, v191);
        if (Path.isEmpty.getter())
        {
          outlined consume of Path?(v26, v27, v29, v28, v191);
          swift_release();
          swift_bridgeObjectRelease();

          uint64_t v40 = v35;
          uint64_t v41 = v39;
          uint64_t v42 = v194;
        }
        else
        {
          Path.boundingRect.getter();
          CGRect v236 = CGRectStandardize(v235);
          if (!CGRectIsEmpty(v236))
          {
            Path.boundingRect.getter();
            CGFloat v44 = v43;
            CGFloat v46 = v45;
            CGFloat v48 = v47;
            CGFloat v50 = v49;
            Path.boundingRect.getter();
            v246.origin.CGFloat x = v51;
            v246.origin.CGFloat y = v52;
            v246.size.CGFloat width = v53;
            v246.size.CGFloat height = v54;
            v237.origin.CGFloat x = v44;
            v237.origin.CGFloat y = v46;
            v237.size.CGFloat width = v48;
            v237.size.CGFloat height = v50;
            if (CGRectContainsRect(v237, v246))
            {
              outlined consume of Path.Storage(v185, v184, v182, v181, v183);
              swift_release();
              swift_bridgeObjectRelease();

              outlined consume of Path?(v35, v39, v194, v189, v195);
              long long v200 = v227;
              long long v201 = v228;
              LOBYTE(v202) = v229;
            }
            else
            {
              Path.boundingRect.getter();
              CGFloat v56 = v55;
              CGFloat v58 = v57;
              CGFloat v60 = v59;
              CGFloat v62 = v61;
              Path.boundingRect.getter();
              v247.origin.CGFloat x = v63;
              v247.origin.CGFloat y = v64;
              v247.size.CGFloat width = v65;
              v247.size.CGFloat height = v66;
              v238.origin.CGFloat x = v56;
              v238.origin.CGFloat y = v58;
              v238.size.CGFloat width = v60;
              v238.size.CGFloat height = v62;
              if (!CGRectContainsRect(v238, v247)) {
                Path.formTrivialUnion(_:)();
              }
              outlined consume of Path?(v26, v27, v29, v28, v191);
              swift_release();
              swift_bridgeObjectRelease();

              outlined consume of Path?(v35, v39, v194, v189, v195);
            }
            goto LABEL_27;
          }
          outlined consume of Path?(v26, v27, v29, v28, v191);
          swift_release();
          swift_bridgeObjectRelease();

          uint64_t v41 = v39;
          uint64_t v40 = v35;
          uint64_t v42 = v194;
        }
        outlined consume of Path?(v40, v41, v42, v189, v195);
LABEL_27:
        uint64_t v17 = *((void *)&v200 + 1);
        uint64_t v16 = v200;
        uint64_t v18 = *((void *)&v201 + 1);
        uint64_t v194 = v201;
        char v20 = v202;
LABEL_15:
        v19 += 5;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease_n();
      if (v20 != -1)
      {
        uint64_t v78 = v16;

        goto LABEL_101;
      }
LABEL_46:
      LOBYTE(v200) = v176;
      AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v200, (char *)v222);
      char v79 = v222[0];
      uint64_t v190 = v18;
      uint64_t v187 = v16;
      if (LOBYTE(v222[0]) != 2)
      {
        AccessibilityNode.contentPath.getter((uint64_t)v207);
        outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v207, (uint64_t)v217, &lazy cache variable for type metadata for Path?);
        if (v218 != 255)
        {
          long long v219 = v217[0];
          long long v220 = v217[1];
          unsigned __int8 v221 = v218;
          Path.boundingRect.getter();
          CGRectStandardize(v239);
          outlined release of Path?((uint64_t)v207, (void (*)(void, void, void, void, void))outlined consume of Path?);
          goto LABEL_100;
        }
        char v192 = v79;
        uint64_t v186 = v17;
        long long v95 = &v180[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        uint64_t v96 = *(void *)v95;
        uint64_t v97 = *(void *)(*(void *)v95 + 16);
        if (v97)
        {
          swift_bridgeObjectRetain();
          uint64_t v98 = v96 + 40 * v97;
          while (1)
          {
            if (v97 > *(void *)(v96 + 16)) {
              goto LABEL_111;
            }
            uint64_t v101 = *(void *)(v98 + 8);
            if (v101)
            {
              uint64_t v102 = *(void **)v98;
              if ((*(unsigned char *)(v101 + 17) & 1) == 0
                || (*(unsigned char *)(v101 + 17) = 0, (*(unsigned char *)(v101 + 80) & 1) != 0)
                || (uint64_t v103 = *(void *)(v101 + 24), v103 == 1))
              {
                id v99 = v102;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                uint64_t v105 = *(void *)(v101 + 56);
                uint64_t v104 = *(void *)(v101 + 48);
                uint64_t v106 = *(void *)(v101 + 32);
                uint64_t v107 = *(void *)(v101 + 40);
                long long v224 = 0uLL;
                long long v225 = *(_OWORD *)(v101 + 64);
                uint64_t v202 = 0;
                long long v200 = 0u;
                long long v201 = 0u;
                char v203 = 2;
                *(void *)&long long v197 = v103;
                *((void *)&v197 + 1) = v106;
                *(void *)&long long v198 = v107;
                *((void *)&v198 + 1) = v104;
                uint64_t v199 = v105;
                id v99 = v102;
                swift_retain_n();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of Transaction?(v103);
                CGRect.convert(to:transform:)();
                outlined destroy of CoordinateSpace((uint64_t)&v200);
                outlined consume of Transaction?(v103);
                long long v108 = v225;
                *(_OWORD *)(v101 + 88) = v224;
                *(_OWORD *)(v101 + 104) = v108;
                *(unsigned char *)(v101 + 120) = 0;
              }
              char v100 = *(unsigned char *)(v101 + 120);
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              uint64_t result = swift_release_n();
              if ((v100 & 1) == 0) {
                break;
              }
            }
            v98 -= 40;
            if (!--v97) {
              goto LABEL_89;
            }
          }
          if (v97 <= *(void *)(v96 + 16))
          {
            uint64_t v120 = *(void *)(v98 + 8);
            if (!v120) {
              goto LABEL_132;
            }
            id v121 = *(void **)v98;
            if (*(unsigned char *)(v120 + 17) != 1
              || (*(unsigned char *)(v120 + 17) = 0, (*(unsigned char *)(v120 + 80) & 1) != 0)
              || (uint64_t v122 = *(void *)(v120 + 24), v122 == 1))
            {
              id v123 = v121;
              swift_retain_n();
              swift_bridgeObjectRetain();
            }
            else
            {
              uint64_t v136 = *(void *)(v120 + 48);
              uint64_t v135 = *(void *)(v120 + 56);
              uint64_t v138 = *(void *)(v120 + 32);
              uint64_t v137 = *(void *)(v120 + 40);
              long long v224 = 0uLL;
              long long v225 = *(_OWORD *)(v120 + 64);
              uint64_t v202 = 0;
              long long v200 = 0u;
              long long v201 = 0u;
              char v203 = 2;
              *(void *)&long long v197 = v122;
              *((void *)&v197 + 1) = v138;
              *(void *)&long long v198 = v137;
              *((void *)&v198 + 1) = v136;
              uint64_t v199 = v135;
              id v123 = v121;
              swift_retain_n();
              swift_bridgeObjectRetain();
              outlined copy of Transaction?(v122);
              CGRect.convert(to:transform:)();
              outlined destroy of CoordinateSpace((uint64_t)&v200);
              outlined consume of Transaction?(v122);
              long long v139 = v225;
              *(_OWORD *)(v120 + 88) = v224;
              *(_OWORD *)(v120 + 104) = v139;
              *(unsigned char *)(v120 + 120) = 0;
            }
            char v124 = *(unsigned char *)(v120 + 120);

            swift_bridgeObjectRelease();
            uint64_t result = swift_release_n();
            if (v124) {
              goto LABEL_132;
            }
            goto LABEL_98;
          }
          goto LABEL_129;
        }
        swift_bridgeObjectRetain();
LABEL_89:
        swift_bridgeObjectRelease();
        LOBYTE(v200) = v192;
        long long v94 = v180;
        AccessibilityNode.contentFrameFromChildren(with:)(&v210, &v200);
        if ((v211 & 1) == 0) {
          goto LABEL_99;
        }
LABEL_4:
        outlined consume of Path?(v187, v186, v194, v190, 0xFFu);

        uint64_t v5 = v178;
        uint64_t v6 = v179;
        uint64_t v7 = v177;
        goto LABEL_5;
      }
      uint64_t v186 = v17;
      int v80 = &v180[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      swift_beginAccess();
      uint64_t v81 = *(void *)v80;
      uint64_t v82 = *(void *)(*(void *)v80 + 16);
      if (!v82)
      {
        swift_bridgeObjectRetain();
LABEL_61:
        swift_bridgeObjectRelease();
        LOBYTE(v200) = 2;
        long long v94 = v180;
        AccessibilityNode.contentFrameFromChildren(with:)(&v208, &v200);
        if ((v209 & 1) == 0) {
          goto LABEL_99;
        }
        goto LABEL_4;
      }
      swift_bridgeObjectRetain();
      uint64_t v83 = v81 + 40 * v82;
      while (1)
      {
        if (v82 > *(void *)(v81 + 16)) {
          goto LABEL_110;
        }
        uint64_t v86 = *(void *)(v83 + 8);
        if (v86)
        {
          unsigned __int8 v87 = *(void **)v83;
          if ((*(unsigned char *)(v86 + 17) & 1) == 0
            || (*(unsigned char *)(v86 + 17) = 0, (*(unsigned char *)(v86 + 80) & 1) != 0)
            || (uint64_t v88 = *(void *)(v86 + 24), v88 == 1))
          {
            id v84 = v87;
            swift_retain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v90 = *(void *)(v86 + 56);
            uint64_t v89 = *(void *)(v86 + 48);
            uint64_t v91 = *(void *)(v86 + 32);
            uint64_t v92 = *(void *)(v86 + 40);
            long long v224 = 0uLL;
            long long v225 = *(_OWORD *)(v86 + 64);
            uint64_t v202 = 0;
            long long v200 = 0u;
            long long v201 = 0u;
            char v203 = 2;
            *(void *)&long long v197 = v88;
            *((void *)&v197 + 1) = v91;
            *(void *)&long long v198 = v92;
            *((void *)&v198 + 1) = v89;
            uint64_t v199 = v90;
            id v84 = v87;
            swift_retain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of Transaction?(v88);
            CGRect.convert(to:transform:)();
            outlined destroy of CoordinateSpace((uint64_t)&v200);
            outlined consume of Transaction?(v88);
            long long v93 = v225;
            *(_OWORD *)(v86 + 88) = v224;
            *(_OWORD *)(v86 + 104) = v93;
            *(unsigned char *)(v86 + 120) = 0;
          }
          char v85 = *(unsigned char *)(v86 + 120);
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          uint64_t result = swift_release_n();
          if ((v85 & 1) == 0) {
            break;
          }
        }
        v83 -= 40;
        if (!--v82) {
          goto LABEL_61;
        }
      }
      if (v82 > *(void *)(v81 + 16))
      {
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      uint64_t v115 = *(void *)(v83 + 8);
      if (!v115) {
        goto LABEL_131;
      }
      long long v116 = *(void **)v83;
      if (*(unsigned char *)(v115 + 17) != 1
        || (*(unsigned char *)(v115 + 17) = 0, (*(unsigned char *)(v115 + 80) & 1) != 0)
        || (uint64_t v117 = *(void *)(v115 + 24), v117 == 1))
      {
        id v118 = v116;
        swift_retain_n();
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v131 = *(void *)(v115 + 48);
        uint64_t v130 = *(void *)(v115 + 56);
        uint64_t v133 = *(void *)(v115 + 32);
        uint64_t v132 = *(void *)(v115 + 40);
        long long v224 = 0uLL;
        long long v225 = *(_OWORD *)(v115 + 64);
        uint64_t v202 = 0;
        long long v200 = 0u;
        long long v201 = 0u;
        char v203 = 2;
        *(void *)&long long v197 = v117;
        *((void *)&v197 + 1) = v133;
        *(void *)&long long v198 = v132;
        *((void *)&v198 + 1) = v131;
        uint64_t v199 = v130;
        id v118 = v116;
        swift_retain_n();
        swift_bridgeObjectRetain();
        outlined copy of Transaction?(v117);
        CGRect.convert(to:transform:)();
        outlined destroy of CoordinateSpace((uint64_t)&v200);
        outlined consume of Transaction?(v117);
        long long v134 = v225;
        *(_OWORD *)(v115 + 88) = v224;
        *(_OWORD *)(v115 + 104) = v134;
        *(unsigned char *)(v115 + 120) = 0;
      }
      char v119 = *(unsigned char *)(v115 + 120);

      swift_bridgeObjectRelease();
      uint64_t result = swift_release_n();
      if (v119)
      {
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
        return result;
      }
LABEL_98:
      swift_bridgeObjectRelease();
LABEL_99:
      uint64_t v17 = v186;
LABEL_100:
      Path.init(_:)();
      uint64_t v78 = v212;
      uint64_t v125 = v213;
      uint64_t v126 = v214;
      uint64_t v18 = v215;
      char v20 = v216;
      outlined consume of Path?(v187, v17, v194, v190, 0xFFu);

      uint64_t v17 = v125;
      uint64_t v194 = v126;
LABEL_101:
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v6 = v179;
      }
      else {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v179 + 2) + 1, 1, v179);
      }
      unint64_t v128 = *((void *)v6 + 2);
      unint64_t v127 = *((void *)v6 + 3);
      uint64_t v7 = v177;
      uint64_t v5 = v178;
      if (v128 >= v127 >> 1)
      {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v127 > 1), v128 + 1, 1, v6);
        uint64_t v5 = v178;
        uint64_t v7 = v177;
      }
      *((void *)v6 + 2) = v128 + 1;
      uint64_t v129 = &v6[40 * v128];
      *((void *)v129 + 4) = v78;
      *((void *)v129 + 5) = v17;
      *((void *)v129 + 6) = v194;
      *((void *)v129 + 7) = v18;
      v129[64] = v20;
LABEL_5:
      if (v5 == v7) {
        goto LABEL_116;
      }
    }
    swift_beginAccess();
    uint64_t v67 = *(void *)v13;
    uint64_t v68 = *(void *)(*(void *)v13 + 16);
    if (!v68)
    {
      swift_bridgeObjectRetain();
LABEL_44:
      swift_bridgeObjectRelease();
LABEL_45:
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v194 = 0;
      uint64_t v18 = 0;
      goto LABEL_46;
    }
    swift_bridgeObjectRetain();
    uint64_t v69 = v67 + 40 * v68;
    uint64_t v193 = v67;
    while (1)
    {
      if (v68 > *(void *)(v67 + 16))
      {
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }
      uint64_t v76 = *(void *)(v69 + 8);
      if (v76)
      {
        int v77 = *(unsigned __int8 *)(v76 + 16);
        id v196 = *(id *)v69;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v77 == 1) {
          AccessibilityGeometryStorage.updatePath()();
        }
        uint64_t v70 = *(void *)(v76 + 144);
        uint64_t v71 = *(void *)(v76 + 152);
        uint64_t v73 = *(void *)(v76 + 160);
        uint64_t v72 = *(void *)(v76 + 168);
        int v74 = *(unsigned __int8 *)(v76 + 176);
        outlined copy of Path?(v70, v71, v73, v72, *(unsigned char *)(v76 + 176));
        uint64_t v67 = v193;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_release_n();
        uint64_t result = outlined consume of Path?(v70, v71, v73, v72, v74);
        if (v74 != 255) {
          break;
        }
      }
      v69 -= 40;
      if (!--v68) {
        goto LABEL_44;
      }
    }
    if (v68 <= *(void *)(v193 + 16))
    {
      uint64_t v109 = *(void *)(v69 + 8);
      if (v109)
      {
        int v110 = *(unsigned __int8 *)(v109 + 16);
        id v111 = *(id *)v69;
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        id v112 = v111;
        if (v110 == 1) {
          AccessibilityGeometryStorage.updatePath()();
        }
        uint64_t v17 = *(void *)(v109 + 152);
        int v113 = *(unsigned __int8 *)(v109 + 176);
        uint64_t v78 = *(void *)(v109 + 144);
        uint64_t v194 = *(void *)(v109 + 160);
        uint64_t v114 = *(void *)(v109 + 168);
        outlined copy of Path?(v78, v17, v194, v114, *(unsigned char *)(v109 + 176));

        swift_bridgeObjectRelease_n();
        uint64_t result = swift_release_n();
        if (v113 != 255)
        {
          char v20 = v113;

          swift_bridgeObjectRelease();
          uint64_t v18 = v114;
          goto LABEL_101;
        }
      }
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
LABEL_113:
    __break(1u);
LABEL_114:
    swift_bridgeObjectRetain_n();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = (char *)MEMORY[0x1E4FBC860];
LABEL_116:
  long long v140 = v6;
  swift_bridgeObjectRelease_n();
  long long v204 = 0u;
  long long v205 = 0u;
  char v206 = 6;
  uint64_t v141 = *((void *)v140 + 2);
  if (!v141) {
    goto LABEL_127;
  }
  swift_bridgeObjectRetain();
  long long v142 = v140;
  uint64_t v143 = 32;
  do
  {
    long long v144 = *(_OWORD *)&v142[v143];
    long long v145 = *(_OWORD *)&v142[v143 + 16];
    char v226 = v142[v143 + 32];
    long long v224 = v144;
    long long v225 = v145;
    outlined init with take of Path.Storage((uint64_t)&v224, (uint64_t)&v200);
    outlined release of Path?((uint64_t)&v200, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    if (Path.isEmpty.getter()) {
      goto LABEL_118;
    }
    Path.boundingRect.getter();
    CGRect v241 = CGRectStandardize(v240);
    if (CGRectIsEmpty(v241)) {
      goto LABEL_118;
    }
    Path.boundingRect.getter();
    CGFloat v147 = v146;
    CGFloat v149 = v148;
    CGFloat v151 = v150;
    CGFloat v153 = v152;
    long long v197 = v204;
    long long v198 = v205;
    LOBYTE(v199) = v206;
    Path.boundingRect.getter();
    v248.origin.CGFloat x = v154;
    v248.origin.CGFloat y = v155;
    v248.size.CGFloat width = v156;
    v248.size.CGFloat height = v157;
    v242.origin.CGFloat x = v147;
    v242.origin.CGFloat y = v149;
    v242.size.CGFloat width = v151;
    v242.size.CGFloat height = v153;
    if (!CGRectContainsRect(v242, v248))
    {
      Path.boundingRect.getter();
      CGFloat v159 = v158;
      CGFloat v161 = v160;
      CGFloat v163 = v162;
      CGFloat v165 = v164;
      Path.boundingRect.getter();
      v249.origin.CGFloat x = v166;
      v249.origin.CGFloat y = v167;
      v249.size.CGFloat width = v168;
      v249.size.CGFloat height = v169;
      v243.origin.CGFloat x = v159;
      v243.origin.CGFloat y = v161;
      v243.size.CGFloat width = v163;
      v243.size.CGFloat height = v165;
      if (!CGRectContainsRect(v243, v249)) {
        Path.formTrivialUnion(_:)();
      }
LABEL_118:
      outlined release of Path?((uint64_t)&v224, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
      goto LABEL_119;
    }
    outlined release of Path?((uint64_t)&v197, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    long long v204 = v224;
    long long v205 = v225;
    char v206 = v226;
LABEL_119:
    v143 += 40;
    --v141;
    long long v142 = v140;
  }
  while (v141);
  swift_bridgeObjectRelease();
LABEL_127:
  swift_bridgeObjectRelease();
  v222[0] = v204;
  v222[1] = v205;
  char v223 = v206;
  Path.boundingRect.getter();
  CGRect v245 = CGRectStandardize(v244);
  CGFloat x = v245.origin.x;
  CGFloat y = v245.origin.y;
  CGFloat width = v245.size.width;
  CGFloat height = v245.size.height;
  uint64_t result = outlined release of Path?((uint64_t)v222, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  *(CGFloat *)a2 = x;
  *(CGFloat *)(a2 + 8) = y;
  *(CGFloat *)(a2 + 16) = width;
  *(CGFloat *)(a2 + 24) = height;
  *(unsigned char *)(a2 + 32) = 0;
  return result;
}

uint64_t AccessibilityNode.contentFrame(with:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  LOBYTE(v23[0]) = *a1;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)v23, &v11);
  char v3 = v11;
  if (v11 == 2)
  {
    AccessibilityNode.globalFrame.getter((uint64_t)&v15);
    CGFloat x = v15;
    CGFloat y = v16;
    CGFloat width = v17;
    CGFloat height = v18;
    unsigned __int8 v8 = v19;
    uint64_t result = outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)&v15, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBB718]);
    if (v24 == 1)
    {
      LOBYTE(v13[0]) = 2;
      uint64_t result = AccessibilityNode.contentFrameFromChildren(with:)((char *)v13, (uint64_t)&v20);
      CGFloat y = *((double *)&v20 + 1);
      CGFloat x = *(double *)&v20;
      CGFloat height = *((double *)&v21 + 1);
      CGFloat width = *(double *)&v21;
      unsigned __int8 v8 = v22;
    }
  }
  else
  {
    AccessibilityNode.contentPath.getter((uint64_t)v12);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)&v20, &lazy cache variable for type metadata for Path?);
    if (v22 == 255)
    {
      AccessibilityNode.globalFrame.getter((uint64_t)v13);
      CGFloat x = *(double *)v13;
      CGFloat y = *(double *)&v13[1];
      CGFloat width = *(double *)&v13[2];
      CGFloat height = *(double *)&v13[3];
      unsigned __int8 v8 = v14;
      uint64_t result = outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)v13, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBB718]);
      if (v24 == 1)
      {
        char v10 = v3;
        uint64_t result = AccessibilityNode.contentFrameFromChildren(with:)(&v10, (uint64_t)&v15);
        CGFloat x = v15;
        CGFloat y = v16;
        CGFloat width = v17;
        CGFloat height = v18;
        unsigned __int8 v8 = v19;
      }
    }
    else
    {
      v23[0] = v20;
      v23[1] = v21;
      unsigned __int8 v24 = v22;
      Path.boundingRect.getter();
      CGRect v26 = CGRectStandardize(v25);
      CGFloat x = v26.origin.x;
      CGFloat y = v26.origin.y;
      CGFloat width = v26.size.width;
      CGFloat height = v26.size.height;
      uint64_t result = outlined release of Path?((uint64_t)v12, (void (*)(void, void, void, void, void))outlined consume of Path?);
      unsigned __int8 v8 = 0;
    }
  }
  *(CGFloat *)a2 = x;
  *(CGFloat *)(a2 + 8) = y;
  *(CGFloat *)(a2 + 16) = width;
  *(CGFloat *)(a2 + 24) = height;
  *(unsigned char *)(a2 + 32) = v8;
  return result;
}

uint64_t AccessibilityNode.globalFrame.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 16);
  if (!v4)
  {
    swift_bridgeObjectRetain();
LABEL_13:
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    char v17 = 1;
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v16;
    *(unsigned char *)(a1 + 32) = v17;
    return result;
  }
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v6 = v3 + 40 * v4;
  while (1)
  {
    if (v4 > *(void *)(v3 + 16))
    {
      __break(1u);
      goto LABEL_22;
    }
    uint64_t v9 = *(void *)(v6 + 8);
    if (v9)
    {
      id v10 = *(id *)v6;
      if (*(unsigned char *)(v9 + 17) != 1
        || (*(unsigned char *)(v9 + 17) = 0, (*(unsigned char *)(v9 + 80) & 1) != 0)
        || (uint64_t v11 = *(void *)(v9 + 24), v11 == 1))
      {
        id v7 = v10;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v26 = 0uLL;
        long long v27 = *(_OWORD *)(v9 + 64);
        uint64_t v24 = 0;
        memset(v23, 0, sizeof(v23));
        char v25 = 2;
        id v7 = v10;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined copy of Transaction?(v11);
        CGRect.convert(to:transform:)();
        outlined destroy of CoordinateSpace((uint64_t)v23);
        outlined consume of Transaction?(v11);
        long long v12 = v27;
        *(_OWORD *)(v9 + 88) = v26;
        *(_OWORD *)(v9 + 104) = v12;
        *(unsigned char *)(v9 + 120) = 0;
      }
      int v8 = *(unsigned __int8 *)(v9 + 120);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      uint64_t result = swift_release_n();
      if (v8 != 1) {
        break;
      }
    }
    v6 -= 40;
    if (!--v4) {
      goto LABEL_13;
    }
  }
  if (v4 > *(void *)(v3 + 16))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v18 = *(void *)(v6 + 8);
  if (v18)
  {
    int v19 = *(unsigned __int8 *)(v18 + 17);
    id v20 = *(id *)v6;
    swift_retain_n();
    swift_bridgeObjectRetain();
    if (v19 == 1) {
      AccessibilityGeometryStorage.updateFrame()();
    }
    uint64_t v13 = *(void *)(v18 + 88);
    uint64_t v14 = *(void *)(v18 + 96);
    uint64_t v15 = *(void *)(v18 + 104);
    uint64_t v16 = *(void *)(v18 + 112);
    char v21 = *(unsigned char *)(v18 + 120);

    swift_bridgeObjectRelease();
    uint64_t result = swift_release_n();
    if ((v21 & 1) == 0)
    {
      char v17 = 0;
      goto LABEL_14;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t AccessibilityNode.explicitActivationPoint.getter()
{
  AccessibilityNode.attachment.getter(v8.i64);

  uint64_t v1 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v1, &v8);
  swift_bridgeObjectRelease();
  if (!v10)
  {
    swift_bridgeObjectRelease();
    return AccessibilityNode.childActivationPoint(implicit:)(0);
  }
  int8x16_t v2 = v8;
  char v3 = v9;
  int v4 = ~(_BYTE)v9;
  outlined consume of AccessibilityActivationPointStorage?(v8.i64[0], v8.i64[1], v9, v10);
  swift_bridgeObjectRelease();
  if (!v4) {
    return AccessibilityNode.childActivationPoint(implicit:)(0);
  }
  int8x16_t v8 = v2;
  LOBYTE(v9) = v3;
  id v5 = v0;
  uint64_t v6 = AccessibilityNode.resolvedActivationPoint(for:)((long long *)v8.i8);

  return v6;
}

uint64_t AccessibilityNode.implicitActivationPoint.getter()
{
  AccessibilityNode.attachment.getter(v17.i64);

  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, &v17);
  swift_bridgeObjectRelease();
  if (v19)
  {
    char v1 = ~(_BYTE)v18;
    outlined consume of AccessibilityActivationPointStorage?(v17.i64[0], v17.i64[1], v18, v19);
    swift_bridgeObjectRelease();
    if (v1) {
      goto LABEL_8;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  AccessibilityNode.platformElement.getter();
  if (v2)
  {
    char v3 = v2;
    id v4 = objc_msgSend(v2, sel_knownRepresentedElement);
    objc_msgSend(v4, sel_accessibilityActivationPoint);
    double v6 = v5;
    double v8 = v7;

    if (v6 != 0.0 || v8 != 0.0) {
      return *(void *)&v6;
    }
  }
LABEL_8:
  uint64_t result = AccessibilityNode.textLinkActivationPoint.getter();
  if (v10 == -1)
  {
    uint64_t result = AccessibilityNode.childActivationPoint(implicit:)(1);
    if (v11 == -1)
    {
      AccessibilityNode.attachment.getter(v17.i64);
      uint64_t v12 = v17.i64[0];

      v17.i64[0] = v12;
      char v13 = AccessibilityProperties.subscript.getter();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0) {
        return 0;
      }
      static UnitPoint.center.getter();
      v17.i64[0] = v14;
      v17.i64[1] = v15;
      LOBYTE(v18) = 1;
      uint64_t result = AccessibilityNode.resolvedActivationPoint(for:)((long long *)v17.i8);
      if (v16 == -1) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t AccessibilityNode.childActivationPoint(implicit:)(int a1)
{
  void (*v23)(long long *__return_ptr, void, void);
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  void (*v28)(long long *__return_ptr, uint64_t, uint64_t);
  long long v29;
  uint64_t v30;
  uint64_t v31;
  long long v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  double v37;
  double v38;
  double v39;
  double v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t result;
  void v51[4];
  long long v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  long long v58;
  uint64_t v59;
  long long v60;
  long long v61;
  long long v62;
  char v63[41];

  int8x16_t v2 = v1;
  AccessibilityNode.visibility.getter((int *)&v58);
  *(void *)&double v61 = v58;
  AccessibilityNullableOptionSet<>.resolved.getter();
  if ((v63[9] | 4) == 4)
  {
    id v4 = (unint64_t *)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
    swift_beginAccess();
    unint64_t v11 = *v4;
    uint64_t v5 = swift_allocObject();
    *(unsigned char *)(v5 + 16) = a1 & 1;
    *(void *)(v5 + 24) = v2;
    MEMORY[0x1F4188790](v5);
    void v51[2] = partial apply for closure #1 in AccessibilityNode.childActivationPoint(implicit:);
    v51[3] = v6;
    swift_bridgeObjectRetain_n();
    double v7 = v2;
    uint64_t v8 = 0;
    uint64_t v9 = specialized Sequence.filter(_:)((uint64_t (*)(id *))partial apply for specialized closure #1 in Collection<>.filterVisible(_:), (uint64_t)v51, v11);
    swift_bridgeObjectRelease();
    swift_release();
    CGFloat v58 = *(_OWORD *)&v7[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
    EnvironmentValues.layoutDirection.getter();
    LOBYTE(v10) = v61;
    LOBYTE(v58) = 4;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v58, v63);
    LOBYTE(v11) = v63[0];
    if (v9 < 0 || (v9 & 0x4000000000000000) != 0)
    {
LABEL_50:
      double v49 = swift_bridgeObjectRetain();
      uint64_t v12 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v49);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    *(void *)&CGFloat v58 = v12;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v58, 0, v11, v10);
    if (v8)
    {
      uint64_t result = swift_release();
      __break(1u);
      return result;
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = v58;
    if ((v58 & 0x8000000000000000) != 0 || (v58 & 0x4000000000000000) != 0)
    {
      swift_retain();
      CGFloat v56 = _CocoaArrayWrapper.endIndex.getter();
      if (v56) {
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v58 + 16);
      swift_retain();
      CGFloat v56 = v13;
      if (v13)
      {
LABEL_9:
        double v57 = v8 & 0xC000000000000001;
        uint64_t v14 = 4;
        CGFloat v53 = MEMORY[0x1E4FBC840] + 8;
        CGFloat v52 = xmmword_18834FC50;
        double v55 = a1;
        CGFloat v54 = v8;
        while (1)
        {
          unint64_t v11 = v14 - 4;
          if (v57) {
            id v16 = (id)MEMORY[0x18C117680](v14 - 4, v8);
          }
          else {
            id v16 = *(id *)(v8 + 8 * v14);
          }
          int8x16_t v17 = v16;
          uint64_t v18 = v14 - 3;
          if (__OFADD__(v11, 1))
          {
            __break(1u);
            goto LABEL_50;
          }
          if (a1)
          {
            AccessibilityNode.attachment.getter((uint64_t *)&v58);
            uint64_t v19 = v58;

            if (*(void *)(v19 + 16)
              && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AF0]), (v21 & 1) != 0))
            {
              outlined init with copy of TableColumnList(*(void *)(v19 + 56) + 40 * v20, (uint64_t)&v58);
              long long v22 = v60;
              __swift_project_boxed_opaque_existential_1(&v58, v60);
              id v23 = *(void (**)(long long *__return_ptr, void, void))(*((void *)&v22 + 1) + 8);
              swift_bridgeObjectRetain();
              v23(&v61, v22, *((void *)&v22 + 1));
              a1 = v55;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
            }
            else
            {
              double v61 = 0u;
              CGFloat v62 = 0u;
              swift_bridgeObjectRetain();
            }
            type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
            type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?);
            if (swift_dynamicCast())
            {
              uint64_t v29 = v58;
              uint64_t v30 = v59;
              uint64_t v31 = v60;
              swift_bridgeObjectRelease();
              if (v31)
              {
                outlined consume of AccessibilityActivationPointStorage??(v29, *((uint64_t *)&v29 + 1), v30, v31);
                swift_bridgeObjectRelease();
                a1 = v55;
                if ((_BYTE)v30 != 0xFF)
                {
LABEL_40:
                  AccessibilityNode.textLinkActivationPoint.getter();
                  if (v41 != -1) {
                    goto LABEL_46;
                  }
                  AccessibilityNode.childActivationPoint(implicit:)(1);
                  if (v42 != -1) {
                    goto LABEL_46;
                  }
                  AccessibilityNode.attachment.getter((uint64_t *)&v58);
                  uint64_t v10 = v58;

                  *(void *)&CGFloat v58 = v10;
                  LOBYTE(v61) = 20;
                  double v43 = AccessibilityProperties.subscript.getter();
                  swift_bridgeObjectRelease();
                  if (v43)
                  {
                    static UnitPoint.center.getter();
                    *(void *)&CGFloat v58 = v44;
                    *((void *)&v58 + 1) = v45;
                    LOBYTE(v59) = 1;
                    AccessibilityNode.resolvedActivationPoint(for:)(&v58);
                    if (v46 != -1) {
                      goto LABEL_46;
                    }
                  }
                  goto LABEL_13;
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                a1 = v55;
              }
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }
            AccessibilityNode.platformElement.getter();
            if (v34)
            {
              uint64_t v35 = v34;
              uint64_t v36 = objc_msgSend(v34, sel_knownRepresentedElement);
              objc_msgSend(v36, sel_accessibilityActivationPoint);
              uint64_t v38 = v37;
              uint64_t v40 = v39;

              if (v38 != 0.0 || v40 != 0.0)
              {
LABEL_46:
                swift_release_n();
                double v47 = AccessibilityNode.implicitActivationPoint.getter();
LABEL_48:
                CGFloat v48 = v47;

                return v48;
              }
            }
            goto LABEL_40;
          }
          AccessibilityNode.attachment.getter((uint64_t *)&v58);
          uint64_t v24 = v58;

          if (*(void *)(v24 + 16)
            && (char v25 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AF0]), (v26 & 1) != 0))
          {
            outlined init with copy of TableColumnList(*(void *)(v24 + 56) + 40 * v25, (uint64_t)&v58);
            long long v27 = *((void *)&v60 + 1);
            uint64_t v10 = v60;
            __swift_project_boxed_opaque_existential_1(&v58, v60);
            uint64_t v28 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v27 + 8);
            swift_bridgeObjectRetain();
            v28(&v61, v10, v27);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
          }
          else
          {
            double v61 = 0u;
            CGFloat v62 = 0u;
            swift_bridgeObjectRetain();
          }
          type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
          type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?);
          if ((swift_dynamicCast() & 1) == 0) {
            break;
          }
          uint64_t v32 = v58;
          uint64_t v33 = v59;
          uint64_t v10 = v60;
          swift_bridgeObjectRelease();
          if (!v10)
          {
            swift_bridgeObjectRelease();
            a1 = v55;
            goto LABEL_11;
          }
          outlined consume of AccessibilityActivationPointStorage??(v32, *((uint64_t *)&v32 + 1), v33, v10);
          swift_bridgeObjectRelease();
          a1 = v55;
          if ((_BYTE)v33 == 0xFF) {
            goto LABEL_11;
          }
          CGFloat v58 = v32;
          LOBYTE(v59) = v33;
          AccessibilityNode.resolvedActivationPoint(for:)(&v58);
LABEL_12:
          uint64_t v8 = v54;
          if (v15 != -1)
          {
            swift_release_n();
            double v47 = AccessibilityNode.explicitActivationPoint.getter();
            goto LABEL_48;
          }
LABEL_13:

          ++v14;
          if (v18 == v56) {
            goto LABEL_52;
          }
        }
        CGFloat v58 = 0uLL;
        double v59 = 0;
        CGFloat v60 = v52;
        swift_bridgeObjectRelease_n();
LABEL_11:
        AccessibilityNode.childActivationPoint(implicit:)(0);
        goto LABEL_12;
      }
    }
LABEL_52:
    swift_release_n();
  }
  return 0;
}

uint64_t closure #1 in AccessibilityNode.childActivationPoint(implicit:)(uint64_t a1, char a2, uint64_t a3)
{
  if ((a2 & 1) == 0) {
    return 1;
  }
  AccessibilityNode.attachment.getter((uint64_t *)&v28);

  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized AccessibilityProperties.subscript.getter(v4);
  swift_bridgeObjectRelease_n();
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
LABEL_7:
    memset(v30, 0, 41);
    swift_bridgeObjectRelease();
LABEL_8:
    outlined destroy of AccessibilityValueStorage?((uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction?);
    return 1;
  }
  uint64_t v26 = a3;
  uint64_t v7 = v5 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of AnyAccessibilityAction(v7, (uint64_t)&v28);
    memset(v27, 0, sizeof(v27));
    long long v8 = *(_OWORD *)&v29[8];
    __swift_project_boxed_opaque_existential_1(&v28, *(uint64_t *)&v29[8]);
    uint64_t v9 = *(uint64_t (**)(_OWORD *, ValueMetadata *, unint64_t, void, void))(*((void *)&v8 + 1)
                                                                                               + 80);
    unint64_t v10 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
    if (v9(v27, &type metadata for AccessibilityVoidAction, v10, v8, *((void *)&v8 + 1))) {
      break;
    }
    outlined destroy of AnyAccessibilityAction((uint64_t)&v28);
    v7 += 48;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  v30[0] = v28;
  v30[1] = *(_OWORD *)v29;
  *(_OWORD *)((char *)&v30[1] + 9) = *(_OWORD *)&v29[9];
  swift_bridgeObjectRelease();
  if (!*((void *)&v30[1] + 1)) {
    goto LABEL_8;
  }
  *(_OWORD *)&v32[9] = *(_OWORD *)((char *)&v30[1] + 9);
  long long v31 = v30[0];
  *(_OWORD *)uint64_t v32 = v30[1];
  uint64_t v12 = *((void *)&v30[1] + 1);
  uint64_t v13 = *(_OWORD *)((char *)&v30[1] + 9) >> 56;
  __swift_project_boxed_opaque_existential_1(&v31, *((uint64_t *)&v30[1] + 1));
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  if (v17)
  {
    uint64_t v18 = v14;
    uint64_t v19 = v15;
    char v20 = v16 & 1;
    uint64_t v21 = *(void *)(v26 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
    *(void *)&v30[0] = *(void *)(v26 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    *((void *)&v30[0] + 1) = v21;
    swift_retain();
    swift_retain();
    LOBYTE(v28) = v20;
    char v22 = static AccessibilityCore.textResolvesToEmpty(_:in:)();
    outlined consume of Text.Storage(v18, v19, v20);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      outlined destroy of AnyAccessibilityAction((uint64_t)&v31);
      return 0;
    }
  }
  AccessibilityNode.attachment.getter((uint64_t *)v30);

  uint64_t v23 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v23, (uint64_t)v30);
  swift_bridgeObjectRelease_n();
  if (*(void *)&v30[0])
  {
    uint64_t v24 = *(void *)(v26 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
    *(void *)&v30[0] = *(void *)(v26 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    *((void *)&v30[0] + 1) = v24;
    swift_retain();
    swift_retain();
    char v25 = static AccessibilityCore.textsResolveToEmpty(_:in:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of AnyAccessibilityAction((uint64_t)&v31);
    if ((v25 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    outlined destroy of AnyAccessibilityAction((uint64_t)&v31);
  }
  return 1;
}

uint64_t AccessibilityNode.resolvedDragPoints(with:)(char a1)
{
  int8x16_t v2 = v1;
  AccessibilityNode.visibility.getter(v28.i32);
  uint64_t v31 = v28.i64[0];
  AccessibilityNullableOptionSet<>.resolved.getter();
  if (v32 == 3) {
    return 0;
  }
  uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
  swift_retain();
  swift_retain();
  AccessibilityNode.attachment.getter(v28.i64);

  uint64_t v7 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v7, &v28);
  swift_bridgeObjectRelease_n();
  uint64_t v8 = v30;
  if (v30)
  {
    uint64_t v10 = v28.i64[1];
    uint64_t v9 = v29;
    uint64_t v11 = v28.i64[0];
    swift_bridgeObjectRetain();
    outlined consume of AccessibilityActivationPointStorage?(v11, v10, v9, v8);
    swift_retain();
    swift_retain();
    uint64_t v12 = v2;
    unint64_t v4 = specialized Sequence.compactMap<A>(_:)(v8, v5, v6, v12, a1 & 1, 0);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_6;
      }
    }
    else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      swift_release();
      swift_release();
      return v4;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = &v2[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
  swift_beginAccess();
  uint64_t v15 = *(void *)v14;
  if (!(*(void *)v14 >> 62))
  {
    uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v16) {
      goto LABEL_11;
    }
LABEL_24:
    uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
LABEL_25:
    swift_bridgeObjectRelease_n();
    uint64_t v25 = v19[2];
    if (v25)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = 0;
      unint64_t v4 = MEMORY[0x1E4FBC860];
      do
      {
        unint64_t v27 = v19[v26++ + 4];
        uint64_t v31 = v4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v27);
        swift_bridgeObjectRelease();
        unint64_t v4 = v31;
      }
      while (v25 != v26);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return MEMORY[0x1E4FBC860];
    }
    return v4;
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v16 = result;
  if (!result) {
    goto LABEL_24;
  }
LABEL_11:
  if (v16 >= 1)
  {
    uint64_t v18 = 0;
    uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v15 & 0xC000000000000001) != 0) {
        id v20 = (id)MEMORY[0x18C117680](v18, v15);
      }
      else {
        id v20 = *(id *)(v15 + 8 * v18 + 32);
      }
      uint64_t v21 = v20;
      uint64_t v22 = AccessibilityNode.resolvedDragPoints(with:)(1);

      if (v22)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
        }
        unint64_t v24 = v19[2];
        unint64_t v23 = v19[3];
        if (v24 >= v23 >> 1) {
          uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v19);
        }
        void v19[2] = v24 + 1;
        v19[v24 + 4] = v22;
      }
      ++v18;
    }
    while (v16 != v18);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityNode.resolvedDropPoints(with:)(char a1)
{
  int8x16_t v2 = v1;
  AccessibilityNode.visibility.getter(v29.i32);
  uint64_t v33 = v29.i64[0];
  AccessibilityNullableOptionSet<>.resolved.getter();
  if (v34 == 3) {
    return 0;
  }
  uint64_t v5 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  uint64_t v6 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
  swift_retain();
  swift_retain();
  AccessibilityNode.attachment.getter(v29.i64);

  uint64_t v7 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v7, &v29);
  swift_bridgeObjectRelease_n();
  uint64_t v8 = v31;
  if (v31)
  {
    uint64_t v9 = v32;
    uint64_t v11 = v29.i64[1];
    uint64_t v10 = v30;
    uint64_t v12 = v29.i64[0];
    swift_bridgeObjectRetain();
    outlined consume of AccessibilityActivationPointStorage?(v12, v11, v10, v8);
    swift_retain();
    swift_retain();
    uint64_t v13 = v2;
    unint64_t v4 = specialized Sequence.compactMap<A>(_:)(v9, v5, v6, v13, a1 & 1, 1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_6;
      }
    }
    else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      swift_release();
      swift_release();
      return v4;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = &v2[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
  swift_beginAccess();
  uint64_t v16 = *(void *)v15;
  if (!(*(void *)v15 >> 62))
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v17) {
      goto LABEL_11;
    }
LABEL_24:
    id v20 = (void *)MEMORY[0x1E4FBC860];
LABEL_25:
    swift_bridgeObjectRelease_n();
    uint64_t v26 = v20[2];
    if (v26)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = 0;
      unint64_t v4 = MEMORY[0x1E4FBC860];
      do
      {
        unint64_t v28 = v20[v27++ + 4];
        uint64_t v33 = v4;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v28);
        swift_bridgeObjectRelease();
        unint64_t v4 = v33;
      }
      while (v26 != v27);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return MEMORY[0x1E4FBC860];
    }
    return v4;
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v17 = result;
  if (!result) {
    goto LABEL_24;
  }
LABEL_11:
  if (v17 >= 1)
  {
    uint64_t v19 = 0;
    id v20 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v16 & 0xC000000000000001) != 0) {
        id v21 = (id)MEMORY[0x18C117680](v19, v16);
      }
      else {
        id v21 = *(id *)(v16 + 8 * v19 + 32);
      }
      uint64_t v22 = v21;
      uint64_t v23 = AccessibilityNode.resolvedDropPoints(with:)(1);

      if (v23)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        }
        unint64_t v25 = v20[2];
        unint64_t v24 = v20[3];
        if (v25 >= v24 >> 1) {
          id v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v20);
        }
        void v20[2] = v25 + 1;
        v20[v25 + 4] = v23;
      }
      ++v19;
    }
    while (v17 != v19);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityNode.resolvedDragDropPoint(for:)(int8x16_t *a1)
{
  int8x16_t v2 = v1;
  unsigned int v3 = a1[1].u8[0];
  if (v3 <= 1)
  {
    int8x16_t v36 = *a1;
    LOBYTE(v37) = v3;
    return AccessibilityNode.resolvedActivationPoint(for:)((long long *)v36.i8);
  }
  AccessibilityNode.attachment.getter(v36.i64);

  uint64_t v6 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v6, &v36);
  swift_bridgeObjectRelease();
  if (v38)
  {
    int8x16_t v7 = v36;
    char v8 = v37;
    int v9 = ~(_BYTE)v37;
    outlined consume of AccessibilityActivationPointStorage?(v36.i64[0], v36.i64[1], v37, v38);
    swift_bridgeObjectRelease();
    if (v9)
    {
      int8x16_t v36 = v7;
      LOBYTE(v37) = v8;
      id v10 = v1;
      uint64_t v5 = AccessibilityNode.resolvedActivationPoint(for:)((long long *)v36.i8);
      char v12 = v11;

      goto LABEL_9;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = AccessibilityNode.childActivationPoint(implicit:)(0);
  char v12 = v13;
LABEL_9:
  if (v12 != -1) {
    return v5;
  }
  uint64_t v4 = AccessibilityNode.implicitActivationPoint.getter();
  if (v15 != -1) {
    return v4;
  }
  objc_msgSend(v2, sel_accessibilityFrame);
  double x = v39.origin.x;
  CGFloat y = v39.origin.y;
  CGFloat width = v39.size.width;
  CGFloat height = v39.size.height;
  if (CGRectIsEmpty(v39))
  {
    id v20 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
    Class v21 = NSClassFromString(v20);

    if (!v21)
    {
      self;
      uint64_t v23 = swift_dynamicCastObjCClass();
      if (v23)
      {
        unint64_t v24 = (void *)v23;
        id v25 = v2;
        objc_msgSend(v24, sel_frame);
        double x = v26;
        CGFloat y = v27;
        CGFloat width = v28;
        CGFloat height = v29;
        id v30 = objc_msgSend(v24, sel_window);
        if (v30)
        {
          uint64_t v31 = v30;
          objc_msgSend(v24, sel_bounds);
          objc_msgSend(v31, sel_convertRect_fromCoordinateSpace_, v24);
          double x = v32;
          CGFloat y = v33;
          CGFloat width = v34;
          CGFloat height = v35;
        }
        else
        {
        }
      }
    }
  }
  v40.origin.double x = x;
  v40.origin.CGFloat y = y;
  v40.size.CGFloat width = width;
  v40.size.CGFloat height = height;
  *(double *)&uint64_t v22 = x + CGRectGetWidth(v40) * 0.5;
  v41.origin.double x = x;
  v41.origin.CGFloat y = y;
  v41.size.CGFloat width = width;
  v41.size.CGFloat height = height;
  uint64_t v5 = v22;
  CGRectGetHeight(v41);
  return v5;
}

uint64_t AccessibilityNode.resolvedActivationPoint(for:)(long long *a1)
{
  void (*v13)(long long *__return_ptr, void, void);
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  double x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int v30;
  uint64_t v31;
  long long v32;
  int v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  long long v38;
  long long v39;
  long long v40;
  CGRect v41;
  CGRect v42;
  __C::CGRect v43;

  double v32 = *a1;
  double v33 = *((unsigned __int8 *)a1 + 16);
  int8x16_t v2 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 16);
  if (!v4)
  {
LABEL_28:
    uint64_t v8 = 0;
    int8x16_t v7 = 0;
    goto LABEL_23;
  }
  *(double *)&uint64_t result = COERCE_DOUBLE(swift_bridgeObjectRetain_n());
  uint64_t v6 = (uint64_t *)(v3 + 40 * v4 + 8);
  double v34 = v3;
  while (1)
  {
    if (v4 > *(void *)(v3 + 16))
    {
      __break(1u);
      return result;
    }
    uint64_t v8 = *(v6 - 2);
    int8x16_t v7 = (void *)*(v6 - 1);
    uint64_t v9 = *v6;
    if (*(void *)(v8 + 16)
      && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AF0]), (v11 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v8 + 56) + 40 * v10, (uint64_t)&v35);
      long long v12 = v38;
      __swift_project_boxed_opaque_existential_1(&v35, v38);
      char v13 = *(void (**)(long long *__return_ptr, void, void))(*((void *)&v12 + 1) + 8);
      swift_retain();
      swift_bridgeObjectRetain_n();
      uint64_t v14 = v7;
      v13(&v39, v12, *((void *)&v12 + 1));
      uint64_t v3 = v34;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v35);
    }
    else
    {
      CGRect v39 = 0u;
      CGRect v40 = 0u;
      swift_retain();
      swift_bridgeObjectRetain_n();
      char v15 = v7;
    }
    type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
    type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?);
    if (swift_dynamicCast()) {
      break;
    }
    double v35 = 0.0;
    int8x16_t v36 = 0.0;
    uint64_t v37 = 0.0;
    uint64_t v38 = xmmword_18834FC50;
LABEL_4:
    swift_bridgeObjectRelease_n();

    *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
LABEL_5:
    v6 -= 5;
    if (!--v4)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_28;
    }
  }
  if (!(void)v38) {
    goto LABEL_4;
  }
  *(double *)&uint64_t v17 = v35;
  uint64_t v16 = *(void *)&v36;
  uint64_t v18 = LOBYTE(v37);
  uint64_t v19 = ~LOBYTE(v37);
  outlined consume of AccessibilityActivationPointStorage??(*(uint64_t *)&v35, *(uint64_t *)&v36, *(uint64_t *)&v37, v38);
  swift_bridgeObjectRelease();
  if (!v19
    || (double v35 = *(double *)&v17,
        int8x16_t v36 = *(double *)&v16,
        LOBYTE(v37) = v18,
        CGRect v39 = v32,
        LOBYTE(v40) = v33,
        (MEMORY[0x18C112600](&v35, &v39) & 1) == 0))
  {
    swift_bridgeObjectRelease();

    *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
    uint64_t v3 = v34;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease_n();
  if (v9)
  {
    id v20 = *(unsigned char *)(v9 + 16);
    swift_retain();
    if (v20) {
      AccessibilityGeometryStorage.updatePath()();
    }
    Class v21 = *(uint64_t *)(v9 + 144);
    uint64_t v22 = *(void *)(v9 + 152);
    uint64_t v23 = *(void *)(v9 + 160);
    unint64_t v24 = *(void *)(v9 + 168);
    id v25 = *(unsigned __int8 *)(v9 + 176);
    outlined copy of Path?(v21, v22, v23, v24, *(unsigned char *)(v9 + 176));
    swift_release();
    if (v25 != 255)
    {
      double v35 = *(double *)&v21;
      int8x16_t v36 = *(double *)&v22;
      uint64_t v37 = *(double *)&v23;
      *(void *)&uint64_t v38 = v24;
      BYTE8(v38) = v25;
      Path.boundingRect.getter();
      uint64_t v42 = CGRectStandardize(v41);
      double x = v42.origin.x;
      CGFloat y = v42.origin.y;
      CGFloat width = v42.size.width;
      CGFloat height = v42.size.height;
      outlined consume of Path?(v21, v22, v23, v24, v25);
      id v30 = v33;
      if (!v33) {
        goto LABEL_26;
      }
LABEL_21:
      if (v30 == 1)
      {
        v43.origin.double x = x;
        v43.origin.CGFloat y = y;
        v43.size.CGFloat width = width;
        v43.size.CGFloat height = height;
        uint64_t v31 = *(_OWORD *)&UnitPoint.in(_:)(v43);
        outlined consume of AccessibilityAttachmentStorage?(v8, v7);
        return v31;
      }
LABEL_24:
      outlined consume of AccessibilityAttachmentStorage?(v8, v7);
      *(double *)&uint64_t result = 0.0;
      return result;
    }
  }
LABEL_23:
  LOBYTE(v35) = 4;
  AccessibilityNode.contentFrame(with:)(&v35, (uint64_t)&v39);
  outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)&v39, (uint64_t)&v35, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBB718]);
  if (BYTE8(v38)) {
    goto LABEL_24;
  }
  double x = v35;
  CGFloat y = v36;
  CGFloat width = v37;
  CGFloat height = *(double *)&v38;
  id v30 = v33;
  if (v33) {
    goto LABEL_21;
  }
LABEL_26:
  outlined consume of AccessibilityAttachmentStorage?(v8, v7);
  *(double *)&uint64_t result = x + *(double *)&v32;
  return result;
}

uint64_t AccessibilityNode.textLinkActivationPoint.getter()
{
  uint64_t v1 = v0;
  AccessibilityNode.attachment.getter((uint64_t *)v38);

  AccessibilityProperties.traits.getter();
  swift_bridgeObjectRelease();
  v37[0] = v38[0];
  LOBYTE(aBlock) = 8;
  if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) == 0) {
    return 0;
  }
  AccessibilityNode.attachment.getter((uint64_t *)&aBlock);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)&aBlock);
  swift_bridgeObjectRelease_n();
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&aBlock, (uint64_t)v37, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
  outlined release of AccessibilityTextLayoutProperties?((uint64_t)v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityTextLayoutProperties?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v37, (uint64_t)v38, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
  if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v38) == 1) {
    return 0;
  }
  AccessibilityNode.attachment.getter((uint64_t *)&aBlock);

  uint64_t v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, (uint64_t)&aBlock);
  swift_bridgeObjectRelease_n();
  if (aBlock == 0.0) {
    return 0;
  }
  if (*(void *)(*(void *)&aBlock + 16) != 1)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v4 = *(void *)(*(void *)&aBlock + 32);
  uint64_t v5 = *(void *)(*(void *)&aBlock + 40);
  char v6 = *(unsigned char *)(*(void *)&aBlock + 48);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v4, v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
  double aBlock = *(double *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  uint64_t v32 = v7;
  v39[0] = 0;
  v39[1] = 0;
  swift_retain();
  swift_retain();
  default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  uint64_t v8 = (void *)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  outlined consume of Text.Storage(v4, v5, v6);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (!v8) {
    return 0;
  }
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v30 = 1;
  uint64_t v9 = *MEMORY[0x1E4FB0720];
  uint64_t v10 = NSAttributedString.range.getter();
  uint64_t v12 = v11;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &v28;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for closure #1 in AccessibilityNode.textLinkActivationPoint.getter;
  *(void *)(v14 + 24) = v13;
  double v35 = _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0;
  uint64_t v36 = v14;
  double aBlock = MEMORY[0x1E4F143A8];
  uint64_t v32 = 1107296256;
  *(double *)&double v33 = COERCE_DOUBLE(thunk for @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ());
  double v34 = COERCE_DOUBLE(&block_descriptor_87_0);
  char v15 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_enumerateAttribute_inRange_options_usingBlock_, v9, v10, v12, 0, v15);
  _Block_release(v15);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v9)
  {
    __break(1u);
  }
  else
  {
    if (v30) {
      goto LABEL_14;
    }
    specialized AccessibilityNode.withLayoutManager<A>(_:_:)(v8, v28, v29, (uint64_t)v39);
    outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)v39, (uint64_t)&aBlock, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBB718]);
    if (v35) {
      goto LABEL_14;
    }
    CGFloat v17 = aBlock;
    uint64_t v18 = v32;
    CGFloat v19 = *(double *)&v33;
    CGFloat v20 = v34;
    if (!MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost)) {
      goto LABEL_14;
    }
    self;
    Class v21 = (void *)swift_dynamicCastObjCClass();
    if (!v21) {
      swift_unknownObjectRelease();
    }
    uint64_t v22 = (UIView *)objc_msgSend(v21, sel_window);

    if (!v22) {
      goto LABEL_14;
    }
    v40.origin.double x = v17;
    *(void *)&v40.origin.CGFloat y = v18;
    v40.size.CGFloat width = v19;
    v40.size.CGFloat height = v20;
    CGRect v41 = UIAccessibilityConvertFrameToScreenCoordinates(v40, v22);
    double x = v41.origin.x;
    CGFloat y = v41.origin.y;
    CGFloat width = v41.size.width;
    CGFloat height = v41.size.height;

    v45.origin.double x = 0.0;
    v45.origin.CGFloat y = 0.0;
    v45.size.CGFloat width = 0.0;
    v45.size.CGFloat height = 0.0;
    v42.origin.double x = x;
    v42.origin.CGFloat y = y;
    v42.size.CGFloat width = width;
    v42.size.CGFloat height = height;
    if (CGRectEqualToRect(v42, v45))
    {
LABEL_14:
      swift_release();

      return 0;
    }
    v43.origin.double x = x;
    v43.origin.CGFloat y = y;
    v43.size.CGFloat width = width;
    v43.size.CGFloat height = height;
    double v27 = x + CGRectGetWidth(v43) * 0.5;
    v44.origin.double x = x;
    v44.origin.CGFloat y = y;
    v44.size.CGFloat width = width;
    v44.size.CGFloat height = height;
    CGRectGetHeight(v44);
    swift_release();

    return *(void *)&v27;
  }
  return result;
}

uint64_t closure #1 in AccessibilityNode.textLinkActivationPoint.getter(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4, uint64_t a5)
{
  uint64_t v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F276F0];
  _sSay8Dispatch0A13WorkItemFlagsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = &v16[-v12];
  outlined init with copy of AccessibilityValueStorage?(a1, (uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for Any?);
  URL.init(urlValue:)();
  uint64_t v14 = type metadata accessor for URL();
  LODWORD(a1) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14);
  uint64_t result = _s10Foundation3URLVSgWOhTm_3((uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for URL?, v10);
  if (a1 != 1)
  {
    if (*(unsigned char *)(a5 + 16))
    {
      *(void *)a5 = a2;
      *(void *)(a5 + 8) = a3;
      *(unsigned char *)(a5 + 16) = 0;
    }
    else
    {
      *(void *)a5 = 0;
      *(void *)(a5 + 8) = 0;
      *(unsigned char *)(a5 + 16) = 1;
      *a4 = 1;
    }
  }
  return result;
}

uint64_t AccessibilityNode.sortPriority.getter()
{
  void (*v24)(_OWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD v29[2];

  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8);
    outlined copy of AccessibilityAttachment?(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment), v2);
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v3);
    outlined consume of AccessibilityAttachment?(v1, v2);
    swift_bridgeObjectRelease();
    return v4;
  }
  uint64_t v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7)
  {
    swift_bridgeObjectRetain();
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v9 = (void **)(v6 + 40 * v7);
  while (1)
  {
    if (v7 > *(void *)(v6 + 16))
    {
      __break(1u);
      goto LABEL_21;
    }
    uint64_t v11 = (uint64_t)*(v9 - 1);
    uint64_t v10 = *v9;
    if (*(void *)(v11 + 16)
      && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AC8]), (v13 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v11 + 56) + 40 * v12, (uint64_t)&v25);
      uint64_t v15 = v27;
      uint64_t v14 = v28;
      __swift_project_boxed_opaque_existential_1(&v25, v27);
      unint64_t v24 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v14 + 8);
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      id v16 = v10;
      v24(v29, v15, v14);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
    }
    else
    {
      memset(v29, 0, sizeof(v29));
      swift_retain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      id v17 = v10;
    }
    type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
    type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for Double?);
    if (swift_dynamicCast()) {
      break;
    }
    id v25 = 0;
    double v26 = 256;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    uint64_t result = swift_release();
LABEL_6:
    v9 -= 5;
    if (!--v7) {
      goto LABEL_18;
    }
  }
  HIBYTE(v26) = 0;
  char v18 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  uint64_t result = swift_release();
  if (v18) {
    goto LABEL_6;
  }
  if (v7 > *(void *)(v6 + 16))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = (uint64_t)*(v9 - 1);
  CGFloat v19 = *v9;
  swift_retain();
  swift_bridgeObjectRetain_n();
  id v21 = v19;
  uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v20);
  char v23 = v22;
  swift_release();

  uint64_t result = swift_bridgeObjectRelease_n();
  if ((v23 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return v4;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t AccessibilityNode.resolvedAttributedValue.getter()
{
  AccessibilityNode.attachment.getter(v17);

  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, v18);
  swift_bridgeObjectRelease_n();
  if (*((void *)&v19 + 1))
  {
    outlined init with copy of AccessibilityValueStorage?((uint64_t)v18, (uint64_t)&v14, &lazy cache variable for type metadata for AnyAccessibilityValue?);
    outlined destroy of AccessibilityValueStorage((uint64_t)v18);
    if (*((void *)&v15 + 1))
    {
      AnyAccessibilityValue.type.getter();
      outlined destroy of AnyAccessibilityValue((uint64_t)&v14);
      goto LABEL_7;
    }
    uint64_t v1 = &lazy cache variable for type metadata for AnyAccessibilityValue?;
    uint64_t v2 = &v14;
  }
  else
  {
    uint64_t v1 = &lazy cache variable for type metadata for AccessibilityValueStorage?;
    uint64_t v2 = v18;
  }
  outlined destroy of AccessibilityValueStorage?((uint64_t)v2, v1);
LABEL_7:
  AccessibilityNode.attachment.getter((uint64_t *)v18);

  uint64_t v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, v18);
  swift_bridgeObjectRelease_n();
  if (*((void *)&v19 + 1))
  {
    uint64_t v4 = AccessibilityValueStorage.valueDescription.getter();
    outlined destroy of AccessibilityValueStorage((uint64_t)v18);
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v18, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    uint64_t v4 = 0;
  }
  if (one-time initialization token for comma != -1) {
    swift_once();
  }
  uint64_t v5 = static Text.Accessibility.comma;
  uint64_t v6 = qword_1EB308110;
  char v7 = byte_1EB308118;
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v5, v6, v7);
  uint64_t v8 = specialized AccessibilityNode.resolvedAttributedTexts(_:includeDefaultAttributes:separator:)(v4);
  outlined consume of Text.Storage(v5, v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v8)
  {
    AccessibilityNode.resolvedToggleValue.getter(&v14);
    if (*((void *)&v16 + 1))
    {
      v18[0] = v14;
      v18[1] = v15;
      long long v19 = v16;
      uint64_t v9 = AccessibilityValueStorage.valueDescription.getter();
      uint64_t v10 = static Text.Accessibility.comma;
      uint64_t v11 = qword_1EB308110;
      char v12 = byte_1EB308118;
      outlined copy of Text.Storage(static Text.Accessibility.comma, qword_1EB308110, byte_1EB308118);
      swift_bridgeObjectRetain();
      uint64_t v8 = specialized AccessibilityNode.resolvedAttributedTexts(_:includeDefaultAttributes:separator:)(v9);
      outlined consume of Text.Storage(v10, v11, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of AccessibilityValueStorage((uint64_t)v18);
    }
    else
    {
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v14, &lazy cache variable for type metadata for AccessibilityValueStorage?);
      return 0;
    }
  }
  return v8;
}

uint64_t AccessibilityNode.resolvedPlainTextValue.getter()
{
  AccessibilityNode.attachment.getter((uint64_t *)v15);

  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, v15);
  swift_bridgeObjectRelease_n();
  if (*((void *)&v16 + 1))
  {
    uint64_t v1 = AccessibilityValueStorage.valueDescription.getter();
    outlined destroy of AccessibilityValueStorage((uint64_t)v15);
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v15, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    uint64_t v1 = 0;
  }
  if (one-time initialization token for comma != -1) {
    swift_once();
  }
  uint64_t v2 = static Text.Accessibility.comma;
  uint64_t v3 = qword_1EB308110;
  char v4 = byte_1EB308118;
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v2, v3, v4);
  uint64_t v5 = specialized AccessibilityNode.resolvedPlainTexts(_:separator:)(v1);
  uint64_t v7 = v6;
  outlined consume of Text.Storage(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v7)
  {
    AccessibilityNode.resolvedToggleValue.getter(v13);
    if (*((void *)&v14 + 1))
    {
      v15[0] = v13[0];
      v15[1] = v13[1];
      long long v16 = v14;
      uint64_t v8 = AccessibilityValueStorage.valueDescription.getter();
      uint64_t v9 = static Text.Accessibility.comma;
      uint64_t v10 = qword_1EB308110;
      char v11 = byte_1EB308118;
      outlined copy of Text.Storage(static Text.Accessibility.comma, qword_1EB308110, byte_1EB308118);
      swift_bridgeObjectRetain();
      uint64_t v5 = specialized AccessibilityNode.resolvedPlainTexts(_:separator:)(v8);
      outlined consume of Text.Storage(v9, v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of AccessibilityValueStorage((uint64_t)v15);
    }
    else
    {
      outlined destroy of AccessibilityValueStorage?((uint64_t)v13, &lazy cache variable for type metadata for AccessibilityValueStorage?);
      return 0;
    }
  }
  return v5;
}

uint64_t AccessibilityNode.resolvedAttributedLabel.getter()
{
  AccessibilityNode.attachment.getter(v7);

  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)v7);
  swift_bridgeObjectRelease_n();
  uint64_t v1 = v7[0];
  if (one-time initialization token for comma != -1) {
    swift_once();
  }
  uint64_t v2 = static Text.Accessibility.comma;
  uint64_t v3 = qword_1EB308110;
  char v4 = byte_1EB308118;
  outlined copy of Text.Storage(static Text.Accessibility.comma, qword_1EB308110, byte_1EB308118);
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized AccessibilityNode.resolvedAttributedTexts(_:includeDefaultAttributes:separator:)(v1);
  outlined consume of Text.Storage(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t AccessibilityNode.resolvedPlainTextLabel.getter()
{
  AccessibilityNode.attachment.getter(v7);

  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)v7);
  swift_bridgeObjectRelease_n();
  uint64_t v1 = v7[0];
  if (one-time initialization token for comma != -1) {
    swift_once();
  }
  uint64_t v2 = static Text.Accessibility.comma;
  uint64_t v3 = qword_1EB308110;
  char v4 = byte_1EB308118;
  outlined copy of Text.Storage(static Text.Accessibility.comma, qword_1EB308110, byte_1EB308118);
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized AccessibilityNode.resolvedPlainTexts(_:separator:)(v1);
  outlined consume of Text.Storage(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

double AccessibilityNode.resolvedToggleValue.getter@<D0>(_OWORD *a1@<X8>)
{
  AccessibilityNode.attachment.getter(&v5);

  AccessibilityProperties.traits.getter();
  swift_bridgeObjectRelease();
  uint64_t v2 = v5;
  id v3 = v6;
  if (AccessibilityNullableOptionSet<>.subscript.getter())
  {
    uint64_t v5 = v2;
    id v6 = v3;
    LOBYTE(v5) = AccessibilityNullableOptionSet<>.subscript.getter() & 1;
    lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
    lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
    lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
    AccessibilityValueStorage.init<A>(_:description:)();
  }
  else
  {
    double result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t AccessibilityNode.resolvedAttributedText(_:includeDefaultAttributes:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v9 = v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage;
  swift_beginAccess();
  uint64_t v10 = *(void *)(*(void *)v9 + 16);
  if (v10)
  {
    char v11 = (unsigned __int8 *)(*(void *)v9 + 64);
    uint64_t v12 = v10 - 1;
    do
    {
      uint64_t v13 = v12;
      int v14 = *v11;
      v11 += 40;
      if (((v14 != 255) & v14) != 0) {
        break;
      }
      --v12;
    }
    while (v13);
  }
  outlined copy of Text?(a1, a2, a3, a4);
  swift_retain();
  swift_retain();
  uint64_t v15 = static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t AccessibilityNode.resolvedPlainText(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v8 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
  v12[19] = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
  v12[20] = v8;
  outlined copy of Text?(a1, a2, a3, a4);
  swift_retain();
  swift_retain();
  AccessibilityNode.attachment.getter(v14);

  uint64_t v9 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v9, (uint64_t)v12);
  swift_bridgeObjectRelease_n();
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v13, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v13, (uint64_t)v14, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
  if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v14) != 1) {
    outlined release of AccessibilityTextLayoutProperties?((uint64_t)v13, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityTextLayoutProperties?);
  }
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v10 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t AccessibilityNode.resolvedIsInteractive.getter()
{
  AccessibilityNode.attachment.getter((uint64_t *)&v9);
  uint64_t v1 = v9;

  *(void *)&long long v9 = v1;
  uint64_t v2 = AccessibilityProperties.subscript.getter();
  swift_bridgeObjectRelease();
  if (v2 == 2)
  {
    long long v9 = *(_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    if (EnvironmentValues.isEnabled.getter())
    {
      AccessibilityNode.attachment.getter((uint64_t *)&v9);

      uint64_t v3 = swift_bridgeObjectRetain();
      uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v3);
      swift_bridgeObjectRelease_n();
      uint64_t v5 = *(void *)(v4 + 16);
      swift_bridgeObjectRelease();
      uint64_t v2 = 1;
      if (!v5)
      {
        AccessibilityNode.attachment.getter((uint64_t *)&v9);
        uint64_t v6 = v9;

        *(void *)&long long v9 = v6;
        uint64_t v7 = AccessibilityProperties.subscript.getter();
        swift_bridgeObjectRelease();
        if (v7) {
          return 1;
        }
        else {
          return 2;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t AccessibilityNode.next.getter()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);
  if (!result)
  {
    uint64_t result = MEMORY[0x18C119DF0](v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost);
    if (result)
    {
      self;
      uint64_t result = swift_dynamicCastObjCClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityNode()
{
  return self;
}

void *AccessibilityNode.notifications(from:to:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  AccessibilityNode.platformElement.getter();
  if (!v6) {
    uint64_t v6 = v2;
  }
  uint64_t v7 = v6;
  id v8 = objc_msgSend(v6, sel_knownRepresentedElement);

  LOBYTE(v46[0]) = 4;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)v46, (char *)&v39);
  if (v39 == 3)
  {
    int v9 = 0;
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_49;
  }
  uint64_t v11 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v11, v46);
  swift_bridgeObjectRelease();
  if (v5)
  {
    uint64_t v12 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v12, v45);
    swift_bridgeObjectRelease();
  }
  else
  {
    memset(v45, 0, sizeof(v45));
  }
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v46, (uint64_t)&v39, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v45, (uint64_t)v43, &lazy cache variable for type metadata for AccessibilityValueStorage?);
  if (v42)
  {
    outlined init with copy of AccessibilityValueStorage?((uint64_t)&v39, (uint64_t)v38, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    if (*((void *)&v44 + 1))
    {
      v37[0] = v43[0];
      v37[1] = v43[1];
      v37[2] = v44;
      char v13 = MEMORY[0x18C112280](v38, v37);
      outlined destroy of AccessibilityValueStorage((uint64_t)v37);
      outlined destroy of AccessibilityValueStorage?((uint64_t)v45, &lazy cache variable for type metadata for AccessibilityValueStorage?);
      outlined destroy of AccessibilityValueStorage?((uint64_t)v46, &lazy cache variable for type metadata for AccessibilityValueStorage?);
      outlined destroy of AccessibilityValueStorage((uint64_t)v38);
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v39, &lazy cache variable for type metadata for AccessibilityValueStorage?);
      if ((v13 & 1) == 0) {
        goto LABEL_17;
      }
LABEL_14:
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      goto LABEL_20;
    }
    outlined destroy of AccessibilityValueStorage?((uint64_t)v45, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    outlined destroy of AccessibilityValueStorage?((uint64_t)v46, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    outlined destroy of AccessibilityValueStorage((uint64_t)v38);
  }
  else
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v45, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    outlined destroy of AccessibilityValueStorage?((uint64_t)v46, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    if (!*((void *)&v44 + 1))
    {
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v39, &lazy cache variable for type metadata for AccessibilityValueStorage?);
      goto LABEL_14;
    }
  }
  outlined destroy of (AccessibilityValueStorage?, AccessibilityValueStorage?)((uint64_t)&v39, (uint64_t (*)(void))type metadata accessor for (AccessibilityValueStorage?, AccessibilityValueStorage?));
LABEL_17:
  id v14 = v8;
  uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
  unint64_t v16 = v10[2];
  unint64_t v15 = v10[3];
  if (v16 >= v15 >> 1) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v10);
  }
  CGRect v40 = &type metadata for AccessibilityCore.Notification.ValueChanged;
  CGRect v41 = &protocol witness table for AccessibilityCore.Notification.ValueChanged;
  *(void *)&long long v39 = v14;
  void v10[2] = v16 + 1;
  outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v10[5 * v16 + 4]);
LABEL_20:
  uint64_t v17 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v17, (uint64_t)&v39);
  swift_bridgeObjectRelease();
  uint64_t v18 = v39;
  if (v5)
  {
    char v19 = BYTE8(v39);
    uint64_t v20 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v20, (uint64_t)v46);
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void *)&v46[0];
    if (v18)
    {
      char v22 = BYTE8(v46[0]);
      *(void *)&v46[0] = v18;
      BYTE8(v46[0]) = v19;
      if (v21)
      {
        *(void *)&v45[0] = v21;
        BYTE8(v45[0]) = v22;
        swift_bridgeObjectRetain();
        char v23 = static AccessibilityLabelStorage.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v23) {
          goto LABEL_34;
        }
        goto LABEL_29;
      }
    }
    else if (!*(void *)&v46[0])
    {
      goto LABEL_34;
    }
  }
  else if (!(void)v39)
  {
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_29:
  id v24 = v8;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
  }
  unint64_t v26 = v10[2];
  unint64_t v25 = v10[3];
  if (v26 >= v25 >> 1) {
    uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v10);
  }
  CGRect v40 = &type metadata for AccessibilityCore.Notification.LabelChanged;
  CGRect v41 = &protocol witness table for AccessibilityCore.Notification.LabelChanged;
  *(void *)&long long v39 = v24;
  void v10[2] = v26 + 1;
  outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v10[5 * v26 + 4]);
LABEL_34:
  *(void *)&v46[0] = v4;
  AccessibilityProperties.traits.getter();
  if ((BYTE1(v39) & 0x40) != 0)
  {
    if (!v5) {
      goto LABEL_46;
    }
    int v27 = 1;
    goto LABEL_40;
  }
  int v27 = ~(DWORD2(v39) >> 13) & 2;
  if (v5)
  {
LABEL_40:
    *(void *)&v45[0] = v5;
    AccessibilityProperties.traits.getter();
    if ((v46[0] & 0x4000) != 0) {
      int v28 = 1;
    }
    else {
      int v28 = ~(DWORD2(v46[0]) >> 13) & 2;
    }
    if (v27 == 2) {
      goto LABEL_44;
    }
    if (v28 != 2)
    {
      int v29 = (v28 == 0) ^ v27;
      goto LABEL_48;
    }
LABEL_46:
    int v29 = 0;
    goto LABEL_48;
  }
  if (!v27) {
    goto LABEL_46;
  }
  int v28 = 2;
LABEL_44:
  int v29 = v28 == 2;
LABEL_48:
  int v9 = v29 ^ 1;
LABEL_49:
  *(void *)&v46[0] = v4;
  AccessibilityProperties.visibility.getter();
  if ((v39 & 4) != 0) {
    int v30 = 1;
  }
  else {
    int v30 = ~(BYTE4(v39) >> 1) & 2;
  }
  if (!v5)
  {
    if (v30 != 2) {
      goto LABEL_64;
    }
LABEL_60:
    if ((v9 & 1) == 0) {
      goto LABEL_70;
    }
    goto LABEL_64;
  }
  *(void *)&v45[0] = v5;
  AccessibilityProperties.visibility.getter();
  if ((v46[0] & 4) != 0) {
    int v31 = 1;
  }
  else {
    int v31 = ~(BYTE4(v46[0]) >> 1) & 2;
  }
  if (v30 != 2)
  {
    if (v31 != 2 && ((v31 ^ v30 | v9) & 1) == 0) {
      goto LABEL_70;
    }
    goto LABEL_64;
  }
  if (v31 == 2) {
    goto LABEL_60;
  }
LABEL_64:
  uint64_t v32 = MEMORY[0x18C119DF0](&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);
  if (v32)
  {
    double v33 = (void *)v32;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    }
    unint64_t v35 = v10[2];
    unint64_t v34 = v10[3];
    if (v35 >= v34 >> 1) {
      uint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v34 > 1), v35 + 1, 1, v10);
    }
    CGRect v40 = &type metadata for AccessibilityCore.Notification.LayoutChanged;
    CGRect v41 = &protocol witness table for AccessibilityCore.Notification.LayoutChanged;
    *(void *)&long long v39 = 0;
    void v10[2] = v35 + 1;
    outlined init with take of OptionalBinaryInteger(&v39, (uint64_t)&v10[5 * v35 + 4]);
  }
LABEL_70:

  return v10;
}

uint64_t closure #1 in AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = (void *)(result + 32);
    swift_bridgeObjectRetain();
    do
    {
      __swift_project_boxed_opaque_existential_1(v2, v2[3]);
      AccessibilityCoreNotification.post()();
      v2 += 5;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized AccessibilityCoreNotification.post()(void *a1)
{
  if (a1)
  {
    *((void *)&v14 + 1) = swift_getObjectType();
    *(void *)&long long v13 = a1;
  }
  else
  {
    long long v13 = 0u;
    long long v14 = 0u;
  }
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v13, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Any?);
  UIAccessibilityNotifications v2 = *MEMORY[0x1E4FB2470];
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v15, (uint64_t)&v13, (unint64_t *)&lazy cache variable for type metadata for Any?);
  uint64_t v3 = *((void *)&v14 + 1);
  if (*((void *)&v14 + 1))
  {
    uint64_t v4 = __swift_project_boxed_opaque_existential_1(&v13, *((uint64_t *)&v14 + 1));
    uint64_t v5 = *(void *)(v3 - 8);
    double v6 = MEMORY[0x1F4188790](v4);
    id v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v5 + 16))(v8, v6);
    id v9 = a1;
    uint64_t v10 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  }
  else
  {
    id v11 = a1;
    uint64_t v10 = 0;
  }
  UIAccessibilityPostNotification(v2, v10);
  swift_unknownObjectRelease();
  return outlined destroy of AccessibilityCore.Notification.Info((uint64_t)v15);
}

uint64_t specialized AccessibilityCoreNotification.post()(void *a1, char a2)
{
  AccessibilityCore.Notification.ScreenChanged.info.getter(a1, a2, (uint64_t)v13);
  UIAccessibilityNotifications v2 = *MEMORY[0x1E4FB24B0];
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v13, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for Any?);
  uint64_t v3 = v12;
  if (v12)
  {
    uint64_t v4 = __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v5 = *(void *)(v3 - 8);
    double v6 = MEMORY[0x1F4188790](v4);
    id v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v5 + 16))(v8, v6);
    id v9 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    id v9 = 0;
  }
  UIAccessibilityPostNotification(v2, v9);
  swift_unknownObjectRelease();
  return outlined destroy of AccessibilityCore.Notification.Info((uint64_t)v13);
}

uint64_t AccessibilityNode.accessibilityCustomAttribute(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  _sSay8Dispatch0A13WorkItemFlagsVGMaTm_0(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, MEMORY[0x1E4F41118], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)v18 - v7;
  AccessibilityNode.attachment.getter(v18);

  uint64_t v9 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v9, v18);
  uint64_t result = swift_bridgeObjectRelease_n();
  uint64_t v11 = v18[0];
  if (!v18[0]) {
    goto LABEL_10;
  }
  if (*(void *)(v18[0] + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v13)
    {
      unint64_t v14 = v12;
      uint64_t v15 = *(void *)(v11 + 56);
      uint64_t v16 = type metadata accessor for AccessibilityCustomAttributes.Value();
      uint64_t v17 = *(void *)(v16 - 8);
      outlined init with copy of AccessibilityCustomAttributes.Value(v15 + *(void *)(v17 + 72) * v14, (uint64_t)v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v8, 0, 1, v16);
    }
    else
    {
      uint64_t v16 = type metadata accessor for AccessibilityCustomAttributes.Value();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = type metadata accessor for AccessibilityCustomAttributes.Value();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for AccessibilityCustomAttributes.Value();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v8, 1, v16) == 1)
  {
    uint64_t result = _s10Foundation3URLVSgWOhTm_3((uint64_t)v8, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, MEMORY[0x1E4F41118]);
LABEL_10:
    *a3 = 0u;
    a3[1] = 0u;
    return result;
  }
  AccessibilityCustomAttributes.Value.axRepresentation()();
  return outlined destroy of (AccessibilityValueStorage?, AccessibilityValueStorage?)((uint64_t)v8, MEMORY[0x1E4F41118]);
}

uint64_t destroy for AccessibilityAttachmentStorage(uint64_t a1)
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityAttachmentStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  id v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityAttachmentStorage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  id v5 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  id v6 = v5;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v7;
  return a1;
}

uint64_t assignWithTake for AccessibilityAttachmentStorage(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityAttachmentStorage()
{
  return &type metadata for AccessibilityAttachmentStorage;
}

uint64_t sub_187E50DD4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)()
{
  return closure #1 in AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)(*(void *)(v0 + 16));
}

uint64_t AccessibilityActivationPoint.resolvedDescription(for:in:kind:resolveLabel:)(uint64_t a1, long long *a2, char a3, char a4)
{
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t v6 = *(void *)(v4 + 32);
  char v7 = *(unsigned char *)(v4 + 40);
  if (a4 & 1) == 0 || (*(unsigned char *)(v4 + 40)) {
    goto LABEL_17;
  }
  long long v19 = *a2;
  swift_bridgeObjectRetain();
  if (v5 == static AccessibilityActivationKind.defaultDescriptor.getter() && v6 == v9)
  {
    outlined consume of Text.Storage(v5, v6, 0);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    outlined consume of Text.Storage(v5, v6, 0);
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0) {
      goto LABEL_17;
    }
  }
  AccessibilityNode.attachment.getter((uint64_t *)v20);

  uint64_t v12 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v12, (uint64_t)v20);
  swift_bridgeObjectRelease_n();
  if (!v20[0])
  {
LABEL_17:
    outlined copy of Text.Storage(v5, v6, v7);
    swift_bridgeObjectRetain();
    return v5;
  }
  *(_OWORD *)uint64_t v20 = v19;
  static _GraphInputs.defaultInterfaceIdiom.getter();
  uint64_t v13 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  if (!v15)
  {
LABEL_20:
    outlined copy of Text.Storage(v5, v6, 0);
    swift_bridgeObjectRetain();
    return v5;
  }
  uint64_t v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v16 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (!v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  if (a3) {
    uint64_t v17 = 1886351940;
  }
  else {
    uint64_t v17 = 1734439492;
  }
  uint64_t v5 = specialized static Text.Accessibility.drag<A>(_:)(v13, v15, v17 & 0xFFFF0000FFFFFFFFLL | 0x2000000000);
  swift_bridgeObjectRelease();
  return v5;
}

void type metadata accessor for (AccessibilityValueStorage?, AccessibilityValueStorage?)()
{
  if (!lazy cache variable for type metadata for (AccessibilityValueStorage?, AccessibilityValueStorage?))
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for AccessibilityValueStorage?);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AccessibilityValueStorage?, AccessibilityValueStorage?));
    }
  }
}

Swift::Int specialized Set.formSymmetricDifference(_:)(Swift::Int result)
{
  Swift::Int v2 = result;
  int64_t i = 0;
  Swift::Int v4 = result + 56;
  uint64_t v5 = -1 << *(unsigned char *)(result + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(63 - v5) >> 6;
  if (v7) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v11 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    return result;
  }
  if (v11 < v8)
  {
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    int64_t v13 = i + 1;
    if (v12) {
      goto LABEL_21;
    }
    int64_t v13 = i + 2;
    if (i + 2 >= v8) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v13);
    if (v12) {
      goto LABEL_21;
    }
    int64_t v13 = i + 3;
    if (i + 3 >= v8) {
      goto LABEL_25;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v13);
    if (v12)
    {
LABEL_21:
      unint64_t v7 = (v12 - 1) & v12;
      unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
      for (i = v13; ; unint64_t v10 = v9 | (i << 6))
      {
        Swift::UInt v15 = *(void *)(*(void *)(v2 + 48) + 8 * v10);
        if (specialized Set.contains(_:)(v15, *v1))
        {
          uint64_t result = specialized Set._Variant.remove(_:)(v15, (uint64_t)v16);
          if (!v7) {
            goto LABEL_8;
          }
        }
        else
        {
          uint64_t result = specialized Set._Variant.insert(_:)(v16, v15);
          if (!v7) {
            goto LABEL_8;
          }
        }
LABEL_7:
        unint64_t v9 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
      }
    }
    int64_t v14 = i + 4;
    if (i + 4 < v8)
    {
      unint64_t v12 = *(void *)(v4 + 8 * v14);
      if (v12)
      {
        int64_t v13 = i + 4;
        goto LABEL_21;
      }
      while (1)
      {
        int64_t v13 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_29;
        }
        if (v13 >= v8) {
          break;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v13);
        ++v14;
        if (v12) {
          goto LABEL_21;
        }
      }
    }
  }
LABEL_25:

  return outlined consume of Set<UIPress>.Iterator._Variant();
}

uint64_t specialized static AccessibilityProperties.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*(void *)(*a1 + 16) != *(void *)(*a2 + 16)) {
    return 0;
  }
  uint64_t v22 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v23 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v8 << 6);
LABEL_6:
  uint64_t v11 = *(void *)(v2 + 56);
  *(void *)&long long v26 = *(void *)(*(void *)(v2 + 48) + 8 * v10);
  outlined init with copy of TableColumnList(v11 + 40 * v10, (uint64_t)&v26 + 8);
  while (1)
  {
    outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?((uint64_t)&v26, (uint64_t)&v29, &lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry), MEMORY[0x1E4FBB718]);
    if (!v31)
    {
      swift_release();
      return 1;
    }
    uint64_t v16 = v29;
    outlined init with take of OptionalBinaryInteger(&v30, (uint64_t)&v26);
    if (!*(void *)(v3 + 16)) {
      goto LABEL_33;
    }
    unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
    if ((v18 & 1) == 0
      || (outlined init with copy of TableColumnList(*(void *)(v3 + 56) + 40 * v17, (uint64_t)v24),
          outlined init with take of OptionalBinaryInteger(v24, (uint64_t)v25),
          uint64_t v19 = *((void *)&v27 + 1),
          uint64_t v20 = v28,
          __swift_project_boxed_opaque_existential_1(&v26, *((uint64_t *)&v27 + 1)),
          char v21 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v20 + 16))(v25, v19, v20),
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v25),
          (v21 & 1) == 0))
    {
LABEL_33:
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      return 0;
    }
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
    if (v6) {
      goto LABEL_5;
    }
LABEL_7:
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v12 < v23)
    {
      unint64_t v13 = *(void *)(v22 + 8 * v12);
      if (v13) {
        goto LABEL_10;
      }
      int64_t v14 = v8 + 2;
      ++v8;
      if (v12 + 1 < v23)
      {
        unint64_t v13 = *(void *)(v22 + 8 * v14);
        if (v13) {
          goto LABEL_13;
        }
        int64_t v8 = v12 + 1;
        if (v12 + 2 < v23)
        {
          unint64_t v13 = *(void *)(v22 + 8 * (v12 + 2));
          if (v13)
          {
            v12 += 2;
            goto LABEL_10;
          }
          int64_t v14 = v12 + 3;
          int64_t v8 = v12 + 2;
          if (v12 + 3 < v23)
          {
            unint64_t v13 = *(void *)(v22 + 8 * v14);
            if (v13)
            {
LABEL_13:
              int64_t v12 = v14;
LABEL_10:
              unint64_t v6 = (v13 - 1) & v13;
              unint64_t v10 = __clz(__rbit64(v13)) + (v12 << 6);
              int64_t v8 = v12;
              goto LABEL_6;
            }
            v12 += 4;
            int64_t v8 = v14;
            if (v12 < v23) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v6 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
  }
  unint64_t v13 = *(void *)(v22 + 8 * v12);
  int64_t v15 = v12;
  if (v13) {
    goto LABEL_10;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v23)
    {
      int64_t v8 = v23 - 1;
      goto LABEL_26;
    }
    unint64_t v13 = *(void *)(v22 + 8 * v12);
    ++v15;
    if (v13) {
      goto LABEL_10;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v24 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = a1 + 48;
    do
    {
      char v9 = *(unsigned char *)(v8 + 40);
      uint64_t v10 = *(void *)(v8 + 32);
      char v11 = *(unsigned char *)(v8 + 24);
      uint64_t v13 = *(void *)(v8 - 8);
      uint64_t v12 = *(void *)v8;
      uint64_t v14 = *(void *)(v8 - 16);
      void v19[2] = v14;
      v19[3] = v13;
      v19[4] = v12;
      long long v20 = *(_OWORD *)(v8 + 8);
      char v21 = v11;
      uint64_t v22 = v10;
      char v23 = v9;
      v19[0] = a2;
      v19[1] = a3;
      outlined copy of Text.Suffix.Storage(v14, v13, v12);
      id v15 = AccessibilityRotorInfo.resolve(in:for:)(v19, a4);
      uint64_t v16 = outlined consume of Text.Suffix.Storage(v14, v13, v12);
      if (v15)
      {
        MEMORY[0x18C115B40](v16);
        if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += 64;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return v24;
  }
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, char a6)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v31 = MEMORY[0x1E4FBC860];
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityLocationDescriptor);
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    char v18 = a5 & 1;
    uint64_t v19 = a1;
    do
    {
      uint64_t v11 = a1 + v10;
      uint64_t v12 = *(void *)(a1 + v10 + 80);
      char v13 = *(unsigned char *)(a1 + v10 + 72);
      uint64_t v15 = *(void *)(v11 + 56);
      uint64_t v14 = *(void *)(v11 + 64);
      char v16 = *(unsigned char *)(v11 + 48);
      long long v25 = *(_OWORD *)(v11 + 32);
      char v26 = v16;
      uint64_t v27 = v15;
      uint64_t v28 = v14;
      char v29 = v13;
      uint64_t v30 = v12;
      v24[0] = a2;
      v24[1] = a3;
      unint64_t v17 = a4;
      outlined copy of Text.Storage(v15, v14, v13);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      if (UIAccessibilityLocationDescriptor.init(_:in:for:kind:resolveLabel:)((uint64_t)&v25, v24, v17, a6, v18))
      {
        MEMORY[0x18C115B40]();
        if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v10 += 56;
      --v8;
      a1 = v19;
    }
    while (v8);
    swift_bridgeObjectRelease();
    return v31;
  }
  return result;
}

id specialized AccessibilityNode.init(viewRendererHost:isFromDisplayList:)(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6 = v3;
  UniqueID.init()();
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_version] = 0;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children] = MEMORY[0x1E4FBC860];
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  uint64_t v8 = &v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost];
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v9 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_isFromDisplayList;
  v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_isFromDisplayList] = 0;
  closure #1 in variable initialization expression of AccessibilityNode.environment((uint64_t *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment]);
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage] = v7;
  uint64_t v10 = &v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
  *uint64_t v10 = 0;
  v10[1] = 0;
  v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
  uint64_t v11 = OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformRotorStorage;
  *(void *)&v6[v11] = specialized Dictionary.init(dictionaryLiteral:)(v7);
  v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedIsPlaceholderOrIgnored] = 2;
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope] = 0;
  *((void *)v8 + 1) = a2;
  swift_unknownObjectWeakAssign();
  v6[v9] = a3;

  v13.receiver = v6;
  v13.super_class = (Class)type metadata accessor for AccessibilityNode();
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t specialized AccessibilityNode.addAttachment(_:isInPlatformItemList:token:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (void *)a1[1];
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 8);
  v19[0] = *a1;
  v19[1] = v4;
  AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)(v19);
  uint64_t v7 = (char **)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  swift_beginAccess();
  uint64_t v8 = *v7;
  id v9 = v4;
  swift_bridgeObjectRetain_n();
  id v10 = v9;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  char *v7 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
    char *v7 = v8;
  }
  unint64_t v13 = *((void *)v8 + 2);
  unint64_t v12 = *((void *)v8 + 3);
  if (v13 >= v12 >> 1)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v8);
    char *v7 = v8;
  }
  *((void *)v8 + 2) = v13 + 1;
  uint64_t v14 = &v8[40 * v13];
  *((void *)v14 + 4) = v3;
  *((void *)v14 + 5) = v4;
  *((void *)v14 + 6) = 0;
  *((void *)v14 + 7) = v5;
  v14[64] = v6;
  uint64_t v15 = (void *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
  uint64_t v16 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
  unint64_t v17 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8);
  void *v15 = 0;
  v15[1] = 0;
  outlined consume of AccessibilityAttachment?(v16, v17);
  *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty) = 1;

  return swift_bridgeObjectRelease();
}

uint64_t specialized AccessibilityNode.updateAttachment(_:isInPlatformItemList:token:merge:)(char **a1, uint64_t *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *a1;
  char v6 = a1[1];
  char v8 = *((unsigned char *)a2 + 8);
  uint64_t v61 = *a2;
  char v62 = v8;
  uint64_t v9 = AccessibilityNode.attachmentIndex(of:)((uint64_t)&v61);
  if (v10) {
    return 0;
  }
  unint64_t v11 = v9;
  unint64_t v12 = (char **)&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
  swift_beginAccess();
  if ((v11 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v11 >= *((void *)*v12 + 2))
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v13 = (uint64_t)&(*v12)[40 * v11];
  uint64_t v15 = *(void *)(v13 + 32);
  uint64_t v14 = *(void **)(v13 + 40);
  uint64_t v55 = 40 * v11;
  uint64_t v56 = v15;
  double v57 = v14;
  *(void *)&long long v60 = v7;
  *((void *)&v60 + 1) = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  id v16 = v14;
  if (MEMORY[0x18C111CD0](&v56, &v60))
  {
LABEL_5:
    uint64_t v17 = 0;
LABEL_30:
    swift_release();

    swift_bridgeObjectRelease();
    return v17;
  }
  id v54 = v16;
  CGFloat v58 = v7;
  uint64_t v59 = v15;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v18 = specialized AccessibilityProperties.subscript.getter(v15);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v18 + 16);
  swift_bridgeObjectRelease();
  uint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = specialized AccessibilityProperties.subscript.getter(v20);
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(v21 + 16);
  swift_bridgeObjectRelease();
  uint64_t v3 = v7;
  if (v19 != v22) {
    goto LABEL_18;
  }
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = specialized AccessibilityProperties.subscript.getter(v23);
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)(v24 + 16);
  swift_bridgeObjectRelease();
  if (!v25)
  {
    uint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v27 = specialized AccessibilityProperties.subscript.getter(v26);
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(v27 + 16);
    swift_bridgeObjectRelease();
    uint64_t v3 = v7;
    if (!v28) {
      goto LABEL_18;
    }
  }
  id v16 = (id)MEMORY[0x1E4FBC860];
  specialized AccessibilityProperties.subscript.setter(MEMORY[0x1E4FBC860]);
  specialized AccessibilityProperties.subscript.setter((uint64_t)v16);
  uint64_t v3 = v58;
  uint64_t v56 = v59;
  *(void *)&long long v60 = v58;
  if ((specialized static AccessibilityProperties.== infix(_:_:)(&v56, (uint64_t *)&v60) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11 < *((void *)*v12 + 2))
    {
      uint64_t v32 = (uint64_t)&(*v12)[v55];
      uint64_t v34 = *(void *)(v32 + 32);
      double v33 = *(void **)(v32 + 40);
      uint64_t v56 = v34;
      double v57 = v33;
      *(void *)&long long v60 = v7;
      *((void *)&v60 + 1) = v6;
      id v53 = v33;
      swift_bridgeObjectRetain();
      unint64_t v35 = v6;
      swift_bridgeObjectRetain();
      AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)(&v56, &v60);

      swift_bridgeObjectRelease();
      if ((a3 & 1) == 0)
      {
        uint64_t v3 = *v12;
        swift_bridgeObjectRetain();
        long long v39 = v35;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *unint64_t v12 = v3;
        if (isUniquelyReferenced_nonNull_native)
        {
LABEL_27:
          id v16 = v54;
          if (v11 >= *((void *)v3 + 2))
          {
            __break(1u);
LABEL_43:
            uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
            *unint64_t v12 = v3;
            goto LABEL_13;
          }
          CGRect v41 = &v3[v55];
          uint64_t v42 = *(void **)&v3[v55 + 40];
          *((void *)v41 + 4) = v7;
          *((void *)v41 + 5) = v6;
          swift_bridgeObjectRelease();

LABEL_29:
          CGRect v43 = &v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          uint64_t v44 = *(void *)&v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
          CGRect v45 = *(void **)&v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
          *(void *)CGRect v43 = 0;
          *((void *)v43 + 1) = 0;
          outlined consume of AccessibilityAttachment?(v44, v45);
          uint64_t v17 = 1;
          v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;

          swift_bridgeObjectRelease();
          goto LABEL_30;
        }
LABEL_41:
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
        *unint64_t v12 = v3;
        goto LABEL_27;
      }
      swift_beginAccess();
      uint64_t v3 = *v12;
      char v36 = swift_isUniquelyReferenced_nonNull_native();
      *unint64_t v12 = v3;
      if (v36)
      {
LABEL_21:
        if (v11 < *((void *)v3 + 2))
        {
          *(void *)&long long v60 = v7;
          AccessibilityProperties.merge(with:)((uint64_t *)&v60);
          uint64_t v37 = *(void *)&v3[v55 + 40];
          *(void *)&long long v60 = *(void *)&v3[v55 + 32];
          *((void *)&v60 + 1) = v37;
          uint64_t v38 = (void *)AccessibilityAttachment.platformElement.getter();

          if (!v38)
          {
            *(void *)&long long v60 = v7;
            *((void *)&v60 + 1) = v6;
            if (AccessibilityAttachment.platformElement.getter()) {
              AccessibilityAttachment.platformElement.setter();
            }
          }
          swift_endAccess();
          id v16 = v54;
          goto LABEL_29;
        }
        __break(1u);
        goto LABEL_41;
      }
LABEL_39:
      uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
      *unint64_t v12 = v3;
      goto LABEL_21;
    }
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if ((a3 & 1) == 0)
  {
    uint64_t v3 = *v12;
    double v47 = v6;
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v12 = v3;
    id v16 = v54;
    if (result) {
      goto LABEL_33;
    }
    goto LABEL_45;
  }
  swift_beginAccess();
  uint64_t v3 = *v12;
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v12 = v3;
  if ((v29 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_13:
  if (v11 < *((void *)v3 + 2))
  {
    *(void *)&long long v60 = v7;
    AccessibilityProperties.merge(with:)((uint64_t *)&v60);
    uint64_t v30 = *(void *)&v3[v55 + 40];
    *(void *)&long long v60 = *(void *)&v3[v55 + 32];
    *((void *)&v60 + 1) = v30;
    uint64_t v31 = (void *)AccessibilityAttachment.platformElement.getter();

    if (!v31)
    {
      *(void *)&long long v60 = v7;
      *((void *)&v60 + 1) = v6;
      if (AccessibilityAttachment.platformElement.getter()) {
        AccessibilityAttachment.platformElement.setter();
      }
    }
    swift_endAccess();
    id v16 = v54;
    goto LABEL_35;
  }
  __break(1u);
LABEL_45:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v3);
  uint64_t v3 = (char *)result;
  *unint64_t v12 = (char *)result;
LABEL_33:
  if (v11 < *((void *)v3 + 2))
  {
    CGFloat v48 = &v3[v55];
    double v49 = *(void **)&v3[v55 + 40];
    *((void *)v48 + 4) = v7;
    *((void *)v48 + 5) = v6;
    swift_bridgeObjectRelease();

LABEL_35:
    CGFloat v50 = &v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
    uint64_t v51 = *(void *)&v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment];
    CGFloat v52 = *(void **)&v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8];
    *(void *)CGFloat v50 = 0;
    *((void *)v50 + 1) = 0;
    outlined consume of AccessibilityAttachment?(v51, v52);
    v4[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void _sSay8Dispatch0A13WorkItemFlagsVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)()
{
  if (!lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry))
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry));
    }
  }
}

uint64_t sub_187E520DC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityNode.scheduleNotifyForAttachmentAddition(of:)()
{
  return specialized AccessibilityCoreNotification.post()(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t outlined destroy of AccessibilityCore.Notification.Info(uint64_t a1)
{
  return a1;
}

uint64_t specialized AccessibilityNode.resolvedPlainTexts(_:separator:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      if (one-time initialization token for comma != -1) {
        swift_once();
      }
      AccessibilityNode.resolvedPlainText(_:)(static Text.Accessibility.comma, unk_1EB308110, byte_1EB308118, qword_1EB308120);
      swift_retain();
      swift_retain();
      static _GraphInputs.defaultInterfaceIdiom.getter();
      uint64_t v1 = static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t specialized AccessibilityNode.resolvedAttributedTexts(_:includeDefaultAttributes:separator:)(uint64_t a1)
{
  uint64_t v2 = a1;
  if (a1)
  {
    if (one-time initialization token for comma != -1) {
      swift_once();
    }
    AccessibilityNode.resolvedPlainText(_:)(static Text.Accessibility.comma, qword_1EB308110, byte_1EB308118, qword_1EB308120);
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8);
    v14[22] = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    v14[23] = v3;
    uint64_t v4 = v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage;
    swift_beginAccess();
    uint64_t v5 = *(void *)(*(void *)v4 + 16);
    if (v5)
    {
      char v6 = (unsigned __int8 *)(*(void *)v4 + 64);
      uint64_t v7 = v5 - 1;
      do
      {
        uint64_t v8 = v7;
        int v9 = *v6;
        v6 += 40;
        if (((v9 != 255) & v9) != 0) {
          break;
        }
        --v7;
      }
      while (v8);
    }
    swift_retain();
    swift_retain();
    AccessibilityNode.attachment.getter(v14);

    uint64_t v10 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v10, (uint64_t)v12);
    swift_bridgeObjectRelease_n();
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v13, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v13, (uint64_t)v14, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
    if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v14) != 1) {
      outlined release of AccessibilityTextLayoutProperties?((uint64_t)v13, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityTextLayoutProperties?);
    }
    static _GraphInputs.defaultInterfaceIdiom.getter();
    uint64_t v2 = static AccessibilityCore.textsResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t specialized AccessibilityNode.removeAttachment(isInPlatformItemList:token:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  int v4 = *((unsigned __int8 *)a1 + 8);
  uint64_t v5 = (char **)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage);
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *v5;
  uint64_t v8 = *((void *)*v5 + 2);
  if (!v8) {
    return result;
  }
  CGFloat v52 = v5;
  swift_bridgeObjectRetain_n();
  for (int64_t i = (unsigned __int8 *)(v7 + 64); ; i += 40)
  {
    uint64_t v10 = *((void *)i - 4);
    unint64_t v11 = (void *)*((void *)i - 3);
    int v12 = *i;
    if (v12 == 255) {
      break;
    }
    uint64_t v53 = *((void *)i - 1);
    LOBYTE(v54) = v12;
    if (v4 != 255)
    {
      *(void *)&long long v55 = v3;
      BYTE8(v55) = v4 & 1;
      swift_retain();
      swift_bridgeObjectRetain();
      id v13 = v11;
      if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
        goto LABEL_11;
      }
      swift_release();

      swift_bridgeObjectRelease();
    }
LABEL_4:
    if (!--v8) {
      return swift_bridgeObjectRelease_n();
    }
  }
  if (v4 != 255) {
    goto LABEL_4;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  id v13 = v11;
LABEL_11:
  swift_bridgeObjectRelease_n();
  uint64_t v53 = v10;
  id v54 = v11;
  long long v55 = 0uLL;
  swift_bridgeObjectRetain();
  id v14 = v13;
  AccessibilityNode.scheduleNotifyForAttachmentChange(from:to:)(&v53, &v55);

  swift_bridgeObjectRelease();
  uint64_t v15 = v52;
  swift_beginAccess();
  id v16 = *v52;
  uint64_t v17 = *((void *)*v52 + 2);
  if (!v17)
  {
    unint64_t v21 = 0;
    goto LABEL_24;
  }
  id v43 = v14;
  swift_bridgeObjectRetain();
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  while (2)
  {
    int v20 = v16[v18 + 64];
    if (v20 == 255)
    {
      if (v4 == 255) {
        goto LABEL_18;
      }
LABEL_14:
      ++v19;
      v18 += 40;
      if (v17 == v19)
      {
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v21 = *((void *)*v52 + 2);
        goto LABEL_23;
      }
      continue;
    }
    break;
  }
  *(void *)&long long v55 = *(void *)&v16[v18 + 56];
  BYTE8(v55) = v20;
  if (v4 == 255 || (static AccessibilityAttachmentToken.== infix(_:_:)() & 1) == 0) {
    goto LABEL_14;
  }
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v21 = v19 + 1;
  if (__OFADD__(v19, 1)) {
    goto LABEL_51;
  }
  uint64_t v22 = *v52;
  unint64_t v23 = *((void *)*v52 + 2);
  if (v21 == v23)
  {
    uint64_t v17 = v19;
LABEL_23:
    id v14 = v43;
    if ((uint64_t)v21 < v17) {
      goto LABEL_50;
    }
LABEL_24:
    specialized Array.replaceSubrange<A>(_:with:)(v17, v21);
    swift_endAccess();
    uint64_t v24 = (void *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
    uint64_t v25 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment);
    uint64_t v26 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_cachedCombinedAttachment + 8);
    *uint64_t v24 = 0;
    v24[1] = 0;
    outlined consume of AccessibilityAttachment?(v25, v26);
    *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty) = 1;

    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v27 = v18 + 104;
  uint64_t v17 = v19;
  uint64_t v44 = v2;
  while (2)
  {
    if (v21 < v23)
    {
      int v31 = v22[v27];
      if (v31 == 255)
      {
        if (v4 != 255)
        {
LABEL_36:
          if (v21 != v17)
          {
            if (v17 < 0) {
              goto LABEL_46;
            }
            uint64_t v32 = *v15;
            unint64_t v33 = *((void *)v32 + 2);
            if (v17 >= v33) {
              goto LABEL_47;
            }
            if (v21 >= v33) {
              goto LABEL_48;
            }
            uint64_t v50 = 40 * v17;
            uint64_t v34 = &v32[40 * v17];
            uint64_t v35 = *((void *)v34 + 4);
            uint64_t v51 = (void *)*((void *)v34 + 5);
            char v45 = v34[64];
            uint64_t v37 = *(void *)&v32[v27 - 32];
            char v36 = *(void **)&v32[v27 - 24];
            char v47 = v32[v27];
            long long v46 = *((_OWORD *)v34 + 3);
            uint64_t v48 = *(void *)&v32[v27 - 8];
            uint64_t v49 = *(void *)&v32[v27 - 16];
            swift_retain();
            swift_bridgeObjectRetain();
            id v38 = v51;
            swift_retain();
            swift_bridgeObjectRetain();
            id v39 = v36;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *CGFloat v52 = v32;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              uint64_t v32 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v32);
              *CGFloat v52 = v32;
            }
            CGRect v41 = &v32[v50];
            uint64_t v42 = *(void **)&v32[v50 + 40];
            *((void *)v41 + 4) = v37;
            *((void *)v41 + 5) = v36;
            *((void *)v41 + 6) = v49;
            *((void *)v41 + 7) = v48;
            v41[64] = v47;
            swift_bridgeObjectRelease();

            uint64_t result = swift_release();
            if (v21 >= *((void *)*v52 + 2)) {
              goto LABEL_49;
            }
            uint64_t v28 = &(*v52)[v27];
            char v29 = (void *)*((void *)v28 - 3);
            *((void *)v28 - 4) = v35;
            *((void *)v28 - 3) = v51;
            *((_OWORD *)v28 - 1) = v46;
            *uint64_t v28 = v45;
            swift_bridgeObjectRelease();

            uint64_t v15 = v52;
            uint64_t result = swift_release();
            uint64_t v2 = v44;
          }
          if (__OFADD__(v17++, 1)) {
            goto LABEL_45;
          }
        }
      }
      else
      {
        *(void *)&long long v55 = *(void *)&v22[v27 - 8];
        BYTE8(v55) = v31;
        if (v4 == 255) {
          goto LABEL_36;
        }
        uint64_t result = static AccessibilityAttachmentToken.== infix(_:_:)();
        if ((result & 1) == 0) {
          goto LABEL_36;
        }
      }
      ++v21;
      uint64_t v22 = *v15;
      unint64_t v23 = *((void *)*v15 + 2);
      v27 += 40;
      if (v21 == v23) {
        goto LABEL_23;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t outlined destroy of (AccessibilityValueStorage?, AccessibilityValueStorage?)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined copy of AccessibilityAttachment?(uint64_t result, void *a2)
{
  if (result)
  {
    id v2 = a2;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_187E52A1C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityNode.textLinkActivationPoint.getter(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  return closure #1 in AccessibilityNode.textLinkActivationPoint.getter(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t sub_187E52A34()
{
  return swift_deallocObject();
}

uint64_t _sypSgSo8_NSRangeVSpy10ObjectiveC8ObjCBoolVGIgnyy_AacGIegnyy_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t outlined consume of AccessibilityAttachmentStorage?(uint64_t result, void *a2)
{
  if (result)
  {
    swift_bridgeObjectRelease();

    return swift_release();
  }
  return result;
}

uint64_t outlined consume of AccessibilityActivationPointStorage??(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1) {
    return outlined consume of AccessibilityActivationPointStorage?(a1, a2, a3, a4);
  }
  return a1;
}

uint64_t sub_187E52AC4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityNode.childActivationPoint(implicit:)(uint64_t a1)
{
  return closure #1 in AccessibilityNode.childActivationPoint(implicit:)(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for specialized closure #1 in Collection<>.filterVisible(_:)(uint64_t *a1)
{
  return specialized closure #1 in Collection<>.filterVisible(_:)(a1, *(uint64_t (**)(uint64_t))(v1 + 16)) & 1;
}

uint64_t sub_187E52B28()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NSAttributedString.hasAccessibilityLinks.getter(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  return closure #1 in NSAttributedString.hasAccessibilityLinks.getter(a1, a2, a3, a4, *(unsigned char **)(v4 + 16));
}

uint64_t sub_187E52B40()
{
  return swift_deallocObject();
}

uint64_t sub_187E52B50()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

id partial apply for closure #1 in UIKitAccessibilityLinkRotorBridge.init(for:)(uint64_t a1)
{
  return closure #1 in UIKitAccessibilityLinkRotorBridge.init(for:)(a1, v1);
}

double _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 112) = 2;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  return result;
}

uint64_t outlined init with take of AccessibilityTextLayoutProperties??(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityTextLayoutProperties??();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AccessibilityTextLayoutProperties??()
{
  if (!lazy cache variable for type metadata for AccessibilityTextLayoutProperties??)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityTextLayoutProperties??);
    }
  }
}

uint64_t outlined release of AccessibilityTextLayoutProperties?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 144);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), v4);
  return a1;
}

uint64_t sub_187E52CF0()
{
  return swift_deallocObject();
}

uint64_t sub_187E52D00()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of (key: ObjectIdentifier, value: AnyAccessibilityPropertiesEntry)?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  _sSay8Dispatch0A13WorkItemFlagsVGMaTm_0(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_187E52D80()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

void partial apply for closure #1 in AccessibilityNode.scheduleNotifyForChildrenChange(fullReplacement:)()
{
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), *(void *)(v0 + 40));
  AccessibilityCoreNotification.post()();
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationStack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v9 = *a2;
    *char v4 = *a2;
    char v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    unint64_t v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v14 = *(unsigned __int8 *)(v13 + 24);
    if (v14 >= 2) {
      unsigned int v14 = *(_DWORD *)v13 + 2;
    }
    *(void *)unint64_t v12 = *(void *)v13;
    if (v14 == 1)
    {
      *(void *)(v12 + 8) = *(void *)(v13 + 8);
      *(void *)(v12 + 16) = *(void *)(v13 + 16);
      swift_retain();
      char v15 = 1;
    }
    else
    {
      char v15 = 0;
      *(void *)(v12 + 8) = *(void *)(v13 + 8);
    }
    swift_retain();
    swift_retain();
    *(unsigned char *)(v12 + 24) = v15;
    unint64_t v16 = ((unint64_t)v10 + 47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = ((unint64_t)v11 + 47) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 16);
    outlined copy of HoverCallback();
    *(void *)unint64_t v16 = v18;
    *(void *)(v16 + 8) = v19;
    *(unsigned char *)(v16 + 16) = v20;
  }
  return v4;
}

uint64_t assignWithTake for NavigationStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  void *v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v10)
  {
    unsigned int v11 = *(unsigned __int8 *)(v9 + 24);
    if (v11 >= 2) {
      unsigned int v11 = *(_DWORD *)v9 + 2;
    }
    swift_release();
    if (v11 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v12 = *(unsigned __int8 *)(v10 + 24);
    if (v12 >= 2) {
      unsigned int v12 = *(_DWORD *)v10 + 2;
    }
    if (v12 == 1)
    {
      long long v13 = *(_OWORD *)v10;
      *(void *)(v9 + 16) = *(void *)(v10 + 16);
      *(_OWORD *)unint64_t v9 = v13;
      char v14 = 1;
    }
    else
    {
      char v14 = 0;
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
    }
    *(unsigned char *)(v9 + 24) = v14;
  }
  unint64_t v15 = ((unint64_t)v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v8 + 47) & 0xFFFFFFFFFFFFFFF8;
  char v17 = *(unsigned char *)(v16 + 16);
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = v17;
  outlined consume of HoverCallback();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStack(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187E532A4);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((((v6 + 7) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)(((((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v17 >= 2) {
    return (v17 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for NavigationStack(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  size_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              unint64_t v21 = (((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xFE)
              {
                *(void *)unint64_t v21 = 0;
                *(void *)(v21 + 8) = 0;
                *(unsigned char *)(v21 + 24) = 0;
                *(void *)(v21 + 16) = 0;
                *(_DWORD *)unint64_t v21 = a2 - 255;
              }
              else
              {
                *(unsigned char *)(v21 + 24) = -(char)a2;
              }
            }
            else
            {
              char v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x187E534E8);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t sub_187E53510()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationStackStyledCore(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) != 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) < 0xFFFFFFFFFFFFFFE8)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v11 = *(void *)(v10 + 16);
    unint64_t v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)unint64_t v12 = *(_OWORD *)v10;
    *(void *)(v12 + 16) = v11;
  }
  return v4;
}

uint64_t assignWithTake for NavigationStackStyledCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackStyledCore(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFA) {
    unsigned int v7 = 250;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187E538E8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFA) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 6) {
    return v17 - 5;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for NavigationStackStyledCore(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFA) {
    unsigned int v8 = 250;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFE8)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187E53AE0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0xFA)
        {
          int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0xFA)
          {
            v18[1] = 0;
            uint64_t v18[2] = 0;
            void *v18 = a2 - 251;
          }
          else
          {
            *((unsigned char *)v18 + 8) = a2 + 5;
          }
        }
        else
        {
          unsigned int v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for View in NavigationStackStyledCore<A>()
{
  return &protocol witness table for NavigationStackStyledCore<A>;
}

void protocol witness for static Rule.initialValue.getter in conformance NavigationStackStyledCore<A>.NavigationStateStructureSeed(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 4) = 256;
  *(_DWORD *)a1 = 0;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationStackStyledCore<A>.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NavigationStackStyledCore.NavigationStackRepresentableRoot();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

void protocol witness for View.body.getter in conformance NavigationStackStyledCore<A>()
{
}

uint64_t sub_187E53BD4()
{
  return swift_deallocObject();
}

uint64_t initializeWithTake for NavigationStackStyledCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v5 = (a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = swift_weakTakeInit();
  *(_OWORD *)(v6 + 8) = *(_OWORD *)(v5 + 8);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 24 + v6) & ~v9;
  uint64_t v11 = (v9 + 24 + v5) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 32) + 3;
  unint64_t v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFFCLL;
  char v15 = *(unsigned char *)(v14 + 4);
  *(_DWORD *)unint64_t v13 = *(_DWORD *)v14;
  *(unsigned char *)(v13 + 4) = v15;
  return a1;
}

uint64_t assignWithTake for NavigationStackStyledCore.NavigationStackRepresentableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v5 = (a1 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (a2 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_weakTakeAssign();
  *(void *)(v5 + 8) = *(void *)(v6 + 8);
  swift_release();
  *(void *)(v5 + 16) = *(void *)(v6 + 16);
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 24 + v5) & ~v9;
  uint64_t v11 = (v9 + 24 + v6) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24) + 3;
  unint64_t v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFFCLL;
  char v15 = *(unsigned char *)(v14 + 4);
  *(_DWORD *)unint64_t v13 = *(_DWORD *)v14;
  *(unsigned char *)(v13 + 4) = v15;
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackStyledCore.NavigationStackRepresentableRoot(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 48) & ~v6) + 3) & 0xFFFFFFFFFFFFFFFCLL)
       + 5;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187E53F48);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 48) & ~v6) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  unint64_t v17 = (unint64_t)(a1 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (v5 > 0x7FFFFFFE) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((v17 + v6 + 24) & ~v6);
  }
  unint64_t v18 = *(void *)(v17 + 8);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  int v19 = v18 - 1;
  if (v19 < 0) {
    int v19 = -1;
  }
  return (v19 + 1);
}

void storeEnumTagSinglePayload for NavigationStackStyledCore.NavigationStackRepresentableRoot(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 48) & ~v9) + 3) & 0xFFFFFFFFFFFFFFFCLL)
      + 5;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            int v19 = (void *)((unint64_t)(a1 + 31) & 0xFFFFFFFFFFFFFFF8);
            if (v7 > 0x7FFFFFFE)
            {
              char v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(((unint64_t)v19 + v9 + 24) & ~v9);
            }
            else if (a2 > 0x7FFFFFFE)
            {
              v19[1] = 0;
              void v19[2] = 0;
              void *v19 = a2 - 0x7FFFFFFF;
            }
            else
            {
              v19[1] = a2;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x187E54194);
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return;
  }
}

uint64_t sub_187E541BC()
{
  return swift_getWitnessTable();
}

void __swiftcall IndirectScrollGesture.init()()
{
}

uint64_t closure #1 in ScrollGesture.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = *((unsigned __int8 *)a1 + 24);
  uint64_t v8 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v9 = *((unsigned __int8 *)a1 + 48);
  uint64_t result = *(void *)(a2 + 24);
  switch(*(unsigned char *)(a2 + 32))
  {
    case 1:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = result ^ 0x8000000000000000;
      *(_OWORD *)(a3 + 16) = xmmword_188354B20;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
LABEL_14:
      *(unsigned char *)(a3 + 48) = 1;
      break;
    case 2:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = result ^ 0x8000000000000000;
      *(_OWORD *)(a3 + 16) = xmmword_188354B20;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 40) = 0;
LABEL_11:
      *(unsigned char *)(a3 + 48) = 2;
      break;
    case 3:
      goto LABEL_3;
    default:
      if (*(void *)(a2 + 16) == 1)
      {
LABEL_3:
        switch(v9)
        {
          case 1:
            *(void *)a3 = v4;
            *(void *)(a3 + 8) = v3;
            *(void *)(a3 + 16) = v5;
            *(void *)(a3 + 24) = v6;
            *(void *)(a3 + 32) = v8;
            *(void *)(a3 + 40) = v7;
            goto LABEL_14;
          case 2:
            *(void *)a3 = v4;
            *(void *)(a3 + 8) = v3;
            *(void *)(a3 + 16) = v5;
            *(void *)(a3 + 24) = v6;
            *(void *)(a3 + 32) = v8;
            *(void *)(a3 + 40) = v7;
            goto LABEL_11;
          case 3:
            *(_OWORD *)(a3 + 16) = 0u;
            *(_OWORD *)(a3 + 32) = 0u;
            *(_OWORD *)a3 = 0u;
            *(unsigned char *)(a3 + 48) = 3;
            return result;
          default:
            if (v6 == 4)
            {
              *(void *)a3 = 0;
              *(void *)(a3 + 8) = 0;
              *(void *)(a3 + 16) = 0;
              *(void *)(a3 + 24) = 0x3FFFFFFFCLL;
              goto LABEL_9;
            }
            *(void *)a3 = v4;
            *(void *)(a3 + 8) = v3;
            *(void *)(a3 + 16) = v5;
            *(void *)(a3 + 24) = v6;
            *(void *)(a3 + 32) = v8;
            *(void *)(a3 + 40) = v7;
            *(unsigned char *)(a3 + 48) = 0;
            break;
        }
      }
      else
      {
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = result ^ 0x8000000000000000;
        *(_OWORD *)(a3 + 16) = xmmword_188354B20;
LABEL_9:
        *(void *)(a3 + 32) = 0;
        *(void *)(a3 + 40) = 0;
        *(unsigned char *)(a3 + 48) = 0;
      }
      break;
  }
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance ScrollGesture()
{
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  type metadata accessor for EventListener<WheelEvent>();
  lazy protocol witness table accessor for type AnyGesture<CGSize> and conformance AnyGesture<A>(&lazy protocol witness table cache variable for type EventListener<WheelEvent> and conformance EventListener<A>, (void (*)(uint64_t))type metadata accessor for EventListener<WheelEvent>);
  return Gesture.combined<A, B>(with:body:)();
}

void IndirectScrollGesture.body.getter()
{
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in IndirectScrollGesture()
{
  return lazy protocol witness table accessor for type AnyGesture<CGSize> and conformance AnyGesture<A>(&lazy protocol witness table cache variable for type AnyGesture<CGSize> and conformance AnyGesture<A>, (void (*)(uint64_t))type metadata accessor for AnyGesture<CGSize>);
}

void type metadata accessor for AnyGesture<CGSize>()
{
  if (!lazy cache variable for type metadata for AnyGesture<CGSize>)
  {
    type metadata accessor for CGSize(255);
    unint64_t v0 = type metadata accessor for AnyGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyGesture<CGSize>);
    }
  }
}

ValueMetadata *type metadata accessor for IndirectScrollGesture()
{
  return &type metadata for IndirectScrollGesture;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in ScrollGesture()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for EventListener<WheelEvent>()
{
  if (!lazy cache variable for type metadata for EventListener<WheelEvent>)
  {
    lazy protocol witness table accessor for type WheelEvent and conformance WheelEvent();
    unint64_t v0 = type metadata accessor for EventListener();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventListener<WheelEvent>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WheelEvent and conformance WheelEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type WheelEvent and conformance WheelEvent;
  if (!lazy protocol witness table cache variable for type WheelEvent and conformance WheelEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WheelEvent and conformance WheelEvent);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type AnyGesture<CGSize> and conformance AnyGesture<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollGesture()
{
  return &type metadata for ScrollGesture;
}

uint64_t getEnumTagSinglePayload for ScrollGesture.Value(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 24) >> 2;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollGesture.Value(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 4 * -a2;
      *(void *)(result + 32) = 0;
      *(void *)(result + 40) = 0;
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for ScrollGesture.Value(uint64_t a1)
{
  return *(void *)(a1 + 24) >> 63;
}

uint64_t destructiveProjectEnumData for ScrollGesture.Value(uint64_t result)
{
  *(void *)(result + 24) &= ~0x8000000000000000;
  return result;
}

uint64_t destructiveInjectEnumTag for ScrollGesture.Value(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = *(void *)(result + 24) & 3 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for ScrollGesture.Value()
{
  return &type metadata for ScrollGesture.Value;
}

uint64_t sub_187E54790()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL specialized static ScrollGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  double v5 = *(double *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  if ((v3 & 0x8000000000000000) == 0)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      long long v8 = *(_OWORD *)(a2 + 32);
      uint64_t v9 = *(void *)(a1 + 16);
      v15[0] = *(void *)a1;
      *(double *)&v15[1] = v2;
      _OWORD v15[2] = v9;
      char v16 = v3;
      long long v17 = *(_OWORD *)(a1 + 32);
      *(double *)unsigned int v12 = v5;
      v12[1] = v4;
      _OWORD v12[2] = v7;
      char v13 = v6;
      long long v14 = v8;
      return specialized static PanGesture.Value.== infix(_:_:)((uint64_t)v15, (uint64_t)v12);
    }
    return 0;
  }
  if ((v6 & 0x8000000000000000) == 0) {
    return 0;
  }
  return v2 == *(double *)(a2 + 8) && *(double *)a1 == v5;
}

void WidgetConfigurationModifier<>.body(content:)()
{
}

uint64_t static EmptyWidgetConfiguration._makeWidgetConfiguration(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  int v5 = *((_DWORD *)a2 + 14);
  uint64_t v7 = *a2;
  int v8 = v3;
  uint64_t v9 = v4;
  long long v10 = *(_OWORD *)(a2 + 3);
  long long v11 = *(_OWORD *)(a2 + 5);
  int v12 = v5;
  return a3(a1, &v7);
}

void protocol witness for WidgetConfigurationModifier.body(content:) in conformance EmptyWidgetConfiguration()
{
}

uint64_t WidgetConfiguration.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return ModifiedContent.init(content:modifier:)();
}

uint64_t static ModifiedContent<>._makeWidgetConfiguration(widget:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a2;
  int v13 = *((_DWORD *)a2 + 2);
  uint64_t v14 = a2[2];
  int v15 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = *a1;
  int v11 = v21;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v16 = a2[3];
  uint64_t v17 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v21 = v12;
  int v22 = v13;
  uint64_t v23 = v14;
  uint64_t v24 = v16;
  uint64_t v25 = v17;
  long long v26 = v20;
  int v27 = v15;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = a4;
  *(void *)(v18 + 32) = a5;
  *(void *)(v18 + 40) = a6;
  *(_DWORD *)(v18 + 48) = v11;
  (*(void (**)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a6 + 32))(v28, &v21, partial apply for closure #2 in static ModifiedContent<>._makeWidgetConfiguration(widget:inputs:), v18, a4, a6);
  return swift_release();
}

uint64_t closure #2 in static ModifiedContent<>._makeWidgetConfiguration(widget:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 14);
  LODWORD(v17) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v16 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v17 = v9;
  int v18 = v10;
  uint64_t v19 = v11;
  uint64_t v20 = v13;
  uint64_t v21 = v14;
  long long v22 = v16;
  int v23 = v12;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a6 + 32))(v24, &v17, a4, a6);
}

void protocol witness for WidgetConfiguration.body.getter in conformance <> ModifiedContent<A, B>()
{
}

uint64_t protocol witness for static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ModifiedContent<>._makeWidgetConfiguration(widget:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t static ModifiedContent<>._makeWidgetConfiguration(modifier:inputs:body:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *a2;
  int v16 = *((_DWORD *)a2 + 2);
  uint64_t v17 = a2[2];
  int v24 = *((_DWORD *)a2 + 14);
  LODWORD(v26) = *a1;
  int v14 = v26;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v23 = *(_OWORD *)(a2 + 5);
  uint64_t v18 = a2[3];
  uint64_t v19 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v26 = v15;
  int v27 = v16;
  uint64_t v28 = v17;
  uint64_t v29 = v18;
  uint64_t v30 = v19;
  long long v31 = v23;
  int v32 = v24;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a5;
  *(void *)(v20 + 24) = a6;
  *(void *)(v20 + 32) = a7;
  *(void *)(v20 + 40) = a8;
  *(_DWORD *)(v20 + 48) = v14;
  *(void *)(v20 + 56) = a3;
  *(void *)(v20 + 64) = a4;
  uint64_t v21 = *(void (**)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a8 + 32);
  swift_retain();
  v21(v33, &v26, partial apply for closure #2 in static ModifiedContent<>._makeWidgetConfiguration(modifier:inputs:body:), v20, a6, a8);
  return swift_release();
}

uint64_t closure #2 in static ModifiedContent<>._makeWidgetConfiguration(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = *a2;
  int v14 = *((_DWORD *)a2 + 2);
  uint64_t v15 = a2[2];
  int v16 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v17 = a2[3];
  uint64_t v18 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v21 = v13;
  int v22 = v14;
  uint64_t v23 = v15;
  uint64_t v24 = v17;
  uint64_t v25 = v18;
  long long v26 = v20;
  int v27 = v16;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 32))(v28, &v21, a4, a5, a6, a8);
}

void protocol witness for WidgetConfigurationModifier.body(content:) in conformance <> ModifiedContent<A, B>()
{
}

uint64_t protocol witness for static WidgetConfigurationModifier._makeWidgetConfiguration(modifier:inputs:body:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ModifiedContent<>._makeWidgetConfiguration(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a6 - 8), *(void *)(a6 - 16));
}

uint64_t static WidgetConfigurationModifier_Content._makeWidgetConfiguration(widget:inputs:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  int v6 = *(_DWORD *)(a2 + 56);
  uint64_t v17 = *(void (**)(uint64_t, void))a2;
  int v18 = v2;
  uint64_t v19 = v3;
  long long v20 = *(_OWORD *)(a2 + 24);
  uint64_t v21 = v4;
  uint64_t v22 = v5;
  int v23 = v6;
  type metadata accessor for WidgetConfigurationModifier_Content.BodyInput();
  type metadata accessor for (_:_:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  _SceneInputs.popLast<A, B>(_:)();
  uint64_t v7 = v10;
  if (v10)
  {
    int v10 = v17;
    LODWORD(v11) = v18;
    uint64_t v12 = v19;
    long long v13 = v20;
    uint64_t v14 = v21;
    uint64_t v15 = v22;
    int v16 = v23;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v8 = swift_bridgeObjectRetain();
    v7(v8, &v10);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    PreferencesOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t static WidgetConfigurationModifier_Content.BodyInput.defaultValue.getter()
{
  unint64_t v0 = type metadata accessor for (_:_:)();

  return MEMORY[0x1F4100E88](v0);
}

uint64_t protocol witness for static GraphInput.isTriviallyReusable.getter in conformance WidgetConfigurationModifier_Content<A>.BodyInput()
{
  return MEMORY[0x1F40FD0F8]();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance WidgetConfigurationModifier_Content<A>.BodyInput()
{
  return static WidgetConfigurationModifier_Content.BodyInput.defaultValue.getter();
}

uint64_t protocol witness for static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:) in conformance WidgetConfigurationModifier_Content<A>(uint64_t a1, uint64_t a2)
{
  return static WidgetConfigurationModifier_Content._makeWidgetConfiguration(widget:inputs:)(a1, a2);
}

void specialized WidgetConfigurationModifier.widgetBodyError()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._uint64_t countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  Swift::String v0;
  Swift::String v1;

  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._object = (void *)0x800000018833B090;
  v0._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v0);
  v1._uint64_t countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized WidgetConfigurationModifier<>.body(content:)()
{
}

uint64_t sub_187E55360()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeWidgetConfiguration(widget:inputs:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static ModifiedContent<>._makeWidgetConfiguration(widget:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_187E554A0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeWidgetConfiguration(modifier:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static ModifiedContent<>._makeWidgetConfiguration(modifier:inputs:body:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t type metadata accessor for WidgetConfigurationModifier_Content.BodyInput()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of WidgetConfigurationModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static WidgetConfigurationModifier._makeWidgetConfiguration(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t type metadata accessor for WidgetConfigurationModifier_Content()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for PropertyKey in WidgetConfigurationModifier_Content<A>.BodyInput()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for WidgetConfigurationModifier_Content<A>.BodyInput(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t View.textSelectionMenu(text:isPresented:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v8 = 0;
  uint64_t v9 = a1;
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  char v12 = a4;
  uint64_t v13 = a5;
  return MEMORY[0x18C113660](&v8, a6, &type metadata for TextSelectionMenuModifier, a7);
}

uint64_t assignWithCopy for TextSelectionMenuModifier(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TextSelectionMenuModifier()
{
  return &type metadata for TextSelectionMenuModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TextSelectionMenuModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TextSelectionMenuModifier.body(content:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  v11[0] = v5;
  v11[1] = v4;
  char v12 = v6;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v13);
  if (v13 == 1) {
    swift_retain();
  }
  v11[0] = v5;
  type metadata accessor for CGRect(0);
  uint64_t v7 = Anchor.Source.init<A>(_:)();
  uint64_t v13 = *(void *)(v2 + 40);
  int v8 = (_OWORD *)swift_allocObject();
  long long v9 = *(_OWORD *)(v2 + 16);
  v8[1] = *(_OWORD *)v2;
  void v8[2] = v9;
  void v8[3] = *(_OWORD *)(v2 + 32);
  *a1 = v7;
  a1[1] = (uint64_t)partial apply for closure #1 in TextSelectionMenuModifier.body(content:);
  a1[2] = (uint64_t)v8;
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v11);
  swift_retain();
  return outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v13);
}

void *closure #1 in TextSelectionMenuModifier.body(content:)(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v10 = *((void *)a3 + 2);
  uint64_t v9 = *((void *)a3 + 3);
  uint64_t v11 = *((unsigned __int8 *)a3 + 32);
  type metadata accessor for Binding<Bool>();
  uint64_t result = MEMORY[0x18C113DA0](&v16);
  if (v8)
  {
    uint64_t result = (void *)outlined consume of EditMenuPresentation?(v5, v6, v7, v8);
LABEL_6:
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return result;
  }
  if (!(_BYTE)v16) {
    goto LABEL_6;
  }
  uint64_t v13 = *a3;
  if (v13)
  {
    uint64_t v14 = *((void *)a3 + 1);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v10;
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v11;
    *(void *)(a1 + 40) = a2;
    swift_retain();
    swift_retain();
    swift_retain();
    return (void *)swift_retain();
  }
  else
  {
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance TextSelectionMenuModifier@<X0>(uint64_t *a1@<X8>)
{
  return TextSelectionMenuModifier.body(content:)(a1);
}

uint64_t sub_187E559A8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void *partial apply for closure #1 in TextSelectionMenuModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in TextSelectionMenuModifier.body(content:)(a1, a2, (unsigned int *)(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<TextSelectionMenuModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<TextSelectionMenuModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<TextSelectionMenuModifier>);
    lazy protocol witness table accessor for type _ViewModifier_Content<TextSelectionMenuModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key> and conformance _AnchorTransformModifier<A, B>, (void (*)(uint64_t))type metadata accessor for _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>>)
  {
    type metadata accessor for _ViewModifier_Content<TextSelectionMenuModifier>();
    type metadata accessor for _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TextSelectionMenuModifier>, _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<TextSelectionMenuModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<TextSelectionMenuModifier>)
  {
    lazy protocol witness table accessor for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<TextSelectionMenuModifier>);
    }
  }
}

void type metadata accessor for _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>()
{
  if (!lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>)
  {
    type metadata accessor for CGRect?();
    unint64_t v0 = type metadata accessor for _AnchorTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, EditMenuPresentation.Key>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<TextSelectionMenuModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t View.groupedFormStyleContext()()
{
  lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();

  return View.styleContext<A>(_:)();
}

void GroupedFormStyle.makeBody(configuration:)(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance GroupedFormStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();

  return specialized static FormStyleContext.accepts<A>(_:at:)(a4, a3);
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance GroupedFormStyleContext(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  if (a2) {
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  }
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

void View.formInsets(_:_:)()
{
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance FormInsetsKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  char v2 = byte_1E90FBFB8;
  uint64_t v3 = qword_1E90FBFC0;
  char v4 = byte_1E90FBFC8;
  uint64_t v5 = qword_1E90FBFD0;
  char v6 = byte_1E90FBFD8;
  uint64_t v7 = qword_1E90FBFE0;
  char v8 = byte_1E90FBFE8;
  *(void *)a1 = static FormInsetsKey.defaultValue;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;
  return result;
}

void static FormContentSizeFittingBehavior.disabled.getter()
{
}

void FormContentSizeFittingBehavior.hash(into:)()
{
}

void static FormContentSizeFittingBehavior.== infix(_:_:)()
{
}

void FormContentSizeFittingBehavior.hashValue.getter()
{
}

void View.formContentSizeFittingBehavior(_:)()
{
}

uint64_t associated type witness table accessor for FormStyle.Body : View in GroupedFormStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for FormStyle.Body : View in InsetGroupedFormStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type FormContentSizeFittingBehavior and conformance FormContentSizeFittingBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type FormContentSizeFittingBehavior and conformance FormContentSizeFittingBehavior;
  if (!lazy protocol witness table cache variable for type FormContentSizeFittingBehavior and conformance FormContentSizeFittingBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentSizeFittingBehavior and conformance FormContentSizeFittingBehavior);
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupedFormStyle()
{
  return &type metadata for GroupedFormStyle;
}

ValueMetadata *type metadata accessor for InsetGroupedFormStyle()
{
  return &type metadata for InsetGroupedFormStyle;
}

ValueMetadata *type metadata accessor for FormContentSizeFittingBehavior()
{
  return &type metadata for FormContentSizeFittingBehavior;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>>();
    lazy protocol witness table accessor for type StyleContextWriter<GroupedFormStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>> and conformance List<A, B>, (void (*)(uint64_t))type metadata accessor for List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>>)
  {
    type metadata accessor for List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>();
    type metadata accessor for ListStyleWriter<DefaultListStyle>(255, &lazy cache variable for type metadata for ListStyleWriter<OuterFormListStyle>, (uint64_t)&type metadata for OuterFormListStyle, (uint64_t)&protocol witness table for OuterFormListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>, ListStyleWriter<OuterFormListStyle>>);
    }
  }
}

void type metadata accessor for List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>()
{
  if (!lazy cache variable for type metadata for List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for List();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for List<Never, ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>)
  {
    type metadata accessor for ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>();
    type metadata accessor for ListStyleWriter<DefaultListStyle>(255, &lazy cache variable for type metadata for ListStyleWriter<DefaultListStyle>, (uint64_t)&type metadata for DefaultListStyle, (uint64_t)&protocol witness table for DefaultListStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ListStyleWriter);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>)
  {
    type metadata accessor for StyleContextWriter<GroupedFormStyleContext>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>);
    }
  }
}

void type metadata accessor for StyleContextWriter<GroupedFormStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextWriter<GroupedFormStyleContext>)
  {
    lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();
    unint64_t v0 = type metadata accessor for StyleContextWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<GroupedFormStyleContext>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>, ListStyleWriter<DefaultListStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>>();
    lazy protocol witness table accessor for type StyleContextWriter<GroupedFormStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<GroupedFormStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<GroupedFormStyleContext>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<FormStyleConfiguration.Content, StyleContextWriter<GroupedFormStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StyleContextWriter<GroupedFormStyleContext> and conformance StyleContextWriter<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187E5643C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187E564D8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA04FormE19SizeFittingBehaviorVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<OptionalEdgeInsets>, MEMORY[0x1E4F402B8], &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<OptionalEdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA04FormE19SizeFittingBehaviorVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  return swift_getWitnessTable();
}

uint64_t sub_187E56588(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVyAA04FormE19SizeFittingBehaviorVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<FormContentSizeFittingBehavior>, (uint64_t)&type metadata for FormContentSizeFittingBehavior, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<FormContentSizeFittingBehavior> and conformance _EnvironmentKeyWritingModifier<A>);
}

unsigned char *storeEnumTagSinglePayload for FormContentSizeFittingBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E56670);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormContentSizeFittingBehavior.Role()
{
  return &type metadata for FormContentSizeFittingBehavior.Role;
}

unint64_t instantiation function for generic protocol witness table for GroupedFormStyleContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type FormContentSizeFittingBehavior.Role and conformance FormContentSizeFittingBehavior.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type FormContentSizeFittingBehavior.Role and conformance FormContentSizeFittingBehavior.Role;
  if (!lazy protocol witness table cache variable for type FormContentSizeFittingBehavior.Role and conformance FormContentSizeFittingBehavior.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormContentSizeFittingBehavior.Role and conformance FormContentSizeFittingBehavior.Role);
  }
  return result;
}

void type metadata accessor for ListStyleWriter<DefaultListStyle>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

ValueMetadata *type metadata accessor for FormInsetsKey()
{
  return &type metadata for FormInsetsKey;
}

void static FormContentSizeFittingBehavior.automatic.getter()
{
}

uint64_t AnyNavigationLinkPresentedView.view<A>(at:applying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a4 + 104))(a1, a2, a3, a5, a6);
}

uint64_t AnyNavigationLinkPresentedView.init<A>(_:)(uint64_t a1)
{
  return AnyNavigationLinkPresentedViewStorage.__allocating_init(_:)(a1);
}

uint64_t AnyNavigationLinkPresentedViewStorage.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 128) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 144), a1);
  return v2;
}

unint64_t AnyNavigationLinkPresentedView.description.getter(uint64_t a1)
{
  _StringGuts.grow(_:)(34);
  uint64_t v2 = swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0xD000000000000020;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyNavigationLinkPresentedView(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 112))(*a2) & 1;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyNavigationLinkPresentedView()
{
  return AnyNavigationLinkPresentedView.description.getter(*v0);
}

void AnyNavigationLinkPresentedViewStorageBase.description.getter()
{
}

void AnyNavigationLinkPresentedViewStorageBase.view<A>(at:applying:)()
{
}

void AnyNavigationLinkPresentedViewStorageBase.equals(_:)()
{
}

uint64_t type metadata accessor for AnyNavigationLinkPresentedViewStorageBase()
{
  return self;
}

uint64_t type metadata completion function for AnyNavigationLinkPresentedViewStorage()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyNavigationLinkPresentedViewStorageBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))();
}

uint64_t AnyNavigationLinkPresentedViewStorage.description.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v8 - v6, v1 + *(void *)(v4 + 144), v2, v3);
  return String.init<A>(describing:)();
}

uint64_t AnyNavigationLinkPresentedViewStorage.view<A>(at:applying:)(uint64_t *a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *v5;
  uint64_t v12 = *(void *)(*v5 + 128);
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v19 - v15, (uint64_t)v5 + *(void *)(v11 + 144), v12, v14);
  uint64_t v17 = specialized static ResolvedNavigationDestinations.prepareToPresent<A, B>(view:at:shouldUpdateDestinations:applying:)((uint64_t)v16, a1, a2, a3, v12, a4, *(void *)(v11 + 136), a5);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  return v17;
}

uint64_t AnyNavigationLinkPresentedViewStorage.equals(_:)(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 128);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v19[-v8];
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10) {
    return 0;
  }
  uint64_t v11 = v10;
  if ((uint64_t *)v10 == v1) {
    return 1;
  }
  uint64_t v12 = (uint64_t)v1 + *(void *)(v2 + 144);
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16);
  v13(v9, v12, v3);
  uint64_t v14 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v13)(v6, v11 + *(void *)(*(void *)v11 + 144), v3);
  MEMORY[0x1F4188790](v14);
  *(void *)&v19[-32] = v3;
  *(void *)&v19[-24] = v6;
  *(_DWORD *)&v19[-16] = 3;
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)&v19[-48], v3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v15);
  swift_release();
  uint64_t v16 = v19[23];
  uint64_t v17 = *(void (**)(unsigned char *, uint64_t))(v4 + 8);
  v17(v6, v3);
  v17(v9, v3);
  return v16;
}

uint64_t AnyNavigationLinkPresentedViewStorage.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 128) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 144));
}

uint64_t AnyNavigationLinkPresentedViewStorage.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 128) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 144));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for AnyNavigationLinkPresentedViewStorage()
{
  return __swift_instantiateGenericMetadata();
}

void View.formAccessory<A>(accessories:)()
{
}

void View.formInfoAction(action:)()
{
}

void View.formRowInfoVisibility(_:)()
{
}

uint64_t sub_187E571FC()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for FormAccessoryModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187E572A8()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type FormInfoActionModifier and conformance FormInfoActionModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type FormInfoActionModifier and conformance FormInfoActionModifier;
  if (!lazy protocol witness table cache variable for type FormInfoActionModifier and conformance FormInfoActionModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormInfoActionModifier and conformance FormInfoActionModifier);
  }
  return result;
}

uint64_t sub_187E57360(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyxAA30_EnvironmentKeyWritingModifierVyAA10VisibilityOGGAA06_TraithI0VyAA016FormRowAccessoryjG0VGGAaBHPAjaBHPxAaBHD1__AiA0cI0HPyHCHC_AoaQHPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowAccessoryVisibilityKey>, (uint64_t)&type metadata for FormRowAccessoryVisibilityKey, (uint64_t)&protocol witness table for FormRowAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<FormRowAccessoryVisibilityKey> and conformance _TraitWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<FormRowAccessoryVisibilityKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowAccessoryVisibilityKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowAccessoryVisibilityKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<FormRowAccessoryVisibilityKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowAccessoryVisibilityKey>, (uint64_t)&type metadata for FormRowAccessoryVisibilityKey, (uint64_t)&protocol witness table for FormRowAccessoryVisibilityKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowAccessoryVisibilityKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187E57414(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyxAA30_EnvironmentKeyWritingModifierVyAA10VisibilityOGGAA06_TraithI0VyAA016FormRowAccessoryjG0VGGAaBHPAjaBHPxAaBHD1__AiA0cI0HPyHCHC_AoaQHPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowInfoVisibilityKey>, (uint64_t)&type metadata for FormRowInfoVisibilityKey, (uint64_t)&protocol witness table for FormRowInfoVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<FormRowInfoVisibilityKey> and conformance _TraitWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyxAA30_EnvironmentKeyWritingModifierVyAA10VisibilityOGGAA06_TraithI0VyAA016FormRowAccessoryjG0VGGAaBHPAjaBHPxAaBHD1__AiA0cI0HPyHCHC_AoaQHPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<FormRowInfoVisibilityKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInfoVisibilityKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInfoVisibilityKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<FormRowAccessoryVisibilityKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowInfoVisibilityKey>, (uint64_t)&type metadata for FormRowInfoVisibilityKey, (uint64_t)&protocol witness table for FormRowInfoVisibilityKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInfoVisibilityKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for FormRowInfoVisibilityKey()
{
  return &type metadata for FormRowInfoVisibilityKey;
}

ValueMetadata *type metadata accessor for FormRowAccessoryVisibilityKey()
{
  return &type metadata for FormRowAccessoryVisibilityKey;
}

uint64_t destroy for FormInfoActionModifier(uint64_t a1)
{
  swift_release();
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 40);

  return outlined consume of Environment<Bool?>.Content(v2, v3);
}

uint64_t initializeWithCopy for FormInfoActionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v5, v6);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(v2 + 32);
  LOBYTE(v2) = *(unsigned char *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v7, v2);
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v2;
  return a1;
}

uint64_t assignWithCopy for FormInfoActionModifier(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = v2[2];
  char v6 = *((unsigned char *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v5, v6);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 24);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of Environment<Bool?>.Content(v7, v8);
  uint64_t v9 = v2[4];
  LOBYTE(v2) = *((unsigned char *)v2 + 40);
  outlined copy of Environment<Bool>.Content(v9, (char)v2);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 40);
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = (_BYTE)v2;
  outlined consume of Environment<Bool?>.Content(v10, v11);
  return a1;
}

uint64_t assignWithTake for FormInfoActionModifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of Environment<Bool?>.Content(v5, v6);
  char v7 = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  return a1;
}

ValueMetadata *type metadata accessor for FormInfoActionModifier()
{
  return &type metadata for FormInfoActionModifier;
}

uint64_t type metadata completion function for FormAccessoryModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FormAccessoryModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v9 = *a2;
    *char v4 = *a2;
    char v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (char *)v4 + v6;
    uint64_t v11 = (char *)a2 + v6;
    unint64_t v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v14 = *(void *)v13;
    char v15 = *(unsigned char *)(v13 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v13, v15);
    *(void *)unint64_t v12 = v14;
    *(unsigned char *)(v12 + 8) = v15;
    unint64_t v16 = (unint64_t)(v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = (unint64_t)(v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = *(void *)v17;
    char v19 = *(unsigned char *)(v17 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v17, v19);
    *(void *)unint64_t v16 = v18;
    *(unsigned char *)(v16 + 8) = v19;
  }
  return v4;
}

uint64_t destroy for FormAccessoryModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  outlined consume of Environment<Bool?>.Content(*(void *)((v4 + 7) & 0xFFFFFFFFFFFFFFF8), *(unsigned __int8 *)(((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8));
  unint64_t v5 = (v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 8);

  return outlined consume of Environment<Bool?>.Content(v6, v7);
}

uint64_t initializeWithCopy for FormAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v5) = *(unsigned char *)(v10 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v10, v5);
  *(void *)unint64_t v9 = v11;
  *(unsigned char *)(v9 + 8) = v5;
  unint64_t v12 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  LOBYTE(v5) = *(unsigned char *)(v13 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v13, v5);
  *(void *)unint64_t v12 = v14;
  *(unsigned char *)(v12 + 8) = v5;
  return a1;
}

uint64_t assignWithCopy for FormAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v5) = *(unsigned char *)(v10 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v10, v5);
  uint64_t v12 = *(void *)v9;
  uint64_t v13 = *(unsigned __int8 *)(v9 + 8);
  *(void *)unint64_t v9 = v11;
  *(unsigned char *)(v9 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v12, v13);
  unint64_t v14 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  LOBYTE(v5) = *(unsigned char *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v15, v5);
  uint64_t v17 = *(void *)v14;
  uint64_t v18 = *(unsigned __int8 *)(v14 + 8);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v17, v18);
  return a1;
}

uint64_t initializeWithTake for FormAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  *(void *)unint64_t v9 = v11;
  unint64_t v12 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  *(unsigned char *)(v12 + 8) = *(unsigned char *)(v13 + 8);
  *(void *)unint64_t v12 = v14;
  return a1;
}

uint64_t assignWithTake for FormAccessoryModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v10) = *(unsigned char *)(v10 + 8);
  uint64_t v12 = *(void *)v9;
  uint64_t v13 = *(unsigned __int8 *)(v9 + 8);
  *(void *)unint64_t v9 = v11;
  *(unsigned char *)(v9 + 8) = v10;
  outlined consume of Environment<Bool?>.Content(v12, v13);
  unint64_t v14 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  LOBYTE(v15) = *(unsigned char *)(v15 + 8);
  uint64_t v17 = *(void *)v14;
  uint64_t v18 = *(unsigned __int8 *)(v14 + 8);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v15;
  outlined consume of Environment<Bool?>.Content(v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for FormAccessoryModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187E57EB0);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((v6 + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 > 1) {
    return (v17 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for FormAccessoryModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              unint64_t v21 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xFE)
              {
                *(unsigned char *)(v21 + 8) = 0;
                *(void *)unint64_t v21 = a2 - 255;
              }
              else
              {
                *(unsigned char *)(v21 + 8) = -(char)a2;
              }
            }
            else
            {
              uint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x187E580DCLL);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance FormInfoActionModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = *((unsigned __int8 *)v1 + 24);
  uint64_t v7 = v1[4];
  uint64_t v8 = *((unsigned __int8 *)v1 + 40);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v5, v6);
  char v9 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Bool?>.Content(v5, v6);
  outlined copy of Environment<Bool>.Content(v7, v8);
  specialized Environment.wrappedValue.getter(v7, v8, &v12);
  uint64_t result = outlined consume of Environment<Bool?>.Content(v7, v8);
  __int16 v11 = v9 & 1 | (v12 << 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = v11;
  return result;
}

uint64_t FormAccessoryModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v48 = a2;
  swift_getWitnessTable();
  uint64_t v42 = type metadata accessor for _ViewModifier_Content();
  uint64_t v51 = v42;
  CGFloat v52 = &type metadata for FormRowAccessoryTrait;
  uint64_t WitnessTable = swift_getWitnessTable();
  id v54 = &protocol witness table for FormRowAccessoryTrait;
  uint64_t v44 = WitnessTable;
  uint64_t v45 = MEMORY[0x1E4F41450];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v5 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v46 = OpaqueTypeMetadata2;
  uint64_t v47 = v5;
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  CGRect v41 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  id v43 = (char *)&v37 - v8;
  uint64_t v9 = *(void *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  uint64_t v37 = v9;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v40 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unsigned __int8 v12 = (char *)&v37 - v11;
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  uint64_t v39 = type metadata accessor for ModifiedContent();
  uint64_t v13 = *(void *)(v39 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v39);
  id v38 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unsigned int v17 = (char *)&v37 - v16;
  uint64_t v18 = v2 + *(int *)(a1 + 40);
  uint64_t v19 = *(void *)v18;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v18, *(unsigned char *)(v18 + 8));
  specialized Environment.wrappedValue.getter(v19, v20, &v51);
  outlined consume of Environment<Bool?>.Content(v19, v20);
  uint64_t v21 = *(void *)(a1 + 24);
  View.controlSize(_:)();
  swift_getKeyPath();
  uint64_t v22 = v2 + *(int *)(a1 + 36);
  uint64_t v23 = *(void *)v22;
  uint64_t v24 = *(unsigned __int8 *)(v22 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v22, *(unsigned char *)(v22 + 8));
  LOBYTE(v9) = specialized Environment.wrappedValue.getter(v23, v24);
  outlined consume of Environment<Bool?>.Content(v23, v24);
  LOBYTE(v51) = v9 & 1;
  uint64_t v25 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  uint64_t v49 = v21;
  uint64_t v50 = v25;
  swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v10);
  long long v26 = v38;
  uint64_t v27 = v39;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v38, v17, v39);
  unint64_t v28 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v37;
  *(void *)(v29 + 24) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v29 + v28, v26, v27);
  uint64_t v30 = swift_checkMetadataState();
  long long v31 = v41;
  uint64_t v32 = v44;
  View.transformTrait<A>(_:transform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v27);
  uint64_t v51 = v30;
  CGFloat v52 = &type metadata for FormRowAccessoryTrait;
  uint64_t WitnessTable = v32;
  id v54 = &protocol witness table for FormRowAccessoryTrait;
  swift_getOpaqueTypeConformance2();
  unint64_t v33 = v43;
  uint64_t v34 = v46;
  static ViewBuilder.buildExpression<A>(_:)(v31);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v47 + 8);
  v35(v31, v34);
  static ViewBuilder.buildExpression<A>(_:)(v33);
  return ((uint64_t (*)(char *, uint64_t))v35)(v33, v34);
}

uint64_t closure #1 in FormAccessoryModifier.body(content:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  uint64_t v9 = type metadata accessor for Group();
  MEMORY[0x1F4188790](v9);
  double v14 = MEMORY[0x1F4188790](v10);
  v22[0] = a1;
  uint64_t v15 = *a1;
  if (v15)
  {
    MEMORY[0x1F4188790](v11);
    v22[-4] = a3;
    v22[-3] = a4;
    v22[-2] = v15;
    v22[-1] = a2;
    uint64_t WitnessTable = swift_getWitnessTable();
    Group<A>.init(content:)();
    v22[1] = WitnessTable;
    swift_getWitnessTable();
    uint64_t v17 = AnyView.init<A>(_:)();
    uint64_t result = swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)v22 - v12, a2, v8, v14);
    uint64_t v19 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
    _OWORD v22[4] = a4;
    v22[5] = v19;
    uint64_t v20 = swift_getWitnessTable();
    uint64_t v21 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
    void v22[2] = v20;
    _OWORD v22[3] = v21;
    swift_getWitnessTable();
    uint64_t result = AnyView.init<A>(_:)();
    uint64_t v17 = result;
  }
  *(void *)v22[0] = v17;
  return result;
}

uint64_t closure #1 in closure #1 in FormAccessoryModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v21 = a4;
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v19 - v11;
  uint64_t v13 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  v26[4] = a3;
  v26[5] = v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  _OWORD v26[2] = WitnessTable;
  void v26[3] = v15;
  uint64_t v16 = swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v20);
  uint64_t v25 = a1;
  v26[0] = &v25;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v12, v6);
  v26[1] = v9;
  swift_retain();
  v24[0] = MEMORY[0x1E4F41618];
  v24[1] = v6;
  uint64_t v22 = MEMORY[0x1E4F41610];
  uint64_t v23 = v16;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v26, 2uLL, (uint64_t)v24);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v12, v6);
  v17(v9, v6);
  return swift_release();
}

uint64_t FormInfoButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (_WORD *)((char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>(0);
  uint64_t v52 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  uint64_t v51 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v50 - v11;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  uint64_t v54 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>();
  uint64_t v55 = *(void *)(v16 - 8);
  uint64_t v56 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v53 = (uint64_t)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v59 = *((unsigned char *)v1 + 32);
  long long v18 = v1[1];
  long long v57 = *v1;
  long long v58 = v18;
  uint64_t v19 = *((void *)&v18 + 1);
  uint64_t v20 = v59;
  outlined copy of Environment<Bool>.Content(*((uint64_t *)&v18 + 1), v59);
  int v21 = specialized Environment.wrappedValue.getter(v19, v20);
  outlined consume of Environment<Bool?>.Content(v19, v20);
  if (v21 == 2)
  {
    uint64_t v22 = v56;
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56);
    return v23(a1, 1, 1, v22);
  }
  else
  {
    uint64_t v25 = swift_allocObject();
    long long v26 = v1[1];
    *(_OWORD *)(v25 + 16) = *v1;
    *(_OWORD *)(v25 + 32) = v26;
    *(unsigned char *)(v25 + 48) = *((unsigned char *)v1 + 32);
    *uint64_t v6 = 256;
    uint64_t v27 = (uint64_t (**)())((char *)v6 + *(int *)(v4 + 36));
    *uint64_t v27 = partial apply for closure #1 in UIKitSearchScopeCoordinating<>.onChange(selectedScope:);
    v27[1] = (uint64_t (*)())v25;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = *(int *)(v4 + 40);
    uint64_t v50 = a1;
    uint64_t v29 = (char *)v6 + v28;
    outlined retain of FormInfoButton((uint64_t)&v57);
    LocalizedStringKey.init(stringLiteral:)();
    type metadata accessor for SwiftUIClass();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v31 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    uint64_t v32 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v34 = v33;
    LOBYTE(ObjCClassFromMetadata) = v35;
    uint64_t v37 = v36;
    type metadata accessor for _ViewModifier_Content<FormInfoActionModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = 0x7269632E6F666E69;
    *(void *)(v38 + 24) = 0xEB00000000656C63;
    *(_DWORD *)(v38 + 32) = 0;
    *(unsigned char *)(v38 + 36) = 1;
    *(_OWORD *)(v38 + 40) = xmmword_18834C6B0;
    *(_OWORD *)(v38 + 56) = xmmword_1883A8520;
    *(_OWORD *)(v38 + 72) = xmmword_18834C6D0;
    *(unsigned char *)(v38 + 88) = 0;
    uint64_t KeyPath = swift_getKeyPath();
    *(void *)uint64_t v29 = v32;
    *((void *)v29 + 1) = v34;
    v29[16] = ObjCClassFromMetadata & 1;
    *((void *)v29 + 3) = v37;
    *((void *)v29 + 4) = v38;
    *((void *)v29 + 5) = KeyPath;
    v29[48] = 2;
    LOBYTE(v34) = v58;
    LOBYTE(ObjCClassFromMetadata) = BYTE1(v58);
    uint64_t v40 = swift_getKeyPath();
    outlined init with copy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>);
    CGRect v41 = &v9[*(int *)(v52 + 36)];
    *(void *)CGRect v41 = v40;
    v41[8] = ObjCClassFromMetadata;
    outlined destroy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>);
    uint64_t v42 = swift_getKeyPath();
    outlined init with copy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>);
    id v43 = &v12[*(int *)(v51 + 36)];
    *(void *)id v43 = v42;
    v43[8] = v34 & 1;
    outlined destroy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>);
    uint64_t v44 = swift_getKeyPath();
    uint64_t v45 = swift_getKeyPath();
    outlined init with copy of ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>((uint64_t)v12, (uint64_t)v15);
    uint64_t v46 = &v15[*(int *)(v54 + 36)];
    *(void *)uint64_t v46 = v44;
    v46[8] = 0;
    *((void *)v46 + 2) = v45;
    v46[24] = 0;
    outlined destroy of ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>((uint64_t)v12);
    uint64_t v47 = v53;
    specialized View.accessibility<A>(_:_:isEnabled:)(0x747475426F666E69, 0xEA00000000006E6FLL, 2, 1, v53);
    outlined destroy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    uint64_t v48 = v47;
    uint64_t v49 = v50;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>(v48, v50);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v49, 0, 1, v56);
  }
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance FormInfoButton()
{
  return 0;
}

void protocol witness for static _ViewTraitKey.defaultValue.getter in conformance FormRowInfoAction(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in FormInfoActionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in FormAccessoryModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187E593EC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ModifiedContent() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FormAccessoryModifier.body(content:)(uint64_t *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  uint64_t v5 = *(void *)(type metadata accessor for ModifiedContent() - 8);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in FormAccessoryModifier.body(content:)(a1, v6, v3, v4);
}

uint64_t partial apply for closure #1 in closure #1 in FormAccessoryModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in FormAccessoryModifier.body(content:)(v1[4], v1[5], v1[3], a1);
}

ValueMetadata *type metadata accessor for FormRowAccessoryTrait()
{
  return &type metadata for FormRowAccessoryTrait;
}

ValueMetadata *type metadata accessor for FormRowInfoAction()
{
  return &type metadata for FormRowInfoAction;
}

uint64_t sub_187E5963C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187E596F4()
{
  return lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<FormInfoActionModifier> and conformance _ViewModifier_Content<A>, (void (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<FormRowInfoAction> and conformance _TraitWritingModifier<A>);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>>)
  {
    type metadata accessor for _ViewModifier_Content<FormInfoActionModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<FormInfoActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type FormInfoActionModifier and conformance FormInfoActionModifier, (uint64_t)&type metadata for FormInfoActionModifier, MEMORY[0x1E4F408E0]);
    type metadata accessor for _TraitWritingModifier<FormRowAccessoryVisibilityKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowInfoAction>, (uint64_t)&type metadata for FormRowInfoAction, (uint64_t)&protocol witness table for FormRowInfoAction, MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<FormInfoActionModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<FormInfoActionModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<FormInfoActionModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<FormInfoActionModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<FormInfoActionModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type FormInfoActionModifier and conformance FormInfoActionModifier, (uint64_t)&type metadata for FormInfoActionModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<FormInfoActionModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<FormRowInfoAction> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInfoAction> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInfoAction> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<FormRowAccessoryVisibilityKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<FormRowInfoAction>, (uint64_t)&type metadata for FormRowInfoAction, (uint64_t)&protocol witness table for FormRowInfoAction, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<FormRowInfoAction> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t destroy for FormInfoButton(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32);

  return outlined consume of Environment<Bool?>.Content(v2, v3);
}

uint64_t initializeWithCopy for FormInfoButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 32);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return a1;
}

uint64_t assignWithCopy for FormInfoButton(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *((unsigned char *)v2 + 16);
  *(unsigned char *)(a1 + 17) = *((unsigned char *)v2 + 17);
  uint64_t v5 = v2[3];
  LOBYTE(v2) = *((unsigned char *)v2 + 32);
  outlined copy of Environment<Bool>.Content(v5, (char)v2);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = (_BYTE)v2;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  return a1;
}

uint64_t assignWithTake for FormInfoButton(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of Environment<Bool?>.Content(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for FormInfoButton()
{
  return &type metadata for FormInfoButton;
}

uint64_t initializeBufferWithCopyOfBuffer for FormInfoButton.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FormInfoButton.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for FormInfoButton.Configuration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for FormInfoButton.Configuration(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 18)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FormInfoButton.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FormInfoButton.Configuration()
{
  return &type metadata for FormInfoButton.Configuration;
}

uint64_t associated type witness table accessor for View.Body : View in FormInfoButton()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for _TraitWritingModifier<FormRowAccessoryVisibilityKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>);
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    type metadata accessor for _ViewModifier_Content<FormInfoActionModifier>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4)
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, a4);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance Button<A>((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance Button<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
    type metadata accessor for _ViewModifier_Content<FormInfoActionModifier>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>);
    }
  }
}

uint64_t sub_187E5A1BC()
{
  swift_release();
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));

  return swift_deallocObject();
}

uint64_t outlined retain of FormInfoButton(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v2, v3);
  return a1;
}

void type metadata accessor for _ViewModifier_Content<FormInfoActionModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_187E5A2B8()
{
  return EnvironmentValues.controlSize.getter();
}

uint64_t sub_187E5A2DC(char *a1)
{
  char v2 = *a1;
  return MEMORY[0x18C10F960](&v2);
}

uint64_t outlined init with copy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
    lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>(255);
    lazy protocol witness table accessor for type Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance Button<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>> and conformance Button<A>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>?();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>?()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<FormInfoActionModifier>, _TraitWritingModifier<FormRowInfoAction>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, _EnvironmentKeyWritingModifier<Image.Scale>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>>, _EnvironmentKeyWritingModifier<ControlSize>>, _EnvironmentKeyWritingModifier<Bool>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void View.formAccessoryVisibility(_:)()
{
}

uint64_t EnvironmentValues.buttonBorderShape.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

BOOL static ButtonBorderShape.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    switch(*(void *)&v2)
    {
      case 1:
        if (*(void *)&v3 != 1) {
          char v4 = 0;
        }
        if ((v4 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 2:
        if (*(void *)&v3 != 2) {
          char v4 = 0;
        }
        if ((v4 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      case 3:
        if (*(void *)&v3 <= 2uLL) {
          char v4 = 0;
        }
        if ((v4 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
      default:
        if (v3 != 0.0) {
          char v4 = 0;
        }
        if ((v4 & 1) == 0) {
          return 0;
        }
        BOOL result = 1;
        break;
    }
  }
  else
  {
    if (v2 != v3) {
      char v4 = 1;
    }
    return (v4 & 1) == 0;
  }
  return result;
}

uint64_t EnvironmentValues._buttonBorderShape.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_187E5ABAC()
{
  return EnvironmentValues._buttonBorderShape.setter();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ButtonBorderShape.Guts(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    switch(*(void *)&v2)
    {
      case 1:
        BOOL v4 = *(void *)&v3 == 1;
        goto LABEL_13;
      case 2:
        BOOL v4 = *(void *)&v3 == 2;
        goto LABEL_13;
      case 3:
        if (*(void *)&v3 > 2uLL) {
          int v6 = *(unsigned __int8 *)(a2 + 8);
        }
        else {
          int v6 = 0;
        }
        if (v6 != 1) {
          return 0;
        }
        goto LABEL_17;
      default:
        BOOL v4 = *(void *)&v3 == 0;
LABEL_13:
        if (v4) {
          char v7 = *(unsigned char *)(a2 + 8);
        }
        else {
          char v7 = 0;
        }
        if ((v7 & 1) == 0) {
          return 0;
        }
LABEL_17:
        BOOL result = 1;
        break;
    }
  }
  else
  {
    return (*(unsigned char *)(a2 + 8) & 1) == 0 && v2 == *(double *)a2;
  }
  return result;
}

void static ButtonBorderShape.automatic.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

void static ButtonBorderShape.capsule.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 1;
}

void static ButtonBorderShape.roundedRectangle.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 2;
  *(unsigned char *)(a1 + 8) = 1;
}

void static ButtonBorderShape.circle.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 3;
  *(unsigned char *)(a1 + 8) = 1;
}

void ButtonBorderShape.path(in:)(uint64_t a1@<X8>)
{
  static GeometryProxy.current.getter();
  if (v8)
  {
    Path.init(_:)();
    long long v2 = v5;
    long long v3 = v6;
    char v4 = v7;
  }
  else
  {
    GeometryProxy.environment.getter();
    EnvironmentValues.controlSize.getter();
    swift_release();
    swift_release();
    GeometryProxy.environment.getter();
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
    swift_retain_n();
    if (v9)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    static EdgeInsets.zero.getter();
    ResolvedBorderShape.path(in:)((uint64_t)v10);
    long long v2 = v10[0];
    long long v3 = v10[1];
    char v4 = v11;
  }
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = v4;
}

double protocol witness for Shape.path(in:) in conformance ButtonBorderShape@<D0>(uint64_t a1@<X8>)
{
  ButtonBorderShape.path(in:)((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

void protocol witness for View.body.getter in conformance ButtonBorderShape(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(_WORD *)(a1 + 9) = 256;
}

uint64_t key path getter for EnvironmentValues._buttonBorderShape : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

void (*EnvironmentValues._buttonBorderShape.modify(void *a1))(void **a1)
{
  long long v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues._buttonBorderShape.modify;
}

void EnvironmentValues._buttonBorderShape.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[4];
  char v3 = *((unsigned char *)*a1 + 8);
  (*a1)[2] = **a1;
  v1[24] = v3;
  type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t BorderedButtonStyle.buttonStyleRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return BorderedButtonStyle_Phone.init(tint:isProminent:)(0, *(unsigned char *)(v1 + 8), a1);
}

uint64_t protocol witness for ButtonStyleConvertible.buttonStyleRepresentation.getter in conformance BorderedButtonStyle@<X0>(uint64_t a1@<X8>)
{
  return BorderedButtonStyle_Phone.init(tint:isProminent:)(0, *(unsigned char *)(v1 + 8), a1);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ButtonContainerIsBorderedInput()
{
  lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput();
  PropertyList.subscript.getter();
  return v1;
}

void static BorderedButtonStyle.BorderShape.automatic.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static BorderedButtonStyle.BorderShape.capsule.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static BorderedButtonStyle.BorderShape.roundedRectangle.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void BorderedButtonStyle.init(shape:)(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
}

__n128 protocol witness for View.body.getter in conformance ResolvedBorderShape@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  __n128 result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(_WORD *)(a1 + 56) = 256;
  return result;
}

void ButtonBorderShape.inset(by:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

void ButtonBorderShape._Inset.amount.setter(double a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*ButtonBorderShape._Inset.amount.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double ButtonBorderShape._Inset.path(in:)@<D0>(uint64_t a1@<X8>, double a2@<D0>, CGFloat a3@<D4>)
{
  CGRectInset(*(CGRect *)&a2, a3, a3);
  ButtonBorderShape.path(in:)((uint64_t)v9);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

void ButtonBorderShape._Inset.layoutDirectionBehavior.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void ButtonBorderShape._Inset.animatableData.setter(double a1)
{
  *uint64_t v1 = a1;
}

double (*ButtonBorderShape._Inset.animatableData.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance ScrollTransitionProgress;
}

double ButtonBorderShape._Inset.inset(by:)(double a1, double a2)
{
  return a1 + a2;
}

uint64_t instantiation function for generic protocol witness table for ButtonBorderShape(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ButtonBorderShape(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonBorderShape and conformance ButtonBorderShape, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonBorderShape and conformance ButtonBorderShape);
}

unint64_t lazy protocol witness table accessor for type ButtonBorderShape and conformance ButtonBorderShape()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape and conformance ButtonBorderShape);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ButtonBorderShape()
{
  return lazy protocol witness table accessor for type _ShapeView<ResolvedBorderShape, ForegroundStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<ButtonBorderShape, ForegroundStyle> and conformance _ShapeView<A, B>, &lazy cache variable for type metadata for _ShapeView<ButtonBorderShape, ForegroundStyle>, (void (*)(void))lazy protocol witness table accessor for type ButtonBorderShape and conformance ButtonBorderShape);
}

uint64_t lazy protocol witness table accessor for type _ShapeView<ResolvedBorderShape, ForegroundStyle> and conformance _ShapeView<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ShapeView<ButtonBorderShape, ForegroundStyle>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for ButtonStyleConvertible.ButtonStyleRepresentation : ButtonStyle in BorderedButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset;
  if (!lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset);
  }
  return result;
}

double protocol witness for InsettableShape.inset(by:) in conformance ButtonBorderShape._Inset@<D0>(double *a1@<X8>, double a2@<D0>)
{
  double result = *v2 + a2;
  *a1 = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for ButtonBorderShape._Inset(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset();
  *(void *)(a1 + 8) = result;
  return result;
}

double protocol witness for Shape.path(in:) in conformance ButtonBorderShape._Inset@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  CGRectInset(*(CGRect *)&a2, *v5, *v5);
  ButtonBorderShape.path(in:)((uint64_t)v9);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ButtonBorderShape._Inset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for ButtonBorderShape(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset);
}

uint64_t associated type witness table accessor for View.Body : View in ButtonBorderShape._Inset()
{
  return lazy protocol witness table accessor for type _ShapeView<ResolvedBorderShape, ForegroundStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<ButtonBorderShape._Inset, ForegroundStyle> and conformance _ShapeView<A, B>, &lazy cache variable for type metadata for _ShapeView<ButtonBorderShape._Inset, ForegroundStyle>, (void (*)(void))lazy protocol witness table accessor for type ButtonBorderShape._Inset and conformance ButtonBorderShape._Inset);
}

double protocol witness for View.body.getter in conformance ButtonBorderShape._Inset@<D0>(uint64_t a1@<X8>)
{
  double result = *v1;
  *(double *)a1 = *v1;
  *(_WORD *)(a1 + 8) = 256;
  return result;
}

uint64_t associated type witness table accessor for InsettableShape.InsetShape : InsettableShape in ButtonBorderShape()
{
  return swift_getOpaqueTypeConformance2();
}

void protocol witness for InsettableShape.inset(by:) in conformance ButtonBorderShape(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

unint64_t instantiation function for generic protocol witness table for ButtonBorderShape(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ButtonBorderShape and conformance ButtonBorderShape();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_187E5B9F8()
{
  return EnvironmentValues._buttonBorderShape.setter();
}

double sub_187E5BA38@<D0>(double *a1@<X0>, void *a2@<X8>)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

double sub_187E5BA44(double *a1, void *a2)
{
  double result = *a1;
  *a2 = *(void *)a1;
  return result;
}

ValueMetadata *type metadata accessor for BorderedButtonStyle.BorderShape()
{
  return &type metadata for BorderedButtonStyle.BorderShape;
}

ValueMetadata *type metadata accessor for ButtonBorderShape._Inset()
{
  return &type metadata for ButtonBorderShape._Inset;
}

uint64_t sub_187E5BA70()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ButtonBorderShape>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ButtonBorderShape>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ButtonBorderShape>);
    }
  }
}

ValueMetadata *type metadata accessor for ButtonBorderShapeKey()
{
  return &type metadata for ButtonBorderShapeKey;
}

uint64_t getEnumTagSinglePayload for ResolvedBorderShape(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && a1[56]) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 5;
  int v5 = v3 - 5;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedBorderShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(unsigned char *)double result = a2 + 4;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedBorderShape()
{
  return lazy protocol witness table accessor for type _ShapeView<ResolvedBorderShape, ForegroundStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<ResolvedBorderShape, ForegroundStyle> and conformance _ShapeView<A, B>, &lazy cache variable for type metadata for _ShapeView<ResolvedBorderShape, ForegroundStyle>, (void (*)(void))lazy protocol witness table accessor for type ResolvedBorderShape and conformance ResolvedBorderShape);
}

void type metadata accessor for _ShapeView<ButtonBorderShape, ForegroundStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _ShapeView();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void closure #1 in UIHostingController.updateWindowSceneSizeRestrictions()(void *a1@<X8>)
{
  uint64_t v2 = (void *)specialized UIHostingController.host.getter();
  type metadata accessor for _UIHostingView();
  id v3 = v2;
  swift_getWitnessTable();
  ViewRendererHost.sizeThatFits(_:)();
  uint64_t v5 = v4;
  uint64_t v7 = v6;

  *a1 = v5;
  a1[1] = v7;
}

void closure #2 in UIHostingController.updateWindowSceneSizeRestrictions()(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (a1)
  {
    objc_msgSend((id)specialized UIHostingController.host.getter(), sel_sizeThatFits_, 0.0, 0.0);
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v9;
    *(unsigned char *)(a2 + 16) = 0;
  }
  if (a4)
  {
    id v10 = (id)specialized UIHostingController.host.getter();
    static _ProposedSize.infinity.getter();
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    ViewRendererHost.sizeThatFits(_:)();
    uint64_t v12 = v11;
    uint64_t v14 = v13;

    *(void *)a5 = v12;
    *(void *)(a5 + 8) = v14;
    *(unsigned char *)(a5 + 16) = 0;
  }
}

uint64_t UIHostingController._preferredStatusBarUpdateAnimation.getter()
{
  return 1;
}

void partial apply for closure #2 in UIHostingController.updateWindowSceneSizeRestrictions()()
{
  closure #2 in UIHostingController.updateWindowSceneSizeRestrictions()(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48));
}

void partial apply for closure #1 in UIHostingController.updateWindowSceneSizeRestrictions()(void *a1@<X8>)
{
}

uint64_t sub_187E5C05C()
{
  return swift_deallocObject();
}

Swift::Bool __swiftcall AccessibilityAttachmentModifier.willCreateNode(for:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3)
  {
    uint64_t v4 = *(uint64_t (**)(void *))(*(void *)v3 + 80);
    swift_retain();
    char v5 = v4(a1._rawValue);
    swift_release();
    return v5 & 1;
  }
  if ((unint64_t)a1._rawValue >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_5;
    }
LABEL_7:
    swift_beginAccess();
    char v7 = AccessibilityAttachment.isEmpty.getter() ^ 1;
    return v7 & 1;
  }
  if (!*(void *)(((unint64_t)a1._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_7;
  }
LABEL_5:
  char v7 = 0;
  return v7 & 1;
}

void AccessibilityAttachmentModifier.initialAttachment(for:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void (*v9)(void *__return_ptr, uint64_t);
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void v17[2];
  uint64_t v18;
  void *v19;

  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(void **)(v6 + 24);
  long long v18 = v7;
  uint64_t v19 = v8;
  if (v5)
  {
    uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v5 + 88);
    id v10 = v8;
    swift_retain_n();
    swift_bridgeObjectRetain();
    v9(v17, a1);
    uint64_t v11 = v17[0];
    uint64_t v12 = (void *)v17[1];
    uint64_t v15 = v17[0];
    AccessibilityProperties.merge(with:)(&v15);
    uint64_t v7 = v18;
    uint64_t v8 = v19;
    uint64_t v15 = v18;
    uint64_t v16 = v19;
    uint64_t v13 = (void *)AccessibilityAttachment.platformElement.getter();

    if (v13 || (v15 = v11, uint64_t v16 = v12, !AccessibilityAttachment.platformElement.getter()))
    {
      swift_bridgeObjectRelease();
      swift_release_n();
    }
    else
    {
      AccessibilityAttachment.platformElement.setter();
      swift_bridgeObjectRelease();
      swift_release_n();

      uint64_t v7 = v18;
      uint64_t v8 = v19;
    }
  }
  else
  {
    uint64_t v14 = v8;
    swift_bridgeObjectRetain();
  }
  *a2 = v7;
  a2[1] = (uint64_t)v8;
}

void AccessibilityAttachmentModifier.updatedAttachment(for:nodes:atIndex:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  uint64_t v9 = *v3;
  uint64_t v8 = v3[1];
  swift_beginAccess();
  uint64_t v10 = *(void *)(v9 + 16);
  uint64_t v11 = *(void **)(v9 + 24);
  uint64_t v22 = v10;
  uint64_t v23 = v11;
  if (v8)
  {
    uint64_t v19 = v8;
    uint64_t v17 = v6;
    LOBYTE(v18) = v7;
    id v12 = v11;
    swift_retain_n();
    swift_bridgeObjectRetain();
    AccessibilityContainerModifier.updatedAttachment(for:nodes:atIndex:)(&v17, a2);
    uint64_t v13 = v20;
    uint64_t v14 = v21;
    uint64_t v17 = v20;
    AccessibilityProperties.merge(with:)(&v17);
    uint64_t v10 = v22;
    uint64_t v11 = v23;
    uint64_t v17 = v22;
    long long v18 = v23;
    uint64_t v15 = (void *)AccessibilityAttachment.platformElement.getter();

    if (v15 || (uint64_t v17 = v13, v18 = v14, !AccessibilityAttachment.platformElement.getter()))
    {
      swift_bridgeObjectRelease();
      swift_release_n();
    }
    else
    {
      AccessibilityAttachment.platformElement.setter();
      swift_bridgeObjectRelease();
      swift_release_n();

      uint64_t v10 = v22;
      uint64_t v11 = v23;
    }
  }
  else
  {
    id v16 = v11;
    swift_bridgeObjectRetain();
  }
  *a3 = v10;
  a3[1] = (uint64_t)v11;
}

uint64_t key path getter for MutableBox.value : MutableBox<AccessibilityAttachment>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 24);
  *a2 = *(void *)(v3 + 16);
  a2[1] = v4;
  id v5 = v4;
  return swift_bridgeObjectRetain();
}

void key path setter for MutableBox.value : MutableBox<AccessibilityAttachment>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  id v5 = *(void **)(v4 + 24);
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = v3;
  id v6 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
}

uint64_t protocol witness for static AccessibilityViewModifier.options.getter in conformance AccessibilityAttachmentModifier()
{
  return 3;
}

BOOL protocol witness for AccessibilityViewModifier.supportsPlaceholders.getter in conformance AccessibilityAttachmentModifier()
{
  return *(void *)(v0 + 8) == 0;
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityAttachmentModifier()
{
}

ValueMetadata *type metadata accessor for CollapsedSplitNavigationStrategy_Phone()
{
  return &type metadata for CollapsedSplitNavigationStrategy_Phone;
}

ValueMetadata *type metadata accessor for SplitColumnNavigationStrategy()
{
  return &type metadata for SplitColumnNavigationStrategy;
}

uint64_t associated type witness table accessor for NavigationStrategy.StackModifier : ViewModifier in SplitColumnNavigationStrategy()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for SplitColumnNavigationStrategy(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SplitColumnNavigationStrategy and conformance SplitColumnNavigationStrategy();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for NavigationStrategy.StackModifier : ViewModifier in CollapsedSplitNavigationStrategy_Phone()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for CollapsedSplitNavigationStrategy_Phone(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CollapsedSplitNavigationStrategy_Phone and conformance CollapsedSplitNavigationStrategy_Phone();
  *(void *)(a1 + 8) = result;
  return result;
}

void *assignWithCopy for CollapsedSplitNavigationStrategy_Phone(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t instantiation function for generic protocol witness table for NavigationStrategy_Phone(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type NavigationStrategy_Phone and conformance NavigationStrategy_Phone();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for NavigationStrategy.StackModifier : ViewModifier in NavigationStrategy_Phone()
{
  return swift_getOpaqueTypeConformance2();
}

double AnimatedValueView.init(_:default:track:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_OWORD *__return_ptr, uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  char v13 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a7 = *(_OWORD *)a1;
  *(unsigned char *)(a7 + 16) = v13;
  uint64_t v14 = (int *)type metadata accessor for AnimatedValueView();
  uint64_t v15 = *(void *)(a6 - 8);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(a7 + v14[11], a2, a6);
  a3(v21, v16);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, a6);
  uint64_t v17 = a7 + v14[12];
  double result = *(double *)v21;
  long long v19 = v21[1];
  *(_OWORD *)uint64_t v17 = v21[0];
  *(_OWORD *)(v17 + 16) = v19;
  *(void *)(v17 + 32) = v22;
  uint64_t v20 = (void *)(a7 + v14[13]);
  *uint64_t v20 = a4;
  v20[1] = a5;
  return result;
}

uint64_t type metadata accessor for AnimatedValueView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static AnimatedValueView._makeView(view:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  unsigned int v6 = *((_DWORD *)a2 + 7);
  int v7 = *((_DWORD *)a2 + 9);
  unsigned int v23 = *((_DWORD *)a2 + 6);
  int v24 = *((_DWORD *)a2 + 8);
  uint64_t v15 = a2[6];
  uint64_t v16 = a2[5];
  int v20 = *((_DWORD *)a2 + 15);
  int v21 = *((_DWORD *)a2 + 14);
  int v13 = *((_DWORD *)a2 + 18);
  int v14 = *((_DWORD *)a2 + 16);
  int v17 = *((_DWORD *)a2 + 19);
  int v18 = *((_DWORD *)a2 + 20);
  int v19 = *((_DWORD *)a2 + 17);
  type metadata accessor for AnimatedValueView();
  type metadata accessor for _GraphValue();
  int v12 = _GraphValue.value.getter();
  _GraphValue.value.getter();
  closure #1 in static AnimatedValueView._makeView(view:inputs:)(1);
  int v34 = v24;
  int v35 = v7;
  uint64_t v36 = v16;
  uint64_t v37 = v15;
  int v38 = v21;
  int v39 = v20;
  int v40 = v14;
  int v41 = v19;
  int v42 = v13;
  int v43 = v17;
  int v44 = v18;
  LODWORD(v29) = v12;
  HIDWORD(v29) = AGGraphCreateOffsetAttribute2();
  int v30 = _ViewInputs.viewPhase.getter();
  int v31 = _ViewInputs.transaction.getter();
  uint64_t v32 = _ViewInputs.time.getter();
  unint64_t v33 = 0xC000000000000000;
  uint64_t v26 = a4;
  uint64_t v27 = type metadata accessor for AnimatorAttribute();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v25, v27, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  swift_release();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  _GraphValue.init(_:)();
  uint64_t v29 = v22;
  int v30 = v4;
  uint64_t v32 = v5;
  unint64_t v33 = __PAIR64__(v6, v23);
  int v34 = v24;
  int v35 = v7;
  uint64_t v36 = v16;
  uint64_t v37 = v15;
  int v38 = v21;
  int v39 = v20;
  int v40 = v14;
  int v41 = v19;
  int v42 = v13;
  int v43 = v17;
  int v44 = v18;
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t closure #1 in static AnimatedValueView._makeView(view:inputs:)(uint64_t a1)
{
  void v5[2] = type metadata accessor for AnimatedValueView();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, (uint64_t)&type metadata for AnimatedValuePlaybackConfiguration, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5[5];
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance AnimatedValueView<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return static AnimatedValueView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance AnimatedValueView<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AnimatedValueView<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance AnimatedValueView<A, B>()
{
}

uint64_t AnimatorAttribute.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v57 = *(void *)(*(void *)(a1 + 24) - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v56 = (char *)v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = *(void *)(*(void *)(v4 + 16) - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v50 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = v6;
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v9 = v8;
  uint64_t v58 = v10;
  uint64_t v54 = v7;
  uint64_t v11 = type metadata accessor for AnimatedValueView();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int v14 = (char *)v49 - v13;
  v49[3] = *(_DWORD *)v1;
  int v15 = *((_DWORD *)v1 + 5);
  v49[2] = *((_DWORD *)v1 + 4);
  unint64_t v18 = *((void *)v1 + 3);
  uint64_t v16 = (unint64_t *)v1 + 3;
  unint64_t v17 = v18;
  int v19 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v19 != v15)
  {
    swift_release();
    *((_DWORD *)v2 + 5) = v19;
    unint64_t v17 = 0xC000000000000000;
    *((void *)v2 + 3) = 0xC000000000000000;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v21 = *(void *)Value;
  uint64_t v22 = *(void *)(Value + 8);
  int v23 = *(unsigned __int8 *)(Value + 16);
  unsigned __int8 v59 = v16;
  uint64_t v53 = v21;
  uint64_t v52 = v22;
  int v51 = v23;
  if ((v24 & 1) != 0 || (AnimatedValueState.isAnimating.getter(v17) & 1) != 0 || v17 == 0xC000000000000000)
  {
    outlined copy of AnimatedValuePlaybackConfiguration.Mode(v21, v22, v23);
    AGGraphClearUpdate();
    AGGraphGetValue();
    swift_retain();
    uint64_t v16 = v59;
    AGGraphSetUpdate();
    v62[0] = v21;
    v62[1] = v22;
    char v63 = v23;
    uint64_t v61 = *(void *)AGGraphGetValue();
    uint64_t v25 = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v25, v11);
    uint64_t v26 = &v14[*(int *)(v11 + 48)];
    uint64_t v27 = type metadata accessor for AnimatedValueTrack();
    uint64_t v28 = *(void *)(v27 - 8);
    (*(void (**)(long long *, char *, uint64_t))(v28 + 16))(&v64, v26, v27);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    type metadata accessor for AnimatedValueState();
    AnimatedValueState.update(configuration:time:track:transaction:)((uint64_t)v62, &v61, (uint64_t)&v64);
    swift_release();
    (*(void (**)(long long *, uint64_t))(v28 + 8))(&v64, v27);
  }
  else
  {
    outlined copy of AnimatedValuePlaybackConfiguration.Mode(v21, v22, v23);
  }
  if (AnimatedValueState.isAnimating.getter(*v16))
  {
    type metadata accessor for ViewGraph();
    uint64_t v29 = MEMORY[0x18C114EE0]();
    double v30 = *(double *)AGGraphGetValue() + 0.00833333333;
    swift_beginAccess();
    double v31 = *(double *)(v29 + 376);
    if (v30 < v31) {
      double v31 = v30;
    }
    *(double *)(v29 + 376) = v31;
    swift_release();
  }
  uint64_t v32 = AGGraphGetValue();
  unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v33(v14, v32, v11);
  uint64_t v34 = (uint64_t)v50;
  (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v50, &v14[*(int *)(v11 + 44)], v9);
  int v35 = *(void (**)(char *, uint64_t))(v12 + 8);
  v35(v14, v11);
  uint64_t v61 = *(void *)AGGraphGetValue();
  uint64_t v36 = AGGraphGetValue();
  v33(v14, v36, v11);
  uint64_t v37 = &v14[*(int *)(v11 + 48)];
  uint64_t v38 = type metadata accessor for AnimatedValueTrack();
  uint64_t v39 = *(void *)(v38 - 8);
  (*(void (**)(long long *, char *, uint64_t))(v39 + 16))(&v64, v37, v38);
  v35(v14, v11);
  type metadata accessor for AnimatedValueState();
  AnimatedValueState.update(value:mix:at:currentTrack:)(v34, (double *)&v61, (uint64_t)&v64, 1.0);
  uint64_t v40 = (*(uint64_t (**)(long long *, uint64_t))(v39 + 8))(&v64, v38);
  uint64_t v41 = *((void *)v2 + 3);
  long long v64 = *v2;
  uint64_t v65 = *((void *)v2 + 2);
  uint64_t v66 = v41;
  MEMORY[0x1F4188790](v40);
  uint64_t v42 = v58;
  *(void *)&v49[-12] = v9;
  *(void *)&v49[-10] = v42;
  *(void *)&v49[-8] = v54;
  *(void *)&v49[-6] = v2;
  *(void *)&v49[-4] = v34;
  swift_retain();
  uint64_t v43 = v55;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v45 = (uint64_t)v56;
  StatefulRule.withObservation<A>(do:)();
  uint64_t v46 = swift_release();
  MEMORY[0x1F4188790](v46);
  *(void *)&v49[-4] = v43;
  *(void *)&v49[-2] = WitnessTable;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v45, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v49[-8], v42, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v47);
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v53, v52, v51);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v45, v42);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8))(v34, v9);
}

uint64_t AnimatedValueState.isAnimating.getter(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  uint64_t result = 0;
  switch(v2)
  {
    case 1uLL:
      uint64_t v4 = *(void *)((a1 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      type metadata accessor for AnimatedValueState.EventDrivenState();
      uint64_t result = v4 >= 0;
      break;
    case 2uLL:
      uint64_t result = 1;
      break;
    case 3uLL:
      return result;
    default:
      uint64_t result = *(void *)(a1 + 24) >> 63;
      break;
  }
  return result;
}

uint64_t AnimatedValueState.update(configuration:time:track:transaction:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  double v6 = *(double *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  unsigned int v7 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v8 = *a2;
  switch(v7 >> 6)
  {
    case 1u:
      double v21 = *(double *)a1;
      type metadata accessor for AnimatedValueTrack();
      AnimatedValueTrack.duration.getter();
      double v11 = v22 * v21;
      uint64_t v23 = *v4;
      if (!((unint64_t)*v4 >> 62))
      {
        uint64_t v24 = *(void *)(v23 + 24);
        *(void *)&long long v30 = *(void *)(v23 + 16);
        *((void *)&v30 + 1) = v24;
        uint64_t v26 = v8;
        outlined copy of AnimatedValueState<A>.PausedState<A>(v30, v24);
        goto LABEL_10;
      }
      swift_release();
      uint64_t result = swift_allocObject();
      *(double *)(result + 16) = v11;
      goto LABEL_16;
    case 2u:
      if ((unint64_t)*v4 >> 62 == 1)
      {
        uint64_t v13 = *(void *)((*v4 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        *(void *)&long long v30 = *(void *)((*v4 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        *((void *)&v30 + 1) = v13;
        uint64_t v29 = v8;
        double v28 = v6;
        uint64_t v26 = v5;
        char v27 = v7 & 1;
        type metadata accessor for AnimatedValueState.EventDrivenState();
        swift_retain();
        swift_retain();
        AnimatedValueState.EventDrivenState.update(at:value:track:behavior:)(&v29, (uint64_t *)&v28, a3, &v26);
        uint64_t v14 = swift_allocObject();
        uint64_t v15 = *((void *)&v30 + 1);
        *(void *)(v14 + 16) = v30;
        *(void *)(v14 + 24) = v15;
        uint64_t result = swift_release();
        unint64_t v17 = v14 | 0x4000000000000000;
      }
      else
      {
        swift_retain();
        swift_release();
        uint64_t result = swift_allocObject();
        *(double *)(result + 16) = v6;
        *(void *)(result + 24) = 0x8000000000000000;
        unint64_t v17 = result | 0x4000000000000000;
      }
      goto LABEL_13;
    case 3u:
      if ((unint64_t)*v4 >> 62 == 2)
      {
        uint64_t v18 = *(void *)((*v4 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        char v19 = *(unsigned char *)((*v4 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        uint64_t v20 = swift_allocObject();
        *(void *)(v20 + 16) = v18;
        *(unsigned char *)(v20 + 24) = v19;
        uint64_t result = swift_release();
        unint64_t v17 = v20 | 0x8000000000000000;
      }
      else
      {
        swift_release();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = v8;
        *(unsigned char *)(result + 24) = LOBYTE(v6) & 1;
        unint64_t v17 = result | 0x8000000000000000;
      }
LABEL_13:
      *uint64_t v4 = v17;
      break;
    default:
      uint64_t v10 = *v4;
      if ((unint64_t)*v4 >> 62)
      {
        swift_release();
        uint64_t result = swift_allocObject();
        *(double *)(result + 16) = v6;
LABEL_16:
        *(void *)(result + 24) = 0;
        *uint64_t v4 = result;
      }
      else
      {
        double v11 = *(double *)a1;
        uint64_t v12 = *(void *)(v10 + 24);
        *(void *)&long long v30 = *(void *)(v10 + 16);
        *((void *)&v30 + 1) = v12;
        uint64_t v26 = v8;
        outlined copy of AnimatedValueState<A>.PausedState<A>(v30, v12);
LABEL_10:
        type metadata accessor for AnimatedValueState.PausedState();
        specialized AnimatedValueState.PausedState.update(at:pauseTime:track:transaction:)(v11);
        uint64_t v25 = swift_allocObject();
        *(_OWORD *)(v25 + 16) = v30;
        uint64_t result = swift_release();
        *uint64_t v4 = v25;
      }
      break;
  }
  return result;
}

uint64_t AnimatedValueState.update(value:mix:at:currentTrack:)(uint64_t a1, double *a2, uint64_t a3, double a4)
{
  double v5 = *a2;
  uint64_t v6 = *v4;
  switch((unint64_t)*v4 >> 62)
  {
    case 1uLL:
      unint64_t v13 = *(void *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v14 = type metadata accessor for AnimatedValueState.EventDrivenState();
      *(double *)&long long v23 = v5;
      return AnimatedValueState.EventDrivenState.Phase.update(value:mix:at:currentTrack:)(a1, (double *)&v23, a3, v13, *(void *)(v14 + 16), a4);
    case 2uLL:
      int v15 = *(unsigned __int8 *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      double v16 = v5 - *(double *)((v6 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      type metadata accessor for AnimatedValueTrack();
      swift_retain();
      AnimatedValueTrack.duration.getter();
      double v18 = floor(v16 / v17);
      if ((~*(void *)&v18 & 0x7FF0000000000000) == 0)
      {
        __break(1u);
        goto LABEL_15;
      }
      if (v18 <= -9.22337204e18)
      {
LABEL_15:
        __break(1u);
        goto LABEL_16;
      }
      if (v18 >= 9.22337204e18)
      {
LABEL_16:
        __break(1u);
        JUMPOUT(0x187E5DACCLL);
      }
      uint64_t v19 = (uint64_t)v18;
      AnimatedValueTrack.duration.getter();
      double v21 = fmod(v16, v20);
      if ((v15 & v19) == 1)
      {
        AnimatedValueTrack.duration.getter();
        double v21 = v22 - v21;
      }
      AnimatedValueTrack.update(value:mix:at:)(a1, 1.0, v21);
      return swift_release();
    case 3uLL:
      type metadata accessor for AnimatedValueTrack();
      return AnimatedValueTrack.update(value:mix:at:)(a1, a4, 0.0);
    default:
      uint64_t v10 = *(void *)(v6 + 24);
      *(void *)&long long v23 = *(void *)(v6 + 16);
      *((void *)&v23 + 1) = v10;
      outlined copy of AnimatedValueState<A>.PausedState<A>(v23, v10);
      type metadata accessor for AnimatedValueState.PausedState();
      AnimatedValueState.PausedState.update(value:mix:at:currentTrack:)(a1, a4);
      uint64_t v11 = swift_allocObject();
      *(_OWORD *)(v11 + 16) = v23;
      uint64_t result = swift_release();
      *uint64_t v4 = v11;
      return result;
  }
}

uint64_t closure #1 in closure #2 in AnimatorAttribute.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void (**)(char *))(a1 + *(int *)(type metadata accessor for AnimatedValueView() + 52));
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, a3);
  v9(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a3);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AnimatorAttribute<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t AnimatedValueState.EventDrivenState.update(at:value:track:behavior:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  double v5 = v4;
  uint64_t v7 = *a1;
  uint64_t v8 = *a2;
  uint64_t v9 = *a4;
  char v10 = *((unsigned char *)a4 + 8);
  uint64_t v18 = *a1;
  uint64_t v11 = v4 + 1;
  type metadata accessor for AnimatedValueState.EventDrivenState.Phase();
  AnimatedValueState.EventDrivenState.Phase.update(at:)((double *)&v18);
  uint64_t v18 = v8;
  if ((static AnyEquatable.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v12 = *v11;
    if (*v11 < 0)
    {
      uint64_t v15 = swift_allocObject();
      uint64_t v16 = type metadata accessor for AnimatedValueTrack();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v15 + 16, a3, v16);
      *(void *)(v15 + 56) = v7;
      goto LABEL_6;
    }
    if ((v10 & 1) == 0)
    {
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v12;
      uint64_t v14 = type metadata accessor for AnimatedValueTrack();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13 + 24, a3, v14);
      *(void *)(v13 + 64) = v7;
      *(void *)(v13 + 72) = v9;
      uint64_t v15 = v13 | 0x4000000000000000;
LABEL_6:
      *uint64_t v11 = v15;
    }
  }
  swift_retain();
  uint64_t result = swift_release();
  *double v5 = v8;
  return result;
}

uint64_t AnimatedValueState.PausedState.update(value:mix:at:currentTrack:)(uint64_t a1, double a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = v2[1];
  if (v6 < 0)
  {
    swift_retain();
    char v8 = AnimatorState.update(_:at:environment:)();
    type metadata accessor for AnimatedValueTrack();
    AnimatedValueTrack.update(value:mix:at:)(a1, a2, *(double *)&v5);
    uint64_t result = outlined consume of AnimatedValueState<A>.PausedState<A>(v5, v6);
    if (v8)
    {
      uint64_t result = outlined consume of AnimatedValueState<A>.PausedState<A>(v5, v6);
      *unint64_t v2 = v5;
      v2[1] = 0;
    }
  }
  else
  {
    type metadata accessor for AnimatedValueTrack();
    return AnimatedValueTrack.update(value:mix:at:)(a1, a2, *(double *)&v5);
  }
  return result;
}

uint64_t AnimatedValueState.EventDrivenState.Phase.update(value:mix:at:currentTrack:)(uint64_t a1, double *a2, uint64_t a3, unint64_t a4, uint64_t a5, double a6)
{
  double v9 = *a2;
  if (a4 >> 62)
  {
    if (a4 >> 62 == 1)
    {
      uint64_t v11 = *(void *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v12 = (a4 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      double v13 = *(double *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x40);
      double v14 = *(double *)((a4 & 0x3FFFFFFFFFFFFFFFLL) + 0x48);
      uint64_t v15 = type metadata accessor for AnimatedValueTrack();
      uint64_t v16 = *(void *)(v15 - 8);
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v16 + 16))(v25, v12, v15);
      double v17 = v9 - v13;
      swift_retain();
      static UnitCurve.easeInOut.getter();
      double v18 = UnitCurve.value(at:)(v17 / v14);
      *(double *)&long long v24 = v9;
      AnimatedValueState.EventDrivenState.Phase.update(value:mix:at:currentTrack:)(a1, &v24, a3, v11, a5, a6);
      AnimatedValueTrack.update(value:mix:at:)(a1, v18 * a6, v17);
      swift_release();
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v16 + 8))(v25, v15);
    }
    else
    {
      type metadata accessor for AnimatedValueTrack();
      return AnimatedValueTrack.update(value:mix:at:)(a1, a6, 0.0);
    }
  }
  else
  {
    unint64_t v20 = a4 + 16;
    double v21 = *(double *)(a4 + 56);
    uint64_t v22 = type metadata accessor for AnimatedValueTrack();
    uint64_t v23 = *(void *)(v22 - 8);
    (*(void (**)(unsigned char *, unint64_t, uint64_t))(v23 + 16))(v25, v20, v22);
    AnimatedValueTrack.update(value:mix:at:)(a1, a6, v9 - v21);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v23 + 8))(v25, v22);
  }
}

double *AnimatedValueState.EventDrivenState.Phase.update(at:)(double *result)
{
  double v2 = *result;
  uint64_t v3 = *v1;
  unint64_t v4 = (unint64_t)*v1 >> 62;
  if (v4)
  {
    if (v4 == 1)
    {
      uint64_t v5 = (v3 & 0x3FFFFFFFFFFFFFFFLL) + 24;
      double v6 = *(double *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x40);
      double v7 = *(double *)((v3 & 0x3FFFFFFFFFFFFFFFLL) + 0x48);
      uint64_t v8 = type metadata accessor for AnimatedValueTrack();
      uint64_t v9 = *(void *)(v8 - 8);
      (*(void (**)(_OWORD *, uint64_t, uint64_t))(v9 + 16))(v18, v5, v8);
      if (v7 >= v2 - v6)
      {
        return (double *)(*(uint64_t (**)(_OWORD *, uint64_t))(v9 + 8))(v18, v8);
      }
      else
      {
        uint64_t v10 = swift_allocObject();
        long long v11 = v18[1];
        *(_OWORD *)(v10 + 16) = v18[0];
        *(_OWORD *)(v10 + 32) = v11;
        *(void *)(v10 + 48) = v19;
        *(double *)(v10 + 56) = v6;
        uint64_t result = (double *)swift_release();
        *uint64_t v1 = v10;
      }
    }
  }
  else
  {
    double v12 = *(double *)(v3 + 56);
    uint64_t v13 = type metadata accessor for AnimatedValueTrack();
    uint64_t v14 = *(void *)(v13 - 8);
    (*(void (**)(_OWORD *, uint64_t, uint64_t))(v14 + 16))(v18, v3 + 16, v13);
    double v15 = v2 - v12;
    swift_retain();
    AnimatedValueTrack.duration.getter();
    double v17 = v16;
    (*(void (**)(_OWORD *, uint64_t))(v14 + 8))(v18, v13);
    if (v17 >= v15)
    {
      return (double *)swift_release();
    }
    else
    {
      swift_release();
      uint64_t result = (double *)swift_release();
      *uint64_t v1 = 0x8000000000000000;
    }
  }
  return result;
}

uint64_t View.animatedValue<A, B>(_:default:track:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v53 = a6;
  uint64_t v52 = a5;
  uint64_t v51 = a4;
  uint64_t v50 = a3;
  uint64_t v48 = a2;
  uint64_t v57 = a9;
  uint64_t v58 = a11;
  uint64_t v66 = a8;
  uint64_t v67 = a7;
  uint64_t v68 = a10;
  uint64_t v69 = a11;
  uint64_t v70 = a12;
  uint64_t v15 = type metadata accessor for AnimatedValueModifier();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v55 = v15;
  uint64_t v56 = v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v54 = (uint64_t *)((char *)&v44 - v17);
  uint64_t v18 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](v19);
  double v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v21;
  uint64_t v49 = type metadata accessor for AnimatedValueView();
  uint64_t v47 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v46 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v44 - v25;
  uint64_t v28 = *(void *)a1;
  uint64_t v27 = *(void *)(a1 + 8);
  LOBYTE(a1) = *(unsigned char *)(a1 + 16);
  uint64_t v66 = v28;
  uint64_t v67 = v27;
  LOBYTE(v68) = a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, v48, a8, v24);
  uint64_t v29 = a7;
  uint64_t v44 = a7;
  uint64_t v59 = a7;
  uint64_t v60 = a8;
  uint64_t v30 = v58;
  uint64_t v61 = a10;
  uint64_t v62 = v58;
  uint64_t v63 = a12;
  uint64_t v64 = v50;
  uint64_t v65 = v51;
  double v31 = (void *)swift_allocObject();
  v31[2] = v29;
  v31[3] = a8;
  void v31[4] = a10;
  v31[5] = v30;
  uint64_t v32 = v52;
  v31[6] = a12;
  v31[7] = v32;
  v31[8] = v53;
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(v28, v27, a1);
  swift_retain();
  double v33 = AnimatedValueView.init(_:default:track:content:)((uint64_t)&v66, (uint64_t)v45, (void (*)(_OWORD *__return_ptr, uint64_t))partial apply for closure #1 in View.animatedValue<A, B>(_:default:track:content:), (uint64_t)partial apply for closure #2 in View.animatedValue<A, B>(_:default:track:content:), (uint64_t)v31, a8, (uint64_t)v26);
  uint64_t v34 = v47;
  int v35 = v46;
  uint64_t v36 = v49;
  (*(void (**)(char *, char *, uint64_t, double))(v47 + 16))(v46, v26, v49, v33);
  uint64_t v37 = v54;
  uint64_t v38 = (uint64_t)v35;
  uint64_t v39 = v44;
  uint64_t v40 = v58;
  AnimatedValueModifier.init(parent:keyframeView:)(v44, v38, v54);
  uint64_t v41 = v39;
  uint64_t v42 = v55;
  MEMORY[0x18C113660](v37, v41, v55, v40);
  (*(void (**)(void *, uint64_t))(v56 + 8))(v37, v42);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v26, v36);
}

uint64_t closure #1 in View.animatedValue<A, B>(_:default:track:content:)(void (*a1)(void *__return_ptr), uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1(v8);
  static AnimatedValueTrackBuilder.buildExpression(_:)(v9, v8, a4);
  uint64_t v5 = type metadata accessor for AnimatedValueTrack();
  double v6 = *(void (**)(void *, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v8, v5);
  static AnimatedValueTrackBuilder.buildPartialBlock(first:)(v9, a4);
  return ((uint64_t (*)(void *, uint64_t))v6)(v9, v5);
}

uint64_t closure #2 in View.animatedValue<A, B>(_:default:track:content:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  long long v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v18 - v13;
  uint64_t v15 = PlaceholderContentView.init()();
  a2(v15, a1);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, a6);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a6);
}

uint64_t AnimatedValueModifier.init(parent:keyframeView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  unint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for AnimatedValueModifier() + 60);
  uint64_t v5 = type metadata accessor for AnimatedValueView();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t static AnimatedValueModifier._makeView(modifier:inputs:body:)()
{
  return swift_release();
}

uint64_t closure #1 in static AnimatedValueModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  uint64_t v7 = type metadata accessor for AnimatedValueModifier();
  uint64_t v8 = a1 + *(int *)(v7 + 60);
  _OWORD v12[2] = v7;
  uint64_t v13 = type metadata accessor for AnimatedValueView();
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, v13, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v14;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AnimatedValueModifier<A, B, C>()
{
  return static AnimatedValueModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AnimatedValueModifier<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t VisualEffect.animatedValue<A, B>(progress:default:track:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, char *)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, double a8@<D0>)
{
  void (*v21)(void *__return_ptr, double);
  uint64_t v22;
  double v23;
  uint64_t v24;
  void v26[2];
  void (*v27)(uint64_t, char *);
  uint64_t v28;
  void v29[5];

  uint64_t v28 = a4;
  v26[1] = a3;
  uint64_t v27 = a2;
  v26[0] = a7;
  uint64_t v12 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21(v29, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, a1, a5);
  uint64_t v22 = type metadata accessor for AnimatedValueTrack();
  AnimatedValueTrack.duration.getter();
  double v24 = AnimatedValueTrack.update(value:at:)((uint64_t)v20, v23 * a8);
  v27(v24, v20);
  VisualEffect.concat<A>(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a6);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, a5);
  return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v22 - 8) + 8))(v29, v22);
}

uint64_t VisualEffect.animatedValue<A, B>(time:default:track:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t, char *)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, double a8@<D0>)
{
  void (*v21)(void *__return_ptr, double);
  uint64_t v22;
  uint64_t v23;
  void v25[2];
  void (*v26)(uint64_t, char *);
  uint64_t v27;
  void v28[5];

  uint64_t v27 = a4;
  v25[1] = a3;
  uint64_t v26 = a2;
  v25[0] = a7;
  uint64_t v12 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21(v28, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v20, a1, a5);
  uint64_t v22 = type metadata accessor for AnimatedValueTrack();
  uint64_t v23 = AnimatedValueTrack.update(value:at:)((uint64_t)v20, a8);
  v26(v23, v20);
  VisualEffect.concat<A>(_:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a6);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, a5);
  return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v22 - 8) + 8))(v28, v22);
}

uint64_t type metadata accessor for AnimatorAttribute()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnimatedValueModifier()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in View.animatedValue<A, B>(_:default:track:content:)()
{
  return closure #1 in View.animatedValue<A, B>(_:default:track:content:)(*(void (**)(void *__return_ptr))(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_187E5F1F8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in View.animatedValue<A, B>(_:default:track:content:)(uint64_t a1)
{
  return closure #2 in View.animatedValue<A, B>(_:default:track:content:)(a1, *(void (**)(uint64_t, uint64_t))(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

_UNKNOWN **base witness table accessor for View in AnimatedValueView<A, B>()
{
  return &protocol witness table for AnimatedValueView<A, B>;
}

uint64_t type metadata completion function for AnimatedValueView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AnimatedValueView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64) + 7;
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((((v8 + ((v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v11 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
  }
  else
  {
    uint64_t v12 = *(void *)a2;
    uint64_t v13 = *(void *)(a2 + 8);
    char v14 = *(unsigned char *)(a2 + 16);
    outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(void *)a2, v13, v14);
    *(void *)a1 = v12;
    *(void *)(a1 + 8) = v13;
    *(unsigned char *)(a1 + 16) = v14;
    uint64_t v15 = (a2 + v7 + 17) & ~v7;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))((a1 + v7 + 17) & ~v7, v15, v5);
    unint64_t v16 = (v8 + ((a1 + v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = (v8 + v15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = *(void *)(v17 + 24);
    *(void *)(v16 + 24) = v18;
    *(void *)(v16 + 32) = *(void *)(v17 + 32);
    (**(void (***)(unint64_t, unint64_t))(v18 - 8))(v16, v17);
    uint64_t v19 = (void *)((v17 + 47) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = v19[1];
    double v21 = (void *)((v16 + 47) & 0xFFFFFFFFFFFFFFF8);
    *double v21 = *v19;
    v21[1] = v20;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AnimatedValueView(uint64_t a1, uint64_t a2)
{
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  __swift_destroy_boxed_opaque_existential_1((*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);

  return swift_release();
}

uint64_t outlined consume of AnimatedValuePlaybackConfiguration.Mode(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0xC0) == 0x80) {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for AnimatedValueView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(void *)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 17 + a1) & ~v11;
  uint64_t v13 = (v11 + 17 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 48) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)(v16 + 24);
  *(void *)(v15 + 24) = v17;
  *(void *)(v15 + 32) = *(void *)(v16 + 32);
  (**(void (***)(unint64_t, unint64_t))(v17 - 8))(v15, v16);
  uint64_t v18 = (void *)((v16 + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = v18[1];
  uint64_t v20 = (void *)((v15 + 47) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v18;
  v20[1] = v19;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnimatedValueView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(void *)a2, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  char v11 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v8;
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v9, v10, v11);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 24;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 17 + a1) & ~v14;
  uint64_t v16 = (v14 + 17 + a2) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 40) + 7;
  uint64_t v18 = (uint64_t *)((v17 + v15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (uint64_t *)((v17 + v16) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v18, v19);
  uint64_t v20 = (void *)(((unint64_t)v18 + 47) & 0xFFFFFFFFFFFFFFF8);
  double v21 = (void *)(((unint64_t)v19 + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AnimatedValueView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 17 + a1) & ~v6;
  uint64_t v8 = (v6 + 17 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v11;
  long long v13 = *(_OWORD *)(v11 + 16);
  *(void *)(v10 + 32) = *(void *)(v11 + 32);
  *(_OWORD *)unint64_t v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  *(_OWORD *)((v10 + 47) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v11 + 47) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AnimatedValueView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v9 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v7, v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 17 + a1) & ~v12;
  uint64_t v14 = (v12 + 17 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 24) + 7;
  unint64_t v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v16);
  long long v18 = *(_OWORD *)v17;
  long long v19 = *(_OWORD *)(v17 + 16);
  *(void *)(v16 + 32) = *(void *)(v17 + 32);
  *(_OWORD *)unint64_t v16 = v18;
  *(_OWORD *)(v16 + 16) = v19;
  *(_OWORD *)((v16 + 47) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v17 + 47) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatedValueView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((((v8 + ((v6 + 17) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187E5FAE4);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_22:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = ((unint64_t)a1 + v6 + 17) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)(((v8 + v18) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

double storeEnumTagSinglePayload for AnimatedValueView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  unint64_t v11 = ((((v10 + ((v9 + 17) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v15 = 0;
    int v16 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v20 = (unint64_t)&a1[v9 + 17] & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v22 = (v10 + v20) & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                double result = 0.0;
                *(_OWORD *)(v22 + 8) = 0u;
                *(_OWORD *)(v22 + 24) = 0u;
                *(void *)unint64_t v22 = a2 ^ 0x80000000;
              }
              else
              {
                *(void *)(v22 + 24) = a2 - 1;
              }
            }
            else
            {
              double v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(v20);
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v12 = a3 - v8;
    if (((((v10 + ((v9 + 17) & ~v9)) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    int v16 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v10 + ((v9 + 17) & ~v9)) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v17 = v16;
  }
  else {
    int v17 = 1;
  }
  if (((((v10 + ((v9 + 17) & ~v9)) & 0xFFFFFFF8) + 47) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v18 = ~v8 + a2;
    bzero(a1, ((((v10 + ((v9 + 17) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187E5FD10);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_187E5FD38()
{
  return swift_getWitnessTable();
}

uint64_t sub_187E5FDCC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for AnimatedValueModifier()
{
  uint64_t result = type metadata accessor for AnimatedValueView();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatedValueModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  unint64_t v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v6 + 17;
  uint64_t v10 = *(void *)(v5 + 64) + 7;
  int v11 = v6 & 0x100000;
  uint64_t v12 = *a2;
  *a1 = *a2;
  if (v7 > 7
    || v11 != 0
    || (v8 & (v7 + 8)) + ((((v10 + ((v7 + 17) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    a1 = (uint64_t *)(v12 + (v8 & (v7 + 16)));
  }
  else
  {
    uint64_t v15 = ~v7;
    uint64_t v16 = v8 & ((unint64_t)a1 + 15);
    uint64_t v17 = v8 & ((unint64_t)a2 + 15);
    uint64_t v18 = *(void *)v17;
    uint64_t v19 = *(void *)(v17 + 8);
    char v20 = *(unsigned char *)(v17 + 0x10);
    uint64_t v29 = v4;
    outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(void *)v17, v19, v20);
    *(void *)uint64_t v16 = v18;
    *(void *)(v16 + 8) = v19;
    *(unsigned char *)(v16 + 16) = v20;
    uint64_t v21 = (v9 + v17) & v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))((v9 + v16) & v15, v21, v29);
    unint64_t v22 = (v10 + ((v9 + v16) & v15)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = (v10 + v21) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v24 = *(void *)(v23 + 24);
    *(void *)(v22 + 24) = v24;
    *(void *)(v22 + 32) = *(void *)(v23 + 32);
    (**(void (***)(unint64_t, unint64_t))(v24 - 8))(v22, v23);
    uint64_t v25 = (void *)((v23 + 47) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = v25[1];
    uint64_t v27 = (void *)((v22 + 47) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v27 = *v25;
    v27[1] = v26;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for AnimatedValueModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (a1 + (v4 | 7) + 8) & ~(v4 | 7);
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 0x10));
  uint64_t v6 = (v4 + v5 + 17) & ~v4;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v2);
  __swift_destroy_boxed_opaque_existential_1((*(void *)(v3 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);

  return swift_release();
}

void *initializeWithCopy for AnimatedValueModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 | 7) + 8;
  uint64_t v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  uint64_t v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  char v12 = *(unsigned char *)(v9 + 0x10);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(void *)v9, v11, v12);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(unsigned char *)(v8 + 16) = v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))((v6 + 17 + v8) & ~v6, (v6 + 17 + v9) & ~v6, v4);
  uint64_t v13 = *(void *)(v5 + 64) + 7;
  unint64_t v14 = (v13 + ((v6 + 17 + v8) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + ((v6 + 17 + v9) & ~v6)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)(v15 + 24);
  *(void *)(v14 + 24) = v16;
  *(void *)(v14 + 32) = *(void *)(v15 + 32);
  (**(void (***)(unint64_t, unint64_t))(v16 - 8))(v14, v15);
  uint64_t v17 = (void *)((v15 + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = v17[1];
  uint64_t v19 = (void *)((v14 + 47) & 0xFFFFFFFFFFFFFFF8);
  void *v19 = *v17;
  v19[1] = v18;
  swift_retain();
  return a1;
}

void *assignWithCopy for AnimatedValueModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 | 7) + 8;
  uint64_t v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  uint64_t v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void *)(v9 + 8);
  char v12 = *(unsigned char *)(v9 + 0x10);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(void *)v9, v11, v12);
  uint64_t v13 = *(void *)v8;
  uint64_t v14 = *(void *)(v8 + 8);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  char v15 = *(unsigned char *)(v8 + 16);
  *(unsigned char *)(v8 + 16) = v12;
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v13, v14, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))((v6 + 17 + v8) & ~v6, (v6 + 17 + v9) & ~v6, v4);
  uint64_t v16 = *(void *)(v5 + 64) + 7;
  uint64_t v17 = (uint64_t *)((v16 + ((v6 + 17 + v8) & ~v6)) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v18 = (uint64_t *)((v16 + ((v6 + 17 + v9) & ~v6)) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v17, v18);
  uint64_t v19 = (void *)(((unint64_t)v17 + 47) & 0xFFFFFFFFFFFFFFF8);
  char v20 = (void *)(((unint64_t)v18 + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for AnimatedValueModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v4 + 32);
  uint64_t v6 = v4 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 | 7) + 8;
  uint64_t v9 = ((unint64_t)a1 + v8) & ~(v7 | 7);
  uint64_t v10 = ((unint64_t)a2 + v8) & ~(v7 | 7);
  LOBYTE(v8) = *(unsigned char *)(v10 + 0x10);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = v8;
  uint64_t v11 = (v7 + 17 + v9) & ~v7;
  uint64_t v12 = (v7 + 17 + v10) & ~v7;
  v5(v11, v12);
  uint64_t v13 = *(void *)(v6 + 32) + 7;
  unint64_t v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  long long v16 = *(_OWORD *)v15;
  long long v17 = *(_OWORD *)(v15 + 16);
  *(void *)(v14 + 32) = *(void *)(v15 + 32);
  *(_OWORD *)unint64_t v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  *(_OWORD *)((v14 + 47) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v15 + 47) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for AnimatedValueModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 | 7) + 8;
  uint64_t v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  uint64_t v9 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  char v10 = *(unsigned char *)(v9 + 0x10);
  uint64_t v11 = *(void *)v8;
  uint64_t v12 = *(void *)(v8 + 8);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  char v13 = *(unsigned char *)(v8 + 16);
  *(unsigned char *)(v8 + 16) = v10;
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v11, v12, v13);
  uint64_t v14 = (v6 + 17 + v8) & ~v6;
  uint64_t v15 = (v6 + 17 + v9) & ~v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40))(v14, v15, v4);
  uint64_t v16 = *(void *)(v5 + 64) + 7;
  unint64_t v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v17);
  long long v19 = *(_OWORD *)v18;
  long long v20 = *(_OWORD *)(v18 + 16);
  *(void *)(v17 + 32) = *(void *)(v18 + 32);
  *(_OWORD *)unint64_t v17 = v19;
  *(_OWORD *)(v17 + 16) = v20;
  *(_OWORD *)((v17 + 47) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v18 + 47) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatedValueModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  uint64_t v9 = v6 + 17;
  if (v7 < a2)
  {
    unint64_t v10 = ((v6 + 8) & ~v8)
        + ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + (v9 & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    unsigned int v11 = a2 - v7;
    uint64_t v12 = v10 & 0xFFFFFFF8;
    if ((v10 & 0xFFFFFFF8) != 0) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = v11 + 1;
    }
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v13 < 0x100) {
      unsigned int v14 = 1;
    }
    if (v13 >= 2) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = *((unsigned __int8 *)a1 + v10);
        if (!v16) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v16 = *(unsigned __int16 *)((char *)a1 + v10);
        if (v16) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187E607ACLL);
      case 4:
        int v16 = *(_DWORD *)((char *)a1 + v10);
        if (!v16) {
          break;
        }
LABEL_22:
        int v18 = v16 - 1;
        if (v12)
        {
          int v18 = 0;
          LODWORD(v12) = *a1;
        }
        return v7 + (v12 | v18) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((v9 + (((unint64_t)a1 + v8 + 8) & ~v8)) & ~v6);
  }
  uint64_t v19 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void storeEnumTagSinglePayload for AnimatedValueModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~(v9 | 7))
      + ((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 47) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v19 = (v9 + 17 + ((unint64_t)&a1[(v9 | 7) + 8] & ~(v9 | 7))) & ~v9;
              long long v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v18 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v18 = a2 - 1;
              }
              *(void *)a1 = v18;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((v9 + 8) & ~(v9 | 7))
       + ((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8)
         + 47) & 0xFFFFFFF8) == -16)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((v9 + 8) & ~(v9 | 7))
     + ((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8)
       + 47) & 0xFFFFFFF8) == -16)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((v9 + 8) & ~(v9 | 7))
     + ((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8)
       + 47) & 0xFFFFFFF8) != -16)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187E609D4);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t destroy for AnimatorAttribute()
{
  return swift_release();
}

uint64_t initializeWithCopy for AnimatorAttribute(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AnimatorAttribute(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for AnimatorAttribute(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatorAttribute(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)(a1 + 24) >> 57) >> 5) | (4
                                                           * ((*(void *)(a1 + 24) >> 57) & 0x18 | *(void *)(a1 + 24) & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnimatorAttribute(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 125;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)(result + 24) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in AnimatorAttribute<A, B>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in AnimatedValueModifier<A, B, C>()
{
  return &protocol witness table for AnimatedValueModifier<A, B, C>;
}

uint64_t type metadata accessor for AnimatedValueState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #2 in AnimatorAttribute.updateValue()()
{
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t sub_187E60C80()
{
  return swift_deallocObject();
}

uint64_t sub_187E60C90()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for AnimatedValueState.EventDrivenState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187E60CEC()
{
  outlined consume of AnimatedValueState<A>.PausedState<A>(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return swift_deallocObject();
}

uint64_t outlined consume of AnimatedValueState<A>.PausedState<A>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    return swift_release();
  }
  return result;
}

uint64_t specialized AnimatedValueState.PausedState.update(at:pauseTime:track:transaction:)(double a1)
{
  double v2 = *(double *)v1;
  if (*(double *)v1 != a1)
  {
    uint64_t v4 = *(void *)(v1 + 8);
    if (Transaction.animation.getter())
    {
      if ((Transaction.disablesAnimations.getter() & 1) == 0)
      {
        if (v4 < 0)
        {
          AnimatorState.combine(newAnimation:newInterval:at:in:environment:)();
          uint64_t result = swift_release();
          unint64_t v6 = v4 | 0x8000000000000000;
        }
        else
        {
          type metadata accessor for AnimatorState<Double>();
          swift_allocObject();
          swift_retain();
          uint64_t result = AnimatorState.init(animation:interval:at:in:)();
          unint64_t v6 = result | 0x8000000000000000;
        }
        goto LABEL_10;
      }
      outlined consume of AnimatedValueState<A>.PausedState<A>(*(uint64_t *)&v2, v4);
      uint64_t result = swift_release();
    }
    else
    {
      uint64_t result = outlined consume of AnimatedValueState<A>.PausedState<A>(*(uint64_t *)&v2, v4);
    }
    unint64_t v6 = 0;
LABEL_10:
    *(double *)uint64_t v1 = a1;
    *(void *)(v1 + 8) = v6;
  }
  return result;
}

uint64_t outlined copy of AnimatedValueState<A>.PausedState<A>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for AnimatedValueState.PausedState()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for AnimatorState<Double>()
{
  if (!lazy cache variable for type metadata for AnimatorState<Double>)
  {
    unint64_t v0 = type metadata accessor for AnimatorState();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatorState<Double>);
    }
  }
}

uint64_t type metadata accessor for AnimatedValueState.EventDrivenState.Phase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187E60F14()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  return swift_deallocObject();
}

uint64_t sub_187E60F58()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in AnimatorAttribute.updateValue()(uint64_t a1)
{
  return closure #1 in closure #2 in AnimatorAttribute.updateValue()(a1, *(void *)(v1 + 40), *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in static AnimatedValueModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static AnimatedValueModifier._makeView(modifier:inputs:body:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatedValueState.PausedState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  outlined copy of AnimatedValueState<A>.PausedState<A>(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for AnimatedValueState.PausedState(uint64_t *a1)
{
  return outlined consume of AnimatedValueState<A>.PausedState<A>(*a1, a1[1]);
}

uint64_t *assignWithCopy for AnimatedValueState.PausedState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  outlined copy of AnimatedValueState<A>.PausedState<A>(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of AnimatedValueState<A>.PausedState<A>(v5, v6);
  return a1;
}

uint64_t *assignWithTake for AnimatedValueState.PausedState(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of AnimatedValueState<A>.PausedState<A>(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatedValueState.PausedState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 57) >> 6) | (2
                                                          * ((*(void *)(a1 + 8) >> 57) & 0x38 | *(void *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnimatedValueState.PausedState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)uint64_t result = a2 - 127;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t destroy for AnimatedValueState.EventDrivenState()
{
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for AnimatedValueState.EventDrivenState(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for AnimatedValueState.EventDrivenState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for AnimatedValueState.EventDrivenState(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

void DefaultNavigationViewStyle._columnBasedBody(configuration:)(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body : View in DefaultNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for NavigationViewStyle._Body2 : View in DefaultNavigationViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for DefaultNavigationViewStyle()
{
  return &type metadata for DefaultNavigationViewStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>)
  {
    type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>);
    type metadata accessor for NavigationViewStyleModifier<StackNavigationViewStyle>(255, (unint64_t *)&lazy cache variable for type metadata for NavigationViewStyleModifier<ColumnNavigationViewStyle>, (void (*)(void))lazy protocol witness table accessor for type ColumnNavigationViewStyle and conformance ColumnNavigationViewStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, NavigationViewStyleModifier<ColumnNavigationViewStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for NavigationView<_NavigationViewStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for NavigationView<_NavigationViewStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for NavigationView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationView<_NavigationViewStyleConfiguration.Content>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SheetStyleContext>);
    type metadata accessor for NavigationViewStyleModifier<StackNavigationViewStyle>(255, &lazy cache variable for type metadata for NavigationViewStyleModifier<StackNavigationViewStyle>, (void (*)(void))lazy protocol witness table accessor for type StackNavigationViewStyle and conformance StackNavigationViewStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SheetStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SheetStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StackNavigationViewStyle and conformance StackNavigationViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type StackNavigationViewStyle and conformance StackNavigationViewStyle;
  if (!lazy protocol witness table cache variable for type StackNavigationViewStyle and conformance StackNavigationViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackNavigationViewStyle and conformance StackNavigationViewStyle);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<DocumentStyleContext>);
    type metadata accessor for NavigationViewStyleModifier<StackNavigationViewStyle>(255, &lazy cache variable for type metadata for NavigationViewStyleModifier<PassthroughNavigationViewStyle>, (void (*)(void))lazy protocol witness table accessor for type PassthroughNavigationViewStyle and conformance PassthroughNavigationViewStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<DocumentStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<DocumentStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PassthroughNavigationViewStyle and conformance PassthroughNavigationViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PassthroughNavigationViewStyle and conformance PassthroughNavigationViewStyle;
  if (!lazy protocol witness table cache variable for type PassthroughNavigationViewStyle and conformance PassthroughNavigationViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PassthroughNavigationViewStyle and conformance PassthroughNavigationViewStyle);
  }
  return result;
}

void type metadata accessor for NavigationViewStyleModifier<StackNavigationViewStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for NavigationViewStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ColumnNavigationViewStyle and conformance ColumnNavigationViewStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ColumnNavigationViewStyle and conformance ColumnNavigationViewStyle;
  if (!lazy protocol witness table cache variable for type ColumnNavigationViewStyle and conformance ColumnNavigationViewStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ColumnNavigationViewStyle and conformance ColumnNavigationViewStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<DocumentStyleContext>, NavigationViewStyleModifier<PassthroughNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<NavigationView<_NavigationViewStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SheetStyleContext>, NavigationViewStyleModifier<StackNavigationViewStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for UIKitResponderEventBindingBridge()
{
  uint64_t result = type metadata singleton initialization cache for UIKitResponderEventBindingBridge;
  if (!type metadata singleton initialization cache for UIKitResponderEventBindingBridge) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for UIKitResponderEventBindingBridge()
{
  return swift_initClassMetadata2();
}

uint64_t UIKitResponderEventBindingBridge.init(eventBindingManager:responder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(void *)(v4 + 56) = MEMORY[0x1E4FBC860];
  id v6 = objc_allocWithZone((Class)type metadata accessor for UIKitResponderGestureRecognizer());
  swift_retain();
  uint64_t v7 = (char *)objc_msgSend(v6, sel_init);
  *(void *)(v4 + 48) = v7;
  unsigned int v8 = &v7[OBJC_IVAR____TtC7SwiftUI31UIKitResponderGestureRecognizer_responder];
  swift_weakLoadStrong();
  *((void *)v8 + 1) = a3;
  swift_weakAssign();
  uint64_t v9 = v7;
  swift_retain();
  specialized UIKitResponderGestureRecognizer.responder.didset();

  swift_release();
  swift_release();
  swift_release();
  swift_retain();
  uint64_t v10 = EventBindingBridge.init(eventBindingManager:)();
  unsigned int v11 = *(void **)(v10 + 48);
  swift_weakAssign();
  if (swift_weakLoadStrong())
  {
    uint64_t v12 = swift_dynamicCastClass();
    if (v12)
    {
      uint64_t v13 = v12;
      swift_retain_n();
      objc_msgSend(v11, sel_addTarget_action_, v13, sel_flushActions);
      swift_release();
    }
    else
    {
      swift_retain_n();
      id v15 = v11;
    }
    swift_release();
    swift_release();
  }
  else
  {
    swift_retain_n();
    id v14 = v11;
    swift_release();
  }
  swift_release();

  swift_release_n();
  return v10;
}

uint64_t UIKitResponderEventBindingBridge.eventSources.getter()
{
  type metadata accessor for _ContiguousArrayStorage<EventBindingSource>();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_18834BB80;
  double v2 = *(void **)(v0 + 48);
  uint64_t v3 = lazy protocol witness table accessor for type UIKitResponderGestureRecognizer and conformance UIKitGestureRecognizer(&lazy protocol witness table cache variable for type UIKitResponderGestureRecognizer and conformance UIKitGestureRecognizer, (void (*)(uint64_t))type metadata accessor for UIKitResponderGestureRecognizer);
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  id v4 = v2;
  return v1;
}

uint64_t UIKitResponderEventBindingBridge.enqueueAction(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  id v6 = (void *)(v2 + 56);
  swift_beginAccess();
  uint64_t v7 = *(void **)(v2 + 56);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 56) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
    *id v6 = v7;
  }
  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v7);
    *id v6 = v7;
  }
  uint64_t v7[2] = v10 + 1;
  unsigned int v11 = &v7[2 * v10];
  v11[4] = partial apply for thunk for @callee_guaranteed () -> ();
  void v11[5] = v5;
  return swift_endAccess();
}

Swift::Void __swiftcall UIKitResponderEventBindingBridge.flushActions()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 56);
  if (*(void *)(v1 + 16))
  {
    *(void *)(v0 + 56) = MEMORY[0x1E4FBC860];
    *(void *)(swift_allocObject() + 16) = v1;
    static Update.enqueueAction(_:)();
    swift_release();
  }
  else if (objc_msgSend(*(id *)(v0 + 48), sel_state) == (id)4)
  {
    objc_msgSend(*(id *)(v0 + 48), sel_reset);
  }
}

uint64_t @objc UIKitResponderEventBindingBridge.flushActions()()
{
  swift_retain();
  UIKitResponderEventBindingBridge.flushActions()();

  return swift_release();
}

uint64_t UIKitResponderEventBindingBridge.reset(eventSource:resetForwardedEventDispatchers:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for EventBindingBridge();
  uint64_t v7 = (void (*)(uint64_t, uint64_t, uint64_t))method lookup function for EventBindingBridge();
  v7(a1, a2, a3);
  swift_beginAccess();
  *(void *)(v3 + 56) = MEMORY[0x1E4FBC860];
  return swift_bridgeObjectRelease();
}

void UIKitResponderEventBindingBridge.__allocating_init(eventBindingManager:)()
{
}

void UIKitResponderEventBindingBridge.__allocating_init()()
{
}

uint64_t UIKitResponderEventBindingBridge.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t UIKitResponderEventBindingBridge.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for UIKitResponderEventBindingBridge()
{
  return type metadata accessor for UIKitResponderEventBindingBridge();
}

uint64_t sub_187E62094()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t protocol witness for static EventBindingBridgeFactory.makeEventBindingBridge(bindingManager:responder:) in conformance UIKitResponderEventBindingBridge.Factory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UIKitResponderEventBindingBridge();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v6 = UIKitResponderEventBindingBridge.init(eventBindingManager:responder:)(a1, a2, a3);
  swift_beginAccess();
  *(void *)(a1 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  lazy protocol witness table accessor for type UIKitResponderGestureRecognizer and conformance UIKitGestureRecognizer(&lazy protocol witness table cache variable for type UIKitResponderEventBindingBridge and conformance UIKitResponderEventBindingBridge, (void (*)(uint64_t))type metadata accessor for UIKitResponderEventBindingBridge);
  return v6;
}

uint64_t sub_187E621B0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t type metadata accessor for EventBindingSource()
{
  unint64_t result = lazy cache variable for type metadata for EventBindingSource;
  if (!lazy cache variable for type metadata for EventBindingSource)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EventBindingSource);
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitResponderEventBindingBridge.Factory()
{
  return &type metadata for UIKitResponderEventBindingBridge.Factory;
}

uint64_t lazy protocol witness table accessor for type UIKitResponderGestureRecognizer and conformance UIKitGestureRecognizer(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void Viewpoint3D.init(orientation:)()
{
}

void Viewpoint3D.squareAzimuth.getter()
{
}

void static Viewpoint3D.standard.getter()
{
}

void Viewpoint3D.debugDescription.getter()
{
}

void static Viewpoint3D.== infix(_:_:)()
{
}

void SquareAzimuth.orientation.getter()
{
}

void SquareAzimuth.init(closestToAzimuth:)()
{
}

void SquareAzimuth.Set.rawValue.getter()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

SwiftUI::SquareAzimuth::Set __swiftcall SquareAzimuth.Set.init(rawValue:)(Swift::Int rawValue)
{
  result.rawuint64_t Value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::SquareAzimuth::Set __swiftcall SquareAzimuth.Set.init(_:)(SwiftUI::SquareAzimuth a1)
{
  result.rawuint64_t Value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

Swift::Bool __swiftcall SquareAzimuth.Set.contains(_:)(SwiftUI::SquareAzimuth a1)
{
  Swift::Bool result = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void static SquareAzimuth.== infix(_:_:)()
{
}

void SquareAzimuth.hash(into:)()
{
}

void static SquareAzimuth.allCases.getter()
{
}

void SquareAzimuth.hashValue.getter()
{
}

void Viewpoint3D.fourFacetAzimuth.getter()
{
}

void Viewpoint3D.description.getter()
{
}

void Viewpoint3D.FourFacetAzimuth.description.getter()
{
}

void Viewpoint3D.FourFacetAzimuth.angle.getter()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void static Viewpoint3D.FourFacetAzimuth.back.getter()
{
}

void Viewpoint3D.FourFacetAzimuth.init(continuousAngle:)()
{
}

void Viewpoint3D.FourFacetAzimuth.Set.rawValue.getter()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

SwiftUI::Viewpoint3D::FourFacetAzimuth::Set __swiftcall Viewpoint3D.FourFacetAzimuth.Set.init(rawValue:)(Swift::Int rawValue)
{
  result.rawuint64_t Value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void Viewpoint3D.FourFacetAzimuth.Set.init(_:)()
{
}

void static Viewpoint3D.FourFacetAzimuth.Set.all.getter()
{
}

void Viewpoint3D.FourFacetAzimuth.Set.contains(_:)()
{
}

void static Viewpoint3D.FourFacetAzimuth.== infix(_:_:)()
{
}

void Viewpoint3D.FourFacetAzimuth.hash(into:)()
{
}

void Viewpoint3D.FourFacetAzimuth.hashValue.getter()
{
}

void Viewpoint3D.hash(into:)()
{
}

void Viewpoint3D.hashValue.getter()
{
}

unint64_t lazy protocol witness table accessor for type SquareAzimuth.Set and conformance SquareAzimuth.Set()
{
  unint64_t result = lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set;
  if (!lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set;
  if (!lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set;
  if (!lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set;
  if (!lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquareAzimuth.Set and conformance SquareAzimuth.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SquareAzimuth and conformance SquareAzimuth()
{
  unint64_t result = lazy protocol witness table cache variable for type SquareAzimuth and conformance SquareAzimuth;
  if (!lazy protocol witness table cache variable for type SquareAzimuth and conformance SquareAzimuth)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquareAzimuth and conformance SquareAzimuth);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [SquareAzimuth] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [SquareAzimuth] and conformance [A];
  if (!lazy protocol witness table cache variable for type [SquareAzimuth] and conformance [A])
  {
    type metadata accessor for [SquareAzimuth]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [SquareAzimuth] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [SquareAzimuth]()
{
  if (!lazy cache variable for type metadata for [SquareAzimuth])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [SquareAzimuth]);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set()
{
  unint64_t result = lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set;
  if (!lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set;
  if (!lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set;
  if (!lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set;
  if (!lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth.Set and conformance Viewpoint3D.FourFacetAzimuth.Set);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Viewpoint3D.FourFacetAzimuth and conformance Viewpoint3D.FourFacetAzimuth()
{
  unint64_t result = lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth and conformance Viewpoint3D.FourFacetAzimuth;
  if (!lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth and conformance Viewpoint3D.FourFacetAzimuth)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Viewpoint3D.FourFacetAzimuth and conformance Viewpoint3D.FourFacetAzimuth);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Viewpoint3D and conformance Viewpoint3D()
{
  unint64_t result = lazy protocol witness table cache variable for type Viewpoint3D and conformance Viewpoint3D;
  if (!lazy protocol witness table cache variable for type Viewpoint3D and conformance Viewpoint3D)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Viewpoint3D and conformance Viewpoint3D);
  }
  return result;
}

ValueMetadata *type metadata accessor for Viewpoint3D()
{
  return &type metadata for Viewpoint3D;
}

unsigned char *storeEnumTagSinglePayload for SquareAzimuth(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E62A58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SquareAzimuth()
{
  return &type metadata for SquareAzimuth;
}

ValueMetadata *type metadata accessor for SquareAzimuth.Set()
{
  return &type metadata for SquareAzimuth.Set;
}

ValueMetadata *type metadata accessor for Viewpoint3D.FourFacetAzimuth()
{
  return &type metadata for Viewpoint3D.FourFacetAzimuth;
}

ValueMetadata *type metadata accessor for Viewpoint3D.FourFacetAzimuth.Set()
{
  return &type metadata for Viewpoint3D.FourFacetAzimuth.Set;
}

void static SquareAzimuth.Set.right.getter()
{
}

void static SquareAzimuth.Set.front.getter()
{
}

void static SquareAzimuth.Set.left.getter()
{
}

void static SquareAzimuth.Set.back.getter()
{
}

void static Viewpoint3D.FourFacetAzimuth.right.getter()
{
}

void static Viewpoint3D.FourFacetAzimuth.front.getter()
{
}

void static Viewpoint3D.FourFacetAzimuth.left.getter()
{
}

void static SquareAzimuth.Set.all.getter()
{
}

void static Viewpoint3D.FourFacetAzimuth.Set.right.getter()
{
}

void static Viewpoint3D.FourFacetAzimuth.Set.front.getter()
{
}

void static Viewpoint3D.FourFacetAzimuth.Set.left.getter()
{
}

void static Viewpoint3D.FourFacetAzimuth.Set.back.getter()
{
}

uint64_t assignWithCopy for NavigationSplitParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  return a1;
}

uint64_t assignWithTake for NavigationSplitParameters(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for NavigationSplitColumn(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E62D1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance NavigationSplitColumn()
{
  uint64_t result = 0x72616265646973;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x746E65746E6F63;
      break;
    case 2:
      uint64_t result = 0x6C6961746564;
      break;
    case 3:
      uint64_t result = 0x6B63617473;
      break;
    case 4:
      uint64_t result = 0x657370616C6C6F63;
      break;
    case 5:
      uint64_t result = 0x6F74636570736E69;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NavigationSplitLeadingColumnBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187E62ED8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitLeadingColumnBehavior and conformance NavigationSplitLeadingColumnBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitLeadingColumnBehavior and conformance NavigationSplitLeadingColumnBehavior;
  if (!lazy protocol witness table cache variable for type NavigationSplitLeadingColumnBehavior and conformance NavigationSplitLeadingColumnBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitLeadingColumnBehavior and conformance NavigationSplitLeadingColumnBehavior);
  }
  return result;
}

uint64_t sub_187E62F58()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in setNeedsHomeIndicatorUpdate #1 <A>(from:animated:) in UIHostingController.updateHomeIndicator(animated:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_setNeedsUpdateOfHomeIndicatorAutoHidden);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_SSs5NeverOTg503_s7d154UI19UIHostingControllerC30updateChildrenCreatingIfNeeded33_E387C3C47C0D2A0931533D8490A5A8B7LL2of5using13customization11environment11coordinatorySo18_UITabb11GroupC_AA12f26ItemGroupVAA7BindingVyAA20f47ViewCustomizationVGSgAA17EnvironmentValuesVAA24f29ViewCoordinator_PhoneCtFSSAA8fG55Ocfu3_33_9ed0a70f676a1ab0b2fbeb64a187c970AZSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v21 = &v19;
    do
    {
      outlined init with copy of TabEntry(v4, (uint64_t)__src);
      if (*(unsigned char *)v21)
      {
        memcpy(__dst, __src, sizeof(__dst));
        uint64_t v5 = *(void *)&__dst[24];
        uint64_t v6 = *(void *)&__dst[32];
        outlined copy of TabCustomizationID.Base();
        outlined destroy of TabItemGroup((uint64_t)__dst);
      }
      else
      {
        *(_OWORD *)&__dst[64] = *(_OWORD *)&__src[64];
        *(_OWORD *)&__dst[80] = *(_OWORD *)&__src[80];
        *(void *)&__dst[96] = *(void *)&__src[96];
        *(_OWORD *)__dst = *(_OWORD *)__src;
        *(_OWORD *)&__dst[16] = *(_OWORD *)&__src[16];
        *(_OWORD *)&__dst[32] = *(_OWORD *)&__src[32];
        *(_OWORD *)&__dst[48] = *(_OWORD *)&__src[48];
        uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v6 = v7;
        uint64_t v8 = one-time initialization token for defaultValue;
        swift_bridgeObjectRetain();
        if (v8 != -1) {
          swift_once();
        }
        ViewTraitCollection.value<A>(for:defaultValue:)();
        swift_bridgeObjectRelease();
        outlined consume of TabCustomizationID?(v13, v14, v15);
        swift_bridgeObjectRelease();
        if (v16)
        {
          if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0
            && (TabItem.needsCustomizationIDForEnablement.getter() & 1) != 0)
          {
            ViewTraitCollection.value<A>(for:defaultValue:)();
            outlined copy of TabCustomizationID?(v13, v14, v15);
            outlined consume of TabCustomizationID?(v13, v14, v15);
            swift_bridgeObjectRelease();
            if (v15 != 255)
            {
              swift_bridgeObjectRelease();
              uint64_t v5 = v13;
              uint64_t v6 = v14;
            }
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          if (one-time initialization token for searchPlatformIdentifier != -1) {
            swift_once();
          }
          uint64_t v5 = static TabItem.searchPlatformIdentifier;
          uint64_t v6 = unk_1E90FC510;
          swift_bridgeObjectRetain();
        }
        outlined destroy of TabItem((uint64_t)__dst);
      }
      uint64_t v2 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v20;
      }
      unint64_t v10 = *(void *)(v2 + 16);
      unint64_t v9 = *(void *)(v2 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
        uint64_t v2 = v20;
      }
      *(void *)(v2 + 16) = v10 + 1;
      uint64_t v11 = v2 + 16 * v10;
      *(void *)(v11 + 32) = v5;
      *(void *)(v11 + 40) = v6;
      v4 += 272;
      --v1;
    }
    while (v1);
  }
  return v2;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6_UITabCG_SSs5NeverOTg50157_s7SwiftUI19UIHostingControllerC30updateChildrenCreatingIfNeeded33_E387C3C47C0D2A0931533D8490A5A8B7LL2of5using13customization11environment11coordinatorySo18_dB181GroupC_AA12TabItemGroupVAA7BindingVyAA20TabViewCustomizationVGSgAA17EnvironmentValuesVAA24TabViewCoordinator_PhoneCtFSSSo01_Y0Ccfu2_33_3d754e018c1b0ac695a0c02c1b628b04AZSSTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
    if (!v2) {
      return (char *)v3;
    }
    uint64_t v15 = MEMORY[0x1E4FBC860];
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v15;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x18C117680](v5, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      id v8 = objc_msgSend(v6, sel__identifier);
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      unint64_t v13 = *(void *)(v15 + 16);
      unint64_t v12 = *(void *)(v15 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
      }
      ++v5;
      *(void *)(v15 + 16) = v13 + 1;
      uint64_t v14 = v15 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      if (v2 == v5) {
        return (char *)v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo16UIViewControllerC_7SwiftUI8TabEntryOtG_AGs5NeverOTg506_sSo16de2C7f3UI8hi19OABIggno_AB_AEtABs5j66OIegnrzr_TR03_s7c18UI21UIKitAdaptablee112View33_297C74A0A9EE1F5608M165BAFAEAD53B28LLV03setF11Controllers2on03allfP04tabs8selected11environmentySo18UITabBarb9C_SaySo06a12X0CGSayAA0E5F41OGSiAA17EnvironmentValuesVtFA2N_AQtXEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v6 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = (id *)(a1 + 32);
    do
    {
      id v5 = *v4;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v4 += 35;
      --v2;
    }
    while (v2);
    return v6;
  }
  return result;
}

uint64_t specialized Sequence.filter(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v28 = a2;
  uint64_t v27 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_31;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      unint64_t v4 = 0;
      uint64_t v5 = v28 + 32;
      uint64_t v6 = MEMORY[0x1E4FBC860];
      uint64_t v16 = v3;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v7 = (id)MEMORY[0x18C117680](v4, a1);
LABEL_9:
        id v8 = v7;
        unint64_t v9 = *(void *)(v28 + 16);
        if (v4 == v9)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return v6;
        }
        if (v4 >= v9) {
          goto LABEL_30;
        }
        *(void *)__src = v7;
        outlined init with copy of TabEntry(v5, (uint64_t)&__src[8]);
        memcpy(__dst, __src, 0x111uLL);
        outlined init with copy of TabEntry((uint64_t)&__dst[8], (uint64_t)__src);
        if (__src[264])
        {
          memcpy(v24, __src, sizeof(v24));
          _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)&v24[48], (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
          if (!v23)
          {
            outlined destroy of TabItemGroup((uint64_t)v24);
            outlined destroy of PlatformItem.SelectionContent?((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
LABEL_22:
            memcpy(__src, __dst, sizeof(__src));
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1);
            }
            uint64_t v6 = v27;
            unint64_t v14 = *(void *)(v27 + 16);
            unint64_t v13 = *(void *)(v27 + 24);
            if (v14 >= v13 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1);
              uint64_t v6 = v27;
            }
            *(void *)(v6 + 16) = v14 + 1;
            memcpy((void *)(v6 + 280 * v14 + 32), __src, 0x111uLL);
            goto LABEL_5;
          }
          uint64_t v10 = one-time initialization token for defaultValue;
          swift_bridgeObjectRetain();
          if (v10 != -1) {
            swift_once();
          }
          ViewTraitCollection.value<A>(for:defaultValue:)();
          swift_bridgeObjectRelease();
          outlined consume of TabCustomizationID?(v18, *((uint64_t *)&v18 + 1), v19);
          swift_bridgeObjectRelease();
          outlined destroy of TabItemGroup((uint64_t)v24);
          outlined destroy of TabItem((uint64_t)v20);
          if ((v17 & 1) == 0) {
            goto LABEL_22;
          }
        }
        else
        {
          *(_OWORD *)&v24[64] = *(_OWORD *)&__src[64];
          *(_OWORD *)&v24[80] = *(_OWORD *)&__src[80];
          *(void *)&v24[96] = *(void *)&__src[96];
          *(_OWORD *)uint64_t v24 = *(_OWORD *)__src;
          *(_OWORD *)&v24[16] = *(_OWORD *)&__src[16];
          *(_OWORD *)&v24[32] = *(_OWORD *)&__src[32];
          *(_OWORD *)&unsigned char v24[48] = *(_OWORD *)&__src[48];
          uint64_t v11 = one-time initialization token for defaultValue;
          swift_bridgeObjectRetain();
          if (v11 != -1) {
            swift_once();
          }
          char v17 = HIBYTE(static TabOptions.TraitKey.defaultValue);
          long long v18 = *(_OWORD *)&qword_1E90FC588;
          unsigned __int8 v19 = word_1E90FC598;
          ViewTraitCollection.value<A>(for:defaultValue:)();
          swift_bridgeObjectRelease();
          char v12 = v20[1];
          outlined consume of TabCustomizationID?(v21, v22, v23);
          swift_bridgeObjectRelease();
          outlined destroy of TabItem((uint64_t)v24);
          if ((v12 & 1) == 0) {
            goto LABEL_22;
          }
        }
        _s2os6LoggerVSgWOhTm_1((uint64_t)__dst, (uint64_t (*)(void))type metadata accessor for (UIViewController, TabEntry));
LABEL_5:
        ++v4;
        v5 += 272;
        if (v16 == v4) {
          goto LABEL_33;
        }
      }
      if (v4 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v3) {
        goto LABEL_32;
      }
    }
    id v7 = *(id *)(a1 + 8 * v4 + 32);
    goto LABEL_9;
  }
LABEL_32:
  uint64_t v6 = MEMORY[0x1E4FBC860];
LABEL_33:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized TabViewCoordinator_Phone.updateSearchIndex<A>(tabs:)(uint64_t a1)
{
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchState;
  swift_beginAccess();
  outlined init with copy of AdaptableTabView.BodyContent(v6, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
  type metadata accessor for Binding<SearchFieldState>(0);
  BOOL v8 = 1;
  LODWORD(v6) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7);
  uint64_t result = _s2os6LoggerVSgWOhTm_1((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
  if (v6 == 1)
  {
    uint64_t v10 = 0;
LABEL_19:
    uint64_t v19 = v1 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchIndex;
    *(void *)uint64_t v19 = v10;
    *(unsigned char *)(v19 + 8) = v8;
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + 16);
    uint64_t v21 = v1;
    uint64_t v22 = (uint64_t)v34 + 8;
    uint64_t v23 = (uint64_t)&v36 + 8;
    uint64_t v24 = a1 + 32;
    char v12 = &v55;
    uint64_t v25 = (char *)&v52 + 8;
    v20[1] = a1;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v13 = 0;
    BOOL v14 = v11 == 0;
    if (v11) {
      goto LABEL_7;
    }
LABEL_6:
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    unint64_t v13 = v11;
    char v53 = -1;
    while (1)
    {
      outlined init with take of Binding<TabViewCustomization>((uint64_t)&v36, (uint64_t)&v54, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TabEntry)?);
      BOOL v8 = v56 == 255;
      if (v56 == 255)
      {
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v10 = 0;
LABEL_18:
        uint64_t v1 = v21;
        goto LABEL_19;
      }
      uint64_t v10 = v54;
      outlined init with take of TabEntry((uint64_t)v12, (uint64_t)&v36);
      if (*v25)
      {
        uint64_t result = outlined destroy of TabEntry((uint64_t)&v36);
        BOOL v14 = v13 >= v11;
        if (v13 == v11) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v16 = v12;
        v34[5] = v41;
        uint64_t v35 = v42;
        v34[0] = v36;
        v34[1] = v37;
        v34[3] = v39;
        v34[4] = v40;
        v34[2] = v38;
        uint64_t v33 = *((void *)&v41 + 1);
        uint64_t v17 = one-time initialization token for defaultValue;
        swift_bridgeObjectRetain();
        if (v17 != -1) {
          swift_once();
        }
        __int16 v26 = static TabOptions.TraitKey.defaultValue;
        char v27 = byte_1E90FC582;
        long long v28 = *(_OWORD *)&qword_1E90FC588;
        __int16 v29 = word_1E90FC598;
        char v30 = byte_1E90FC59A;
        uint64_t v31 = qword_1E90FC5A0;
        __int16 v32 = word_1E90FC5A8;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        swift_bridgeObjectRelease();
        char v18 = BYTE9(v38);
        outlined consume of TabCustomizationID?(*((uint64_t *)&v36 + 1), v37, BYTE8(v37));
        swift_bridgeObjectRelease();
        uint64_t result = outlined destroy of TabItem((uint64_t)v34);
        if ((v18 & 1) == 0)
        {
          uint64_t result = swift_bridgeObjectRelease();
          goto LABEL_18;
        }
        char v12 = v16;
        BOOL v14 = v13 >= v11;
        if (v13 == v11) {
          goto LABEL_6;
        }
      }
LABEL_7:
      if (v14) {
        break;
      }
      uint64_t v15 = v22;
      outlined init with copy of TabEntry(v24 + 272 * v13, v22);
      *(void *)&long long v36 = v13;
      outlined init with take of TabEntry(v15, v23);
      ++v13;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized TabViewCoordinator_Phone.host<A>(tab:tabs:searchAdjustment:selected:environment:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(v6 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_tabCache);
  if (v7)
  {
    uint64_t v8 = v6;
    outlined init with copy of TabEntry(a1, (uint64_t)__src);
    if (v47)
    {
      memcpy(__dst, __src, sizeof(__dst));
      BOOL v14 = (uint64_t *)(v6 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selectionCache);
      swift_beginAccess();
      uint64_t v15 = *v14;
      char v36 = a3;
      if (v15 && *(void *)(v15 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(a4), (v17 & 1) != 0))
      {
        char v18 = (void *)(*(void *)(v15 + 56) + 32 * v16);
        unint64_t v19 = v18[1];
        uint64_t v20 = v18[2];
        uint64_t v21 = v18[3];
        swift_bridgeObjectRetain();
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
      }
      swift_endAccess();
      swift_bridgeObjectRetain();
      specialized TabViewCoordinator_Phone.visibleTab<A>(in:selectionInfo:tabCache:tabs:environment:)(__dst, v19, v20, v21, v7, a2, a5, (uint64_t)&v39, a6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)__dst);
      a3 = v36;
    }
    else
    {
      long long v43 = *(_OWORD *)&__src[64];
      long long v44 = *(_OWORD *)&__src[80];
      uint64_t v45 = *(void *)&__src[96];
      long long v39 = *(_OWORD *)__src;
      long long v40 = *(_OWORD *)&__src[16];
      long long v41 = *(_OWORD *)&__src[32];
      long long v42 = *(_OWORD *)&__src[48];
    }
    v48[4] = v43;
    v48[5] = v44;
    uint64_t v49 = v45;
    v48[0] = v39;
    v48[1] = v40;
    v48[2] = v41;
    v48[3] = v42;
    outlined init with copy of TabEntry(a1, (uint64_t)__src);
    if (v47 == 1)
    {
      memcpy(__dst, __src, sizeof(__dst));
      id v22 = specialized TabViewCoordinator_Phone.host(for:child:searchAdjustment:)((uint64_t)__dst, (uint64_t)v48, a3);
      uint64_t v24 = v23;
      outlined destroy of TabItemGroup((uint64_t)__dst);
    }
    else
    {
      outlined init with copy of TabItem((uint64_t)v48, (uint64_t)__dst);
      LOBYTE(__dst[13]) = 0;
      BYTE1(__dst[13]) = a3;
      outlined init with copy of TabItem.RootView((uint64_t)__dst, (uint64_t)&v39);
      _s7SwiftUI19UIHostingControllerCyAA7TabItemV8RootViewVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
      id v26 = objc_allocWithZone(v25);
      id v22 = specialized UIHostingController.init(rootView:)((uint64_t)&v39);
      outlined destroy of TabItem.RootView((uint64_t)__dst);
      outlined destroy of TabEntry((uint64_t)__src);
      uint64_t v24 = 0;
    }
    *(void *)__src = a5;
    *(void *)&__src[8] = a6;
    TabViewCoordinator_Phone.updateTabElementCreatingIfNeeded(on:using:environment:)((uint64_t)v22, a1, (uint64_t *)__src);
    if (v24)
    {
      char v27 = v24;
      uint64_t v28 = TabItem.platformIdentifier.getter();
      char v30 = v29;
      v31._uint64_t countAndFlagsBits = TabEntry.platformIdentifier.getter();
      uint64_t v33 = v32;
      v34._uint64_t countAndFlagsBits = v28;
      v34._object = v30;
      v31._object = v33;
      TabViewCoordinator_Phone.cacheChild(_:childID:for:)(v27, v34, v31);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    *(void *)__src = a5;
    *(void *)&__src[8] = a6;
    UIHostingController<>.updateTabEnvironment(environment:coordinator:)((uint64_t *)__src, v8);

    outlined destroy of TabItem((uint64_t)v48);
    return (uint64_t)v22;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(void *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  if (a2 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      type metadata accessor for UIViewController?(0, a3, a4, a5, MEMORY[0x1E4FBB718]);
      uint64_t v7 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v7[2] = a2;
      unint64_t v13 = v7;
      void v7[4] = a1;
      if (a2 != 1)
      {
        _OWORD v7[5] = a1;
        uint64_t v8 = a2 - 2;
        if (v8)
        {
          unint64_t v9 = v7 + 6;
          do
          {
            *v9++ = a1;
            id v10 = a1;
            --v8;
          }
          while (v8);
        }
        id v11 = a1;
      }
    }
    else
    {
      unint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    }
    specialized Array._endMutation()();
    return (uint64_t)v13;
  }
  return result;
}

void specialized TabViewCoordinator_Phone.removeHosts<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int64_t v5 = a4 >> 1;
  if (a4 >> 1 != a3)
  {
    uint64_t v6 = a3;
    uint64_t v8 = OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_groupHostCache;
    swift_unknownObjectRetain();
    if (v5 <= v6)
    {
LABEL_20:
      __break(1u);
      return;
    }
    unint64_t v9 = (uint64_t *)(v4 + v8);
    uint64_t v10 = v5 - 1;
    id v11 = &selRef_showsMenuAsPrimaryAction;
    uint64_t v12 = v6;
    uint64_t v33 = a2;
    uint64_t v34 = v6;
    uint64_t v31 = v5 - 1;
    uint64_t v32 = v5;
    uint64_t v35 = v9;
    while (1)
    {
      id v13 = *(id *)(a2 + 8 * v12);
      id v14 = [v13 v11[133]];
      if (!v14) {
        break;
      }
      uint64_t v15 = v14;
      self;
      unint64_t v16 = (void *)swift_dynamicCastObjCClass();
      if (!v16)
      {

LABEL_14:
        if (v10 == v12) {
          goto LABEL_18;
        }
        goto LABEL_15;
      }
      id v17 = objc_msgSend(v16, sel__identifier);
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v20);
      char v23 = v22;
      swift_bridgeObjectRelease();
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      if (v23)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v28 = *v35;
        uint64_t v36 = *v35;
        uint64_t *v35 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v28 = v36;
        }
        swift_bridgeObjectRelease();
        __int16 v29 = (uint64_t *)(*(void *)(v28 + 56) + 32 * v21);
        uint64_t v24 = *v29;
        uint64_t v25 = v29[1];
        uint64_t v26 = v29[2];
        specialized _NativeDictionary._delete(at:)(v21, v28);
        uint64_t *v35 = v28;
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      swift_bridgeObjectRelease();

      outlined consume of TabItemGroup.HostCache?(v24, v25, v26);
      uint64_t v10 = v31;
      int64_t v5 = v32;
      a2 = v33;
      uint64_t v6 = v34;
      id v11 = &selRef_showsMenuAsPrimaryAction;
      if (v31 == v12)
      {
LABEL_18:
        swift_unknownObjectRelease();
        return;
      }
LABEL_15:
      uint64_t v30 = v12 + 1;
      if (v12 + 1 >= v6)
      {
        ++v12;
        if (v30 < v5) {
          continue;
        }
      }
      goto LABEL_20;
    }
    uint64_t v15 = v13;
    goto LABEL_14;
  }
}

uint64_t specialized TabViewCoordinator_Phone.updateHosts<A, B>(_:tabs:selected:environment:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v99 = a6;
  uint64_t v100 = a2;
  uint64_t v111 = a4;
  uint64_t v112 = a5;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v98 = (uint64_t)v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v107 = (uint64_t)v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v106 = (uint64_t)v84 - v15;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (uint64_t *)(v6 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selectionCache);
  swift_beginAccess();
  uint64_t v20 = *v19;
  if (!v20) {
    goto LABEL_82;
  }
  if (!*(void *)(v20 + 16)) {
    goto LABEL_82;
  }
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v22 & 1) == 0) {
    goto LABEL_82;
  }
  char v23 = (void *)(*(void *)(v20 + 56) + 32 * v21);
  uint64_t v108 = v23[1];
  uint64_t v24 = v23[3];
  uint64_t v97 = v23[2];
  swift_endAccess();
  uint64_t v25 = v7 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_customization;
  uint64_t v26 = v7 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchState;
  uint64_t v90 = v7 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchIndex;
  uint64_t v101 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v27 = v100;
  swift_bridgeObjectRetain();
  uint64_t v105 = v25;
  swift_beginAccess();
  uint64_t v96 = v26;
  swift_beginAccess();
  unint64_t v104 = 0;
  char v29 = 0;
  unint64_t v30 = 0;
  uint64_t v109 = a1 & 0xFFFFFFFFFFFFFF8;
  if (a1 < 0) {
    uint64_t v31 = a1;
  }
  else {
    uint64_t v31 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  uint64_t v92 = a1 + 32;
  unint64_t v93 = a1 & 0xC000000000000001;
  uint64_t v87 = v27 + 32;
  uint64_t v86 = &v137[8];
  v84[1] = v31;
  char v85 = &v136;
  int v113 = &v141;
  uint64_t v114 = &v138[1];
  uint64_t v117 = &v137[264];
  uint64_t v102 = &v133;
  uint64_t v103 = &v132[48];
  *(void *)&long long v28 = 136315138;
  long long v89 = v28;
  uint64_t v88 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v95 = v7;
  int v110 = v18;
  uint64_t v91 = a1;
  while (1)
  {
    if (v29) {
      goto LABEL_19;
    }
    if ((unint64_t)a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v82 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v30 == v82) {
        goto LABEL_19;
      }
    }
    else if (v30 == *(void *)(v109 + 16))
    {
      goto LABEL_19;
    }
    if (v93)
    {
      id v32 = (id)MEMORY[0x18C117680](v30, a1);
      BOOL v33 = __OFADD__(v30++, 1);
      if (v33) {
        goto LABEL_77;
      }
      goto LABEL_17;
    }
    if ((v30 & 0x8000000000000000) != 0) {
      break;
    }
    if (v30 >= *(void *)(v109 + 16)) {
      goto LABEL_80;
    }
    id v32 = *(id *)(v92 + 8 * v30);
    BOOL v33 = __OFADD__(v30++, 1);
    if (v33)
    {
LABEL_77:
      __break(1u);
LABEL_78:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
LABEL_17:
    unint64_t v34 = *(void *)(v100 + 16);
    if (v104 == v34)
    {

LABEL_19:
      memset(v138, 0, 281);
      int v118 = 1;
      goto LABEL_20;
    }
    if (v104 >= v34) {
      goto LABEL_81;
    }
    unint64_t v48 = v104;
    unint64_t v49 = v104 + 1;
    *(void *)uint64_t v137 = v32;
    outlined init with copy of TabEntry(v87 + 272 * v104, (uint64_t)v86);
    long long v50 = v85;
    memcpy(v85, v137, 0x111uLL);
    v138[0] = v48;
    memcpy(v114, v50, 0x111uLL);
    int v118 = 0;
    unint64_t v104 = v49;
LABEL_20:
    outlined init with take of Binding<TabViewCustomization>((uint64_t)v138, (uint64_t)&v139, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: (UIViewController, TabEntry))?);
    uint64_t v35 = v140;
    if (!v140) {
      goto LABEL_78;
    }
    uint64_t v116 = v139;
    v138[0] = v140;
    uint64_t v36 = (uint64_t)v114;
    outlined init with take of TabEntry((uint64_t)v113, (uint64_t)v114);
    outlined init with take of TabEntry(v36, (uint64_t)&v135);
    outlined init with copy of TabEntry((uint64_t)&v135, (uint64_t)v137);
    if (*v117)
    {
      memcpy(v132, v137, sizeof(v132));
      _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)v103, (uint64_t)v134, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
      if (*(void *)&v134[24])
      {
        uint64_t v125 = *(void *)&v134[88];
        uint64_t v37 = one-time initialization token for defaultValue;
        swift_bridgeObjectRetain();
        if (v37 != -1) {
          swift_once();
        }
        LOWORD(v119) = static TabOptions.TraitKey.defaultValue;
        BYTE2(v119) = byte_1E90FC582;
        long long v120 = *(_OWORD *)&qword_1E90FC588;
        __int16 v121 = word_1E90FC598;
        char v122 = byte_1E90FC59A;
        uint64_t v123 = qword_1E90FC5A0;
        __int16 v124 = word_1E90FC5A8;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        swift_bridgeObjectRelease();
        char v38 = BYTE1(v126);
        outlined consume of TabCustomizationID?(v127, *((uint64_t *)&v127 + 1), v128);
        swift_bridgeObjectRelease();
        outlined destroy of TabItemGroup((uint64_t)v132);
        outlined destroy of TabItem((uint64_t)v134);
        if (v38) {
          goto LABEL_8;
        }
      }
      else
      {
        outlined destroy of TabItemGroup((uint64_t)v132);
        outlined destroy of PlatformItem.SelectionContent?((uint64_t)v134, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
      }
    }
    else
    {
      *(_OWORD *)&v132[64] = *(_OWORD *)&v137[64];
      *(_OWORD *)&v132[80] = *(_OWORD *)&v137[80];
      *(void *)&v132[96] = *(void *)&v137[96];
      *(_OWORD *)uint64_t v132 = *(_OWORD *)v137;
      *(_OWORD *)&v132[16] = *(_OWORD *)&v137[16];
      *(_OWORD *)&v132[32] = *(_OWORD *)&v137[32];
      *(_OWORD *)&v132[48] = *(_OWORD *)&v137[48];
      uint64_t v119 = *(void *)&v137[88];
      uint64_t v39 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v39 != -1) {
        swift_once();
      }
      LOWORD(v126) = static TabOptions.TraitKey.defaultValue;
      BYTE2(v126) = byte_1E90FC582;
      long long v127 = *(_OWORD *)&qword_1E90FC588;
      __int16 v128 = word_1E90FC598;
      char v129 = byte_1E90FC59A;
      uint64_t v130 = qword_1E90FC5A0;
      __int16 v131 = word_1E90FC5A8;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      int v40 = v134[1];
      outlined consume of TabCustomizationID?(*(uint64_t *)&v134[8], *(uint64_t *)&v134[16], v134[24]);
      swift_bridgeObjectRelease();
      outlined destroy of TabItem((uint64_t)v132);
      if (v40 == 1)
      {
LABEL_8:
        outlined destroy of TabEntry((uint64_t)&v135);

        goto LABEL_9;
      }
    }
    unint64_t v115 = v30;
    static Log.tabView.getter();
    uint64_t v41 = type metadata accessor for Logger();
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v18, 1, v41) == 1)
    {
      _s2os6LoggerVSgWOhTm_1((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Logger?);
    }
    else
    {
      outlined init with copy of TabEntry((uint64_t)&v135, (uint64_t)v137);
      long long v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v94 = swift_slowAlloc();
        uint64_t v126 = v94;
        *(_DWORD *)uint64_t v45 = v89;
        outlined init with copy of TabEntry((uint64_t)v137, (uint64_t)v132);
        if (*(unsigned char *)v102)
        {
          memcpy(v134, v132, sizeof(v134));
          uint64_t v46 = *(void *)&v134[24];
          unint64_t v47 = *(void *)&v134[32];
          outlined copy of TabCustomizationID.Base();
          outlined destroy of TabItemGroup((uint64_t)v134);
        }
        else
        {
          *(_OWORD *)&v134[64] = *(_OWORD *)&v132[64];
          *(_OWORD *)&v134[80] = *(_OWORD *)&v132[80];
          *(void *)&v134[96] = *(void *)&v132[96];
          *(_OWORD *)long long v134 = *(_OWORD *)v132;
          *(_OWORD *)&v134[16] = *(_OWORD *)&v132[16];
          *(_OWORD *)&v134[32] = *(_OWORD *)&v132[32];
          *(_OWORD *)&v134[48] = *(_OWORD *)&v132[48];
          uint64_t v46 = TabItem.platformIdentifier.getter();
          unint64_t v47 = v51;
          outlined destroy of TabItem((uint64_t)v134);
        }
        *(void *)(v45 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v126);
        swift_bridgeObjectRelease();
        outlined destroy of TabEntry((uint64_t)v137);
        _os_log_impl(&dword_1872C6000, v43, v44, "Updating tab %s", (uint8_t *)v45, 0xCu);
        uint64_t v52 = v94;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v52, -1, -1);
        MEMORY[0x18C119C60](v45, -1, -1);

        a1 = v91;
        uint64_t v7 = v95;
      }
      else
      {

        outlined destroy of TabEntry((uint64_t)v137);
      }
      uint64_t v18 = v110;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v110, v41);
    }
    _s7SwiftUI19UIHostingControllerCyAA7TabItemV8RootViewVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
    char v53 = (void *)swift_dynamicCastClassUnconditional();
    outlined init with copy of TabEntry((uint64_t)&v135, (uint64_t)v137);
    if (*v117)
    {
      memcpy(v134, v137, sizeof(v134));
      outlined init with copy of AdaptableTabView.BodyContent(v105, v107, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
      id v54 = v35;
      id v55 = objc_msgSend(v53, sel__uip_tabElement);
      if (v55)
      {
        unsigned __int8 v56 = v55;
        self;
        uint64_t v57 = (void *)swift_dynamicCastObjCClass();
        if (v57)
        {
          uint64_t v58 = v57;
          id v59 = objc_msgSend(v57, sel__identifier);
          uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v62 = v61;

          if (v60 == *(void *)&v134[24] && *(void *)&v134[32] == v62)
          {
            swift_bridgeObjectRelease();
            uint64_t v7 = v95;
LABEL_58:
            uint64_t v73 = v107;
            specialized UIHostingController.updateGroup(_:using:customization:environment:coordinator:)(v58, v134, v107, v111, v112, v7);

            _s2os6LoggerVSgWOhTm_1(v73, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
            outlined destroy of TabItemGroup((uint64_t)v134);
            uint64_t v18 = v110;
            goto LABEL_64;
          }
          char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v7 = v95;
          if (v72) {
            goto LABEL_58;
          }
        }
      }
      outlined init with copy of TabItemGroup((uint64_t)v134, (uint64_t)v132);
      *(unsigned char *)uint64_t v102 = 1;
      specialized UIHostingController.createBridgedTab(using:coordinator:)((uint64_t)v132, v7);
      outlined destroy of TabEntry((uint64_t)v132);
      self;
      uint64_t v58 = (void *)swift_dynamicCastObjCClassUnconditional();
      objc_msgSend(v53, sel__uip_setTabElement_, v58);
      goto LABEL_58;
    }
    *(_OWORD *)&v132[64] = *(_OWORD *)&v137[64];
    *(_OWORD *)&v132[80] = *(_OWORD *)&v137[80];
    *(void *)&v132[96] = *(void *)&v137[96];
    *(_OWORD *)uint64_t v132 = *(_OWORD *)v137;
    *(_OWORD *)&v132[16] = *(_OWORD *)&v137[16];
    *(_OWORD *)&v132[32] = *(_OWORD *)&v137[32];
    *(_OWORD *)&v132[48] = *(_OWORD *)&v137[48];
    outlined init with copy of AdaptableTabView.BodyContent(v105, v106, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
    id v63 = v35;
    id v64 = objc_msgSend(v53, sel__uip_tabElement);
    if (!v64) {
      goto LABEL_60;
    }
    id v65 = v64;
    id v66 = objc_msgSend(v64, sel__identifier);
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v69 = v68;

    if (v67 == TabItem.platformIdentifier.getter() && v69 == v70)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v71 & 1) == 0)
      {

        uint64_t v18 = v110;
LABEL_60:
        id v65 = specialized UIHostingController.createBridgedTab(using:)((uint64_t)v132);
        self;
        int v74 = (void *)swift_dynamicCastObjCClass();
        if (v74) {
          id v75 = v65;
        }
        objc_msgSend(v53, sel__uip_setTabElement_, v74);

        goto LABEL_63;
      }
    }
    uint64_t v18 = v110;
LABEL_63:
    uint64_t v76 = v106;
    specialized UIHostingController.updateProperties(on:using:customization:environment:coordinator:)(v65, (uint64_t)v132, v106, v111, v112);

    _s2os6LoggerVSgWOhTm_1(v76, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
    outlined destroy of TabItem((uint64_t)v132);
LABEL_64:
    if (v116 == v108)
    {
      uint64_t v77 = v98;
      outlined init with copy of AdaptableTabView.BodyContent(v96, v98, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
      type metadata accessor for Binding<SearchFieldState>(0);
      char v79 = 1;
      int v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 48))(v77, 1, v78);
      _s2os6LoggerVSgWOhTm_1(v77, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
      unint64_t v30 = v115;
      if (v80 != 1)
      {
        if (*(unsigned char *)(v90 + 8))
        {
          char v79 = 2;
        }
        else if (*(void *)v90 == v108)
        {
          char v79 = 2;
        }
        else
        {
          char v79 = 1;
        }
      }
      *(void *)uint64_t v137 = v111;
      *(void *)&v137[8] = v112;
      uint64_t v81 = v101;
      swift_bridgeObjectRetain();
      specialized TabViewCoordinator_Phone.setRootView(on:element:searchAdjustment:selectionInfo:environment:transaction:)((uint64_t)v53, (uint64_t)&v135, v79, v97, v81, (uint64_t *)v137, v99);

      swift_bridgeObjectRelease();
      outlined destroy of TabEntry((uint64_t)&v135);
    }
    else
    {
      outlined destroy of TabEntry((uint64_t)&v135);

      unint64_t v30 = v115;
    }
LABEL_9:
    char v29 = v118;
  }
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  swift_endAccess();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized TabViewCoordinator_Phone.updateHosts<A, B>(_:tabs:selected:environment:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v100 = a7;
  uint64_t v95 = a2;
  uint64_t v96 = a6;
  uint64_t v92 = a5;
  uint64_t v93 = a1;
  uint64_t v104 = a3;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v108 = (uint64_t)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v118 = (uint64_t)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v117 = (uint64_t)&v92 - v21;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = (uint64_t *)(v12 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selectionCache);
  swift_beginAccess();
  uint64_t v26 = *v25;
  if (!v26) {
    goto LABEL_75;
  }
  if (!*(void *)(v26 + 16)) {
    goto LABEL_75;
  }
  unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(a9);
  if ((v28 & 1) == 0) {
    goto LABEL_75;
  }
  uint64_t v107 = a12;
  uint64_t v122 = a11;
  uint64_t v121 = a10;
  char v29 = (void *)(*(void *)(v26 + 56) + 32 * v27);
  uint64_t v119 = v29[1];
  uint64_t v30 = v29[3];
  uint64_t v106 = v29[2];
  swift_endAccess();
  char v151 = 0;
  uint64_t v31 = v13 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_customization;
  uint64_t v32 = v13 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchState;
  uint64_t v99 = v13 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchIndex;
  uint64_t v109 = v30;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v116 = v31;
  swift_beginAccess();
  uint64_t v105 = v32;
  swift_beginAccess();
  uint64_t v101 = 0;
  int64_t v120 = a4 >> 1;
  int64_t v112 = a8 >> 1;
  uint64_t v94 = &v146[8];
  BOOL v33 = v145;
  uint64_t v123 = &v150;
  __int16 v124 = &v147[1];
  uint64_t v126 = &v146[264];
  uint64_t v114 = &v141[48];
  int v110 = &v142;
  *(void *)&long long v34 = 136315138;
  long long v98 = v34;
  uint64_t v97 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v35 = v104;
  uint64_t v111 = v100;
  int v113 = v24;
  uint64_t v103 = v13;
  unint64_t v115 = v145;
  while (1)
  {
    if (v151)
    {
      uint64_t v127 = v35;
      goto LABEL_15;
    }
    uint64_t v36 = v120;
    if (v35 == v120) {
      goto LABEL_14;
    }
    if (v35 < v104 || v35 >= v120) {
      break;
    }
    uint64_t v37 = v24;
    uint64_t v38 = v13;
    uint64_t v36 = v35 + 1;
    uint64_t v39 = v111;
    if (v111 == v112)
    {
      uint64_t v13 = v38;
      uint64_t v24 = v37;
LABEL_14:
      char v151 = 1;
      uint64_t v127 = v36;
LABEL_15:
      memset(v147, 0, 281);
      goto LABEL_16;
    }
    if (v111 < v100 || v111 >= v112) {
      goto LABEL_73;
    }
    unsigned __int8 v56 = *(void **)(v95 + 8 * v35);
    *(void *)double v146 = v56;
    outlined init with copy of TabEntry(v96 + 272 * v111, (uint64_t)v94);
    memcpy(v33, v146, 0x111uLL);
    uint64_t v57 = v101 + 1;
    if (__OFADD__(v101, 1)) {
      goto LABEL_74;
    }
    uint64_t v111 = v39 + 1;
    v147[0] = v101;
    memcpy(v124, v33, 0x111uLL);
    id v58 = v56;
    uint64_t v127 = v36;
    uint64_t v101 = v57;
    uint64_t v13 = v38;
    uint64_t v24 = v37;
LABEL_16:
    outlined init with take of Binding<TabViewCustomization>((uint64_t)v147, (uint64_t)&v148, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: (UIViewController, TabEntry))?);
    int v40 = v149;
    if (!v149)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      return swift_unknownObjectRelease();
    }
    uint64_t v41 = v148;
    v147[0] = v149;
    uint64_t v42 = (uint64_t)v124;
    outlined init with take of TabEntry((uint64_t)v123, (uint64_t)v124);
    outlined init with take of TabEntry(v42, (uint64_t)&v144);
    outlined init with copy of TabEntry((uint64_t)&v144, (uint64_t)v146);
    if (*v126)
    {
      memcpy(v141, v146, sizeof(v141));
      _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)v114, (uint64_t)v143, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
      if (*(void *)&v143[24])
      {
        uint64_t v134 = *(void *)&v143[88];
        uint64_t v43 = one-time initialization token for defaultValue;
        swift_bridgeObjectRetain();
        if (v43 != -1) {
          swift_once();
        }
        LOWORD(v128) = static TabOptions.TraitKey.defaultValue;
        BYTE2(v128) = byte_1E90FC582;
        long long v129 = *(_OWORD *)&qword_1E90FC588;
        __int16 v130 = word_1E90FC598;
        char v131 = byte_1E90FC59A;
        uint64_t v132 = qword_1E90FC5A0;
        __int16 v133 = word_1E90FC5A8;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        swift_bridgeObjectRelease();
        char v44 = BYTE1(v135);
        outlined consume of TabCustomizationID?(v136, *((uint64_t *)&v136 + 1), v137);
        swift_bridgeObjectRelease();
        outlined destroy of TabItemGroup((uint64_t)v141);
        outlined destroy of TabItem((uint64_t)v143);
        if (v44) {
          goto LABEL_5;
        }
      }
      else
      {
        outlined destroy of TabItemGroup((uint64_t)v141);
        outlined destroy of PlatformItem.SelectionContent?((uint64_t)v143, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
      }
    }
    else
    {
      *(_OWORD *)&v141[64] = *(_OWORD *)&v146[64];
      *(_OWORD *)&v141[80] = *(_OWORD *)&v146[80];
      *(void *)&v141[96] = *(void *)&v146[96];
      *(_OWORD *)uint64_t v141 = *(_OWORD *)v146;
      *(_OWORD *)&v141[16] = *(_OWORD *)&v146[16];
      *(_OWORD *)&v141[32] = *(_OWORD *)&v146[32];
      *(_OWORD *)&v141[48] = *(_OWORD *)&v146[48];
      uint64_t v128 = *(void *)&v146[88];
      uint64_t v45 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v45 != -1) {
        swift_once();
      }
      LOWORD(v135) = static TabOptions.TraitKey.defaultValue;
      BYTE2(v135) = byte_1E90FC582;
      long long v136 = *(_OWORD *)&qword_1E90FC588;
      __int16 v137 = word_1E90FC598;
      char v138 = byte_1E90FC59A;
      uint64_t v139 = qword_1E90FC5A0;
      __int16 v140 = word_1E90FC5A8;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      int v46 = v143[1];
      outlined consume of TabCustomizationID?(*(uint64_t *)&v143[8], *(uint64_t *)&v143[16], v143[24]);
      swift_bridgeObjectRelease();
      outlined destroy of TabItem((uint64_t)v141);
      if (v46 == 1)
      {
LABEL_5:
        outlined destroy of TabEntry((uint64_t)&v144);

        goto LABEL_6;
      }
    }
    static Log.tabView.getter();
    uint64_t v47 = type metadata accessor for Logger();
    uint64_t v48 = *(void *)(v47 - 8);
    int v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48))(v24, 1, v47);
    uint64_t v125 = v41;
    if (v49 == 1)
    {
      _s2os6LoggerVSgWOhTm_1((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for Logger?);
      long long v50 = v126;
    }
    else
    {
      outlined init with copy of TabEntry((uint64_t)&v144, (uint64_t)v146);
      unint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        uint64_t v135 = v102;
        *(_DWORD *)uint64_t v53 = v98;
        outlined init with copy of TabEntry((uint64_t)v146, (uint64_t)v141);
        if (*(unsigned char *)v110)
        {
          memcpy(v143, v141, sizeof(v143));
          uint64_t v54 = *(void *)&v143[24];
          unint64_t v55 = *(void *)&v143[32];
          outlined copy of TabCustomizationID.Base();
          outlined destroy of TabItemGroup((uint64_t)v143);
        }
        else
        {
          *(_OWORD *)&v143[64] = *(_OWORD *)&v141[64];
          *(_OWORD *)&v143[80] = *(_OWORD *)&v141[80];
          *(void *)&v143[96] = *(void *)&v141[96];
          *(_OWORD *)uint64_t v143 = *(_OWORD *)v141;
          *(_OWORD *)&v143[16] = *(_OWORD *)&v141[16];
          *(_OWORD *)&v143[32] = *(_OWORD *)&v141[32];
          *(_OWORD *)&v143[48] = *(_OWORD *)&v141[48];
          uint64_t v54 = TabItem.platformIdentifier.getter();
          unint64_t v55 = v59;
          outlined destroy of TabItem((uint64_t)v143);
        }
        *(void *)(v53 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v135);
        swift_bridgeObjectRelease();
        outlined destroy of TabEntry((uint64_t)v146);
        _os_log_impl(&dword_1872C6000, v51, v52, "Updating tab %s", (uint8_t *)v53, 0xCu);
        uint64_t v60 = v102;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v60, -1, -1);
        MEMORY[0x18C119C60](v53, -1, -1);

        uint64_t v13 = v103;
        uint64_t v24 = v113;
      }
      else
      {

        outlined destroy of TabEntry((uint64_t)v146);
      }
      (*(void (**)(char *, uint64_t))(v48 + 8))(v24, v47);
      uint64_t v41 = v125;
      long long v50 = v126;
    }
    _s7SwiftUI19UIHostingControllerCyAA7TabItemV8RootViewVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
    uint64_t v61 = (void *)swift_dynamicCastClassUnconditional();
    outlined init with copy of TabEntry((uint64_t)&v144, (uint64_t)v146);
    if (*v50)
    {
      memcpy(v143, v146, sizeof(v143));
      outlined init with copy of AdaptableTabView.BodyContent(v116, v118, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
      id v62 = v40;
      id v63 = objc_msgSend(v61, sel__uip_tabElement);
      if (v63)
      {
        id v64 = v63;
        self;
        id v65 = (void *)swift_dynamicCastObjCClass();
        if (v65)
        {
          id v66 = v65;
          uint64_t v67 = v41;
          id v68 = objc_msgSend(v65, sel__identifier);
          uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v71 = v70;

          if (v69 == *(void *)&v143[24] && *(void *)&v143[32] == v71)
          {
            swift_bridgeObjectRelease();
            uint64_t v41 = v67;
            uint64_t v13 = v103;
LABEL_60:
            uint64_t v85 = v118;
            specialized UIHostingController.updateGroup(_:using:customization:environment:coordinator:)(v66, v143, v118, v121, v122, v13);

            _s2os6LoggerVSgWOhTm_1(v85, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
            outlined destroy of TabItemGroup((uint64_t)v143);
            uint64_t v24 = v113;
            goto LABEL_61;
          }
          char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v41 = v67;
          uint64_t v13 = v103;
          if (v84) {
            goto LABEL_60;
          }
        }
      }
      outlined init with copy of TabItemGroup((uint64_t)v143, (uint64_t)v141);
      *(unsigned char *)int v110 = 1;
      specialized UIHostingController.createBridgedTab(using:coordinator:)((uint64_t)v141, v13);
      outlined destroy of TabEntry((uint64_t)v141);
      self;
      id v66 = (void *)swift_dynamicCastObjCClassUnconditional();
      objc_msgSend(v61, sel__uip_setTabElement_, v66);
      goto LABEL_60;
    }
    *(_OWORD *)&v141[64] = *(_OWORD *)&v146[64];
    *(_OWORD *)&v141[80] = *(_OWORD *)&v146[80];
    *(void *)&v141[96] = *(void *)&v146[96];
    *(_OWORD *)uint64_t v141 = *(_OWORD *)v146;
    *(_OWORD *)&v141[16] = *(_OWORD *)&v146[16];
    *(_OWORD *)&v141[32] = *(_OWORD *)&v146[32];
    *(_OWORD *)&v141[48] = *(_OWORD *)&v146[48];
    outlined init with copy of AdaptableTabView.BodyContent(v116, v117, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
    id v72 = v40;
    id v73 = objc_msgSend(v61, sel__uip_tabElement, v92, v93);
    if (!v73) {
      goto LABEL_53;
    }
    id v74 = v73;
    id v75 = objc_msgSend(v73, sel__identifier);
    uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v78 = v77;

    if (v76 == TabItem.platformIdentifier.getter() && v78 == v79)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v80 & 1) == 0)
      {

LABEL_53:
        id v74 = specialized UIHostingController.createBridgedTab(using:)((uint64_t)v141);
        self;
        uint64_t v81 = (void *)swift_dynamicCastObjCClass();
        if (v81) {
          id v82 = v74;
        }
        objc_msgSend(v61, sel__uip_setTabElement_, v81);
      }
    }
    uint64_t v83 = v117;
    specialized UIHostingController.updateProperties(on:using:customization:environment:coordinator:)(v74, (uint64_t)v141, v117, v121, v122);

    _s2os6LoggerVSgWOhTm_1(v83, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
    outlined destroy of TabItem((uint64_t)v141);
    uint64_t v41 = v125;
LABEL_61:
    if (v41 == v119)
    {
      uint64_t v86 = v108;
      outlined init with copy of AdaptableTabView.BodyContent(v105, v108, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
      type metadata accessor for Binding<SearchFieldState>(0);
      char v88 = 1;
      int v89 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 48))(v86, 1, v87);
      _s2os6LoggerVSgWOhTm_1(v86, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
      if (v89 != 1)
      {
        if (*(unsigned char *)(v99 + 8))
        {
          char v88 = 2;
        }
        else if (*(void *)v99 == v119)
        {
          char v88 = 2;
        }
        else
        {
          char v88 = 1;
        }
      }
      *(void *)double v146 = v121;
      *(void *)&v146[8] = v122;
      uint64_t v90 = v109;
      swift_bridgeObjectRetain();
      specialized TabViewCoordinator_Phone.setRootView(on:element:searchAdjustment:selectionInfo:environment:transaction:)((uint64_t)v61, (uint64_t)&v144, v88, v106, v90, (uint64_t *)v146, v107);

      swift_bridgeObjectRelease();
      outlined destroy of TabEntry((uint64_t)&v144);
    }
    else
    {
      outlined destroy of TabEntry((uint64_t)&v144);
    }
    BOOL v33 = v115;
LABEL_6:
    uint64_t v35 = v127;
  }
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  swift_endAccess();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int_optional __swiftcall TabViewCoordinator_Phone.updatedSelection(didSelect:viewController:selectionCache:)(UITabBarController *didSelect, UIViewController *viewController, Swift::OpaquePointer_optional selectionCache)
{
  uint64_t v4 = v3;
  rawuint64_t Value = selectionCache.value._rawValue;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    uint64_t v13 = viewController;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      long long v34 = didSelect;
      uint64_t v35 = viewController;
      uint64_t v36 = rawValue;
      uint64_t v37 = v4;
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v40 = v33;
      *(_DWORD *)uint64_t v16 = 136315138;
      id v17 = [(UIViewController *)v13 _uip_tabElement];
      uint64_t v18 = v17;
      if (v17)
      {
        id v19 = objc_msgSend(v17, sel_title);

        uint64_t v18 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v38 = (uint64_t)v18;
      uint64_t v39 = v21;
      type metadata accessor for TabItem?(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v14, v15, "UITabBarController, didSelect viewController. Element:\n%s", v16, 0xCu);
      uint64_t v24 = v33;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v24, -1, -1);
      MEMORY[0x18C119C60](v16, -1, -1);

      rawuint64_t Value = v36;
      didSelect = v34;
      viewController = v35;
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  NSUInteger v25 = [(UITabBarController *)didSelect selectedIndex];
  if (v25 == NSNotFound.getter())
  {
    Swift::Int v26 = 0;
    Swift::Bool v27 = 1;
  }
  else
  {
    id v28 = [(UIViewController *)viewController _uip_tabElement];
    TabViewCoordinator_Phone.getIndex(selectedElement:selectionCache:)(v28, (uint64_t)rawValue);
    Swift::Int v26 = v29;
    char v31 = v30;

    Swift::Bool v27 = v31 & 1;
  }
  Swift::Int v32 = v26;
  result.value = v32;
  result.is_nil = v27;
  return result;
}

uint64_t TabViewCoordinator_Phone.acceptDropItems(from:onto:tabCache:)(uint64_t a1, void *a2, uint64_t a3)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *((void *)&v30[0] + 1) = a1;
      uint64_t v14 = v13;
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1872C6000, v11, v12, "acceptDropItems:fromSession:", v13, 2u);
      MEMORY[0x18C119C60](v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  TabViewCoordinator_Phone.getElement(for:tabCache:)(a2, a3, (uint64_t)&v33);
  if (!*((void *)&v34 + 1)) {
    return outlined destroy of PlatformItem.SelectionContent?((uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
  }
  v40[4] = v37;
  v40[5] = v38;
  uint64_t v41 = v39;
  v40[0] = v33;
  v40[1] = v34;
  v40[2] = v35;
  v40[3] = v36;
  uint64_t v15 = *((void *)&v38 + 1);
  uint64_t v32 = *((void *)&v38 + 1);
  long long v31 = 0u;
  memset(&v30[1], 0, 32);
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v16 = v33;
  if ((void)v33)
  {
    uint64_t v17 = *((void *)&v33 + 1);
    uint64_t v18 = v34;
    char v19 = BYTE8(v34);
    v30[0] = v35;
    swift_getObjectType();
    uint64_t v20 = UIDropSession.itemProviders(for:)(v16);
    uint64_t v32 = v15;
    uint64_t v21 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v21 != -1) {
      swift_once();
    }
    LOWORD(v30[1]) = static TabOptions.TraitKey.defaultValue;
    BYTE2(v30[1]) = byte_1E90FC582;
    *(_OWORD *)((char *)&v30[1] + 8) = *(_OWORD *)&qword_1E90FC588;
    WORD4(v30[2]) = word_1E90FC598;
    BYTE10(v30[2]) = byte_1E90FC59A;
    *(void *)&long long v31 = qword_1E90FC5A0;
    WORD4(v31) = word_1E90FC5A8;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = *((void *)&v33 + 1);
    uint64_t v23 = v34;
    int v24 = BYTE8(v34);
    outlined copy of TabCustomizationID?(*((uint64_t *)&v33 + 1), v34, BYTE8(v34));
    outlined consume of TabCustomizationID?(v22, v23, v24);
    swift_bridgeObjectRelease();
    if (v24 == 255) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v22;
    }
    if (v24 == 255) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = v23;
    }
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v16;
    *(void *)(v27 + 24) = v17;
    *(void *)(v27 + 32) = v18;
    *(unsigned char *)(v27 + 40) = v19;
    *(_DWORD *)(v27 + 41) = v33;
    *(_DWORD *)(v27 + 44) = *(_DWORD *)((char *)&v33 + 3);
    uint64_t v28 = *((void *)&v30[0] + 1);
    *(void *)(v27 + 48) = *(void *)&v30[0];
    *(void *)(v27 + 56) = v28;
    *(void *)(v27 + 64) = v25;
    *(void *)(v27 + 72) = v26;
    *(void *)(v27 + 80) = v20;
    swift_bridgeObjectRetain();
    outlined copy of Binding<NavigationSplitViewColumn>?(v17, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    outlined consume of Binding<NavigationSplitViewColumn>?(v17, v18);
    swift_release();
  }
  return outlined destroy of TabItem((uint64_t)v40);
}

void TabViewCoordinator_Phone.mayHaveCustomizedTabBarVisibility(of:customization:tabCache:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v76 = a3;
  uint64_t v69 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1F4188790](v69);
  id v68 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v72 = (uint64_t)&v67 - v7;
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v73 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  os_log_type_t v12 = (char *)&v67 - v11;
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v78 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!(a1 >> 62))
  {
    if (*(uint64_t *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 1) {
      return;
    }
    goto LABEL_3;
  }
  id v65 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  uint64_t v66 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v16 = v65;
  if (v66 >= 1)
  {
LABEL_3:
    uint64_t v77 = v16;
    outlined init with copy of AdaptableTabView.BodyContent(a2, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v78) == 1)
    {
      uint64_t v17 = type metadata accessor for Binding<TabViewCustomization>?;
      uint64_t v18 = (uint64_t)v12;
LABEL_63:
      _s2os6LoggerVSgWOhTm_1(v18, (uint64_t (*)(void))v17);
      return;
    }
    uint64_t v19 = (uint64_t)v77;
    outlined init with take of Binding<TabViewCustomization>((uint64_t)v12, (uint64_t)v77, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
    if (!v76)
    {
      uint64_t v17 = type metadata accessor for Binding<TabViewCustomization>;
      uint64_t v18 = v19;
      goto LABEL_63;
    }
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      if (!v20)
      {
LABEL_62:
        swift_bridgeObjectRelease();
        uint64_t v17 = type metadata accessor for Binding<TabViewCustomization>;
        uint64_t v18 = (uint64_t)v77;
        goto LABEL_63;
      }
    }
    else
    {
      uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v20) {
        goto LABEL_62;
      }
    }
    if (v20 < 1)
    {
      __break(1u);
      return;
    }
    uint64_t v21 = 0;
    unint64_t v70 = a1;
    uint64_t v71 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56);
    id v74 = &v92;
    unint64_t v75 = a1 & 0xC000000000000001;
    uint64_t v67 = v20;
    while (1)
    {
      if (v75) {
        id v22 = (id)MEMORY[0x18C117680](v21, a1);
      }
      else {
        id v22 = *(id *)(a1 + 8 * v21 + 32);
      }
      uint64_t v23 = v22;
      self;
      uint64_t v24 = swift_dynamicCastObjCClass();
      uint64_t v25 = v76;
      if (v24)
      {
        uint64_t v26 = (void *)v24;
        id v27 = v23;
        id v28 = objc_msgSend(v26, sel__children);
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
        uint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        char v30 = v23;
        unint64_t v31 = a1;
        uint64_t v32 = v20;
        uint64_t v33 = v73;
        outlined init with copy of AdaptableTabView.BodyContent((uint64_t)v77, v73, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
        (*v71)(v33, 0, 1, v78);
        TabViewCoordinator_Phone.mayHaveCustomizedTabBarVisibility(of:customization:tabCache:)(v29, v33, v25);

        swift_bridgeObjectRelease();
        uint64_t v34 = v33;
        uint64_t v20 = v32;
        a1 = v31;
        uint64_t v23 = v30;
        _s2os6LoggerVSgWOhTm_1(v34, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
      }
      id v35 = objc_msgSend(v23, sel__identifier, v67);
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;

      if (*(void *)(v25 + 16) && (unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v38), (v40 & 1) != 0))
      {
        outlined init with copy of TabEntry(*(void *)(v25 + 56) + 272 * v39, (uint64_t)v91);
      }
      else
      {
        memset(v91, 0, sizeof(v91));
        unsigned __int8 v92 = -1;
      }
      swift_bridgeObjectRelease();
      if (v92 != 255) {
        break;
      }

      outlined destroy of PlatformItem.SelectionContent?((uint64_t)v91, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, MEMORY[0x1E4FBB718]);
LABEL_14:
      if (v20 == ++v21) {
        goto LABEL_62;
      }
    }
    outlined init with take of TabEntry((uint64_t)v91, (uint64_t)v93);
    outlined init with copy of TabEntry((uint64_t)v93, (uint64_t)v91);
    if (*v74 == 1)
    {
      outlined destroy of TabEntry((uint64_t)v91);
      if ((objc_msgSend(v23, sel_hasVisiblePlacement) & 1) == 0)
      {
        char v41 = 0;
        __int16 v42 = 2;
        goto LABEL_39;
      }
LABEL_41:
      outlined destroy of TabEntry((uint64_t)v93);

      a1 = v70;
      goto LABEL_14;
    }
    v90[4] = *(_OWORD *)&v91[64];
    v90[5] = *(_OWORD *)&v91[80];
    *(void *)&v90[6] = *(void *)&v91[96];
    v90[0] = *(_OWORD *)v91;
    v90[1] = *(_OWORD *)&v91[16];
    v90[2] = *(_OWORD *)&v91[32];
    v90[3] = *(_OWORD *)&v91[48];
    uint64_t v86 = *(void *)&v91[88];
    uint64_t v79 = MEMORY[0x1E4FBC860];
    ViewTraitCollection.value<A>(for:defaultValue:)();
    uint64_t v43 = *(void *)(*(void *)v91 + 16);
    swift_bridgeObjectRelease();
    outlined init with copy of TabItem((uint64_t)v90, (uint64_t)v91);
    if (v43)
    {
      uint64_t v86 = *(void *)&v91[88];
      LOBYTE(v85) = 0;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      char v44 = v79;
      outlined destroy of TabItem((uint64_t)v91);
      outlined init with copy of TabItem((uint64_t)v90, (uint64_t)v91);
      char v45 = 0;
      if ((v44 & 1) == 0)
      {
LABEL_33:
        outlined destroy of TabItem((uint64_t)v91);
        v91[0] = 0;
        int v46 = TabItem.clientDefaultVisibility(for:)(v91);
        if (v46) {
          char v45 = v46 == 1;
        }
        outlined destroy of TabItem((uint64_t)v90);
        unsigned int v47 = objc_msgSend(v23, sel_hasVisiblePlacement);
        if ((v45 & 1) != v47)
        {
          char v41 = v47;
          if (v47) {
            __int16 v42 = 1;
          }
          else {
            __int16 v42 = 2;
          }
LABEL_39:
          outlined init with copy of TabEntry((uint64_t)v93, (uint64_t)v91);
          if (*v74)
          {
            memcpy(v90, v91, 0x108uLL);
            uint64_t v48 = *((void *)&v90[1] + 1);
            uint64_t v49 = *(void *)&v90[2];
            char v50 = BYTE8(v90[2]);
            outlined copy of TabCustomizationID.Base();
            outlined destroy of TabItemGroup((uint64_t)v90);
          }
          else
          {
            v90[4] = *(_OWORD *)&v91[64];
            v90[5] = *(_OWORD *)&v91[80];
            *(void *)&v90[6] = *(void *)&v91[96];
            v90[0] = *(_OWORD *)v91;
            v90[1] = *(_OWORD *)&v91[16];
            v90[2] = *(_OWORD *)&v91[32];
            v90[3] = *(_OWORD *)&v91[48];
            if ((TabItem.needsCustomizationIDForEnablement.getter() & 1) == 0) {
              goto LABEL_47;
            }
            uint64_t v85 = *((void *)&v90[5] + 1);
            uint64_t v51 = one-time initialization token for defaultValue;
            swift_bridgeObjectRetain();
            if (v51 != -1) {
              swift_once();
            }
            LOWORD(v79) = static TabOptions.TraitKey.defaultValue;
            BYTE2(v79) = byte_1E90FC582;
            long long v80 = *(_OWORD *)&qword_1E90FC588;
            __int16 v81 = word_1E90FC598;
            char v82 = byte_1E90FC59A;
            uint64_t v83 = qword_1E90FC5A0;
            __int16 v84 = word_1E90FC5A8;
            ViewTraitCollection.value<A>(for:defaultValue:)();
            swift_bridgeObjectRelease();
            uint64_t v48 = v87;
            uint64_t v49 = v88;
            int v52 = v89;
            outlined copy of TabCustomizationID?(v87, v88, v89);
            outlined consume of TabCustomizationID?(v48, v49, v52);
            swift_bridgeObjectRelease();
            if (v52 == 255)
            {
LABEL_47:
              uint64_t v48 = TabItem.platformIdentifier.getter();
              uint64_t v49 = v53;
              char v50 = 1;
            }
            else
            {
              char v50 = v52 & 1;
            }
            outlined destroy of TabItem((uint64_t)v90);
          }
          uint64_t v54 = v72;
          MEMORY[0x18C113DA0](v78);
          uint64_t v55 = *(void *)(v54 + *(int *)(v69 + 20));
          if (*(void *)(v55 + 16))
          {
            outlined copy of TabCustomizationID.Base();
            unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v49, v50);
            if (v57)
            {
              int v58 = *(unsigned __int8 *)(*(void *)(v55 + 56) + 2 * v56 + 1);
              outlined consume of TabCustomizationID.Base();
              outlined consume of TabCustomizationID.Base();
              if (v58)
              {
                if (v58 == 1)
                {
                  _s2os6LoggerVSgWOhTm_1(v72, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
                  if (v41)
                  {
LABEL_61:
                    outlined destroy of TabEntry((uint64_t)v93);

                    goto LABEL_59;
                  }
                }
                else
                {
                  _s2os6LoggerVSgWOhTm_1(v72, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
                  if ((v41 & 1) == 0) {
                    goto LABEL_61;
                  }
                }
LABEL_58:
                uint64_t v59 = TabEntry.resolvedCustomizationID.getter();
                uint64_t v61 = v60;
                char v63 = v62 & 1;
                uint64_t v64 = (uint64_t)v68;
                MEMORY[0x18C113DA0](v78);
                TabViewCustomization.subscript.setter(v42, v59, v61, v63);
                dispatch thunk of AnyLocation.set(_:transaction:)();
                _s2os6LoggerVSgWOhTm_1(v64, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);

                outlined destroy of TabEntry((uint64_t)v93);
LABEL_59:
                a1 = v70;
                uint64_t v20 = v67;
                goto LABEL_14;
              }
LABEL_57:
              _s2os6LoggerVSgWOhTm_1(v72, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
              goto LABEL_58;
            }
            outlined consume of TabCustomizationID.Base();
          }
          outlined consume of TabCustomizationID.Base();
          goto LABEL_57;
        }
        goto LABEL_41;
      }
    }
    else
    {
      outlined destroy of TabItem((uint64_t)v91);
      outlined init with copy of TabItem((uint64_t)v90, (uint64_t)v91);
    }
    uint64_t v86 = *(void *)&v91[88];
    char v45 = ViewTraitCollection.isAuxiliaryContent.getter() ^ 1;
    goto LABEL_33;
  }
}

id TabViewCoordinator_Phone.swipeActionsConfiguration(for:edge:tabCache:)(void *a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int v7 = a2 & 1;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    id v13 = a1;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    int v16 = v15;
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v33 = a1;
      uint64_t v18 = v17;
      uint64_t v32 = swift_slowAlloc();
      v38[0] = v32;
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t v35 = v4;
      LOBYTE(v37[0]) = v7;
      int v36 = v7;
      uint64_t v19 = String.init<A>(describing:)();
      uint64_t v34 = a3;
      v37[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      id v21 = objc_msgSend(v13, sel_title, v18 + 14);
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int v31 = v16;
      unint64_t v24 = v23;

      a3 = v34;
      v37[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v38);
      LOBYTE(v7) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v14, (os_log_type_t)v31, "%s swipeActionsConfiguration tab: %s", (uint8_t *)v18, 0x16u);
      uint64_t v25 = v32;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v25, -1, -1);
      uint64_t v26 = v18;
      a1 = v33;
      MEMORY[0x18C119C60](v26, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  TabViewCoordinator_Phone.getElement(for:tabCache:)(a1, a3, (uint64_t)v38);
  _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)v38, (uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  if (v37[3])
  {
    id v27 = TabItem.swipeActionsConfiguration(for:)(v7);
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)v38, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
    outlined destroy of TabItem((uint64_t)v37);
  }
  else
  {
    id v28 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)v38, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, v28);
    return 0;
  }
  return v27;
}

void (*TabViewCoordinator_Phone.dragSessionItems(for:tabCache:)(void *a1, uint64_t a2))(void *__return_ptr, uint64_t)
{
  void (*v27)(void *__return_ptr, uint64_t);
  uint64_t v28;
  void (*v29)(void *__return_ptr, uint64_t);
  uint64_t v30;
  void (*v31)(void *__return_ptr, uint64_t);
  uint64_t v33;
  uint8_t *v34;
  os_log_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42[2])(void *__return_ptr, uint64_t);
  void v43[13];
  uint64_t v44[8];

  uint64_t v3 = v2;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    id v11 = a1;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    int v14 = v13;
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v38 = v3;
      uint64_t v15 = swift_slowAlloc();
      int v36 = v14;
      int v16 = (uint8_t *)v15;
      uint64_t v37 = swift_slowAlloc();
      v44[0] = v37;
      uint64_t v35 = v12;
      uint64_t v34 = v16;
      *(_DWORD *)int v16 = 136315138;
      id v17 = objc_msgSend(v11, sel_title, v16 + 4);
      uint64_t v18 = a1;
      uint64_t v19 = a2;
      id v20 = v17;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;

      a2 = v19;
      a1 = v18;
      v43[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v24 = v35;
      uint64_t v25 = v34;
      _os_log_impl(&dword_1872C6000, v35, (os_log_type_t)v36, "dragSessionItems: forTab: %s", v34, 0xCu);
      uint64_t v26 = v37;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v26, -1, -1);
      MEMORY[0x18C119C60](v25, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  TabViewCoordinator_Phone.getElement(for:tabCache:)(a1, a2, (uint64_t)v44);
  _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)v44, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  if (!v43[3])
  {
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
    goto LABEL_13;
  }
  char v41 = v43[11];
  char v40 = 0;
  unint64_t v39 = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  id v27 = v42[0];
  if (!v42[0])
  {
    outlined destroy of TabItem((uint64_t)v43);
    goto LABEL_13;
  }
  id v28 = outlined destroy of TabItem((uint64_t)v43);
  v27(v42, v28);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v27);
  uint64_t v29 = v42[0];
  if (!v42[0])
  {
LABEL_13:
    int v31 = (void (*)(void *__return_ptr, uint64_t))MEMORY[0x1E4FBC860];
    goto LABEL_14;
  }
  type metadata accessor for TabItem?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_188351940;
  *(void *)(v30 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1710]), sel_initWithItemProvider_, v29);
  v42[0] = (void (*)(void *__return_ptr, uint64_t))v30;
  specialized Array._endMutation()();
  int v31 = v42[0];

LABEL_14:
  outlined destroy of PlatformItem.SelectionContent?((uint64_t)v44, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
  return v31;
}

unint64_t TabViewCoordinator_Phone.contextMenu(for:tabCache:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    id v11 = a1;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v29 = v3;
      int v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v31[0] = v26;
      id v27 = a1;
      uint64_t v25 = v14;
      *(_DWORD *)int v14 = 136315138;
      v24[1] = v14 + 4;
      id v15 = objc_msgSend(v11, sel_title);
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = a2;
      unint64_t v18 = v17;

      v30[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v31);
      a1 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a2 = v28;
      swift_bridgeObjectRelease();
      uint64_t v19 = v25;
      _os_log_impl(&dword_1872C6000, v12, v13, "contextMenu: forTab: %s", v25, 0xCu);
      uint64_t v20 = v26;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v20, -1, -1);
      MEMORY[0x18C119C60](v19, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  TabViewCoordinator_Phone.getElement(for:tabCache:)(a1, a2, (uint64_t)v31);
  _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)v31, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  if (v30[3])
  {
    unint64_t v21 = (unint64_t)TabItem.menuConfiguration()();
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
    outlined destroy of TabItem((uint64_t)v30);
  }
  else
  {
    unint64_t v22 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, v22);
    return 0;
  }
  return v21;
}

void specialized UIHostingController.updateTabElementCreatingIfNeeded(using:customization:environment:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  id v10 = objc_msgSend(v5, sel__uip_tabElement);
  if (!v10)
  {
LABEL_8:
    id v21 = specialized UIHostingController.createBridgedTab(using:)(a1);
    self;
    uint64_t v19 = (void *)swift_dynamicCastObjCClass();
    if (v19) {
      id v20 = v21;
    }
    objc_msgSend(v5, sel__uip_setTabElement_, v19);

    goto LABEL_12;
  }
  id v21 = v10;
  id v11 = objc_msgSend(v10, sel__identifier);
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  if (v12 != TabItem.platformIdentifier.getter() || v14 != v15)
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v18 = v21;
    if (v17) {
      goto LABEL_13;
    }

    goto LABEL_8;
  }
  swift_bridgeObjectRelease_n();
LABEL_12:
  unint64_t v18 = v21;
LABEL_13:
  id v22 = v18;
  specialized UIHostingController.updateProperties(on:using:customization:environment:coordinator:)(v18, a1, a2, a3, a4);
}

uint64_t specialized UIHostingController.updateProperties(on:using:customization:environment:coordinator:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = type metadata accessor for Locale();
  MEMORY[0x1F4188790](v7 - 8);
  _s7SwiftUI19UIHostingControllerCyAA7TabItemV8RootViewVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for IntegerFormatStyle<Int>, (uint64_t (*)(void))lazy protocol witness table accessor for type Int and conformance Int, MEMORY[0x1E4FBB550], MEMORY[0x1E4F27420]);
  MEMORY[0x1F4188790](v8);
  uint64_t v41 = a2;
  uint64_t v9 = *(void *)(a2 + 88);
  char v45 = v9;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  long long v49 = xmmword_188354140;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (v53 >> 1 != 0xFFFFFFFF)
  {
    uint64_t v12 = v52;
    uint64_t v38 = v52;
    uint64_t v39 = v51;
    uint64_t v37 = v54;
    if ((v53 & 0x8000000000000000) != 0)
    {
      char v16 = v53 & 1;
      outlined copy of Text.Storage(v51, v52, v53 & 1);
      swift_bridgeObjectRetain();
      uint64_t v13 = v51;
    }
    else
    {
      static Locale.autoupdatingCurrent.getter();
      lazy protocol witness table accessor for type Int and conformance Int();
      IntegerFormatStyle.init(locale:)();
      lazy protocol witness table accessor for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>();
      uint64_t v13 = Text.init<A>(_:format:)();
      uint64_t v12 = v14;
      char v16 = v15 & 1;
    }
    uint64_t v51 = a4;
    uint64_t v52 = a5;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    char v45 = 0;
    uint64_t v10 = Text.resolveString(in:with:idiom:)();
    uint64_t v11 = v17;
    outlined consume of Text.Storage(v13, v12, v16);
    swift_bridgeObjectRelease();
    outlined consume of BadgeLabel?(v39, v38, v53);
  }
  id v18 = objc_msgSend(a1, sel__badgeValue, v37);
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    unint64_t v23 = v43;
    if (!v11)
    {
      uint64_t v24 = a3;
      if (!v22) {
        goto LABEL_20;
      }
      uint64_t v25 = 0;
      goto LABEL_19;
    }
    uint64_t v24 = a3;
    if (v22)
    {
      if (v10 == v20 && v11 == v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v26)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
LABEL_18:
    uint64_t v25 = (void *)MEMORY[0x18C115780](v10, v11);
LABEL_19:
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel__setBadgeValue_, v25);

    goto LABEL_20;
  }
  unint64_t v23 = v43;
  uint64_t v24 = a3;
  if (v11) {
    goto LABEL_18;
  }
LABEL_20:
  uint64_t v47 = v9;
  uint64_t v27 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v27 != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  PlatformItem.applyAccessibilityProperties(on:item:)(a1);
  type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SpringLoadingBehavior.Key>, (uint64_t)&type metadata for SpringLoadingBehavior.Key, (uint64_t)&protocol witness table for SpringLoadingBehavior.Key, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (a5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  LOBYTE(v46) = v47;
  TabItem.resolvedSpringLoadingBehavior(environmentBehavior:)((SwiftUI::SpringLoadingBehavior)&v46);
  if ((v45 != 2) != objc_msgSend(a1, sel_isSpringLoaded)) {
    objc_msgSend(a1, sel_setSpringLoaded_, v45 != 2);
  }
  uint64_t v46 = v9;
  uint64_t v28 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v28 != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = BYTE2(v47);
  outlined consume of TabCustomizationID?(v48, v49, BYTE8(v49));
  swift_bridgeObjectRelease();
  if (v29 != objc_msgSend(a1, sel_isDisabled)) {
    objc_msgSend(a1, sel_setDisabled_, v29);
  }
  specialized UIHostingController.updateCustomizationProperties(on:using:customization:)(a1, v41, v24);
  uint64_t v30 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v46 = static TabPopoverPresentationsKey.defaultValue;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void *)(v47 + 16);
  swift_bridgeObjectRelease();
  if (v31)
  {
    uint64_t v46 = static TabPopoverPresentationsKey.defaultValue;
    id v32 = v23;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    uint64_t v33 = v47;
    id v34 = v32;
    TabViewCoordinator_Phone.updatePopoverPresentation(presentations:presenter:host:)(v33, (uint64_t)a1, (uint64_t)v32);
    swift_bridgeObjectRelease();
  }
  uint64_t v46 = v9;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  int v35 = v50;
  outlined consume of TabCustomizationID?(v48, v49, BYTE8(v49));
  swift_bridgeObjectRelease();
  if (v35 == 1) {
    specialized UIHostingController.updateTitleImage(on:using:)(a1, (uint64_t)&v51);
  }
  return outlined destroy of PlatformItem((uint64_t)&v51);
}

void specialized UIHostingController.updateTabGroupCreatingIfNeeded(using:customization:environment:coordinator:)(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = objc_msgSend(v5, sel__uip_tabElement);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t v12 = v11;
  self;
  uint64_t v13 = (void *)swift_dynamicCastObjCClass();
  if (!v13) {
    goto LABEL_8;
  }
  uint64_t v14 = v13;
  uint64_t v21 = a4;
  id v15 = objc_msgSend(v13, sel__identifier);
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v18 = v17;

  if ((Class)v16 == a1[3].isa && a1[4].isa == v18)
  {
    swift_bridgeObjectRelease();
    a4 = v21;
    goto LABEL_11;
  }
  char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  a4 = v21;
  if ((v20 & 1) == 0)
  {
LABEL_8:

LABEL_9:
    outlined init with copy of TabItemGroup((uint64_t)a1, (uint64_t)v22);
    v22[264] = 1;
    specialized UIHostingController.createBridgedTab(using:coordinator:)((uint64_t)v22, a5);
    outlined destroy of TabEntry((uint64_t)v22);
    self;
    uint64_t v14 = (void *)swift_dynamicCastObjCClassUnconditional();
    objc_msgSend(v5, sel__uip_setTabElement_, v14);
  }
LABEL_11:
  specialized UIHostingController.updateGroup(_:using:customization:environment:coordinator:)(v14, a1, a2, a3, a4, a5);
}

void specialized UIHostingController.updateGroup(_:using:customization:environment:coordinator:)(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)&a2[6], (uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
  if (*((void *)&v18 + 1))
  {
    unsigned char v24[4] = v21;
    v24[5] = v22;
    uint64_t v25 = v23;
    v24[0] = v17;
    v24[1] = v18;
    void v24[2] = v19;
    v24[3] = v20;
    specialized UIHostingController.updateProperties(on:using:customization:environment:coordinator:)(a1, (uint64_t)v24, a3, a4, a5);
    outlined destroy of TabItem((uint64_t)v24);
  }
  else
  {
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
  }
  int v12 = TabItemGroup.sidebarReorderable.getter();
  if (v12 != objc_msgSend(a1, sel__allowsReordering)) {
    objc_msgSend(a1, sel__setAllowsReordering_, TabItemGroup.sidebarReorderable.getter());
  }
  specialized UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(a1, a2, a3, a4, a5, a6);
  id v13 = objc_msgSend(a1, sel__selectedElement);

  if (!v13)
  {
    id v14 = objc_msgSend(a1, sel__children);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
    uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long v17 = v15;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITabElement);
    type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for [_UITab], &lazy cache variable for type metadata for _UITab, 0x1E4FB2398, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [_UITab] and conformance [A]();
    Sequence.first<A>(ofType:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void **)&v24[0];
    objc_msgSend(a1, sel__setSelectedElement_, *(void *)&v24[0]);
  }
}

uint64_t specialized UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(id a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v382 = a5;
  uint64_t v411 = a6;
  uint64_t v390 = a4;
  uint64_t v391 = a3;
  type metadata accessor for TabViewCustomization?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v371 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TabViewCustomization();
  uint64_t v372 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  v376 = (char *)&v371 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v371 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  long long v18 = (char *)&v371 - v17;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v19 - 8);
  v417 = (char *)&v371 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  v427 = (char *)&v371 - v22;
  MEMORY[0x1F4188790](v23);
  v375 = (char *)&v371 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v371 - v26;
  static Log.tabView.getter();
  uint64_t v28 = type metadata accessor for Logger();
  uint64_t v380 = *(void *)(v28 - 8);
  v422 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v380 + 48);
  v423 = (_OWORD *)(v380 + 48);
  int v29 = v422(v27, 1, v28);
  uint64_t v418 = v28;
  os_log_t v425 = a2;
  id v383 = a1;
  uint64_t v373 = v11;
  v374 = v10;
  v379 = v15;
  v377 = v18;
  if (v29 == 1)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    outlined init with copy of TabItemGroup((uint64_t)a2, (uint64_t)v431);
    outlined init with copy of TabItemGroup((uint64_t)a2, (uint64_t)v433);
    uint64_t v30 = Logger.logObject.getter();
    int v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, (os_log_type_t)v31))
    {
      LODWORD(v429) = v31;
      uint64_t v430 = (uint64_t)v30;
      uint64_t v32 = swift_slowAlloc();
      uint64_t v428 = swift_slowAlloc();
      uint64_t v435 = v428;
      *(_DWORD *)uint64_t v32 = 136315394;
      uint64_t v33 = *((void *)&v431[1] + 1);
      unint64_t v34 = *(void *)&v431[2];
      outlined copy of TabCustomizationID.Base();
      v434[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v435);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      outlined consume of TabCustomizationID.Base();
      outlined destroy of TabItemGroup((uint64_t)v431);
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v35 = TabItemGroup.allChildEntries.getter();
      int64_t v36 = *(void *)(v35 + 16);
      if (v36)
      {
        uint64_t v445 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
        uint64_t v426 = v35;
        uint64_t v37 = v35 + 32;
        do
        {
          outlined init with copy of TabEntry(v37, (uint64_t)v434);
          outlined init with copy of TabEntry((uint64_t)v434, (uint64_t)v443);
          if (v444)
          {
            memcpy(v432, v443, 0x108uLL);
            uint64_t v38 = *((void *)&v432[1] + 1);
            uint64_t v39 = *(void *)&v432[2];
            outlined copy of TabCustomizationID.Base();
            outlined destroy of TabItemGroup((uint64_t)v432);
          }
          else
          {
            v432[4] = *(_OWORD *)&v443[64];
            v432[5] = *(_OWORD *)&v443[80];
            *(void *)&v432[6] = *(void *)&v443[96];
            v432[0] = *(_OWORD *)v443;
            v432[1] = *(_OWORD *)&v443[16];
            v432[2] = *(_OWORD *)&v443[32];
            v432[3] = *(_OWORD *)&v443[48];
            uint64_t v38 = TabItem.platformIdentifier.getter();
            uint64_t v39 = v45;
            outlined destroy of TabItem((uint64_t)v432);
          }
          outlined destroy of TabEntry((uint64_t)v434);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v40 = *(void *)(v445 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v40);
          uint64_t v41 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v38, v39);
          destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v41, v42, v43, v44);
          v37 += 272;
          --v36;
        }
        while (v36);
        swift_bridgeObjectRelease();
        uint64_t v46 = v445;
        a1 = v383;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v46 = MEMORY[0x1E4FBC860];
      }
      v434[0] = v46;
      type metadata accessor for TabItem?(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v47 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v49 = v48;
      swift_bridgeObjectRelease();
      v434[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, &v435);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)v433);
      os_log_t v50 = (os_log_t)v430;
      _os_log_impl(&dword_1872C6000, (os_log_t)v430, (os_log_type_t)v429, "Resolved children of group %s:\n%s", (uint8_t *)v32, 0x16u);
      uint64_t v51 = v428;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v51, -1, -1);
      MEMORY[0x18C119C60](v32, -1, -1);

      uint64_t v28 = v418;
    }
    else
    {

      outlined destroy of TabItemGroup((uint64_t)v431);
      outlined destroy of TabItemGroup((uint64_t)v433);
    }
    (*(void (**)(char *, uint64_t))(v380 + 8))(v27, v28);
  }
  id v52 = objc_msgSend(a1, sel__children);
  uint64_t v53 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
  unint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v55 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6_UITabCG_SSs5NeverOTg50157_s7SwiftUI19UIHostingControllerC30updateChildrenCreatingIfNeeded33_E387C3C47C0D2A0931533D8490A5A8B72of5using13customization11environment11coordinatorySo18_dB181GroupC_AA12TabItemGroupVAA7BindingVyAA20TabViewCustomizationVGSgAA17EnvironmentValuesVAA24TabViewCoordinator_PhoneCtFSSSo01_Y0Ccfu2_33_3d754e018c1b0ac695a0c02c1b628b04AZSSTf3nnnpk_nTf1cn_n(v54);
  swift_bridgeObjectRelease();
  os_log_t v56 = v425;
  uint64_t v57 = TabItemGroup.allChildEntries.getter();
  uint64_t v58 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_SSs5NeverOTg503_s7d154UI19UIHostingControllerC30updateChildrenCreatingIfNeeded33_E387C3C47C0D2A0931533D8490A5A8B72of5using13customization11environment11coordinatorySo18_UITabb11GroupC_AA12f26ItemGroupVAA7BindingVyAA20f47ViewCustomizationVGSgAA17EnvironmentValuesVAA24f29ViewCoordinator_PhoneCtFSSAA8fG55Ocfu3_33_9ed0a70f676a1ab0b2fbeb64a187c970AZSSTf3nnnpk_nTf1cn_n(v57);
  uint64_t v371 = 0;
  swift_bridgeObjectRelease();
  v434[0] = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  specialized CollectionChanges.formChanges<A, B>(from:to:)((uint64_t)v55, v58);
  uint64_t v420 = (uint64_t)v55;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v394 = v434[0];
  id v59 = objc_msgSend(a1, sel__children);
  uint64_t v386 = v53;
  uint64_t v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v61 = *(void *)(TabItemGroup.allChildEntries.getter() + 16);
  swift_bridgeObjectRelease();
  uint64_t v62 = specialized Array.init(repeating:count:)(0, v61, &lazy cache variable for type metadata for _UITab?, &lazy cache variable for type metadata for _UITab, 0x1E4FB2398);
  uint64_t v449 = v62;
  uint64_t isa = (uint64_t)v56[3].isa;
  uint64_t v64 = (uint64_t)v56[4].isa;
  id v65 = (uint64_t *)(v411 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_groupHostCache);
  swift_beginAccess();
  v378 = v65;
  uint64_t v66 = *v65;
  outlined copy of TabCustomizationID.Base();
  uint64_t v445 = specialized Dictionary.subscript.getter(isa, v64, v66);
  uint64_t v446 = v67;
  v447 = (void *)v68;
  uint64_t v448 = v69;
  swift_endAccess();
  uint64_t v70 = v394;
  outlined consume of TabCustomizationID.Base();
  uint64_t v393 = *(void *)(v70 + 16);
  if (v393)
  {
    v398 = &v448;
    v399 = (uint64_t *)&v447;
    uint64_t v392 = v70 + 32;
    uint64_t v71 = &v444;
    v410 = &v431[3];
    unint64_t v388 = v60 & 0xC000000000000001;
    uint64_t v389 = v60;
    uint64_t v387 = v60 + 32;
    unint64_t v72 = 0;
    v384 = &v446;
    v385 = v443;
    v412 = (void (**)(char *, uint64_t))(v380 + 8);
    uint64_t v419 = v420 + 32;
    long long v400 = xmmword_188357320;
    uint64_t v395 = MEMORY[0x1E4FBC840] + 8;
    long long v397 = xmmword_1883A98D0;
    uint64_t v73 = v418;
    unint64_t v74 = (unint64_t)v427;
    v396 = &v444;
    while (1)
    {
      if (v72 >= *(void *)(v394 + 16)) {
        goto LABEL_234;
      }
      unint64_t v75 = v392 + 40 * v72;
      uint64_t v76 = *(void *)v75;
      uint64_t v77 = *(unsigned __int8 **)(v75 + 8);
      int v78 = *(unsigned __int8 *)(v75 + 32);
      uint64_t v428 = v72;
      v424 = v77;
      if (!v78) {
        break;
      }
      if (v78 == 1)
      {
        if ((unsigned __int8 *)v76 != v77)
        {
          if ((uint64_t)v77 < v76)
          {
            while (1)
            {
              __break(1u);
LABEL_242:
              __break(1u);
LABEL_243:
              __break(1u);
LABEL_244:
              __break(1u);
LABEL_245:
              __break(1u);
LABEL_246:
              unsigned __int8 v221 = v71;
              swift_bridgeObjectRetain();
              uint64_t v211 = _CocoaArrayWrapper.endIndex.getter();
              if (!v211) {
                goto LABEL_247;
              }
LABEL_212:
              uint64_t v213 = 4;
              while (1)
              {
                id v214 = (v74 & 0xC000000000000001) != 0
                     ? (id)MEMORY[0x18C117680](v213 - 4, v74)
                     : *(id *)(v74 + 8 * v213);
                uint64_t v215 = v214;
                uint64_t v216 = v213 - 3;
                if (__OFADD__(v213 - 4, 1)) {
                  break;
                }
                if (v71)
                {
                  long long v217 = v71;
                  id v218 = v215;
                  char v219 = static NSObject.== infix(_:_:)();

                  if (v219)
                  {

                    swift_bridgeObjectRelease();
                    os_log_t v220 = v425;
                    goto LABEL_249;
                  }
                }
                else
                {
                }
                ++v213;
                if (v216 == v211) {
                  goto LABEL_247;
                }
              }
LABEL_238:
              __break(1u);
LABEL_239:
              __break(1u);
LABEL_240:
              __break(1u);
            }
          }
          while (1)
          {
            if (v76 >= (uint64_t)v77) {
              goto LABEL_223;
            }
            uint64_t v430 = v76;
            unint64_t v74 = (unint64_t)v425[1].isa;
            Class v81 = v425[2].isa;
            uint64_t v82 = specialized Array.count.getter(v81);
            if (v82)
            {
              uint64_t v83 = v82;
              *(void *)v433 = specialized ContiguousArray.init()();
              swift_bridgeObjectRetain();
              specialized ContiguousArray.reserveCapacity(_:)(v83);
              if (v83 < 0) {
                goto LABEL_226;
              }
              uint64_t v84 = (uint64_t)v81 + 32;
              do
              {
                outlined init with copy of TabItem(v84, (uint64_t)v431);
                outlined init with copy of TabItem((uint64_t)v431, (uint64_t)v443);
                *uint64_t v71 = 0;
                outlined destroy of TabItem((uint64_t)v431);
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                uint64_t v85 = *(void *)(*(void *)v433 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v85);
                uint64_t v86 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v85, (uint64_t)v443);
                destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v86, v87, v88, v89);
                v84 += 104;
                --v83;
              }
              while (v83);
              swift_bridgeObjectRelease();
              uint64_t v90 = *(void *)v433;
              unint64_t v72 = v428;
            }
            else
            {
              uint64_t v90 = specialized static Array._allocateUninitialized(_:)(0);
            }
            uint64_t v91 = specialized Array.count.getter(v90);
            uint64_t v92 = specialized Array.count.getter(v74);
            int64_t v93 = v92 + v91;
            if (__OFADD__(v92, v91)) {
              goto LABEL_224;
            }
            swift_bridgeObjectRetain();
            int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
            *(void *)v443 = v74;
            if (!isUniquelyReferenced_nonNull_native || (int64_t v95 = *(void *)(v74 + 24) >> 1, v95 < v93))
            {
              if (*(void *)(v74 + 16) <= v93) {
                int64_t v96 = v93;
              }
              else {
                int64_t v96 = *(void *)(v74 + 16);
              }
              unint64_t v74 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v96, 1, (char *)v74);
              *(void *)v443 = v74;
              int64_t v95 = *(void *)(v74 + 24) >> 1;
            }
            uint64_t v97 = v95 - *(void *)(v74 + 16);
            if (specialized Array.count.getter(v90))
            {
              if (v97 < v91) {
                goto LABEL_227;
              }
              swift_arrayInitWithCopy();
              if (v91 >= 1)
              {
                uint64_t v98 = *(void *)(v74 + 16);
                BOOL v99 = __OFADD__(v98, v91);
                uint64_t v100 = v98 + v91;
                if (v99) {
                  goto LABEL_230;
                }
                *(void *)(v74 + 16) = v100;
              }
            }
            else
            {
              if (v91 > 0) {
                goto LABEL_225;
              }
              uint64_t v91 = 0;
            }
            uint64_t v101 = swift_bridgeObjectRelease();
            if (v91 != v97)
            {
              destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v101, v102, v103, v104);
              unint64_t v74 = *(void *)v443;
            }
            Swift::Int v105 = v430;
            if (v430 < 0 || v105 >= specialized Array.count.getter(v74))
            {
              memset(v443, 0, sizeof(v443));
              unsigned __int8 v444 = -1;
            }
            else
            {
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v105, 1, v74);
              outlined init with copy of TabEntry(v74 + 272 * v105 + 32, (uint64_t)v443);
            }
            swift_bridgeObjectRelease();
            if (v444 == 255) {
              goto LABEL_358;
            }
            outlined init with take of TabEntry((uint64_t)v443, (uint64_t)v434);
            outlined init with copy of TabEntry((uint64_t)v434, (uint64_t)v443);
            if ((*v71 & 1) == 0) {
              break;
            }
            memcpy(v431, v443, 0x108uLL);
            _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)v410, (uint64_t)v433, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
            if (*(void *)&v433[24])
            {
              uint64_t v442 = *(void *)&v433[88];
              uint64_t v106 = one-time initialization token for defaultValue;
              swift_bridgeObjectRetain();
              if (v106 != -1) {
                swift_once();
              }
              LOWORD(v435) = static TabOptions.TraitKey.defaultValue;
              BYTE2(v435) = byte_1E90FC582;
              long long v436 = *(_OWORD *)&qword_1E90FC588;
              __int16 v437 = word_1E90FC598;
              char v438 = byte_1E90FC59A;
              uint64_t v439 = qword_1E90FC5A0;
              __int16 v440 = word_1E90FC5A8;
              ViewTraitCollection.value<A>(for:defaultValue:)();
              swift_bridgeObjectRelease();
              char v107 = BYTE1(v432[0]);
              outlined consume of TabCustomizationID?(*((uint64_t *)&v432[0] + 1), *(uint64_t *)&v432[1], BYTE8(v432[1]));
              swift_bridgeObjectRelease();
              outlined destroy of TabItemGroup((uint64_t)v431);
              uint64_t v108 = v433;
              goto LABEL_63;
            }
            outlined destroy of TabItemGroup((uint64_t)v431);
            outlined destroy of PlatformItem.SelectionContent?((uint64_t)v433, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
LABEL_66:
            uint64_t v110 = (uint64_t)v417;
            static Log.tabView.getter();
            if (v422((char *)v110, 1, v73) == 1)
            {
              _s2os6LoggerVSgWOhTm_1(v110, (uint64_t (*)(void))type metadata accessor for Logger?);
            }
            else
            {
              uint64_t v111 = swift_allocObject();
              *(void *)(v111 + 16) = v105;
              uint64_t v112 = v111;
              uint64_t v414 = v111;
              outlined init with copy of TabItemGroup((uint64_t)v425, (uint64_t)v433);
              outlined init with copy of TabItemGroup((uint64_t)v433, (uint64_t)v432);
              uint64_t v113 = swift_allocObject();
              uint64_t v415 = v113;
              memcpy((void *)(v113 + 16), v433, 0x108uLL);
              outlined init with copy of TabEntry((uint64_t)v434, (uint64_t)v443);
              outlined init with copy of TabEntry((uint64_t)v443, (uint64_t)v431);
              v429 = (unsigned __int8 *)swift_allocObject();
              outlined init with take of TabEntry((uint64_t)v443, (uint64_t)(v429 + 16));
              v416 = Logger.logObject.getter();
              LODWORD(v405) = static os_log_type_t.default.getter();
              uint64_t v114 = swift_allocObject();
              *(unsigned char *)(v114 + 16) = 0;
              uint64_t v115 = v114;
              uint64_t v401 = v114;
              uint64_t v116 = swift_allocObject();
              *(unsigned char *)(v116 + 16) = 8;
              uint64_t v117 = v116;
              uint64_t v118 = swift_allocObject();
              *(void *)(v118 + 16) = partial apply for implicit closure #8 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:);
              *(void *)(v118 + 24) = v112;
              uint64_t v119 = v118;
              uint64_t v413 = v118;
              uint64_t v120 = swift_allocObject();
              *(void *)(v120 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
              *(void *)(v120 + 24) = v119;
              uint64_t v121 = v120;
              uint64_t v404 = swift_allocObject();
              *(unsigned char *)(v404 + 16) = 32;
              uint64_t v403 = swift_allocObject();
              *(unsigned char *)(v403 + 16) = 8;
              uint64_t v122 = swift_allocObject();
              *(void *)(v122 + 16) = partial apply for implicit closure #9 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:);
              *(void *)(v122 + 24) = v113;
              uint64_t v123 = swift_allocObject();
              v421 = v123;
              v123[2].uint64_t isa = (Class)implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              v123[3].uint64_t isa = (Class)v122;
              uint64_t v426 = swift_allocObject();
              *(unsigned char *)(v426 + 16) = 32;
              uint64_t v124 = swift_allocObject();
              *(unsigned char *)(v124 + 16) = 8;
              uint64_t v402 = v124;
              uint64_t v125 = swift_allocObject();
              uint64_t v126 = (uint64_t)v429;
              *(void *)(v125 + 16) = partial apply for implicit closure #10 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:);
              *(void *)(v125 + 24) = v126;
              uint64_t v127 = swift_allocObject();
              *(void *)(v127 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
              *(void *)(v127 + 24) = v125;
              _s2os6LoggerVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:), MEMORY[0x1E4FBBE00]);
              uint64_t v128 = swift_allocObject();
              *(_OWORD *)(v128 + 16) = v397;
              *(void *)(v128 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
              *(void *)(v128 + 40) = v115;
              *(void *)(v128 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
              *(void *)(v128 + 56) = v117;
              *(void *)(v128 + 64) = partial apply for specialized closure #1 in OSLogArguments.append<A>(_:);
              *(void *)(v128 + 72) = v121;
              uint64_t v129 = v121;
              uint64_t v130 = v403;
              uint64_t v131 = v404;
              *(void *)(v128 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
              *(void *)(v128 + 88) = v131;
              *(void *)(v128 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
              *(void *)(v128 + 104) = v130;
              uint64_t v132 = v421;
              *(void *)(v128 + 112) = closure #1 in OSLogArguments.append(_:)partial apply;
              *(void *)(v128 + 120) = v132;
              uint64_t v133 = v426;
              *(void *)(v128 + 128) = closure #1 in OSLogArguments.append(_:)partial apply;
              *(void *)(v128 + 136) = v133;
              *(void *)(v128 + 144) = closure #1 in OSLogArguments.append(_:)partial apply;
              *(void *)(v128 + 152) = v124;
              *(void *)(v128 + 160) = closure #1 in OSLogArguments.append(_:)partial apply;
              *(void *)(v128 + 168) = v127;
              swift_retain();
              swift_retain();
              swift_retain();
              uint64_t v408 = v122;
              swift_retain();
              swift_retain();
              uint64_t v407 = v125;
              swift_retain();
              swift_retain();
              swift_retain();
              uint64_t v406 = v129;
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              swift_retain();
              uint64_t v409 = v127;
              swift_retain();
              swift_bridgeObjectRelease();
              os_log_type_t v134 = v405;
              if (os_log_type_enabled(v416, (os_log_type_t)v405))
              {
                uint64_t v135 = (uint8_t *)swift_slowAlloc();
                uint64_t v405 = swift_slowAlloc();
                uint64_t v435 = v405;
                *(_WORD *)uint64_t v135 = 770;
                v135[2] = 0;
                swift_release();
                v135[3] = 8;
                swift_release();
                swift_release();
                uint64_t v442 = v430;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                v135[12] = 32;
                swift_release();
                v135[13] = 8;
                swift_release();
                uint64_t v136 = *((void *)&v432[1] + 1);
                unint64_t v137 = *(void *)&v432[2];
                outlined copy of TabCustomizationID.Base();
                uint64_t v442 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v137, &v435);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                outlined consume of TabCustomizationID.Base();
                swift_release();
                swift_release();
                swift_release();
                outlined destroy of TabItemGroup((uint64_t)v432);
                v135[22] = 32;
                swift_release();
                v135[23] = 8;
                swift_release();
                uint64_t v138 = TabEntry.platformIdentifier.getter();
                uint64_t v442 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v138, v139, &v435);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_release();
                swift_release();
                swift_bridgeObjectRelease();
                outlined destroy of TabEntry((uint64_t)v431);
                __int16 v140 = v416;
                _os_log_impl(&dword_1872C6000, v416, v134, "Inserting UITab child @ idx %ld into group\n%s; id %s",
                  v135,
                  0x20u);
                uint64_t v141 = v405;
                swift_arrayDestroy();
                MEMORY[0x18C119C60](v141, -1, -1);
                MEMORY[0x18C119C60](v135, -1, -1);
              }
              else
              {
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();

                swift_release();
                swift_release();
                outlined destroy of TabItemGroup((uint64_t)v432);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                outlined destroy of TabEntry((uint64_t)v431);
              }
              uint64_t v73 = v418;
              (*v412)(v417, v418);
              unint64_t v72 = v428;
              Swift::Int v105 = v430;
              uint64_t v77 = v424;
              uint64_t v71 = v396;
            }
            id v142 = specialized UIHostingController.createBridgedTab(using:coordinator:)((uint64_t)v434, v411);
            unint64_t v74 = v449;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              specialized _ArrayBuffer._consumeAndCreateNew()(v74);
            }
            if (v105 < 0) {
              goto LABEL_228;
            }
            if (*(void *)(v74 + 16) <= (unint64_t)v105) {
              goto LABEL_229;
            }
            unint64_t v79 = v74 + 8 * v105;
            long long v80 = *(void **)(v79 + 32);
            *(void *)(v79 + 32) = v142;

            specialized Array._endMutation()();
LABEL_26:
            uint64_t v76 = v105 + 1;
            outlined destroy of TabEntry((uint64_t)v434);
            unint64_t v74 = (unint64_t)v427;
            if ((unsigned __int8 *)v76 == v77) {
              goto LABEL_18;
            }
          }
          v431[4] = *(_OWORD *)&v443[64];
          v431[5] = *(_OWORD *)&v443[80];
          *(void *)&v431[6] = *(void *)&v443[96];
          v431[0] = *(_OWORD *)v443;
          v431[1] = *(_OWORD *)&v443[16];
          v431[2] = *(_OWORD *)&v443[32];
          v431[3] = *(_OWORD *)&v443[48];
          uint64_t v435 = *(void *)&v443[88];
          uint64_t v109 = one-time initialization token for defaultValue;
          swift_bridgeObjectRetain();
          if (v109 != -1) {
            swift_once();
          }
          LOWORD(v432[0]) = static TabOptions.TraitKey.defaultValue;
          BYTE2(v432[0]) = byte_1E90FC582;
          *(_OWORD *)((char *)v432 + 8) = *(_OWORD *)&qword_1E90FC588;
          WORD4(v432[1]) = word_1E90FC598;
          BYTE10(v432[1]) = byte_1E90FC59A;
          *(void *)&v432[2] = qword_1E90FC5A0;
          WORD4(v432[2]) = word_1E90FC5A8;
          ViewTraitCollection.value<A>(for:defaultValue:)();
          swift_bridgeObjectRelease();
          char v107 = v433[1];
          outlined consume of TabCustomizationID?(*(uint64_t *)&v433[8], *(uint64_t *)&v433[16], v433[24]);
          swift_bridgeObjectRelease();
          uint64_t v108 = v431;
LABEL_63:
          outlined destroy of TabItem((uint64_t)v108);
          if (v107) {
            goto LABEL_26;
          }
          goto LABEL_66;
        }
        goto LABEL_18;
      }
      uint64_t v182 = *(void *)(v75 + 16);
      uint64_t v181 = *(void *)(v75 + 24);
      LOBYTE(v441) = 0;
      if ((unsigned __int8 *)v76 != v77)
      {
        if ((uint64_t)v77 < v76) {
          goto LABEL_243;
        }
        if (v76 >= (uint64_t)v77) {
          goto LABEL_244;
        }
        if (v182 != v181)
        {
          if (v181 < v182) {
            goto LABEL_245;
          }
          v429 = v77 - 1;
          uint64_t v430 = v76;
          unint64_t v74 = v76;
          uint64_t v426 = v181;
          do
          {
            if (v182 == v181) {
              goto LABEL_231;
            }
            Class v183 = v425[1].isa;
            Class v184 = v425[2].isa;
            uint64_t v185 = specialized Array.count.getter(v184);
            if (v185)
            {
              uint64_t v186 = v185;
              *(void *)v433 = specialized ContiguousArray.init()();
              swift_bridgeObjectRetain();
              specialized ContiguousArray.reserveCapacity(_:)(v186);
              if (v186 < 0) {
                goto LABEL_235;
              }
              uint64_t v187 = (uint64_t)v184 + 32;
              do
              {
                outlined init with copy of TabItem(v187, (uint64_t)v431);
                outlined init with copy of TabItem((uint64_t)v431, (uint64_t)v443);
                *uint64_t v71 = 0;
                outlined destroy of TabItem((uint64_t)v431);
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                uint64_t v188 = *(void *)(*(void *)v433 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v188);
                uint64_t v189 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v188, (uint64_t)v443);
                destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v189, v190, v191, v192);
                v187 += 104;
                --v186;
              }
              while (v186);
              swift_bridgeObjectRelease();
              uint64_t v193 = *(void *)v433;
              uint64_t v73 = v418;
              uint64_t v77 = v424;
            }
            else
            {
              uint64_t v193 = specialized static Array._allocateUninitialized(_:)(0);
            }
            *(void *)v443 = v183;
            swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v193);
            uint64_t v194 = *(void *)v443;
            unint64_t v72 = v428;
            if (v182 < 0 || v182 >= specialized Array.count.getter(*(void *)v443))
            {
              memset(v443, 0, sizeof(v443));
              unsigned __int8 v444 = -1;
            }
            else
            {
              specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v182, 1, v194);
              outlined init with copy of TabEntry(v194 + 272 * v182 + 32, (uint64_t)v443);
            }
            swift_bridgeObjectRelease();
            if (v444 == 255)
            {
              outlined destroy of PlatformItem.SelectionContent?((uint64_t)v443, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, MEMORY[0x1E4FBB718]);
              v434[0] = 0;
              v434[1] = 0xE000000000000000;
              _StringGuts.grow(_:)(35);
              swift_bridgeObjectRelease();
              v434[0] = 0xD000000000000021;
              v434[1] = 0x800000018833B370;
              *(void *)v443 = v182;
              v370._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v370);
              swift_bridgeObjectRelease();
              goto LABEL_360;
            }
            outlined init with take of TabEntry((uint64_t)v443, (uint64_t)v434);
            outlined init with copy of TabEntry((uint64_t)v434, (uint64_t)v443);
            if (*v71)
            {
              memcpy(v431, v443, 0x108uLL);
              _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)v410, (uint64_t)v433, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
              if (*(void *)&v433[24])
              {
                uint64_t v442 = *(void *)&v433[88];
                uint64_t v195 = one-time initialization token for defaultValue;
                swift_bridgeObjectRetain();
                if (v195 != -1) {
                  swift_once();
                }
                LOWORD(v435) = static TabOptions.TraitKey.defaultValue;
                BYTE2(v435) = byte_1E90FC582;
                long long v436 = *(_OWORD *)&qword_1E90FC588;
                __int16 v437 = word_1E90FC598;
                char v438 = byte_1E90FC59A;
                uint64_t v439 = qword_1E90FC5A0;
                __int16 v440 = word_1E90FC5A8;
                ViewTraitCollection.value<A>(for:defaultValue:)();
                swift_bridgeObjectRelease();
                char v196 = BYTE1(v432[0]);
                outlined consume of TabCustomizationID?(*((uint64_t *)&v432[0] + 1), *(uint64_t *)&v432[1], BYTE8(v432[1]));
                swift_bridgeObjectRelease();
                outlined destroy of TabItemGroup((uint64_t)v431);
                outlined destroy of TabItem((uint64_t)v433);
                if (v196) {
                  goto LABEL_191;
                }
              }
              else
              {
                outlined destroy of TabItemGroup((uint64_t)v431);
                outlined destroy of PlatformItem.SelectionContent?((uint64_t)v433, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
              }
            }
            else
            {
              v431[4] = *(_OWORD *)&v443[64];
              v431[5] = *(_OWORD *)&v443[80];
              *(void *)&v431[6] = *(void *)&v443[96];
              v431[0] = *(_OWORD *)v443;
              v431[1] = *(_OWORD *)&v443[16];
              v431[2] = *(_OWORD *)&v443[32];
              v431[3] = *(_OWORD *)&v443[48];
              uint64_t v435 = *(void *)&v443[88];
              uint64_t v197 = one-time initialization token for defaultValue;
              swift_bridgeObjectRetain();
              if (v197 != -1) {
                swift_once();
              }
              LOWORD(v432[0]) = static TabOptions.TraitKey.defaultValue;
              BYTE2(v432[0]) = byte_1E90FC582;
              *(_OWORD *)((char *)v432 + 8) = *(_OWORD *)&qword_1E90FC588;
              WORD4(v432[1]) = word_1E90FC598;
              BYTE10(v432[1]) = byte_1E90FC59A;
              *(void *)&v432[2] = qword_1E90FC5A0;
              WORD4(v432[2]) = word_1E90FC5A8;
              ViewTraitCollection.value<A>(for:defaultValue:)();
              swift_bridgeObjectRelease();
              char v198 = v433[1];
              outlined consume of TabCustomizationID?(*(uint64_t *)&v433[8], *(uint64_t *)&v433[16], v433[24]);
              swift_bridgeObjectRelease();
              outlined destroy of TabItem((uint64_t)v431);
              if (v198) {
                goto LABEL_191;
              }
            }
            unint64_t v199 = v388;
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v74, v388 == 0, v389);
            if (v199) {
              id v200 = (id)MEMORY[0x18C117680](v74, v389);
            }
            else {
              id v200 = *(id *)(v387 + 8 * v74);
            }
            id v201 = v200;
            uint64_t v202 = v449;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              specialized _ArrayBuffer._consumeAndCreateNew()(v202);
            }
            if (v182 < 0) {
              goto LABEL_236;
            }
            if (*(void *)(v202 + 16) <= (unint64_t)v182) {
              goto LABEL_237;
            }
            uint64_t v203 = v202 + 8 * v182;
            long long v204 = *(void **)(v203 + 32);
            *(void *)(v203 + 32) = v201;

            specialized Array._endMutation()();
LABEL_191:
            outlined destroy of TabEntry((uint64_t)v434);
            if ((v441 & 1) != 0 || (unsigned __int8 *)(v74 + 1) == v77) {
              break;
            }
            if ((uint64_t)(v74 + 1) < v430) {
              goto LABEL_232;
            }
            if ((unsigned __int8 *)v74 == v429) {
              goto LABEL_233;
            }
            ++v182;
            ++v74;
            uint64_t v181 = v426;
          }
          while (v182 != v426);
        }
      }
      unint64_t v74 = (unint64_t)v427;
LABEL_18:
      if (++v72 == v393)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v62 = v449;
        id v205 = v383;
        goto LABEL_201;
      }
    }
    if ((unsigned __int8 *)v76 == v77) {
      goto LABEL_18;
    }
    if ((uint64_t)v77 < v76) {
      goto LABEL_242;
    }
    while (1)
    {
      if (v76 >= (uint64_t)v77)
      {
        __break(1u);
LABEL_223:
        __break(1u);
LABEL_224:
        __break(1u);
LABEL_225:
        __break(1u);
LABEL_226:
        __break(1u);
LABEL_227:
        __break(1u);
LABEL_228:
        __break(1u);
LABEL_229:
        __break(1u);
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        __break(1u);
LABEL_233:
        __break(1u);
LABEL_234:
        __break(1u);
LABEL_235:
        __break(1u);
LABEL_236:
        __break(1u);
LABEL_237:
        __break(1u);
        goto LABEL_238;
      }
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v76, 1, v420);
      uint64_t v143 = (uint64_t *)(v419 + 16 * v76);
      uint64_t v145 = *v143;
      uint64_t v144 = v143[1];
      swift_bridgeObjectRetain();
      static Log.tabView.getter();
      int v146 = v422((char *)v74, 1, v73);
      v429 = (unsigned __int8 *)v144;
      uint64_t v430 = v76;
      uint64_t v426 = v145;
      if (v146 == 1)
      {
        _s2os6LoggerVSgWOhTm_1(v74, (uint64_t (*)(void))type metadata accessor for Logger?);
        CGFloat v147 = v447;
        if (!v447) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v148 = swift_allocObject();
        *(void *)(v148 + 16) = v145;
        *(void *)(v148 + 24) = v144;
        swift_bridgeObjectRetain_n();
        CGFloat v149 = Logger.logObject.getter();
        os_log_type_t v150 = static os_log_type_t.default.getter();
        uint64_t v151 = swift_allocObject();
        *(unsigned char *)(v151 + 16) = 32;
        uint64_t v152 = swift_allocObject();
        *(unsigned char *)(v152 + 16) = 8;
        uint64_t v153 = swift_allocObject();
        *(void *)(v153 + 16) = partial apply for implicit closure #2 in ScrollActionDispatcher.updateValue();
        *(void *)(v153 + 24) = v148;
        uint64_t v154 = swift_allocObject();
        *(void *)(v154 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
        *(void *)(v154 + 24) = v153;
        _s2os6LoggerVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:), MEMORY[0x1E4FBBE00]);
        uint64_t v155 = swift_allocObject();
        *(_OWORD *)(v155 + 16) = v400;
        *(void *)(v155 + 32) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v155 + 40) = v151;
        *(void *)(v155 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v155 + 56) = v152;
        *(void *)(v155 + 64) = closure #1 in OSLogArguments.append(_:)partial apply;
        *(void *)(v155 + 72) = v154;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        v421 = v149;
        if (os_log_type_enabled(v149, v150))
        {
          uint64_t v156 = swift_slowAlloc();
          uint64_t v157 = swift_slowAlloc();
          v434[0] = v157;
          *(_WORD *)uint64_t v156 = 258;
          *(unsigned char *)(v156 + 2) = 32;
          swift_release();
          *(unsigned char *)(v156 + 3) = 8;
          swift_release();
          unint64_t v158 = (unint64_t)v429;
          swift_bridgeObjectRetain();
          *(void *)(v156 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v426, v158, v434);
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          CGFloat v159 = v421;
          _os_log_impl(&dword_1872C6000, v421, v150, "Removing VC for cached child '%s'", (uint8_t *)v156, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v157, -1, -1);
          MEMORY[0x18C119C60](v156, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
        unint64_t v74 = (unint64_t)v427;
        uint64_t v73 = v418;
        (*v412)(v427, v418);
        uint64_t v76 = v430;
        uint64_t v77 = v424;
        CGFloat v147 = v447;
        if (!v447) {
          goto LABEL_80;
        }
      }
      uint64_t v160 = v446;
      uint64_t v161 = v147[2];
      if (v446)
      {
        swift_retain();
        Swift::Int v105 = specialized _HashTable.UnsafeHandle._find<A>(_:in:)(v426, (uint64_t)v429, (uint64_t)(v147 + 4), v161, (void *)(v160 + 16));
        char v163 = v162;
        uint64_t v165 = v164;
        swift_release();
        if ((v163 & 1) == 0)
        {
          uint64_t v166 = v147[2];
          swift_beginAccess();
          if ((*(void *)(v160 + 16) & 0x3FLL) == (*(void *)(v160 + 24) & 0x3FLL))
          {
            if (!v166) {
              goto LABEL_109;
            }
          }
          else if (v166 <= static _HashTable.minimumCapacity(forScale:)())
          {
            goto LABEL_109;
          }
          if ((swift_isUniquelyReferenced_native() & 1) == 0)
          {
            uint64_t v168 = _HashTable.copy()();
            swift_release();
            uint64_t v446 = v168;
            uint64_t v160 = v168;
            if (!v168) {
              goto LABEL_357;
            }
          }
          unint64_t v74 = v160 + 16;
          swift_retain();
          specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(v165, (void *)(v160 + 16), v160 + 32, (uint64_t)v384);
          if (__OFADD__(v105, 1)) {
            goto LABEL_239;
          }
          if (v105 + 1 < v105) {
            goto LABEL_240;
          }
          uint64_t v169 = (uint64_t)v447;
          swift_retain();
          specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(v105, v105 + 1, v169, (void *)(v160 + 16));
          swift_release();
          swift_release();
          specialized ContiguousArray.remove(at:)(v105);
          unint64_t v72 = v428;
          goto LABEL_119;
        }
        swift_bridgeObjectRelease();
        unint64_t v74 = (unint64_t)v427;
        unint64_t v72 = v428;
LABEL_120:
        uint64_t v76 = v430;
        uint64_t v77 = v424;
        goto LABEL_81;
      }
      if (v161)
      {
        uint64_t v167 = (uint64_t)v429;
        if (v147[4] == v426 && (unsigned __int8 *)v147[5] == v429
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          Swift::Int v105 = 0;
          goto LABEL_100;
        }
        if (v161 != 1)
        {
          if (v147[6] == v426 && v147[7] == v167 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            Swift::Int v105 = 1;
            goto LABEL_100;
          }
          if (v161 != 2)
          {
            if (v147[8] == v426 && v147[9] == v167 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              Swift::Int v105 = 2;
              goto LABEL_100;
            }
            if (v161 != 3)
            {
              if (v147[10] == v426 && v147[11] == v167 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                Swift::Int v105 = 3;
                goto LABEL_100;
              }
              if (v161 != 4)
              {
                if (v147[12] == v426 && v147[13] == v167 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  Swift::Int v105 = 4;
                  goto LABEL_100;
                }
                if (v161 != 5)
                {
                  if (v147[14] == v426 && v147[15] == v167 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    Swift::Int v105 = 5;
                  }
                  else
                  {
                    uint64_t v178 = v147 + 17;
                    uint64_t v179 = 6;
                    while (1)
                    {
                      if (v161 == v179)
                      {
                        unint64_t v74 = (unint64_t)v427;
                        uint64_t v76 = v430;
                        uint64_t v77 = v424;
                        goto LABEL_80;
                      }
                      if (*(v178 - 1) == v426 && *v178 == v167) {
                        break;
                      }
                      Swift::Int v105 = v179++;
                      v178 += 2;
                      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                        goto LABEL_100;
                      }
                    }
                    Swift::Int v105 = v179;
                  }
LABEL_100:
                  if (v147[2])
                  {
                    specialized ContiguousArray.remove(at:)(v105);
                    unint64_t v72 = v428;
                    goto LABEL_119;
                  }
LABEL_109:
                  unint64_t v72 = v428;
                  specialized ContiguousArray.remove(at:)(v105);
                  uint64_t v170 = v446;
                  Swift::Int v171 = (Swift::Int)v447;
                  if (v446)
                  {
                    swift_beginAccess();
                    uint64_t v172 = *(void *)(v170 + 24) & 0x3FLL;
                    unint64_t v173 = *(void *)(v171 + 16);
                    if (v172)
                    {
LABEL_115:
                      uint64_t v174 = MEMORY[0x18C10AD70](v173);
                      if (v172 <= v174) {
                        uint64_t v175 = v174;
                      }
                      else {
                        uint64_t v175 = v172;
                      }
                      uint64_t v176 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v171, v175, 0, v172);
                      swift_release();
                      uint64_t v446 = v176;
                      goto LABEL_119;
                    }
                  }
                  else
                  {
                    uint64_t v172 = 0;
                    unint64_t v173 = v447[2];
                  }
                  if (v173 >= 0x10) {
                    goto LABEL_115;
                  }
                  swift_release();
                  uint64_t v446 = 0;
LABEL_119:
                  swift_bridgeObjectRelease();
                  uint64_t v177 = (void *)specialized ContiguousArray.remove(at:)(v105);
                  swift_bridgeObjectRelease();

                  unint64_t v74 = (unint64_t)v427;
                  goto LABEL_120;
                }
              }
            }
          }
        }
      }
LABEL_80:
      swift_bridgeObjectRelease();
      unint64_t v72 = v428;
LABEL_81:
      if ((unsigned __int8 *)++v76 == v77) {
        goto LABEL_18;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v205 = v383;
LABEL_201:
  swift_bridgeObjectRelease();
  v434[0] = MEMORY[0x1E4FBC860];
  uint64_t v206 = *(void *)(v62 + 16);
  if (v206)
  {
    swift_bridgeObjectRetain_n();
    for (uint64_t i = 0; i != v206; ++i)
    {
      uint64_t v208 = *(void **)(v62 + 8 * i + 32);
      if (v208)
      {
        id v209 = v208;
        MEMORY[0x18C115B40]();
        if (*(void *)((v434[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v434[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v74 = v434[0];
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v74 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  uint64_t v210 = (unsigned __int8 *)objc_msgSend(v205, sel__selectedElement);
  uint64_t v71 = v210;
  if (v74 >> 62) {
    goto LABEL_246;
  }
  uint64_t v211 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v212 = v210;
  swift_bridgeObjectRetain();
  if (v211) {
    goto LABEL_212;
  }
LABEL_247:

  swift_bridgeObjectRelease();
  os_log_t v220 = v425;
  if (v71)
  {
    *(void *)v443 = v74;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITabElement);
    type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for [_UITab], &lazy cache variable for type metadata for _UITab, 0x1E4FB2398, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [_UITab] and conformance [A]();
    swift_bridgeObjectRetain();
    Sequence.first<A>(ofType:)();
    v222 = (void *)v434[0];
    id v223 = v383;
    objc_msgSend(v383, sel__setSelectedElement_, v434[0]);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_249:
    id v223 = v383;
  }
  Class v224 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v223, sel__setChildren_, v224);

  uint64_t v225 = (uint64_t)v220[3].isa;
  uint64_t v226 = (uint64_t)v220[4].isa;
  uint64_t v227 = v445;
  uint64_t v228 = v446;
  uint64_t v229 = (uint64_t)v447;
  uint64_t v230 = v448;
  uint64_t v231 = v378;
  swift_beginAccess();
  v421 = v71;
  outlined copy of TabCustomizationID.Base();
  if (v229)
  {
    outlined copy of TabItemGroup.HostCache?(v227, v228, v229);
    char v232 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)v443 = *v231;
    *uint64_t v231 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v227, v228, v229, v230, v225, v226, v232);
    *uint64_t v231 = *(void *)v443;
    uint64_t v71 = (unsigned __int8 *)v421;
    swift_bridgeObjectRelease();
    outlined consume of TabCustomizationID.Base();
  }
  else
  {
    uint64_t v233 = specialized Dictionary._Variant.removeValue(forKey:)(v225, v226);
    uint64_t v235 = v234;
    uint64_t v237 = v236;
    outlined consume of TabCustomizationID.Base();
    outlined consume of TabItemGroup.HostCache?(v233, v235, v237);
  }
  swift_endAccess();
  os_log_t v238 = v425;
  uint64_t v239 = TabItemGroup.allChildEntries.getter();
  uint64_t v240 = specialized ContiguousArray.init()();
  uint64_t v442 = v240;
  uint64_t v241 = specialized Array.count.getter(v239);
  id v242 = v383;
  if (v241)
  {
    Swift::Int v105 = v241;
    uint64_t v243 = 0;
    uint64_t v244 = v239 + 32;
    uint64_t v430 = (uint64_t)&v431[3];
    while (1)
    {
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v243, 1, v239);
      uint64_t v250 = v243 + 1;
      if (__OFADD__(v243, 1))
      {
        __break(1u);
LABEL_352:
        __break(1u);
LABEL_353:
        __break(1u);
        goto LABEL_354;
      }
      outlined init with copy of TabEntry(v244, (uint64_t)v434);
      outlined init with copy of TabEntry((uint64_t)v434, (uint64_t)v443);
      if (v444)
      {
        memcpy(v431, v443, 0x108uLL);
        _s7SwiftUI7TabItemVSgWOcTm_0(v430, (uint64_t)v433, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
        if (*(void *)&v433[24])
        {
          uint64_t v441 = *(void *)&v433[88];
          uint64_t v251 = one-time initialization token for defaultValue;
          swift_bridgeObjectRetain();
          if (v251 != -1) {
            swift_once();
          }
          LOWORD(v435) = static TabOptions.TraitKey.defaultValue;
          BYTE2(v435) = byte_1E90FC582;
          long long v436 = *(_OWORD *)&qword_1E90FC588;
          __int16 v437 = word_1E90FC598;
          char v438 = byte_1E90FC59A;
          uint64_t v439 = qword_1E90FC5A0;
          __int16 v440 = word_1E90FC5A8;
          ViewTraitCollection.value<A>(for:defaultValue:)();
          swift_bridgeObjectRelease();
          char v252 = BYTE1(v432[0]);
          outlined consume of TabCustomizationID?(*((uint64_t *)&v432[0] + 1), *(uint64_t *)&v432[1], BYTE8(v432[1]));
          swift_bridgeObjectRelease();
          outlined destroy of TabItemGroup((uint64_t)v431);
          outlined destroy of TabItem((uint64_t)v433);
          if (v252) {
            goto LABEL_268;
          }
        }
        else
        {
          outlined destroy of TabItemGroup((uint64_t)v431);
          outlined destroy of PlatformItem.SelectionContent?((uint64_t)v433, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
        }
      }
      else
      {
        v431[4] = *(_OWORD *)&v443[64];
        v431[5] = *(_OWORD *)&v443[80];
        *(void *)&v431[6] = *(void *)&v443[96];
        v431[0] = *(_OWORD *)v443;
        v431[1] = *(_OWORD *)&v443[16];
        v431[2] = *(_OWORD *)&v443[32];
        v431[3] = *(_OWORD *)&v443[48];
        uint64_t v435 = *(void *)&v443[88];
        uint64_t v253 = one-time initialization token for defaultValue;
        swift_bridgeObjectRetain();
        if (v253 != -1) {
          swift_once();
        }
        LOWORD(v432[0]) = static TabOptions.TraitKey.defaultValue;
        BYTE2(v432[0]) = byte_1E90FC582;
        *(_OWORD *)((char *)v432 + 8) = *(_OWORD *)&qword_1E90FC588;
        WORD4(v432[1]) = word_1E90FC598;
        BYTE10(v432[1]) = byte_1E90FC59A;
        *(void *)&v432[2] = qword_1E90FC5A0;
        WORD4(v432[2]) = word_1E90FC5A8;
        ViewTraitCollection.value<A>(for:defaultValue:)();
        swift_bridgeObjectRelease();
        int v254 = v433[1];
        outlined consume of TabCustomizationID?(*(uint64_t *)&v433[8], *(uint64_t *)&v433[16], v433[24]);
        swift_bridgeObjectRelease();
        outlined destroy of TabItem((uint64_t)v431);
        if (v254 == 1)
        {
LABEL_268:
          outlined destroy of TabEntry((uint64_t)v434);
          goto LABEL_257;
        }
      }
      outlined init with take of TabEntry((uint64_t)v434, (uint64_t)v443);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v245 = *(void *)(v442 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v245);
      uint64_t v246 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v245, (uint64_t)v443);
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v246, v247, v248, v249);
LABEL_257:
      os_log_t v238 = v425;
      ++v243;
      v244 += 272;
      if (v250 == v105)
      {
        v429 = (unsigned __int8 *)v442;
        id v242 = v383;
        uint64_t v71 = (unsigned __int8 *)v421;
        goto LABEL_271;
      }
    }
  }
  v429 = (unsigned __int8 *)v240;
LABEL_271:
  swift_bridgeObjectRelease();
  id v255 = objc_msgSend(v242, sel__identifier);
  uint64_t v256 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v258 = v257;

  uint64_t v259 = (uint64_t)v377;
  outlined init with copy of AdaptableTabView.BodyContent(v391, (uint64_t)v377, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v261 = v260;
  uint64_t v262 = *(void *)(v260 - 8);
  uint64_t v430 = *(void *)(v262 + 48);
  uint64_t v428 = v262 + 48;
  int v263 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v430)(v259, 1, v260);
  uint64_t v264 = v418;
  uint64_t v265 = (uint64_t)v379;
  if (v263 == 1)
  {
    swift_bridgeObjectRelease();
    _s2os6LoggerVSgWOhTm_1(v259, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
    Swift::Int v105 = v381;
    goto LABEL_284;
  }
  v266 = v376;
  MEMORY[0x18C113DA0](v261);
  _s2os6LoggerVSgWOhTm_1(v259, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
  uint64_t v267 = TabViewCustomization.subscript.getter(v256, v258);
  swift_bridgeObjectRelease();
  uint64_t v268 = (uint64_t)v266;
  id v242 = v383;
  _s2os6LoggerVSgWOhTm_1(v268, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
  Swift::Int v105 = v381;
  if (!v267 || (uint64_t v269 = specialized Array.count.getter(v267), swift_bridgeObjectRelease(), !v269))
  {
LABEL_284:
    swift_bridgeObjectRelease();
    id v281 = objc_msgSend(v242, sel__displayOrder);
    uint64_t v282 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v283 = specialized Array.count.getter(v282);
    swift_bridgeObjectRelease();
    if (v283 >= 1)
    {
      specialized static Array._allocateUninitialized(_:)(0);
      Class v284 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v242, sel__setDisplayOrder_, v284);
    }
    uint64_t v285 = v382;
LABEL_287:
    uint64_t v286 = (uint64_t)v429;
    goto LABEL_288;
  }
  uint64_t v270 = specialized ContiguousArray.init()();
  *(void *)v433 = v270;
  uint64_t v271 = (uint64_t)v429;
  Swift::Int v105 = specialized Array.count.getter(v429);
  swift_retain();
  if (!v105) {
    goto LABEL_315;
  }
  uint64_t v272 = 0;
  uint64_t v273 = v271 + 32;
  do
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v272, 1, v429);
    uint64_t v279 = v272 + 1;
    if (__OFADD__(v272, 1)) {
      goto LABEL_353;
    }
    outlined init with copy of TabEntry(v273, (uint64_t)v434);
    outlined init with copy of TabEntry((uint64_t)v434, (uint64_t)v443);
    if (v444)
    {
      outlined destroy of TabEntry((uint64_t)v443);
LABEL_278:
      outlined init with take of TabEntry((uint64_t)v434, (uint64_t)v443);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v274 = *(void *)(*(void *)v433 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v274);
      uint64_t v275 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v274, (uint64_t)v443);
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v275, v276, v277, v278);
      goto LABEL_279;
    }
    v431[4] = *(_OWORD *)&v443[64];
    v431[5] = *(_OWORD *)&v443[80];
    *(void *)&v431[6] = *(void *)&v443[96];
    v431[0] = *(_OWORD *)v443;
    v431[1] = *(_OWORD *)&v443[16];
    v431[2] = *(_OWORD *)&v443[32];
    v431[3] = *(_OWORD *)&v443[48];
    *(void *)v443 = *(void *)&v443[88];
    char v280 = ViewTraitCollection.isAuxiliaryContent.getter();
    outlined destroy of TabItem((uint64_t)v431);
    if ((v280 & 1) == 0) {
      goto LABEL_278;
    }
    outlined destroy of TabEntry((uint64_t)v434);
LABEL_279:
    ++v272;
    v273 += 272;
  }
  while (v279 != v105);
  uint64_t v270 = *(void *)v433;
  uint64_t v264 = v418;
  os_log_t v238 = v425;
  uint64_t v265 = (uint64_t)v379;
  id v242 = v383;
LABEL_315:
  swift_release();
  uint64_t v305 = specialized Array.count.getter(v270);
  if (!v305)
  {
    uint64_t v318 = specialized static Array._allocateUninitialized(_:)(0);
    swift_release();
    goto LABEL_330;
  }
  Swift::Int v105 = v305;
  v427 = (char *)v270;
  uint64_t v435 = specialized ContiguousArray.init()();
  specialized ContiguousArray.reserveCapacity(_:)(v105);
  if (v105 < 0)
  {
LABEL_354:
    __break(1u);
LABEL_355:
    __break(1u);
LABEL_356:
    __break(1u);
LABEL_357:
    __break(1u);
LABEL_358:
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)v443, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, MEMORY[0x1E4FBB718]);
    v434[0] = 0;
    v434[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v434[0] = 0xD000000000000021;
    v434[1] = 0x800000018833B370;
    *(void *)v443 = v105;
    v369._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v369);
    swift_bridgeObjectRelease();
    while (1)
    {
LABEL_360:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  uint64_t v306 = (uint64_t)(v427 + 32);
  do
  {
    outlined init with copy of TabEntry(v306, (uint64_t)v434);
    outlined init with copy of TabEntry((uint64_t)v434, (uint64_t)v443);
    if (v444)
    {
      memcpy(v431, v443, 0x108uLL);
      uint64_t v307 = *((void *)&v431[1] + 1);
      uint64_t v308 = *(void *)&v431[2];
      char v309 = BYTE8(v431[2]);
      outlined copy of TabCustomizationID.Base();
      outlined destroy of TabItemGroup((uint64_t)v431);
    }
    else
    {
      v431[4] = *(_OWORD *)&v443[64];
      v431[5] = *(_OWORD *)&v443[80];
      *(void *)&v431[6] = *(void *)&v443[96];
      v431[0] = *(_OWORD *)v443;
      v431[1] = *(_OWORD *)&v443[16];
      v431[2] = *(_OWORD *)&v443[32];
      v431[3] = *(_OWORD *)&v443[48];
      if ((TabItem.needsCustomizationIDForEnablement.getter() & 1) == 0) {
        goto LABEL_326;
      }
      uint64_t v442 = *((void *)&v431[5] + 1);
      uint64_t v315 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v315 != -1) {
        swift_once();
      }
      LOWORD(v432[0]) = static TabOptions.TraitKey.defaultValue;
      BYTE2(v432[0]) = byte_1E90FC582;
      *(_OWORD *)((char *)v432 + 8) = *(_OWORD *)&qword_1E90FC588;
      WORD4(v432[1]) = word_1E90FC598;
      BYTE10(v432[1]) = byte_1E90FC59A;
      *(void *)&v432[2] = qword_1E90FC5A0;
      WORD4(v432[2]) = word_1E90FC5A8;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      uint64_t v307 = *(void *)&v433[8];
      uint64_t v308 = *(void *)&v433[16];
      int v316 = v433[24];
      outlined copy of TabCustomizationID?(*(uint64_t *)&v433[8], *(uint64_t *)&v433[16], v433[24]);
      outlined consume of TabCustomizationID?(v307, v308, v316);
      swift_bridgeObjectRelease();
      if (v316 == 255)
      {
LABEL_326:
        uint64_t v307 = TabItem.platformIdentifier.getter();
        uint64_t v308 = v317;
        char v309 = 1;
      }
      else
      {
        char v309 = v316 & 1;
      }
      outlined destroy of TabItem((uint64_t)v431);
    }
    outlined destroy of TabEntry((uint64_t)v434);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v310 = *(void *)(v435 + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v310);
    uint64_t v311 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v310, v307, v308, v309);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v311, v312, v313, v314);
    v306 += 272;
    --v105;
  }
  while (v105);
  swift_release();
  uint64_t v318 = v435;
  id v242 = v383;
  uint64_t v264 = v418;
  os_log_t v238 = v425;
  uint64_t v265 = (uint64_t)v379;
  uint64_t v71 = (unsigned __int8 *)v421;
LABEL_330:
  outlined init with copy of AdaptableTabView.BodyContent(v391, v265, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  uint64_t v319 = 1;
  int v320 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v430)(v265, 1, v261);
  v321 = type metadata accessor for Binding<TabViewCustomization>?;
  if (v320 == 1)
  {
    uint64_t v285 = v382;
    uint64_t v322 = (uint64_t)v374;
  }
  else
  {
    uint64_t v322 = (uint64_t)v374;
    MEMORY[0x18C113DA0](v261);
    uint64_t v319 = 0;
    v321 = type metadata accessor for Binding<TabViewCustomization>;
    uint64_t v285 = v382;
  }
  _s2os6LoggerVSgWOhTm_1(v265, (uint64_t (*)(void))v321);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v372 + 56))(v322, v319, 1, v373);
  v323 = specialized static TabViewCustomization.arrangedChildren<A, B>(_:customization:sectionID:includeHidden:id:)(v318, v322, (uint64_t)v238[3].isa, (void *)v238[4].isa, LOBYTE(v238[5].isa), 1, (uint64_t)closure #6 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:), 0);
  _s2os6LoggerVSgWOhTm_1(v322, (uint64_t (*)(void))type metadata accessor for TabViewCustomization?);
  Swift::Int v105 = (Swift::Int)v323;
  swift_bridgeObjectRelease();
  uint64_t v324 = specialized Array.count.getter((uint64_t)v323);
  uint64_t v430 = (uint64_t)v323;
  if (!v324)
  {
    specialized static Array._allocateUninitialized(_:)(0);
    goto LABEL_339;
  }
  v434[0] = specialized ContiguousArray.init()();
  specialized ContiguousArray.reserveCapacity(_:)(v324);
  if (v324 < 0) {
    goto LABEL_355;
  }
  v325 = v323 + 6;
  uint64_t v326 = v324;
  do
  {
    uint64_t v327 = (uint64_t)v325[-2].isa;
    uint64_t v328 = (uint64_t)v325[-1].isa;
    v325 += 3;
    outlined copy of TabCustomizationID.Base();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v329 = *(void *)(v434[0] + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v329);
    uint64_t v330 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v329, v327, v328);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v330, v331, v332, v333);
    --v326;
  }
  while (v326);
  uint64_t v285 = v382;
  id v242 = v383;
  uint64_t v264 = v418;
  Swift::Int v105 = v430;
LABEL_339:
  swift_bridgeObjectRelease();
  Class v334 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v242, sel__setDisplayOrder_, v334);

  uint64_t v335 = (uint64_t)v375;
  static Log.tabView.getter();
  if (v422((char *)v335, 1, v264) == 1)
  {
    swift_bridgeObjectRelease();
    _s2os6LoggerVSgWOhTm_1(v335, (uint64_t (*)(void))type metadata accessor for Logger?);
    Swift::Int v105 = v381;
    goto LABEL_287;
  }
  outlined init with copy of TabItemGroup((uint64_t)v238, (uint64_t)v434);
  outlined init with copy of TabItemGroup((uint64_t)v434, (uint64_t)v443);
  uint64_t v336 = swift_allocObject();
  uint64_t v428 = v336;
  memcpy((void *)(v336 + 16), v434, 0x108uLL);
  uint64_t v337 = swift_allocObject();
  *(void *)(v337 + 16) = v105;
  uint64_t v338 = v337;
  uint64_t v426 = v337;
  swift_bridgeObjectRetain();
  os_log_t v425 = (os_log_t)Logger.logObject.getter();
  LODWORD(v424) = static os_log_type_t.default.getter();
  uint64_t v339 = swift_allocObject();
  *(unsigned char *)(v339 + 16) = 32;
  uint64_t v340 = v339;
  v427 = (char *)v339;
  uint64_t v419 = swift_allocObject();
  *(unsigned char *)(v419 + 16) = 8;
  uint64_t v341 = swift_allocObject();
  *(void *)(v341 + 16) = partial apply for implicit closure #13 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:);
  *(void *)(v341 + 24) = v336;
  uint64_t v342 = swift_allocObject();
  *(void *)(v342 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v342 + 24) = v341;
  v343 = (_OWORD *)swift_allocObject();
  *((unsigned char *)v343 + 16) = 32;
  uint64_t v344 = swift_allocObject();
  *(unsigned char *)(v344 + 16) = 8;
  uint64_t v345 = swift_allocObject();
  *(void *)(v345 + 16) = partial apply for implicit closure #14 in UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:);
  *(void *)(v345 + 24) = v338;
  v346 = swift_allocObject();
  v346[2].uint64_t isa = (Class)implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  v346[3].uint64_t isa = (Class)v345;
  _s2os6LoggerVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:_:_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:_:_:), MEMORY[0x1E4FBBE00]);
  uint64_t v347 = swift_allocObject();
  *(_OWORD *)(v347 + 16) = xmmword_1883A98E0;
  *(void *)(v347 + 32) = partial apply for closure #1 in OSLogArguments.append(_:);
  *(void *)(v347 + 40) = v340;
  uint64_t v348 = v419;
  *(void *)(v347 + 48) = closure #1 in OSLogArguments.append(_:)partial apply;
  *(void *)(v347 + 56) = v348;
  *(void *)(v347 + 64) = partial apply for closure #1 in OSLogArguments.append(_:);
  *(void *)(v347 + 72) = v342;
  *(void *)(v347 + 80) = closure #1 in OSLogArguments.append(_:)partial apply;
  *(void *)(v347 + 88) = v343;
  *(void *)(v347 + 96) = closure #1 in OSLogArguments.append(_:)partial apply;
  *(void *)(v347 + 104) = v344;
  *(void *)(v347 + 112) = closure #1 in OSLogArguments.append(_:)partial apply;
  *(void *)(v347 + 120) = v346;
  swift_retain();
  uint64_t v420 = v341;
  swift_retain();
  swift_retain();
  v417 = (char *)v345;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v423 = v343;
  swift_retain();
  v422 = (uint64_t (*)(char *, uint64_t, uint64_t))v344;
  swift_retain();
  swift_retain();
  os_log_t v349 = v425;
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v349, (os_log_type_t)v424))
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    outlined destroy of TabItemGroup((uint64_t)v443);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    id v242 = v383;
    uint64_t v362 = v418;
    uint64_t v71 = (unsigned __int8 *)v421;
    uint64_t v286 = (uint64_t)v429;
    v363 = v375;
    goto LABEL_350;
  }
  v416 = v346;
  v350 = (uint8_t *)swift_slowAlloc();
  uint64_t v415 = swift_slowAlloc();
  *(void *)&v431[0] = v415;
  *(_WORD *)v350 = 514;
  v350[2] = 32;
  swift_release();
  v350[3] = 8;
  swift_release();
  Swift::Int v105 = *(void *)&v443[24];
  unint64_t v351 = *(void *)&v443[32];
  outlined copy of TabCustomizationID.Base();
  *(void *)v433 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v351, (uint64_t *)v431);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  outlined consume of TabCustomizationID.Base();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of TabItemGroup((uint64_t)v443);
  v350[12] = 32;
  swift_release();
  v350[13] = 8;
  swift_release();
  if (!v324)
  {
    uint64_t v361 = specialized static Array._allocateUninitialized(_:)(0);
    id v242 = v383;
    uint64_t v71 = (unsigned __int8 *)v421;
    goto LABEL_349;
  }
  *(void *)v433 = specialized ContiguousArray.init()();
  specialized ContiguousArray.reserveCapacity(_:)(v324);
  if (v324 < 0) {
    goto LABEL_356;
  }
  os_log_t v352 = (os_log_t)(v430 + 48);
  id v353 = v383;
  uint64_t v71 = (unsigned __int8 *)v421;
  do
  {
    uint64_t v354 = (uint64_t)v352[-2].isa;
    uint64_t v355 = (uint64_t)v352[-1].isa;
    v352 += 3;
    outlined copy of TabCustomizationID.Base();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v356 = *(void *)(*(void *)v433 + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v356);
    uint64_t v357 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v356, v354, v355);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v357, v358, v359, v360);
    --v324;
  }
  while (v324);
  uint64_t v361 = *(void *)v433;
  id v242 = v353;
LABEL_349:
  *(void *)v433 = v361;
  type metadata accessor for TabItem?(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v364 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v366 = v365;
  swift_bridgeObjectRelease();
  *(void *)v433 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v364, v366, (uint64_t *)v431);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  os_log_t v367 = v425;
  _os_log_impl(&dword_1872C6000, v425, (os_log_type_t)v424, "Set display order of group %s:\n%s", v350, 0x16u);
  uint64_t v368 = v415;
  swift_arrayDestroy();
  MEMORY[0x18C119C60](v368, -1, -1);
  MEMORY[0x18C119C60](v350, -1, -1);

  v363 = v375;
  uint64_t v362 = v418;
  uint64_t v286 = (uint64_t)v429;
LABEL_350:
  (*(void (**)(char *, uint64_t))(v380 + 8))(v363, v362);
  Swift::Int v105 = v381;
  uint64_t v285 = v382;
LABEL_288:
  id v287 = objc_msgSend(v242, sel__children);
  unint64_t v288 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v428 = specialized Array._getCount()(v288);
  if (!v428)
  {
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_313;
  }
  uint64_t v289 = 0;
  uint64_t v426 = specialized Array.count.getter(v286);
  v427 = (char *)(v288 & 0xC000000000000001);
  v290 = (v286 + 32);
  v423 = &v431[3];
  v424 = &v444;
  os_log_t v425 = (os_log_t)v288;
  if ((v288 & 0xC000000000000001) == 0) {
    goto LABEL_291;
  }
  while (2)
  {
    id v291 = (id)MEMORY[0x18C117680](v289, v288);
LABEL_292:
    v292 = v291;
    if (__OFADD__(v289, 1)) {
      goto LABEL_352;
    }
    if (v426 == v289)
    {
      swift_release();
      swift_bridgeObjectRelease();

      goto LABEL_312;
    }
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v289, 1, v286);
    v434[0] = (uint64_t)v292;
    outlined init with copy of TabEntry((uint64_t)v290, (uint64_t)&v434[1]);
    outlined init with copy of TabEntry((uint64_t)&v434[1], (uint64_t)v443);
    unsigned __int8 v293 = *v424;
    uint64_t v430 = (uint64_t)v290;
    if ((v293 & 1) == 0)
    {
      v431[4] = *(_OWORD *)&v443[64];
      v431[5] = *(_OWORD *)&v443[80];
      *(void *)&v431[6] = *(void *)&v443[96];
      v431[0] = *(_OWORD *)v443;
      v431[1] = *(_OWORD *)&v443[16];
      v431[2] = *(_OWORD *)&v443[32];
      v431[3] = *(_OWORD *)&v443[48];
      specialized UIHostingController.updateProperties(on:using:customization:environment:coordinator:)(v292, (uint64_t)v431, v391, v390, v285);
      outlined destroy of TabItem((uint64_t)v431);

      goto LABEL_304;
    }
    memcpy(v431, v443, 0x108uLL);
    self;
    uint64_t v294 = swift_dynamicCastObjCClass();
    if (!v294) {
      goto LABEL_360;
    }
    v295 = (void *)v294;
    _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)v423, (uint64_t)v432, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
    if (*((void *)&v432[1] + 1))
    {
      *(_OWORD *)&v433[64] = v432[4];
      *(_OWORD *)&v433[80] = v432[5];
      *(void *)&v433[96] = *(void *)&v432[6];
      *(_OWORD *)v433 = v432[0];
      *(_OWORD *)&v433[16] = v432[1];
      *(_OWORD *)&v433[48] = v432[3];
      *(_OWORD *)&v433[32] = v432[2];
      id v296 = v292;
      specialized UIHostingController.updateProperties(on:using:customization:environment:coordinator:)(v295, (uint64_t)v433, v391, v390, v285);
      outlined destroy of TabItem((uint64_t)v433);
    }
    else
    {
      id v297 = v292;
      outlined destroy of PlatformItem.SelectionContent?((uint64_t)v432, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
    }
    int v298 = TabItemGroup.sidebarReorderable.getter();
    if (v298 != objc_msgSend(v295, sel__allowsReordering)) {
      objc_msgSend(v295, sel__setAllowsReordering_, TabItemGroup.sidebarReorderable.getter());
    }
    specialized UIHostingController.updateChildrenCreatingIfNeeded(of:using:customization:environment:coordinator:)(v295, v431, v391, v390, v285, v411);
    id v299 = objc_msgSend(v295, sel__selectedElement);

    if (v299)
    {

      outlined destroy of TabItemGroup((uint64_t)v431);
      uint64_t v286 = (uint64_t)v429;
LABEL_304:
      outlined destroy of TabEntry((uint64_t)&v434[1]);
      uint64_t v300 = v428;
    }
    else
    {
      id v301 = objc_msgSend(v295, sel__children);
      uint64_t v302 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      *(void *)&v432[0] = v302;
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITabElement);
      type metadata accessor for UIViewController?(0, &lazy cache variable for type metadata for [_UITab], &lazy cache variable for type metadata for _UITab, 0x1E4FB2398, MEMORY[0x1E4FBB320]);
      lazy protocol witness table accessor for type [_UITab] and conformance [A]();
      Swift::Int v105 = v381;
      uint64_t v285 = v382;
      Sequence.first<A>(ofType:)();
      swift_bridgeObjectRelease();
      v303 = *(void **)v433;
      objc_msgSend(v295, sel__setSelectedElement_, *(void *)v433);

      outlined destroy of TabItemGroup((uint64_t)v431);
      outlined destroy of TabEntry((uint64_t)&v434[1]);
      uint64_t v300 = v428;
      uint64_t v286 = (uint64_t)v429;
    }
    if (v289 + 1 != v300)
    {
      ++v289;
      v290 = (v430 + 272);
      unint64_t v288 = (unint64_t)v425;
      if (v427) {
        continue;
      }
LABEL_291:
      id v291 = *(id *)(v288 + 8 * v289 + 32);
      goto LABEL_292;
    }
    break;
  }
  swift_release();
  swift_bridgeObjectRelease();
LABEL_312:
  uint64_t v71 = (unsigned __int8 *)v421;
LABEL_313:

  return outlined consume of TabItemGroup.HostCache?(v445, v446, (uint64_t)v447);
}

uint64_t specialized static TabViewCustomization.arrangedChildren<A, B>(_:customization:sectionID:includeHidden:id:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, char a6, uint64_t a7, uint64_t a8)
{
  int v46 = a5;
  uint64_t v47 = a3;
  unint64_t v48 = a4;
  type metadata accessor for TabViewCustomization?(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = &v45[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = type metadata accessor for TabViewCustomization();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = &v45[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = &v45[-v21];
  outlined init with copy of AdaptableTabView.BodyContent(a2, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TabViewCustomization?);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
  {
    outlined init with take of Binding<TabViewCustomization>((uint64_t)v15, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
    outlined init with copy of AdaptableTabView.BodyContent((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
    if (a6)
    {
      uint64_t v25 = *(void *)(*(void *)&v19[*(int *)(v16 + 24)] + 16);
      uint64_t v26 = _s2os6LoggerVSgWOhTm_1((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
      if (!v25)
      {
        uint64_t v23 = (uint64_t (*)(void))type metadata accessor for TabViewCustomization;
        uint64_t v24 = (uint64_t)v22;
        goto LABEL_3;
      }
    }
    else
    {
      uint64_t v26 = _s2os6LoggerVSgWOhTm_1((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
    }
    MEMORY[0x1F4188790](v26);
    *(void *)&v45[-32] = a7;
    *(void *)&v45[-24] = a8;
    v45[-16] = a6 & 1;
    *(void *)&v45[-8] = v22;
    uint64_t v27 = swift_bridgeObjectRetain();
    uint64_t v28 = specialized Sequence.compactMap<A>(_:)(v27, (void (*)(void *__return_ptr, void, void))partial apply for specialized closure #1 in static TabViewCustomization.arrangedChildren<A, B>(_:customization:sectionID:includeHidden:id:), (uint64_t)&v45[-48]);
    swift_bridgeObjectRelease();
    os_log_t v50 = v28;
    uint64_t v29 = *(void *)&v22[*(int *)(v16 + 24)];
    if (*(void *)(v29 + 16))
    {
      char v30 = v46 & 1;
      swift_bridgeObjectRetain();
      uint64_t v32 = v47;
      uint64_t v31 = (uint64_t)v48;
      outlined copy of TabCustomizationID.Base();
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v32, v31, v30);
      if ((v34 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        outlined consume of TabCustomizationID.Base();
        int64_t v36 = v28[2];
        if (v36)
        {
LABEL_12:
          uint64_t v49 = MEMORY[0x1E4FBC860];
          swift_bridgeObjectRetain();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
          a1 = v49;
          unint64_t v48 = v28;
          uint64_t v37 = v28 + 7;
          do
          {
            uint64_t v38 = *((void *)v37 - 2);
            uint64_t v39 = *((void *)v37 - 1);
            char v40 = *v37;
            outlined copy of TabCustomizationID.Base();
            uint64_t v49 = a1;
            unint64_t v42 = *(void *)(a1 + 16);
            unint64_t v41 = *(void *)(a1 + 24);
            if (v42 >= v41 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v41 > 1), v42 + 1, 1);
              a1 = v49;
            }
            *(void *)(a1 + 16) = v42 + 1;
            uint64_t v43 = a1 + 24 * v42;
            *(void *)(v43 + 32) = v38;
            *(void *)(v43 + 40) = v39;
            *(unsigned char *)(v43 + 48) = v40;
            v37 += 56;
            --v36;
          }
          while (v36);
          swift_bridgeObjectRelease_n();
          goto LABEL_19;
        }
LABEL_18:
        swift_bridgeObjectRelease();
        a1 = MEMORY[0x1E4FBC860];
LABEL_19:
        _s2os6LoggerVSgWOhTm_1((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
        return a1;
      }
      uint64_t v35 = *(void *)(*(void *)(v29 + 56) + 8 * v33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      outlined consume of TabCustomizationID.Base();
      specialized MutableCollection<>.sort(by:)(&v50, v35);
      swift_bridgeObjectRelease();
      uint64_t v28 = v50;
    }
    int64_t v36 = v28[2];
    if (v36) {
      goto LABEL_12;
    }
    goto LABEL_18;
  }
  uint64_t v23 = (uint64_t (*)(void))type metadata accessor for TabViewCustomization?;
  uint64_t v24 = (uint64_t)v15;
LABEL_3:
  _s2os6LoggerVSgWOhTm_1(v24, v23);
  swift_bridgeObjectRetain();
  return a1;
}

void specialized UIHostingController.updateTitleImage(on:using:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  _s7SwiftUI7TabItemVSgWObTm_0(a2 + 24, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
  _s7SwiftUI7TabItemVSgWObTm_0((uint64_t)v43, (uint64_t)v44, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)v44) == 1) {
    goto LABEL_11;
  }
  if (v44[0])
  {
    id v5 = objc_msgSend(v44[0], sel_string);
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    id v9 = objc_msgSend(a1, sel_title);
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    if (v10 == v6 && v12 == v8)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v13)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v14 = (void *)MEMORY[0x18C115780](v6, v8);
        swift_bridgeObjectRelease();
        objc_msgSend(a1, sel_setTitle_, v14);
      }
    }
  }
  _s7SwiftUI7TabItemVSgWObTm_0((uint64_t)v43, (uint64_t)v41, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
  if (!v42)
  {
LABEL_11:
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    id v15 = objc_msgSend(v42, sel_string);
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;
  }
  id v19 = objc_msgSend(a1, sel_subtitle);
  if (!v19)
  {
    if (!v18) {
      goto LABEL_26;
    }
LABEL_21:
    uint64_t v26 = (void *)MEMORY[0x18C115780](v16, v18);
LABEL_23:
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_setSubtitle_, v26);

    goto LABEL_26;
  }
  uint64_t v20 = v19;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  if (!v18)
  {
    uint64_t v26 = 0;
    goto LABEL_23;
  }
  if (v21 != v16 || v18 != v23)
  {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_25;
    }
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
LABEL_25:
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v27 = (void *)PlatformItem.makeTabBarItemImage()();
  id v28 = objc_msgSend(a1, sel_image);
  if (v28)
  {
    uint64_t v29 = v28;
    if (v27)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
      id v30 = v27;
      id v31 = v29;
      char v32 = static NSObject.== infix(_:_:)();

      if (v32) {
        goto LABEL_34;
      }
    }
    else
    {
    }
LABEL_33:
    objc_msgSend(a1, sel_setImage_, v27);
    goto LABEL_34;
  }
  if (v27) {
    goto LABEL_33;
  }
LABEL_34:
  id v33 = objc_msgSend(v3, sel_tabBarItem);
  if (!v33)
  {

    __break(1u);
LABEL_46:

    __break(1u);
    return;
  }
  char v34 = v33;
  id v35 = objc_msgSend(v33, sel_image);

  if (v35)
  {
    if (v27)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
      id v36 = v27;
      id v37 = v35;
      char v38 = static NSObject.== infix(_:_:)();

      if (v38) {
        goto LABEL_44;
      }
    }
    else
    {
    }
LABEL_42:
    id v39 = objc_msgSend(v3, sel_tabBarItem);
    if (v39)
    {
      char v40 = v39;
      objc_msgSend(v39, sel_setImage_, v27);

      id v36 = v27;
LABEL_44:

      return;
    }
    goto LABEL_46;
  }
  if (v27) {
    goto LABEL_42;
  }
}

uint64_t AdaptableTabView.BodyContent.representable(onlyTabs:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UIKitAdaptableTabView(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for AdaptableTabView.BodyContent(0);
  int64_t v11 = _VariadicView_Children.endIndex.getter();
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (result < 0)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (v11 < 0 || result < v11) {
    goto LABEL_20;
  }
  uint64_t v61 = v2;
  uint64_t v62 = (int *)v5;
  char v63 = v10;
  uint64_t v64 = a2;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (v11)
  {
    LODWORD(v60) = a1;
    uint64_t v79 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    uint64_t v14 = 0;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      v71[2] = v71[8];
      v71[3] = v71[9];
      v71[4] = v71[10];
      v71[5] = v71[11];
      v71[0] = v71[6];
      v71[1] = v71[7];
      outlined init with copy of _VariadicView_Children.Element((uint64_t)v71, (uint64_t)v70);
      outlined init with copy of _VariadicView_Children.Element((uint64_t)v70, (uint64_t)v69);
      uint64_t v68 = v70[11];
      uint64_t v66 = 0;
      char v67 = 1;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      if (BYTE8(v72) == 1) {
        uint64_t v15 = AGMakeUniqueID();
      }
      else {
        uint64_t v15 = v72;
      }
      outlined destroy of _VariadicView_Children.Element((uint64_t)v70);
      uint64_t v78 = v15;
      long long v76 = v69[4];
      long long v77 = v69[5];
      long long v72 = v69[0];
      long long v73 = v69[1];
      long long v74 = v69[2];
      long long v75 = v69[3];
      outlined destroy of _VariadicView_Children.Element((uint64_t)v71);
      uint64_t v13 = v79;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
        uint64_t v13 = v79;
      }
      unint64_t v17 = *(void *)(v13 + 16);
      unint64_t v16 = *(void *)(v13 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v13 = v79;
      }
      *(void *)(v13 + 16) = v17 + 1;
      uint64_t v18 = v13 + 104 * v17;
      long long v19 = v72;
      long long v20 = v74;
      *(_OWORD *)(v18 + 48) = v73;
      *(_OWORD *)(v18 + 64) = v20;
      *(_OWORD *)(v18 + 32) = v19;
      long long v21 = v75;
      long long v22 = v76;
      long long v23 = v77;
      *(void *)(v18 + 128) = v78;
      *(_OWORD *)(v18 + 96) = v22;
      *(_OWORD *)(v18 + 112) = v23;
      *(_OWORD *)(v18 + 80) = v21;
      uint64_t result = _VariadicView_Children.endIndex.getter();
      if (v14 >= result) {
        break;
      }
      if (v11 == ++v14)
      {
        uint64_t v24 = (uint64_t)v7;
        LOBYTE(a1) = v60;
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v24 = (uint64_t)v7;
LABEL_17:
  uint64_t v25 = v61;
  AdaptableTabView.BodyContent.parseChildren(items:onlyTabs:)(v13, a1 & 1, (uint64_t *)&v72);
  uint64_t v60 = *((void *)&v72 + 1);
  long long v26 = v73;
  uint64_t v57 = v74;
  uint64_t v58 = v72;
  uint64_t v59 = static AdaptableTabView.makeSelectionCache(items:selectionValueOnlyIncludesTabs:processedTabs:)(v13, a1 & 1, v72);
  swift_bridgeObjectRelease();
  uint64_t v27 = (unsigned __int8 *)(v25 + *(int *)(v65 + 32));
  int v56 = *v27;
  uint64_t v29 = *((void *)v27 + 1);
  uint64_t v52 = *((void *)v27 + 2);
  uint64_t v28 = v52;
  uint64_t v53 = v29;
  uint64_t v30 = *((void *)v27 + 5);
  uint64_t v47 = *((void *)v27 + 4);
  uint64_t v31 = v47;
  uint64_t v49 = *((void *)v27 + 6);
  uint64_t v50 = v30;
  uint64_t v32 = *((void *)v27 + 7);
  LODWORD(v65) = *(unsigned __int16 *)(v27 + 65);
  id v33 = v62;
  uint64_t v34 = v24 + v62[6];
  uint64_t v54 = v32;
  uint64_t v55 = v34;
  int v51 = v27[24];
  int v48 = v27[64];
  swift_retain();
  swift_retain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v29, v28);
  uint64_t v35 = v31;
  uint64_t v36 = v49;
  uint64_t v37 = v50;
  outlined copy of TabSidebarAccessoryViewConfiguration?(v35);
  uint64_t v38 = v54;
  LOBYTE(v29) = v48;
  outlined copy of PlatformItemCollection?(v54, v48);
  specialized Environment.wrappedValue.getter(v55);
  *(_OWORD *)uint64_t v24 = v26;
  uint64_t v39 = v58;
  *(void *)(v24 + 16) = v57;
  *(unsigned char *)(v24 + 24) = v56;
  uint64_t v40 = v52;
  *(void *)(v24 + 32) = v53;
  *(void *)(v24 + 40) = v40;
  *(unsigned char *)(v24 + 48) = v51;
  *(void *)(v24 + 56) = v47;
  *(void *)(v24 + 64) = v37;
  *(void *)(v24 + 72) = v36;
  *(void *)(v24 + 80) = v38;
  *(unsigned char *)(v24 + 88) = v29;
  *(_WORD *)(v24 + 89) = v65;
  *(void *)(v24 + v33[7]) = v39;
  *(void *)(v24 + v33[8]) = v60;
  *(void *)(v24 + v33[9]) = v59;
  uint64_t v41 = v33[10];
  *(unsigned char *)(v24 + v41) = closure #1 in variable initialization expression of UIKitAdaptableTabView.clientNeedsTabItemPreferredColorSchemeSupport() & 1;
  uint64_t v42 = (uint64_t)v63;
  outlined init with copy of AdaptableTabView.BodyContent(v24, (uint64_t)v63, type metadata accessor for UIKitAdaptableTabView);
  _s2os6LoggerVSgWOhTm_1(v24, type metadata accessor for UIKitAdaptableTabView);
  LOBYTE(v41) = static Edge.Set.all.getter();
  swift_release();
  swift_release();
  uint64_t v43 = v64;
  outlined init with copy of AdaptableTabView.BodyContent(v42, v64, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>);
  type metadata accessor for ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>);
  uint64_t v45 = v43 + *(int *)(v44 + 36);
  *(void *)uint64_t v45 = -1;
  *(unsigned char *)(v45 + 8) = v41;
  return _s2os6LoggerVSgWOhTm_1(v42, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>);
}

uint64_t AdaptableTabView.BodyContent.parseChildren(items:onlyTabs:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AdaptableTabView.BodyContent(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AdaptableTabView.BodyContent(v3, (uint64_t)v9, type metadata accessor for AdaptableTabView.BodyContent);
  if ((a2 & 1) == 0)
  {
    uint64_t v10 = &v9[*(int *)(v7 + 20)];
    uint64_t v11 = *(void *)v10;
    char v12 = v10[8];
    outlined copy of Environment<Bool>.Content(*(void *)v10, v12);
    specialized Environment.wrappedValue.getter(v11, v12, &v32);
    outlined consume of Environment<Bool>.Content(v11, v12);
    char v13 = v32;
    if (v32 == 2)
    {
      _s2os6LoggerVSgWOhTm_1((uint64_t)v9, type metadata accessor for AdaptableTabView.BodyContent);
    }
    else
    {
      _s2os6LoggerVSgWOhTm_1((uint64_t)v9, type metadata accessor for AdaptableTabView.BodyContent);
      if ((v13 & 1) == 0) {
        goto LABEL_6;
      }
    }
    uint64_t v14 = (uint64_t)static AdaptableTabView.makeTabGroups(_:depth:maxDepth:)(a1, 0, 2);
    uint64_t v16 = v29;
    uint64_t v30 = (uint64_t *)(v3 + *(int *)(v7 + 28));
    uint64_t v23 = *v30;
    uint64_t v25 = v30[1];
    uint64_t v27 = v30[2];
    swift_retain();
    uint64_t result = swift_retain();
    goto LABEL_8;
  }
  _s2os6LoggerVSgWOhTm_1((uint64_t)v9, type metadata accessor for AdaptableTabView.BodyContent);
LABEL_6:
  uint64_t v14 = specialized static AdaptableTabView.extractTabs(_:)(a1);
  uint64_t v16 = v15;
  unint64_t v17 = (uint64_t *)(v3 + *(int *)(v7 + 28));
  uint64_t v18 = *v17;
  uint64_t v19 = v17[1];
  uint64_t v20 = v17[2];
  type metadata accessor for ItemIndexTabsOnlyIndexProjection();
  swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = specialized ItemIndexTabsOnlyIndexProjection.init(_:)(v21);
  swift_bridgeObjectRelease();
  uint64_t v23 = specialized Binding.projecting<A>(_:)(v22, v18, v19, v20);
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  swift_release();
  swift_release();
  uint64_t result = swift_release();
LABEL_8:
  *a3 = v14;
  a3[1] = v16;
  a3[2] = v23;
  a3[3] = v25;
  a3[4] = v27;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance AdaptableTabView.BodyContent@<X0>(uint64_t a1@<X8>)
{
  AdaptableTabView.BodyContent.representable(onlyTabs:)(1, a1);
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<PhoneInterfaceIdiom>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>>();
  return AdaptableTabView.BodyContent.representable(onlyTabs:)(0, a1 + *(int *)(v2 + 52));
}

id UIKitAdaptableTabView.makeUIViewController(context:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitTabBarController()), sel_init);
  objc_msgSend(v3, sel_setDelegate_, v2);
  id v4 = objc_msgSend(v3, sel__uip_sidebar);
  objc_msgSend(v4, sel__setDelegate_, v2);

  objc_msgSend(v3, sel__uip_setPreferredSidebarMode_, qword_1883A99F8[*(char *)(v1 + 90)]);
  swift_unknownObjectWeakAssign();
  return v3;
}

void UIKitAdaptableTabView.updateUIViewController(_:context:)(void *a1, uint64_t *a2)
{
  id v3 = v2;
  uint64_t v6 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v103 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v120 = (uint64_t)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v119 = v10;
  uint64_t v118 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v102 = (uint64_t)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v104 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  Swift::Int v105 = (char *)&v102 - v15;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v114 = (uint64_t)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a2;
  uint64_t v125 = a2[1];
  uint64_t v20 = a2[2];
  uint64_t v19 = a2[3];
  uint64_t v21 = (uint64_t *)(v18 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_viewControllers);
  swift_beginAccess();
  uint64_t v121 = v21;
  unint64_t v22 = *v21;
  uint64_t v130 = v20;
  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v124 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v124 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v129 = (int *)type metadata accessor for UIKitAdaptableTabView(0);
  uint64_t v126 = v129[7];
  uint64_t v23 = *(void *)((char *)v3 + v126);
  uint64_t v123 = *(void *)(v23 + 16);
  uint64_t v25 = *v3;
  uint64_t v24 = v3[1];
  uint64_t v26 = v3[2];
  *(void *)&long long v134 = *v3;
  *((void *)&v134 + 1) = v24;
  uint64_t v111 = v26;
  uint64_t v135 = v26;
  type metadata accessor for TabItem?(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
  uint64_t v28 = v27;
  MEMORY[0x18C113DA0](&v132);
  uint64_t v117 = v132;
  uint64_t v127 = v18;
  uint64_t v29 = (long long *)(v18 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selected);
  uint64_t v30 = *((void *)v29 + 2);
  long long v134 = *v29;
  uint64_t v135 = v30;
  uint64_t v122 = v28;
  MEMORY[0x18C113DA0](&v132, v28);
  uint64_t v116 = v132;
  id v31 = objc_msgSend(a1, sel_selectedIndex);
  uint64_t v32 = NSNotFound.getter();
  uint64_t v128 = a1;
  if (v31 == (id)v32)
  {
    int v115 = 0;
  }
  else
  {
    id v33 = objc_msgSend(a1, sel_selectedIndex);
    *(void *)&long long v134 = v130;
    *((void *)&v134 + 1) = v19;
    EnvironmentValues.horizontalSizeClass.getter();
    BOOL v34 = (v132 & 1) != 0 || v132 == 2;
    uint64_t v35 = 7;
    if (!v34) {
      uint64_t v35 = 4;
    }
    BOOL v36 = v35 < (uint64_t)v33;
    a1 = v128;
    int v37 = !v36;
    int v115 = v37;
  }
  uint64_t v113 = v3;
  id v38 = objc_msgSend(a1, sel_tabBar);
  uint64_t v112 = v19;
  type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SpringLoadingBehavior.Key>, (uint64_t)&type metadata for SpringLoadingBehavior.Key, (uint64_t)&protocol witness table for SpringLoadingBehavior.Key, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v19)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  objc_msgSend(v38, sel_setSpringLoaded_, v134 != 2);

  *(void *)uint64_t v29 = v25;
  *((void *)v29 + 1) = v24;
  *((void *)v29 + 2) = v111;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v39 = v127;
  *(void *)(v127 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_tabs) = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = v129;
  uint64_t v41 = v113;
  *(void *)(v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_tabCache) = *(void *)((char *)v113 + v129[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = *(void *)((char *)v41 + v40[9]);
  uint64_t v43 = (void *)(v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_selectionCache);
  swift_beginAccess();
  *uint64_t v43 = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v44 = *((unsigned __int8 *)v41 + 24);
  uint64_t v45 = v41[4];
  uint64_t v46 = v41[5];
  uint64_t v47 = v41[7];
  uint64_t v48 = v41[8];
  uint64_t v49 = v41[9];
  uint64_t v50 = v41[10];
  char v51 = *((unsigned char *)v41 + 90);
  uint64_t v52 = *((unsigned __int8 *)v41 + 48);
  __int16 v53 = *((unsigned __int8 *)v41 + 88);
  __int16 v54 = v53 | (*((unsigned __int8 *)v41 + 89) << 8);
  uint64_t v55 = v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration;
  uint64_t v56 = *(void *)(v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration);
  uint64_t v111 = *(void *)(v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 8);
  uint64_t v57 = *(void *)(v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 16);
  uint64_t v110 = *(void *)(v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 24);
  uint64_t v109 = *(void *)(v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 32);
  uint64_t v108 = *(void *)(v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 40);
  uint64_t v107 = *(void *)(v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 48);
  uint64_t v106 = *(void *)(v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_sidebarConfiguration + 56);
  *(void *)uint64_t v55 = v44;
  *(void *)(v55 + 8) = v45;
  *(void *)(v55 + 16) = v46;
  *(void *)(v55 + 24) = v52;
  *(void *)(v55 + 32) = v47;
  *(void *)(v55 + 40) = v48;
  *(void *)(v55 + 48) = v49;
  *(void *)(v55 + 56) = v50;
  __int16 v58 = *(_WORD *)(v55 + 64);
  v55 += 64;
  *(unsigned char *)(v55 + 2) = v51;
  *(_WORD *)uint64_t v55 = v54;
  outlined copy of Binding<NavigationSplitViewColumn>?(v45, v46);
  uint64_t v59 = (long long *)v41;
  outlined copy of TabSidebarAccessoryViewConfiguration?(v47);
  outlined copy of PlatformItemCollection?(v50, v53);
  outlined consume of TabSidebarConfiguration?(v56, v111, v57, v110, v109, v108, v107, v106, v58);
  uint64_t v60 = (uint64_t)v41 + v129[6];
  uint64_t v61 = v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_customization;
  swift_beginAccess();
  outlined assign with copy of Binding<TabViewCustomization>?(v60, v61);
  swift_endAccess();
  uint64_t v62 = v130;
  uint64_t v63 = v112;
  *(void *)&long long v132 = v130;
  *((void *)&v132 + 1) = v112;
  uint64_t v64 = v114;
  EnvironmentValues.searchFieldState.getter(v114);
  uint64_t v65 = v39 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchState;
  swift_beginAccess();
  outlined assign with take of Binding<SearchFieldState>?(v64, v65);
  swift_endAccess();
  uint64_t v66 = v128;
  UITabBarController.updateSidebarToConfiguration(coordinator:customization:transaction:)(v39, v60, v125);
  if (v124 != v123)
  {
    uint64_t v67 = (uint64_t)v105;
    static Log.tabView.getter();
    uint64_t v68 = type metadata accessor for Logger();
    uint64_t v69 = *(void *)(v68 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68) == 1)
    {
      _s2os6LoggerVSgWOhTm_1(v67, (uint64_t (*)(void))type metadata accessor for Logger?);
    }
    else
    {
      long long v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v75, v76))
      {
        long long v77 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v77 = 0;
        _os_log_impl(&dword_1872C6000, v75, v76, "Building the tabview", v77, 2u);
        uint64_t v78 = v77;
        uint64_t v67 = (uint64_t)v105;
        MEMORY[0x18C119C60](v78, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v67, v68);
      uint64_t v66 = v128;
    }
    uint64_t v70 = v121;
    unint64_t v79 = *(void *)((char *)v59 + v126);
    uint64_t v80 = *((void *)v59 + 2);
    long long v132 = *v59;
    uint64_t v133 = v80;
    swift_bridgeObjectRetain();
    MEMORY[0x18C113DA0](&v131, v122);
    uint64_t v81 = v131;
    swift_retain();
    swift_retain();
    specialized TabViewCoordinator_Phone.rebuildTabs<A>(tabBarController:tabs:selected:environment:transaction:)(v79, v81, v62, v63, v125);
LABEL_33:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    goto LABEL_34;
  }
  uint64_t v70 = v121;
  if ((unint64_t)*v121 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v71 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v71 = *(void *)((*v121 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v72 = (uint64_t)v104;
  if (v71)
  {
    static Log.tabView.getter();
    uint64_t v73 = type metadata accessor for Logger();
    uint64_t v74 = *(void *)(v73 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v72, 1, v73) == 1)
    {
      _s2os6LoggerVSgWOhTm_1(v72, (uint64_t (*)(void))type metadata accessor for Logger?);
    }
    else
    {
      uint64_t v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v84 = 0;
        _os_log_impl(&dword_1872C6000, v82, v83, "Updating tabview hosts", v84, 2u);
        uint64_t v85 = v84;
        uint64_t v72 = (uint64_t)v104;
        MEMORY[0x18C119C60](v85, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v73);
      uint64_t v66 = v128;
      uint64_t v70 = v121;
    }
    uint64_t v86 = *(void *)((char *)v59 + v126);
    swift_beginAccess();
    UIKitAdaptableTabView.rearrangeHosts(_:toMatch:)((uint64_t)v70, v86);
    swift_endAccess();
    uint64_t v87 = *v70;
    uint64_t v88 = *((void *)v59 + 2);
    long long v132 = *v59;
    uint64_t v133 = v88;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    MEMORY[0x18C113DA0](&v131, v122);
    uint64_t v89 = v131;
    swift_retain();
    swift_retain();
    specialized TabViewCoordinator_Phone.updateHosts<A, B>(_:tabs:selected:environment:transaction:)(v87, v86, v89, v62, v63, v125);
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
LABEL_34:
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v66, sel_setCustomizableViewControllers_, isa);

  uint64_t v91 = v120;
  outlined init with copy of AdaptableTabView.BodyContent(v60, v120, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  uint64_t v92 = v119;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48))(v91, 1, v119) == 1)
  {
    int64_t v93 = type metadata accessor for Binding<TabViewCustomization>?;
    uint64_t v94 = v91;
  }
  else
  {
    uint64_t v95 = v102;
    outlined init with take of Binding<TabViewCustomization>(v91, v102, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
    uint64_t v96 = (uint64_t)v103;
    MEMORY[0x18C113DA0](v92);
    TabViewCustomization.validateCustomization(entries:)(*(Swift::OpaquePointer *)((char *)v59 + v126));
    _s2os6LoggerVSgWOhTm_1(v96, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
    int64_t v93 = type metadata accessor for Binding<TabViewCustomization>;
    uint64_t v94 = v95;
  }
  _s2os6LoggerVSgWOhTm_1(v94, (uint64_t (*)(void))v93);
  TabViewCoordinator_Phone.dismissPresentationIfNeeded()();
  char v97 = v115;
  if (v117 != v116) {
    char v97 = 1;
  }
  if ((v97 & 1) != 0 || v124 != v123)
  {
    uint64_t v98 = *v70;
    uint64_t v99 = *(void *)((char *)v59 + v126);
    uint64_t v100 = *((void *)v59 + 2);
    long long v132 = *v59;
    uint64_t v133 = v100;
    swift_bridgeObjectRetain();
    MEMORY[0x18C113DA0](&v131, v122);
    uint64_t v101 = v131;
    *(void *)&long long v132 = v62;
    *((void *)&v132 + 1) = v63;
    swift_retain();
    swift_retain();
    UIKitAdaptableTabView.setViewControllers(on:allViewControllers:tabs:selected:environment:)(v66, v98, v99, v101, (uint64_t *)&v132);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t UIKitAdaptableTabView.rearrangeHosts(_:toMatch:)(uint64_t isUniquelyReferenced_nonNull_native, uint64_t a2)
{
  uint64_t v77 = a2;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v5 = (unint64_t)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v86 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v6 = *(void *)isUniquelyReferenced_nonNull_native;
  if (*(void *)isUniquelyReferenced_nonNull_native >> 62) {
    goto LABEL_25;
  }
  uint64_t v7 = *(unsigned char **)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v78 = (uint64_t *)isUniquelyReferenced_nonNull_native;
  for (unint64_t i = v5; v7; unint64_t i = v5)
  {
    uint64_t v83 = v6;
    uint64_t v84 = (uint64_t *)(v6 & 0xC000000000000001);
    uint64_t v8 = 4;
    uint64_t v82 = v7;
    while (1)
    {
      uint64_t v9 = v8 - 4;
      id v10 = v84 ? (id)MEMORY[0x18C117680](v8 - 4, v6) : *(id *)(v6 + 8 * v8);
      int isUniquelyReferenced_nonNull_native = (uint64_t)v10;
      uint64_t v11 = (unsigned char *)(v8 - 3);
      if (__OFADD__(v9, 1)) {
        break;
      }
      id v12 = objc_msgSend(v10, sel__uip_tabElement);
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v85 = (unsigned char *)isUniquelyReferenced_nonNull_native;
        id v14 = objc_msgSend(v12, sel__identifier);

        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v6 = v16;

        unint64_t v17 = v86;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v92 = (void *)v17;
        unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v6);
        uint64_t v19 = *(void *)(v17 + 16);
        BOOL v20 = (v18 & 1) == 0;
        uint64_t v21 = v19 + v20;
        if (__OFADD__(v19, v20)) {
          goto LABEL_23;
        }
        char v22 = v18;
        if (*(void *)(v17 + 24) >= v21)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
          unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v6);
          if ((v22 & 1) != (v24 & 1)) {
            goto LABEL_87;
          }
          unint64_t v5 = v23;
        }
        uint64_t v25 = v92;
        unint64_t v86 = (unint64_t)v92;
        if (v22)
        {
          *(void *)(v92[7] + 8 * v5) = v9;
        }
        else
        {
          v92[(v5 >> 6) + 8] |= 1 << v5;
          uint64_t v26 = (uint64_t *)(v25[6] + 16 * v5);
          uint64_t *v26 = v15;
          v26[1] = v6;
          *(void *)(v25[7] + 8 * v5) = v9;
          uint64_t v27 = v25[2];
          BOOL v28 = __OFADD__(v27, 1);
          uint64_t v29 = v27 + 1;
          if (v28) {
            goto LABEL_24;
          }
          _OWORD v25[2] = v29;
          swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v7 = v82;
        uint64_t v6 = v83;
      }
      else
      {
      }
      ++v8;
      if (v11 == v7) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain_n();
    uint64_t v7 = (unsigned char *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v78 = (uint64_t *)isUniquelyReferenced_nonNull_native;
  }
LABEL_26:
  swift_bridgeObjectRelease();
  unint64_t v30 = *(void *)(v77 + 16);
  uint64_t v81 = v77 + 32;
  uint64_t v82 = &v88[8];
  uint64_t v80 = &v90[1];
  uint64_t v84 = &v89;
  uint64_t v85 = v93;
  swift_bridgeObjectRetain();
  unint64_t v31 = 0;
  *(void *)&long long v32 = 134218752;
  long long v76 = v32;
  id v33 = v78;
  uint64_t v83 = v30;
  while (1)
  {
    if (v31 == v30)
    {
      memset(v90, 0, sizeof(v90));
      unint64_t v31 = v30;
      char v91 = -1;
    }
    else
    {
      if (v31 >= v30) {
        goto LABEL_80;
      }
      BOOL v34 = v82;
      outlined init with copy of TabEntry(v81 + 272 * v31, (uint64_t)v82);
      v90[0] = v31;
      outlined init with take of TabEntry((uint64_t)v34, (uint64_t)v80);
      ++v31;
    }
    outlined init with take of Binding<TabViewCustomization>((uint64_t)v90, (uint64_t)&v92, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TabEntry)?);
    if (v93[264] == 255)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    unint64_t v35 = (unint64_t)v92;
    outlined init with take of TabEntry((uint64_t)v85, (uint64_t)v90);
    uint64_t v36 = *v33;
    if ((*v33 & 0xC000000000000001) == 0) {
      break;
    }
    id v37 = (id)MEMORY[0x18C117680](v35);
LABEL_38:
    id v38 = v37;
    id v39 = objc_msgSend(v37, sel__uip_tabElement, (void)v76, *((void *)&v76 + 1));

    if (v39)
    {
      id v40 = objc_msgSend(v39, sel__identifier);

      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;

      outlined init with copy of TabEntry((uint64_t)v90, (uint64_t)v88);
      if (*(unsigned char *)v84)
      {
        memcpy(v87, v88, sizeof(v87));
        uint64_t v45 = *(void *)&v87[24];
        uint64_t v44 = *(void *)&v87[32];
        outlined copy of TabCustomizationID.Base();
        outlined destroy of TabItemGroup((uint64_t)v87);
        if (v45 == v41) {
          goto LABEL_43;
        }
      }
      else
      {
        *(_OWORD *)&v87[64] = *(_OWORD *)&v88[64];
        *(_OWORD *)&v87[80] = *(_OWORD *)&v88[80];
        *(void *)&v87[96] = *(void *)&v88[96];
        *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
        *(_OWORD *)&v87[16] = *(_OWORD *)&v88[16];
        *(_OWORD *)&v87[32] = *(_OWORD *)&v88[32];
        *(_OWORD *)&v87[48] = *(_OWORD *)&v88[48];
        uint64_t v45 = TabItem.platformIdentifier.getter();
        uint64_t v44 = v46;
        outlined destroy of TabItem((uint64_t)v87);
        if (v45 == v41)
        {
LABEL_43:
          if (v44 == v43)
          {
            swift_bridgeObjectRelease();
            goto LABEL_46;
          }
        }
      }
      char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v47)
      {
LABEL_46:
        outlined destroy of TabEntry((uint64_t)v90);
        swift_bridgeObjectRelease();
        unint64_t v30 = v83;
      }
      else
      {
        unint64_t v48 = v86;
        if (!*(void *)(v86 + 16)) {
          goto LABEL_27;
        }
        unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v44);
        if ((v50 & 1) == 0) {
          goto LABEL_27;
        }
        unint64_t v51 = *(void *)(*(void *)(v48 + 56) + 8 * v49);
        swift_bridgeObjectRelease();
        uint64_t v52 = i;
        static Log.tabView.getter();
        uint64_t v53 = type metadata accessor for Logger();
        uint64_t v54 = *(void *)(v53 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53) == 1)
        {
          _s2os6LoggerVSgWOhTm_1(v52, (uint64_t (*)(void))type metadata accessor for Logger?);
        }
        else
        {
          uint64_t v55 = Logger.logObject.getter();
          os_log_type_t v56 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v55, v56))
          {
            uint64_t v57 = swift_slowAlloc();
            *(_DWORD *)uint64_t v57 = v76;
            *(void *)uint64_t v88 = v51;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v57 + 12) = 2048;
            *(void *)uint64_t v88 = v35;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v57 + 22) = 2048;
            *(void *)uint64_t v88 = v35;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v57 + 32) = 2048;
            *(void *)uint64_t v88 = v51;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_1872C6000, v55, v56, "Swapping host from idx %ld to %ld,\nmoving other host at %ld to %ld to\nget it out of the way", (uint8_t *)v57, 0x2Au);
            MEMORY[0x18C119C60](v57, -1, -1);
          }

          (*(void (**)(unint64_t, uint64_t))(v54 + 8))(i, v53);
        }
        id v33 = v78;
        uint64_t v58 = *v78;
        if ((*v78 & 0xC000000000000001) != 0)
        {
          id v59 = (id)MEMORY[0x18C117680](v35, *v78);
          uint64_t v58 = *v33;
          if ((*v33 & 0xC000000000000001) != 0) {
            goto LABEL_76;
          }
        }
        else
        {
          if ((v35 & 0x8000000000000000) != 0) {
            goto LABEL_81;
          }
          if (v35 >= *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_82;
          }
          id v59 = *(id *)(v58 + 8 * v35 + 32);
          if ((v58 & 0xC000000000000001) != 0)
          {
LABEL_76:
            id v60 = (id)MEMORY[0x18C117680](v51, v58);
            uint64_t v58 = *v33;
            goto LABEL_61;
          }
        }
        if ((v51 & 0x8000000000000000) != 0) {
          goto LABEL_83;
        }
        if (v51 >= *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_85;
        }
        id v60 = *(id *)(v58 + 8 * v51 + 32);
LABEL_61:
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *id v33 = v58;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v58 < 0 || (v58 & 0x4000000000000000) != 0)
        {
          uint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew()(v58);
          *id v33 = v58;
        }
        uint64_t v62 = *(void **)((v58 & 0xFFFFFFFFFFFFFF8) + 8 * v35 + 0x20);
        *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 8 * v35 + 0x20) = v60;

        specialized Array._endMutation()();
        uint64_t v63 = *v33;
        id v64 = v59;
        int v65 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *id v33 = v63;
        if (!v65 || v63 < 0 || (v63 & 0x4000000000000000) != 0)
        {
          uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew()(v63);
          *id v33 = v63;
        }
        if ((v51 & 0x8000000000000000) != 0) {
          goto LABEL_84;
        }
        if (v51 >= *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_86;
        }
        uint64_t v66 = *(void **)((v63 & 0xFFFFFFFFFFFFFF8) + 8 * v51 + 0x20);
        *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 8 * v51 + 0x20) = v64;

        specialized Array._endMutation()();
        id v67 = objc_msgSend(v64, sel__uip_tabElement);
        if (v67)
        {
          uint64_t v68 = v67;
          id v69 = objc_msgSend(v67, sel__identifier);
          uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v72 = v71;

          unint64_t v73 = v86;
          char v74 = swift_isUniquelyReferenced_nonNull_native();
          *(void *)uint64_t v88 = v73;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v51, v70, v72, v74);
          unint64_t v86 = *(void *)v88;

          swift_bridgeObjectRelease();
LABEL_27:
          swift_bridgeObjectRelease();
          unint64_t v30 = v83;
          goto LABEL_28;
        }

        outlined destroy of TabEntry((uint64_t)v90);
        unint64_t v30 = v83;
      }
    }
    else
    {
LABEL_28:
      outlined destroy of TabEntry((uint64_t)v90);
    }
  }
  if ((v35 & 0x8000000000000000) == 0)
  {
    if (v35 >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_79;
    }
    id v37 = *(id *)(v36 + 8 * v35 + 32);
    goto LABEL_38;
  }
  __break(1u);
LABEL_79:
  __break(1u);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in variable initialization expression of UIKitAdaptableTabView.clientNeedsTabItemPreferredColorSchemeSupport()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1) {
    return 0;
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  if (v2 == 0xD000000000000013 && v4 == 0x800000018833B440)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

void UIKitAdaptableTabView.setViewControllers(on:allViewControllers:tabs:selected:environment:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for UIKitAdaptableTabView(0);
  uint64_t v49 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v49 + 64);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = *(void *)(v5 + *(int *)(v14 + 44));
  if (!*(void *)(v15 + 16)) {
    return;
  }
  uint64_t v16 = *a5;
  uint64_t v17 = a5[1];
  uint64_t v48 = v16;
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  if ((v19 & 1) == 0) {
    return;
  }
  BOOL v20 = (uint64_t *)(*(void *)(v15 + 56) + 32 * v18);
  unint64_t v21 = v20[1];
  uint64_t v22 = v20[2];
  uint64_t v23 = v20[3];
  uint64_t v45 = *v20;
  uint64_t v46 = v17;
  uint64_t v44 = v22;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if ((v21 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v21 < *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      char v24 = *(void **)(a2 + 8 * v21 + 32);
      swift_bridgeObjectRetain();
      id v25 = v24;
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRetain();
  id v25 = (id)MEMORY[0x18C117680](v21, a2);
LABEL_7:
  uint64_t v26 = v25;
  _s7SwiftUI19UIHostingControllerCyAA7TabItemV8RootViewVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  id v47 = (id)swift_dynamicCastClass();
  if (!v47)
  {
LABEL_19:
    swift_getObjectType();
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v41._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if ((v21 & 0x8000000000000000) != 0 || v21 >= *(void *)(a3 + 16))
  {
    id v28 = v26;
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with copy of TabEntry(a3 + 272 * v21 + 32, (uint64_t)v50);
    if (v50[264])
    {
      memcpy(v51, v50, 0x108uLL);
      id v27 = v26;
      id v43 = objc_msgSend(v47, sel__uip_tabElement);
      TabItemGroup.updateChildSelection(in:selectedID:)((uint64_t)v43, v44, v23);

      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)v51);
    }
    else
    {
      id v40 = v26;
      swift_bridgeObjectRelease();
      outlined destroy of TabEntry((uint64_t)v50);
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v29 = swift_bridgeObjectRetain();
  uint64_t v30 = specialized Sequence.filter(_:)(v29, a3);
  uint64_t v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo16UIViewControllerC_7SwiftUI8TabEntryOtG_AGs5NeverOTg506_sSo16de2C7f3UI8hi19OABIggno_AB_AEtABs5j66OIegnrzr_TR03_s7c18UI21UIKitAdaptablee112View33_297C74A0A9EE1F5608M165BAFAEAD53B28LLV03setF11Controllers2on03allfP04tabs8selected11environmentySo18UITabBarb9C_SaySo06a12X0CGSayAA0E5F41OGSiAA17EnvironmentValuesVtFA2N_AQtXEfU0_Tf3nnnpf_nTf1cn_n(v30);
  swift_bridgeObjectRelease();
  outlined init with copy of AdaptableTabView.BodyContent(v6, (uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for UIKitAdaptableTabView);
  unint64_t v32 = (*(unsigned __int8 *)(v49 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  unint64_t v33 = (v13 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  BOOL v34 = (void *)swift_allocObject();
  v34[2] = a1;
  v34[3] = v31;
  v34[4] = v45;
  outlined init with take of Binding<TabViewCustomization>((uint64_t)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v34 + v32, type metadata accessor for UIKitAdaptableTabView);
  uint64_t v35 = v48;
  *(void *)((char *)v34 + v33) = v47;
  uint64_t v36 = (void *)((char *)v34 + ((v33 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v37 = v46;
  *uint64_t v36 = v35;
  v36[1] = v37;
  swift_retain();
  id v38 = v26;
  id v39 = a1;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
}

uint64_t closure #3 in UIKitAdaptableTabView.setViewControllers(on:allViewControllers:tabs:selected:environment:)(void *a1, uint64_t a2, id a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setViewControllers_, isa);

  if (objc_msgSend(a1, sel_selectedIndex) != a3) {
    objc_msgSend(a1, sel_setSelectedIndex_, a3);
  }
  uint64_t result = type metadata accessor for UIKitAdaptableTabView(0);
  if (*(unsigned char *)(a4 + *(int *)(result + 40)) == 1)
  {
    v15[0] = a6;
    v15[1] = a7;
    return UITabBarController.updateColorScheme(selectedHostVC:environment:)(a5, v15);
  }
  return result;
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance UIKitAdaptableTabView@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v23 = a1;
  id v25 = a2;
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)v2;
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t v24 = *(void *)(v2 + 16);
  uint64_t v8 = *(unsigned __int8 *)(v2 + 24);
  uint64_t v9 = *(void *)(v2 + 32);
  uint64_t v10 = *(void *)(v2 + 40);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = *(void *)(v2 + 64);
  uint64_t v13 = *(void *)(v2 + 72);
  uint64_t v21 = *(void *)(v2 + 80);
  uint64_t v22 = v6;
  char v14 = *(unsigned char *)(v2 + 90);
  uint64_t v15 = *(unsigned __int8 *)(v2 + 48);
  __int16 v16 = *(unsigned __int8 *)(v2 + 88);
  LOWORD(v6) = v16 | (*(unsigned __int8 *)(v2 + 89) << 8);
  v26[0] = v8;
  v26[1] = v9;
  _OWORD v26[2] = v10;
  void v26[3] = v15;
  v26[4] = v11;
  v26[5] = v12;
  void v26[6] = v13;
  v26[7] = v21;
  char v28 = v14;
  uint64_t v17 = v2 + v23[6];
  __int16 v27 = v6;
  outlined init with copy of AdaptableTabView.BodyContent(v17, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  uint64_t v23 = (int *)objc_allocWithZone((Class)type metadata accessor for TabViewCoordinator_Phone());
  uint64_t v18 = v22;
  swift_retain();
  swift_retain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v9, v10);
  outlined copy of TabSidebarAccessoryViewConfiguration?(v11);
  outlined copy of PlatformItemCollection?(v21, v16);
  id v19 = specialized TabViewCoordinator_Phone.init(selected:sidebarConfiguration:customization:tabs:)(v18, v7, v24, v26, (uint64_t)v5, MEMORY[0x1E4FBC860]);
  swift_release();
  uint64_t result = swift_release();
  void *v25 = v19;
  return result;
}

void protocol witness for UIViewControllerRepresentable._identifiedViewTree(in:) in conformance UIKitAdaptableTabView(uint64_t a1@<X8>)
{
}

uint64_t specialized TabViewCoordinator_Phone.visibleTab<A>(in:selectionInfo:tabCache:tabs:environment:)@<X0>(void *a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  if (a4)
  {
    uint64_t v26 = 0;
    memset(v25, 0, sizeof(v25));
    if ((a2 & 0x8000000000000000) == 0 && *(void *)(a6 + 16) > a2)
    {
      outlined init with copy of TabEntry(a6 + 272 * a2 + 32, (uint64_t)__src);
      if (v23)
      {
        memcpy(__dst, __src, sizeof(__dst));
        if (*(void *)&__dst[24] == a1[3] && *(void *)&__dst[32] == a1[4]
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          *(void *)&long long v21 = a7;
          *((void *)&v21 + 1) = a9;
          TabViewCoordinator_Phone.visibleTab(in:selectedID:tabCache:environment:)((uint64_t)a1, a3, a4, a5, &v21, (uint64_t)__src);
          outlined destroy of TabItemGroup((uint64_t)__dst);
          outlined destroy of PlatformItem.SelectionContent?((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
          _s7SwiftUI7TabItemVSgWObTm_0((uint64_t)__src, (uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
        }
        else
        {
          outlined destroy of TabItemGroup((uint64_t)__dst);
        }
      }
      else
      {
        outlined destroy of TabEntry((uint64_t)__src);
      }
    }
    _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)v25, (uint64_t)__dst, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
    outlined init with copy of TabItemGroup((uint64_t)a1, (uint64_t)__src);
    if (*(void *)&__dst[24])
    {
      outlined destroy of TabItemGroup((uint64_t)__src);
      uint64_t result = outlined destroy of PlatformItem.SelectionContent?((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
      long long v17 = *(_OWORD *)&__dst[80];
      *(_OWORD *)(a8 + 64) = *(_OWORD *)&__dst[64];
      *(_OWORD *)(a8 + 80) = v17;
      *(void *)(a8 + 96) = *(void *)&__dst[96];
      long long v18 = *(_OWORD *)&__dst[16];
      *(_OWORD *)a8 = *(_OWORD *)__dst;
      *(_OWORD *)(a8 + 16) = v18;
      long long v19 = *(_OWORD *)&__dst[48];
      *(_OWORD *)(a8 + 32) = *(_OWORD *)&__dst[32];
      *(_OWORD *)(a8 + 48) = v19;
      return result;
    }
    if (*(void *)(__src[0] + 16))
    {
      outlined init with copy of TabItem(__src[0] + 32, a8);
      outlined destroy of TabItemGroup((uint64_t)__src);
      BOOL v20 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      outlined destroy of PlatformItem.SelectionContent?((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
      return outlined destroy of PlatformItem.SelectionContent?((uint64_t)__dst, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, v20);
    }
LABEL_20:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v15 = *a1;
  if (!*(void *)(*a1 + 16)) {
    goto LABEL_20;
  }

  return outlined init with copy of TabItem(v15 + 32, a8);
}

uint64_t TabViewCoordinator_Phone.updateTabElementCreatingIfNeeded(on:using:environment:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  outlined init with copy of TabEntry(a2, (uint64_t)v16);
  if (v17)
  {
    memcpy(v15, v16, 0x108uLL);
    uint64_t v11 = v3 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_customization;
    swift_beginAccess();
    outlined init with copy of AdaptableTabView.BodyContent(v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
    specialized UIHostingController.updateTabGroupCreatingIfNeeded(using:customization:environment:coordinator:)(v15, (uint64_t)v8, v9, v10, v3);
    _s2os6LoggerVSgWOhTm_1((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
    return outlined destroy of TabItemGroup((uint64_t)v15);
  }
  else
  {
    v15[4] = *(_OWORD *)&v16[64];
    v15[5] = *(_OWORD *)&v16[80];
    *(void *)&v15[6] = *(void *)&v16[96];
    v15[0] = *(_OWORD *)v16;
    v15[1] = *(_OWORD *)&v16[16];
    uint64_t v15[2] = *(_OWORD *)&v16[32];
    void v15[3] = *(_OWORD *)&v16[48];
    uint64_t v13 = v3 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_customization;
    swift_beginAccess();
    outlined init with copy of AdaptableTabView.BodyContent(v13, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
    specialized UIHostingController.updateTabElementCreatingIfNeeded(using:customization:environment:coordinator:)((uint64_t)v15, (uint64_t)v8, v9, v10);
    _s2os6LoggerVSgWOhTm_1((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
    return outlined destroy of TabItem((uint64_t)v15);
  }
}

uint64_t TabViewCoordinator_Phone.visibleTab(in:selectedID:tabCache:environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, long long *a5@<X4>, uint64_t a6@<X8>)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v12 - 8);
  char v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v72 = *a5;
  EnvironmentValues.horizontalSizeClass.getter();
  if (v54 != 2 && (v54 & 1) == 0)
  {
    _s7SwiftUI7TabItemVSgWOcTm_0(a1 + 152, (uint64_t)&v72, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
    if (*((void *)&v73 + 1))
    {
      long long v58 = v76;
      long long v59 = v77;
      *(void *)&long long v60 = v78;
      long long v54 = v72;
      long long v55 = v73;
      long long v56 = v74;
      long long v57 = v75;
      static Log.tabView.getter();
      uint64_t v15 = type metadata accessor for Logger();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
      {
        uint64_t result = _s2os6LoggerVSgWOhTm_1((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Logger?);
      }
      else
      {
        outlined init with copy of TabItem((uint64_t)&v54, (uint64_t)&v47);
        outlined init with copy of TabItemGroup(a1, (uint64_t)&v72);
        unint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.default.getter();
        int v31 = v30;
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v32 = swift_slowAlloc();
          uint64_t v44 = swift_slowAlloc();
          uint64_t v46 = v44;
          *(_DWORD *)uint64_t v32 = 136315394;
          os_log_t v43 = v29;
          uint64_t v33 = TabItem.platformIdentifier.getter();
          uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v46);
          int v42 = v31;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of TabItem((uint64_t)&v47);
          *(_WORD *)(v32 + 12) = 2080;
          uint64_t v35 = *((void *)&v73 + 1);
          unint64_t v36 = v74;
          uint64_t v41 = v32 + 14;
          outlined copy of TabCustomizationID.Base();
          uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of TabCustomizationID.Base();
          outlined destroy of TabItemGroup((uint64_t)&v72);
          os_log_t v37 = v43;
          _os_log_impl(&dword_1872C6000, v43, (os_log_type_t)v42, "Using compact tab '%s' for group '%s'", (uint8_t *)v32, 0x16u);
          uint64_t v38 = v44;
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v38, -1, -1);
          MEMORY[0x18C119C60](v32, -1, -1);
        }
        else
        {

          outlined destroy of TabItem((uint64_t)&v47);
          outlined destroy of TabItemGroup((uint64_t)&v72);
        }
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v14, v15);
      }
      long long v39 = v59;
      *(_OWORD *)(a6 + 64) = v58;
      *(_OWORD *)(a6 + 80) = v39;
      *(void *)(a6 + 96) = v60;
      long long v40 = v55;
      *(_OWORD *)a6 = v54;
      *(_OWORD *)(a6 + 16) = v40;
      long long v28 = v56;
      long long v27 = v57;
      goto LABEL_25;
    }
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)&v72, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
  }
  if (!*(void *)(a4 + 16))
  {
    uint64_t v70 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    unsigned __int8 v71 = -1;
LABEL_15:
    BOOL v20 = (unint64_t *)&lazy cache variable for type metadata for TabEntry?;
    long long v21 = &type metadata for TabEntry;
    uint64_t v22 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    char v23 = &v54;
LABEL_19:
    uint64_t result = outlined destroy of PlatformItem.SelectionContent?((uint64_t)v23, v20, (uint64_t)v21, v22);
    *(void *)(a6 + 96) = 0;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return result;
  }
  swift_bridgeObjectRetain();
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if (v19)
  {
    outlined init with copy of TabEntry(*(void *)(a4 + 56) + 272 * v18, (uint64_t)&v54);
  }
  else
  {
    uint64_t v70 = 0;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    unsigned __int8 v71 = -1;
  }
  swift_bridgeObjectRelease();
  if (v71 == 255) {
    goto LABEL_15;
  }
  outlined init with take of TabEntry((uint64_t)&v54, (uint64_t)&v72);
  outlined init with copy of TabEntry((uint64_t)&v72, (uint64_t)&v54);
  if (v71 == 1)
  {
    outlined destroy of TabEntry((uint64_t)&v54);
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    uint64_t v53 = 0;
    outlined destroy of TabEntry((uint64_t)&v72);
LABEL_18:
    BOOL v20 = (unint64_t *)&lazy cache variable for type metadata for TabItem?;
    long long v21 = &type metadata for TabItem;
    uint64_t v22 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    char v23 = &v47;
    goto LABEL_19;
  }
  long long v51 = v58;
  long long v52 = v59;
  uint64_t v53 = v60;
  long long v47 = v54;
  long long v48 = v55;
  long long v49 = v56;
  long long v50 = v57;
  uint64_t v24 = *((void *)&v55 + 1);
  uint64_t result = outlined destroy of TabEntry((uint64_t)&v72);
  if (!v24) {
    goto LABEL_18;
  }
  long long v25 = v52;
  *(_OWORD *)(a6 + 64) = v51;
  *(_OWORD *)(a6 + 80) = v25;
  *(void *)(a6 + 96) = v53;
  long long v26 = v48;
  *(_OWORD *)a6 = v47;
  *(_OWORD *)(a6 + 16) = v26;
  long long v28 = v49;
  long long v27 = v50;
LABEL_25:
  *(_OWORD *)(a6 + 32) = v28;
  *(_OWORD *)(a6 + 48) = v27;
  return result;
}

void TabViewCoordinator_Phone.getIndex(selectedElement:selectionCache:)(void *a1, uint64_t a2)
{
  if (!a2) {
    return;
  }
  uint64_t v3 = a1;
  if (a1)
  {
    swift_bridgeObjectRetain();
    id v4 = v3;
    id v5 = TabViewCoordinator_Phone.findRootSelectedElement(_:)(v4);

    id v6 = objc_msgSend(v5, sel__identifier);
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v3 = v8;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    id v5 = 0;
  }
  int64_t v9 = 0;
  uint64_t v10 = a2 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(a2 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    while (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v9 << 6);
      if (v3)
      {
LABEL_25:
        uint64_t v20 = *(void *)(a2 + 56) + 32 * v16;
        BOOL v21 = *(void *)(v20 + 16) == v7 && v3 == *(void **)(v20 + 24);
        if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {

          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v17 >= v14) {
      goto LABEL_31;
    }
    unint64_t v18 = *(void *)(v10 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_31;
      }
      unint64_t v18 = *(void *)(v10 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_31;
        }
        unint64_t v18 = *(void *)(v10 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v13 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v9 << 6);
    if (v3) {
      goto LABEL_25;
    }
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14)
  {
LABEL_31:

    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v18 = *(void *)(v10 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_31;
    }
    unint64_t v18 = *(void *)(v10 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_24;
    }
  }
LABEL_34:
  __break(1u);
}

__n128 TabViewCoordinator_Phone.getElement(for:tabCache:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for Logger?();
  double v7 = MEMORY[0x1F4188790](v6 - 8);
  int64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    id v10 = objc_msgSend(a1, sel_identifier, v7);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    if (a2)
    {
      if (*(void *)(a2 + 16) && (unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v13), (v15 & 1) != 0))
      {
        outlined init with copy of TabEntry(*(void *)(a2 + 56) + 272 * v14, (uint64_t)v36);
        swift_bridgeObjectRelease();
        if (v37 != 255)
        {
          outlined init with take of TabEntry((uint64_t)v36, (uint64_t)v38);
          outlined init with take of TabEntry((uint64_t)v38, (uint64_t)v36);
          if (v37)
          {
            memcpy(v35, v36, sizeof(v35));
            _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)&v35[48], a3, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
            outlined destroy of TabItemGroup((uint64_t)v35);
          }
          else
          {
            long long v30 = *(_OWORD *)&v36[80];
            *(_OWORD *)(a3 + 64) = *(_OWORD *)&v36[64];
            *(_OWORD *)(a3 + 80) = v30;
            *(void *)(a3 + 96) = *(void *)&v36[96];
            long long v31 = *(_OWORD *)&v36[16];
            *(_OWORD *)a3 = *(_OWORD *)v36;
            *(_OWORD *)(a3 + 16) = v31;
            __n128 result = *(__n128 *)&v36[48];
            *(_OWORD *)(a3 + 32) = *(_OWORD *)&v36[32];
            *(__n128 *)(a3 + 48) = result;
          }
          return result;
        }
      }
      else
      {
        memset(v36, 0, sizeof(v36));
        unsigned __int8 v37 = -1;
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      memset(v36, 0, sizeof(v36));
      unsigned __int8 v37 = -1;
    }
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)v36, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, MEMORY[0x1E4FBB718]);
  }
  static Log.tabView.getter();
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, v17) == 1)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    id v19 = a1;
    uint64_t v20 = Logger.logObject.getter();
    int v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, (os_log_type_t)v21))
    {
      int v33 = v21;
      os_log_t v34 = v20;
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(void *)unint64_t v36 = v32;
      *(_DWORD *)uint64_t v22 = 136315138;
      if (a1)
      {
        id v23 = objc_msgSend(v19, sel_title);
        a1 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;
      }
      else
      {
        uint64_t v25 = 0;
      }
      v38[0] = a1;
      v38[1] = v25;
      type metadata accessor for TabItem?(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
      uint64_t v26 = String.init<A>(describing:)();
      v38[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, (uint64_t *)v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v28 = v34;
      _os_log_impl(&dword_1872C6000, v34, (os_log_type_t)v33, "Couldn't find element for tab\n'%s'", v22, 0xCu);
      uint64_t v29 = v32;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v29, -1, -1);
      MEMORY[0x18C119C60](v22, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v17);
  }
  *(void *)(a3 + 96) = 0;
  result.n128_u64[0] = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

uint64_t outlined destroy of PlatformItem.SelectionContent?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for TabItem?(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t TabViewCoordinator_Phone.updateTargeting(_:for:tabCache:)(char a1, void *a2, uint64_t a3)
{
  TabViewCoordinator_Phone.getElement(for:tabCache:)(a2, a3, (uint64_t)&v7);
  if (!*((void *)&v8 + 1)) {
    return outlined destroy of PlatformItem.SelectionContent?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
  }
  void v14[4] = v11;
  v14[5] = v12;
  uint64_t v15 = v13;
  v14[0] = v7;
  v14[1] = v8;
  _OWORD v14[2] = v9;
  v14[3] = v10;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((void)v7)
  {
    uint64_t v4 = v8;
    if ((void)v8)
    {
      uint64_t v5 = *((void *)&v7 + 1);
      LOBYTE(v7) = a1 & 1;
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_bridgeObjectRelease();
      outlined consume of Binding<NavigationSplitViewColumn>?(v5, v4);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  return outlined destroy of TabItem((uint64_t)v14);
}

uint64_t closure #1 in TabViewCoordinator_Phone.updatedOrder(within:newOrder:customization:tabCache:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v7 - 8);
  long long v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *a1;
  unint64_t v10 = a1[1];
  if (*(void *)(a2 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10);
    if (v13)
    {
      outlined init with copy of TabEntry(*(void *)(a2 + 56) + 272 * v12, (uint64_t)&v32);
      swift_bridgeObjectRelease();
      if (v49 != 255)
      {
        outlined init with take of TabEntry((uint64_t)&v32, (uint64_t)v50);
        uint64_t v14 = TabEntry.resolvedCustomizationID.getter();
        uint64_t v16 = v15;
        char v18 = v17 & 1;
        uint64_t result = outlined destroy of TabEntry((uint64_t)v50);
        *(void *)a3 = v14;
        *(void *)(a3 + 8) = v16;
        *(unsigned char *)(a3 + 16) = v18;
        return result;
      }
    }
    else
    {
      uint64_t v48 = 0;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      unsigned __int8 v49 = -1;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v48 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    unsigned __int8 v49 = -1;
  }
  uint64_t v51 = v11;
  outlined destroy of PlatformItem.SelectionContent?((uint64_t)&v32, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, MEMORY[0x1E4FBB718]);
  static Log.tabView.getter();
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v9, 1, v20) == 1)
  {
    uint64_t result = _s2os6LoggerVSgWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      os_log_t v29 = v22;
      uint64_t v25 = (uint8_t *)v24;
      uint64_t v30 = swift_slowAlloc();
      v50[0] = v30;
      uint64_t v31 = v3;
      *(_DWORD *)uint64_t v25 = 136315138;
      os_log_t v28 = v25 + 4;
      swift_bridgeObjectRetain();
      *(void *)&long long v32 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v10, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_t v26 = v29;
      _os_log_impl(&dword_1872C6000, v29, v23, "Tab identifier %s missing from cache", v25, 0xCu);
      uint64_t v27 = v30;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v27, -1, -1);
      MEMORY[0x18C119C60](v25, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v9, v20);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = -1;
  return result;
}

id TabViewCoordinator_Phone.findRootSelectedElement(_:)(void *a1)
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    uint64_t v2 = (void *)v1;
    id v3 = a1;
    id v4 = objc_msgSend(v2, sel__selectedElement);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = TabViewCoordinator_Phone.findRootSelectedElement(_:)();

      return (id)v6;
    }
  }

  return a1;
}

uint64_t specialized closure #1 in static TabViewCustomization.arrangedChildren<A, B>(_:customization:sectionID:includeHidden:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t (*a5)(uint64_t *, double)@<X4>, char a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v15 = type metadata accessor for TabViewCustomization();
  double v16 = MEMORY[0x1F4188790](v15);
  char v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  unsigned __int8 v36 = a4 & 1;
  uint64_t v19 = a5(&v34, v16);
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  outlined init with copy of AdaptableTabView.BodyContent(a7, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
  if (a6) {
    goto LABEL_7;
  }
  uint64_t v24 = *(void *)&v18[*(int *)(v15 + 20)];
  if (!*(void *)(v24 + 16)) {
    goto LABEL_7;
  }
  outlined copy of TabCustomizationID.Base();
  unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v21, 0);
  if ((v26 & 1) == 0)
  {
    outlined consume of TabCustomizationID.Base();
    goto LABEL_7;
  }
  unsigned int v27 = *(unsigned __int8 *)(*(void *)(v24 + 56) + 2 * v25);
  outlined consume of TabCustomizationID.Base();
  if (v27 < 2)
  {
LABEL_7:
    _s2os6LoggerVSgWOhTm_1((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
    uint64_t v30 = v34;
    uint64_t v31 = v35;
    uint64_t v32 = v36;
    uint64_t result = outlined copy of TabCustomizationID.Base();
    uint64_t v29 = v33;
    goto LABEL_8;
  }
  _s2os6LoggerVSgWOhTm_1((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
  uint64_t result = outlined consume of TabCustomizationID.Base();
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v19 = 0;
  uint64_t v21 = 0;
  char v23 = 0;
  uint64_t v32 = 255;
LABEL_8:
  *(void *)a8 = v29;
  *(void *)(a8 + 8) = v30;
  *(void *)(a8 + 16) = v31;
  *(void *)(a8 + 24) = v32;
  *(void *)(a8 + 32) = v19;
  *(void *)(a8 + 40) = v21;
  *(unsigned char *)(a8 + 48) = v23;
  return result;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, void (*a2)(void *__return_ptr, void, void), uint64_t a3)
{
  void (*v18)(void *__return_ptr, void, void);
  long long v19;
  long long v20;
  void v21[2];
  char v22;
  long long v23;
  uint64_t v24;
  unsigned __int8 v25;
  long long v26;
  char v27;
  uint64_t v28;

  os_log_t v28 = a3;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = 0;
  uint64_t v6 = (unsigned char *)(swift_bridgeObjectRetain() + 48);
  uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
  char v18 = a2;
  do
  {
    char v9 = *v6;
    uint64_t v10 = *((void *)v6 - 1);
    v21[0] = *((void *)v6 - 2);
    v21[1] = v10;
    char v22 = v9;
    outlined copy of TabCustomizationID.Base();
    a2(&v23, v5, v21);
    outlined consume of TabCustomizationID.Base();
    unsigned __int8 v11 = v25;
    if (v25 != 255)
    {
      uint64_t v12 = v3;
      uint64_t v13 = v24;
      uint64_t v19 = v23;
      uint64_t v20 = v26;
      char v14 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
      }
      unint64_t v16 = v7[2];
      unint64_t v15 = v7[3];
      if (v16 >= v15 >> 1) {
        uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v7);
      }
      uint64_t v7[2] = v16 + 1;
      uint64_t v8 = &v7[7 * v16];
      *((_OWORD *)v8 + 2) = v19;
      v8[6] = v13;
      *((unsigned char *)v8 + 56) = v11 & 1;
      *((_OWORD *)v8 + 4) = v20;
      *((unsigned char *)v8 + 80) = v14 & 1;
      a2 = v18;
      uint64_t v3 = v12;
    }
    ++v5;
    v6 += 24;
  }
  while (v3 != v5);
  swift_bridgeObjectRelease();
  return v7;
}

id specialized TabViewCoordinator_Phone.host(for:child:searchAdjustment:)(uint64_t a1, uint64_t a2, char a3)
{
  outlined init with copy of TabItem(a2, (uint64_t)v14);
  v14[104] = 0;
  v14[105] = a3;
  outlined init with copy of TabItem.RootView((uint64_t)v14, (uint64_t)v12);
  _s7SwiftUI19UIHostingControllerCyAA7TabItemV8RootViewVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for UIHostingController<TabItem.RootView>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabItem.RootView and conformance TabItem.RootView, (uint64_t)&type metadata for TabItem.RootView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIHostingController);
  uint64_t v5 = v4;
  id v6 = objc_allocWithZone(v4);
  id v7 = specialized UIHostingController.init(rootView:)((uint64_t)v12);
  v12[0] = v7;
  __int16 v13 = 1;
  outlined init with copy of TabItem.RootView((uint64_t)v12, (uint64_t)v11);
  id v8 = objc_allocWithZone(v5);
  v7;
  id v9 = specialized UIHostingController.init(rootView:)((uint64_t)v11);
  outlined destroy of TabItem.RootView((uint64_t)v12);
  outlined destroy of TabItem.RootView((uint64_t)v14);
  return v9;
}

id specialized UIHostingController.updateCustomizationProperties(on:using:customization:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = (id)TabItem.tabPlacement(customization:)(a3);
  if (v5 != objc_msgSend(a1, sel__tabBarPlacement)) {
    objc_msgSend(a1, sel__setTabBarPlacement_, v5);
  }
  BOOL v6 = TabItem.visibleInSidebar(customization:)(a3);
  if (v6 != objc_msgSend(a1, sel__isVisible)) {
    objc_msgSend(a1, sel__setVisible_, v6);
  }
  TabItem.resolvedSidebarCustomizationBehavior.getter((char *)&v10);
  int v7 = v10;
  int v8 = v10 == 0;
  id result = objc_msgSend(a1, sel__allowsHiding);
  if (v8 != result)
  {
    return objc_msgSend(a1, sel__setAllowsHiding_, v7 == 0);
  }
  return result;
}

id specialized UIHostingController.createBridgedTab(using:)(uint64_t a1)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  int v7 = (char *)&v54 - v6;
  MEMORY[0x1F4188790](v8);
  unsigned __int8 v10 = (char *)&v54 - v9;
  uint64_t v11 = *(void *)(a1 + 88);
  v58[0] = v11;
  if (ViewTraitCollection.isAuxiliaryContent.getter())
  {
    static Log.tabView.getter();
    uint64_t v12 = type metadata accessor for Logger();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12) == 1)
    {
      _s2os6LoggerVSgWOhTm_1((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Logger?);
    }
    else
    {
      outlined init with copy of TabItem(a1, (uint64_t)v58);
      char v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v62 = v56;
        *(_DWORD *)uint64_t v20 = 136315138;
        long long v55 = v20 + 4;
        uint64_t v21 = TabItem.platformIdentifier.getter();
        v57[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of TabItem((uint64_t)v58);
        _os_log_impl(&dword_1872C6000, v18, v19, "Creating UITabAction id %s", v20, 0xCu);
        uint64_t v23 = v56;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v23, -1, -1);
        MEMORY[0x18C119C60](v20, -1, -1);
      }
      else
      {

        outlined destroy of TabItem((uint64_t)v58);
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    }
    uint64_t v62 = *(void *)(a1 + 88);
    uint64_t v32 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v32 != -1) {
      swift_once();
    }
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)&v61, (uint64_t)&v62, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent);
    outlined destroy of PlatformItem((uint64_t)v58);
    uint64_t v33 = TabItem.platformIdentifier.getter();
    uint64_t v35 = v34;
    _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)&v62, (uint64_t)v58, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent);
    uint64_t v36 = swift_allocObject();
    _s7SwiftUI7TabItemVSgWObTm_0((uint64_t)v58, v36 + 16, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent);
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = partial apply for closure #1 in UIHostingController.createBridgedTab(using:);
    *(void *)(v37 + 24) = v36;
    id v38 = objc_allocWithZone(MEMORY[0x1E4FB23A0]);
    swift_retain();
    long long v39 = (void *)MEMORY[0x18C115780](v33, v35);
    long long v40 = (void *)MEMORY[0x18C115780](0, 0xE000000000000000);
    v57[4] = partial apply for thunk for @escaping @callee_guaranteed () -> ();
    v57[5] = v37;
    v57[0] = MEMORY[0x1E4F143A8];
    v57[1] = 1107296256;
    void v57[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    v57[3] = &block_descriptor_54;
    long long v41 = _Block_copy(v57);
    id v42 = objc_msgSend(v38, sel_initWithIdentifier_title_image_handler_, v39, v40, 0, v41);

    _Block_release(v41);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)&v62, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, MEMORY[0x1E4FBB718]);
    return v42;
  }
  v57[0] = v11;
  uint64_t v14 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  LOWORD(v62) = static TabOptions.TraitKey.defaultValue;
  BYTE2(v62) = byte_1E90FC582;
  long long v63 = *(_OWORD *)&qword_1E90FC588;
  __int16 v64 = word_1E90FC598;
  char v65 = byte_1E90FC59A;
  uint64_t v66 = qword_1E90FC5A0;
  __int16 v67 = word_1E90FC5A8;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  char v15 = v60;
  outlined consume of TabCustomizationID?(v58[1], v58[2], v59);
  swift_bridgeObjectRelease();
  if (v15)
  {
    static Log.tabView.getter();
    uint64_t v16 = type metadata accessor for Logger();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v4, 1, v16) == 1)
    {
      _s2os6LoggerVSgWOhTm_1((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Logger?);
    }
    else
    {
      outlined init with copy of TabItem(a1, (uint64_t)v58);
      char v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        os_log_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v56 = swift_slowAlloc();
        uint64_t v62 = v56;
        *(_DWORD *)os_log_t v28 = 136315138;
        long long v55 = v28 + 4;
        uint64_t v29 = TabItem.platformIdentifier.getter();
        v57[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of TabItem((uint64_t)v58);
        _os_log_impl(&dword_1872C6000, v26, v27, "Creating UITabElement id %s", v28, 0xCu);
        uint64_t v31 = v56;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v31, -1, -1);
        MEMORY[0x18C119C60](v28, -1, -1);
      }
      else
      {

        outlined destroy of TabItem((uint64_t)v58);
      }
      (*(void (**)(char *, uint64_t))(v17 + 8))(v4, v16);
    }
    uint64_t v48 = TabItem.platformIdentifier.getter();
    uint64_t v50 = v49;
    id v51 = objc_allocWithZone(MEMORY[0x1E4FB23B0]);
    long long v52 = (void *)MEMORY[0x18C115780](v48, v50);
    uint64_t v53 = (void *)MEMORY[0x18C115780](0, 0xE000000000000000);
    id v42 = objc_msgSend(v51, sel_initWithIdentifier_title_image_, v52, v53, 0);
    swift_bridgeObjectRelease();

    return v42;
  }
  static Log.tabView.getter();
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v7, 1, v24) == 1)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    long long v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      long long v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v45 = 0;
      MEMORY[0x18C119C60](v45, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v24);
  }
  id v46 = objc_msgSend(self, sel__searchElement);

  return v46;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  uint64_t v5 = __dst;
  uint64_t v6 = a2;
  int v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 56;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 56;
  uint64_t v94 = __src;
  int64_t v93 = __dst;
  if (v9 < v11)
  {
    if (v8 >= -55)
    {
      size_t v12 = 56 * v9;
      if (__dst != __src || &__src[v12] <= __dst) {
        memmove(__dst, __src, v12);
      }
      uint64_t v13 = &v5[v12];
      uint64_t v92 = &v5[v12];
      if ((unint64_t)v6 >= a3 || v8 < 56) {
        goto LABEL_116;
      }
      long long v74 = &v5[v12];
LABEL_9:
      uint64_t v78 = v7;
      uint64_t v88 = *((void *)v6 + 5);
      uint64_t v90 = *((void *)v6 + 4);
      int v14 = v6[48];
      uint64_t v16 = *((void *)v5 + 4);
      uint64_t v15 = *((void *)v5 + 5);
      int v17 = v5[48];
      if (v14 == 1)
      {
        if ((v17 & 1) == 0) {
          goto LABEL_47;
        }
      }
      else if (v17)
      {
        goto LABEL_51;
      }
      uint64_t v84 = *(void *)v5;
      uint64_t v86 = *(void *)v6;
      uint64_t v82 = v6;
      long long v76 = v5;
      unint64_t v18 = *(void *)(a5 + 16);
      if (!v18)
      {
LABEL_41:
        uint64_t v13 = v74;
        uint64_t v5 = v76;
        uint64_t v6 = v82;
        if (v86 < v84) {
          goto LABEL_47;
        }
LABEL_51:
        uint64_t v29 = v78;
        if (v78 != v5)
        {
          long long v34 = *(_OWORD *)v5;
          long long v35 = *((_OWORD *)v5 + 1);
          long long v36 = *((_OWORD *)v5 + 2);
          *((void *)v78 + 6) = *((void *)v5 + 6);
          *((_OWORD *)v78 + 1) = v35;
          *((_OWORD *)v78 + 2) = v36;
          *(_OWORD *)uint64_t v78 = v34;
        }
        v5 += 56;
        int64_t v93 = v5;
        os_log_t v28 = v6;
LABEL_55:
        unint64_t v30 = a3;
        goto LABEL_56;
      }
      unint64_t v19 = 0;
      uint64_t v20 = (unsigned char *)(a5 + 48);
      while (1)
      {
        uint64_t v21 = *((void *)v20 - 2);
        uint64_t v22 = *((void *)v20 - 1);
        if (*v20)
        {
          if (v14)
          {
            BOOL v23 = v21 == v90 && v22 == v88;
            if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_37;
            }
          }
          if (v17) {
            goto LABEL_32;
          }
        }
        else
        {
          if ((v14 & 1) == 0)
          {
            BOOL v24 = v21 == v90 && v22 == v88;
            if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_37:
              if (v19 >= v18) {
                goto LABEL_118;
              }
              uint64_t v26 = *((void *)v20 - 2);
              uint64_t v27 = *((void *)v20 - 1);
              if (*v20)
              {
                uint64_t v13 = v74;
                uint64_t v5 = v76;
                uint64_t v6 = v82;
                if ((v14 & 1) == 0) {
                  goto LABEL_51;
                }
              }
              else
              {
                uint64_t v13 = v74;
                uint64_t v5 = v76;
                uint64_t v6 = v82;
                if (v14) {
                  goto LABEL_51;
                }
              }
              if ((v26 != v90 || v27 != v88) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                goto LABEL_51;
              }
LABEL_47:
              os_log_t v28 = v6 + 56;
              uint64_t v29 = v78;
              if (v78 < v6 || v78 >= v28)
              {
                long long v37 = *(_OWORD *)v6;
                long long v38 = *((_OWORD *)v6 + 1);
                long long v39 = *((_OWORD *)v6 + 2);
                *((void *)v78 + 6) = *((void *)v6 + 6);
                *((_OWORD *)v78 + 1) = v38;
                *((_OWORD *)v78 + 2) = v39;
                *(_OWORD *)uint64_t v78 = v37;
                goto LABEL_55;
              }
              unint64_t v30 = a3;
              if (v78 != v6)
              {
                long long v31 = *(_OWORD *)v6;
                long long v32 = *((_OWORD *)v6 + 1);
                long long v33 = *((_OWORD *)v6 + 2);
                *((void *)v78 + 6) = *((void *)v6 + 6);
                *((_OWORD *)v78 + 1) = v32;
                *((_OWORD *)v78 + 2) = v33;
                *(_OWORD *)uint64_t v78 = v31;
              }
LABEL_56:
              int v7 = v29 + 56;
              if (v5 >= v13 || (uint64_t v6 = v28, (unint64_t)v28 >= v30))
              {
                uint64_t v94 = v7;
                goto LABEL_116;
              }
              goto LABEL_9;
            }
          }
          if ((v17 & 1) == 0)
          {
LABEL_32:
            BOOL v25 = v21 == v16 && v22 == v15;
            if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_37;
            }
          }
        }
        ++v19;
        v20 += 24;
        if (v18 == v19) {
          goto LABEL_41;
        }
      }
    }
LABEL_119:
    swift_bridgeObjectRelease();
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v10 < -55) {
    goto LABEL_119;
  }
  uint64_t v40 = 56 * v11;
  if (__dst != a2 || &a2[v40] <= __dst) {
    memmove(__dst, a2, 56 * v11);
  }
  long long v41 = &v5[v40];
  uint64_t v92 = &v5[v40];
  uint64_t v94 = v6;
  id v42 = (char *)a3;
  if (v7 >= v6 || v10 < 56) {
    goto LABEL_116;
  }
  long long v43 = v6;
  long long v77 = v5;
  unint64_t v79 = v7;
  while (2)
  {
    uint64_t v83 = v6;
    unint64_t v47 = (unint64_t)(v42 - 56);
    uint64_t v48 = v41 - 56;
    uint64_t v89 = *((void *)v41 - 2);
    uint64_t v91 = *((void *)v41 - 3);
    int v49 = *(v41 - 8);
    uint64_t v51 = *((void *)v43 - 7);
    v43 -= 56;
    uint64_t v50 = v51;
    uint64_t v85 = *((void *)v43 + 5);
    uint64_t v87 = *((void *)v43 + 4);
    int v52 = v43[48];
    if (v49 == 1)
    {
      if ((v52 & 1) == 0) {
        goto LABEL_107;
      }
    }
    else if (v52)
    {
      break;
    }
    uint64_t v70 = v50;
    uint64_t v71 = *((void *)v41 - 7);
    unint64_t v73 = (unint64_t)(v42 - 56);
    long long v75 = v41;
    uint64_t v81 = v42;
    unint64_t v53 = *(void *)(a5 + 16);
    if (!v53)
    {
LABEL_101:
      uint64_t v5 = v77;
      int v7 = v79;
      id v42 = v81;
      unint64_t v47 = v73;
      long long v41 = v75;
      if (v71 >= v70) {
        break;
      }
      goto LABEL_107;
    }
    unint64_t v54 = 0;
    long long v55 = (unsigned char *)(a5 + 48);
    while (1)
    {
      uint64_t v56 = *((void *)v55 - 2);
      uint64_t v57 = *((void *)v55 - 1);
      if ((*v55 & 1) == 0) {
        break;
      }
      if (v49)
      {
        BOOL v58 = v56 == v91 && v57 == v89;
        if (v58 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_97;
        }
      }
      if (v52) {
        goto LABEL_92;
      }
LABEL_75:
      ++v54;
      v55 += 24;
      if (v53 == v54) {
        goto LABEL_101;
      }
    }
    if ((v49 & 1) != 0
      || (v56 == v91 ? (BOOL v59 = v57 == v89) : (BOOL v59 = 0), !v59 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
    {
      if (v52) {
        goto LABEL_75;
      }
LABEL_92:
      BOOL v60 = v56 == v87 && v57 == v85;
      if (v60 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_97;
      }
      goto LABEL_75;
    }
LABEL_97:
    if (v54 >= v53)
    {
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    uint64_t v61 = *((void *)v55 - 2);
    uint64_t v62 = *((void *)v55 - 1);
    if (*v55)
    {
      uint64_t v5 = v77;
      int v7 = v79;
      id v42 = v81;
      unint64_t v47 = v73;
      long long v41 = v75;
      if ((v49 & 1) == 0) {
        break;
      }
LABEL_104:
      if (v61 == v91 && v62 == v89 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_107:
        if (v42 != v83 || v47 >= (unint64_t)v83)
        {
          long long v63 = *(_OWORD *)v43;
          long long v64 = *((_OWORD *)v43 + 1);
          long long v65 = *((_OWORD *)v43 + 2);
          *(void *)(v47 + 48) = *((void *)v43 + 6);
          *(_OWORD *)(v47 + 16) = v64;
          *(_OWORD *)(v47 + 32) = v65;
          *(_OWORD *)unint64_t v47 = v63;
        }
        uint64_t v94 = v43;
        if (v43 <= v7) {
          goto LABEL_116;
        }
LABEL_68:
        uint64_t v6 = v43;
        id v42 = (char *)v47;
        if (v41 <= v5) {
          goto LABEL_116;
        }
        continue;
      }
    }
    else
    {
      uint64_t v5 = v77;
      int v7 = v79;
      id v42 = v81;
      unint64_t v47 = v73;
      long long v41 = v75;
      if ((v49 & 1) == 0) {
        goto LABEL_104;
      }
    }
    break;
  }
  uint64_t v92 = v48;
  if (v42 < v41 || v47 >= (unint64_t)v41)
  {
    long long v44 = *(_OWORD *)v48;
    long long v45 = *((_OWORD *)v48 + 1);
    long long v46 = *((_OWORD *)v48 + 2);
    *(void *)(v47 + 48) = *((void *)v48 + 6);
    *(_OWORD *)(v47 + 16) = v45;
    *(_OWORD *)(v47 + 32) = v46;
    *(_OWORD *)unint64_t v47 = v44;
    long long v43 = v83;
  }
  else
  {
    long long v43 = v83;
    if (v42 != v41)
    {
      long long v66 = *(_OWORD *)v48;
      long long v67 = *((_OWORD *)v48 + 1);
      long long v68 = *((_OWORD *)v48 + 2);
      *(void *)(v47 + 48) = *((void *)v48 + 6);
      *(_OWORD *)(v47 + 16) = v67;
      *(_OWORD *)(v47 + 32) = v68;
      *(_OWORD *)unint64_t v47 = v66;
    }
  }
  long long v41 = v48;
  if (v43 > v7) {
    goto LABEL_68;
  }
LABEL_116:
  specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v94, (const void **)&v93, &v92);
  return 1;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v30 = result;
  if (a3 == a2) {
    return result;
  }
  uint64_t v5 = *a4;
  uint64_t v27 = (unsigned char *)(a5 + 48);
  uint64_t v28 = *a4;
  while (1)
  {
    uint64_t v26 = a3;
    uint64_t v6 = a3;
LABEL_6:
    int v7 = (uint64_t *)(v5 + 56 * v6);
    uint64_t v37 = v7[4];
    uint64_t v36 = v7[5];
    int v8 = *((unsigned __int8 *)v7 + 48);
    int64_t v9 = v7 - 7;
    uint64_t v34 = *(v7 - 2);
    uint64_t v35 = *(v7 - 3);
    int v10 = *((unsigned __int8 *)v7 - 8);
    if (v8 == 1)
    {
      if ((v10 & 1) == 0) {
        break;
      }
    }
    else if (v10)
    {
      goto LABEL_4;
    }
    uint64_t v31 = *(v7 - 7);
    uint64_t v32 = *v7;
    uint64_t v33 = v6;
    unint64_t v11 = *(void *)(a5 + 16);
    if (!v11)
    {
LABEL_38:
      uint64_t v5 = v28;
      uint64_t v6 = v33;
      if (v32 < v31) {
        break;
      }
      goto LABEL_4;
    }
    unint64_t v12 = 0;
    uint64_t v13 = v27;
    while (1)
    {
      uint64_t v14 = *((void *)v13 - 2);
      uint64_t v15 = *((void *)v13 - 1);
      if ((*v13 & 1) == 0) {
        break;
      }
      if (v8)
      {
        if (v14 == v37 && v15 == v36) {
          goto LABEL_34;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          goto LABEL_34;
        }
      }
      if (v10) {
        goto LABEL_29;
      }
LABEL_12:
      ++v12;
      v13 += 24;
      if (v11 == v12) {
        goto LABEL_38;
      }
    }
    if ((v8 & 1) != 0
      || (v14 == v37 ? (BOOL v17 = v15 == v36) : (BOOL v17 = 0),
          !v17 && (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) == 0)))
    {
      if (v10) {
        goto LABEL_12;
      }
LABEL_29:
      if (v14 == v35 && v15 == v34) {
        goto LABEL_34;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_34;
      }
      goto LABEL_12;
    }
LABEL_34:
    if (v12 >= v11)
    {
      __break(1u);
      goto LABEL_48;
    }
    uint64_t result = *((void *)v13 - 2);
    if (*v13)
    {
      uint64_t v5 = v28;
      uint64_t v6 = v33;
      if ((v8 & 1) == 0) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = v28;
      uint64_t v6 = v33;
      if (v8) {
        goto LABEL_4;
      }
    }
    if (result == v37 && *((void *)v13 - 1) == v36) {
      break;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      break;
    }
LABEL_4:
    a3 = v26 + 1;
    if (v26 + 1 == a2) {
      return result;
    }
  }
  if (v5)
  {
    --v6;
    uint64_t v19 = v7[2];
    char v20 = *((unsigned char *)v7 + 24);
    char v21 = *((unsigned char *)v7 + 48);
    long long v22 = *(_OWORD *)v7;
    long long v23 = *((_OWORD *)v7 + 2);
    long long v24 = *(_OWORD *)(v7 - 5);
    *(_OWORD *)int v7 = *(_OWORD *)v9;
    *((_OWORD *)v7 + 1) = v24;
    *((_OWORD *)v7 + 2) = *(_OWORD *)(v7 - 3);
    void v7[6] = *(v7 - 1);
    *(_OWORD *)int64_t v9 = v22;
    *(v7 - 5) = v19;
    *((unsigned char *)v7 - 32) = v20;
    *(_OWORD *)(v7 - 3) = v23;
    *((unsigned char *)v7 - 8) = v21;
    if (v6 == v30) {
      goto LABEL_4;
    }
    goto LABEL_6;
  }
LABEL_48:
  __break(1u);
  return result;
}

{
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  long long v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  long long v53;
  unint64_t v54;
  uint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  long long v61;
  char v62;
  char v63;
  long long v64;
  char v65;
  char v66;

  uint64_t v56 = result;
  if (a3 != a2)
  {
    BOOL v59 = *a4;
    uint64_t v6 = (unint64_t *)(*a4 + 8 * a3 - 8);
LABEL_5:
    int v7 = *(void *)(v59 + 8 * a3);
    int v8 = v56;
    uint64_t v57 = v6;
    BOOL v58 = a3;
    while ((v7 & 0x8000000000000000) == 0)
    {
      int64_t v9 = *(void *)(a5 + 360);
      int v10 = *(void *)(v9 + 16);
      if (v7 >= v10) {
        goto LABEL_41;
      }
      unint64_t v11 = *v6;
      if (*v6 >= v10) {
        goto LABEL_42;
      }
      unint64_t v12 = v7 << 8;
      uint64_t v13 = v9 + 32 + (v7 << 8);
      uint64_t v14 = v11 << 8;
      uint64_t v15 = *(double *)(v9 + 32 + (v11 << 8));
      if (v15 < *(double *)v13) {
        goto LABEL_53;
      }
      if (*(double *)v13 >= v15)
      {
        BOOL v60 = v11 << 8;
        if (*(unsigned char *)(v13 + 16))
        {
          ProposedViewSize.init(_:in:by:)();
          BOOL v17 = v16;
          unint64_t v18 = *(void *)(a5 + 104);
          uint64_t v19 = *(unsigned char *)(a5 + 112);
          char v20 = *(unsigned char *)(a5 + 113);
          LODWORD(v61) = *(_DWORD *)(a5 + 96);
          *((void *)&v61 + 1) = v18;
          uint64_t v62 = v19;
          long long v63 = v20;
          LayoutSubviews.subscript.getter();
          uint64_t v61 = v64;
          uint64_t v62 = v65;
          long long v66 = v17 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          long long v22 = v21;
          int64_t v9 = *(void *)(a5 + 360);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(a5 + 360) = v9;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v9);
            int64_t v9 = result;
          }
          uint64_t v14 = v11 << 8;
          if (v7 >= *(void *)(v9 + 16)) {
            goto LABEL_46;
          }
          long long v23 = v9 + v12;
          *(void *)(v23 + 40) = v22;
          *(unsigned char *)(v23 + 48) = 0;
          *(void *)(a5 + 360) = v9;
          int v10 = *(void *)(v9 + 16);
        }
        if (v7 >= v10) {
          goto LABEL_43;
        }
        if (*(unsigned char *)(v9 + v12 + 64))
        {
          ProposedViewSize.init(_:in:by:)();
          BOOL v25 = v24;
          uint64_t v26 = *(void *)(a5 + 104);
          uint64_t v27 = *(unsigned char *)(a5 + 112);
          uint64_t v28 = *(unsigned char *)(a5 + 113);
          LODWORD(v61) = *(_DWORD *)(a5 + 96);
          *((void *)&v61 + 1) = v26;
          uint64_t v62 = v27;
          long long v63 = v28;
          LayoutSubviews.subscript.getter();
          uint64_t v61 = v64;
          uint64_t v62 = v65;
          long long v66 = v25 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          uint64_t v30 = v29;
          uint64_t v31 = *(void *)(a5 + 360);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(a5 + 360) = v31;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v31);
            uint64_t v31 = result;
          }
          uint64_t v14 = v11 << 8;
          if (v7 >= *(void *)(v31 + 16)) {
            goto LABEL_47;
          }
          uint64_t v32 = v31 + v12;
          *(void *)(v32 + 56) = v30;
          *(unsigned char *)(v32 + 64) = 0;
          *(void *)(a5 + 360) = v31;
        }
        uint64_t result = _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
        uint64_t v33 = *(void *)(a5 + 360);
        uint64_t v34 = *(void *)(v33 + 16);
        if (v11 >= v34) {
          goto LABEL_44;
        }
        uint64_t v35 = v61;
        if (*(unsigned char *)(v33 + v14 + 48))
        {
          ProposedViewSize.init(_:in:by:)();
          uint64_t v37 = v36;
          long long v38 = *(void *)(a5 + 104);
          long long v39 = *(unsigned char *)(a5 + 112);
          uint64_t v40 = *(unsigned char *)(a5 + 113);
          LODWORD(v61) = *(_DWORD *)(a5 + 96);
          *((void *)&v61 + 1) = v38;
          uint64_t v62 = v39;
          long long v63 = v40;
          LayoutSubviews.subscript.getter();
          uint64_t v61 = v64;
          uint64_t v62 = v65;
          long long v66 = v37 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          id v42 = v41;
          uint64_t v33 = *(void *)(a5 + 360);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(a5 + 360) = v33;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v33);
            uint64_t v33 = result;
          }
          uint64_t v14 = v11 << 8;
          if (v11 >= *(void *)(v33 + 16)) {
            goto LABEL_48;
          }
          long long v43 = v33 + v60;
          *(void *)(v43 + 40) = v42;
          *(unsigned char *)(v43 + 48) = 0;
          *(void *)(a5 + 360) = v33;
          uint64_t v34 = *(void *)(v33 + 16);
        }
        if (v11 >= v34) {
          goto LABEL_45;
        }
        if (*(unsigned char *)(v33 + v14 + 64))
        {
          ProposedViewSize.init(_:in:by:)();
          long long v45 = v44;
          long long v46 = *(void *)(a5 + 104);
          unint64_t v47 = *(unsigned char *)(a5 + 112);
          uint64_t v48 = *(unsigned char *)(a5 + 113);
          LODWORD(v61) = *(_DWORD *)(a5 + 96);
          *((void *)&v61 + 1) = v46;
          uint64_t v62 = v47;
          long long v63 = v48;
          LayoutSubviews.subscript.getter();
          uint64_t v61 = v64;
          uint64_t v62 = v65;
          long long v66 = v45 & 1;
          LayoutSubview.lengthThatFits(_:in:)();
          uint64_t v50 = v49;
          uint64_t v51 = *(void *)(a5 + 360);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(a5 + 360) = v51;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v51);
            uint64_t v51 = result;
          }
          if (v11 >= *(void *)(v51 + 16)) {
            goto LABEL_49;
          }
          int v52 = v51 + v60;
          *(void *)(v52 + 56) = v50;
          *(unsigned char *)(v52 + 64) = 0;
          *(void *)(a5 + 360) = v51;
        }
        _LayoutTraits.FlexibilityEstimate.init(minLength:maxLength:)();
        unint64_t v53 = v61;
        uint64_t v61 = v35;
        long long v64 = v53;
        uint64_t result = MEMORY[0x18C10DFC0](&v61, &v64);
        a3 = v58;
        if ((result & 1) != 0
          || (uint64_t v61 = v35, v64 = v53, result = MEMORY[0x18C10DFC0](&v64, &v61, v58), a3 = v58, (result & 1) == 0)
          && v7 < v11)
        {
LABEL_53:
          if (!v59) {
            goto LABEL_50;
          }
          unint64_t v54 = *v6;
          int v7 = v6[1];
          *uint64_t v6 = v7;
          v6[1] = v54;
          --v6;
          if (a3 != ++v8) {
            continue;
          }
        }
      }
      ++a3;
      uint64_t v6 = v57 + 1;
      if (a3 == a2) {
        return result;
      }
      goto LABEL_5;
    }
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
  }
  return result;
}

uint64_t specialized MutableCollection<>.sort(by:)(void **a1, uint64_t a2)
{
  id v4 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n();
}

{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void v9[2];

  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  }
  int v7 = v6[2];
  v9[0] = (char *)v6 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v9[1] = v7;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v9, a2, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:), (void (*)(char *))outlined init with copy of TableColumnCollection.Entry, (void (*)(char *, char *, char *, unint64_t, uint64_t))specialized _merge<A>(low:mid:high:buffer:by:), specialized MutableCollection<>._insertionSort(within:sortedEnd:by:));
  swift_bridgeObjectRelease();
  *a1 = v6;
  return swift_bridgeObjectRelease_n();
}

{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void v9[2];

  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
  }
  int v7 = v6[2];
  v9[0] = (char *)v6 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v9[1] = v7;
  swift_bridgeObjectRetain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v9, a2, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:), (void (*)(char *))outlined init with copy of TableCellFormula, (void (*)(char *, char *, char *, unint64_t, uint64_t))specialized _merge<A>(low:mid:high:buffer:by:), specialized MutableCollection<>._insertionSort(within:sortedEnd:by:));
  swift_bridgeObjectRelease();
  *a1 = v6;
  return swift_bridgeObjectRelease_n();
}

id specialized UIHostingController.createBridgedTab(using:coordinator:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TabEntry(a1, (uint64_t)v32);
  if (v33)
  {
    memcpy(v31, v32, 0x108uLL);
    static Log.tabView.getter();
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      _s2os6LoggerVSgWOhTm_1((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Logger?);
    }
    else
    {
      outlined init with copy of TabItemGroup((uint64_t)v31, (uint64_t)v30);
      int v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        unint64_t v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        uint64_t v26 = v13;
        uint64_t v27 = a2;
        BOOL v25 = v12;
        *(_DWORD *)unint64_t v12 = 136315138;
        uint64_t v29 = v13;
        uint64_t v15 = v30[3];
        unint64_t v14 = v30[4];
        v24[1] = v12 + 4;
        outlined copy of TabCustomizationID.Base();
        uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, &v29);
        a2 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined consume of TabCustomizationID.Base();
        outlined destroy of TabItemGroup((uint64_t)v30);
        uint64_t v16 = v25;
        _os_log_impl(&dword_1872C6000, v10, v11, "Creating UITabGroup id %s", v25, 0xCu);
        uint64_t v17 = v26;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v17, -1, -1);
        MEMORY[0x18C119C60](v16, -1, -1);
      }
      else
      {

        outlined destroy of TabItemGroup((uint64_t)v30);
      }
      (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    }
    uint64_t v18 = *((void *)&v31[1] + 1);
    uint64_t v19 = *(void *)&v31[2];
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITabElementGroup);
    id v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    outlined copy of TabCustomizationID.Base();
    char v21 = (void *)MEMORY[0x18C115780](v18, v19);
    long long v22 = (void *)MEMORY[0x18C115780](0, 0xE000000000000000);
    id v9 = objc_msgSend(v20, sel_initWithIdentifier_title_image_, v21, v22, 0);

    outlined consume of TabCustomizationID.Base();
    objc_msgSend(v9, sel__setDelegate_, a2);
    outlined destroy of TabItemGroup((uint64_t)v31);
  }
  else
  {
    void v31[4] = *(_OWORD *)&v32[64];
    v31[5] = *(_OWORD *)&v32[80];
    *(void *)&v31[6] = *(void *)&v32[96];
    v31[0] = *(_OWORD *)v32;
    v31[1] = *(_OWORD *)&v32[16];
    v31[2] = *(_OWORD *)&v32[32];
    v31[3] = *(_OWORD *)&v32[48];
    id v9 = specialized UIHostingController.createBridgedTab(using:)((uint64_t)v31);
    outlined destroy of TabItem((uint64_t)v31);
  }
  return v9;
}

uint64_t specialized TabViewCoordinator_Phone.setRootView(on:element:searchAdjustment:selectionInfo:environment:transaction:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 + OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_tabCache);
  if (v9)
  {
    uint64_t v16 = *a6;
    uint64_t v17 = a6[1];
    outlined init with copy of TabEntry(a2, (uint64_t)__src);
    if (v29)
    {
      memcpy(__dst, __src, sizeof(__dst));
      *(void *)&v25[0] = v16;
      *((void *)&v25[0] + 1) = v17;
      swift_bridgeObjectRetain();
      TabViewCoordinator_Phone.visibleTab(in:selectedID:tabCache:environment:)((uint64_t)__dst, a4, a5, v9, v25, (uint64_t)v30);
      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)__dst);
    }
    else
    {
      v30[4] = *(_OWORD *)&__src[64];
      v30[5] = *(_OWORD *)&__src[80];
      uint64_t v31 = *(void *)&__src[96];
      v30[0] = *(_OWORD *)__src;
      v30[1] = *(_OWORD *)&__src[16];
      v30[2] = *(_OWORD *)&__src[32];
      _OWORD v30[3] = *(_OWORD *)&__src[48];
    }
    _s7SwiftUI7TabItemVSgWOcTm_0((uint64_t)v30, (uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem);
    if (*(void *)&__src[24])
    {
      v25[4] = *(_OWORD *)&__src[64];
      v25[5] = *(_OWORD *)&__src[80];
      uint64_t v26 = *(void *)&__src[96];
      v25[0] = *(_OWORD *)__src;
      v25[1] = *(_OWORD *)&__src[16];
      _OWORD v25[2] = *(_OWORD *)&__src[32];
      v25[3] = *(_OWORD *)&__src[48];
      outlined init with copy of TabItem((uint64_t)v25, (uint64_t)__dst);
      __dst[104] = 0;
      __dst[105] = a3;
      outlined init with copy of TabEntry(a2, (uint64_t)__src);
      int v18 = v29;
      outlined destroy of TabEntry((uint64_t)__src);
      if (v18 == 1)
      {
        uint64_t v19 = (void *)TabItem.platformIdentifier.getter();
        UIHostingController<>.setChildRootViewCreatingHostIfNeeded(_:childID:transaction:coordinator:)((uint64_t)__dst, v19, v20, a7, v8);
        swift_bridgeObjectRelease();
      }
      else
      {
        id v23 = *(id *)(a1 + direct field offset for UIHostingController.host);
        specialized _UIHostingView.setRootView(_:transaction:)((uint64_t)__dst);
      }
      *(void *)__src = v16;
      *(void *)&__src[8] = v17;
      UIHostingController<>.updateTabEnvironment(environment:coordinator:)((uint64_t *)__src, v8);
      outlined destroy of TabItem.RootView((uint64_t)__dst);
      outlined destroy of TabItem((uint64_t)v25);
      long long v22 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    }
    else
    {
      char v21 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      outlined destroy of PlatformItem.SelectionContent?((uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
      long long v22 = v21;
    }
    return outlined destroy of PlatformItem.SelectionContent?((uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, v22);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized TabViewCoordinator_Phone.rebuildTabs<A>(tabBarController:tabs:selected:environment:transaction:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v89 = a5;
  uint64_t v115 = a3;
  uint64_t v116 = a4;
  uint64_t v114 = a2;
  type metadata accessor for Binding<SearchFieldState>?(0);
  MEMORY[0x1F4188790](v8 - 8);
  int v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  int64_t v13 = (int64_t)&v86 - v12;
  specialized TabViewCoordinator_Phone.updateSearchIndex<A>(tabs:)(a1);
  unint64_t v14 = (unint64_t *)&v5[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_viewControllers];
  swift_beginAccess();
  uint64_t v87 = v14;
  unint64_t v15 = *v14;
  if (v15 >> 62) {
    goto LABEL_169;
  }
  uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  uint64_t v113 = v6;
  unint64_t v117 = a1;
  if (v16)
  {
    int64_t v13 = *(void *)(a1 + 16);
    uint64_t v17 = MEMORY[0x1E4FBC860];
    uint64_t v92 = v13;
    if (v13)
    {
      uint64_t v128 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
      uint64_t v18 = a1 + 32;
      do
      {
        outlined init with copy of TabEntry(v18, (uint64_t)&v129);
        outlined init with copy of TabEntry((uint64_t)&v129, (uint64_t)v126);
        if (BYTE8(v126[16]))
        {
          memcpy(v124, v126, sizeof(v124));
          long long v121 = *(_OWORD *)&v124[24];
          outlined copy of TabCustomizationID.Base();
          AnyHashable.init<A>(_:)();
          outlined destroy of TabItemGroup((uint64_t)v124);
        }
        else
        {
          *(_OWORD *)&v124[64] = v126[4];
          *(_OWORD *)&v124[80] = v126[5];
          *(void *)&v124[96] = *(void *)&v126[6];
          *(_OWORD *)uint64_t v124 = v126[0];
          *(_OWORD *)&v124[16] = v126[1];
          *(_OWORD *)&v124[32] = v126[2];
          *(_OWORD *)&v124[48] = v126[3];
          _ViewList_View.viewID.getter();
          outlined destroy of TabItem((uint64_t)v124);
        }
        v126[0] = *(_OWORD *)v120;
        v126[1] = *(_OWORD *)&v120[16];
        *(void *)&v126[2] = *(void *)&v120[32];
        outlined destroy of TabEntry((uint64_t)&v129);
        uint64_t v19 = v128;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
          uint64_t v19 = v128;
        }
        unint64_t v21 = *(void *)(v19 + 16);
        unint64_t v20 = *(void *)(v19 + 24);
        a1 = v21 + 1;
        if (v21 >= v20 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1);
          uint64_t v19 = v128;
        }
        *(void *)(v19 + 16) = a1;
        uint64_t v22 = v19 + 40 * v21;
        long long v23 = v126[0];
        long long v24 = v126[1];
        *(void *)(v22 + 64) = *(void *)&v126[2];
        *(_OWORD *)(v22 + 32) = v23;
        *(_OWORD *)(v22 + 48) = v24;
        v18 += 272;
        --v13;
      }
      while (v13);
      BOOL v25 = (char *)v19;
      uint64_t v6 = v113;
      uint64_t v17 = MEMORY[0x1E4FBC860];
    }
    else
    {
      BOOL v25 = (char *)MEMORY[0x1E4FBC860];
    }
    uint64_t v39 = *(void *)&v6[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_currentTabIdentifiers];
    uint64_t v129 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized CollectionChanges.formChanges<A, B>(from:to:)(v39, (uint64_t)v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v40 = v129;
    unint64_t v41 = *v87;
    swift_bridgeObjectRetain();
    uint64_t result = specialized Array.init(repeating:count:)(0, v92, (unint64_t *)&lazy cache variable for type metadata for UIViewController?, (unint64_t *)&lazy cache variable for type metadata for UIViewController, 0x1E4FB1EC0);
    *(void *)&v126[0] = result;
    uint64_t v101 = *(unsigned char **)(v40 + 16);
    if (v101)
    {
      unint64_t v43 = 0;
      uint64_t v112 = &v6[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchState];
      uint64_t v110 = &v6[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchIndex];
      uint64_t v99 = v25;
      uint64_t v100 = v40 + 32;
      if ((v41 & 0x8000000000000000) != 0) {
        uint64_t v44 = v41;
      }
      else {
        uint64_t v44 = v41 & 0xFFFFFFFFFFFFFF8;
      }
      uint64_t v97 = v44;
      uint64_t v98 = v40;
      unint64_t v109 = v41 & 0xC000000000000001;
      uint64_t v107 = v41 & 0xFFFFFFFFFFFFFF8;
      uint64_t v88 = (v41 & 0xFFFFFFFFFFFFFF8) + 32;
      uint64_t v90 = v117 + 32;
      unint64_t v86 = v41 + 32;
      unint64_t v102 = v41;
      while (1)
      {
        if (v43 >= *(void *)(v40 + 16)) {
          goto LABEL_150;
        }
        uint64_t v47 = v100 + 40 * v43;
        int64_t v13 = *(void *)v47;
        int64_t v48 = *(void *)(v47 + 8);
        int v49 = *(unsigned __int8 *)(v47 + 32);
        uint64_t v108 = (unsigned char *)v43;
        if (v49)
        {
          if (v49 != 1)
          {
            BOOL v25 = *(char **)(v47 + 24);
            uint64_t v111 = *(void *)(v47 + 16);
            a1 = v41 >> 62;
            if (v41 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v80 = _CocoaArrayWrapper.endIndex.getter();
              uint64_t result = swift_bridgeObjectRelease();
              if (v80 < v13)
              {
LABEL_130:
                __break(1u);
LABEL_131:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v81 = *(void *)&v126[0];
                goto LABEL_133;
              }
            }
            else if (*(void *)(v107 + 16) < v13)
            {
              goto LABEL_130;
            }
            if (v13 < 0) {
              goto LABEL_154;
            }
            if (a1)
            {
              swift_bridgeObjectRetain();
              uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
              uint64_t result = swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v59 = *(void *)(v107 + 16);
            }
            if (v59 < v48) {
              goto LABEL_157;
            }
            if (v48 < 0) {
              goto LABEL_158;
            }
            if (v109)
            {
              if (v48 < (unint64_t)v13) {
                goto LABEL_164;
              }
              if (v13 != v48)
              {
                if (v13 >= (unint64_t)v48) {
                  goto LABEL_171;
                }
                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
                Swift::Int v65 = v13;
                do
                {
                  Swift::Int v66 = v65 + 1;
                  _ArrayBuffer._typeCheckSlowPath(_:)(v65);
                  Swift::Int v65 = v66;
                }
                while (v48 != v66);
              }
            }
            if (a1)
            {
              swift_bridgeObjectRetain();
              uint64_t v67 = _CocoaArrayWrapper.subscript.getter();
              unint64_t v95 = v68;
              uint64_t v96 = v67;
              uint64_t v93 = v70;
              uint64_t v94 = v69;
              uint64_t result = swift_bridgeObjectRelease();
              if (v13 == v48)
              {
LABEL_106:
                uint64_t v71 = (uint64_t)v25;
                if (v111 < 0) {
                  goto LABEL_160;
                }
LABEL_107:
                if (v92 < v111 || v92 < v71) {
                  goto LABEL_161;
                }
                if (v71 < 0) {
                  goto LABEL_162;
                }
                uint64_t v72 = v117;
                swift_bridgeObjectRetain();
                int64_t v13 = v96;
                specialized TabViewCoordinator_Phone.updateHosts<A, B>(_:tabs:selected:environment:transaction:)(v96, v94, v93, v95, v72, v90, v111, (2 * v71) | 1, v114, v115, v116, v89);
                swift_unknownObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                unint64_t v41 = v102;
                goto LABEL_46;
              }
            }
            else
            {
              unint64_t v95 = (2 * v48) | 1;
              uint64_t result = swift_bridgeObjectRetain();
              uint64_t v96 = v107;
              uint64_t v93 = v13;
              uint64_t v94 = v88;
              if (v13 == v48) {
                goto LABEL_106;
              }
            }
            if (v48 < v13) {
              goto LABEL_167;
            }
            if (v13 >= v48) {
              goto LABEL_168;
            }
            uint64_t v106 = &v25[-v111];
            if (v25 != (char *)v111)
            {
              if ((uint64_t)v25 >= v111)
              {
                uint64_t v71 = (uint64_t)v25;
                uint64_t v73 = 0;
                int64_t v104 = ~v13 + v48;
                uint64_t v105 = 8 * v111 + 32;
                int64_t v103 = v13 + 1;
                unint64_t v91 = v86 + 8 * v13;
                while (1)
                {
                  unint64_t v74 = v111 + v73;
                  if (v111 + v73 >= v71) {
                    goto LABEL_146;
                  }
                  uint64_t v75 = v13 + v73;
                  if (v109)
                  {
                    id v76 = (id)MEMORY[0x18C117680](v75, v102);
                  }
                  else
                  {
                    if (v75 >= *(void *)(v107 + 16)) {
                      goto LABEL_152;
                    }
                    id v76 = *(id *)(v91 + 8 * v73);
                  }
                  id v77 = v76;
                  a1 = *(void *)&v126[0];
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    specialized _ArrayBuffer._consumeAndCreateNew()();
                  }
                  if (v111 < 0) {
                    goto LABEL_148;
                  }
                  if (v74 >= *(void *)(a1 + 16)) {
                    goto LABEL_147;
                  }
                  uint64_t v78 = *(void **)(a1 + v105 + 8 * v73);
                  *(void *)(a1 + v105 + 8 * v73) = v77;

                  specialized Array._endMutation()();
                  if (v104 == v73) {
                    goto LABEL_107;
                  }
                  if (v103 + v73 < v13 || v103 + v73 >= v48) {
                    goto LABEL_149;
                  }
                  if (v106 == (char *)++v73) {
                    goto LABEL_107;
                  }
                }
              }
              goto LABEL_172;
            }
            goto LABEL_106;
          }
          if (v13 != v48)
          {
            if (v48 < v13) {
              goto LABEL_165;
            }
            if (v13 < v48)
            {
              swift_beginAccess();
              if (v13 <= (unint64_t)v92) {
                uint64_t v50 = v92;
              }
              else {
                uint64_t v50 = v13;
              }
              uint64_t v51 = v90 + 272 * v13;
              while (1)
              {
                outlined init with copy of AdaptableTabView.BodyContent((uint64_t)v112, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
                type metadata accessor for Binding<SearchFieldState>(0);
                char v53 = 1;
                a1 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v52 - 8) + 48))(v10, 1, v52);
                _s2os6LoggerVSgWOhTm_1((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
                if (a1 != 1)
                {
                  if (v110[8])
                  {
                    char v53 = 2;
                  }
                  else if (v13 == *(void *)v110)
                  {
                    char v53 = 2;
                  }
                  else
                  {
                    char v53 = 1;
                  }
                }
                if (v50 == v13) {
                  break;
                }
                uint64_t v54 = specialized TabViewCoordinator_Phone.host<A>(tab:tabs:searchAdjustment:selected:environment:)(v51, v117, v53, v114, v115, v116);
                a1 = *(void *)&v126[0];
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  specialized _ArrayBuffer._consumeAndCreateNew()();
                }
                if ((unint64_t)v13 >= *(void *)(a1 + 16)) {
                  goto LABEL_145;
                }
                unint64_t v55 = a1 + 8 * v13;
                uint64_t v56 = *(void **)(v55 + 32);
                *(void *)(v55 + 32) = v54;

                uint64_t result = specialized Array._endMutation()();
                v51 += 272;
                ++v13;
                uint64_t v6 = v113;
                if (v48 == v13) {
                  goto LABEL_46;
                }
              }
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
              goto LABEL_151;
            }
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            swift_bridgeObjectRetain();
            uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            goto LABEL_3;
          }
        }
        else
        {
          unint64_t v57 = v41 >> 62;
          if (v41 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
            uint64_t result = swift_bridgeObjectRelease();
            if (v79 < v13) {
              goto LABEL_159;
            }
          }
          else if (*(void *)(v107 + 16) < v13)
          {
            goto LABEL_159;
          }
          if (v13 < 0) {
            goto LABEL_153;
          }
          if (v57)
          {
            swift_bridgeObjectRetain();
            uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
            uint64_t result = swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v58 = *(void *)(v107 + 16);
          }
          if (v58 < v48) {
            goto LABEL_155;
          }
          if (v48 < 0) {
            goto LABEL_156;
          }
          if (v109)
          {
            if (v48 < (unint64_t)v13) {
              goto LABEL_163;
            }
            if (v13 != v48)
            {
              if (v13 >= (unint64_t)v48)
              {
                __break(1u);
LABEL_171:
                __break(1u);
LABEL_172:
                __break(1u);
                return result;
              }
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
              Swift::Int v60 = v13;
              do
              {
                Swift::Int v61 = v60 + 1;
                _ArrayBuffer._typeCheckSlowPath(_:)(v60);
                Swift::Int v60 = v61;
              }
              while (v48 != v61);
            }
          }
          if (v57)
          {
            swift_bridgeObjectRetain();
            uint64_t v46 = _CocoaArrayWrapper.subscript.getter();
            a1 = v62;
            int64_t v13 = v63;
            unint64_t v45 = v64;
            swift_bridgeObjectRelease();
          }
          else
          {
            unint64_t v45 = (2 * v48) | 1;
            swift_bridgeObjectRetain();
            uint64_t v46 = v107;
            a1 = v88;
          }
          specialized TabViewCoordinator_Phone.removeHosts<A>(_:)(v46, a1, v13, v45);
          uint64_t result = swift_unknownObjectRelease();
        }
LABEL_46:
        unint64_t v43 = (unint64_t)(v108 + 1);
        uint64_t v40 = v98;
        BOOL v25 = v99;
        if (v108 + 1 == v101) {
          goto LABEL_131;
        }
      }
    }
    uint64_t v81 = result;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_133:
    *(void *)uint64_t v124 = MEMORY[0x1E4FBC860];
    uint64_t v82 = *(void *)(v81 + 16);
    if (v82)
    {
      swift_bridgeObjectRetain_n();
      for (uint64_t i = 0; i != v82; ++i)
      {
        uint64_t v84 = *(void **)(v81 + 8 * i + 32);
        if (v84)
        {
          id v85 = v84;
          MEMORY[0x18C115B40]();
          if (*(void *)((*(void *)v124 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v124 & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v38 = *(void *)v124;
      uint64_t v6 = v113;
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v38 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    BOOL v25 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v131 = MEMORY[0x1E4FBC860];
    uint64_t v26 = (uint64_t)&v6[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchState];
    uint64_t v108 = &v6[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_searchIndex];
    int v10 = *(char **)(a1 + 16);
    swift_bridgeObjectRetain();
    uint64_t v112 = (unsigned char *)v26;
    swift_beginAccess();
    uint64_t v27 = 0;
    uint64_t v6 = &v124[8];
    unint64_t v109 = (unint64_t)v126 + 8;
    uint64_t v110 = (unsigned char *)(a1 + 32);
    uint64_t v111 = (uint64_t)&v125;
    BOOL v28 = v10 == 0;
    if (v10) {
      goto LABEL_17;
    }
LABEL_16:
    memset(v126, 0, sizeof(v126));
    uint64_t v27 = v10;
    char v127 = -1;
    while (1)
    {
      outlined init with take of Binding<TabViewCustomization>((uint64_t)v126, (uint64_t)&v129, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: TabEntry)?);
      if (v130[264] == 255) {
        break;
      }
      uint64_t v29 = v129;
      outlined init with take of TabEntry((uint64_t)v130, (uint64_t)v126);
      outlined init with copy of AdaptableTabView.BodyContent((uint64_t)v112, v13, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
      type metadata accessor for Binding<SearchFieldState>(0);
      char v31 = 1;
      int v32 = (*(uint64_t (**)(int64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v13, 1, v30);
      _s2os6LoggerVSgWOhTm_1(v13, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
      if (v32 != 1)
      {
        if (v108[8])
        {
          char v31 = 2;
        }
        else if (*(void *)v108 == v29)
        {
          char v31 = 2;
        }
        else
        {
          char v31 = 1;
        }
      }
      specialized TabViewCoordinator_Phone.host<A>(tab:tabs:searchAdjustment:selected:environment:)((uint64_t)v126, v117, v31, v114, v115, v116);
      MEMORY[0x18C115B40]();
      a1 = *(void *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (a1 >= *(void *)((v131 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      outlined init with copy of TabEntry((uint64_t)v126, (uint64_t)v124);
      if (*(unsigned char *)v111)
      {
        memcpy(v120, v124, sizeof(v120));
        uint64_t v118 = *(void *)&v120[24];
        uint64_t v119 = *(void *)&v120[32];
        outlined copy of TabCustomizationID.Base();
        AnyHashable.init<A>(_:)();
        outlined destroy of TabItemGroup((uint64_t)v120);
      }
      else
      {
        *(_OWORD *)&v120[64] = *(_OWORD *)&v124[64];
        *(_OWORD *)&v120[80] = *(_OWORD *)&v124[80];
        *(void *)&v120[96] = *(void *)&v124[96];
        *(_OWORD *)uint64_t v120 = *(_OWORD *)v124;
        *(_OWORD *)&v120[16] = *(_OWORD *)&v124[16];
        *(_OWORD *)&v120[32] = *(_OWORD *)&v124[32];
        *(_OWORD *)&v120[48] = *(_OWORD *)&v124[48];
        _ViewList_View.viewID.getter();
        outlined destroy of TabItem((uint64_t)v120);
      }
      *(_OWORD *)uint64_t v124 = v121;
      *(_OWORD *)&v124[16] = v122;
      *(void *)&v124[32] = v123;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v25 + 2) + 1, 1, v25);
      }
      unint64_t v34 = *((void *)v25 + 2);
      unint64_t v33 = *((void *)v25 + 3);
      if (v34 >= v33 >> 1) {
        BOOL v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v33 > 1), v34 + 1, 1, v25);
      }
      *((void *)v25 + 2) = v34 + 1;
      uint64_t v35 = &v25[40 * v34];
      long long v36 = *(_OWORD *)v124;
      long long v37 = *(_OWORD *)&v124[16];
      *((void *)v35 + 8) = *(void *)&v124[32];
      *((_OWORD *)v35 + 2) = v36;
      *((_OWORD *)v35 + 3) = v37;
      outlined destroy of TabEntry((uint64_t)v126);
      BOOL v28 = v27 >= v10;
      if (v27 == v10) {
        goto LABEL_16;
      }
LABEL_17:
      if (v28)
      {
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
LABEL_161:
        __break(1u);
LABEL_162:
        __break(1u);
LABEL_163:
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        __break(1u);
        goto LABEL_166;
      }
      outlined init with copy of TabEntry((uint64_t)&v110[272 * (void)v27], (uint64_t)&v124[8]);
      *(void *)&v126[0] = v27;
      outlined init with take of TabEntry((uint64_t)&v124[8], v109);
      ++v27;
    }
    swift_bridgeObjectRelease();
    unint64_t v38 = v131;
    uint64_t v6 = v113;
  }
  unint64_t *v87 = v38;
  swift_bridgeObjectRelease();
  *(void *)&v6[OBJC_IVAR____TtC7SwiftUI24TabViewCoordinator_Phone_currentTabIdentifiers] = v25;
  return swift_bridgeObjectRelease();
}

uint64_t specialized TabViewCoordinator_Phone.operationToAcceptDropItems(from:onto:tabCache:)(void *a1, uint64_t a2)
{
  TabViewCoordinator_Phone.getElement(for:tabCache:)(a1, a2, (uint64_t)v6);
  if (v7)
  {
    ViewTraitCollection.value<A>(for:defaultValue:)();
    outlined destroy of TabItem((uint64_t)v6);
    if (v3)
    {
      outlined consume of IdentifiedDropConfiguration?(v3, v4, v5);
      return 2;
    }
  }
  else
  {
    outlined destroy of PlatformItem.SelectionContent?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for TabItem?, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBB718]);
  }
  return 0;
}

void specialized TabViewCoordinator_Phone.updatedSelection(didSelect:element:selectionCache:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    id v11 = a1;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v26 = v3;
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v28 = v23;
      long long v24 = a1;
      *(_DWORD *)unint64_t v14 = 136315138;
      uint64_t v22 = v14;
      id v15 = objc_msgSend(v11, sel_title, v14 + 4);
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v25 = a2;
      unint64_t v18 = v17;

      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v28);
      a1 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a2 = v25;
      swift_bridgeObjectRelease();
      uint64_t v19 = v22;
      _os_log_impl(&dword_1872C6000, v12, v13, "group: didSelect element: %s", v22, 0xCu);
      uint64_t v20 = v23;
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v20, -1, -1);
      MEMORY[0x18C119C60](v19, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  TabViewCoordinator_Phone.getIndex(selectedElement:selectionCache:)(a1, a2);
}

uint64_t specialized TabViewCoordinator_Phone.updatedOrder(within:newOrder:customization:tabCache:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  id v59 = a1;
  uint64_t v5 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1F4188790](v5);
  Swift::Int v60 = (char *)v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v64 = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v63 = (uint64_t)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v13 - 8);
  id v15 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    uint64_t v58 = v18;
    int v57 = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      v67[0] = v55;
      uint64_t v56 = v5;
      *(_DWORD *)uint64_t v20 = 136315138;
      v53[1] = v20 + 4;
      uint64_t v54 = v20;
      uint64_t v21 = swift_bridgeObjectRetain();
      uint64_t v22 = MEMORY[0x18C115B70](v21, MEMORY[0x1E4FBB1A0]);
      unint64_t v24 = v23;
      swift_bridgeObjectRelease();
      v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v25 = v58;
      uint64_t v26 = v54;
      _os_log_impl(&dword_1872C6000, v58, (os_log_type_t)v57, "group: didCustomizeDisplayOrder %s", v54, 0xCu);
      uint64_t v27 = v55;
      swift_arrayDestroy();
      uint64_t v28 = v27;
      uint64_t v5 = v56;
      MEMORY[0x18C119C60](v28, -1, -1);
      MEMORY[0x18C119C60](v26, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  }
  uint64_t v29 = v62;
  uint64_t v30 = v64;
  outlined init with copy of AdaptableTabView.BodyContent(v61, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v30) == 1)
  {
    char v31 = type metadata accessor for Binding<TabViewCustomization>?;
    uint64_t v32 = (uint64_t)v9;
  }
  else
  {
    outlined init with take of Binding<TabViewCustomization>((uint64_t)v9, v63, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
    if (v29)
    {
      uint64_t v33 = a2;
      uint64_t v34 = v5;
      id v35 = objc_msgSend(v59, sel__identifier);
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v38 = v37;

      if (*(void *)(v29 + 16) && (unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(v36, v38), (v40 & 1) != 0))
      {
        outlined init with copy of TabEntry(*(void *)(v29 + 56) + 272 * v39, (uint64_t)v65);
      }
      else
      {
        memset(v65, 0, sizeof(v65));
        unsigned __int8 v66 = -1;
      }
      swift_bridgeObjectRelease();
      if (v66 == 255)
      {
        _s2os6LoggerVSgWOhTm_1(v63, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
        return outlined destroy of PlatformItem.SelectionContent?((uint64_t)v65, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, MEMORY[0x1E4FBB718]);
      }
      outlined init with take of TabEntry((uint64_t)v65, (uint64_t)v67);
      swift_bridgeObjectRetain();
      unint64_t v41 = specialized Sequence.compactMap<A>(_:)(v33, v29);
      swift_bridgeObjectRelease();
      uint64_t v42 = TabEntry.resolvedCustomizationID.getter();
      uint64_t v44 = v43;
      char v46 = v45 & 1;
      MEMORY[0x18C113DA0](v64);
      if (*((void *)v41 + 2))
      {
        uint64_t v47 = *(int *)(v34 + 24);
        int64_t v48 = v60;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v65[0] = *(void *)&v48[v47];
        *(void *)&v48[v47] = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v41, v42, v44, v46, isUniquelyReferenced_nonNull_native);
        *(void *)&v48[v47] = v65[0];
      }
      else
      {
        swift_bridgeObjectRelease();
        specialized Dictionary._Variant.removeValue(forKey:)(v42, v44, v46);
      }
      swift_bridgeObjectRelease();
      outlined consume of TabCustomizationID.Base();
      uint64_t v51 = v63;
      uint64_t v52 = (uint64_t)v60;
      dispatch thunk of AnyLocation.set(_:transaction:)();
      _s2os6LoggerVSgWOhTm_1(v52, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
      outlined destroy of TabEntry((uint64_t)v67);
      char v31 = type metadata accessor for Binding<TabViewCustomization>;
      uint64_t v32 = v51;
    }
    else
    {
      char v31 = type metadata accessor for Binding<TabViewCustomization>;
      uint64_t v32 = v63;
    }
  }
  return _s2os6LoggerVSgWOhTm_1(v32, (uint64_t (*)(void))v31);
}

uint64_t specialized TabViewCoordinator_Phone.updatedSidebarVisibility(for:customization:tabCache:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v71 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1F4188790](v71);
  uint64_t v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v73 = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v76 = (uint64_t)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.tabView.getter();
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  uint64_t v72 = a3;
  if (v19 == 1)
  {
    _s2os6LoggerVSgWOhTm_1((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Logger?);
    unint64_t v20 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t result = *(void *)(a1 + 16);
    if (result < 1) {
      return result;
    }
    goto LABEL_9;
  }
  uint64_t v75 = a1;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    unint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v77 = a2;
    uint64_t v25 = v24;
    *(_WORD *)unint64_t v24 = 0;
    _os_log_impl(&dword_1872C6000, v22, v23, "visibilityDidChange:forTabs:", v24, 2u);
    uint64_t v26 = v25;
    a2 = v77;
    MEMORY[0x18C119C60](v26, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  a3 = v72;
  a1 = v75;
  unint64_t v20 = v75 & 0xC000000000000001;
  if ((v75 & 0xC000000000000001) == 0) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t result = __CocoaSet.count.getter();
  if (result < 1) {
    return result;
  }
LABEL_9:
  outlined init with copy of AdaptableTabView.BodyContent(a2, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v73) == 1)
  {
    uint64_t v27 = type metadata accessor for Binding<TabViewCustomization>?;
    uint64_t v28 = (uint64_t)v10;
  }
  else
  {
    uint64_t v29 = v76;
    outlined init with take of Binding<TabViewCustomization>((uint64_t)v10, v76, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
    if (a3)
    {
      if (v20)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.makeIterator()();
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
        lazy protocol witness table accessor for type _UITab and conformance NSObject();
        uint64_t result = Set.Iterator.init(_cocoa:)();
        a1 = v92[34];
        uint64_t v69 = v92[35];
        uint64_t v30 = v92[36];
        uint64_t v31 = v92[37];
        unint64_t v32 = v92[38];
      }
      else
      {
        uint64_t v33 = -1 << *(unsigned char *)(a1 + 32);
        uint64_t v34 = *(void *)(a1 + 56);
        uint64_t v69 = a1 + 56;
        uint64_t v35 = ~v33;
        uint64_t v36 = -v33;
        if (v36 < 64) {
          uint64_t v37 = ~(-1 << v36);
        }
        else {
          uint64_t v37 = -1;
        }
        unint64_t v32 = v37 & v34;
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v30 = v35;
        uint64_t v31 = 0;
      }
      uint64_t v65 = v30;
      uint64_t v67 = a1 & 0x7FFFFFFFFFFFFFFFLL;
      int64_t v68 = (unint64_t)(v30 + 64) >> 6;
      uint64_t v70 = &v91;
      uint64_t v66 = MEMORY[0x1E4FBC838] + 8;
      uint64_t v75 = a1;
      if ((a1 & 0x8000000000000000) == 0) {
        goto LABEL_25;
      }
LABEL_22:
      uint64_t v38 = __CocoaSet.Iterator.next()();
      if (v38)
      {
        *(void *)uint64_t v90 = v38;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for _UITab);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v39 = (id)v92[0];
        swift_unknownObjectRelease();
        uint64_t v40 = v31;
        uint64_t v41 = v32;
        while (v39)
        {
          uint64_t v77 = v41;
          id v46 = objc_msgSend(v39, sel__identifier, v65, v66, v67);
          uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v49 = v48;

          if (*(void *)(a3 + 16) && (unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)(v47, v49), (v51 & 1) != 0))
          {
            outlined init with copy of TabEntry(*(void *)(a3 + 56) + 272 * v50, (uint64_t)v90);
          }
          else
          {
            memset(v90, 0, sizeof(v90));
            unsigned __int8 v91 = -1;
          }
          swift_bridgeObjectRelease();
          if (v91 == 255)
          {

            uint64_t result = outlined destroy of PlatformItem.SelectionContent?((uint64_t)v90, (unint64_t *)&lazy cache variable for type metadata for TabEntry?, (uint64_t)&type metadata for TabEntry, MEMORY[0x1E4FBB718]);
            uint64_t v31 = v40;
            unint64_t v32 = v77;
            a1 = v75;
            if (v75 < 0) {
              goto LABEL_22;
            }
          }
          else
          {
            outlined init with take of TabEntry((uint64_t)v90, (uint64_t)v92);
            unsigned int v74 = objc_msgSend(v39, sel__isVisible);
            outlined init with copy of TabEntry((uint64_t)v92, (uint64_t)v90);
            if (*v70)
            {
              memcpy(v89, v90, 0x108uLL);
              uint64_t v53 = *((void *)&v89[1] + 1);
              uint64_t v52 = *(void *)&v89[2];
              char v54 = BYTE8(v89[2]);
              outlined copy of TabCustomizationID.Base();
              outlined destroy of TabItemGroup((uint64_t)v89);
            }
            else
            {
              v89[4] = *(_OWORD *)&v90[64];
              v89[5] = *(_OWORD *)&v90[80];
              *(void *)&v89[6] = *(void *)&v90[96];
              v89[0] = *(_OWORD *)v90;
              v89[1] = *(_OWORD *)&v90[16];
              v89[2] = *(_OWORD *)&v90[32];
              v89[3] = *(_OWORD *)&v90[48];
              if ((TabItem.needsCustomizationIDForEnablement.getter() & 1) == 0) {
                goto LABEL_54;
              }
              uint64_t v85 = *((void *)&v89[5] + 1);
              uint64_t v55 = one-time initialization token for defaultValue;
              swift_bridgeObjectRetain();
              if (v55 != -1) {
                swift_once();
              }
              __int16 v78 = static TabOptions.TraitKey.defaultValue;
              char v79 = byte_1E90FC582;
              long long v80 = *(_OWORD *)&qword_1E90FC588;
              __int16 v81 = word_1E90FC598;
              char v82 = byte_1E90FC59A;
              uint64_t v83 = qword_1E90FC5A0;
              __int16 v84 = word_1E90FC5A8;
              ViewTraitCollection.value<A>(for:defaultValue:)();
              swift_bridgeObjectRelease();
              uint64_t v53 = v86;
              uint64_t v52 = v87;
              int v56 = v88;
              outlined copy of TabCustomizationID?(v86, v87, v88);
              outlined consume of TabCustomizationID?(v53, v52, v56);
              swift_bridgeObjectRelease();
              if (v56 == 255)
              {
LABEL_54:
                uint64_t v53 = TabItem.platformIdentifier.getter();
                uint64_t v52 = v57;
                char v54 = 1;
              }
              else
              {
                char v54 = v56 & 1;
              }
              outlined destroy of TabItem((uint64_t)v89);
            }
            MEMORY[0x18C113DA0](v73);
            uint64_t v58 = *(int *)(v71 + 20);
            uint64_t v59 = *(void *)&v7[v58];
            if (*(void *)(v59 + 16)
              && (unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v53, v52, v54), (v61 & 1) != 0))
            {
              __int16 v62 = *(unsigned __int8 *)(*(void *)(v59 + 56) + 2 * v60 + 1);
            }
            else
            {
              __int16 v62 = 0;
            }
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            *(void *)uint64_t v90 = *(void *)&v7[v58];
            *(void *)&v7[v58] = 0x8000000000000000;
            if (v74) {
              __int16 v64 = 1;
            }
            else {
              __int16 v64 = 2;
            }
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v64 | (v62 << 8), v53, v52, v54, isUniquelyReferenced_nonNull_native);
            *(void *)&v7[v58] = *(void *)v90;
            swift_bridgeObjectRelease();
            outlined consume of TabCustomizationID.Base();
            dispatch thunk of AnyLocation.set(_:transaction:)();
            _s2os6LoggerVSgWOhTm_1((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);

            uint64_t result = outlined destroy of TabEntry((uint64_t)v92);
            uint64_t v31 = v40;
            unint64_t v32 = v77;
            a3 = v72;
            a1 = v75;
            if (v75 < 0) {
              goto LABEL_22;
            }
          }
LABEL_25:
          if (v32)
          {
            uint64_t v41 = (v32 - 1) & v32;
            unint64_t v42 = __clz(__rbit64(v32)) | (v31 << 6);
            uint64_t v40 = v31;
          }
          else
          {
            int64_t v43 = v31 + 1;
            if (__OFADD__(v31, 1))
            {
              __break(1u);
              return result;
            }
            if (v43 >= v68) {
              break;
            }
            unint64_t v44 = *(void *)(v69 + 8 * v43);
            uint64_t v40 = v31 + 1;
            if (!v44)
            {
              uint64_t v40 = v31 + 2;
              if (v31 + 2 >= v68) {
                break;
              }
              unint64_t v44 = *(void *)(v69 + 8 * v40);
              if (!v44)
              {
                uint64_t v40 = v31 + 3;
                if (v31 + 3 >= v68) {
                  break;
                }
                unint64_t v44 = *(void *)(v69 + 8 * v40);
                if (!v44)
                {
                  uint64_t v40 = v31 + 4;
                  if (v31 + 4 >= v68) {
                    break;
                  }
                  unint64_t v44 = *(void *)(v69 + 8 * v40);
                  if (!v44)
                  {
                    uint64_t v45 = v31 + 5;
                    while (v68 != v45)
                    {
                      unint64_t v44 = *(void *)(v69 + 8 * v45++);
                      if (v44)
                      {
                        uint64_t v40 = v45 - 1;
                        a1 = v75;
                        goto LABEL_40;
                      }
                    }
                    break;
                  }
                }
              }
            }
LABEL_40:
            uint64_t v41 = (v44 - 1) & v44;
            unint64_t v42 = __clz(__rbit64(v44)) + (v40 << 6);
          }
          id v39 = *(id *)(*(void *)(a1 + 48) + 8 * v42);
        }
      }
      outlined consume of Set<UIPress>.Iterator._Variant();
      uint64_t v27 = type metadata accessor for Binding<TabViewCustomization>;
      uint64_t v28 = v76;
    }
    else
    {
      uint64_t v27 = type metadata accessor for Binding<TabViewCustomization>;
      uint64_t v28 = v29;
    }
  }
  return _s2os6LoggerVSgWOhTm_1(v28, (uint64_t (*)(void))v27);
}